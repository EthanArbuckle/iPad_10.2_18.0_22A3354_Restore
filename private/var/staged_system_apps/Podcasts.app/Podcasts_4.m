uint64_t sub_1002F1310@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __n128 v4;

  a2[3] = type metadata accessor for PodcastsIntentDispatcher(0);
  a2[4] = sub_100026844((unint64_t *)&unk_100562AC0, (uint64_t (*)(uint64_t))&type metadata accessor for PodcastsIntentDispatcher, (uint64_t)&protocol conformance descriptor for PodcastsIntentDispatcher);
  sub_1000242A8(a2);
  v4 = swift_retain(a1);
  return PodcastsIntentDispatcher.init(asPartOf:)(v4);
}

uint64_t sub_1002F1388()
{
  return AppBootstrap.buildBackgroundDependencies()();
}

uint64_t sub_1002F13AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD *v11;

  v3 = *a2;
  v4 = sub_10003F544(&qword_100558C30);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2;
  static MetricsFieldsContext.Property<A>.pageContextTracker.getter(v6);
  MetricsFieldsContext.addValue<A>(_:forProperty:)(&v11, v8, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

id sub_1002F1450()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint8_t *v27;
  os_signpost_id_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id result;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  objc_class *v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  void *ObjCClassFromMetadata;
  id v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  void *v110;
  _QWORD v111[6];

  v0 = type metadata accessor for ShelfKitCollectionViewsBootstrap(0);
  v107 = *(_QWORD *)(v0 - 8);
  v108 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v103 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OSSignposter(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v103 - v8;
  v10 = type metadata accessor for OSSignpostID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v103 - v16;
  v18 = static OSSignposter.bootstrap.getter(v15);
  v19 = OSSignposter.logHandle.getter(v18);
  OSSignpostID.init(log:)(v19);
  v105 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  v106 = v3;
  v20 = v105(v9, v3);
  v21 = static OSSignposter.bootstrap.getter(v20);
  v22 = OSSignposter.logHandle.getter(v21);
  v23 = static os_signpost_type_t.begin.getter(v22);
  v24 = OS_os_log.signpostsEnabled.getter();
  v109 = v17;
  v104 = v11;
  if ((v24 & 1) != 0)
  {
    v25 = v11;
    v26 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v26(v14, v109, v10);
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    v28 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, v23, v28, "AppBootstrap.background", "", v27, 2u);
    swift_slowDealloc(v27, -1, -1);

    v29 = *(void (**)(char *, uint64_t))(v25 + 8);
    v17 = v109;
    v29(v14, v10);
  }
  else
  {

    v26 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  }
  v30 = v10;
  v26(v14, v17, v10);
  v31 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = OSSignpostIntervalState.init(id:isOpen:)(v14, 1);
  v105(v7, v106);
  v33 = objc_msgSend((id)objc_opt_self(AMSProcessInfo), "currentProcess");
  v34 = ShelfKitCollectionViewsBootstrap.init(process:)(v33);
  v35 = ShelfKitCollectionViewsBootstrap.buildBackgroundDependencies()(v34);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v2, v108);
  v36 = (void *)objc_opt_self(MTReachability);
  result = objc_msgSend(v36, "sharedInstance");
  if (result)
  {
    v38 = result;
    v108 = v30;
    v39 = sub_100005EC8(0, (unint64_t *)&unk_10055C450, &off_1004A4510);
    v111[0] = v38;
    v40 = BaseObjectGraph.satisfying<A>(_:with:)(v39, v111, v39);

    swift_release(v35);
    result = objc_msgSend(v36, "sharedInstance");
    if (result)
    {
      v41 = result;
      v42 = swift_allocObject(&unk_1004C0BC8, 24, 7);
      v43 = sub_10003F544(&qword_10055B8A8);
      v111[0] = v41;
      v44 = BaseObjectGraph.satisfying<A>(_:with:)(v43, v111, v43);

      swift_release(v40);
      v45 = type metadata accessor for PlaybackController(0);
      v46 = BaseObjectGraph.satisfying<A>(_:with:)(v45, sub_1002F0788, 0, v45);
      swift_release(v44);
      v47 = sub_10003F544((uint64_t *)&unk_10055C3F0);
      v48 = type metadata accessor for ChannelLockupGenerator();
      v49 = swift_allocObject(v48, 16, 7);
      v111[3] = v48;
      v111[4] = sub_100026844(&qword_10055C6C8, (uint64_t (*)(uint64_t))type metadata accessor for ChannelLockupGenerator, (uint64_t)&protocol conformance descriptor for ChannelLockupGenerator);
      v111[0] = v49;
      v50 = BaseObjectGraph.satisfying<A>(_:with:)(v47, v111, v47);
      swift_release(v46);
      sub_10003D380(v111);
      *(_QWORD *)(v42 + 16) = v50;
      v51 = sub_10003F544(&qword_10055E200);
      swift_retain(v50);
      BaseObjectGraph.inject<A>(_:)(v111, v51, v51);
      v52 = v111[0];
      v53 = sub_100005EC8(0, &qword_100553620, MTLegacyDownloadNotifier_ptr);
      BaseObjectGraph.inject<A>(_:)(&v110, v53, v53);
      v54 = v110;
      v55 = (objc_class *)type metadata accessor for LibraryDataProvider(0);
      v56 = objc_allocWithZone(v55);
      v57 = LibraryDataProvider.init(contextProvider:downloadsNotifier:objectGraph:)(v52, v54, v50);
      v58 = *(_QWORD *)(v42 + 16);
      swift_retain(v58);
      v59 = LibraryDataProvider.addApplicationBackgroundDependencies(to:)();
      swift_release(v58);
      v111[0] = v57;
      v60 = BaseObjectGraph.satisfying<A>(_:with:)(v55, v111, v55);
      swift_release(v59);
      v61 = sub_10003F544(&qword_1005609B0);
      v62 = sub_100026844(&qword_100553E60, type metadata accessor for LibraryDataProvider, (uint64_t)&protocol conformance descriptor for LibraryDataProvider);
      v111[0] = v57;
      v111[1] = v62;
      v63 = v57;
      v64 = BaseObjectGraph.satisfying<A>(_:with:)(v61, v111, v61);

      swift_release(v60);
      v65 = type metadata accessor for EpisodeController();
      v66 = BaseObjectGraph.satisfying<A>(_:with:)(v65, sub_1002F0800, 0, v65);
      swift_release(v64);
      v67 = sub_10003F544((uint64_t *)&unk_100562A90);
      v68 = BaseObjectGraph.satisfying<A>(_:with:)(v67, sub_1002EFB0C, 0, v67);
      swift_release(v66);
      v69 = sub_10003F544((uint64_t *)&unk_10055C440);
      v70 = BaseObjectGraph.satisfying<A>(_:with:)(v69, sub_1002F08D4, 0, v69);
      v71 = swift_release(v68);
      v72 = static Podcasts.isBlueMoonEnabled()(v71);
      v73 = BaseObjectGraph.conditionalIf(_:do:else:)((v72 & 1) == 0, sub_1002F09EC, 0, j__swift_retain, 0);
      v74 = swift_release(v70);
      v75 = static Podcasts.isBlueMoonEnabled()(v74);
      v76 = BaseObjectGraph.conditionalIf(_:do:else:)(v75 & 1, sub_1002F0A78, 0, j__swift_retain, 0);
      swift_release(v73);
      v77 = sub_100005EC8(0, (unint64_t *)&unk_100562AA0, &off_1004A4490);
      v78 = objc_msgSend((id)swift_getObjCClassFromMetadata(v77), "sharedInstance");
      v111[0] = v78;
      v79 = BaseObjectGraph.satisfying<A>(_:with:)(v77, v111, v77);

      swift_release(v76);
      v80 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v80);
      v82 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
      v111[0] = v82;
      v83 = BaseObjectGraph.satisfying<A>(_:with:)(v80, v111, v80);

      swift_release(v79);
      v84 = sub_10003F544((uint64_t *)&unk_100562AB0);
      v85 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
      v111[0] = v85;
      v86 = BaseObjectGraph.satisfying<A>(_:with:)(v84, v111, v84);

      swift_release(v83);
      v87 = sub_10003F544((uint64_t *)&unk_10055C460);
      v88 = sub_100005EC8(0, (unint64_t *)&unk_10055C6B0, off_1004A4438);
      v89 = objc_msgSend((id)swift_getObjCClassFromMetadata(v88), "sharedInstance");
      v111[0] = v89;
      v90 = BaseObjectGraph.satisfying<A>(_:with:)(v87, v111, v87);

      swift_release(v86);
      v91 = type metadata accessor for SiriIntentDonator(0);
      v92 = BaseObjectGraph.satisfying<A>(_:with:)(v91, sub_1002F0B74, 0, v91);
      swift_release(v90);
      v93 = BaseObjectGraph.chainingIntentDispatcher(dispatcher:)(sub_1002F0BF8, 0);
      swift_release(v92);
      v94 = sub_10003F544((uint64_t *)&unk_10055B8B0);
      v95 = BaseObjectGraph.satisfying<A>(_:with:)(v94, sub_1002F039C, 0, v94);
      swift_release(v93);
      v96 = BaseObjectGraph.withName(_:)(0xD000000000000024, 0x800000010043C3B0);
      swift_release(v95);
      v97 = *(_QWORD *)(v42 + 16);
      *(_QWORD *)(v42 + 16) = v96;
      swift_release(v97);
      type metadata accessor for AppDependencyManager(0);
      v98 = static AppDependencyManager.shared.getter();
      LOBYTE(v110) = 2;
      v99 = sub_100175104();
      AnyHashable.init<A>(_:)(&v110, &type metadata for AppDependencyKey, v99);
      v100 = type metadata accessor for BaseObjectGraph(0);
      v101 = swift_retain(v42);
      AppDependencyManager.add<A>(key:dependency:)(v111, sub_1002F297C, v42, v100, v101);

      swift_release(v98);
      swift_release(v42);
      sub_100007A28((uint64_t)v111, &qword_100554540);
      swift_beginAccess(v42 + 16, v111, 0, 0);
      v102 = *(_QWORD *)(v42 + 16);
      swift_retain(v102);
      swift_release(v42);
      sub_1002F04B0("AppBootstrap.background", 23, 2, v32);
      swift_release(v32);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v109, v108);
      return (id)v102;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _s8Podcasts12AppBootstrapC27buildForegroundDependencies7basedOn9JetEngine15BaseObjectGraphCAH_tF_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint8_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  os_signpost_id_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *ObjCClassFromMetadata;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(char *, uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char v110[9];
  _QWORD v111[3];
  ValueMetadata *v112;
  unint64_t v113;

  v109 = a1;
  v1 = type metadata accessor for ShelfKitCollectionViewsBootstrap(0);
  v108 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v107 = (char *)&v103 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OSSignposter(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v103 - v8;
  v10 = type metadata accessor for OSSignpostID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v103 - v16;
  v18 = static OSSignposter.bootstrap.getter(v15);
  v19 = OSSignposter.logHandle.getter(v18);
  OSSignpostID.init(log:)(v19);
  v105 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  v106 = v3;
  v20 = v105(v9, v3);
  v21 = static OSSignposter.bootstrap.getter(v20);
  v22 = OSSignposter.logHandle.getter(v21);
  v23 = static os_signpost_type_t.begin.getter(v22);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v24(v14, v17, v10);
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    v104 = v1;
    v26 = v17;
    v27 = v11;
    v28 = v10;
    v29 = v25;
    *(_WORD *)v25 = 0;
    v30 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, v23, v30, "AppBootstrap.foreground", "", v29, 2u);
    v31 = v29;
    v10 = v28;
    v11 = v27;
    v17 = v26;
    v1 = v104;
    swift_slowDealloc(v31, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  else
  {

    v24 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  }
  v24(v14, v17, v10);
  v32 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v33 = OSSignpostIntervalState.init(id:isOpen:)(v14, 1);
  v105(v7, v106);
  v34 = objc_msgSend((id)objc_opt_self(AMSProcessInfo), "currentProcess");
  v35 = v107;
  ShelfKitCollectionViewsBootstrap.init(process:)(v34);
  v36 = ShelfKitCollectionViewsBootstrap.buildForegroundDependencies(basedOn:)(v109);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v35, v1);
  v37 = sub_10003F544(&qword_100562B40);
  v38 = v17;
  v39 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v112 = &type metadata for UIAppSettingsBridge;
  v113 = sub_10024FAC8();
  v111[0] = v39;
  v40 = BaseObjectGraph.satisfying<A>(_:with:)(v37, v111, v37);
  swift_release(v36);
  sub_10003D380(v111);
  v41 = sub_10003F544(&qword_10055C490);
  v42 = objc_msgSend((id)objc_opt_self(IMNetworkObserver), "sharedInstance");
  v111[0] = v42;
  v43 = BaseObjectGraph.satisfying<A>(_:with:)(v41, v111, v41);

  swift_release(v40);
  v44 = sub_100005EC8(0, &qword_1005536C0, MTImageStore_ptr);
  v45 = objc_msgSend((id)swift_getObjCClassFromMetadata(v44), "defaultStore");
  v111[0] = v45;
  v46 = BaseObjectGraph.satisfying<A>(_:with:)(v44, v111, v44);

  swift_release(v43);
  v47 = sub_100005EC8(0, &qword_100554590, &off_1004A4480);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v47);
  v49 = v10;
  v50 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
  v111[0] = v50;
  v51 = BaseObjectGraph.satisfying<A>(_:with:)(v47, v111, v47);

  swift_release(v46);
  v52 = sub_10003F544((uint64_t *)&unk_100553BA0);
  v53 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
  v54 = sub_10024FA70();
  v111[0] = v53;
  v111[1] = v54;
  v55 = BaseObjectGraph.satisfying<A>(_:with:)(v52, v111, v52);

  swift_release(v51);
  v56 = sub_10003F544(&qword_10055C4A0);
  v57 = objc_msgSend((id)objc_opt_self(MTSyncController), "sharedInstance");
  v111[0] = v57;
  v58 = BaseObjectGraph.satisfying<A>(_:with:)(v56, v111, v56);

  swift_release(v55);
  v59 = type metadata accessor for Podcasts(0);
  v112 = (ValueMetadata *)v59;
  v113 = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v60 = sub_1000242A8(v111);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v60, enum case for Podcasts.blueMooniOS(_:), v59);
  LOBYTE(v59) = isFeatureEnabled(_:)(v111);
  sub_10003D380(v111);
  v61 = BaseObjectGraph.conditionalIf(_:do:else:)(v59 & 1, sub_1002EFAD4, 0, j__swift_retain, 0);
  swift_release(v58);
  v62 = sub_10003F544((uint64_t *)&unk_100562A90);
  v63 = BaseObjectGraph.satisfying<A>(_:with:)(v62, sub_1002EFB0C, 0, v62);
  swift_release(v61);
  v64 = type metadata accessor for BookmarksController(0);
  v65 = BaseObjectGraph.satisfying<A>(_:with:)(v64, sub_1002EFB20, 0, v64);
  swift_release(v63);
  v66 = sub_10003F544(&qword_10055C4A8);
  v67 = BaseObjectGraph.satisfying<A>(_:with:)(v66, sub_1002EFB44, 0, v66);
  swift_release(v65);
  v68 = sub_10003F544((uint64_t *)&unk_10055C4B0);
  v69 = BaseObjectGraph.satisfying<A>(_:with:)(v68, sub_1002EFBC4, 0, v68);
  swift_release(v67);
  v70 = sub_10003F544(&qword_100565950);
  v71 = BaseObjectGraph.satisfying<A>(_:with:)(v70, sub_1002EFBF0, 0, v70);
  swift_release(v69);
  v72 = type metadata accessor for RecommendationsMetadataProvider(0);
  v73 = BaseObjectGraph.satisfying<A>(_:with:)(v72, sub_1002EFC90, 0, v72);
  swift_release(v71);
  v74 = type metadata accessor for HomePageProvider(0);
  v75 = BaseObjectGraph.satisfying<A>(_:with:)(v74, sub_1002EFCB4, 0, v74);
  swift_release(v73);
  v76 = type metadata accessor for EpisodeUpsellBannerDataProvider(0);
  v77 = BaseObjectGraph.satisfying<A>(_:with:)(v76, sub_1002EFD14, 0, v76);
  swift_release(v75);
  v78 = sub_10003F544(&qword_10055C4C0);
  v79 = BaseObjectGraph.satisfying<A>(_:with:)(v78, sub_1002EFD38, 0, v78);
  v80 = swift_release(v77);
  v81 = static Podcasts.isBlueMoonEnabled()(v80);
  v82 = BaseObjectGraph.conditionalIf(_:do:else:)(v81 & 1, sub_1002EFDB4, 0, j__swift_retain, 0);
  swift_release(v79);
  v83 = sub_10003F544(&qword_10055C4C8);
  v84 = BaseObjectGraph.satisfying<A>(_:with:)(v83, sub_1002EFE94, 0, v83);
  swift_release(v82);
  v85 = type metadata accessor for NowPlayingAlignmentCoordinator(0);
  v86 = BaseObjectGraph.satisfying<A>(_:with:)(v85, sub_1002F0374, 0, v85);
  swift_release(v84);
  v87 = type metadata accessor for PageContextTracker(0);
  v88 = static PageContextTracker.shared.getter();
  v111[0] = v88;
  swift_retain(v88);
  v89 = BaseObjectGraph.satisfying<A>(_:with:)(v87, v111, v87);
  v90 = swift_retain(v88);
  v91 = BaseObjectGraph.transformingMetricsFieldsContext(with:)(sub_1002F29C0, v88, v90);
  swift_release(v86);
  swift_release(v89);
  swift_release_n(v88, 3);
  v92 = BaseObjectGraph.chainingIntentDispatcher(dispatcher:)(j___s9JetEngine22NativeIntentDispatcherVACycfC, 0);
  swift_release(v91);
  v93 = sub_10003F544((uint64_t *)&unk_10055B8B0);
  v94 = BaseObjectGraph.satisfying<A>(_:with:)(v93, sub_1002F039C, 0, v93);
  swift_release(v92);
  v95 = type metadata accessor for OAuthController(0);
  v96 = BaseObjectGraph.satisfying<A>(_:with:)(v95, sub_1002F03B0, 0, v95);
  swift_release(v94);
  v97 = BaseObjectGraph.withName(_:)(0xD000000000000019, 0x800000010043C400);
  swift_release(v96);
  type metadata accessor for AppDependencyManager(0);
  v98 = static AppDependencyManager.shared.getter();
  v110[0] = 1;
  v99 = sub_100175104();
  AnyHashable.init<A>(_:)(v110, &type metadata for AppDependencyKey, v99);
  v100 = type metadata accessor for BaseObjectGraph(0);
  v101 = swift_retain(v97);
  AppDependencyManager.add<A>(key:dependency:)(v111, sub_100175148, v97, v100, v101);
  swift_release(v98);
  swift_release(v97);
  sub_100007A28((uint64_t)v111, &qword_100554540);
  sub_1002F04B0("AppBootstrap.foreground", 23, 2, v33);
  swift_release(v33);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v38, v49);
  return v97;
}

uint64_t type metadata accessor for AppBootstrap()
{
  return objc_opt_self(_TtC8Podcasts12AppBootstrap);
}

uint64_t *initializeBufferWithCopyOfBuffer for AppBootstrap.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1002F2748(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

double sub_1002F2748(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  double result;

  if (a2 >> 62)
  {
    if (a2 >> 62 != 1)
      return result;
    v2 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain(a1);
    a1 = v2;
  }
  *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  return result;
}

uint64_t destroy for AppBootstrap.State(uint64_t a1)
{
  return sub_1002C77F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for AppBootstrap.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1002F2748(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1002C77F0(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AppBootstrap.State(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1002C77F0(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppBootstrap.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 16382);
  v3 = (((*(_QWORD *)(a1 + 8) >> 50) >> 12) | (4
                                                           * ((*(_QWORD *)(a1 + 8) >> 50) & 0xC00 | ((*(_QWORD *)(a1 + 8) & 7) << 7) | (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AppBootstrap.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFD)
  {
    *(_QWORD *)result = a2 - 16382;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1002F28EC(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1] >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

uint64_t sub_1002F2908(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_1002F2918(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 2)
  {
    v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *result &= 0xFFFFFFFFFFFFFF8uLL;
    result[1] = v2;
  }
  else
  {
    *result = 8 * (a2 - 2);
    result[1] = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppBootstrap.State()
{
  return &type metadata for AppBootstrap.State;
}

uint64_t sub_1002F2958()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

double sub_1002F297C@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 0, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *a1 = v3;
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

uint64_t sub_1002F29C0(uint64_t a1)
{
  _QWORD *v1;

  return sub_1002F13AC(a1, v1);
}

uint64_t sub_1002F29CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6, double *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  __int128 v34[2];

  v12 = v11;
  v33 = a5;
  v20 = sub_10003F544(&qword_10055D840);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = ShowHeader.primaryArtwork.getter(v21);
  HeaderModel.PrimaryArtwork.artwork.getter();
  swift_release(v24);
  v25 = type metadata accessor for ArtworkModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v23, 1, v25) == 1)
    return sub_100007A28((uint64_t)v23, &qword_10055D840);
  v31 = a3;
  v32 = a6;
  v27 = *a7;
  v28 = a7[1];
  v29 = swift_allocObject(&unk_1004C0CA8, 24, 7);
  swift_weakInit(v29 + 16, v12);
  sub_10000A520(a1, (uint64_t)v34);
  v30 = swift_allocObject(&unk_1004C0D48, 128, 7);
  *(_QWORD *)(v30 + 16) = v29;
  sub_10002099C(v34, v30 + 24);
  *(_QWORD *)(v30 + 64) = a2;
  *(_BYTE *)(v30 + 72) = v33;
  *(_QWORD *)(v30 + 80) = a8;
  *(_QWORD *)(v30 + 88) = a9;
  *(_QWORD *)(v30 + 96) = a10;
  *(_QWORD *)(v30 + 104) = a11;
  *(_QWORD *)(v30 + 112) = v31;
  *(_QWORD *)(v30 + 120) = a4;
  swift_bridgeObjectRetain(a4);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1002DE268(v32, (uint64_t)sub_1002F4988, v30, v27, v28);
  swift_release(v29);
  swift_release(v30);
  return sub_10003F970((uint64_t)v23, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
}

uint64_t sub_1002F2BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _OWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t, uint64_t);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  id v112;

  v110 = a8;
  v87 = a7;
  v85 = a6;
  v107 = a5;
  v108 = a3;
  v109 = a4;
  v103 = a1;
  v105 = a2;
  v106 = a9;
  v9 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100562B48);
  v81 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_10003F544(&qword_100562B50);
  v83 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v16 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_10003F544(&qword_100562B58);
  v90 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v80 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_10003F544((uint64_t *)&unk_100562B60);
  v92 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v86 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_10003F544(&qword_100562E80);
  v97 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v89 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10003F544(&qword_100562B70);
  v21 = *(_QWORD *)(v20 - 8);
  v98 = v20;
  v99 = v21;
  __chkstk_darwin(v20);
  v93 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_10003F544(&qword_100562B78);
  v102 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v94 = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_10003F544((uint64_t *)&unk_100562B80);
  v104 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v96 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v26 = objc_msgSend(v25, "mainQueueContext");

  v27 = ShowHeader.podcastUuid.getter();
  v29 = v28;
  v30 = swift_allocObject(&unk_1004C0C08, 32, 7);
  *(_QWORD *)(v30 + 16) = v27;
  *(_QWORD *)(v30 + 24) = v29;
  v31 = sub_10003F544(&qword_10055D840);
  v32 = NSManagedObjectContext.performAndPublish<A>(_:)(sub_1002F35C4, v30, v31);

  swift_release(v30);
  *(_QWORD *)&v111 = v32;
  v33 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v112 = (id)static OS_dispatch_queue.uiAssetPreparationQueue.getter(v33);
  v34 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v79 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v79(v11, 1, 1, v34);
  v35 = sub_10003F544((uint64_t *)&unk_100567180);
  v36 = sub_10002F9C8((unint64_t *)&unk_100562B90, (uint64_t *)&unk_100567180, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v78 = sub_1000489AC();
  Publisher.receive<A>(on:options:)(&v112, v11, v35, v33, v36, v78);
  sub_100007A28((uint64_t)v11, &qword_1005564A0);

  swift_release(v111);
  v37 = type metadata accessor for ArtworkModel(0);
  v38 = sub_10002F9C8((unint64_t *)&unk_100562BA0, &qword_100562B48, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  Publisher.compactMap<A>(_:)(sub_1002F35DC, 0, v12, v37, v38);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v14, v12);
  v39 = (_OWORD *)swift_allocObject(&unk_1004C0C30, 64, 7);
  v40 = v85;
  v41 = v85[1];
  v39[1] = *v85;
  v39[2] = v41;
  v39[3] = v40[2];
  v42 = type metadata accessor for ArtworkRequest(0);
  v43 = v80;
  v44 = v82;
  Publishers.CompactMap.map<A>(_:)(sub_1002F379C, v39, v82, v42);
  swift_release(v39);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v16, v44);
  sub_10000A520(v87, (uint64_t)&v111);
  v45 = swift_allocObject(&unk_1004C0C58, 56, 7);
  sub_10002099C(&v111, v45 + 16);
  v46 = swift_allocObject(&unk_1004C0C80, 32, 7);
  *(_QWORD *)(v46 + 16) = sub_1002F37C8;
  *(_QWORD *)(v46 + 24) = v45;
  v47 = static Subscribers.Demand.unlimited.getter(v46);
  v48 = sub_100005EC8(0, (unint64_t *)&unk_100562EE0, UIImage_ptr);
  v49 = sub_10003F544((uint64_t *)&unk_100562BB0);
  v50 = sub_10002F9C8(&qword_100562EF0, &qword_100562B58, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v51 = sub_10002F9C8((unint64_t *)&unk_100562100, (uint64_t *)&unk_100562BB0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v52 = v86;
  v53 = v47;
  v54 = v88;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v53, sub_1002F3810, v46, v88, v48, v49, v50, v51);
  swift_release(v46);
  v55.n128_f64[0] = (*(double (**)(char *, uint64_t))(v90 + 8))(v43, v54);
  *(_QWORD *)&v111 = static OS_dispatch_queue.main.getter(v55);
  v79(v11, 1, 1, v34);
  v56 = sub_10002F9C8((unint64_t *)&unk_100562EA0, (uint64_t *)&unk_100562B60, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v57 = v89;
  v58 = v91;
  Publisher.receive<A>(on:options:)(&v111, v11, v91, v33, v56, v78);
  sub_100007A28((uint64_t)v11, &qword_1005564A0);

  (*(void (**)(char *, uint64_t))(v92 + 8))(v52, v58);
  v59 = swift_allocObject(&unk_1004C0CA8, 24, 7);
  swift_weakInit(v59 + 16, v84);
  sub_10000A520(v103, (uint64_t)&v111);
  v60 = swift_allocObject(&unk_1004C0CD0, 112, 7);
  *(_QWORD *)(v60 + 16) = v59;
  sub_10002099C(&v111, v60 + 24);
  v61 = v106;
  *(_QWORD *)(v60 + 64) = v105;
  *(_BYTE *)(v60 + 72) = v107;
  v62 = v109;
  *(_QWORD *)(v60 + 80) = v110;
  *(_QWORD *)(v60 + 88) = v61;
  *(_QWORD *)(v60 + 96) = v108;
  *(_QWORD *)(v60 + 104) = v62;
  swift_bridgeObjectRetain(v62);
  swift_retain();
  swift_retain();
  v63 = sub_10003F544((uint64_t *)&unk_100562BC0);
  v64 = sub_10002F9C8(&qword_100562EC0, &qword_100562E80, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v65 = v93;
  v66 = v95;
  Publisher.map<A>(_:)(sub_1002F3A18, v60, v95, v63, v64);
  swift_release(v60);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v57, v66);
  *(_QWORD *)&v111 = 0;
  v67 = sub_10002F9C8((unint64_t *)&unk_100562BD0, &qword_100562B70, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v68 = v94;
  v69 = v98;
  Publisher.replaceError(with:)(&v111, v98, v67);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v65, v69);
  v70 = sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
  v71 = sub_10002F9C8(&qword_100562BE0, &qword_100562B78, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  v72 = v96;
  v73 = v100;
  Publisher.compactMap<A>(_:)(sub_100183858, 0, v100, v70, v71);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v68, v73);
  v74 = sub_10002F9C8(&qword_100562BE8, (uint64_t *)&unk_100562B80, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v75 = v101;
  v76 = Publisher.eraseToAnyPublisher()(v101, v74);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v72, v75);
  return v76;
}

void sub_1002F3500(void *a1@<X0>, uint64_t a2@<X8>)
{
  NSString v4;
  id v5;
  uint64_t v6;

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a1, "podcastForUuid:", v4);

  if (v5)
  {
    MTPodcast.artworkModel.getter();

  }
  else
  {
    v6 = type metadata accessor for ArtworkModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 1, 1, v6);
  }
}

uint64_t sub_1002F35A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002F35C4(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002F3500(a1, a2);
}

uint64_t sub_1002F35DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100007A64(a1, a2, &qword_10055D840);
}

uint64_t sub_1002F35FC(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[5];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544((uint64_t *)&unk_100562BF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ArtworkModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v23[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100297098(a1, (uint64_t)v13);
  v14 = *a2;
  v15 = a2[1];
  v16 = a2[4];
  v17 = type metadata accessor for CropCode(0);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v10, 1, 1, v17);
  v19 = static Logger.artwork.getter(v18);
  v20 = static os_log_type_t.info.getter(v19);
  SignpostAndLogTrace(domain:level:)(v23, v7, v20);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v13, 2, 0, v10, 0, _swiftEmptyArrayStorage, v23, v14, v15, v16);
}

uint64_t sub_1002F378C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1002F379C(uint64_t a1)
{
  uint64_t v1;

  return sub_1002F35FC(a1, (double *)(v1 + 16));
}

uint64_t sub_1002F37A4()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002F37C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[5];
  v4 = v1[6];
  sub_10003A834(v1 + 2, v3);
  return dispatch thunk of ImageProvider.load(artwork:)(a1, v3, v4);
}

uint64_t sub_1002F3810@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1002F9DEC(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_1002F3818()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002F383C(void **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>, uint64_t a9)
{
  void *v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t inited;
  id v22;
  char *v23;
  NSArray v24;
  NSString v25;
  id v26;
  uint64_t v27;
  _BYTE v28[40];
  _BYTE v29[24];

  v15 = *a1;
  v16 = a2 + 16;
  swift_beginAccess(a2 + 16, v29, 0, 0);
  Strong = swift_weakLoadStrong(v16);
  if (Strong && (v18 = Strong, v19 = sub_1002F3A50(a3, a4, v15, a5, a6, a7), swift_release(v18), v19))
  {
    v20 = sub_10003F544((uint64_t *)&unk_100553780);
    inited = swift_initStackObject(v20, v28);
    *(_OWORD *)(inited + 16) = xmmword_1003CA250;
    *(_QWORD *)(inited + 32) = v19;
    v27 = inited;
    specialized Array._endMutation()(inited);
    swift_bridgeObjectRetain(a9);
    v22 = v19;
    v23 = sub_100180784(v27);
    swift_bridgeObjectRelease(v27);
    v24.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    if (a9)
    {
      v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a9);
    }
    else
    {
      v25 = 0;
    }
    v26 = objc_msgSend(objc_allocWithZone((Class)CPListSection), "initWithItems:header:sectionIndexTitle:", v24.super.isa, v25, 0);

  }
  else
  {
    v26 = 0;
  }
  *a8 = v26;
}

uint64_t sub_1002F39D4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_10003D380(v0 + 3);
  swift_release(v0[8]);
  swift_release(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

void sub_1002F3A18(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1002F383C(a1, *(_QWORD *)(v2 + 16), (_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 64), *(unsigned __int8 *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), a2, *(_QWORD *)(v2 + 104));
}

id sub_1002F3A50(_QWORD *a1, uint64_t a2, void *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t *v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  id v104;
  uint64_t v106;
  __n128 v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  NSString v128;
  id v129;
  uint64_t v130;
  id v131;
  id v132;
  uint64_t v133;
  NSString v134;
  NSString v135;
  id v136;
  id v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  _BYTE *v143;
  uint64_t v144;
  void *v145;
  _BYTE *v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  int v152;
  int v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t *v157;
  _QWORD *v158;
  char *v159;
  char *v160;
  id v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void **aBlock;
  uint64_t v181;
  uint64_t (*v182)(uint64_t, uint64_t, void *);
  void *v183;
  uint64_t (*v184)(uint64_t, uint64_t (*)(uint64_t));
  uint64_t v185;
  id v186;

  v165 = a4;
  v161 = a3;
  v173 = a2;
  v158 = a1;
  v9 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v9);
  v159 = (char *)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v12 = (uint64_t *)((char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v13);
  v160 = (char *)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = _s27CarPlayEpisodeSubtitleStyleOMa(0);
  __chkstk_darwin(v156);
  v157 = (uint64_t *)((char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v178 = type metadata accessor for EpisodePlayState(0);
  v16 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v170 = (uint64_t)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v18);
  v172 = (char *)&v154 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v20);
  v171 = (char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10003F544(&qword_100559910);
  v23 = __chkstk_darwin(v22);
  v175 = (char *)&v154 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v154 - v26;
  __chkstk_darwin(v25);
  v179 = (uint64_t)&v154 - v28;
  v29 = type metadata accessor for EpisodeOffer(0);
  v168 = *(_QWORD *)(v29 - 8);
  v169 = v29;
  v30 = __chkstk_darwin(v29);
  v154 = (char *)&v154 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v154 - v33;
  v35 = __chkstk_darwin(v32);
  v37 = (char *)&v154 - v36;
  v177 = v6;
  v38 = ShowHeader.primaryButtonAction.getter(v35);
  v166 = a5;
  v167 = a6;
  v162 = v12;
  v155 = v34;
  if (v38)
  {
    v39 = v38;
    v40 = type metadata accessor for PlayAction(0);
    v41 = swift_dynamicCastClass(v39, v40);
    if (v41)
    {
      v42 = v41;
      v43 = swift_retain();
      v174 = v42;
      PlayAction.episodeOffer.getter(v43);
      v44 = swift_release(v39);
      v45 = EpisodeOffer.contentId.getter(v44);
      (*(void (**)(char *, uint64_t))(v168 + 8))(v37, v169);
      v46 = 0;
      goto LABEL_6;
    }
    swift_release(v39);
  }
  v45 = 0;
  v174 = 0;
  v46 = 1;
LABEL_6:
  v176 = v16;
  v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v48 = v178;
  v49 = v179;
  v50 = v47(v179, 1, 1, v178);
  v51 = ShowHeader.episodeToPlay.getter(v50);
  if (v51)
  {
    v53 = v51;
    v54 = Episode.uuid.getter(v52);
    v56 = v55;
    v57 = EpisodeStateController.stateMachine(for:)(v54, v55);
    swift_bridgeObjectRelease(v56);
    dispatch thunk of EpisodeStateMachine.currentState.getter(v58);
    swift_release(v57);
    sub_100007A28(v49, &qword_100559910);
    v47((uint64_t)v27, 0, 1, v48);
    v59 = sub_1002F48F4((uint64_t)v27, v49);
    v173 = Episode.title.getter(v59);
    v61 = v60;
    v63 = Episode.uuid.getter(v62);
    v65 = v64;
    v66 = Episode.adamId.getter();
    if ((v67 & 1) != 0)
      v68 = v45;
    else
      v68 = v66;
    v69 = v46 & v67;
    v70 = type metadata accessor for EpisodeListSettings(0);
    v71 = v171;
    v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v171, 1, 1, v70);
    v73 = v172;
    static ActionMetrics.notInstrumented.getter(v72);
    v74 = type metadata accessor for LibraryPlayPauseAction(0);
    swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
    BYTE2(v153) = 0;
    LOWORD(v153) = 1;
    BYTE2(v152) = 0;
    LOWORD(v152) = 2;
    v75 = LibraryPlayPauseAction.init(episodeUuid:episodeAdamId:channelAdamId:settings:showPlayerIfPlaying:forcePlay:isSmartPlayButton:isWidgetPlayButton:timestamp:waitForEngine:shouldPreventQueueing:actionMetrics:)(v63, v65, v68, v69, 0, 1, v71, 0, v152, 0, v153, v73);
    swift_release(v53);
    v76 = v49;
    v78 = v174;
    v77 = (uint64_t)v175;
  }
  else if ((v46 & 1) != 0)
  {
    v173 = 0;
    v61 = 0;
    v75 = 0;
    v48 = v178;
    v76 = v179;
    v78 = v174;
    v77 = (uint64_t)v175;
  }
  else
  {
    v79 = EpisodeStateController.stateMachine(for:)(v45);
    dispatch thunk of EpisodeStateMachine.currentState.getter(v79);
    swift_release(v79);
    v76 = v179;
    sub_100007A28(v179, &qword_100559910);
    v48 = v178;
    v47((uint64_t)v27, 0, 1, v178);
    sub_1002F48F4((uint64_t)v27, v76);
    v78 = v174;
    if (v174)
    {
      v80 = swift_retain();
      PlayAction.episodeOffer.getter(v80);
      v81 = swift_release(v78);
      v173 = EpisodeOffer.title.getter(v81);
      v61 = v82;
      (*(void (**)(char *, uint64_t))(v168 + 8))(v37, v169);
    }
    else
    {
      v173 = 0;
      v61 = 0;
    }
    v77 = (uint64_t)v175;
    swift_retain();
    v75 = v78;
  }
  sub_100007A64(v76, v77, &qword_100559910);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v77, 1, v48) == 1)
  {
    swift_release(v78);
    swift_bridgeObjectRelease(v61);
    swift_release(v75);
    sub_100007A28(v76, &qword_100559910);
    v83 = v77;
LABEL_29:
    sub_100007A28(v83, &qword_100559910);
    return 0;
  }
  v84 = v170;
  sub_10013BE30(v77, v170, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
  if (!v75)
  {
    swift_bridgeObjectRelease(v61);
LABEL_28:
    swift_release(v78);
    sub_10003F970(v84, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    v83 = v76;
    goto LABEL_29;
  }
  if (!v61)
  {
    swift_release(v75);
    goto LABEL_28;
  }
  aBlock = (void **)v173;
  v181 = v61;
  v85 = sub_10016DD80();
  v86 = swift_retain();
  v87 = Collection.isNotEmpty.getter(&type metadata for String, v85, v86);
  if ((v87 & 1) == 0)
  {
    swift_bridgeObjectRelease(v61);
    swift_release_n(v75, 2);
    goto LABEL_28;
  }
  v88 = ShowHeader.episodeToPlay.getter(v87);
  v178 = v61;
  if (v88)
  {
    v89 = v88;
    v90 = Episode.showTypeIsSerial.getter();
    v91 = Episode.isExplicit.getter();
    if ((v90 & 1) != 0)
    {
      v92 = Episode.seasonNumber.getter();
      v94 = v93;
      v95 = Episode.episodeNumber.getter();
      v97 = v96;
      v98 = Episode.duration.getter(v95);
      v99 = v157;
      *v157 = v92;
      v100 = v94 & 1;
      v101 = (uint64_t)v99;
      *((_BYTE *)v99 + 8) = v100;
      v99[2] = v95;
      v84 = v170;
      *((_BYTE *)v99 + 24) = v97 & 1;
      v99[4] = v98;
      *((_BYTE *)v99 + 40) = v102 & 1;
      v103 = 1;
    }
    else
    {
      v115 = sub_10003F544(&qword_1005547C0);
      v101 = (uint64_t)v157;
      v116 = (char *)v157 + *(int *)(v115 + 64);
      *(_QWORD *)v101 = Episode.episodeNumber.getter();
      *(_BYTE *)(v101 + 8) = v117 & 1;
      v118 = Episode.releaseDate.getter();
      v119 = Episode.duration.getter(v118);
      v103 = 0;
      *(_QWORD *)v116 = v119;
      v116[8] = v120 & 1;
    }
    v106 = (uint64_t)v159;
    v121 = v158;
    swift_storeEnumTagMultiPayload(v101, v156, v103);
    sub_100176F00(v121, v91 & 1, v101);
    v114 = v122;
    sub_10003F970(v101, _s27CarPlayEpisodeSubtitleStyleOMa);
    v88 = swift_release(v89);
  }
  else
  {
    v106 = (uint64_t)v159;
    if (v78)
    {
      v107 = swift_retain();
      v108 = v154;
      PlayAction.episodeOffer.getter(v107);
      swift_release(v78);
      v109 = v168;
      v110 = (uint64_t)v155;
      v111 = v108;
      v112 = v169;
      (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v155, v111, v169);
      sub_100177A30(v158, v110, 1);
      v114 = v113;
      v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v109 + 8))(v110, v112);
    }
    else
    {
      v114 = 0;
    }
  }
  v123 = (uint64_t)v160;
  v124 = ShowHeader.episodeToPlay.getter(v88);
  if (!v124)
  {
    v130 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v123, 1, 1, v130);
    goto LABEL_39;
  }
  v125 = v124;
  Episode.assetUrl.getter();
  swift_release(v125);
  v126 = type metadata accessor for URL(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 48))(v123, 1, v126) == 1)
  {
LABEL_39:
    sub_100007A28(v123, (uint64_t *)&unk_100553DC0);
    v129 = 0;
    goto LABEL_40;
  }
  sub_100007A28(v123, (uint64_t *)&unk_100553DC0);
  v127 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 4, -1, 16.0);
  v128 = String._bridgeToObjectiveC()();
  v129 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v128, v127);

LABEL_40:
  v131 = v161;
  v132 = v129;
  v133 = v178;
  v134 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v133);
  if (v114)
  {
    v135 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v114);
  }
  else
  {
    v135 = 0;
  }
  v136 = objc_msgSend(objc_allocWithZone((Class)CPListItem), "initWithText:detailText:image:accessoryImage:accessoryType:", v134, v135, v131, v132, 0);

  v186 = v136;
  v137 = v136;
  v138 = sub_100177F54();
  if ((v139 & 1) == 0)
    objc_msgSend(v137, "setPlaybackProgress:", *(double *)&v138);

  v140 = (uint64_t)v162;
  *v162 = v75;
  *(_BYTE *)(v140 + 8) = 0;
  v141 = v164;
  swift_storeEnumTagMultiPayload(v140, v164, 2);
  v142 = objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0));
  v143 = objc_msgSend(v142, "init", swift_retain().n128_f64[0]);
  sub_10013BE30(v140, v106, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v163 + 56))(v106, 0, 1, v141);
  v144 = (uint64_t)&v143[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v143[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], &aBlock, 33, 0);
  sub_10017FE64(v106, v144);
  swift_endAccess(&aBlock);
  v143[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = v165;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v145 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v146 = v143;
  sub_10017FF38((uint64_t)v145, (uint64_t)v143);

  v147 = v186;
  v148 = swift_allocObject(&unk_1004C0CF8, 32, 7);
  v149 = v167;
  *(_QWORD *)(v148 + 16) = v166;
  *(_QWORD *)(v148 + 24) = v149;
  v184 = sub_10017FF60;
  v185 = v148;
  aBlock = _NSConcreteStackBlock;
  v181 = 1107296256;
  v182 = sub_10017FEAC;
  v183 = &unk_1004C0D10;
  v150 = _Block_copy(&aBlock);
  v151 = v185;
  v104 = v147;
  swift_retain();
  swift_release(v151);
  objc_msgSend(v104, "setHandler:", v150);
  _Block_release(v150);

  swift_release_n(v75, 2);
  swift_release(v78);
  sub_10003F970(v84, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
  sub_100007A28(v179, &qword_100559910);
  return v104;
}

void sub_1002F4714(void *a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t inited;
  id v25;
  char *v26;
  NSArray v27;
  NSString v28;
  id v29;
  id v30;
  uint64_t v31;
  _BYTE v32[40];
  _BYTE v33[24];

  v18 = a2 + 16;
  swift_beginAccess(a2 + 16, v33, 0, 0);
  Strong = swift_weakLoadStrong(v18);
  if (Strong)
  {
    v20 = Strong;
    v21 = sub_1002F3A50(a3, a4, a1, a5, a6, a7);
    if (v21)
    {
      v22 = v21;
      v23 = sub_10003F544((uint64_t *)&unk_100553780);
      inited = swift_initStackObject(v23, v32);
      *(_OWORD *)(inited + 16) = xmmword_1003CA250;
      *(_QWORD *)(inited + 32) = v22;
      v31 = inited;
      specialized Array._endMutation()(inited);
      swift_bridgeObjectRetain(a11);
      v25 = v22;
      v26 = sub_100180784(v31);
      swift_bridgeObjectRelease(v31);
      v27.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v26);
      if (a11)
      {
        v28 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(a11);
      }
      else
      {
        v28 = 0;
      }
      v29 = objc_msgSend(objc_allocWithZone((Class)CPListSection), "initWithItems:header:sectionIndexTitle:", v27.super.isa, v28, 0);

      v30 = v29;
      ((void (*)(id))a8)(v29);
      swift_release(v20);

    }
    else
    {
      a8();
      swift_release(v20);
    }
  }
}

uint64_t sub_1002F48D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002F48F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100559910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002F493C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_10003D380(v0 + 3);
  swift_release(v0[8]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  return swift_deallocObject(v0, 128, 7);
}

void sub_1002F4988(void *a1)
{
  uint64_t v1;

  sub_1002F4714(a1, *(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(void (**)(void))(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_1002F49D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  Class isa;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD aBlock[5];
  uint64_t v21;

  v5 = *v2;
  v6 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = JSONEncoder.init()();
  aBlock[0] = v2;
  v9 = sub_100005E40(&qword_100562CE8, v8, (uint64_t (*)(uint64_t))type metadata accessor for RemoteNotificationSetting, (uint64_t)&unk_1003D4AC0);
  v10 = dispatch thunk of JSONEncoder.encode<A>(_:)(aBlock, v5, v9);
  v12 = v11;
  swift_release(v7);
  v13 = objc_allocWithZone((Class)IMWritePushNotificationSettingsService);
  sub_100032AC8(v10, v12);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v13, "initWithData:", isa);
  sub_100032A84(v10, v12);

  v16 = swift_allocObject(&unk_1004C0E00, 32, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  aBlock[4] = sub_1002F64D8;
  v21 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0DA8;
  aBlock[3] = &unk_1004C0E18;
  v17 = _Block_copy(aBlock);
  v18 = v21;
  swift_retain();
  swift_release(v18);
  objc_msgSend(v15, "performDataRequestWithCompletion:", v17);
  _Block_release(v17);

  return sub_100032A84(v10, v12);
}

void sub_1002F4B80(_QWORD *a1@<X8>)
{
  *a1 = &off_1004AD2C0;
}

uint64_t sub_1002F4B90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  char v39;
  __n128 v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, __n128);
  Swift::String v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t result;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;

  v77 = sub_10003F544(&qword_100562CB8);
  v74 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin();
  v76 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v65 - v5;
  *(_QWORD *)(v1 + 16) = &_swiftEmptyDictionarySingleton;
  v7 = a1[3];
  v8 = a1[4];
  sub_10003A834(a1, v7);
  v9 = sub_1002F63E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoteNotificationSetting.CodingKeys, &type metadata for RemoteNotificationSetting.CodingKeys, v9, v7, v8);
  if (v2)
  {
    swift_release(v1);
    v10 = v1;
    goto LABEL_43;
  }
  v73 = v9;
  v75 = (_QWORD *)(v1 + 16);
  v11 = v74;
  LOBYTE(v78) = 0;
  v12 = v77;
  KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)(v80, &v78, v77);
  v68 = v6;
  v69 = a1;
  v70 = v1;
  v13 = v81;
  v14 = v82;
  sub_10003A834(v80, v81);
  v15 = dispatch thunk of UnkeyedDecodingContainer.count.getter(v13, v14);
  v16 = v11;
  if ((v17 & 1) != 0 || (v18 = v15, v15 < 2))
  {
    v10 = v70;
    swift_release(v70);
    v78 = 0;
    v79 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v57._countAndFlagsBits = 0xD00000000000002BLL;
    v57._object = (void *)0x800000010043C490;
    String.append(_:)(v57);
    v58 = sub_10003F544(&qword_100562CC8);
    _print_unlocked<A, B>(_:_:)(v80, &v78, v58, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v59 = v78;
    v60 = v79;
    v61 = sub_1002F642C();
    v62 = swift_allocError(&type metadata for RemoteNotificationSettingsError, v61, 0, 0);
    *v63 = v59;
    v63[1] = v60;
    swift_willThrow(v62);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v68, v12);
    sub_10003D380(v80);
    a1 = v69;
LABEL_43:
    sub_10003D380(a1);
    return v10;
  }
  v72 = (unint64_t)"fcation flags are invalid: ";
  v71 = 0x800000010043C4C0;
  v67 = (unint64_t)"dcasts.account.recommendations";
  v66 = 0x800000010043C4F0;
  v19 = v76;
  while (v18)
  {
    v20 = v81;
    v21 = v82;
    sub_100038DEC((uint64_t)v80, v81);
    dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)(&type metadata for RemoteNotificationSetting.CodingKeys, &type metadata for RemoteNotificationSetting.CodingKeys, v73, v20, v21);
    LOBYTE(v78) = 2;
    v23 = KeyedDecodingContainer.decode(_:forKey:)(&v78, v12);
    v24 = v22;
    if (v23 == 0xD00000000000002ELL && v22 == v71)
    {
      v25 = v72 | 0x8000000000000000;
      goto LABEL_12;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ELL, v72 | 0x8000000000000000, v23, v22, 0) & 1) != 0)
    {
      v25 = v24;
LABEL_12:
      swift_bridgeObjectRelease(v25);
      LOBYTE(v78) = 1;
      v26 = KeyedDecodingContainer.decode(_:forKey:)(&v78, v12);
      v27 = v75;
      swift_beginAccess(v75, &v78, 33, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v27);
      v83 = (_QWORD *)*v27;
      v29 = v83;
      *v27 = 0x8000000000000000;
      v31 = sub_1001CD370(0);
      v32 = v29[2];
      v33 = (v30 & 1) == 0;
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
        goto LABEL_46;
      v35 = v30;
      if (v29[3] < v34)
      {
        sub_100219C34(v34, isUniquelyReferenced_nonNull_native);
        v36 = sub_1001CD370(0);
        if ((v35 & 1) != (v37 & 1))
          goto LABEL_50;
        v31 = v36;
        v38 = v83;
        if ((v35 & 1) == 0)
          goto LABEL_35;
LABEL_19:
        *(_BYTE *)(v38[7] + v31) = v26 & 1;
LABEL_37:
        v19 = v76;
        v12 = v77;
        v55 = *v75;
        *v75 = v38;
        swift_bridgeObjectRelease(v55);
        swift_endAccess(&v78);
        goto LABEL_38;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v38 = v83;
        if ((v30 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        sub_10021EE44();
        v38 = v83;
        if ((v35 & 1) != 0)
          goto LABEL_19;
      }
LABEL_35:
      v38[(v31 >> 6) + 8] |= 1 << v31;
      *(_BYTE *)(v38[6] + v31) = 0;
      *(_BYTE *)(v38[7] + v31) = v26 & 1;
      v54 = v38[2];
      v52 = __OFADD__(v54, 1);
      v53 = v54 + 1;
      if (v52)
        goto LABEL_47;
LABEL_36:
      v38[2] = v53;
      goto LABEL_37;
    }
    if (v23 == 0xD00000000000002ALL && v24 == v66)
    {
      swift_bridgeObjectRelease(v67 | 0x8000000000000000);
LABEL_24:
      LOBYTE(v78) = 1;
      v26 = KeyedDecodingContainer.decode(_:forKey:)(&v78, v12);
      v41 = v75;
      swift_beginAccess(v75, &v78, 33, 0);
      v42 = swift_isUniquelyReferenced_nonNull_native(*v41);
      v83 = (_QWORD *)*v41;
      v43 = v83;
      *v41 = 0x8000000000000000;
      v31 = sub_1001CD370(1);
      v45 = v43[2];
      v46 = (v44 & 1) == 0;
      v47 = v45 + v46;
      if (__OFADD__(v45, v46))
        goto LABEL_48;
      v48 = v44;
      if (v43[3] >= v47)
      {
        if ((v42 & 1) != 0)
        {
          v38 = v83;
          if ((v44 & 1) != 0)
            goto LABEL_19;
        }
        else
        {
          sub_10021EE44();
          v38 = v83;
          if ((v48 & 1) != 0)
            goto LABEL_19;
        }
      }
      else
      {
        sub_100219C34(v47, v42);
        v49 = sub_1001CD370(1);
        if ((v48 & 1) != (v50 & 1))
          goto LABEL_50;
        v31 = v49;
        v38 = v83;
        if ((v48 & 1) != 0)
          goto LABEL_19;
      }
      v38[(v31 >> 6) + 8] |= 1 << v31;
      *(_BYTE *)(v38[6] + v31) = 1;
      *(_BYTE *)(v38[7] + v31) = v26 & 1;
      v51 = v38[2];
      v52 = __OFADD__(v51, 1);
      v53 = v51 + 1;
      if (v52)
        goto LABEL_49;
      goto LABEL_36;
    }
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, v67 | 0x8000000000000000, v23, v24, 0);
    v40 = swift_bridgeObjectRelease(v24);
    if ((v39 & 1) != 0)
      goto LABEL_24;
LABEL_38:
    v56 = *(void (**)(char *, uint64_t, __n128))(v16 + 8);
    v56(v19, v12, v40);
    if (!--v18)
    {
      ((void (*)(char *, uint64_t))v56)(v68, v12);
      sub_10003D380(v80);
      sub_10003D380(v69);
      return v70;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RemoteNotificationType);
  __break(1u);
  return result;
}

uint64_t sub_1002F5274(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10027918C(*a1, *a2);
}

Swift::Int sub_1002F5280()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE900000000000064;
  v3 = 0x656C62616E457369;
  if (v1 != 1)
  {
    v3 = 1701667182;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0xD000000000000018;
  if (v1)
    v5 = v2;
  else
    v5 = 0x800000010042E160;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1002F5320(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xE900000000000064;
  v3 = 0x656C62616E457369;
  if (*v1 != 1)
  {
    v3 = 1701667182;
    v2 = 0xE400000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0xD000000000000018;
  if (*v1)
    v5 = v2;
  else
    v5 = 0x800000010042E160;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1002F539C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE900000000000064;
  v4 = 0x656C62616E457369;
  if (v2 != 1)
  {
    v4 = 1701667182;
    v3 = 0xE400000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0xD000000000000018;
  if (v2)
    v6 = v3;
  else
    v6 = 0x800000010042E160;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1002F5438@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002F6744(*a1);
  *a2 = result;
  return result;
}

void sub_1002F5464(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = *v1;
  v3 = 0x800000010042E160;
  v4 = 0xE900000000000064;
  v5 = 0x656C62616E457369;
  if (v2 != 1)
  {
    v5 = 1701667182;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0xD000000000000018;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_1002F54C4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C62616E457369;
  if (*v0 != 1)
    v1 = 1701667182;
  if (*v0)
    return v1;
  else
    return 0xD000000000000018;
}

unint64_t sub_1002F5520@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002F6744(a1);
  *a2 = result;
  return result;
}

void sub_1002F5544(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1002F5550(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002F63E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F5578(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002F63E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002F55A0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD, _QWORD);
  char *v16;
  __n128 v17;
  void (*v18)(char *, void (*)(_QWORD, _QWORD), __n128);
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  __n128 v35;
  _QWORD v36[2];
  unint64_t v37;
  uint64_t *v38;
  void (*v39)(_QWORD, _QWORD);
  char *v40;
  _BYTE v41[24];
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = v1;
  v5 = sub_10003F544(&qword_100562CD8);
  v45 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)v36 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_10003A834(a1, v10);
  v12 = sub_1002F63E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoteNotificationSetting.CodingKeys, &type metadata for RemoteNotificationSetting.CodingKeys, v12, v10, v11);
  v41[0] = 0;
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(v42, v41, v5);
  v38 = v3;
  v40 = v9;
  v14 = v43;
  v13 = v44;
  sub_100038DEC((uint64_t)v42, v43);
  dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)(&type metadata for RemoteNotificationSetting.CodingKeys, &type metadata for RemoteNotificationSetting.CodingKeys, v12, v14, v13);
  v41[0] = 2;
  v39 = (void (*)(_QWORD, _QWORD))v5;
  KeyedEncodingContainer.encode(_:forKey:)(0xD00000000000002ELL, 0x800000010043C4C0, v41, v5);
  if (v2)
  {
    v15 = v39;
    v16 = v40;
    v17 = swift_bridgeObjectRelease(0x800000010043C4C0);
    v18 = *(void (**)(_QWORD, _QWORD, __n128))(v45 + 8);
    v18(v7, v15, v17);
  }
  else
  {
    v36[1] = "fcation flags are invalid: ";
    v37 = (unint64_t)"dcasts.account.recommendations";
    v19 = v38 + 2;
    swift_bridgeObjectRelease(0x800000010043C4C0);
    swift_beginAccess(v19, v41, 32, 0);
    v38 = v19;
    v20 = *v19;
    v16 = v40;
    if (*(_QWORD *)(v20 + 16))
    {
      v21 = sub_1001CD370(0);
      v22 = v12;
      if ((v23 & 1) != 0)
        v24 = *(unsigned __int8 *)(*(_QWORD *)(v20 + 56) + v21);
      else
        v24 = 0;
      v25 = v45;
    }
    else
    {
      v24 = 0;
      v25 = v45;
      v22 = v12;
    }
    v15 = v39;
    swift_endAccess(v41);
    v41[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v41, v15);
    v39 = *(void (**)(_QWORD, _QWORD))(v25 + 8);
    v39(v7, v15);
    v28 = v43;
    v27 = v44;
    sub_100038DEC((uint64_t)v42, v43);
    dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)(&type metadata for RemoteNotificationSetting.CodingKeys, &type metadata for RemoteNotificationSetting.CodingKeys, v22, v28, v27);
    v29 = v37 | 0x8000000000000000;
    v41[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(0xD00000000000002ALL, v37 | 0x8000000000000000, v41, v15);
    swift_bridgeObjectRelease(v29);
    v30 = v38;
    swift_beginAccess(v38, v41, 32, 0);
    v31 = *v30;
    if (*(_QWORD *)(v31 + 16) && (v32 = sub_1001CD370(1), (v33 & 1) != 0))
      v34 = *(unsigned __int8 *)(*(_QWORD *)(v31 + 56) + v32);
    else
      v34 = 0;
    swift_endAccess(v41);
    v41[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v34, v41, v15);
    v18 = (void (*)(_QWORD, _QWORD, __n128))v39;
    ((void (*)(char *, void (*)(_QWORD, _QWORD), __n128))v39)(v7, v15, v35);
  }
  ((void (*)(char *, _QWORD))v18)(v16, v15);
  return sub_10003D380(v42);
}

uint64_t sub_1002F5978(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51[8];
  _QWORD aBlock[5];
  _QWORD *v53;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = &v45[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v13 - 8);
  v48 = v13;
  __chkstk_darwin(v13);
  v15 = &v45[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a3)
  {
    v16 = swift_errorRetain(a3);
    LODWORD(v46) = static os_log_type_t.error.getter(v16);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v17 = (void *)static OS_os_log.notifications.getter();
    v18 = sub_10003F544(&qword_1005559A0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1003CA200;
    swift_getErrorValue(a3, v51, v50);
    v20 = Error.localizedDescription.getter(v50[1], v50[2]);
    v21 = v15;
    v22 = v12;
    v23 = v10;
    v24 = a5;
    v25 = a4;
    v27 = v26;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_10003E198();
    *(_QWORD *)(v19 + 32) = v20;
    *(_QWORD *)(v19 + 40) = v27;
    a4 = v25;
    a5 = v24;
    v10 = v23;
    v12 = v22;
    v15 = v21;
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v17, "Reading remote notifications settings failed with error: %@", 59, 2, v19);

    swift_bridgeObjectRelease(v19);
    swift_errorRelease(a3);
    v28 = 0;
  }
  else if (a2 >> 60 == 15)
  {
    v28 = 0;
  }
  else
  {
    v29 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    v30 = sub_100032AC8(a1, a2);
    v31 = JSONDecoder.init()(v30);
    v32 = type metadata accessor for RemoteNotificationSetting();
    v34 = sub_100005E40(&qword_100562CF0, v33, (uint64_t (*)(uint64_t))type metadata accessor for RemoteNotificationSetting, (uint64_t)&unk_1003D4AE8);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v32, a1, a2, v32, v34);
    swift_release(v31);
    sub_1001C0F60(a1, a2);
    v28 = aBlock[0];
  }
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v36 = (void *)static OS_dispatch_queue.main.getter(v35);
  v37 = (_QWORD *)swift_allocObject(&unk_1004C0EA0, 48, 7);
  v37[2] = a4;
  v37[3] = a5;
  v37[4] = v28;
  v37[5] = a3;
  aBlock[4] = sub_1002F6568;
  v53 = v37;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C0EB8;
  v38 = _Block_copy(aBlock);
  v39 = v53;
  swift_errorRetain(a3);
  swift_retain();
  swift_retain();
  v40 = swift_release(v39);
  static DispatchQoS.unspecified.getter(v40);
  aBlock[0] = _swiftEmptyArrayStorage;
  v41 = sub_100005E40((unint64_t *)&qword_100556BB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_10003F544((uint64_t *)&unk_10055B200);
  v43 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v42, v43, v10, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v38);
  _Block_release(v38);
  swift_release(v28);

  (*(void (**)(_BYTE *, uint64_t))(v49 + 8))(v12, v10);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v47 + 8))(v15, v48);
}

uint64_t sub_1002F5E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v35[4];
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  char v41[8];
  _QWORD aBlock[5];
  _QWORD *v43;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v35[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v12 - 8);
  v39 = v12;
  __chkstk_darwin(v12);
  v14 = &v35[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a3)
  {
    v15 = swift_errorRetain(a3);
    v36 = static os_log_type_t.error.getter(v15);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v16 = static OS_os_log.notifications.getter();
    v37 = a4;
    v17 = v9;
    v18 = (void *)v16;
    v19 = sub_10003F544(&qword_1005559A0);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1003CA200;
    swift_getErrorValue(a3, v41, v40);
    v21 = Error.localizedDescription.getter(v40[1], v40[2]);
    v22 = a5;
    v24 = v23;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_10003E198();
    *(_QWORD *)(v20 + 32) = v21;
    *(_QWORD *)(v20 + 40) = v24;
    a5 = v22;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v18, "Changing remote notifications settings failed with error: %@", 60, 2, v20);

    v9 = v17;
    a4 = v37;
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(a3);
  }
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v26 = (void *)static OS_dispatch_queue.main.getter(v25);
  v27 = (_QWORD *)swift_allocObject(&unk_1004C0E50, 40, 7);
  v27[2] = a4;
  v27[3] = a5;
  v27[4] = a3;
  aBlock[4] = sub_1002F650C;
  v43 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C0E68;
  v28 = _Block_copy(aBlock);
  v29 = v43;
  swift_errorRetain(a3);
  swift_retain();
  v30 = swift_release(v29);
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = _swiftEmptyArrayStorage;
  v31 = sub_100005E40((unint64_t *)&qword_100556BB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10003F544((uint64_t *)&unk_10055B200);
  v33 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v8, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v28);
  _Block_release(v28);

  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v38 + 8))(v14, v39);
}

uint64_t sub_1002F616C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for RemoteNotificationSetting()
{
  return objc_opt_self(_TtC8Podcasts25RemoteNotificationSetting);
}

uint64_t storeEnumTagSinglePayload for RemoteNotificationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002F61FC + 4 * byte_1003D4995[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002F6230 + 4 * asc_1003D4990[v4]))();
}

uint64_t sub_1002F6230(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F6238(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002F6240);
  return result;
}

uint64_t sub_1002F624C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002F6254);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1002F6258(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F6260(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteNotificationType()
{
  return &type metadata for RemoteNotificationType;
}

uint64_t sub_1002F627C()
{
  return sub_10002F9C8(&qword_100562CA0, &qword_100562CA8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1002F62AC()
{
  unint64_t result;

  result = qword_100562CB0;
  if (!qword_100562CB0)
  {
    result = swift_getWitnessTable(&unk_1003D4A70, &type metadata for RemoteNotificationType);
    atomic_store(result, (unint64_t *)&qword_100562CB0);
  }
  return result;
}

uint64_t sub_1002F62F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;

  v6 = swift_allocObject(v2, 24, 7);
  result = sub_1002F4B90(a1);
  if (!v3)
    *a2 = v6;
  return result;
}

uint64_t sub_1002F6344(_QWORD *a1)
{
  return sub_1002F55A0(a1);
}

uint64_t sub_1002F6364()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v1 = *v0;
  swift_beginAccess(*v0 + 16, v7, 0, 0);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = sub_1002F6470();
  swift_bridgeObjectRetain(v2);
  v5 = Dictionary.description.getter(v4, &type metadata for RemoteNotificationType, &type metadata for Bool, v3);
  swift_bridgeObjectRelease(v2);
  return v5;
}

unint64_t sub_1002F63E8()
{
  unint64_t result;

  result = qword_100562CC0;
  if (!qword_100562CC0)
  {
    result = swift_getWitnessTable(&unk_1003D4C6C, &type metadata for RemoteNotificationSetting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100562CC0);
  }
  return result;
}

unint64_t sub_1002F642C()
{
  unint64_t result;

  result = qword_100562CD0;
  if (!qword_100562CD0)
  {
    result = swift_getWitnessTable(&unk_1003D4C2C, &type metadata for RemoteNotificationSettingsError);
    atomic_store(result, (unint64_t *)&qword_100562CD0);
  }
  return result;
}

unint64_t sub_1002F6470()
{
  unint64_t result;

  result = qword_100562CE0;
  if (!qword_100562CE0)
  {
    result = swift_getWitnessTable(&unk_1003D4A30, &type metadata for RemoteNotificationType);
    atomic_store(result, (unint64_t *)&qword_100562CE0);
  }
  return result;
}

uint64_t sub_1002F64B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002F64D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1002F5E58(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1002F64E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002F650C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1002F6534()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_errorRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002F6568()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

ValueMetadata *type metadata accessor for RemoteNotificationSettingsError()
{
  return &type metadata for RemoteNotificationSettingsError;
}

uint64_t storeEnumTagSinglePayload for RemoteNotificationSetting.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1002F65EC + 4 * byte_1003D499F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1002F6620 + 4 * byte_1003D499A[v4]))();
}

uint64_t sub_1002F6620(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F6628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002F6630);
  return result;
}

uint64_t sub_1002F663C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002F6644);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1002F6648(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F6650(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteNotificationSetting.CodingKeys()
{
  return &type metadata for RemoteNotificationSetting.CodingKeys;
}

unint64_t sub_1002F6670()
{
  unint64_t result;

  result = qword_100562CF8;
  if (!qword_100562CF8)
  {
    result = swift_getWitnessTable(&unk_1003D4C04, &type metadata for RemoteNotificationSetting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100562CF8);
  }
  return result;
}

unint64_t sub_1002F66B8()
{
  unint64_t result;

  result = qword_100562D00;
  if (!qword_100562D00)
  {
    result = swift_getWitnessTable(&unk_1003D4B3C, &type metadata for RemoteNotificationSetting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100562D00);
  }
  return result;
}

unint64_t sub_1002F6700()
{
  unint64_t result;

  result = qword_100562D08;
  if (!qword_100562D08)
  {
    result = swift_getWitnessTable(&unk_1003D4B64, &type metadata for RemoteNotificationSetting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100562D08);
  }
  return result;
}

unint64_t sub_1002F6744(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004AD2E8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

ValueMetadata *type metadata accessor for UpdateEpisodePlayStateIntentImplementation()
{
  return &type metadata for UpdateEpisodePlayStateIntentImplementation;
}

uint64_t sub_1002F67AC()
{
  return sub_100026844((unint64_t *)&unk_100562D10, (uint64_t (*)(uint64_t))&type metadata accessor for UpdateEpisodePlayStateIntent, (uint64_t)&protocol conformance descriptor for UpdateEpisodePlayStateIntent);
}

uint64_t sub_1002F67D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for EpisodePlayState(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v6);
  v3[9] = swift_task_alloc(v6);
  v7 = type metadata accessor for EpisodeEntity(0);
  v3[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[11] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v9);
  v3[13] = swift_task_alloc(v9);
  v10 = sub_10003F544(&qword_100553720);
  v11 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v3[14] = v11;
  *v11 = v3;
  v11[1] = sub_1002F68C8;
  return BaseObjectGraph.inject<A>(_:)(v3 + 2, v10, v10);
}

uint64_t sub_1002F68C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1002F6CD4;
  else
    v3 = sub_1002F692C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002F692C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t updated;
  uint64_t EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 72);
  v29 = *(_QWORD *)(v0 + 64);
  v30 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 128) = v4;
  v5 = ((uint64_t (*)(void))UpdateEpisodePlayStateIntent.episode.getter)();
  v6 = EpisodeEntity.episodeStateIdentifier.getter(v5);
  v8 = v7;
  v10 = v9 & 1;
  v11 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 136) = v11;
  v11(v1, v2);
  v12 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v6, v8, v10);
  *(_QWORD *)(v0 + 144) = v12;
  v13 = sub_10003CA84(v6, v8, v10);
  v14 = dispatch thunk of EpisodeStateMachine.currentState.getter(v13);
  updated = UpdateEpisodePlayStateIntent.playState.getter(v14);
  sub_100199320(v28, v29);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v29, v30);
  if ((EnumCaseMultiPayload - 3) < 2 || (_DWORD)EnumCaseMultiPayload == 1)
  {
    if (updated != 2)
    {
LABEL_10:
      v18 = UpdateEpisodePlayStateIntent.episode.getter(EnumCaseMultiPayload);
      v19 = UpdateEpisodePlayStateIntent.playState.getter(v18);
      v20 = (_QWORD *)swift_task_alloc(dword_100562D2C);
      *(_QWORD *)(v0 + 152) = v20;
      *v20 = v0;
      v20[1] = sub_1002F6B38;
      return sub_1002F7004(*(_QWORD *)(v0 + 96), v19, *(_QWORD *)(v0 + 40));
    }
  }
  else if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    EnumCaseMultiPayload = sub_1001780E4(*(_QWORD *)(v0 + 64));
    if (updated)
      goto LABEL_10;
  }
  else
  {
    sub_100199364(*(_QWORD *)(v0 + 64));
  }
  v22 = *(_QWORD *)(v0 + 72);
  v23 = *(_QWORD *)(v0 + 24);
  swift_release(v12);
  swift_release(v4);
  sub_1001993EC(v22, v23);
  v24 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 104);
  v27 = *(_QWORD *)(v0 + 64);
  v26 = *(_QWORD *)(v0 + 72);
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 56))(*(_QWORD *)(v0 + 24), 0, 1, *(_QWORD *)(v0 + 48));
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002F6B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    v6 = sub_1002F6C5C;
  else
    v6 = sub_1002F6BBC;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002F6BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + 144);
  v3 = *(_QWORD *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 72);
  dispatch thunk of EpisodeStateMachine.currentState.getter(a1);
  swift_release(v2);
  swift_release(v3);
  sub_100199364(v4);
  v5 = *(_QWORD *)(v1 + 96);
  v6 = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 + 56) + 56))(*(_QWORD *)(v1 + 24), 0, 1, *(_QWORD *)(v1 + 48));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1002F6C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(v1);
  sub_100199364(v2);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002F6CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1002F6D2C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  double result;
  uint64_t v20;
  uint64_t v21;

  v21 = a5;
  v9 = sub_10003F544(&qword_100562D30);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin();
  v12 = a2[3];
  v20 = a2[4];
  sub_10003A834(a2, v12);
  v13 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v14 = swift_allocObject(v13, 48, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_1004C1148, v16 + v11, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v17 + v16, (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v18 = swift_bridgeObjectRetain(a4);
  dispatch thunk of LibraryActionControllerProtocol.mark(episodeUUIDS:as:completion:)(v14, v21, sub_1002F769C, v17, v12, v20, v18);
  swift_release(v17);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v14).n128_u64[0];
  return result;
}

double sub_1002F6E84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v7 = sub_10003F544(&qword_100562D30);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin();
  v10 = a2[3];
  v11 = a2[4];
  sub_10003A834(a2, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_1004C1170, v13 + v9, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  dispatch thunk of LibraryActionControllerProtocol.mark(episodeOffers:as:completion:)(a3, v17, sub_1002F769C, v14, v10, v11);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

uint64_t sub_1002F6F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_100562D24);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100191178;
  return sub_1002F67D8(a1, a2, a3);
}

uint64_t sub_1002F7004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t EpisodeOffersIntent;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3[14] = a2;
  v3[15] = a3;
  v3[13] = a1;
  EpisodeOffersIntent = type metadata accessor for FetchEpisodeOffersIntent(0);
  v3[16] = EpisodeOffersIntent;
  v5 = *(_QWORD *)(EpisodeOffersIntent - 8);
  v3[17] = v5;
  v3[18] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544((uint64_t *)&unk_10055B8B0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v3[19] = v7;
  *v7 = v3;
  v7[1] = sub_1002F70AC;
  return BaseObjectGraph.inject<A>(_:)(v3 + 2, v6, v6);
}

uint64_t sub_1002F70AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(*v1 + 152);
  v3 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1002F75C8, 0, 0);
  v5 = sub_10003F544(&qword_100553BE0);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v3 + 168) = v6;
  *v6 = v3;
  v6[1] = sub_1002F716C;
  return BaseObjectGraph.inject<A>(_:)(v3 + 56, v5, v5);
}

uint64_t sub_1002F716C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1002F75FC;
  else
    v3 = sub_1002F71D0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002F71D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  _QWORD *v15;
  uint64_t v16;

  v2 = EpisodeEntity.uuid.getter(a1);
  v1[23] = v3;
  if (v3)
  {
    v4 = v2;
    v5 = v3;
    v6 = v1[14];
    v7 = (_QWORD *)swift_task_alloc(48);
    v1[24] = v7;
    v7[2] = v1 + 7;
    v7[3] = v4;
    v7[4] = v5;
    v7[5] = v6;
    v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    v1[25] = v8;
    *v8 = v1;
    v8[1] = sub_1002F7378;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    v10 = v1[5];
    v11 = v1[6];
    sub_10003A834(v1 + 2, v10);
    v12 = sub_10003F544(&qword_1005548E0);
    v13 = swift_allocObject(v12, 40, 7);
    *(_OWORD *)(v13 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v13 + 32) = EpisodeEntity.adamID.getter(v13);
    FetchEpisodeOffersIntent.init(adamIDs:)(v14);
    v15 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
    v1[26] = v15;
    v16 = sub_100026844((unint64_t *)&unk_10055B8C0, (uint64_t (*)(uint64_t))&type metadata accessor for FetchEpisodeOffersIntent, (uint64_t)&protocol conformance descriptor for FetchEpisodeOffersIntent);
    *v15 = v1;
    v15[1] = sub_1002F742C;
    return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v1 + 12, v1[18], v1[15], v1[16], v16, v10, v11);
  }
}

uint64_t sub_1002F7378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1002F73E0, 0, 0);
}

uint64_t sub_1002F73E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  sub_10003D380((_QWORD *)(v0 + 56));
  sub_10003D380((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002F742C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_1002F7638;
  else
    v6 = sub_1002F74B0;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002F74B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = v0[14];
  v2 = v0[12];
  v0[28] = v2;
  v3 = (_QWORD *)swift_task_alloc(48);
  v0[29] = v3;
  v3[2] = v0 + 7;
  v3[3] = v2;
  v3[4] = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[30] = v4;
  *v4 = v0;
  v4[1] = sub_1002F7560;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1002F7560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 224);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1002F7748, 0, 0);
}

uint64_t sub_1002F75C8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002F75FC()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002F7638()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 56));
  sub_10003D380((_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1002F7680(uint64_t a1)
{
  uint64_t v1;

  return sub_1002F6E84(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

double sub_1002F768C(uint64_t a1)
{
  uint64_t v1;

  return sub_1002F6D2C(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1002F76A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10003F544(&qword_100562D30);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002F7708()
{
  uint64_t v0;

  v0 = sub_10003F544(&qword_100562D30);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

void sub_1002F774C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v15;
  _BYTE v16[24];
  _BYTE v17[24];

  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v2 = &v16[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v4 = &v16[-v3];
  sub_10003F544((uint64_t *)&unk_100562990);
  __chkstk_darwin();
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess(v0 + 16, v17, 0, 0);
  v11 = *(_QWORD *)(v0 + 16);
  if (v11)
  {
    v12 = type metadata accessor for OtherContextActionConfiguration(0);
    v13 = swift_dynamicCastClass(v11, v12);
    if (v13)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v6, v13 + OBJC_IVAR____TtC8Podcasts31OtherContextActionConfiguration_sharableInfo, v7);
      v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
      v14(v10, v6, v7);
      v14(v4, v10, v7);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
      sub_1001C9998((uint64_t)v4, (uint64_t)v2);
      v15 = v0 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_link;
      swift_beginAccess(v15, v16, 33, 0);
      sub_1001C99E0((uint64_t)v2, v15);
      swift_endAccess(v16);
    }
  }
}

uint64_t sub_1002F7918()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  _BYTE v14[24];

  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v2 = &v14[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = v0 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_link;
  swift_beginAccess(v7, v14, 0, 0);
  sub_100036A44(v7, (uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    return sub_1001C9958((uint64_t)v2);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  v9 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
  URL.absoluteString.getter(v9);
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setString:", v12, swift_bridgeObjectRelease(v11).n128_f64[0]);

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1002F7A8C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  sub_1001C9958((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_link);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_systemImageName
                                      + 8));
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1002F7B08()
{
  return type metadata accessor for CopyLinkOtherContextAction(0);
}

uint64_t type metadata accessor for CopyLinkOtherContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100562D60;
  if (!qword_100562D60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CopyLinkOtherContextAction);
  return result;
}

void sub_1002F7B4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = "\b";
  sub_1000048DC(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[3] = &unk_1003D4D98;
    v4 = type metadata accessor for MetricsLabel(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = &unk_1003D4DB0;
      swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    }
  }
}

uint64_t sub_1002F7C00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_systemImageName);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_systemImageName + 8));
  return v1;
}

uint64_t sub_1002F7C38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1002F7C7C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_contextActionType);
}

BOOL sub_1002F7C8C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  _BYTE v9[24];
  _BYTE v10[24];

  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v2 = &v9[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess(v0 + 16, v10, 0, 0);
  v3 = *(_QWORD *)(v0 + 16);
  if (!v3)
    return 0;
  v4 = type metadata accessor for OtherContextActionConfiguration(0);
  if (!swift_dynamicCastClass(v3, v4))
    return 0;
  v5 = v0 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_link;
  swift_beginAccess(v5, v9, 0, 0);
  sub_100036A44(v5, (uint64_t)v2);
  v6 = type metadata accessor for URL(0);
  v7 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v2, 1, v6) != 1;
  sub_1001C9958((uint64_t)v2);
  return v7;
}

void sub_1002F7D90(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;

  v110 = a1;
  v1 = sub_10003F544(&qword_10055D198);
  __chkstk_darwin(v1);
  v109 = (char *)&v90 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10003F544(&qword_100562E60);
  __chkstk_darwin(v3);
  v118 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_100557D88);
  __chkstk_darwin(v5);
  v117 = (uint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100562E68);
  __chkstk_darwin(v7);
  v116 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v9);
  v115 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ShowOffer(0);
  v113 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v90 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v111 = (char *)&v90 - v15;
  v16 = __chkstk_darwin(v14);
  v96 = (char *)&v90 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v90 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v90 - v21;
  v23 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v24 = __chkstk_darwin(v23);
  v107 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v114 = (char *)&v90 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v90 - v28;
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v90 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = EpisodeOffer.title.getter(v32);
  v108 = v35;
  v37 = EpisodeOffer.streamUrl.getter(v36);
  v38 = URL.absoluteString.getter(v37);
  v104 = v39;
  v105 = v38;
  v40 = *(uint64_t (**)(char *, uint64_t))(v31 + 8);
  v41 = v40(v34, v30);
  v42 = EpisodeOffer.showOffer.getter(v41);
  ShowOffer.feedUrl.getter(v42);
  v112 = *(void (**)(char *, uint64_t))(v113 + 8);
  v113 = v11;
  v112(v22, v11);
  v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30);
  if ((_DWORD)v43 == 1)
  {
    v44 = sub_100007A28((uint64_t)v29, (uint64_t *)&unk_100553DC0);
    v45 = 0;
    v101 = 0;
  }
  else
  {
    v45 = URL.absoluteString.getter(v43);
    v101 = v46;
    v44 = v40(v29, v30);
  }
  v47 = EpisodeOffer.contentId.getter(v44);
  v48 = EpisodeOffer.showOffer.getter(v47);
  v49 = ShowOffer.adamId.getter(v48);
  v50 = v20;
  v52 = (uint64_t (*)(char *, uint64_t))v112;
  v51 = v113;
  v53 = ((uint64_t (*)(char *, uint64_t))v112)(v50, v113);
  v54 = v96;
  v55 = EpisodeOffer.showOffer.getter(v53);
  v98 = ShowOffer.author.getter(v55);
  v97 = v56;
  v57 = v52(v54, v51);
  v95 = EpisodeOffer.duration.getter(v57);
  v94 = v58;
  v59 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
  v60 = v59(v114, 1, 1, v30);
  v61 = v111;
  v62 = EpisodeOffer.showOffer.getter(v60);
  v92 = ShowOffer.subscribable.getter(v62);
  v52(v61, v51);
  v63 = type metadata accessor for Date(0);
  v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v115, 1, 1, v63);
  v65 = EpisodeOffer.isEntitledOffer.getter(v64);
  v93 = v65;
  v66 = EpisodeOffer.contentRating.getter(v65);
  if (v66 == 2)
  {
    LODWORD(v111) = 0;
  }
  else
  {
    v67 = v30;
    v68 = ContentRating.rawValue.getter(v66 & 1);
    v70 = v69;
    LODWORD(v111) = 1;
    v72 = ContentRating.rawValue.getter(1);
    v73 = v71;
    if (v68 != v72 || (v74 = v70, v70 != v71))
    {
      LODWORD(v111) = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v70, v72, v71, 0);
      v74 = v73;
    }
    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease(v74);
    v30 = v67;
  }
  v75 = EpisodeOffer.contentRating.getter(v66);
  if (v75 == 2)
  {
    v76 = 0;
    goto LABEL_17;
  }
  v77 = ContentRating.rawValue.getter(v75 & 1);
  v79 = v78;
  v81 = ContentRating.rawValue.getter(1);
  v82 = v80;
  if (v77 == v81 && v79 == v80)
  {
    swift_bridgeObjectRelease_n(v79, 2);
  }
  else
  {
    v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v79, v81, v80, 0);
    swift_bridgeObjectRelease(v79);
    swift_bridgeObjectRelease(v82);
    v76 = 0;
    if ((v83 & 1) == 0)
      goto LABEL_17;
  }
  v76 = objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") ^ 1;
LABEL_17:
  v91 = v76;
  v84 = enum case for PodcastsMediaLibrary.MediaItem.ItemType.stream(_:);
  v85 = type metadata accessor for PodcastsMediaLibrary.MediaItem.ItemType(0);
  v86 = *(_QWORD *)(v85 - 8);
  v87 = v116;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 104))(v116, v84, v85);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v87, 0, 1, v85);
  v88 = sub_1002F8718(v117);
  v89 = (char *)sub_1002F83E0 + 4 * byte_1003D4DE8[EpisodeOffer.mediaType.getter(v88)];
  v102 = v45;
  v103 = v30;
  v100 = v47;
  v99 = v49;
  v96 = (char *)v59;
  __asm { BR              X10 }
}

uint64_t sub_1002F83E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  __n128 v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v38;
  int v39;

  v3 = enum case for PodcastEpisodeAttributes.MediaKind.audio(_:);
  v4 = type metadata accessor for PodcastEpisodeAttributes.MediaKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v1, v3, v4);
  v5 = *(_QWORD *)(v2 - 320);
  type metadata accessor for PodcastEpisodeAttributes.MediaKind(0);
  v6 = 1;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  v8 = ((uint64_t (*)(uint64_t))EpisodeOffer.episodeNumber.getter)(v7);
  v10 = v9;
  v12 = EpisodeOffer.seasonNumber.getter(v11);
  v14 = v13;
  v15 = EpisodeOffer.showOffer.getter(v12);
  v16 = ShowOffer.showType.getter(v15) & 1;
  (*(void (**)(uint64_t, _QWORD))(v2 - 160))(v5, *(_QWORD *)(v2 - 152));
  v17 = ShowType.rawValue.getter(v16);
  v19 = v18;
  v21 = ShowType.rawValue.getter(1);
  v22 = v20;
  if (v17 != v21 || (v23 = v19, v19 != v20))
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v21, v20, 0);
    v23 = v22;
  }
  swift_bridgeObjectRelease(v19);
  v24 = swift_bridgeObjectRelease(v23);
  v25 = *(_QWORD *)(v2 - 184);
  ((void (*)(__n128))EpisodeOffer.transcriptInfo.getter)(v24);
  v26 = type metadata accessor for TranscriptRequestInformation(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_100007A28(v25, &qword_10055D198);
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v28 = ((uint64_t (*)(void))TranscriptRequestInformation.ttmlIdentifier.getter)();
    v30 = v25;
    v29 = v31;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v26);
  }
  if ((v14 & 1) != 0)
    v12 = 0;
  if ((v10 & 1) != 0)
    v8 = 0;
  v32 = *(_DWORD *)(v2 - 308) & 1;
  if ((*(_DWORD *)(v2 - 300) & 1) != 0)
    v33 = 0.0;
  else
    v33 = *(double *)(v2 - 296);
  v34 = *(_QWORD *)(v2 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v2 - 288))(v34, 1, 1, *(_QWORD *)(v2 - 232));
  v35 = sub_1002F8994((uint64_t)_swiftEmptyArrayStorage);
  BYTE2(v39) = 4;
  LOWORD(v39) = 0;
  HIWORD(v38) = *(_DWORD *)(v2 - 312);
  BYTE1(v38) = *(_DWORD *)(v2 - 168) & 1;
  LOBYTE(v38) = *(_DWORD *)(v2 - 304) & 1;
  ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, _QWORD, _BYTE, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char, _QWORD, _QWORD, _QWORD, _QWORD, char, _QWORD, _QWORD, _QWORD, int, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _BYTE, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t, _WORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, int))PodcastsMediaLibrary.MediaItem.init(title:assetURL:feedURL:storeTrackId:podcastStoreId:uuid:guid:externalContentID:author:duration:playhead:artworkURL:itemDescription:serverArtwork:isSubscribable:releaseDate:album:isSubscriptionActive:isExplicit:isRestricted:subscriptionRequired:itemType:priceType:mediaKind:episodeNumber:seasonNumber:podcastIsSerial:showArtworkTemplateURL:artworkInfo:transcriptIdentifier:isAppleNewsEpisode:isAppleMusicEpisode:transcriptSource:shareURL:podcastUUID:restorationContentItemID:isShallow:feedDeleted:podcastSubscriptionState:))(*(_QWORD *)(v2 - 208), *(_QWORD *)(v2 - 192), *(_QWORD *)(v2 - 216), *(_QWORD *)(v2 - 224), *(_QWORD *)(v2 - 240), *(_QWORD *)(v2 - 248), *(_QWORD *)(v2 - 256), 0, v33, *(_QWORD *)(v2 - 264), 0, 0, 0, 0, 0, 0, 0, *(_QWORD *)(v2 - 272), *(_QWORD *)(v2 - 280),
    0,
    1,
    *(_QWORD *)(v2 - 144),
    0,
    0,
    0,
    v32,
    *(_QWORD *)(v2 - 136),
    0,
    0,
    v38,
    *(_QWORD *)(v2 - 128),
    *(_QWORD *)(v2 - 120),
    *(_QWORD *)(v2 - 112),
    v8,
    v12,
    v6 & 1,
    0,
    0,
    v35,
    v28,
    v29,
    0,
    0,
    0,
    v34,
    0,
    0,
    0,
    0,
    v39);
  v36 = type metadata accessor for EpisodeOffer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v0, v36);
}

uint64_t sub_1002F8718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  switch(EpisodeOffer.priceType.getter())
  {
    case 1:
      v6 = (unsigned int *)&enum case for PriceType.stdq(_:);
      goto LABEL_7;
    case 2:
      v6 = (unsigned int *)&enum case for PriceType.psub(_:);
      goto LABEL_7;
    case 3:
      v6 = (unsigned int *)&enum case for PriceType.plus(_:);
      goto LABEL_7;
    case 4:
      v6 = (unsigned int *)&enum case for PriceType.prmo(_:);
LABEL_7:
      v7 = *v6;
      v8 = type metadata accessor for PriceType(0);
      v9 = *(_QWORD *)(v8 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(a1, v7, v8);
      v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v4 = a1;
      v5 = 0;
      v2 = v8;
      break;
    default:
      v2 = type metadata accessor for PriceType(0);
      v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
      v4 = a1;
      v5 = 1;
      break;
  }
  return v3(v4, v5, 1, v2);
}

unint64_t sub_1002F87EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1002F8850(a1, a2, v5);
}

unint64_t sub_1002F8850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

unint64_t sub_1002F8994(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544((uint64_t *)&unk_100562E70);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v8 = *(v5 - 1);
    v9 = *v5;
    swift_bridgeObjectRetain(v7);
    sub_100032AC8(v8, v9);
    result = sub_1002F87EC(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = (uint64_t *)(v3[7] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002F8AB8(unint64_t a1, uint64_t a2, int a3, int a4, int a5, _OWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char **v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  _OWORD *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  __int128 v199;
  id v200;

  v195 = a8;
  v175 = a7;
  v171 = a6;
  v194 = a5;
  v192 = a4;
  LODWORD(v196) = a3;
  v176 = a2;
  v186 = a1;
  v173 = sub_10003F544((uint64_t *)&unk_100555320);
  v172 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v11 = (char *)&v152 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v184 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v187 = (uint64_t)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = v14;
  __chkstk_darwin(v13);
  v183 = (char *)&v152 - v15;
  v182 = sub_10003F544(&qword_100562EF8);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v152 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544(&qword_100562F00);
  v188 = *(_QWORD *)(v17 - 8);
  v189 = v17;
  __chkstk_darwin(v17);
  v198 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_10003F544(&qword_100562F08);
  v191 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v190 = (char *)&v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v20);
  v197 = (char *)&v152 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_10003F544(&qword_100562B48);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v154 = (char *)&v152 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_10003F544(&qword_100562B50);
  v157 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v174 = (char *)&v152 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_10003F544(&qword_100562F10);
  v160 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v159 = (char *)&v152 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_10003F544(&qword_100562F18);
  v163 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v161 = (char *)&v152 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_10003F544(&qword_100562F20);
  v166 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v164 = (char *)&v152 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_10003F544(&qword_100562F28);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v168 = (char *)&v152 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10003F544(&qword_100562F30);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v152 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10003F544((uint64_t *)&unk_100562F38);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)&v152 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for EpisodePlayState(0);
  v177 = *(_QWORD *)(v36 - 8);
  v37 = __chkstk_darwin(v36);
  v179 = (uint64_t)&v152 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = v38;
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v152 - v40;
  v42 = v9;
  v43 = dispatch thunk of LegacyLockup.playAction.getter(v39);
  if (v43)
  {
    v173 = v43;
    v172 = a9;
    v45 = LibraryEpisodeLockup.uuid.getter(v44);
    v47 = v46;
    v48 = EpisodeStateController.stateMachine(for:)(v45, v46);
    swift_bridgeObjectRelease(v47);
    dispatch thunk of EpisodeStateMachine.currentState.getter(v49);
    swift_release(v48);
    *(_QWORD *)&v199 = 0;
    v50 = sub_10003F544((uint64_t *)&unk_1005670E0);
    Just.init(_:)(&v199, v50);
    v51 = sub_10003F544((uint64_t *)&unk_10055A340);
    Just.setFailureType<A>(to:)(v51, v28, v51, &protocol self-conformance witness table for Error);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    v52 = sub_10002F9C8(&qword_100562F48, (uint64_t *)&unk_100562F38, (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    v53 = Publisher.eraseToAnyPublisher()(v32, v52);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
    v54 = v42;
    if ((v196 & 1) != 0)
    {
      v55 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
      v196 = v53;
      v56 = v55;
      v57 = objc_msgSend(v55, "mainQueueContext");
      v152 = v50;
      v58 = v57;

      v59 = LibraryEpisodeLockup.podcastUuid.getter();
      v61 = v60;
      v62 = swift_allocObject(&unk_1004C13C8, 32, 7);
      v176 = v42;
      v63 = v62;
      *(_QWORD *)(v62 + 16) = v59;
      *(_QWORD *)(v62 + 24) = v61;
      v64 = sub_10003F544(&qword_10055D840);
      v65 = NSManagedObjectContext.performAndPublish<A>(_:)(sub_1002FF980, v63, v64);

      swift_release(v63);
      *(_QWORD *)&v199 = v65;
      v66 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
      v200 = (id)static OS_dispatch_queue.uiAssetPreparationQueue.getter(v66);
      v67 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      v68 = (uint64_t)v197;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v197, 1, 1, v67);
      v69 = sub_10003F544((uint64_t *)&unk_100567180);
      v70 = sub_10002F9C8((unint64_t *)&unk_100562B90, (uint64_t *)&unk_100567180, (uint64_t)&protocol conformance descriptor for Future<A, B>);
      v71 = sub_1000489AC();
      v72 = v154;
      Publisher.receive<A>(on:options:)(&v200, v68, v69, v66, v70, v71);
      sub_100007A28(v68, &qword_1005564A0);

      swift_release(v199);
      v73 = type metadata accessor for ArtworkModel(0);
      v74 = sub_10002F9C8((unint64_t *)&unk_100562BA0, &qword_100562B48, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v75 = v156;
      Publisher.compactMap<A>(_:)(sub_1002FF9B8, 0, v156, v73, v74);
      (*(void (**)(char *, uint64_t))(v155 + 8))(v72, v75);
      sub_10000A520(v175, (uint64_t)&v199);
      v76 = swift_allocObject(&unk_1004C13F0, 104, 7);
      v77 = sub_10002099C(&v199, v76 + 16);
      v78 = v171;
      v79 = v171[1];
      *(_OWORD *)(v76 + 56) = *v171;
      *(_OWORD *)(v76 + 72) = v79;
      *(_OWORD *)(v76 + 88) = v78[2];
      v80 = static Subscribers.Demand.unlimited.getter(v77);
      v81 = sub_100005EC8(0, (unint64_t *)&unk_100562EE0, UIImage_ptr);
      v82 = sub_10003F544((uint64_t *)&unk_100562BB0);
      v83 = v41;
      v84 = sub_10002F9C8(&qword_100562F68, &qword_100562B50, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
      v85 = sub_10002F9C8((unint64_t *)&unk_100562100, (uint64_t *)&unk_100562BB0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v86 = v159;
      v87 = v80;
      v88 = v158;
      v89 = v84;
      v41 = v83;
      v90 = v174;
      Publisher.flatMap<A, B>(maxPublishers:_:)(v87, sub_1002FD404, v76, v158, v81, v82, v89, v85);
      swift_release(v76);
      (*(void (**)(char *, uint64_t))(v157 + 8))(v90, v88);
      sub_10000A520(v175, (uint64_t)&v199);
      v91 = swift_allocObject(&unk_1004C1418, 104, 7);
      sub_10002099C(&v199, v91 + 16);
      v92 = v78[1];
      *(_OWORD *)(v91 + 56) = *v78;
      *(_OWORD *)(v91 + 72) = v92;
      *(_OWORD *)(v91 + 88) = v78[2];
      v93 = sub_10002F9C8(&qword_100562F70, &qword_100562F10, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
      v94 = v161;
      v95 = v162;
      Publisher.catch<A>(_:)(sub_1002FD410, v91, v162, v82, v93, v85);
      swift_release(v91);
      v96 = v95;
      v54 = v176;
      (*(void (**)(char *, uint64_t))(v160 + 8))(v86, v96);
      v97 = sub_10002F9C8(&qword_100562F78, &qword_100562F18, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
      v98 = v164;
      v99 = v165;
      Publisher.map<A>(_:)(sub_100183858, 0, v165, v152, v97);
      v100 = v94;
      v101 = (uint64_t)v197;
      (*(void (**)(char *, uint64_t))(v163 + 8))(v100, v99);
      *(_QWORD *)&v199 = 0;
      v102 = sub_10002F9C8(&qword_100562F80, &qword_100562F20, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      v103 = v168;
      v104 = v167;
      Publisher.replaceEmpty(with:)(&v199, v167, v102);
      (*(void (**)(char *, uint64_t))(v166 + 8))(v98, v104);
      v105 = sub_10002F9C8(&qword_100562F88, &qword_100562F28, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceEmpty<A>);
      v106 = v170;
      v53 = Publisher.eraseToAnyPublisher()(v170, v105);
      swift_release(v196);
      (*(void (**)(char *, uint64_t))(v169 + 8))(v103, v106);
    }
    else
    {
      v101 = (uint64_t)v197;
    }
    v153 = v41;
    v196 = v53;
    *(_QWORD *)&v199 = v53;
    v200 = 0;
    v111 = sub_10003F544((uint64_t *)&unk_100562090);
    v112 = sub_10002F9C8((unint64_t *)&unk_1005620A0, (uint64_t *)&unk_100562090, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v113 = v180;
    Publisher.replaceError(with:)(&v200, v111, v112);
    v114 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    *(_QWORD *)&v199 = static OS_dispatch_queue.main.getter(v115);
    v116 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v101, 1, 1, v116);
    v117 = sub_10002F9C8(&qword_100562F50, &qword_100562EF8, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
    v118 = sub_1000489AC();
    v119 = v182;
    Publisher.receive<A>(on:options:)(&v199, v101, v182, v114, v117, v118);
    sub_100007A28(v101, &qword_1005564A0);

    v120 = (*(uint64_t (**)(char *, uint64_t))(v181 + 8))(v113, v119);
    v121 = (uint64_t)v183;
    v122 = LibraryEpisodeLockup.assetFileUrl.getter(v120);
    v197 = (char *)LegacyLockup.title.getter(v122, v123);
    v182 = v124;
    v125 = v187;
    sub_10003DC78(v121, v187, (uint64_t *)&unk_100553DC0);
    v126 = v179;
    sub_10014FDF8((uint64_t)v41, v179, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    sub_10000A520(v186, (uint64_t)&v199);
    v127 = *(unsigned __int8 *)(v184 + 80);
    v128 = v54;
    v129 = (v127 + 16) & ~v127;
    v130 = (v185 + v129 + 7) & 0xFFFFFFFFFFFFFFF8;
    v131 = *(unsigned __int8 *)(v177 + 80);
    v132 = (v131 + v130 + 16) & ~v131;
    v133 = (v178 + v132 + 7) & 0xFFFFFFFFFFFFFFF8;
    v186 = (v133 + 63) & 0xFFFFFFFFFFFFFFF8;
    v134 = (v133 + 79) & 0xFFFFFFFFFFFFFFF8;
    v135 = swift_allocObject(&unk_1004C13A0, v134 + 16, v127 | v131 | 7);
    sub_10003DC78(v125, v135 + v129, (uint64_t *)&unk_100553DC0);
    v136 = (char **)(v135 + v130);
    v137 = v182;
    *v136 = v197;
    v136[1] = (char *)v137;
    sub_10013BE30(v126, v135 + v132, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    sub_10002099C(&v199, v135 + v133);
    v138 = v135 + ((v133 + 47) & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)v138 = v128;
    *(_BYTE *)(v138 + 8) = v192 & 1;
    v139 = v135 + v186;
    v140 = v173;
    *(_QWORD *)v139 = v173;
    *(_BYTE *)(v139 + 8) = v194;
    v141 = (_QWORD *)(v135 + v134);
    v142 = v172;
    *v141 = v195;
    v141[1] = v142;
    swift_retain();
    swift_retain();
    swift_retain();
    v143 = sub_10003F544(&qword_100559FA0);
    v144 = sub_10002F9C8(&qword_100562F58, &qword_100562F00, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v145 = v189;
    v146 = v190;
    v147 = v143;
    v148 = v198;
    Publisher.map<A>(_:)(sub_1002FD2C8, v135, v189, v147, v144);
    swift_release(v135);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v148, v145);
    v149 = sub_10002F9C8(&qword_100562F60, &qword_100562F08, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v150 = v193;
    v110 = Publisher.eraseToAnyPublisher()(v193, v149);
    swift_release(v196);
    swift_release(v140);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v146, v150);
    sub_10003F970((uint64_t)v153, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
  }
  else
  {
    *(_QWORD *)&v199 = 0;
    v107 = sub_10003F544(&qword_100559FA0);
    Just.init(_:)(&v199, v107);
    v108 = sub_10002F9C8((unint64_t *)&unk_100555330, (uint64_t *)&unk_100555320, (uint64_t)&protocol conformance descriptor for Just<A>);
    v109 = v173;
    v110 = Publisher.eraseToAnyPublisher()(v173, v108);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v11, v109);
  }
  return v110;
}

uint64_t sub_1002F99C8(uint64_t a1, uint64_t a2, int a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64[2];

  v59 = a6;
  v60 = a7;
  v57 = a3;
  v55 = a2;
  v52 = a1;
  v9 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544((uint64_t *)&unk_100562B60);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_10003F544(&qword_100562E80);
  v56 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_10003F544(&qword_100562E88);
  v62 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_10003F544((uint64_t *)&unk_100562E90);
  v63 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v53 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002FAA98(a4, a5, (uint64_t)v15);
  v21 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  *(_QWORD *)&v64[0] = static OS_dispatch_queue.main.getter(v22);
  v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v11, 1, 1, v23);
  v24 = sub_10002F9C8((unint64_t *)&unk_100562EA0, (uint64_t *)&unk_100562B60, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v25 = sub_1000489AC();
  Publisher.receive<A>(on:options:)(v64, v11, v12, v21, v24, v25);
  sub_100007A28((uint64_t)v11, &qword_1005564A0);

  v26 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v28 = LegacyLockup.title.getter(v26, v27);
  v30 = v29;
  v32 = LibraryShowLockup.uuid.getter(v31);
  v34 = v33;
  LOBYTE(v13) = LegacyLockup.isExplicit.getter();
  v35 = LegacyLockup.subtitle.getter();
  v37 = v36;
  sub_10000A520(v52, (uint64_t)v64);
  v38 = swift_allocObject(&unk_1004C1288, 208, 7);
  *(_QWORD *)(v38 + 16) = v35;
  *(_QWORD *)(v38 + 24) = v37;
  *(_BYTE *)(v38 + 32) = v13 & 1;
  sub_10002099C(v64, v38 + 40);
  *(_QWORD *)(v38 + 80) = v28;
  *(_QWORD *)(v38 + 88) = v30;
  v39 = v55;
  sub_10003DC78(v55, v38 + 96, (uint64_t *)&unk_100562EB0);
  *(_QWORD *)(v38 + 168) = v32;
  *(_QWORD *)(v38 + 176) = v34;
  *(_BYTE *)(v38 + 184) = v57;
  v40 = v60;
  *(_QWORD *)(v38 + 192) = v59;
  *(_QWORD *)(v38 + 200) = v40;
  sub_10003F450(v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10004AE48);
  swift_retain();
  v41 = sub_10003F544(&qword_100559FA0);
  v42 = sub_10002F9C8(&qword_100562EC0, &qword_100562E80, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v43 = v54;
  Publisher.map<A>(_:)(sub_1002FB868, v38, v54, v41, v42);
  swift_release(v38);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v17, v43);
  *(_QWORD *)&v64[0] = 0;
  v44 = sub_10002F9C8(&qword_100562EC8, &qword_100562E88, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v45 = v53;
  v46 = v58;
  Publisher.replaceError(with:)(v64, v58, v44);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v19, v46);
  v47 = sub_10002F9C8((unint64_t *)&unk_100562ED0, (uint64_t *)&unk_100562E90, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  v48 = v61;
  v49 = Publisher.eraseToAnyPublisher()(v61, v47);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v48);
  return v49;
}

uint64_t sub_1002F9DEC@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

void sub_1002F9E14(void *a1, NSObject *a2, uint64_t a3, void *a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _BYTE v30[32];
  _BYTE v31[24];

  v15 = (uint64_t *)(a3 + 16);
  swift_beginAccess(a3 + 16, v31, 0, 0);
  v16 = *(_QWORD *)(a3 + 16);
  v17 = a4;
  swift_bridgeObjectRetain(v16);
  v19 = sub_1002FD544(v18, (uint64_t)v17);
  v21 = v20;
  swift_bridgeObjectRelease(v16);

  if ((v21 & 1) != 0)
    goto LABEL_7;
  v22 = sub_1002FE644(a6, a1, a8, a9);
  if (!v22)
    goto LABEL_7;
  v23 = v22;
  swift_beginAccess(v15, v30, 33, 0);

  v24 = *v15;
  if (!((unint64_t)*v15 >> 62))
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    v26 = v23;
    if (v25 >= v19)
      goto LABEL_5;
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v24 < 0)
    v27 = *v15;
  else
    v27 = v24 & 0xFFFFFFFFFFFFFF8;
  v28 = v23;
  swift_bridgeObjectRetain(v24);
  v29 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v24);
  if (v29 < v19)
    goto LABEL_12;
LABEL_5:
  if ((v19 & 0x8000000000000000) == 0)
  {
    sub_1001B35F4(v19, v19, (uint64_t)v23);
    swift_endAccess(v30);

LABEL_7:
    dispatch_group_leave(a2);
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t sub_1002F9F88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = LegacyLockup.title.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1002F9FB0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t *a6@<X8>)
{
  uint64_t result;

  result = sub_1002FD630(a1, a2, a3, 0, 0, a4, a5);
  *a6 = result;
  return result;
}

void sub_1002F9FFC(void *a1, NSObject *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  _BYTE v33[32];
  _BYTE v34[24];

  v17 = (uint64_t *)(a3 + 16);
  swift_beginAccess(a3 + 16, v34, 0, 0);
  v18 = *(_QWORD *)(a3 + 16);
  v19 = a4;
  swift_bridgeObjectRetain(v18);
  v21 = sub_1002FD544(v20, (uint64_t)v19);
  v23 = v22;
  swift_bridgeObjectRelease(v18);

  if ((v23 & 1) != 0)
    goto LABEL_7;
  v24 = sub_1002FD630(a6, a7, a8, a1, 0, a10, a11);
  if (!v24)
    goto LABEL_7;
  v25 = (void *)v24;
  swift_beginAccess(v17, v33, 33, 0);

  v26 = *v17;
  if (!((unint64_t)*v17 >> 62))
  {
    v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    v28 = v25;
    if (v27 >= v21)
      goto LABEL_5;
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v26 < 0)
    v29 = *v17;
  else
    v29 = v26 & 0xFFFFFFFFFFFFFF8;
  v30 = v25;
  swift_bridgeObjectRetain(v26);
  v31 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v26);
  if (v31 < v21)
    goto LABEL_12;
LABEL_5:
  if ((v21 & 0x8000000000000000) == 0)
  {
    sub_1001B35F4(v21, v21, (uint64_t)v25);
    swift_endAccess(v33);

LABEL_7:
    dispatch_group_leave(a2);
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t sub_1002FA17C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(a3 + 16, v8, 0, 0);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = swift_bridgeObjectRetain(v5);
  a1(v6);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_1002FA1DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD v34[5];

  v31 = a1;
  v33 = a4;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544((uint64_t *)&unk_100562BF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ArtworkModel(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ArtworkRequest(0);
  v16 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a2[3];
  v30 = a2[4];
  sub_10003A834(a2, v19);
  sub_10014FDF8(v31, (uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  v20 = *a3;
  v21 = a3[1];
  v22 = a3[4];
  v23 = type metadata accessor for CropCode(0);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v12, 1, 1, v23);
  v25 = static Logger.artwork.getter(v24);
  v26 = static os_log_type_t.info.getter(v25);
  SignpostAndLogTrace(domain:level:)(v34, v9, v26);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v15, 2, 0, v12, 0, _swiftEmptyArrayStorage, v34, v20, v21, v22);
  v27 = dispatch thunk of ImageProvider.load(artwork:)(v18, v19, v30);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v32);
  *v33 = v27;
  return result;
}

uint64_t sub_1002FA400@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  static Logger.artwork.getter(v10);
  swift_errorRetain(v13);
  v14 = swift_errorRetain(v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v31 = v9;
    v17 = swift_slowAlloc(12, -1);
    v30 = v8;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v33 = v13;
    v34 = v19;
    v32 = a3;
    *(_DWORD *)v18 = 136315138;
    v29 = v18 + 4;
    swift_errorRetain(v13);
    v20 = sub_10003F544((uint64_t *)&unk_10055A340);
    v21 = String.init<A>(describing:)(&v33, v20);
    v22 = a4;
    v24 = v23;
    v33 = sub_10003D274(v21, v23, &v34);
    a3 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v29, v18 + 12);
    v25 = v24;
    a4 = v22;
    swift_bridgeObjectRelease(v25);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to load show artwork: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v30);
  }
  else
  {
    swift_errorRelease(v13);
    swift_errorRelease(v13);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  v26 = a2[3];
  v27 = a2[4];
  sub_10003A834(a2, v26);
  result = dispatch thunk of ImageProvider.placeholder(for:)(v26, v27, *a3, a3[1]);
  *a4 = result;
  return result;
}

void sub_1002FA638(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  void *v26;
  uint64_t v27;
  int v28;
  id v29;
  id v30;
  NSString v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSString v37;
  id v38;
  NSString v39;
  id v40;
  id v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  id v45;
  _BYTE *v46;
  uint64_t v47;
  void *v48;
  _BYTE *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  _BYTE v56[4];
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD aBlock[5];
  uint64_t v65;
  id v66;

  v59 = a3;
  v62 = a9;
  v20 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v20);
  v22 = &v56[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v60 = *(_QWORD *)(v23 - 8);
  v61 = v23;
  __chkstk_darwin(v23);
  v25 = &v56[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = *a1;
  v27 = type metadata accessor for URL(0);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(a2, 1, v27);
  v29 = 0;
  v63 = a5;
  if (v28 != 1)
  {
    v30 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 4, -1, 16.0);
    v31 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v31, v30);

  }
  v32 = swift_bridgeObjectRetain(a4);
  sub_100177DE4(a6, a7, a8 & 1, v32);
  v34 = v33;
  v35 = v26;
  v36 = v29;
  if (a4)
  {
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v37 = 0;
  }
  v58 = a12;
  v59 = a13;
  v57 = a11;
  v38 = objc_allocWithZone((Class)CPListItem);
  v39 = String._bridgeToObjectiveC()();
  v40 = objc_msgSend(v38, "initWithText:detailText:image:accessoryImage:accessoryType:", v37, v39, v35, v36, 0, swift_bridgeObjectRelease(v34).n128_f64[0]);

  v66 = v40;
  v41 = v40;
  v42 = sub_100177F54();
  if ((v43 & 1) == 0)
    objc_msgSend(v41, "setPlaybackProgress:", *(double *)&v42);

  *(_QWORD *)v25 = a10;
  v25[8] = 0;
  v44 = v61;
  swift_storeEnumTagMultiPayload(v25, v61, 2);
  v45 = objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0));
  v46 = objc_msgSend(v45, "init", swift_retain().n128_f64[0]);
  sub_10013BE30((uint64_t)v25, (uint64_t)v22, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v22, 0, 1, v44);
  v47 = (uint64_t)&v46[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v46[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
  sub_10017FE64((uint64_t)v22, v47);
  swift_endAccess(aBlock);
  v46[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = v57;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v48 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v49 = v46;
  sub_10017FF38((uint64_t)v48, (uint64_t)v46);

  v50 = v66;
  v51 = swift_allocObject(&unk_1004C1440, 32, 7);
  v52 = v59;
  *(_QWORD *)(v51 + 16) = v58;
  *(_QWORD *)(v51 + 24) = v52;
  aBlock[4] = sub_1002FD108;
  v65 = v51;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017FEAC;
  aBlock[3] = &unk_1004C1458;
  v53 = _Block_copy(aBlock);
  v54 = v65;
  v55 = v50;
  swift_retain();
  swift_release(v54);
  objc_msgSend(v55, "setHandler:", v53);

  _Block_release(v53);
  *v62 = v55;
}

uint64_t sub_1002FAA98@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53[2];
  id v54;

  v48 = a1;
  v49 = a2;
  v52 = a3;
  v3 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_100562B48);
  v46 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_100562B50);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100562B58);
  v13 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  v51 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v17 = objc_msgSend(v16, "mainQueueContext");

  v18 = LibraryShowLockup.uuid.getter();
  v20 = v19;
  v21 = swift_allocObject(&unk_1004C1300, 32, 7);
  *(_QWORD *)(v21 + 16) = v18;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = sub_10003F544(&qword_10055D840);
  v23 = NSManagedObjectContext.performAndPublish<A>(_:)(sub_1002F35C4, v21, v22);

  swift_release(v21);
  *(_QWORD *)&v53[0] = v23;
  v24 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v54 = (id)static OS_dispatch_queue.uiAssetPreparationQueue.getter(v24);
  v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v5, 1, 1, v25);
  v26 = sub_10003F544((uint64_t *)&unk_100567180);
  v27 = sub_10002F9C8((unint64_t *)&unk_100562B90, (uint64_t *)&unk_100567180, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v28 = sub_1000489AC();
  Publisher.receive<A>(on:options:)(&v54, v5, v26, v24, v27, v28);
  sub_100007A28((uint64_t)v5, &qword_1005564A0);

  swift_release(*(_QWORD *)&v53[0]);
  v29 = type metadata accessor for ArtworkModel(0);
  v30 = sub_10002F9C8((unint64_t *)&unk_100562BA0, &qword_100562B48, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  Publisher.compactMap<A>(_:)(sub_1002FB8B0, 0, v6, v29, v30);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v6);
  v31 = (_OWORD *)swift_allocObject(&unk_1004C1328, 64, 7);
  v32 = v48;
  v33 = v48[1];
  v31[1] = *v48;
  v31[2] = v33;
  v31[3] = v32[2];
  v34 = type metadata accessor for ArtworkRequest(0);
  Publishers.CompactMap.map<A>(_:)(sub_1002FD11C, v31, v9, v34);
  swift_release(v31);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v9);
  sub_10000A520(v49, (uint64_t)v53);
  v35 = swift_allocObject(&unk_1004C1350, 56, 7);
  sub_10002099C(v53, v35 + 16);
  v36 = swift_allocObject(&unk_1004C1378, 32, 7);
  *(_QWORD *)(v36 + 16) = sub_1002F37C8;
  *(_QWORD *)(v36 + 24) = v35;
  v37 = static Subscribers.Demand.unlimited.getter(v36);
  v38 = sub_100005EC8(0, (unint64_t *)&unk_100562EE0, UIImage_ptr);
  v39 = sub_10003F544((uint64_t *)&unk_100562BB0);
  v40 = sub_10002F9C8(&qword_100562EF0, &qword_100562B58, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v41 = sub_10002F9C8((unint64_t *)&unk_100562100, (uint64_t *)&unk_100562BB0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v42 = v37;
  v43 = v50;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v42, sub_1002E74F4, v36, v50, v38, v39, v40, v41);
  swift_release(v36);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v15, v43);
}

void sub_1002FAF1C(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  NSString v56;
  void *v57;
  uint64_t v58;
  id v59;
  NSString v60;
  double v61;
  id v62;
  unsigned __int8 v63;
  __int128 v64;
  _QWORD *v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  _BYTE *v83;
  _QWORD *v84;
  uint64_t v85;
  id v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  _BYTE *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  id v97;
  id v98;
  uint64_t v99;
  void *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD aBlock[5];
  uint64_t v117;
  id v118;
  _QWORD v119[8];
  unsigned __int8 v120;
  _OWORD v121[4];
  unsigned __int8 v122;

  v98 = a6;
  v113 = a9;
  v115 = a8;
  sub_10003DC78(a8, (uint64_t)v119, (uint64_t *)&unk_100562EB0);
  v109 = v119[0];
  v108 = v119[1];
  v107 = v119[2];
  v106 = v119[3];
  v105 = v119[4];
  v104 = v119[5];
  v103 = v119[6];
  v102 = v119[7];
  v101 = v120;
  v20 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v20);
  v112 = (uint64_t)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v111 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v110 = (id *)((char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = *a1;
  if (a3)
  {
    swift_bridgeObjectRetain(a3);
    v24 = sub_10027AE00(0, 1, 1, _swiftEmptyArrayStorage);
    v26 = v24[2];
    v25 = v24[3];
    if (v26 >= v25 >> 1)
      v24 = sub_10027AE00((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
    v24[2] = v26 + 1;
    v27 = &v24[2 * v26];
    v27[4] = a2;
    v27[5] = a3;
    if ((a4 & 1) != 0)
      goto LABEL_5;
  }
  else
  {
    v24 = _swiftEmptyArrayStorage;
    if ((a4 & 1) != 0)
    {
LABEL_5:
      v28 = a5[3];
      v29 = a5[4];
      sub_10003A834(a5, v28);
      v30 = dispatch thunk of StoreDataProvider.explicitSymbol.getter(v28, v29);
      v32 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
        v24 = sub_10027AE00(0, v24[2] + 1, 1, v24);
      v34 = v24[2];
      v33 = v24[3];
      v35 = v34 + 1;
      if (v34 >= v33 >> 1)
        v24 = sub_10027AE00((_QWORD *)(v33 > 1), v34 + 1, 1, v24);
      v99 = a7;
      v100 = v23;
      v24[2] = v35;
      v36 = &v24[2 * v34];
      v36[4] = v30;
      v36[5] = v32;
      goto LABEL_13;
    }
  }
  v35 = v24[2];
  if (!v35)
  {
    v38 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  v99 = a7;
  v100 = v23;
LABEL_13:
  swift_bridgeObjectRetain(v24);
  v37 = v24 + 5;
  v38 = _swiftEmptyArrayStorage;
  do
  {
    v42 = *(v37 - 1);
    v43 = *v37;
    if (v42)
      v44 = 0;
    else
      v44 = v43 == 0xE000000000000000;
    if (!v44
      && (_stringCompareWithSmolCheck(_:_:expecting:)(*(v37 - 1), *v37, 0, 0xE000000000000000, 0) & 1) == 0)
    {
      swift_bridgeObjectRetain(v43);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
      *(_QWORD *)&v121[0] = v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100048628(0, v38[2] + 1, 1);
        v38 = *(_QWORD **)&v121[0];
      }
      v40 = v38[2];
      v39 = v38[3];
      if (v40 >= v39 >> 1)
      {
        sub_100048628(v39 > 1, v40 + 1, 1);
        v38 = *(_QWORD **)&v121[0];
      }
      v38[2] = v40 + 1;
      v41 = &v38[2 * v40];
      v41[4] = v42;
      v41[5] = v43;
    }
    v37 += 2;
    --v35;
  }
  while (v35);
  swift_bridgeObjectRelease(v24);
  v23 = v100;
  a7 = v99;
LABEL_26:
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)&v121[0] = v38;
  v47 = static String.eyebrowSeparatorSymbol.getter(v46);
  v49 = v48;
  v50 = sub_10003F544((uint64_t *)&unk_10055FDF0);
  v51 = sub_10002F9C8((unint64_t *)&qword_1005547B8, (uint64_t *)&unk_10055FDF0, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(v47, v49, v50, v51);
  v53 = v52;
  swift_release(v38);
  swift_bridgeObjectRelease(v49);
  v54 = v115;
  v55 = v23;
  if (a7)
  {
    swift_bridgeObjectRetain(a7);
    v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a7);
  }
  else
  {
    v56 = 0;
  }
  v58 = a13;
  v57 = a14;
  v59 = objc_allocWithZone((Class)CPListItem);
  v60 = String._bridgeToObjectiveC()();
  *(_QWORD *)&v61 = swift_bridgeObjectRelease(v53).n128_u64[0];
  v62 = objc_msgSend(v59, "initWithText:detailText:image:accessoryImage:accessoryType:", v56, v60, v23, 0, 1, v61, v98);

  v118 = v62;
  sub_10003DC78(v54, (uint64_t)v121, (uint64_t *)&unk_100562EB0);
  v63 = v122;
  if (v122 == 255)
  {
    v84 = v110;
    *v110 = a10;
    v84[1] = a11;
    *((_BYTE *)v84 + 16) = a12;
    v85 = v114;
    swift_storeEnumTagMultiPayload(v84, v114, 1);
    v86 = objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0));
    v87 = objc_msgSend(v86, "init", swift_bridgeObjectRetain(a11).n128_f64[0]);
    v88 = (uint64_t)v84;
    v89 = v112;
    sub_10013BE30(v88, v112, type metadata accessor for CarPlayTemplateInfo.TemplateType);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v111 + 56))(v89, 0, 1, v85);
    v90 = (uint64_t)&v87[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
    swift_beginAccess(&v87[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
    sub_10017FE64(v89, v90);
    swift_endAccess(aBlock);
    v87[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
    sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
    v91 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
    v92 = v87;
    sub_10017FF38((uint64_t)v91, (uint64_t)v87);

  }
  else
  {
    v64 = v121[1];
    v65 = v110;
    *(_OWORD *)v110 = v121[0];
    *((_OWORD *)v65 + 1) = v64;
    v66 = v121[3];
    *((_OWORD *)v65 + 2) = v121[2];
    *((_OWORD *)v65 + 3) = v66;
    *((_BYTE *)v65 + 64) = v63;
    swift_storeEnumTagMultiPayload(v65, v114, 0);
    v98 = objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0));
    v67 = v101;
    v68 = v109;
    v69 = v108;
    v70 = v107;
    v71 = v106;
    v99 = a13;
    v72 = v105;
    v100 = a14;
    v73 = v104;
    v74 = v103;
    v75 = v102;
    sub_100168ED4(v109, v108, v107, v106, v105, v104, v103, v102, v101);
    v76 = v72;
    v58 = v99;
    v77 = v73;
    v57 = v100;
    sub_100168ED4(v68, v69, v70, v71, v76, v77, v74, v75, v67);
    v78 = objc_msgSend(v98, "init");
    v79 = (uint64_t)v65;
    v80 = v112;
    sub_10013BE30(v79, v112, type metadata accessor for CarPlayTemplateInfo.TemplateType);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v111 + 56))(v80, 0, 1, v114);
    v81 = (uint64_t)&v78[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
    swift_beginAccess(&v78[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
    sub_10017FE64(v80, v81);
    swift_endAccess(aBlock);
    v78[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
    sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
    v82 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
    v83 = v78;
    sub_10017FF38((uint64_t)v82, (uint64_t)v78);

    sub_10003F450(v115, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1001930D0);
  }
  v93 = v118;
  v94 = swift_allocObject(&unk_1004C12B0, 32, 7);
  *(_QWORD *)(v94 + 16) = v58;
  *(_QWORD *)(v94 + 24) = v57;
  aBlock[4] = sub_1002FD108;
  v117 = v94;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017FEAC;
  aBlock[3] = &unk_1004C12C8;
  v95 = _Block_copy(aBlock);
  v96 = v117;
  v97 = v93;
  swift_retain();
  swift_release(v96);
  objc_msgSend(v97, "setHandler:", v95);
  _Block_release(v95);

  *v113 = v97;
}

uint64_t sub_1002FB7F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_10003D380((_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  if (*(unsigned __int8 *)(v0 + 160) != 255)
    sub_10003F49C(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_BYTE *)(v0 + 160));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
  swift_release(*(_QWORD *)(v0 + 200));
  return swift_deallocObject(v0, 208, 7);
}

void sub_1002FB868(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1002FAF1C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), (_QWORD *)(v2 + 40), *(void **)(v2 + 80), *(_QWORD *)(v2 + 88), v2 + 96, a2, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176), *(_BYTE *)(v2 + 184), *(_QWORD *)(v2 + 192), *(void **)(v2 + 200));
}

uint64_t sub_1002FB8B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002DB124(a1, a2);
}

uint64_t sub_1002FB8B8(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v24[5];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544((uint64_t *)&unk_100562BF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ArtworkModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v24[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10014FDF8(a1, (uint64_t)v13, v14);
  v15 = *a2;
  v16 = a2[1];
  v17 = a2[4];
  v18 = type metadata accessor for CropCode(0);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
  v20 = static Logger.artwork.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  SignpostAndLogTrace(domain:level:)(v24, v7, v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v13, 2, 0, v10, 0, _swiftEmptyArrayStorage, v24, v15, v16, v17);
}

uint64_t sub_1002FBA50(uint64_t a1, uint64_t a2, int a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102[2];

  v96 = a6;
  v97 = a7;
  v98 = a3;
  v93 = a1;
  v94 = a2;
  v101 = a10;
  v95 = a9;
  v99 = a8;
  v100 = a11;
  v14 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v14);
  v88 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544(&qword_100562F90);
  v76 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_10003F544(&qword_100562F98);
  v78 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_10003F544(&qword_100562FA0);
  v81 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_10003F544(&qword_100562FA8);
  v83 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_10003F544(&qword_100562FB0);
  v86 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v80 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10003F544(&qword_100562FB8);
  v27 = *(_QWORD *)(v26 - 8);
  v89 = v26;
  v90 = v27;
  __chkstk_darwin(v26);
  v84 = (char *)&v74 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10003F544(&qword_100562FC0);
  v30 = *(_QWORD *)(v29 - 8);
  v91 = v29;
  v92 = v30;
  __chkstk_darwin(v29);
  v87 = (char *)&v74 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = a12;
  *(_QWORD *)&v102[0] = a12;
  swift_bridgeObjectRetain(a12);
  v32 = sub_10003F544(&qword_100562FC8);
  v33 = sub_10002F9C8(&qword_100562FD0, &qword_100562FC8, (uint64_t)&protocol conformance descriptor for EnumeratedSequence<A>);
  Publishers.Sequence.init(sequence:)(v102, v32, &type metadata for Never, v33, &protocol witness table for Never);
  sub_10000A520(a5, (uint64_t)v102);
  v34 = (_OWORD *)swift_allocObject(&unk_1004C1490, 104, 7);
  v35 = a4[1];
  v34[1] = *a4;
  v34[2] = v35;
  v34[3] = a4[2];
  sub_10002099C(v102, (uint64_t)(v34 + 4));
  v36 = swift_allocObject(&unk_1004C14B8, 32, 7);
  *(_QWORD *)(v36 + 16) = sub_1002FD440;
  *(_QWORD *)(v36 + 24) = v34;
  v37 = static Subscribers.Demand.unlimited.getter(v36);
  v38 = sub_10003F544(&qword_100562FD8);
  v39 = sub_10002F9C8(&qword_100562FE0, &qword_100562F90, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  v40 = sub_10002F9C8(&qword_100562FE8, &qword_100562FD8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v37, sub_100201C70, v36, v16, v38, v39, v40);
  swift_release(v36);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v18, v16);
  v41 = sub_10003F544(&qword_100562FF0);
  v42 = sub_10002F9C8(&qword_100562FF8, &qword_100562F98, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v43 = v77;
  Publisher.compactMap<A>(_:)(sub_1002FC438, 0, v77, v41, v42);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v20, v43);
  v44 = sub_10002F9C8(&qword_100563000, &qword_100562FA0, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v45 = v79;
  Publisher.collect()(v79, v44);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v22, v45);
  v46 = swift_allocObject(&unk_1004C14E0, 24, 7);
  v47 = v75;
  *(_QWORD *)(v46 + 16) = v75;
  swift_bridgeObjectRetain(v47);
  v48 = sub_10003F544(&qword_100563008);
  v49 = sub_10002F9C8(&qword_100563010, &qword_100562FA8, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  v50 = v80;
  v51 = v82;
  Publisher.map<A>(_:)(sub_1002FD470, v46, v82, v48, v49);
  swift_release(v46);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v24, v51);
  v52 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  *(_QWORD *)&v102[0] = static OS_dispatch_queue.main.getter(v53);
  v54 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v55 = (uint64_t)v88;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v88, 1, 1, v54);
  v56 = sub_10002F9C8(&qword_100563018, &qword_100562FB0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v57 = sub_1000489AC();
  v58 = v84;
  v59 = v85;
  Publisher.receive<A>(on:options:)(v102, v55, v85, v52, v56, v57);
  sub_100007A28(v55, &qword_1005564A0);

  (*(void (**)(char *, uint64_t))(v86 + 8))(v50, v59);
  v60 = swift_allocObject(&unk_1004C1508, 73, 7);
  v61 = v94;
  *(_QWORD *)(v60 + 16) = v93;
  *(_QWORD *)(v60 + 24) = v61;
  v62 = v97;
  *(_QWORD *)(v60 + 32) = v96;
  *(_QWORD *)(v60 + 40) = v62;
  v63 = v99;
  *(_QWORD *)(v60 + 48) = v47;
  *(_QWORD *)(v60 + 56) = v63;
  *(_QWORD *)(v60 + 64) = v95;
  *(_BYTE *)(v60 + 72) = v98;
  v64 = sub_100005EC8(0, &qword_100563020, CPListImageRowItem_ptr);
  v65 = sub_10002F9C8(&qword_100563028, &qword_100562FB8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v61);
  swift_retain();
  swift_retain();
  v66 = v87;
  v67 = v89;
  Publisher.map<A>(_:)(sub_1002FD4B4, v60, v89, v64, v65);
  swift_release(v60);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v58, v67);
  v68 = swift_allocObject(&unk_1004C1530, 32, 7);
  v69 = v100;
  *(_QWORD *)(v68 + 16) = v101;
  *(_QWORD *)(v68 + 24) = v69;
  v70 = sub_10002F9C8((unint64_t *)&unk_100563030, &qword_100562FC0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  swift_retain();
  v71 = v91;
  v72 = Publisher.sink(receiveCompletion:receiveValue:)(sub_1002FCF54, 0, sub_100176B90, v68, v91, v70);
  swift_release(v68);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v66, v71);
  return v72;
}

uint64_t sub_1002FC200(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v24 = a1;
  v6 = sub_10003F544((uint64_t *)&unk_100562B60);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544(&qword_100563040);
  v25 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_100563048);
  v26 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002FAA98(a3, a4, (uint64_t)v9);
  v16 = swift_allocObject(&unk_1004C1620, 24, 7);
  *(_QWORD *)(v16 + 16) = v24;
  v17 = sub_10003F544(&qword_100563050);
  v18 = sub_10002F9C8((unint64_t *)&unk_100562EA0, (uint64_t *)&unk_100562B60, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  Publisher.map<A>(_:)(sub_1002FD534, v16, v6, v17, v18);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v19 = sub_10002F9C8(&qword_100563058, &qword_100563040, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v27[0] = 0;
  v27[1] = 0;
  Publisher.replaceError(with:)(v27, v10, v19);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  v20 = sub_10002F9C8((unint64_t *)&unk_100563060, &qword_100563048, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  v21 = Publisher.eraseToAnyPublisher()(v13, v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v13);
  return v21;
}

id sub_1002FC438@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v3 = (void *)a1[1];
  *a2 = v2;
  a2[1] = v3;
  return v3;
}

void sub_1002FC444(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v5 = *a1;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v17 = a2;
    else
      v17 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v6 = _CocoaArrayWrapper.endIndex.getter(v17);
    v37 = a3;
    if (!v6)
      goto LABEL_18;
  }
  else
  {
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    v37 = a3;
    if (!v6)
      goto LABEL_18;
  }
  v7 = objc_opt_self(UIImage);
  if (v6 < 1)
    goto LABEL_38;
  v8 = (void *)v7;
  for (i = 0; i != v6; ++i)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
    }
    else
    {
      v11 = *(_QWORD *)(a2 + 8 * i + 32);
      swift_retain();
    }
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v8, "imageNamed:", v12);
    swift_release(v11);

    if (v13)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v15 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v16 >= v15 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
      specialized Array._endMutation()(v10);
    }
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  v18 = _swiftEmptyArrayStorage;
  v38 = (uint64_t)_swiftEmptyArrayStorage;
  v19 = *(_QWORD *)(v5 + 16);
  if (!v19)
  {
LABEL_36:
    *v37 = v18;
    return;
  }
  swift_bridgeObjectRetain(v5);
  v20 = v5;
  v21 = (id *)(v5 + 40);
  while (1)
  {
    v22 = (uint64_t)*(v21 - 1);
    v23 = v38;
    v24 = *v21;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v38)
      || v38 < 0
      || (v38 & 0x4000000000000000) != 0)
    {
      v23 = sub_10037A924(v38);
      v38 = v23;
    }
    v25 = v23 & 0xFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v22 >= v26)
      break;
    v27 = v26 - 1;
    v28 = v26 - 1 - v22;
    if (v28 < 0)
      goto LABEL_39;
    v29 = v25 + 8 * v22;
    v30 = *(void **)(v29 + 32);
    v31 = memmove((void *)(v29 + 32), (const void *)(v29 + 40), 8 * v28);
    *(_QWORD *)(v25 + 16) = v27;
    specialized Array._endMutation()(v31);

    if ((unint64_t)v38 >> 62)
    {
      if (v38 < 0)
        v34 = v38;
      else
        v34 = v38 & 0xFFFFFFFFFFFFFF8;
      v35 = v24;
      swift_bridgeObjectRetain(v38);
      v36 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(v38);
      if (v36 < v22)
      {
LABEL_34:
        __break(1u);
LABEL_35:
        swift_bridgeObjectRelease(v20);
        v18 = (_QWORD *)v38;
        goto LABEL_36;
      }
    }
    else
    {
      v32 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
      v33 = v24;
      if (v32 < v22)
        goto LABEL_34;
    }
    sub_1001B38FC(v22, v22, (uint64_t)v24);

    v21 += 2;
    if (!--v19)
      goto LABEL_35;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
}

void sub_1002FC77C(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, unsigned __int8 a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  id v21;
  NSString v22;
  Class isa;
  id v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void **aBlock;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  _QWORD *v49;

  v40 = a6;
  v41 = a7;
  v39 = a5;
  v42 = a9;
  v14 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v43 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  v21 = objc_allocWithZone((Class)CPListImageRowItem);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v20);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  sub_100005EC8(0, (unint64_t *)&unk_100562EE0, UIImage_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v24 = objc_msgSend(v21, "initWithText:images:", v22, isa, swift_bridgeObjectRelease(v20).n128_f64[0]);

  *a8 = v24;
  v25 = swift_allocObject(&unk_1004C1558, 32, 7);
  *(_QWORD *)(v25 + 16) = a3;
  *(_QWORD *)(v25 + 24) = a4;
  v48 = sub_1002FD108;
  v49 = (_QWORD *)v25;
  aBlock = _NSConcreteStackBlock;
  v45 = 1107296256;
  v46 = sub_10017FEAC;
  v47 = &unk_1004C1570;
  v26 = _Block_copy(&aBlock);
  v27 = v49;
  v28 = v24;
  swift_retain();
  swift_release(v27);
  objc_msgSend(v28, "setHandler:", v26);
  _Block_release(v26);
  v29 = (_QWORD *)swift_allocObject(&unk_1004C15A8, 40, 7);
  v31 = v39;
  v30 = v40;
  v29[2] = v39;
  v29[3] = v30;
  v29[4] = v41;
  v48 = sub_1002FD4F4;
  v49 = v29;
  aBlock = _NSConcreteStackBlock;
  v45 = 1107296256;
  v46 = sub_1002FCEB4;
  v47 = &unk_1004C15C0;
  v32 = _Block_copy(&aBlock);
  v33 = v49;
  swift_bridgeObjectRetain(v31);
  swift_retain();
  swift_release(v33);
  objc_msgSend(v28, "setListImageRowHandler:", v32);
  _Block_release(v32);

  *v19 = v42;
  swift_storeEnumTagMultiPayload(v19, v17, 5);
  v34 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
  sub_10013BE30((uint64_t)v19, (uint64_t)v16, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v16, 0, 1, v17);
  v35 = (uint64_t)&v34[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v34[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], &aBlock, 33, 0);
  sub_10017FE64((uint64_t)v16, v35);
  swift_endAccess(&aBlock);
  v34[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v36 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v37 = v34;
  sub_10017FF38((uint64_t)v36, (uint64_t)v34);

}

void sub_1002FCB20(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSString v32;
  Class isa;
  id v34;
  _BYTE *v35;
  uint64_t v36;
  void *v37;
  _BYTE *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(void);
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];
  id v50;

  v48 = a7;
  v13 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  __chkstk_darwin(v16);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!((unint64_t)a5 >> 62))
  {
    if (*(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
      goto LABEL_3;
LABEL_18:
    v42 = ((uint64_t (*)(uint64_t))a6)(a1);
    ((void (*)(uint64_t))a3)(v42);
    return;
  }
  if (a5 < 0)
    v40 = a5;
  else
    v40 = a5 & 0xFFFFFFFFFFFFFF8;
  v47 = v17;
  swift_bridgeObjectRetain(a5);
  v41 = _CocoaArrayWrapper.endIndex.getter(v40);
  swift_bridgeObjectRelease(a5);
  v17 = v47;
  if (v41 <= a2)
    goto LABEL_18;
LABEL_3:
  v44 = a6;
  v45 = a4;
  v46 = a3;
  v47 = v17;
  if ((a5 & 0xC000000000000001) != 0)
  {
    v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a5);
    v20 = v21;
    goto LABEL_7;
  }
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (*(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)a2)
  {
LABEL_22:
    __break(1u);
    return;
  }
  v20 = *(_QWORD *)(a5 + 8 * a2 + 32);
  swift_retain();
LABEL_7:
  LegacyLockup.title.getter(v21, v22);
  v24 = v23;
  swift_release(v20);
  if (v24)
    v25 = v24;
  else
    v25 = 0xE000000000000000;
  if ((a5 & 0xC000000000000001) != 0)
  {
    v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a5);
  }
  else
  {
    v26 = *(_QWORD *)(a5 + 8 * a2 + 32);
    v27 = swift_retain();
  }
  v28 = LibraryShowLockup.uuid.getter(v27);
  v30 = v29;
  swift_release(v26);
  v31 = objc_allocWithZone((Class)CPListImageRowItem);
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  sub_100005EC8(0, (unint64_t *)&unk_100562EE0, UIImage_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v34 = objc_msgSend(v31, "initWithText:images:", v32, isa);

  v50 = v34;
  *(_QWORD *)v19 = v28;
  *((_QWORD *)v19 + 1) = v30;
  v19[16] = 2;
  swift_storeEnumTagMultiPayload(v19, v16, 1);
  v35 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
  sub_10013BE30((uint64_t)v19, (uint64_t)v15, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v15, 0, 1, v16);
  v36 = (uint64_t)&v35[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v35[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], v49, 33, 0);
  sub_10017FE64((uint64_t)v15, v36);
  swift_endAccess(v49);
  v35[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v37 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v38 = v35;
  sub_10017FF38((uint64_t)v37, (uint64_t)v35);

  v39 = v50;
  v44();

  v46();
}

void sub_1002FCEB4(uint64_t a1, void *a2, int a3, void *aBlock)
{
  uint64_t v5;
  void (*v6)(void);
  void *v7;
  uint64_t v8;
  id v9;

  v6 = *(void (**)(void))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = _Block_copy(aBlock);
  v8 = swift_allocObject(&unk_1004C15F8, 24, 7);
  *(_QWORD *)(v8 + 16) = v7;
  swift_retain();
  v9 = a2;
  v6();
  swift_release(v5);
  swift_release(v8);

}

uint64_t sub_1002FCF54(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 1) == 0)
  {
    v7 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v8 = static OS_os_log.carPlay.getter(v7);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v17 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = String.init<A>(describing:)(v12, &type metadata for Never);
      v15 = v14;
      v16 = sub_10003D274(v13, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Encountered error loading CarPlay image rows: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

uint64_t sub_1002FD10C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1002FD11C(uint64_t a1)
{
  uint64_t v1;

  return sub_1002FB8B8(a1, (double *)(v1 + 16));
}

uint64_t sub_1002FD124()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002FD148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(sub_10003F544((uint64_t *)&unk_100553DC0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = type metadata accessor for EpisodePlayState(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + v7 + 16) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = v0 + v3;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  if (swift_getEnumCaseMultiPayload(v0 + v8, v5) == 2)
  {
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v0 + v8, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v0 + v8, v13);
  }
  v15 = (v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 79) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 63) & 0xFFFFFFFFFFFFF8;
  v18 = (v15 + 47) & 0xFFFFFFFFFFFFF8;
  sub_10003D380((_QWORD *)(v0 + v15));
  swift_release(*(_QWORD *)(v0 + v18));
  swift_release(*(_QWORD *)(v0 + v17));
  swift_release(*(_QWORD *)(v0 + v16 + 8));
  return swift_deallocObject(v0, v16 + 16, v2 | v7 | 7);
}

void sub_1002FD2C8(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(sub_10003F544((uint64_t *)&unk_100553DC0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(type metadata accessor for EpisodePlayState(0) - 8);
  v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1002FA638(a1, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), v2 + v9, v2 + v10, *(_QWORD *)(v2 + ((v10 + 47) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v2 + ((v10 + 47) & 0xFFFFFFFFFFFFFFF8) + 8), a2, *(_QWORD *)(v2 + ((v10 + 63) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v2 + ((v10 + 63) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v2 + ((v10 + 79) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v10 + 79) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1002FD3BC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002FD3E0()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1002FD404@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1002FA1DC(a1, (_QWORD *)(v2 + 16), (double *)(v2 + 56), a2);
}

uint64_t sub_1002FD410@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1002FA400(a1, (_QWORD *)(v2 + 16), (double *)(v2 + 56), a2);
}

uint64_t sub_1002FD41C()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1002FD440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1002FC200(a1, a2, (_OWORD *)(v2 + 16), v2 + 64);
}

uint64_t sub_1002FD44C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002FD470(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1002FC444(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1002FD478()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 73, 7);
}

void sub_1002FD4B4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1002FC77C(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2, *(_BYTE *)(v2 + 72));
}

uint64_t sub_1002FD4E8()
{
  return sub_1002FF8E0((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1002FD4F4(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;

  sub_1002FCB20(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void (**)(void))(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t sub_1002FD500()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002FD524()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1002FD534@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v3;

  v3 = *a1;
  *a2 = *(_QWORD *)(v2 + 16);
  a2[1] = v3;
  return v3;
}

uint64_t sub_1002FD544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        swift_unknownObjectRelease(v6);
        if (v6 == a2)
          return v5;
      }
      else if (*(_QWORD *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1))
        break;
      if (++v5 == v4)
        return 0;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

uint64_t sub_1002FD630(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSString v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  NSString v45;
  id v46;
  NSString v47;
  id v48;
  id v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  _BYTE *v55;
  uint64_t v56;
  void *v57;
  _BYTE *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD aBlock[5];
  uint64_t v77;
  id v78;

  v8 = v7;
  v69 = a4;
  v70 = a6;
  v72 = a5;
  v71 = a1;
  v10 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v10);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v73 = *(_QWORD *)(v13 - 8);
  v74 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for EpisodeDownloadState(0);
  v75 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for EpisodePlayState(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = dispatch thunk of LegacyLockup.playAction.getter(v20);
  if (result)
  {
    v65 = result;
    v25 = LegacyLockup.adamId.getter(v24);
    v26 = EpisodeStateController.stateMachine(for:)(v25);
    dispatch thunk of EpisodeStateMachine.currentState.getter(v26);
    swift_release(v26);
    v28 = LegacyLockup.adamId.getter(v27);
    v29 = EpisodeStateController.stateMachine(for:)(v28);
    dispatch thunk of EpisodeStateMachine.currentState.getter(v29);
    v30 = swift_release(v29);
    v31 = EpisodeDownloadState.isDownloadedEpisode.getter(v30);
    v67 = v16;
    v68 = a7;
    v66 = v18;
    if ((v31 & 1) != 0)
    {
      v33 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 4, -1, 16.0);
      v34 = String._bridgeToObjectiveC()();
      v35 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v34, v33);

    }
    else
    {
      v35 = 0;
    }
    v36 = v69;
    v37 = v70;
    LegacyLockup.title.getter(v31, v32);
    v39 = v38;
    sub_100177DE4(v71, v8, v72 & 1, v40);
    v42 = v41;
    v43 = v36;
    v44 = v35;
    if (v39)
    {
      v45 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v39);
    }
    else
    {
      v45 = 0;
    }
    v46 = objc_allocWithZone((Class)CPListItem);
    v47 = String._bridgeToObjectiveC()();
    v48 = objc_msgSend(v46, "initWithText:detailText:image:accessoryImage:accessoryType:", v45, v47, v43, v35, 0, swift_bridgeObjectRelease(v42).n128_f64[0]);

    v78 = v48;
    v49 = v48;
    v50 = sub_100177F54();
    if ((v51 & 1) == 0)
      objc_msgSend(v49, "setPlaybackProgress:", *(double *)&v50);

    v52 = v65;
    *(_QWORD *)v15 = v65;
    v15[8] = 0;
    v53 = v74;
    swift_storeEnumTagMultiPayload(v15, v74, 2);
    v54 = objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0));
    v55 = objc_msgSend(v54, "init", swift_retain().n128_f64[0]);
    sub_10013BE30((uint64_t)v15, (uint64_t)v12, type metadata accessor for CarPlayTemplateInfo.TemplateType);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v12, 0, 1, v53);
    v56 = (uint64_t)&v55[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
    swift_beginAccess(&v55[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
    sub_10017FE64((uint64_t)v12, v56);
    swift_endAccess(aBlock);
    v55[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 1;
    sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
    v57 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
    v58 = v55;
    sub_10017FF38((uint64_t)v57, (uint64_t)v55);

    v59 = v78;
    v60 = swift_allocObject(&unk_1004C1760, 32, 7);
    v61 = v68;
    *(_QWORD *)(v60 + 16) = v37;
    *(_QWORD *)(v60 + 24) = v61;
    aBlock[4] = sub_1002FD108;
    v77 = v60;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10017FEAC;
    aBlock[3] = &unk_1004C1778;
    v62 = _Block_copy(aBlock);
    v63 = v77;
    v64 = v59;
    swift_retain();
    swift_release(v63);
    objc_msgSend(v64, "setHandler:", v62);
    _Block_release(v62);

    swift_release(v52);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v66, v67);
    sub_10003F970((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    return (uint64_t)v78;
  }
  return result;
}

void sub_1002FDB58(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  dispatch_group_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __n128 v46;
  _OWORD *v47;
  double v48;
  double v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  NSObject *v58;
  id v59;
  double v60;
  double v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  __n128 v73;
  void *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  dispatch_group_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  dispatch_group_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD v123[2];
  uint64_t v124;
  __int128 aBlock;
  uint64_t (*v126)(uint64_t);
  void *v127;
  uint64_t (*v128)();
  _QWORD *v129;

  v121 = a6;
  v122 = a7;
  v108 = a5;
  v107 = a4;
  v110 = a3;
  v118 = a2;
  v120 = a1;
  v10 = sub_10003F544((uint64_t *)&unk_100562BF0);
  __chkstk_darwin(v10);
  v106 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for ArtworkModel(0);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v105 = (uint64_t)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for ArtworkRequest(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v14);
  v109 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v99 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v98 = (char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_allocObject(&unk_1004C1648, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_1002FE558;
  *(_QWORD *)(v22 + 24) = a9;
  *(_QWORD *)&aBlock = a8;
  swift_retain_n(a9, 2);
  v23 = sub_10003F544((uint64_t *)&unk_100558910);
  v24 = sub_10002F9C8((unint64_t *)&unk_100554510, (uint64_t *)&unk_100558910, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v23, v24, v25) & 1) != 0)
  {
    v92 = v20;
    v93 = v19;
    v94 = v17;
    v95 = v16;
    v96 = v22;
    v97 = a9;
    *(_QWORD *)&aBlock = a8;
    KeyPath = swift_getKeyPath(&unk_1003D4E10, v26);
    v28 = sub_10002F9C8(&qword_100558920, (uint64_t *)&unk_100558910, (uint64_t)&protocol conformance descriptor for [A]);
    v29 = sub_1001D0E78();
    v30 = Sequence.uniqued<A>(by:)(KeyPath, v23, v28, v29);
    swift_release(KeyPath);
    v31 = dispatch_group_create();
    v32 = swift_allocObject(&unk_1004C1670, 24, 7);
    v101 = v32;
    *(_QWORD *)(v32 + 16) = _swiftEmptyArrayStorage;
    v33 = (_QWORD *)(v32 + 16);
    if ((unint64_t)v30 >> 62)
    {
      if (v30 < 0)
        v89 = v30;
      else
        v89 = v30 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v30);
      v34 = _CocoaArrayWrapper.endIndex.getter(v89);
      swift_bridgeObjectRelease(v30);
    }
    else
    {
      v34 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v35 = v110;
    v36 = v118;
    v37 = (uint64_t)v109;
    if (!v34)
    {
LABEL_22:
      swift_bridgeObjectRelease(v30);
      sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
      v74 = (void *)static OS_dispatch_queue.main.getter(v73);
      v75 = (_QWORD *)swift_allocObject(&unk_1004C1698, 40, 7);
      v76 = v96;
      v75[2] = sub_1002FE560;
      v75[3] = v76;
      v77 = v101;
      v75[4] = v101;
      v128 = sub_1002FF9B4;
      v129 = v75;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v126 = sub_100027AF8;
      v127 = &unk_1004C16B0;
      v78 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      v79 = v98;
      static DispatchQoS.unspecified.getter(v80);
      *(_QWORD *)&v123[0] = _swiftEmptyArrayStorage;
      v81 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v82 = v31;
      v83 = sub_10003F544((uint64_t *)&unk_10055B200);
      v84 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
      v85 = v93;
      v86 = v83;
      v87 = v95;
      dispatch thunk of SetAlgebra.init<A>(_:)(v123, v86, v84, v95, v81);
      OS_dispatch_group.notify(qos:flags:queue:execute:)(v79, v85, v74, v78);
      _Block_release(v78);

      (*(void (**)(char *, uint64_t))(v94 + 8))(v85, v87);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v79, v92);
      v88 = v129;
      swift_release(v97);
      swift_release(v76);
      swift_release(v77);
      swift_release(v88);
      return;
    }
    if (v34 >= 1)
    {
      v38 = 0;
      v119 = v30 & 0xC000000000000001;
      v115 = v31;
      v114 = v30;
      v113 = v34;
      v100 = v33;
      do
      {
        if (v119)
        {
          v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v30);
        }
        else
        {
          v39 = *(_QWORD *)(v30 + 8 * v38 + 32);
          swift_retain();
        }
        v40 = sub_1002FD630(v120, v36, v35, 0, 0, v121, v122);
        if (v40)
        {
          v41 = (void *)v40;
          swift_beginAccess(v33, &aBlock, 33, 0);
          v42 = v41;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
          v44 = *(_QWORD *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v43 = *(_QWORD *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v44 >= v43 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
          v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
          specialized Array._endMutation()(v45);
          swift_endAccess(&aBlock);
          dispatch_group_enter(v31);
          v46 = swift_retain();
          LegacyLockup.icon.getter(v46);
          swift_release(v39);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v37, 1, v117) == 1)
          {
            swift_release(v39);

            sub_100007A28(v37, &qword_10055D840);
          }
          else
          {
            v47 = v108;
            v48 = *(double *)v108;
            v49 = *((double *)v108 + 1);
            sub_10000A520(v120, (uint64_t)&aBlock);
            v50 = swift_allocObject(&unk_1004C16E8, 168, 7);
            *(_QWORD *)(v50 + 16) = v31;
            *(_QWORD *)(v50 + 24) = v101;
            *(_QWORD *)(v50 + 32) = v42;
            *(_QWORD *)(v50 + 40) = v39;
            sub_10002099C(&aBlock, v50 + 48);
            *(_QWORD *)(v50 + 88) = v36;
            *(_QWORD *)(v50 + 96) = v35;
            v51 = v47[1];
            *(_OWORD *)(v50 + 104) = *v47;
            *(_OWORD *)(v50 + 120) = v51;
            *(_OWORD *)(v50 + 136) = v47[2];
            v52 = v122;
            *(_QWORD *)(v50 + 152) = v121;
            *(_QWORD *)(v50 + 160) = v52;
            v111 = swift_allocObject(&unk_1004C1710, 17, 7);
            *(_BYTE *)(v111 + 16) = 0;
            v53 = v37;
            v54 = v105;
            sub_10014FDF8(v53, v105, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
            v55 = type metadata accessor for CropCode(0);
            v56 = v106;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v106, 1, 1, v55);
            v124 = 0;
            memset(v123, 0, sizeof(v123));
            v57 = (void *)objc_opt_self(UIScreen);
            swift_retain();
            v112 = v42;
            swift_retain();
            v58 = v115;
            swift_retain();
            swift_retain();
            v59 = objc_msgSend(v57, "mainScreen", swift_retain().n128_f64[0]);
            objc_msgSend(v59, "scale");
            v61 = v60;

            v62 = v102;
            v63 = v56;
            v33 = v100;
            ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v54, 1, 0, v63, 0, _swiftEmptyArrayStorage, v123, v48, v49, v61);
            v64 = v107[3];
            v65 = v107[4];
            sub_10003A834(v107, v64);
            v66 = (_QWORD *)swift_allocObject(&unk_1004C1738, 40, 7);
            v67 = v111;
            v66[2] = v111;
            v66[3] = sub_1002FE5EC;
            v66[4] = v50;
            swift_retain();
            v68 = swift_retain();
            v69 = v65;
            v31 = v115;
            v35 = v110;
            ImageProvider.load(artwork:receiveImage:receiveCompletion:)(v62, sub_1002DE7B4, v66, 0, 0, v64, v69, v68);
            v70 = v66;
            v37 = (uint64_t)v109;
            swift_release(v70);
            (*(void (**)(char *, uint64_t))(v103 + 8))(v62, v104);
            swift_release(v50);
            swift_release(v39);

            v71 = v67;
            v36 = v118;
            swift_release(v71);
            sub_10003F970(v37, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
          }
          v30 = v114;
          v34 = v113;
        }
        else
        {
          swift_release(v39);
        }
        ++v38;
      }
      while (v34 != v38);
      goto LABEL_22;
    }
    __break(1u);
  }
  else
  {
    swift_retain();
    v72 = _swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
    {
      v90 = sub_10003F544(&qword_1005544F0);
      v72 = (_QWORD *)_bridgeCocoaArray<A>(_:)(_swiftEmptyArrayStorage, v90);
    }
    sub_100276064((uint64_t)v72);
    swift_release(v22);
    swift_release_n(a9, 2);
    swift_bridgeObjectRelease(v72);
  }
}

double sub_1002FE558(uint64_t a1)
{
  return sub_100276064(a1);
}

uint64_t sub_1002FE564@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = LegacyLockup.title.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1002FE590()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_10003D380((_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 160));
  return swift_deallocObject(v0, 168, 7);
}

void sub_1002FE5EC(void *a1)
{
  uint64_t v1;

  sub_1002F9FFC(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + 48, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), v1 + 104, *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
}

uint64_t sub_1002FE628()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FE638()
{
  return sub_1002FF8E0((void (*)(_QWORD))&_swift_release);
}

id sub_1002FE644(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  NSString v61;
  uint64_t v62;
  id v63;
  NSString v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  void *v88;
  _BYTE *v89;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  id v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD aBlock[3];
  void *v113;
  uint64_t v114;
  uint64_t v115;
  id v116;

  v106 = a3;
  v107 = a4;
  v104 = a2;
  v6 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v6);
  v8 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544((uint64_t *)&unk_100554EC0);
  __chkstk_darwin(v9);
  v11 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FlowDestination(0);
  v101 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v15 = *(_QWORD *)(v103 - 8);
  v16 = __chkstk_darwin(v103);
  v18 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v98 - v20;
  v110 = v4;
  v22 = (_QWORD *)LegacyLockup.genreNames.getter(v19);
  v105 = v21;
  v98 = v14;
  v99 = v11;
  if (!v22)
    goto LABEL_7;
  v23 = v22;
  if (!v22[2])
  {
    swift_bridgeObjectRelease(v22);
LABEL_7:
    v26 = _swiftEmptyArrayStorage;
    goto LABEL_8;
  }
  v24 = v22[4];
  v25 = v22[5];
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v23);
  v26 = sub_10027AE00(0, 1, 1, _swiftEmptyArrayStorage);
  v28 = v26[2];
  v27 = v26[3];
  if (v28 >= v27 >> 1)
    v26 = sub_10027AE00((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
  v26[2] = v28 + 1;
  v29 = &v26[2 * v28];
  v29[4] = v24;
  v29[5] = v25;
LABEL_8:
  v30 = LegacyLockup.isExplicit.getter();
  v108 = v18;
  v109 = v15;
  v100 = v12;
  if ((v30 & 1) != 0)
  {
    v31 = a1[3];
    v32 = a1[4];
    sub_10003A834(a1, v31);
    v33 = dispatch thunk of StoreDataProvider.explicitSymbol.getter(v31, v32);
    v35 = v34;
    if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
      v26 = sub_10027AE00(0, v26[2] + 1, 1, v26);
    v37 = v26[2];
    v36 = v26[3];
    v38 = v37 + 1;
    if (v37 >= v36 >> 1)
      v26 = sub_10027AE00((_QWORD *)(v36 > 1), v37 + 1, 1, v26);
    v102 = v8;
    v26[2] = v38;
    v39 = &v26[2 * v37];
    v39[4] = v33;
    v39[5] = v35;
  }
  else
  {
    v38 = v26[2];
    if (!v38)
    {
      v41 = _swiftEmptyArrayStorage;
      goto LABEL_29;
    }
    v102 = v8;
  }
  swift_bridgeObjectRetain(v26);
  v40 = v26 + 5;
  v41 = _swiftEmptyArrayStorage;
  do
  {
    v45 = *(v40 - 1);
    v46 = *v40;
    if (v45)
      v47 = 0;
    else
      v47 = v46 == 0xE000000000000000;
    if (!v47
      && (_stringCompareWithSmolCheck(_:_:expecting:)(*(v40 - 1), *v40, 0, 0xE000000000000000, 0) & 1) == 0)
    {
      swift_bridgeObjectRetain(v46);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
      aBlock[0] = v41;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100048628(0, v41[2] + 1, 1);
        v41 = (_QWORD *)aBlock[0];
      }
      v43 = v41[2];
      v42 = v41[3];
      if (v43 >= v42 >> 1)
      {
        sub_100048628(v42 > 1, v43 + 1, 1);
        v41 = (_QWORD *)aBlock[0];
      }
      v41[2] = v43 + 1;
      v44 = &v41[2 * v43];
      v44[4] = v45;
      v44[5] = v46;
    }
    v40 += 2;
    --v38;
  }
  while (v38);
  swift_bridgeObjectRelease(v26);
  v8 = v102;
LABEL_29:
  swift_bridgeObjectRelease(v26);
  aBlock[0] = v41;
  v50 = static String.eyebrowSeparatorSymbol.getter(v49);
  v52 = v51;
  v53 = sub_10003F544((uint64_t *)&unk_10055FDF0);
  v54 = sub_10002F9C8((unint64_t *)&qword_1005547B8, (uint64_t *)&unk_10055FDF0, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(v50, v52, v53, v54);
  v56 = v55;
  swift_release(v41);
  v57 = swift_bridgeObjectRelease(v52);
  LegacyLockup.titleAccessibilityLabel.getter(v57);
  if (v58)
  {
    v59 = v58;
    v60 = v104;
    v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v59);
  }
  else
  {
    v60 = v104;
    v61 = 0;
  }
  v62 = (uint64_t)v105;
  v63 = objc_allocWithZone((Class)CPListItem);
  v64 = String._bridgeToObjectiveC()();
  v65 = objc_msgSend(v63, "initWithText:detailText:image:accessoryImage:accessoryType:", v61, v64, v60, 0, 0, swift_bridgeObjectRelease(v56).n128_f64[0]);

  v116 = v65;
  v66 = swift_allocObject(&unk_1004C1878, 32, 7);
  v67 = v107;
  *(_QWORD *)(v66 + 16) = v106;
  *(_QWORD *)(v66 + 24) = v67;
  v114 = (uint64_t)sub_1002FD108;
  v115 = v66;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017FEAC;
  v113 = &unk_1004C1890;
  v68 = _Block_copy(aBlock);
  v69 = v115;
  v70 = v65;
  swift_retain();
  swift_release(v69);
  objc_msgSend(v70, "setHandler:", v68);
  _Block_release(v68);

  v71 = type metadata accessor for Podcasts(0);
  v113 = (void *)v71;
  v114 = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v72 = sub_1000242A8(aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v71 - 8) + 104))(v72, enum case for Podcasts.carPlayStoreShowPage(_:), v71);
  LOBYTE(v71) = isFeatureEnabled(_:)(aBlock);
  v73 = sub_10003D380(aBlock);
  v76 = (uint64_t)v108;
  v75 = v109;
  if ((v71 & 1) == 0)
    goto LABEL_40;
  dispatch thunk of LegacyLockup.clickAction.getter(aBlock, v73);
  if (!v113)
  {
    v83 = (uint64_t *)&unk_100554FF0;
    v84 = aBlock;
LABEL_39:
    sub_100007A28((uint64_t)v84, v83);
    goto LABEL_40;
  }
  v77 = sub_10003F544(&qword_100554920);
  v78 = type metadata accessor for FlowAction(0);
  if ((swift_dynamicCast(&v111, aBlock, v77, v78, 6) & 1) != 0)
  {
    v79 = v111;
    v80 = v99;
    dispatch thunk of FlowAction.destination.getter();
    v82 = v100;
    v81 = v101;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v101 + 48))(v80, 1, v100) != 1)
    {
      v91 = v98;
      (*(void (**)(char *, _QWORD *, uint64_t))(v81 + 32))(v98, v80, v82);
      v92 = sub_10003F544(&qword_100556410);
      v93 = *(int *)(v92 + 48);
      v94 = v76 + *(int *)(v92 + 64);
      v95 = FlowDestination.pageDestinationURL.getter();
      *(_QWORD *)(v76 + v93) = FlowDestination.pageDestinationPage.getter(v95);
      v97 = LegacyLockup.adamId.getter(v96);
      swift_release(v79);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v91, v82);
      *(_QWORD *)v94 = v97;
      *(_BYTE *)(v94 + 8) = 0;
      v85 = v103;
      swift_storeEnumTagMultiPayload(v76, v103, 7);
      sub_10013BE30(v76, v62, type metadata accessor for CarPlayTemplateInfo.TemplateType);
      goto LABEL_41;
    }
    swift_release(v79);
    v83 = (uint64_t *)&unk_100554EC0;
    v84 = v80;
    goto LABEL_39;
  }
LABEL_40:
  *(_QWORD *)v62 = LegacyLockup.adamId.getter(v74);
  *(_BYTE *)(v62 + 8) = 3;
  v85 = v103;
  swift_storeEnumTagMultiPayload(v62, v103, 2);
LABEL_41:
  sub_10014FDF8(v62, v76, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  v86 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
  sub_10013BE30(v76, (uint64_t)v8, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v8, 0, 1, v85);
  v87 = (uint64_t)&v86[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v86[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
  sub_10017FE64((uint64_t)v8, v87);
  swift_endAccess(aBlock);
  v86[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 1;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v88 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v89 = v86;
  sub_10017FF38((uint64_t)v88, (uint64_t)v86);

  sub_10003F970(v62, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  return v116;
}

void sub_1002FEE7C(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  dispatch_group_t v39;
  __n128 v40;
  _OWORD *v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  NSObject *v53;
  id v54;
  double v55;
  double v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  __n128 v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  __n128 v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  dispatch_group_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  dispatch_group_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD v111[2];
  uint64_t v112;
  __int128 aBlock;
  uint64_t (*v114)(uint64_t);
  void *v115;
  uint64_t (*v116)();
  _QWORD *v117;

  v110 = a5;
  v101 = a4;
  v98 = a3;
  v97 = a2;
  v100 = a1;
  v9 = sub_10003F544((uint64_t *)&unk_100562BF0);
  __chkstk_darwin(v9);
  v96 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ArtworkModel(0);
  v106 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v107 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for ArtworkRequest(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v14);
  v99 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for DispatchQoS(0);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v88 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_allocObject(&unk_1004C17B0, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_1002FE558;
  *(_QWORD *)(v21 + 24) = a7;
  v109 = a6;
  *(_QWORD *)&aBlock = a6;
  swift_retain_n(a7, 2);
  v22 = sub_10003F544(&qword_100553D30);
  v23 = sub_10002F9C8((unint64_t *)&unk_100563080, &qword_100553D30, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v22, v23, v24) & 1) != 0)
  {
    v87 = a7;
    v104 = dispatch_group_create();
    v25 = swift_allocObject(&unk_1004C1670, 24, 7);
    v92 = v25;
    *(_QWORD *)(v25 + 16) = _swiftEmptyArrayStorage;
    v105 = (_QWORD *)(v25 + 16);
    v86 = v21;
    v85 = v16;
    v84 = v17;
    v83 = v19;
    if ((unint64_t)v109 >> 62)
    {
      if (v109 < 0)
        v81 = v109;
      else
        v81 = v109 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v109);
      v26 = _CocoaArrayWrapper.endIndex.getter(v81);
    }
    else
    {
      v26 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v109);
    }
    v27 = (uint64_t)v99;
    v28 = v101;
    v29 = v100;
    v30 = v105;
    if (!v26)
    {
LABEL_22:
      swift_bridgeObjectRelease(v109);
      sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
      v66 = (void *)static OS_dispatch_queue.main.getter(v65);
      v67 = (_QWORD *)swift_allocObject(&unk_1004C17D8, 40, 7);
      v68 = v86;
      v67[2] = sub_1002FE560;
      v67[3] = v68;
      v69 = v92;
      v67[4] = v92;
      v116 = sub_1002FF838;
      v117 = v67;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v114 = sub_100027AF8;
      v115 = &unk_1004C17F0;
      v70 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      v71 = v88;
      static DispatchQoS.unspecified.getter(v72);
      *(_QWORD *)&v111[0] = _swiftEmptyArrayStorage;
      v73 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v74 = sub_10003F544((uint64_t *)&unk_10055B200);
      v75 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
      v76 = v83;
      v77 = v74;
      v78 = v85;
      dispatch thunk of SetAlgebra.init<A>(_:)(v111, v77, v75, v85, v73);
      v79 = v104;
      OS_dispatch_group.notify(qos:flags:queue:execute:)(v71, v76, v66, v70);
      _Block_release(v70);

      (*(void (**)(char *, uint64_t))(v84 + 8))(v76, v78);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v71, v90);
      v80 = v117;
      swift_release(v87);
      swift_release(v68);
      swift_release(v69);
      swift_release(v80);
      return;
    }
    if (v26 >= 1)
    {
      v31 = 0;
      v108 = v109 & 0xC000000000000001;
      v91 = v11;
      v103 = v26;
      do
      {
        if (v108)
        {
          v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v109);
        }
        else
        {
          v32 = *(_QWORD *)(v109 + 8 * v31 + 32);
          swift_retain();
        }
        v33 = sub_1002FE644(v29, 0, v28, v110);
        if (v33)
        {
          v34 = v33;
          swift_beginAccess(v30, &aBlock, 33, 0);
          v35 = v34;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
          v37 = *(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v36 = *(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v37 >= v36 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
          v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
          specialized Array._endMutation()(v38);
          swift_endAccess(&aBlock);
          v39 = v104;
          dispatch_group_enter(v104);
          LegacyLockup.icon.getter(v40);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v27, 1, v11) == 1)
          {
            swift_release(v32);

            sub_100007A28(v27, &qword_10055D840);
          }
          else
          {
            v41 = v98;
            v42 = *(double *)v98;
            v43 = *((double *)v98 + 1);
            sub_10000A520((uint64_t)v29, (uint64_t)&aBlock);
            v44 = swift_allocObject(&unk_1004C1828, 152, 7);
            v45 = v92;
            *(_QWORD *)(v44 + 16) = v39;
            *(_QWORD *)(v44 + 24) = v45;
            *(_QWORD *)(v44 + 32) = v35;
            *(_QWORD *)(v44 + 40) = v32;
            sub_10002099C(&aBlock, v44 + 48);
            v46 = v41[1];
            *(_OWORD *)(v44 + 88) = *v41;
            *(_OWORD *)(v44 + 104) = v46;
            *(_OWORD *)(v44 + 120) = v41[2];
            v47 = v27;
            v48 = v110;
            *(_QWORD *)(v44 + 136) = v28;
            *(_QWORD *)(v44 + 144) = v48;
            v49 = swift_allocObject(&unk_1004C1710, 17, 7);
            *(_BYTE *)(v49 + 16) = 0;
            sub_10014FDF8(v47, v107, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
            v50 = type metadata accessor for CropCode(0);
            v51 = v96;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v96, 1, 1, v50);
            v112 = 0;
            memset(v111, 0, sizeof(v111));
            v52 = (void *)objc_opt_self(UIScreen);
            swift_retain();
            v102 = v35;
            v53 = v39;
            swift_retain();
            v54 = objc_msgSend(v52, "mainScreen", swift_retain().n128_f64[0]);
            objc_msgSend(v54, "scale");
            v56 = v55;

            v57 = v93;
            v27 = (uint64_t)v99;
            ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v107, 1, 0, v51, 0, _swiftEmptyArrayStorage, v111, v42, v43, v56);
            v58 = v97[3];
            v59 = v97[4];
            sub_10003A834(v97, v58);
            v60 = (_QWORD *)swift_allocObject(&unk_1004C1850, 40, 7);
            v60[2] = v49;
            v60[3] = sub_1002FF8A0;
            v60[4] = v44;
            swift_retain();
            v61 = swift_retain();
            v11 = v91;
            ImageProvider.load(artwork:receiveImage:receiveCompletion:)(v57, sub_1002FF934, v60, 0, 0, v58, v59, v61);
            v62 = v60;
            v28 = v101;
            swift_release(v62);
            (*(void (**)(char *, uint64_t))(v94 + 8))(v57, v95);
            v63 = v44;
            v29 = v100;
            swift_release(v63);
            swift_release(v32);

            swift_release(v49);
            sub_10003F970(v27, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
          }
          v30 = v105;
          v26 = v103;
        }
        else
        {
          swift_release(v32);
        }
        ++v31;
      }
      while (v26 != v31);
      goto LABEL_22;
    }
    __break(1u);
  }
  else
  {
    swift_retain();
    v64 = _swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
    {
      v82 = sub_10003F544(&qword_1005544F0);
      v64 = (_QWORD *)_bridgeCocoaArray<A>(_:)(_swiftEmptyArrayStorage, v82);
    }
    sub_100276064((uint64_t)v64);
    swift_release(v21);
    swift_release_n(a7, 2);
    swift_bridgeObjectRelease(v64);
  }
}

double sub_1002FF7D4(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  double result;

  v2 = *(void (**)(void))(v1 + 16);
  v3 = sub_1001791C8(a1);
  v2();
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

uint64_t sub_1002FF80C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002FF838()
{
  uint64_t v0;

  return sub_1002FA17C(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1002FF854()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_10003D380((_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 144));
  return swift_deallocObject(v0, 152, 7);
}

void sub_1002FF8A0(void *a1)
{
  uint64_t v1;

  sub_1002F9E14(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), (_QWORD *)(v1 + 48), v1 + 88, *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144));
}

uint64_t sub_1002FF8D4()
{
  return sub_1002FF8E0((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1002FF8E0(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1002FF910()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002FF980(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002F35C4(a1, a2);
}

void *sub_1002FF9BC()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, "currentItem");
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "episodeUuid");

    if (v3)
    {
      v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id sub_1002FFA48()
{
  void *v0;

  return objc_msgSend(v0, "pausePlayerTarget");
}

void sub_1002FFA58()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, "player");
  objc_msgSend(v1, "stop");

}

void sub_1002FFA9C(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v11 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.classKit.getter(v11);
  swift_bridgeObjectRetain_n(a2, 2);
  v12 = a3;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v22 = v6;
    v15 = swift_slowAlloc(12, -1);
    v23 = v10;
    v16 = a1;
    v17 = (uint8_t *)v15;
    v18 = swift_slowAlloc(32, -1);
    v25 = v18;
    v21 = v7;
    *(_DWORD *)v17 = 136315138;
    swift_bridgeObjectRetain(a2);
    v24 = sub_10003D274(v16, a2, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v17 + 4, v17 + 12);

    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Setting user default - %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v10 = v23;
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRetain(a2);
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setBool:forKey:", 1, v19, swift_bridgeObjectRelease(a2).n128_f64[0]);

}

double sub_1002FFD18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  NSString v15;
  unsigned __int8 v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  double result;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v48 = a4;
  v49 = a5;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v13 = (char *)&v44 - v12;
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  swift_bridgeObjectRetain(a2);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "BOOLForKey:", v15, swift_bridgeObjectRelease(a2).n128_f64[0]);

  v17 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  if ((v16 & 1) != 0)
  {
    static OS_os_log.classKit.getter(v17);
    swift_bridgeObjectRetain_n(a2, 2);
    v18 = a3;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(12, -1);
      v46 = v9;
      v22 = (uint8_t *)v21;
      v23 = swift_slowAlloc(32, -1);
      v51 = v23;
      v47 = v8;
      *(_DWORD *)v22 = 136315138;
      v24 = _typeName(_:qualified:)(&type metadata for OldEpisodeContextMigration, 0);
      v26 = v25;
      v50 = sub_10003D274(v24, v25, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v22 + 4, v22 + 12);

      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v26);

      swift_bridgeObjectRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Skipping migration - %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v47);
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  else
  {
    static OS_os_log.classKit.getter(v17);
    swift_bridgeObjectRetain_n(a2, 2);
    v28 = a3;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.info.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v47 = v8;
      v31 = swift_slowAlloc(12, -1);
      v46 = v9;
      v32 = (uint8_t *)v31;
      v33 = swift_slowAlloc(32, -1);
      v51 = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = _typeName(_:qualified:)(&type metadata for OldEpisodeContextMigration, 0);
      v45 = a1;
      v36 = v35;
      v50 = sub_10003D274(v34, v35, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v32 + 4, v32 + 12);

      swift_bridgeObjectRelease(a2);
      v37 = v36;
      a1 = v45;
      swift_bridgeObjectRelease(v37);

      swift_bridgeObjectRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Starting migration - %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v47);
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    }
    v38 = (_QWORD *)swift_allocObject(&unk_1004C1A88, 56, 7);
    v38[2] = a1;
    v38[3] = a2;
    v39 = v48;
    v40 = v49;
    v38[4] = v28;
    v38[5] = v39;
    v38[6] = v40;
    v41 = (_QWORD *)swift_allocObject(&unk_1004C1AB0, 56, 7);
    v41[2] = a1;
    v41[3] = a2;
    v41[4] = v28;
    v41[5] = sub_1003038B4;
    v41[6] = v38;
    swift_bridgeObjectRetain_n(a2, 2);
    v42 = a1;
    v43 = v28;
    swift_retain();
    swift_retain();
    sub_10031EA90((uint64_t)sub_1003038FC, (uint64_t)v41, v42, a2, v43);
    swift_release(v38);
    *(_QWORD *)&result = swift_release(v41).n128_u64[0];
  }
  return result;
}

uint64_t sub_1003001F0(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void (*a5)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002FFA9C(a2, a3, a4);
  a5(a1);
  v14 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.classKit.getter(v14);
  swift_bridgeObjectRetain_n(a3, 2);
  v15 = a4;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v25 = v10;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v27 = v19;
    v24 = v11;
    *(_DWORD *)v18 = 136315138;
    v20 = _typeName(_:qualified:)(&type metadata for OldEpisodeContextMigration, 0);
    v22 = v21;
    v26 = sub_10003D274(v20, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v22);

    swift_bridgeObjectRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Finished migration - %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v13, v25);
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

id sub_10030042C(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  id v27;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  objc_super v33;
  _QWORD *v34;
  char v35;

  v32 = a1;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  v31 = v2;
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC8Podcasts15ClassKitManager_workQueue;
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v13 = v1;
  v14 = static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter(v14);
  v30 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v15 = *(void (**)(char *))(v3 + 104);
  v15(v5);
  *(_QWORD *)&v1[v12] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002CLL, 0x800000010043C780, v8, v11, v5, 0);
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Podcasts15ClassKitManager_subscriptions] = _swiftEmptyArrayStorage;
  v16 = OBJC_IVAR____TtC8Podcasts15ClassKitManager__playbackStart;
  v34 = 0;
  v35 = 1;
  v17 = sub_10003F544((uint64_t *)&unk_100559A80);
  *(_QWORD *)&v13[v16] = Synchronized.init(wrappedValue:)(&v34, v17);
  v18 = OBJC_IVAR____TtC8Podcasts15ClassKitManager__lastSignificantChangeTime;
  v34 = 0;
  v19 = Synchronized.init(wrappedValue:)(&v34, &type metadata for Double);
  *(_QWORD *)&v13[v18] = v19;
  v29 = OBJC_IVAR____TtC8Podcasts15ClassKitManager_migrationQueue;
  static DispatchQoS.unspecified.getter(v19);
  v34 = _swiftEmptyArrayStorage;
  v20 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v21 = sub_10003F544(&qword_100555A00);
  v22 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v21, v22, v9, v20);
  ((void (*)(char *, _QWORD, uint64_t))v15)(v5, v30, v31);
  v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x800000010043C7B0, v8, v11, v5, 0);
  *(_QWORD *)&v13[v29] = v23;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Podcasts15ClassKitManager_dataStoreDelegate] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ClassKitContextBuilder()), "init");
  v24 = type metadata accessor for PlaybackController(0);
  v25 = v32;
  BaseObjectGraph.inject<A>(_:)(&v34, v24, v24);
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Podcasts15ClassKitManager_playbackController] = v34;

  v26 = (objc_class *)type metadata accessor for ClassKitManager();
  v33.receiver = v13;
  v33.super_class = v26;
  v27 = objc_msgSendSuper2(&v33, "init");
  sub_1003022C4();

  swift_release(v25);
  return v27;
}

uint64_t sub_100300764(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v7 = swift_errorRetain(a1);
    static OS_os_log.classKit.getter(v7);
    swift_errorRetain(a1);
    v8 = swift_errorRetain(a1);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v19 = a1;
      v20 = v12;
      *(_DWORD *)v11 = 136315138;
      v18 = v11 + 4;
      swift_errorRetain(a1);
      v13 = sub_10003F544((uint64_t *)&unk_10055A340);
      v14 = String.init<A>(describing:)(&v19, v13);
      v16 = v15;
      v19 = sub_10003D274(v14, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v18, v11 + 12);
      swift_bridgeObjectRelease(v16);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error saving - %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

uint64_t sub_10030097C(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts15ClassKitManager_workQueue];
  v14 = (_QWORD *)swift_allocObject(&unk_1004C1AD8, 48, 7);
  v14[2] = a1;
  v14[3] = v3;
  v14[4] = a2;
  v14[5] = a3;
  aBlock[4] = sub_100303940;
  v27 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C1AF0;
  v15 = _Block_copy(aBlock);
  v16 = a1;
  v17 = v3;
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(v18);
  v25 = _swiftEmptyArrayStorage;
  v19 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10003F544((uint64_t *)&unk_10055B200);
  v21 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v7, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v27);
}

void sub_100300B8C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  Class isa;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  id v25;
  _QWORD v26[5];
  _QWORD *v27;

  v7 = objc_msgSend(a1, "podcast");
  if (v7)
  {
    v8 = v7;
    MPModelObject.adamID.getter();
    v10 = v9;

    if ((v10 & 1) == 0)
    {
      v11 = MPModelObject.adamID.getter();
      if ((v12 & 1) == 0)
      {
        v13 = v11;
        v14 = sub_10003F544((uint64_t *)&unk_1005588B0);
        v15 = swift_allocObject(v14, 64, 7);
        *(_OWORD *)(v15 + 16) = xmmword_1003CA220;
        v16 = sub_100030584();
        *(_QWORD *)(v15 + 32) = BinaryInteger.description.getter(&type metadata for UInt64, v16);
        *(_QWORD *)(v15 + 40) = v17;
        v26[0] = v13;
        *(_QWORD *)(v15 + 48) = BinaryInteger.description.getter(&type metadata for UInt64, v16);
        *(_QWORD *)(v15 + 56) = v18;
        v19 = objc_msgSend((id)objc_opt_self(CLSDataStore), "shared", v26[0]);
        v20 = objc_msgSend(v19, "mainAppContext");

        isa = Array._bridgeToObjectiveC()().super.isa;
        v22 = (_QWORD *)swift_allocObject(&unk_1004C1B28, 48, 7);
        v22[2] = v15;
        v22[3] = a2;
        v22[4] = a3;
        v22[5] = a4;
        v26[4] = sub_100303980;
        v27 = v22;
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 1107296256;
        v26[2] = sub_100301468;
        v26[3] = &unk_1004C1B40;
        v23 = _Block_copy(v26);
        v24 = v27;
        v25 = a2;
        swift_retain(a4);
        swift_release(v24);
        objc_msgSend(v20, "descendantMatchingIdentifierPath:completion:", isa, v23);
        _Block_release(v23);

      }
    }
  }
}

uint64_t sub_100300D70()
{
  void *v0;
  id v1;
  void *v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend(v0, "podcast");
  if (!v1)
    return 0;
  v2 = v1;
  MPModelObject.adamID.getter();
  v4 = v3;

  if ((v4 & 1) != 0)
    return 0;
  MPModelObject.adamID.getter();
  if ((v5 & 1) != 0)
    return 0;
  v6 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1003CA220;
  v8 = sub_100030584();
  *(_QWORD *)(v7 + 32) = BinaryInteger.description.getter(&type metadata for UInt64, v8);
  *(_QWORD *)(v7 + 40) = v9;
  *(_QWORD *)(v7 + 48) = BinaryInteger.description.getter(&type metadata for UInt64, v8);
  *(_QWORD *)(v7 + 56) = v10;
  return v7;
}

uint64_t sub_100300E5C(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t (*v60)(_QWORD, uint64_t);
  void (**v61)(char *, uint64_t);
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  void (**v66)(char *, uint64_t);
  uint64_t aBlock[5];
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;

  v64 = a5;
  v65 = a6;
  v62 = a3;
  v63 = a2;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (void (**)(char *, uint64_t))((char *)&v62 - v13);
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v66 = *(void (***)(char *, uint64_t))(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v63 = *(_QWORD **)(a4 + OBJC_IVAR____TtC8Podcasts15ClassKitManager_workQueue);
    v23 = v20;
    v24 = (_QWORD *)swift_allocObject(&unk_1004C1B78, 40, 7);
    v25 = v65;
    v24[2] = v64;
    v24[3] = v25;
    v24[4] = a1;
    aBlock[4] = (uint64_t)sub_1002F650C;
    v68 = v24;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100027AF8;
    aBlock[3] = (uint64_t)&unk_1004C1B90;
    v26 = _Block_copy(aBlock);
    v27 = a1;
    swift_retain(v25);
    static DispatchQoS.unspecified.getter(v28);
    v69 = _swiftEmptyArrayStorage;
    v29 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v30 = sub_10003F544((uint64_t *)&unk_10055B200);
    v31 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v69, v30, v31, v15, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v22, v17, v26);
    _Block_release(v26);

    v66[1](v17, v15);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v23);
    return swift_release(v68);
  }
  else
  {
    v33 = v62;
    v34 = v63;
    if (v63)
    {
      v35 = v12;
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v36 = swift_errorRetain(v34);
      static OS_os_log.classKit.getter(v36);
      swift_bridgeObjectRetain(v33);
      swift_errorRetain(v34);
      swift_bridgeObjectRetain(v33);
      v37 = swift_errorRetain(v34);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.error.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        v40 = swift_slowAlloc(22, -1);
        v66 = (void (**)(char *, uint64_t))v35;
        v41 = v33;
        v42 = v40;
        v43 = swift_slowAlloc(64, -1);
        aBlock[0] = v43;
        *(_DWORD *)v42 = 136315394;
        v44 = Array.description.getter(v41, &type metadata for String);
        v46 = v45;
        v69 = (_QWORD *)sub_10003D274(v44, v45, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v42 + 4, v42 + 12);
        swift_bridgeObjectRelease_n(v41, 2);
        swift_bridgeObjectRelease(v46);
        *(_WORD *)(v42 + 12) = 2080;
        v69 = v34;
        swift_errorRetain(v34);
        v47 = sub_10003F544((uint64_t *)&unk_10055A340);
        v48 = String.init<A>(describing:)(&v69, v47);
        v50 = v49;
        v69 = (_QWORD *)sub_10003D274(v48, v49, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v42 + 14, v42 + 22);
        swift_bridgeObjectRelease(v50);
        swift_errorRelease(v34);
        swift_errorRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Error finding episode context %s - %s", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);

        swift_errorRelease(v34);
        return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))((char *)v66, v8);
      }
      else
      {
        swift_errorRelease(v34);
        swift_bridgeObjectRelease_n(v33, 2);
        swift_errorRelease(v34);
        swift_errorRelease(v34);

        return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v35, v8);
      }
    }
    else
    {
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      ((void (*)(void))static OS_os_log.classKit.getter)();
      v51 = swift_bridgeObjectRetain_n(v33, 2);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.error.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc(12, -1);
        v66 = v14;
        v55 = (uint8_t *)v54;
        v56 = swift_slowAlloc(32, -1);
        aBlock[0] = v56;
        *(_DWORD *)v55 = 136315138;
        v57 = Array.description.getter(v33, &type metadata for String);
        v59 = v58;
        v69 = (_QWORD *)sub_10003D274(v57, v58, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v55 + 4, v55 + 12);
        swift_bridgeObjectRelease_n(v33, 2);
        swift_bridgeObjectRelease(v59);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unknown error finding episode context - %s", v55, 0xCu);
        swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v55, -1, -1);

        v60 = *(uint64_t (**)(_QWORD, uint64_t))(v9 + 8);
        v61 = v66;
      }
      else
      {

        swift_bridgeObjectRelease_n(v33, 2);
        v60 = *(uint64_t (**)(_QWORD, uint64_t))(v9 + 8);
        v61 = v14;
      }
      return v60(v61, v8);
    }
  }
}

void sub_100301468(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_1003014DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;
  __int128 v28;
  _QWORD v29[5];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin();
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = xmmword_1003CA200;
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts15ClassKitManager_migrationQueue);
  v29[3] = &type metadata for OldEpisodeContextMigration;
  v29[4] = &off_1004C2E20;
  v29[0] = 0xD00000000000002DLL;
  v29[1] = 0x800000010043C700;
  v29[2] = v7;
  v8 = sub_10003A834(v29, (uint64_t)&type metadata for OldEpisodeContextMigration);
  v10 = *v8;
  v9 = v8[1];
  v11 = (void *)v8[2];
  v12 = (_QWORD *)swift_allocObject(&unk_1004C1A38, 56, 7);
  v12[2] = v10;
  v12[3] = v9;
  v12[4] = v11;
  v12[5] = sub_10028D5C0;
  v12[6] = 0;
  aBlock[4] = sub_1003038A0;
  v27 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C1A50;
  v13 = _Block_copy(aBlock);
  v14 = v11;
  v15 = v7;
  swift_bridgeObjectRetain(v9);
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10003F544((uint64_t *)&unk_10055B200);
  v19 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v1, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v3, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v23);
  swift_release(v27);
  v20 = v28;
  v21 = sub_10003F544(&qword_100563148);
  return swift_arrayDestroy(v29, v20, v21);
}

void sub_10030176C(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v5;
  void *v6;
  _QWORD v7[6];

  sub_100302E30(a5, a1, a2, a3);
  v5 = objc_msgSend((id)objc_opt_self(CLSDataStore), "shared");
  v7[4] = sub_100300764;
  v7[5] = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100004B9C;
  v7[3] = &unk_1004C1910;
  v6 = _Block_copy(v7);
  objc_msgSend(v5, "saveWithCompletion:", v6);
  _Block_release(v6);

}

void sub_100301820(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[8];
  uint64_t aBlock[6];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v42 - v13;
  if ((a3 & 1) == 0)
  {
    v44 = a2;
    v45[0] = 0;
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Podcasts15ClassKitManager__playbackStart, aBlock, 33, 0);
    v15 = sub_10003F544((uint64_t *)&unk_100563100);
    Synchronized.wrappedValue.setter(&v44, v15);
    swift_endAccess(aBlock);
  }
  objc_msgSend(a1, "becomeActive");
  v16 = sub_100300D70();
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend(a1, "currentActivity");
    if (v18)
    {
      v19 = v18;
      objc_msgSend(v18, "setBackgroundTimeTrackingEnabled:", 1);
      v20 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      static OS_os_log.classKit.getter(v20);
      v21 = swift_bridgeObjectRetain(v17);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v43 = v8;
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        aBlock[0] = v25;
        v42 = v9;
        *(_DWORD *)v24 = 136315138;
        v26 = Array.description.getter(v17, &type metadata for String);
        v28 = v27;
        v44 = sub_10003D274(v26, v27, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v24 + 4, v24 + 12);
        swift_bridgeObjectRelease_n(v17, 2);
        swift_bridgeObjectRelease(v28);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Resuming activity for episode - %s", v24, 0xCu);
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);

        (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v43);
LABEL_12:
        objc_msgSend(v19, "start");

        v40 = objc_msgSend((id)objc_opt_self(CLSDataStore), "shared");
        aBlock[4] = (uint64_t)sub_100300764;
        aBlock[5] = 0;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100004B9C;
        aBlock[3] = (uint64_t)&unk_1004C19D8;
        v41 = _Block_copy(aBlock);
        objc_msgSend(v40, "saveWithCompletion:", v41);
        _Block_release(v41);

        return;
      }

      swift_bridgeObjectRelease_n(v17, 2);
      v38 = *(void (**)(char *, uint64_t))(v9 + 8);
      v39 = v12;
    }
    else
    {
      v19 = objc_msgSend(a1, "createNewActivity");
      objc_msgSend(v19, "setBackgroundTimeTrackingEnabled:", 1);
      v29 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      static OS_os_log.classKit.getter(v29);
      v30 = swift_bridgeObjectRetain(v17);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v42 = v9;
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        aBlock[0] = v34;
        v43 = v8;
        *(_DWORD *)v33 = 136315138;
        v35 = Array.description.getter(v17, &type metadata for String);
        v37 = v36;
        v44 = sub_10003D274(v35, v36, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v33 + 4, v33 + 12);
        swift_bridgeObjectRelease_n(v17, 2);
        swift_bridgeObjectRelease(v37);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Starting activity for episode - %s", v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v43);
        goto LABEL_12;
      }

      swift_bridgeObjectRelease_n(v17, 2);
      v38 = *(void (**)(char *, uint64_t))(v9 + 8);
      v39 = v14;
    }
    v38(v39, v8);
    goto LABEL_12;
  }
}

void sub_100301D08(void *a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  __n128 v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  Class isa;
  uint64_t v50;
  uint8_t *v51;
  uint8_t *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  void *v55;
  double v56;
  char v57;
  uint64_t v58;
  _BYTE v59[8];
  _BYTE v60[24];

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v50 - v14;
  v16 = objc_msgSend(a1, "currentActivity");
  if (v16)
  {
    v55 = v16;
    if (!objc_msgSend(v16, "isStarted"))
      goto LABEL_13;
    v17 = (uint64_t *)(a2 + OBJC_IVAR____TtC8Podcasts15ClassKitManager__playbackStart);
    swift_beginAccess(v17, v60, 0, 0);
    v18 = *v17;
    swift_retain();
    sub_10003F544((uint64_t *)&unk_100559A80);
    Synchronized.wrappedValue.getter(&v56, v19);
    swift_release(v18);
    if ((v57 & 1) == 0 && (a4 & 1) == 0)
    {
      v20 = v56;
      v58 = a3;
      v59[0] = 0;
      swift_beginAccess(v17, &v56, 33, 0);
      v21 = sub_10003F544((uint64_t *)&unk_100563100);
      Synchronized.wrappedValue.setter(&v58, v21);
      swift_endAccess(&v56);
      sub_100302E30(a5, a1, v20, *(double *)&a3);
    }
    v22 = sub_100300D70();
    if (v22)
    {
      v23 = v22;
      objc_msgSend(a5, "duration");
      if (v24 <= 120.0 || (objc_msgSend(v55, "progress"), v25 >= 0.9))
      {
        objc_msgSend(a5, "duration");
        if (v26 > 120.0 || (objc_msgSend(v55, "progress"), v27 >= 0.8))
        {
          v28 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
          static OS_os_log.classKit.getter(v28);
          v29 = swift_bridgeObjectRetain_n(v23, 2);
          v30 = Logger.logObject.getter(v29);
          v31 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v30, v31))
          {
            v54 = (void (*)(char *, uint64_t))v28;
            v32 = (uint8_t *)swift_slowAlloc(12, -1);
            v53 = swift_slowAlloc(32, -1);
            v56 = *(double *)&v53;
            v52 = v32;
            *(_DWORD *)v32 = 136315138;
            v51 = v32 + 4;
            v33 = Array.description.getter(v23, &type metadata for String);
            v35 = v34;
            v58 = sub_10003D274(v33, v34, (uint64_t *)&v56);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v51, v32 + 12);
            swift_bridgeObjectRelease_n(v23, 2);
            swift_bridgeObjectRelease(v35);
            v36 = v52;
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "Setting progress to 100%%%% for episode - %s", v52, 0xCu);
            v37 = v53;
            swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v37, -1, -1);
            swift_slowDealloc(v36, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v23, 2);
          }
          v38 = *(void (**)(char *, uint64_t))(v11 + 8);
          v38(v15, v10);
          static OS_os_log.classKit.getter(objc_msgSend(v55, "addProgressRangeFromStart:toEnd:", 0.0, 1.0));
          v39 = swift_bridgeObjectRetain_n(v23, 2);
          v40 = Logger.logObject.getter(v39);
          v41 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v40, v41))
          {
            v42 = (uint8_t *)swift_slowAlloc(12, -1);
            v43 = swift_slowAlloc(32, -1);
            v54 = v38;
            v44 = v43;
            v56 = *(double *)&v43;
            *(_DWORD *)v42 = 136315138;
            v53 = (uint64_t)(v42 + 4);
            v45 = Array.description.getter(v23, &type metadata for String);
            v47 = v46;
            v58 = sub_10003D274(v45, v46, (uint64_t *)&v56);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v53, v42 + 12);
            swift_bridgeObjectRelease_n(v23, 2);
            swift_bridgeObjectRelease(v47);
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "Completing activities for episode - %s", v42, 0xCu);
            swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v44, -1, -1);
            swift_slowDealloc(v42, -1, -1);

            v54(v13, v10);
          }
          else
          {

            swift_bridgeObjectRelease_n(v23, 2);
            v38(v13, v10);
          }
          v48 = objc_msgSend((id)objc_opt_self(CLSDataStore), "shared");
          isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v48, "completeAllAssignedActivitiesMatching:", isa);

        }
      }
      sub_1003035EC(v23, v55, a1);

      swift_bridgeObjectRelease(v23);
    }
    else
    {
LABEL_13:

    }
  }
}

void sub_1003022C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[24];

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_10055FF90);
  v3 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  v51 = v3;
  __chkstk_darwin(v2);
  v47 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_100563110);
  v6 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  v49 = v6;
  __chkstk_darwin(v5);
  v45 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_100563118);
  v9 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  v53 = v9;
  __chkstk_darwin(v8);
  v46 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544((uint64_t *)&unk_100563120);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544((uint64_t *)&unk_10055B6F0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of PlaybackController.$isPlaying.getter(v17);
  v20 = sub_10002F9C8(&qword_100556560, (uint64_t *)&unk_100563120, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher<>.removeDuplicates()(v11, v20, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v21 = swift_allocObject(&unk_1004C1948, 24, 7);
  v44 = v0;
  swift_unknownObjectWeakInit(v21 + 16, v0);
  v22 = sub_10002F9C8((unint64_t *)&unk_10055B740, (uint64_t *)&unk_10055B6F0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v23 = Publisher<>.sink(receiveValue:)(sub_1003034EC, v21, v15, v22);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v24 = v1 + OBJC_IVAR____TtC8Podcasts15ClassKitManager_subscriptions;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts15ClassKitManager_subscriptions, v54, 33, 0);
  v25 = sub_10003F544((uint64_t *)&unk_100556450);
  v26 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v24, v25, v26);
  swift_endAccess(v54);
  v27 = swift_release(v23);
  v28 = v45;
  v29 = dispatch thunk of PlaybackController.$durationSnapshot.getter(v27);
  v30 = v47;
  dispatch thunk of PlaybackController.$nowPlayingItem.getter(v29);
  v31 = sub_10002F9C8((unint64_t *)&unk_100563130, &qword_100563110, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v32 = sub_10002F9C8(&qword_100556758, (uint64_t *)&unk_10055FF90, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v33 = v46;
  v34 = v48;
  v35 = v50;
  Publisher.combineLatest<A>(_:)(v30, v48, v50, v31, v32);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v35);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v34);
  v36 = swift_allocObject(&unk_1004C1948, 24, 7);
  v37 = v44;
  swift_unknownObjectWeakInit(v36 + 16, v44);
  v38 = swift_allocObject(&unk_1004C1970, 32, 7);
  *(_QWORD *)(v38 + 16) = sub_1003034F4;
  *(_QWORD *)(v38 + 24) = v36;
  v39 = sub_10002F9C8(&qword_100563140, &qword_100563118, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v40 = v52;
  v41 = Publisher<>.sink(receiveValue:)(sub_100303520, v38, v52, v39);
  swift_release(v38);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v40);
  swift_beginAccess(v24, v54, 33, 0);
  AnyCancellable.store<A>(in:)(v24, v25, v26);
  swift_endAccess(v54);
  swift_release(v41);
  v42 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v42, "addObserver:selector:name:object:", v37, "applicationWillTerminate:", MTApplicationWillTerminateNotification, 0);

}

void sub_100302764(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  float v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  void *v27;
  double v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  void (*v33)(void *);
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  _QWORD v38[7];
  _QWORD v39[5];
  float v40;
  char v41;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *a1;
  v9 = a2 + 16;
  swift_beginAccess(v9, v37, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  if (Strong)
  {
    v11 = (void *)Strong;
    v12 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8Podcasts15ClassKitManager_playbackController);
    swift_retain(v12);

    dispatch thunk of PlaybackController.durationSnapshot.getter(v38);
    swift_release(v12);
    sub_100303564((uint64_t)v38, (uint64_t)v39);
    if (v41 != 2)
    {
      v13 = *(double *)v39;
      v14 = *(double *)&v39[3];
      v15 = *(double *)&v39[4];
      v16 = v40;
      swift_beginAccess(v9, v36, 0, 0);
      v17 = swift_unknownObjectWeakLoadStrong(v9);
      if (v17)
      {
        v18 = (void *)v17;
        v19 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8Podcasts15ClassKitManager_playbackController);
        swift_retain(v19);

        v21 = (void *)dispatch thunk of PlaybackController.nowPlayingItem.getter(v20);
        v22 = swift_release(v19);
        if (v21)
        {
          v23 = Date.init()(v22);
          v24 = Date.timeIntervalSinceReferenceDate.getter(v23);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          if (v15 + (v24 - v13) * v16 >= v14)
            v25 = v14;
          else
            v25 = v15 + (v24 - v13) * v16;
          swift_beginAccess(v9, v35, 0, 0);
          v26 = swift_unknownObjectWeakLoadStrong(v9);
          if (v26)
          {
            v27 = (void *)v26;
            v28 = fmax(v25, 0.0);
            if ((v8 & 1) != 0)
            {
              v29 = swift_allocObject(&unk_1004C19C0, 48, 7);
              *(double *)(v29 + 16) = v28;
              *(_BYTE *)(v29 + 24) = 0;
              *(_QWORD *)(v29 + 32) = v27;
              *(_QWORD *)(v29 + 40) = v21;
              v30 = v27;
              v31 = v21;
              v32 = v31;
              v33 = sub_1003035DC;
            }
            else
            {
              v29 = swift_allocObject(&unk_1004C1998, 48, 7);
              *(_QWORD *)(v29 + 16) = v27;
              *(double *)(v29 + 24) = v28;
              *(_BYTE *)(v29 + 32) = 0;
              *(_QWORD *)(v29 + 40) = v21;
              v30 = v27;
              v31 = v21;
              v32 = v31;
              v33 = (void (*)(void *))sub_1003035AC;
            }
            sub_10030097C(v31, (uint64_t)v33, v29);

            swift_release(v29);
          }
          else
          {

          }
        }
      }
    }
  }
}

void sub_1003029D0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v11;
  float v12;
  double v13;
  double v14;
  double v15;
  id v16;
  uint64_t v17;
  double v18;
  uint64_t Strong;
  void *v20;
  double v21;
  _BYTE v22[24];
  _QWORD v23[5];
  float v24;
  char v25;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100303564(a1, (uint64_t)v23);
  if (v25 != 2 && a2 != 0)
  {
    v11 = a3 + 16;
    v12 = v24;
    v13 = *(double *)&v23[3];
    v14 = *(double *)&v23[4];
    v15 = *(double *)v23;
    v16 = a2;
    v17 = Date.init()(v16);
    v18 = Date.timeIntervalSinceReferenceDate.getter(v17);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    swift_beginAccess(v11, v22, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v11);
    if (Strong)
    {
      v20 = (void *)Strong;
      v21 = v14 + (v18 - v15) * v12;
      if (v21 >= v13)
        v21 = v13;
      sub_100302B00(v16, fmax(v21, 0.0));

    }
  }
}

uint64_t sub_100302B00(void *a1, double a2)
{
  char *v2;
  char *v3;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  char v19;
  double v20;
  char v21;
  double v22[3];
  char v23[24];

  v3 = v2;
  v6 = &v2[OBJC_IVAR____TtC8Podcasts15ClassKitManager__lastSignificantChangeTime];
  swift_beginAccess(v6, v23, 0, 0);
  v7 = *(_QWORD *)v6;
  v8 = swift_retain(*(_QWORD *)v6);
  Synchronized.wrappedValue.getter(v22, v8);
  result = swift_release(v7);
  if (a2 - v22[0] > 30.0)
  {
    v18 = a2;
    swift_beginAccess(v6, v22, 33, 0);
    v10 = sub_10003F544((uint64_t *)&unk_1005630F0);
    Synchronized.wrappedValue.setter(&v18, v10);
    swift_endAccess(v22);
    v11 = &v3[OBJC_IVAR____TtC8Podcasts15ClassKitManager__playbackStart];
    swift_beginAccess(&v3[OBJC_IVAR____TtC8Podcasts15ClassKitManager__playbackStart], v22, 0, 0);
    v12 = *(_QWORD *)v11;
    swift_retain(*(_QWORD *)v11);
    sub_10003F544((uint64_t *)&unk_100559A80);
    Synchronized.wrappedValue.getter(&v18, v13);
    result = swift_release(v12);
    if ((v19 & 1) == 0)
    {
      v14 = v18;
      v20 = a2;
      v21 = 0;
      swift_beginAccess(v11, &v18, 33, 0);
      v15 = sub_10003F544((uint64_t *)&unk_100563100);
      Synchronized.wrappedValue.setter(&v20, v15);
      swift_endAccess(&v18);
      v16 = swift_allocObject(&unk_1004C18F8, 48, 7);
      *(_QWORD *)(v16 + 16) = v3;
      *(_QWORD *)(v16 + 24) = a1;
      *(double *)(v16 + 32) = v14;
      *(double *)(v16 + 40) = a2;
      v17 = v3;
      sub_10030097C(a1, (uint64_t)sub_100302E24, v16);
      return swift_release(v16);
    }
  }
  return result;
}

id sub_100302D20()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClassKitManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ClassKitManager()
{
  return objc_opt_self(_TtC8Podcasts15ClassKitManager);
}

uint64_t sub_100302DF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_100302E24(void *a1)
{
  uint64_t v1;

  sub_10030176C(a1, *(double *)(v1 + 32), *(double *)(v1 + 40), *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_100302E30(void *a1, void *a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;

  v69 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v69 - 8);
  v9 = __chkstk_darwin(v69);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v67 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v67 - v15;
  v17 = objc_msgSend(a1, "podcast");
  if (v17)
  {
    v18 = v17;
    v19 = MPModelObject.adamID.getter();
    v21 = v20;

    if ((v21 & 1) == 0)
    {
      v22 = MPModelObject.adamID.getter();
      if ((v23 & 1) == 0)
      {
        v24 = v22;
        v68 = v8;
        v25 = sub_10003F544((uint64_t *)&unk_1005588B0);
        v26 = swift_allocObject(v25, 64, 7);
        *(_OWORD *)(v26 + 16) = xmmword_1003CA220;
        v71 = v19;
        v27 = sub_100030584();
        *(_QWORD *)(v26 + 32) = BinaryInteger.description.getter(&type metadata for UInt64, v27);
        *(_QWORD *)(v26 + 40) = v28;
        v71 = v24;
        *(_QWORD *)(v26 + 48) = BinaryInteger.description.getter(&type metadata for UInt64, v27);
        *(_QWORD *)(v26 + 56) = v29;
        v30 = objc_msgSend(a2, "currentActivity");
        if (v30)
        {
          v31 = v30;
          objc_msgSend(a1, "duration");
          v33 = fmin(a3 / v32, 1.0);
          if (v33 < 0.0)
            v34 = 0.0;
          else
            v34 = v33;
          objc_msgSend(a1, "duration");
          v36 = fmin(a4 / v35, 1.0);
          if (v36 < 0.0)
            v37 = 0.0;
          else
            v37 = v36;
          if (v34 == v37)
          {
            swift_bridgeObjectRelease(v26);
            v38 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
            v39 = static OS_os_log.classKit.getter(v38);
            v40 = Logger.logObject.getter(v39);
            v41 = static os_log_type_t.default.getter(v40);
            if (os_log_type_enabled(v40, v41))
            {
              v42 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v42 = 0;
              _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping range with equal start and stop times", v42, 2u);
              swift_slowDealloc(v42, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v68 + 8))(v11, v69);
          }
          else
          {
            v71 = 0;
            v72 = 0xE000000000000000;
            v43._countAndFlagsBits = 91;
            v43._object = (void *)0xE100000000000000;
            String.append(_:)(v43);
            Double.write<A>(to:)(&v71, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v34);
            v44._countAndFlagsBits = 8236;
            v44._object = (void *)0xE200000000000000;
            String.append(_:)(v44);
            Double.write<A>(to:)(&v71, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v37);
            v45._countAndFlagsBits = 93;
            v45._object = (void *)0xE100000000000000;
            String.append(_:)(v45);
            v47 = v71;
            v46 = v72;
            v48 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
            if (v34 >= v37)
            {
              static OS_os_log.classKit.getter(v48);
              swift_bridgeObjectRetain(v46);
              v58 = swift_bridgeObjectRetain(v26);
              v59 = Logger.logObject.getter(v58);
              v60 = static os_log_type_t.error.getter(v59);
              if (os_log_type_enabled(v59, v60))
              {
                v61 = swift_slowAlloc(22, -1);
                v62 = v26;
                v63 = swift_slowAlloc(64, -1);
                v71 = v63;
                *(_DWORD *)v61 = 136315394;
                swift_bridgeObjectRetain(v46);
                v70 = sub_10003D274(v47, v46, &v71);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v61 + 4, v61 + 12);
                swift_bridgeObjectRelease_n(v46, 3);
                *(_WORD *)(v61 + 12) = 2080;
                v64 = Array.description.getter(v62, &type metadata for String);
                v66 = v65;
                v70 = sub_10003D274(v64, v65, &v71);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v61 + 14, v61 + 22);
                swift_bridgeObjectRelease_n(v62, 2);
                swift_bridgeObjectRelease(v66);
                _os_log_impl((void *)&_mh_execute_header, v59, v60, "Unable to add progress range %s to activity for episode - %s", (uint8_t *)v61, 0x16u);
                swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v63, -1, -1);
                swift_slowDealloc(v61, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n(v26, 2);
                swift_bridgeObjectRelease_n(v46, 2);
              }

              (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v69);
            }
            else
            {
              static OS_os_log.classKit.getter(v48);
              swift_bridgeObjectRetain(v46);
              v49 = swift_bridgeObjectRetain(v26);
              v50 = Logger.logObject.getter(v49);
              v51 = static os_log_type_t.default.getter(v50);
              if (os_log_type_enabled(v50, v51))
              {
                v52 = swift_slowAlloc(22, -1);
                v53 = v26;
                v54 = swift_slowAlloc(64, -1);
                v71 = v54;
                *(_DWORD *)v52 = 136315394;
                swift_bridgeObjectRetain(v46);
                v70 = sub_10003D274(v47, v46, &v71);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v52 + 4, v52 + 12);
                swift_bridgeObjectRelease_n(v46, 3);
                *(_WORD *)(v52 + 12) = 2080;
                v55 = Array.description.getter(v53, &type metadata for String);
                v57 = v56;
                v70 = sub_10003D274(v55, v56, &v71);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v52 + 14, v52 + 22);
                swift_bridgeObjectRelease_n(v53, 2);
                swift_bridgeObjectRelease(v57);
                _os_log_impl((void *)&_mh_execute_header, v50, v51, "Adding progress range %s to activity for episode - %s", (uint8_t *)v52, 0x16u);
                swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v54, -1, -1);
                swift_slowDealloc(v52, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n(v26, 2);
                swift_bridgeObjectRelease_n(v46, 2);
              }
              (*(void (**)(char *, uint64_t))(v68 + 8))(v16, v69);
              objc_msgSend(v31, "addProgressRangeFromStart:toEnd:", v34, v37);

            }
          }
        }
        else
        {
          swift_bridgeObjectRelease(v26);
        }
      }
    }
  }
}

uint64_t sub_1003034C8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003034EC(char *a1)
{
  uint64_t v1;

  sub_100302764(a1, v1);
}

void sub_1003034F4(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1003029D0(a1, a2, v2);
}

uint64_t sub_1003034FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100303520(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_BYTE *, _QWORD);
  _BYTE v5[56];

  v3 = *(uint64_t (**)(_BYTE *, _QWORD))(v1 + 16);
  sub_100303564(a1, (uint64_t)v5);
  return v3(v5, *(_QWORD *)(a1 + 56));
}

uint64_t sub_100303564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_1005624C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003035B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_1003035DC(void *a1)
{
  uint64_t v1;

  sub_100301820(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1003035EC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t aBlock[6];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.classKit.getter(v10);
  v11 = swift_bridgeObjectRetain_n(a1, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v26 = a3;
    v14 = swift_slowAlloc(12, -1);
    v25 = v7;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    aBlock[0] = v16;
    *(_DWORD *)v15 = 136315138;
    v17 = Array.description.getter(a1, &type metadata for String);
    v24 = v6;
    v18 = a2;
    v20 = v19;
    v27 = sub_10003D274(v17, v19, aBlock);
    a3 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, aBlock, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    v21 = v20;
    a2 = v18;
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Stopping activity for episode - %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v24);
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  objc_msgSend(a2, "stop");
  objc_msgSend(a3, "resignActive");
  v22 = objc_msgSend((id)objc_opt_self(CLSDataStore), "shared");
  aBlock[4] = (uint64_t)sub_100300764;
  aBlock[5] = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100004B9C;
  aBlock[3] = (uint64_t)&unk_1004C1A00;
  v23 = _Block_copy(aBlock);
  objc_msgSend(v22, "saveWithCompletion:", v23);
  _Block_release(v23);

}

double sub_1003038A0()
{
  uint64_t v0;

  return sub_1002FFD18(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1003038B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1003001F0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t sub_1003038C8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1003038FC(uint64_t a1)
{
  uint64_t v1;

  sub_10031E6C0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void (**)(_QWORD, __n128))(v1 + 40));
}

uint64_t sub_10030390C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100303940()
{
  uint64_t v0;

  sub_100300B8C(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10030394C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100303980(void *a1, _QWORD *a2)
{
  uint64_t *v2;

  return sub_100300E5C(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_10030398C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1003039B8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  float v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  id v18;
  id v19;
  _QWORD v20[7];
  _QWORD v21[5];
  float v22;
  char v23;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin();
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = dispatch thunk of PlaybackController.nowPlayingItem.getter(v3);
  if (v6)
  {
    v7 = (void *)v6;
    dispatch thunk of PlaybackController.durationSnapshot.getter(v20);
    v8 = sub_100303564((uint64_t)v20, (uint64_t)v21);
    if (v23 == 2)
    {

    }
    else
    {
      v9 = *(double *)v21;
      v10 = *(double *)&v21[3];
      v11 = *(double *)&v21[4];
      v12 = v22;
      v13 = Date.init()(v8);
      v14 = Date.timeIntervalSinceReferenceDate.getter(v13);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      v15 = v11 + (v14 - v9) * v12;
      if (v15 >= v10)
        v15 = v10;
      v16 = fmax(v15, 0.0);
      v17 = swift_allocObject(&unk_1004C1BC8, 48, 7);
      *(_QWORD *)(v17 + 16) = v0;
      *(double *)(v17 + 24) = v16;
      *(_BYTE *)(v17 + 32) = 0;
      *(_QWORD *)(v17 + 40) = v7;
      v18 = v0;
      v19 = v7;
      sub_10030097C(v19, (uint64_t)sub_1003035AC, v17);

      swift_release(v17);
    }
  }
}

uint64_t sub_100303B1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_100303B48(void *a1)
{
  uint64_t v1;

  sub_100301D08(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(void **)(v1 + 40));
}

id MTPlayerItem.init(podcastEpisode:podcast:)(void *a1, void *a2)
{
  uint64_t v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "initWithPodcastEpisode:podcast:", a1, a2);

  return v5;
}

uint64_t sub_100303BCC(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v7 = (uint64_t)sub_1002D6000(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = sub_1002D6014(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

void MTPlayerItem.init(podcastEpisode:podcast:)(void *a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  int v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t ObjectType;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  NSURL *v74;
  void *v75;
  void *v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  NSString v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  NSString v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  NSString v93;
  uint64_t v94;
  NSString v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  id v105;
  NSString v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(char *, uint64_t, uint64_t, __n128);
  int v112;
  Class isa;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  NSString v128;
  id v129;
  id v130;
  id v131;
  NSString v132;
  char *v133;
  __n128 v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  double v138;
  id v139;
  uint64_t v140;
  id v141;
  id v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  uint64_t (*v151)(char *, _QWORD, uint64_t, __n128);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  char *v157;
  char v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __n128 v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  id v172;
  id v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char v178;
  id v179;
  char *v180;
  double v181;
  NSURL *v182;
  void *v183;
  void *v184;
  id v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  id v191;
  id v192;
  __n128 v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  char v209;
  NSString v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  void *v214;
  id v215;
  id v216;
  Swift::String v217;
  Swift::String v218;
  Swift::String v219;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  id v225;
  id v226;
  Swift::String v227;
  Swift::String v228;
  Swift::String v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  NSString v235;
  uint64_t v236;
  id v237;
  void *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  double v244;
  char *v245;
  void *v246;
  void *v247;
  id v248;
  id v249;
  uint64_t v250;
  double v251;
  uint64_t v252;
  char *v253;
  char v254;
  id v255;
  uint64_t v256;
  uint64_t v257;
  __n128 v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  id v262;
  uint64_t v263;
  NSString v264;
  __n128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  __n128 v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  __n128 v275;
  void (*v276)(char *, uint64_t, __n128);
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __n128 v283;
  double v284;
  id v285;
  id v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  char *v291;
  id v292;
  NSURL *v293;
  void *v294;
  void *v295;
  id v296;
  NSString v297;
  id v298;
  id v299;
  __n128 v300;
  unint64_t v301;
  unint64_t v302;
  NSString v303;
  id v304;
  id v305;
  id v306;
  uint64_t v307;
  double v308;
  char v309;
  char v310;
  id v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  id v325;
  NSString v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  id v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  double v335;
  NSString v336;
  uint64_t v337;
  uint64_t v338;
  id v339;
  id v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  __n128 v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  double v348;
  id v349;
  char *v350;
  __n128 v351;
  double v352;
  NSURL *v353;
  void *v354;
  void *v355;
  uint64_t v356;
  char *v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  __n128 v362;
  uint64_t v363;
  __n128 v364;
  double v365;
  double v366;
  id v367;
  uint64_t v368;
  id v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  __n128 v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  double v383;
  char v384;
  double v385;
  char v386;
  uint64_t v387;
  uint64_t v388;
  id v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  id v401;
  void *v402;
  double v403;
  id v404;
  uint64_t v405;
  uint64_t v406;
  __n128 v407;
  double v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  double v412;
  char v413;
  double v414;
  char v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  id v426;
  uint64_t v427;
  uint64_t v428;
  id v429;
  void *v430;
  id v431;
  id v432;
  uint64_t v433;
  uint64_t v434;
  __n128 v435;
  uint64_t v436;
  __n128 v437;
  void *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  double v442;
  char v443;
  double v444;
  char v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  id v460;
  void *v461;
  Swift::String v462;
  Swift::String v463;
  Swift::String v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unsigned int (*v474)(uint64_t, uint64_t, uint64_t);
  char *v475;
  char *v476;
  char *v477;
  char *v478;
  uint64_t v479;
  uint64_t v480;
  char *v481;
  double v482;
  int v483;
  char *v484;
  id v485;
  unsigned int (*v486)(char *, uint64_t, _QWORD);
  char *v487;
  char *v488;
  char *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  char *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t *v496;
  uint64_t *v497;
  uint64_t v498;
  char *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  double v507;
  uint64_t v508;
  double v509;
  id v510;
  char *v511;
  uint64_t v512;
  id v513;
  id v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  Swift::String v519;
  Swift::String v520;
  Swift::String v521;

  v3 = v2;
  sub_10003F544(&qword_100555600);
  __chkstk_darwin();
  v498 = (uint64_t)&v474 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v508 = sub_10003F544(&qword_100563150);
  __chkstk_darwin();
  v497 = (uint64_t *)((char *)&v474 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v496 = (uint64_t *)((char *)&v474 - v8);
  __chkstk_darwin();
  v505 = (uint64_t *)((char *)&v474 - v9);
  v509 = COERCE_DOUBLE(type metadata accessor for URL(0));
  v502 = *(_QWORD *)(*(_QWORD *)&v509 - 8);
  __chkstk_darwin();
  v477 = (char *)&v474 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v491 = type metadata accessor for PodcastEpisodeAttributes.MediaKind(0);
  v490 = *(_QWORD *)(v491 - 8);
  __chkstk_darwin();
  v499 = (char *)&v474 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  *(_QWORD *)&v507 = (char *)&v474 - v12;
  v495 = type metadata accessor for PodcastEpisodeAttributes.EpisodeType(0);
  v494 = *(_QWORD *)(v495 - 8);
  __chkstk_darwin();
  v489 = (char *)&v474 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v503 = *(_QWORD *)(v14 - 8);
  v504 = v14;
  __chkstk_darwin();
  v476 = (char *)&v474 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PodcastEpisodeAttributes.ChannelKind(0);
  v492 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin();
  v493 = (char *)&v474 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v19 = (char *)&v474 - v18;
  v480 = type metadata accessor for PodcastAttributes.DisplayType(0);
  v479 = *(_QWORD *)(v480 - 8);
  __chkstk_darwin();
  v478 = (char *)&v474 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_1005522F0);
  __chkstk_darwin();
  v487 = (char *)&v474 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v488 = (char *)&v474 - v22;
  __chkstk_darwin();
  v24 = (char *)&v474 - v23;
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v481 = (char *)&v474 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v484 = (char *)&v474 - v26;
  __chkstk_darwin();
  v475 = (char *)&v474 - v27;
  __chkstk_darwin();
  v29 = (char *)&v474 - v28;
  __chkstk_darwin();
  v512 = (uint64_t)&v474 - v30;
  v31 = type metadata accessor for PriceType(0);
  v500 = *(_QWORD *)(v31 - 8);
  v501 = v31;
  __chkstk_darwin();
  v33 = (char *)&v474 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v510 = 0;
    v45 = 0;
    LODWORD(v506) = 1;
    goto LABEL_19;
  }
  v34 = a2;
  v35 = a2;
  v36 = ServerPodcastBase.relationships.getter(v35);

  if (!v36)
    goto LABEL_17;
  v37 = PodcastRelationships.channel.getter();
  swift_release(v36);
  if (!v37)
    goto LABEL_17;
  v39 = PodcastChannelRelationshipContainer.data.getter(v38);
  swift_release(v37);
  if (!((unint64_t)v39 >> 62))
  {
    if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_6;
LABEL_16:
    swift_bridgeObjectRelease(v39);
LABEL_17:
    v510 = 0;
    v45 = 0;
    LODWORD(v506) = 1;
    goto LABEL_18;
  }
  if (v39 < 0)
    v46 = v39;
  else
    v46 = v39 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v39);
  v47 = _CocoaArrayWrapper.endIndex.getter(v46);
  swift_bridgeObjectRelease(v39);
  if (!v47)
    goto LABEL_16;
LABEL_6:
  if ((v39 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v39);
  }
  else
  {
    if (!*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_224;
    }
    v40 = *(id *)(v39 + 32);
  }
  v41 = v40;
  swift_bridgeObjectRelease(v39);
  if (!v41)
    goto LABEL_17;
  v42 = v41;
  v44 = ServerChannel.attributes.getter(v43);
  v510 = v42;

  LOBYTE(v42) = ChannelAttributes.isSubscribed.getter();
  swift_release(v44);
  LODWORD(v506) = 0;
  v45 = v42 & 1;
LABEL_18:
  a2 = v34;
LABEL_19:
  v48 = ServerPodcastEpisode.determineBestChannelMetaData(isSubscriptionActive:)(v33, v45);
  v511 = v33;
  if (!v49)
  {
    v60 = (id)_MTLogCategoryPlayback(v48, 0);
    if (v60)
    {
      v61 = v60;
      v62 = static os_log_type_t.error.getter(v60);
      v63 = sub_10003F544(&qword_1005559A0);
      v64 = swift_allocObject(v63, 72, 7);
      *(_OWORD *)(v64 + 16) = xmmword_1003CA200;
      v65 = ServerPodcastEpisode.id.getter();
      v67 = v66;
      *(_QWORD *)(v64 + 56) = &type metadata for String;
      *(_QWORD *)(v64 + 64) = sub_10003E198();
      *(_QWORD *)(v64 + 32) = v65;
      *(_QWORD *)(v64 + 40) = v67;
      os_log(_:dso:log:type:_:)("No stream URL for episode %@", 28, 2, &_mh_execute_header, v61, v62, v64);

      swift_bridgeObjectRelease(v64);
      (*(void (**)(char *, uint64_t))(v500 + 8))(v511, v501);
      ObjectType = swift_getObjectType(v3, v68);
      swift_deallocPartialClassInstance(v3, ObjectType, 8, 7);
      return;
    }
    goto LABEL_226;
  }
  v52 = v49;
  v482 = v50;
  v483 = v51;
  URL.init(string:)(v48, v49);
  swift_bridgeObjectRelease(v52);
  v485 = a2;
  v54 = dispatch thunk of ServerPodcastEpisode.relationships.getter(v53);
  if (v54)
  {
    v55 = (void *)v54;
    v56 = a2;
    v57 = (void *)PodcastEpisodeRelationships.podcast.getter();

    if (v57)
    {
      v58 = PodcastRelationshipContainer.data.getter();

      if ((unint64_t)v58 >> 62)
      {
        if (v58 < 0)
          v70 = v58;
        else
          v70 = v58 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v58);
        v71 = _CocoaArrayWrapper.endIndex.getter(v70);
        swift_bridgeObjectRelease(v58);
        if (v71)
          goto LABEL_24;
      }
      else if (*(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_24:
        if ((v58 & 0xC000000000000001) != 0)
        {
          v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v58);
          goto LABEL_27;
        }
        if (*(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v59 = *(id *)(v58 + 32);
LABEL_27:
          a2 = v59;

          swift_bridgeObjectRelease(v58);
          goto LABEL_36;
        }
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
        goto LABEL_227;
      }
      swift_bridgeObjectRelease(v58);
    }
    a2 = v56;
  }
LABEL_36:
  v513 = a2;
  sub_100007A64(v512, (uint64_t)v29, (uint64_t *)&unk_100553DC0);
  v72 = v502;
  v73 = v509;
  v486 = *(unsigned int (**)(char *, uint64_t, _QWORD))(v502 + 48);
  if (v486(v29, 1, *(_QWORD *)&v509) == 1)
  {
    v75 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v74);
    v75 = v76;
    (*(void (**)(char *, double))(v72 + 8))(v29, COERCE_DOUBLE(*(_QWORD *)&v73));
  }
  v77 = objc_msgSend(v3, "initWithUrl:", v75);

  v78 = v77;
  ServerPodcastEpisode.id.getter();
  v80 = v79;
  v81 = String._bridgeToObjectiveC()();
  v82 = objc_msgSend(v81, "longLongValue", swift_bridgeObjectRelease(v80).n128_f64[0]);

  objc_msgSend(v78, "setEpisodeStoreId:", v82);
  v83 = v78;
  v514 = a1;
  v84 = ((uint64_t (*)(void))ServerPodcastEpisode.attributes.getter)();
  PodcastEpisodeAttributes.name.getter();
  v86 = v85;
  v87 = swift_release(v84).n128_u64[0];
  if (v86)
  {
    v88 = String._bridgeToObjectiveC()();
    v87 = swift_bridgeObjectRelease(v86).n128_u64[0];
  }
  else
  {
    v88 = 0;
  }
  objc_msgSend(v83, "setTitle:", v88, *(double *)&v87);

  v89 = ((uint64_t (*)(void))ServerPodcastEpisode.attributes.getter)();
  PodcastEpisodeAttributes.guid.getter();
  v91 = v90;
  v92 = swift_release(v89).n128_u64[0];
  if (v91)
  {
    v93 = String._bridgeToObjectiveC()();
    v92 = swift_bridgeObjectRelease(v91).n128_u64[0];
  }
  else
  {
    v93 = 0;
  }
  objc_msgSend(v83, "setEpisodeGuid:", v93, *(double *)&v92);

  v94 = ((uint64_t (*)(void))ServerPodcastEpisode.attributes.getter)();
  v95 = (NSString)PodcastEpisodeAttributes.description.getter();
  v96 = swift_release(v94);
  if (v95)
  {
    ServerDescription.standard.getter(v96);
    v98 = v97;
    v96.n128_u64[0] = swift_release(v95).n128_u64[0];
    if (v98)
    {
      v95 = String._bridgeToObjectiveC()();
      v96.n128_u64[0] = swift_bridgeObjectRelease(v98).n128_u64[0];
    }
    else
    {
      v95 = 0;
    }
  }
  objc_msgSend(v83, "setSubtitle:", v95, v96.n128_f64[0]);

  v99 = v513;
  if (v513)
  {
    v100 = v83;
    v101 = v99;
    v102 = ServerPodcastBase.attributes.getter(v101);

    if (v102)
    {
      PodcastAttributes.name.getter();
      v104 = v103;
      swift_release(v102);
      if (v104)
        goto LABEL_55;
    }
  }
  else
  {
    v105 = v83;
  }
  swift_bridgeObjectRelease(0);
  v104 = 0xE000000000000000;
LABEL_55:
  v106 = String._bridgeToObjectiveC()();
  objc_msgSend(v83, "setAuthor:", v106, swift_bridgeObjectRelease(v104).n128_f64[0]);

  v107 = ((uint64_t (*)(void))ServerPodcastEpisode.attributes.getter)();
  PodcastEpisodeAttributes.releaseDateResolved.getter();
  v108 = swift_release(v107);
  v110 = v503;
  v109 = v504;
  v111 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v503 + 48);
  v112 = v111(v24, 1, v504, v108);
  v474 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v111;
  if (v112 == 1)
  {
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v110 + 8))(v24, v109);
  }
  objc_msgSend(v83, "setPubDate:", isa, v474);

  v114 = ((uint64_t (*)(void))ServerPodcastEpisode.attributes.getter)();
  v517 = v114;
  v115 = type metadata accessor for PodcastEpisodeAttributes(0);
  v116 = MediaAttributes.contentRatingResolved.getter(v115, &protocol witness table for PodcastEpisodeAttributes);
  swift_release(v114);
  v117 = ContentRating.rawValue.getter(v116 & 1);
  v119 = v118;
  v120 = 1;
  v122 = ContentRating.rawValue.getter(1);
  v123 = v121;
  if (v117 != v122 || (v124 = v119, v119 != v121))
  {
    v120 = _stringCompareWithSmolCheck(_:_:expecting:)(v117, v119, v122, v121, 0);
    v124 = v123;
  }
  swift_bridgeObjectRelease(v119);
  objc_msgSend(v83, "setIsExplicit:", v120 & 1, swift_bridgeObjectRelease(v124).n128_f64[0]);

  v125 = v83;
  PriceType.rawValue.getter();
  v127 = v126;
  v128 = String._bridgeToObjectiveC()();
  objc_msgSend(v125, "setPriceType:", v128, swift_bridgeObjectRelease(v127).n128_f64[0]);

  v129 = v513;
  if (v513)
  {
    v130 = v125;
    v131 = v129;
    v132 = (NSString)ServerPodcastBase.attributes.getter(v131);

    if (v132)
    {
      v133 = v478;
      PodcastAttributes.displayTypeResolved.getter();
      v134 = swift_release(v132);
      PodcastAttributes.DisplayType.rawValue.getter(v134);
      v136 = v135;
      (*(void (**)(char *, uint64_t))(v479 + 8))(v133, v480);
      v132 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v136);
    }
  }
  else
  {
    v137 = v125;
    v132 = 0;
  }
  objc_msgSend(v125, "setPodcastDisplayType:", v132);

  v138 = v482 / 1000.0;
  if ((v483 & 1) != 0)
    v138 = 0.0;
  objc_msgSend(v125, "setDuration:", v138);
  if ((v506 & 1) != 0)
  {
    v139 = v125;
    v140 = 0;
  }
  else
  {
    v141 = v510;
    v142 = v125;
    v144 = ServerChannel.attributes.getter(v143);

    LOBYTE(v141) = ChannelAttributes.isSubscribed.getter();
    swift_release(v144);
    v140 = v141 & 1;
  }
  v145 = ServerPodcastEpisode.attributes.getter(objc_msgSend(v125, "setPaidSubscriptionActive:", v140));
  v146 = PodcastEpisodeAttributes.channelKind.getter();
  v148 = v147;
  v149 = swift_release(v145);
  v150 = v492;
  v151 = *(uint64_t (**)(char *, _QWORD, uint64_t, __n128))(v492 + 104);
  v152 = v151(v19, enum case for PodcastEpisodeAttributes.ChannelKind.music(_:), v16, v149);
  v153 = PodcastEpisodeAttributes.ChannelKind.rawValue.getter(v152);
  v155 = v154;
  v156 = *(void (**)(char *, uint64_t))(v150 + 8);
  v156(v19, v16);
  if (v148)
  {
    v157 = v499;
    if (v146 == v153 && v148 == v155)
      v158 = 1;
    else
      v158 = _stringCompareWithSmolCheck(_:_:expecting:)(v146, v148, v153, v155, 0);
    swift_bridgeObjectRelease(v148);
  }
  else
  {
    v158 = 0;
    v157 = v499;
  }
  v159 = objc_msgSend(v125, "setIsAppleMusicEpisode:", v158 & 1, swift_bridgeObjectRelease(v155).n128_f64[0]);
  v160 = ServerPodcastEpisode.attributes.getter(v159);
  v161 = PodcastEpisodeAttributes.channelKind.getter();
  v163 = v162;
  v164 = swift_release(v160);
  v165 = v493;
  v166 = v151(v493, enum case for PodcastEpisodeAttributes.ChannelKind.news(_:), v16, v164);
  v167 = PodcastEpisodeAttributes.ChannelKind.rawValue.getter(v166);
  v169 = v168;
  v156(v165, v16);
  if (v163)
  {
    v170 = (uint64_t)v488;
    if (v161 == v167 && v163 == v169)
      v171 = 1;
    else
      v171 = _stringCompareWithSmolCheck(_:_:expecting:)(v161, v163, v167, v169, 0);
    v172 = v513;
    swift_bridgeObjectRelease(v163);
  }
  else
  {
    v171 = 0;
    v172 = v513;
    v170 = (uint64_t)v488;
  }
  objc_msgSend(v125, "setIsAppleNewsEpisode:", v171 & 1, swift_bridgeObjectRelease(v169).n128_f64[0]);

  if ((v506 & 1) == 0)
  {
    v173 = v510;
    v174 = ServerChannel.id.getter();
    v176 = v175;

    v177 = sub_100303BCC(v174, v176);
    if ((v178 & 1) == 0)
    {
      objc_msgSend(v125, "setChannelStoreId:", v177);
      v179 = v125;
      v180 = v475;
      ServerPodcastEpisode.alternatePaidURL()();
      v181 = v509;
      if (v486(v180, 1, *(_QWORD *)&v509) == 1)
      {
        v183 = 0;
      }
      else
      {
        URL._bridgeToObjectiveC()(v182);
        v183 = v184;
        (*(void (**)(char *, double))(v502 + 8))(v180, COERCE_DOUBLE(*(_QWORD *)&v181));
      }
      objc_msgSend(v179, "setAlternatePaidURL:", v183);

    }
  }
  v185 = v125;
  v186 = ServerPodcastEpisode.id.getter();
  v188 = sub_100303BCC(v186, v187);
  if ((v189 & 1) != 0)
    v190 = 0;
  else
    v190 = v188;
  objc_msgSend(v185, "setEpisodeStoreId:", v190);

  v191 = v185;
  if (v172)
  {
    v192 = v172;
    v194 = ServerPodcastBase.id.getter(v193);
    v196 = v195;

  }
  else
  {
    v196 = 0xE100000000000000;
    v194 = 48;
  }
  v197 = sub_100303BCC(v194, v196);
  if ((v198 & 1) != 0)
    v199 = 0;
  else
    v199 = v197;
  objc_msgSend(v185, "setPodcastStoreId:", v199);

  v201 = ServerPodcastEpisode.attributes.getter(v200);
  v202 = PodcastEpisodeAttributes.seasonNumber.getter();
  v204 = v203;
  swift_release(v201);
  if ((v204 & 1) != 0)
    v202 = 0;
  v206 = ServerPodcastEpisode.attributes.getter(v205);
  v207 = PodcastEpisodeAttributes.episodeNumber.getter();
  v209 = v208;
  swift_release(v206);
  if ((v209 & 1) != 0)
    v207 = 0;
  if (v172)
  {
    v210 = v172;
    v211 = ServerPodcastBase.attributes.getter(v210);
    if (v211)
    {
      v212 = v211;
      v213 = PodcastAttributes.isSerialShowTypeInFeed.getter();
      swift_release(v212);
      if ((v213 & 1) != 0)
      {
        if (v202 > 0)
        {
          v214 = (void *)objc_opt_self(NSBundle);
          v215 = v185;
          v216 = objc_msgSend(v214, "mainBundle");
          if (v207 < 1)
          {
            v521._object = (void *)0xE000000000000000;
            v462._object = (void *)0x8000000100430330;
            v462._countAndFlagsBits = 0xD000000000000014;
            v463._countAndFlagsBits = 0;
            v463._object = (void *)0xE000000000000000;
            v521._countAndFlagsBits = 0;
            v464 = NSLocalizedString(_:tableName:bundle:value:comment:)(v462, (Swift::String_optional)0, (NSBundle)v216, v463, v521);
            countAndFlagsBits = v464._countAndFlagsBits;
            object = v464._object;

            v465 = sub_10003F544(&qword_1005559A0);
            v223 = swift_allocObject(v465, 72, 7);
            *(_OWORD *)(v223 + 16) = xmmword_1003CA200;
            *(_QWORD *)(v223 + 56) = &type metadata for Int;
            *(_QWORD *)(v223 + 64) = &protocol witness table for Int;
            *(_QWORD *)(v223 + 32) = v202;
          }
          else
          {
            v217._countAndFlagsBits = 0xD000000000000020;
            v519._object = (void *)0xE000000000000000;
            v217._object = (void *)0x800000010043C850;
            v218._countAndFlagsBits = 0;
            v218._object = (void *)0xE000000000000000;
            v519._countAndFlagsBits = 0;
            v219 = NSLocalizedString(_:tableName:bundle:value:comment:)(v217, (Swift::String_optional)0, (NSBundle)v216, v218, v519);
            countAndFlagsBits = v219._countAndFlagsBits;
            object = v219._object;

            v222 = sub_10003F544(&qword_1005559A0);
            v223 = swift_allocObject(v222, 112, 7);
            *(_OWORD *)(v223 + 16) = xmmword_1003CA220;
            *(_QWORD *)(v223 + 56) = &type metadata for Int;
            *(_QWORD *)(v223 + 64) = &protocol witness table for Int;
            *(_QWORD *)(v223 + 32) = v202;
            *(_QWORD *)(v223 + 96) = &type metadata for Int;
            *(_QWORD *)(v223 + 104) = &protocol witness table for Int;
            *(_QWORD *)(v223 + 72) = v207;
          }
          static String.localizedStringWithFormat(_:_:)(countAndFlagsBits, object, v223);
          v467 = v466;
          swift_bridgeObjectRelease(object);
          swift_bridgeObjectRelease(v223);
          v235 = String._bridgeToObjectiveC()();
          objc_msgSend(v215, "setAlbum:", v235, swift_bridgeObjectRelease(v467).n128_f64[0]);

          v172 = v513;
          v234 = v490;
          v157 = v499;
          goto LABEL_119;
        }
        if (v207 > 0)
        {
          v224 = (void *)objc_opt_self(NSBundle);
          v225 = v185;
          v226 = objc_msgSend(v224, "mainBundle");
          v227._countAndFlagsBits = 0xD000000000000015;
          v520._object = (void *)0xE000000000000000;
          v227._object = (void *)0x80000001004307B0;
          v228._countAndFlagsBits = 0;
          v228._object = (void *)0xE000000000000000;
          v520._countAndFlagsBits = 0;
          v229 = NSLocalizedString(_:tableName:bundle:value:comment:)(v227, (Swift::String_optional)0, (NSBundle)v226, v228, v520);

          v230 = sub_10003F544(&qword_1005559A0);
          v231 = swift_allocObject(v230, 72, 7);
          *(_OWORD *)(v231 + 16) = xmmword_1003CA200;
          *(_QWORD *)(v231 + 56) = &type metadata for Int;
          *(_QWORD *)(v231 + 64) = &protocol witness table for Int;
          *(_QWORD *)(v231 + 32) = v207;
          static String.localizedStringWithFormat(_:_:)(v229._countAndFlagsBits, v229._object, v231);
          v233 = v232;
          v234 = v490;
          swift_bridgeObjectRelease(v229._object);
          swift_bridgeObjectRelease(v231);
          v235 = String._bridgeToObjectiveC()();
          v236 = v233;
          v157 = v499;
          objc_msgSend(v225, "setAlbum:", v235, swift_bridgeObjectRelease(v236).n128_f64[0]);

          v172 = v513;
          goto LABEL_119;
        }
      }
    }

    v172 = v513;
  }
  v235 = v185;
  v237 = objc_msgSend(v235, "pubDate");
  if (v237)
  {
    v238 = v237;
    v239 = v487;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v237);

    v240 = (uint64_t)v239;
    v241 = 0;
    v242 = v504;
  }
  else
  {
    v241 = 1;
    v242 = v504;
    v240 = (uint64_t)v487;
  }
  v243 = v503;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v503 + 56))(v240, v241, 1, v242);
  sub_10003DC78(v240, v170, &qword_1005522F0);
  if (v474(v170, 1, v242))
  {
    sub_100007A28(v170, &qword_1005522F0);
    v210 = 0;
  }
  else
  {
    v245 = v476;
    (*(void (**)(char *, uint64_t, uint64_t))(v243 + 16))(v476, v170, v242);
    sub_100007A28(v170, &qword_1005522F0);
    v246 = Date.verboseDisplayStringWithoutTime()()._object;
    (*(void (**)(char *, uint64_t))(v243 + 8))(v245, v242);
    v210 = String._bridgeToObjectiveC()();
    v247 = v246;
    v172 = v513;
    *(_QWORD *)&v244 = swift_bridgeObjectRelease(v247).n128_u64[0];
  }
  objc_msgSend(v235, "setAlbum:", v210, v244);
  v234 = v490;
LABEL_119:

  objc_msgSend(v185, "setSeasonNumber:", v202);
  objc_msgSend(v185, "setEpisodeNumber:", v207);
  if (v172)
  {
    v248 = v185;
    v249 = v172;
    v250 = ServerPodcastBase.attributes.getter(v249);

    v252 = v491;
    v253 = v489;
    if (v250)
    {
      v254 = PodcastAttributes.isSerialShowTypeInFeed.getter();
      *(_QWORD *)&v251 = swift_release(v250).n128_u64[0];
    }
    else
    {
      v254 = 0;
    }
  }
  else
  {
    v255 = v185;
    v254 = 0;
    v252 = v491;
    v253 = v489;
  }
  objc_msgSend(v185, "setPodcastIsSerial:", v254 & 1, v251);

  v257 = ServerPodcastEpisode.attributes.getter(v256);
  PodcastEpisodeAttributes.episodeType.getter();
  v258 = swift_release(v257);
  v259 = v494;
  v260 = v495;
  v261 = (*(uint64_t (**)(char *, uint64_t, __n128))(v494 + 88))(v253, v495, v258);
  if (v261 == enum case for PodcastEpisodeAttributes.EpisodeType.full(_:))
  {
    objc_msgSend(v185, "setEpisodeType:", 0);
  }
  else if (v261 == enum case for PodcastEpisodeAttributes.EpisodeType.trailer(_:))
  {
    objc_msgSend(v185, "setEpisodeType:", 1);
  }
  else if (v261 == enum case for PodcastEpisodeAttributes.EpisodeType.bonus(_:))
  {
    objc_msgSend(v185, "setEpisodeType:", 2);
  }
  else
  {
    objc_msgSend(v185, "setEpisodeType:", 0);
    (*(void (**)(char *, uint64_t))(v259 + 8))(v253, v260);
  }
  v262 = v185;
  v263 = ServerPodcastEpisode.attributes.getter(v262);
  v264 = (NSString)PodcastEpisodeAttributes.description.getter();
  v265 = swift_release(v263);
  if (v264)
  {
    ServerDescription.standard.getter(v265);
    v267 = v266;
    v265.n128_u64[0] = swift_release(v264).n128_u64[0];
    if (v267)
    {
      v264 = String._bridgeToObjectiveC()();
      v265.n128_u64[0] = swift_bridgeObjectRelease(v267).n128_u64[0];
    }
    else
    {
      v264 = 0;
    }
  }
  objc_msgSend(v262, "setItemDescription:", v264, v265.n128_f64[0]);

  v269 = ServerPodcastEpisode.attributes.getter(v268);
  PodcastEpisodeAttributes.mediaKindResolved.getter();
  v270 = swift_release(v269);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v234 + 104))(v157, enum case for PodcastEpisodeAttributes.MediaKind.video(_:), v252, v270);
  v271 = sub_1003061B4();
  dispatch thunk of RawRepresentable.rawValue.getter(&v517, v252, v271);
  dispatch thunk of RawRepresentable.rawValue.getter(&v515, v252, v271);
  v272 = v518;
  v273 = v516;
  if (v517 == v515 && v518 == v516)
  {
    v274 = 1;
    v273 = v518;
  }
  else
  {
    v274 = _stringCompareWithSmolCheck(_:_:expecting:)(v517, v518, v515, v516, 0);
  }
  swift_bridgeObjectRelease(v272);
  v275 = swift_bridgeObjectRelease(v273);
  v276 = *(void (**)(char *, uint64_t, __n128))(v234 + 8);
  v276(v157, v252, v275);
  ((void (*)(_QWORD, uint64_t))v276)(*(_QWORD *)&v507, v252);
  objc_msgSend(v262, "setIsVideo:", v274 & 1);

  v278 = ServerPodcastEpisode.attributes.getter(v277);
  v279 = PodcastEpisodeAttributes.url.getter();
  v281 = v280;
  swift_release(v278);
  if (v281)
  {
    v282 = (uint64_t)v484;
    URL.init(string:)(v279, v281);
    v283 = swift_bridgeObjectRelease(v281);
    v284 = v509;
    if (((unsigned int (*)(uint64_t, uint64_t, _QWORD, __n128))v486)(v282, 1, *(_QWORD *)&v509, v283) != 1)
    {
      v290 = v502;
      v291 = v477;
      (*(void (**)(char *, uint64_t, double))(v502 + 32))(v477, v282, COERCE_DOUBLE(*(_QWORD *)&v284));
      v292 = v262;
      URL._bridgeToObjectiveC()(v293);
      v295 = v294;
      objc_msgSend(v292, "setEpisodeShareUrl:", v294);

      (*(void (**)(char *, double))(v290 + 8))(v291, COERCE_DOUBLE(*(_QWORD *)&v284));
      if (v172)
        goto LABEL_143;
      goto LABEL_147;
    }
    sub_100007A28(v282, (uint64_t *)&unk_100553DC0);
  }
  if (v172)
  {
LABEL_143:
    v285 = v262;
    v286 = v172;
    v287 = ServerPodcastBase.attributes.getter(v286);

    if (v287)
    {
      PodcastAttributes.feedUrl.getter();
      v289 = v288;
      swift_release(v287);
      if (v289)
        goto LABEL_149;
    }
    goto LABEL_148;
  }
LABEL_147:
  v296 = v262;
LABEL_148:
  swift_bridgeObjectRelease(0);
  v289 = 0xE000000000000000;
LABEL_149:
  v297 = String._bridgeToObjectiveC()();
  objc_msgSend(v262, "setPodcastFeedUrl:", v297, swift_bridgeObjectRelease(v289).n128_f64[0]);

  v298 = v262;
  if (v172)
  {
    v299 = v172;
    ServerPodcastBase.id.getter(v300);
    v302 = v301;

  }
  else
  {
    v302 = 0xE000000000000000;
  }
  v303 = String._bridgeToObjectiveC()();
  v304 = objc_msgSend(v303, "longLongValue", swift_bridgeObjectRelease(v302).n128_f64[0]);

  objc_msgSend(v262, "setPodcastStoreId:", v304);
  if (v172)
  {
    v305 = v262;
    v306 = v172;
    v307 = ServerPodcastBase.attributes.getter(v306);

    if (v307)
    {
      v309 = PodcastAttributes.subscribable.getter();
      *(_QWORD *)&v308 = swift_release(v307).n128_u64[0];
      v310 = (v309 == 2) | v309;
      goto LABEL_157;
    }
  }
  else
  {
    v311 = v262;
  }
  v310 = 1;
LABEL_157:
  objc_msgSend(v262, "setIsNotSubscribeable:", (v310 & 1) == 0, v308);

  v312 = v508;
  v313 = v505;
  v314 = (uint64_t)v505 + *(int *)(v508 + 64);
  v315 = ServerPodcastEpisode.determineBestTranscriptMetadata(isSubscriptionActive:)(v314, objc_msgSend(v262, "paidSubscriptionActive"));
  v317 = v316;
  v319 = v318;
  v321 = v320;
  *v313 = v315;
  v313[1] = v316;
  v313[2] = v318;
  v313[3] = v320;
  v322 = *(int *)(v312 + 64);
  v323 = v496;
  v324 = (uint64_t)v496 + v322;
  *v496 = v315;
  v323[1] = v316;
  v323[2] = v318;
  v323[3] = v320;
  sub_100007A64(v314, (uint64_t)v323 + v322, &qword_100555600);
  swift_bridgeObjectRetain(v321);
  v325 = v262;
  if (v317)
  {
    swift_bridgeObjectRetain(v317);
    v326 = String._bridgeToObjectiveC()();
    v327 = v317;
  }
  else
  {
    v327 = 0;
    v326 = 0;
  }
  sub_100007A28(v324, &qword_100555600);
  objc_msgSend(v262, "setTranscriptIdentifier:", v326);

  v328 = *(int *)(v508 + 64);
  v329 = v497;
  v330 = (uint64_t)v497 + v328;
  *v497 = v315;
  v329[1] = v317;
  v329[2] = v319;
  v329[3] = v321;
  sub_100007A64(v314, (uint64_t)v329 + v328, &qword_100555600);
  v331 = v262;
  swift_bridgeObjectRelease(v321);
  swift_bridgeObjectRelease(v327);
  v332 = v498;
  sub_10003DC78(v330, v498, &qword_100555600);
  v333 = type metadata accessor for TranscriptSource(0);
  v334 = *(_QWORD *)(v333 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v334 + 48))(v332, 1, v333) == 1)
  {
    sub_100007A28(v332, &qword_100555600);
    v336 = 0;
  }
  else
  {
    TranscriptSource.rawValue.getter();
    v338 = v337;
    (*(void (**)(uint64_t, uint64_t))(v334 + 8))(v332, v333);
    v336 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v335 = swift_bridgeObjectRelease(v338).n128_u64[0];
  }
  v340 = v513;
  v339 = v514;
  objc_msgSend(v331, "setTranscriptSource:", v336, v335);

  v342 = ServerPodcastEpisode.attributes.getter(v341);
  v343 = PodcastEpisodeAttributes.artwork.getter();
  v344 = swift_release(v342);
  if (v343)
  {
    v345 = ServerArtwork.url.getter(v344);
    v347 = v346;
    v344 = swift_release(v343);
    if (v347)
    {
      type metadata accessor for ArtworkFormatter(0, v344);
      v348 = kMTPreferredArtworkSize;
      v349 = v331;
      v350 = v481;
      static ArtworkFormatter.formatArtworkUrl(string:for:cropCode:fileExtension:)(v345, v347, 0, 0, 6778986, 0xE300000000000000, v348, v348);
      v351 = swift_bridgeObjectRelease(v347);
      v352 = v509;
      v354 = 0;
      if (((unsigned int (*)(char *, uint64_t, _QWORD, __n128))v486)(v350, 1, *(_QWORD *)&v509, v351) != 1)
      {
        URL._bridgeToObjectiveC()(v353);
        v354 = v355;
        (*(void (**)(char *, double))(v502 + 8))(v350, COERCE_DOUBLE(*(_QWORD *)&v352));
      }
      objc_msgSend(v349, "setArtworkUrl:", v354);

    }
  }
  v356 = dispatch thunk of ServerPodcastEpisode.relationships.getter(v344);
  v357 = v511;
  if (!v356
    || (v358 = (void *)v356, v359 = PodcastEpisodeRelationships.playbackPosition.getter(), v358, !v359))
  {
LABEL_178:
    v376 = ServerPodcastEpisode.attributes.getter(v356);
    v377 = PodcastEpisodeAttributes.episodeArtwork.getter();
    v378 = swift_release(v376);
    if (v377)
    {
      v379 = ServerArtwork.url.getter(v378);
      if (v380)
      {
        v381 = v380;
        v508 = v379;
        v509 = COERCE_DOUBLE(v331);
        v382 = ServerArtwork.width.getter(*(_QWORD *)&v509);
        v383 = (double)v382;
        if ((v384 & 1) != 0)
          v383 = 0.0;
        v507 = v383;
        v385 = (double)ServerArtwork.height.getter(v382);
        if ((v386 & 1) != 0)
          v385 = 0.0;
        v506 = *(_QWORD *)&v385;
        v387 = ServerArtwork.bgColor.getter();
        v503 = v388;
        v504 = v387;
        v502 = ServerArtwork.textColor1.getter();
        v389 = v331;
        v391 = v390;
        v392 = ServerArtwork.textColor2.getter();
        v394 = v393;
        v395 = ServerArtwork.textColor3.getter();
        v397 = v396;
        v398 = ServerArtwork.textColor4.getter();
        v400 = v399;
        v401 = objc_allocWithZone((Class)type metadata accessor for PlayerArtwork(0));
        v472 = v397;
        v340 = v513;
        v471 = v394;
        v357 = v511;
        v470 = v391;
        v331 = v389;
        v402 = (void *)PlayerArtwork.init(template:width:height:backgroundColor:primaryTextColor:secondaryTextColor:tertiaryTextColor:quaternaryTextColor:)(v508, v381, *(_QWORD *)&v507, 0, v506, 0, v504, v503, v502, v470, v392, v471, v395, v472, v398, v400);
        v403 = v509;
        objc_msgSend(*(id *)&v509, "setEpisodeArtworkProperties:", v402);
        swift_release(v377);

      }
      else
      {
        swift_release(v377);
      }
      v339 = v514;
    }
    if (v340)
    {
      v404 = v340;
      v405 = ServerPodcastBase.attributes.getter(v404);

      if (v405)
      {
        v406 = PodcastAttributes.artwork.getter();
        v407 = swift_release(v405);
        if (v406)
        {
          v408 = COERCE_DOUBLE(ServerArtwork.url.getter(v407));
          if (v409)
          {
            v410 = v409;
            v509 = v408;
            v513 = v331;
            v411 = ServerArtwork.width.getter(v513);
            v412 = (double)v411;
            if ((v413 & 1) != 0)
              v412 = 0.0;
            v508 = *(_QWORD *)&v412;
            v414 = (double)ServerArtwork.height.getter(v411);
            if ((v415 & 1) != 0)
              v414 = 0.0;
            v507 = v414;
            v506 = ServerArtwork.bgColor.getter();
            v504 = v416;
            v417 = ServerArtwork.textColor1.getter();
            v502 = v418;
            v503 = v417;
            v419 = ServerArtwork.textColor2.getter();
            v421 = v420;
            v422 = ServerArtwork.textColor3.getter();
            v424 = v423;
            v425 = ServerArtwork.textColor4.getter();
            v426 = v331;
            v428 = v427;
            v429 = objc_allocWithZone((Class)type metadata accessor for PlayerArtwork(0));
            v473 = v428;
            v331 = v426;
            v430 = (void *)PlayerArtwork.init(template:width:height:backgroundColor:primaryTextColor:secondaryTextColor:tertiaryTextColor:quaternaryTextColor:)(*(_QWORD *)&v509, v410, v508, 0, *(_QWORD *)&v507, 0, v506, v504, v503, v502, v419, v421, v422, v424, v425, v473);
            v431 = v513;
            objc_msgSend(v513, "setShowArtworkProperties:", v430);
            swift_release(v406);

          }
          else
          {
            swift_release(v406);
          }
          v339 = v514;
        }
      }
      v432 = v404;
      v433 = ServerPodcastBase.attributes.getter(v432);

      if (v433)
      {
        v434 = PodcastAttributes.editorialArtwork.getter();
        v435 = swift_release(v433);
        if (v434)
        {
          v436 = PodcastEditorialArtworkContainer.podcastPageBackground.getter(v435);
          v437 = swift_release(v434);
          if (v436)
          {
            v438 = (void *)ServerArtwork.url.getter(v437);
            if (v439)
            {
              v440 = v439;
              v513 = v438;
              v441 = ServerArtwork.width.getter(v438);
              v442 = (double)v441;
              if ((v443 & 1) != 0)
                v442 = 0.0;
              v509 = v442;
              v444 = (double)ServerArtwork.height.getter(v441);
              if ((v445 & 1) != 0)
                v444 = 0.0;
              v508 = *(_QWORD *)&v444;
              *(double *)&v446 = COERCE_DOUBLE(ServerArtwork.bgColor.getter());
              v506 = v447;
              v507 = *(double *)&v446;
              v448 = ServerArtwork.textColor1.getter();
              v503 = v449;
              v504 = v448;
              v450 = ServerArtwork.textColor2.getter();
              v452 = v451;
              v453 = ServerArtwork.textColor3.getter();
              v454 = v331;
              v456 = v455;
              v457 = ServerArtwork.textColor4.getter();
              v459 = v458;
              v460 = objc_allocWithZone((Class)type metadata accessor for PlayerArtwork(0));
              v461 = (void *)PlayerArtwork.init(template:width:height:backgroundColor:primaryTextColor:secondaryTextColor:tertiaryTextColor:quaternaryTextColor:)(v513, v440, *(_QWORD *)&v509, 0, v508, 0, *(_QWORD *)&v507, v506, v504, v503, v450, v452, v453, v456, v457, v459);
              objc_msgSend(v454, "setUberArtworkProperties:", v461);

              swift_release(v436);
              sub_100007A28((uint64_t)v505, &qword_100563150);
              sub_100007A28(v512, (uint64_t *)&unk_100553DC0);
              (*(void (**)(char *, uint64_t))(v500 + 8))(v511, v501);
              goto LABEL_211;
            }

            swift_release(v436);
            v357 = v511;
LABEL_210:
            sub_100007A28((uint64_t)v505, &qword_100563150);
            sub_100007A28(v512, (uint64_t *)&unk_100553DC0);
            (*(void (**)(char *, uint64_t))(v500 + 8))(v357, v501);
LABEL_211:

            return;
          }
        }
      }
      v357 = v511;
    }
    else
    {
      v432 = 0;
    }

    goto LABEL_210;
  }
  v360 = PodcastPlaybackPositionContainer.data.getter();
  swift_release(v359);
  if ((unint64_t)v360 >> 62)
  {
    if (v360 < 0)
      v468 = v360;
    else
      v468 = v360 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v360);
    v469 = _CocoaArrayWrapper.endIndex.getter(v468);
    swift_bridgeObjectRelease(v360);
    if (!v469)
      goto LABEL_177;
  }
  else if (!*(_QWORD *)((v360 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_177:
    swift_bridgeObjectRelease(v360);
    goto LABEL_178;
  }
  if ((v360 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v360 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v361 = *(_QWORD *)(v360 + 32);
      swift_retain();
      goto LABEL_175;
    }
    goto LABEL_225;
  }
  v361 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v360);
LABEL_175:
  v362 = swift_bridgeObjectRelease(v360);
  v363 = PodcastPlaybackPositionData.attributes.getter(v362);
  v364 = swift_release(v361);
  v365 = PodcastPlaybackPositionDataAttributes.positionInMilliseconds.getter(v364);
  swift_release(v363);
  v366 = v365 / 1000.0;
  v367 = objc_msgSend(v331, "setPlayhead:", v366);
  v369 = (id)_MTLogCategoryPlayback(v367, v368);
  if (v369)
  {
    v370 = v369;
    v371 = static os_log_type_t.default.getter();
    v372 = sub_10003F544(&qword_1005559A0);
    v360 = swift_allocObject(v372, 112, 7);
    *(_OWORD *)(v360 + 16) = xmmword_1003CA220;
    *(_QWORD *)(v360 + 56) = &type metadata for Double;
    *(_QWORD *)(v360 + 64) = &protocol witness table for Double;
    *(double *)(v360 + 32) = v366;
    v373 = ServerPodcastEpisode.id.getter();
    v375 = v374;
    *(_QWORD *)(v360 + 96) = &type metadata for String;
    *(_QWORD *)(v360 + 104) = sub_10003E198();
    *(_QWORD *)(v360 + 72) = v373;
    *(_QWORD *)(v360 + 80) = v375;
    os_log(_:dso:log:type:_:)("NetworkMediaManifest: Applying playhead of %f to episode %@", 59, 2, &_mh_execute_header, v370, v371, v360);

    v357 = v511;
    goto LABEL_177;
  }
LABEL_227:
  __break(1u);
}

unint64_t sub_1003061B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100563158;
  if (!qword_100563158)
  {
    v1 = type metadata accessor for PodcastEpisodeAttributes.MediaKind(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PodcastEpisodeAttributes.MediaKind, v1);
    atomic_store(result, (unint64_t *)&qword_100563158);
  }
  return result;
}

uint64_t sub_10030623C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter(15, a1, a2);
  else
    return 0;
}

uint64_t sub_10030627C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    v4 = __CocoaSet.startIndex.getter(v3);
    v6 = v5;
    v7 = __CocoaSet.endIndex.getter(v3);
    v9 = static __CocoaSet.Index.== infix(_:_:)(v4, v6, v7, v8);
    swift_bridgeObjectRelease(v7);
    if ((v9 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_1002D9D48(a1);
  if ((v13 & 1) == 0)
  {
    v6 = v12;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v12)
    {
      v4 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_1002D9F74(v4, v6, v2 != 0);
        return 0;
      }
LABEL_10:
      sub_100306B2C(v4, v6, v2 != 0, a1);
      v10 = v14;
      sub_1002D9F74(v4, v6, v2 != 0);
      return v10;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100306388(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_100306A8C(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_100306D74(result, v3, 0, a1);
  swift_bridgeObjectRetain(v6);
  return v5;
}

void sub_100306404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(__n128);
  uint64_t v21;
  __n128 v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(void ***, __n128);
  uint64_t v39;
  __n128 v40;
  void **aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  double (*v45)();
  _QWORD *v46;

  v1 = v0;
  type metadata accessor for EpisodeMetadata(0);
  __chkstk_darwin();
  v3 = (char *)&aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_1005631A8);
  __chkstk_darwin();
  v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts34FetchBatchEpisodeMetadataOperation_uuids);
  if (*(_QWORD *)(v7 + 16) == 1
    && (v8 = sub_100306388(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts34FetchBatchEpisodeMetadataOperation_uuids)), v9))
  {
    v10 = v8;
    v11 = v9;
    sub_100370568(v8, v9, (uint64_t)v6);
    if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
    {
      swift_bridgeObjectRelease(v11);
      v12 = *(_QWORD *)v6;
      v13 = *((_QWORD *)v6 + 1);
      v14 = v6[16];
      v15 = sub_1001E44C0();
      v16 = swift_allocError(&type metadata for EpisodeMetadataError, v15, 0, 0);
      *(_QWORD *)v17 = v12;
      *(_QWORD *)(v17 + 8) = v13;
      *(_BYTE *)(v17 + 16) = v14;
      sub_1001E42B0(v12, v13, v14);
      sub_10037B778(v16, 1);
      sub_1001E42E8(v12, v13, v14);
      swift_errorRelease();
    }
    else
    {
      sub_1003069C8((uint64_t)v6, (uint64_t)v3);
      v28 = sub_10003F544(&qword_1005631B0);
      v29 = sub_10003F544(&qword_100552A50);
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(_QWORD *)(v30 + 72);
      v32 = *(unsigned __int8 *)(v30 + 80);
      v33 = (v32 + 32) & ~v32;
      v34 = swift_allocObject(v28, v33 + v31, v32 | 7);
      *(_OWORD *)(v34 + 16) = xmmword_1003CA200;
      v35 = (uint64_t *)(v34 + v33);
      v36 = v34 + v33 + *(int *)(v29 + 48);
      *v35 = v10;
      v35[1] = v11;
      sub_100306A0C((uint64_t)v3, v36);
      v37 = sub_1001390A0(v34);
      v38 = *(void (**)(void ***, __n128))(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
      if (v38)
      {
        v39 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8);
        v44 = (void *)sub_10003F544((uint64_t *)&unk_100564DC0);
        aBlock = (void **)v37;
        LOBYTE(v42) = 0;
        sub_10002CA20((uint64_t)v38, v39);
        v40 = swift_bridgeObjectRetain(v37);
        v38(&aBlock, v40);
        sub_10002CA30((uint64_t)v38, v39);
        sub_10003D380(&aBlock);
      }
      sub_100044BF0();
      swift_bridgeObjectRelease(v37);
      sub_100306A50((uint64_t)v3);
    }
  }
  else
  {
    v18 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts34FetchBatchEpisodeMetadataOperation_episodeStorage);
    v19 = swift_allocObject(&unk_1004C1BF0, 24, 7);
    swift_unknownObjectWeakInit(v19 + 16, v0);
    v20 = *(uint64_t (**)(__n128))(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    swift_retain();
    v22 = swift_retain();
    v23 = (void *)v20(v22);
    swift_release(v21);
    v24 = (_QWORD *)swift_allocObject(&unk_1004C1C18, 56, 7);
    v24[2] = v7;
    v24[3] = v23;
    v24[4] = v18;
    v24[5] = sub_100306974;
    v24[6] = v19;
    v45 = sub_1003069B8;
    v46 = v24;
    aBlock = _NSConcreteStackBlock;
    v42 = 1107296256;
    v43 = sub_100027AF8;
    v44 = &unk_1004C1C30;
    v25 = _Block_copy(&aBlock);
    v26 = v46;
    swift_bridgeObjectRetain(v7);
    v27 = v23;
    swift_unknownObjectRetain(v18);
    swift_retain();
    objc_msgSend(v27, "performBlock:", v25, swift_release(v26).n128_f64[0]);
    _Block_release(v25);
    swift_release_n(v19, 2);

  }
}

void sub_100306794(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  void (*v6)(uint64_t *);
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _BYTE v11[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(void (**)(uint64_t *))(Strong + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
    if (v6)
    {
      v7 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8);
      v10 = sub_10003F544((uint64_t *)&unk_100564DC0);
      v8 = a1;
      v9 = 0;
      swift_bridgeObjectRetain_n(a1, 2);
      sub_10002CA20((uint64_t)v6, v7);
      v6(&v8);
      sub_10002CA30((uint64_t)v6, v7);
      sub_10003D380(&v8);
    }
    else
    {
      swift_bridgeObjectRetain(a1);
    }
    sub_100044BF0();
    swift_bridgeObjectRelease(a1);

  }
}

uint64_t sub_10030689C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC8Podcasts34FetchBatchEpisodeMetadataOperation_episodeStorage));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts34FetchBatchEpisodeMetadataOperation_uuids));
}

id sub_1003068C8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FetchBatchEpisodeMetadataOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FetchBatchEpisodeMetadataOperation()
{
  return objc_opt_self(_TtC8Podcasts34FetchBatchEpisodeMetadataOperation);
}

uint64_t sub_100306950()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100306974(uint64_t a1)
{
  uint64_t v1;

  sub_100306794(a1, v1);
}

uint64_t sub_10030697C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

double sub_1003069B8()
{
  uint64_t v0;

  return sub_1003704C8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(uint64_t, __n128))(v0 + 40));
}

uint64_t sub_1003069C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EpisodeMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100306A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EpisodeMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100306A50(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EpisodeMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100306A8C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_100306B2C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_10029A678();
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15, v4);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18, v4);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_10029A678();
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_100306D74(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

_QWORD *sub_100306DCC(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10017B124(0, v1, 0);
    v3 = *(_QWORD *)(type metadata accessor for TabMenu.Item(0) - 8);
    v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    do
    {
      v6 = TabMenu.Item.navigationTab.getter();
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_10017B124(v7 > 1, v8 + 1, 1);
      _swiftEmptyArrayStorage[2] = v8 + 1;
      _swiftEmptyArrayStorage[v8 + 4] = v6;
      v4 += v5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

char *sub_100306EBC(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return sub_100306EEC(a1);
}

char *sub_100306EEC(uint64_t a1)
{
  _BYTE *v1;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  char *v10;
  char *result;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;

  v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_didAppear] = 0;
  v3 = &v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_QWORD *)v3 + 4) = 0;
  v4 = &v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner];
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_overlayViewController] = 0;
  v5 = OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_libraryStackCache;
  v6 = v1;
  *(_QWORD *)&v1[v5] = sub_1001387E8((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_objectGraph] = a1;
  v7 = type metadata accessor for PodcastsTabBarPresenter(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = swift_retain_n(a1, 2);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_presenter] = PodcastsTabBarPresenter.init(asPartOf:)(v8);

  v9 = swift_retain(a1);
  v10 = (char *)(id)NowPlayingTabController.init(asPartOf:)(v9);
  result = (char *)objc_msgSend(v10, "view");
  if (result)
  {
    v12 = result;
    type metadata accessor for Theme(0);
    v13 = (void *)static Theme.backgroundColor.getter();
    objc_msgSend(v12, "setBackgroundColor:", v13);

    v14 = *(_QWORD *)&v10[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_presenter];
    v16 = sub_100005E40(&qword_100563248, v15, (uint64_t (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController, (uint64_t)&unk_1003D5028);
    v17 = v10;
    v18 = swift_retain(v14);
    PodcastsTabBarPresenter.view.setter(v10, v16, v18);
    swift_release(v14);

    swift_release(a1);
    return v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100307080(uint64_t a1, uint64_t a2)
{
  char *v2;
  id v3;
  id v4;
  uint64_t v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)swift_getObjectType(v2, a2);
  objc_msgSendSuper2(&v7, "viewDidLoad");
  v3 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == (id)1)
    objc_msgSend(v2, "_uip_setTabBarHidden:animated:", 1, 0);
  v5 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_presenter];
  swift_retain(v5);
  PodcastsTabBarPresenter.viewDidLoad()();
  return swift_release(v5);
}

void sub_10030713C(char a1, uint64_t a2)
{
  void *v2;
  id v4;
  id v5;
  id v6;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)swift_getObjectType(v2, a2);
  objc_msgSendSuper2(&v7, "viewWillAppear:", a1 & 1);
  if ((*((_BYTE *)v2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_didAppear) & 1) == 0)
  {
    *((_BYTE *)v2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_didAppear) = 1;
    v4 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v5 = objc_msgSend(v4, "delegate");

    if (v5)
    {
      if ((objc_msgSend(v5, "respondsToSelector:", "window") & 1) != 0)
      {
        v6 = objc_msgSend(v5, "window");
        swift_unknownObjectRelease(v5);
LABEL_7:
        sub_10030723C(v6);

        return;
      }
      swift_unknownObjectRelease(v5);
    }
    v6 = 0;
    goto LABEL_7;
  }
}

void sub_10030723C(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *Strong;
  void *v16;
  double v17;
  void (*v18)(void (*)(double, double), uint64_t, __n128);
  __n128 v19;
  _BYTE v20[24];

  v3 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == (id)1 && a1 != 0)
  {
    v6 = type metadata accessor for Window(0);
    v7 = swift_dynamicCastClass(a1, v6);
    if (v7)
    {
      v8 = (_QWORD *)v7;
      v9 = swift_allocObject(&unk_1004C1C80, 24, 7);
      swift_unknownObjectWeakInit(v9 + 16, v1);
      v10 = a1;
      objc_msgSend(v8, "bounds", swift_retain().n128_f64[0]);
      v12 = v11;
      v14 = v13;
      swift_beginAccess(v9 + 16, v20, 0, 0);
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v9 + 16);
      if (Strong)
      {
        v16 = Strong;
        v17 = 1194.0;
        if (v14 < v12)
          v17 = 1024.0;
        objc_msgSend(Strong, "_uip_setTabBarHidden:animated:", v17 <= v12, 1);
        swift_release(v9);

      }
      else
      {
        swift_release(v9);
      }
      v18 = *(void (**)(void (*)(double, double), uint64_t, __n128))((swift_isaMask & *v8) + 0x98);
      v19 = swift_retain();
      v18(sub_10030A34C, v9, v19);

      swift_release(v9);
    }
  }
}

void sub_100307418(id a1)
{
  char *v1;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];
  uint64_t v15;

  if (a1)
    v3 = objc_msgSend(a1, "horizontalSizeClass");
  else
    v3 = 0;
  v4 = objc_msgSend(v1, "traitCollection");
  v5 = objc_msgSend(v4, "horizontalSizeClass");

  if (!a1 || v3 != v5)
  {
    v6 = (uint64_t)&v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController];
    swift_beginAccess(&v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController], v13, 0, 0);
    sub_100007A64(v6, (uint64_t)v14, &qword_100554570);
    if (v15)
    {
      v7 = sub_10003F544(&qword_100554550);
      v8 = type metadata accessor for ParentFlowController(0);
      if ((swift_dynamicCast(&v12, v14, v7, v8, 6) & 1) != 0)
      {
        v9 = v12;
        v10 = objc_msgSend(v1, "traitCollection");
        v11 = UITraitCollection.interfaceMode.getter();

        ParentFlowController.interfaceMode.setter(v11 & 1);
        swift_release(v9);
      }
    }
    else
    {
      sub_100007A28((uint64_t)v14, &qword_100554570);
    }
  }
}

double sub_1003075BC()
{
  uint64_t v0;
  double result;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_objectGraph));
  sub_100007A28(v0 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController, &qword_100554570);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_presenter));

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0
                                                           + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_libraryStackCache)).n128_u64[0];
  return result;
}

double sub_1003076B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController;
  swift_beginAccess(v3, v5, 33, 0);
  sub_100175940(a1, v3);
  *(_QWORD *)&result = swift_endAccess(v5).n128_u64[0];
  return result;
}

uint64_t (*sub_100307708(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10030774C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease(v6);
}

uint64_t (*sub_1003077A8(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1003077EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100007A64(v3, a1, &qword_100554570);
}

uint64_t sub_100307844()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner, v3, 0, 0);
  return swift_unknownObjectRetain(*v1);
}

uint64_t sub_100307890()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  __n128 v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  _BYTE v34[32];
  _QWORD v35[5];
  _OWORD v36[2];
  char v37[24];

  v1 = v0;
  v2 = type metadata accessor for OSLogger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = &v34[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for ActionMetricsBehavior(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = &v34[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v11 = &v34[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = &v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner], v37, 0, 0);
  v14 = *(_QWORD *)v12;
  if (*(_QWORD *)v12)
  {
    v33 = *((_QWORD *)v12 + 1);
    swift_unknownObjectRetain(v14);
    v15 = Link.Presentation.init(rawValue:)(0);
    v16 = v15;
    static ActionMetrics.notInstrumented.getter(v15);
    v17 = type metadata accessor for TabChangeAction(0);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v18 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 9, 0, 0, 1, 0, 0, v16, v11);
    type metadata accessor for ActionRunnerOptions(0);
    v19 = swift_retain();
    v20 = BaseObjectGraph.__allocating_init(_:)(v19);
    memset(v36, 0, sizeof(v36));
    v21 = objc_msgSend(v1, "view");
    sub_100007A64((uint64_t)v36, (uint64_t)v34, (uint64_t *)&unk_100552300);
    v22 = v21;
    ActionOrigin.init(sender:view:)(v35, v34, v21);
    v23 = ActionRunnerOptions.withActionOrigin(_:)(v35);
    sub_100007A28((uint64_t)v35, (uint64_t *)&unk_100557CB0);
    swift_release(v20);

    sub_100007A28((uint64_t)v36, (uint64_t *)&unk_100552300);
    ObjectType = swift_getObjectType(v14, v24);
    v35[3] = v17;
    v35[4] = sub_100005E40((unint64_t *)&unk_100560980, 255, (uint64_t (*)(uint64_t))&type metadata accessor for TabChangeAction, (uint64_t)&protocol conformance descriptor for Action);
    v35[0] = v18;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ActionMetricsBehavior.notProcessed(_:), v6);
    swift_retain();
    v26 = ActionRunner.perform(_:withMetrics:asPartOf:)(v35, v9, v23, ObjectType, v33);
    swift_release(v18);
    swift_unknownObjectRelease(v14);
    swift_release(v23);
    v27 = swift_release(v26);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v7 + 8))(v9, v6, v27);
    return sub_10003D380(v35);
  }
  else
  {
    static OSLogger.actions.getter(v13);
    v29 = sub_10003F544(&qword_100557CA8);
    v30 = type metadata accessor for LogMessage(0);
    v31 = swift_allocObject(v29, ((*(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80) | 7);
    *(_OWORD *)(v31 + 16) = xmmword_1003CA200;
    LogMessage.init(stringLiteral:)(0xD000000000000038, 0x800000010043C9D0);
    Logger.error(_:)(v31, v2, &protocol witness table for OSLogger);
    v32 = swift_bridgeObjectRelease(v31);
    return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v3 + 8))(v5, v2, v32);
  }
}

void sub_100307C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  _OWORD v15[2];
  char v16;

  v1 = v0;
  v2 = type metadata accessor for JULoadingViewController.PresentationContext(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static JULoadingViewController.PresentationContext.fullCover.getter(v3);
  v6 = objc_allocWithZone((Class)type metadata accessor for JULoadingViewController(0));
  v7 = (void *)JULoadingViewController.init(label:presentationContext:pageRenderMetrics:)(0, 0, v5, 0);
  v8 = OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_overlayViewController;
  v9 = *(void **)(v1 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_overlayViewController);
  v10 = v9;
  static ViewControllerContainment.remove(_:)(v9);

  v11 = *(void **)(v1 + v8);
  *(_QWORD *)(v1 + v8) = v7;
  v12 = v7;

  v13 = *(void **)(v1 + v8);
  memset(v15, 0, sizeof(v15));
  v16 = 1;
  v14 = v13;
  static ViewControllerContainment.add(_:to:frame:)(v13, v1, v15);

}

void sub_100307D30(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  void *Strong;
  void *v7;
  double v8;
  _BYTE v9[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = 1194.0;
    if (a3 < a2)
      v8 = 1024.0;
    objc_msgSend(Strong, "_uip_setTabBarHidden:animated:", v8 <= a2, 1);

  }
}

void sub_100307DC0(uint64_t a1, uint64_t a2)
{
  void *v2;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  if ((static Podcasts.isUIPSidebarEnabled.getter(a1) & 1) != 0)
  {
    v5 = v4 & 1;
    v6 = TabMenu.Group.items(for:)(v4 & 1, 0);
    v7 = sub_100306DCC(v6);
    swift_bridgeObjectRelease(v6);
    v8 = v2;
    swift_bridgeObjectRetain(a2);
    sub_100309A8C((uint64_t)v7, (uint64_t)v8, a2, v5);
    v10 = v9;
    swift_bridgeObjectRelease(v7);

    swift_bridgeObjectRelease(a2);
    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0)
        v14 = v10;
      else
        v14 = v10 & 0xFFFFFFFFFFFFFF8;
      v15 = sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr);
      swift_bridgeObjectRetain(v10);
      v12 = _bridgeCocoaArray<A>(_:)(v14, v15);
      swift_bridgeObjectRelease(v10);
    }
    else
    {
      swift_bridgeObjectRetain(v10);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v11);
      sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr);
      v12 = v10;
    }
    swift_bridgeObjectRelease(v10);
    sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "setViewControllers:", isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

  }
}

void sub_100307F40(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  char v31;
  _BYTE v32[24];
  _BYTE v33[24];
  uint64_t v34;
  void *v35;

  v9 = *a1;
  sub_1003081CC(*a1);
  v11 = v10;
  v12 = *(_QWORD *)(a3 + 16);
  v31 = a4;
  if (!v12)
  {
    v16 = v10;
LABEL_12:
    v21 = objc_msgSend(v11, "_uip_tabElement", v29);

    if (v21
      && (v22 = objc_opt_self(_UITabElementGroup),
          v23 = swift_dynamicCastObjCClass(v21, v22),
          v21,
          v23))
    {
      v14 = v11;
    }
    else
    {
      v24 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_objectGraph);
      v25 = a2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController;
      swift_beginAccess(a2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController, v32, 0, 0);
      sub_100007A64(v25, (uint64_t)v33, &qword_100554570);
      if (v34)
      {
        v26 = sub_10003F544(&qword_100554550);
        v27 = type metadata accessor for ParentFlowController(0);
        if (swift_dynamicCast(&v35, v33, v26, v27, 6))
          v28 = v35;
        else
          v28 = 0;
      }
      else
      {
        sub_100007A28((uint64_t)v33, &qword_100554570);
        v28 = 0;
      }
      v14 = sub_1003097BC(v24, v28, v9, v31 & 1);
      swift_release(v28);
      if (v14)

      else
        v14 = v11;
    }
    goto LABEL_23;
  }
  v30 = a5;
  v13 = *(_QWORD *)(a3 + 32);
  v14 = v10;
  swift_bridgeObjectRetain(a3);
  sub_10013BE1C(v13);
  v15 = static NavigationTab.== infix(_:_:)(v13, v9);
  sub_100175988(v13);
  if ((v15 & 1) != 0)
  {
LABEL_3:

    swift_bridgeObjectRelease(a3);
    a5 = v30;
LABEL_23:
    *a5 = v14;
    return;
  }
  if (v12 == 1)
  {
    swift_bridgeObjectRelease(a3);
    a5 = v30;
    goto LABEL_12;
  }
  v29 = v11;
  v17 = 5;
  while (1)
  {
    v18 = v17 - 3;
    if (__OFADD__(v17 - 4, 1))
      break;
    v19 = *(_QWORD *)(a3 + 8 * v17);
    sub_10013BE1C(v19);
    v20 = static NavigationTab.== infix(_:_:)(v19, v9);
    sub_100175988(v19);
    if ((v20 & 1) != 0)
      goto LABEL_3;
    ++v17;
    if (v18 == v12)
    {
      swift_bridgeObjectRelease(a3);
      a5 = v30;
      v11 = v29;
      goto LABEL_12;
    }
  }
  __break(1u);
}

void sub_1003081CC(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _UNKNOWN **v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  BOOL v24;
  unint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  double v39;
  char v40;
  id v41;
  void *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _UNKNOWN **v143;
  id v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  id v150;
  id v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  id v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v220;
  char v221[24];
  _BYTE v222[24];
  uint64_t v223;

  v2 = static Podcasts.isUIPSidebarEnabled.getter(a1);
  v200 = v1;
  v3 = UITabBarController.navigationControllers.getter();
  v4 = v3;
  v5 = (unint64_t)v3 >> 62;
  if ((v2 & 1) == 0)
  {
    if (v5)
    {
      if (v3 >= 0)
        v3 &= 0xFFFFFFFFFFFFFF8uLL;
      v9 = _CocoaArrayWrapper.endIndex.getter(v3);
      if (v9)
      {
LABEL_7:
        v10 = 4;
        while (1)
        {
          v11 = (v4 & 0xC000000000000001) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v4)
              : *(id *)(v4 + 8 * v10);
          v12 = v11;
          v13 = v10 - 3;
          if (__OFADD__(v10 - 4, 1))
            break;
          v14 = objc_msgSend(v11, "tabBarItem");
          if (!v14)
            goto LABEL_192;
          v15 = v14;
          v16 = objc_msgSend(v14, "tag");

          v17 = NavigationTab.init(intValue:)(v16);
          if (v17 != 18)
          {
            v18 = v17;
            v19 = static NavigationTab.== infix(_:_:)(v17, a1);
            sub_1002C7600(v18);
            if ((v19 & 1) != 0)
            {
LABEL_16:
              v20 = v4;
              goto LABEL_161;
            }
          }

          ++v10;
          if (v13 == v9)
            goto LABEL_190;
        }
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        if (v4 < 0)
          v171 = v4;
        else
          v171 = v4 & 0xFFFFFFFFFFFFFF8;
        v6 = _CocoaArrayWrapper.endIndex.getter(v171);
        if (v6)
          goto LABEL_4;
        goto LABEL_180;
      }
    }
    else
    {
      v9 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9)
        goto LABEL_7;
    }
LABEL_190:
    swift_bridgeObjectRelease(v4);
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
    goto LABEL_193;
  }
  if (v5)
    goto LABEL_176;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
  {
LABEL_180:
    swift_bridgeObjectRelease(v4);
    v172 = *(_QWORD *)(v200 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_objectGraph);
    v173 = v200 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController;
    swift_beginAccess(v200 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController, v221, 0, 0);
    sub_100007A64(v173, (uint64_t)v222, &qword_100554570);
    if (v223)
    {
      v174 = sub_10003F544(&qword_100554550);
      v175 = type metadata accessor for ParentFlowController(0);
      if (swift_dynamicCast(&v220, v222, v174, v175, 6))
        v176 = v220;
      else
        v176 = 0;
    }
    else
    {
      sub_100007A28((uint64_t)v222, &qword_100554570);
      v176 = 0;
    }
    v177 = sub_1003097BC(v172, v176, a1, 1);
    swift_release(v176);
    if (v177)
      return;
LABEL_193:
    __break(1u);
    return;
  }
LABEL_4:
  v7 = 0;
  v204 = v4 & 0xC000000000000001;
  v188 = v4 + 32;
  v189 = v4 & 0xFFFFFFFFFFFFFF8;
  v8 = CPInterfaceController_ptr;
  v198 = v6;
  while (1)
  {
    if (v204)
    {
      v21 = v7;
      v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
    }
    else
    {
      if (v7 >= *(_QWORD *)(v189 + 16))
        goto LABEL_191;
      v21 = v7;
      v22 = *(id *)(v188 + 8 * v7);
    }
    v23 = v22;
    v24 = __OFADD__(v21, 1);
    v25 = v21 + 1;
    if (v24)
      goto LABEL_171;
    v213 = v25;
    v26 = objc_msgSend(v22, "_uip_tabElement");
    if (v26)
    {
      v27 = v26;
      v28 = _UITab.navigationTab.getter();

      LOBYTE(v27) = static NavigationTab.== infix(_:_:)(v28, a1);
      sub_100175988(v28);
      if ((v27 & 1) != 0)
        goto LABEL_16;
    }
    v29 = objc_msgSend(v23, "_uip_tabElement", v178);
    v30 = v29;
    if (v29)
    {
      v31 = objc_msgSend(v29, "_identifier");

      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v30 = v33;

    }
    else
    {
      v32 = 0;
    }
    v34 = objc_msgSend((id)objc_opt_self(v8[398]), "_searchElement");
    v35 = objc_msgSend(v34, "_identifier");

    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    if (!v30)
    {
      *(_QWORD *)&v39 = swift_bridgeObjectRelease(v38).n128_u64[0];
      goto LABEL_36;
    }
    if (v32 == v36 && v30 == v38)
    {
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v38);
    }
    else
    {
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v30, v36, v38, 0);
      swift_bridgeObjectRelease(v30);
      *(_QWORD *)&v39 = swift_bridgeObjectRelease(v38).n128_u64[0];
      if ((v40 & 1) == 0)
        goto LABEL_36;
    }
    if ((static NavigationTab.== infix(_:_:)(12, a1) & 1) != 0)
      goto LABEL_16;
LABEL_36:
    v41 = objc_msgSend(v23, "_uip_tabElement", v39);
    if (v41)
      break;

LABEL_18:
    v7 = v213;
    if (v213 == v198)
      goto LABEL_180;
  }
  v42 = v41;
  v43 = _UITab.navigationTab.getter();
  v44 = static NavigationTab.== infix(_:_:)(v43, a1);
  sub_100175988(v43);
  if ((v44 & 1) != 0)
  {
    swift_bridgeObjectRelease(v4);

    return;
  }
  v45 = objc_opt_self(_UITabElementGroup);
  v46 = swift_dynamicCastObjCClass(v42, v45);
  if (!v46)
  {

    goto LABEL_18;
  }
  v47 = (void *)v46;
  v48 = v42;
  v49 = objc_msgSend(v47, "_children");
  v217 = sub_100005EC8(0, &qword_100563228, _UITab_ptr);
  v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v217);

  v211 = v50;
  if (!((unint64_t)v50 >> 62))
  {
    v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v50);
    if (v51)
      goto LABEL_41;
    goto LABEL_146;
  }
  if (v50 < 0)
    v159 = v50;
  else
    v159 = v50 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v50);
  v51 = _CocoaArrayWrapper.endIndex.getter(v159);
  if (!v51)
  {
LABEL_146:

    swift_bridgeObjectRelease_n(v211, 2);
    goto LABEL_18;
  }
LABEL_41:
  v52 = 0;
  v201 = v50 & 0xC000000000000001;
  v186 = v50 + 32;
  v196 = v51;
  while (2)
  {
    if (v201)
      v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v52, v211);
    else
      v53 = *(id *)(v186 + 8 * v52);
    v54 = v53;
    v24 = __OFADD__(v52, 1);
    v55 = v52 + 1;
    if (v24)
      goto LABEL_172;
    v212 = v55;
    v56 = objc_opt_self(v8[398]);
    v57 = swift_dynamicCastObjCClass(v54, v56);
    if (!v57)
      goto LABEL_52;
    v58 = v57;
    v59 = _UITab.navigationTab.getter();
    v60 = static NavigationTab.== infix(_:_:)(v59, a1);
    sub_100175988(v59);
    if ((v60 & 1) != 0)
    {

      swift_bridgeObjectRelease(v211);
      v165 = v211;
      goto LABEL_160;
    }
    v61 = objc_opt_self(_UITabElementGroup);
    v62 = swift_dynamicCastObjCClass(v58, v61);
    if (!v62)
    {
LABEL_52:

      goto LABEL_145;
    }
    v63 = (void *)v62;
    v190 = v54;
    v64 = objc_msgSend(v63, "_children");
    v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v64, v217);

    v210 = v65;
    if (!((unint64_t)v65 >> 62))
    {
      v66 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v65);
      v67 = v66;
      if (v66)
        goto LABEL_51;
LABEL_144:

      swift_bridgeObjectRelease_n(v210, 2);
LABEL_145:
      v52 = v212;
      if (v212 == v196)
        goto LABEL_146;
      continue;
    }
    break;
  }
  if (v65 < 0)
    v158 = v65;
  else
    v158 = v65 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v65);
  v67 = _CocoaArrayWrapper.endIndex.getter(v158);
  if (!v67)
    goto LABEL_144;
LABEL_51:
  v68 = 0;
  v69 = v65 & 0xC000000000000001;
  v181 = v65 + 32;
  v182 = v65 & 0xC000000000000001;
  v195 = v67;
  while (2)
  {
    if (v69)
      v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v68, v210);
    else
      v70 = *(id *)(v181 + 8 * v68);
    v71 = v70;
    v24 = __OFADD__(v68++, 1);
    if (v24)
      goto LABEL_173;
    v72 = objc_opt_self(v8[398]);
    v73 = swift_dynamicCastObjCClass(v71, v72);
    if (!v73)
    {

      goto LABEL_54;
    }
    v74 = v73;
    v194 = v68;
    v75 = _UITab.navigationTab.getter();
    v76 = static NavigationTab.== infix(_:_:)(v75, a1);
    sub_100175988(v75);
    if ((v76 & 1) != 0)
    {
      v166 = v190;

      v164 = v210;
      swift_bridgeObjectRelease(v210);

      v165 = v211;
      goto LABEL_159;
    }
    v77 = objc_opt_self(_UITabElementGroup);
    v78 = swift_dynamicCastObjCClass(v74, v77);
    if (!v78)
    {

      goto LABEL_139;
    }
    v79 = (void *)v78;
    v80 = v71;
    v81 = objc_msgSend(v79, "_children");
    v82 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v81, v217);

    v208 = v82;
    if (!((unint64_t)v82 >> 62))
    {
      v83 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v82);
      v84 = v83;
      if (v83)
        goto LABEL_64;
LABEL_137:
      v86 = v82;
LABEL_138:
      v157 = v86;

      swift_bridgeObjectRelease_n(v157, 2);
LABEL_139:
      v68 = v194;
      v69 = v182;
LABEL_54:
      if (v68 == v195)
        goto LABEL_144;
      continue;
    }
    break;
  }
  if (v82 < 0)
    v156 = v82;
  else
    v156 = v82 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v82);
  v84 = _CocoaArrayWrapper.endIndex.getter(v156);
  if (!v84)
    goto LABEL_137;
LABEL_64:
  v85 = 0;
  v86 = v82;
  v197 = v82 & 0xC000000000000001;
  v180 = v82 + 32;
  v207 = v80;
  v192 = v84;
  while (2)
  {
    v87 = v85;
    if (v197)
      v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v85, v86);
    else
      v88 = *(id *)(v180 + 8 * v85);
    v89 = v88;
    v24 = __OFADD__(v87, 1);
    v90 = v87 + 1;
    if (v24)
      goto LABEL_174;
    v206 = v90;
    v91 = objc_opt_self(v8[398]);
    v92 = swift_dynamicCastObjCClass(v89, v91);
    if (!v92)
    {

      goto LABEL_66;
    }
    v93 = v92;
    v94 = _UITab.navigationTab.getter();
    v95 = static NavigationTab.== infix(_:_:)(v94, a1);
    sub_100175988(v94);
    if ((v95 & 1) != 0)
    {
      v167 = v207;

      v170 = v208;
      swift_bridgeObjectRelease(v208);

      v164 = v210;
      v165 = v211;
      v166 = v190;
      goto LABEL_158;
    }
    v96 = objc_opt_self(_UITabElementGroup);
    v97 = swift_dynamicCastObjCClass(v93, v96);
    if (!v97)
    {

      v80 = v207;
      goto LABEL_66;
    }
    v98 = (void *)v97;
    v99 = v48;
    v100 = v89;
    v101 = objc_msgSend(v98, "_children");
    v102 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v101, v217);

    v202 = v102;
    v187 = v100;
    if ((unint64_t)v102 >> 62)
    {
      if (v102 < 0)
        v155 = v102;
      else
        v155 = v102 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v102);
      v104 = _CocoaArrayWrapper.endIndex.getter(v155);
    }
    else
    {
      v103 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v102);
      v104 = v103;
    }
    v80 = v207;
    v48 = v99;
    if (!v104)
    {
LABEL_127:

      swift_bridgeObjectRelease_n(v202, 2);
LABEL_66:
      v85 = v206;
      v86 = v208;
      if (v206 == v192)
        goto LABEL_138;
      continue;
    }
    break;
  }
  v105 = 0;
  v178 = v202 + 32;
  v179 = v99;
  v191 = v104;
  while (1)
  {
    v106 = v105;
    if ((v202 & 0xC000000000000001) != 0)
      v107 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v105, v202);
    else
      v107 = *(id *)(v178 + 8 * v105);
    v108 = v107;
    v24 = __OFADD__(v106, 1);
    v109 = v106 + 1;
    if (v24)
      goto LABEL_175;
    v205 = v109;
    v110 = objc_opt_self(v8[398]);
    v111 = swift_dynamicCastObjCClass(v108, v110);
    if (v111)
      break;

LABEL_79:
    v105 = v205;
    if (v205 == v191)
      goto LABEL_127;
  }
  v112 = v111;
  v113 = _UITab.navigationTab.getter();
  v114 = static NavigationTab.== infix(_:_:)(v113, a1);
  sub_100175988(v113);
  if ((v114 & 1) != 0)
  {
    v168 = v187;

    v169 = v202;
    swift_bridgeObjectRelease(v202);

    v164 = v210;
    v165 = v211;
    v166 = v190;
    v167 = v207;
    goto LABEL_157;
  }
  v115 = objc_opt_self(_UITabElementGroup);
  v116 = swift_dynamicCastObjCClass(v112, v115);
  if (!v116)
  {

    v80 = v207;
    goto LABEL_79;
  }
  v117 = (void *)v116;
  v183 = v108;
  v118 = objc_msgSend(v117, "_children");
  v119 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v118, v217);

  v209 = v119;
  if (!((unint64_t)v119 >> 62))
  {
    v120 = *(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v119);
    v80 = v207;
    if (v120)
      goto LABEL_89;
    goto LABEL_125;
  }
  if (v119 < 0)
    v154 = v119;
  else
    v154 = v119 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v119);
  v120 = _CocoaArrayWrapper.endIndex.getter(v154);
  v80 = v207;
  if (!v120)
  {
LABEL_125:

    swift_bridgeObjectRelease_n(v209, 2);
    goto LABEL_79;
  }
LABEL_89:
  v121 = 0;
  v203 = v119 & 0xC000000000000001;
  v184 = v119 + 32;
  v185 = v4;
  v199 = v120;
  v215 = v23;
  while (2)
  {
    if (v203)
      v122 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v121, v209);
    else
      v122 = *(id *)(v184 + 8 * v121);
    v123 = v122;
    v24 = __OFADD__(v121, 1);
    v124 = v121 + 1;
    if (v24)
      goto LABEL_170;
    v214 = v124;
    v125 = objc_opt_self(v8[398]);
    v126 = swift_dynamicCastObjCClass(v123, v125);
    if (!v126)
      goto LABEL_90;
    v127 = v126;
    v128 = _UITab.navigationTab.getter();
    v129 = static NavigationTab.== infix(_:_:)(v128, a1);
    sub_100175988(v128);
    if ((v129 & 1) == 0)
    {
      v130 = objc_opt_self(_UITabElementGroup);
      v131 = swift_dynamicCastObjCClass(v127, v130);
      if (v131)
      {
        v132 = (void *)v131;
        v193 = v123;
        v133 = objc_msgSend(v132, "_children");
        v134 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v133, v217);

        if (!((unint64_t)v134 >> 62))
        {
          v4 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v134);
          if (v4)
            goto LABEL_101;
LABEL_119:

          swift_bridgeObjectRelease_n(v134, 2);
          v4 = v185;
LABEL_91:
          v121 = v214;
          if (v214 == v199)
            goto LABEL_125;
          continue;
        }
        if (v134 < 0)
          v153 = v134;
        else
          v153 = v134 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v134);
        v4 = _CocoaArrayWrapper.endIndex.getter(v153);
        if (!v4)
          goto LABEL_119;
LABEL_101:
        v218 = v134 & 0xC000000000000001;
        v135 = 4;
        v216 = v134;
        while (2)
        {
          if (v218)
            v136 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v135 - 4, v134);
          else
            v136 = *(id *)(v134 + 8 * v135);
          v137 = v136;
          v138 = v135 - 3;
          if (__OFADD__(v135 - 4, 1))
            goto LABEL_169;
          v139 = objc_opt_self(v8[398]);
          v140 = swift_dynamicCastObjCClass(v137, v139);
          if (v140)
          {
            v141 = v140;
            v142 = v4;
            v143 = v8;
            v144 = v137;
            v145 = _UITab.navigationTab.getter();
            v146 = static NavigationTab.== infix(_:_:)(v145, a1);
            sub_100175988(v145);
            if ((v146 & 1) != 0)
            {
              v160 = v193;

              v161 = v216;
              swift_bridgeObjectRelease(v216);

LABEL_155:
              v162 = v183;

              v163 = v209;
              swift_bridgeObjectRelease(v209);

              swift_bridgeObjectRelease(v161);
              v4 = v185;
              v164 = v210;
              v165 = v211;
              v166 = v190;
              v167 = v207;
              goto LABEL_156;
            }
            v147 = objc_opt_self(_UITabElementGroup);
            v148 = swift_dynamicCastObjCClass(v141, v147);
            if (v148)
            {
              v149 = (void *)v148;
              v150 = v144;
              v151 = objc_msgSend(v149, "_children");
              v152 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v151, v217);

              sub_10013BE1C(a1);
              LOBYTE(v151) = sub_100309584(v152, a1);
              sub_100175988(a1);
              swift_bridgeObjectRelease(v152);

              if ((v151 & 1) != 0)
              {
                v160 = v193;

                v161 = v216;
                swift_bridgeObjectRelease(v216);
                goto LABEL_155;
              }
              v8 = v143;
              v134 = v216;
              v4 = v142;
              v23 = v215;
              goto LABEL_104;
            }

            v8 = v143;
            v134 = v216;
            v4 = v142;
            v23 = v215;
          }

LABEL_104:
          ++v135;
          if (v138 == v4)
          {

            swift_bridgeObjectRelease_n(v134, 2);
            v4 = v185;
            v48 = v179;
            v80 = v207;
            goto LABEL_91;
          }
          continue;
        }
      }
LABEL_90:

      goto LABEL_91;
    }
    break;
  }
  v167 = v80;
  v162 = v183;

  v163 = v209;
  swift_bridgeObjectRelease(v209);

  v164 = v210;
  v165 = v211;
  v166 = v190;
LABEL_156:
  v168 = v187;

  v169 = v202;
  swift_bridgeObjectRelease(v202);

  swift_bridgeObjectRelease(v163);
LABEL_157:

  v170 = v208;
  swift_bridgeObjectRelease(v208);

  swift_bridgeObjectRelease(v169);
  v48 = v179;
LABEL_158:

  swift_bridgeObjectRelease(v164);
  swift_bridgeObjectRelease(v170);
LABEL_159:

  swift_bridgeObjectRelease(v165);
  swift_bridgeObjectRelease(v164);
LABEL_160:
  swift_bridgeObjectRelease(v4);

  v20 = v165;
LABEL_161:
  swift_bridgeObjectRelease(v20);
}

id sub_10030917C()
{
  void *v0;

  return objc_msgSend(v0, "selectedViewController");
}

void (*sub_1003091A8(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = UITabBarController.selectedNavigationController.modify();
  return sub_100179A78;
}

void sub_1003091F4(char a1, uint64_t a2)
{
  sub_100307DC0(a1 & 1, a2);
}

void (*sub_10030920C(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = UITabBarController.rootViewControllers.modify();
  return sub_100179A78;
}

NSObject *sub_100309250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *result;
  NSObject *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSObject *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin();
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = UITabBarController.selectedNavigationController.getter(v6);
  if (result)
  {
    v10 = result;
    v11 = -[NSObject visibleViewController](result, "visibleViewController");
    if (v11
      && (v27 = v11,
          v12 = sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr),
          v13 = sub_10003F544(&qword_100563240),
          (swift_dynamicCast(&v28, &v27, v12, v13, 6) & 1) != 0))
    {
      if (*((_QWORD *)&v29 + 1))
      {
        sub_10002099C(&v28, (uint64_t)v31);
LABEL_11:
        v18 = v32;
        v19 = v33;
        sub_10003A834(v31, v32);
        dispatch thunk of SearchPerforming.perform(searchAction:sender:)(a1, a2, v18, v19);

        return sub_10003D380(v31);
      }
    }
    else
    {
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
    }
    sub_100007A28((uint64_t)&v28, &qword_100563238);
    v14 = -[NSObject bottomViewController](v10, "bottomViewController");
    if (v14
      && (v27 = v14,
          v15 = sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr),
          v16 = sub_10003F544(&qword_100563240),
          (swift_dynamicCast(&v28, &v27, v15, v16, 6) & 1) != 0))
    {
      if (*((_QWORD *)&v29 + 1))
      {
        sub_10002099C(&v28, (uint64_t)v31);
        v17 = (unint64_t)FlowNavigationController.popToRootViewController(animated:)(1);
        swift_bridgeObjectRelease(v17);
        goto LABEL_11;
      }
    }
    else
    {
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
    }
    v20 = sub_100007A28((uint64_t)&v28, &qword_100563238);
    v21 = static Logger.ui.getter(v20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Search actions may only be performed while the SearchViewController is visible.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
      v25 = v10;
    }
    else
    {
      v25 = v22;
      v22 = v10;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

NSObject *sub_1003094E0(uint64_t a1, uint64_t a2)
{
  return sub_100309250(a1, a2);
}

uint64_t sub_100309500(uint64_t a1, uint64_t a2)
{
  return sub_100005E40(&qword_100563218, a2, (uint64_t (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController, (uint64_t)&unk_1003D4FF0);
}

uint64_t sub_10030952C(uint64_t a1, uint64_t a2)
{
  return sub_100005E40(&qword_100560990, a2, (uint64_t (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController, (uint64_t)&unk_1003D5058);
}

uint64_t sub_100309558(uint64_t a1, uint64_t a2)
{
  return sub_100005E40(&qword_100563220, a2, (uint64_t (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController, (uint64_t)&unk_1003D5080);
}

uint64_t sub_100309584(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_21;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    v24 = v2 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v5 = v24 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_opt_self(_UITabElement);
      v9 = swift_dynamicCastObjCClass(v6, v8);
      if (!v9)
        goto LABEL_5;
      v10 = v9;
      v11 = v2;
      v12 = v6;
      v13 = _UITab.navigationTab.getter();
      v14 = static NavigationTab.== infix(_:_:)(v13, a2);
      sub_100175988(v13);
      if ((v14 & 1) != 0)
      {
        swift_bridgeObjectRelease(v11);

        return 1;
      }
      v15 = objc_opt_self(_UITabElementGroup);
      v16 = swift_dynamicCastObjCClass(v10, v15);
      if (!v16)
      {

        v2 = v11;
LABEL_5:

        goto LABEL_6;
      }
      v17 = (void *)v16;
      v18 = v12;
      v19 = objc_msgSend(v17, "_children");
      v20 = sub_100005EC8(0, &qword_100563228, _UITab_ptr);
      v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

      sub_10013BE1C(a2);
      LOBYTE(v19) = sub_100309584(v21, a2);
      sub_100175988(a2);
      swift_bridgeObjectRelease(v21);

      if ((v19 & 1) != 0)
      {
        swift_bridgeObjectRelease(v11);
        return 1;
      }
      v2 = v11;
LABEL_6:
      ++v4;
      if (v7 == v3)
        goto LABEL_25;
    }
    __break(1u);
LABEL_21:
    if (v2 < 0)
      v23 = v2;
    else
      v23 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v23);
  }
LABEL_25:
  swift_bridgeObjectRelease(v2);
  return 0;
}

id sub_1003097BC(uint64_t a1, id a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Class isa;
  id v36;
  _QWORD v37[5];

  sub_10003F544(&qword_100563230);
  v8 = __chkstk_darwin();
  v10 = (char *)&v37[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = (uint64_t (*)(uint64_t, uint64_t))ParentFlowController.viewControllerGenerator.getter(v8);
    if (v11)
    {
      v13 = (uint64_t)v11;
      v14 = v12;
      v15 = a4 & 1;
      v16 = v11(a3, v15);
      if (v16)
      {
        v17 = (void *)v16;
        type metadata accessor for FlowNavigationController(0);
        v18 = (void *)FlowNavigationController.__allocating_init()();
        v19 = type metadata accessor for NavigationFlowController(0);
        swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
        v20 = v18;
        v21 = swift_retain();
        v22 = NavigationFlowController.init(navigationController:asPartOf:)(v20, a1, v21);
        v37[3] = v19;
        v37[4] = &protocol witness table for BaseFlowController;
        v37[0] = v22;
        v23 = FlowNavigationController.flowController.setter(v37);
        if ((static Podcasts.isUIPSidebarEnabled.getter(v23) & 1) != 0)
        {
          v36 = v20;
          static TabMenu.item(for:interfaceMode:)(a3, v15);
          v24 = type metadata accessor for TabMenu.Item(0);
          v25 = *(_QWORD *)(v24 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v24) == 1)
          {
            sub_100007A28((uint64_t)v10, &qword_100563230);
            v26 = 0;
          }
          else
          {
            v26 = (void *)TabMenu.Item.tabBarElement(asPartOf:interfaceMode:)(a1, v15);
            (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v24);
          }
          v27 = v36;
          objc_msgSend(v36, "_uip_setTabElement:", v26);

        }
        v28 = v20;
        v29 = objc_msgSend(v17, "tabBarItem");
        objc_msgSend(v28, "setTabBarItem:", v29);

        v30 = sub_10003F544((uint64_t *)&unk_100553780);
        v31 = swift_allocObject(v30, 40, 7);
        *(_OWORD *)(v31 + 16) = xmmword_1003CA250;
        *(_QWORD *)(v31 + 32) = v17;
        v37[0] = v31;
        specialized Array._endMutation()(v31);
        v32 = v37[0];
        sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr);
        a2 = v28;
        v33 = v17;
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(a2, "setViewControllers:", isa, swift_bridgeObjectRelease(v32).n128_f64[0]);

        sub_10002CA30(v13, v14);
      }
      else
      {
        sub_10002CA30(v13, v14);
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return a2;
}

void sub_100309A8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v10 = a4 & 1;
    v20 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    v11 = (uint64_t *)(a1 + 32);
    while (1)
    {
      v13 = *v11++;
      v12 = v13;
      v18 = v13;
      sub_10013BE1C(v13);
      sub_100307F40(&v18, a2, a3, v10, &v19);
      if (v5)
        break;
      v5 = 0;
      v14 = sub_100175988(v12);
      v15 = v19;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v16 = v20[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v15);
      specialized ContiguousArray._endMutation()(v17);
      if (!--v7)
        return;
    }
    sub_100175988(v12);
    swift_release(v20);
  }
}

_QWORD *sub_100309BA0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  Class isa;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  id v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD v55[5];
  unint64_t v56;

  v48 = a3;
  v53 = a1;
  v3 = a2 & 1;
  v4 = sub_10003F544(&qword_100563230);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = TabMenu.Group.items(for:)(v3, 0);
  v8 = sub_100306DCC(v7);
  swift_bridgeObjectRelease(v7);
  v9 = _swiftEmptyArrayStorage;
  v56 = (unint64_t)_swiftEmptyArrayStorage;
  v10 = v8[2];
  if (v10)
  {
    v47 = v6;
    swift_bridgeObjectRetain(v8);
    v11 = 0;
    v50 = xmmword_1003CA250;
    v54 = v3;
    v51 = v10;
    v52 = v8;
    while (1)
    {
      v12 = v8[v11 + 4];
      v13 = sub_10013BE1C(v12);
      v14 = (uint64_t (*)(uint64_t, uint64_t))ParentFlowController.viewControllerGenerator.getter(v13);
      if (v14)
      {
        v16 = (uint64_t)v14;
        v17 = v15;
        v18 = v14(v12, v3);
        if (v18)
        {
          v19 = (void *)v18;
          type metadata accessor for FlowNavigationController(0);
          v20 = (void *)FlowNavigationController.__allocating_init()();
          v21 = type metadata accessor for NavigationFlowController(0);
          swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
          v22 = v20;
          v23 = v53;
          v24 = swift_retain(v53);
          v25 = NavigationFlowController.init(navigationController:asPartOf:)(v22, v23, v24);
          v55[3] = v21;
          v55[4] = &protocol witness table for BaseFlowController;
          v55[0] = v25;
          v26 = FlowNavigationController.flowController.setter(v55);
          if ((static Podcasts.isUIPSidebarEnabled.getter(v26) & 1) != 0)
          {
            v49 = v22;
            v27 = (uint64_t)v47;
            v28 = v54;
            static TabMenu.item(for:interfaceMode:)(v12, v54);
            v29 = type metadata accessor for TabMenu.Item(0);
            v30 = *(_QWORD *)(v29 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v27, 1, v29) == 1)
            {
              sub_100007A28(v27, &qword_100563230);
              v31 = 0;
            }
            else
            {
              v31 = (void *)TabMenu.Item.tabBarElement(asPartOf:interfaceMode:)(v53, v28);
              (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v27, v29);
            }
            v32 = v49;
            objc_msgSend(v49, "_uip_setTabElement:", v31);

          }
          v33 = v22;
          v34 = objc_msgSend(v19, "tabBarItem");
          objc_msgSend(v33, "setTabBarItem:", v34);

          v35 = sub_10003F544((uint64_t *)&unk_100553780);
          v36 = swift_allocObject(v35, 40, 7);
          *(_OWORD *)(v36 + 16) = v50;
          *(_QWORD *)(v36 + 32) = v19;
          v55[0] = v36;
          specialized Array._endMutation()(v36);
          v37 = v55[0];
          sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr);
          v38 = v33;
          v39 = v19;
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v37);
          objc_msgSend(v38, "setViewControllers:", isa);

          sub_10002CA30(v16, v17);
          v41 = sub_100175988(v12);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
          v43 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v42 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v43 >= v42 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
          v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v38);
          specialized Array._endMutation()(v44);
          v3 = v54;
          v10 = v51;
          v8 = v52;
          goto LABEL_5;
        }
        sub_10002CA30(v16, v17);
      }
      sub_100175988(v12);
LABEL_5:
      if (v10 == ++v11)
      {
        swift_bridgeObjectRelease(v8);
        v9 = (_QWORD *)v56;
        break;
      }
    }
  }
  swift_bridgeObjectRelease(v8);
  return v9;
}

void sub_100309F5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  Class isa;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[24];

  v2 = v1;
  if ((static Podcasts.isUIPSidebarEnabled.getter(a1) & 1) == 0
    || (UITabBarController.canSelect(navigationTab:)(a1) & 1) != 0)
  {
    UITabBarController.selectTabIfPossible(_:)(a1);
    return;
  }
  v4 = static TabConverter.translateNavigationTab(for:interface:)(a1, 1);
  v5 = static NavigationTab.== infix(_:_:)(v4, 7);
  sub_100175988(v4);
  if ((v5 & 1) != 0)
  {
    v6 = UITabBarController.selectTabIfPossible(_:)(7);
    v7 = (void *)UITabBarController.selectedNavigationController.getter(v6);
    if (!v7)
      goto LABEL_27;
    v8 = v7;
    v9 = objc_msgSend(v7, "viewControllers");

    v10 = sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr);
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0)
        v27 = v11;
      else
        v27 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      if (_CocoaArrayWrapper.endIndex.getter(v27))
        goto LABEL_8;
    }
    else
    {
      v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v11);
      if (v12)
      {
LABEL_8:
        if ((v11 & 0xC000000000000001) != 0)
        {
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
        }
        else
        {
          if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v13 = *(id *)(v11 + 32);
        }
        v14 = v13;
        swift_bridgeObjectRelease(v11);
        ObjectType = swift_getObjectType(v14, v15);
        v17 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for NavigationTabIdentifiable);
        if (v17)
          v19 = v17;
        else
          v19 = 0;
        if (v17)
          v20 = v14;
        else
          v20 = 0;
        if (v20)
        {
          v21 = swift_getObjectType(v20, v18);
          v22 = dispatch thunk of NavigationTabIdentifiable.navigationTabIdentifier.getter(v21, v19);
          if (v22 == 18)
          {
            swift_bridgeObjectRelease(v11);

          }
          else
          {
            v23 = v22;
            v24 = (_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_libraryStackCache);
            swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_libraryStackCache, v46, 33, 0);
            sub_10013BE1C(v23);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v24);
            v45 = *v24;
            *v24 = 0x8000000000000000;
            sub_10021CCC8(v11, v23, isUniquelyReferenced_nonNull_native);
            v26 = *v24;
            *v24 = v45;
            swift_bridgeObjectRelease(v26);
            sub_1002C7600(v23);
            swift_endAccess(v46);
            sub_1002C7600(v23);

          }
        }
        else
        {

          swift_bridgeObjectRelease(v11);
        }
LABEL_27:
        v28 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_libraryStackCache);
        swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_libraryStackCache, v46, 32, 0);
        v29 = *v28;
        if (*(_QWORD *)(v29 + 16))
        {
          sub_10013BE1C(a1);
          v30 = sub_1001CD07C(a1);
          if ((v31 & 1) != 0)
          {
            v32 = *(_QWORD **)(*(_QWORD *)(v29 + 56) + 8 * v30);
            swift_endAccess(v46);
            swift_bridgeObjectRetain(v32);
            v33 = sub_100175988(a1);
LABEL_32:
            v34 = UITabBarController.selectedNavigationController.getter(v33);
            if (v34)
            {
              v35 = (void *)v34;
              sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr);
              isa = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v35, "setViewControllers:", isa, swift_bridgeObjectRelease(v32).n128_f64[0]);

            }
            else
            {
              swift_bridgeObjectRelease(v32);
            }
            v38 = (void *)UITabBarController.selectedNavigationController.getter(v37);
            if (v38)
            {
              v39 = v38;
              v40 = objc_msgSend(v38, "_uip_tabElement");

              if (v40)
              {
                v41 = objc_opt_self(_UITabElementGroup);
                v42 = swift_dynamicCastObjCClass(v40, v41);
                if (v42)
                {
                  v43 = (void *)v42;
                  v44 = (void *)_UITab.tabElement(matching:)(a1);
                  objc_msgSend(v43, "_setSelectedElement:", v44);

                }
                else
                {

                }
              }
            }
            return;
          }
          sub_100175988(a1);
        }
        swift_endAccess(v46);
        v32 = _swiftEmptyArrayStorage;
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease_n(v11, 2);
    goto LABEL_27;
  }
}

uint64_t sub_10030A328()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10030A34C(double a1, double a2)
{
  uint64_t v2;

  sub_100307D30(v2, a1, a2);
}

unint64_t sub_10030A354(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    return String.subscript.getter(result, v4 | (v3 << 16), a2, a3);
  }
  return result;
}

uint64_t sub_10030A3A0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v18 - v8;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    URL.init(string:)(a1, a2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_100007A28((uint64_t)v9, (uint64_t *)&unk_100553DC0);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      v14 = a3[3];
      v15 = a3[4];
      sub_10003A834(a3, v14);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v7, v13, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      v16 = LibraryActionControllerProtocol.subscribe(feedUrl:adamId:location:explicit:displaySuccessHUD:)(v7, 0, 1, 0, 0, 0, 1, v14, v15);
      swift_release(v16);
      sub_100007A28((uint64_t)v7, (uint64_t *)&unk_100553DC0);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
  return 0;
}

uint64_t sub_10030A558(uint64_t *a1, id a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(a2, "uuid");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = a1[1];
  *a1 = v5;
  a1[1] = v7;
  return swift_bridgeObjectRelease(v8);
}

double sub_10030A5C4(uint64_t *a1, void *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FlowPresentationContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FlowAction(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for FlowPresentationContext.pushDetail(_:), v6);
  v10 = a2;
  static ActionMetrics.notInstrumented.getter(v10);
  v11 = FlowAction.init(podcast:presentationContext:actionMetrics:)(v10, (uint64_t)v9, (uint64_t)v5);
  v12 = *a1;
  *a1 = v11;
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_10030A6C8(uint64_t *a1, id a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;

  v5 = objc_msgSend(a2, "uuid");
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = a1[1];
  *a1 = v7;
  a1[1] = v9;
  v11 = swift_bridgeObjectRelease(v10);
  result = MTEpisode.contentId.getter(v11);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v13 & 1;
  return result;
}

void sub_10030A754(uint64_t a1, id *a2, void **a3, void *a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  double v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  NSString v22;
  id v23;
  void *v24;
  uint64_t v25;

  type metadata accessor for PodcastsURLEpisodeParameters(0);
  __chkstk_darwin();
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 24);
  sub_10030F8B8(a1, (uint64_t)v9);
  if (v10)
  {
    sub_10030F8FC((uint64_t)v9);
  }
  else
  {
    v11 = v9[56];
    sub_10030F8FC((uint64_t)v9);
    if ((v11 & 1) != 0)
      goto LABEL_11;
  }
  v12 = objc_msgSend(objc_allocWithZone((Class)MTEpisodeLookupRequest), "init");
  v14 = *(_QWORD *)(a1 + 24);
  if (v14)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 24));
    v15 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v13 = swift_bridgeObjectRelease(v14).n128_u64[0];
  }
  else
  {
    v15 = 0;
  }
  objc_msgSend(v12, "setUuid:", v15, v13);

  if (*(_BYTE *)(a1 + 56))
    v16 = 0;
  else
    v16 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v12, "setStoreTrackId:", v16);
  v17 = objc_msgSend((id)objc_opt_self(MTEpisodeLookupUtil), "sharedInstance");
  v18 = objc_msgSend(v17, "findEpisodeWithRequest:", v12);

  v19 = *a2;
  *a2 = v18;

LABEL_11:
  if (*a2)
  {
    v20 = objc_msgSend(*a2, "podcast");
    v21 = *a3;
    *a3 = v20;
  }
  else
  {
    v21 = *a3;
    *a3 = 0;
  }

  if (!*a3)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v22 = String._bridgeToObjectiveC()();
      v23 = objc_msgSend(a4, "podcastForUuid:", v22);

      v24 = *a3;
      *a3 = v23;

    }
  }
}

void sub_10030A958(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, void *a6, void **a7)
{
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;

  v14 = (void *)objc_opt_self(MTStoreIdentifier);
  if (!objc_msgSend(v14, "isNotEmpty:", a1))
    return;
  v42 = objc_msgSend((id)objc_opt_self(MTPodcast), "predicateForPodcastStoreId:", a1);
  v15 = objc_msgSend((id)a2, "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName);
  if (!v15)
    goto LABEL_17;
  v16 = v15;
  v17 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v23 = v18;
    else
      v23 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v19 = (void **)_CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v18);
    if (v19)
      goto LABEL_5;
  }
  else
  {
    v19 = *(void ***)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v19)
    {
LABEL_5:
      if ((v18 & 0xC000000000000001) != 0)
      {
        v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
      }
      else
      {
        if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_34;
        }
        v20 = *(id *)(v18 + 32);
      }
      v21 = v20;
      swift_bridgeObjectRelease(v18);
      v22 = objc_opt_self(MTPodcast);
      v15 = (id)swift_dynamicCastObjCClass(v21, v22);
      if (v15)
        goto LABEL_17;

      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease(v18);
LABEL_16:
  v15 = 0;
LABEL_17:
  v24 = *a3;
  *a3 = v15;

  if (!*a3)
    goto LABEL_30;
  v19 = a7;
  if (objc_msgSend(v14, "isNotEmpty:", a4))
  {
    v25 = objc_msgSend((id)objc_opt_self(MTEpisode), "predicateForEpisodeStoreTrackId:", a4);
    goto LABEL_22;
  }
  if (!a6)
  {
LABEL_30:
    v39 = v42;
LABEL_41:

    return;
  }
  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v26 = sub_10003F544(&qword_1005559A0);
  v27 = swift_allocObject(v26, 112, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1003CA220;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(kEpisodeGuid);
  v30 = v29;
  *(_QWORD *)(v27 + 56) = &type metadata for String;
  v31 = sub_10003E198();
  *(_QWORD *)(v27 + 32) = v28;
  *(_QWORD *)(v27 + 40) = v30;
  *(_QWORD *)(v27 + 96) = &type metadata for String;
  *(_QWORD *)(v27 + 104) = v31;
  *(_QWORD *)(v27 + 64) = v31;
  *(_QWORD *)(v27 + 72) = a5;
  *(_QWORD *)(v27 + 80) = a6;
  swift_bridgeObjectRetain(a6);
  v25 = (id)NSPredicate.init(format:_:)(0x4025203D204B25, 0xE700000000000000, v27);
LABEL_22:
  a6 = v25;
  v32 = objc_msgSend((id)a2, "objectsInEntity:predicate:sortDescriptors:", kMTEpisodeEntityName, v25, 0, a5);
  if (!v32)
  {

    goto LABEL_39;
  }
  v33 = v32;
  v34 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
  a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v34);

  if ((unint64_t)a2 >> 62)
  {
LABEL_34:
    if (a2 < 0)
      v40 = a2;
    else
      v40 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v41 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(a2);
    if (v41)
      goto LABEL_25;
LABEL_38:
    swift_bridgeObjectRelease(a2);

    goto LABEL_39;
  }
  if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_38;
LABEL_25:
  if ((a2 & 0xC000000000000001) != 0)
  {
    v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    goto LABEL_28;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v35 = *(id *)(a2 + 32);
LABEL_28:
    v36 = v35;

    swift_bridgeObjectRelease(a2);
    v37 = objc_opt_self(MTEpisode);
    v38 = swift_dynamicCastObjCClass(v36, v37);
    if (v38)
    {
LABEL_40:
      v39 = *v19;
      *v19 = (void *)v38;
      goto LABEL_41;
    }

LABEL_39:
    v38 = 0;
    goto LABEL_40;
  }
  __break(1u);
}

uint64_t type metadata accessor for URLActionResolver()
{
  return objc_opt_self(_TtC8Podcasts17URLActionResolver);
}

uint64_t sub_10030AD94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  id v32;
  char v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int8 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  int v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  unsigned __int8 v93;
  uint64_t v94;
  int v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  int v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  int v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  _QWORD *v141;
  char *v142;
  char *v143;
  _QWORD *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v2 = type metadata accessor for FlowDestinationPageHeader(0);
  v146 = *(_QWORD *)(v2 - 8);
  v147 = v2;
  __chkstk_darwin();
  v4 = (char *)&v136 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FlowPresentationContext(0);
  v148 = *(_QWORD *)(v5 - 8);
  v149 = v5;
  __chkstk_darwin();
  v140 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v142 = (char *)&v136 - v7;
  __chkstk_darwin();
  v143 = (char *)&v136 - v8;
  __chkstk_darwin();
  v10 = (char *)&v136 - v9;
  __chkstk_darwin();
  v12 = (char *)&v136 - v11;
  v13 = type metadata accessor for FlowDestination(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v139 = (char *)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v141 = (uint64_t *)((char *)&v136 - v16);
  __chkstk_darwin();
  v18 = (char *)&v136 - v17;
  __chkstk_darwin();
  v20 = (char *)&v136 - v19;
  __chkstk_darwin();
  v22 = (char *)&v136 - v21;
  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v24 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1[2];
  if (v25)
  {
    if ((v145 = v24, v26 = a1[4], v27 = a1[5], v26 == 0x7972617262696CLL) && v27 == 0xE700000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0x7972617262696CLL, 0xE700000000000000, 0) & 1) != 0)
    {
      v137 = v4;
      v28 = type metadata accessor for PopToRootAction(0);
      v29 = *(unsigned int *)(v28 + 48);
      v30 = *(unsigned __int16 *)(v28 + 52);
      v136 = v28;
      swift_allocObject(v28, v29, v30);
      v144 = a1;
      v31 = swift_bridgeObjectRetain(a1);
      v138 = PopToRootAction.init(animationBehavior:)(1, v31);
      v32 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
      v33 = UITraitCollection.interfaceMode.getter();

      if ((v33 & 1) != 0)
      {
        if (v25 != 1)
        {
          v68 = v144;
          v69 = v144[6];
          v70 = v144[7];
          v71 = v138;
          if (v69 == 0x73776F6873 && v70 == 0xE500000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x73776F6873, 0xE500000000000000, v144[6], v144[7], 0) & 1) != 0)
          {
            v72 = 1;
          }
          else if (v69 == 0x6465766173 && v70 == 0xE500000000000000
                 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6465766173, 0xE500000000000000, v69, v70, 0) & 1) != 0)
          {
            v72 = 15;
          }
          else if (v69 == 0x64616F6C6E776F64 && v70 == 0xEA00000000006465
                 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x64616F6C6E776F64, 0xEA00000000006465, v69, v70, 0) & 1) != 0)
          {
            v72 = 4;
          }
          else if (v69 == 0x652D74736574616CLL && v70 == 0xEF7365646F736970)
          {
            v72 = 16;
          }
          else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x652D74736574616CLL, 0xEF7365646F736970, v69, v70, 0) & 1) != 0)
          {
            v72 = 16;
          }
          else
          {
            v72 = 17;
          }
          v73 = Link.Presentation.init(rawValue:)(0);
          v74 = v73;
          v75 = v145;
          static ActionMetrics.notInstrumented.getter(v73);
          v76 = type metadata accessor for TabChangeAction(0);
          swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
          v39 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, v72, 0, 1, 0, 0, 0, v74, v75);
          swift_release(v71);
          v67 = v68;
          goto LABEL_29;
        }
        v40 = Link.Presentation.init(rawValue:)(0);
        v41 = v40;
        v42 = v145;
        static ActionMetrics.notInstrumented.getter(v40);
        v43 = type metadata accessor for TabChangeAction(0);
        swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
        v38 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 17, 0, 1, 0, 0, 0, v41, v42);
        goto LABEL_11;
      }
      if (v25 == 1)
      {
        v34 = Link.Presentation.init(rawValue:)(0);
        v35 = v34;
        v36 = v145;
        static ActionMetrics.notInstrumented.getter(v34);
        v37 = type metadata accessor for TabChangeAction(0);
        swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
        v38 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 7, 0, 1, 0, 0, 0, v35, v36);
LABEL_11:
        v39 = v38;
        v44 = v138;
LABEL_23:
        swift_release(v44);
        v67 = v144;
LABEL_29:
        swift_bridgeObjectRelease(v67);
        return v39;
      }
      v45 = v144;
      v46 = v144[6];
      v47 = v144[7];
      if (v46 == 0x73776F6873 && v47 == 0xE500000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x73776F6873, 0xE500000000000000, v144[6], v144[7], 0) & 1) != 0)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v22, enum case for FlowDestination.shows(_:), v13);
        v48 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v148 + 104))(v12, enum case for FlowPresentationContext.showDetail(_:), v149);
        v49 = static Link.Presentation.textFollowsTintColor.getter(v48);
        v50 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
        v51 = Link.Presentation.init(rawValue:)(0);
        v52 = Link.Presentation.init(rawValue:)(v51);
        if (Link.Presentation.init(rawValue:)(v52 & v49) != v49)
          v51 = Link.Presentation.init(rawValue:)(v51 | v49);
        v53 = Link.Presentation.init(rawValue:)(v51);
        v54 = Link.Presentation.init(rawValue:)(v53 & v50);
        v55 = v138;
        if (v54 != v50)
          v51 = Link.Presentation.init(rawValue:)(v51 | v50);
        v56 = v137;
        v57 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v146 + 104))(v137, enum case for FlowDestinationPageHeader.standard(_:), v147);
        v58 = v145;
        static ActionMetrics.notInstrumented.getter(v57);
        v59 = type metadata accessor for FlowAction(0);
        swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
        v60 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v22, 0, 0, 0, 0, v12, 0, v51, v56, v58);
      }
      else
      {
        if (v46 == 0x6465766173 && v47 == 0xE500000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6465766173, 0xE500000000000000, v46, v47, 0) & 1) != 0)
        {
          *(_QWORD *)v20 = 4;
          *(_OWORD *)(v20 + 8) = 0u;
          *(_OWORD *)(v20 + 24) = 0u;
          *(_OWORD *)(v20 + 40) = 0u;
          *((_QWORD *)v20 + 7) = 0;
          v20[64] = 9;
          (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v20, enum case for FlowDestination.episodeList(_:), v13);
          v78 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v148 + 104))(v10, enum case for FlowPresentationContext.showDetail(_:), v149);
          v79 = static Link.Presentation.textFollowsTintColor.getter(v78);
          v80 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
          v81 = Link.Presentation.init(rawValue:)(0);
          v82 = Link.Presentation.init(rawValue:)(v81);
          if (Link.Presentation.init(rawValue:)(v82 & v79) != v79)
            v81 = Link.Presentation.init(rawValue:)(v81 | v79);
          v83 = Link.Presentation.init(rawValue:)(v81);
          if (Link.Presentation.init(rawValue:)(v83 & v80) != v80)
            v81 = Link.Presentation.init(rawValue:)(v81 | v80);
          v84 = v137;
          v85 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v146 + 104))(v137, enum case for FlowDestinationPageHeader.standard(_:), v147);
          v58 = v145;
          static ActionMetrics.notInstrumented.getter(v85);
          v59 = type metadata accessor for FlowAction(0);
          swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
          v61 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v20, 0, 0, 0, 0, v10, 0, v81, v84, v58);
          v86 = sub_10003F544(&qword_1005612A0);
          v63 = swift_allocObject(v86, 112, 7);
          *(_OWORD *)(v63 + 16) = xmmword_1003CA220;
          *(_QWORD *)(v63 + 56) = v136;
          *(_QWORD *)(v63 + 64) = sub_100026844(&qword_1005632E8, (uint64_t (*)(uint64_t))&type metadata accessor for PopToRootAction, (uint64_t)&protocol conformance descriptor for Action);
          v55 = v138;
          goto LABEL_21;
        }
        if (v46 == 0x64616F6C6E776F64 && v47 == 0xEA00000000006465
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x64616F6C6E776F64, 0xEA00000000006465, v46, v47, 0) & 1) != 0)
        {
          *((_OWORD *)v18 + 2) = 0u;
          *((_OWORD *)v18 + 3) = 0u;
          *(_OWORD *)v18 = 0u;
          *((_OWORD *)v18 + 1) = 0u;
          v18[64] = 9;
          (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v18, enum case for FlowDestination.episodeList(_:), v13);
          v87 = v143;
          v88 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v148 + 104))(v143, enum case for FlowPresentationContext.showDetail(_:), v149);
          v89 = static Link.Presentation.textFollowsTintColor.getter(v88);
          v90 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
          v91 = Link.Presentation.init(rawValue:)(0);
          v92 = Link.Presentation.init(rawValue:)(v91);
          v93 = Link.Presentation.init(rawValue:)(v92 & v89);
          v94 = v138;
          if (v93 != v89)
            v91 = Link.Presentation.init(rawValue:)(v91 | v89);
          v95 = Link.Presentation.init(rawValue:)(v91);
          if (Link.Presentation.init(rawValue:)(v95 & v90) != v90)
            v91 = Link.Presentation.init(rawValue:)(v91 | v90);
          v96 = v137;
          v97 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v146 + 104))(v137, enum case for FlowDestinationPageHeader.standard(_:), v147);
          v98 = v145;
          static ActionMetrics.notInstrumented.getter(v97);
          v99 = type metadata accessor for FlowAction(0);
          swift_allocObject(v99, *(unsigned int *)(v99 + 48), *(unsigned __int16 *)(v99 + 52));
          v100 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v18, 0, 0, 0, 0, v87, 0, v91, v96, v98);
          v101 = sub_10003F544(&qword_1005612A0);
          v102 = swift_allocObject(v101, 112, 7);
          *(_OWORD *)(v102 + 16) = xmmword_1003CA220;
          *(_QWORD *)(v102 + 56) = v136;
          *(_QWORD *)(v102 + 64) = sub_100026844(&qword_1005632E8, (uint64_t (*)(uint64_t))&type metadata accessor for PopToRootAction, (uint64_t)&protocol conformance descriptor for Action);
          *(_QWORD *)(v102 + 32) = v94;
          *(_QWORD *)(v102 + 96) = v99;
          *(_QWORD *)(v102 + 104) = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
          *(_QWORD *)(v102 + 72) = v100;
          swift_retain();
          swift_retain();
          v103 = Link.Presentation.init(rawValue:)(0);
          v104 = v103;
          static ActionMetrics.notInstrumented.getter(v103);
          v105 = type metadata accessor for TabChangeAction(0);
          swift_allocObject(v105, *(unsigned int *)(v105 + 48), *(unsigned __int16 *)(v105 + 52));
          LOBYTE(v134) = v104;
          v39 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 7, v102, 0, 0, 0, 0, v134, v98);
          swift_release(v100);
          v44 = v94;
          goto LABEL_23;
        }
        v55 = v138;
        if ((v46 != 0x652D74736574616CLL || v47 != 0xEF7365646F736970)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(0x652D74736574616CLL, 0xEF7365646F736970, v46, v47, 0) & 1) == 0)
        {
          if ((v46 != 0xD000000000000010 || v47 != 0x800000010043CA40)
            && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010043CA40, v46, v47, 0) & 1) == 0)
          {
            swift_release(v55);
            swift_bridgeObjectRelease(v45);
            return 0;
          }
          v116 = sub_10003F544(&qword_1005612A0);
          v117 = swift_allocObject(v116, 112, 7);
          *(_OWORD *)(v117 + 16) = xmmword_1003CA220;
          *(_QWORD *)(v117 + 56) = v136;
          *(_QWORD *)(v117 + 64) = sub_100026844(&qword_1005632E8, (uint64_t (*)(uint64_t))&type metadata accessor for PopToRootAction, (uint64_t)&protocol conformance descriptor for Action);
          *(_QWORD *)(v117 + 32) = v55;
          v118 = v139;
          (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v139, enum case for FlowDestination.recentlyUpdated(_:), v13);
          v119 = v140;
          (*(void (**)(char *, _QWORD, uint64_t))(v148 + 104))(v140, enum case for FlowPresentationContext.showDetail(_:), v149);
          swift_retain();
          v121 = static Link.Presentation.textFollowsTintColor.getter(v120);
          v122 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
          v123 = Link.Presentation.init(rawValue:)(0);
          v124 = Link.Presentation.init(rawValue:)(v123);
          if (Link.Presentation.init(rawValue:)(v124 & v121) != v121)
            v123 = Link.Presentation.init(rawValue:)(v123 | v121);
          v125 = Link.Presentation.init(rawValue:)(v123);
          if (Link.Presentation.init(rawValue:)(v125 & v122) != v122)
            v123 = Link.Presentation.init(rawValue:)(v123 | v122);
          v126 = v137;
          v127 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v146 + 104))(v137, enum case for FlowDestinationPageHeader.standard(_:), v147);
          v128 = v145;
          static ActionMetrics.notInstrumented.getter(v127);
          v129 = type metadata accessor for FlowAction(0);
          swift_allocObject(v129, *(unsigned int *)(v129 + 48), *(unsigned __int16 *)(v129 + 52));
          v130 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v118, 0, 0, 0, 0, v119, 0, v123, v126, v128);
          *(_QWORD *)(v117 + 96) = v129;
          *(_QWORD *)(v117 + 104) = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
          *(_QWORD *)(v117 + 72) = v130;
          v131 = Link.Presentation.init(rawValue:)(0);
          LOBYTE(v130) = v131;
          static ActionMetrics.notInstrumented.getter(v131);
          v132 = type metadata accessor for TabChangeAction(0);
          swift_allocObject(v132, *(unsigned int *)(v132 + 48), *(unsigned __int16 *)(v132 + 52));
          LOBYTE(v135) = v130;
          v39 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 7, v117, 0, 0, 0, 0, v135, v128);
          goto LABEL_22;
        }
        v106 = v141;
        *v141 = 3;
        *(_OWORD *)(v106 + 1) = 0u;
        *(_OWORD *)(v106 + 3) = 0u;
        *(_OWORD *)(v106 + 5) = 0u;
        v106[7] = 0;
        *((_BYTE *)v106 + 64) = 9;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v106, enum case for FlowDestination.episodeList(_:), v13);
        v107 = v142;
        v108 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v148 + 104))(v142, enum case for FlowPresentationContext.showDetail(_:), v149);
        v109 = static Link.Presentation.textFollowsTintColor.getter(v108);
        v110 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
        v111 = Link.Presentation.init(rawValue:)(0);
        v112 = Link.Presentation.init(rawValue:)(v111);
        if (Link.Presentation.init(rawValue:)(v112 & v109) != v109)
          v111 = Link.Presentation.init(rawValue:)(v111 | v109);
        v113 = Link.Presentation.init(rawValue:)(v111);
        if (Link.Presentation.init(rawValue:)(v113 & v110) != v110)
          v111 = Link.Presentation.init(rawValue:)(v111 | v110);
        v114 = v137;
        v115 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v146 + 104))(v137, enum case for FlowDestinationPageHeader.standard(_:), v147);
        v58 = v145;
        static ActionMetrics.notInstrumented.getter(v115);
        v59 = type metadata accessor for FlowAction(0);
        swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
        v60 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v106, 0, 0, 0, 0, v107, 0, v111, v114, v58);
      }
      v61 = v60;
      v62 = sub_10003F544(&qword_1005612A0);
      v63 = swift_allocObject(v62, 112, 7);
      *(_OWORD *)(v63 + 16) = xmmword_1003CA220;
      *(_QWORD *)(v63 + 56) = v136;
      *(_QWORD *)(v63 + 64) = sub_100026844(&qword_1005632E8, (uint64_t (*)(uint64_t))&type metadata accessor for PopToRootAction, (uint64_t)&protocol conformance descriptor for Action);
LABEL_21:
      *(_QWORD *)(v63 + 32) = v55;
      *(_QWORD *)(v63 + 96) = v59;
      *(_QWORD *)(v63 + 104) = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
      *(_QWORD *)(v63 + 72) = v61;
      swift_retain();
      swift_retain();
      v64 = Link.Presentation.init(rawValue:)(0);
      v65 = v64;
      static ActionMetrics.notInstrumented.getter(v64);
      v66 = type metadata accessor for TabChangeAction(0);
      swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
      LOBYTE(v133) = v65;
      v39 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 7, v63, 0, 0, 0, 0, v133, v58);
      swift_release(v61);
LABEL_22:
      v44 = v55;
      goto LABEL_23;
    }
  }
  return 0;
}

uint64_t sub_10030BE28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  unint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  __n128 v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  _QWORD *v49;

  v2 = type metadata accessor for URL(0);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  __chkstk_darwin();
  v47 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ActionMetrics(0);
  v4 = __chkstk_darwin();
  v48 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = a1;
  v6 = URL.pathComponents.getter(v4);
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v9 = (_QWORD *)(v6 + 40);
    v10 = _swiftEmptyArrayStorage;
    do
    {
      v14 = *(v9 - 1);
      v15 = *v9;
      v16 = v14 == 47 && v15 == 0xE100000000000000;
      if (!v16
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*(v9 - 1), *v9, 47, 0xE100000000000000, 0) & 1) == 0)
      {
        swift_bridgeObjectRetain(v15);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
        v49 = v10;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100048628(0, v10[2] + 1, 1);
          v10 = v49;
        }
        v12 = v10[2];
        v11 = v10[3];
        if (v12 >= v11 >> 1)
        {
          sub_100048628(v11 > 1, v12 + 1, 1);
          v10 = v49;
        }
        v10[2] = v12 + 1;
        v13 = &v10[2 * v12];
        v13[4] = v14;
        v13[5] = v15;
      }
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  else
  {
    v10 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v7);
  v18 = v10[2];
  if (v18)
  {
    v20 = v10[4];
    v19 = v10[5];
    v21 = v20 == 0x6573776F7262 && v19 == 0xE600000000000000;
    if (!v21
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6573776F7262, 0xE600000000000000, v10[4], v10[5], 0) & 1) == 0)
    {
      v22 = v20 == 0x676F6C61746163 && v19 == 0xE700000000000000;
      if (!v22
        && (_stringCompareWithSmolCheck(_:_:expecting:)(0x676F6C61746163, 0xE700000000000000, v20, v19, 0) & 1) == 0)
      {
        if (v20 == 1701670760 && v19 == 0xE400000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)(1701670760, 0xE400000000000000, v20, v19, 0) & 1) != 0
          || v20 == 0x6E2D6E657473696CLL && v19 == 0xEA0000000000776FLL
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E2D6E657473696CLL, 0xEA0000000000776FLL, v20, v19, 0) & 1) != 0)
        {
          swift_release(v10);
          v30 = Link.Presentation.init(rawValue:)(0);
          v31 = v30;
          v32 = v48;
          static ActionMetrics.notInstrumented.getter(v30);
          v33 = type metadata accessor for TabChangeAction(0);
          swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
          return TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 8, 0, 1, 0, 0, 0, v31, v32);
        }
        else
        {
          if (v20 == 0x7972617262696CLL && v19 == 0xE700000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7972617262696CLL, 0xE700000000000000, v20, v19, 0) & 1) != 0)
          {
            v27 = sub_10030AD94(v10);
            goto LABEL_28;
          }
          swift_bridgeObjectRetain(v19);
          swift_release(v10);
          if (v20 == 0x686372616573 && v19 == 0xE600000000000000)
          {
            v35 = 0xE600000000000000;
          }
          else
          {
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x686372616573, 0xE600000000000000, v20, v19, 0) & 1) == 0)
            {
              if (v20 == 0x687475616FLL && v19 == 0xE500000000000000)
              {
                v40 = swift_bridgeObjectRelease(0xE500000000000000);
              }
              else
              {
                v41 = _stringCompareWithSmolCheck(_:_:expecting:)(0x687475616FLL, 0xE500000000000000, v20, v19, 0);
                v40 = swift_bridgeObjectRelease(v19);
                if ((v41 & 1) == 0)
                  return 0;
              }
              v42 = v47;
              (*(void (**)(char *, uint64_t, uint64_t, __n128))(v44 + 16))(v47, v46, v45, v40);
              v43 = type metadata accessor for ResumeOAuthAction(0);
              swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
              return ResumeOAuthAction.init(redirectURL:)(v42);
            }
            v35 = v19;
          }
          swift_bridgeObjectRelease(v35);
          v36 = Link.Presentation.init(rawValue:)(0);
          v37 = v36;
          v38 = v48;
          static ActionMetrics.notInstrumented.getter(v36);
          v39 = type metadata accessor for TabChangeAction(0);
          swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
          return TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 12, 0, 1, 0, 0, 0, v37, v38);
        }
      }
    }
  }
  if (v18 != (v18 != 0))
  {
    swift_release(v10);
    return 0;
  }
  v23 = Link.Presentation.init(rawValue:)(0);
  v24 = v23;
  v25 = v48;
  static ActionMetrics.notInstrumented.getter(v23);
  v26 = type metadata accessor for TabChangeAction(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 9, 0, 1, 0, 0, 0, v24, v25);
LABEL_28:
  v28 = v27;
  swift_release(v10);
  return v28;
}

BOOL sub_10030C398(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::String v14;
  _BOOL8 result;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  char *v44;
  _QWORD v45[2];
  _QWORD v46[2];
  __int128 v47[2];

  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v4 = (char *)&v45[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin();
  v9 = (char *)&v45[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = URL.absoluteString.getter(v7);
  v12 = v11;
  v13 = String.count.getter(0x74736163646F70, 0xE700000000000000);
  v14._countAndFlagsBits = 0x3A74736163646F70;
  v14._object = (void *)0xEC00000070747468;
  result = String.hasPrefix(_:)(v14);
  if (result)
  {
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      return result;
    }
    v16 = String.index(_:offsetBy:)(15, v13 + 1, v10, v12);
    v17 = sub_10030A354(v16, v10, v12);
    v19 = v18;
    v44 = v4;
    v20 = v13;
    v21 = v6;
    v22 = v5;
    v23 = a2;
    v24 = v9;
    v26 = v25;
    v28 = v27;
    swift_bridgeObjectRelease(v12);
    v29 = v26;
    v9 = v24;
    a2 = v23;
    v5 = v22;
    v6 = v21;
    v13 = v20;
    v4 = v44;
    v10 = static String._fromSubstring(_:)(v17, v19, v29, v28);
    v12 = v30;
    swift_bridgeObjectRelease(v28);
  }
  v31._countAndFlagsBits = 0x74736163646F70;
  v31._object = (void *)0xE700000000000000;
  if (String.hasPrefix(_:)(v31))
  {
    v32 = String.index(_:offsetBy:)(15, v13, v10, v12);
    *(_QWORD *)&v47[0] = v10;
    *((_QWORD *)&v47[0] + 1) = v12;
    v46[0] = 0x74736163646F70;
    v46[1] = 0xE700000000000000;
    v45[0] = 1886680168;
    v45[1] = 0xE400000000000000;
    v33 = sub_10016D37C();
    v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v46, v45, 8, 15, v32, 0, &type metadata for String, &type metadata for String, &type metadata for String, v33, v33, v33);
    v35 = v34;
    swift_bridgeObjectRelease(v12);
    v12 = v35;
  }
  URL.init(string:)(v10, v12);
  v36 = swift_bridgeObjectRelease(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v6 + 48))(v4, 1, v5, v36) == 1)
  {
    sub_100007A28((uint64_t)v4, (uint64_t *)&unk_100553DC0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    v38 = type metadata accessor for TextFieldAction(0);
    v39 = URL.absoluteString.getter(v38);
    v41 = v40;
    sub_10000A520(a2, (uint64_t)v47);
    v42 = swift_allocObject(&unk_1004C1DC8, 56, 7);
    sub_10002099C(v47, v42 + 16);
    v37 = static TextFieldAction.subscribeByURLAction(textFieldContent:okClosure:)(v39, v41, sub_10030F8B0, v42);
    swift_bridgeObjectRelease(v41);
    v43 = swift_release(v42);
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v9, v5, v43);
  }
  return v37;
}

void sub_10030C6F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  _QWORD aBlock[5];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(type metadata accessor for PodcastsURLEpisodeParameters(0) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin();
  v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = 0;
  v20 = 0;
  v5 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v6 = objc_msgSend(v5, "mainOrPrivateContext");

  sub_10030F8B8(a1, (uint64_t)v4);
  v7 = *(unsigned __int8 *)(v2 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = (v3 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_1004C1E68, v11 + 8, v7 | 7);
  sub_1002D5FBC((uint64_t)v4, v12 + v8);
  *(_QWORD *)(v12 + v9) = &v20;
  *(_QWORD *)(v12 + v10) = &v19;
  *(_QWORD *)(v12 + v11) = v6;
  v13 = swift_allocObject(&unk_1004C1E90, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_10030FA54;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_1001529CC;
  v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004C1EA8;
  v14 = _Block_copy(aBlock);
  v15 = v18;
  v16 = v6;
  swift_retain();
  objc_msgSend(v16, "performBlockAndWait:", v14, swift_release(v15).n128_f64[0]);

  _Block_release(v14);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v13, "", 87, 391, 32, 1);
  swift_release(v13);
  if ((v16 & 1) != 0)
    __break(1u);
  else
    swift_release(v12);
}

void sub_10030C900(void *a1, void *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  __n128 v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t);
  char *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned __int8 v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  double (*v40)();
  uint64_t v41;
  uint64_t (*v42)();
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  char isEscapingClosureAtFileLocation;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  id v57;
  void **aBlock;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  void *v61;
  uint64_t (*v62)();
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v57 = a1;
  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FlowDestinationPageHeader(0);
  v56 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FlowPresentationContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FlowDestination(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = 0;
  v66 = 0;
  if (a2)
  {
    v54 = v5;
    v55 = v11;
    v16 = a2;
    v17 = objc_msgSend(v16, "managedObjectContext");
    if (v17)
    {
      v18 = v17;
      v51 = v7;
      v52 = v4;
      v19 = swift_allocObject(&unk_1004C1F58, 32, 7);
      *(_QWORD *)(v19 + 16) = &v65;
      *(_QWORD *)(v19 + 24) = v16;
      v20 = swift_allocObject(&unk_1004C1F80, 32, 7);
      *(_QWORD *)(v20 + 16) = sub_10030FAF8;
      *(_QWORD *)(v20 + 24) = v19;
      v53 = v19;
      v62 = sub_1001529CC;
      v63 = v20;
      aBlock = _NSConcreteStackBlock;
      v59 = 1107296256;
      v60 = sub_100029B1C;
      v61 = &unk_1004C1F98;
      v21 = _Block_copy(&aBlock);
      v22 = v63;
      v23 = v16;
      swift_retain();
      objc_msgSend(v18, "performBlockAndWait:", v21, swift_release(v22).n128_f64[0]);

      _Block_release(v21);
      LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v20, "", 87, 302, 36, 1);
      v24 = swift_release(v20);
      if ((v21 & 1) != 0)
        goto LABEL_19;
      v25 = v66;
      v64 = 0;
      if (v66)
      {
        *(_QWORD *)v15 = v65;
        *((_QWORD *)v15 + 1) = v25;
        *((_QWORD *)v15 + 3) = 0;
        *((_QWORD *)v15 + 4) = 0;
        *((_QWORD *)v15 + 2) = 0;
        v15[40] = 1;
        *((_QWORD *)v15 + 6) = 0;
        v15[56] = 1;
        (*(void (**)(char *, _QWORD, uint64_t, __n128))(v13 + 104))(v15, enum case for FlowDestination.episodeDetails(_:), v12, v24);
        v26 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
        v27 = v55;
        v26(v55, enum case for FlowPresentationContext.pushDetail(_:), v8);
        swift_bridgeObjectRetain(v25);
        v29 = static Link.Presentation.textFollowsTintColor.getter(v28);
        v30 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
        v31 = Link.Presentation.init(rawValue:)(0);
        v32 = Link.Presentation.init(rawValue:)(v31);
        if (Link.Presentation.init(rawValue:)(v32 & v29) != v29)
          v31 = Link.Presentation.init(rawValue:)(v31 | v29);
        v33 = Link.Presentation.init(rawValue:)(v31);
        v34 = Link.Presentation.init(rawValue:)(v33 & v30);
        v35 = v52;
        v36 = v54;
        if (v34 != v30)
          v31 = Link.Presentation.init(rawValue:)(v31 | v30);
        v37 = v51;
        v38 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v56 + 104))(v51, enum case for FlowDestinationPageHeader.standard(_:), v36);
        static ActionMetrics.notInstrumented.getter(v38);
        v39 = type metadata accessor for FlowAction(0);
        swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
        FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v15, 0, 0, 0, 0, v27, 0, v31, v37, v35);
        swift_release(v64);
        v40 = 0;
        v41 = 0;
        v42 = sub_10030FAF8;
        v43 = v53;
        goto LABEL_17;
      }
      v42 = sub_10030FAF8;
      v43 = v53;
    }
    else
    {

      v43 = 0;
      v42 = 0;
      v64 = 0;
    }
  }
  else
  {
    v43 = 0;
    v42 = 0;
    v64 = 0;
  }
  v44 = v57;
  v45 = objc_msgSend(v57, "managedObjectContext");
  if (!v45)
  {
    v40 = 0;
    v41 = 0;
    goto LABEL_17;
  }
  v41 = swift_allocObject(&unk_1004C1EE0, 32, 7);
  *(_QWORD *)(v41 + 16) = &v64;
  *(_QWORD *)(v41 + 24) = v44;
  v46 = swift_allocObject(&unk_1004C1F08, 32, 7);
  *(_QWORD *)(v46 + 16) = sub_10030FAE0;
  *(_QWORD *)(v46 + 24) = v41;
  v62 = sub_1001529CC;
  v63 = v46;
  aBlock = _NSConcreteStackBlock;
  v59 = 1107296256;
  v60 = sub_100029B1C;
  v61 = &unk_1004C1F20;
  v47 = _Block_copy(&aBlock);
  v48 = v63;
  v49 = v44;
  swift_retain();
  objc_msgSend(v45, "performBlockAndWait:", v47, swift_release(v48).n128_f64[0]);

  _Block_release(v47);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v46, "", 87, 312, 58, 1);
  swift_release(v46);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v40 = sub_10030FAE0;
LABEL_17:
    swift_bridgeObjectRelease(v66);
    sub_10002CA30((uint64_t)v42, v43);
    sub_10002CA30((uint64_t)v40, v41);
    return;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t sub_10030CE58(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;

  v54 = a3;
  v55 = a1;
  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v53 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FlowDestinationPageHeader(0);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  __chkstk_darwin();
  v52 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for FlowPresentationContext(0);
  v9 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin();
  v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FlowDestination(0);
  __chkstk_darwin();
  v48 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v56 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v18 = (char *)&v47 - v17;
  __chkstk_darwin();
  v20 = (char *)&v47 - v19;
  __chkstk_darwin();
  v22 = (char *)&v47 - v21;
  v23 = 0;
  if ((a2 & 1) == 0)
  {
    if ((a4 & 1) != 0
      || (v24 = (void *)objc_opt_self(MTStoreIdentifier),
          !objc_msgSend(v24, "isNotEmpty:", v54)))
    {
      v29 = (void *)objc_opt_self(MTPodcast);
      v30 = objc_msgSend(v29, "productURLForStoreCollectionId:storeTrackId:", v55, 0);
      if (v30)
      {
        v31 = v30;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v30);

        v32 = 0;
      }
      else
      {
        v32 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v18, v32, 1, v12);
      v20 = v18;
    }
    else
    {
      v25 = (void *)objc_opt_self(MTPodcast);
      v26 = objc_msgSend(v25, "productURLForStoreCollectionId:storeTrackId:", v55, v54);
      if (v26)
      {
        v27 = v26;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

        v28 = 0;
      }
      else
      {
        v28 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v20, v28, 1, v12);
    }
    sub_10003DC78((uint64_t)v20, (uint64_t)v22, (uint64_t *)&unk_100553DC0);
    sub_100007A64((uint64_t)v22, (uint64_t)v16, (uint64_t *)&unk_100553DC0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12) == 1)
    {
      sub_100007A28((uint64_t)v22, (uint64_t *)&unk_100553DC0);
      sub_100007A28((uint64_t)v16, (uint64_t *)&unk_100553DC0);
      return 0;
    }
    else
    {
      v33 = v56;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v56, v16, v12);
      v34 = v48;
      static FlowDestination.page(_:)(v33);
      v35 = v51;
      v36 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v51, enum case for FlowPresentationContext.infer(_:), v47);
      v37 = static Link.Presentation.textFollowsTintColor.getter(v36);
      v38 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
      v39 = Link.Presentation.init(rawValue:)(0);
      v40 = Link.Presentation.init(rawValue:)(v39);
      if (Link.Presentation.init(rawValue:)(v40 & v37) != v37)
        v39 = Link.Presentation.init(rawValue:)(v39 | v37);
      v41 = Link.Presentation.init(rawValue:)(v39);
      if (Link.Presentation.init(rawValue:)(v41 & v38) != v38)
        v39 = Link.Presentation.init(rawValue:)(v39 | v38);
      v42 = v52;
      v43 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v49 + 104))(v52, enum case for FlowDestinationPageHeader.standard(_:), v50);
      v44 = v53;
      static ActionMetrics.notInstrumented.getter(v43);
      v45 = type metadata accessor for FlowAction(0);
      swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
      v23 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v34, 0, 0, 0, 0, v35, 0, v39, v42, v44);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
      sub_100007A28((uint64_t)v22, (uint64_t *)&unk_100553DC0);
    }
  }
  return v23;
}

uint64_t sub_10030D2E8(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;

  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PodcastsURLEpisodeParameters(0);
  __chkstk_darwin();
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10030F8B8(a1 + OBJC_IVAR____TtC8Podcasts25PodcastsURLEpisodeCommand_episodeParameters, (uint64_t)v5);
  sub_10030C6F4((uint64_t)v5);
  v7 = v6;
  v9 = v8;
  if (v6)
  {
    v10 = v6;
    sub_10030C900(v10, v9);
    v12 = v11;
    sub_100005EC8(0, (unint64_t *)&qword_100561290, UITraitCollection_ptr);
    v13 = static UITraitCollection.interfaceMode.getter();
    v14 = InterfaceMode.rawValue.getter(v13 & 1);
    v16 = v15;
    v18 = InterfaceMode.rawValue.getter(1);
    v19 = v17;
    if (v14 == v18 && v16 == v17)
    {

      swift_bridgeObjectRelease_n(v16, 2);
      v20 = 1;
      if (!v12)
        goto LABEL_12;
    }
    else
    {
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v18, v17, 0);

      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v19);
      if ((v29 & 1) != 0)
        v20 = 1;
      else
        v20 = 7;
      if (!v12)
        goto LABEL_12;
    }
  }
  else
  {
    v12 = sub_10030CE58(*((_QWORD *)v5 + 4), v5[40], *((_QWORD *)v5 + 6), v5[56]);
    v20 = 10;
    if (!v12)
    {
LABEL_12:

      sub_100175988(v20);
      sub_10030F8FC((uint64_t)v5);
      return 0;
    }
  }
  v21 = sub_10003F544(&qword_1005612A0);
  v22 = swift_allocObject(v21, 112, 7);
  *(_OWORD *)(v22 + 16) = xmmword_1003CA220;
  v23 = type metadata accessor for PopToRootAction(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = swift_retain();
  v25 = PopToRootAction.init(animationBehavior:)(1, v24);
  *(_QWORD *)(v22 + 56) = v23;
  *(_QWORD *)(v22 + 64) = sub_100026844(&qword_1005632E8, (uint64_t (*)(uint64_t))&type metadata accessor for PopToRootAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v22 + 32) = v25;
  *(_QWORD *)(v22 + 96) = type metadata accessor for FlowAction(0);
  *(_QWORD *)(v22 + 104) = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v22 + 72) = v12;
  swift_retain();
  v26 = Link.Presentation.init(rawValue:)(0);
  LOBYTE(v25) = v26;
  static ActionMetrics.notInstrumented.getter(v26);
  v27 = type metadata accessor for TabChangeAction(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, v20, v22, 0, 0, 0, 0, (_BYTE)v25, v3);
  swift_release_n(v12, 2);

  sub_10030F8FC((uint64_t)v5);
  return v28;
}

void sub_10030D5FC(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t (*v28)();
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  id v43;
  char *v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t aBlock;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;

  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_10055B790);
  __chkstk_darwin();
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v40 - v8;
  type metadata accessor for PodcastsURLEpisodeParameters(0);
  __chkstk_darwin();
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10030F8B8(a1 + OBJC_IVAR____TtC8Podcasts25PodcastsURLEpisodeCommand_episodeParameters, (uint64_t)v11);
  sub_10030C6F4((uint64_t)v11);
  v14 = v13;
  v15 = v12;
  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 1;
  if (!v12)
    goto LABEL_9;
  v16 = v12;
  v17 = objc_msgSend(v16, "managedObjectContext");
  if (!v17)
  {

LABEL_9:
    v19 = 0;
    v28 = 0;
    goto LABEL_10;
  }
  v18 = v17;
  v42 = a2;
  v43 = v14;
  v44 = v5;
  v19 = (_QWORD *)swift_allocObject(&unk_1004C1DF0, 40, 7);
  v19[2] = &v47;
  v19[3] = v16;
  v19[4] = &v45;
  v20 = swift_allocObject(&unk_1004C1E18, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_10030F95C;
  *(_QWORD *)(v20 + 24) = v19;
  *((_QWORD *)&v51 + 1) = sub_100029B3C;
  *(_QWORD *)&v52 = v20;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  *(_QWORD *)&v50 = 1107296256;
  *((_QWORD *)&v50 + 1) = sub_100029B1C;
  *(_QWORD *)&v51 = &unk_1004C1E30;
  v21 = _Block_copy(&aBlock);
  v22 = v52;
  v23 = v16;
  swift_retain();
  objc_msgSend(v18, "performBlockAndWait:", v21, swift_release(v22).n128_f64[0]);

  _Block_release(v21);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v20, "", 87, 351, 36, 1);
  swift_release(v20);
  if ((v22 & 1) == 0)
  {
    v24 = v48;
    if (v48)
    {
      v41 = v47;
      v25 = type metadata accessor for EpisodeListSettings(0);
      v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
      v26(v9, 1, 1, v25);
      v27 = v11[58];
      if (v27 != 2 && (v27 & 1) != 0)
      {
        aBlock = 1;
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0;
        v54 = 5;
        swift_bridgeObjectRetain(v24);
        EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(&aBlock, 17, 3, 0, 0, 0);
        sub_100007A28((uint64_t)v9, &qword_10055B790);
        v26(v7, 0, 1, v25);
        sub_10003DC78((uint64_t)v7, (uint64_t)v9, &qword_10055B790);
      }
      else
      {
        swift_bridgeObjectRetain(v24);
      }
      v34 = v45;
      v35 = v46;
      v36 = sub_100007A64((uint64_t)v9, (uint64_t)v7, &qword_10055B790);
      v37 = v11[57];
      v38 = v44;
      static ActionMetrics.notInstrumented.getter(v36);
      v39 = type metadata accessor for LibraryPlayAction(0);
      swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
      LibraryPlayAction.init(episodeUuid:episodeAdamId:channelAdamId:settings:showPlayerIfPlaying:forcePlay:title:timestamp:actionMetrics:)(v41, v24, v34, v35, 0, 1, v7, v42, v37, 0, 0, 0, 1, v38);

      sub_100007A28((uint64_t)v9, &qword_10055B790);
      sub_10030F8FC((uint64_t)v11);
      v28 = sub_10030F95C;
      goto LABEL_19;
    }
    v28 = sub_10030F95C;
    v14 = v43;
    v5 = v44;
LABEL_10:
    if (v11[56] == 1)
    {
      sub_10030F8FC((uint64_t)v11);

    }
    else
    {
      v29 = *((_QWORD *)v11 + 6);
      if (objc_msgSend((id)objc_opt_self(MTStoreIdentifier), "isNotEmpty:", v29))
      {
        v30 = AdamID.init(rawValue:)(v29 & ~(v29 >> 63));
        v31 = v14;
        v32 = v30;
        static ActionMetrics.notInstrumented.getter(v30);
        v33 = type metadata accessor for StoreEpisodePlayAction(0);
        swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
        StoreEpisodePlayAction.init(episodeId:actionMetrics:)(v32, v5);

      }
      else
      {

      }
      sub_10030F8FC((uint64_t)v11);
    }
LABEL_19:
    swift_bridgeObjectRelease(v48);
    sub_10002CA30((uint64_t)v28, (uint64_t)v19);
    return;
  }
  __break(1u);
}

uint64_t sub_10030DAE0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v1 = (char *)&v35 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PodcastsURLScheme();
  v2 = sub_100328A54();
  if (v2)
  {
    v3 = v2;
    v4 = type metadata accessor for PodcastsURLNowPlayingCommand();
    if (swift_dynamicCastClass(v3, v4))
    {
      v5 = type metadata accessor for PresentNowPlayingAction(0);
      swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
      v6 = PresentNowPlayingAction.init()();
LABEL_11:
      v7 = v6;
LABEL_12:
      swift_release(v3);
      return v7;
    }
    v8 = type metadata accessor for PodcastsURLBrowseCommand();
    if (swift_dynamicCastClass(v3, v8))
    {
      v9 = Link.Presentation.init(rawValue:)(0);
      v10 = v9;
      static ActionMetrics.notInstrumented.getter(v9);
      v11 = type metadata accessor for TabChangeAction(0);
      swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      v6 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 9, 0, 1, 0, 0, 0, v10, v1);
      goto LABEL_11;
    }
    v12 = type metadata accessor for PodcastsURLShowCommand(0);
    v13 = swift_dynamicCastClass(v3, v12);
    if (v13)
    {
      v6 = sub_10030D2E8(v13);
      goto LABEL_11;
    }
    v14 = type metadata accessor for PodcastsURLPlayCommand(0);
    v15 = swift_dynamicCastClass(v3, v14);
    if (v15)
    {
      sub_10030D5FC(v15, 2u);
      goto LABEL_11;
    }
    v17 = type metadata accessor for PodcastsURLShowAndPlayCommand(0);
    v7 = swift_dynamicCastClass(v3, v17);
    if (!v7)
      goto LABEL_12;
    swift_retain();
    v18 = sub_10030D2E8(v7);
    sub_10030D5FC(v7, 0);
    v20 = v19;
    v36 = (uint64_t)_swiftEmptyArrayStorage;
    if (v18)
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      v22 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v23 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v22 >= v23 >> 1)
      {
        v35 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v22 + 1, 1);
        v22 = v35;
      }
      v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v18);
      specialized Array._endMutation()(v24);
    }
    if (v20)
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      v26 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v27 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v26 >= v27 >> 1)
      {
        v35 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v26 + 1, 1);
        v26 = v35;
      }
      v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v20);
      specialized Array._endMutation()(v28);
    }
    v29 = v36;
    swift_release(v20);
    v30 = swift_release(v18);
    if ((unint64_t)v29 >> 62)
    {
      if (v29 < 0)
        v33 = v29;
      else
        v33 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v29);
      v34 = _CocoaArrayWrapper.endIndex.getter(v33);
      v30 = swift_bridgeObjectRelease(v29);
      if (v34)
        goto LABEL_25;
    }
    else if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_25:
      type metadata accessor for CompoundAction(0, v30);
      v31 = sub_100179264(v29);
      v32 = swift_bridgeObjectRelease(v29);
      v7 = CompoundAction.__allocating_init(actions:)(v31, v32);
      swift_release_n(v3, 2);
      return v7;
    }
    swift_bridgeObjectRelease(v29);
    swift_release_n(v3, 2);
    return 0;
  }
  return 0;
}

void sub_10030DE08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  char v44;
  id v45;
  uint64_t v46;
  uint64_t (*v47)(char *, _QWORD, uint64_t);
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned __int8 v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  __n128 v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  id v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  id v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  id v105;
  _QWORD aBlock[5];
  uint64_t v107;
  id v108;
  id v109;

  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v103 = (char *)&v87 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = type metadata accessor for FlowDestinationPageHeader(0);
  v95 = *(_QWORD *)(v1 - 8);
  v96 = v1;
  __chkstk_darwin();
  v97 = (char *)&v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for FlowPresentationContext(0);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin();
  v4 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v99 = (char *)&v87 - v5;
  v6 = type metadata accessor for FlowDestination(0);
  v93 = *(_QWORD *)(v6 - 8);
  v94 = v6;
  __chkstk_darwin();
  v8 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for URL(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin();
  v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_10055A410);
  __chkstk_darwin();
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v14 = (char *)&v87 - v13;
  __chkstk_darwin();
  v104 = (uint64_t)&v87 - v15;
  URL._bridgeToObjectiveC()((NSURL *)((char *)&v87 - v15));
  v17 = v16;
  v18 = objc_msgSend(v16, "pf_cleanUrlToStoreId");
  v19 = objc_msgSend(v17, "pf_cleanUrlToStoreTrackId");
  v105 = v17;
  v20 = objc_msgSend(v17, "pf_cleanUrlToEpisodeGuid");
  v101 = v4;
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

  }
  else
  {
    v22 = 0;
    v24 = 0;
  }
  v25 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v26 = objc_msgSend(v25, "mainQueueContext");

  v108 = 0;
  v109 = 0;
  v27 = (_QWORD *)swift_allocObject(&unk_1004C1FD0, 72, 7);
  v27[2] = v18;
  v27[3] = v26;
  v27[4] = &v109;
  v27[5] = v19;
  v27[6] = v22;
  v27[7] = v24;
  v27[8] = &v108;
  v28 = swift_allocObject(&unk_1004C1FF8, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10030FB3C;
  *(_QWORD *)(v28 + 24) = v27;
  aBlock[4] = sub_1001529CC;
  v107 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004C2010;
  v29 = _Block_copy(aBlock);
  v30 = v107;
  v31 = v26;
  swift_retain();
  objc_msgSend(v31, "performBlockAndWait:", v29, swift_release(v30).n128_f64[0]);
  _Block_release(v29);
  LOBYTE(v29) = swift_isEscapingClosureAtFileLocation(v28, "", 87, 454, 32, 1);
  swift_release(v28);
  if ((v29 & 1) == 0)
  {
    v32 = v109;
    if (v109)
    {
      v33 = v108;
      v98 = v31;
      if (v108)
      {
        v34 = v109;
        v35 = v33;
        v36 = objc_msgSend(v35, "uuid");
        if (v36)
        {
          v37 = v36;
          v90 = v35;
          v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
          v88 = v38;

          static URL._unconditionallyBridgeFromObjectiveC(_:)(v105);
          v39 = v104;
          URLComponents.init(url:resolvingAgainstBaseURL:)(v10, 0, v40);
          (*(void (**)(char *, uint64_t))(v91 + 8))(v10, v92);
          sub_100007A64(v39, (uint64_t)v14, &qword_10055A410);
          v41 = type metadata accessor for URLComponents(0);
          v42 = *(_QWORD *)(v41 - 8);
          v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
          if (v43(v14, 1, v41) == 1)
          {
            sub_100007A28((uint64_t)v14, &qword_10055A410);
            v92 = 0;
            v44 = 1;
          }
          else
          {
            v92 = URLComponents.referenceTime.getter();
            v44 = v53 & 1;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v41);
          }
          sub_100007A64(v104, (uint64_t)v12, &qword_10055A410);
          if (v43(v12, 1, v41) == 1)
          {
            sub_100007A28((uint64_t)v12, &qword_10055A410);
            v54 = 0;
            v55 = 1;
          }
          else
          {
            v54 = URLComponents.playerTime.getter();
            v55 = v56 & 1;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v41);
          }
          v46 = (uint64_t)v101;
          v48 = v102;
          v57 = v88;
          *(_QWORD *)v8 = v89;
          *((_QWORD *)v8 + 1) = v57;
          *((_QWORD *)v8 + 2) = 0;
          *((_QWORD *)v8 + 3) = 0;
          *((_QWORD *)v8 + 4) = v92;
          v8[40] = v44;
          *((_QWORD *)v8 + 6) = v54;
          v8[56] = v55;
          (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v8, enum case for FlowDestination.episodeDetails(_:), v94);
          v47 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v100 + 104);
          v58 = v47(v99, enum case for FlowPresentationContext.infer(_:), v48);
          v59 = static Link.Presentation.textFollowsTintColor.getter(v58);
          v60 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
          v61 = Link.Presentation.init(rawValue:)(0);
          v62 = Link.Presentation.init(rawValue:)(v61);
          if (Link.Presentation.init(rawValue:)(v62 & v59) != v59)
            v61 = Link.Presentation.init(rawValue:)(v61 | v59);
          v63 = Link.Presentation.init(rawValue:)(v61);
          v64 = Link.Presentation.init(rawValue:)(v63 & v60);
          v50 = (uint64_t)v103;
          if (v64 != v60)
            v61 = Link.Presentation.init(rawValue:)(v61 | v60);
          v65 = v97;
          v66 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v95 + 104))(v97, enum case for FlowDestinationPageHeader.standard(_:), v96);
          static ActionMetrics.notInstrumented.getter(v66);
          v67 = type metadata accessor for FlowAction(0);
          swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
          v52 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v8, 0, 0, 0, 0, v99, 0, v61, v65, v50);

          sub_100007A28(v104, &qword_10055A410);
          goto LABEL_26;
        }

      }
      else
      {
        v45 = v109;
      }
      type metadata accessor for FlowAction(0);
      v46 = (uint64_t)v101;
      v47 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v100 + 104);
      v48 = v102;
      v47(v101, enum case for FlowPresentationContext.infer(_:), v102);
      v49 = v32;
      v50 = (uint64_t)v103;
      static ActionMetrics.notInstrumented.getter(v49);
      v51 = FlowAction.init(podcast:presentationContext:actionMetrics:)(v49, v46, v50);
      if (v51)
      {
        v52 = v51;
LABEL_26:
        v47((char *)v46, enum case for FlowPresentationContext.showDetail(_:), v48);
        v68 = swift_retain();
        dispatch thunk of FlowAction.presentationContext.setter(v46, v68);
        swift_release(v52);
        sub_100005EC8(0, (unint64_t *)&qword_100561290, UITraitCollection_ptr);
        v69 = swift_retain();
        v70 = static UITraitCollection.interfaceMode.getter(v69);
        v71 = InterfaceMode.rawValue.getter(v70 & 1);
        v73 = v72;
        v75 = InterfaceMode.rawValue.getter(1);
        v76 = v74;
        if (v71 == v75 && v73 == v74)
        {
          swift_bridgeObjectRelease_n(v73, 2);
          v77 = 1;
        }
        else
        {
          v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v73, v75, v74, 0);
          swift_bridgeObjectRelease(v73);
          swift_bridgeObjectRelease(v76);
          if ((v78 & 1) != 0)
            v77 = 1;
          else
            v77 = 7;
        }
        v79 = v98;
        v80 = sub_10003F544(&qword_1005612A0);
        v81 = swift_allocObject(v80, 72, 7);
        *(_OWORD *)(v81 + 16) = xmmword_1003CA200;
        *(_QWORD *)(v81 + 56) = type metadata accessor for FlowAction(0);
        *(_QWORD *)(v81 + 64) = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
        *(_QWORD *)(v81 + 32) = v52;
        swift_retain();
        v82 = Link.Presentation.init(rawValue:)(0);
        v83 = v82;
        static ActionMetrics.notInstrumented.getter(v82);
        v84 = type metadata accessor for TabChangeAction(0);
        swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
        LOBYTE(v86) = v83;
        TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, v77, v81, 0, 0, 0, 0, v86, v50);

        swift_release_n(v52, 2);
        goto LABEL_33;
      }

    }
    else
    {

    }
LABEL_33:
    v85 = v109;
    swift_release(v27);

    return;
  }
  __break(1u);
}

uint64_t sub_10030E71C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, unint64_t, uint64_t, __n128);
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __n128 v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  NSString v54;
  id v55;
  uint64_t v56;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[40];

  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v83 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for FlowDestinationPageHeader(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin();
  v90 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FlowPresentationContext(0);
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  __chkstk_darwin();
  v89 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FlowDestination(0);
  v84 = *(_QWORD *)(v6 - 8);
  v85 = v6;
  __chkstk_darwin();
  v88 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URLQueryItem(0);
  v93 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_10055E890);
  __chkstk_darwin();
  v91 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_10055A410);
  __chkstk_darwin();
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLComponents(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v92 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  __chkstk_darwin();
  v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1;
  v24 = v23;
  sub_100007A64(v22, (uint64_t)v18, (uint64_t *)&unk_100553DC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v24) == 1)
  {
    v25 = (uint64_t *)&unk_100553DC0;
    v26 = (uint64_t)v18;
LABEL_5:
    sub_100007A28(v26, v25);
    return 0;
  }
  v27.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v19 + 32))(v21, v18, v24);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v21, 0, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v24);
    v25 = &qword_10055A410;
    v26 = (uint64_t)v13;
    goto LABEL_5;
  }
  v78 = v19;
  v79 = v24;
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v92, v13, v14);
  v29 = URLComponents.queryItems.getter(v28);
  if (!v29)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v92, v14);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v21, v79);
    return 0;
  }
  v31 = v29;
  v32 = *(_QWORD *)(v29 + 16);
  if (v32)
  {
    v75 = v21;
    v76 = v15;
    v77 = v14;
    v33 = v29 + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80));
    v34 = *(_QWORD *)(v93 + 72);
    v35 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v93 + 16);
    v36 = v29;
    v37 = swift_bridgeObjectRetain(v29);
    v80 = 0x800000010043CA60;
    while (1)
    {
      v38 = v35(v10, v33, v8, v37);
      v39 = URLQueryItem.name.getter(v38);
      v41 = v40;
      if (v39 == 0xD000000000000010 && v40 == v80)
      {
        v31 = v36;
        swift_bridgeObjectRelease(v36);
        v47 = 0x800000010043CA60;
        goto LABEL_18;
      }
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, 0xD000000000000010, 0x800000010043CA60, 0);
      v43 = swift_bridgeObjectRelease(v41);
      if ((v42 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t, __n128))(v93 + 8))(v10, v8, v43);
      v33 += v34;
      if (!--v32)
      {
        v31 = v36;
        v30 = swift_bridgeObjectRelease(v36);
        v44 = 1;
        v14 = v77;
        v15 = v76;
        v21 = v75;
        goto LABEL_15;
      }
    }
    v31 = v36;
    v47 = v36;
LABEL_18:
    v48 = swift_bridgeObjectRelease(v47);
    v45 = v93;
    v46 = (uint64_t)v91;
    (*(void (**)(char *, char *, uint64_t, __n128))(v93 + 32))(v91, v10, v8, v48);
    v44 = 0;
    v14 = v77;
    v15 = v76;
    v21 = v75;
  }
  else
  {
    v44 = 1;
LABEL_15:
    v45 = v93;
    v46 = (uint64_t)v91;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v45 + 56))(v46, v44, 1, v8, v30);
  v49 = swift_bridgeObjectRelease(v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v45 + 48))(v46, 1, v8, v49) == 1)
  {
    sub_100007A28(v46, &qword_10055E890);
    goto LABEL_24;
  }
  URLQueryItem.value.getter();
  v51 = v50;
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v8);
  if (!v51)
    goto LABEL_24;
  v52 = v15;
  v53 = objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
  v54 = String._bridgeToObjectiveC()();
  v55 = objc_msgSend(v53, "syncValueForKey:", v54, swift_bridgeObjectRelease(v51).n128_f64[0]);

  if (v55)
  {
    _bridgeAnyObjectToAny(_:)(&v94, v55);
    swift_unknownObjectRelease(v55);
  }
  else
  {
    v94 = 0u;
    v95 = 0u;
  }
  v58 = v88;
  v59 = v89;
  v60 = v78;
  sub_10003DC78((uint64_t)&v94, (uint64_t)v96, (uint64_t *)&unk_100552300);
  sub_100007A64((uint64_t)v96, (uint64_t)&v94, (uint64_t *)&unk_100552300);
  v61 = v79;
  if (*((_QWORD *)&v95 + 1))
  {
    v62 = swift_dynamicCast(v58, &v94, (char *)&type metadata for Any + 8, v79, 6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v58, v62 ^ 1u, 1, v61);
  }
  else
  {
    sub_100007A28((uint64_t)&v94, (uint64_t *)&unk_100552300);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v58, 1, 1, v61);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v58, enum case for FlowDestination.finance(_:), v85);
  v63 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v86 + 104))(v59, enum case for FlowPresentationContext.infer(_:), v87);
  v64 = static Link.Presentation.textFollowsTintColor.getter(v63);
  v65 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  v66 = Link.Presentation.init(rawValue:)(0);
  v67 = Link.Presentation.init(rawValue:)(v66);
  if (Link.Presentation.init(rawValue:)(v67 & v64) != v64)
    v66 = Link.Presentation.init(rawValue:)(v66 | v64);
  v68 = Link.Presentation.init(rawValue:)(v66);
  if (Link.Presentation.init(rawValue:)(v68 & v65) != v65)
    v66 = Link.Presentation.init(rawValue:)(v66 | v65);
  v69 = v14;
  v70 = v83;
  v71 = v90;
  v72 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v81 + 104))(v90, enum case for FlowDestinationPageHeader.standard(_:), v82);
  static ActionMetrics.notInstrumented.getter(v72);
  v73 = type metadata accessor for FlowAction(0);
  swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  v56 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v58, 0, 0, 0, 0, v59, 0, v66, v71, v70);
  sub_100007A28((uint64_t)v96, (uint64_t *)&unk_100552300);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v92, v69);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v21, v79);
  return v56;
}

uint64_t sub_10030EF24(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;

  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = 1836213620;
  v31 = 0xE400000000000000;
  AnyHashable.init<A>(_:)(&v30, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v6 = sub_1001CCFC0((uint64_t)&v32), (v7 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v34);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  sub_100048644((uint64_t)&v32);
  if (!*((_QWORD *)&v35 + 1))
  {
    sub_100007A28((uint64_t)&v34, (uint64_t *)&unk_100552300);
LABEL_10:
    swift_bridgeObjectRelease(0);
    v10 = 0;
    v12 = 0xE000000000000000;
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v30, &v34, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_10;
  v8 = v31;
  v32 = v30;
  v33 = v31;
  v9 = sub_10016D37C();
  v10 = StringProtocol.removingPercentEncoding.getter(&type metadata for String, v9);
  v12 = v11;
  swift_bridgeObjectRelease(v8);
  if (!v12)
    goto LABEL_10;
LABEL_11:
  v30 = 0x6574617669746361;
  v31 = 0xE800000000000000;
  AnyHashable.init<A>(_:)(&v30, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v13 = sub_1001CCFC0((uint64_t)&v32), (v14 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)&v34);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  sub_100048644((uint64_t)&v32);
  if (!*((_QWORD *)&v35 + 1))
  {
    sub_100007A28((uint64_t)&v34, (uint64_t *)&unk_100552300);
LABEL_22:
    v20 = 0;
    goto LABEL_23;
  }
  if ((swift_dynamicCast(&v30, &v34, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_22;
  v15 = v31;
  v32 = v30;
  v33 = v31;
  v16 = sub_10016D37C();
  StringProtocol.removingPercentEncoding.getter(&type metadata for String, v16);
  v18 = v17;
  swift_bridgeObjectRelease(v15);
  if (!v18)
    goto LABEL_22;
  v19 = String.lowercased()();
  swift_bridgeObjectRelease(v18);
  if (v19._countAndFlagsBits == 1702195828 && v19._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    v20 = 1;
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v19._countAndFlagsBits, v19._object, 1702195828, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v19._object);
  }
LABEL_23:
  v21 = sub_10003F544(&qword_1005612A0);
  v22 = swift_allocObject(v21, 72, 7);
  *(_OWORD *)(v22 + 16) = xmmword_1003CA200;
  v23 = type metadata accessor for URL(0);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v5, 1, 1, v23);
  static ActionMetrics.notInstrumented.getter(v24);
  *(_QWORD *)(v22 + 56) = type metadata accessor for SearchAction(0);
  *(_QWORD *)(v22 + 64) = sub_100026844(&qword_10055B038, (uint64_t (*)(uint64_t))&type metadata accessor for SearchAction, (uint64_t)&protocol conformance descriptor for SearchAction);
  sub_1000242A8((_QWORD *)(v22 + 32));
  SearchAction.init(origin:term:url:hintIndex:activatesSearchBar:actionMetrics:)(0, v10, v12, v5, 0, 1, v20 & 1, v3);
  v25 = Link.Presentation.init(rawValue:)(0);
  v26 = v25;
  static ActionMetrics.notInstrumented.getter(v25);
  v27 = type metadata accessor for TabChangeAction(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  return TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 12, v22, 0, 0, 0, 0, v26, v3);
}

uint64_t sub_10030F328(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSURL *v8;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[40];
  _OWORD v19[2];

  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10030DE08();
  v5 = v4;
  if (!v4)
  {
    v6 = type metadata accessor for URL(0);
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v3, a1, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
    v5 = (id)sub_10030E71C((uint64_t)v3);
    sub_100007A28((uint64_t)v3, (uint64_t *)&unk_100553DC0);
    if (!v5)
    {
      URL._bridgeToObjectiveC()(v8);
      v11 = v10;
      v5 = objc_msgSend(v10, "pf_queryAsDictionary");

      if (v5)
      {
        v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

        *(_QWORD *)&v16 = 0x6E6F69746361;
        *((_QWORD *)&v16 + 1) = 0xE600000000000000;
        AnyHashable.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v12 + 16) && (v13 = sub_1001CCFC0((uint64_t)v18), (v14 & 1) != 0))
        {
          sub_10003D344(*(_QWORD *)(v12 + 56) + 32 * v13, (uint64_t)&v16);
        }
        else
        {
          v16 = 0u;
          v17 = 0u;
        }
        sub_100048644((uint64_t)v18);
        if (!*((_QWORD *)&v17 + 1))
        {
          swift_bridgeObjectRelease(v12);
          sub_100007A28((uint64_t)&v16, (uint64_t *)&unk_100552300);
          return sub_10030BE28(a1);
        }
        sub_10013B9CC(&v16, v19);
        sub_10003D344((uint64_t)v19, (uint64_t)v18);
        if (swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          v15 = *((_QWORD *)&v16 + 1);
          if (v16 == __PAIR128__(0xE600000000000000, 0x686372616573)
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x686372616573, 0xE600000000000000, v16, *((_QWORD *)&v16 + 1), 0) & 1) != 0)
          {
            v5 = (id)sub_10030EF24(v12);
            swift_bridgeObjectRelease(v15);
            swift_bridgeObjectRelease(v12);
            sub_10003D380(v19);
            return (uint64_t)v5;
          }
          swift_bridgeObjectRelease(v15);
        }
        swift_bridgeObjectRelease(v12);
        sub_10003D380(v19);
        return 0;
      }
    }
  }
  return (uint64_t)v5;
}

uint64_t sub_10030F5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = URL.scheme.getter(v6);
  v11 = v10;
  if (!v10)
    return v11;
  v12 = v9;
  if (v9 == 1886680168 && v10 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1886680168, 0xE400000000000000, v9, v10, 0) & 1) != 0
    || v12 == 0x7370747468 && v11 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7370747468, 0xE500000000000000, v12, v11, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v11);
    return sub_10030BE28(a1);
  }
  if (v12 == 0x74736163646F70 && v11 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x74736163646F70, 0xE700000000000000, v12, v11, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v11);
    return sub_10030C398(a1, a2);
  }
  if (v12 == 0x7374736163646F70 && v11 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7374736163646F70, 0xE800000000000000, v12, v11, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v11);
    v11 = sub_10030DAE0();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    if (!v11)
      v11 = sub_10030BE28((uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return v11;
  }
  if (v12 != 0x646F702D736D7469 || v11 != 0xED00007374736163)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646F702D736D7469, 0xED00007374736163, v12, v11, 0);
    swift_bridgeObjectRelease(v11);
    if ((v14 & 1) != 0)
      return sub_10030F328(a1);
    return 0;
  }
  swift_bridgeObjectRelease(0xED00007374736163);
  return sub_10030F328(a1);
}

uint64_t sub_10030F88C()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10030F8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10030A3A0(a1, a2, (_QWORD *)(v2 + 16));
}

uint64_t sub_10030F8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PodcastsURLEpisodeParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10030F8FC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PodcastsURLEpisodeParameters(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10030F938()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10030F95C()
{
  uint64_t v0;

  return sub_10030A6C8(*(uint64_t **)(v0 + 16), *(id *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10030F968()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10030F978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = type metadata accessor for PodcastsURLEpisodeParameters(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  v6 = v0 + v4 + *(int *)(v1 + 40);
  v7 = type metadata accessor for MetricsWidgetContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = (((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;

  return swift_deallocObject(v0, v10, v3 | 7);
}

void sub_10030FA54()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for PodcastsURLEpisodeParameters(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10030A754(v0 + v2, *(id **)(v0 + v3), *(void ***)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10030FAAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10030FABC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_10030FAE0()
{
  uint64_t v0;

  return sub_10030A5C4(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10030FAE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10030FAF8()
{
  uint64_t v0;

  return sub_10030A558(*(uint64_t **)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_10030FB00()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10030FB10()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 72, 7);
}

void sub_10030FB3C()
{
  uint64_t v0;

  sub_10030A958(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void ***)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(void ***)(v0 + 64));
}

uint64_t sub_10030FB50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t (**MTImageStore.alternativeSizeWithBuckets.unsafeMutableAddressor())()
{
  return &static MTImageStore.alternativeSizeWithBuckets;
}

void sub_10030FB7C()
{
  off_1005632F0 = &off_1004AD378;
}

uint64_t sub_10030FB90(__n128 a1, double a2, double a3)
{
  double v5;
  uint64_t v6;
  double *v7;

  v5 = a1.n128_f64[0];
  if (qword_100552100 != -1)
    swift_once(&qword_100552100, sub_10030FB7C);
  v6 = *((_QWORD *)off_1005632F0 + 2);
  if (v6)
  {
    v7 = (double *)((char *)off_1005632F0 + 32);
    while (1)
    {
      a1.n128_f64[0] = ceil(*v7 * a3);
      if (a1.n128_f64[0] > v5)
        break;
      ++v7;
      if (!--v6)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    a1.n128_f64[0] = a3;
  }
  return CGSize.init(width:proportionalTo:)(a1, v5, a2);
}

uint64_t (*static MTImageStore.alternativeSizeWithBuckets.getter())(__n128 a1, double a2, double a3)
{
  return sub_10030FB90;
}

void sub_10030FC34(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  id v42;
  NSString v43;
  Class isa;
  id v45;
  id v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  double v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void *v61;
  NSObject *v62;
  id v63;
  double v64;
  double v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  _QWORD *v70;
  __n128 v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  _QWORD *v80;
  id v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  id v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  _BYTE *v94;
  __n128 v95;
  void *v96;
  id v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  char *v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  __int128 aBlock;
  __int128 v145;
  void *v146;
  _QWORD *v147;
  id v148;

  v121 = a8;
  v118 = a7;
  v117 = a6;
  v116 = a5;
  v136 = a3;
  v137 = a4;
  v130 = a1;
  v12 = a11;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v124 = (char *)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v20);
  v123 = (uint64_t)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v120 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v119 = (uint64_t *)((char *)&v112 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = sub_10003F544((uint64_t *)&unk_100562BF0);
  __chkstk_darwin(v23);
  v135 = (char *)&v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ArtworkModel(0);
  v140 = *(_QWORD *)(v25 - 8);
  v141 = v25;
  __chkstk_darwin(v25);
  v134 = (uint64_t)&v112 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for ArtworkRequest(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v112 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v28);
  v139 = (char *)&v112 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  if ((unint64_t)a11 >> 62)
  {
    if (a11 < 0)
      v111 = a11;
    else
      v111 = a11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a11);
    v30 = _CocoaArrayWrapper.endIndex.getter(v111);
  }
  else
  {
    v30 = *(_QWORD *)((a11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a11);
  }
  v142 = a11;
  v129 = v13;
  v128 = v14;
  v127 = v16;
  v126 = v17;
  v125 = v18;
  if (v30)
  {
    v138 = a2;
    v31 = objc_opt_self(UIImage);
    if (v30 < 1)
      goto LABEL_37;
    v32 = (void *)v31;
    for (i = 0; i != v30; ++i)
    {
      if ((a11 & 0xC000000000000001) != 0)
      {
        v35 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v142);
      }
      else
      {
        v35 = *(_QWORD *)(v142 + 8 * i + 32);
        swift_retain();
      }
      v36 = String._bridgeToObjectiveC()();
      v37 = objc_msgSend(v32, "imageNamed:", v36);
      swift_release(v35);

      if (v37)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
        v40 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
        v39 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v40 >= v39 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v37);
        specialized Array._endMutation()(v34);
      }
    }
    v12 = v142;
    swift_bridgeObjectRelease(v142);
    v41 = (_QWORD *)aBlock;
    a2 = v138;
  }
  else
  {
    swift_bridgeObjectRelease(a11);
    v41 = _swiftEmptyArrayStorage;
  }
  v138 = swift_allocObject(&unk_1004C2058, 24, 7);
  *(_QWORD *)(v138 + 16) = v41;
  v42 = objc_allocWithZone((Class)CPListImageRowItem);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v41);
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  sub_100005EC8(0, (unint64_t *)&unk_100562EE0, UIImage_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v45 = objc_msgSend(v42, "initWithText:images:", v43, isa, swift_bridgeObjectRelease(v41).n128_f64[0]);

  v148 = v45;
  v46 = v45;
  v47 = dispatch_group_create();
  if ((unint64_t)a11 >> 62)
  {
    if (v12 < 0)
      v49 = v12;
    else
      v49 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v48 = _CocoaArrayWrapper.endIndex.getter(v49);
    swift_bridgeObjectRelease(v12);
    if ((v48 & 0x8000000000000000) == 0)
      goto LABEL_22;
    __break(1u);
LABEL_37:
    __break(1u);
    return;
  }
  v48 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_22:
  v113 = v46;
  v115 = a10;
  v114 = a9;
  v50 = (uint64_t)v139;
  if (v48)
  {
    v51 = 0;
    v52 = v12 & 0xC000000000000001;
    v130 = v12 & 0xC000000000000001;
    do
    {
      dispatch_group_enter(v47);
      if (v52)
      {
        v75 = specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v12);
      }
      else
      {
        v75 = *(_QWORD *)(v12 + 8 * v51 + 32);
        v76 = swift_retain();
      }
      Showcase.showArtwork.getter(v76);
      swift_release(v75);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48))(v50, 1, v141) == 1)
      {
        sub_100007A28(v50, &qword_10055D840);
      }
      else
      {
        v53 = *(double *)(v136 + 16);
        v54 = *(double *)(v136 + 24);
        v55 = (_QWORD *)swift_allocObject(&unk_1004C2170, 40, 7);
        v56 = v48;
        v55[2] = v138;
        v55[3] = v51;
        v55[4] = v47;
        v57 = swift_allocObject(&unk_1004C2198, 17, 7);
        *(_BYTE *)(v57 + 16) = 0;
        v58 = v134;
        sub_10014FDF8(v50, v134, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
        v59 = type metadata accessor for CropCode(0);
        v60 = v135;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v135, 1, 1, v59);
        v146 = 0;
        aBlock = 0u;
        v145 = 0u;
        v61 = (void *)objc_opt_self(UIScreen);
        swift_retain();
        v62 = v47;
        v63 = objc_msgSend(v61, "mainScreen");
        objc_msgSend(v63, "scale");
        v65 = v64;

        v66 = v131;
        ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v58, 1, 0, v60, 0, _swiftEmptyArrayStorage, &aBlock, v53, v54, v65);
        v67 = v137[3];
        v68 = v137[4];
        sub_10003A834(v137, v67);
        v69 = v47;
        v70 = (_QWORD *)swift_allocObject(&unk_1004C21C0, 40, 7);
        v70[2] = v57;
        v70[3] = sub_100312528;
        v70[4] = v55;
        swift_retain();
        v71 = swift_retain();
        v72 = v68;
        v48 = v56;
        v52 = v130;
        v12 = v142;
        ImageProvider.load(artwork:receiveImage:receiveCompletion:)(v66, sub_1002DE7B4, v70, 0, 0, v67, v72, v71);
        v73 = v70;
        v47 = v69;
        swift_release(v73);
        v74 = v66;
        v50 = (uint64_t)v139;
        (*(void (**)(char *, uint64_t))(v132 + 8))(v74, v133);
        swift_release(v55);
        swift_release(v57);
        sub_10003F970(v50, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      }
      ++v51;
    }
    while (v48 != v51);
  }
  v77 = swift_allocObject(&unk_1004C2080, 32, 7);
  v78 = v117;
  *(_QWORD *)(v77 + 16) = v116;
  *(_QWORD *)(v77 + 24) = v78;
  v146 = sub_1002FD108;
  v147 = (_QWORD *)v77;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v145 = sub_10017FEAC;
  *((_QWORD *)&v145 + 1) = &unk_1004C2098;
  v79 = _Block_copy(&aBlock);
  v80 = v147;
  swift_retain();
  swift_release(v80);
  v81 = v113;
  objc_msgSend(v113, "setHandler:", v79);
  _Block_release(v79);
  v82 = (_QWORD *)swift_allocObject(&unk_1004C20D0, 40, 7);
  v83 = v118;
  v82[2] = v12;
  v82[3] = v83;
  v82[4] = v121;
  v146 = sub_100312400;
  v147 = v82;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v145 = sub_1002FCEB4;
  *((_QWORD *)&v145 + 1) = &unk_1004C20E8;
  v84 = _Block_copy(&aBlock);
  v85 = v147;
  swift_bridgeObjectRetain(v12);
  swift_retain();
  swift_release(v85);
  objc_msgSend(v81, "setListImageRowHandler:", v84);
  _Block_release(v84);

  v86 = v119;
  *v119 = v12;
  v87 = v122;
  swift_storeEnumTagMultiPayload(v86, v122, 4);
  v88 = objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0));
  v89 = objc_msgSend(v88, "init", swift_bridgeObjectRetain(v12).n128_f64[0]);
  v90 = (uint64_t)v86;
  v91 = v123;
  sub_10017FE20(v90, v123);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v120 + 56))(v91, 0, 1, v87);
  v92 = (uint64_t)&v89[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v89[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], &aBlock, 33, 0);
  sub_10017FE64(v91, v92);
  swift_endAccess(&aBlock);
  v89[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v93 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v94 = v89;
  sub_10017FF38((uint64_t)v93, (uint64_t)v89);

  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v96 = (void *)static OS_dispatch_queue.main.getter(v95);
  v97 = v148;
  v98 = (_QWORD *)swift_allocObject(&unk_1004C2120, 48, 7);
  v99 = v138;
  v98[2] = v97;
  v98[3] = v99;
  v100 = v115;
  v98[4] = v114;
  v98[5] = v100;
  v146 = sub_1003124F0;
  v147 = v98;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v145 = sub_100027AF8;
  *((_QWORD *)&v145 + 1) = &unk_1004C2138;
  v101 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  v102 = v97;
  v103 = v124;
  static DispatchQoS.unspecified.getter(v102);
  v143 = _swiftEmptyArrayStorage;
  v104 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v105 = v47;
  v106 = sub_10003F544((uint64_t *)&unk_10055B200);
  v107 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  v108 = v127;
  v109 = v129;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v143, v106, v107, v129, v104);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v103, v108, v96, v101);
  _Block_release(v101);

  (*(void (**)(char *, uint64_t))(v128 + 8))(v108, v109);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v103, v126);

  v110 = v147;
  swift_release(v99);
  swift_release(v110);
}

void sub_10031081C(_QWORD *a1, double *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  dispatch_group_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  dispatch_group_t v31;
  uint64_t v32;
  __n128 v33;
  double v34;
  double v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  NSObject *v41;
  id v42;
  double v43;
  double v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  dispatch_group_t v54;
  uint64_t v55;
  __n128 v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  double *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  dispatch_group_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD v101[2];
  uint64_t v102;
  __int128 aBlock;
  uint64_t (*v104)(uint64_t);
  void *v105;
  uint64_t (*v106)();
  _QWORD *v107;

  v73 = a7;
  v72 = a6;
  v99 = a5;
  v87 = a3;
  v86 = a2;
  v79 = type metadata accessor for DispatchWorkItemFlags(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v77 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for DispatchQoS(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v74 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544((uint64_t *)&unk_100562BF0);
  __chkstk_darwin(v13);
  v85 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for ArtworkModel(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (uint64_t)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for ArtworkRequest(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v17);
  v100 = (uint64_t)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = dispatch_group_create();
  v19 = swift_allocObject(&unk_1004C21E8, 24, 7);
  v88 = v19;
  *(_QWORD *)(v19 + 16) = _swiftEmptyArrayStorage;
  v20 = (_QWORD *)(v19 + 16);
  v98 = a8;
  if (!(a8 >> 62))
  {
    v21 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v98);
    v22 = v96;
    if (v21)
      goto LABEL_3;
LABEL_22:
    v54 = v22;
LABEL_23:
    swift_bridgeObjectRelease(v98);
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v57 = (void *)static OS_dispatch_queue.main.getter(v56);
    v58 = (_QWORD *)swift_allocObject(&unk_1004C2210, 40, 7);
    v59 = v73;
    v58[2] = v72;
    v58[3] = v59;
    v60 = v88;
    v58[4] = v88;
    v106 = sub_100312788;
    v107 = v58;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v104 = sub_100027AF8;
    v105 = &unk_1004C2228;
    v61 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    v62 = v74;
    static DispatchQoS.unspecified.getter(v63);
    *(_QWORD *)&v101[0] = _swiftEmptyArrayStorage;
    v64 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v65 = sub_10003F544((uint64_t *)&unk_10055B200);
    v66 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
    v67 = v77;
    v68 = v65;
    v69 = v79;
    dispatch thunk of SetAlgebra.init<A>(_:)(v101, v68, v66, v79, v64);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v62, v67, v57, v61);
    _Block_release(v61);

    (*(void (**)(char *, uint64_t))(v78 + 8))(v67, v69);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v62, v76);
    v70 = v107;
    swift_release(v60);
    swift_release(v70);
    return;
  }
  if (v98 < 0)
    v55 = v98;
  else
    v55 = v98 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v98);
  v21 = _CocoaArrayWrapper.endIndex.getter(v55);
  v22 = v96;
  if (!v21)
    goto LABEL_22;
LABEL_3:
  if (v21 >= 1)
  {
    v23 = 0;
    v97 = v98 & 0xC000000000000001;
    v92 = a4;
    v81 = a1;
    v80 = v20;
    v91 = v21;
    do
    {
      if (v97)
      {
        v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v98);
      }
      else
      {
        v24 = *(_QWORD *)(v98 + 8 * v23 + 32);
        swift_retain();
      }
      v25 = sub_100311098(a1, 0, a4, v99);
      if (v25)
      {
        v26 = v25;
        swift_beginAccess(v20, &aBlock, 33, 0);
        v27 = v26;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v29 = *(_QWORD *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v28 = *(_QWORD *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v29 >= v28 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
        specialized Array._endMutation()(v30);
        swift_endAccess(&aBlock);
        v31 = v96;
        dispatch_group_enter(v96);
        v32 = v100;
        Showcase.showArtwork.getter(v33);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v32, 1, v95) == 1)
        {
          swift_release(v24);

          sub_100007A28(v100, &qword_10055D840);
        }
        else
        {
          v34 = *v86;
          v35 = v86[1];
          sub_10000A520((uint64_t)a1, (uint64_t)&aBlock);
          v36 = (_QWORD *)swift_allocObject(&unk_1004C2260, 104, 7);
          v36[2] = v88;
          v36[3] = v27;
          v36[4] = v24;
          sub_10002099C(&aBlock, (uint64_t)(v36 + 5));
          v37 = v99;
          v36[10] = v92;
          v36[11] = v37;
          v36[12] = v31;
          v89 = swift_allocObject(&unk_1004C2198, 17, 7);
          *(_BYTE *)(v89 + 16) = 0;
          sub_10014FDF8(v100, v93, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
          v38 = type metadata accessor for CropCode(0);
          v39 = v85;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v85, 1, 1, v38);
          v102 = 0;
          memset(v101, 0, sizeof(v101));
          v40 = (void *)objc_opt_self(UIScreen);
          v90 = v27;
          swift_retain();
          swift_retain();
          swift_retain();
          v41 = v31;
          v42 = objc_msgSend(v40, "mainScreen");
          objc_msgSend(v42, "scale");
          v44 = v43;

          v45 = v82;
          ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v93, 1, 0, v39, 0, _swiftEmptyArrayStorage, v101, v34, v35, v44);
          v46 = v87[3];
          v47 = v87[4];
          sub_10003A834(v87, v46);
          v48 = (_QWORD *)swift_allocObject(&unk_1004C2288, 40, 7);
          v49 = v89;
          v48[2] = v89;
          v48[3] = sub_1003127E0;
          v48[4] = v36;
          swift_retain();
          v50 = swift_retain();
          v51 = v47;
          a4 = v92;
          ImageProvider.load(artwork:receiveImage:receiveCompletion:)(v45, sub_1002FF934, v48, 0, 0, v46, v51, v50);
          swift_release(v48);
          v52 = v45;
          v20 = v80;
          (*(void (**)(char *, uint64_t))(v83 + 8))(v52, v84);
          v53 = v36;
          a1 = v81;
          swift_release(v53);
          swift_release(v24);

          swift_release(v49);
          sub_10003F970(v100, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
        }
        v21 = v91;
      }
      else
      {
        swift_release(v24);
      }
      ++v23;
    }
    while (v21 != v23);
    v54 = v96;
    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_100311074()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_100311098(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  uint64_t v102;
  NSString v103;
  NSString v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD aBlock[3];
  void *v141;
  uint64_t v142;
  uint64_t v143;
  id v144[2];

  v130 = a2;
  v131 = a4;
  v138 = a1;
  v5 = type metadata accessor for HeaderModel.MetadataComponent(0);
  v6 = *(_QWORD **)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v134 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v9 = *(_QWORD *)(v134 - 8);
  v10 = __chkstk_darwin(v134);
  v132 = (uint64_t)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v118 - v12;
  v14 = sub_10003F544((uint64_t *)&unk_100555310);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v133 = (uint64_t)&v118 - v19;
  __chkstk_darwin(v18);
  v135 = (uint64_t)&v118 - v20;
  v21 = sub_10003F544((uint64_t *)&unk_100554EC0);
  __chkstk_darwin(v21);
  v23 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for FlowDestination(0);
  v24 = *(_QWORD *)(v139 - 8);
  v25 = __chkstk_darwin(v139);
  v137 = (char *)&v118 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  Showcase.clickAction.getter(aBlock, v25);
  if (!v141)
  {
    v35 = (uint64_t *)&unk_100554FF0;
    v36 = (char *)aBlock;
    goto LABEL_7;
  }
  v129 = v9;
  v27 = sub_10003F544(&qword_100554920);
  v28 = type metadata accessor for FlowAction(0);
  if ((swift_dynamicCast(v144, aBlock, v27, v28, 6) & 1) == 0)
    return 0;
  v128 = v6;
  v29 = v144[0];
  swift_retain();
  v124 = Action.title.getter(v30);
  v32 = v31;
  v33 = swift_release(v29);
  v125 = v32;
  if (!v32)
  {
    swift_release(v29);
    return 0;
  }
  v123 = a3;
  dispatch thunk of FlowAction.destination.getter(v33);
  v34 = v139;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, v139) == 1)
  {
    swift_bridgeObjectRelease(v125);
    swift_release(v29);
    v35 = (uint64_t *)&unk_100554EC0;
    v36 = v23;
LABEL_7:
    sub_100007A28((uint64_t)v36, v35);
    return 0;
  }
  v121 = v29;
  v136 = v24;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v137, v23, v34);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56);
  v39 = v134;
  v40 = v135;
  v38(v135, 1, 1, v134);
  v41 = type metadata accessor for Podcasts(0);
  v141 = (void *)v41;
  v142 = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v42 = sub_1000242A8(aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v42, enum case for Podcasts.carPlayStoreShowPage(_:), v41);
  LOBYTE(v41) = isFeatureEnabled(_:)(aBlock);
  v43 = sub_10003D380(aBlock);
  v122 = v13;
  v120 = v38;
  if ((v41 & 1) != 0)
  {
    v44 = sub_10003F544(&qword_100556410);
    v127 = *(int *)(v44 + 48);
    v45 = v39;
    v46 = v133;
    v47 = v133 + *(int *)(v44 + 64);
    v48 = FlowDestination.pageDestinationURL.getter();
    v49 = FlowDestination.pageDestinationPage.getter(v48);
    *(_QWORD *)(v46 + v127) = v49;
    v50 = Showcase.showAdamId.getter(v49);
    v52 = v51;
    sub_100007A28(v40, (uint64_t *)&unk_100555310);
    v53 = v47;
    v54 = v120;
    *(_QWORD *)v53 = v50;
    *(_BYTE *)(v53 + 8) = v52 & 1;
    v13 = v122;
    swift_storeEnumTagMultiPayload(v46, v45, 7);
    v54(v46, 0, 1, v45);
    v55 = v46;
    v39 = v45;
    sub_100312714(v55, v40);
    v56 = v128;
  }
  else
  {
    v57 = Showcase.showAdamId.getter(v43);
    v56 = v128;
    if ((v58 & 1) == 0)
    {
      v59 = v57;
      sub_100007A28(v40, (uint64_t *)&unk_100555310);
      *(_QWORD *)v40 = v59;
      *(_BYTE *)(v40 + 8) = 3;
      swift_storeEnumTagMultiPayload(v40, v39, 2);
      v38(v40, 0, 1, v39);
    }
  }
  sub_1003126CC(v40, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v17, 1, v39) == 1)
  {
    swift_release(v121);
    swift_bridgeObjectRelease(v125);
    sub_100007A28(v40, (uint64_t *)&unk_100555310);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v139);
    v36 = v17;
    v35 = (uint64_t *)&unk_100555310;
    goto LABEL_7;
  }
  v60 = sub_10017FE20((uint64_t)v17, (uint64_t)v13);
  v61 = Showcase.showMetadata.getter(v60);
  v62 = *(_QWORD *)(v61 + 16);
  if (v62)
  {
    v63 = (*((unsigned __int8 *)v56 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v56 + 80);
    v119 = v61;
    v64 = v61 + v63;
    v65 = v56[9];
    v128 = (_QWORD *)v56[2];
    v129 = v65;
    LODWORD(v127) = enum case for HeaderModel.MetadataComponent.category(_:);
    v126 = enum case for HeaderModel.MetadataComponent.explicit(_:);
    v66 = _swiftEmptyArrayStorage;
    v67 = v136;
    ((void (*)(uint64_t *, unint64_t, uint64_t))v128)(v8, v61 + v63, v5);
    while (1)
    {
      v68 = ((uint64_t (*)(uint64_t *, uint64_t))v56[11])(v8, v5);
      if (v68 == (_DWORD)v127)
      {
        ((void (*)(uint64_t *, uint64_t))v56[12])(v8, v5);
        v69 = *v8;
        v70 = v8[1];
        if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
          v66 = sub_10027AE00(0, v66[2] + 1, 1, v66);
        v72 = v66[2];
        v71 = v66[3];
        if (v72 >= v71 >> 1)
          v66 = sub_10027AE00((_QWORD *)(v71 > 1), v72 + 1, 1, v66);
        v66[2] = v72 + 1;
        v73 = &v66[2 * v72];
        v73[4] = v69;
        v73[5] = v70;
        v67 = v136;
      }
      else if (v68 == v126)
      {
        v74 = v138[3];
        v75 = v138[4];
        sub_10003A834(v138, v74);
        v76 = dispatch thunk of StoreDataProvider.explicitSymbol.getter(v74, v75);
        v78 = v77;
        if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
          v66 = sub_10027AE00(0, v66[2] + 1, 1, v66);
        v80 = v66[2];
        v79 = v66[3];
        if (v80 >= v79 >> 1)
          v66 = sub_10027AE00((_QWORD *)(v79 > 1), v80 + 1, 1, v66);
        v66[2] = v80 + 1;
        v81 = &v66[2 * v80];
        v81[4] = v76;
        v81[5] = v78;
        v67 = v136;
      }
      else
      {
        ((void (*)(uint64_t *, uint64_t))v56[1])(v8, v5);
      }
      v64 += v129;
      if (!--v62)
        break;
      ((void (*)(uint64_t *, unint64_t, uint64_t))v128)(v8, v64, v5);
    }
    swift_bridgeObjectRelease(v119);
    v83 = v66[2];
    if (v83)
      goto LABEL_34;
  }
  else
  {
    swift_bridgeObjectRelease(v61);
    v66 = _swiftEmptyArrayStorage;
    v67 = v136;
    v83 = _swiftEmptyArrayStorage[2];
    if (v83)
    {
LABEL_34:
      swift_bridgeObjectRetain(v66);
      v84 = v66 + 5;
      v85 = _swiftEmptyArrayStorage;
      do
      {
        v89 = *(v84 - 1);
        v90 = *v84;
        if (v89)
          v91 = 0;
        else
          v91 = v90 == 0xE000000000000000;
        if (!v91
          && (_stringCompareWithSmolCheck(_:_:expecting:)(*(v84 - 1), *v84, 0, 0xE000000000000000, 0) & 1) == 0)
        {
          swift_bridgeObjectRetain(v90);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
          aBlock[0] = v85;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100048628(0, v85[2] + 1, 1);
            v85 = (_QWORD *)aBlock[0];
          }
          v87 = v85[2];
          v86 = v85[3];
          if (v87 >= v86 >> 1)
          {
            sub_100048628(v86 > 1, v87 + 1, 1);
            v85 = (_QWORD *)aBlock[0];
          }
          v85[2] = v87 + 1;
          v88 = &v85[2 * v87];
          v88[4] = v89;
          v88[5] = v90;
          v67 = v136;
        }
        v84 += 2;
        --v83;
      }
      while (v83);
      swift_bridgeObjectRelease(v66);
      goto LABEL_49;
    }
  }
  v85 = _swiftEmptyArrayStorage;
LABEL_49:
  aBlock[0] = v85;
  v93 = static String.eyebrowSeparatorSymbol.getter(v82);
  v95 = v94;
  v96 = sub_10003F544((uint64_t *)&unk_10055FDF0);
  v97 = sub_10002F9C8((unint64_t *)&qword_1005547B8, (uint64_t *)&unk_10055FDF0, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(v93, v95, v96, v97);
  v99 = v98;
  swift_release(v85);
  swift_bridgeObjectRelease(v95);
  v100 = objc_allocWithZone((Class)CPListItem);
  v101 = v130;
  v102 = v125;
  v103 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v102);
  v104 = String._bridgeToObjectiveC()();
  v105 = objc_msgSend(v100, "initWithText:detailText:image:accessoryImage:accessoryType:", v103, v104, v101, 0, 0, swift_bridgeObjectRelease(v99).n128_f64[0]);

  v144[0] = v105;
  v106 = swift_allocObject(&unk_1004C22B0, 32, 7);
  v107 = v131;
  *(_QWORD *)(v106 + 16) = v123;
  *(_QWORD *)(v106 + 24) = v107;
  v142 = (uint64_t)sub_1002FD108;
  v143 = v106;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017FEAC;
  v141 = &unk_1004C22C8;
  v108 = _Block_copy(aBlock);
  v109 = v143;
  v110 = v105;
  swift_retain();
  swift_release(v109);
  objc_msgSend(v110, "setHandler:", v108);
  _Block_release(v108);

  v111 = (uint64_t)v122;
  v112 = v132;
  sub_10014FDF8((uint64_t)v122, v132, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  v113 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
  v114 = v133;
  sub_10017FE20(v112, v133);
  v120(v114, 0, 1, v134);
  v115 = (uint64_t)&v113[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v113[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
  sub_10017FE64(v114, v115);
  swift_endAccess(aBlock);
  v113[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 1;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v116 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v117 = v113;
  sub_10017FF38((uint64_t)v116, (uint64_t)v113);
  swift_release(v121);

  sub_10003F970(v111, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  sub_100007A28(v135, (uint64_t *)&unk_100555310);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v137, v139);
  swift_bridgeObjectRelease(v66);
  return v144[0];
}

id sub_100311B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  NSString v53;
  Class isa;
  id v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  void *v59;
  _BYTE *v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  id v71;
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;

  v0 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v68 = (uint64_t)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v69 = (uint64_t)&v61 - v4;
  v5 = sub_10003F544((uint64_t *)&unk_100555310);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v61 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v61 - v12;
  v14 = sub_10003F544((uint64_t *)&unk_100554EC0);
  __chkstk_darwin(v14);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FlowDestination(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v70 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Showcase.clickAction.getter(v72, v19);
  if (!v73)
  {
    v29 = (uint64_t *)&unk_100554FF0;
    v30 = (char *)v72;
LABEL_7:
    sub_100007A28((uint64_t)v30, v29);
    return 0;
  }
  v21 = sub_10003F544(&qword_100554920);
  v22 = type metadata accessor for FlowAction(0);
  if ((swift_dynamicCast(&v71, v72, v21, v22, 6) & 1) != 0)
  {
    v67 = v0;
    v23 = (uint64_t)v13;
    v24 = v17;
    v25 = v71;
    v26 = Showcase.title.getter();
    if (!v27)
    {
      swift_release(v25);
      return 0;
    }
    v65 = v26;
    v66 = v27;
    dispatch thunk of FlowAction.destination.getter();
    v28 = v24;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v24) == 1)
    {
      swift_bridgeObjectRelease(v66);
      swift_release(v25);
      v29 = (uint64_t *)&unk_100554EC0;
      v30 = v16;
    }
    else
    {
      v64 = v25;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v70, v16, v24);
      v32 = v67;
      v61 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
      v61(v23, 1, 1, v67);
      v33 = type metadata accessor for Podcasts(0);
      v73 = v33;
      v74 = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
      v34 = sub_1000242A8(v72);
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v34, enum case for Podcasts.carPlayStoreShowPage(_:), v33);
      LOBYTE(v33) = isFeatureEnabled(_:)(v72);
      v35 = sub_10003D380(v72);
      v62 = v18;
      v63 = v28;
      if ((v33 & 1) != 0)
      {
        v36 = sub_10003F544(&qword_100556410);
        v37 = *(int *)(v36 + 48);
        v38 = &v11[*(int *)(v36 + 64)];
        v39 = FlowDestination.pageDestinationURL.getter();
        v40 = FlowDestination.pageDestinationPage.getter(v39);
        *(_QWORD *)&v11[v37] = v40;
        v41 = Showcase.showAdamId.getter(v40);
        v43 = v42;
        sub_100007A28(v23, (uint64_t *)&unk_100555310);
        *(_QWORD *)v38 = v41;
        v38[8] = v43 & 1;
        swift_storeEnumTagMultiPayload(v11, v32, 7);
        v44 = v61;
        v61((uint64_t)v11, 0, 1, v32);
        sub_100312714((uint64_t)v11, v23);
        v45 = v23;
      }
      else
      {
        v46 = Showcase.showAdamId.getter(v35);
        v44 = v61;
        v45 = v23;
        if ((v47 & 1) == 0)
        {
          v48 = v46;
          sub_100007A28(v23, (uint64_t *)&unk_100555310);
          *(_QWORD *)v23 = v48;
          *(_BYTE *)(v23 + 8) = 3;
          swift_storeEnumTagMultiPayload(v23, v32, 2);
          v44(v23, 0, 1, v32);
        }
      }
      sub_1003126CC(v45, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v8, 1, v32) != 1)
      {
        v49 = (uint64_t)v8;
        v50 = v69;
        sub_10017FE20(v49, v69);
        v51 = objc_allocWithZone((Class)CPListImageRowItem);
        v52 = v66;
        v53 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v52);
        sub_100005EC8(0, (unint64_t *)&unk_100562EE0, UIImage_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v55 = objc_msgSend(v51, "initWithText:images:", v53, isa);

        v71 = v55;
        v56 = v68;
        sub_10014FDF8(v50, v68, type metadata accessor for CarPlayTemplateInfo.TemplateType);
        v57 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
        sub_10017FE20(v56, (uint64_t)v11);
        v44((uint64_t)v11, 0, 1, v32);
        v58 = (uint64_t)&v57[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
        swift_beginAccess(&v57[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], v72, 33, 0);
        sub_10017FE64((uint64_t)v11, v58);
        swift_endAccess(v72);
        v57[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 1;
        sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
        v59 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
        v60 = v57;
        sub_10017FF38((uint64_t)v59, (uint64_t)v57);
        swift_release(v64);

        sub_10003F970(v50, type metadata accessor for CarPlayTemplateInfo.TemplateType);
        sub_100007A28(v45, (uint64_t *)&unk_100555310);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v70, v63);
        return v71;
      }
      swift_bridgeObjectRelease(v66);
      swift_release(v64);
      sub_100007A28(v45, (uint64_t *)&unk_100555310);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v70, v63);
      v30 = v8;
      v29 = (uint64_t *)&unk_100555310;
    }
    goto LABEL_7;
  }
  return 0;
}

void sub_10031219C(void *a1, uint64_t a2, uint64_t a3, dispatch_group_t group)
{
  uint64_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _BYTE v15[24];

  if (!a1)
    goto LABEL_6;
  v7 = (uint64_t *)(a2 + 16);
  swift_beginAccess(a2 + 16, v15, 33, 0);
  v8 = a1;

  v9 = *v7;
  if (!((unint64_t)*v7 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v8;
    if (v10 >= a3)
      goto LABEL_4;
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v9 < 0)
    v12 = *v7;
  else
    v12 = v9 & 0xFFFFFFFFFFFFFF8;
  v13 = v8;
  swift_bridgeObjectRetain(v9);
  v14 = _CocoaArrayWrapper.endIndex.getter(v12);
  swift_bridgeObjectRelease(v9);
  if (v14 < a3)
    goto LABEL_11;
LABEL_4:
  if ((a3 & 0x8000000000000000) == 0)
  {
    sub_1001B38FC(a3, a3, (uint64_t)v8);
    swift_endAccess(v15);

LABEL_6:
    dispatch_group_leave(group);
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_10031228C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1003122B0(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t (*a6)(id))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  if (!((unint64_t)a5 >> 62))
  {
    if (*(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
      goto LABEL_3;
LABEL_13:
    v15 = a6(a1);
    a3(v15);
    return;
  }
  if (a5 < 0)
    v13 = a5;
  else
    v13 = a5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a5);
  v14 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease(a5);
  if (v14 <= a2)
    goto LABEL_13;
LABEL_3:
  if ((a5 & 0xC000000000000001) != 0)
  {
    v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a5);
LABEL_7:
    v16 = sub_100311B84();
    swift_release(v11);
    if (v16)
    {
      v12 = a6(v16);
      a3(v12);

      return;
    }
    goto LABEL_13;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a2)
  {
    v11 = *(_QWORD *)(a5 + 8 * a2 + 32);
    swift_retain();
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_1003123F4()
{
  return sub_1002FF8E0((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_100312400(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;

  sub_1003122B0(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(uint64_t (**)(id))(v4 + 24));
}

uint64_t sub_10031240C(void *a1, uint64_t a2, uint64_t (*a3)(void *))
{
  uint64_t v6;
  Class isa;
  _BYTE v9[24];

  swift_beginAccess(a2 + 16, v9, 0, 0);
  v6 = *(_QWORD *)(a2 + 16);
  sub_100005EC8(0, (unint64_t *)&unk_100562EE0, UIImage_ptr);
  swift_bridgeObjectRetain(v6);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "updateImages:", isa, swift_bridgeObjectRelease(v6).n128_f64[0]);

  return a3(a1);
}

uint64_t sub_1003124BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003124F0()
{
  uint64_t v0;

  return sub_10031240C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(void *))(v0 + 32));
}

uint64_t sub_1003124FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_100312528(void *a1)
{
  uint64_t v1;

  sub_10031219C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(dispatch_group_t *)(v1 + 32));
}

uint64_t sub_100312534()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100312544()
{
  return sub_1002FF8E0((void (*)(_QWORD))&_swift_release);
}

void sub_100312550(void *a1, uint64_t a2, void *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, NSObject *a8)
{
  uint64_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _BYTE v30[32];
  _BYTE v31[24];

  v14 = (uint64_t *)(a2 + 16);
  swift_beginAccess(a2 + 16, v31, 0, 0);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = a3;
  swift_bridgeObjectRetain(v15);
  v18 = sub_1002FD544(v17, (uint64_t)v16);
  v20 = v19;
  swift_bridgeObjectRelease(v15);

  if ((v20 & 1) != 0)
    goto LABEL_7;
  v21 = sub_100311098(a5, a1, a6, a7);
  if (!v21)
    goto LABEL_7;
  v22 = v21;
  swift_beginAccess(v14, v30, 33, 0);

  v23 = *v14;
  if (!((unint64_t)*v14 >> 62))
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    v25 = v22;
    if (v24 >= v18)
      goto LABEL_5;
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v23 < 0)
    v26 = *v14;
  else
    v26 = v23 & 0xFFFFFFFFFFFFFF8;
  v27 = v22;
  swift_bridgeObjectRetain(v23);
  v28 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v23);
  if (v28 < v18)
    goto LABEL_12;
LABEL_5:
  if ((v18 & 0x8000000000000000) == 0)
  {
    sub_1001B35F4(v18, v18, (uint64_t)v22);
    swift_endAccess(v30);

LABEL_7:
    dispatch_group_leave(a8);
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t sub_1003126CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100555310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100312714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100555310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10031275C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100312788()
{
  uint64_t v0;

  return sub_1002FA17C(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100312794()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  sub_10003D380((_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 88));

  return swift_deallocObject(v0, 104, 7);
}

void sub_1003127E0(void *a1)
{
  uint64_t v1;

  sub_100312550(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), (_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(NSObject **)(v1 + 96));
}

uint64_t sub_1003127F8()
{
  return sub_1002FF8E0((void (*)(_QWORD))&_swift_release);
}

id sub_10031281C()
{
  qword_1005632F8 = kMTImageDownloaderArtworkDidLoadNotification;
  return kMTImageDownloaderArtworkDidLoadNotification;
}

uint64_t sub_100312834()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100552108 != -1)
    swift_once(&qword_100552108, sub_10031281C);
  objc_msgSend(v1, "removeObserver:name:object:", v0, qword_1005632F8, 0);

  sub_10002CA30(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

double sub_1003128D0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  double result;
  Class isa;
  id v14;
  uint64_t v15;

  v1 = v0;
  v2 = (void *)Notification.name.getter();
  if (qword_100552108 != -1)
    swift_once(&qword_100552108, sub_10031281C);
  v3 = qword_1005632F8;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v4 == v7 && v6 == v8)
  {

    swift_bridgeObjectRelease_n(v6, 2);
    goto LABEL_10;
  }
  v10 = v8;
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);

  swift_bridgeObjectRelease(v6);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v10).n128_u64[0];
  if ((v11 & 1) != 0)
  {
LABEL_10:
    isa = Notification._bridgeToObjectiveC()().super.isa;
    v14 = (id)MTImageDownloaderArtworkDidLoadEntityUuids();

    v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String, &protocol witness table for String);
    swift_retain();
    sub_100312BC8(v15, v1);
    swift_bridgeObjectRelease(v15);
    *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  }
  return result;
}

uint64_t type metadata accessor for ImageDownloadObserver()
{
  return objc_opt_self(_TtC8Podcasts21ImageDownloadObserver);
}

uint64_t sub_100312AE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = *v0;
  swift_beginAccess(v1 + 16, v4, 0, 0);
  v2 = *(_QWORD *)(v1 + 16);
  sub_10002CA20(v2, *(_QWORD *)(v1 + 24));
  return v2;
}

uint64_t sub_100312B34(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = *v2;
  swift_beginAccess(v5 + 16, v9, 1, 0);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return sub_10002CA30(v6, v7);
}

uint64_t (*sub_100312B88(uint64_t a1))(_QWORD)
{
  _QWORD *v1;

  swift_beginAccess(*v1 + 16, a1, 33, 0);
  return j__swift_endAccess;
}

void sub_100312BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (**v6)(uint64_t, uint64_t);
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;

  v21 = a2;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (void (**)(uint64_t, uint64_t))(a2 + 16);
  swift_bridgeObjectRetain(a1);
  swift_beginAccess(v6, v20, 0, 0);
  v7 = 0;
  v8 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    while (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      v11 = *v6;
      if (*v6)
        goto LABEL_23;
    }
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v8)
      goto LABEL_24;
    v13 = *(_QWORD *)(v19 + 8 * v12);
    ++v7;
    if (!v13)
    {
      v7 = v12 + 1;
      if (v12 + 1 >= v8)
        goto LABEL_24;
      v13 = *(_QWORD *)(v19 + 8 * v7);
      if (!v13)
      {
        v7 = v12 + 2;
        if (v12 + 2 >= v8)
          goto LABEL_24;
        v13 = *(_QWORD *)(v19 + 8 * v7);
        if (!v13)
        {
          v7 = v12 + 3;
          if (v12 + 3 >= v8)
            goto LABEL_24;
          v13 = *(_QWORD *)(v19 + 8 * v7);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v7 << 6);
    v11 = *v6;
    if (*v6)
    {
LABEL_23:
      v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
      v16 = *v15;
      v17 = v15[1];
      v18 = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRetain(v17);
      sub_10002CA20((uint64_t)v11, v18);
      v11(v16, v17);
      sub_10002CA30((uint64_t)v11, v18);
      swift_bridgeObjectRelease(v17);
    }
  }
  v14 = v12 + 4;
  if (v14 >= v8)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v13 = *(_QWORD *)(v19 + 8 * v14);
  if (v13)
  {
    v7 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v7 >= v8)
      goto LABEL_24;
    v13 = *(_QWORD *)(v19 + 8 * v7);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_26:
  __break(1u);
}

void sub_100312DAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, _QWORD, __n128), uint64_t a7)
{
  uint64_t v11;
  uint64_t Strong;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __n128 v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  _QWORD v86[3];
  _BYTE v87[16];
  _QWORD v88[2];
  _QWORD v89[5];
  __int128 v90;
  __int128 v91;
  _BYTE v92[32];

  v11 = a5 + 16;
  swift_beginAccess(a5 + 16, v92, 0, 0);
  Strong = swift_weakLoadStrong(v11);
  if (!Strong)
  {
    ((void (*)(uint64_t, _QWORD, uint64_t))a6)(1, 0, 2);
    return;
  }
  v13 = (_QWORD *)Strong;
  if (a4)
  {
    v14 = swift_errorRetain();
    v15 = static os_log_type_t.error.getter(v14);
    v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v17 = (void *)static OS_os_log.downloads.getter(v16);
    v18 = sub_10003F544(&qword_1005559A0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1003CA200;
    swift_getErrorValue(a4, v87, v86);
    v20 = Error.localizedDescription.getter(v86[1], v86[2]);
    v22 = v21;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_10003E198();
    *(_QWORD *)(v19 + 32) = v20;
    *(_QWORD *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v17, "Failed to fetch asset headers. Network error: %{public}s", 56, 2, v19);

    swift_bridgeObjectRelease(v19);
    v23 = (void *)_convertErrorToNSError(_:)(a4);
    v24 = objc_msgSend(v23, "code");

    if (v24 == (id)-999)
    {
      v25 = 1;
    }
    else
    {
      v38 = (void *)_convertErrorToNSError(_:)(a4);
      v39 = objc_msgSend(v38, "code");

      if (v39 != (id)-1009)
      {
        swift_errorRetain();
        ((void (*)(uint64_t, _QWORD, uint64_t))a6)(a4, 0, 128);
        swift_release(v13);
        swift_errorRelease();
        goto LABEL_16;
      }
      v25 = 0;
    }
    ((void (*)(uint64_t, _QWORD, uint64_t))a6)(v25, 0, 2);
    swift_release(v13);
LABEL_16:
    swift_errorRelease();
    return;
  }
  if (!a3 || (v26 = objc_opt_self(NSHTTPURLResponse), (v27 = swift_dynamicCastObjCClass(a3, v26)) == 0))
  {
    v40 = sub_10033F96C();
    v41 = static os_log_type_t.error.getter(v40);
    v42 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v43 = (void *)static OS_os_log.downloads.getter(v42);
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v43, "Invalid response. Can't create HTTPURLResponse.", 47, 2, _swiftEmptyArrayStorage);

    ((void (*)(_QWORD, _QWORD, uint64_t))a6)(0, 0, 192);
    swift_release(v13);
    return;
  }
  v28 = (void *)v27;
  v29 = a3;
  v30 = (uint64_t)objc_msgSend(v28, "statusCode");
  if (v30 < 200 || (v30 = (uint64_t)objc_msgSend(v28, "statusCode"), v30 >= 300))
  {
    v31 = static os_log_type_t.error.getter(v30);
    v32 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v33 = (void *)static OS_os_log.downloads.getter(v32);
    v34 = sub_10003F544(&qword_1005559A0);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_1003CA200;
    v36 = objc_msgSend(v28, "statusCode");
    *(_QWORD *)(v35 + 56) = &type metadata for Int;
    *(_QWORD *)(v35 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v35 + 32) = v36;
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v33, "Request failure, status code: %{public}d", 40, 2, v35);

    v37 = swift_bridgeObjectRelease(v35);
LABEL_35:
    v59 = 0;
    v60 = 192;
    goto LABEL_36;
  }
  v44 = objc_msgSend(v28, "allHeaderFields");
  v45 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v44, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  strcpy((char *)v88, "Content-Length");
  HIBYTE(v88[1]) = -18;
  AnyHashable.init<A>(_:)(v88, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v45 + 16) && (v46 = sub_1001CCFC0((uint64_t)v89), (v47 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(v45 + 56) + 32 * v46, (uint64_t)&v90);
  }
  else
  {
    v90 = 0u;
    v91 = 0u;
  }
  swift_bridgeObjectRelease(v45);
  sub_100048644((uint64_t)v89);
  if (!*((_QWORD *)&v91 + 1))
  {
    sub_100007A28((uint64_t)&v90, (uint64_t *)&unk_100552300);
    goto LABEL_33;
  }
  if ((swift_dynamicCast(v88, &v90, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_33:
    v56 = static os_log_type_t.default.getter();
    v57 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v58 = (void *)static OS_os_log.downloads.getter(v57);
    os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, v58, "Content-Length header is missing in the response.", 49, 2, _swiftEmptyArrayStorage);
LABEL_34:

    goto LABEL_35;
  }
  v48 = v88[1];
  v49 = HIBYTE(v88[1]) & 0xF;
  v50 = v88[0] & 0xFFFFFFFFFFFFLL;
  if ((v88[1] & 0x2000000000000000) != 0)
    v51 = HIBYTE(v88[1]) & 0xF;
  else
    v51 = v88[0] & 0xFFFFFFFFFFFFLL;
  if (!v51)
  {
    swift_bridgeObjectRelease(v88[1]);
LABEL_86:
    v83 = static os_log_type_t.error.getter(v70);
    v84 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v58 = (void *)static OS_os_log.downloads.getter(v84);
    os_log(_:dso:log:_:_:)(v83, &_mh_execute_header, v58, "Can't create size from value provided in Content-Length header", 62, 2, _swiftEmptyArrayStorage);
    goto LABEL_34;
  }
  if ((v88[1] & 0x1000000000000000) != 0)
  {
    v53 = sub_1002D6014(v88[0], v88[1], 10);
    v55 = v85;
    goto LABEL_72;
  }
  if ((v88[1] & 0x2000000000000000) == 0)
  {
    if ((v88[0] & 0x1000000000000000) != 0)
      v52 = (unsigned __int8 *)((v88[1] & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v52 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v88[0], v88[1]);
    v53 = (uint64_t)sub_1002D6000(v52, v50, 10);
    v55 = v54 & 1;
LABEL_72:
    swift_bridgeObjectRelease(v48);
    if ((v55 & 1) == 0 && v53 >= 1)
    {
      v71 = v13[10];
      if (v71 == 1 || v71 == 2 && v13[9] < v53)
      {
        sub_100313760(v53, a6, a7);
        goto LABEL_37;
      }
      v72 = static os_log_type_t.default.getter();
      v73 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v74 = (void *)static OS_os_log.downloads.getter(v73);
      v75 = sub_10003F544(&qword_1005559A0);
      v76 = swift_allocObject(v75, 112, 7);
      *(_OWORD *)(v76 + 16) = xmmword_1003CA220;
      *(_QWORD *)(v76 + 56) = &type metadata for Int64;
      *(_QWORD *)(v76 + 64) = &protocol witness table for Int64;
      *(_QWORD *)(v76 + 32) = v53;
      v77 = v13[2];
      v78 = v13[3];
      *(_QWORD *)(v76 + 96) = &type metadata for String;
      *(_QWORD *)(v76 + 104) = sub_10003E198();
      *(_QWORD *)(v76 + 72) = v77;
      *(_QWORD *)(v76 + 80) = v78;
      *(_QWORD *)&v79 = swift_bridgeObjectRetain(v78).n128_u64[0];
      os_log(_:dso:log:_:_:)(v72, &_mh_execute_header, v74, "Asset size is %{iec-bytes}d. OK for downloading episode %{public}s", 66, 2, v76, v79);

      v37 = swift_bridgeObjectRelease(v76);
      v59 = v53;
      v60 = 64;
LABEL_36:
      a6(v59, 0, v60, v37);
LABEL_37:
      swift_release(v13);

      return;
    }
    goto LABEL_86;
  }
  v89[0] = v88[0];
  v89[1] = v88[1] & 0xFFFFFFFFFFFFFFLL;
  if (LOBYTE(v88[0]) == 43)
  {
    if ((v88[1] & 0xF00000000000000) == 0)
      goto LABEL_90;
    if (v49 == 1 || (BYTE1(v88[0]) - 48) > 9u)
      goto LABEL_59;
    v53 = (BYTE1(v88[0]) - 48);
    if (v49 != 2)
    {
      if ((BYTE2(v88[0]) - 48) > 9u)
        goto LABEL_59;
      v53 = 10 * (BYTE1(v88[0]) - 48) + (BYTE2(v88[0]) - 48);
      v61 = v49 - 3;
      if (v61)
      {
        v62 = (unsigned __int8 *)v89 + 3;
        while (1)
        {
          v63 = *v62 - 48;
          if (v63 > 9)
            goto LABEL_59;
          v64 = 10 * v53;
          if ((unsigned __int128)(v53 * (__int128)10) >> 64 != (10 * v53) >> 63)
            goto LABEL_59;
          v53 = v64 + v63;
          if (__OFADD__(v64, v63))
            goto LABEL_59;
          v55 = 0;
          ++v62;
          if (!--v61)
            goto LABEL_72;
        }
      }
    }
LABEL_71:
    v55 = 0;
    goto LABEL_72;
  }
  if (LOBYTE(v88[0]) != 45)
  {
    if ((v88[1] & 0xF00000000000000) == 0 || (LOBYTE(v88[0]) - 48) > 9u)
      goto LABEL_59;
    v53 = (LOBYTE(v88[0]) - 48);
    if (v49 != 1)
    {
      if ((BYTE1(v88[0]) - 48) > 9u)
        goto LABEL_59;
      v53 = 10 * (LOBYTE(v88[0]) - 48) + (BYTE1(v88[0]) - 48);
      v65 = v49 - 2;
      if (v65)
      {
        v66 = (unsigned __int8 *)v89 + 2;
        while (1)
        {
          v67 = *v66 - 48;
          if (v67 > 9)
            goto LABEL_59;
          v68 = 10 * v53;
          if ((unsigned __int128)(v53 * (__int128)10) >> 64 != (10 * v53) >> 63)
            goto LABEL_59;
          v53 = v68 + v67;
          if (__OFADD__(v68, v67))
            goto LABEL_59;
          v55 = 0;
          ++v66;
          if (!--v65)
            goto LABEL_72;
        }
      }
    }
    goto LABEL_71;
  }
  if ((v88[1] & 0xF00000000000000) != 0)
  {
    if (v49 != 1 && (BYTE1(v88[0]) - 48) <= 9u)
    {
      if (v49 == 2)
      {
        v55 = 0;
        v53 = -(uint64_t)(BYTE1(v88[0]) - 48);
        goto LABEL_72;
      }
      if ((BYTE2(v88[0]) - 48) <= 9u)
      {
        v53 = -10 * (BYTE1(v88[0]) - 48) - (BYTE2(v88[0]) - 48);
        v69 = v49 - 3;
        if (!v69)
          goto LABEL_71;
        v80 = (unsigned __int8 *)v89 + 3;
        while (1)
        {
          v81 = *v80 - 48;
          if (v81 > 9)
            break;
          v82 = 10 * v53;
          if ((unsigned __int128)(v53 * (__int128)10) >> 64 != (10 * v53) >> 63)
            break;
          v53 = v82 - v81;
          if (__OFSUB__(v82, v81))
            break;
          v55 = 0;
          ++v80;
          if (!--v69)
            goto LABEL_72;
        }
      }
    }
LABEL_59:
    v53 = 0;
    v55 = 1;
    goto LABEL_72;
  }
  __break(1u);
LABEL_90:
  __break(1u);
}

double sub_1003136B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v6;
  uint64_t v7;
  void (*v8)(void *, unint64_t, void *, void *);
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  double result;

  v6 = a2;
  v8 = *(void (**)(void *, unint64_t, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    swift_retain();
    v9 = v6;
    v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v11 = v10;

  }
  else
  {
    swift_retain();
    v11 = 0xF000000000000000;
  }
  v12 = a3;
  v13 = a4;
  v8(v6, v11, a3, a4);

  sub_1001C0F60((uint64_t)v6, v11);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

double sub_100313760(uint64_t a1, void (*a2)(uint64_t, uint64_t, _QWORD, __n128), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  void *object;
  id v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  __n128 v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  double result;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, _QWORD, __n128);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t countAndFlagsBits;
  uint64_t v81;
  uint64_t v82;
  _QWORD aBlock[5];
  _QWORD *v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  __chkstk_darwin();
  v73 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v71 = *(_QWORD *)(v10 - 8);
  v72 = v10;
  __chkstk_darwin();
  v70 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v3 + 72);
  v13 = swift_allocObject(&unk_1004C2338, 24, 7);
  swift_weakInit(v13 + 16, v4);
  v14 = (_QWORD *)swift_allocObject(&unk_1004C2360, 56, 7);
  v66 = v12;
  v14[2] = v12;
  v14[3] = a1;
  v14[4] = v13;
  v14[5] = a2;
  v78 = v14;
  v14[6] = a3;
  v15 = swift_allocObject(&unk_1004C2338, 24, 7);
  swift_weakInit(v15 + 16, v4);
  v16 = (_QWORD *)swift_allocObject(&unk_1004C2388, 48, 7);
  v16[2] = a1;
  v16[3] = v15;
  v69 = a2;
  v16[4] = a2;
  v16[5] = a3;
  v79 = v16;
  v17 = objc_allocWithZone((Class)NSNumber);
  v68 = a3;
  swift_retain_n(a3, 2);
  v67 = a1;
  v18 = objc_msgSend(v17, "initWithLongLong:", a1);
  v19 = static Localization.fileSize(_:)();
  v81 = v20;
  v82 = v19;

  v21 = (void *)objc_opt_self(NSBundle);
  v22 = objc_msgSend(v21, "mainBundle");
  v85._object = (void *)0xE000000000000000;
  v23._object = (void *)0x800000010043CB70;
  v23._countAndFlagsBits = 0xD00000000000001DLL;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v85._countAndFlagsBits = 0;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v85);
  countAndFlagsBits = v25._countAndFlagsBits;

  v77 = sub_10003F544(&qword_1005559A0);
  v26 = swift_allocObject(v77, 72, 7);
  v76 = xmmword_1003CA200;
  *(_OWORD *)(v26 + 16) = xmmword_1003CA200;
  v27 = *(_QWORD *)(v4 + 32);
  v28 = *(void **)(v4 + 40);
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  v29 = sub_10003E198();
  *(_QWORD *)(v26 + 64) = v29;
  if (v28)
  {
    object = v28;
  }
  else
  {
    v31 = objc_msgSend(v21, "mainBundle");
    v32._countAndFlagsBits = 0xD00000000000002DLL;
    v86._object = (void *)0xE000000000000000;
    v32._object = (void *)0x800000010043CB90;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    v86._countAndFlagsBits = 0;
    v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)(unint64_t)v27, (NSBundle)v31, v33, v86);
    v27 = v34._countAndFlagsBits;
    object = v34._object;

    v28 = 0;
  }
  *(_QWORD *)(v26 + 32) = v27;
  *(_QWORD *)(v26 + 40) = object;
  swift_bridgeObjectRetain(v28);
  v35 = static String.localizedStringWithFormat(_:_:)(countAndFlagsBits, v25._object, v26);
  v37 = v36;
  swift_bridgeObjectRelease(v25._object);
  v38 = objc_msgSend(v21, "mainBundle", swift_bridgeObjectRelease(v26).n128_f64[0]);
  v39 = v81;
  if (v81)
  {
    v40._countAndFlagsBits = 0xD000000000000029;
    v87._object = (void *)0xE000000000000000;
    v40._object = (void *)0x800000010043CBF0;
    v41._countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    v87._countAndFlagsBits = 0;
    v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, (Swift::String_optional)0, (NSBundle)v38, v41, v87);

    v43 = swift_allocObject(v77, 72, 7);
    *(_OWORD *)(v43 + 16) = v76;
    *(_QWORD *)(v43 + 56) = &type metadata for String;
    *(_QWORD *)(v43 + 64) = v29;
    *(_QWORD *)(v43 + 32) = v82;
    *(_QWORD *)(v43 + 40) = v39;
    v44 = static String.localizedStringWithFormat(_:_:)(v42._countAndFlagsBits, v42._object, v43);
    v46 = v45;
    swift_bridgeObjectRelease(v42._object);
    swift_bridgeObjectRelease(v43);
    if ((*(_BYTE *)(v4 + 96) & 1) != 0)
    {
LABEL_6:
      sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
      v48 = (void *)static OS_dispatch_queue.main.getter(v47);
      v49 = (_QWORD *)swift_allocObject(&unk_1004C23B0, 80, 7);
      v49[2] = v35;
      v49[3] = v37;
      v49[4] = v44;
      v49[5] = v46;
      v50 = v78;
      v51 = v79;
      v49[6] = sub_100314480;
      v49[7] = v50;
      v49[8] = sub_1003144BC;
      v49[9] = v51;
      aBlock[4] = sub_100314514;
      v84 = v49;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100027AF8;
      aBlock[3] = &unk_1004C23C8;
      v52 = _Block_copy(aBlock);
      v53 = v84;
      swift_retain();
      swift_retain();
      swift_release(v53);
      v54 = v70;
      static DispatchQoS.unspecified.getter(v55);
      aBlock[0] = _swiftEmptyArrayStorage;
      v56 = sub_10017F258();
      v57 = sub_10003F544((uint64_t *)&unk_10055B200);
      v58 = sub_100026534();
      v59 = v73;
      v60 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v57, v58, v75, v56);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v54, v59, v52);
      _Block_release(v52);
      swift_release(v50);
      swift_release(v51);

      (*(void (**)(char *, uint64_t))(v74 + 8))(v59, v60);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v54, v72);
      return result;
    }
  }
  else
  {
    v62._countAndFlagsBits = 0xD000000000000027;
    v88._object = (void *)0xE000000000000000;
    v62._object = (void *)0x800000010043CBC0;
    v63._countAndFlagsBits = 0;
    v63._object = (void *)0xE000000000000000;
    v88._countAndFlagsBits = 0;
    v64 = NSLocalizedString(_:tableName:bundle:value:comment:)(v62, (Swift::String_optional)(unint64_t)v82, (NSBundle)v38, v63, v88);
    v44 = v64._countAndFlagsBits;
    v46 = v64._object;

    if ((*(_BYTE *)(v4 + 96) & 1) != 0)
      goto LABEL_6;
  }
  swift_bridgeObjectRelease(v46);
  v65 = swift_bridgeObjectRelease(v37);
  v69(v67, v66, 0, v65);
  swift_release(v78);
  *(_QWORD *)&result = swift_release(v79).n128_u64[0];
  return result;
}

uint64_t sub_100313D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD, __n128))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  _BYTE v22[24];

  v8 = a4 + 16;
  v9 = static os_log_type_t.default.getter();
  v10 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v11 = (void *)static OS_os_log.downloads.getter(v10);
  v12 = sub_10003F544(&qword_1005559A0);
  v13 = swift_allocObject(v12, 152, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1003CA240;
  *(_QWORD *)(v13 + 56) = &type metadata for Int64;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v13 + 96) = &type metadata for Int64;
  *(_QWORD *)(v13 + 104) = &protocol witness table for Int64;
  *(_QWORD *)(v13 + 72) = a3;
  swift_beginAccess(v8, v22, 0, 0);
  Strong = swift_weakLoadStrong(v8);
  if (Strong)
  {
    v15 = Strong;
    v17 = *(_QWORD *)(Strong + 16);
    v16 = *(_QWORD *)(Strong + 24);
    swift_bridgeObjectRetain(v16);
    swift_release(v15);
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  *(_QWORD *)(v13 + 136) = &type metadata for String;
  *(_QWORD *)(v13 + 144) = sub_10003E198();
  if (v16)
    v18 = v17;
  else
    v18 = 0;
  v19 = 0xE000000000000000;
  if (v16)
    v19 = v16;
  *(_QWORD *)(v13 + 112) = v18;
  *(_QWORD *)(v13 + 120) = v19;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v11, "Asset is over size limit of %{iec-bytes}d, asset size %{iec-bytes}d. User cancels download episode %{public}s.", 110, 2, v13);

  v20 = swift_bridgeObjectRelease(v13);
  return a5(a3, a2, 0, v20);
}

uint64_t sub_100313F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, uint64_t, __n128))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  _BYTE v20[24];

  v6 = a3 + 16;
  v7 = static os_log_type_t.default.getter();
  v8 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v9 = (void *)static OS_os_log.downloads.getter(v8);
  v10 = sub_10003F544(&qword_1005559A0);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1003CA220;
  *(_QWORD *)(v11 + 56) = &type metadata for Int64;
  *(_QWORD *)(v11 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v11 + 32) = a2;
  swift_beginAccess(v6, v20, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    v13 = Strong;
    v15 = *(_QWORD *)(Strong + 16);
    v14 = *(_QWORD *)(Strong + 24);
    swift_bridgeObjectRetain(v14);
    swift_release(v13);
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = sub_10003E198();
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  v17 = 0xE000000000000000;
  if (v14)
    v17 = v14;
  *(_QWORD *)(v11 + 72) = v16;
  *(_QWORD *)(v11 + 80) = v17;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v9, "Asset size is %{iec-bytes}d. User OK to download episode %{public}s", 67, 2, v11);

  v18 = swift_bridgeObjectRelease(v11);
  return a4(a2, 0, 64, v18);
}

void sub_100314070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSString v13;
  NSString v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  unint64_t v32;
  void *v33;
  id v34;
  void **aBlock;
  uint64_t v37;
  void (*v38)(uint64_t, void *);
  void *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;

  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v15 = objc_msgSend((id)objc_opt_self(MTAlertController), "alertControllerWithTitle:message:preferredStyle:", v13, v14, 1);

  v16._object = (void *)0x800000010043CC20;
  v16._countAndFlagsBits = 0xD000000000000025;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v18 = localizedStringReferencingWiFi(_:comment:)(v16, v17);
  static String.localizedStringWithFormat(_:_:)(v18._countAndFlagsBits, v18._object, _swiftEmptyArrayStorage);
  v20 = v19;
  swift_bridgeObjectRelease(v18._object);
  sub_10002CA20(a5, a6);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  if (a5)
  {
    v40 = a5;
    v41 = a6;
    aBlock = _NSConcreteStackBlock;
    v37 = 1107296256;
    v38 = sub_1001AC13C;
    v39 = &unk_1004C2418;
    v22 = _Block_copy(&aBlock);
    swift_release(v41);
  }
  else
  {
    v22 = 0;
  }
  v23 = (void *)objc_opt_self(UIAlertAction);
  v24 = objc_msgSend(v23, "actionWithTitle:style:handler:", v21, 0, v22);
  _Block_release(v22);

  v25 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v26._countAndFlagsBits = 0xD000000000000027;
  v42._object = (void *)0xE000000000000000;
  v26._object = (void *)0x800000010043CC50;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  v42._countAndFlagsBits = 0;
  v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v42);

  static String.localizedStringWithFormat(_:_:)(v28._countAndFlagsBits, v28._object, _swiftEmptyArrayStorage);
  v30 = v29;
  swift_bridgeObjectRelease(v28._object);
  sub_10002CA20(a7, a8);
  v31 = String._bridgeToObjectiveC()();
  v32 = swift_bridgeObjectRelease(v30).n128_u64[0];
  if (a7)
  {
    v40 = a7;
    v41 = a8;
    aBlock = _NSConcreteStackBlock;
    v37 = 1107296256;
    v38 = sub_1001AC13C;
    v39 = &unk_1004C23F0;
    v33 = _Block_copy(&aBlock);
    v32 = swift_release(v41).n128_u64[0];
  }
  else
  {
    v33 = 0;
  }
  v34 = objc_msgSend(v23, "actionWithTitle:style:handler:", v31, 0, v33, *(double *)&v32);
  _Block_release(v33);

  objc_msgSend(v15, "addAction:", v24);
  objc_msgSend(v15, "addAction:", v34);
  objc_msgSend(v15, "presentAnimated:completion:", 1, 0);

}

uint64_t sub_1003143CC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocClassInstance(v0, 97, 7);
}

uint64_t type metadata accessor for DownloadPreflightValidator()
{
  return objc_opt_self(_TtC8Podcasts26DownloadPreflightValidator);
}

uint64_t sub_100314430()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100314454()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100314480(uint64_t a1)
{
  uint64_t v1;

  return sub_100313D84(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128))(v1 + 40));
}

uint64_t sub_100314490()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003144BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100313F00(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t, _QWORD, uint64_t, __n128))(v1 + 32));
}

uint64_t sub_1003144C8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  if (v0[6])
    swift_release(v0[7]);
  if (v0[8])
    swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_100314514()
{
  uint64_t *v0;

  sub_100314070(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9]);
}

void sub_100314528(uint64_t a1, void (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  NSURL *v16;
  void *v17;
  void *v18;
  id v19;
  NSString v20;
  double v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  __n128 v48;
  uint64_t v49;
  id v50;
  _QWORD aBlock[5];
  _QWORD *v52;

  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_1004C2450, 32, 7);
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  v13 = *(void **)(a1 + 88);
  swift_retain();
  v14 = v13;
  DownloadableURLOptions.url.getter();

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100007A28((uint64_t)v7, (uint64_t *)&unk_100553DC0);
    a2(2, 0, 2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    if (*(_QWORD *)(a1 + 80))
    {
      v15 = objc_allocWithZone((Class)NSMutableURLRequest);
      URL._bridgeToObjectiveC()(v16);
      v18 = v17;
      v19 = objc_msgSend(v15, "initWithURL:", v17);

      v20 = String._bridgeToObjectiveC()();
      objc_msgSend(v19, "setHTTPMethod:", v20);

      v21 = *(double *)(a1 + 64);
      v50 = v19;
      objc_msgSend(v19, "setTimeoutInterval:", v21);
      v22 = *(id *)(a1 + 88);
      v23 = DownloadableURLOptions.nonAppInitiated.getter();

      objc_msgSend(v19, "setNonAppInitiated:", v23 & 1);
      v24 = static os_log_type_t.default.getter();
      v25 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v26 = (void *)static OS_os_log.downloads.getter(v25);
      v27 = sub_10003F544(&qword_1005559A0);
      v28 = swift_allocObject(v27, 72, 7);
      *(_OWORD *)(v28 + 16) = xmmword_1003CA200;
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v28 + 56) = &type metadata for String;
      *(_QWORD *)(v28 + 64) = sub_10003E198();
      *(_QWORD *)(v28 + 32) = v29;
      *(_QWORD *)(v28 + 40) = v30;
      *(_QWORD *)&v31 = swift_bridgeObjectRetain(v30).n128_u64[0];
      os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v26, "Fetch asset size for episode: %{public}s", 40, 2, v28, v31);

      swift_bridgeObjectRelease(v28);
      v32 = *(void **)(a1 + 48);
      v33 = swift_allocObject(&unk_1004C2338, 24, 7);
      swift_weakInit(v33 + 16, a1);
      v34 = (_QWORD *)swift_allocObject(&unk_1004C2478, 40, 7);
      v34[2] = v33;
      v34[3] = sub_1003149F8;
      v34[4] = v12;
      aBlock[4] = sub_100314A2C;
      v52 = v34;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1003136B0;
      aBlock[3] = &unk_1004C2490;
      v35 = _Block_copy(aBlock);
      v36 = v52;
      v37 = v50;
      swift_retain();
      v38 = objc_msgSend(v32, "dataTaskWithRequest:completionHandler:", v37, v35, swift_release(v36).n128_f64[0]);
      _Block_release(v35);

      v39 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v38;

      v40 = *(void **)(a1 + 56);
      if (!v40)
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        swift_release(v12);

        return;
      }
      objc_msgSend(v40, "resume");

    }
    else
    {
      LODWORD(v50) = static os_log_type_t.default.getter();
      v41 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v42 = (void *)static OS_os_log.downloads.getter(v41);
      v43 = sub_10003F544(&qword_1005559A0);
      v44 = swift_allocObject(v43, 72, 7);
      *(_OWORD *)(v44 + 16) = xmmword_1003CA200;
      v46 = *(_QWORD *)(a1 + 16);
      v45 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v44 + 56) = &type metadata for String;
      *(_QWORD *)(v44 + 64) = sub_10003E198();
      *(_QWORD *)(v44 + 32) = v46;
      *(_QWORD *)(v44 + 40) = v45;
      *(_QWORD *)&v47 = swift_bridgeObjectRetain(v45).n128_u64[0];
      os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v42, "Always allow to download over cellular. Skip checking download size for episode %{public}s", 90, 2, v44, v47);

      v48 = swift_bridgeObjectRelease(v44);
      ((void (*)(_QWORD, _QWORD, uint64_t, __n128))a2)(0, 0, 64, v48);
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  swift_release(v12);
}

uint64_t sub_1003149D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003149F8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;

  return sub_10013FA94(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 16));
}

uint64_t sub_100314A00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100314A2C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;

  sub_100312DAC(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void (**)(uint64_t, uint64_t, _QWORD, __n128))(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t type metadata accessor for InstagramShareModel()
{
  return objc_opt_self(MTInstagramShareModel);
}

uint64_t type metadata accessor for InstagramShareUtil()
{
  return objc_opt_self(MTInstagramShareUtil);
}

void sub_100314C90()
{
  qword_100563530 = 0x3FD71C71C71C71C7;
}

void sub_100314CAC()
{
  qword_100563538 = 0x408C480000000000;
}

double sub_100314CC0()
{
  double v0;
  double result;

  if (qword_100552118 != -1)
    swift_once(&qword_100552118, sub_100314CAC);
  v0 = *(double *)&qword_100563538;
  if (qword_100552110 != -1)
    swift_once(&qword_100552110, sub_100314C90);
  result = v0 * *(double *)&qword_100563530;
  *(double *)&qword_100563540 = v0 * *(double *)&qword_100563530;
  return result;
}

double sub_100314D44()
{
  double result;

  if (qword_100552110 != -1)
    swift_once(&qword_100552110, sub_100314C90);
  result = *(double *)&qword_100563530 * 991.19;
  *(double *)&qword_100563548 = *(double *)&qword_100563530 * 991.19;
  return result;
}

void sub_100314D98()
{
  qword_100563550 = 0x4018000000000000;
}

double sub_100314DA8()
{
  double result;

  if (qword_100552110 != -1)
    swift_once(&qword_100552110, sub_100314C90);
  result = *(double *)&qword_100563530 * 889.5;
  *(double *)&qword_100563558 = *(double *)&qword_100563530 * 889.5;
  return result;
}

void sub_100314E00()
{
  qword_100563560 = 0xC054000000000000;
}

void sub_100314E10()
{
  qword_100563568 = 0;
}

double sub_100314E1C()
{
  double result;

  if (qword_100552110 != -1)
    swift_once(&qword_100552110, sub_100314C90);
  result = *(double *)&qword_100563530 * 87.76;
  *(double *)&qword_100563570 = *(double *)&qword_100563530 * 87.76;
  return result;
}

void sub_100314E70()
{
  qword_100563578 = 0x4036000000000000;
}

void sub_100314E80()
{
  qword_100563580 = 0x4032000000000000;
}

void sub_100314E90()
{
  qword_100563588 = 0x4022000000000000;
}

uint64_t sub_100314EA0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  unint64_t v41;
  Swift::String v42;
  Swift::String v43;

  sub_10003F544(&qword_10055B4F0);
  __chkstk_darwin();
  v1 = (char *)&v33 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100563610);
  __chkstk_darwin();
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_10003F544(&qword_100563618);
  v35 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin();
  v34 = (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for AttributedString(0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin();
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributeContainer(0);
  __chkstk_darwin();
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)objc_opt_self(NSBundle);
  v10 = objc_msgSend(v9, "mainBundle");
  v11._countAndFlagsBits = 0xD00000000000001ALL;
  v43._object = (void *)0x800000010043D020;
  v11._object = (void *)0x800000010043D000;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v42._countAndFlagsBits = 0xD000000000000013;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v42);

  AttributeContainer.init()();
  AttributedString.init(_:attributes:)(v13._countAndFlagsBits, v13._object, v8);
  KeyPath = swift_getKeyPath(&unk_1003D52C8, v14);
  v15 = swift_getKeyPath(&unk_1003D52F8, &KeyPath);
  v16 = (void *)objc_opt_self(UIFont);
  if (qword_100552168 != -1)
    swift_once(&qword_100552168, sub_100314E90);
  v40 = (uint64_t)objc_msgSend(v16, "systemFontOfSize:", *(double *)&qword_100563588);
  v17 = sub_100318068();
  AttributedString.subscript.setter(&v40, v15, v17);
  v18 = objc_msgSend(v9, "mainBundle");
  v43._countAndFlagsBits = 0xD000000000000015;
  v19._countAndFlagsBits = 0xD000000000000025;
  v43._object = (void *)0x800000010043D070;
  v19._object = (void *)0x800000010043D040;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v43);

  AttributeContainer.init()();
  AttributedString.init(_:attributes:)(v21._countAndFlagsBits, v21._object, v8);
  swift_getKeyPath(&unk_1003D52C8, v22);
  v43._object = (void *)__chkstk_darwin();
  v23 = swift_getKeyPath(&unk_1003D52F8, &v43._object);
  if (qword_100552160 != -1)
    swift_once(&qword_100552160, sub_100314E80);
  v40 = (uint64_t)objc_msgSend(v16, "systemFontOfSize:", *(double *)&qword_100563580);
  AttributedString.subscript.setter(&v40, v23, v17);
  v40 = 16421;
  v41 = 0xE200000000000000;
  v24 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v1, 1, 1, v24);
  v25 = sub_100318144();
  v26 = sub_10016D37C();
  v27 = v38;
  AttributedStringProtocol.range<A>(of:options:locale:)(&v40, 0, v1, v38, &type metadata for String, v25, v26);
  sub_100007A28((uint64_t)v1, &qword_10055B4F0);
  v28 = swift_bridgeObjectRelease(v41);
  v29 = v37;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v35 + 48))(v3, 1, v37, v28) == 1)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v27);
    return sub_100007A28((uint64_t)v3, &qword_100563610);
  }
  else
  {
    v31 = v34;
    sub_10003DC78((uint64_t)v3, v34, &qword_100563618);
    v32 = sub_10002F9C8(&qword_100563630, &qword_100563618, (uint64_t)&protocol conformance descriptor for Range<A>);
    AttributedString.replaceSubrange<A, B>(_:with:)(v31, v6, v29, v27, v32, v25);
    sub_100007A28(v31, &qword_100563618);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v6, v27);
  }
}

uint64_t sub_1003153BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v5 = *a1;
  v6 = v2;
  v3 = sub_10003F544(&qword_100563638);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v6, &v5, v3, &protocol witness table for AnyKeyPath) & 1;
}

uint64_t sub_100315414@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  sub_10003F544(&qword_1005636D8);
  __chkstk_darwin();
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_1005636E0);
  __chkstk_darwin();
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_1005636E8);
  v8 = __chkstk_darwin();
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static Alignment.center.getter(v8);
  v13 = v12;
  *(_QWORD *)v3 = static HorizontalAlignment.center.getter();
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 0;
  v14 = sub_10003F544(&qword_1005636F0);
  v15 = sub_1003155C4(v1, (uint64_t)&v3[*(int *)(v14 + 44)]);
  v16 = static Color.white.getter(v15);
  KeyPath = swift_getKeyPath(&unk_1003D53A8, v17);
  sub_100007A64((uint64_t)v3, (uint64_t)v6, &qword_1005636D8);
  v19 = (uint64_t *)&v6[*(int *)(v4 + 36)];
  *v19 = KeyPath;
  v19[1] = v16;
  sub_100007A28((uint64_t)v3, &qword_1005636D8);
  sub_10003DC78((uint64_t)v6, (uint64_t)v10, &qword_1005636E0);
  v20 = (uint64_t *)&v10[*(int *)(v7 + 36)];
  *v20 = v11;
  v20[1] = v13;
  sub_100007A64((uint64_t)v10, v23, &qword_1005636E8);
  return sub_100007A28((uint64_t)v10, &qword_1005636E8);
}

uint64_t sub_1003155C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  double v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  id v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  double v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  __n128 v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  __n128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  __n128 v174;
  double v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  __n128 v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __n128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  __n128 v201;
  double v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t KeyPath;
  double v211;
  __n128 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v258;
  void (*v259)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v260;
  char *v261;
  uint64_t v262;
  char *v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  char v335;
  uint64_t v336;
  char v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned __int8 v341;
  uint64_t v342;
  unsigned __int8 v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  char v352;
  _BYTE v353[7];
  _BYTE v354[320];

  v282 = a2;
  sub_10003F544(&qword_1005636F8);
  __chkstk_darwin();
  v279 = (uint64_t *)((char *)&v258 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v278 = sub_10003F544(&qword_100563700);
  __chkstk_darwin();
  v281 = (uint64_t)&v258 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v280 = (uint64_t)&v258 - v5;
  v273 = sub_10003F544(&qword_100563708);
  __chkstk_darwin();
  v276 = (uint64_t)&v258 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = sub_10003F544(&qword_100563710);
  __chkstk_darwin();
  v275 = (uint64_t)&v258 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100563718);
  __chkstk_darwin();
  v285 = (char *)&v258 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_100563720);
  v265 = *(_QWORD *)(v9 - 8);
  v266 = v9;
  __chkstk_darwin();
  v263 = (char *)&v258 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v261 = (char *)&v258 - v11;
  sub_10003F544(&qword_100563728);
  __chkstk_darwin();
  v262 = (uint64_t)&v258 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v283 = (unint64_t)&v258 - v13;
  __chkstk_darwin();
  *(_QWORD *)&v264 = (char *)&v258 - v14;
  __chkstk_darwin();
  v284 = (uint64_t)&v258 - v15;
  sub_10003F544(&qword_100563730);
  __chkstk_darwin();
  v277 = (uint64_t)&v258 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v288 = (uint64_t)&v258 - v17;
  v271 = sub_10003F544(&qword_100563738);
  __chkstk_darwin();
  v272 = (uint64_t)&v258 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v20 = (double *)((char *)&v258 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for Image.ResizingMode(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin();
  v24 = (char *)&v258 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10003F544(&qword_100563740);
  __chkstk_darwin();
  v27 = (char *)&v258 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = sub_10003F544(&qword_100563748);
  __chkstk_darwin();
  v287 = (uint64_t)&v258 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v286 = (uint64_t)&v258 - v29;
  v289 = a1;
  v30 = Image.init(uiImage:)(*(id *)(*a1 + OBJC_IVAR___MTInstagramShareModel_artwork));
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for Image.ResizingMode.stretch(_:), v21);
  v268 = Image.resizable(capInsets:resizingMode:)(v24, v30, 0.0, 0.0, 0.0, 0.0);
  v31 = swift_release(v30);
  v32 = (*(uint64_t (**)(char *, uint64_t, __n128))(v22 + 8))(v24, v21, v31);
  if (qword_100552120 != -1)
    v32 = swift_once(&qword_100552120, sub_100314CC0);
  v33 = *(double *)&qword_100563540;
  v34 = qword_100563540;
  v35 = static Alignment.center.getter(v32);
  _FrameLayout.init(width:height:alignment:)(&v334, v34, 0, v34, 0, v35, v36);
  v37 = v334;
  v38 = v335;
  v39 = v336;
  v40 = v337;
  v267 = v338;
  *((_QWORD *)&v264 + 1) = v339;
  v41 = v33 * 0.033;
  v42 = (char *)v20 + *(int *)(v269 + 20);
  v43 = enum case for RoundedCornerStyle.continuous(_:);
  v44 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v42, v43, v44);
  *v20 = v41;
  v20[1] = v41;
  v45 = v272;
  sub_10014FDF8((uint64_t)v20, v272, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v45 + *(int *)(v271 + 36)) = 256;
  sub_100007A64(v45, (uint64_t)&v27[*(int *)(v25 + 36)], &qword_100563738);
  v46 = v267;
  v47 = v268;
  *(_QWORD *)v27 = v268;
  *((_QWORD *)v27 + 1) = v37;
  v27[16] = v38;
  *((_QWORD *)v27 + 3) = v39;
  v27[32] = v40;
  v48 = *((_QWORD *)&v264 + 1);
  *((_QWORD *)v27 + 5) = v46;
  *((_QWORD *)v27 + 6) = v48;
  swift_retain();
  sub_100007A28(v45, &qword_100563738);
  sub_10003F970((uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v47);
  v50 = static Alignment.center.getter(v49);
  v52 = v51;
  v53 = static Alignment.center.getter(v50);
  v55 = v54;
  sub_100316B8C(v354);
  v56 = v287;
  sub_100007A64((uint64_t)v27, v287, &qword_100563740);
  v57 = v56 + *(int *)(v270 + 36);
  *(_QWORD *)v57 = v53;
  *(_QWORD *)(v57 + 8) = v55;
  memcpy((void *)(v57 + 16), v354, 0x130uLL);
  *(_OWORD *)(v57 + 320) = xmmword_1003D5270;
  *(_BYTE *)(v57 + 336) = 0;
  *(_DWORD *)(v57 + 337) = *(_DWORD *)v353;
  *(_DWORD *)(v57 + 340) = *(_DWORD *)&v353[3];
  *(_QWORD *)(v57 + 344) = 0xC006000000000000;
  *(_QWORD *)(v57 + 352) = 0xC006000000000000;
  *(_QWORD *)(v57 + 360) = v50;
  *(_QWORD *)(v57 + 368) = v52;
  sub_100007A28((uint64_t)v27, &qword_100563740);
  v58 = sub_10003DC78(v56, v286, &qword_100563748);
  v59 = static Alignment.center.getter(v58);
  _FrameLayout.init(width:height:alignment:)(&v340, 0, 1, 0x4034000000000000, 0, v59, v60);
  v272 = v340;
  LODWORD(v271) = v341;
  v270 = v342;
  LODWORD(v269) = v343;
  v267 = v345;
  v268 = v344;
  v61 = v289;
  v62 = *v289;
  v63 = (_QWORD *)(*v289 + OBJC_IVAR___MTInstagramShareModel_episodeName);
  v64 = v63[1];
  if (v64)
  {
    *(_QWORD *)&v264 = *v63;
    v65 = *(void **)((char *)v61 + *(int *)(type metadata accessor for SocialStoryPostView(0) + 28));
    v66 = objc_msgSend(v65, "stringForObjectValue:", *(_QWORD *)(v62 + OBJC_IVAR___MTInstagramShareModel_publishDate), swift_bridgeObjectRetain(v64).n128_f64[0]);
    if (v66)
    {
      v67 = v66;
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
      v70 = v69;

    }
    else
    {
      v68 = 0;
      v70 = 0xE000000000000000;
    }
    *((_QWORD *)&v264 + 1) = v64;
    *(_QWORD *)&v323 = v68;
    *((_QWORD *)&v323 + 1) = v70;
    v261 = (char *)sub_10016D37C();
    v156 = Text.init<A>(_:)(&v323, &type metadata for String, v261);
    v158 = v157;
    v160 = v159;
    v162 = v161;
    if (qword_100552158 != -1)
      swift_once(&qword_100552158, sub_100314E70);
    v163 = *(double *)&qword_100563578;
    v164 = type metadata accessor for Font.Design(0);
    v259 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 56);
    v260 = v164;
    v165 = (uint64_t)v285;
    v259(v285, 1, 1, v164);
    v166 = static Font.system(size:weight:design:)(0, 1, v165, v163);
    sub_100007A28(v165, &qword_100563718);
    v167 = v160 & 1;
    v168 = Text.font(_:)(v166, v156, v158, v167, v162);
    v170 = v169;
    LOBYTE(v165) = v171;
    v173 = v172;
    swift_release(v166);
    LOBYTE(v165) = v165 & 1;
    sub_10016ED14(v156, v158, v167);
    v174 = swift_bridgeObjectRelease(v162);
    *(_QWORD *)&v323 = v168;
    *((_QWORD *)&v323 + 1) = v170;
    LOBYTE(v324) = v165;
    *((_QWORD *)&v324 + 1) = v173;
    *(_QWORD *)&v325 = 0x3FE0000000000000;
    v175 = static Font.Weight.semibold.getter(v174);
    v176 = sub_10003F544(&qword_100563750);
    v177 = sub_1003186F4();
    v178 = v263;
    View.fontWeight(_:)(*(_QWORD *)&v175, 0, v176, v177);
    sub_10016ED14(v168, v170, v165);
    v179 = swift_bridgeObjectRelease(v173);
    v180 = *(double *)&qword_100563540;
    v181 = static Alignment.leading.getter(v179);
    v182 = v262;
    v184 = sub_100317340(0.0, 1, 0.0, 1, v180, 0, 0.0, 1, v262, 0.0, 1, 0.0, 1, v181, v183);
    (*(void (**)(char *, uint64_t, __n128))(v265 + 8))(v178, v266, v184);
    sub_10003DC78(v182, v283, &qword_100563728);
    v323 = v264;
    v185 = Text.init<A>(_:)(&v323, &type metadata for String, v261);
    v187 = v186;
    v189 = v188;
    v191 = v190 & 1;
    v192 = *(double *)&qword_100563578;
    v193 = (uint64_t)v285;
    v259(v285, 1, 1, v260);
    v194 = static Font.system(size:weight:design:)(0, 1, v193, v192);
    sub_100007A28(v193, &qword_100563718);
    v195 = Text.font(_:)(v194, v185, v187, v191, v189);
    v197 = v196;
    LOBYTE(v166) = v198;
    v200 = v199;
    swift_release(v194);
    LOBYTE(v194) = v166 & 1;
    sub_10016ED14(v185, v187, v191);
    v201 = swift_bridgeObjectRelease(v189);
    v202 = static Font.Weight.semibold.getter(v201);
    v203 = Text.fontWeight(_:)(*(_QWORD *)&v202, 0, v195, v197, v166 & 1, v200);
    v205 = v204;
    v207 = v206;
    LOBYTE(v166) = v208 & 1;
    sub_10016ED14(v195, v197, v194);
    swift_bridgeObjectRelease(v200);
    KeyPath = swift_getKeyPath(&unk_1003D53D8, v209);
    v346 = v203;
    v347 = v205;
    v348 = v166;
    v349 = v207;
    v350 = KeyPath;
    v351 = 0;
    v352 = 1;
    v211 = *(double *)&qword_100563540;
    v213 = static Alignment.leading.getter(v212);
    sub_10031750C(0.0, 1, 0.0, 1, v211, 0, 0.0, 1, (uint64_t)&v323, 0.0, 1, 0.0, 1, v213, v214);
    sub_10016ED14(v203, v205, v166);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v207);
    v309 = v331;
    v310 = v332;
    v311 = v333;
    v305 = v327;
    v306 = v328;
    v307 = v329;
    v308 = v330;
    v301 = v323;
    v302 = v324;
    v303 = v325;
    v304 = v326;
    v216 = v283;
    v215 = v284;
    sub_100007A64(v283, v284, &qword_100563728);
    v297 = v308;
    v298 = v309;
    v299 = v310;
    v300 = v311;
    v294 = v305;
    v295 = v306;
    v296 = v307;
    v290 = v301;
    v291 = v302;
    v292 = v303;
    v293 = v304;
    v217 = v275;
    sub_100007A64(v215, v275, &qword_100563728);
    v218 = v217 + *(int *)(sub_10003F544(&qword_100563760) + 48);
    v219 = v297;
    v220 = v298;
    v320 = v298;
    v321 = v299;
    v221 = v294;
    v222 = v294;
    v316 = v294;
    v317 = v295;
    v318 = v296;
    v319 = v297;
    v312 = v290;
    v313 = v291;
    v314 = v292;
    v315 = v293;
    v223 = v299;
    *(_OWORD *)(v218 + 128) = v298;
    *(_OWORD *)(v218 + 144) = v223;
    v224 = v295;
    v225 = v296;
    v226 = v295;
    *(_OWORD *)(v218 + 64) = v221;
    *(_OWORD *)(v218 + 80) = v224;
    v227 = v297;
    *(_OWORD *)(v218 + 96) = v225;
    *(_OWORD *)(v218 + 112) = v227;
    v228 = v291;
    v230 = v290;
    v229 = v291;
    *(_OWORD *)v218 = v290;
    *(_OWORD *)(v218 + 16) = v228;
    v231 = v293;
    v233 = v292;
    v232 = v293;
    *(_OWORD *)(v218 + 32) = v292;
    *(_OWORD *)(v218 + 48) = v231;
    v331 = v220;
    v332 = v299;
    v327 = v222;
    v328 = v226;
    v329 = v296;
    v330 = v219;
    v323 = v230;
    v324 = v229;
    v322 = v300;
    *(_QWORD *)(v218 + 160) = v300;
    v333 = v300;
    v325 = v233;
    v326 = v232;
    sub_1003187B4((uint64_t)&v312);
    sub_1003187B4((uint64_t)&v301);
    sub_100318800((uint64_t)&v323);
    sub_100007A28(v215, &qword_100563728);
    v234 = v276;
    sub_100007A64(v217, v276, &qword_100563710);
    swift_storeEnumTagMultiPayload(v234, v273, 0);
    v235 = sub_10002F9C8(&qword_100563768, &qword_100563710, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v234, v274, v274, v235, v235);
    sub_100007A28(v217, &qword_100563710);
    sub_100318800((uint64_t)&v301);
    v155 = sub_100007A28(v216, &qword_100563728);
    v154 = (uint64_t)v289;
  }
  else
  {
    v71 = *(_QWORD *)(v62 + OBJC_IVAR___MTInstagramShareModel_creatorName + 8);
    *(_QWORD *)&v323 = *(_QWORD *)(v62 + OBJC_IVAR___MTInstagramShareModel_creatorName);
    *((_QWORD *)&v323 + 1) = v71;
    v72 = sub_10016D37C();
    swift_bridgeObjectRetain(v71);
    v283 = v72;
    v73 = Text.init<A>(_:)(&v323, &type metadata for String, v72);
    v75 = v74;
    v77 = v76;
    v79 = v78;
    if (qword_100552158 != -1)
      swift_once(&qword_100552158, sub_100314E70);
    v80 = *(double *)&qword_100563578;
    *((_QWORD *)&v264 + 1) = type metadata accessor for Font.Design(0);
    v263 = *(char **)(*(_QWORD *)(*((_QWORD *)&v264 + 1) - 8) + 56);
    v81 = (uint64_t)v285;
    ((void (*)(char *, uint64_t, uint64_t, _QWORD))v263)(v285, 1, 1, *((_QWORD *)&v264 + 1));
    v82 = static Font.system(size:weight:design:)(0, 1, v81, v80);
    sub_100007A28(v81, &qword_100563718);
    v83 = v77 & 1;
    v84 = Text.font(_:)(v82, v73, v75, v83, v79);
    v86 = v85;
    LOBYTE(v81) = v87;
    v89 = v88;
    swift_release(v82);
    LOBYTE(v81) = v81 & 1;
    sub_10016ED14(v73, v75, v83);
    v90 = swift_bridgeObjectRelease(v79);
    *(_QWORD *)&v323 = v84;
    *((_QWORD *)&v323 + 1) = v86;
    LOBYTE(v324) = v81;
    *((_QWORD *)&v324 + 1) = v89;
    *(_QWORD *)&v325 = 0x3FE0000000000000;
    v91 = static Font.Weight.semibold.getter(v90);
    v92 = sub_10003F544(&qword_100563750);
    v93 = sub_1003186F4();
    v94 = v261;
    View.fontWeight(_:)(*(_QWORD *)&v91, 0, v92, v93);
    sub_10016ED14(v84, v86, v81);
    v95 = swift_bridgeObjectRelease(v89);
    v96 = *(double *)&qword_100563540;
    v97 = static Alignment.leading.getter(v95);
    v98 = v264;
    v100 = sub_100317340(0.0, 1, 0.0, 1, v96, 0, 0.0, 1, v264, 0.0, 1, 0.0, 1, v97, v99);
    (*(void (**)(char *, uint64_t, __n128))(v265 + 8))(v94, v266, v100);
    sub_10003DC78(v98, v284, &qword_100563728);
    v101 = (_QWORD *)(*v289 + OBJC_IVAR___MTInstagramShareModel_showName);
    v102 = v101[1];
    *(_QWORD *)&v323 = *v101;
    *((_QWORD *)&v323 + 1) = v102;
    swift_bridgeObjectRetain(v102);
    v103 = Text.init<A>(_:)(&v323, &type metadata for String, v283);
    v105 = v104;
    v107 = v106;
    v109 = v108 & 1;
    v110 = *(double *)&qword_100563578;
    v111 = (uint64_t)v285;
    ((void (*)(char *, uint64_t, uint64_t, _QWORD))v263)(v285, 1, 1, *((_QWORD *)&v264 + 1));
    v112 = static Font.system(size:weight:design:)(0, 1, v111, v110);
    sub_100007A28(v111, &qword_100563718);
    v113 = Text.font(_:)(v112, v103, v105, v109, v107);
    v115 = v114;
    LOBYTE(v84) = v116;
    v118 = v117;
    swift_release(v112);
    LOBYTE(v112) = v84 & 1;
    sub_10016ED14(v103, v105, v109);
    v119 = swift_bridgeObjectRelease(v107);
    v120 = static Font.Weight.semibold.getter(v119);
    v121 = Text.fontWeight(_:)(*(_QWORD *)&v120, 0, v113, v115, v84 & 1, v118);
    v123 = v122;
    v125 = v124;
    LOBYTE(v84) = v126 & 1;
    sub_10016ED14(v113, v115, v112);
    swift_bridgeObjectRelease(v118);
    v128 = swift_getKeyPath(&unk_1003D53D8, v127);
    v346 = v121;
    v347 = v123;
    v348 = v84;
    v349 = v125;
    v350 = v128;
    v351 = 0;
    v352 = 1;
    v129 = *(double *)&qword_100563540;
    v131 = static Alignment.leading.getter(v130);
    sub_10031750C(0.0, 1, 0.0, 1, v129, 0, 0.0, 1, (uint64_t)&v323, 0.0, 1, 0.0, 1, v131, v132);
    sub_10016ED14(v121, v123, v84);
    swift_release(v128);
    swift_bridgeObjectRelease(v125);
    v309 = v331;
    v310 = v332;
    v311 = v333;
    v305 = v327;
    v306 = v328;
    v307 = v329;
    v308 = v330;
    v301 = v323;
    v302 = v324;
    v303 = v325;
    v304 = v326;
    v133 = v284;
    v134 = v264;
    sub_100007A64(v284, v264, &qword_100563728);
    v297 = v308;
    v298 = v309;
    v299 = v310;
    v300 = v311;
    v294 = v305;
    v295 = v306;
    v296 = v307;
    v290 = v301;
    v291 = v302;
    v292 = v303;
    v293 = v304;
    v135 = v275;
    sub_100007A64(v134, v275, &qword_100563728);
    v136 = v135 + *(int *)(sub_10003F544(&qword_100563760) + 48);
    v137 = v297;
    v138 = v298;
    v320 = v298;
    v321 = v299;
    v139 = v294;
    v140 = v294;
    v316 = v294;
    v317 = v295;
    v318 = v296;
    v319 = v297;
    v312 = v290;
    v313 = v291;
    v314 = v292;
    v315 = v293;
    v141 = v299;
    *(_OWORD *)(v136 + 128) = v298;
    *(_OWORD *)(v136 + 144) = v141;
    v142 = v295;
    v143 = v296;
    v144 = v295;
    *(_OWORD *)(v136 + 64) = v139;
    *(_OWORD *)(v136 + 80) = v142;
    v145 = v297;
    *(_OWORD *)(v136 + 96) = v143;
    *(_OWORD *)(v136 + 112) = v145;
    v146 = v291;
    v148 = v290;
    v147 = v291;
    *(_OWORD *)v136 = v290;
    *(_OWORD *)(v136 + 16) = v146;
    v149 = v293;
    v151 = v292;
    v150 = v293;
    *(_OWORD *)(v136 + 32) = v292;
    *(_OWORD *)(v136 + 48) = v149;
    v331 = v138;
    v332 = v299;
    v327 = v140;
    v328 = v144;
    v329 = v296;
    v330 = v137;
    v323 = v148;
    v324 = v147;
    v322 = v300;
    *(_QWORD *)(v136 + 160) = v300;
    v333 = v300;
    v325 = v151;
    v326 = v150;
    sub_1003187B4((uint64_t)&v312);
    sub_1003187B4((uint64_t)&v301);
    sub_100318800((uint64_t)&v323);
    sub_100007A28(v134, &qword_100563728);
    v152 = v276;
    sub_100007A64(v135, v276, &qword_100563710);
    swift_storeEnumTagMultiPayload(v152, v273, 1);
    v153 = sub_10002F9C8(&qword_100563768, &qword_100563710, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v152, v274, v274, v153, v153);
    v154 = (uint64_t)v289;
    sub_100007A28(v135, &qword_100563710);
    sub_100318800((uint64_t)&v301);
    v155 = sub_100007A28(v133, &qword_100563728);
  }
  v236 = static Alignment.center.getter(v155);
  v238 = _FrameLayout.init(width:height:alignment:)(&v323, 0, 1, 0x4041800000000000, 0, v236, v237);
  v289 = (_QWORD *)v323;
  LODWORD(v285) = BYTE8(v323);
  v284 = v324;
  LODWORD(v283) = BYTE8(v324);
  v275 = *((_QWORD *)&v325 + 1);
  v276 = v325;
  v239 = static VerticalAlignment.center.getter(v238);
  v240 = (uint64_t)v279;
  *v279 = v239;
  *(_QWORD *)(v240 + 8) = 0;
  *(_BYTE *)(v240 + 16) = 0;
  v241 = sub_10003F544(&qword_100563770);
  sub_1003176F0(v154, v240 + *(int *)(v241 + 44));
  if (qword_100552140 != -1)
    swift_once(&qword_100552140, sub_100314E00);
  v242 = qword_100563560;
  if (qword_100552148 != -1)
    swift_once(&qword_100552148, sub_100314E10);
  v243 = qword_100563568;
  v244 = v281;
  sub_100007A64(v240, v281, &qword_1005636F8);
  v245 = (uint64_t *)(v244 + *(int *)(v278 + 36));
  *v245 = v242;
  v245[1] = v243;
  sub_100007A28(v240, &qword_1005636F8);
  v246 = v280;
  sub_10003DC78(v244, v280, &qword_100563700);
  v247 = v286;
  v248 = v287;
  sub_100007A64(v286, v287, &qword_100563748);
  v249 = v288;
  v250 = v277;
  sub_100007A64(v288, v277, &qword_100563730);
  sub_100007A64(v246, v244, &qword_100563700);
  v251 = v282;
  sub_100007A64(v248, v282, &qword_100563748);
  v252 = (int *)sub_10003F544(&qword_100563778);
  v253 = v251 + v252[12];
  *(_QWORD *)v253 = 0;
  *(_BYTE *)(v253 + 8) = 1;
  *(_QWORD *)(v253 + 16) = v272;
  *(_BYTE *)(v253 + 24) = v271;
  *(_QWORD *)(v253 + 32) = v270;
  *(_BYTE *)(v253 + 40) = v269;
  v254 = v267;
  *(_QWORD *)(v253 + 48) = v268;
  *(_QWORD *)(v253 + 56) = v254;
  sub_100007A64(v250, v251 + v252[16], &qword_100563730);
  v255 = v251 + v252[20];
  *(_QWORD *)v255 = 0;
  *(_BYTE *)(v255 + 8) = 1;
  *(_QWORD *)(v255 + 16) = v289;
  *(_BYTE *)(v255 + 24) = (_BYTE)v285;
  *(_QWORD *)(v255 + 32) = v284;
  *(_BYTE *)(v255 + 40) = v283;
  v256 = v275;
  *(_QWORD *)(v255 + 48) = v276;
  *(_QWORD *)(v255 + 56) = v256;
  sub_100007A64(v244, v251 + v252[24], &qword_100563700);
  sub_100007A28(v246, &qword_100563700);
  sub_100007A28(v249, &qword_100563730);
  sub_100007A28(v247, &qword_100563748);
  sub_100007A28(v244, &qword_100563700);
  sub_100007A28(v250, &qword_100563730);
  return sub_100007A28(v248, &qword_100563748);
}

uint64_t sub_100316B8C@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _QWORD v72[4];
  char v73;
  _QWORD v74[5];
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  _BYTE v99[7];
  char v100;
  _BYTE v101[7];
  char v102;
  int v103;
  __int16 v104;
  _BYTE v105[7];
  _BYTE v106[7];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _OWORD __src[19];
  _QWORD v128[4];
  char v129;
  _BYTE v130[7];
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int16 v136;
  int v137;
  __int16 v138;
  uint64_t v139;
  char v140;
  _BYTE v141[7];
  uint64_t v142;
  char v143;
  _BYTE v144[7];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD v149[4];
  char v150;
  _BYTE v151[7];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int16 v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  Path.init(_:)(v72, sub_1003171C0, 0);
  v68 = v72[1];
  v69 = v72[0];
  v66 = v72[3];
  v67 = v72[2];
  v65 = v73;
  v1 = sub_10003F544(&qword_100563788);
  v2 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1003CA220;
  *(_QWORD *)(v2 + 32) = static Color.black.getter();
  v3 = static Color.clear.getter();
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)&__src[0] = v2;
  v4 = specialized Array._endMutation()(v3);
  v5 = *(_QWORD *)&__src[0];
  v6 = static UnitPoint.leading.getter(v4);
  v8 = v7;
  static UnitPoint.trailing.getter();
  v10 = v9;
  Gradient.init(colors:)(v5);
  v11 = LinearGradient.init(gradient:startPoint:endPoint:)(v74, v6, v8, 0.075, v10);
  v59 = v74[0];
  v62 = v74[2];
  v63 = v74[1];
  v60 = v74[4];
  v61 = v74[3];
  v12 = static Alignment.bottomLeading.getter(v11);
  _FrameLayout.init(width:height:alignment:)(&v75, 0, 1, 0, 1, v12, v13);
  v57 = v77;
  v58 = v75;
  v56 = v79;
  v71 = v80;
  v98 = v76;
  v97 = v78;
  if (qword_100552120 != -1)
    swift_once(&qword_100552120, sub_100314CC0);
  v14 = qword_100563540;
  if (qword_100552130 != -1)
    swift_once(&qword_100552130, sub_100314D98);
  v15 = qword_100563550;
  v55 = v98;
  v70 = v97;
  Path.init(_:)(&v81, sub_10031728C, 0);
  v16 = v81;
  v17 = v82;
  v41 = v81;
  v19 = v83;
  v18 = v84;
  v51 = v83;
  v52 = v82;
  v50 = v84;
  v20 = v85;
  v49 = v85;
  v21 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v21 + 16) = xmmword_1003CA220;
  *(_QWORD *)(v21 + 32) = static Color.black.getter();
  v22 = static Color.clear.getter();
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)&__src[0] = v21;
  v23 = specialized Array._endMutation()(v22);
  v24 = *(_QWORD *)&__src[0];
  v25 = static UnitPoint.top.getter(v23);
  v27 = v26;
  v29 = static UnitPoint.top.getter(v28);
  Gradient.init(colors:)(v24);
  v30 = LinearGradient.init(gradient:startPoint:endPoint:)(&v86, v25, v27, v29, 0.075);
  v31 = v86;
  v47 = v86;
  v32 = v87;
  v33 = v88;
  v45 = v88;
  v46 = v87;
  v34 = v89;
  v35 = v90;
  v48 = v90;
  v36 = static Alignment.bottomLeading.getter(v30);
  _FrameLayout.init(width:height:alignment:)(&v91, 0, 1, 0, 1, v36, v37);
  v54 = v93;
  v43 = v95;
  v44 = v91;
  v42 = v96;
  v100 = v94;
  v38 = qword_100563540;
  *(_DWORD *)v130 = *(_DWORD *)v105;
  *(_DWORD *)&v130[3] = *(_DWORD *)&v105[3];
  v137 = v103;
  v138 = v104;
  *(_DWORD *)v141 = *(_DWORD *)v101;
  *(_DWORD *)v144 = *(_DWORD *)v106;
  *(_DWORD *)&v141[3] = *(_DWORD *)&v101[3];
  v53 = v94;
  *(_DWORD *)&v144[3] = *(_DWORD *)&v106[3];
  DWORD1(v109) = *(_DWORD *)&v99[3];
  *(_DWORD *)((char *)&v109 + 1) = *(_DWORD *)v99;
  DWORD1(v119) = *(_DWORD *)&v105[3];
  *(_DWORD *)((char *)&v119 + 1) = *(_DWORD *)v105;
  WORD3(v122) = v104;
  v116 = v15;
  *((_QWORD *)&v117 + 1) = v17;
  *(_QWORD *)&v118 = v19;
  *((_QWORD *)&v118 + 1) = v18;
  LOBYTE(v119) = v20;
  *((_QWORD *)&v119 + 1) = v31;
  *(_QWORD *)&v120 = v32;
  *((_QWORD *)&v120 + 1) = v33;
  *(_QWORD *)&v121 = v34;
  *((_QWORD *)&v121 + 1) = v35;
  LOWORD(v122) = 256;
  *(_DWORD *)((char *)&v122 + 2) = v103;
  *((_QWORD *)&v122 + 1) = v91;
  v40 = v92;
  LOBYTE(v123) = v92;
  DWORD1(v123) = *(_DWORD *)&v101[3];
  *(_DWORD *)((char *)&v123 + 1) = *(_DWORD *)v101;
  *((_QWORD *)&v123 + 1) = v93;
  LOBYTE(v124) = v94;
  DWORD1(v124) = *(_DWORD *)&v106[3];
  *(_DWORD *)((char *)&v124 + 1) = *(_DWORD *)v106;
  *((_QWORD *)&v124 + 1) = v95;
  *(_QWORD *)&v125 = v96;
  *((_QWORD *)&v125 + 1) = v15;
  v126 = qword_100563540;
  *(_OWORD *)((char *)&__src[16] + 8) = v124;
  *(_OWORD *)((char *)&__src[17] + 8) = v125;
  *(_QWORD *)&__src[9] = v15;
  *((_QWORD *)&__src[18] + 1) = qword_100563540;
  *(_QWORD *)&v117 = v16;
  *(_OWORD *)((char *)&__src[15] + 8) = v123;
  *(_OWORD *)((char *)&__src[11] + 8) = v119;
  *(_OWORD *)((char *)&__src[12] + 8) = v120;
  *(_OWORD *)((char *)&__src[13] + 8) = v121;
  *(_OWORD *)((char *)&__src[14] + 8) = v122;
  *(_OWORD *)((char *)&__src[9] + 8) = v117;
  *(_OWORD *)((char *)&__src[10] + 8) = v118;
  *((_QWORD *)&v115 + 1) = v14;
  v102 = v92;
  *(_QWORD *)&v107 = v69;
  *((_QWORD *)&v107 + 1) = v68;
  *(_QWORD *)&v108 = v67;
  *((_QWORD *)&v108 + 1) = v66;
  LOBYTE(v109) = v65;
  *((_QWORD *)&v109 + 1) = v59;
  *(_QWORD *)&v110 = v63;
  *((_QWORD *)&v110 + 1) = v62;
  *(_QWORD *)&v111 = v61;
  *((_QWORD *)&v111 + 1) = v60;
  LOWORD(v112) = 256;
  *((_QWORD *)&v112 + 1) = v58;
  LOBYTE(v113) = v55;
  *((_QWORD *)&v113 + 1) = v57;
  LOBYTE(v114) = v70;
  *((_QWORD *)&v114 + 1) = v56;
  *(_QWORD *)&v115 = v71;
  __src[0] = v107;
  __src[1] = v108;
  __src[4] = v111;
  __src[5] = v112;
  __src[2] = v109;
  __src[3] = v110;
  __src[7] = v114;
  __src[8] = v115;
  __src[6] = v113;
  memcpy(a1, __src, 0x130uLL);
  v128[0] = v41;
  v128[1] = v52;
  v128[2] = v51;
  v128[3] = v50;
  v129 = v49;
  v131 = v47;
  v132 = v46;
  v133 = v45;
  v134 = v34;
  v135 = v48;
  v136 = 256;
  v139 = v44;
  v140 = v40;
  v142 = v54;
  v143 = v53;
  v145 = v43;
  v146 = v42;
  v147 = v15;
  v148 = v38;
  sub_10031892C((uint64_t)&v107);
  sub_10031892C((uint64_t)&v117);
  sub_100318984((uint64_t)v128);
  v149[0] = v69;
  v149[1] = v68;
  v149[2] = v67;
  v149[3] = v66;
  v150 = v65;
  *(_DWORD *)v151 = *(_DWORD *)v99;
  *(_DWORD *)&v151[3] = *(_DWORD *)&v99[3];
  v152 = v59;
  v153 = v63;
  v154 = v62;
  v155 = v61;
  v156 = v60;
  v157 = 256;
  v158 = v58;
  v159 = v55;
  v160 = v57;
  v161 = v70;
  v162 = v56;
  v163 = v71;
  v164 = v14;
  v165 = v15;
  return sub_100318984((uint64_t)v149);
}

void sub_1003171C0()
{
  double v0;
  double v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  Path.move(to:)((CGPoint)0);
  if (qword_100552128 != -1)
    swift_once(&qword_100552128, sub_100314D44);
  v0 = *(double *)&qword_100563548;
  v1 = *(double *)&qword_100563548;
  if (qword_100552138 != -1)
  {
    swift_once(&qword_100552138, sub_100314DA8);
    v1 = *(double *)&qword_100563548;
  }
  v2 = qword_100563558;
  *(double *)&v3 = v0 - *(double *)&qword_100563558;
  *(double *)&v4 = v1 - *(double *)&qword_100563558;
  Path.addLine(to:)((CGPoint)__PAIR128__(v1 - *(double *)&qword_100563558, v3));
  Path.addLine(to:)((CGPoint)__PAIR128__(v1 + -3.5, v4));
  Path.addLine(to:)((CGPoint)__PAIR128__(v2, 0));
}

void sub_10031728C()
{
  unint64_t v0;

  Path.move(to:)((CGPoint)0);
  if (qword_100552138 != -1)
    swift_once(&qword_100552138, sub_100314DA8);
  Path.addLine(to:)((CGPoint)(unint64_t)qword_100563558);
  if (qword_100552128 != -1)
    swift_once(&qword_100552128, sub_100314D44);
  *(double *)&v0 = *(double *)&qword_100563548 - *(double *)&qword_100563558;
  Path.addLine(to:)((CGPoint)__PAIR128__(*(double *)&qword_100563548 - *(double *)&qword_100563558, qword_100563548));
  Path.addLine(to:)((CGPoint)__PAIR128__(v0, v0));
}

__n128 sub_100317340@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v21;
    v33 = static os_log_type_t.fault.getter();
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v40;
    a1 = v41;
    v20 = a10;
    a3 = v42;
    v19 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  v35 = sub_10003F544(&qword_100563720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a9, v16, v35);
  v36 = a9 + *(int *)(sub_10003F544(&qword_100563728) + 36);
  v37 = v45[5];
  *(_OWORD *)(v36 + 64) = v45[4];
  *(_OWORD *)(v36 + 80) = v37;
  *(_OWORD *)(v36 + 96) = v45[6];
  v38 = v45[1];
  *(_OWORD *)v36 = v45[0];
  *(_OWORD *)(v36 + 16) = v38;
  result = (__n128)v45[3];
  *(_OWORD *)(v36 + 32) = v45[2];
  *(__n128 *)(v36 + 48) = result;
  return result;
}

_QWORD *sub_10031750C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[7];
  __int128 v47;
  char v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[32];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v43 = a3;
    v42 = a1;
    v41 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v41;
    v19 = a10;
    a1 = v42;
    a3 = v43;
    v18 = a12;
    a5 = v44;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[1];
  v49 = *v15;
  v50 = v34;
  sub_100318898((uint64_t)&v49, (uint64_t)v52);
  v36 = v15[1];
  v47 = v15[2];
  v35 = v47;
  *(_OWORD *)a9 = *v15;
  *(_OWORD *)(a9 + 16) = v36;
  *(_OWORD *)(a9 + 32) = v35;
  *(_OWORD *)(a9 + 152) = v46[6];
  v37 = v46[4];
  *(_OWORD *)(a9 + 136) = v46[5];
  *(_OWORD *)(a9 + 120) = v37;
  v38 = v46[2];
  *(_OWORD *)(a9 + 104) = v46[3];
  v39 = v46[1];
  *(_OWORD *)(a9 + 56) = v46[0];
  v51 = *((_QWORD *)&v50 + 1);
  v48 = *((_BYTE *)v15 + 48);
  *(_BYTE *)(a9 + 48) = v48;
  *(_OWORD *)(a9 + 72) = v39;
  *(_OWORD *)(a9 + 88) = v38;
  sub_1003188D4((uint64_t)v52);
  sub_100198D38(&v51);
  return sub_100318904(&v47);
}

uint64_t sub_1003176F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  double v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t v78;

  v66 = a2;
  v3 = type metadata accessor for AttributedString(0);
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  __chkstk_darwin();
  v62 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_10003F544(&qword_100563738);
  __chkstk_darwin();
  v60 = (uint64_t)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v8 = (double *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for Image.ResizingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_100563740);
  __chkstk_darwin();
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v61 = (uint64_t)&v54 - v16;
  v58 = type metadata accessor for SocialStoryPostView(0);
  v17 = *(int *)(v58 + 24);
  v65 = a1;
  v18 = Image.init(uiImage:)(*(id *)(a1 + v17));
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for Image.ResizingMode.stretch(_:), v9);
  v19 = Image.resizable(capInsets:resizingMode:)(v12, v18, 0.0, 0.0, 0.0, 0.0);
  v20 = swift_release(v18);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v20);
  if (qword_100552150 != -1)
    swift_once(&qword_100552150, sub_100314E1C);
  v21 = *(double *)&qword_100563570;
  v22 = qword_100563570;
  v23 = static Alignment.leading.getter();
  _FrameLayout.init(width:height:alignment:)(&v67, v22, 0, v22, 0, v23, v24);
  v25 = v67;
  v26 = v68;
  v27 = v69;
  v28 = v70;
  v57 = v71;
  v56 = v72;
  v29 = v21 * 0.1578;
  v30 = (char *)v8 + *(int *)(v6 + 20);
  v31 = enum case for RoundedCornerStyle.continuous(_:);
  v32 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v30, v31, v32);
  *v8 = v29;
  v8[1] = v29;
  v33 = v60;
  sub_10014FDF8((uint64_t)v8, v60, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v33 + *(int *)(v59 + 36)) = 256;
  sub_100007A64(v33, (uint64_t)&v15[*(int *)(v13 + 36)], &qword_100563738);
  *(_QWORD *)v15 = v19;
  *((_QWORD *)v15 + 1) = v25;
  v15[16] = v26;
  *((_QWORD *)v15 + 3) = v27;
  v15[32] = v28;
  v34 = v56;
  *((_QWORD *)v15 + 5) = v57;
  *((_QWORD *)v15 + 6) = v34;
  swift_retain();
  sub_100007A28(v33, &qword_100563738);
  sub_10003F970((uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v19);
  v35 = v61;
  v36 = sub_10003DC78((uint64_t)v15, v61, &qword_100563740);
  v37 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(&v73, 0x4014000000000000, 0, 0, 1, v37, v38);
  v60 = v73;
  LOBYTE(v27) = v74;
  v59 = v75;
  LODWORD(v57) = v76;
  v56 = v77;
  v55 = v78;
  v39 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v65 + *(int *)(v58 + 20), v64);
  v40 = Text.init(_:)(v39);
  v42 = v41;
  v44 = v43;
  v46 = v45 & 1;
  KeyPath = swift_getKeyPath(&unk_1003D5408, v41);
  sub_100007A64(v35, (uint64_t)v15, &qword_100563740);
  v48 = v66;
  sub_100007A64((uint64_t)v15, v66, &qword_100563740);
  v49 = sub_10003F544(&qword_100563780);
  v50 = v48 + *(int *)(v49 + 48);
  *(_QWORD *)v50 = 0;
  *(_BYTE *)(v50 + 8) = 1;
  *(_QWORD *)(v50 + 16) = v60;
  *(_BYTE *)(v50 + 24) = v27;
  *(_QWORD *)(v50 + 32) = v59;
  *(_BYTE *)(v50 + 40) = v57;
  v51 = v55;
  *(_QWORD *)(v50 + 48) = v56;
  *(_QWORD *)(v50 + 56) = v51;
  v52 = v48 + *(int *)(v49 + 64);
  *(_QWORD *)v52 = v40;
  *(_QWORD *)(v52 + 8) = v42;
  *(_BYTE *)(v52 + 16) = v46;
  *(_QWORD *)(v52 + 24) = v44;
  *(_QWORD *)(v52 + 32) = KeyPath;
  *(_QWORD *)(v52 + 40) = 0;
  sub_10016EC3C(v40, v42, v46);
  swift_bridgeObjectRetain(v44);
  swift_retain();
  sub_100007A28(v35, &qword_100563740);
  sub_10016ED14(v40, v42, v46);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v44);
  return sub_100007A28((uint64_t)v15, &qword_100563740);
}

double sub_100317C1C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  double result;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_100563788);
  v7 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1003CA220;
  *(_QWORD *)(v7 + 32) = static Color.purple.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  v8 = Color.init(_:red:green:blue:opacity:)(v5, 0.2196, 0.0314, 0.7569, 1.0);
  *(_QWORD *)(v7 + 40) = v8;
  v27 = v7;
  specialized Array._endMutation()(v8);
  v9 = v27;
  swift_bridgeObjectRetain(v27);
  Gradient.init(colors:)(v10);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v23, 0.0, 0.0, 0.0, 1.0);
  v11 = v23;
  v22 = v24;
  v12 = v25;
  v13 = v26;
  swift_bridgeObjectRelease(v9);
  v15 = static Alignment.center.getter(v14);
  _FrameLayout.init(width:height:alignment:)(&v27, 0x4078600000000000, 0, 0x4085B80000000000, 0, v15, v16);
  v17 = v27;
  v18 = v28;
  v19 = v29;
  v20 = v30;
  *(_QWORD *)a1 = v11;
  *(_OWORD *)(a1 + 8) = v22;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v13;
  *(_WORD *)(a1 + 40) = 256;
  *(_QWORD *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  *(_BYTE *)(a1 + 72) = v20;
  result = *(double *)&v31;
  *(_OWORD *)(a1 + 80) = v31;
  return result;
}

uint64_t sub_100317DC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100317DE8(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100317E10(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  NSString v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = type metadata accessor for SocialStoryPostView(0);
  __chkstk_darwin();
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v21 - v5;
  *(uint64_t *)((char *)&v21 - v5) = (uint64_t)a1;
  v7 = a1;
  sub_100314EA0();
  v8 = *(int *)(v2 + 24);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v9);

  if (!v10)
    v10 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
  *(_QWORD *)&v6[v8] = v10;
  v11 = *(int *)(v2 + 28);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v12, "setDateStyle:", 3);
  objc_msgSend(v12, "setTimeStyle:", 0);
  *(_QWORD *)&v6[v11] = v12;
  sub_10014FDF8((uint64_t)v6, (uint64_t)v4, type metadata accessor for SocialStoryPostView);
  v13 = sub_10003F544(&qword_100563608);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = ImageRenderer.init(content:)(v4);
  v15 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v15, "scale");
  v17 = v16;

  v18 = ImageRenderer.scale.setter(v17);
  v19 = ImageRenderer.uiImage.getter(v18);
  swift_release(v14);
  sub_10003F970((uint64_t)v6, type metadata accessor for SocialStoryPostView);
  return v19;
}

uint64_t type metadata accessor for SocialStoryPostView(uint64_t a1)
{
  uint64_t result;

  result = qword_100563698;
  if (!qword_100563698)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SocialStoryPostView);
  return result;
}

void sub_10031804C()
{
  AttributeScopes.UIKitAttributes.font.getter();
  __break(1u);
}

unint64_t sub_100318068()
{
  unint64_t result;

  result = qword_100563620;
  if (!qword_100563620)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.UIKitAttributes.FontAttribute, &type metadata for AttributeScopes.UIKitAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&qword_100563620);
  }
  return result;
}

void sub_1003180AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_100318068();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_1003180D0()
{
  return 8;
}

uint64_t sub_1003180DC(_QWORD *a1)
{
  return swift_release(*a1);
}

double sub_1003180E4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1003180F4()
{
  uint64_t v0;

  v0 = sub_10003F544(&qword_100563638);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

_QWORD *sub_100318138(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_100318144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100563628;
  if (!qword_100563628)
  {
    v1 = type metadata accessor for AttributedString(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributedString, v1);
    atomic_store(result, (unint64_t *)&qword_100563628);
  }
  return result;
}

void **sub_10031818C(void **a1, void **a2, int *a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AttributedString(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v12(v9, v10, v11);
    v14 = a3[6];
    v15 = a3[7];
    v16 = *(void **)((char *)a2 + v14);
    *(void **)((char *)v7 + v14) = v16;
    v17 = *(void **)((char *)a2 + v15);
    *(void **)((char *)v7 + v15) = v17;
    v18 = v16;
    v19 = v17;
  }
  return v7;
}

void sub_10031824C(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

}

void **sub_1003182B4(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  v13 = a3[6];
  v14 = a3[7];
  v15 = *(void **)((char *)a2 + v13);
  *(void **)((char *)a1 + v13) = v15;
  v16 = *(void **)((char *)a2 + v14);
  *(void **)((char *)a1 + v14) = v16;
  v17 = v15;
  v18 = v16;
  return a1;
}

void **sub_10031834C(void **a1, void **a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = a3[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[6];
  v14 = *(void **)((char *)a2 + v13);
  v15 = *(void **)((char *)a1 + v13);
  *(void **)((char *)a1 + v13) = v14;
  v16 = v14;

  v17 = a3[7];
  v18 = *(void **)((char *)a2 + v17);
  v19 = *(void **)((char *)a1 + v17);
  *(void **)((char *)a1 + v17) = v18;
  v20 = v18;

  return a1;
}

_QWORD *sub_1003183F4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  return a1;
}

void **sub_100318474(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;

  v6 = *a1;
  *a1 = *a2;

  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(void **)((char *)a1 + v11);
  *(void **)((char *)a1 + v11) = *(void **)((char *)a2 + v11);

  v13 = a3[7];
  v14 = *(void **)((char *)a1 + v13);
  *(void **)((char *)a1 + v13) = *(void **)((char *)a2 + v13);

  return a1;
}

uint64_t sub_100318510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10031851C);
}

uint64_t sub_10031851C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for AttributedString(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100318598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003185A4);
}

char *sub_1003185A4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for AttributedString(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100318618(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100318694(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100470420, 1);
}

uint64_t sub_1003186A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003186CC(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

unint64_t sub_1003186F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100563758;
  if (!qword_100563758)
  {
    v1 = sub_10003CA40(&qword_100563750);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100563758);
  }
  return result;
}

uint64_t sub_100318758@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100318788(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1003187B4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_10016EC3C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain();
  return a1;
}

uint64_t sub_100318800(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  sub_10016ED14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void sub_10031884C(double *a1@<X8>)
{
  *a1 = EnvironmentValues.lineSpacing.getter();
}

uint64_t sub_100318874(double *a1)
{
  return EnvironmentValues.lineSpacing.setter(*a1);
}

uint64_t sub_100318898(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_1003188D4(uint64_t a1)
{
  sub_10016EC3C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_100318904(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_10031892C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  sub_10031896C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRetain(v2);
  return a1;
}

double sub_10031896C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  double result;

  if (a5 - 2 <= 3)
    *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  return result;
}

uint64_t sub_100318984(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  sub_1003189C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1003189C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3)
    return swift_release(result);
  return result;
}

ValueMetadata *type metadata accessor for StoryBackgroundView()
{
  return &type metadata for StoryBackgroundView;
}

unint64_t sub_1003189F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100563790;
  if (!qword_100563790)
  {
    v1 = sub_10003CA40(&qword_100563798);
    sub_100318A74();
    sub_10002F9C8(&qword_1005637A8, &qword_1005636E8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100563790);
  }
  return result;
}

unint64_t sub_100318A74()
{
  unint64_t result;

  result = qword_1005637A0;
  if (!qword_1005637A0)
  {
    result = swift_getWitnessTable(&unk_1003D5454, &type metadata for StoryBackgroundView);
    atomic_store(result, (unint64_t *)&qword_1005637A0);
  }
  return result;
}

uint64_t sub_100318AB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100470448, 1);
}

unint64_t sub_100318ACC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005637B0;
  if (!qword_1005637B0)
  {
    v1 = sub_10003CA40(&qword_1005637B8);
    sub_10002F9C8(&qword_1005637C0, &qword_1005637C8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005637B0);
  }
  return result;
}

CSSearchableItem __swiftcall AppCoreSpotlightEntityAnnotator.annotate(item:with:)(CSSearchableItem item, NSManagedObject with)
{
  return (CSSearchableItem)(id)sub_100318E60((uint64_t)item.super.isa, with.super.isa);
}

CSSearchableItem __swiftcall AppCoreSpotlightEntityAnnotator.annotate(item:with:)(CSSearchableItem item, MTPlayerItem *with)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v11;
  Class isa;

  isa = item.super.isa;
  v3 = type metadata accessor for EpisodeEntity(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = -[MTPlayerItem episode](with, "episode");
  if (v7)
  {
    v8 = v7;
    EpisodeEntity.init(model:)(v8);
    v9 = sub_100026844(&qword_1005637D0, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodeEntity, (uint64_t)&protocol conformance descriptor for EpisodeEntity);
    CSSearchableItem.associate<A>(appEntity:priority:)(v6, 0, v3, v9);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return (CSSearchableItem)isa;
}

id AppCoreSpotlightEntityAnnotator.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppCoreSpotlightEntityAnnotator();
  return objc_msgSendSuper2(&v2, "init");
}

id AppCoreSpotlightEntityAnnotator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppCoreSpotlightEntityAnnotator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100318E60(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v4 = objc_opt_self(MTEpisode);
  v5 = swift_dynamicCastObjCClass(a2, v4);
  if (v5)
  {
    v6 = v5;
    *((_QWORD *)&v25 + 1) = type metadata accessor for EpisodeEntity(0);
    v26 = sub_100026844(&qword_1005637D0, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodeEntity, (uint64_t)&protocol conformance descriptor for EpisodeEntity);
    sub_1000242A8(&v24);
    v7 = a2;
    EpisodeEntity.init(model:)(v6);
  }
  else
  {
    v8 = objc_opt_self(MTPodcast);
    v9 = swift_dynamicCastObjCClass(a2, v8);
    if (v9)
    {
      v10 = v9;
      *((_QWORD *)&v25 + 1) = type metadata accessor for ShowEntity(0);
      v26 = sub_100026844(&qword_100563818, (uint64_t (*)(uint64_t))&type metadata accessor for ShowEntity, (uint64_t)&protocol conformance descriptor for ShowEntity);
      sub_1000242A8(&v24);
      v11 = a2;
      ShowEntity.init(model:)(v10);
    }
    else
    {
      v12 = objc_opt_self(MTChannel);
      v13 = swift_dynamicCastObjCClass(a2, v12);
      if (v13)
      {
        v14 = v13;
        *((_QWORD *)&v25 + 1) = type metadata accessor for ChannelEntity(0);
        v26 = sub_100026844(&qword_100563810, (uint64_t (*)(uint64_t))&type metadata accessor for ChannelEntity, (uint64_t)&protocol conformance descriptor for ChannelEntity);
        sub_1000242A8(&v24);
        v15 = a2;
        ChannelEntity.init(model:)(v14);
      }
      else
      {
        v16 = objc_opt_self(MTPlaylist);
        v17 = swift_dynamicCastObjCClass(a2, v16);
        if (!v17)
        {
          v26 = 0;
          v24 = 0u;
          v25 = 0u;
          sub_1003190AC((uint64_t)&v24);
          return a1;
        }
        v18 = v17;
        *((_QWORD *)&v25 + 1) = type metadata accessor for StationEntity(0);
        v26 = sub_100026844(&qword_100563808, (uint64_t (*)(uint64_t))&type metadata accessor for StationEntity, (uint64_t)&protocol conformance descriptor for StationEntity);
        sub_1000242A8(&v24);
        v19 = a2;
        StationEntity.init(model:)(v18);
      }
    }
  }
  sub_10002099C(&v24, (uint64_t)v27);
  v20 = v28;
  v21 = v29;
  v22 = sub_10003A834(v27, v28);
  CSSearchableItem.associate<A>(appEntity:priority:)(v22, 0, v20, v21);
  sub_10003D380(v27);
  return a1;
}

uint64_t type metadata accessor for AppCoreSpotlightEntityAnnotator()
{
  return objc_opt_self(MTAppCoreSpotlightEntityAnnotator);
}

uint64_t sub_1003190AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_100563800);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void MTEpisodeUnavailableUtil.showDialog(for:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;

  v3 = sub_10003F544(&qword_100563820);
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PlaybackController.PlayerError(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v23 - v11;
  v24 = a1;
  swift_errorRetain(a1);
  v13 = sub_10003F544((uint64_t *)&unk_10055A340);
  v14 = swift_dynamicCast(v5, &v24, v13, v6, 6);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  if ((v14 & 1) == 0)
  {
    v15(v5, 1, 1, v6);
    sub_100319348((uint64_t)v5);
LABEL_5:
    v18 = 0;
LABEL_6:
    v19 = static EpisodeUnavailableReason.Translator.episodeUnavailableReason(for:)(a1);
    v20 = EpisodeUnavailableReason.rawValue.getter(v19);
    if (v20 == EpisodeUnavailableReason.rawValue.getter(5))
    {
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      if (v18)
      {
        v22 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v21 = swift_bridgeObjectRelease(v18).n128_u64[0];
      }
      else
      {
        v22 = 0;
      }
      objc_msgSend(v1, "showDialogForReason:podcastTitle:completion:", v19, v22, 0, v21);

    }
    return;
  }
  v15(v5, 0, 1, v6);
  v16 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v16(v12, v5, v6);
  v16(v10, v12, v6);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v17 == enum case for PlaybackController.PlayerError.providerUnavailable(_:))
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    v18 = *((_QWORD *)v10 + 1);
    goto LABEL_6;
  }
  if (v17 == enum case for PlaybackController.PlayerError.requestError(_:))
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return;
  }
  if (v17 != enum case for PlaybackController.PlayerError.noContentToPlay(_:))
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_5;
  }
}

uint64_t sub_100319348(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_100563820);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100319388()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter____lazy_storage___playerPathCoordinator;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter____lazy_storage___playerPathCoordinator);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter____lazy_storage___playerPathCoordinator);
  }
  else
  {
    v4 = v0;
    v5 = objc_allocWithZone((Class)type metadata accessor for PlayerPathCoordinator(0));
    v6 = (void *)PlayerPathCoordinator.init(playerID:bundleID:)(0x7374736163646F50, 0xE800000000000000, 0xD000000000000012, 0x800000010043D560);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v4 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id sub_100319424()
{
  _BYTE *v0;
  _QWORD *v1;
  _QWORD *v2;
  char *v3;
  char *v4;
  objc_super v6;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter____lazy_storage___playerPathCoordinator] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_route] = 0;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isHandoffEnabled] = 1;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isTargetPlaying] = 0;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isLocal] = 1;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localPlaybackRequested] = 0;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localHasChapters] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localChapterIndex] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localChapterCount] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localLoadedDuration] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localTotalDuration] = 0;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemDescriptionHasHTML] = 0;
  v1 = &v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemPlainEpisodeNotes];
  *v1 = 0;
  v1[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemEpisodeNotes] = 0;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemIsLocal] = 1;
  *(_DWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_volume] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItem] = 0;
  v2 = &v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_explicitCharacter];
  *v2 = 0;
  v2[1] = 0xE000000000000000;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isLocalVideo] = 0;
  v3 = &v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_presentationSize];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_playbackSpeedMenu] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_autoStopTimeRemaining] = 0;
  v4 = &v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_autoStopMode];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isPlayingVideoFullScreen] = 0;
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for BlueMoonStubPlayerAdapter();
  return objc_msgSendSuper2(&v6, "init");
}

id sub_1003195B4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BlueMoonStubPlayerAdapter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BlueMoonStubPlayerAdapter()
{
  return objc_opt_self(_TtC8Podcasts25BlueMoonStubPlayerAdapter);
}

void sub_100319698()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000010043D520, "Podcasts/BlueMoonStubPlayerAdapter.swift", 40, 2, 21, 0);
  __break(1u);
}

void *sub_1003196F0()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_route);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_route, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_10031973C(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_route);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_10031978C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_route, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_1003197D0()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000010043D520, "Podcasts/BlueMoonStubPlayerAdapter.swift", 40, 2, 27, 0);
  __break(1u);
}

uint64_t sub_10031982C()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isHandoffEnabled);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isHandoffEnabled, v3, 0, 0);
  return *v1;
}

uint64_t sub_100319870(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isHandoffEnabled);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_1003198B8(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isHandoffEnabled, a1, 33, 0);
  return j_j__swift_endAccess;
}

double sub_1003198FC()
{
  return 0.0;
}

uint64_t sub_100319904()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemPlainEpisodeNotes);
  swift_bridgeObjectRetain(*(_QWORD *)(v0
                                     + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemPlainEpisodeNotes
                                     + 8));
  return v1;
}

void *sub_10031993C()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemEpisodeNotes);
  v2 = v1;
  return v1;
}

float sub_100319968()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_volume;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_volume, v3, 0, 0);
  return *(float *)v1;
}

uint64_t sub_1003199AC(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (float *)(v1 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_volume);
  result = swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_volume, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_1003199FC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_volume, a1, 33, 0);
  return j_j__swift_endAccess;
}

void *sub_100319A40()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItem);
  v2 = v1;
  return v1;
}

uint64_t sub_100319A6C()
{
  __n128 v0;

  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  return static OS_dispatch_queue.main.getter(v0);
}

uint64_t sub_100319AA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_explicitCharacter);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_explicitCharacter + 8));
  return v1;
}

uint64_t sub_100319ADC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isLocalVideo);
}

uint64_t sub_100319AEC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_presentationSize);
}

void sub_100319B04()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002FLL, 0x800000010043D4F0, "Podcasts/BlueMoonStubPlayerAdapter.swift", 40, 2, 84, 0);
  __break(1u);
}

void sub_100319B5C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000010043D4B0, "Podcasts/BlueMoonStubPlayerAdapter.swift", 40, 2, 88, 0);
  __break(1u);
}

void *sub_100319BB4()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_playbackSpeedMenu);
  v2 = v1;
  return v1;
}

void sub_100319BE0()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003ELL, 0x800000010043D470, "Podcasts/BlueMoonStubPlayerAdapter.swift", 40, 2, 94, 0);
  __break(1u);
}

double sub_100319C38()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_autoStopTimeRemaining);
}

uint64_t sub_100319C48()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_autoStopMode;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_autoStopMode, v3, 0, 0);
  return *(_QWORD *)v1;
}

uint64_t sub_100319C90(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_autoStopMode;
  result = swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_100319CEC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_autoStopMode, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_100319D30()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isPlayingVideoFullScreen);
}

id sub_100319D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v10;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Logger.modernPlayback.getter(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Accessing AVPlayer with BlueMoon does not work.", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return objc_msgSend(objc_allocWithZone((Class)AVPlayer), "init");
}

uint64_t type metadata accessor for SimplifiedPodcastsStateTransitionsFinder()
{
  return objc_opt_self(_TtC8Podcasts40SimplifiedPodcastsStateTransitionsFinder);
}

uint64_t sub_100319E60(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  return sub_10031A824(a1, a2, a3, a4, a5);
}

uint64_t sub_100319E80(uint64_t a1, char a2, __int16 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  switch(a2)
  {
    case 0:
      v5 = sub_10003F544(&qword_100557E98);
      if ((a3 & 0x100) != 0)
      {
        v10 = swift_allocObject(v5, 48, 7);
        result = 0;
        *(_OWORD *)(v10 + 16) = xmmword_1003CA200;
        *(_QWORD *)(v10 + 32) = a1;
        *(_BYTE *)(v10 + 40) = 0;
      }
      else
      {
        v6 = swift_allocObject(v5, 64, 7);
        result = 0;
        *(_OWORD *)(v6 + 16) = xmmword_1003CA220;
        *(_QWORD *)(v6 + 32) = a1;
        *(_BYTE *)(v6 + 40) = 0;
        *(_QWORD *)(v6 + 48) = 0;
        *(_BYTE *)(v6 + 56) = 2;
      }
      return result;
    case 2:
      v8 = sub_10003F544(&qword_100557E98);
      goto LABEL_6;
    case 3:
      v8 = sub_10003F544(&qword_100557E98);
      if ((a3 & 1) != 0)
      {
        if ((a3 & 0x100) != 0)
        {
          v12 = swift_allocObject(v8, 48, 7);
          *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
          *(_QWORD *)(v12 + 32) = a1;
          *(_BYTE *)(v12 + 40) = 1;
LABEL_16:
          result = 3;
        }
        else
        {
          v11 = swift_allocObject(v8, 64, 7);
          *(_OWORD *)(v11 + 16) = xmmword_1003CA220;
          *(_QWORD *)(v11 + 32) = 1;
          result = 2;
          *(_BYTE *)(v11 + 40) = 2;
          *(_QWORD *)(v11 + 48) = a1;
          *(_BYTE *)(v11 + 56) = 1;
        }
      }
      else
      {
LABEL_6:
        v9 = swift_allocObject(v8, 48, 7);
        *(_OWORD *)(v9 + 16) = xmmword_1003CA200;
        *(_QWORD *)(v9 + 32) = a1;
        result = 1;
        *(_BYTE *)(v9 + 40) = 1;
      }
      break;
    case 4:
      result = 2;
      switch(a1)
      {
        case 1:
          if ((a3 & 1) == 0)
            goto LABEL_18;
          if ((a3 & 0x100) == 0)
            return result;
          goto LABEL_16;
        case 2:
          if ((a3 & 1) == 0)
            goto LABEL_18;
          if ((a3 & 0x100) != 0)
            goto LABEL_16;
          return result;
        case 5:
        case 6:
          if ((a3 & 0x100) == 0)
            goto LABEL_18;
          return 1;
        case 9:
          return result;
        default:
          goto LABEL_18;
      }
    default:
LABEL_18:
      result = 1;
      break;
  }
  return result;
}

uint64_t sub_10031A084(uint64_t a1, char a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin();
  v12 = (char *)&v27 - v11;
  if (!a2)
  {
    v14 = sub_10003F544(&qword_100557E98);
    v15 = swift_allocObject(v14, 80, 7);
    result = 0;
    *(_OWORD *)(v15 + 16) = xmmword_1003CA240;
    *(_QWORD *)(v15 + 32) = 0;
    *(_BYTE *)(v15 + 40) = 2;
    *(_QWORD *)(v15 + 48) = a1;
    *(_BYTE *)(v15 + 56) = 0;
LABEL_13:
    *(_QWORD *)(v15 + 64) = 4;
    *(_BYTE *)(v15 + 72) = 2;
    return result;
  }
  if (a2 == 2)
  {
    if ((a3 & 1) == 0)
    {
      v16 = sub_10003F544(&qword_100557E98);
      v17 = swift_allocObject(v16, 64, 7);
      *(_OWORD *)(v17 + 16) = xmmword_1003CA220;
      *(_QWORD *)(v17 + 32) = a1;
      result = 1;
      *(_BYTE *)(v17 + 40) = 1;
      *(_QWORD *)(v17 + 48) = 4;
      *(_BYTE *)(v17 + 56) = 2;
      return result;
    }
    v18 = static Logger.podcastsStatesCoordination.getter(v10);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    v22 = sub_10003F544(&qword_100557E98);
    v15 = swift_allocObject(v22, 80, 7);
    *(_OWORD *)(v15 + 16) = xmmword_1003CA240;
    *(_QWORD *)(v15 + 32) = 0;
    *(_BYTE *)(v15 + 40) = 2;
    *(_QWORD *)(v15 + 48) = a1;
    result = 1;
    *(_BYTE *)(v15 + 56) = 1;
    goto LABEL_13;
  }
  if (a2 != 4)
    return 2;
  result = 2;
  switch(a1)
  {
    case 0:
      if ((a3 & 1) != 0)
      {
        v23 = static Logger.podcastsStatesCoordination.getter(2);
        v24 = Logger.logObject.getter(v23);
        v25 = static os_log_type_t.error.getter(v24);
        if (os_log_type_enabled(v24, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.", v26, 2u);
          swift_slowDealloc(v26, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        result = 1;
      }
      else
      {
        result = 1;
      }
      break;
    case 4:
      result = 3;
      break;
    case 6:
    case 8:
    case 9:
      return result;
    case 7:
      if ((a3 & 1) == 0)
        return 2;
      result = 3;
      break;
    default:
      return 2;
  }
  return result;
}

uint64_t sub_10031A3D4(uint64_t a1, char a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v11 = (char *)&v25 - v10;
  if (a2)
  {
    if (a2 == 2)
    {
      v15 = sub_10003F544(&qword_100557E98);
      v16 = swift_allocObject(v15, 48, 7);
      *(_OWORD *)(v16 + 16) = xmmword_1003CA200;
      *(_QWORD *)(v16 + 32) = a1;
      result = 1;
      *(_BYTE *)(v16 + 40) = 1;
    }
    else if (a2 == 4)
    {
      result = 1;
      switch(a1)
      {
        case 0:
          return result;
        case 3:
          result = 2;
          break;
        case 5:
          v17 = static Logger.podcastsStatesCoordination.getter(1);
          v18 = Logger.logObject.getter(v17);
          v19 = static os_log_type_t.error.getter(v18);
          if (os_log_type_enabled(v18, v19))
          {
            v20 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v20 = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, v19, "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.", v20, 2u);
            swift_slowDealloc(v20, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
          result = 2;
          break;
        case 6:
          if ((a3 & 1) != 0)
          {
            result = 2;
          }
          else
          {
            v21 = static Logger.podcastsStatesCoordination.getter(1);
            v22 = Logger.logObject.getter(v21);
            v23 = static os_log_type_t.error.getter(v22);
            if (os_log_type_enabled(v22, v23))
            {
              v24 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v24 = 0;
              _os_log_impl((void *)&_mh_execute_header, v22, v23, "The show has play state but for some reason it's in Store state. This doesn't make any sense, with playState a show should be at least Implicitly Followed. Figure out what's going on.", v24, 2u);
              swift_slowDealloc(v24, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
            result = 2;
          }
          break;
        default:
          return 3;
      }
    }
    else
    {
      return 3;
    }
  }
  else
  {
    v13 = sub_10003F544(&qword_100557E98);
    v14 = swift_allocObject(v13, 48, 7);
    result = 0;
    *(_OWORD *)(v14 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v14 + 32) = a1;
    *(_BYTE *)(v14 + 40) = 0;
  }
  return result;
}

uint64_t sub_10031A6AC(uint64_t a1, unsigned __int8 a2, __int16 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 - 2 >= 2)
  {
    if (a2 == 1)
    {
      v8 = sub_10003F544(&qword_100557E98);
      if ((a3 & 1) != 0)
      {
        if ((a3 & 0x100) != 0)
        {
          v12 = swift_allocObject(v8, 48, 7);
          *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
          *(_QWORD *)(v12 + 32) = a1;
          *(_BYTE *)(v12 + 40) = 0;
          return 3;
        }
        else
        {
          v10 = swift_allocObject(v8, 80, 7);
          *(_OWORD *)(v10 + 16) = xmmword_1003CA240;
          *(_QWORD *)(v10 + 32) = a1;
          *(_BYTE *)(v10 + 40) = 0;
          *(_QWORD *)(v10 + 48) = 1;
          result = 2;
          *(_BYTE *)(v10 + 56) = 2;
          *(_QWORD *)(v10 + 64) = 0;
          *(_BYTE *)(v10 + 72) = 2;
        }
      }
      else
      {
        if ((a3 & 0x100) != 0)
        {
          v11 = swift_allocObject(v8, 48, 7);
          *(_OWORD *)(v11 + 16) = xmmword_1003CA200;
          *(_QWORD *)(v11 + 32) = a1;
          *(_BYTE *)(v11 + 40) = 0;
        }
        else
        {
          v9 = swift_allocObject(v8, 64, 7);
          *(_OWORD *)(v9 + 16) = xmmword_1003CA220;
          *(_QWORD *)(v9 + 32) = a1;
          *(_BYTE *)(v9 + 40) = 0;
          *(_QWORD *)(v9 + 48) = 0;
          *(_BYTE *)(v9 + 56) = 2;
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v4 = sub_10003F544(&qword_100557E98);
    v5 = swift_allocObject(v4, 48, 7);
    result = 0;
    *(_OWORD *)(v5 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v5 + 32) = a1;
    *(_BYTE *)(v5 + 40) = 1;
  }
  return result;
}

uint64_t sub_10031A824(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSString v24;
  id v25;
  id v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD);
  char *v33;
  _DWORD v35[14];
  uint64_t v36;
  void (*v37)(_QWORD);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v43 = a5;
  v44 = a3;
  v42 = a4;
  v7 = type metadata accessor for Logger(0);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  __chkstk_darwin();
  v41 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for PodcastStateModel(0);
  v9 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin();
  v38 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin();
  v13 = (char *)v35 - v12;
  PodcastStateModel.uuid.getter(v11);
  v15 = v14;
  v16 = (void *)objc_opt_self(MTEpisode);
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "predicateForLibraryEpisodesOnPodcastUuid:", v17);

  v19 = kMTEpisodeEntityName;
  LODWORD(v37) = objc_msgSend(a2, "hasAnyObjectsInEntity:satisfyingPredicate:", kMTEpisodeEntityName, v18);
  swift_bridgeObjectRelease(v15);

  PodcastStateModel.uuid.getter(v20);
  v22 = v21;
  v23 = objc_msgSend(v16, "predicateForHasAnyVisualPlayState");
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v16, "predicateForAllEpisodesOnPodcastUuid:", v24);

  v26 = objc_msgSend(v23, "AND:", v25);
  v27 = v45;

  v28 = objc_msgSend(a2, "hasAnyObjectsInEntity:satisfyingPredicate:", v19, v26);
  swift_bridgeObjectRelease(v22);

  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a1, v27);
  v30 = v46;
  v31 = PodcastStateModel.sanitizedState()(v29);
  if (!v30)
  {
    v36 = a1;
    v35[13] = v37 ^ 1;
    v32 = *(void (**)(_QWORD))(v9 + 8);
    v46 = v31;
    v37 = v32;
    v32(v13);
    v33 = (char *)&loc_10031AAB4 + *((int *)qword_10031B038 + v46);
    v35[10] = v28 ^ 1;
    __asm { BR              X10 }
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v27);
  return a1;
}

uint64_t sub_10031B048@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  _OWORD v35[4];

  v4 = type metadata accessor for ArtworkCrop(0);
  __chkstk_darwin(v4);
  v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "uberBackgroundImageURL");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    v12 = objc_msgSend(a1, "uberBackgroundJoeColor");
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

      swift_bridgeObjectRetain(v16);
      v19 = Color.init(descriptor:)(v14, v16);
      v21 = v20;
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      v19 = 0;
      v21 = 255;
    }
    v22 = kMTPreferredChannelUberArtworkWidth;
    v23 = kMTPreferredChannelUberArtworkHeight;
    v24 = (uint64_t)objc_msgSend(a1, "storeId");
    v25 = AdamID.init(rawValue:)(v24 & ~(v24 >> 63));
    static ArtworkCrop.sr.getter();
    v26 = objc_msgSend(a1, "name");
    if (v26)
    {
      v27 = v26;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v30 = v29;

    }
    else
    {
      v28 = 0;
      v30 = 0;
    }
    v35[0] = xmmword_1003D55A0;
    memset(&v35[1], 0, 41);
    static ArtworkFormat.preferredFormat.getter();
    LOBYTE(v33) = v31;
    *(_WORD *)((char *)&v33 + 1) = 0;
    ArtworkModel.init(template:width:height:libraryEntity:backgroundColor:textColors:style:crop:accessibilityTitle:format:isCustomSymbol:isMulticolorSymbol:imageStoreIdentifier:)(v9, v11, v25, 0, 2, v19, v21, v35, v22, v23, 3, v6, v28, v30, v33, 0, 0);
    v32 = type metadata accessor for ArtworkModel(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a2, 0, 1, v32);
  }
  else
  {
    v17 = type metadata accessor for ArtworkModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
}

uint64_t sub_10031B2C0@<X0>(void *a1@<X0>, SEL *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  _OWORD v29[4];

  v6 = type metadata accessor for ArtworkCrop(0);
  __chkstk_darwin(v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, *a2);
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

    v14 = kMTPreferredArtworkSize;
    v15 = (uint64_t)objc_msgSend(a1, "storeId");
    v16 = AdamID.init(rawValue:)(v15 & ~(v15 >> 63));
    v29[0] = xmmword_1003D55A0;
    memset(&v29[1], 0, 41);
    v24 = static ArtworkCrop.boundingBox.getter(v16, v17, v18, v19, v20, v21, v22, v23);
    BYTE2(v28) = 0;
    LOWORD(v28) = static ArtworkFormat.preferredFormat.getter(v24);
    ArtworkModel.init(template:width:height:libraryEntity:backgroundColor:textColors:style:crop:accessibilityTitle:format:isCustomSymbol:isMulticolorSymbol:imageStoreIdentifier:)(v11, v13, v16, 0, 2, 0, 255, v29, v14, v14, 3, v8, 0, 0, v28, 0, 0);
    v25 = type metadata accessor for ArtworkModel(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a3, 0, 1, v25);
  }
  else
  {
    v27 = type metadata accessor for ArtworkModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a3, 1, 1, v27);
  }
}

uint64_t sub_10031B464(void *a1)
{
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[5];
  Swift::String v25;
  Swift::String v26;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v25._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0x5F4C454E4E414843;
  v4._object = (void *)0xED0000454C544954;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v25);

  v7 = objc_msgSend(v2, "mainBundle");
  v26._object = (void *)0xE000000000000000;
  v8._object = (void *)0x800000010043D5C0;
  v8._countAndFlagsBits = 0xD00000000000001ELL;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v26);

  v11 = sub_10003F544(&qword_1005559A0);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
  v13 = objc_msgSend(a1, "resolvedShowCount");
  *(_QWORD *)(v12 + 56) = &type metadata for Int64;
  *(_QWORD *)(v12 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v12 + 32) = v13;
  v14 = String.init(format:_:)(v10._countAndFlagsBits, v10._object, v12);
  v16 = v15;
  swift_bridgeObjectRelease(v10._object);
  type metadata accessor for EyebrowBuilder(0);
  v17 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v18 = swift_allocObject(v17, 64, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1003CA220;
  *(Swift::String *)(v18 + 32) = v6;
  *(_QWORD *)(v18 + 48) = v14;
  *(_QWORD *)(v18 + 56) = v16;
  v24[3] = sub_10003F544((uint64_t *)&unk_10055FDF0);
  v24[4] = sub_10031B97C();
  v24[0] = v18;
  v19 = swift_bridgeObjectRetain(v16);
  v20 = static EyebrowBuilder.concatenate(captionElements:uppercased:)(v24, 0, v19);
  v22 = v21;
  sub_10003D380(v24);
  if (v22)
  {
    swift_bridgeObjectRelease(v16);
    return v20;
  }
  return v14;
}

uint64_t sub_10031B680(void *a1)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  uint64_t v7;

  if ((objc_msgSend(a1, "subscriptionActive") & 1) != 0)
    return 3;
  result = (uint64_t)objc_msgSend(a1, "displayType");
  if (result)
  {
    v3 = (void *)result;
    static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v5 = v4;

    swift_bridgeObjectRetain(v5);
    v6 = String._bridgeToObjectiveC()();
    v7 = MTDisplayTypeFromPersistentString();
    swift_bridgeObjectRelease_n(v5, 2);

    if (v7 == 1)
      return 1;
    else
      return 2 * (v7 == 2);
  }
  return result;
}

uint64_t sub_10031B730(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  id v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v2 = sub_10003F544(&qword_10055D840);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v33 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v33 - v9;
  v11 = objc_msgSend(a1, "backgroundColor");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

    swift_bridgeObjectRetain(v15);
    v16 = Color.init(descriptor:)(v13, v15);
    v35 = v17;
    v36 = v16;
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    v36 = 0;
    v35 = 255;
  }
  v18 = (uint64_t)objc_msgSend(a1, "storeId");
  v19 = AdamID.init(rawValue:)(v18 & ~(v18 >> 63));
  v20 = objc_msgSend(a1, "name");
  v37 = v19;
  if (v20)
  {
    v21 = v20;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

  }
  else
  {
    v34 = 0;
    v23 = 0;
  }
  v24 = sub_10031B464(a1);
  v26 = v25;
  v27 = sub_10031B680(a1);
  sub_10031B048(a1, (uint64_t)v10);
  sub_10031B2C0(a1, (SEL *)&selRef_logoImageURL, (uint64_t)v8);
  sub_10031B2C0(a1, (SEL *)&selRef_artworkURL, (uint64_t)v5);
  v28 = v10;
  v29 = v5;
  v30 = objc_msgSend(a1, "showCount");
  v31 = objc_msgSend(a1, "availableShowCount");
  return dispatch thunk of ChannelDetail.__allocating_init(adamId:title:subtitle:displayType:uberArtwork:logoArtwork:iconArtwork:backgroundColor:showCount:availableShowCount:)(v37, 0, v34, v23, v24, v26, v27, v28, v8, v29, v36, (_BYTE)v35, v30, v31);
}

unint64_t sub_10031B97C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005639B0;
  if (!qword_1005639B0)
  {
    v1 = sub_10003CA40((uint64_t *)&unk_10055FDF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005639B0);
  }
  return result;
}

uint64_t sub_10031B9C8@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (**v20)();
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;

  v2 = v1;
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for CLSContextMetadata(0);
  v7 = *((_QWORD *)v6 - 1);
  __chkstk_darwin();
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((objc_msgSend((id)objc_opt_self(MTStoreIdentifier), "isEmpty:", objc_msgSend(v1, "storeCollectionId")) & 1) != 0)return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(a1, 1, 1, v6);
  v10 = objc_msgSend(v1, "title");
  if (!v10)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(a1, 1, 1, v6);
  v11 = v10;
  v35 = a1;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v33 = v13;

  *(_QWORD *)&v39[0] = objc_msgSend(v2, "storeCollectionId");
  v14 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v16 = v15;
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  v9[40] = 1;
  *((_QWORD *)v9 + 6) = 0;
  v17 = (uint64_t)&v9[v6[9]];
  v18 = type metadata accessor for URL(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v34 = v17;
  v19(v17, 1, 1, v18);
  v20 = (uint64_t (**)())&v9[v6[10]];
  *v20 = variable initialization expression of MTNotificationSettingsPresentationController.activePresentedSettingsViewController;
  v20[1] = 0;
  *(_QWORD *)&v9[v6[11]] = 0;
  v21 = v6[12];
  *(_QWORD *)&v9[v21] = 0;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = v14;
  *((_QWORD *)v9 + 2) = v16;
  *((_QWORD *)v9 + 3) = v12;
  *((_QWORD *)v9 + 4) = v33;
  sub_1002D5F74((uint64_t)v39, (uint64_t)v36);
  v22 = v37;
  if (v37)
  {
    v23 = v38;
    sub_10003A834(v36, v37);
    v22 = sub_1001F62CC(v22, v23);
    sub_1001F63B0((uint64_t)v39);
    sub_10003D380(v36);
  }
  else
  {
    sub_1001F63B0((uint64_t)v39);
    sub_1001F63B0((uint64_t)v36);
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v9[v21]);
  *(_QWORD *)&v9[v21] = v22;
  v9[40] = 0;
  sub_10031BD24((uint64_t)v5);
  sub_1001C99E0((uint64_t)v5, v34);
  v25 = objc_msgSend(v2, "uuid");
  v26 = (uint64_t)v25;
  v27 = v35;
  if (v25)
  {
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v30 = v29;

    v31 = (double)CLSContextThumbnailMaximumAllowedDimension;
    v26 = swift_allocObject(&unk_1004C2708, 48, 7);
    *(_QWORD *)(v26 + 16) = v28;
    *(_QWORD *)(v26 + 24) = v30;
    *(double *)(v26 + 32) = v31;
    *(double *)(v26 + 40) = v31;
    v32 = (uint64_t (*)())sub_10031C204;
  }
  else
  {
    v32 = variable initialization expression of MTNotificationSettingsPresentationController.activePresentedSettingsViewController;
  }
  swift_release(v20[1]);
  *v20 = v32;
  v20[1] = (uint64_t (*)())v26;
  sub_10014FDF8((uint64_t)v9, v27, type metadata accessor for CLSContextMetadata);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(v27, 0, 1, v6);
  return sub_10003F970((uint64_t)v9, type metadata accessor for CLSContextMetadata);
}

uint64_t sub_10031BD24@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for URLComponents(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PodcastsURLEpisodeParameters(0);
  __chkstk_darwin();
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin();
  v12 = (char *)&v41 - v11;
  *((_QWORD *)v12 + 6) = 0;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  v12[56] = 1;
  *(_WORD *)(v12 + 57) = 514;
  v13 = (char *)&v41 + *(int *)(v10 + 40) - v11;
  v14 = type metadata accessor for MetricsWidgetContext(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *((_QWORD *)v12 + 4) = objc_msgSend(v2, "storeCollectionId");
  v12[40] = 0;
  type metadata accessor for PodcastsURLScheme();
  sub_10014FDF8((uint64_t)v12, (uint64_t)v9, type metadata accessor for PodcastsURLEpisodeParameters);
  v15 = type metadata accessor for PodcastsURLShowCommand(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  sub_1002D5FBC((uint64_t)v9, v16 + OBJC_IVAR____TtC8Podcasts25PodcastsURLEpisodeCommand_episodeParameters);
  v17 = type metadata accessor for PodcastsURLNowPlayingCommand();
  if (!swift_dynamicCastClass(v16, v17))
  {
    v21 = type metadata accessor for PodcastsURLBrowseCommand();
    if (swift_dynamicCastClass(v16, v21))
    {
      swift_retain();
      URLComponents.init()(v22);
      URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
      v19 = 0x6573776F7262;
      v20 = 0xE600000000000000;
      goto LABEL_5;
    }
    v25 = type metadata accessor for PodcastsURLOpenCommand(0);
    v26 = swift_dynamicCastClass(v16, v25);
    if (v26)
    {
      v27 = v26;
      swift_retain();
      sub_100329BCC(v27, a1);
      goto LABEL_7;
    }
    v28 = swift_dynamicCastClass(v16, v15);
    if (v28)
    {
      v29 = v28;
      swift_retain();
      URLComponents.init()(v30);
      URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
      v31 = 2003789939;
    }
    else
    {
      v32 = type metadata accessor for PodcastsURLPlayCommand(0);
      v33 = swift_dynamicCastClass(v16, v32);
      if (!v33)
      {
        v37 = type metadata accessor for PodcastsURLShowAndPlayCommand(0);
        v38 = swift_dynamicCastClass(v16, v37);
        if (!v38)
        {
          v40 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a1, 1, 1, v40);
          goto LABEL_8;
        }
        v29 = v38;
        swift_retain();
        URLComponents.init()(v39);
        URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
        v31 = 0x79616C70776F6873;
        v35 = 0xE800000000000000;
        goto LABEL_16;
      }
      v29 = v33;
      swift_retain();
      URLComponents.init()(v34);
      URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
      v31 = 2036427888;
    }
    v35 = 0xE400000000000000;
LABEL_16:
    URLComponents.host.setter(v31, v35);
    sub_10032AAE0(v29 + OBJC_IVAR____TtC8Podcasts25PodcastsURLEpisodeCommand_episodeParameters);
    v23 = URLComponents.queryItems.setter(v36);
    goto LABEL_6;
  }
  swift_retain();
  URLComponents.init()(v18);
  URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
  v19 = 0x6979616C50776F6ELL;
  v20 = 0xEA0000000000676ELL;
LABEL_5:
  v23 = URLComponents.host.setter(v19, v20);
LABEL_6:
  URLComponents.url.getter(v23);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_7:
  swift_release(v16);
LABEL_8:
  swift_release(v16);
  return sub_10003F970((uint64_t)v12, type metadata accessor for PodcastsURLEpisodeParameters);
}

id sub_10031C0E8(double a1, double a2)
{
  void *v4;
  NSString v5;
  id v6;
  id v7;

  v4 = (void *)objc_opt_self(MTPodcast);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "artworkForPodcastUuid:size:triggerDownload:", v5, 0, a1, a2);

  v7 = objc_msgSend(v6, "CGImage");
  return v7;
}

uint64_t sub_10031C194()
{
  id *v0;

  objc_msgSend(*v0, "storeCollectionId");
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
}

uint64_t sub_10031C1E0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

id sub_10031C204()
{
  uint64_t v0;

  return sub_10031C0E8(*(double *)(v0 + 32), *(double *)(v0 + 40));
}

void sub_10031C210()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(unint64_t, __n128);
  uint64_t v6;
  __n128 v7;
  char v8;
  _BYTE v9[24];

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_podcastUuid + 8))
  {
    v1 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_downloadManager);
    v2 = String._bridgeToObjectiveC()();
    v3 = (unint64_t)objc_msgSend(v1, "numberOfDownloadsFrom:", v2);

    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_8:
    v8 = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v8, 3451, 0);
    __break(1u);
    return;
  }
  v3 = (unint64_t)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_downloadManager), "numberOfDownloads");
  if ((v3 & 0x8000000000000000) != 0)
    goto LABEL_8;
LABEL_3:
  if (v3 != *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_currentValue))
  {
    *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_currentValue) = v3;
    v4 = v0 + OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_didChange;
    swift_beginAccess(v4, v9, 0, 0);
    v5 = *(void (**)(unint64_t, __n128))v4;
    if (*(_QWORD *)v4)
    {
      v6 = *(_QWORD *)(v4 + 8);
      v7 = swift_retain(v6);
      v5(v3, v7);
      sub_10002CA30((uint64_t)v5, v6);
    }
  }
}

id sub_10031C34C()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_downloadsNotifier], "unregisterForUpdates:", v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DownloadCountObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DownloadCountObserver()
{
  return objc_opt_self(_TtC8Podcasts21DownloadCountObserver);
}

void sub_10031C530(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *(_QWORD *)(*v1 + OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_currentValue);
}

uint64_t (*sub_10031C548())(_QWORD *)
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  _BYTE v7[24];

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_didChange);
  swift_beginAccess(v1, v7, 0, 0);
  v2 = *v1;
  v3 = v1[1];
  if (v2)
  {
    v4 = swift_allocObject(&unk_1004C27D8, 32, 7);
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = sub_1002726E4;
  }
  else
  {
    v5 = 0;
  }
  sub_10002CA20(v2, v3);
  return v5;
}

uint64_t sub_10031C5E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  if (a1)
  {
    v5 = swift_allocObject(&unk_1004C27B0, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_1002726E0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*v2 + OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_didChange);
  swift_beginAccess(v7, v11, 1, 0);
  v8 = *v7;
  v9 = v7[1];
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  return sub_10002CA30(v8, v9);
}

void (*sub_10031C674(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *);

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_didChange;
  v3[5] = *v1;
  v3[6] = v5;
  v6 = (uint64_t *)(v4 + v5);
  swift_beginAccess(v4 + v5, v3, 33, 0);
  v7 = *v6;
  if (*v6)
  {
    v8 = v6[1];
    v9 = swift_allocObject(&unk_1004C2788, 32, 7);
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = v8;
    v10 = sub_1001D07D4;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v3[3] = v10;
  v3[4] = v9;
  return sub_10031C71C;
}

void sub_10031C71C(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (**v8)(uint64_t);

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) == 0)
  {
    if (v3)
    {
      v7 = v2[4];
      v5 = swift_allocObject(&unk_1004C2760, 32, 7);
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v7;
      v6 = (uint64_t (*)(uint64_t))sub_1002726E0;
      goto LABEL_7;
    }
LABEL_6:
    v6 = 0;
    v5 = 0;
    goto LABEL_7;
  }
  if (!v3)
    goto LABEL_6;
  v4 = v2[4];
  v5 = swift_allocObject(&unk_1004C2738, 32, 7);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = sub_10027269C;
LABEL_7:
  v8 = (uint64_t (**)(uint64_t))(v2[5] + v2[6]);
  *v8 = v6;
  v8[1] = (uint64_t (*)(uint64_t))v5;
  swift_endAccess(v2);
  free(v2);
}

uint64_t sub_10031C7C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

char *sub_10031C7E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  char *v8;

  v8 = (char *)objc_allocWithZone((Class)type metadata accessor for DownloadCountObserver());
  return sub_10031C844(a1, a2, a3, a4, v8);
}

char *sub_10031C844(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char *a5)
{
  char *v8;
  char *v9;
  id v10;
  char *v11;
  void *v12;
  char *v13;
  objc_super v15;

  swift_bridgeObjectRelease(a4);
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_currentValue] = 0;
  v8 = &a5[OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_didChange];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9 = &a5[OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_podcastUuid];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_downloadManager] = a1;
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_downloadsNotifier] = a2;
  v15.receiver = a5;
  v15.super_class = (Class)type metadata accessor for DownloadCountObserver();
  swift_unknownObjectRetain(a1);
  v10 = a2;
  v11 = (char *)objc_msgSendSuper2(&v15, "init");
  v12 = *(void **)&v11[OBJC_IVAR____TtC8Podcasts21DownloadCountObserver_downloadsNotifier];
  v13 = v11;
  objc_msgSend(v12, "registerForUpdates:", v13, v15.receiver, v15.super_class);
  sub_10031C210();

  swift_unknownObjectRelease(a1);
  return v13;
}

void sub_10031C940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(__n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v1 = v0;
  type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin();
  v3 = &v14[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for InteractionContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + 64, v14, 0, 0);
  v8 = *(_QWORD *)(v0 + 64);
  if (v8)
  {
    v9 = *(void (**)(__n128))(*(_QWORD *)v8 + 168);
    v10 = swift_retain();
    v9(v10);
    swift_release(v8);
    InteractionContext.page.getter(v11);
    v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    LOBYTE(v8) = InteractionContext.Page.isShowPage.getter(v12);
    sub_10003F970((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  }
  *(_BYTE *)(v1 + 72) = v8 & 1;
}

uint64_t sub_10031CA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  void *v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  v1 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin();
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(v0 + 72) == 1)
  {
    v4 = *(_QWORD *)(v0 + 56);
    if (v4)
    {
      v5 = v4 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
      swift_beginAccess(v4 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v15, 0, 0);
      sub_10016E904(v5, (uint64_t)v3);
      if (swift_getEnumCaseMultiPayload(v3, v1) != 1)
      {
        v8 = *((_QWORD *)v3 + 1);
        v9 = (void *)objc_opt_self(MTEpisode);
        v10 = String._bridgeToObjectiveC()();
        v11 = objc_msgSend(v9, "predicateForAllEpisodesOnPodcastUuid:", v10, swift_bridgeObjectRelease(v8).n128_f64[0]);

        v12 = *(_QWORD *)(v0 + 40);
        v13 = *(_QWORD *)(v0 + 48);
        sub_10003A834((_QWORD *)(v0 + 16), v12);
        v6 = dispatch thunk of LibraryActionControllerProtocol.hasEpisodesThatAreNotVisuallyPlayed(baseEpisodesPredicate:)(v11, v12, v13);

        return v6 & 1;
      }
      sub_10003F970((uint64_t)v3, type metadata accessor for PodcastContextActionDataType);
    }
  }
  v6 = 0;
  return v6 & 1;
}

uint64_t sub_10031CBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  void (*v17)(__n128);
  __n128 v18;
  __n128 v19;
  void *v20;
  NSString v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE v27[24];

  v1 = v0;
  sub_10003F544(qword_1005542D8);
  __chkstk_darwin();
  v3 = &v26[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for PresentationSource(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for PodcastContextActionDataType(0);
  result = __chkstk_darwin();
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(_BYTE *)(v1 + 72) == 1)
  {
    v12 = *(_QWORD *)(v1 + 56);
    if (v12)
    {
      v13 = v12 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
      swift_beginAccess(v12 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v27, 0, 0);
      sub_10016E904(v13, (uint64_t)v11);
      if (swift_getEnumCaseMultiPayload(v11, v8) == 1)
        return sub_10003F970((uint64_t)v11, type metadata accessor for PodcastContextActionDataType);
      v14 = *((_QWORD *)v11 + 1);
      v15 = swift_beginAccess(v1 + 64, v26, 0, 0);
      v16 = *(_QWORD *)(v1 + 64);
      if (v16)
      {
        v17 = *(void (**)(__n128))(*(_QWORD *)v16 + 120);
        v18 = swift_retain();
        v17(v18);
        v19 = swift_release(v16);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 48))(v3, 1, v4, v19) != 1)
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v3, v4);
          v20 = (void *)objc_opt_self(MTEpisode);
          v21 = String._bridgeToObjectiveC()();
          v22 = objc_msgSend(v20, "predicateForAllEpisodesOnPodcastUuid:", v21, swift_bridgeObjectRelease(v14).n128_f64[0]);

          v23 = (_QWORD *)(v1 + 16);
          v25 = *(_QWORD *)(v1 + 40);
          v24 = *(_QWORD *)(v1 + 48);
          sub_10003A834(v23, v25);
          dispatch thunk of LibraryActionControllerProtocol.handleMarkingEpisodesAsPlayed(source:baseEpisodesPredicate:)(v7, v22, v25, v24);

          return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
        }
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v3, 1, 1, v4, v15);
      }
      swift_bridgeObjectRelease(v14);
      return sub_10016E9C8((uint64_t)v3);
    }
  }
  return result;
}

uint64_t sub_10031CE30()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_10003D380(v0 + 2);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[14]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts28MarkAllAsPlayedContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10031CEA8()
{
  return type metadata accessor for MarkAllAsPlayedContextAction(0);
}

uint64_t type metadata accessor for MarkAllAsPlayedContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100563A98;
  if (!qword_100563A98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MarkAllAsPlayedContextAction);
  return result;
}

uint64_t sub_10031CEEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = "(";
  v4[1] = &unk_1003D56E8;
  v4[2] = &unk_1003D56E8;
  v4[3] = &unk_1003D5700;
  v4[4] = &unk_1003D5718;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = &unk_1003D5730;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    v4[8] = &unk_1003D5748;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10031CFA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t sub_10031CFD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 112));
  return v1;
}

uint64_t sub_10031CFFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts28MarkAllAsPlayedContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10031D040()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts28MarkAllAsPlayedContextAction_contextActionType);
}

id sub_10031D05C()
{
  void *v0;

  return objc_msgSend(v0, "requestNotificationPermissionsIfNeeded");
}

id sub_10031D06C()
{
  void *v0;

  return objc_msgSend(v0, "canPromptForNotificationPermissionsWithPreWarmSheet");
}

id sub_10031D08C()
{
  void *v0;

  return objc_msgSend(v0, "requestNotificationPermissionsWithPreWarmSheetIfNeeded");
}

void sub_10031D09C()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD aBlock[5];
  uint64_t v8;
  __int16 v9;

  v9 = 0;
  v1 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v2 = objc_msgSend(v1, "mainOrPrivateContext");

  v3 = (_QWORD *)swift_allocObject(&unk_1004C2A80, 40, 7);
  v3[2] = v0;
  v3[3] = (char *)&v9 + 1;
  v3[4] = &v9;
  v4 = swift_allocObject(&unk_1004C2AA8, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_10031DA0C;
  *(_QWORD *)(v4 + 24) = v3;
  aBlock[4] = sub_100029B3C;
  v8 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004C2AC0;
  v5 = _Block_copy(aBlock);
  v6 = v8;
  swift_retain();
  swift_retain();
  objc_msgSend(v2, "performBlockAndWait:", v5, swift_release(v6).n128_f64[0]);

  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 131, 31, 70, 1);
  swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_WORD *)(v0 + 72) = v9;
    swift_release(v3);
  }
}

void sub_10031D228(uint64_t a1, _BYTE *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;
  _BYTE v13[24];

  type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin();
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = v8 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
    swift_beginAccess(v8 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v13, 0, 0);
    sub_10016E904(v9, (uint64_t)v7);
    v10 = (void *)sub_1001E2CF0();
    sub_10003F970((uint64_t)v7, type metadata accessor for PodcastContextActionDataType);
    if (v10)
    {
      *a2 = MTPodcastHidesPlayedEpisodesResolved(objc_msgSend(v10, "hidesPlayedEpisodes"));
      v11 = objc_msgSend(v10, "subscribed");

      *a3 = v11;
    }
  }
}

uint64_t sub_10031D31C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(__n128);
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32[24];

  v1 = v0;
  v2 = type metadata accessor for InteractionContext.Origin(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v29 - v6;
  type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin();
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for InteractionContext(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v29 - v14;
  if (*(_QWORD *)(v1 + 56))
  {
    v31 = v3;
    swift_beginAccess(v1 + 64, v32, 0, 0);
    v16 = *(_QWORD *)(v1 + 64);
    if (v16)
    {
      v30 = v2;
      v17 = *(void (**)(__n128))(*(_QWORD *)v16 + 168);
      v18 = swift_retain();
      v17(v18);
      v19 = swift_release(v16);
      v20 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v11 + 32))(v15, v13, v10, v19);
      v21 = InteractionContext.page.getter(v20);
      v22 = InteractionContext.Page.isShowPage.getter(v21);
      v23 = sub_10003F970((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
      if ((v22 & 1) != 0)
      {
        InteractionContext.origin.getter(v23);
        v25 = v30;
        v24 = v31;
        (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v5, enum case for InteractionContext.Origin.local(_:), v30);
        v26 = static InteractionContext.Origin.== infix(_:_:)(v7, v5);
        v27 = *(void (**)(char *, uint64_t))(v24 + 8);
        v27(v5, v25);
        v27(v7, v25);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
        if ((v26 & 1) != 0)
          return *(unsigned __int8 *)(v1 + 72);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
      }
    }
  }
  return 0;
}

void sub_10031D550()
{
  uint64_t v0;
  int v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[5];
  uint64_t v9;

  if (*(_BYTE *)(v0 + 73))
    v1 = 1;
  else
    v1 = 2;
  v2 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v3 = objc_msgSend(v2, "mainOrPrivateContext");

  v4 = swift_allocObject(&unk_1004C2A30, 40, 7);
  *(_QWORD *)(v4 + 16) = v0;
  *(_DWORD *)(v4 + 24) = v1;
  *(_QWORD *)(v4 + 32) = v3;
  v8[4] = sub_10031D9D8;
  v9 = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100027AF8;
  v8[3] = &unk_1004C2A48;
  v5 = _Block_copy(v8);
  v6 = v9;
  swift_retain();
  v7 = v3;
  objc_msgSend(v7, "performBlock:", v5, swift_release(v6).n128_f64[0]);
  _Block_release(v5);

}

void sub_10031D668(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _BYTE v12[24];

  type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin();
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = v8 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
    swift_beginAccess(v8 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v12, 0, 0);
    sub_10016E904(v9, (uint64_t)v7);
    v10 = (void *)sub_1001E2CF0();
    sub_10003F970((uint64_t)v7, type metadata accessor for PodcastContextActionDataType);
    if (v10)
    {
      objc_msgSend(v10, "setHidesPlayedEpisodes:", a2);
      objc_msgSend(a3, "saveInCurrentBlock");

    }
  }
}

uint64_t sub_10031D74C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_10003D380(v0 + 2);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[12]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts38HidePlayedEpisodesPodcastContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10031D7BC()
{
  return type metadata accessor for HidePlayedEpisodesPodcastContextAction(0);
}

uint64_t type metadata accessor for HidePlayedEpisodesPodcastContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100563BE8;
  if (!qword_100563BE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HidePlayedEpisodesPodcastContextAction);
  return result;
}

uint64_t sub_10031D800(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = "(";
  v4[1] = &unk_1003D5880;
  v4[2] = &unk_1003D5880;
  v4[3] = &unk_1003D5898;
  v4[4] = &unk_1003D5898;
  v4[5] = &unk_1003D58B0;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = &unk_1003D58C8;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10031D8B0()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010043D700;
  v1._countAndFlagsBits = 0xD000000000000014;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_10031D94C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts38HidePlayedEpisodesPodcastContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10031D990()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 74);
}

uint64_t sub_10031D9A4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t sub_10031D9AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10031D9D8()
{
  uint64_t v0;

  sub_10031D668(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10031D9E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10031DA0C()
{
  uint64_t v0;

  sub_10031D228(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24), *(unsigned __int8 **)(v0 + 32));
}

uint64_t sub_10031DA18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10031DA30()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  id v17;
  char *v18;
  uint64_t v19;
  objc_class *v20;
  char *v21;
  char *v22;
  uint64_t (**v23)@<X0>(uint64_t@<X8>);
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t (**v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void (*)(), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  Class isa;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  objc_super v55;
  uint64_t v56;
  objc_super v57;

  v1 = v0;
  v2 = static os_log_type_t.default.getter();
  v3 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v4 = (void *)static OS_os_log.downloads.getter(v3);
  v5 = sub_10003F544(&qword_1005559A0);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1003CA200;
  v7 = (uint64_t *)&v0[OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input];
  v8 = v0[OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input + 8];
  if (v0[OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input + 8])
    goto LABEL_19;
  v9 = (_QWORD *)v6;
  v10 = *v7;
  if ((unint64_t)*v7 >> 62)
  {
    v51 = v10 >= 0 ? v10 & 0xFFFFFFFFFFFFFF8 : *v7;
    swift_bridgeObjectRetain(*v7);
    v11 = _CocoaArrayWrapper.endIndex.getter(v51);
    sub_100045978(v10, 0);
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v9[7] = &type metadata for Int;
  v9[8] = &protocol witness table for Int;
  v9[4] = v11;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v4, "About to start %d download pipelines.", v52);

  swift_bridgeObjectRelease(v9);
  v8 = *((unsigned __int8 *)v7 + 8);
  if (*((_BYTE *)v7 + 8))
  {
LABEL_19:
    if (v8 == 1)
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000005CLL, 0x800000010043A070, "Podcasts/BaseOperation.swift", 28, 2, 141, 0);
    else
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000054, 0x800000010043A0D0, "Podcasts/BaseOperation.swift", 28, 2, 139, 0);
    __break(1u);
  }
  else
  {
    v12 = *v7;
    v13 = swift_allocObject(&unk_1004C2B10, 24, 7);
    swift_unknownObjectWeakInit(v13 + 16, v0);
    sub_100045994(v12, 0);
    v14 = sub_10031E420(v12, v13);
    sub_100045978(v12, 0);
    swift_release(v13);
    v16 = (void *)static OS_os_log.default.getter(v15);
    v17 = objc_allocWithZone((Class)type metadata accessor for GroupOperation());
    v18 = (char *)sub_100366114((uint64_t)v14, 1, v16);
    swift_bridgeObjectRelease(v14);
    v19 = swift_allocObject(&unk_1004C2B38, 24, 7);
    *(_QWORD *)(v19 + 16) = v1;
    v20 = (objc_class *)sub_10003F544((uint64_t *)&unk_10055BCB0);
    v21 = (char *)objc_allocWithZone(v20);
    v22 = &v21[*(_QWORD *)((swift_isaMask & *(_QWORD *)v21) + 0x180)];
    *(_QWORD *)v22 = 0;
    v22[8] = 2;
    v23 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v21[*(_QWORD *)((swift_isaMask & *(_QWORD *)v21) + 0x188)];
    *v23 = sub_10031E61C;
    v23[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v19;
    v57.receiver = v21;
    v57.super_class = v20;
    v24 = v1;
    v25 = objc_msgSendSuper2(&v57, "init");
    v26 = swift_allocObject(&unk_1004C2B60, 24, 7);
    swift_unknownObjectWeakInit(v26 + 16, v25);
    v27 = (uint64_t (**)(uint64_t))&v18[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v28 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v29 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
    *v27 = sub_10014FDA0;
    v27[1] = (uint64_t (*)(uint64_t))v26;
    sub_10002CA30(v28, v29);
    v30 = objc_opt_self(NSOperation);
    v31 = swift_dynamicCastObjCClass(v18, v30);
    if (v31)
    {
      v33 = v31;
      ObjectType = swift_getObjectType(v31, v32);
      v35 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
      if (v35)
        v37 = v35;
      else
        v37 = 0;
      if (v35)
        v38 = v33;
      else
        v38 = 0;
      if (v38)
      {
        v54 = swift_getObjectType(v38, v36);
        v39 = swift_allocObject(&unk_1004C2B88, 32, 7);
        *(_QWORD *)(v39 + 24) = v37;
        swift_unknownObjectWeakInit(v39 + 16, v38);
        v40 = swift_allocObject(&unk_1004C2BB0, 24, 7);
        swift_unknownObjectWeakInit(v40 + 16, v25);
        v41 = swift_allocObject(&unk_1004C2BD8, 32, 7);
        *(_QWORD *)(v41 + 16) = v40;
        *(_QWORD *)(v41 + 24) = v39;
        v42 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t, __n128))(v37 + 72);
        swift_unknownObjectRetain(v18);
        v53 = v18;
        swift_retain();
        v43 = swift_retain();
        v42(sub_1000450E8, v41, v54, v37, v43);
        swift_release(v39);
        swift_release(v40);
        swift_release(v41);
        v55.receiver = v25;
        v55.super_class = (Class)type metadata accessor for BaseOperation();
        objc_msgSendSuper2(&v55, "addDependency:", v33);

      }
    }
    v44 = *(void **)&v24[OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_serialQueue];
    v45 = sub_10003F544((uint64_t *)&unk_100553780);
    v46 = swift_allocObject(v45, 48, 7);
    *(_OWORD *)(v46 + 16) = xmmword_1003CDE60;
    *(_QWORD *)(v46 + 32) = v18;
    *(_QWORD *)(v46 + 40) = v25;
    v56 = v46;
    specialized Array._endMutation()(v46);
    v47 = v56;
    sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
    v48 = v18;
    v49 = v25;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v44, "addOperations:waitUntilFinished:", isa, 0, swift_bridgeObjectRelease(v47).n128_f64[0]);

  }
}

uint64_t sub_10031DF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];

  v9 = swift_allocObject(&unk_1004C2C28, 32, 7);
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  a5 += 16;
  swift_beginAccess(a5, v22, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a5);
  v11 = (void *)Strong;
  if (!Strong)
  {
    swift_retain();
LABEL_6:
    v15 = 0;
    v17 = 0;
    v19 = 0;
    goto LABEL_7;
  }
  v12 = *(uint64_t (**)(uint64_t))(Strong + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_beforeTakeOff);
  v13 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_beforeTakeOff + 8);
  swift_retain();
  sub_10002CA20((uint64_t)v12, v13);

  if (!v12)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v11 = (void *)v12(a4 + OBJC_IVAR____TtC8Podcasts11JobPipeline_metadata);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  sub_10002CA30((uint64_t)v12, v13);
LABEL_7:
  v20 = swift_allocObject(&unk_1004C2C50, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_10003A874;
  *(_QWORD *)(v20 + 24) = v9;
  sub_10013EC44((uint64_t)v11, v15, v17, v19, (uint64_t)sub_10031E68C, v20);
  swift_release(v20);
  return sub_100151B40((uint64_t)v11, v15, v17, v19);
}

uint64_t sub_10031E0DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void (*v8)(uint64_t *);
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v4 = static os_log_type_t.default.getter();
  v5 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v6 = (void *)static OS_os_log.downloads.getter(v5);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v6, "All pipelines have been started.", 32, 2, _swiftEmptyArrayStorage);

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input + 8))
  {
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input + 8) == 1)
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000005CLL, 0x800000010043A070, "Podcasts/BaseOperation.swift", 28, 2, 141, 0);
    else
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000054, 0x800000010043A0D0, "Podcasts/BaseOperation.swift", 28, 2, 139, 0);
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input);
    v8 = *(void (**)(uint64_t *))(a1 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8);
      v13 = sub_10003F544(&qword_100563DB0);
      v11 = v7;
      v12 = 0;
      sub_100045994(v7, 0);
      sub_100045994(v7, 0);
      sub_10002CA20((uint64_t)v8, v9);
      v8(&v11);
      sub_10002CA30((uint64_t)v8, v9);
      sub_10003D380(&v11);
    }
    else
    {
      swift_bridgeObjectRetain(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input));
    }
    sub_100044BF0();
    result = sub_100045978(v7, 0);
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t sub_10031E2F0()
{
  uint64_t v0;

  sub_10002CA30(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_beforeTakeOff), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_beforeTakeOff + 8));
  return sub_100045978(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input), *(_BYTE *)(v0 + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input + 8));
}

id sub_10031E338()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StartJobPipelinesOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for StartJobPipelinesOperation()
{
  return objc_opt_self(_TtC8Podcasts26StartJobPipelinesOperation);
}

uint64_t sub_10031E3DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = v1 + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input);
  *(_QWORD *)a1 = v3;
  v4 = *(_BYTE *)(v2 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  return sub_100045994(v3, v4);
}

uint64_t sub_10031E3FC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

_QWORD *sub_10031E420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  uint64_t (**v12)(uint64_t, uint64_t, uint64_t);
  double v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;
  _QWORD *v19;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v4)
      break;
    v19 = _swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * v6 + 32);
        swift_retain();
      }
      ++v6;
      v8 = swift_allocObject(&unk_1004C2C00, 32, 7);
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = a2;
      v9 = (objc_class *)sub_10003F544(&qword_1005540C8);
      v10 = (char *)objc_allocWithZone(v9);
      v11 = &v10[*(_QWORD *)((swift_isaMask & *(_QWORD *)v10) + 0x180)];
      *(_QWORD *)v11 = 0;
      v11[8] = 2;
      v12 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v10[*(_QWORD *)((swift_isaMask & *(_QWORD *)v10)
                                                                               + 0x188)];
      *v12 = sub_10031E660;
      v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v8;
      v18.receiver = v10;
      v18.super_class = v9;
      *(_QWORD *)&v13 = swift_retain().n128_u64[0];
      v14 = objc_msgSendSuper2(&v18, "init", v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v15 = v19[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
      specialized ContiguousArray._endMutation()(v16);
      if (v4 == v6)
        return v19;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_10031E5F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10031E61C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10031E0DC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10031E634()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10031E660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10031DF64(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_10031E668()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10031E68C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(0, 0);
}

void sub_10031E6C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(_QWORD, __n128))
{
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t v14;
  __n128 v15;

  if (!((unint64_t)a1 >> 62))
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v10)
      goto LABEL_3;
LABEL_13:
    v15 = swift_bridgeObjectRelease(a1);
    a5(0, v15);
    return;
  }
  if (a1 < 0)
    v14 = a1;
  else
    v14 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v10 = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!v10)
    goto LABEL_13;
LABEL_3:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v12 = *(id *)(a1 + 8 * i + 32);
      v13 = v12;
      sub_10031E7BC(v12, a2, a3, a4);

    }
    goto LABEL_13;
  }
  __break(1u);
}

void sub_10031E7BC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  id v16;
  id v17;
  unint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, "identifierPath");
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for String);

  v14 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRelease(v13);
  if (v14 > 2)
  {
    v18 = sub_100181038();
    static OS_os_log.classKit.getter(v18);
    v19 = a1;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v35 = v32;
      *(_DWORD *)v22 = 136315138;
      v31 = v22 + 4;
      v23 = objc_msgSend(v19, "identifierPath");
      v33 = v8;
      v24 = v23;
      v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for String);

      v26 = Array.description.getter(v25, &type metadata for String);
      v28 = v27;
      swift_bridgeObjectRelease(v25);
      v34 = sub_10003D274(v26, v28, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v31, v22 + 12);

      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Invalid show context - %s", v22, 0xCu);
      v29 = v32;
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v33);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  else
  {
    v15 = (_QWORD *)swift_allocObject(&unk_1004C2D60, 48, 7);
    v15[2] = a2;
    v15[3] = a3;
    v15[4] = a4;
    v15[5] = a1;
    swift_bridgeObjectRetain(a3);
    v16 = a4;
    v17 = a1;
    sub_100326E28((uint64_t)sub_10031FDC4, (uint64_t)v15);
    swift_release(v15);
  }
}

double sub_10031EA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double result;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_allocObject(&unk_1004C2C98, 56, 7);
  v17[2] = a3;
  v17[3] = a4;
  v17[4] = a5;
  v17[5] = a1;
  v17[6] = a2;
  aBlock[4] = sub_10031ED30;
  v27 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C2CB0;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a4);
  a5;
  swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v25 = _swiftEmptyArrayStorage;
  v20 = sub_10017F258();
  v21 = sub_10003F544((uint64_t *)&unk_10055B200);
  v22 = sub_100026534();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v10, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  return result;
}

double sub_10031EC70(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v10;
  _QWORD *v11;
  id v12;
  double result;

  v10 = objc_msgSend((id)objc_opt_self(CLSDataStore), "shared");
  v11 = (_QWORD *)swift_allocObject(&unk_1004C2CE8, 56, 7);
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  v11[5] = a4;
  v11[6] = a5;
  swift_bridgeObjectRetain(a2);
  v12 = a3;
  swift_retain();
  sub_100193124((uint64_t)sub_10031F1AC, (uint64_t)v11);

  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

double sub_10031ED30()
{
  uint64_t v0;

  return sub_10031EC70(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

void sub_10031ED40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t aBlock[5];
  _QWORD *v58;

  v53 = a6;
  v54 = a7;
  v55 = a1;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger(0);
  __chkstk_darwin();
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin();
  v21 = (char *)&v49 - v20;
  if (a2)
  {
    v54 = v19;
    v55 = v18;
    sub_100181038();
    v22 = swift_errorRetain();
    static OS_os_log.classKit.getter(v22);
    swift_errorRetain();
    v23 = swift_errorRetain();
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v56 = a2;
      aBlock[0] = v27;
      *(_DWORD *)v26 = 136315138;
      swift_errorRetain();
      v28 = sub_10003F544((uint64_t *)&unk_10055A340);
      v29 = String.init<A>(describing:)(&v56, v28);
      v31 = v30;
      v56 = (_QWORD *)sub_10003D274(v29, v30, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, aBlock, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v31);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error finding all show contexts - %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v21, v55);
  }
  else
  {
    v49 = v8;
    v50 = v13;
    v32 = v53;
    v33 = v54;
    v51 = v12;
    v52 = v9;
    v34 = v55;
    if (v55)
    {
      v35 = (_QWORD *)swift_allocObject(&unk_1004C2D10, 40, 7);
      v35[2] = v32;
      v35[3] = v33;
      v35[4] = v34;
      aBlock[4] = (uint64_t)sub_1002F650C;
      v58 = v35;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100027AF8;
      aBlock[3] = (uint64_t)&unk_1004C2D28;
      v36 = _Block_copy(aBlock);
      swift_bridgeObjectRetain(v34);
      swift_retain();
      static DispatchQoS.unspecified.getter(v37);
      v56 = _swiftEmptyArrayStorage;
      v38 = sub_10017F258();
      v39 = sub_10003F544((uint64_t *)&unk_10055B200);
      v40 = sub_100026534();
      v41 = v49;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v39, v40, v49, v38);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v36);
      _Block_release(v36);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v41);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v51);
      swift_release(v58);
    }
    else
    {
      v42 = v19;
      v43 = v18;
      v44 = sub_100181038();
      v45 = static OS_os_log.classKit.getter(v44);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.error.getter(v46);
      if (os_log_type_enabled(v46, (os_log_type_t)v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v47, "Unable to load all show contexts", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v43);
    }
  }
}

void sub_10031F1AC(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;

  sub_10031ED40(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

void sub_10031F1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  __n128 v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void **v55;
  char v56;
  unint64_t v57;
  char *v58;
  id v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint8_t *v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint8_t *v68;
  void **v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  id v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void **v86;
  unint64_t v87;
  id v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  void **v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void **v98;
  uint64_t v99;
  uint64_t v100;
  uint8_t *v101;
  uint8_t *v102;
  void **v103;
  void ***p_aBlock;
  char *v105;
  id v106;
  char *v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  __n128 v110;
  char *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void **aBlock;
  uint64_t v120;
  void (*v121)(uint64_t, void *);
  void *v122;
  uint64_t (*v123)(uint64_t);
  uint64_t v124;

  v106 = a5;
  v116 = type metadata accessor for Logger(0);
  v113 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v107 = (char *)&v100 - v8;
  __chkstk_darwin();
  v108 = (char *)&v100 - v9;
  if ((unint64_t)a1 >> 62)
    goto LABEL_100;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
LABEL_3:
  v112 = v7;
  v114 = a1;
  v117 = v10;
  if (v10)
  {
    v11 = a1;
    a1 = 0;
    v12 = v11 & 0xC000000000000001;
    v13 = v11 + 32;
    v111 = (char *)&aBlock + 2;
    v115 = (char *)&aBlock + 3;
    v7 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v12)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v114);
      else
        v14 = *(id *)(v13 + 8 * a1);
      v15 = v14;
      if (__OFADD__(a1++, 1))
      {
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        if (a1 < 0)
          v99 = a1;
        else
          v99 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v10 = _CocoaArrayWrapper.endIndex.getter(v99);
        goto LABEL_3;
      }
      v17 = objc_msgSend(v14, "identifier");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      v21 = HIBYTE(v20) & 0xF;
      v22 = v18 & 0xFFFFFFFFFFFFLL;
      if ((v20 & 0x2000000000000000) != 0)
        v23 = HIBYTE(v20) & 0xF;
      else
        v23 = v18 & 0xFFFFFFFFFFFFLL;
      if (!v23)
      {

        swift_bridgeObjectRelease(v20);
LABEL_70:
        v10 = v117;
        goto LABEL_6;
      }
      if ((v20 & 0x1000000000000000) != 0)
      {
        v25 = sub_1002D6014(v18, v20, 10);
        v43 = v42;

        swift_bridgeObjectRelease(v20);
        if ((v43 & 1) == 0)
        {
          v10 = v117;
LABEL_63:
          if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
            v7 = sub_10027B24C(0, v7[2] + 1, 1, v7);
          v41 = v7[2];
          v40 = v7[3];
          if (v41 >= v40 >> 1)
            v7 = sub_10027B24C((_QWORD *)(v40 > 1), v41 + 1, 1, v7);
          v7[2] = v41 + 1;
          v7[v41 + 4] = v25;
          goto LABEL_6;
        }
        goto LABEL_70;
      }
      if ((v20 & 0x2000000000000000) != 0)
      {
        aBlock = (void **)v18;
        v120 = v20 & 0xFFFFFFFFFFFFFFLL;
        if (v18 == 43)
        {
          if (!v21)
            goto LABEL_99;
          if (v21 == 1 || (BYTE1(v18) - 48) > 9u)
            goto LABEL_41;
          v25 = (BYTE1(v18) - 48);
          if (v21 == 2)
          {
LABEL_43:
            v27 = 0;
            v10 = v117;
            goto LABEL_62;
          }
          if ((BYTE2(v18) - 48) > 9u)
            goto LABEL_41;
          v25 = 10 * (BYTE1(v18) - 48) + (BYTE2(v18) - 48);
          v28 = v21 - 3;
          v10 = v117;
          if (!v28)
          {
LABEL_54:
            v27 = 0;
            goto LABEL_62;
          }
          v29 = (unsigned __int8 *)v115;
          while (1)
          {
            v30 = *v29 - 48;
            if (v30 > 9)
              break;
            v31 = 10 * v25;
            if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63)
              break;
            v25 = v31 + v30;
            if (__OFADD__(v31, v30))
              break;
            v27 = 0;
            ++v29;
            if (!--v28)
              goto LABEL_62;
          }
        }
        else if (v18 == 45)
        {
          if (!v21)
            goto LABEL_98;
          if (v21 == 1 || (BYTE1(v18) - 48) > 9u)
            goto LABEL_41;
          if (v21 == 2)
          {
            v27 = 0;
            v25 = -(uint64_t)(BYTE1(v18) - 48);
            v10 = v117;
            goto LABEL_62;
          }
          if ((BYTE2(v18) - 48) > 9u)
          {
LABEL_41:
            v25 = 0;
            v27 = 1;
            v10 = v117;
            goto LABEL_62;
          }
          v25 = -10 * (BYTE1(v18) - 48) - (BYTE2(v18) - 48);
          v36 = v21 - 3;
          v10 = v117;
          if (!v36)
            goto LABEL_54;
          v37 = (unsigned __int8 *)v115;
          while (1)
          {
            v38 = *v37 - 48;
            if (v38 > 9)
              break;
            v39 = 10 * v25;
            if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63)
              break;
            v25 = v39 - v38;
            if (__OFSUB__(v39, v38))
              break;
            v27 = 0;
            ++v37;
            if (!--v36)
              goto LABEL_62;
          }
        }
        else
        {
          if (!v21 || (v18 - 48) > 9u)
            goto LABEL_41;
          v25 = (v18 - 48);
          if (v21 == 1)
            goto LABEL_43;
          if ((BYTE1(v18) - 48) > 9u)
            goto LABEL_41;
          v25 = 10 * (v18 - 48) + (BYTE1(v18) - 48);
          v32 = v21 - 2;
          v10 = v117;
          if (!v32)
            goto LABEL_54;
          v33 = (unsigned __int8 *)v111;
          while (1)
          {
            v34 = *v33 - 48;
            if (v34 > 9)
              break;
            v35 = 10 * v25;
            if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63)
              break;
            v25 = v35 + v34;
            if (__OFADD__(v35, v34))
              break;
            v27 = 0;
            ++v33;
            if (!--v32)
              goto LABEL_62;
          }
        }
        v25 = 0;
        v27 = 1;
      }
      else
      {
        if ((v18 & 0x1000000000000000) != 0)
          v24 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v24 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v18, v20);
        v10 = v117;
        v25 = (uint64_t)sub_1002D6000(v24, v22, 10);
        v27 = v26 & 1;
      }
LABEL_62:

      swift_bridgeObjectRelease(v20);
      if ((v27 & 1) == 0)
        goto LABEL_63;
LABEL_6:
      if (a1 == v10)
      {
        a1 = v114;
        swift_bridgeObjectRelease(v114);
        goto LABEL_74;
      }
    }
  }
  swift_bridgeObjectRelease(a1);
  v7 = _swiftEmptyArrayStorage;
LABEL_74:
  v44 = sub_10036A43C((uint64_t)v7);
  swift_bridgeObjectRelease(v7);
  if (!v10)
  {
    a1 = v44;
LABEL_96:
    swift_bridgeObjectRelease(a1);
    return;
  }
  v45 = v112;
  if (v10 >= 1)
  {
    v115 = (char *)(a1 & 0xC000000000000001);
    p_aBlock = &aBlock;
    v46 = swift_bridgeObjectRetain(a1);
    v47 = 0;
    v46.n128_u64[0] = 136315138;
    v110 = v46;
    v105 = (char *)&type metadata for Any + 8;
    v111 = (char *)v44;
    do
    {
      if (v115)
        v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, a1);
      else
        v50 = *(id *)(a1 + 8 * v47 + 32);
      v48 = v50;
      v51 = objc_msgSend(v50, "identifier");
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      v55 = (void **)sub_10031FDD0(v52, v54);
      LOBYTE(v51) = v56;
      swift_bridgeObjectRelease(v54);
      if ((v51 & 1) == 0)
      {
        if (!sub_10029141C((uint64_t)v55, v44))
        {
          v57 = sub_100181038();
          v58 = v108;
          v109 = (void (*)(char *, uint64_t))v57;
          static OS_os_log.classKit.getter(v57);
          v59 = v48;
          v60 = Logger.logObject.getter(v59);
          v61 = static os_log_type_t.debug.getter(v60);
          if (os_log_type_enabled(v60, v61))
          {
            v62 = (uint8_t *)swift_slowAlloc(12, -1);
            v103 = (void **)swift_slowAlloc(32, -1);
            aBlock = v103;
            v102 = v62;
            *(_DWORD *)v62 = v110.n128_u32[0];
            v63 = v62 + 12;
            v101 = v62 + 4;
            v64 = objc_msgSend(v59, "identifier");
            v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
            v67 = v66;

            v118 = sub_10003D274(v65, v67, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, p_aBlock, v101, v63);

            swift_bridgeObjectRelease(v67);
            v68 = v102;
            _os_log_impl((void *)&_mh_execute_header, v60, v61, "Creating copy of episode context - %s", v102, 0xCu);
            v69 = v103;
            swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v69, -1, -1);
            swift_slowDealloc(v68, -1, -1);

            v70 = *(void (**)(char *, uint64_t))(v113 + 8);
            v70(v108, v116);
          }
          else
          {

            v70 = *(void (**)(char *, uint64_t))(v113 + 8);
            v70(v58, v116);
          }
          v71 = v107;
          aBlock = v55;
          v72 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
          v74 = v73;
          v75 = sub_100326B6C(v72, v73);
          swift_bridgeObjectRelease(v74);
          static OS_os_log.classKit.getter(v76);
          v77 = v75;
          v78 = Logger.logObject.getter(v77);
          v79 = static os_log_type_t.info.getter(v78);
          if (os_log_type_enabled(v78, v79))
          {
            v80 = (uint8_t *)swift_slowAlloc(12, -1);
            v103 = (void **)swift_slowAlloc(32, -1);
            aBlock = v103;
            *(_DWORD *)v80 = v110.n128_u32[0];
            v102 = v80 + 4;
            v81 = objc_msgSend(v77, "identifier");
            v109 = v70;
            v82 = v81;
            v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
            v85 = v84;

            v118 = sub_10003D274(v83, v85, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, p_aBlock, v102, v80 + 12);

            swift_bridgeObjectRelease(v85);
            _os_log_impl((void *)&_mh_execute_header, v78, v79, "Adding migrated episode context - %s", v80, 0xCu);
            v86 = v103;
            swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v86, -1, -1);
            swift_slowDealloc(v80, -1, -1);

            v109(v107, v116);
          }
          else
          {

            v70(v71, v116);
          }
          a1 = v114;
          v45 = v112;
          objc_msgSend(v106, "addChildContext:", v77);

          v10 = v117;
          v44 = (uint64_t)v111;
        }
        v87 = sub_100181038();
        static OS_os_log.classKit.getter(v87);
        v88 = v48;
        v89 = Logger.logObject.getter(v88);
        v90 = static os_log_type_t.info.getter(v89);
        if (os_log_type_enabled(v89, v90))
        {
          v91 = swift_slowAlloc(12, -1);
          v92 = (void **)swift_slowAlloc(32, -1);
          aBlock = v92;
          *(_DWORD *)v91 = v110.n128_u32[0];
          v93 = objc_msgSend(v88, "identifier");
          v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
          v96 = v95;

          *(_QWORD *)(v91 + 4) = sub_10003D274(v94, v96, (uint64_t *)&aBlock);
          v97 = v96;
          v44 = (uint64_t)v111;
          v45 = v112;
          swift_bridgeObjectRelease(v97);
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "Removing old episode context - %s", (uint8_t *)v91, 0xCu);
          swift_arrayDestroy(v92, 1, v105);
          v98 = v92;
          v10 = v117;
          swift_slowDealloc(v98, -1, -1);
          swift_slowDealloc(v91, -1, -1);

        }
        else
        {

        }
        (*(void (**)(_QWORD *, uint64_t))(v113 + 8))(v45, v116);
        objc_msgSend(v88, "removeFromParent");
        v48 = objc_msgSend((id)objc_opt_self(CLSDataStore), "shared");
        v123 = sub_10028D5CC;
        v124 = 0;
        aBlock = _NSConcreteStackBlock;
        v120 = 1107296256;
        v121 = sub_100004B9C;
        v122 = &unk_1004C2D78;
        v49 = _Block_copy(&aBlock);
        objc_msgSend(v48, "saveWithCompletion:", v49);
        _Block_release(v49);

      }
      ++v47;

    }
    while (v10 != v47);
    swift_bridgeObjectRelease(v44);
    goto LABEL_96;
  }
  __break(1u);
}

uint64_t sub_10031FD64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10031FD90()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10031FDC4(uint64_t a1)
{
  uint64_t v1;

  sub_10031F1BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

id sub_10031FDD0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (id)__chkstk_darwin();
  v10 = (char *)&v44 - v9;
  v11 = HIBYTE(a2) & 0xF;
  v12 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v13 = HIBYTE(a2) & 0xF;
  else
    v13 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v13)
    goto LABEL_58;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a2);
    v17 = sub_1002D6014(a1, a2, 10);
    v36 = v35;
    swift_bridgeObjectRelease(a2);
    if ((v36 & 1) != 0)
      goto LABEL_58;
    goto LABEL_36;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v14 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    v15 = sub_1002D6000(v14, v12, 10);
    if ((v16 & 1) == 0)
    {
      v17 = (uint64_t)v15;
      goto LABEL_36;
    }
LABEL_58:
    v37 = sub_100181038();
    static OS_os_log.classKit.getter(v37);
    v38 = swift_bridgeObjectRetain_n(a2, 2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v45 = v4;
      v43 = v42;
      v46 = v42;
      *(_DWORD *)v41 = 136315138;
      swift_bridgeObjectRetain(a2);
      v48 = sub_10003D274(a1, a2, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v41 + 4, v41 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to convert episode context identifier to Int64 - %s", v41, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v41, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v45);
      return 0;
    }

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
  v46 = a1;
  v47 = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v11)
    {
LABEL_65:
      __break(1u);
      return result;
    }
    if (v11 == 1)
      goto LABEL_63;
    if ((BYTE1(a1) - 48) <= 9u)
    {
      v17 = (BYTE1(a1) - 48);
      if (v11 == 2)
        goto LABEL_34;
      if ((BYTE2(a1) - 48) <= 9u)
      {
        v17 = 10 * (BYTE1(a1) - 48) + (BYTE2(a1) - 48);
        v18 = v11 - 3;
        if (v11 != 3)
        {
          v19 = (unsigned __int8 *)&v46 + 3;
          while (1)
          {
            v20 = *v19 - 48;
            if (v20 > 9)
              goto LABEL_32;
            v21 = 10 * v17;
            if ((unsigned __int128)(v17 * (__int128)10) >> 64 != (10 * v17) >> 63)
              goto LABEL_32;
            v17 = v21 + v20;
            if (__OFADD__(v21, v20))
              goto LABEL_32;
            LOBYTE(v11) = 0;
            ++v19;
            if (!--v18)
              goto LABEL_35;
          }
        }
        goto LABEL_34;
      }
    }
LABEL_32:
    v17 = 0;
    LOBYTE(v11) = 1;
    goto LABEL_35;
  }
  if (a1 != 45)
  {
    if (!v11 || (a1 - 48) > 9u)
      goto LABEL_32;
    v17 = (a1 - 48);
    if (v11 == 1)
    {
LABEL_34:
      LOBYTE(v11) = 0;
      goto LABEL_35;
    }
    if ((BYTE1(a1) - 48) <= 9u)
    {
      v17 = 10 * (a1 - 48) + (BYTE1(a1) - 48);
      v27 = v11 - 2;
      if (v11 != 2)
      {
        v28 = (unsigned __int8 *)&v46 + 2;
        while (1)
        {
          v29 = *v28 - 48;
          if (v29 > 9)
            goto LABEL_32;
          v30 = 10 * v17;
          if ((unsigned __int128)(v17 * (__int128)10) >> 64 != (10 * v17) >> 63)
            goto LABEL_32;
          v17 = v30 + v29;
          if (__OFADD__(v30, v29))
            goto LABEL_32;
          LOBYTE(v11) = 0;
          ++v28;
          if (!--v27)
            goto LABEL_35;
        }
      }
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (!v11)
  {
    __break(1u);
    goto LABEL_65;
  }
  if (v11 != 1)
  {
    if ((BYTE1(a1) - 48) > 9u)
      goto LABEL_32;
    if (v11 == 2)
    {
      LOBYTE(v11) = 0;
      v17 = -(uint64_t)(BYTE1(a1) - 48);
      goto LABEL_35;
    }
    if ((BYTE2(a1) - 48) > 9u)
      goto LABEL_32;
    v17 = -10 * (BYTE1(a1) - 48) - (BYTE2(a1) - 48);
    v31 = v11 - 3;
    if (v11 != 3)
    {
      v32 = (unsigned __int8 *)&v46 + 3;
      while (1)
      {
        v33 = *v32 - 48;
        if (v33 > 9)
          goto LABEL_32;
        v34 = 10 * v17;
        if ((unsigned __int128)(v17 * (__int128)10) >> 64 != (10 * v17) >> 63)
          goto LABEL_32;
        v17 = v34 - v33;
        if (__OFSUB__(v34, v33))
          goto LABEL_32;
        LOBYTE(v11) = 0;
        ++v32;
        if (!--v31)
          goto LABEL_35;
      }
    }
    goto LABEL_34;
  }
LABEL_63:
  v17 = 0;
LABEL_35:
  if ((v11 & 1) != 0)
    goto LABEL_58;
LABEL_36:
  result = objc_msgSend((id)objc_opt_self(MTStoreIdentifier), "serpentIdFromAdamId:", v17);
  if ((id)v17 == result)
  {
    v22 = sub_100181038();
    v23 = static OS_os_log.classKit.getter(v22);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v26 = 134217984;
      v46 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v26 + 4, v26 + 12);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Episode context already has migrated identifier - %lld", v26, 0xCu);
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    return 0;
  }
  return result;
}

void destroy for OldEpisodeContextMigration(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

_QWORD *_s8Podcasts26OldEpisodeContextMigrationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for OldEpisodeContextMigration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  return a1;
}

_QWORD *assignWithTake for OldEpisodeContextMigration(_QWORD *a1, uint64_t a2)
{
  void *v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for OldEpisodeContextMigration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OldEpisodeContextMigration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OldEpisodeContextMigration()
{
  return &type metadata for OldEpisodeContextMigration;
}

uint64_t sub_100320504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v13[24];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_configuration);
  swift_beginAccess(v2, v13, 0, 0);
  v3 = *v2;
  if (!v3
    || (v17[0] = v3,
        v4 = type metadata accessor for ContextActionsConfiguration(0),
        swift_retain(),
        v5 = sub_10003F544(&qword_10055E5F0),
        (swift_dynamicCast(&v14, v17, v4, v5, 6) & 1) == 0))
  {
    v16 = 0;
    v14 = 0u;
    v15 = 0u;
    return sub_100286A6C((uint64_t)&v14);
  }
  if (!*((_QWORD *)&v15 + 1))
    return sub_100286A6C((uint64_t)&v14);
  sub_10002099C(&v14, (uint64_t)v17);
  v6 = v18;
  sub_10003A834(v17, v18);
  v7 = sub_1001B7E90(v6);
  if ((v8 & 1) == 0)
  {
    v9 = v1 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_adamID;
    *(_QWORD *)v9 = v7;
    *(_BYTE *)(v9 + 8) = 0;
    v10 = InterestStateController.stateMachine(for:)();
    v11 = InterestStateMachine.currentState.getter();
    swift_release(v10);
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_interestState) = v11;
  }
  return sub_10003D380(v17);
}

uint64_t sub_100320638()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_adamID + 8) & 1) != 0
    || (v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_interestState),
        (_DWORD)v1 == 4))
  {
    v2 = 0;
  }
  else
  {
    v3 = InterestState.rawValue.getter(v1);
    v5 = v4;
    v6 = InterestState.rawValue.getter(2);
    if (v3 == v6 && v5 == v7)
    {
      v2 = 1;
      v9 = v5;
    }
    else
    {
      v9 = v7;
      v2 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
    }
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v9);
  }
  return v2 & 1;
}

uint64_t sub_1003206E8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[4]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_configuration));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_interestRepository));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_interestStateController));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100320770()
{
  return type metadata accessor for UndoFavoriteContextAction(0);
}

uint64_t type metadata accessor for UndoFavoriteContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100563DF0;
  if (!qword_100563DF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UndoFavoriteContextAction);
  return result;
}

uint64_t sub_1003207B4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1003D59E0;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1003D59F8;
    v4[4] = &unk_1003D5A10;
    v4[5] = &unk_1003D5A28;
    v4[6] = &unk_1003D5A40;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100320870()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xED0000657469726FLL;
  v1._object = (void *)0x800000010043D830;
  v1._countAndFlagsBits = 0xD00000000000001ALL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x766146206F646E55;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100320924@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100320968()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_contextActionType);
}

uint64_t sub_10032097C()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_adamID + 8) & 1) == 0)
    return InterestRepository.unfavoriteInterest(forAdamID:)(*(_QWORD *)(v0
                                                                       + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_adamID));
  return result;
}

double sub_1003209C0()
{
  uint64_t v0;
  _QWORD *v1;
  double result;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_configuration);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_configuration, v3, 0, 0);
  *(_QWORD *)&result = swift_retain(*v1).n128_u64[0];
  return result;
}

uint64_t sub_100320A08(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_configuration);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t (*sub_100320A58(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_configuration, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_100320A9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v12[24];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  swift_beginAccess(v0 + 24, v12, 0, 0);
  v2 = *(_QWORD *)(v0 + 24);
  if (v2
    && (v16[0] = v2,
        v3 = type metadata accessor for ContextActionsConfiguration(0),
        swift_retain(),
        v4 = sub_10003F544(&qword_100564118),
        (swift_dynamicCast(&v13, v16, v3, v4, 6) & 1) != 0))
  {
    if (*((_QWORD *)&v14 + 1))
    {
      sub_10002099C(&v13, (uint64_t)v16);
      v5 = v17;
      v6 = v18;
      sub_10003A834(v16, v17);
      *(_QWORD *)(v1 + 72) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      *(_BYTE *)(v1 + 80) = v7 & 1;
      v8 = v17;
      v9 = v18;
      sub_10003A834(v16, v17);
      *(_QWORD *)(v1 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
      *(_BYTE *)(v1 + 96) = v10 & 1;
      return sub_10003D380(v16);
    }
  }
  else
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
  }
  return sub_100007A28((uint64_t)&v13, &qword_100564110);
}

uint64_t sub_100320BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v12[24];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  swift_beginAccess(v0 + 24, v12, 0, 0);
  v2 = *(_QWORD *)(v0 + 24);
  if (v2
    && (v16[0] = v2,
        v3 = type metadata accessor for ContextActionsConfiguration(0),
        swift_retain(),
        v4 = sub_10003F544(&qword_100564118),
        (swift_dynamicCast(&v13, v16, v3, v4, 6) & 1) != 0))
  {
    if (*((_QWORD *)&v14 + 1))
    {
      sub_10002099C(&v13, (uint64_t)v16);
      v5 = v17;
      v6 = v18;
      sub_10003A834(v16, v17);
      *(_QWORD *)(v1 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      *(_BYTE *)(v1 + 40) = v7 & 1;
      v8 = v17;
      v9 = v18;
      sub_10003A834(v16, v17);
      *(_QWORD *)(v1 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
      *(_BYTE *)(v1 + 56) = v10 & 1;
      return sub_10003D380(v16);
    }
  }
  else
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
  }
  return sub_100007A28((uint64_t)&v13, &qword_100564110);
}

uint64_t sub_100320CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v16[24];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v1 = v0;
  swift_beginAccess(v0 + 24, v16, 0, 0);
  v2 = *(_QWORD *)(v0 + 24);
  if (v2
    && (v20[0] = v2,
        v3 = type metadata accessor for ContextActionsConfiguration(0),
        swift_retain(),
        v4 = sub_10003F544(&qword_100564118),
        (swift_dynamicCast(&v17, v20, v3, v4, 6) & 1) != 0))
  {
    if (*((_QWORD *)&v18 + 1))
    {
      sub_10002099C(&v17, (uint64_t)v20);
      v5 = v21;
      v6 = v22;
      sub_10003A834(v20, v21);
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      v8 = v1 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_referenceTime;
      *(_QWORD *)v8 = v7;
      *(_BYTE *)(v8 + 8) = v9 & 1;
      v10 = v21;
      v11 = v22;
      sub_10003A834(v20, v21);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
      v13 = v1 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_playerTime;
      *(_QWORD *)v13 = v12;
      *(_BYTE *)(v13 + 8) = v14 & 1;
      return sub_10003D380(v20);
    }
  }
  else
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
  }
  return sub_100007A28((uint64_t)&v17, &qword_100564110);
}

id sub_100320E28()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)AVTimeFormatter), "init");
  result = objc_msgSend(v0, "setStyle:", 1);
  qword_100563F80 = (uint64_t)v0;
  return result;
}

uint64_t sub_100320E74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __n128 v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    swift_retain();
    sub_1003689C0();
    v4 = v3;
    v6 = v5;
    swift_bridgeObjectRelease(v7);
    v8 = sub_10016DD80();
    if ((Collection.isNotEmpty.getter(&type metadata for String, v8, v9) & 1) != 0)
    {
      static AdamID.empty.getter(v10);
      v11 = sub_100030584();
      v13 = BinaryInteger.description.getter(&type metadata for UInt64, v11);
      v14 = v12;
      if (v4 == v13 && v6 == v12)
      {
        swift_release(v1);
        swift_bridgeObjectRelease_n(v6, 2);
      }
      else
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v13, v12, 0);
        swift_release(v1);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v6);
        if ((v16 & 1) == 0)
        {
          if (*(_QWORD *)(a1 + 16))
            __asm { BR              X10 }
        }
      }
    }
    else
    {
      swift_release(v1);
      swift_bridgeObjectRelease(v6);
    }
  }
  return 0;
}

void sub_100320FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  NSArray v8;
  double v9;
  double v10;
  void *v11;
  float v12;
  id v13;

  swift_bridgeObjectRetain(v0);
  swift_bridgeObjectRetain(v1);
  v4 = (void *)sub_100368814(v3, v0, 0);
  if (v4)
  {
    v5 = type metadata accessor for ShareEpisodeContextAction(0);
    v6 = v4;
    v7 = ShareAction.applicationActivities.getter(v5, &off_1004C3018);
    sub_1002ED5A0();
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    if (*(_BYTE *)(v2 + 80))
      v9 = 0.0;
    else
      v9 = *(double *)(v2 + 72);
    if (*(_BYTE *)(v2 + 96))
      v10 = 0.0;
    else
      v10 = *(double *)(v2 + 88);
    v11 = (void *)objc_opt_self(MTShareUtil);
    objc_msgSend(v6, "playhead");
    v13 = objc_msgSend(v11, "shareViewControllerWithEpisode:applicationActivities:selectedReferenceTime:selectedPlayerTime:currentPlayerTime:", v6, v8.super.isa, v9, v10, v12);

  }
  sub_100198C1C(v1, v0, 0);
  JUMPOUT(0x100320F40);
}

uint64_t sub_10032138C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __n128 v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = v0;
    swift_retain();
    sub_1003689C0();
    v4 = v3;
    v6 = v5;
    swift_bridgeObjectRelease(v7);
    v8 = sub_10016DD80();
    if ((Collection.isNotEmpty.getter(&type metadata for String, v8, v9) & 1) != 0)
    {
      static AdamID.empty.getter(v10);
      v11 = sub_100030584();
      v13 = BinaryInteger.description.getter(&type metadata for UInt64, v11);
      v14 = v12;
      if (v4 == v13 && v6 == v12)
      {
        swift_release(v1);
        swift_bridgeObjectRelease_n(v6, 2);
      }
      else
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v13, v12, 0);
        swift_release(v1);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v6);
        if ((v16 & 1) == 0)
        {
          if (*(_QWORD *)(v2 + 16))
            __asm { BR              X10 }
        }
      }
    }
    else
    {
      swift_release(v1);
      swift_bridgeObjectRelease(v6);
    }
    return 0;
  }
  return v1;
}

void sub_1003214D0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  Class isa;
  id v10;

  swift_bridgeObjectRetain(v0);
  swift_bridgeObjectRetain(v1);
  v3 = sub_100368814(v2, v0, 0);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = objc_msgSend((id)objc_opt_self(MTShareUtil), "shareActivityItemsWithEpisode:", v3);
    if (v5)
    {
      v6 = v5;
      v7 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, (char *)&type metadata for Any + 8);

    }
    else
    {
      v7 = _swiftEmptyArrayStorage;
    }
    v8 = (void *)objc_opt_self(UIActivityItemsConfiguration);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v10 = objc_msgSend(v8, "mt_configurationWithActivityItems:", isa, swift_bridgeObjectRelease(v7).n128_f64[0]);

    sub_100198C1C(v1, v0, 0);
    JUMPOUT(0x100321454);
  }
  sub_100198C1C(v1, v0, 0);
  JUMPOUT(0x100321450);
}

BOOL sub_10032183C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    return 0;
  swift_retain();
  sub_1003689C0();
  v3 = v2;
  v5 = v4;
  swift_bridgeObjectRelease(v6);
  v7 = sub_10016DD80();
  if ((Collection.isNotEmpty.getter(&type metadata for String, v7, v8) & 1) == 0)
  {
    swift_release(v1);
    goto LABEL_7;
  }
  static AdamID.empty.getter(v9);
  v10 = sub_100030584();
  v12 = BinaryInteger.description.getter(&type metadata for UInt64, v10);
  v13 = v11;
  if (v3 == v12 && v5 == v11)
  {
    swift_release(v1);
    swift_bridgeObjectRelease(v5);
LABEL_7:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v12, v11, 0);
  swift_release(v1);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v5);
  return (v15 & 1) == 0;
}

void sub_100321948()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(__n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  sub_10003F544(qword_1005542D8);
  __chkstk_darwin();
  v2 = &v15[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v3 = (void *)sub_100320E74(v0);
  v4 = sub_100321D34();
  v6 = v5;
  v7 = type metadata accessor for ShareEpisodeContextAction(0);
  ShareAction.prepareShareController(_:customShareTitle:sharingStyle:)(v3, v4, v6, 0, v7, &off_1004C3018);
  swift_bridgeObjectRelease(v6);
  if (v3)
  {
    swift_beginAccess(v0 + 24, v15, 0, 0);
    v8 = *(_QWORD *)(v0 + 24);
    if (v8)
    {
      v9 = *(void (**)(__n128))(*(_QWORD *)v8 + 120);
      v10 = swift_retain();
      v9(v10);
      swift_release(v8);
      v11 = type metadata accessor for PresentationSource(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v2, 1, v11) != 1)
      {
        PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v3, 1, 15, 1, 0, 0);

        (*(void (**)(char *, uint64_t))(v12 + 8))(v2, v11);
        return;
      }
    }
    else
    {
      v13 = type metadata accessor for PresentationSource(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v2, 1, 1, v13);
    }

    sub_100007A28((uint64_t)v2, qword_1005542D8);
  }
}

double sub_100321AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  _BYTE v23[12];
  int v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for PreviewingPresentationHint(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for EpisodeOffer(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(_QWORD *)(v1 + 16);
  if (v11)
  {
    if (*(_BYTE *)(v11 + 32) == 1)
    {
      v12 = *(_QWORD *)(v11 + 16);
      if (*(_QWORD *)(v12 + 16) != 1)
        return result;
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v7 + 16))(v10, v12 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
      swift_retain();
      v13 = (void *)sub_10025C034();
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
      if (v13)
      {
        v14 = sub_10003F544((uint64_t *)&unk_100553780);
        v15 = swift_allocObject(v14, 40, 7);
        *(_OWORD *)(v15 + 16) = xmmword_1003CA250;
        *(_QWORD *)(v15 + 32) = v13;
        v26 = v15;
        specialized Array._endMutation()(v15);
        v25 = v26;
        v16 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16);
        v16(v5, v11 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_presentationHint, v2);
        v24 = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_hasHeaderChevron);
        v17 = type metadata accessor for EpisodeContextActionData(0);
        v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
        v19 = OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_mangedContextProvider;
        v20 = (void *)objc_opt_self(MTDB);
        v21 = v13;
        *(_QWORD *)(v18 + v19) = objc_msgSend(v20, "sharedInstance");
        *(_QWORD *)(v18 + 16) = v25;
        *(_QWORD *)(v18 + 24) = 0;
        *(_BYTE *)(v18 + 32) = 2;
        v16((_BYTE *)(v18 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_presentationHint), (uint64_t)v5, v2);
        *(_BYTE *)(v18 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_hasHeaderChevron) = v24;
        sub_100369110();
        (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);

        v22 = *(_QWORD *)(v1 + 16);
        *(_QWORD *)(v1 + 16) = v18;
        swift_release(v22);
      }
    }
    else
    {
      swift_retain();
    }
    sub_100320A9C();
    *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  }
  return result;
}

uint64_t sub_100321D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t countAndFlagsBits;
  double *v8;
  double v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[24];
  Swift::String v22;
  Swift::String v23;

  swift_beginAccess(v0 + 24, v21, 0, 0);
  v1 = *(_QWORD *)(v0 + 24);
  if (!v1)
    goto LABEL_6;
  v2 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0);
  if (!swift_dynamicCastClass(v1, v2))
  {
    v3 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
    if (!swift_dynamicCastClass(v1, v3))
      goto LABEL_6;
  }
  if ((*(_BYTE *)(v0 + 96) & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 80) & 1) != 0)
    {
LABEL_6:
      v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v22._object = (void *)0xE000000000000000;
      v5._object = (void *)0x800000010043D8B0;
      v5._countAndFlagsBits = 0x1000000000000010;
      v6._countAndFlagsBits = 0;
      v6._object = (void *)0xE000000000000000;
      v22._countAndFlagsBits = 0;
      countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v22)._countAndFlagsBits;

      return countAndFlagsBits;
    }
    v8 = (double *)(v0 + 72);
  }
  else
  {
    v8 = (double *)(v0 + 88);
  }
  v9 = *v8;
  if (qword_100552170 != -1)
    swift_once(&qword_100552170, sub_100320E28);
  v10 = objc_msgSend((id)qword_100563F80, "stringFromSeconds:", v9);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v23._object = (void *)0xE000000000000000;
  v15._object = (void *)0x800000010043D8D0;
  v15._countAndFlagsBits = 0xD000000000000014;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v23);

  v18 = sub_10003F544(&qword_1005559A0);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  *(_QWORD *)(v19 + 64) = sub_10003E198();
  *(_QWORD *)(v19 + 32) = v11;
  *(_QWORD *)(v19 + 40) = v13;
  countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v17._countAndFlagsBits, v17._object, v19);
  swift_bridgeObjectRelease(v17._object);
  swift_bridgeObjectRelease(v19);
  return countAndFlagsBits;
}

unint64_t sub_100321F7C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v1 = 0xD00000000000001FLL;
  swift_beginAccess(v0 + 24, v6, 0, 0);
  v2 = *(_QWORD *)(v0 + 24);
  if (!v2)
    return 0xD000000000000013;
  v3 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0);
  if (!swift_dynamicCastClass(v2, v3))
  {
    v4 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
    if (!swift_dynamicCastClass(v2, v4))
      return 0xD000000000000013;
  }
  return v1;
}

uint64_t sub_100322020()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10003D380(v0 + 4);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts25ShareEpisodeContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100322088()
{
  return type metadata accessor for ShareEpisodeContextAction(0);
}

uint64_t type metadata accessor for ShareEpisodeContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100563FB0;
  if (!qword_100563FB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShareEpisodeContextAction);
  return result;
}

uint64_t sub_1003220CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = &unk_1003D5AF8;
  v4[3] = &unk_1003D5B10;
  v4[4] = &unk_1003D5B10;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10032215C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_100320E74(v3);
  v7 = sub_100321D34();
  v9 = v8;
  v10 = type metadata accessor for ShareEpisodeContextAction(0);
  ShareAction.prepareShareController(_:customShareTitle:sharingStyle:)(v6, v7, v9, a1, v10, a3);
  swift_bridgeObjectRelease(v9);
  return v6;
}

uint64_t sub_1003221D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000A520(v1 + 32, a1);
}

uint64_t sub_1003221EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts25ShareEpisodeContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100322230()
{
  return 37;
}

uint64_t sub_100322244(void *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  void *v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  _QWORD v128[6];

  v111 = a2;
  v3 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v3);
  v123 = (char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v5);
  v125 = (uint64_t)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for FlowDestinationPageHeader(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v110 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FlowPresentationContext(0);
  v119 = *(_QWORD *)(v8 - 8);
  v120 = v8;
  __chkstk_darwin(v8);
  v122 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v10);
  v118 = (char *)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for MetricsData.Configuration(0);
  v114 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v13 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v107 - v18;
  v20 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v20);
  v121 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for FlowDestination(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (uint64_t *)((char *)&v107 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100323458(a1);
  sub_1003237AC(a1);
  v26 = (uint64_t)objc_msgSend(a1, "storeId");
  v27 = AdamID.init(rawValue:)(v26 & ~(v26 >> 63));
  type metadata accessor for ChannelDetail(0);
  v28 = a1;
  v29 = sub_10031B730(v28);

  *v25 = v29;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v23 + 104))(v25, enum case for FlowDestination.channel(_:), v22);
  v126 = v28;
  v30 = objc_msgSend(v28, "name");
  if (v30)
  {
    v31 = v30;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v115 = v33;
    v116 = v32;

  }
  else
  {
    v115 = 0;
    v116 = 0;
  }
  v124 = v27;
  v128[0] = v27;
  v107 = sub_100030584();
  v112 = BinaryInteger.description.getter(&type metadata for UInt64, v107);
  v35 = v34;
  v36 = static MetricsTargetType.lockup.getter();
  v38 = v37;
  v39 = objc_msgSend(v126, "url");
  if (!v39)
    goto LABEL_7;
  v40 = v39;
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v43 = v42;

  URL.init(string:)(v41, v43);
  swift_bridgeObjectRelease(v43);
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v17, 1, v44) == 1)
  {
    sub_1001C9958((uint64_t)v17);
LABEL_7:
    v46 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v19, 1, 1, v46);
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v19, v17, v44);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v19, 0, 1, v44);
LABEL_9:
  v47 = sub_10003F544(&qword_100555608);
  v48 = *(_QWORD *)(type metadata accessor for MetricsData(0) - 8);
  v49 = swift_allocObject(v47, ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72), *(unsigned __int8 *)(v48 + 80) | 7);
  v113 = xmmword_1003CA200;
  *(_OWORD *)(v49 + 16) = xmmword_1003CA200;
  v50 = static MetricsActionType.navigate.getter();
  v52 = v51;
  static MetricsData.Configuration.podcasts.getter();
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v112, v35, v36, v38, v50, v52, 0, 0, 0, 0, v19, &_swiftEmptyDictionarySingleton, v13);
  swift_bridgeObjectRelease(v52);
  v53 = (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v13, v117);
  v54 = v118;
  ScalarDictionary.init()(v53);
  v55 = v121;
  ActionMetrics.init(data:custom:)(v49, v54);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v38);
  sub_1001C9958((uint64_t)v19);
  v56 = v122;
  v57 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v119 + 104))(v122, enum case for FlowPresentationContext.infer(_:), v120);
  v58 = static Link.Presentation.textFollowsTintColor.getter(v57);
  v59 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  v60 = Link.Presentation.init(rawValue:)(0);
  v61 = Link.Presentation.init(rawValue:)(v60);
  if (Link.Presentation.init(rawValue:)(v61 & v58) != v58)
    v60 = Link.Presentation.init(rawValue:)(v60 | v58);
  v62 = Link.Presentation.init(rawValue:)(v60);
  if (Link.Presentation.init(rawValue:)(v62 & v59) != v59)
    v60 = Link.Presentation.init(rawValue:)(v60 | v59);
  v63 = v111;
  v64 = v124;
  v65 = v110;
  v66 = v107;
  (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v110, enum case for FlowDestinationPageHeader.standard(_:), v109);
  v67 = type metadata accessor for FlowAction(0);
  swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  v68 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v25, 0, 0, v116, v115, v56, 0, v60, v65, v55);
  v69 = objc_msgSend(v126, "podcasts");
  if (v69)
  {
    v70 = v69;
    v71 = sub_1001F5D3C();
    v72 = sub_100026844((unint64_t *)&unk_100564130, (uint64_t (*)(uint64_t))sub_1001F5D3C, (uint64_t)&protocol conformance descriptor for NSObject);
    v73 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v70, v71, v72);

    sub_100322B2C(v73);
    LODWORD(v121) = v74;
    swift_bridgeObjectRelease(v73);
  }
  else
  {
    LODWORD(v121) = 0;
  }
  v75 = v126;
  sub_1003230E0(v126, v125);
  v76 = objc_msgSend(v75, "name");
  if (v76)
  {
    v77 = v76;
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v119 = v79;
    v120 = v78;

  }
  else
  {
    v119 = 0;
    v120 = 0;
  }
  v80 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v81 = swift_allocObject(v80, 48, 7);
  *(_OWORD *)(v81 + 16) = v113;
  v82 = v126;
  *(_QWORD *)(v81 + 32) = sub_100323284(v126, v63 & 1);
  *(_QWORD *)(v81 + 40) = v83;
  v84 = sub_100323AB4(v82, HIBYTE(v63) & 1);
  v117 = v85;
  v118 = (char *)v84;
  v128[3] = v67;
  v128[4] = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  v127 = v64;
  v128[0] = v68;
  v122 = (char *)v68;
  swift_retain(v68);
  v116 = BinaryInteger.description.getter(&type metadata for UInt64, v66);
  v87 = v86;
  v115 = static MetricsIDType.itsContentID.getter();
  v89 = v88;
  v90 = static MetricsTargetType.lockup.getter();
  v92 = v91;
  v93 = static MetricsContentKind.channel.getter();
  v95 = v94;
  v96 = objc_msgSend(v82, "name");
  if (v96)
  {
    v97 = v96;
    v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
    v100 = v99;

  }
  else
  {
    v98 = 0;
    v100 = 0;
  }
  v105 = v98;
  v101 = v123;
  static ImpressionMetrics.shelfItem(id:idType:uniqueID:impressionType:kind:name:)(v116, v87, v115, v89, 0, 0, v90, v92, v93, v95, v105, v100);
  swift_bridgeObjectRelease(v87);
  swift_bridgeObjectRelease(v89);
  swift_bridgeObjectRelease(v92);
  swift_bridgeObjectRelease(v95);
  swift_bridgeObjectRelease(v100);
  v102 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v101, 0, 1, v102);
  LOBYTE(v106) = v121 & 1;
  v103 = dispatch thunk of LegacyChannelLockup.__allocating_init(adamId:icon:title:subtitles:eyebrow:clickAction:isExplicit:impressionMetrics:)(v124, v125, v120, v119, v81, v118, v117, v128, v106, v101);
  swift_release(v122);

  return v103;
}

uint64_t static LegacyChannelLockup.Style.library.getter()
{
  return 256;
}

void sub_100322B2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  unsigned int v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  void *v28;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1001F5D3C();
    v5 = sub_100026844((unint64_t *)&unk_100564130, (uint64_t (*)(uint64_t))sub_1001F5D3C, (uint64_t)&protocol conformance descriptor for NSObject);
    v6 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    v1 = v27[0];
    v25 = v27[1];
    v7 = v27[2];
    v8 = v27[3];
    v9 = v27[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v24 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v17 = v8;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    v21 = __CocoaSet.Iterator.next()(v6);
    if (!v21)
      goto LABEL_34;
    v22 = v21;
    v26 = v21;
    v23 = sub_1001F5D3C();
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v15 = v28;
    swift_unknownObjectRelease(v22);
    if (!v15)
      goto LABEL_34;
LABEL_13:
    v16 = objc_msgSend(v15, "isExplicit");

    if (v16)
      goto LABEL_34;
  }
  if (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v8 << 6);
LABEL_12:
    v15 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v14);
    if (!v15)
      goto LABEL_34;
    goto LABEL_13;
  }
  v18 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v18 >= v24)
      goto LABEL_34;
    v19 = *(_QWORD *)(v25 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v17 + 2;
      if (v17 + 2 >= v24)
        goto LABEL_34;
      v19 = *(_QWORD *)(v25 + 8 * v8);
      if (!v19)
      {
        v8 = v17 + 3;
        if (v17 + 3 >= v24)
          goto LABEL_34;
        v19 = *(_QWORD *)(v25 + 8 * v8);
        if (!v19)
        {
          v8 = v17 + 4;
          if (v17 + 4 >= v24)
            goto LABEL_34;
          v19 = *(_QWORD *)(v25 + 8 * v8);
          if (!v19)
          {
            v8 = v17 + 5;
            if (v17 + 5 >= v24)
              goto LABEL_34;
            v19 = *(_QWORD *)(v25 + 8 * v8);
            if (!v19)
            {
              v20 = v17 + 6;
              while (v24 != v20)
              {
                v19 = *(_QWORD *)(v25 + 8 * v20++);
                if (v19)
                {
                  v8 = v20 - 1;
                  goto LABEL_31;
                }
              }
LABEL_34:
              sub_10017F43C(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v9 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v8 << 6);
    goto LABEL_12;
  }
  __break(1u);
}

BOOL static LegacyChannelLockup.Style.Eyebrow.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void LegacyChannelLockup.Style.Eyebrow.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int _s8ShelfKit19LegacyChannelLockupC8PodcastsE5StyleV8SubtitleO9hashValueSivg_0(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t LegacyChannelLockup.Style.subtitle.getter(char a1)
{
  return a1 & 1;
}

uint64_t LegacyChannelLockup.Style.eyebrow.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t LegacyChannelLockup.Style.init(subtitle:eyebrow:)(char a1, char a2)
{
  return a1 & 1 | ((a2 & 1) << 8);
}

unint64_t sub_100322EA8()
{
  unint64_t result;

  result = qword_100564120;
  if (!qword_100564120)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LegacyChannelLockup.Style.Subtitle, &type metadata for LegacyChannelLockup.Style.Subtitle);
    atomic_store(result, (unint64_t *)&qword_100564120);
  }
  return result;
}

unint64_t sub_100322EF0()
{
  unint64_t result;

  result = qword_100564128;
  if (!qword_100564128)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LegacyChannelLockup.Style.Eyebrow, &type metadata for LegacyChannelLockup.Style.Eyebrow);
    atomic_store(result, (unint64_t *)&qword_100564128);
  }
  return result;
}

uint64_t _s5StyleVwst(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100322F80 + 4 * byte_1003D5B7D[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_100322FB4 + 4 * byte_1003D5B78[v4]))();
}

uint64_t sub_100322FB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100322FBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100322FC4);
  return result;
}

uint64_t sub_100322FD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100322FD8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100322FDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100322FE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyChannelLockup.Style()
{
  return &type metadata for LegacyChannelLockup.Style;
}

ValueMetadata *type metadata accessor for LegacyChannelLockup.Style.Subtitle()
{
  return &type metadata for LegacyChannelLockup.Style.Subtitle;
}

uint64_t _s5StyleV8SubtitleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100323060 + 4 * byte_1003D5B87[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100323094 + 4 * byte_1003D5B82[v4]))();
}

uint64_t sub_100323094(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10032309C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003230A4);
  return result;
}

uint64_t sub_1003230B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003230B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003230BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003230C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyChannelLockup.Style.Eyebrow()
{
  return &type metadata for LegacyChannelLockup.Style.Eyebrow;
}

uint64_t sub_1003230E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  _OWORD v27[4];

  v4 = type metadata accessor for ArtworkCrop(0);
  __chkstk_darwin(v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "artworkURL");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    v12 = kMTPreferredArtworkSize;
    v13 = (uint64_t)objc_msgSend(a1, "storeId");
    v14 = AdamID.init(rawValue:)(v13 & ~(v13 >> 63));
    v27[0] = xmmword_1003D55A0;
    memset(&v27[1], 0, 41);
    v22 = static ArtworkCrop.boundingBox.getter(v14, v15, v16, v17, v18, v19, v20, v21);
    BYTE2(v26) = 0;
    LOWORD(v26) = static ArtworkFormat.preferredFormat.getter(v22);
    ArtworkModel.init(template:width:height:libraryEntity:backgroundColor:textColors:style:crop:accessibilityTitle:format:isCustomSymbol:isMulticolorSymbol:imageStoreIdentifier:)(v9, v11, v14, 0, 2, 0, 255, v27, v12, v12, 3, v6, 0, 0, v26, 0, 0);
    v23 = type metadata accessor for ArtworkModel(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 0, 1, v23);
  }
  else
  {
    v25 = type metadata accessor for ArtworkModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 1, 1, v25);
  }
}

uint64_t sub_100323284(id a1, char a2)
{
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v19;
  Swift::String v20;

  if ((a2 & 1) != 0 || (uint64_t)objc_msgSend(a1, "followedShowCount") < 1)
  {
    v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v20._object = (void *)0xE000000000000000;
    v13._object = (void *)0x800000010043D5C0;
    v13._countAndFlagsBits = 0xD00000000000001ELL;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v20._countAndFlagsBits = 0;
    v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v20);
    countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;

    v16 = sub_10003F544(&qword_1005559A0);
    v10 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1003CA200;
    v11 = objc_msgSend(a1, "resolvedShowCount");
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v4._countAndFlagsBits = 0xD000000000000022;
    v19._object = (void *)0xE000000000000000;
    v4._object = (void *)0x800000010043D940;
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    v19._countAndFlagsBits = 0;
    v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v19);
    countAndFlagsBits = v6._countAndFlagsBits;
    object = v6._object;

    v9 = sub_10003F544(&qword_1005559A0);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1003CA200;
    v11 = objc_msgSend(a1, "followedShowCount");
  }
  *(_QWORD *)(v10 + 56) = &type metadata for Int64;
  *(_QWORD *)(v10 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v10 + 32) = v11;
  v17 = String.init(format:_:)(countAndFlagsBits, object, v10);
  swift_bridgeObjectRelease(object);
  return v17;
}

id sub_100323458(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  double v26;
  id v27;
  float v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  double v39;
  float v40;
  double v41;
  uint64_t v42;
  id v43;
  double v44;
  double v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _OWORD v53[5];

  v2 = sub_10003F544((uint64_t *)&unk_100562BF0);
  __chkstk_darwin(v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ArtworkCrop(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ArtworkModel(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ArtworkRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LibraryImageProvider(0);
  v50 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, "logoImageURL");
  if (result)
  {
    v19 = result;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v49 = v11;
    v21 = v20;
    v48 = v12;
    v23 = v22;

    static LibraryImageProvider.background.getter(v24);
    objc_msgSend(a1, "logoImageWidth");
    v26 = v25;
    v27 = objc_msgSend(a1, "logoImageHeight");
    v29 = v28;
    v53[0] = xmmword_1003D55A0;
    memset(&v53[1], 0, 41);
    v37 = static ArtworkCrop.boundingBox.getter(v27, v30, v31, v32, v33, v34, v35, v36);
    BYTE2(v46) = 0;
    LOWORD(v46) = static ArtworkFormat.preferredFormat.getter(v37);
    ArtworkModel.init(template:width:height:libraryEntity:backgroundColor:textColors:style:crop:accessibilityTitle:format:isCustomSymbol:isMulticolorSymbol:imageStoreIdentifier:)(v21, v23, 0, 0, 255, 0, 255, v53, v26, v29, 3, v7, 0, 0, v46, 0, 0);
    objc_msgSend(a1, "logoImageWidth");
    v39 = v38;
    objc_msgSend(a1, "logoImageHeight");
    v41 = v40;
    v42 = type metadata accessor for CropCode(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v4, 1, 1, v42);
    v52 = 0;
    memset(v51, 0, sizeof(v51));
    v43 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v43, "scale");
    v45 = v44;

    ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v10, 1, 0, v4, 0, _swiftEmptyArrayStorage, v51, v39, v41, v45);
    ImageProvider.prefetch(artwork:)(v14, v15, &protocol witness table for LibraryImageProvider);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v49);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v17, v15);
  }
  return result;
}

id sub_1003237AC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id result;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  double v32;
  double v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _OWORD v39[5];

  v2 = sub_10003F544((uint64_t *)&unk_100562BF0);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ArtworkCrop(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ArtworkModel(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ArtworkRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LibraryImageProvider(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, "uberBackgroundImageURL");
  if (result)
  {
    v20 = result;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v35 = v12;
    v36 = v11;
    v22 = v21;
    v24 = v23;

    v26 = static LibraryImageProvider.background.getter(v25);
    v27 = kMTPreferredChannelUberArtworkWidth;
    v28 = kMTPreferredChannelUberArtworkHeight;
    v39[0] = xmmword_1003D55A0;
    memset(&v39[1], 0, 41);
    v29 = static ArtworkCrop.sr.getter(v26);
    BYTE2(v34) = 0;
    LOWORD(v34) = static ArtworkFormat.preferredFormat.getter(v29);
    ArtworkModel.init(template:width:height:libraryEntity:backgroundColor:textColors:style:crop:accessibilityTitle:format:isCustomSymbol:isMulticolorSymbol:imageStoreIdentifier:)(v22, v24, 0, 0, 255, 0, 255, v39, v27, v28, 3, v7, 0, 0, v34, 0, 0);
    v30 = type metadata accessor for CropCode(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v4, 1, 1, v30);
    v38 = 0;
    memset(v37, 0, sizeof(v37));
    v31 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v31, "scale");
    v33 = v32;

    ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v10, 1, 0, v4, 0, _swiftEmptyArrayStorage, v37, v27, v28, v33);
    ImageProvider.prefetch(artwork:)(v14, v15, &protocol witness table for LibraryImageProvider);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  return result;
}

uint64_t sub_100323AB4(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void **v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  __n128 v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unint64_t v38;
  void *object;
  id v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0;
  if ((a2 & 1) != 0)
  {
    if (objc_msgSend(a1, "subscriptionActive"))
    {
      v9 = objc_msgSend(a1, "subscriptionName");
      if (v9)
      {
        v10 = v9;
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v13 = v12;

        v14 = objc_msgSend(a1, "name");
        if (v14)
        {
          v15 = v14;
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          v18 = v17;

          if (v11 == v16 && v13 == v18)
          {
            swift_bridgeObjectRelease_n(v13, 2);
            goto LABEL_26;
          }
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v16, v18, 0);
          swift_bridgeObjectRelease(v18);
          if ((v19 & 1) != 0)
            goto LABEL_11;
        }
        if (String.count.getter(v11, v13) > 16)
        {
LABEL_11:
          v20 = v13;
        }
        else
        {
          v53 = v11;
          v57._countAndFlagsBits = v11;
          v57._object = v13;
          static CharacterSet.whitespaces.getter();
          v52 = sub_10016D37C();
          v21 = StringProtocol.components(separatedBy:)(v7, &type metadata for String);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          v22 = *(_QWORD *)(v21 + 16);
          v54 = v21;
          v55 = v13;
          if (v22)
          {
            v23 = sub_10016DD80();
            v24 = (void **)(v21 + 40);
            v25 = _swiftEmptyArrayStorage;
            do
            {
              v26 = (uint64_t)*(v24 - 1);
              v27 = *v24;
              v57._countAndFlagsBits = v26;
              v57._object = v27;
              v28 = swift_bridgeObjectRetain(v27);
              if ((Collection.isNotEmpty.getter(&type metadata for String, v23, v28) & 1) != 0)
              {
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
                v56 = v25;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_100048628(0, v25[2] + 1, 1);
                  v25 = v56;
                }
                v31 = v25[2];
                v30 = v25[3];
                if (v31 >= v30 >> 1)
                {
                  sub_100048628(v30 > 1, v31 + 1, 1);
                  v25 = v56;
                }
                v25[2] = v31 + 1;
                v32 = &v25[2 * v31];
                v32[4] = v26;
                v32[5] = v27;
              }
              else
              {
                swift_bridgeObjectRelease(v27);
              }
              v24 += 2;
              --v22;
            }
            while (v22);
          }
          else
          {
            v25 = _swiftEmptyArrayStorage;
          }
          swift_bridgeObjectRelease(v54);
          v33 = v25[2];
          swift_release(v25);
          if (v33 <= 2)
          {
            v41 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v42._countAndFlagsBits = 0xD000000000000023;
            v59._object = (void *)0xE000000000000000;
            v42._object = (void *)0x800000010043D910;
            v43._countAndFlagsBits = 0;
            v43._object = (void *)0xE000000000000000;
            v59._countAndFlagsBits = 0;
            v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v42, (Swift::String_optional)0, (NSBundle)v41, v43, v59);

            v45 = sub_10003F544(&qword_1005559A0);
            v46 = swift_allocObject(v45, 72, 7);
            *(_OWORD *)(v46 + 16) = xmmword_1003CA200;
            *(_QWORD *)(v46 + 56) = &type metadata for String;
            *(_QWORD *)(v46 + 64) = sub_10003E198();
            v47 = v55;
            *(_QWORD *)(v46 + 32) = v53;
            *(_QWORD *)(v46 + 40) = v47;
            v48 = String.init(format:_:)(v44._countAndFlagsBits, v44._object, v46);
            v50 = v49;
            swift_bridgeObjectRelease(v44._object);
            v57._countAndFlagsBits = v48;
            v57._object = v50;
            v8 = StringProtocol.localizedUppercase.getter(&type metadata for String, v52);
            object = v50;
            goto LABEL_27;
          }
          v20 = v55;
        }
        swift_bridgeObjectRelease(v20);
      }
LABEL_26:
      v34 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v58._object = (void *)0xE000000000000000;
      v35._object = (void *)0x800000010043D8F0;
      v35._countAndFlagsBits = 0xD000000000000018;
      v36._countAndFlagsBits = 0;
      v36._object = (void *)0xE000000000000000;
      v58._countAndFlagsBits = 0;
      v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, (Swift::String_optional)0, (NSBundle)v34, v36, v58);

      v57 = v37;
      v38 = sub_10016D37C();
      v8 = StringProtocol.localizedUppercase.getter(&type metadata for String, v38);
      object = v37._object;
LABEL_27:
      swift_bridgeObjectRelease(object);
      return v8;
    }
    return 0;
  }
  return v8;
}

uint64_t sub_10032402C(uint64_t a1)
{
  return sub_100324064(a1, (unsigned int *)&enum case for MediaRequest.ContentType.podcast(_:), (uint64_t (*)(uint64_t))sub_10034F554, "Unable to fetch show from server - %s");
}

uint64_t sub_100324048(uint64_t a1)
{
  return sub_100324064(a1, (unsigned int *)&enum case for MediaRequest.ContentType.podcastEpisode(_:), (uint64_t (*)(uint64_t))sub_10034EEA8, "Unable to fetch episode from server - %s");
}

uint64_t sub_100324064(uint64_t a1, unsigned int *a2, uint64_t (*a3)(uint64_t), const char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  id v51;
  id v52;
  __n128 v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;

  v67 = a4;
  v70 = a3;
  v6 = type metadata accessor for Logger(0);
  v68 = *(_QWORD *)(v6 - 8);
  v69 = v6;
  __chkstk_darwin();
  v71 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544((uint64_t *)&unk_100564180);
  __chkstk_darwin();
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = v11;
  sub_10003F544(&qword_100557DB0);
  __chkstk_darwin();
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v13;
  sub_10003F544(&qword_100564190);
  __chkstk_darwin();
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = v15;
  sub_10003F544(&qword_100557DB8);
  __chkstk_darwin();
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for MediaRequest.RequestType(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v21;
  v22 = type metadata accessor for MediaRequest.Params(0);
  v72 = *(_QWORD *)(v22 - 8);
  v73 = v22;
  __chkstk_darwin();
  v81 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for MediaRequest.RequestType.catalog(_:), v18);
  v24 = *a2;
  v25 = type metadata accessor for MediaRequest.ContentType(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 104);
  v78 = v17;
  v27(v17, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v17, 0, 1, v25);
  v28 = type metadata accessor for MediaRequest.ViewType(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v15, 1, 1, v28);
  v29 = type metadata accessor for MediaRequest.Relationship(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v13, 1, 1);
  v30 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v31 = swift_allocObject(v30, 48, 7);
  *(_OWORD *)(v31 + 16) = xmmword_1003CA200;
  v83 = a1;
  *(_QWORD *)(v31 + 32) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  *(_QWORD *)(v31 + 40) = v32;
  v33 = type metadata accessor for MediaRequest.URLFragment(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v11, 1, 1, v33);
  v34 = type metadata accessor for URL(0);
  v35 = v9;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v9, 1, 1, v34);
  v74 = sub_100324D74((uint64_t)_swiftEmptyArrayStorage, &qword_100564200, &qword_100564208, (uint64_t (*)(char *))sub_100325194, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.Relationship);
  v36 = sub_100324D74((uint64_t)_swiftEmptyArrayStorage, &qword_100564200, &qword_100564208, (uint64_t (*)(char *))sub_100325194, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.Relationship);
  v37 = sub_100324BBC((uint64_t)_swiftEmptyArrayStorage);
  v38 = sub_100324D74((uint64_t)_swiftEmptyArrayStorage, &qword_100552B60, &qword_100552B68, (uint64_t (*)(char *))sub_100324F34, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.ContentType);
  v39 = sub_100324D74((uint64_t)_swiftEmptyArrayStorage, &qword_100552B60, &qword_100552B68, (uint64_t (*)(char *))sub_100324F34, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.ContentType);
  v40 = sub_100324D74((uint64_t)_swiftEmptyArrayStorage, &qword_1005641C0, &qword_1005641C8, (uint64_t (*)(char *))sub_100324FCC, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.Filter);
  v41 = sub_100324D74((uint64_t)_swiftEmptyArrayStorage, &qword_1005641A0, &qword_1005641A8, (uint64_t (*)(char *))sub_100324F34, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.ContentType);
  v65 = v31;
  v42 = (uint64_t)v81;
  MediaRequest.Params.init(requestType:requestContentType:viewType:directFetch:relationshipIncludes:relationshipRelates:relationshipLimit:include:omit:typedIncludes:typedExtends:fields:withTypes:identifiers:fragment:limit:filters:meta:offset:requestAllPages:hostUrl:countryCode:isImplicitActionRequest:searchTerm:queryContentTypes:triggerBy:includeEntitlementsOverride:)(v79, v78, v77, v76, v74, v36, v37, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v38, v39, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v65, v75, 0, 1, v40, v41,
    0,
    1,
    v35,
    0,
    0,
    0,
    0,
    0,
    _swiftEmptyArrayStorage,
    0,
    0,
    2);
  v43 = *(id *)(v80 + OBJC_IVAR____TtC8Podcasts22ClassKitContextBuilder_requestController);
  sub_100326094(v42);
  v45 = v44;
  LOBYTE(v38) = v46;

  if ((v38 & 1) != 0)
  {
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v54 = swift_errorRetain();
    v55 = v71;
    static OS_os_log.classKit.getter(v54);
    swift_errorRetain();
    v56 = swift_errorRetain();
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      v82 = v45;
      v83 = v60;
      *(_DWORD *)v59 = 136315138;
      swift_errorRetain();
      v61 = sub_10003F544((uint64_t *)&unk_10055A340);
      v62 = String.init<A>(describing:)(&v82, v61);
      v64 = v63;
      v82 = sub_10003D274(v62, v63, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v59 + 4, v59 + 12);
      swift_bridgeObjectRelease(v64);
      sub_1002449A4(v45, 1);
      sub_1002449A4(v45, 1);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, v67, v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      sub_1002449A4(v45, 1);
      sub_1002449A4(v45, 1);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v55, v69);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v81, v73);
      return 0;
    }

    sub_1002449A4(v45, 1);
    sub_1002449A4(v45, 1);
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v55, v69);
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v42, v73);
    return 0;
  }
  v47 = v70(v45);
  if (!v47)
  {
    sub_1002449A4(v45, 0);
    goto LABEL_13;
  }
  v48 = v47;
  v49 = v47 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)v47 >> 62))
  {
    result = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_5;
LABEL_18:
    sub_1002449A4(v45, 0);
    v53 = swift_bridgeObjectRelease(v48);
    v52 = 0;
    goto LABEL_19;
  }
  if (v47 >= 0)
    v47 &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(v47);
  if (!result)
    goto LABEL_18;
LABEL_5:
  if ((v48 & 0xC000000000000001) != 0)
  {
    v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v48);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v49 + 16))
  {
    v51 = *(id *)(v48 + 32);
LABEL_8:
    v52 = v51;
    sub_1002449A4(v45, 0);
    v53 = swift_bridgeObjectRelease(v48);
LABEL_19:
    (*(void (**)(uint64_t, uint64_t, __n128))(v72 + 8))(v42, v73, v53);
    return (uint64_t)v52;
  }
  __break(1u);
  return result;
}

id sub_100324838(uint64_t a1)
{
  return sub_100324880(a1, (uint64_t (*)(uint64_t))sub_100325CD4, (void (*)(void))sub_10031B9C8, sub_10032402C, (void (*)(void))sub_1002D4084);
}

id sub_10032485C(uint64_t a1)
{
  return sub_100324880(a1, (uint64_t (*)(uint64_t))sub_100326244, (void (*)(void))sub_100343DE4, sub_100324048, (void (*)(void))sub_1002D4C0C);
}

id sub_100324880(uint64_t a1, uint64_t (*a2)(uint64_t), void (*a3)(void), uint64_t (*a4)(uint64_t), void (*a5)(void))
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v24;

  sub_10003F544(&qword_100564178);
  __chkstk_darwin();
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v13 = (char *)&v24 - v12;
  v14 = a2(a1);
  if (v14)
  {
    v15 = (void *)v14;
    a3();
    v16 = type metadata accessor for CLSContextMetadata(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v13, 1, v16) == 1)
    {

      v17 = (uint64_t)v13;
LABEL_7:
      sub_10032660C(v17);
      return 0;
    }
    v21 = sub_1001F63F0(0);

    v22 = (uint64_t)v13;
    goto LABEL_11;
  }
  v18 = a4(a1);
  if (v18)
  {
    v19 = (void *)v18;
    a5();
    v20 = type metadata accessor for CLSContextMetadata(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v11, 1, v20) == 1)
    {

      v17 = (uint64_t)v11;
      goto LABEL_7;
    }
    v21 = sub_1001F63F0(0);

    v22 = (uint64_t)v11;
LABEL_11:
    sub_10032664C(v22);
    return v21;
  }
  return 0;
}

id sub_100324A00()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClassKitContextBuilder();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ClassKitContextBuilder()
{
  return objc_opt_self(_TtC8Podcasts22ClassKitContextBuilder);
}

Swift::Int sub_100324A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE v20[24];

  v8 = a7 + 16;
  if (a5)
  {
    swift_beginAccess(a7 + 16, v20, 1, 0);
    v10 = *(_QWORD *)(a7 + 16);
    *(_QWORD *)(a7 + 16) = a5;
    v11 = *(_BYTE *)(a7 + 24);
    *(_BYTE *)(a7 + 24) = 1;
    swift_errorRetain();
    v12 = v10;
    v13 = v11;
  }
  else if (a1)
  {
    swift_beginAccess(a7 + 16, v20, 1, 0);
    v15 = *(_QWORD *)(a7 + 16);
    *(_QWORD *)(a7 + 16) = a1;
    v16 = *(_BYTE *)(a7 + 24);
    *(_BYTE *)(a7 + 24) = 0;
    swift_bridgeObjectRetain(a1);
    v12 = v15;
    v13 = v16;
  }
  else
  {
    v17 = sub_1003266FC();
    v18 = swift_allocError(&type metadata for ClassKitError, v17, 0, 0);
    swift_beginAccess(v8, v20, 1, 0);
    v12 = *(_QWORD *)(a7 + 16);
    *(_QWORD *)(a7 + 16) = v18;
    v13 = *(_BYTE *)(a7 + 24);
    *(_BYTE *)(a7 + 24) = 1;
  }
  sub_100326740(v12, v13);
  return OS_dispatch_semaphore.signal()();
}

unint64_t sub_100324B98(uint64_t a1)
{
  return sub_100324D74(a1, &qword_100564200, &qword_100564208, (uint64_t (*)(char *))sub_100325194, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.Relationship);
}

unint64_t sub_100324BBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10003F544(&qword_1005641E0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10003F544(&qword_1005641E8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100007A64(v13, (uint64_t)v5, &qword_1005641E0);
    result = sub_100325194((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for MediaRequest.Relationship(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100324D50(uint64_t a1)
{
  return sub_100324D74(a1, &qword_1005641C0, &qword_1005641C8, (uint64_t (*)(char *))sub_100324FCC, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.Filter);
}

unint64_t sub_100324D74(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  uint64_t (*v34)(char *);

  v33 = a5;
  v34 = a4;
  v8 = sub_10003F544(a2);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
    v14 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v30 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v30);
    return (unint64_t)v14;
  }
  sub_10003F544(a3);
  v13 = static _DictionaryStorage.allocate(capacity:)(v12);
  v14 = (_QWORD *)v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    goto LABEL_9;
  v16 = *(int *)(v8 + 48);
  v17 = a1;
  v18 = v13 + 64;
  v19 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v32 = v17;
  v20 = v17 + v19;
  v21 = *(_QWORD *)(v9 + 72);
  swift_retain();
  while (1)
  {
    sub_100007A64(v20, (uint64_t)v11, a2);
    result = v34(v11);
    if ((v23 & 1) != 0)
      break;
    v24 = result;
    *(_QWORD *)(v18 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v25 = v14[6];
    v26 = v33(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v24, v11, v26);
    *(_QWORD *)(v14[7] + 8 * v24) = *(_QWORD *)&v11[v16];
    v27 = v14[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_12;
    v14[2] = v29;
    v20 += v21;
    if (!--v15)
    {
      swift_release(v14);
      v30 = v32;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100324F10(uint64_t a1)
{
  return sub_100324D74(a1, &qword_1005641A0, &qword_1005641A8, (uint64_t (*)(char *))sub_100324F34, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.ContentType);
}

unint64_t sub_100324F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for MediaRequest.ContentType(0);
  v6 = sub_100026844((unint64_t *)&unk_1005641B0, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100325064(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (unint64_t *)&unk_100558630, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
}

unint64_t sub_100324FCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for MediaRequest.Filter(0);
  v6 = sub_100026844(&qword_1005641D0, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.Filter, (uint64_t)&protocol conformance descriptor for MediaRequest.Filter);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100325064(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.Filter, &qword_1005641D8, (uint64_t)&protocol conformance descriptor for MediaRequest.Filter);
}

unint64_t sub_100325064(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_100026844(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_100325194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for MediaRequest.Relationship(0);
  v6 = sub_100026844(&qword_1005641F0, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.Relationship, (uint64_t)&protocol conformance descriptor for MediaRequest.Relationship);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100325064(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.Relationship, &qword_1005641F8, (uint64_t)&protocol conformance descriptor for MediaRequest.Relationship);
}

id sub_10032522C(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  objc_class *v17;
  objc_super v19;

  v2 = v1;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC8Podcasts22ClassKitContextBuilder_workQueue;
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v13 = v2;
  v14 = static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  v15 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000033, 0x800000010043D9C0, v9, v11, v7, 0);
  *(_QWORD *)&v2[v12] = v15;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Podcasts22ClassKitContextBuilder_requestController] = a1;
  v16 = a1;
  dispatch thunk of MediaRequestController.responseQueue.setter(v15);

  v17 = (objc_class *)type metadata accessor for ClassKitContextBuilder();
  v19.receiver = v13;
  v19.super_class = v17;
  return objc_msgSendSuper2(&v19, "init");
}

void sub_1003253E8(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  id (*v45)@<X0>(_QWORD *@<X8>);
  void *v46;
  id v47;
  NSObject *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v7 = type metadata accessor for Logger(0);
  v70 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v11 = (char *)&v69 - v10;
  __chkstk_darwin();
  v13 = (char *)&v69 - v12;
  swift_bridgeObjectRetain_n(a2, 2);
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
  v69 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    a3 = sub_10027AE00(0, a3[2] + 1, 1, a3);
  v17 = a3[2];
  v16 = a3[3];
  if (v17 >= v16 >> 1)
    a3 = sub_10027AE00((_QWORD *)(v16 > 1), v17 + 1, 1, a3);
  a3[2] = v17 + 1;
  v18 = &a3[2 * v17];
  v18[4] = a1;
  v18[5] = a2;
  swift_bridgeObjectRelease(a2);
  v19 = HIBYTE(a2) & 0xF;
  v20 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v21 = HIBYTE(a2) & 0xF;
  else
    v21 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v21)
    goto LABEL_50;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a2);
    v23 = sub_1002D6014(a1, a2, 10);
    v25 = v68;
    swift_bridgeObjectRelease(a2);
    goto LABEL_48;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v71 = (id)a1;
    v72 = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (!v19)
        goto LABEL_77;
      if (v19 == 1 || (BYTE1(a1) - 48) > 9u)
        goto LABEL_35;
      v23 = (BYTE1(a1) - 48);
      if (v19 != 2)
      {
        if ((BYTE2(a1) - 48) > 9u)
          goto LABEL_35;
        v23 = 10 * (BYTE1(a1) - 48) + (BYTE2(a1) - 48);
        v26 = v19 - 3;
        if (v26)
        {
          v27 = (unsigned __int8 *)&v71 + 3;
          while (1)
          {
            v28 = *v27 - 48;
            if (v28 > 9)
              goto LABEL_35;
            v29 = 10 * v23;
            if ((unsigned __int128)(v23 * (__int128)10) >> 64 != (10 * v23) >> 63)
              goto LABEL_35;
            v23 = v29 + v28;
            if (__OFADD__(v29, v28))
              goto LABEL_35;
            v25 = 0;
            ++v27;
            if (!--v26)
              goto LABEL_48;
          }
        }
      }
    }
    else
    {
      if (a1 == 45)
      {
        if (v19)
        {
          if (v19 != 1 && (BYTE1(a1) - 48) <= 9u)
          {
            if (v19 == 2)
            {
              v25 = 0;
              v23 = -(uint64_t)(BYTE1(a1) - 48);
              goto LABEL_48;
            }
            if ((BYTE2(a1) - 48) <= 9u)
            {
              v23 = -10 * (BYTE1(a1) - 48) - (BYTE2(a1) - 48);
              v34 = v19 - 3;
              if (!v34)
                goto LABEL_47;
              v65 = (unsigned __int8 *)&v71 + 3;
              while (1)
              {
                v66 = *v65 - 48;
                if (v66 > 9)
                  break;
                v67 = 10 * v23;
                if ((unsigned __int128)(v23 * (__int128)10) >> 64 != (10 * v23) >> 63)
                  break;
                v23 = v67 - v66;
                if (__OFSUB__(v67, v66))
                  break;
                v25 = 0;
                ++v65;
                if (!--v34)
                  goto LABEL_48;
              }
            }
          }
LABEL_35:
          v23 = 0;
          v25 = 1;
          goto LABEL_48;
        }
        __break(1u);
LABEL_77:
        __break(1u);
        return;
      }
      if (!v19 || (a1 - 48) > 9u)
        goto LABEL_35;
      v23 = (a1 - 48);
      if (v19 != 1)
      {
        if ((BYTE1(a1) - 48) > 9u)
          goto LABEL_35;
        v23 = 10 * (a1 - 48) + (BYTE1(a1) - 48);
        v30 = v19 - 2;
        if (v30)
        {
          v31 = (unsigned __int8 *)&v71 + 2;
          while (1)
          {
            v32 = *v31 - 48;
            if (v32 > 9)
              goto LABEL_35;
            v33 = 10 * v23;
            if ((unsigned __int128)(v23 * (__int128)10) >> 64 != (10 * v23) >> 63)
              goto LABEL_35;
            v23 = v33 + v32;
            if (__OFADD__(v33, v32))
              goto LABEL_35;
            v25 = 0;
            ++v31;
            if (!--v30)
              goto LABEL_48;
          }
        }
      }
    }
LABEL_47:
    v25 = 0;
    goto LABEL_48;
  }
  if ((a1 & 0x1000000000000000) != 0)
    v22 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v22 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
  v23 = (uint64_t)sub_1002D6000(v22, v20, 10);
  v25 = v24 & 1;
LABEL_48:
  if ((v25 & 1) != 0
    || (objc_msgSend((id)objc_opt_self(MTStoreIdentifier), "isEmpty:", v23) & 1) != 0)
  {
LABEL_50:
    swift_bridgeObjectRelease(a3);
    v35 = v69;
    v36 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    static OS_os_log.classKit.getter(v36);
    v37 = swift_bridgeObjectRetain_n(a2, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v71 = (id)v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain(a2);
      v73 = sub_10003D274(a1, a2, (uint64_t *)&v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Invalid store id - %s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v9, v35);
    return;
  }
  v42 = a3[2];
  if (v42 == 2)
  {
    swift_bridgeObjectRelease(a3);
    __chkstk_darwin();
    v43 = &v69 - 4;
    *(&v69 - 2) = v3;
    *(&v69 - 1) = v23;
    v44 = sub_10003F544((uint64_t *)&unk_100564210);
    v45 = sub_100326758;
  }
  else
  {
    if (v42 != 1)
    {
      v54 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      static OS_os_log.classKit.getter(v54);
      swift_bridgeObjectRetain(a3);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = swift_slowAlloc(32, -1);
        v71 = (id)v59;
        *(_DWORD *)v58 = 136315138;
        v60 = Array.description.getter(a3, &type metadata for String);
        v62 = v61;
        v73 = sub_10003D274(v60, v61, (uint64_t *)&v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v58 + 4, v58 + 12);
        swift_bridgeObjectRelease_n(a3, 2);
        swift_bridgeObjectRelease(v62);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Invalid identifier path - %s", v58, 0xCu);
        swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      (*(void (**)(char *, uint64_t))(v70 + 8))(v13, v69);
      return;
    }
    swift_bridgeObjectRelease(a3);
    __chkstk_darwin();
    v43 = &v69 - 4;
    *(&v69 - 2) = v3;
    *(&v69 - 1) = v23;
    v44 = sub_10003F544((uint64_t *)&unk_100564210);
    v45 = sub_100326794;
  }
  OS_dispatch_queue.sync<A>(execute:)(&v71, v45, v43, v44);
  v46 = v71;
  if (v71)
  {
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v47 = v46;
    static OS_os_log.classKit.getter(v47);
    v48 = v47;
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.debug.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v51 = 138412290;
      v71 = v48;
      v48 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v51 + 4, v51 + 12);
      *v52 = v46;

      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Built context - %@", v51, 0xCu);
      v53 = sub_10003F544((uint64_t *)&unk_100556480);
      swift_arrayDestroy(v52, 1, v53);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);
    }
    else
    {

      v49 = v48;
    }
    v63 = v69;
    v64 = v70;

    (*(void (**)(char *, uint64_t))(v64 + 8))(v11, v63);
  }
}

void sub_100325CD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v34 - v6;
  v8 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v9 = objc_msgSend(v8, "mainOrPrivateContext");

  v10 = objc_msgSend((id)objc_opt_self(MTPodcast), "predicateForPodcastStoreId:", a1);
  type metadata accessor for CoreDataFetcher(0);
  v11 = static CoreDataFetcher.fetchPodcasts(for:by:with:)(v10, _swiftEmptyArrayStorage, v9);
  if (!v11)
  {
LABEL_24:
    v28 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v29 = static OS_os_log.classKit.getter(v28);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v32 = 134217984;
      v35 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v32 + 4, v32 + 12);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to find show in local database - %lld", v32, 0xCu);
      swift_slowDealloc(v32, -1, -1);
      v33 = v9;
    }
    else
    {
      v33 = v30;
      v30 = v9;
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return;
  }
  v12 = v11;
  v13 = (unint64_t)v11 >> 62;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v26 = v11;
    else
      v26 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v12);
    v15 = v27 == 1;
    if (v27 >= 1)
      goto LABEL_4;
    goto LABEL_23;
  }
  v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  v15 = v14 == 1;
  if (v14 < 1)
  {
LABEL_23:
    swift_bridgeObjectRelease(v12);
    goto LABEL_24;
  }
LABEL_4:
  if (!v15)
  {
    v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v17 = static OS_os_log.classKit.getter(v16);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = v2;
      v35 = a1;
      v21 = v20;
      *(_DWORD *)v20 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 4, v20 + 12);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Found more than one show with store ID - %lld", v21, 0xCu);
      v22 = v21;
      v2 = v34;
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }
  if (v13)
  {
    if (v12 < 0)
      v23 = v12;
    else
      v23 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v24 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v12);
    if (!v24)
      goto LABEL_18;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_18;
  }
  if ((v12 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
    goto LABEL_18;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v25 = *(id *)(v12 + 32);
LABEL_18:

    swift_bridgeObjectRelease(v12);
    return;
  }
  __break(1u);
}

void sub_100326094(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __n128 v6;
  char v7;
  dispatch_semaphore_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __n128 v12;
  int v13;
  _BYTE v15[24];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  *v5 = static OS_dispatch_queue.main.getter(v6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.notOnQueue(_:), v2);
  v7 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    v8 = dispatch_semaphore_create(0);
    v9 = swift_allocObject(&unk_1004C3278, 25, 7);
    *(_QWORD *)(v9 + 16) = 0;
    *(_BYTE *)(v9 + 24) = -1;
    v10 = swift_allocObject(&unk_1004C32A0, 32, 7);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = v9;
    v11 = v8;
    v12 = swift_retain();
    dispatch thunk of MediaRequestController.performRecursivelyWithParsing(params:callback:)(a1, sub_1003266E8, v10, v12);
    swift_release(v10);
    OS_dispatch_semaphore.wait()();
    swift_beginAccess(v9 + 16, v15, 0, 0);
    v13 = *(unsigned __int8 *)(v9 + 24);
    if (v13 != 255)
    {
      sub_1003266F0(*(_QWORD *)(v9 + 16), v13 & 1);

      swift_release(v9);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100326244(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v34 - v6;
  v8 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v9 = objc_msgSend(v8, "mainOrPrivateContext");

  v10 = objc_msgSend((id)objc_opt_self(MTEpisode), "predicateForEpisodeStoreTrackId:", a1);
  type metadata accessor for CoreDataFetcher(0);
  v11 = static CoreDataFetcher.fetchEpisodes(for:sortDescriptors:fetchLimit:with:)(v10, _swiftEmptyArrayStorage, 0, 1, v9);
  if (!v11)
  {
LABEL_24:
    v28 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v29 = static OS_os_log.classKit.getter(v28);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v32 = 134217984;
      v35 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v32 + 4, v32 + 12);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to find episode in local database - %lld", v32, 0xCu);
      swift_slowDealloc(v32, -1, -1);
      v33 = v9;
    }
    else
    {
      v33 = v30;
      v30 = v9;
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return;
  }
  v12 = v11;
  v13 = (unint64_t)v11 >> 62;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v26 = v11;
    else
      v26 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v12);
    v15 = v27 == 1;
    if (v27 >= 1)
      goto LABEL_4;
    goto LABEL_23;
  }
  v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  v15 = v14 == 1;
  if (v14 < 1)
  {
LABEL_23:
    swift_bridgeObjectRelease(v12);
    goto LABEL_24;
  }
LABEL_4:
  if (!v15)
  {
    v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v17 = static OS_os_log.classKit.getter(v16);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = v2;
      v35 = a1;
      v21 = v20;
      *(_DWORD *)v20 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 4, v20 + 12);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Found more than one episode with store ID - %lld", v21, 0xCu);
      v22 = v21;
      v2 = v34;
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }
  if (v13)
  {
    if (v12 < 0)
      v23 = v12;
    else
      v23 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v24 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v12);
    if (!v24)
      goto LABEL_18;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_18;
  }
  if ((v12 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
    goto LABEL_18;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v25 = *(id *)(v12 + 32);
LABEL_18:

    swift_bridgeObjectRelease(v12);
    return;
  }
  __break(1u);
}

uint64_t sub_10032660C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_100564178);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10032664C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CLSContextMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100326688()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255)
    sub_1002449A4(*(_QWORD *)(v0 + 16), v1 & 1);
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1003266BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_1003266E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_100324A88(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
}

uint64_t sub_1003266F0(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return swift_bridgeObjectRetain(a1);
}

unint64_t sub_1003266FC()
{
  unint64_t result;

  result = qword_100564198;
  if (!qword_100564198)
  {
    result = swift_getWitnessTable(&unk_1003D5D38, &type metadata for ClassKitError);
    atomic_store(result, (unint64_t *)&qword_100564198);
  }
  return result;
}

uint64_t sub_100326740(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_1002449A4(result, a2 & 1);
  return result;
}

id sub_100326758@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id result;

  result = sub_10032485C(*(_QWORD *)(v1 + 24));
  *a1 = result;
  return result;
}

id sub_100326794@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id result;

  result = sub_100324838(*(_QWORD *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for ClassKitError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100326810 + 4 * asc_1003D5C80[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100326830 + 4 * byte_1003D5C85[v4]))();
}

_BYTE *sub_100326810(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100326830(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100326838(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100326840(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100326848(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100326850(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClassKitError()
{
  return &type metadata for ClassKitError;
}

unint64_t sub_100326870()
{
  unint64_t result;

  result = qword_100564220;
  if (!qword_100564220)
  {
    result = swift_getWitnessTable(&unk_1003D5D10, &type metadata for ClassKitError);
    atomic_store(result, (unint64_t *)&qword_100564220);
  }
  return result;
}

uint64_t sub_1003268B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, __int128 *, __int128 *);
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v7 = *(void (**)(uint64_t, uint64_t, __int128 *, __int128 *))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v9 = a2;
    if (a3)
      goto LABEL_3;
LABEL_6:
    v13 = 0u;
    v14 = 0u;
    if (a4)
      goto LABEL_4;
LABEL_7:
    v11 = 0u;
    v12 = 0u;
    goto LABEL_8;
  }
  v8 = 0;
  v9 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  *((_QWORD *)&v14 + 1) = swift_getObjectType(a3, a2);
  *(_QWORD *)&v13 = a3;
  if (!a4)
    goto LABEL_7;
LABEL_4:
  *((_QWORD *)&v12 + 1) = swift_getObjectType(a4, a2);
  *(_QWORD *)&v11 = a4;
LABEL_8:
  swift_retain(v6);
  swift_unknownObjectRetain(a3);
  swift_unknownObjectRetain(a4);
  v7(v8, v9, &v13, &v11);
  swift_release(v6);
  swift_bridgeObjectRelease(v9);
  sub_1000485DC((uint64_t)&v11);
  return sub_1000485DC((uint64_t)&v13);
}

double sub_100326A4C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v6;
  uint64_t inited;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  Class isa;
  double result;
  uint64_t v14;

  v6 = sub_10003F544((uint64_t *)&unk_1005588B0);
  inited = swift_initStackObject(v6, &v14);
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  v8 = (void *)objc_opt_self(MTLibrary);
  v9 = objc_msgSend(v8, "sharedInstance", swift_bridgeObjectRetain(a2).n128_f64[0]);
  if (v9)
  {
    v10 = v9;
    v11 = sub_10002B070(inited);
    isa = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, "removeDownloadAssetsForEpisodeUuids:", isa, swift_bridgeObjectRelease(v11).n128_f64[0]);

  }
  if (a3)
    a3();
  *(_QWORD *)&result = swift_bridgeObjectRelease(inited).n128_u64[0];
  return result;
}

uint64_t sub_100326B44()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_100326B6C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  NSURL *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v27 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin();
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(v3, "type");
  v11 = objc_msgSend(v3, "title", swift_bridgeObjectRetain(a2).n128_f64[0]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v13 = v12;

  v14 = objc_allocWithZone((Class)CLSContext);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v14, "initWithType:identifier:title:", v10, v15, v16, swift_bridgeObjectRelease(v13).n128_f64[0]);

  objc_msgSend(v17, "setAssignable:", objc_msgSend(v3, "isAssignable"));
  objc_msgSend(v17, "setDisplayOrder:", objc_msgSend(v3, "displayOrder"));
  v18 = objc_msgSend(v3, "universalLinkURL");
  if (v18)
  {
    v19 = v18;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v20 = v27;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v7, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v20) == 1)
    {
      v22 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v21);
      v22 = v23;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v20);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v9, 1, 1, v27);
    v22 = 0;
  }
  objc_msgSend(v17, "setUniversalLinkURL:", v22);

  v24 = objc_msgSend(v3, "thumbnail");
  objc_msgSend(v17, "setThumbnail:", v24);

  return v17;
}

void sub_100326E28(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  id v10;
  void *v11;
  id v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  _QWORD v17[5];
  _QWORD *v18;

  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v5 = sub_10003F544(&qword_1005559A0);
  v6 = swift_allocObject(v5, 112, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1003CA220;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CLSPredicateKeyPathParent);
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(v6 + 56) = sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  *(_QWORD *)(v6 + 64) = sub_1003273DC(&qword_1005642F0, &qword_100554ED0, NSString_ptr);
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 96) = sub_100005EC8(0, (unint64_t *)&unk_100555800, CLSContext_ptr);
  *(_QWORD *)(v6 + 104) = sub_1003273DC(&qword_1005642F8, (unint64_t *)&unk_100555800, CLSContext_ptr);
  *(_QWORD *)(v6 + 72) = v2;
  v10 = v2;
  v11 = (void *)NSPredicate.init(format:_:)(0x4025203D204B25, 0xE700000000000000, v6);
  v12 = objc_msgSend((id)objc_opt_self(CLSDataStore), "shared");
  v13 = (_QWORD *)swift_allocObject(&unk_1004C3408, 40, 7);
  v13[2] = v11;
  v13[3] = a1;
  v13[4] = a2;
  v17[4] = sub_100327448;
  v18 = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_100327344;
  v17[3] = &unk_1004C3420;
  v14 = _Block_copy(v17);
  v15 = v18;
  v16 = v11;
  swift_retain();
  objc_msgSend(v12, "contextsMatchingPredicate:completion:", v16, v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);

}

uint64_t sub_100327040(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  os_log_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v8 = type metadata accessor for Logger(0);
  __chkstk_darwin();
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v39 = v9;
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v12 = swift_errorRetain();
    static OS_os_log.classKit.getter(v12);
    swift_errorRetain();
    v13 = a3;
    swift_errorRetain();
    v14 = v13;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      v18 = swift_slowAlloc(22, -1);
      v37 = a1;
      v19 = v18;
      v20 = (_QWORD *)swift_slowAlloc(8, -1);
      v35 = swift_slowAlloc(32, -1);
      v40 = (uint64_t)v14;
      v41 = v35;
      *(_DWORD *)v19 = 138412546;
      v38 = a4;
      v36 = v8;
      v34 = v17;
      v21 = v14;
      v33 = v15;
      v22 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v19 + 4, v19 + 12);
      *v20 = v14;

      *(_WORD *)(v19 + 12) = 2080;
      v40 = a2;
      swift_errorRetain();
      v23 = sub_10003F544((uint64_t *)&unk_10055A340);
      v24 = String.init<A>(describing:)(&v40, v23);
      v26 = v25;
      v40 = sub_10003D274(v24, v25, &v41);
      a4 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease();
      swift_errorRelease();
      v27 = v33;
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v34, "Error loading contexts for predicate %@ - %s", (uint8_t *)v19, 0x16u);
      v28 = sub_10003F544((uint64_t *)&unk_100556480);
      swift_arrayDestroy(v20, 1, v28);
      swift_slowDealloc(v20, -1, -1);
      v29 = v35;
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      v30 = v19;
      a1 = v37;
      swift_slowDealloc(v30, -1, -1);

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v36);
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v8);
    }
  }
  return a4(a1);
}

void sub_100327344(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  uint64_t v8;
  id v9;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = sub_100005EC8(0, (unint64_t *)&unk_100555800, CLSContext_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v7);
  swift_retain();
  v9 = a3;
  v6(v8, a3);
  swift_release(v5);
  swift_bridgeObjectRelease(v8);

}

uint64_t sub_1003273DC(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100005EC8(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10032741C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100327448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100327040(a1, a2, *(void **)(v2 + 16), *(uint64_t (**)(_QWORD))(v2 + 24));
}

_QWORD *sub_100327454(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4 = v3;
  v21 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  while (v6)
  {
    for (i = 4; ; ++i)
    {
      v9 = i - 4;
      if ((a3 & 0xC000000000000001) == 0)
        break;
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3);
      v11 = i - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_17;
LABEL_11:
      v20 = v10;
      a1(&v19, &v20);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        swift_release(v10);
        return (_QWORD *)swift_bridgeObjectRelease(v21);
      }
      v12 = swift_release(v10);
      v13 = v19;
      if (v19)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v15 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v14 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
        specialized Array._endMutation()(v8);
      }
      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (_QWORD *)v21;
      }
    }
    v10 = *(_QWORD *)(a3 + 8 * i);
    swift_retain(v10);
    v11 = i - 3;
    if (!__OFADD__(v9, 1))
      goto LABEL_11;
LABEL_17:
    __break(1u);
LABEL_18:
    if (a3 < 0)
      v17 = a3;
    else
      v17 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v6 = _CocoaArrayWrapper.endIndex.getter(v17);
  }
  swift_bridgeObjectRelease(a3);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100327600(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v19;
  id v20;
  unint64_t v21;

  v4 = v3;
  v21 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    for (i = 4; ; ++i)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
         : *(id *)(a3 + 8 * i);
      v10 = v9;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v20 = v9;
      a1(&v19, &v20);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return (_QWORD *)swift_bridgeObjectRelease(v21);
      }

      v13 = v19;
      if (v19)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v15 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v14 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
        specialized Array._endMutation()(v8);
      }
      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (_QWORD *)v21;
      }
    }
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v17 = a3;
    else
      v17 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease(a3);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100327798(uint64_t a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  Class isa;
  char *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t result;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[5];
  uint64_t v44;
  objc_super v45;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts19StationListObserver_currentValue] = _swiftEmptyArrayStorage;
  v3 = &v1[OBJC_IVAR____TtC8Podcasts19StationListObserver_didChange];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = OBJC_IVAR____TtC8Podcasts19StationListObserver_managedContextProvider;
  v5 = (void *)objc_opt_self(MTDB);
  v6 = v1;
  *(_QWORD *)&v1[v4] = objc_msgSend(v5, "sharedInstance");
  v7 = &v6[OBJC_IVAR____TtC8Podcasts19StationListObserver_options];
  v8 = type metadata accessor for StationListOptions(0);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v7, a1, v8);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPlaylistEntityName);
  v10 = v9;
  v11 = objc_allocWithZone((Class)NSFetchRequest);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v13 = objc_msgSend(v11, "initWithEntityName:", v12);

  v14 = (void *)objc_opt_self(MTPlaylist);
  v15 = objc_msgSend(v14, "topLevelPlaylistsExcludingFoldersPredicate");
  objc_msgSend(v13, "setPredicate:", v15);

  v16 = objc_msgSend(v14, "sortDescriptors");
  objc_msgSend(v13, "setSortDescriptors:", v16);

  v17 = objc_msgSend(*(id *)&v1[v4], "privateQueueContext");
  v18 = objc_msgSend(objc_allocWithZone((Class)MTFetchedResultsController), "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", v13, v17, 0, 0);
  v19 = OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver] = v18;
  v20 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v21 = swift_allocObject(v20, 112, 7);
  *(_OWORD *)(v21 + 16) = xmmword_1003CA210;
  *(_QWORD *)(v21 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistTitle);
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistHidden);
  *(_QWORD *)(v21 + 56) = v23;
  *(_QWORD *)(v21 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistSortOrder);
  *(_QWORD *)(v21 + 72) = v24;
  *(_QWORD *)(v21 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistEpisodes);
  *(_QWORD *)(v21 + 88) = v25;
  *(_QWORD *)(v21 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistSettings);
  *(_QWORD *)(v21 + 104) = v26;
  v27 = *(id *)&v6[v19];
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  objc_msgSend(v27, "setPropertyKeys:", isa);

  v45.receiver = v6;
  v45.super_class = (Class)type metadata accessor for StationListObserver(0);
  v29 = (char *)objc_msgSendSuper2(&v45, "init");
  v30 = OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver;
  v31 = *(void **)&v29[OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver];
  v32 = v29;
  objc_msgSend(v31, "setDelegate:", v32);
  v33 = swift_allocObject(&unk_1004C3598, 24, 7);
  swift_unknownObjectWeakInit(v33 + 16, v32);
  v34 = swift_allocObject(&unk_1004C35C0, 32, 7);
  *(_QWORD *)(v34 + 16) = sub_100328A2C;
  *(_QWORD *)(v34 + 24) = v33;
  aBlock[4] = sub_1001529CC;
  v44 = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004C35D8;
  v35 = _Block_copy(aBlock);
  v36 = v44;
  swift_retain(v34);
  swift_release(v36);
  objc_msgSend(v17, "performBlockAndWait:", v35);
  _Block_release(v35);
  LOBYTE(v35) = swift_isEscapingClosureAtFileLocation(v34, "", 108, 53, 32, 1);
  result = swift_release(v34);
  if ((v35 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_sync_enter(v32);
    v38 = *(id *)&v29[v30];
    v39 = sub_100328588(v38, v42);

    v40 = *(_QWORD *)&v32[OBJC_IVAR____TtC8Podcasts19StationListObserver_currentValue];
    *(_QWORD *)&v32[OBJC_IVAR____TtC8Podcasts19StationListObserver_currentValue] = v39;
    swift_bridgeObjectRelease(v40);
    objc_sync_exit(v32);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v8);
    swift_release(v33);
    return (uint64_t)v32;
  }
  return result;
}

char *sub_100327C08(uint64_t a1)
{
  uint64_t v1;
  char *result;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  _BYTE v17[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  result = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = *(id *)&result[OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver];

    v15 = 0;
    LODWORD(v3) = objc_msgSend(v4, "performFetch:", &v15);

    if ((_DWORD)v3)
    {
      return (char *)v15;
    }
    else
    {
      v13 = v15;
      v5 = v15;
      v6 = _convertNSErrorToError(_:)(v13);

      swift_willThrow();
      v7 = sub_10003F544(&qword_1005547B0);
      v8 = swift_allocObject(v7, 64, 7);
      *(_OWORD *)(v8 + 16) = xmmword_1003CA200;
      v15 = 0;
      v16 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      v9._object = (void *)0x800000010043DAF0;
      v9._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v9);
      v14 = v6;
      v10 = sub_10003F544((uint64_t *)&unk_10055A340);
      _print_unlocked<A, B>(_:_:)(&v14, &v15, v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v11 = v15;
      v12 = v16;
      *(_QWORD *)(v8 + 56) = &type metadata for String;
      *(_QWORD *)(v8 + 32) = v11;
      *(_QWORD *)(v8 + 40) = v12;
      print(_:separator:terminator:)(v8, 32, 0xE100000000000000, 10, 0xE100000000000000);
      swift_bridgeObjectRelease(v8);
      return (char *)swift_errorRelease(v6);
    }
  }
  return result;
}

id sub_100327DE4()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver], "setDelegate:", 0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StationListObserver(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100327F1C()
{
  return type metadata accessor for StationListObserver(0);
}

uint64_t type metadata accessor for StationListObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_1005643B0;
  if (!qword_1005643B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StationListObserver);
  return result;
}

id sub_100327F60(void *a1, uint64_t *a2, uint64_t a3)
{
  id result;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[6];

  result = objc_msgSend(a1, "fetchedObjects");
  if (result)
  {
    v6 = result;
    v7 = sub_10032896C();
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    __chkstk_darwin(v9);
    v12[2] = a3;
    v10 = sub_100327600((void (*)(uint64_t *__return_ptr, id *))sub_1003289A8, (uint64_t)v12, v8);
    swift_bridgeObjectRelease(v8);
    v11 = *a2;
    *a2 = (uint64_t)v10;
    return (id)swift_bridgeObjectRelease(v11);
  }
  return result;
}

void sub_100328024(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  unint64_t v9;
  char v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v17 = a2;
  v3 = type metadata accessor for StationListOptions(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  type metadata accessor for StationDetail(0);
  v8 = v7;
  static StationListOptions.excludeArtwork.getter();
  v9 = sub_1003289C0();
  v10 = dispatch thunk of SetAlgebra.isSuperset(of:)(v6, v3, v9);
  v11 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  v12 = v11(v6, v3);
  static StationListOptions.excludeEpisodes.getter(v12);
  LOBYTE(v4) = dispatch thunk of SetAlgebra.isSuperset(of:)(v6, v3, v9);
  v13 = v11(v6, v3);
  static StationListOptions.excludeShows.getter(v13);
  v14 = dispatch thunk of SetAlgebra.isSuperset(of:)(v6, v3, v9);
  v11(v6, v3);
  sub_1002DA298(v8, v10 & 1, v4 & 1, v14 & 1);
  *v17 = v15;
}

uint64_t sub_1003281E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_1003D5DE8;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for StationListOptions(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1003D5E00;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_100328284()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005643C0;
  if (!qword_1005643C0)
  {
    v1 = sub_10003CA40((uint64_t *)&unk_1005643C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005643C0);
  }
  return result;
}

uint64_t sub_1003282D0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*v1 + OBJC_IVAR____TtC8Podcasts19StationListObserver_currentValue);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t (*sub_1003282E8())(_QWORD *)
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  _BYTE v7[24];

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8Podcasts19StationListObserver_didChange);
  swift_beginAccess(v1, v7, 0, 0);
  v2 = *v1;
  v3 = v1[1];
  if (v2)
  {
    v4 = swift_allocObject(&unk_1004C34F8, 32, 7);
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = sub_100176EE8;
  }
  else
  {
    v5 = 0;
  }
  sub_10002CA20(v2, v3);
  return v5;
}

uint64_t sub_100328380(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  if (a1)
  {
    v5 = swift_allocObject(&unk_1004C34D0, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_100176EFC;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*v2 + OBJC_IVAR____TtC8Podcasts19StationListObserver_didChange);
  swift_beginAccess(v7, v11, 1, 0);
  v8 = *v7;
  v9 = v7[1];
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  return sub_10002CA30(v8, v9);
}

void (*sub_100328414(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *);

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8Podcasts19StationListObserver_didChange;
  v3[5] = *v1;
  v3[6] = v5;
  v6 = (uint64_t *)(v4 + v5);
  swift_beginAccess(v4 + v5, v3, 33, 0);
  v7 = *v6;
  if (*v6)
  {
    v8 = v6[1];
    v9 = swift_allocObject(&unk_1004C34A8, 32, 7);
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = v8;
    v10 = sub_100176B90;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v3[3] = v10;
  v3[4] = v9;
  return sub_1003284BC;
}

void sub_1003284BC(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (**v8)(uint64_t);

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) == 0)
  {
    if (v3)
    {
      v7 = v2[4];
      v5 = swift_allocObject(&unk_1004C3480, 32, 7);
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v7;
      v6 = sub_100176EFC;
      goto LABEL_7;
    }
LABEL_6:
    v6 = 0;
    v5 = 0;
    goto LABEL_7;
  }
  if (!v3)
    goto LABEL_6;
  v4 = v2[4];
  v5 = swift_allocObject(&unk_1004C3458, 32, 7);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = sub_100176B60;
LABEL_7:
  v8 = (uint64_t (**)(uint64_t))(v2[5] + v2[6]);
  *v8 = v6;
  v8[1] = (uint64_t (*)(uint64_t))v5;
  swift_endAccess(v2);
  free(v2);
}

uint64_t sub_100328564()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100328588(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD aBlock[5];
  uint64_t v20;
  _QWORD *v21;

  v4 = type metadata accessor for StationListOptions(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v21 = 0;
  v7 = objc_msgSend(a1, "managedObjectContext");
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(&unk_1004C3520, v9 + v6, v8 | 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = &v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v11 = swift_allocObject(&unk_1004C3548, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_10032892C;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_100029B3C;
  v20 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004C3560;
  v12 = _Block_copy(aBlock);
  v13 = v20;
  v14 = a1;
  swift_retain(v11);
  swift_release(v13);
  objc_msgSend(v7, "performBlockAndWait:", v12);
  _Block_release(v12);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v11, "", 108, 77, 32, 1);
  result = swift_release(v11);
  if ((a1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v16 = v21;
    if (v21)
      swift_bridgeObjectRetain(v21);
    else
      v16 = _swiftEmptyArrayStorage;

    v17 = v21;
    swift_release(v10);
    swift_bridgeObjectRelease(v17);
    return (uint64_t)v16;
  }
  return result;
}

double sub_10032877C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double result;
  void (*v12)(__n128);
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  char v17[24];

  v1 = type metadata accessor for StationListOptions(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  objc_sync_enter(v0);
  v5 = *(void **)&v0[OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver];
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, &v0[OBJC_IVAR____TtC8Podcasts19StationListObserver_options], v1);
  v6 = v5;
  v7 = sub_100328588(v6, (uint64_t)v4);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v8 = OBJC_IVAR____TtC8Podcasts19StationListObserver_currentValue;
  v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts19StationListObserver_currentValue];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts19StationListObserver_currentValue] = v7;
  swift_bridgeObjectRelease(v9);
  objc_sync_exit(v0);
  v10 = &v0[OBJC_IVAR____TtC8Podcasts19StationListObserver_didChange];
  *(_QWORD *)&result = swift_beginAccess(&v0[OBJC_IVAR____TtC8Podcasts19StationListObserver_didChange], v17, 0, 0).n128_u64[0];
  v12 = *(void (**)(__n128))v10;
  if (*(_QWORD *)v10)
  {
    v13 = *((_QWORD *)v10 + 1);
    v14 = *(_QWORD *)&v0[v8];
    sub_10002CA20((uint64_t)v12, v13);
    v15 = swift_bridgeObjectRetain(v14);
    v12(v15);
    sub_10002CA30((uint64_t)v12, v13);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v14).n128_u64[0];
  }
  return result;
}

uint64_t sub_1003288B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for StationListOptions(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

id sub_10032892C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StationListOptions(0) - 8) + 80);
  return sub_100327F60(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_10032895C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10032896C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100553A30;
  if (!qword_100553A30)
  {
    v1 = objc_opt_self(MTPlaylist);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100553A30);
  }
  return result;
}

void sub_1003289A8(void **a1@<X0>, _QWORD *a2@<X8>)
{
  sub_100328024(a1, a2);
}

unint64_t sub_1003289C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005643D8;
  if (!qword_1005643D8)
  {
    v1 = type metadata accessor for StationListOptions(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for StationListOptions, v1);
    atomic_store(result, (unint64_t *)&qword_1005643D8);
  }
  return result;
}

uint64_t sub_100328A08()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

char *sub_100328A2C()
{
  uint64_t v0;

  return sub_100327C08(v0);
}

uint64_t sub_100328A34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100328A54()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSURL *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_10003F544(&qword_100564BC0);
  __chkstk_darwin();
  v29 = (uint64_t)&v29 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v2 = (char *)&v29 - v1;
  __chkstk_darwin();
  v4 = (char *)&v29 - v3;
  v31 = type metadata accessor for PodcastsURLEpisodeParameters(0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin();
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v29 - v8;
  __chkstk_darwin();
  v30 = (uint64_t)&v29 - v10;
  __chkstk_darwin();
  v12 = (char *)&v29 - v11;
  sub_10003F544(&qword_100564B10);
  v13 = __chkstk_darwin();
  v15 = (NSURL *)((char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = URL.host.getter(v13);
  if (!v17)
    return 0;
  v18 = v16;
  v19 = v17;
  if ((v16 != 0x6979616C50776F6ELL || v17 != 0xEA0000000000676ELL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6979616C50776F6ELL, 0xEA0000000000676ELL, v16, v17, 0) & 1) == 0)
  {
    if (v18 == 0x6573776F7262 && v19 == 0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6573776F7262, 0xE600000000000000, v18, v19, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v19);
      v20 = type metadata accessor for PodcastsURLBrowseCommand();
      return swift_allocObject(v20, 16, 7);
    }
    if (v18 == 1852141679 && v19 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(1852141679, 0xE400000000000000, v18, v19, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v19);
      sub_100329230(v15);
      v22 = type metadata accessor for PodcastsURLOpenCommand(0);
      v21 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      sub_10032B274((uint64_t)v15, v21 + OBJC_IVAR____TtC8Podcasts22PodcastsURLOpenCommand_widgetContext);
      return v21;
    }
    if (v18 == 2003789939 && v19 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(2003789939, 0xE400000000000000, v18, v19, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v19);
      sub_1003293CC((uint64_t)v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v31) == 1)
      {
        v23 = (uint64_t)v4;
LABEL_20:
        sub_100007A28(v23, &qword_100564BC0);
        return 0;
      }
      sub_1002D5FBC((uint64_t)v4, (uint64_t)v12);
      v25 = v30;
      sub_1002D5FBC((uint64_t)v12, v30);
      v26 = type metadata accessor for PodcastsURLShowCommand(0);
    }
    else if (v18 == 2036427888 && v19 == 0xE400000000000000
           || (_stringCompareWithSmolCheck(_:_:expecting:)(2036427888, 0xE400000000000000, v18, v19, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v19);
      sub_1003293CC((uint64_t)v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v31) == 1)
      {
        v23 = (uint64_t)v2;
        goto LABEL_20;
      }
      sub_1002D5FBC((uint64_t)v2, (uint64_t)v9);
      v25 = v30;
      sub_1002D5FBC((uint64_t)v9, v30);
      v26 = type metadata accessor for PodcastsURLPlayCommand(0);
    }
    else
    {
      if (v18 == 0x79616C70776F6873 && v19 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease(0xE800000000000000);
      }
      else
      {
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(0x79616C70776F6873, 0xE800000000000000, v18, v19, 0);
        swift_bridgeObjectRelease(v19);
        if ((v27 & 1) == 0)
          return 0;
      }
      v28 = v29;
      sub_1003293CC(v29);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v28, 1, v31) == 1)
      {
        v23 = v28;
        goto LABEL_20;
      }
      sub_1002D5FBC(v28, (uint64_t)v7);
      v25 = v30;
      sub_1002D5FBC((uint64_t)v7, v30);
      v26 = type metadata accessor for PodcastsURLShowAndPlayCommand(0);
    }
    v21 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    sub_1002D5FBC(v25, v21 + OBJC_IVAR____TtC8Podcasts25PodcastsURLEpisodeCommand_episodeParameters);
    return v21;
  }
  swift_bridgeObjectRelease(v19);
  v20 = type metadata accessor for PodcastsURLNowPlayingCommand();
  return swift_allocObject(v20, 16, 7);
}

uint64_t type metadata accessor for PodcastsURLCommand()
{
  return objc_opt_self(_TtC8Podcasts18PodcastsURLCommand);
}

uint64_t type metadata accessor for PodcastsURLNowPlayingCommand()
{
  return objc_opt_self(_TtC8Podcasts28PodcastsURLNowPlayingCommand);
}

uint64_t type metadata accessor for PodcastsURLBrowseCommand()
{
  return objc_opt_self(_TtC8Podcasts24PodcastsURLBrowseCommand);
}

uint64_t sub_100328FDC()
{
  uint64_t v0;

  return sub_100007A28(v0 + OBJC_IVAR____TtC8Podcasts22PodcastsURLOpenCommand_widgetContext, &qword_100564B10);
}

uint64_t sub_100329004()
{
  uint64_t v0;

  sub_100007A28(v0 + OBJC_IVAR____TtC8Podcasts22PodcastsURLOpenCommand_widgetContext, &qword_100564B10);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10032903C()
{
  return type metadata accessor for PodcastsURLOpenCommand(0);
}

uint64_t type metadata accessor for PodcastsURLOpenCommand(uint64_t a1)
{
  return sub_10003EAF4(a1, (uint64_t *)&unk_1005645D0, (uint64_t)&nominal type descriptor for PodcastsURLOpenCommand);
}

uint64_t sub_100329058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100329120(a1, a2, a3, (uint64_t (*)(uint64_t))sub_100329064);
}

void sub_100329064(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005645E0)
  {
    v2 = type metadata accessor for MetricsWidgetContext(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005645E0);
  }
}

uint64_t sub_1003290B8()
{
  uint64_t v0;

  return sub_10030F8FC(v0 + OBJC_IVAR____TtC8Podcasts25PodcastsURLEpisodeCommand_episodeParameters);
}

uint64_t sub_1003290C8()
{
  uint64_t v0;

  sub_10030F8FC(v0 + OBJC_IVAR____TtC8Podcasts25PodcastsURLEpisodeCommand_episodeParameters);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1003290F8()
{
  return type metadata accessor for PodcastsURLEpisodeCommand(0);
}

uint64_t type metadata accessor for PodcastsURLEpisodeCommand(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100564690, (uint64_t)&nominal type descriptor for PodcastsURLEpisodeCommand);
}

uint64_t sub_100329114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100329120(a1, a2, a3, type metadata accessor for PodcastsURLEpisodeParameters);
}

uint64_t sub_100329120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v7, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for PodcastsURLEpisodeParameters(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100564B70, (uint64_t)&nominal type descriptor for PodcastsURLEpisodeParameters);
}

uint64_t sub_1003291A4()
{
  return type metadata accessor for PodcastsURLShowCommand(0);
}

uint64_t type metadata accessor for PodcastsURLShowCommand(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100564748, (uint64_t)&nominal type descriptor for PodcastsURLShowCommand);
}

uint64_t sub_1003291C4()
{
  return type metadata accessor for PodcastsURLPlayCommand(0);
}

uint64_t type metadata accessor for PodcastsURLPlayCommand(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100564800, (uint64_t)&nominal type descriptor for PodcastsURLPlayCommand);
}

uint64_t sub_1003291E0()
{
  return type metadata accessor for PodcastsURLShowAndPlayCommand(0);
}

uint64_t type metadata accessor for PodcastsURLShowAndPlayCommand(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_1005648B8, (uint64_t)&nominal type descriptor for PodcastsURLShowAndPlayCommand);
}

uint64_t sub_1003291FC(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 104);
}

double sub_100329230@<D0>(NSURL *a1@<X8>)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  _QWORD v14[2];
  _BYTE v15[40];
  __int128 v16;
  __int128 v17;

  URL._bridgeToObjectiveC()(a1);
  v3 = v2;
  v4 = objc_msgSend(v2, "pf_queryAsDictionary");

  if (v4)
  {
    v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    strcpy((char *)&v16, "widgetContext");
    HIWORD(v16) = -4864;
    AnyHashable.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v5 + 16) && (v6 = sub_1001CCFC0((uint64_t)v15), (v7 & 1) != 0))
    {
      sub_10003D344(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v16);
    }
    else
    {
      v16 = 0u;
      v17 = 0u;
    }
    swift_bridgeObjectRelease(v5);
    sub_100048644((uint64_t)v15);
    if (*((_QWORD *)&v17 + 1))
    {
      v8 = swift_dynamicCast(v14, &v16, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      v9 = v8 == 0;
      if (v8)
        v10 = v14[0];
      else
        v10 = 0;
      if (v9)
        v11 = 0;
      else
        v11 = v14[1];
    }
    else
    {
      sub_100007A28((uint64_t)&v16, (uint64_t *)&unk_100552300);
      v10 = 0;
      v11 = 0;
    }
    static MetricsWidgetContext.decodeFromString(_:)(v10, v11);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  }
  else
  {
    v12 = type metadata accessor for MetricsWidgetContext(0);
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  return result;
}

uint64_t sub_1003293CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSURL *v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  char v40;
  char v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  char *v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[40];
  __int128 v63;
  __int128 v64;

  sub_10003F544(&qword_100564B10);
  __chkstk_darwin();
  v3 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PodcastsURLEpisodeParameters(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (NSURL *)((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)((char *)&v54 - (char *)v7);
  URL._bridgeToObjectiveC()(v7);
  v10 = v9;
  v11 = objc_msgSend(v9, "pf_queryAsDictionary");

  if (!v11)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, 1, 1, v4);
  v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  *((_QWORD *)v8 + 4) = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[40] = 1;
  *((_QWORD *)v8 + 6) = 0;
  v8[56] = 1;
  *(_WORD *)(v8 + 57) = 514;
  v13 = (uint64_t)&v8[*(int *)(v4 + 40)];
  v14 = type metadata accessor for MetricsWidgetContext(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v56 = v13;
  v15(v13, 1, 1, v14);
  *(_QWORD *)&v63 = 0x5574736163646F70;
  *((_QWORD *)&v63 + 1) = 0xEB00000000646975;
  AnyHashable.init<A>(_:)(&v63, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v12 + 16) && (v16 = sub_1001CCFC0((uint64_t)v62), (v17 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(v12 + 56) + 32 * v16, (uint64_t)&v63);
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
  }
  v57 = v3;
  sub_100048644((uint64_t)v62);
  if (*((_QWORD *)&v64 + 1))
  {
    v18 = swift_dynamicCast(&v59, &v63, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v18)
      v19 = v59;
    else
      v19 = 0;
    if (v18)
      v20 = v60;
    else
      v20 = 0;
  }
  else
  {
    sub_100007A28((uint64_t)&v63, (uint64_t *)&unk_100552300);
    v19 = 0;
    v20 = 0;
  }
  v22 = *((_QWORD *)v8 + 1);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)v8 = v19;
  *((_QWORD *)v8 + 1) = v20;
  *(_QWORD *)&v63 = 0x4974736163646F70;
  *((_QWORD *)&v63 + 1) = 0xE900000000000064;
  AnyHashable.init<A>(_:)(&v63, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v12 + 16) && (v23 = sub_1001CCFC0((uint64_t)v62), (v24 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(v12 + 56) + 32 * v23, (uint64_t)&v63);
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
  }
  sub_100048644((uint64_t)v62);
  v25 = sub_10032A68C((uint64_t)&v63);
  v27 = v26;
  sub_100007A28((uint64_t)&v63, (uint64_t *)&unk_100552300);
  *((_QWORD *)v8 + 4) = v25;
  v55 = v27;
  v8[40] = v27 & 1;
  *(_QWORD *)&v63 = 0x5565646F73697065;
  *((_QWORD *)&v63 + 1) = 0xEB00000000646975;
  AnyHashable.init<A>(_:)(&v63, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v12 + 16) && (v28 = sub_1001CCFC0((uint64_t)v62), (v29 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(v12 + 56) + 32 * v28, (uint64_t)&v63);
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
  }
  sub_100048644((uint64_t)v62);
  if (*((_QWORD *)&v64 + 1))
  {
    v30 = swift_dynamicCast(&v59, &v63, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v30)
      v31 = v59;
    else
      v31 = 0;
    if (v30)
      v32 = v60;
    else
      v32 = 0;
  }
  else
  {
    sub_100007A28((uint64_t)&v63, (uint64_t *)&unk_100552300);
    v31 = 0;
    v32 = 0;
  }
  v33 = *((_QWORD *)v8 + 3);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *((_QWORD *)v8 + 2) = v31;
  *((_QWORD *)v8 + 3) = v32;
  *(_QWORD *)&v63 = 0x4965646F73697065;
  *((_QWORD *)&v63 + 1) = 0xE900000000000064;
  AnyHashable.init<A>(_:)(&v63, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v12 + 16) && (v34 = sub_1001CCFC0((uint64_t)v62), (v35 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(v12 + 56) + 32 * v34, (uint64_t)&v63);
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
  }
  sub_100048644((uint64_t)v62);
  v36 = sub_10032A68C((uint64_t)&v63);
  v38 = v37;
  sub_100007A28((uint64_t)&v63, (uint64_t *)&unk_100552300);
  *((_QWORD *)v8 + 6) = v36;
  v8[56] = v38 & 1;
  *(_QWORD *)&v63 = 0x616C506563726F66;
  *((_QWORD *)&v63 + 1) = 0xE900000000000079;
  AnyHashable.init<A>(_:)(&v63, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v12 + 16) && (v39 = sub_1001CCFC0((uint64_t)v62), (v40 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(v12 + 56) + 32 * v39, (uint64_t)&v63);
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
  }
  sub_100048644((uint64_t)v62);
  v41 = sub_10032A9AC((uint64_t)&v63);
  sub_100007A28((uint64_t)&v63, (uint64_t *)&unk_100552300);
  v8[57] = v41;
  strcpy((char *)&v63, "episodeContext");
  HIBYTE(v63) = -18;
  AnyHashable.init<A>(_:)(&v63, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v12 + 16) && (v42 = sub_1001CCFC0((uint64_t)v62), (v43 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(v12 + 56) + 32 * v42, (uint64_t)&v63);
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
  }
  sub_100048644((uint64_t)v62);
  sub_100007A64((uint64_t)&v63, (uint64_t)&v59, (uint64_t *)&unk_100552300);
  if (v61)
  {
    if ((swift_dynamicCast(v58, &v59, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v54 = v38;
      v45 = v58[0];
      v44 = v58[1];
      sub_100007A28((uint64_t)&v63, (uint64_t *)&unk_100552300);
      if (v45 == 0x6F4E6E657473696CLL && v44 == 0xEF7478654E705577)
      {
        swift_bridgeObjectRelease(0xEF7478654E705577);
        v46 = 1;
      }
      else
      {
        v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v44, 0x6F4E6E657473696CLL, 0xEF7478654E705577, 0);
        swift_bridgeObjectRelease(v44);
      }
      LOBYTE(v38) = v54;
      goto LABEL_52;
    }
  }
  else
  {
    sub_100007A28((uint64_t)&v59, (uint64_t *)&unk_100552300);
  }
  sub_100007A28((uint64_t)&v63, (uint64_t *)&unk_100552300);
  v46 = 0;
LABEL_52:
  v8[58] = v46 & 1;
  strcpy((char *)&v63, "widgetContext");
  HIWORD(v63) = -4864;
  AnyHashable.init<A>(_:)(&v63, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v12 + 16) && (v47 = sub_1001CCFC0((uint64_t)v62), (v48 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(v12 + 56) + 32 * v47, (uint64_t)&v63);
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
  }
  swift_bridgeObjectRelease(v12);
  sub_100048644((uint64_t)v62);
  if (*((_QWORD *)&v64 + 1))
  {
    v49 = swift_dynamicCast(&v59, &v63, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    v50 = v49 == 0;
    if (v49)
      v51 = v59;
    else
      v51 = 0;
    if (v50)
      v52 = 0;
    else
      v52 = v60;
  }
  else
  {
    sub_100007A28((uint64_t)&v63, (uint64_t *)&unk_100552300);
    v51 = 0;
    v52 = 0;
  }
  v53 = (uint64_t)v57;
  static MetricsWidgetContext.decodeFromString(_:)(v51, v52);
  swift_bridgeObjectRelease(v52);
  sub_10032B2BC(v53, v56);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v32);
  if (v20 || (v55 & 1) == 0 || v32 || (v38 & 1) == 0)
  {
    sub_10030F8B8((uint64_t)v8, a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, 1, 1, v4);
  }
  return sub_10030F8FC((uint64_t)v8);
}

uint64_t sub_100329BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::String_optional v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _QWORD v20[2];

  v20[1] = a2;
  sub_10003F544(&qword_100564B10);
  __chkstk_darwin();
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MetricsWidgetContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URLComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin();
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()(v11);
  URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
  URLComponents.host.setter(1852141679, 0xE400000000000000);
  sub_100007A64(a1 + OBJC_IVAR____TtC8Podcasts22PodcastsURLOpenCommand_widgetContext, (uint64_t)v4, &qword_100564B10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    v14 = sub_100007A28((uint64_t)v4, &qword_100564B10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v15 = MetricsWidgetContext.encodeToString()();
    if (v15.value._object)
    {
      v16 = sub_10003F544(&qword_100555648);
      v17 = type metadata accessor for URLQueryItem(0);
      *(_OWORD *)(swift_allocObject(v16, ((*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) | 7)+ 16) = xmmword_1003CA200;
      URLQueryItem.init(name:value:)(0x6F43746567646977, 0xED0000747865746ELL, v15.value._countAndFlagsBits, v15.value._object);
      v18 = swift_bridgeObjectRelease(v15.value._object);
      URLComponents.queryItems.setter(v18);
    }
    v14 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  URLComponents.url.getter(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t type metadata accessor for PodcastsURLScheme()
{
  return objc_opt_self(_TtC8Podcasts17PodcastsURLScheme);
}

uint64_t type metadata accessor for PodcastsURLScheme.Command()
{
  return objc_opt_self(_TtCC8Podcasts17PodcastsURLSchemeP33_24887D9DFB09D30BD3777B7820B3EDFB7Command);
}

uint64_t type metadata accessor for PodcastsURLScheme.Param()
{
  return objc_opt_self(_TtCC8Podcasts17PodcastsURLSchemeP33_24887D9DFB09D30BD3777B7820B3EDFB5Param);
}

_QWORD *sub_100329E80(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v7 = *(int *)(a3 + 40);
    v8 = (char *)a2 + v7;
    v9 = (void *)(a1 + v7);
    *(_BYTE *)(a1 + 58) = *((_BYTE *)a2 + 58);
    v10 = type metadata accessor for MetricsWidgetContext(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v11 + 48);
    swift_bridgeObjectRetain(v5);
    v13 = swift_bridgeObjectRetain(v6);
    if (v12(v8, 1, v10, v13))
    {
      v14 = sub_10003F544(&qword_100564B10);
      memcpy(v9, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v9, v8, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t sub_100329FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for MetricsWidgetContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_10032A034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v6 = *(int *)(a3 + 40);
  v7 = (const void *)(a2 + v6);
  v8 = (void *)(a1 + v6);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v9 = type metadata accessor for MetricsWidgetContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v10 + 48);
  swift_bridgeObjectRetain(v4);
  v12 = swift_bridgeObjectRetain(v5);
  if (v11(v7, 1, v9, v12))
  {
    v13 = sub_10003F544(&qword_100564B10);
    memcpy(v8, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v8, v7, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_10032A138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v12 = *(int *)(a3 + 40);
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for MetricsWidgetContext(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_10003F544(&qword_100564B10);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_10032A2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v5 = *(int *)(a3 + 40);
  v6 = (const void *)(a2 + v5);
  v7 = (void *)(a1 + v5);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v8 = type metadata accessor for MetricsWidgetContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
  {
    v10 = sub_10003F544(&qword_100564B10);
    memcpy(v7, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v7, v6, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_10032A394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_WORD *)(a2 + 57);
  v11 = *(int *)(a3 + 40);
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  *(_WORD *)(a1 + 57) = v10;
  v14 = type metadata accessor for MetricsWidgetContext(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_10003F544(&qword_100564B10);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_10032A4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10032A4F0);
}

uint64_t sub_10032A4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_10003F544(&qword_100564B10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v9);
  }
}

uint64_t sub_10032A57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10032A588);
}

uint64_t sub_10032A588(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_10003F544(&qword_100564B10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_10032A600(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1003D5FC0;
  v4[1] = &unk_1003D5FC0;
  v4[2] = &unk_1003D5FD8;
  v4[3] = &unk_1003D5FD8;
  v4[4] = &unk_1003D5FF0;
  v4[5] = &unk_1003D5FF0;
  sub_100329064(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t sub_10032A68C(uint64_t a1)
{
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[4];

  sub_100007A64(a1, (uint64_t)v25, (uint64_t *)&unk_100552300);
  if (!v25[3])
  {
    sub_100007A28((uint64_t)v25, (uint64_t *)&unk_100552300);
    return 0;
  }
  if ((swift_dynamicCast(&v23, v25, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 0;
  result = v23;
  v2 = v24;
  v3 = HIBYTE(v24) & 0xF;
  v4 = v23 & 0xFFFFFFFFFFFFLL;
  if ((v24 & 0x2000000000000000) != 0)
    v5 = HIBYTE(v24) & 0xF;
  else
    v5 = v23 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(v24);
    return 0;
  }
  if ((v24 & 0x1000000000000000) == 0)
  {
    if ((v24 & 0x2000000000000000) == 0)
    {
      if ((v23 & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v23, v24);
      v7 = (uint64_t)sub_1002D6000(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_48;
    }
    v25[0] = v23;
    v25[1] = v24 & 0xFFFFFFFFFFFFFFLL;
    if (v23 == 43)
    {
      if (!v3)
        goto LABEL_61;
      if (v3 == 1 || (BYTE1(v23) - 48) > 9u)
        goto LABEL_35;
      v7 = (BYTE1(v23) - 48);
      if (v3 != 2)
      {
        if ((BYTE2(v23) - 48) > 9u)
          goto LABEL_35;
        v7 = 10 * (BYTE1(v23) - 48) + (BYTE2(v23) - 48);
        v10 = v3 - 3;
        if (v10)
        {
          v11 = (unsigned __int8 *)v25 + 3;
          while (1)
          {
            v12 = *v11 - 48;
            if (v12 > 9)
              goto LABEL_35;
            v13 = 10 * v7;
            if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
              goto LABEL_35;
            v7 = v13 + v12;
            if (__OFADD__(v13, v12))
              goto LABEL_35;
            v9 = 0;
            ++v11;
            if (!--v10)
              goto LABEL_48;
          }
        }
      }
    }
    else
    {
      if (v23 == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(v23) - 48) <= 9u)
          {
            if (v3 == 2)
            {
              v9 = 0;
              v7 = -(uint64_t)(BYTE1(v23) - 48);
              goto LABEL_48;
            }
            if ((BYTE2(v23) - 48) <= 9u)
            {
              v7 = -10 * (BYTE1(v23) - 48) - (BYTE2(v23) - 48);
              v18 = v3 - 3;
              if (!v18)
                goto LABEL_47;
              v19 = (unsigned __int8 *)v25 + 3;
              while (1)
              {
                v20 = *v19 - 48;
                if (v20 > 9)
                  break;
                v21 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  break;
                v7 = v21 - v20;
                if (__OFSUB__(v21, v20))
                  break;
                v9 = 0;
                ++v19;
                if (!--v18)
                  goto LABEL_48;
              }
            }
          }
LABEL_35:
          v7 = 0;
          v9 = 1;
          goto LABEL_48;
        }
        __break(1u);
LABEL_61:
        __break(1u);
        return result;
      }
      if (!v3 || (v23 - 48) > 9u)
        goto LABEL_35;
      v7 = (v23 - 48);
      if (v3 != 1)
      {
        if ((BYTE1(v23) - 48) > 9u)
          goto LABEL_35;
        v7 = 10 * (v23 - 48) + (BYTE1(v23) - 48);
        v14 = v3 - 2;
        if (v14)
        {
          v15 = (unsigned __int8 *)v25 + 2;
          while (1)
          {
            v16 = *v15 - 48;
            if (v16 > 9)
              goto LABEL_35;
            v17 = 10 * v7;
            if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
              goto LABEL_35;
            v7 = v17 + v16;
            if (__OFADD__(v17, v16))
              goto LABEL_35;
            v9 = 0;
            ++v15;
            if (!--v14)
              goto LABEL_48;
          }
        }
      }
    }
LABEL_47:
    v9 = 0;
    goto LABEL_48;
  }
  v7 = sub_1002D6014(v23, v24, 10);
  v9 = v22;
LABEL_48:
  swift_bridgeObjectRelease(v2);
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

uint64_t sub_10032A9AC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v8[24];
  uint64_t v9;

  sub_100007A64(a1, (uint64_t)v8, (uint64_t *)&unk_100552300);
  if (!v9)
  {
    sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100552300);
    return 2;
  }
  if ((swift_dynamicCast(&v6, v8, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 2;
  v2 = v6;
  v1 = v7;
  if (v6 == 1702195828 && v7 == 0xE400000000000000)
  {
    v3 = 0xE400000000000000;
LABEL_10:
    swift_bridgeObjectRelease(v3);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, 1702195828, 0xE400000000000000, 0) & 1) != 0)
  {
    v3 = v1;
    goto LABEL_10;
  }
  if (v2 == 0x65736C6166 && v1 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 0;
  }
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v1, 0x65736C6166, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  result = 0;
  if ((v5 & 1) == 0)
    return 2;
  return result;
}

char *sub_10032AAE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  Swift::String_optional v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;

  sub_10003F544(&qword_100564B10);
  __chkstk_darwin();
  v62 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MetricsWidgetContext(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for URLQueryItem(0);
  v7 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin();
  v59 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v61 = (char *)&v55 - v9;
  __chkstk_darwin();
  v60 = (char *)&v55 - v10;
  __chkstk_darwin();
  v12 = (char *)&v55 - v11;
  __chkstk_darwin();
  v14 = (char *)&v55 - v13;
  __chkstk_darwin();
  v16 = (char *)&v55 - v15;
  __chkstk_darwin();
  v18 = (char *)&v55 - v17;
  v19 = *(_QWORD *)(a1 + 8);
  if (v19)
  {
    v57 = v6;
    v58 = v4;
    URLQueryItem.init(name:value:)(0x5574736163646F70, 0xEB00000000646975, *(_QWORD *)a1, v19);
    v20 = (char *)sub_10027B378(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v22 = *((_QWORD *)v20 + 2);
    v21 = *((_QWORD *)v20 + 3);
    v23 = v3;
    if (v22 >= v21 >> 1)
      v20 = (char *)sub_10027B378(v21 > 1, v22 + 1, 1, (unint64_t)v20);
    *((_QWORD *)v20 + 2) = v22 + 1;
    v24 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v25 = *(_QWORD *)(v7 + 72);
    v26 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v26(&v20[v24 + v25 * v22], v18, v63);
    v27 = *(_QWORD *)(a1 + 24);
    if (v27)
    {
      URLQueryItem.init(name:value:)(0x5565646F73697065, 0xEB00000000646975, *(_QWORD *)(a1 + 16), v27);
      v29 = *((_QWORD *)v20 + 2);
      v28 = *((_QWORD *)v20 + 3);
      if (v29 >= v28 >> 1)
        v20 = (char *)sub_10027B378(v28 > 1, v29 + 1, 1, (unint64_t)v20);
      *((_QWORD *)v20 + 2) = v29 + 1;
      v26(&v20[v24 + v29 * v25], v16, v63);
    }
    v3 = v23;
    v6 = v57;
    v4 = v58;
    v30 = (uint64_t)v62;
  }
  else if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v20 = (char *)_swiftEmptyArrayStorage;
    v30 = (uint64_t)v62;
  }
  else
  {
    v64 = *(_QWORD *)(a1 + 32);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v33 = v32;
    URLQueryItem.init(name:value:)(0x4974736163646F70, 0xE900000000000064, v31, v32);
    swift_bridgeObjectRelease(v33);
    v20 = (char *)sub_10027B378(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v35 = *((_QWORD *)v20 + 2);
    v34 = *((_QWORD *)v20 + 3);
    if (v35 >= v34 >> 1)
      v20 = (char *)sub_10027B378(v34 > 1, v35 + 1, 1, (unint64_t)v20);
    *((_QWORD *)v20 + 2) = v35 + 1;
    v58 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v57 = *(char **)(v7 + 72);
    v36 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v36(&v20[v58 + (_QWORD)v57 * v35], v14, v63);
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      v30 = (uint64_t)v62;
    }
    else
    {
      v56 = v36;
      v64 = *(_QWORD *)(a1 + 48);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v39 = v38;
      URLQueryItem.init(name:value:)(0x4965646F73697065, 0xE900000000000064, v37, v38);
      swift_bridgeObjectRelease(v39);
      v41 = *((_QWORD *)v20 + 2);
      v40 = *((_QWORD *)v20 + 3);
      v30 = (uint64_t)v62;
      if (v41 >= v40 >> 1)
        v20 = (char *)sub_10027B378(v40 > 1, v41 + 1, 1, (unint64_t)v20);
      *((_QWORD *)v20 + 2) = v41 + 1;
      v56(&v20[v58 + v41 * (_QWORD)v57], v12, v63);
    }
  }
  v42 = *(unsigned __int8 *)(a1 + 57);
  if (v42 != 2)
  {
    if ((v42 & 1) != 0)
      v43 = 1702195828;
    else
      v43 = 0x65736C6166;
    if ((v42 & 1) != 0)
      v44 = 0xE400000000000000;
    else
      v44 = 0xE500000000000000;
    URLQueryItem.init(name:value:)(0x616C506563726F66, 0xE900000000000079, v43, v44);
    swift_bridgeObjectRelease(v44);
    if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      v20 = (char *)sub_10027B378(0, *((_QWORD *)v20 + 2) + 1, 1, (unint64_t)v20);
    v46 = *((_QWORD *)v20 + 2);
    v45 = *((_QWORD *)v20 + 3);
    if (v46 >= v45 >> 1)
      v20 = (char *)sub_10027B378(v45 > 1, v46 + 1, 1, (unint64_t)v20);
    *((_QWORD *)v20 + 2) = v46 + 1;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v46], v60, v63);
  }
  if ((*(_BYTE *)(a1 + 58) & 1) != 0)
  {
    URLQueryItem.init(name:value:)(0x4365646F73697065, 0xEE00747865746E6FLL, 0x6F4E6E657473696CLL, 0xEF7478654E705577);
    if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      v20 = (char *)sub_10027B378(0, *((_QWORD *)v20 + 2) + 1, 1, (unint64_t)v20);
    v48 = *((_QWORD *)v20 + 2);
    v47 = *((_QWORD *)v20 + 3);
    if (v48 >= v47 >> 1)
      v20 = (char *)sub_10027B378(v47 > 1, v48 + 1, 1, (unint64_t)v20);
    *((_QWORD *)v20 + 2) = v48 + 1;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v48], v61, v63);
  }
  v49 = type metadata accessor for PodcastsURLEpisodeParameters(0);
  sub_100007A64(a1 + *(int *)(v49 + 40), v30, &qword_100564B10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v30, 1, v3) == 1)
  {
    sub_100007A28(v30, &qword_100564B10);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v30, v3);
    v50 = MetricsWidgetContext.encodeToString()();
    if (v50.value._object)
    {
      v51 = v59;
      URLQueryItem.init(name:value:)(0x6F43746567646977, 0xED0000747865746ELL, v50.value._countAndFlagsBits, v50.value._object);
      swift_bridgeObjectRelease(v50.value._object);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
        v20 = (char *)sub_10027B378(0, *((_QWORD *)v20 + 2) + 1, 1, (unint64_t)v20);
      v53 = *((_QWORD *)v20 + 2);
      v52 = *((_QWORD *)v20 + 3);
      if (v53 >= v52 >> 1)
        v20 = (char *)sub_10027B378(v52 > 1, v53 + 1, 1, (unint64_t)v20);
      *((_QWORD *)v20 + 2) = v53 + 1;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v53], v51, v63);
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v20;
}

uint64_t sub_10032B274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100564B10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10032B2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100564B10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10032B304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR___MTWelcomeViewControllerMetricsSender_metricsController;
  v7 = *(_QWORD *)(v0 + OBJC_IVAR___MTWelcomeViewControllerMetricsSender_metricsController);
  v8 = swift_retain();
  MetricsController.observe(lifecycleEvent:)(1, v8);
  swift_release(v7);
  sub_10032B3CC();
  v9 = *(_QWORD *)(v1 + v6);
  v10 = swift_retain();
  static PageMetrics.InvocationPoint.pageEnter.getter(v10);
  MetricsController.sendEvents(for:)(v5);
  v11 = swift_release(v9);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v11);
}

double sub_10032B3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double result;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v34 = type metadata accessor for MetricsEventType(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin();
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for ScalarDictionary(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin();
  v35 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v32 - v5;
  v38 = type metadata accessor for MetricsPageFields(0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin();
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100564BF8);
  __chkstk_darwin();
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v0 + OBJC_IVAR___MTWelcomeViewControllerMetricsSender_metricsController);
  v12 = swift_retain();
  v13 = static MetricsPageID.welcomeSheet.getter(v12);
  v15 = v14;
  v16 = static MetricsPageType.welcome.getter();
  v19 = MetricsPageFields.init(pageID:pageType:pageDetails:sharedContent:customFields:)(v13, v15, v16, v17, 0, 0, 0, v18);
  ScalarDictionary.init()(v19);
  v33 = sub_10032B834((uint64_t)_swiftEmptyArrayStorage);
  v20 = sub_10003F544(&qword_100553D38);
  v21 = type metadata accessor for PageMetrics.Instruction(0);
  v22 = swift_allocObject(v20, ((*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) | 7);
  *(_OWORD *)(v22 + 16) = xmmword_1003CA220;
  v23 = *(void (**)(char *, _QWORD, uint64_t))(v1 + 104);
  v24 = v34;
  v23(v3, enum case for MetricsEventType.page(_:), v34);
  PageMetrics.Instruction.init(eventType:)(v3);
  v23(v3, enum case for MetricsEventType.impressions(_:), v24);
  v25 = PageMetrics.Instruction.init(eventType:)(v3);
  v26 = MetricsPageFields.metricsFields.getter(v25);
  v27 = v37;
  v28 = v35;
  v29 = v39;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v35, v6, v39);
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v22, v26, v28, v33);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v29);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v38);
  v30 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v10, 0, 1, v30);
  MetricsController.pageMetrics.setter(v10);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

unint64_t sub_10032B834(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(&qword_100552958);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10032B95C(v7, (uint64_t)&v16);
    v8 = v16;
    v9 = v17;
    result = sub_1002F87EC(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10013B9CC(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10032B95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100552960);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10032B9A4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[3];
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];
  _QWORD *v41;
  uint64_t *v42;

  v2 = &_swiftEmptyDictionarySingleton;
  v41 = &_swiftEmptyDictionarySingleton;
  v31 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v3) >> 6;
  v42 = &v35;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v6 << 6);
      goto LABEL_25;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v10 >= v30)
      goto LABEL_40;
    v11 = *(_QWORD *)(v31 + 8 * v10);
    v12 = v6 + 1;
    if (!v11)
    {
      v12 = v6 + 2;
      if (v6 + 2 >= v30)
        goto LABEL_40;
      v11 = *(_QWORD *)(v31 + 8 * v12);
      if (!v11)
      {
        v12 = v6 + 3;
        if (v6 + 3 >= v30)
          goto LABEL_40;
        v11 = *(_QWORD *)(v31 + 8 * v12);
        if (!v11)
        {
          v12 = v6 + 4;
          if (v6 + 4 >= v30)
            goto LABEL_40;
          v11 = *(_QWORD *)(v31 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_24:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    v6 = v12;
LABEL_25:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v16 = *v14;
    v15 = v14[1];
    sub_100007A64(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)v40, (uint64_t *)&unk_100552300);
    *(_QWORD *)&v39 = v16;
    *((_QWORD *)&v39 + 1) = v15;
    v37 = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    sub_100007A64((uint64_t)v38, (uint64_t)&v32, (uint64_t *)&unk_100552300);
    if (v33)
    {
      sub_10013B9CC(&v32, v36);
      v17 = v37;
      v34[2] = v37;
      sub_10003DC78((uint64_t)v38, (uint64_t)v42, (uint64_t *)&unk_100552300);
      sub_10013B9CC(v36, v34);
      v18 = v2[2];
      if (v2[3] <= v18)
      {
        v19 = v18 + 1;
        swift_bridgeObjectRetain(v15);
        sub_1002171F0(v19, 1);
        v2 = v41;
      }
      else
      {
        swift_bridgeObjectRetain(v15);
      }
      Hasher.init(_seed:)(&v32, v2[5]);
      String.hash(into:)(&v32, v17, *((_QWORD *)&v17 + 1));
      v20 = Hasher._finalize()();
      v21 = (char *)(v2 + 8);
      v22 = -1 << *((_BYTE *)v2 + 32);
      v23 = v20 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~v2[(v23 >> 6) + 8]) != 0)
      {
        v25 = __clz(__rbit64((-1 << v23) & ~v2[(v23 >> 6) + 8])) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)&v21[8 * v24];
        }
        while (v29 == -1);
        v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      }
      *(_QWORD *)&v21[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v25;
      *(_OWORD *)(v2[6] + 16 * v25) = v17;
      sub_10013B9CC(v34, (_OWORD *)(v2[7] + 32 * v25));
      ++v2[2];
      v7 = (__int128 *)v42;
    }
    else
    {
      swift_bridgeObjectRetain(v15);
      sub_100007A28((uint64_t)&v37, &qword_10055BCE0);
      v7 = &v32;
    }
    sub_100007A28((uint64_t)v7, (uint64_t *)&unk_100552300);
  }
  v13 = v6 + 5;
  if (v6 + 5 >= v30)
  {
LABEL_40:
    sub_10017F43C(a1);
    return;
  }
  v11 = *(_QWORD *)(v31 + 8 * v13);
  if (v11)
  {
    v12 = v6 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      goto LABEL_40;
    v11 = *(_QWORD *)(v31 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_24;
  }
LABEL_42:
  __break(1u);
}

void sub_10032BD6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[24];

  v7 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders, v13, 0, 0);
  v8 = *v7;
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v8);
    v9 = sub_100029DFC(a2, a3);
    v12 = 0u;
    if ((v10 & 1) != 0)
    {
      v12 = *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v9);
      swift_unknownObjectRetain(*(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v9));
    }
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
    v11 = v12;
  }
  else
  {
    v11 = 0uLL;
  }
  *a4 = v11;
}

id sub_10032BE38()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___preflightURLSession;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___preflightURLSession);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___preflightURLSession);
  }
  else
  {
    v4 = (char *)sub_10003A834((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_downloaderConfiguration + 120), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_downloaderConfiguration + 144));
    sub_100038220(0, *v4);
    v6 = v5;
    v7 = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:", v5);

    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

uint64_t sub_10032BEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;
  _BYTE v7[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = *(void **)(Strong + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_reachability);
    swift_unknownObjectRetain(v5);

    objc_msgSend(v5, "isReachable");
    swift_unknownObjectRelease(v5);
  }
  return 0;
}

void sub_10032BF80()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  Class isa;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD v32[3];
  _BYTE v33[16];
  id v34;

  v0 = (void *)objc_opt_self(NSFileManager);
  v1 = objc_msgSend(v0, "defaultManager");
  URL.path.getter(v1);
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  LODWORD(v3) = objc_msgSend(v1, "fileExistsAtPath:", v4);

  if ((_DWORD)v3)
  {
    v6 = static os_log_type_t.default.getter(v5);
    v7 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v31 = (id)static OS_os_log.downloads.getter(v7);
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v31, "Directory for downloaded epiosdes exists. Skipping creation.", 60, 2, _swiftEmptyArrayStorage);

  }
  else
  {
    v8 = objc_msgSend(v0, "defaultManager");
    URL._bridgeToObjectiveC()(v9);
    v11 = v10;
    v12 = sub_100139240((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for FileAttributeKey(0);
    sub_100026844(&qword_100552DA8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003C9A9C);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v12);
    v34 = 0;
    LODWORD(v12) = objc_msgSend(v8, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v11, 0, isa, &v34);

    v14 = v34;
    if ((_DWORD)v12)
    {
      v15 = static os_log_type_t.default.getter(v34);
      v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v17 = (void *)static OS_os_log.downloads.getter(v16);
      os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v17, "Created a directory for downloaded episodes.", 44, 2, _swiftEmptyArrayStorage);

    }
    else
    {
      v18 = v34;
      v19 = _convertNSErrorToError(_:)(v14);

      swift_willThrow();
      swift_getErrorValue(v19, v33, v32);
      v20 = Error.localizedDescription.getter(v32[1], v32[2]);
      v22 = v21;
      v23 = static os_log_type_t.error.getter(v20);
      v24 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v25 = (void *)static OS_os_log.downloads.getter(v24);
      v26 = sub_10003F544(&qword_1005559A0);
      v27 = swift_allocObject(v26, 112, 7);
      *(_OWORD *)(v27 + 16) = xmmword_1003CA220;
      *(_QWORD *)(v27 + 56) = &type metadata for String;
      v28 = sub_10003E198();
      *(_QWORD *)(v27 + 64) = v28;
      *(_QWORD *)(v27 + 32) = v20;
      *(_QWORD *)(v27 + 40) = v22;
      v29 = URL.path.getter(v28);
      *(_QWORD *)(v27 + 96) = &type metadata for String;
      *(_QWORD *)(v27 + 104) = v28;
      *(_QWORD *)(v27 + 72) = v29;
      *(_QWORD *)(v27 + 80) = v30;
      os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v25, "Failed to create a directory for downloaded episodes error: %{public}s, directory: %{public}s", 93, 2, v27);

      swift_bridgeObjectRelease(v27);
      sub_10033F96C();
      swift_errorRelease(v19);
    }
  }
}

void sub_10032C314(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  os_log_type_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = static os_log_type_t.debug.getter(a1);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v9 = static OS_os_log.downloads.getter();
  sub_10000A520(a1, (uint64_t)v33);
  sub_10000A520(a1, (uint64_t)v30);
  if (os_log_type_enabled(v9, v8))
  {
    v10 = (void *)0xE900000000000064;
    swift_bridgeObjectRetain_n(a3, 2);
    v11 = swift_slowAlloc(32, -1);
    v27 = swift_slowAlloc(96, -1);
    v36 = v27;
    *(_DWORD *)v11 = 136446722;
    v28 = 0x496E6F6973736553;
    v29 = 0xEB00000000203A44;
    v12 = (a4 & 1) == 0;
    if ((a4 & 1) != 0)
      v13 = 1936484398;
    else
      v13 = 0x7261646E6174732ELL;
    if (!v12)
      v10 = (void *)0xE400000000000000;
    swift_bridgeObjectRetain_n(a3, 2);
    v14._countAndFlagsBits = v13;
    v14._object = v10;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v10);
    v15._countAndFlagsBits = a2;
    v15._object = a3;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a3);
    v16 = v29;
    v28 = sub_10003D274(v28, v29, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v11 + 12) = 2082;
    v17 = v34;
    v18 = v35;
    sub_10003A834(v33, v34);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 56))(v17, v18);
    v21 = v20;
    v28 = sub_10003D274(v19, v20, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v21);
    sub_10003D380(v33);
    *(_WORD *)(v11 + 22) = 2080;
    v22 = v31;
    v23 = v32;
    sub_10003A834(v30, v31);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    v25 = 0xE900000000000067;
    v26 = 0x6E696C65636E6163;
    switch(v24)
    {
      case 0:
        v25 = 0xE700000000000000;
        v26 = 0x676E696E6E7572;
        break;
      case 1:
        v26 = 0x65646E6570737573;
        goto LABEL_13;
      case 2:
        break;
      case 3:
        v26 = 0x6574656C706D6F63;
LABEL_13:
        v25 = 0xE900000000000064;
        break;
      default:
        v25 = 0xE700000000000000;
        v26 = 0x6E776F6E6B6E75;
        break;
    }
    v28 = sub_10003D274(v26, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v25);
    sub_10003D380(v30);
    _os_log_impl((void *)&_mh_execute_header, v9, v8, "Restore task from url session: %{public}s task: %{public}s state: %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v27, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    sub_10003D380(v33);
    sub_10003D380(v30);
  }
}

uint64_t sub_10032C6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Strong;
  char *v20;
  int v21;
  NSObject *v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[32];
  uint64_t v71[5];
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  uint64_t v77;
  char v78[8];

  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for URL(0);
  v66 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for EpisodeMetadata(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for DownloadJob(0);
  v15 = __chkstk_darwin(v68);
  v65 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v57 - v17;
  a3 += 16;
  swift_beginAccess(a3, v78, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (!Strong)
    return 0;
  v20 = (char *)Strong;
  v62 = v6;
  v63 = v9;
  v21 = static os_log_type_t.default.getter(Strong);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v22 = static OS_os_log.downloads.getter();
  sub_10014FDF8(a1, (uint64_t)v18, type metadata accessor for DownloadJob);
  sub_10000A520(a2, (uint64_t)v75);
  sub_10000A520(a2, (uint64_t)v72);
  v23 = os_log_type_enabled(v22, (os_log_type_t)v21);
  v64 = v14;
  v61 = v7;
  if (v23)
  {
    v60 = v21;
    v59 = a1;
    v58 = a2;
    v57 = v11;
    v24 = swift_slowAlloc(32, -1);
    v25 = swift_slowAlloc(96, -1);
    v71[0] = v25;
    *(_DWORD *)v24 = 136446722;
    v26 = (uint64_t *)&v18[*(int *)(v68 + 20)];
    v27 = *v26;
    v28 = v26[1];
    swift_bridgeObjectRetain(v28);
    v69 = sub_10003D274(v27, v28, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v28);
    sub_10003F970((uint64_t)v18, type metadata accessor for DownloadJob);
    *(_WORD *)(v24 + 12) = 2082;
    v29 = v76;
    v30 = v77;
    sub_10003A834(v75, v76);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 56))(v29, v30);
    v33 = v32;
    v69 = sub_10003D274(v31, v32, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease(v33);
    sub_10003D380(v75);
    *(_WORD *)(v24 + 22) = 2082;
    v34 = v73;
    v35 = v74;
    sub_10003A834(v72, v73);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v34, v35);
    v37 = 0xE900000000000067;
    v38 = 0x6E696C65636E6163;
    v11 = v57;
    v14 = v64;
    v39 = v65;
    switch(v36)
    {
      case 0:
        v37 = 0xE700000000000000;
        v38 = 0x676E696E6E7572;
        break;
      case 1:
        v38 = 0x65646E6570737573;
        goto LABEL_10;
      case 2:
        break;
      case 3:
        v38 = 0x6574656C706D6F63;
LABEL_10:
        v37 = 0xE900000000000064;
        break;
      default:
        v37 = 0xE700000000000000;
        v38 = 0x6E776F6E6B6E75;
        v11 = v57;
        v14 = v64;
        v39 = v65;
        break;
    }
    v69 = sub_10003D274(v38, v37, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v24 + 24, v24 + 32);
    swift_bridgeObjectRelease(v37);
    sub_10003D380(v72);
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v60, "Restoring job: %{public}s, task: %{public}s, state: %{public}s", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy(v25, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    a2 = v58;
    a1 = v59;
  }
  else
  {

    sub_10003F970((uint64_t)v18, type metadata accessor for DownloadJob);
    sub_10003D380(v75);
    sub_10003D380(v72);
    v39 = v65;
  }
  v41 = (uint64_t *)(a1 + *(int *)(v68 + 20));
  v42 = v41[1];
  v65 = *v41;
  sub_10014FDF8(a1 + *(int *)(v68 + 36), (uint64_t)v14, type metadata accessor for EpisodeMetadata);
  sub_10014FDF8(a1, v39, type metadata accessor for DownloadJob);
  sub_10000A520(a2, (uint64_t)v75);
  v43 = *(_QWORD *)&v20[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_systemEpisodeStorage];
  v68 = *(_QWORD *)&v20[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_systemEpisodeStorage + 8];
  v44 = v39;
  v45 = *(_QWORD *)&v20[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_jobStorage];
  v46 = *(_QWORD *)&v20[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_jobStorage + 8];
  sub_100007A64((uint64_t)&v20[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_mediaLibraryClient], (uint64_t)v72, &qword_1005536B0);
  sub_10000A520((uint64_t)&v20[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_dsidProvider], (uint64_t)v71);
  sub_10000A520((uint64_t)&v20[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_artworkStorage], (uint64_t)&v69);
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v11, &v20[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_assetsFolder], v67);
  v47 = (uint64_t)v11;
  v48 = qword_100551FB0;
  swift_bridgeObjectRetain(v42);
  swift_unknownObjectRetain(v43);
  swift_unknownObjectRetain(v45);
  v49 = v20;
  if (v48 != -1)
    swift_once(&qword_100551FB0, sub_10013E3EC);
  v50 = v62;
  v51 = sub_100047DA4(v62, (uint64_t)qword_100572D18);
  v52 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v63, v51, v50);
  v53 = sub_100038DEC((uint64_t)v71, v71[3]);
  __chkstk_darwin(v53);
  (*(void (**)(void))(v54 + 16))();
  *((_QWORD *)&v56 + 1) = v45;
  *(_QWORD *)&v56 = v68;
  v40 = sub_10033F048(v65, v42, (uint64_t)v64, v44, v75, 0, 0, v43, v56, v46, (uint64_t)v72, &v69, v47, v49, v52, 1u);
  sub_10003D380(v71);

  return v40;
}

void sub_10032CE1C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  id v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint8_t *v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  os_log_type_t v56;
  NSObject *v57;
  uint8_t *v58;
  id v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[24];
  uint64_t v79;

  v4 = v3;
  v71 = a3;
  v7 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *a1;
  if (!v10)
  {
LABEL_34:
    v53 = 0;
    goto LABEL_35;
  }
  v68 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage;
  v69 = a2;
  v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage);
  v66 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v12 = *(void **)(v10 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  swift_retain(v11);
  v13 = v12;
  swift_retain(v10);
  v70 = v10;
  OS_dispatch_queue.sync<A>(execute:)(v9, sub_10033F940, v10, v7);
  v14 = v4;

  v15 = (char *)v9 + *(int *)(v7 + 20);
  v16 = *((_QWORD *)v15 + 1);
  v75 = *(uint8_t **)v15;
  swift_bridgeObjectRetain(v16);
  v74 = v9;
  sub_10003F970((uint64_t)v9, type metadata accessor for DownloadJob);
  objc_msgSend(*(id *)(v11 + 16), "lock");
  swift_beginAccess(v11 + 24, v78, 0, 0);
  v67 = v11;
  v17 = *(_QWORD *)(v11 + 24);
  if ((unint64_t)v17 >> 62)
    goto LABEL_21;
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v11 + 24), 2);
  swift_bridgeObjectRetain(v16);
  v19 = v16;
  while (v18)
  {
    v76 = v14;
    v72 = v19;
    v73 = v17 & 0xC000000000000001;
    v20 = 4;
    while (1)
    {
      v21 = v20 - 4;
      if (!v73)
        break;
      v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, v17);
      v14 = v20 - 3;
      if (__OFADD__(v21, 1))
        goto LABEL_20;
LABEL_10:
      v22 = *(id *)(v16 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
      v23 = v74;
      v24 = v16;
      v25 = v76;
      OS_dispatch_queue.sync<A>(execute:)(v74, sub_10033F940, v16, v7);
      v76 = v25;

      v26 = v7;
      v27 = (char *)v23 + *(int *)(v7 + 20);
      v29 = *(uint8_t **)v27;
      v28 = *((_QWORD *)v27 + 1);
      swift_bridgeObjectRetain(v28);
      v30 = (uint64_t)v23;
      v19 = v72;
      sub_10003F970(v30, type metadata accessor for DownloadJob);
      if (v29 == v75 && v28 == v19)
      {
        swift_bridgeObjectRelease(v17);
        v33 = v19;
LABEL_19:
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(v33);
        v7 = v26;
        v18 = v24;
        goto LABEL_26;
      }
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v28, v75, v19, 0);
      swift_bridgeObjectRelease(v28);
      if ((v32 & 1) != 0)
      {
        v33 = v17;
        goto LABEL_19;
      }
      swift_release(v24);
      ++v20;
      v7 = v26;
      if (v14 == v18)
      {
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(v17);
        v18 = 0;
        goto LABEL_26;
      }
    }
    v16 = *(_QWORD *)(v17 + 8 * v20);
    swift_retain(v16);
    v14 = v20 - 3;
    if (!__OFADD__(v21, 1))
      goto LABEL_10;
LABEL_20:
    __break(1u);
LABEL_21:
    if (v17 < 0)
      v34 = v17;
    else
      v34 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v17, 2);
    swift_bridgeObjectRetain(v16);
    v18 = _CocoaArrayWrapper.endIndex.getter(v34);
    v19 = v16;
  }
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v17);
LABEL_26:
  swift_bridgeObjectRelease(v17);
  v35 = v67;
  objc_msgSend(*(id *)(v67 + 16), "unlock");
  swift_release(v35);
  v36 = swift_bridgeObjectRelease(v19);
  if (v18)
  {
    v37 = static os_log_type_t.default.getter(v36);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v38 = static OS_os_log.downloads.getter();
    v39 = v37;
    if (os_log_type_enabled(v38, v37))
    {
      swift_retain(v18);
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v76 = v41;
      v42 = v7;
      v75 = v40;
      *(_DWORD *)v40 = 136446210;
      v43 = v40 + 12;
      v79 = v41;
      v73 = (unint64_t)(v40 + 4);
      v44 = *(id *)(v18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
      v45 = v74;
      OS_dispatch_queue.sync<A>(execute:)(v74, sub_10033F940, v18, v42);

      v46 = (_QWORD *)((char *)v45 + *(int *)(v42 + 20));
      v47 = *v46;
      v48 = v46[1];
      swift_bridgeObjectRetain(v48);
      sub_10003F970((uint64_t)v45, type metadata accessor for DownloadJob);
      v77 = sub_10003D274(v47, v48, &v79);
      v49 = v43;
      v7 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v73, v49);
      swift_release(v18);
      swift_bridgeObjectRelease(v48);
      v50 = v75;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Existing job pipeline with episode %{public}s", v75, 0xCu);
      v51 = v76;
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      swift_release(v18);
    }
    else
    {
      swift_release(v18);

    }
  }
  v52 = *(_QWORD *)(v69 + v68);
  swift_retain(v52);
  v53 = v70;
  v54 = sub_1003798A0(v70);
  v55 = swift_release(v52);
  if (!v54)
  {
    v56 = static os_log_type_t.error.getter(v55);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v57 = static OS_os_log.downloads.getter();
    if (os_log_type_enabled(v57, v56))
    {
      swift_retain(v53);
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v76 = swift_slowAlloc(32, -1);
      v79 = v76;
      *(_DWORD *)v58 = 136446210;
      v75 = v58 + 4;
      v59 = *(id *)(v53 + v66);
      v60 = v74;
      OS_dispatch_queue.sync<A>(execute:)(v74, sub_10033F940, v53, v7);

      v61 = (_QWORD *)((char *)v60 + *(int *)(v7 + 20));
      v62 = *v61;
      v63 = v61[1];
      swift_bridgeObjectRetain(v63);
      sub_10003F970((uint64_t)v60, type metadata accessor for DownloadJob);
      v77 = sub_10003D274(v62, v63, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v75, v58 + 12);
      swift_release(v53);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v57, v56, "Failed to add restored pipeline to memory storage for episode %{public}s", v58, 0xCu);
      v64 = v76;
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    swift_release(v53);

    goto LABEL_34;
  }
LABEL_35:
  *v71 = v53;
}

void sub_10032D4DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char *v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  void *object;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Strong;
  void *v36;
  uint64_t v37;
  os_log_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43[2];
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;

  v5 = type metadata accessor for DownloadJob(0);
  v6 = __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *a1;
  v10 = static os_log_type_t.default.getter(v6);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v11 = static OS_os_log.downloads.getter();
  swift_retain_n(v9, 3);
  if (os_log_type_enabled(v11, v10))
  {
    swift_retain(v9);
    v12 = swift_slowAlloc(32, -1);
    v40 = swift_slowAlloc(64, -1);
    v47 = v40;
    *(_DWORD *)v12 = 136446722;
    v41 = a2;
    v39 = v10;
    v13 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
    v14 = *(id *)(v9 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    v38 = v11;
    v15 = v14;
    OS_dispatch_queue.sync<A>(execute:)(v8, sub_10033F940, v9, v5);

    v16 = (_QWORD *)((char *)v8 + *(int *)(v5 + 20));
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain(v18);
    sub_10003F970((uint64_t)v8, type metadata accessor for DownloadJob);
    v42 = sub_10003D274(v17, v18, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v12 + 12) = 2082;
    v19 = *(id *)(v9 + v13);
    OS_dispatch_queue.sync<A>(execute:)(v8, sub_10033F940, v9, v5);
    v37 = v2;

    v20 = (char *)v8 + *(int *)(v5 + 32);
    v22 = *(_QWORD *)v20;
    v21 = (void *)*((_QWORD *)v20 + 1);
    v23 = v20[16];
    swift_bridgeObjectRetain(v21);
    sub_10003F970((uint64_t)v8, type metadata accessor for DownloadJob);
    v42 = 0x496E6F6973736553;
    v43[0] = 0xEB00000000203A44;
    if (v23)
      v24 = 1936484398;
    else
      v24 = 0x7261646E6174732ELL;
    if (v23)
      v25 = (void *)0xE400000000000000;
    else
      v25 = (void *)0xE900000000000064;
    v46._countAndFlagsBits = v22;
    v46._object = v21;
    swift_bridgeObjectRetain(v21);
    v26._countAndFlagsBits = v24;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(v25);
    object = v46._object;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(object);
    v28 = v43[0];
    v42 = sub_10003D274(v42, v43[0], &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v12 + 14, v12 + 22);
    swift_release_n(v9, 2);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v12 + 22) = 2050;
    v29 = *(id *)(v9 + v13);
    v30 = sub_10003F544(&qword_100564DA0);
    OS_dispatch_queue.sync<A>(execute:)(&v42, sub_100340978, v9, v30);

    v31 = v44;
    v32 = v45;
    sub_10003A834(&v42, v44);
    v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 24))(v31, v32);
    sub_10003D380(&v42);
    swift_release(v9);
    v42 = v33;
    a2 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v12 + 24, v12 + 32);
    swift_release(v9);
    v11 = v38;
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v39, "Restored job for episode: %{public}s, session: %{public}s, task: %{public}ld", (uint8_t *)v12, 0x20u);
    v34 = v40;
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_release_n(v9, 3);
  }

  sub_100140EAC();
  swift_beginAccess(a2, &v42, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v36 = (void *)Strong;
    sub_100333538(v9, (uint64_t)&unk_1004C3DB0, (uint64_t)sub_100340C98, (uint64_t)&unk_1004C3DC8);

  }
}

uint64_t sub_10032D934(uint64_t a1)
{
  return sub_100333538(a1, (uint64_t)&unk_1004C3DB0, (uint64_t)sub_100340C98, (uint64_t)&unk_1004C3DC8);
}

void sub_10032D950(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5)
{
  Swift::String v10;
  void *object;
  unint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  _BYTE v33[8];
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[3];
  _BYTE v38[8];
  uint64_t v39;
  unint64_t v40;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(0xE000000000000000);
  v39 = 0xD000000000000021;
  v40 = 0x800000010043E710;
  swift_getErrorValue(a1, v38, v37);
  v10._countAndFlagsBits = Error.localizedDescription.getter(v37[1], v37[2]);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12 = v40;
  sub_10033F96C();
  v13 = swift_bridgeObjectRelease(v12);
  v14 = static os_log_type_t.error.getter(v13);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v15 = static OS_os_log.downloads.getter();
  if (os_log_type_enabled(v15, v14))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(a1);
    v16 = a2;
    v17 = swift_slowAlloc(32, -1);
    v31 = swift_slowAlloc(96, -1);
    v36 = v31;
    *(_DWORD *)v17 = 136446722;
    v39 = 0x496E6F6973736553;
    v40 = 0xEB00000000203A44;
    v18 = (a4 & 1) == 0;
    if ((a4 & 1) != 0)
      v19 = 1936484398;
    else
      v19 = 0x7261646E6174732ELL;
    if (v18)
      v20 = (void *)0xE900000000000064;
    else
      v20 = (void *)0xE400000000000000;
    v34 = v16;
    v35 = a3;
    swift_bridgeObjectRetain_n(a3, 2);
    v21._countAndFlagsBits = v19;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v20);
    v22._countAndFlagsBits = v16;
    v22._object = a3;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a3);
    v23 = v40;
    v39 = sub_10003D274(v39, v40, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v17 + 12) = 2082;
    swift_bridgeObjectRetain(a5);
    v24 = sub_10003F544(&qword_100564DA0);
    v25 = Array.description.getter(a5, v24);
    v27 = v26;
    swift_bridgeObjectRelease(a5);
    v39 = sub_10003D274(v25, v27, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v17 + 22) = 2082;
    swift_getErrorValue(a1, v33, v32);
    v28 = Error.localizedDescription.getter(v32[1], v32[2]);
    v30 = v29;
    v39 = sub_10003D274(v28, v29, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease(v30);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v15, v14, "Failed to restore download jobs for session: %{public}s tasks: %{public}s, error: %{public}s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v31, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

}

double sub_10032DCD8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double result;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  _BYTE v16[48];
  _QWORD v17[3];
  uint64_t v18;
  __int128 v19[2];
  uint64_t v20;
  char v21;

  v4 = v3;
  type metadata accessor for EpisodeMetadata(0);
  __chkstk_darwin();
  sub_10003F544(&qword_1005631A8);
  __chkstk_darwin();
  if (objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_reachability), "isReachable"))
  {
    v7 = (char *)&loc_10032DDEC
       + *((int *)qword_10032E460
         + *(unsigned __int8 *)sub_10003A834((_QWORD *)(v3+ OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_downloaderConfiguration), *(_QWORD *)(v3+ OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_downloaderConfiguration+ 24)));
    __asm { BR              X11 }
  }
  v8 = static os_log_type_t.default.getter();
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v10 = (void *)static OS_os_log.downloads.getter(v9);
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v10, "Drop user initiated episode download. Network is not reachable.", 63, 2, _swiftEmptyArrayStorage);

  sub_100007A64(v4 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, (uint64_t)v17, &qword_1005540B8);
  if (v18)
  {
    sub_10003A834(v17, v18);
    memset(v19, 0, sizeof(v19));
    v20 = 0;
    v21 = 2;
    sub_1001B109C(v19);
    sub_10003D380(v17);
  }
  else
  {
    sub_100007A28((uint64_t)v17, &qword_1005540B8);
  }
  if (a3)
  {
    v12 = sub_10003F544((uint64_t *)&unk_1005588B0);
    inited = swift_initStackObject(v12, v16);
    *(_OWORD *)(inited + 16) = xmmword_1003CA200;
    *(_QWORD *)(inited + 32) = a1;
    *(_QWORD *)(inited + 40) = a2;
    swift_bridgeObjectRetain(a2);
    v14 = sub_10002B070(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, &type metadata for String);
    a3(v14);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v14).n128_u64[0];
  }
  return result;
}

uint64_t sub_10032E470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a5;
  v29 = a7;
  v27 = a3;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_reachability), "isReachableViaWifi");
  result = 0;
  if ((v17 & 1) == 0)
  {
    if (*(_QWORD *)(a2 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_finalCheckBeforStart))
    {
      type metadata accessor for DownloadableURLOptions(0, 0);
      v26 = a8;
      v19 = type metadata accessor for EpisodeMetadata(0);
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1 + *(int *)(v19 + 44), v13);
      v20 = *(unsigned __int8 *)(a1 + 40);
      v21 = swift_retain();
      v22 = DownloadableURLOptions.__allocating_init(_:nonAppInitiated:)(v16, v20, v21);
      swift_bridgeObjectRetain(a6);
      swift_bridgeObjectRetain(a4);
      v23 = sub_10032BE38();
      v24 = type metadata accessor for DownloadPreflightValidator();
      result = swift_allocObject(v24, 97, 7);
      *(_QWORD *)(result + 16) = v27;
      *(_QWORD *)(result + 24) = a4;
      *(_QWORD *)(result + 32) = v28;
      *(_QWORD *)(result + 40) = a6;
      *(_QWORD *)(result + 48) = v23;
      *(_QWORD *)(result + 56) = 0;
      v25 = v29;
      *(_QWORD *)(result + 64) = 0x4024000000000000;
      *(_QWORD *)(result + 72) = v25;
      *(_BYTE *)(result + 96) = 1;
      *(_QWORD *)(result + 80) = v26;
      *(_QWORD *)(result + 88) = v22;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_10032E61C(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = (_QWORD *)(v3 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_downloaderConfiguration);
    if ((a2 & 1) != 0)
    {
      v7 = (char *)&loc_10032E6AC + 4 * byte_1003D6068[*(unsigned __int8 *)sub_10003A834(v6 + 10, v6[13])];
      __asm { BR              X11 }
    }
    v11 = (char *)&loc_10032E764 + 4 * byte_1003D6064[*(unsigned __int8 *)sub_10003A834(v6 + 5, v6[8])];
    __asm { BR              X11 }
  }
  v8 = static os_log_type_t.error.getter(a1);
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v10 = (void *)static OS_os_log.downloads.getter(v9);
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v10, "No uuids provided for auto download. Nothing to do.", 51, 2, _swiftEmptyArrayStorage);

  if (a3)
    a3(a1);
}

void sub_10032EA0C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  char *v10;
  os_log_type_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *BatchEpisodeMetadataOperation;
  char *v34;
  char *v35;
  double v36;
  uint64_t v37;
  objc_class *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  objc_class *v43;
  char *v44;
  char *v45;
  void (**v46)(uint64_t *@<X0>, uint64_t@<X8>);
  objc_class *started;
  char *v48;
  uint64_t v49;
  id v50;
  char *v51;
  char *v52;
  uint64_t *v53;
  void (*v54)(uint64_t *@<X0>, uint64_t@<X8>);
  objc_class *v55;
  _QWORD *v56;
  char *v57;
  void (**v58)(uint64_t *@<X0>, uint64_t@<X8>);
  id v59;
  uint64_t v60;
  uint64_t (**v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t ObjectType;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v78;
  __n128 v79;
  uint64_t v80;
  objc_class *v81;
  uint64_t v82;
  void *v83;
  uint64_t (**v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v101;
  char *v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  objc_class *v106;
  char *v107;
  uint64_t v108;
  void *v109;
  uint64_t (**v110)(uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  objc_class *v130;
  char *v131;
  uint64_t v132;
  uint64_t (**v133)(uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(void (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v149;
  __n128 v150;
  uint64_t v151;
  objc_class *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void (**v156)(uint64_t);
  uint64_t v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  Class isa;
  char *v169;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char v174;
  char v175;
  uint64_t v176;
  id v178;
  char *v179;
  char *v180;
  id v182;
  uint64_t v183;
  void *v185;
  char v187;
  char *v188;
  uint64_t v189;
  objc_super v190;
  objc_super v191;
  objc_super v192;
  objc_super v193;
  uint64_t v194;
  objc_super v195;
  objc_super v196;
  objc_super v197;
  objc_super v198;
  objc_super v199;

  v10 = v9;
  v14 = static os_log_type_t.default.getter();
  v15 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v16 = static OS_os_log.downloads.getter(v15);
  swift_bridgeObjectRetain(a1);
  v175 = a5;
  if (os_log_type_enabled(v16, v14))
  {
    swift_bridgeObjectRetain(a1);
    v17 = swift_slowAlloc(32, -1);
    v194 = swift_slowAlloc(64, -1);
    v187 = a4;
    v18 = v194;
    *(_DWORD *)v17 = 134218498;
    v189 = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2080;
    if ((a5 & 1) != 0)
      v19 = 7562617;
    else
      v19 = 28526;
    if ((a5 & 1) != 0)
      v20 = 0xE300000000000000;
    else
      v20 = 0xE200000000000000;
    v189 = sub_10003D274(v19, v20, &v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v17 + 22) = 2082;
    swift_bridgeObjectRetain(a1);
    v22 = Set.description.getter(v21, &type metadata for String, &protocol witness table for String);
    v23 = v10;
    v25 = v24;
    swift_bridgeObjectRelease(a1);
    v189 = sub_10003D274(v22, v25, &v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease_n(a1, 2);
    v26 = v25;
    v10 = v23;
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v16, v14, "About to start %ld autodownloads, cellular allowed: %s. %{public}s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    v27 = v18;
    a4 = v187;
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(a1);
  }

  v28 = &OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userEpisodeStorage;
  v29 = a4 & 1;
  if ((a4 & 1) == 0)
    v28 = &OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_systemEpisodeStorage;
  v30 = &v10[*v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  BatchEpisodeMetadataOperation = (objc_class *)type metadata accessor for FetchBatchEpisodeMetadataOperation();
  v34 = (char *)objc_allocWithZone(BatchEpisodeMetadataOperation);
  v35 = &v34[OBJC_IVAR____TtC8Podcasts34FetchBatchEpisodeMetadataOperation_episodeStorage];
  *(_QWORD *)v35 = v32;
  *((_QWORD *)v35 + 1) = v31;
  *(_QWORD *)&v34[OBJC_IVAR____TtC8Podcasts34FetchBatchEpisodeMetadataOperation_uuids] = a1;
  v199.receiver = v34;
  v199.super_class = BatchEpisodeMetadataOperation;
  swift_unknownObjectRetain_n(v32, 2);
  *(_QWORD *)&v36 = swift_bridgeObjectRetain(a1).n128_u64[0];
  v188 = (char *)objc_msgSendSuper2(&v199, "init", v36);
  v37 = swift_allocObject(&unk_1004C3A40, 17, 7);
  v174 = v29;
  *(_BYTE *)(v37 + 16) = v29;
  v38 = (objc_class *)sub_10003F544(&qword_100564DA8);
  v39 = (char *)objc_allocWithZone(v38);
  v40 = &v39[*(_QWORD *)((swift_isaMask & *(_QWORD *)v39) + 0x180)];
  *(_QWORD *)v40 = 0;
  v40[8] = 2;
  v41 = &v39[*(_QWORD *)((swift_isaMask & *(_QWORD *)v39) + 0x188)];
  *(_QWORD *)v41 = sub_1003409CC;
  *((_QWORD *)v41 + 1) = v37;
  v198.receiver = v39;
  v198.super_class = v38;
  v169 = (char *)objc_msgSendSuper2(&v198, "init");
  v42 = swift_allocObject(&unk_1004C3A68, 64, 7);
  *(_QWORD *)(v42 + 16) = v10;
  *(_QWORD *)(v42 + 24) = v32;
  *(_QWORD *)(v42 + 32) = v31;
  *(_BYTE *)(v42 + 40) = v175 & 1;
  *(_QWORD *)(v42 + 48) = a2;
  *(_QWORD *)(v42 + 56) = a3;
  v43 = (objc_class *)sub_10003F544(&qword_100564DB0);
  v44 = (char *)objc_allocWithZone(v43);
  v45 = &v44[*(_QWORD *)((swift_isaMask & *(_QWORD *)v44) + 0x180)];
  *(_QWORD *)v45 = 0;
  v45[8] = 2;
  v46 = (void (**)(uint64_t *@<X0>, uint64_t@<X8>))&v44[*(_QWORD *)((swift_isaMask & *(_QWORD *)v44) + 0x188)];
  *v46 = sub_100340A18;
  v46[1] = (void (*)(uint64_t *@<X0>, uint64_t@<X8>))v42;
  v197.receiver = v44;
  v197.super_class = v43;
  v176 = v32;
  swift_unknownObjectRetain(v32);
  v173 = v10;
  swift_unknownObjectRetain(a2);
  v178 = objc_msgSendSuper2(&v197, "init");
  started = (objc_class *)type metadata accessor for StartJobPipelinesOperation();
  v48 = (char *)objc_allocWithZone(started);
  v49 = OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_serialQueue;
  v50 = objc_allocWithZone((Class)NSOperationQueue);
  sub_10002CA20(a6, a7);
  v51 = v48;
  *(_QWORD *)&v48[v49] = objc_msgSend(v50, "init");
  v52 = &v51[OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input];
  *(_QWORD *)v52 = 0;
  v52[8] = 2;
  v53 = (uint64_t *)&v51[OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_beforeTakeOff];
  *v53 = a6;
  v53[1] = a7;
  sub_10002CA20(a6, a7);

  v196.receiver = v51;
  v196.super_class = started;
  v182 = objc_msgSendSuper2(&v196, "init");
  sub_10002CA30(a6, a7);
  v54 = (void (*)(uint64_t *@<X0>, uint64_t@<X8>))swift_allocObject(&unk_1004C3A90, 40, 7);
  *((_QWORD *)v54 + 2) = a1;
  *((_QWORD *)v54 + 3) = a8;
  *((_QWORD *)v54 + 4) = a9;
  v55 = (objc_class *)sub_10003F544(&qword_100564DB8);
  v56 = objc_allocWithZone(v55);
  v57 = (char *)v56 + *(_QWORD *)((swift_isaMask & *v56) + 0x180);
  *(_QWORD *)v57 = 0;
  v57[8] = 2;
  v58 = (void (**)(uint64_t *@<X0>, uint64_t@<X8>))((char *)v56 + *(_QWORD *)((swift_isaMask & *v56) + 0x188));
  *v58 = sub_100340A70;
  v58[1] = v54;
  swift_bridgeObjectRetain(a1);
  sub_10002CA20(a8, a9);
  v195.receiver = v56;
  v195.super_class = v55;
  v59 = objc_msgSendSuper2(&v195, "init");
  v60 = swift_allocObject(&unk_1004C3AB8, 24, 7);
  swift_unknownObjectWeakInit(v60 + 16, v169);
  v61 = (uint64_t (**)(uint64_t))&v188[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v62 = *(_QWORD *)&v188[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v63 = *(_QWORD *)&v188[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v61 = sub_100340A8C;
  v61[1] = (uint64_t (*)(uint64_t))v60;
  sub_10002CA30(v62, v63);
  v64 = objc_opt_self(NSOperation);
  v65 = swift_dynamicCastObjCClass(v188, v64);
  v185 = v59;
  if (v65)
  {
    v67 = v65;
    ObjectType = swift_getObjectType(v65, v66);
    v69 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
    v71 = v69 ? v69 : 0;
    v72 = v69 ? v67 : 0;
    if (v72)
    {
      v73 = swift_getObjectType(v72, v70);
      v74 = swift_allocObject(&unk_1004C3B80, 32, 7);
      *(_QWORD *)(v74 + 24) = v71;
      swift_unknownObjectWeakInit(v74 + 16, v72);
      v75 = swift_allocObject(&unk_1004C3BA8, 24, 7);
      swift_unknownObjectWeakInit(v75 + 16, v169);
      v76 = swift_allocObject(&unk_1004C3C48, 32, 7);
      *(_QWORD *)(v76 + 16) = v75;
      *(_QWORD *)(v76 + 24) = v74;
      v77 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v71 + 72);
      v78 = (id)swift_unknownObjectRetain(v188);
      swift_retain();
      v79 = swift_retain();
      v80 = v73;
      v59 = v185;
      v77(sub_1000456D4, v76, v80, v71, v79);
      swift_release(v74);
      swift_release(v75);
      swift_release(v76);
      v81 = (objc_class *)type metadata accessor for BaseOperation();
      v190.receiver = v169;
      v190.super_class = v81;
      objc_msgSendSuper2(&v190, "addDependency:", v67);

    }
  }
  v82 = swift_allocObject(&unk_1004C3AE0, 24, 7);
  v83 = v178;
  swift_unknownObjectWeakInit(v82 + 16, v178);
  v84 = (uint64_t (**)(uint64_t))&v169[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v85 = *(_QWORD *)&v169[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v86 = *(_QWORD *)&v169[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v84 = sub_100340A8C;
  v84[1] = (uint64_t (*)(uint64_t))v82;
  v87 = v169;
  sub_10002CA30(v85, v86);
  v88 = objc_opt_self(NSOperation);
  v89 = swift_dynamicCastObjCClass(v87, v88);
  if (v89)
  {
    v91 = v89;
    v92 = swift_getObjectType(v89, v90);
    v93 = swift_conformsToProtocol2(v92, &protocol descriptor for PodcastsOperation);
    v95 = v93 ? v93 : 0;
    v96 = v93 ? v91 : 0;
    if (v96)
    {
      v171 = swift_getObjectType(v96, v94);
      v97 = swift_allocObject(&unk_1004C3B80, 32, 7);
      *(_QWORD *)(v97 + 24) = v95;
      swift_unknownObjectWeakInit(v97 + 16, v96);
      v98 = swift_allocObject(&unk_1004C3BA8, 24, 7);
      swift_unknownObjectWeakInit(v98 + 16, v178);
      v99 = swift_allocObject(&unk_1004C3C20, 32, 7);
      *(_QWORD *)(v99 + 16) = v98;
      *(_QWORD *)(v99 + 24) = v97;
      v100 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v95 + 72);
      swift_unknownObjectRetain(v87);
      v101 = v87;
      v102 = v87;
      swift_retain();
      v103 = swift_retain();
      v100(sub_1000456D4, v99, v171, v95, v103);
      v104 = v97;
      v59 = v185;
      swift_release(v104);
      swift_release(v98);
      v105 = v99;
      v83 = v178;
      swift_release(v105);
      v106 = (objc_class *)type metadata accessor for BaseOperation();
      v191.receiver = v178;
      v191.super_class = v106;
      objc_msgSendSuper2(&v191, "addDependency:", v91);

      v87 = v101;
    }
  }
  v107 = v83;

  v108 = swift_allocObject(&unk_1004C3B08, 24, 7);
  v109 = v182;
  swift_unknownObjectWeakInit(v108 + 16, v182);
  v110 = (uint64_t (**)(uint64_t))&v107[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v111 = *(_QWORD *)&v107[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v112 = *(_QWORD *)&v107[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v110 = sub_100340ABC;
  v110[1] = (uint64_t (*)(uint64_t))v108;
  sub_10002CA30(v111, v112);
  v113 = objc_opt_self(NSOperation);
  v114 = swift_dynamicCastObjCClass(v107, v113);
  if (v114)
  {
    v116 = v114;
    v117 = swift_getObjectType(v114, v115);
    v118 = swift_conformsToProtocol2(v117, &protocol descriptor for PodcastsOperation);
    v120 = v118 ? v118 : 0;
    v121 = v118 ? v116 : 0;
    if (v121)
    {
      v172 = swift_getObjectType(v121, v119);
      v122 = swift_allocObject(&unk_1004C3B80, 32, 7);
      *(_QWORD *)(v122 + 24) = v120;
      swift_unknownObjectWeakInit(v122 + 16, v121);
      v123 = swift_allocObject(&unk_1004C3BA8, 24, 7);
      swift_unknownObjectWeakInit(v123 + 16, v182);
      v124 = swift_allocObject(&unk_1004C3BF8, 32, 7);
      *(_QWORD *)(v124 + 16) = v123;
      *(_QWORD *)(v124 + 24) = v122;
      v125 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v120 + 72);
      swift_unknownObjectRetain(v107);
      v179 = v87;
      v126 = v107;
      swift_retain();
      v127 = swift_retain();
      v125(sub_1000456D4, v124, v172, v120, v127);
      v128 = v122;
      v59 = v185;
      swift_release(v128);
      swift_release(v123);
      v129 = v124;
      v109 = v182;
      swift_release(v129);
      v130 = (objc_class *)type metadata accessor for BaseOperation();
      v192.receiver = v182;
      v192.super_class = v130;
      objc_msgSendSuper2(&v192, "addDependency:", v116);

      v87 = v179;
    }
  }
  v131 = v109;

  v132 = swift_allocObject(&unk_1004C3B30, 24, 7);
  swift_unknownObjectWeakInit(v132 + 16, v59);
  v133 = (uint64_t (**)(uint64_t))&v131[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v134 = *(_QWORD *)&v131[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v135 = *(_QWORD *)&v131[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v133 = sub_100340AF4;
  v133[1] = (uint64_t (*)(uint64_t))v132;
  sub_10002CA30(v134, v135);
  v136 = objc_opt_self(NSOperation);
  v137 = swift_dynamicCastObjCClass(v131, v136);
  if (v137)
  {
    v139 = v137;
    v140 = swift_getObjectType(v137, v138);
    v141 = swift_conformsToProtocol2(v140, &protocol descriptor for PodcastsOperation);
    if (v141)
      v143 = v141;
    else
      v143 = 0;
    if (v141)
      v144 = v139;
    else
      v144 = 0;
    if (v144)
    {
      v183 = swift_getObjectType(v144, v142);
      v180 = v87;
      v145 = swift_allocObject(&unk_1004C3B80, 32, 7);
      *(_QWORD *)(v145 + 24) = v143;
      swift_unknownObjectWeakInit(v145 + 16, v144);
      v146 = swift_allocObject(&unk_1004C3BA8, 24, 7);
      swift_unknownObjectWeakInit(v146 + 16, v59);
      v147 = swift_allocObject(&unk_1004C3BD0, 32, 7);
      *(_QWORD *)(v147 + 16) = v146;
      *(_QWORD *)(v147 + 24) = v145;
      v148 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t, __n128))(v143 + 72);
      swift_unknownObjectRetain(v131);
      v149 = v131;
      swift_retain();
      v150 = swift_retain();
      v148(sub_1000450E8, v147, v183, v143, v150);
      v59 = v185;
      v151 = v145;
      v87 = v180;
      swift_release(v151);
      swift_release(v146);
      swift_release(v147);
      v152 = (objc_class *)type metadata accessor for BaseOperation();
      v193.receiver = v185;
      v193.super_class = v152;
      objc_msgSendSuper2(&v193, "addDependency:", v139);

    }
  }
  v153 = (char *)v59;

  v154 = swift_allocObject(&unk_1004C3648, 24, 7);
  swift_unknownObjectWeakInit(v154 + 16, v173);
  v155 = swift_allocObject(&unk_1004C3B58, 48, 7);
  *(_QWORD *)(v155 + 16) = a8;
  *(_QWORD *)(v155 + 24) = a9;
  *(_BYTE *)(v155 + 32) = v174;
  *(_QWORD *)(v155 + 40) = v154;
  v156 = (void (**)(uint64_t))&v153[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v157 = *(_QWORD *)&v153[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v158 = *(_QWORD *)&v153[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
  *v156 = sub_100340B58;
  v156[1] = (void (*)(uint64_t))v155;
  sub_10002CA20(a8, a9);
  sub_10002CA30(v157, v158);

  v159 = sub_10002BE98();
  v160 = sub_10003F544((uint64_t *)&unk_100553780);
  v161 = swift_allocObject(v160, 72, 7);
  *(_OWORD *)(v161 + 16) = xmmword_1003CFB70;
  *(_QWORD *)(v161 + 32) = v188;
  *(_QWORD *)(v161 + 40) = v87;
  *(_QWORD *)(v161 + 48) = v107;
  *(_QWORD *)(v161 + 56) = v131;
  *(_QWORD *)(v161 + 64) = v153;
  v194 = v161;
  specialized Array._endMutation()(v161);
  v162 = v194;
  sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
  v163 = v188;
  v164 = v87;
  v165 = v107;
  v166 = v131;
  v167 = v153;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v159, "addOperations:waitUntilFinished:", isa, 0, swift_bridgeObjectRelease(v162).n128_f64[0]);
  swift_unknownObjectRelease(v176);

}

void sub_10032F748(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  int64_t v18;
  uint64_t v19;
  Class isa;
  const __CFString *v21;
  unint64_t v22;
  BOOL v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  NSObject *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  NSDictionary v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  char *v97;
  __n128 v98;
  const __CFString *v99;
  const __CFString *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  int64_t v104;
  uint64_t *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD v126[2];
  __int128 v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;

  v120 = a2;
  v96 = a3;
  sub_10003F544(&qword_1005522F0);
  __chkstk_darwin();
  v119 = (uint64_t)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EpisodeMetadata(0);
  v117 = *(_QWORD *)(v5 - 8);
  v118 = v5;
  __chkstk_darwin();
  v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_10003F544((uint64_t *)&unk_100564DD0);
  __chkstk_darwin();
  v115 = (uint64_t *)((char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v10 = (uint64_t *)((char *)&v96 - v9);
  __chkstk_darwin();
  v114 = (uint64_t *)((char *)&v96 - v11);
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 64);
  v103 = *a1 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v104 = (unint64_t)(v14 + 63) >> 6;
  v101 = (char *)v126 + 8;
  v113 = kPodcastTitle;
  v112 = kPodcastStoreCollectionId;
  v111 = kPodcastFeedUrl;
  v110 = kPodcastUpdatedFeedUrl;
  v109 = kEpisodeGuid;
  v108 = kEpisodeEnclosureUrl;
  v107 = kEpisodeUti;
  v100 = CFSTR("adst");
  v99 = CFSTR("epdl");
  v121 = v12;
  v17 = swift_bridgeObjectRetain(v12);
  v18 = 0;
  v17.n128_u64[0] = 136446210;
  v98 = v17;
  v97 = (char *)&type metadata for Any + 8;
  v106 = xmmword_1003D44A0;
  v105 = v10;
  v102 = v7;
  while (1)
  {
    if (v16)
    {
      v122 = (v16 - 1) & v16;
      v123 = v18;
      v22 = __clz(__rbit64(v16)) | (v18 << 6);
      goto LABEL_19;
    }
    v23 = __OFADD__(v18, 1);
    v24 = v18 + 1;
    if (v23)
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v24 >= v104)
      goto LABEL_48;
    v25 = *(_QWORD *)(v103 + 8 * v24);
    if (!v25)
      break;
LABEL_18:
    v122 = (v25 - 1) & v25;
    v123 = v24;
    v22 = __clz(__rbit64(v25)) + (v24 << 6);
LABEL_19:
    v27 = *(_QWORD *)(v121 + 56);
    v28 = (uint64_t *)(*(_QWORD *)(v121 + 48) + 16 * v22);
    v29 = *v28;
    v30 = v28[1];
    v31 = v114;
    *v114 = *v28;
    v31[1] = v30;
    v32 = v116;
    v33 = (uint64_t)v31 + *(int *)(v116 + 48);
    sub_10014FDF8(v27 + *(_QWORD *)(v117 + 72) * v22, v33, type metadata accessor for EpisodeMetadata);
    v34 = (uint64_t)v10 + *(int *)(v32 + 48);
    *v10 = v29;
    v10[1] = v30;
    sub_1003069C8(v33, v34);
    v35 = *(int *)(v32 + 48);
    v36 = v115;
    v37 = (uint64_t)v115 + v35;
    *v115 = v29;
    v36[1] = v30;
    sub_10014FDF8(v34, (uint64_t)v36 + v35, type metadata accessor for EpisodeMetadata);
    swift_bridgeObjectRetain_n(v30, 3);
    sub_10003F970(v37, type metadata accessor for EpisodeMetadata);
    v38 = (uint64_t)v36 + *(int *)(v32 + 48);
    sub_10014FDF8(v34, v38, type metadata accessor for EpisodeMetadata);
    swift_bridgeObjectRelease(v30);
    sub_1003069C8(v38, (uint64_t)v7);
    v39 = static os_log_type_t.default.getter();
    v40 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v41 = static OS_os_log.downloads.getter(v40);
    if (os_log_type_enabled(v41, v39))
    {
      swift_bridgeObjectRetain(v30);
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v127 = v43;
      *(_DWORD *)v42 = v98.n128_u32[0];
      swift_bridgeObjectRetain(v30);
      *(_QWORD *)&v126[0] = sub_10003D274(v29, v30, (uint64_t *)&v127);
      v7 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v126, v101, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease_n(v30, 3);
      _os_log_impl((void *)&_mh_execute_header, v41, v39, "Reporting metrics for episode uuid %{public}s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, v97);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(v30);
    }

    v44 = sub_10003F544((uint64_t *)&unk_10055BCC0);
    inited = swift_initStackObject(v44, &v129);
    *(_OWORD *)(inited + 16) = v106;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
    *(_QWORD *)(inited + 40) = v46;
    v47 = *((_QWORD *)v7 + 9);
    if (v47)
    {
      v48 = *((_QWORD *)v7 + 8);
      v49 = *((_QWORD *)v7 + 9);
      v50 = &type metadata for String;
    }
    else
    {
      v48 = 0;
      v49 = 0;
      v50 = 0;
      *(_QWORD *)(inited + 64) = 0;
    }
    *(_QWORD *)(inited + 48) = v48;
    *(_QWORD *)(inited + 56) = v49;
    *(_QWORD *)(inited + 72) = v50;
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
    *(_QWORD *)(inited + 88) = v51;
    v52 = v7[56];
    v124 = v47;
    if (v52 == 1)
    {
      v53 = 0;
      v54 = 0;
      *(_QWORD *)(inited + 104) = 0;
      *(_QWORD *)(inited + 112) = 0;
    }
    else
    {
      v53 = *((_QWORD *)v7 + 6);
      v54 = &type metadata for Int64;
    }
    *(_QWORD *)(inited + 96) = v53;
    *(_QWORD *)(inited + 120) = v54;
    *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
    *(_QWORD *)(inited + 136) = v55;
    v56 = *((_QWORD *)v7 + 11);
    if (v56)
    {
      v57 = *((_QWORD *)v7 + 10);
      v58 = *((_QWORD *)v7 + 11);
      v59 = &type metadata for String;
    }
    else
    {
      v57 = 0;
      v58 = 0;
      v59 = 0;
      *(_QWORD *)(inited + 160) = 0;
    }
    *(_QWORD *)(inited + 144) = v57;
    *(_QWORD *)(inited + 152) = v58;
    *(_QWORD *)(inited + 168) = v59;
    *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
    *(_QWORD *)(inited + 184) = v60;
    v61 = *((_QWORD *)v7 + 13);
    if (v61)
    {
      v62 = *((_QWORD *)v7 + 12);
      v63 = *((_QWORD *)v7 + 13);
      v64 = &type metadata for String;
    }
    else
    {
      v62 = 0;
      v63 = 0;
      v64 = 0;
      *(_QWORD *)(inited + 208) = 0;
    }
    *(_QWORD *)(inited + 192) = v62;
    *(_QWORD *)(inited + 200) = v63;
    *(_QWORD *)(inited + 216) = v64;
    *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
    *(_QWORD *)(inited + 232) = v65;
    v66 = *((_QWORD *)v7 + 3);
    if (v66)
    {
      v67 = *((_QWORD *)v7 + 2);
      v68 = &type metadata for String;
    }
    else
    {
      v67 = 0;
      v68 = 0;
      *(_QWORD *)(inited + 256) = 0;
    }
    v69 = v7;
    *(_QWORD *)(inited + 240) = v67;
    *(_QWORD *)(inited + 248) = v66;
    *(_QWORD *)(inited + 264) = v68;
    *(_QWORD *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
    *(_QWORD *)(inited + 280) = v70;
    v71 = v118;
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v124);
    swift_bridgeObjectRetain(v56);
    v73 = URL.absoluteString.getter(v72);
    *(_QWORD *)(inited + 312) = &type metadata for String;
    *(_QWORD *)(inited + 288) = v73;
    *(_QWORD *)(inited + 296) = v74;
    *(_QWORD *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    *(_QWORD *)(inited + 328) = v75;
    if (v69[*(int *)(v71 + 48)])
      v76 = 0x6F65646976;
    else
      v76 = 0x6F69647561;
    *(_QWORD *)(inited + 360) = &type metadata for String;
    *(_QWORD *)(inited + 336) = v76;
    *(_QWORD *)(inited + 344) = 0xE500000000000000;
    v77 = sub_100138F60(inited);
    v78 = v125;
    sub_10032B9A4(v77);
    v80 = v79;
    v125 = v78;
    swift_bridgeObjectRelease(v77);
    v81 = v119;
    sub_100007A64((uint64_t)&v69[*(int *)(v71 + 60)], v119, &qword_1005522F0);
    v82 = type metadata accessor for Date(0);
    LODWORD(v77) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 48))(v81, 1, v82);
    sub_100007A28(v81, &qword_1005522F0);
    v7 = v69;
    if ((_DWORD)v77 != 1)
    {
      v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeRestoreTypeKey);
      v85 = v84;
      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeRestoreTypeOSDeletion);
      v128 = &type metadata for String;
      *(_QWORD *)&v127 = v86;
      *((_QWORD *)&v127 + 1) = v87;
      sub_10013B9CC(&v127, v126);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v80);
      v130 = v80;
      sub_10021BD0C(v126, v83, v85, isUniquelyReferenced_nonNull_native);
      v80 = v130;
      swift_bridgeObjectRelease(v85);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v10 = v105;
    v16 = v122;
    v89 = sub_100005EC8(0, (unint64_t *)&unk_10055BCD0, &off_1004A4568);
    v90 = objc_msgSend((id)swift_getObjCClassFromMetadata(v89), "sharedInstance");
    sub_100214BDC(v80);
    v92 = v91;
    swift_bridgeObjectRelease(v80);
    v93.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v92);
    if ((v120 & 1) != 0)
    {
      v19 = 0;
      isa = v93.super.isa;
      v21 = v99;
    }
    else
    {
      v19 = 1;
      isa = v93.super.isa;
      v21 = v100;
    }
    objc_msgSend(v90, "reportWithType:userInfo:location:reason:", v19, isa, v21, 0, v96);
    v18 = v123;

    sub_10003F970((uint64_t)v7, type metadata accessor for EpisodeMetadata);
    sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100564DD0);
  }
  v26 = v24 + 1;
  if (v24 + 1 >= v104)
    goto LABEL_48;
  v25 = *(_QWORD *)(v103 + 8 * v26);
  if (v25)
    goto LABEL_17;
  v26 = v24 + 2;
  if (v24 + 2 >= v104)
    goto LABEL_48;
  v25 = *(_QWORD *)(v103 + 8 * v26);
  if (v25)
    goto LABEL_17;
  v26 = v24 + 3;
  if (v24 + 3 >= v104)
  {
LABEL_48:
    v94 = v121;
    swift_release(v121);
    v95 = v96;
    *v96 = v94;
    *((_BYTE *)v95 + 8) = 0;
    swift_bridgeObjectRetain(v94);
    return;
  }
  v25 = *(_QWORD *)(v103 + 8 * v26);
  if (v25)
  {
LABEL_17:
    v24 = v26;
    goto LABEL_18;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v104)
      goto LABEL_48;
    v25 = *(_QWORD *)(v103 + 8 * v24);
    ++v26;
    if (v25)
      goto LABEL_18;
  }
LABEL_50:
  __break(1u);
}

void sub_10033003C(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  char v24;

  v12 = *a1;
  v13 = static os_log_type_t.default.getter();
  v14 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v15 = (void *)static OS_os_log.downloads.getter(v14);
  v16 = sub_10003F544(&qword_1005559A0);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1003CA200;
  v18 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v17 + 56) = &type metadata for Int;
  *(_QWORD *)(v17 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v17 + 32) = v18;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v15, "Fetched metadata for %d episodes.", v23);

  swift_bridgeObjectRelease(v17);
  v19 = a2;
  swift_unknownObjectRetain(a3);
  swift_unknownObjectRetain(a5);
  sub_10033FA18(v12, (uint64_t)v19, a3, a4, v24, a5, a6);
  v21 = v20;
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(a5);
  v22 = sub_10033FD0C(v21, v19);

  *(_QWORD *)a7 = v22;
  *(_BYTE *)(a7 + 8) = 0;
}

uint64_t sub_1003301BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  char *v22;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  void *object;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v49[2];
  os_log_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57[2];
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;

  v5 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v7 = (_QWORD *)((char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage);
  swift_retain();
  LODWORD(v10) = sub_1003798A0(v8);
  swift_release(v9);
  v11 = static os_log_type_t.default.getter();
  v55 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v12 = static OS_os_log.downloads.getter(v55);
  swift_retain_n(v8, 3);
  v13 = os_log_type_enabled(v12, v11);
  v54 = v5;
  if (!v13)
  {
    swift_release_n(v8, 3);

    if ((v10 & 1) != 0)
      return v10 & 1;
LABEL_11:
    v38 = sub_100140BBC();
    v39 = static os_log_type_t.error.getter(v38);
    v40 = (void *)static OS_os_log.downloads.getter(v39);
    v41 = sub_10003F544(&qword_1005559A0);
    v42 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v42 + 16) = xmmword_1003CA200;
    v43 = *(id *)(v8 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    v44 = v54;
    OS_dispatch_queue.sync<A>(execute:)(v7, sub_10033F940, v8, v54);

    v45 = (_QWORD *)((char *)v7 + *(int *)(v44 + 20));
    v47 = *v45;
    v46 = v45[1];
    swift_bridgeObjectRetain(v46);
    sub_10003F970((uint64_t)v7, type metadata accessor for DownloadJob);
    *(_QWORD *)(v42 + 56) = &type metadata for String;
    *(_QWORD *)(v42 + 64) = sub_10003E198();
    *(_QWORD *)(v42 + 32) = v47;
    *(_QWORD *)(v42 + 40) = v46;
    os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Skip download for episode uuid %{public}s", 41, 2, v42);

    swift_bridgeObjectRelease(v42);
    return v10 & 1;
  }
  swift_retain();
  v14 = swift_slowAlloc(32, -1);
  v52 = v11;
  v15 = v14;
  v51 = swift_slowAlloc(64, -1);
  v61 = v51;
  *(_DWORD *)v15 = 136315650;
  v53 = v10;
  v16 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v17 = *(id *)(v8 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v7, sub_10033F940, v8, v5);

  v18 = (_QWORD *)((char *)v7 + *(int *)(v5 + 20));
  v50 = v12;
  v19 = *v18;
  v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  sub_10003F970((uint64_t)v7, type metadata accessor for DownloadJob);
  v56 = sub_10003D274(v19, v20, &v61);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v15 + 4, v15 + 12);
  swift_bridgeObjectRelease(v20);
  *(_WORD *)(v15 + 12) = 2080;
  v21 = *(id *)(v8 + v16);
  OS_dispatch_queue.sync<A>(execute:)(v7, sub_10033F940, v8, v5);
  v49[1] = v2;

  v22 = (char *)v7 + *(int *)(v5 + 32);
  v23 = *(_QWORD *)v22;
  v24 = (void *)*((_QWORD *)v22 + 1);
  v25 = v22[16];
  swift_bridgeObjectRetain(v24);
  sub_10003F970((uint64_t)v7, type metadata accessor for DownloadJob);
  v56 = 0x496E6F6973736553;
  v57[0] = 0xEB00000000203A44;
  if (v25)
    v26 = 1936484398;
  else
    v26 = 0x7261646E6174732ELL;
  if (v25)
    v27 = (void *)0xE400000000000000;
  else
    v27 = (void *)0xE900000000000064;
  v60._countAndFlagsBits = v23;
  v60._object = v24;
  swift_bridgeObjectRetain(v24);
  v28._countAndFlagsBits = v26;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  object = v60._object;
  String.append(_:)(v60);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(object);
  v30 = v57[0];
  v56 = sub_10003D274(v56, v57[0], &v61);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v15 + 14, v15 + 22);
  swift_release_n(v8, 2);
  swift_bridgeObjectRelease(v30);
  *(_WORD *)(v15 + 22) = 2048;
  v31 = *(id *)(v8 + v16);
  v32 = sub_10003F544(&qword_100564DA0);
  OS_dispatch_queue.sync<A>(execute:)(&v56, sub_100340978, v8, v32);

  v10 = v58;
  v33 = v59;
  sub_10003A834(&v56, v58);
  v34 = v10;
  LOBYTE(v10) = v53;
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v34, v33);
  sub_10003D380(&v56);
  swift_release(v8);
  v56 = v35;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v15 + 24, v15 + 32);
  swift_release(v8);
  v36 = v50;
  _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v52, "Adding job pipeline for episode %s for session %s task %ld", (uint8_t *)v15, 0x20u);
  v37 = v51;
  swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v37, -1, -1);
  swift_slowDealloc(v15, -1, -1);

  if ((v10 & 1) == 0)
    goto LABEL_11;
  return v10 & 1;
}

void sub_1003306F4(uint64_t *a1@<X0>, _QWORD *a2@<X1>, void (*a3)(_QWORD)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void (*v60)(_QWORD);
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;

  v6 = v5;
  v63 = a2;
  v11 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v13 = (_QWORD *)((char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    if (v14 < 0)
      v58 = *a1;
    else
      v58 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*a1);
    v15 = _CocoaArrayWrapper.endIndex.getter(v58);
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v16 = _swiftEmptyArrayStorage;
  v61 = a4;
  v62 = a5;
  v64 = (_QWORD *)v15;
  v65 = v6;
  if (!v15)
    goto LABEL_20;
  v68 = _swiftEmptyArrayStorage;
  sub_100048628(0, v15 & ~(v15 >> 63), 0);
  if ((v15 & 0x8000000000000000) == 0)
  {
    v60 = a3;
    if ((v14 & 0xC000000000000001) != 0)
    {
      v17 = 0;
      do
      {
        v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
        v19 = *(id *)(v18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
        v20 = v65;
        OS_dispatch_queue.sync<A>(execute:)(v13, sub_10033F940, v18, v11);
        v65 = v20;

        v21 = (_QWORD *)((char *)v13 + *(int *)(v11 + 20));
        v23 = *v21;
        v22 = v21[1];
        swift_bridgeObjectRetain(v22);
        sub_10003F970((uint64_t)v13, type metadata accessor for DownloadJob);
        swift_unknownObjectRelease(v18);
        v16 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
        {
          sub_100048628(0, v16[2] + 1, 1);
          v16 = v68;
        }
        v25 = v16[2];
        v24 = v16[3];
        if (v25 >= v24 >> 1)
        {
          sub_100048628(v24 > 1, v25 + 1, 1);
          v16 = v68;
        }
        v17 = (_QWORD *)((char *)v17 + 1);
        v16[2] = v25 + 1;
        v26 = &v16[2 * v25];
        v26[4] = v23;
        v26[5] = v22;
      }
      while (v64 != v17);
    }
    else
    {
      v27 = (uint64_t *)(v14 + 32);
      v28 = v15;
      do
      {
        v29 = *v27;
        v30 = *(void **)(*v27 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
        swift_retain();
        v31 = v30;
        v32 = v65;
        OS_dispatch_queue.sync<A>(execute:)(v13, sub_10033F940, v29, v11);
        v65 = v32;

        v33 = (_QWORD *)((char *)v13 + *(int *)(v11 + 20));
        v34 = *v33;
        v35 = v33[1];
        swift_bridgeObjectRetain(v35);
        sub_10003F970((uint64_t)v13, type metadata accessor for DownloadJob);
        swift_release(v29);
        v16 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
        {
          sub_100048628(0, v16[2] + 1, 1);
          v16 = v68;
        }
        v37 = v16[2];
        v36 = v16[3];
        if (v37 >= v36 >> 1)
        {
          sub_100048628(v36 > 1, v37 + 1, 1);
          v16 = v68;
        }
        v16[2] = v37 + 1;
        v38 = &v16[2 * v37];
        v38[4] = v34;
        v38[5] = v35;
        ++v27;
        --v28;
      }
      while (v28);
    }
    a5 = v62;
    a3 = v60;
LABEL_20:
    v39 = sub_10002B070((uint64_t)v16);
    swift_bridgeObjectRelease(v16);
    v40 = (uint64_t)v63;
    if (*(_QWORD *)(v39 + 16) <= v63[2] >> 3)
    {
      v68 = v63;
      swift_bridgeObjectRetain(v63);
      sub_100048B14(v39);
      swift_bridgeObjectRelease(v39);
      v41 = v68;
      if (v68[2])
      {
LABEL_22:
        v43 = static os_log_type_t.error.getter(v42);
        v44 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
        v45 = static OS_os_log.downloads.getter(v44);
        swift_bridgeObjectRetain(v41);
        v46 = v43;
        if (os_log_type_enabled(v45, v43))
        {
          swift_bridgeObjectRetain(v41);
          v47 = swift_slowAlloc(22, -1);
          v64 = (_QWORD *)swift_slowAlloc(32, -1);
          v68 = v64;
          *(_DWORD *)v47 = 134349314;
          v66 = v41[2];
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v47 + 4, v47 + 12);
          *(_WORD *)(v47 + 12) = 2082;
          swift_bridgeObjectRetain(v41);
          v49 = Set.description.getter(v48, &type metadata for String, &protocol witness table for String);
          v51 = v50;
          swift_bridgeObjectRelease(v41);
          v66 = sub_10003D274(v49, v51, (uint64_t *)&v68);
          a5 = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v47 + 14, v47 + 22);
          swift_bridgeObjectRelease_n(v41, 2);
          swift_bridgeObjectRelease(v51);
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Skipped adding %{public}ld downloads. %{public}s", (uint8_t *)v47, 0x16u);
          v52 = v64;
          swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v52, -1, -1);
          swift_slowDealloc(v47, -1, -1);

          if (!a3)
            goto LABEL_28;
        }
        else
        {
          swift_bridgeObjectRelease(v41);

          if (!a3)
            goto LABEL_28;
        }
        goto LABEL_27;
      }
    }
    else
    {
      swift_bridgeObjectRetain(v63);
      v41 = sub_10033CAA0(v39, v40);
      swift_bridgeObjectRelease(v39);
      if (v41[2])
        goto LABEL_22;
    }
    v53 = static os_log_type_t.default.getter();
    v54 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v55 = (void *)static OS_os_log.downloads.getter(v54);
    v56 = sub_10003F544(&qword_1005559A0);
    v57 = swift_allocObject(v56, 72, 7);
    *(_OWORD *)(v57 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v57 + 56) = &type metadata for Int;
    *(_QWORD *)(v57 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v57 + 32) = v64;
    os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v55, "Added %d downloads.", v59);

    swift_bridgeObjectRelease(v57);
    if (!a3)
    {
LABEL_28:
      swift_bridgeObjectRelease(v41);
      *(_QWORD *)a5 = 0;
      *(_BYTE *)(a5 + 8) = 0;
      return;
    }
LABEL_27:
    a3(v41);
    goto LABEL_28;
  }
  __break(1u);
}

void sub_100330CD8(uint64_t a1, void (*a2)(void *, __n128), uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Strong;
  void *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _BYTE v43[24];
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[3];
  _BYTE v47[8];
  _QWORD v48[3];
  _BYTE v49[8];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  char v53;

  if ((a4 & 1) != 0)
  {
    v7 = a5 + 16;
    v44[0] = a1;
    swift_errorRetain();
    v8 = sub_10003F544((uint64_t *)&unk_10055A340);
    v9 = swift_dynamicCast(&v50, v44, v8, &type metadata for EpisodeMetadataError, 6);
    if ((_DWORD)v9)
    {
      v10 = v50;
      v11 = v51;
      v12 = BYTE8(v51);
      v13 = static os_log_type_t.error.getter(v9);
      v14 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v15 = (void *)static OS_os_log.downloads.getter(v14);
      v16 = sub_10003F544(&qword_1005559A0);
      v17 = swift_allocObject(v16, 72, 7);
      *(_OWORD *)(v17 + 16) = xmmword_1003CA200;
      v50 = v10;
      *(_QWORD *)&v51 = v11;
      BYTE8(v51) = v12;
      v18 = sub_1001E44C0();
      v19 = Error.localizedDescription.getter(&type metadata for EpisodeMetadataError, v18);
      v21 = v20;
      *(_QWORD *)(v17 + 56) = &type metadata for String;
      *(_QWORD *)(v17 + 64) = sub_10003E198();
      *(_QWORD *)(v17 + 32) = v19;
      *(_QWORD *)(v17 + 40) = v21;
      os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v15, "Failed to start download with episode metadata error: %{public}s", 64, 2, v17);

      swift_bridgeObjectRelease(v17);
      swift_beginAccess(v7, &v50, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v7);
      if (Strong)
      {
        v23 = (void *)Strong;
        sub_1003310DC(v10, v11, v12);
        sub_1001E42E8(v10, v11, v12);

      }
      else
      {
        sub_1001E42E8(v10, v11, v12);
      }
    }
    else
    {
      v33 = static os_log_type_t.error.getter(v9);
      v34 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v35 = (void *)static OS_os_log.downloads.getter(v34);
      v36 = sub_10003F544(&qword_1005559A0);
      v37 = swift_allocObject(v36, 72, 7);
      *(_OWORD *)(v37 + 16) = xmmword_1003CA200;
      swift_getErrorValue(a1, v47, v46);
      v38 = Error.localizedDescription.getter(v46[1], v46[2]);
      v40 = v39;
      *(_QWORD *)(v37 + 56) = &type metadata for String;
      *(_QWORD *)(v37 + 64) = sub_10003E198();
      *(_QWORD *)(v37 + 32) = v38;
      *(_QWORD *)(v37 + 40) = v40;
      os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v35, "Failed to start user intiated download, error: %{public}s", 57, 2, v37);

      swift_bridgeObjectRelease(v37);
      swift_beginAccess(v7, v43, 0, 0);
      v41 = swift_unknownObjectWeakLoadStrong(v7);
      if (v41)
      {
        v42 = (void *)v41;
        sub_100007A64(v41 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, (uint64_t)v44, &qword_1005540B8);

        if (v45)
        {
          sub_10003A834(v44, v45);
          v50 = 1;
          v51 = 0u;
          v52 = 0u;
          v53 = 2;
          sub_1001B109C((__int128 *)&v50);
          sub_10003D380(v44);
        }
        else
        {
          sub_100007A28((uint64_t)v44, &qword_1005540B8);
        }
      }
    }
  }
  else
  {
    v25 = static os_log_type_t.error.getter(a1);
    v26 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v27 = (void *)static OS_os_log.downloads.getter(v26);
    v28 = sub_10003F544(&qword_1005559A0);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_1003CA200;
    swift_getErrorValue(a1, v49, v48);
    v30 = Error.localizedDescription.getter(v48[1], v48[2]);
    v32 = v31;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_10003E198();
    *(_QWORD *)(v29 + 32) = v30;
    *(_QWORD *)(v29 + 40) = v32;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v27, "Failed to create add auto/restore downloads, error: %{public}s", 62, 2, v29);

    v24 = swift_bridgeObjectRelease(v29);
  }
  if (a2)
    a2(&_swiftEmptySetSingleton, v24);
}

void sub_1003310DC(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_100331120(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t aBlock, __int128 a11, __int128 a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  _QWORD v41[3];
  uint64_t v42;

  v33 = static os_log_type_t.default.getter();
  v34 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v35 = (void *)static OS_os_log.downloads.getter(v34);
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v35, "Failed episode downloade, episode is restricted.", 48, 2, _swiftEmptyArrayStorage);

  sub_100007A64(v32 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, (uint64_t)v41, &qword_1005540B8);
  if (!v42)
    return sub_100007A28((uint64_t)v41, &qword_1005540B8);
  sub_10003A834(v41, v42);
  v37 = 2;
  v38 = 0u;
  v39 = 0u;
  v40 = 2;
  sub_1001B109C((__int128 *)&v37);
  return sub_10003D380(v41);
}

uint64_t sub_1003314EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  __int128 v33;
  uint64_t (*v34)(_QWORD, _QWORD, __n128);
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t *v40;
  uint64_t v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  __int128 v63;
  _BYTE v64[4];
  int v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  _QWORD v85[5];
  _QWORD v86[5];
  _BYTE v87[20];
  __int128 v88;
  uint64_t v89;
  char v90[8];
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  char v94;

  LODWORD(v79) = a6;
  v76 = a5;
  v84 = a4;
  v78 = a2;
  v77 = a1;
  v74 = type metadata accessor for DispatchTimeInterval(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin();
  v75 = &v64[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v72 = type metadata accessor for URL(0);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin();
  v83 = &v64[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for EpisodeMetadata(0);
  __chkstk_darwin();
  v82 = &v64[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v70 = type metadata accessor for UUID(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin();
  v68 = &v64[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = (int *)type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v81 = &v64[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v19 = &v64[-v18];
  ObjectType = swift_getObjectType(a7, v20);
  v22 = a3 + *(int *)(v13 + 44);
  v23 = *(_QWORD *)(a3 + 32);
  v24 = *(unsigned __int8 *)(a3 + 40);
  sub_1001D8554();
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(a8 + 40))(&v91, v90, v22, v23, v24, v79, v26, v25 & 1, ObjectType, a8);
  v27 = v92;
  v79 = v91;
  v28 = *((_QWORD *)&v92 + 1);
  v29 = v93;
  v30 = BYTE8(v93);
  sub_100007A64((uint64_t)v90, (uint64_t)&v88, (uint64_t *)&unk_100564D90);
  if (v89)
  {
    v67 = v27;
    v31 = sub_10002099C(&v88, (uint64_t)&v91);
    v32 = v68;
    UUID.init()(v31);
    v66 = v28;
    v33 = v93;
    sub_10003A834(&v91, v93);
    v65 = v30;
    v34 = *(uint64_t (**)(_QWORD, _QWORD, __n128))(*((_QWORD *)&v33 + 1) + 24);
    v35 = v78;
    v36 = swift_bridgeObjectRetain(v78);
    v37 = v34(v33, *((_QWORD *)&v33 + 1), v36);
    v38 = sub_10014FDF8(a3, (uint64_t)&v19[v16[9]], type metadata accessor for EpisodeMetadata);
    Date.init()(v38);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v69 + 32))(v19, v32, v70);
    *(_QWORD *)&v19[v16[7]] = v37;
    v39 = &v19[v16[8]];
    *(_QWORD *)v39 = v66;
    *((_QWORD *)v39 + 1) = v29;
    v39[16] = v65;
    v40 = (uint64_t *)&v19[v16[5]];
    v41 = v77;
    *v40 = v77;
    v40[1] = v35;
    v42 = &v19[v16[10]];
    *(_QWORD *)v42 = 0;
    *((_QWORD *)v42 + 1) = 0;
    *((_QWORD *)v42 + 2) = 0;
    *((_QWORD *)v42 + 3) = 1;
    *((_QWORD *)v42 + 4) = 0;
    *((_QWORD *)v42 + 5) = 0;
    *((_WORD *)v42 + 24) = 0;
    sub_10014FDF8(a3, (uint64_t)v82, type metadata accessor for EpisodeMetadata);
    sub_10014FDF8((uint64_t)v19, (uint64_t)v81, type metadata accessor for DownloadJob);
    sub_10000A520((uint64_t)&v91, (uint64_t)&v88);
    v43 = v80;
    v44 = *(_QWORD *)&v80[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_jobStorage];
    v45 = *(_QWORD *)&v80[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_jobStorage + 8];
    sub_100007A64((uint64_t)&v80[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_mediaLibraryClient], (uint64_t)v87, &qword_1005536B0);
    sub_10000A520((uint64_t)v43 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_dsidProvider, (uint64_t)v86);
    sub_10000A520((uint64_t)v43 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_artworkStorage, (uint64_t)v85);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v71 + 16))(v83, (uint64_t)v43 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_assetsFolder, v72);
    v46 = qword_100551FB0;
    swift_bridgeObjectRetain(v35);
    swift_unknownObjectRetain(v84);
    swift_unknownObjectRetain(v44);
    v47 = v35;
    if (v46 != -1)
      swift_once(&qword_100551FB0, sub_10013E3EC);
    v48 = v74;
    v49 = sub_100047DA4(v74, (uint64_t)qword_100572D18);
    v50 = (uint64_t)v75;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v73 + 16))(v75, v49, v48);
    sub_100038DEC((uint64_t)v86, v86[3]);
    __chkstk_darwin();
    (*(void (**)(void))(v51 + 16))();
    v52 = v43;
    *((_QWORD *)&v63 + 1) = v44;
    *(_QWORD *)&v63 = v76;
    v53 = sub_10033F048(v41, v47, (uint64_t)v82, (uint64_t)v81, &v88, v79, v67, v84, v63, v45, (uint64_t)v87, v85, (uint64_t)v83, v52, v50, 0);
    sub_10003D380(v86);
    sub_10003F970((uint64_t)v19, type metadata accessor for DownloadJob);
    sub_100007A28((uint64_t)v90, (uint64_t *)&unk_100564D90);
    sub_10003D380(&v91);
  }
  else
  {
    swift_bridgeObjectRelease(v29);
    v54 = sub_100007A28((uint64_t)&v88, (uint64_t *)&unk_100564D90);
    v55 = static os_log_type_t.error.getter(v54);
    v56 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v57 = (void *)static OS_os_log.downloads.getter(v56);
    v58 = sub_10003F544(&qword_1005559A0);
    v59 = swift_allocObject(v58, 72, 7);
    *(_OWORD *)(v59 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v59 + 56) = &type metadata for String;
    *(_QWORD *)(v59 + 64) = sub_10003E198();
    v60 = v78;
    *(_QWORD *)(v59 + 32) = v77;
    *(_QWORD *)(v59 + 40) = v60;
    *(_QWORD *)&v61 = swift_bridgeObjectRetain(v60).n128_u64[0];
    os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v57, "Failed to create download pipeline for uuid %{public}s", 54, 2, v59, v61);

    swift_bridgeObjectRelease(v59);
    sub_100007A64((uint64_t)&v80[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter], (uint64_t)&v88, &qword_1005540B8);
    if (v89)
    {
      sub_10003A834(&v88, v89);
      v91 = 1;
      v92 = 0u;
      v93 = 0u;
      v94 = 2;
      sub_1001B109C((__int128 *)&v91);
      sub_10002CA30(v79, v27);
      sub_100007A28((uint64_t)v90, (uint64_t *)&unk_100564D90);
      sub_10003D380(&v88);
    }
    else
    {
      sub_100007A28((uint64_t)v90, (uint64_t *)&unk_100564D90);
      sub_10002CA30(v79, v27);
      sub_100007A28((uint64_t)&v88, &qword_1005540B8);
    }
    return 0;
  }
  return v53;
}

void EpisodeDownloadsManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.EpisodeDownloadsManager", 32, "init()", 6, 0);
  __break(1u);
}

id EpisodeDownloadsManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EpisodeDownloadsManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100331E8C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Strong;
  void *v20;
  const char *v21[3];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v6 = a4 + 16;
  if ((a3 & 1) != 0)
  {
    v9 = swift_errorRetain();
    v10 = static os_log_type_t.error.getter(v9);
    v11 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v12 = (void *)static OS_os_log.downloads.getter(v11);
    v13 = sub_10003F544(&qword_1005559A0);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1003CA200;
    v24 = a1;
    v15 = sub_1001E4588();
    v16 = Error.localizedDescription.getter(&type metadata for EpisodeStorageError, v15);
    v18 = v17;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_10003E198();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v18;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v12, "Couldn't fetch episode title while preparing to show user alert, error %s", v21[0]);

    swift_bridgeObjectRelease(v14);
    swift_beginAccess(v6, v21, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v6);
    if (!Strong)
      return sub_100340BC4(a1, a2, 1);
    v20 = (void *)Strong;
    sub_100007A64(Strong + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, (uint64_t)v22, &qword_1005540B8);

    if (v23)
    {
      sub_10003A834(v22, v23);
      v24 = 1;
      v25 = 0u;
      v26 = 0u;
      v27 = 2;
      sub_1001B109C((__int128 *)&v24);
      sub_100340BC4(a1, a2, 1);
      return sub_10003D380(v22);
    }
    sub_100340BC4(a1, a2, 1);
  }
  else
  {
    swift_beginAccess(a4 + 16, v21, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(v6);
    if (!result)
      return result;
    v8 = (void *)result;
    sub_100007A64(result + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, (uint64_t)v22, &qword_1005540B8);

    if (v23)
    {
      sub_10003A834(v22, v23);
      v24 = a1;
      v25 = (unint64_t)a2;
      v26 = 0uLL;
      v27 = 1;
      sub_1001B109C((__int128 *)&v24);
      return sub_10003D380(v22);
    }
  }
  return sub_100007A28((uint64_t)v22, &qword_1005540B8);
}

uint64_t EpisodeDownloadsManager.handleEventsForBackgroundURLSession(identifier:handler:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class isa;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 aBlock;
  uint64_t (*v54)(uint64_t);
  void *v55;
  void (*v56)();
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v51 = a4;
  v8 = type metadata accessor for Logger(0);
  v52 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = (char *)&v49 - v11;
  swift_bridgeObjectRetain(a2);
  v13 = sub_10013DBB8(a1, a2);
  if (v14)
  {
    v16 = v13;
    v17 = v14;
    v18 = v15;
    v50 = v8;
    v19 = (uint64_t *)(v4 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_expectedDownloaderTypes);
    swift_beginAccess(v4 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_expectedDownloaderTypes, &v59, 0, 0);
    v20 = *v19;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v17);
    v21 = sub_1002914E4(v16, (uint64_t)v17, v20);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) != 0)
    {
      v23 = v18 & 1;
      v24 = sub_10002BE98();
      v25 = sub_10003F544((uint64_t *)&unk_100553780);
      v26 = swift_allocObject(v25, 40, 7);
      *(_OWORD *)(v26 + 16) = xmmword_1003CA250;
      v27 = swift_allocObject(&unk_1004C3648, 24, 7);
      swift_unknownObjectWeakInit(v27 + 16, v4);
      v28 = swift_allocObject(&unk_1004C3670, 80, 7);
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = a3;
      *(_QWORD *)(v28 + 32) = v51;
      *(_QWORD *)(v28 + 40) = v16;
      *(_QWORD *)(v28 + 48) = v17;
      *(_BYTE *)(v28 + 56) = v23;
      *(_QWORD *)(v28 + 64) = a1;
      *(_QWORD *)(v28 + 72) = a2;
      v56 = sub_10033F86C;
      v57 = v28;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v54 = sub_100027AF8;
      v55 = &unk_1004C3688;
      v29 = _Block_copy(&aBlock);
      v30 = (void *)objc_opt_self(NSBlockOperation);
      swift_bridgeObjectRetain(a2);
      swift_retain();
      v31 = objc_msgSend(v30, "blockOperationWithBlock:", v29, swift_retain().n128_f64[0]);
      _Block_release(v29);
      v32 = v57;
      swift_release(v27);
      swift_release(v32);
      *(_QWORD *)(v26 + 32) = v31;
      *(_QWORD *)&aBlock = v26;
      specialized Array._endMutation()(v33);
      v34 = aBlock;
      sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v24, "addOperations:waitUntilFinished:", isa, 0, swift_bridgeObjectRelease(v34).n128_f64[0]);

      return 1;
    }
    static Logger.downloads.getter(v22);
    swift_bridgeObjectRetain(v17);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      *(_DWORD *)v45 = 136446210;
      v58 = v46;
      strcpy((char *)&aBlock, "ConfigType: ");
      BYTE13(aBlock) = 0;
      HIWORD(aBlock) = -5120;
      swift_bridgeObjectRetain(v17);
      v47._countAndFlagsBits = v16;
      v47._object = v17;
      String.append(_:)(v47);
      swift_bridgeObjectRelease(v17);
      v48 = *((_QWORD *)&aBlock + 1);
      *(_QWORD *)&aBlock = sub_10003D274(aBlock, *((unint64_t *)&aBlock + 1), &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "No downloader of type %{public}s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v17, 2);
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v50);
  }
  else
  {
    static Logger.downloads.getter(v13);
    v37 = swift_bridgeObjectRetain_n(a2, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v41;
      *(_DWORD *)v40 = 136446210;
      swift_bridgeObjectRetain(a2);
      v59 = sub_10003D274(a1, a2, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unable to handleEventsForBackgroundURLSession for invalid session identifier string: '%{public}s'.", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v10, v8);
  }
  return 0;
}

void sub_100332674(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t Strong;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ObjectType;
  void (*v48)(void (*)(void), uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64[24];

  v57 = a7;
  v14 = type metadata accessor for Logger(0);
  v58 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v18 = (char *)&v52 - v17;
  a1 += 16;
  swift_beginAccess(a1, v64, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v20 = (void *)Strong;
    v55 = a3;
    v56 = v14;
    *(&v52 - 4) = __chkstk_darwin();
    *(&v52 - 3) = a4;
    *(&v52 - 2) = a5;
    v21 = sub_10003F544(&qword_100564DE0);
    v22 = OS_dispatch_queue.sync<A>(execute:)(&v60, sub_100341178, &v52 - 6, v21);
    v23 = v60;
    if (v60)
    {
      v24 = v61;
      static Logger.downloads.getter(v22);
      v25 = swift_bridgeObjectRetain_n(a8, 2);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = swift_slowAlloc(12, -1);
        v53 = v24;
        v29 = (uint8_t *)v28;
        v30 = swift_slowAlloc(32, -1);
        v54 = (uint64_t)a2;
        v31 = v30;
        v60 = v30;
        *(_DWORD *)v29 = 136446210;
        swift_bridgeObjectRetain(a8);
        v62 = sub_10003D274(v57, a8, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v29 + 4, v29 + 12);
        swift_bridgeObjectRelease_n(a8, 3);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Setting background URLSession handler for sessionIdentifier: %{public}s", v29, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        v32 = v31;
        a2 = (void (*)(void))v54;
        swift_slowDealloc(v32, -1, -1);
        v33 = v29;
        v24 = v53;
        swift_slowDealloc(v33, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a8, 2);
      }
      (*(void (**)(char *, uint64_t))(v58 + 8))(v16, v56);
      ObjectType = swift_getObjectType(v23, v46);
      v48 = *(void (**)(void (*)(void), uint64_t, uint64_t, uint64_t, __n128))(v24 + 56);
      v49 = v55;
      v50 = swift_retain();
      v48(a2, v49, ObjectType, v24, v50);

      swift_unknownObjectRelease(v23);
    }
    else
    {
      static Logger.downloads.getter(v22);
      swift_bridgeObjectRetain_n(a8, 2);
      v34 = v20;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = swift_slowAlloc(22, -1);
        v54 = swift_slowAlloc(64, -1);
        v62 = v54;
        *(_DWORD *)v37 = 136446466;
        swift_bridgeObjectRetain(a8);
        v60 = sub_10003D274(v57, a8, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v37 + 4, v37 + 12);
        swift_bridgeObjectRelease_n(a8, 3);
        *(_WORD *)(v37 + 12) = 2082;
        v38 = &v34[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders];
        swift_beginAccess(&v34[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders], &v60, 0, 0);
        v39 = *(_QWORD *)v38;
        swift_bridgeObjectRetain(v39);
        v40 = sub_10003F544(&qword_100564ED0);
        v41 = sub_100340FAC();
        v42 = Dictionary.description.getter(v39, &type metadata for DownloaderSessionConfigurationType, v40, v41);
        v44 = v43;
        swift_bridgeObjectRelease(v39);
        v59 = sub_10003D274(v42, v44, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v37 + 14, v37 + 22);

        swift_bridgeObjectRelease(v44);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Not handling background URLSession events for unknown sessionIdentifier: %{public}s. Found types: %{public}s", (uint8_t *)v37, 0x16u);
        v45 = v54;
        swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v37, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a8, 2);
      }
      v51 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v18, v56);
      ((void (*)(uint64_t))a2)(v51);

    }
  }
  else
  {
    a2();
  }
}

uint64_t sub_100332C04(uint64_t a1, uint64_t a2, _QWORD *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  os_log_type_t v45;
  NSObject *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  id *v63;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  NSObject *v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[3];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  uint64_t v95;
  uint64_t v96;
  char v97[24];
  char v98[32];

  v82 = type metadata accessor for URL(0);
  v81[2] = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v81[1] = (char *)v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v13);
  v81[0] = (char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AssetDownloadStatus(0);
  v16 = __chkstk_darwin(v15);
  v88 = (id *)((char *)v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __chkstk_darwin(v16);
  v85 = (uint64_t)v81 - v19;
  v20 = __chkstk_darwin(v18);
  v87 = (uint64_t)v81 - v21;
  __chkstk_darwin(v20);
  v89 = (uint64_t)v81 - v22;
  a6 += 16;
  swift_beginAccess(a6, v98, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a6);
  v90 = a5;
  if (Strong)
  {
    v24 = (void *)Strong;
    v84 = v15;
    v25 = a4 & 1;
    v26 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage);
    swift_retain(v26);

    v27 = *(_QWORD *)(a1 + 24);
    v28 = *(_QWORD *)(a1 + 32);
    sub_10003A834((_QWORD *)a1, v27);
    v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 24))(v27, v28);
    objc_msgSend(*(id *)(v26 + 16), "lock");
    swift_beginAccess(v26 + 24, v97, 0, 0);
    v83 = v26;
    v29 = *(_QWORD *)(v26 + 24);
    swift_bridgeObjectRetain(a3);
    v30 = swift_bridgeObjectRetain(v29);
    v31 = (uint64_t)sub_10033FEB0(v30, a2, a3, v25);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(a3);
    if ((unint64_t)v31 >> 62)
      goto LABEL_15;
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v31);
    while (v32)
    {
      v86 = a1;
      a1 = 4;
      while (1)
      {
        v33 = a1 - 4;
        if ((v31 & 0xC000000000000001) == 0)
          break;
        v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(a1 - 4, v31);
        v35 = a1 - 3;
        if (__OFADD__(v33, 1))
          goto LABEL_14;
LABEL_10:
        v36 = *(id *)(v34 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
        v37 = sub_10003F544(&qword_100564DA0);
        OS_dispatch_queue.sync<A>(execute:)(v94, sub_100340978, v34, v37);

        v38 = v95;
        v39 = v96;
        sub_10003A834(v94, v95);
        v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);
        sub_10003D380(v94);
        if (v40 == v91)
        {
          swift_bridgeObjectRelease_n(v31, 2);
          a1 = v86;
          goto LABEL_20;
        }
        swift_release(v34);
        ++a1;
        if (v35 == v32)
        {
          swift_bridgeObjectRelease_n(v31, 2);
          v34 = 0;
          a1 = v86;
          goto LABEL_20;
        }
      }
      v34 = *(_QWORD *)(v31 + 8 * a1);
      swift_retain(v34);
      v35 = a1 - 3;
      if (!__OFADD__(v33, 1))
        goto LABEL_10;
LABEL_14:
      __break(1u);
LABEL_15:
      if (v31 < 0)
        v41 = v31;
      else
        v41 = v31 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v31);
      v32 = _CocoaArrayWrapper.endIndex.getter(v41);
    }
    swift_bridgeObjectRelease_n(v31, 2);
    v34 = 0;
LABEL_20:
    v42 = v83;
    objc_msgSend(*(id *)(v83 + 16), "unlock");
    Strong = swift_release(v42);
    a5 = v90;
    v15 = v84;
    if (v34)
    {
      v43 = v87;
      sub_10014FDF8(v90, v87, type metadata accessor for AssetDownloadStatus);
      v44 = (char *)&loc_100332FF4 + dword_10033350C[swift_getEnumCaseMultiPayload(v43, v15)];
      __asm { BR              X10 }
    }
  }
  v45 = static os_log_type_t.error.getter(Strong);
  v91 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v46 = static OS_os_log.downloads.getter(v91);
  v47 = v89;
  sub_10014FDF8(a5, v89, type metadata accessor for AssetDownloadStatus);
  sub_10000A520(a1, (uint64_t)v94);
  v48 = v45;
  if (os_log_type_enabled(v46, v45))
  {
    v49 = swift_slowAlloc(22, -1);
    v50 = swift_slowAlloc(64, -1);
    v93 = v50;
    *(_DWORD *)v49 = 136446466;
    v51 = v85;
    sub_10014FDF8(v47, v85, type metadata accessor for AssetDownloadStatus);
    v52 = String.init<A>(reflecting:)(v51, v15);
    v54 = v53;
    v92 = sub_10003D274(v52, v53, &v93);
    v86 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease(v54);
    sub_10003F970(v47, type metadata accessor for AssetDownloadStatus);
    *(_WORD *)(v49 + 12) = 2082;
    v55 = v15;
    v56 = v95;
    v57 = v96;
    sub_10003A834(v94, v95);
    v58 = *(uint64_t (**)(uint64_t, uint64_t))(v57 + 56);
    v59 = v57;
    v15 = v55;
    v60 = v58(v56, v59);
    v62 = v61;
    v92 = sub_10003D274(v60, v61, &v93);
    a1 = v86;
    a5 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease(v62);
    sub_10003D380(v94);
    _os_log_impl((void *)&_mh_execute_header, v46, v48, "URLSession delivered status update for download that does not exist. Status: %{public}s. Task description:%{public}s", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);

  }
  else
  {

    sub_10003F970(v47, type metadata accessor for AssetDownloadStatus);
    sub_10003D380(v94);
  }
  v63 = v88;
  sub_10014FDF8(a5, (uint64_t)v88, type metadata accessor for AssetDownloadStatus);
  if (swift_getEnumCaseMultiPayload(v63, v15) != 1)
    return sub_10003F970((uint64_t)v63, type metadata accessor for AssetDownloadStatus);

  v65 = static os_log_type_t.error.getter(v64);
  v66 = v65;
  v67 = static OS_os_log.downloads.getter(v65);
  sub_10000A520(a1, (uint64_t)v94);
  if (os_log_type_enabled(v67, v66))
  {
    v68 = (uint8_t *)swift_slowAlloc(12, -1);
    v69 = swift_slowAlloc(32, -1);
    v93 = v69;
    *(_DWORD *)v68 = 136446210;
    v70 = a1;
    v71 = v95;
    v72 = v96;
    sub_10003A834(v94, v95);
    v73 = *(uint64_t (**)(uint64_t, uint64_t))(v72 + 56);
    v74 = v72;
    a1 = v70;
    v75 = v73(v71, v74);
    v77 = v76;
    v92 = sub_10003D274(v75, v76, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v68 + 4, v68 + 12);
    swift_bridgeObjectRelease(v77);
    sub_10003D380(v94);
    _os_log_impl((void *)&_mh_execute_header, v67, v66, "Cancel untracked download. Task description:%{public}s", v68, 0xCu);
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v68, -1, -1);

  }
  else
  {

    sub_10003D380(v94);
  }
  v79 = *(_QWORD *)(a1 + 24);
  v80 = *(_QWORD *)(a1 + 32);
  sub_10003A834((_QWORD *)a1, v79);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 120))(v79, v80);
}

uint64_t sub_10033351C(uint64_t a1)
{
  return sub_100333538(a1, (uint64_t)&unk_1004C3F90, (uint64_t)sub_100340E00, (uint64_t)&unk_1004C3FA8);
}

uint64_t sub_100333538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(_QWORD *)&v4[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_delegateQueue];
  v16 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = v4;
  aBlock[4] = a3;
  v26 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = a4;
  v17 = _Block_copy(aBlock);
  swift_retain(a1);
  static DispatchQoS.unspecified.getter(v4);
  v24 = _swiftEmptyArrayStorage;
  v18 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10003F544((uint64_t *)&unk_10055B200);
  v20 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v19, v20, v9, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release(v26);
}

uint64_t MTLegacyDownloadProtocol.logDescription.getter(uint64_t a1)
{
  void *v1;
  void *v2;
  Swift::String v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  id v35;
  void *v36;
  uint64_t (*v37)@<X0>(uint64_t *@<X8>);
  uint64_t v38;
  Swift::String v39;
  void *object;
  Swift::String v41;
  id v42;
  void *v43;
  uint64_t (*v44)@<X0>(uint64_t *@<X8>);
  Swift::String v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  Swift::String v58;
  void *v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::String v64;
  void *v65;
  Swift::String v66;
  Swift::String v67;
  void *v68;
  Swift::String v69;
  id v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  Swift::String v75;
  Swift::String v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  Swift::String v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  Swift::String v88;
  uint64_t v89;
  Swift::String v90;
  void *v91;
  Swift::String v92;
  uint64_t (*v94)@<X0>(uint64_t *@<X8>);
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;

  v2 = v1;
  v96 = 0;
  v97 = 0xE000000000000000;
  _StringGuts.grow(_:)(376);
  v4._object = (void *)0x800000010043DE40;
  v4._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v4);
  v5 = objc_msgSend(v1, "podcastUuid");
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = Optional<A>.description.getter(v7, v9);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14._object = (void *)0x800000010043DE60;
  v14._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v14);
  v15 = objc_msgSend(v2, "episodeUuid");
  if (v15)
  {
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  v20 = Optional<A>.description.getter(v17, v19);
  v22 = v21;
  swift_bridgeObjectRelease(v19);
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v24._object = (void *)0x800000010043DE80;
  v24._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v24);
  v25 = objc_msgSend(v2, "episodeGuid");
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

  }
  else
  {
    v27 = 0;
    v29 = 0;
  }
  v30 = Optional<A>.description.getter(v27, v29);
  v32 = v31;
  swift_bridgeObjectRelease(v29);
  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v32);
  v34._object = (void *)0x800000010043DEA0;
  v34._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v34);
  v35 = objc_msgSend(v2, "storeItemId");
  v36 = v35;
  if (v35)
  {
    v37 = (uint64_t (*)@<X0>(uint64_t *@<X8>))objc_msgSend(v35, "longLongValue");

  }
  else
  {
    v37 = 0;
  }
  v94 = v37;
  LOBYTE(v95) = v36 == 0;
  v38 = sub_10003F544(&qword_100553EB8);
  v39._countAndFlagsBits = String.init<A>(describing:)(&v94, v38);
  object = v39._object;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(object);
  v41._countAndFlagsBits = 0xD000000000000022;
  v41._object = (void *)0x800000010043DEC0;
  String.append(_:)(v41);
  v42 = objc_msgSend(v2, "storeCollectionIdentifier", v94, v95);
  v43 = v42;
  if (v42)
  {
    v44 = (uint64_t (*)@<X0>(uint64_t *@<X8>))objc_msgSend(v42, "longLongValue");

  }
  else
  {
    v44 = 0;
  }
  v94 = v44;
  LOBYTE(v95) = v43 == 0;
  v45._countAndFlagsBits = String.init<A>(describing:)(&v94, v38);
  v46 = v45._object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v46);
  v47._object = (void *)0x800000010043DEF0;
  v47._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v47);
  v94 = (uint64_t (*)@<X0>(uint64_t *@<X8>))objc_msgSend(v2, "downloadBytes");
  v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v49 = v48._object;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v49);
  v50._countAndFlagsBits = 0xD000000000000017;
  v50._object = (void *)0x800000010043DF10;
  String.append(_:)(v50);
  v94 = (uint64_t (*)@<X0>(uint64_t *@<X8>))objc_msgSend(v2, "downloadBytes");
  v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v52 = v51._object;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v52);
  v53._countAndFlagsBits = 0xD000000000000018;
  v53._object = (void *)0x800000010043DF30;
  String.append(_:)(v53);
  v54._countAndFlagsBits = Double.description.getter(objc_msgSend(v2, "downloadProgress"));
  v55 = v54._object;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v55);
  v56._object = (void *)0x800000010043DF50;
  v56._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v56);
  v94 = (uint64_t (*)@<X0>(uint64_t *@<X8>))objc_msgSend(v2, "downloadPhase");
  type metadata accessor for MTEpisodeDownloadPhase(0);
  v58._countAndFlagsBits = String.init<A>(describing:)(&v94, v57);
  v59 = v58._object;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v59);
  v60._countAndFlagsBits = 0xD00000000000001CLL;
  v60._object = (void *)0x800000010043DF70;
  String.append(_:)(v60);
  v61 = swift_allocObject(&unk_1004C4148, 32, 7);
  *(_QWORD *)(v61 + 16) = a1;
  *(_QWORD *)(v61 + 24) = v2;
  v62 = swift_allocObject(&unk_1004C36C0, 32, 7);
  *(_QWORD *)(v62 + 16) = sub_100340FA4;
  *(_QWORD *)(v62 + 24) = v61;
  v94 = sub_10033F884;
  v95 = v62;
  swift_unknownObjectRetain(v2);
  v63 = sub_10003F544((uint64_t *)&unk_100564C10);
  v64._countAndFlagsBits = String.init<A>(describing:)(&v94, v63);
  v65 = v64._object;
  String.append(_:)(v64);
  swift_bridgeObjectRelease(v65);
  v66._countAndFlagsBits = 0xD00000000000001ELL;
  v66._object = (void *)0x800000010043DF90;
  String.append(_:)(v66);
  v67._countAndFlagsBits = Double.description.getter(objc_msgSend(v2, "downloadRemainingTime"));
  v68 = v67._object;
  String.append(_:)(v67);
  swift_bridgeObjectRelease(v68);
  v69._countAndFlagsBits = 0xD000000000000019;
  v69._object = (void *)0x800000010043DFB0;
  String.append(_:)(v69);
  v70 = objc_msgSend(v2, "downloadDescription");
  if (v70)
  {
    v71 = v70;
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v74 = v73;

  }
  else
  {
    v74 = (void *)0xE400000000000000;
    v72 = 1162760014;
  }
  v75._countAndFlagsBits = v72;
  v75._object = v74;
  String.append(_:)(v75);
  swift_bridgeObjectRelease(v74);
  v76._object = (void *)0x800000010043DFD0;
  v76._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v76);
  v77 = objc_msgSend(v2, "isPausable");
  v78 = v77 == 0;
  if (v77)
    v79 = 5457241;
  else
    v79 = 20302;
  if (v78)
    v80 = 0xE200000000000000;
  else
    v80 = 0xE300000000000000;
  v81 = v80;
  String.append(_:)(*(Swift::String *)&v79);
  swift_bridgeObjectRelease(v80);
  v82._countAndFlagsBits = 0xD000000000000012;
  v82._object = (void *)0x800000010043DFF0;
  String.append(_:)(v82);
  v83 = objc_msgSend(v2, "isPaused");
  v84 = v83 == 0;
  if (v83)
    v85 = 5457241;
  else
    v85 = 20302;
  if (v84)
    v86 = 0xE200000000000000;
  else
    v86 = 0xE300000000000000;
  v87 = v86;
  String.append(_:)(*(Swift::String *)&v85);
  swift_bridgeObjectRelease(v86);
  v88._object = (void *)0x800000010043E010;
  v88._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v88);
  v94 = (uint64_t (*)@<X0>(uint64_t *@<X8>))objc_msgSend(v2, "phase");
  type metadata accessor for LegacyDownloadPhase(0);
  v90._countAndFlagsBits = String.init<A>(describing:)(&v94, v89);
  v91 = v90._object;
  String.append(_:)(v90);
  swift_bridgeObjectRelease(v91);
  v92._countAndFlagsBits = 32010;
  v92._object = (void *)0xE200000000000000;
  String.append(_:)(v92);
  return v96;
}

uint64_t sub_100333E28(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(void), const char *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];

  v31 = a6;
  v11 = type metadata accessor for Logger(0);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v14);
  v16 = (const char **)((char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(id *)(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v16, a3, a1, v14);

  v18 = sub_1001D7DAC();
  sub_10003F970((uint64_t)v16, type metadata accessor for DownloadJob);
  v19 = *(id *)(a2 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_notifier);
  if (v19)
    v19 = objc_msgSend(v19, "_sendDelegateSelector:withDownload:", *a4, v18, v31);
  static Logger.downloads.getter(v19);
  v20 = swift_unknownObjectRetain_n(v18, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = a5();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v35[0] = v24;
    *(_DWORD *)v23 = 136315138;
    ObjectType = swift_getObjectType(v18, v25);
    v27 = MTLegacyDownloadProtocol.logDescription.getter(ObjectType);
    v29 = v28;
    v34 = sub_10003D274(v27, v28, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v23 + 4, v23 + 12);
    swift_unknownObjectRelease_n(v18, 2);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v31, v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
    swift_unknownObjectRelease(v18);

  }
  else
  {

    swift_unknownObjectRelease_n(v18, 3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v13, v33);
}

uint64_t sub_1003340AC(uint64_t a1)
{
  return sub_100334428(a1, (uint64_t)sub_10033F940, (uint64_t)&unk_1004C3E78, (uint64_t)sub_100340D18, (uint64_t)&unk_1004C3E90);
}

uint64_t sub_1003340D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];

  v4 = type metadata accessor for Logger(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v7);
  v9 = (const char **)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v11 = *(id *)(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v9, sub_10033F940, a1, v7);

  v12 = sub_1001D7DAC();
  v13 = sub_10003F970((uint64_t)v9, type metadata accessor for DownloadJob);
  v14 = *(void **)(a2 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_notifier);
  if (v14)
  {
    v33 = "downloadManagerDidRemoveDownloads:";
    v15 = sub_10003F544((uint64_t *)&unk_100553780);
    v16 = swift_allocObject(v15, 40, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1003CA250;
    v17 = *(id *)(a1 + v10);
    OS_dispatch_queue.sync<A>(execute:)(v9, sub_10033F940, a1, v7);

    v18 = sub_1001D7DAC();
    v19 = sub_10003F970((uint64_t)v9, type metadata accessor for DownloadJob);
    *(_QWORD *)(v16 + 32) = v18;
    v37[0] = v16;
    specialized Array._endMutation()(v19);
    v20 = v37[0];
    sub_10003F544((uint64_t *)&unk_100558020);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v20);
    objc_msgSend(v14, "_sendDelegateSelector:withDownloads:", v33, isa);

  }
  static Logger.downloads.getter(v13);
  v22 = swift_unknownObjectRetain_n(v12, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v37[0] = v26;
    *(_DWORD *)v25 = 136315138;
    ObjectType = swift_getObjectType(v12, v27);
    v29 = MTLegacyDownloadProtocol.logDescription.getter(ObjectType);
    v31 = v30;
    v36 = sub_10003D274(v29, v30, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v25 + 4, v25 + 12);
    swift_unknownObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Download pipeline did send notification for pipeline cancel: %s", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
    swift_unknownObjectRelease(v12);

  }
  else
  {

    swift_unknownObjectRelease_n(v12, 3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v6, v35);
}

uint64_t sub_100334404(uint64_t a1)
{
  return sub_100334428(a1, (uint64_t)sub_10033F940, (uint64_t)&unk_1004C3F40, (uint64_t)sub_100340D68, (uint64_t)&unk_1004C3F58);
}

uint64_t sub_100334428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v31 = a4;
  v32 = a5;
  v30 = a3;
  v7 = v5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v12 - 8);
  v34 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage];
  v19 = *(void **)(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  swift_retain(v18);
  v20 = v19;
  OS_dispatch_queue.sync<A>(execute:)(v17, a2, a1, v15);

  v21 = (_QWORD *)((char *)v17 + *(int *)(v15 + 20));
  v22 = *v21;
  v23 = (void *)v21[1];
  swift_bridgeObjectRetain(v23);
  sub_10003F970((uint64_t)v17, type metadata accessor for DownloadJob);
  sub_100379B70(v22, v23);
  swift_release(v18);
  swift_bridgeObjectRelease(v23);
  v24 = swift_allocObject(v30, 32, 7);
  *(_QWORD *)(v24 + 16) = a1;
  *(_QWORD *)(v24 + 24) = v7;
  aBlock[4] = v31;
  v38 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = v32;
  v25 = _Block_copy(aBlock);
  swift_retain(a1);
  static DispatchQoS.unspecified.getter(v7);
  v36 = _swiftEmptyArrayStorage;
  v26 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_10003F544((uint64_t *)&unk_10055B200);
  v28 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v27, v28, v9, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v34);
  return swift_release(v38);
}

uint64_t sub_1003346DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t (*v31)(char *, uint64_t);
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49[2];

  v4 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v45 - v8;
  v10 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(id *)(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v12, sub_10033F940, a1, v10);

  v14 = sub_1001D7DAC();
  v15 = (id)sub_10003F970((uint64_t)v12, type metadata accessor for DownloadJob);
  v16 = *(void **)(a2 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_notifier);
  if (v16)
    v15 = objc_msgSend(v16, "_sendDelegateSelector:withDownload:", "downloadManagerWillRemoveDownload:", v14);
  static Logger.downloads.getter(v15);
  v17 = swift_unknownObjectRetain_n(v14, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v47 = v7;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v45 = v4;
    v23 = v22;
    v49[0] = v22;
    *(_DWORD *)v21 = 136315138;
    ObjectType = swift_getObjectType(v14, v24);
    v26 = MTLegacyDownloadProtocol.logDescription.getter(ObjectType);
    v28 = v27;
    v48 = sub_10003D274(v26, v27, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v21 + 4, v21 + 12);
    swift_unknownObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Download pipeline did send notification for pipeline removal: %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v29 = v23;
    v4 = v45;
    swift_slowDealloc(v29, -1, -1);
    v30 = v21;
    v7 = v47;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n(v14, 2);
  }
  v31 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
  v32 = (id)v31(v9, v4);
  if (v16)
    v32 = objc_msgSend(v16, "_sendDelegateSelector:withDownload:", "downloadManagerDidUpdateDownload:", v14);
  static Logger.downloads.getter(v32);
  v33 = swift_unknownObjectRetain_n(v14, 2);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v49[0] = v37;
    *(_DWORD *)v36 = 136315138;
    v39 = swift_getObjectType(v14, v38);
    v40 = MTLegacyDownloadProtocol.logDescription.getter(v39);
    v42 = v41;
    v48 = sub_10003D274(v40, v41, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v36 + 4, v36 + 12);
    swift_unknownObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Download pipeline did send notification for pipeline update: %s", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
    swift_unknownObjectRelease(v14);

    v43 = v47;
  }
  else
  {

    swift_unknownObjectRelease_n(v14, 3);
    v43 = v7;
  }
  return v31(v43, v4);
}

void sub_100334AFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  char *v11;
  _QWORD v12[6];
  int v13;
  uint64_t v14;

  v5 = v4;
  v13 = a4;
  v12[4] = a3;
  v12[5] = a2;
  v7 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100334428(a1, (uint64_t)sub_10033F940, (uint64_t)&unk_1004C3F40, (uint64_t)sub_100340D68, (uint64_t)&unk_1004C3F58);
  v10 = *(id *)(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v9, sub_10033F940, a1, v7);

  swift_bridgeObjectRetain(*(_QWORD *)((char *)v9 + *(int *)(v7 + 32) + 8));
  sub_10003F970((uint64_t)v9, type metadata accessor for DownloadJob);
  v14 = v5;
  v11 = (char *)&loc_100334C3C
      + *((int *)qword_100335868
        + *(unsigned __int8 *)sub_10003A834((_QWORD *)(v5+ OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_downloaderConfiguration), *(_QWORD *)(v5+ OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_downloaderConfiguration+ 24)));
  __asm { BR              X10 }
}

uint64_t sub_100334C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(__n128);
  uint64_t v55;
  __n128 v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;

  if (v1 == 0xD00000000000002DLL && v0 == 0x800000010042DE50)
  {
    swift_bridgeObjectRelease_n(v0, 2);
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v0, 0xD00000000000002DLL, 0x800000010042DE50, 0);
    swift_bridgeObjectRelease(v0);
    swift_bridgeObjectRelease(0x800000010042DE50);
    if ((v8 & 1) == 0)
    {
      v9 = 0;
      v10 = &OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_systemEpisodeStorage;
      goto LABEL_9;
    }
  }
  v9 = 1;
  v10 = &OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userEpisodeStorage;
LABEL_9:
  v11 = *(_DWORD *)(v6 - 300);
  v12 = *(_QWORD *)(*(_QWORD *)(v6 - 296) + *v10);
  v13 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8Podcasts11JobPipeline_type);
  if (!(v11 >> 6))
  {
    if (((v13 | v9 ^ 1) & 1) == 0)
    {
      swift_unknownObjectRetain(v12);
      v34 = sub_1001500D0(*(_QWORD *)(v6 - 312), *(_QWORD *)(v6 - 320), v11);
      *(_DWORD *)(v6 - 332) = static os_log_type_t.error.getter(v34);
      v35 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      *(_QWORD *)(v6 - 344) = static OS_os_log.downloads.getter(v35);
      v36 = sub_10003F544(&qword_1005559A0);
      v37 = swift_allocObject(v36, 112, 7);
      *(_OWORD *)(v37 + 16) = xmmword_1003CA220;
      v38 = *(id *)(v3 + v2);
      OS_dispatch_queue.sync<A>(execute:)(v4, sub_10033F940, v3, v5);

      v39 = (_QWORD *)((char *)v4 + *(int *)(v5 + 20));
      v41 = *v39;
      v40 = v39[1];
      swift_bridgeObjectRetain(v40);
      sub_10003F970((uint64_t)v4, type metadata accessor for DownloadJob);
      *(_QWORD *)(v6 - 328) = v12;
      *(_QWORD *)(v37 + 56) = &type metadata for String;
      v42 = sub_10003E198();
      *(_QWORD *)(v37 + 64) = v42;
      *(_QWORD *)(v37 + 32) = v41;
      *(_QWORD *)(v37 + 40) = v40;
      v43 = *(_QWORD *)(v6 - 312);
      swift_getErrorValue(v43, v6 - 176, v6 - 200);
      v44 = Error.localizedDescription.getter(*(_QWORD *)(v6 - 192), *(_QWORD *)(v6 - 184));
      *(_QWORD *)(v37 + 96) = &type metadata for String;
      *(_QWORD *)(v37 + 104) = v42;
      *(_QWORD *)(v37 + 72) = v44;
      *(_QWORD *)(v37 + 80) = v45;
      v46 = *(void **)(v6 - 344);
      os_log(_:dso:log:_:_:)(*(unsigned int *)(v6 - 332), &_mh_execute_header, v46, "Download failed due to network error, uuid: %{public}s, error: %{public}s.", 74, 2, v37);

      swift_bridgeObjectRelease(v37);
      v47 = *(id *)(v3 + v2);
      OS_dispatch_queue.sync<A>(execute:)(v4, sub_10033F940, v3, v5);

      v48 = (_QWORD *)((char *)v4 + *(int *)(v5 + 20));
      v50 = *v48;
      v49 = v48[1];
      swift_bridgeObjectRetain(v49);
      sub_10003F970((uint64_t)v4, type metadata accessor for DownloadJob);
      v51 = swift_allocObject(&unk_1004C3648, 24, 7);
      swift_unknownObjectWeakInit(v51 + 16, *(_QWORD *)(v6 - 296));
      v52 = swift_allocObject(&unk_1004C3EC8, 32, 7);
      *(_QWORD *)(v52 + 16) = v51;
      *(_QWORD *)(v52 + 24) = v3;
      v53 = *(_QWORD *)(v6 - 328);
      v54 = *(uint64_t (**)(__n128))(v53 + 16);
      v55 = *(_QWORD *)(v53 + 24);
      swift_retain();
      swift_retain();
      v56 = swift_retain();
      v57 = (void *)v54(v56);
      swift_release(v55);
      v58 = (_QWORD *)swift_allocObject(&unk_1004C3EF0, 56, 7);
      v58[2] = v57;
      v58[3] = v50;
      v58[4] = v49;
      v58[5] = sub_100340D24;
      v58[6] = v52;
      *(_QWORD *)(v6 - 224) = sub_100340D40;
      *(_QWORD *)(v6 - 216) = v58;
      *(_QWORD *)(v6 - 256) = _NSConcreteStackBlock;
      *(_QWORD *)(v6 - 248) = 1107296256;
      *(_QWORD *)(v6 - 240) = sub_100027AF8;
      *(_QWORD *)(v6 - 232) = &unk_1004C3F08;
      v59 = _Block_copy((const void *)(v6 - 256));
      v60 = *(_QWORD *)(v6 - 216);
      swift_bridgeObjectRetain(v49);
      v61 = v57;
      swift_retain();
      objc_msgSend(v61, "performBlock:", v59, swift_release(v60).n128_f64[0]);
      _Block_release(v59);
      swift_bridgeObjectRelease(v49);
      swift_release(v51);
      swift_release(v52);
      swift_unknownObjectRelease(v53);

      return sub_100150088(v43, *(_QWORD *)(v6 - 320), *(_DWORD *)(v6 - 300));
    }
    goto LABEL_22;
  }
  if (v11 >> 6 != 1)
  {
    if (((v13 | v9 ^ 1) & 1) == 0)
    {
      swift_unknownObjectRetain(v12);
      v81 = *(_QWORD *)(v6 - 312);
      v82 = *(_QWORD *)(v6 - 320);
      v83 = sub_1001500D0(v81, v82, v11);
      v84 = static os_log_type_t.error.getter(v83);
      v85 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v86 = v11;
      v87 = (void *)static OS_os_log.downloads.getter(v85);
      v88 = sub_10003F544(&qword_1005559A0);
      v89 = swift_allocObject(v88, 72, 7);
      *(_OWORD *)(v89 + 16) = xmmword_1003CA200;
      swift_getErrorValue(v81, v6 - 104, v6 - 128);
      v90 = Error.localizedDescription.getter(*(_QWORD *)(v6 - 120), *(_QWORD *)(v6 - 112));
      v91 = v12;
      v93 = v92;
      *(_QWORD *)(v89 + 56) = &type metadata for String;
      *(_QWORD *)(v89 + 64) = sub_10003E198();
      *(_QWORD *)(v89 + 32) = v90;
      *(_QWORD *)(v89 + 40) = v93;
      os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v87, "Download failed due to error: %{public}s.", 41, 2, v89);

      swift_bridgeObjectRelease(v89);
      sub_100007A64(*(_QWORD *)(v6 - 296) + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, v6 - 168, &qword_1005540B8);
      v94 = *(_QWORD *)(v6 - 144);
      if (v94)
      {
        sub_10003A834((_QWORD *)(v6 - 168), v94);
        *(_QWORD *)(v6 - 256) = 1;
        *(_OWORD *)(v6 - 248) = 0u;
        *(_OWORD *)(v6 - 232) = 0u;
        *(_BYTE *)(v6 - 216) = 2;
        sub_1001B109C((__int128 *)(v6 - 256));
        sub_100150088(v81, v82, v86);
        v95 = v91;
LABEL_34:
        swift_unknownObjectRelease(v95);
        return sub_10003D380((_QWORD *)(v6 - 168));
      }
      sub_100150088(v81, v82, v86);
      swift_unknownObjectRelease(v91);
      return sub_100007A28(v6 - 168, &qword_1005540B8);
    }
LABEL_22:
    v63 = swift_unknownObjectRetain(v12);
    v64 = static os_log_type_t.error.getter(v63);
    v65 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v66 = (void *)static OS_os_log.downloads.getter(v65);
    v67 = sub_10003F544(&qword_1005559A0);
    v68 = v12;
    v69 = swift_allocObject(v67, 152, 7);
    *(_OWORD *)(v69 + 16) = xmmword_1003CA240;
    v70 = sub_10003E198();
    v71 = v70;
    v72 = 28526;
    *(_QWORD *)(v69 + 56) = &type metadata for String;
    *(_QWORD *)(v69 + 64) = v70;
    if (v9)
      v73 = 7562617;
    else
      v73 = 28526;
    if (v9)
      v74 = 0xE300000000000000;
    else
      v74 = 0xE200000000000000;
    *(_QWORD *)(v69 + 32) = v73;
    *(_QWORD *)(v69 + 40) = v74;
    if (v13)
    {
      v72 = 7562617;
      v75 = 0xE300000000000000;
    }
    else
    {
      v75 = 0xE200000000000000;
    }
    *(_QWORD *)(v69 + 96) = &type metadata for String;
    *(_QWORD *)(v69 + 104) = v70;
    *(_QWORD *)(v69 + 72) = v72;
    *(_QWORD *)(v69 + 80) = v75;
    v76 = *(_QWORD *)(v6 - 320);
    *(_QWORD *)(v6 - 256) = *(_QWORD *)(v6 - 312);
    *(_QWORD *)(v6 - 248) = v76;
    *(_BYTE *)(v6 - 240) = v11;
    v77 = sub_10014FEE8();
    v78 = Error.localizedDescription.getter(&type metadata for PipelineError, v77);
    *(_QWORD *)(v69 + 136) = &type metadata for String;
    *(_QWORD *)(v69 + 144) = v71;
    *(_QWORD *)(v69 + 112) = v78;
    *(_QWORD *)(v69 + 120) = v79;
    os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v66, "Download failed, do nothing. userInitiated %{public}s, restored: %{public}s error: %{public}s.", 94, 2, v69);

    swift_bridgeObjectRelease(v69);
    v80 = v68;
    return swift_unknownObjectRelease(v80);
  }
  if ((v11 & 0x3F) == 0)
  {
    swift_unknownObjectRetain(v12);
    v96 = static os_log_type_t.default.getter();
    v97 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v98 = (void *)static OS_os_log.downloads.getter(v97);
    v99 = sub_10003F544(&qword_1005559A0);
    v100 = swift_allocObject(v99, 72, 7);
    *(_OWORD *)(v100 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v100 + 56) = &type metadata for Int64;
    *(_QWORD *)(v100 + 64) = &protocol witness table for Int64;
    *(_QWORD *)(v100 + 32) = *(_QWORD *)(v6 - 312);
    os_log(_:dso:log:_:_:)(v96, &_mh_execute_header, v98, "Cellular download has been cancelled during preflight validation phase for episode size %d.", v113);

    swift_bridgeObjectRelease(v100);
LABEL_47:
    v80 = v12;
    return swift_unknownObjectRelease(v80);
  }
  if ((*(_DWORD *)(v6 - 300) & 0x3F) != 1)
  {
    if (*(_OWORD *)(v6 - 320) != 0)
    {
      if (*(_QWORD *)(v6 - 312) ^ 1 | *(_QWORD *)(v6 - 320))
      {
        swift_unknownObjectRetain(v12);
        v107 = static os_log_type_t.default.getter();
        v108 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
        v103 = (void *)static OS_os_log.downloads.getter(v108);
        os_log(_:dso:log:_:_:)(v107, &_mh_execute_header, v103, "Unable to download because no url was provided.", 47, 2, _swiftEmptyArrayStorage);
      }
      else
      {
        swift_unknownObjectRetain(v12);
        v101 = static os_log_type_t.default.getter();
        v102 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
        v103 = (void *)static OS_os_log.downloads.getter(v102);
        os_log(_:dso:log:_:_:)(v101, &_mh_execute_header, v103, "Download has been cancelled during preflight validation phase.", 62, 2, _swiftEmptyArrayStorage);
      }

      goto LABEL_47;
    }
    sub_100007A64(*(_QWORD *)(v6 - 296) + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, v6 - 168, &qword_1005540B8);
    v106 = *(_QWORD *)(v6 - 144);
    if (v106)
    {
      sub_10003A834((_QWORD *)(v6 - 168), v106);
      *(_OWORD *)(v6 - 256) = 0u;
      *(_OWORD *)(v6 - 240) = 0u;
      *(_QWORD *)(v6 - 224) = 0;
      *(_BYTE *)(v6 - 216) = 2;
      swift_unknownObjectRetain(v12);
      sub_1001B109C((__int128 *)(v6 - 256));
      v95 = v12;
      goto LABEL_34;
    }
    return sub_100007A28(v6 - 168, &qword_1005540B8);
  }
  v14 = *(_QWORD *)(v6 - 312);
  v15 = *(_QWORD *)(v6 - 320);
  sub_1001500D0(v14, v15, *(_DWORD *)(v6 - 300));
  swift_unknownObjectRetain(v12);
  sub_1001500D0(v14, v15, v11);
  *(_DWORD *)(v6 - 332) = static os_log_type_t.default.getter();
  v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v17 = static OS_os_log.downloads.getter(v16);
  *(_QWORD *)(v6 - 328) = v12;
  v18 = (void *)v17;
  v19 = sub_10003F544(&qword_1005559A0);
  v20 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1003CA200;
  v21 = *(id *)(v3 + v2);
  OS_dispatch_queue.sync<A>(execute:)(v4, sub_10033F940, v3, v5);

  v22 = (_QWORD *)((char *)v4 + *(int *)(v5 + 20));
  v24 = *v22;
  v23 = v22[1];
  swift_bridgeObjectRetain(v23);
  sub_10003F970((uint64_t)v4, type metadata accessor for DownloadJob);
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = sub_10003E198();
  *(_QWORD *)(v20 + 32) = v24;
  *(_QWORD *)(v20 + 40) = v23;
  os_log(_:dso:log:_:_:)(*(unsigned int *)(v6 - 332), &_mh_execute_header, v18, "Error downloading episode with subscription and uuid %d.", v113);

  swift_bridgeObjectRelease(v20);
  if ((v9 & 1) == 0)
  {
    v104 = *(_QWORD *)(v6 - 320);
    v105 = *(_DWORD *)(v6 - 300);
    sub_100150088(v14, v104, v105);
    sub_100150088(v14, v104, v105);
    v80 = *(_QWORD *)(v6 - 328);
    return swift_unknownObjectRelease(v80);
  }
  v25 = *(_QWORD *)(v6 - 328);
  v26 = (void *)_convertErrorToNSError(_:)(v14);
  v27 = objc_msgSend(v26, "ams_underlyingErrorWithDomain:code:", AKAppleIDAuthenticationErrorDomain, -7003);

  v28 = v14;
  if (v27)

  swift_getErrorValue(v14, v6 - 264, v6 - 288);
  v29 = sub_100335878(*(_QWORD *)(v6 - 280), *(_QWORD *)(v6 - 272));
  v30 = v25;
  v31 = *(_QWORD *)(v6 - 320);
  if ((v29 & 1) != 0)
  {
    sub_100007A64(*(_QWORD *)(v6 - 296) + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, v6 - 168, &qword_1005540B8);
    v32 = *(_QWORD *)(v6 - 144);
    if (v32)
    {
      sub_10003A834((_QWORD *)(v6 - 168), v32);
      v33 = 3;
LABEL_53:
      *(_QWORD *)(v6 - 256) = v33;
      *(_OWORD *)(v6 - 248) = 0u;
      *(_OWORD *)(v6 - 232) = 0u;
      *(_BYTE *)(v6 - 216) = 2;
      sub_1001B109C((__int128 *)(v6 - 256));
      swift_unknownObjectRelease(v30);
      v111 = *(_DWORD *)(v6 - 300);
      sub_100150088(v28, v31, v111);
      sub_100150088(v28, v31, v111);
      return sub_10003D380((_QWORD *)(v6 - 168));
    }
LABEL_54:
    swift_unknownObjectRelease(v30);
    v112 = *(_DWORD *)(v6 - 300);
    sub_100150088(v28, v31, v112);
    sub_100150088(v28, v31, v112);
    return sub_100007A28(v6 - 168, &qword_1005540B8);
  }
  if (!v27)
  {
    sub_100007A64(*(_QWORD *)(v6 - 296) + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, v6 - 168, &qword_1005540B8);
    v110 = *(_QWORD *)(v6 - 144);
    if (v110)
    {
      sub_10003A834((_QWORD *)(v6 - 168), v110);
      v33 = 1;
      goto LABEL_53;
    }
    goto LABEL_54;
  }
  swift_unknownObjectRelease(v30);
  v109 = *(_DWORD *)(v6 - 300);
  sub_100150088(v28, v31, v109);
  return sub_100150088(v28, v31, v109);
}

uint64_t sub_100335878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  v8 = _getErrorEmbeddedNSError<A>(_:)(v6, a1, a2);
  if (v8)
  {
    v9 = v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    v9 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a1);
  }
  v11 = (void *)_convertErrorToNSError(_:)(v9);
  swift_errorRelease(v9);
  v12 = objc_msgSend(v11, "domain");

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  type metadata accessor for StandardKeyRequestHandler(0);
  v16 = static StandardKeyRequestHandler.keyRequestLicenseErrorDomain.getter();
  if (v13 == v16 && v15 == v17)
  {
    v20 = 1;
    v19 = v15;
  }
  else
  {
    v19 = v17;
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v17, 0);
  }
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v19);
  return v20 & 1;
}

uint64_t sub_1003359EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Strong;
  void *v37;
  uint64_t v38;
  uint64_t inited;
  id v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[48];
  _BYTE v52[32];
  _BYTE v53[48];
  _BYTE v54[24];
  _QWORD v55[3];
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  double (*v59)(uint64_t);
  uint64_t v60;
  char v61;

  v10 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v12 = (_QWORD *)((char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a4 + 16;
  if ((a3 & 1) != 0)
  {
    v50 = a2;
    v26 = swift_errorRetain();
    v27 = static os_log_type_t.error.getter(v26);
    v28 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v29 = (void *)static OS_os_log.downloads.getter(v28);
    v30 = sub_10003F544(&qword_1005559A0);
    v31 = swift_allocObject(v30, 72, 7);
    v49 = xmmword_1003CA200;
    *(_OWORD *)(v31 + 16) = xmmword_1003CA200;
    *(_QWORD *)&v57 = a1;
    v32 = sub_1001E4588();
    v33 = Error.localizedDescription.getter(&type metadata for EpisodeStorageError, v32);
    v35 = v34;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = sub_10003E198();
    *(_QWORD *)(v31 + 32) = v33;
    *(_QWORD *)(v31 + 40) = v35;
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v29, "Failed to fetch episode title while preparing user alert, error %{public}s", 74, 2, v31);

    swift_bridgeObjectRelease(v31);
    swift_beginAccess(v13, v54, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v13);
    if (!Strong)
      return sub_100340BC4(a1, v50, 1);
    v37 = (void *)Strong;
    sub_100007A64(Strong + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, (uint64_t)v55, &qword_1005540B8);

    if (v56)
    {
      sub_10003A834(v55, v56);
      v38 = sub_10003F544((uint64_t *)&unk_1005588B0);
      inited = swift_initStackObject(v38, v53);
      *(_OWORD *)(inited + 16) = v49;
      v40 = *(id *)(a5 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
      OS_dispatch_queue.sync<A>(execute:)(v12, sub_10033F940, a5, v10);

      v41 = (_QWORD *)((char *)v12 + *(int *)(v10 + 20));
      v43 = *v41;
      v42 = v41[1];
      swift_bridgeObjectRetain(v42);
      sub_10003F970((uint64_t)v12, type metadata accessor for DownloadJob);
      *(_QWORD *)(inited + 32) = v43;
      *(_QWORD *)(inited + 40) = v42;
      v22 = sub_10002B070(inited);
      swift_setDeallocating(inited);
      swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
      v44 = swift_allocObject(&unk_1004C3648, 24, 7);
      swift_beginAccess(v13, v52, 0, 0);
      v45 = (void *)swift_unknownObjectWeakLoadStrong(v13);
      swift_unknownObjectWeakInit(v44 + 16, v45);

      v57 = 0uLL;
      v58 = v22;
      v59 = sub_100340D4C;
      v60 = v44;
      v61 = 0;
      swift_retain();
      sub_1001B109C(&v57);
      sub_100340BC4(a1, v50, 1);
      v25 = v44;
      goto LABEL_8;
    }
    v46 = a1;
    v47 = v50;
    v48 = 1;
  }
  else
  {
    swift_beginAccess(a4 + 16, v54, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(a4 + 16);
    if (!result)
      return result;
    v15 = (void *)result;
    sub_100007A64(result + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter, (uint64_t)v55, &qword_1005540B8);
    sub_100150540(a1, a2, 0);

    if (v56)
    {
      sub_10003A834(v55, v56);
      v16 = sub_10003F544((uint64_t *)&unk_1005588B0);
      v17 = swift_initStackObject(v16, v51);
      *(_OWORD *)(v17 + 16) = xmmword_1003CA200;
      v18 = *(id *)(a5 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
      OS_dispatch_queue.sync<A>(execute:)(v12, sub_10033F940, a5, v10);

      v19 = (_QWORD *)((char *)v12 + *(int *)(v10 + 20));
      v20 = *v19;
      v21 = v19[1];
      swift_bridgeObjectRetain(v21);
      sub_10003F970((uint64_t)v12, type metadata accessor for DownloadJob);
      *(_QWORD *)(v17 + 32) = v20;
      *(_QWORD *)(v17 + 40) = v21;
      v22 = sub_10002B070(v17);
      swift_setDeallocating(v17);
      swift_arrayDestroy(v17 + 32, *(_QWORD *)(v17 + 16), &type metadata for String);
      v23 = swift_allocObject(&unk_1004C3648, 24, 7);
      swift_beginAccess(v13, v52, 0, 0);
      v24 = (void *)swift_unknownObjectWeakLoadStrong(v13);
      swift_unknownObjectWeakInit(v23 + 16, v24);

      *(_QWORD *)&v57 = a1;
      *((_QWORD *)&v57 + 1) = a2;
      v58 = v22;
      v59 = sub_100340D4C;
      v60 = v23;
      v61 = 0;
      swift_retain();
      sub_1001B109C(&v57);
      sub_100340BC4(a1, a2, 0);
      v25 = v23;
LABEL_8:
      swift_release_n(v25, 2);
      swift_bridgeObjectRelease(v22);
      return sub_10003D380(v55);
    }
    v46 = a1;
    v47 = a2;
    v48 = 0;
  }
  sub_100340BC4(v46, v47, v48);
  return sub_100007A28((uint64_t)v55, &qword_1005540B8);
}

double sub_100335F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  int v11;

  v4 = static os_log_type_t.default.getter();
  v5 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v6 = (void *)static OS_os_log.downloads.getter(v5);
  v7 = sub_10003F544(&qword_1005559A0);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1003CA200;
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v8 + 56) = &type metadata for Int;
  *(_QWORD *)(v8 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v8 + 32) = v9;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v6, "Retry %d episode downloads after prior network error.", v11);

  swift_bridgeObjectRelease(v8);
  swift_retain();
  sub_100340684(a1, a2);
  *(_QWORD *)&result = swift_release(a2).n128_u64[0];
  return result;
}

void EpisodeDownloadsManager.restoreDownloadedEpisodes(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  id v18;
  _QWORD v19[5];
  _QWORD *v20;

  v4 = v3;
  v8 = static os_log_type_t.default.getter();
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v10 = (void *)static OS_os_log.downloads.getter(v9);
  v11 = sub_10003F544(&qword_1005559A0);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v12 + 56) = &type metadata for Int;
  *(_QWORD *)(v12 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v12 + 32) = v13;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v10, "Add restore downloads for %d episodes", LODWORD(v19[0]));

  swift_bridgeObjectRelease(v12);
  v14 = sub_10002BE98();
  v15 = (_QWORD *)swift_allocObject(&unk_1004C36E8, 48, 7);
  v15[2] = v4;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  v19[4] = sub_10033F8B0;
  v20 = v15;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100027AF8;
  v19[3] = &unk_1004C3700;
  v16 = _Block_copy(v19);
  v17 = v20;
  v18 = v4;
  swift_bridgeObjectRetain(a1);
  sub_10002CA20(a2, a3);
  objc_msgSend(v14, "addOperationWithBlock:", v16, swift_release(v17).n128_f64[0]);
  _Block_release(v16);

}

Swift::Void __swiftcall EpisodeDownloadsManager.downloadEpisode(_:isFromSaving:)(Swift::String _, Swift::Bool isFromSaving)
{
  void *v2;
  void *v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  _QWORD v18[5];
  uint64_t v19;

  v3 = v2;
  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v7 = static os_log_type_t.default.getter();
  v8 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v9 = (void *)static OS_os_log.downloads.getter(v8);
  v10 = sub_10003F544(&qword_1005559A0);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_10003E198();
  *(_QWORD *)(v11 + 32) = countAndFlagsBits;
  *(_QWORD *)(v11 + 40) = object;
  *(_QWORD *)&v12 = swift_bridgeObjectRetain(object).n128_u64[0];
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v9, "Add user initiated download for episode %{public}s", 50, 2, v11, v12);

  swift_bridgeObjectRelease(v11);
  v13 = sub_10002BE98();
  v14 = swift_allocObject(&unk_1004C3738, 41, 7);
  *(_QWORD *)(v14 + 16) = v3;
  *(_QWORD *)(v14 + 24) = countAndFlagsBits;
  *(_QWORD *)(v14 + 32) = object;
  *(_BYTE *)(v14 + 40) = isFromSaving;
  v18[4] = sub_10033F8BC;
  v19 = v14;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_100027AF8;
  v18[3] = &unk_1004C3750;
  v15 = _Block_copy(v18);
  v16 = v19;
  swift_bridgeObjectRetain(object);
  v17 = v3;
  objc_msgSend(v13, "addOperationWithBlock:", v15, swift_release(v16).n128_f64[0]);
  _Block_release(v15);

}

double sub_1003363DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  double result;

  v7 = swift_allocObject(&unk_1004C40D0, 33, 7);
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  *(_BYTE *)(v7 + 32) = a4;
  swift_bridgeObjectRetain(a3);
  sub_10032DCD8(a2, a3, sub_100340F34);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

void sub_10033645C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[5];
  uint64_t v14;

  if ((sub_10029113C(a2, a3, a1) & 1) == 0)
  {
    v7 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
    v8 = objc_msgSend(v7, "mainOrPrivateContext");

    v9 = swift_allocObject(&unk_1004C40F8, 41, 7);
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(v9 + 24) = a2;
    *(_QWORD *)(v9 + 32) = a3;
    *(_BYTE *)(v9 + 40) = a4 & 1;
    v13[4] = sub_100340F70;
    v14 = v9;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_100027AF8;
    v13[3] = &unk_1004C4110;
    v10 = _Block_copy(v13);
    v11 = v14;
    v12 = v8;
    swift_bridgeObjectRetain(a3);
    objc_msgSend(v12, "performBlockAndWaitWithSave:", v10, swift_release(v11).n128_f64[0]);
    _Block_release(v10);

  }
}

void sub_100336590(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  NSString v6;
  uint64_t v7;
  id v8;

  v6 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(a1, "episodeForUuid:", v6);

  if (v8)
  {
    if ((a4 & 1) != 0)
      v7 = 4;
    else
      v7 = 2;
    objc_msgSend(v8, "setDownloadBehavior:", v7);

  }
}

void EpisodeDownloadsManager.addEpisodeAutoDownloads(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  os_log_type_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t aBlock[5];
  _QWORD *v27;

  v4 = v3;
  v8 = static os_log_type_t.default.getter();
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v10 = static OS_os_log.downloads.getter(v9);
  swift_bridgeObjectRetain(a1);
  v11 = v8;
  if (os_log_type_enabled(v10, v8))
  {
    swift_bridgeObjectRetain(a1);
    v12 = swift_slowAlloc(22, -1);
    v24 = a3;
    v13 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 134349314;
    v25 = *(_QWORD *)(a1 + 16);
    aBlock[0] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, aBlock, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2082;
    swift_bridgeObjectRetain(a1);
    v15 = Set.description.getter(v14, &type metadata for String, &protocol witness table for String);
    v17 = v16;
    swift_bridgeObjectRelease(a1);
    v25 = sub_10003D274(v15, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, aBlock, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Add auto downloads for %{public}ld episodes: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    v18 = v13;
    a3 = v24;
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(a1);
  }

  v19 = sub_10002BE98();
  v20 = (_QWORD *)swift_allocObject(&unk_1004C3788, 48, 7);
  v20[2] = v4;
  v20[3] = a1;
  v20[4] = a2;
  v20[5] = a3;
  aBlock[4] = (uint64_t)sub_10033F90C;
  v27 = v20;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100027AF8;
  aBlock[3] = (uint64_t)&unk_1004C37A0;
  v21 = _Block_copy(aBlock);
  v22 = v27;
  swift_bridgeObjectRetain(a1);
  v23 = v4;
  sub_10002CA20(a2, a3);
  objc_msgSend(v19, "addOperationWithBlock:", v21, swift_release(v22).n128_f64[0]);
  _Block_release(v21);

}

Swift::Bool __swiftcall EpisodeDownloadsManager.resumeOrPauseEpisodeDownload(withUuid:)(Swift::String withUuid)
{
  uint64_t v1;
  void *object;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t countAndFlagsBits;
  char v24[24];

  object = withUuid._object;
  countAndFlagsBits = withUuid._countAndFlagsBits;
  v3 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage);
  objc_msgSend(*(id *)(v6 + 16), "lock", swift_retain().n128_f64[0]);
  swift_beginAccess(v6 + 24, v24, 0, 0);
  v7 = *(_QWORD *)(v6 + 24);
  if ((unint64_t)v7 >> 62)
    goto LABEL_21;
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v6 + 24), 2);
  swift_bridgeObjectRetain(object);
  while (v8)
  {
    v20 = v6;
    v21 = v7;
    v22 = v7 & 0xC000000000000001;
    v9 = 4;
    while (1)
    {
      v6 = v9 - 4;
      if (!v22)
        break;
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v7);
      v7 = v9 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_20;
LABEL_9:
      v11 = *(id *)(v10 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
      OS_dispatch_queue.sync<A>(execute:)(v5, sub_10033F940, v10, v3);

      v12 = (_QWORD *)((char *)v5 + *(int *)(v3 + 20));
      v13 = *v12;
      v14 = (void *)v12[1];
      swift_bridgeObjectRetain(v14);
      sub_10003F970((uint64_t)v5, type metadata accessor for DownloadJob);
      v15 = v13 == countAndFlagsBits && v14 == object;
      if (v15)
      {
        v7 = v21;
        swift_bridgeObjectRelease(v21);
        v17 = (uint64_t)object;
LABEL_19:
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v17);
        v6 = v20;
        goto LABEL_26;
      }
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, countAndFlagsBits, object, 0);
      swift_bridgeObjectRelease(v14);
      if ((v16 & 1) != 0)
      {
        v7 = v21;
        v17 = v21;
        goto LABEL_19;
      }
      swift_release(v10);
      ++v9;
      v15 = v7 == v8;
      v7 = v21;
      if (v15)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v7);
        v10 = 0;
        v6 = v20;
        goto LABEL_26;
      }
    }
    v10 = *(_QWORD *)(v7 + 8 * v9);
    swift_retain();
    v7 = v9 - 3;
    if (!__OFADD__(v6, 1))
      goto LABEL_9;
LABEL_20:
    __break(1u);
LABEL_21:
    if (v7 < 0)
      v18 = v7;
    else
      v18 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v7, 2);
    swift_bridgeObjectRetain(object);
    v8 = _CocoaArrayWrapper.endIndex.getter(v18);
  }
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v7);
  v10 = 0;
LABEL_26:
  objc_msgSend(*(id *)(v6 + 16), "unlock", swift_bridgeObjectRelease(v7).n128_f64[0]);
  swift_release(v6);
  if (v10)
  {
    sub_100142508();
    swift_release(v10);
  }
  return v10 != 0;
}

Swift::Void __swiftcall EpisodeDownloadsManager.cancelDownloads(forEpisodeUuid:userInitiated:)(Swift::String forEpisodeUuid, Swift::Bool userInitiated)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;

  object = forEpisodeUuid._object;
  countAndFlagsBits = forEpisodeUuid._countAndFlagsBits;
  v5 = sub_10002BE98();
  v6 = swift_allocObject(&unk_1004C3648, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16);
  v7 = swift_allocObject(&unk_1004C37D8, 41, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = countAndFlagsBits;
  *(_QWORD *)(v7 + 32) = object;
  *(_BYTE *)(v7 + 40) = userInitiated;
  v10[4] = sub_10033F95C;
  v11 = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100027AF8;
  v10[3] = &unk_1004C37F0;
  v8 = _Block_copy(v10);
  v9 = v11;
  swift_bridgeObjectRetain(object);
  objc_msgSend(v5, "addOperationWithBlock:", v8, swift_release(v9).n128_f64[0]);
  _Block_release(v8);

}

void *EpisodeDownloadsManager.cancelAllDownloads(userInitiated:)(char a1)
{
  char *v1;
  char *v2;
  os_log_type_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v12;
  void *v13;

  v2 = v1;
  v4 = static os_log_type_t.default.getter();
  v5 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v6 = static OS_os_log.downloads.getter(v5);
  if (os_log_type_enabled(v6, v4))
  {
    v7 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 67240192;
    v12 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v7 + 4, v7 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v4, "Cancelling all downloads. User Initiated: %{BOOL,public}d", v7, 8u);
    swift_slowDealloc(v7, -1, -1);
  }

  v13 = &_swiftEmptySetSingleton;
  v8 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage];
  v9 = v2;
  swift_retain();
  sub_10037ADBC(v10, (uint64_t)v9, a1 & 1, (uint64_t)&v13);
  swift_release(v8);

  return v13;
}

void sub_100337088(uint64_t a1, uint64_t a2, uint8_t *a3, int a4)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint8_t *v19;
  uint64_t v20;
  char v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  NSObject *v28;
  _BOOL4 v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  os_log_type_t v44;
  uint64_t v45;
  NSObject *v46;
  unint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t aBlock[5];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66[24];
  char v67[32];

  LODWORD(v4) = a4;
  v60 = a2;
  v61 = a3;
  v59 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  a1 += 16;
  swift_beginAccess(a1, v67, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (!Strong)
    goto LABEL_33;
  v9 = (void *)Strong;
  v10 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage);
  swift_retain();

  objc_msgSend(*(id *)(v10 + 16), "lock");
  swift_beginAccess(v10 + 24, v66, 0, 0);
  v11 = *(_QWORD *)(v10 + 24);
  if ((unint64_t)v11 >> 62)
    goto LABEL_22;
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v10 + 24), 2);
  swift_bridgeObjectRetain(v61);
  while (v12)
  {
    v57 = v10;
    v58 = v4;
    v4 = v11 & 0xC000000000000001;
    v13 = 4;
    while (1)
    {
      v10 = v13 - 4;
      if (!v4)
        break;
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v11);
      v15 = v13 - 3;
      if (__OFADD__(v10, 1))
        goto LABEL_21;
LABEL_10:
      v16 = *(id *)(v14 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
      v17 = v59;
      OS_dispatch_queue.sync<A>(execute:)(v7, sub_10033F940, v14, v59);

      v18 = (_QWORD *)((char *)v7 + *(int *)(v17 + 20));
      v20 = *v18;
      v19 = (uint8_t *)v18[1];
      swift_bridgeObjectRetain(v19);
      sub_10003F970((uint64_t)v7, type metadata accessor for DownloadJob);
      if (v20 == v60 && v19 == v61)
      {
        swift_bridgeObjectRelease(v11);
        v23 = v61;
        v24 = (uint64_t)v61;
        goto LABEL_19;
      }
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v19, v60, v61, 0);
      swift_bridgeObjectRelease(v19);
      if ((v22 & 1) != 0)
      {
        v24 = v11;
        v23 = v61;
LABEL_19:
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(v24);
LABEL_20:
        LOBYTE(v4) = v58;
        v10 = v57;
        goto LABEL_27;
      }
      swift_release(v14);
      ++v13;
      if (v15 == v12)
      {
        swift_bridgeObjectRelease(v61);
        swift_bridgeObjectRelease(v11);
        v14 = 0;
        goto LABEL_20;
      }
    }
    v14 = *(_QWORD *)(v11 + 8 * v13);
    swift_retain();
    v15 = v13 - 3;
    if (!__OFADD__(v10, 1))
      goto LABEL_10;
LABEL_21:
    __break(1u);
LABEL_22:
    if (v11 < 0)
      v25 = v11;
    else
      v25 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v11, 2);
    swift_bridgeObjectRetain(v61);
    v12 = _CocoaArrayWrapper.endIndex.getter(v25);
  }
  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(v11);
  v14 = 0;
LABEL_27:
  objc_msgSend(*(id *)(v10 + 16), "unlock", swift_bridgeObjectRelease(v11).n128_f64[0]);
  swift_release(v10);
  if (v14)
  {
    v26 = static os_log_type_t.default.getter();
    v27 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v28 = static OS_os_log.downloads.getter(v27);
    v29 = os_log_type_enabled(v28, v26);
    if ((v4 & 1) != 0)
    {
      if (v29)
      {
        swift_retain();
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = swift_slowAlloc(32, -1);
        *(_DWORD *)v30 = 136446210;
        v61 = v30 + 4;
        aBlock[0] = v31;
        v32 = *(id *)(v14 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
        v33 = v59;
        OS_dispatch_queue.sync<A>(execute:)(v7, sub_10033F940, v14, v59);

        v34 = (_QWORD *)((char *)v7 + *(int *)(v33 + 20));
        v35 = *v34;
        v36 = v34[1];
        swift_bridgeObjectRetain(v36);
        sub_10003F970((uint64_t)v7, type metadata accessor for DownloadJob);
        v64 = sub_10003D274(v35, v36, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v61, v30 + 12);
        swift_release(v14);
        swift_bridgeObjectRelease(v36);
        _os_log_impl((void *)&_mh_execute_header, v28, v26, "Cancelling download pipeline for episode uuid %{public}s", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);
      }

      v37 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
      v38 = objc_msgSend(v37, "mainOrPrivateContext");

      v39 = swift_allocObject(&unk_1004C4058, 32, 7);
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = v14;
      v40 = swift_allocObject(&unk_1004C4080, 32, 7);
      *(_QWORD *)(v40 + 16) = sub_100340EF8;
      *(_QWORD *)(v40 + 24) = v39;
      aBlock[4] = (uint64_t)sub_1001529CC;
      v63 = v40;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100029B1C;
      aBlock[3] = (uint64_t)&unk_1004C4098;
      v41 = _Block_copy(aBlock);
      v42 = v63;
      swift_retain();
      v43 = v38;
      swift_retain();
      objc_msgSend(v43, "performBlockAndWait:", v41, swift_release(v42).n128_f64[0]);
      _Block_release(v41);
      LOBYTE(v41) = swift_isEscapingClosureAtFileLocation(v40, "", 93, 843, 32, 1);
      swift_release(v40);
      if ((v41 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        sub_100140BBC();
        swift_release(v39);
        swift_release(v14);

      }
    }
    else
    {
      if (v29)
      {
        swift_retain();
        v50 = (uint8_t *)swift_slowAlloc(12, -1);
        v51 = swift_slowAlloc(32, -1);
        *(_DWORD *)v50 = 136446210;
        v61 = v50 + 4;
        aBlock[0] = v51;
        v52 = *(id *)(v14 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
        v53 = v59;
        OS_dispatch_queue.sync<A>(execute:)(v7, sub_10033F940, v14, v59);

        v54 = (_QWORD *)((char *)v7 + *(int *)(v53 + 20));
        v55 = *v54;
        v56 = v54[1];
        swift_bridgeObjectRetain(v56);
        sub_10003F970((uint64_t)v7, type metadata accessor for DownloadJob);
        v64 = sub_10003D274(v55, v56, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v61, v50 + 12);
        swift_release(v14);
        swift_bridgeObjectRelease(v56);
        _os_log_impl((void *)&_mh_execute_header, v28, v26, "Non-interactive download pipeline cancellation for episode uuid %{public}s", v50, 0xCu);
        swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v51, -1, -1);
        swift_slowDealloc(v50, -1, -1);
      }

      sub_100140BBC();
      swift_release(v14);
    }
  }
  else
  {
LABEL_33:
    v44 = static os_log_type_t.default.getter();
    v45 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v46 = static OS_os_log.downloads.getter(v45);
    if (os_log_type_enabled(v46, v44))
    {
      v47 = (unint64_t)v61;
      swift_bridgeObjectRetain_n(v61, 2);
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      aBlock[0] = v49;
      *(_DWORD *)v48 = 136446210;
      swift_bridgeObjectRetain(v47);
      v64 = sub_10003D274(v60, v47, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(v47, 3);
      _os_log_impl((void *)&_mh_execute_header, v46, v44, "Trying to cancel download but pipeline with episode uuid %{public}s not found, no download in flight.", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }

  }
}

void sub_100337884(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  NSString v9;
  id v10;
  uint64_t v11;

  v4 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(id *)(a2 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v6, sub_10033F940, a2, v4);

  v8 = *(_QWORD *)((char *)v6 + *(int *)(v4 + 20) + 8);
  swift_bridgeObjectRetain(v8);
  sub_10003F970((uint64_t)v6, type metadata accessor for DownloadJob);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(a1, "episodeForUuid:", v9, swift_bridgeObjectRelease(v8).n128_f64[0]);

  if (v10)
  {
    objc_msgSend(v10, "setDownloadBehavior:", 3);
    objc_msgSend(a1, "saveInCurrentBlock");

  }
}

Swift::String_optional __swiftcall EpisodeDownloadsManager.episodeUuidForDownload(withAdamID:)(NSNumber withAdamID)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String_optional result;
  uint64_t v16;

  v3 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage);
  v7 = -[objc_class longLongValue](withAdamID.super.super.isa, "longLongValue", swift_retain().n128_f64[0]);
  v8 = sub_100379E44((uint64_t)v7);
  swift_release(v6);
  if (v8)
  {
    v9 = *(id *)(v8 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    OS_dispatch_queue.sync<A>(execute:)(v5, sub_10033F940, v8, v3);

    v10 = (_QWORD *)((char *)v5 + *(int *)(v3 + 20));
    v11 = *v10;
    v12 = (void *)v10[1];
    swift_bridgeObjectRetain(v12);
    sub_10003F970((uint64_t)v5, type metadata accessor for DownloadJob);
    swift_release(v8);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = v11;
  v14 = v12;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

void EpisodeDownloadsManager.removeDownload(_:shouldAllowAutomaticRedownloads:completion:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  void *v18;
  NSString v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];
  uint64_t v24;

  v6 = v5;
  v12 = static os_log_type_t.default.getter();
  v13 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v14 = (void *)static OS_os_log.downloads.getter(v13);
  v15 = sub_10003F544(&qword_1005559A0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10003E198();
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  *(_QWORD *)&v17 = swift_bridgeObjectRetain(a2).n128_u64[0];
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v14, "Perform user initiated removal for episode %{public}s", 53, 2, v16, v17);

  swift_bridgeObjectRelease(v16);
  v18 = *(void **)(v6 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_episodeRemover);
  v19 = String._bridgeToObjectiveC()();
  v20 = swift_allocObject(&unk_1004C3828, 56, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_BYTE *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = a4;
  *(_QWORD *)(v20 + 48) = a5;
  v23[4] = sub_100340874;
  v24 = v20;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = sub_100027AF8;
  v23[3] = &unk_1004C3840;
  v21 = _Block_copy(v23);
  v22 = v24;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  objc_msgSend(v18, "removeDownloadedEpisodeWithUuid:completion:", v19, v21, swift_release(v22).n128_f64[0]);
  _Block_release(v21);

}

double sub_100337D14(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  double result;
  _QWORD v19[5];
  uint64_t v20;

  v8 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v9 = objc_msgSend(v8, "mainOrPrivateContext");

  v10 = swift_allocObject(&unk_1004C3FE0, 32, 7);
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  v11 = swift_allocObject(&unk_1004C4008, 56, 7);
  *(_QWORD *)(v11 + 16) = v9;
  *(_QWORD *)(v11 + 24) = a1;
  *(_QWORD *)(v11 + 32) = a2;
  *(_BYTE *)(v11 + 40) = a3;
  *(_QWORD *)(v11 + 48) = v10;
  v19[4] = sub_100340EB8;
  v20 = v11;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100027AF8;
  v19[3] = &unk_1004C4020;
  v12 = _Block_copy(v19);
  v13 = v20;
  v14 = v9;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  objc_msgSend(v14, "performBlockAndWaitWithSave:", v12, swift_release(v13).n128_f64[0]);
  _Block_release(v12);
  swift_beginAccess(v10 + 16, v19, 0, 0);
  v15 = *(_QWORD *)(v10 + 16);
  v16 = *(_QWORD *)(v10 + 24);
  v17 = swift_bridgeObjectRetain(v16);
  a4(a1, a2, v15, v16, v17);

  swift_release(v10);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v16).n128_u64[0];
  return result;
}

double sub_100337EC0(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  NSString v8;
  id v9;
  double result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a1, "episodeForUuid:", v8);

  if (v9)
  {
    if ((a4 & 1) != 0
      && (v11 = type metadata accessor for Podcasts(0),
          v20[3] = v11,
          v20[4] = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts), v12 = sub_1000242A8(v20), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v12, enum case for Podcasts.serialSortAutoDownloads(_:), v11), LOBYTE(v11) = isFeatureEnabled(_:)(v20), sub_10003D380(v20), (v11 & 1) != 0))
    {
      v13 = 1;
    }
    else
    {
      v13 = 3;
    }
    objc_msgSend(v9, "setDownloadBehavior:", v13);
    v14 = objc_msgSend(v9, "podcastUuid");
    if (v14)
    {
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

    }
    else
    {

      v16 = 0;
      v18 = 0;
    }
    swift_beginAccess(a5 + 16, v20, 1, 0);
    v19 = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 16) = v16;
    *(_QWORD *)(a5 + 24) = v18;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v19).n128_u64[0];
  }
  return result;
}

void sub_1003380CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v7;
  NSString v8;
  id v9;

  v7 = String._bridgeToObjectiveC()();
  if (a4)
    v8 = String._bridgeToObjectiveC()();
  else
    v8 = 0;
  v9 = v8;
  (*(void (**)(uint64_t, NSString))(a5 + 16))(a5, v7);

}

void EpisodeDownloadsManager.removeDownloadedEpisodes(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock[5];
  uint64_t v28;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin();
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.downloads.getter(v6);
  v9 = swift_bridgeObjectRetain_n(a1, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v25 = v2;
    v12 = swift_slowAlloc(12, -1);
    v24 = v5;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136446210;
    swift_bridgeObjectRetain(a1);
    v16 = Set.description.getter(v15, &type metadata for String, &protocol witness table for String);
    v23 = v4;
    v18 = v17;
    swift_bridgeObjectRelease(a1);
    v26 = sub_10003D274(v16, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, aBlock, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Scheduling work to remove episodes: %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v23);
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  v19 = sub_10002BE98();
  v20 = swift_allocObject(&unk_1004C3878, 24, 7);
  *(_QWORD *)(v20 + 16) = a1;
  aBlock[4] = (uint64_t)sub_1003408A8;
  v28 = v20;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100027AF8;
  aBlock[3] = (uint64_t)&unk_1004C3890;
  v21 = _Block_copy(aBlock);
  v22 = v28;
  swift_bridgeObjectRetain(a1);
  objc_msgSend(v19, "addOperationWithBlock:", v21, swift_release(v22).n128_f64[0]);
  _Block_release(v21);

}

void sub_1003383D8()
{
  id v0;
  void *v1;
  Class isa;

  v0 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
  if (v0)
  {
    v1 = v0;
    isa = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, "removeDownloadAssetsForEpisodeUuids:", isa);

  }
  else
  {
    __break(1u);
  }
}

Swift::Int __swiftcall EpisodeDownloadsManager.numberOfDownloads(from:)(Swift::String from)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;

  object = from._object;
  countAndFlagsBits = from._countAndFlagsBits;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage);
  swift_retain();
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "numberOfDownloadsFrom:", v9);
  swift_release(v8);

  static Logger.downloads.getter(v11);
  v12 = swift_bridgeObjectRetain_n(object, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v21 = (Swift::Int)v10;
    v16 = v15;
    v17 = swift_slowAlloc(32, -1);
    v23 = v17;
    *(_DWORD *)v16 = 136315394;
    swift_bridgeObjectRetain(object);
    v22 = sub_10003D274(countAndFlagsBits, (unint64_t)object, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease_n(object, 3);
    *(_WORD *)(v16 + 12) = 2048;
    v18 = v21;
    v22 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v16 + 14, v16 + 22);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Data Source reports number of downloads for uuid: %s is: %ld", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v18;
  }
  else
  {

    swift_bridgeObjectRelease_n(object, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (Swift::Int)v10;
  }
}

Swift::Int __swiftcall EpisodeDownloadsManager.numberOfDownloads()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage), "numberOfDownloads");
  v6 = static Logger.downloads.getter();
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    v12 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Data Source reports total number of downloads is: %ld", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (Swift::Int)v5;
}

id EpisodeDownloadsManager.download(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage), "downloadAtIndex:", a1);
  static Logger.downloads.getter(v7);
  v8 = swift_unknownObjectRetain_n(v7, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v21 = v3;
    v12 = v11;
    v13 = swift_slowAlloc(32, -1);
    v22 = a1;
    v23 = v13;
    *(_DWORD *)v12 = 134218242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2080;
    ObjectType = swift_getObjectType(v7, v14);
    v16 = MTLegacyDownloadProtocol.logDescription.getter(ObjectType);
    v18 = v17;
    v22 = sub_10003D274(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v12 + 14, v12 + 22);
    swift_unknownObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Data Source reports download at index: %ld is: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v21);
  }
  else
  {

    swift_unknownObjectRelease_n(v7, 2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v7;
}

id EpisodeDownloadsManager.index(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage), "indexForDownload:", a1);
  static Logger.downloads.getter(v7);
  v8 = swift_unknownObjectRetain_n(a1, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(32, -1);
    v21 = (uint64_t)v7;
    v22 = v12;
    *(_DWORD *)v11 = 134218242;
    v20 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2080;
    v19 = v3;
    ObjectType = swift_getObjectType(a1, v13);
    v15 = MTLegacyDownloadProtocol.logDescription.getter(ObjectType);
    v17 = v16;
    v21 = sub_10003D274(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v11 + 14, v11 + 22);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Data Source reports index (%ld) for download: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v19);
  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v7;
}

id EpisodeDownloadsManager.downloadForEpisode(withUuid:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v2 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage);
  swift_retain();
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "downloadForEpisodeWithUuid:", v10);
  swift_release(v9);

  static Logger.downloads.getter(v12);
  swift_bridgeObjectRetain_n(a2, 2);
  v13 = swift_unknownObjectRetain_n(v11, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v26 = v5;
    v17 = v16;
    v18 = swift_slowAlloc(64, -1);
    v28 = v18;
    *(_DWORD *)v17 = 136315394;
    swift_bridgeObjectRetain(a2);
    v27 = sub_10003D274(a1, a2, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v17 + 12) = 2080;
    ObjectType = swift_getObjectType(v11, v19);
    v21 = MTLegacyDownloadProtocol.logDescription.getter(ObjectType);
    v23 = v22;
    v27 = sub_10003D274(v21, v22, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v17 + 14, v17 + 22);
    swift_unknownObjectRelease_n(v11, 2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Data Source reports download for episode with uuid: %s is: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);
  }
  else
  {

    swift_unknownObjectRelease_n(v11, 2);
    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v11;
}

uint64_t sub_100339064(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "downloadDescription");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

Swift::Void __swiftcall EpisodeDownloadsManager.invalidateURLSessions()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  void (*v16)(uint64_t, uint64_t);
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders, v20, 0, 0);
  v2 = *v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(v2);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v7)
      goto LABEL_23;
    v18 = *(_QWORD *)(v3 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v7)
        goto LABEL_23;
      v18 = *(_QWORD *)(v3 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v7)
          goto LABEL_23;
        v18 = *(_QWORD *)(v3 + 8 * v9);
        if (!v18)
        {
          v9 = v17 + 3;
          if (v17 + 3 >= v7)
            goto LABEL_23;
          v18 = *(_QWORD *)(v3 + 8 * v9);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v18 - 1) & v18;
    v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    v12 = (_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    ObjectType = swift_getObjectType(*v12, v8);
    v16 = *(void (**)(uint64_t, uint64_t))(v14 + 72);
    swift_unknownObjectRetain(v13);
    v16(ObjectType, v14);
    swift_unknownObjectRelease(v13);
  }
  v19 = v17 + 4;
  if (v19 >= v7)
  {
LABEL_23:
    swift_release(v2);
    return;
  }
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v7)
      goto LABEL_23;
    v18 = *(_QWORD *)(v3 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1003392A4(uint64_t a1, uint64_t a2)
{
  return sub_1003392B0(a1, a2, &qword_100553408);
}

uint64_t sub_1003392B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t Strong;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _BYTE v23[24];
  _BYTE v24[32];

  v6 = sub_10003F544(a3);
  v7 = __chkstk_darwin(v6);
  v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = __chkstk_darwin(v7);
  v12 = &v23[-v11 - 8];
  __chkstk_darwin(v10);
  v14 = &v23[-v13 - 8];
  v15 = a2 + 16;
  sub_10003D344(a1, (uint64_t)v24);
  swift_dynamicCast(v14, v24, (char *)&type metadata for Any + 8, v6, 7);
  sub_100007A64((uint64_t)v14, (uint64_t)v12, a3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v6);
  if (!EnumCaseMultiPayload)
  {
    sub_100007A28((uint64_t)v12, a3);
LABEL_5:
    swift_beginAccess(v15, v24, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v15);
    if (Strong)
    {
      v18 = (_QWORD *)Strong;
      sub_100007A64((uint64_t)v14, (uint64_t)v9, a3);
      v19 = (uint64_t)v18 + *(_QWORD *)((swift_isaMask & *v18) + 0x180);
      swift_beginAccess(v19, v23, 33, 0);
      sub_10016DE28((uint64_t)v9, v19, a3);
      swift_endAccess(v23);
LABEL_9:

      return sub_100007A28((uint64_t)v14, a3);
    }
    return sub_100007A28((uint64_t)v14, a3);
  }
  if (EnumCaseMultiPayload == 1)
  {
    swift_errorRelease(*v12);
    goto LABEL_5;
  }
  swift_beginAccess(v15, v24, 0, 0);
  v20 = (_QWORD *)swift_unknownObjectWeakLoadStrong(v15);
  if (v20)
  {
    v18 = v20;
    objc_msgSend(v20, "cancel");
    goto LABEL_9;
  }
  return sub_100007A28((uint64_t)v14, a3);
}

uint64_t sub_100339494(uint64_t a1, uint64_t a2)
{
  return sub_1000456E0(a1, a2, &qword_10055A088, (void (*)(uint64_t, uint64_t))sub_10003A8DC, (void (*)(uint64_t, uint64_t))sub_10003A858);
}

uint64_t sub_1003394B0(uint64_t a1, uint64_t a2)
{
  return sub_100045830(a1, a2, &qword_10055A088, (void (*)(uint64_t, uint64_t))sub_10003A8DC, (void (*)(uint64_t, uint64_t))sub_10003A858);
}

uint64_t sub_1003394CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  void *Strong;
  uint64_t v17;
  _BYTE v18[32];
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned __int8 v22;

  v2 = a2 + 16;
  sub_10003D344(a1, (uint64_t)v18);
  v3 = sub_10003F544((uint64_t *)&unk_100564EC0);
  swift_dynamicCast(&v19, v18, (char *)&type metadata for Any + 8, v3, 7);
  v4 = v22;
  if (v22 >= 2u)
  {
    swift_beginAccess(v2, v18, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
    if (Strong)
    {
      v9 = Strong;
      objc_msgSend(Strong, "cancel");
      goto LABEL_6;
    }
  }
  else
  {
    v5 = v19;
    v6 = v20;
    v7 = v21;
    swift_beginAccess(v2, v18, 0, 0);
    v8 = (_QWORD *)swift_unknownObjectWeakLoadStrong(v2);
    if (v8)
    {
      v9 = v8;
      v10 = (char *)v8 + *(_QWORD *)((swift_isaMask & *v8) + 0x180);
      swift_beginAccess(v10, &v17, 1, 0);
      v11 = *(_QWORD *)v10;
      v12 = *((_QWORD *)v10 + 1);
      *(_QWORD *)v10 = v5;
      *((_QWORD *)v10 + 1) = v6;
      v13 = v10[16];
      v10[16] = v7;
      v14 = v10[17];
      v10[17] = v4;
      sub_100340DC4(v5, v6, v7, v4);
      sub_100340DA8(v11, v12, v13, v14);
LABEL_6:

    }
  }
  return sub_100340DA8(v19, v20, v21, v22);
}

uint64_t sub_100339634(uint64_t a1, uint64_t a2)
{
  return sub_1003392B0(a1, a2, &qword_100564EA0);
}

uint64_t sub_100339640(uint64_t a1, uint64_t a2)
{
  return sub_100339894(a1, a2, &qword_10055A088, &OBJC_IVAR____TtC8Podcasts14GroupOperation_input, (void (*)(uint64_t, uint64_t))sub_10003A8DC, (void (*)(uint64_t, uint64_t))sub_10003A858);
}

uint64_t sub_100339664(uint64_t a1, uint64_t a2)
{
  return sub_1003392B0(a1, a2, (uint64_t *)&unk_100564E80);
}

uint64_t sub_100339670(uint64_t a1, uint64_t a2)
{
  return sub_1003392B0(a1, a2, &qword_100553318);
}

uint64_t sub_100339680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t Strong;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE v19[24];
  _BYTE v20[32];

  v4 = sub_10003F544(&qword_100564E90);
  __chkstk_darwin();
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin();
  v8 = &v19[-v7 - 8];
  __chkstk_darwin();
  v10 = &v19[-v9 - 8];
  v11 = a2 + 16;
  sub_10003D344(a1, (uint64_t)v20);
  swift_dynamicCast(v10, v20, (char *)&type metadata for Any + 8, v4, 7);
  sub_100007A64((uint64_t)v10, (uint64_t)v8, &qword_100564E90);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v4);
  if (!EnumCaseMultiPayload)
  {
    sub_100007A28((uint64_t)v8, &qword_100564E90);
LABEL_5:
    swift_beginAccess(v11, v20, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v11);
    if (Strong)
    {
      v14 = (_QWORD *)Strong;
      sub_100007A64((uint64_t)v10, (uint64_t)v6, &qword_100564E90);
      v15 = (uint64_t)v14 + *(_QWORD *)((swift_isaMask & *v14) + 0x198);
      swift_beginAccess(v15, v19, 33, 0);
      sub_10016DE28((uint64_t)v6, v15, &qword_100564E90);
      swift_endAccess(v19);
LABEL_9:

      return sub_100007A28((uint64_t)v10, &qword_100564E90);
    }
    return sub_100007A28((uint64_t)v10, &qword_100564E90);
  }
  if (EnumCaseMultiPayload == 1)
  {
    swift_errorRelease();
    goto LABEL_5;
  }
  swift_beginAccess(v11, v20, 0, 0);
  v16 = (_QWORD *)swift_unknownObjectWeakLoadStrong(v11);
  if (v16)
  {
    v14 = v16;
    objc_msgSend(v16, "cancel");
    goto LABEL_9;
  }
  return sub_100007A28((uint64_t)v10, &qword_100564E90);
}

uint64_t sub_100339878(uint64_t a1, uint64_t a2)
{
  return sub_100045830(a1, a2, &qword_100564E98, (void (*)(uint64_t, uint64_t))sub_100340D8C, (void (*)(uint64_t, uint64_t))sub_100340D70);
}

uint64_t sub_100339894(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, void (*a5)(uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *Strong;
  _BYTE v21[32];
  uint64_t v22;
  unsigned __int8 v23;

  v10 = a2 + 16;
  sub_10003D344(a1, (uint64_t)v21);
  v11 = sub_10003F544(a3);
  swift_dynamicCast(&v22, v21, (char *)&type metadata for Any + 8, v11, 7);
  v12 = v23;
  if (v23 >= 2u)
  {
    swift_beginAccess(v10, v21, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v10);
    if (Strong)
    {
      v15 = Strong;
      objc_msgSend(Strong, "cancel");
      goto LABEL_6;
    }
  }
  else
  {
    v13 = v22;
    swift_beginAccess(v10, v21, 0, 0);
    v14 = swift_unknownObjectWeakLoadStrong(v10);
    if (v14)
    {
      v15 = (void *)v14;
      v16 = v14 + *a4;
      v17 = *(_QWORD *)v16;
      *(_QWORD *)v16 = v13;
      v18 = *(unsigned __int8 *)(v16 + 8);
      *(_BYTE *)(v16 + 8) = v12;
      a5(v13, v12);
      a6(v17, v18);
LABEL_6:

    }
  }
  return ((uint64_t (*)(uint64_t, _QWORD))a6)(v22, v23);
}

uint64_t sub_1003399B8(uint64_t a1, uint64_t a2)
{
  return sub_100045830(a1, a2, &qword_100564EA8, (void (*)(uint64_t, uint64_t))sub_100045994, (void (*)(uint64_t, uint64_t))sub_100045978);
}

uint64_t sub_1003399D4(uint64_t a1, uint64_t a2)
{
  return sub_1003392B0(a1, a2, (uint64_t *)&unk_100564EB0);
}

uint64_t sub_1003399E0(uint64_t a1, uint64_t a2)
{
  return sub_100339894(a1, a2, &qword_10055A088, &OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input, (void (*)(uint64_t, uint64_t))sub_10003A8DC, (void (*)(uint64_t, uint64_t))sub_10003A858);
}

uint64_t sub_100339A04(uint64_t a1, uint64_t a2)
{
  return sub_100045830(a1, a2, &qword_100564E70, (void (*)(uint64_t, uint64_t))sub_100045994, (void (*)(uint64_t, uint64_t))sub_100045978);
}

uint64_t sub_100339A20(uint64_t a1, uint64_t a2)
{
  return sub_1000456E0(a1, a2, &qword_100564E78, (void (*)(uint64_t, uint64_t))sub_10003A8DC, (void (*)(uint64_t, uint64_t))sub_10003A858);
}

uint64_t sub_100339A3C(uint64_t a1, uint64_t a2)
{
  return sub_100045830(a1, a2, (uint64_t *)&unk_100564E40, (void (*)(uint64_t, uint64_t))sub_100045994, (void (*)(uint64_t, uint64_t))sub_100045978);
}

uint64_t sub_100339A58(uint64_t a1, uint64_t a2)
{
  return sub_100045830(a1, a2, &qword_100564E30, (void (*)(uint64_t, uint64_t))sub_100045994, (void (*)(uint64_t, uint64_t))sub_100045978);
}

uint64_t sub_100339A74(uint64_t a1, uint64_t a2)
{
  return sub_100339894(a1, a2, (uint64_t *)&unk_100564E40, &OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation_input, (void (*)(uint64_t, uint64_t))sub_100045994, (void (*)(uint64_t, uint64_t))sub_100045978);
}

Swift::Int sub_100339A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_10003F544((uint64_t *)&unk_100565FA0);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
      do
      {
        v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_10035DFB8(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_100339C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_10003F544(&qword_100564E38);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for DownloadingEpisodeStateDataSource();
      do
      {
        v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_10035DFC4(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

unint64_t sub_100339E70(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_100339EF0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[9];

  v6 = a3 & 1;
  v7 = *v3;
  Hasher.init(_seed:)(v31, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  EpisodeStateIdentifier.hash(into:)(v31, a1, a2, v6);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_9:
    swift_bridgeObjectRelease(v7);
    return 0;
  }
  v29 = v3;
  v11 = *(_QWORD *)(v7 + 48) + 24 * v10;
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(unsigned __int8 *)(v11 + 16);
  sub_10003CAD8(*(_QWORD *)v11, v13, *(_BYTE *)(v11 + 16));
  v30 = a1;
  v15 = a1;
  v16 = a2;
  v17 = static EpisodeStateIdentifier.== infix(_:_:)(v12, v13, v14, v15, a2, v6);
  sub_10003CA84(v12, v13, v14);
  if ((v17 & 1) == 0)
  {
    v18 = ~v9;
    do
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_9;
      v19 = *(_QWORD *)(v7 + 48) + 24 * v10;
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v22 = *(unsigned __int8 *)(v19 + 16);
      sub_10003CAD8(*(_QWORD *)v19, v21, *(_BYTE *)(v19 + 16));
      v23 = static EpisodeStateIdentifier.== infix(_:_:)(v20, v21, v22, v30, v16, v6);
      sub_10003CA84(v20, v21, v22);
    }
    while ((v23 & 1) == 0);
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v29);
  v25 = *v29;
  v31[0] = *v29;
  *v29 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10035F5C4();
    v25 = v31[0];
  }
  v26 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 24 * v10);
  sub_10033AB84(v10);
  v27 = *v29;
  *v29 = v31[0];
  swift_bridgeObjectRelease(v27);
  return v26;
}

uint64_t sub_10033A104(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v1;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = a1;
    v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      v8 = sub_10033A864(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v9 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    goto LABEL_15;
  sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
  v13 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      v16 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16, a1);

    }
    while ((v17 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10035F780();
    v19 = v22;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v12);
  sub_10033ADC4(v12);
  v20 = *v2;
  *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

uint64_t sub_10033A2D8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v1;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = a1;
    v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      v8 = sub_10033A9FC(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v9 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    goto LABEL_15;
  type metadata accessor for DownloadingEpisodeStateDataSource();
  v13 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      v16 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16, a1);

    }
    while ((v17 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10035F78C();
    v19 = v22;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v12);
  sub_10033ADC4(v12);
  v20 = *v2;
  *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

uint64_t sub_10033A49C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for ShowInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100026844(&qword_100560A88, v12, (uint64_t)&protocol conformance descriptor for ShowInfo);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_100026844((unint64_t *)&unk_100564E20, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t)&protocol conformance descriptor for ShowInfo);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10035F938();
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_10033AF64(v16);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

uint64_t sub_10033A6D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10035F414();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_10033B1E0(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_10033A864(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t result;
  Swift::Int v19;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_100339A98(v7, v6);
  v19 = v8;
  v9 = *(_QWORD *)(v8 + 40);
  swift_retain();
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = static NSObject.== infix(_:_:)(v13, a2);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_10033ADC4(v12);
      if ((static NSObject.== infix(_:_:)(a2, v8) & 1) != 0)
      {
        *v3 = v19;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v17 = static NSObject.== infix(_:_:)(v16, a2);

        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_10033A9FC(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t result;
  Swift::Int v19;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_100339C8C(v7, v6);
  v19 = v8;
  v9 = *(_QWORD *)(v8 + 40);
  swift_retain(v8);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    type metadata accessor for DownloadingEpisodeStateDataSource();
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_10033ADC4(v12);
      if ((static NSObject.== infix(_:_:)(a2, v8) & 1) != 0)
      {
        *v3 = v19;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v17 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_10033AB84(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  Swift::Int v20;
  char v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      v30 = v4;
      do
      {
        v11 = 24 * v6;
        v12 = *(_QWORD *)(v3 + 40);
        v13 = v3;
        v14 = *(_QWORD *)(v3 + 48) + 24 * v6;
        v15 = *(_QWORD *)v14;
        v16 = *(_QWORD *)(v14 + 8);
        v17 = v2;
        v18 = *(unsigned __int8 *)(v14 + 16);
        v19 = v9;
        Hasher.init(_seed:)(v31, v12);
        sub_10003CAD8(v15, v16, v18);
        EpisodeStateIdentifier.hash(into:)(v31, v15, v16, v18);
        v20 = Hasher._finalize()();
        v21 = v18;
        v2 = v17;
        sub_10003CA84(v15, v16, v21);
        v9 = v19;
        v22 = v20 & v7;
        if (v17 >= (uint64_t)v19)
        {
          if (v22 < v19)
          {
            v4 = v30;
            v3 = v13;
          }
          else
          {
            v4 = v30;
            v3 = v13;
            if (v2 >= v22)
              goto LABEL_12;
          }
        }
        else
        {
          v4 = v30;
          v3 = v13;
          if (v22 >= v9 || v2 >= v22)
          {
LABEL_12:
            v23 = *(_QWORD *)(v3 + 48);
            v24 = v23 + 24 * v2;
            v25 = (__int128 *)(v23 + v11);
            if (24 * v2 < v11 || v24 >= (unint64_t)v25 + 24 || (v26 = v2 == v6, v2 = v6, !v26))
            {
              v10 = *v25;
              *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
              *(_OWORD *)v24 = v10;
              v2 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v27 = *(_QWORD *)(v3 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v29;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_10033ADC4(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10033AF64(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;

  v3 = type metadata accessor for ShowInfo(0);
  v33 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v30 = v1;
    v11 = ~v9;
    swift_retain(v7);
    v12 = _HashTable.previousHole(before:)(a1, v8, v11);
    v32 = v8;
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (v12 + 1) & v11;
      v14 = *(_QWORD *)(v33 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      do
      {
        v15 = v14 * v10;
        v31(v6, *(_QWORD *)(v7 + 48) + v14 * v10, v3);
        v16 = *(_QWORD *)(v7 + 40);
        v17 = sub_100026844(&qword_100560A88, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t)&protocol conformance descriptor for ShowInfo);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v3, v17);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v3);
        v19 = v18 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v19 < v13 || a1 < (uint64_t)v19)
            goto LABEL_6;
        }
        else if (v19 < v13 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        v22 = *(_QWORD *)(v7 + 48);
        v23 = v14 * a1;
        v24 = v22 + v14 * a1;
        v25 = v22 + v15;
        if (v14 * a1 < v15 || v24 >= v25 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v24, v25, 1, v3);
        }
        else
        {
          a1 = v10;
          if (v23 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v24);
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v32 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(_QWORD *)(v32 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v7);
    v1 = v30;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v26 = *v1;
  v27 = *(_QWORD *)(*v1 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

unint64_t sub_10033B1E0(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_10033B3A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v18 >= v7)
      goto LABEL_24;
    v19 = *(_QWORD *)(v3 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v7)
        goto LABEL_24;
      v19 = *(_QWORD *)(v3 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v7)
          goto LABEL_24;
        v19 = *(_QWORD *)(v3 + 8 * v8);
        if (!v19)
        {
          v8 = v18 + 3;
          if (v18 + 3 >= v7)
            goto LABEL_24;
          v19 = *(_QWORD *)(v3 + 8 * v8);
          if (!v19)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(a1 + 48) + 24 * v10;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_BYTE *)(v11 + 16);
    sub_10003CAD8(*(_QWORD *)v11, v13, v14);
    v15 = sub_100339EF0(v12, v13, v14);
    sub_1001A6828(v15, v16, v17);
    sub_10003CA84(v12, v13, v14);
  }
  v20 = v18 + 4;
  if (v20 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v19 = *(_QWORD *)(v3 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v19 = *(_QWORD *)(v3 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_10033B558(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD v31[5];

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v3 + 16))
      return;
LABEL_8:
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 < 0)
        v5 = a1;
      else
        v5 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v6 = __CocoaSet.makeIterator()(v5);
      v7 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
      v8 = sub_100241438();
      v9 = Set.Iterator.init(_cocoa:)(v31, v6, v7, v8);
      a1 = v31[0];
      v28 = v31[1];
      v10 = v31[2];
      v11 = v31[3];
      v12 = v31[4];
    }
    else
    {
      v13 = -1 << *(_BYTE *)(a1 + 32);
      v28 = a1 + 56;
      v10 = ~v13;
      v14 = -v13;
      if (v14 < 64)
        v15 = ~(-1 << v14);
      else
        v15 = -1;
      v12 = v15 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain(a1);
      v11 = 0;
    }
    v16 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_20;
    while (1)
    {
      if (v12)
      {
        v17 = (v12 - 1) & v12;
        v18 = __clz(__rbit64(v12)) | (v11 << 6);
        v19 = v11;
      }
      else
      {
        v24 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          return;
        }
        if (v24 >= v16)
          goto LABEL_42;
        v25 = *(_QWORD *)(v28 + 8 * v24);
        v19 = v11 + 1;
        if (!v25)
        {
          v19 = v11 + 2;
          if (v11 + 2 >= v16)
            goto LABEL_42;
          v25 = *(_QWORD *)(v28 + 8 * v19);
          if (!v25)
          {
            v19 = v11 + 3;
            if (v11 + 3 >= v16)
              goto LABEL_42;
            v25 = *(_QWORD *)(v28 + 8 * v19);
            if (!v25)
            {
              v19 = v11 + 4;
              if (v11 + 4 >= v16)
                goto LABEL_42;
              v25 = *(_QWORD *)(v28 + 8 * v19);
              if (!v25)
              {
                v19 = v11 + 5;
                if (v11 + 5 >= v16)
                  goto LABEL_42;
                v25 = *(_QWORD *)(v28 + 8 * v19);
                if (!v25)
                {
                  v26 = v11 + 6;
                  while (v16 != v26)
                  {
                    v25 = *(_QWORD *)(v28 + 8 * v26++);
                    if (v25)
                    {
                      v19 = v26 - 1;
                      goto LABEL_38;
                    }
                  }
LABEL_42:
                  sub_10017F43C(a1);
                  return;
                }
              }
            }
          }
        }
LABEL_38:
        v17 = (v25 - 1) & v25;
        v18 = __clz(__rbit64(v25)) + (v19 << 6);
      }
      v23 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v18);
      if (!v23)
        goto LABEL_42;
      while (1)
      {
        v27 = (void *)sub_10033A104(v23);

        v11 = v19;
        v12 = v17;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_20:
        v20 = __CocoaSet.Iterator.next()(v9);
        if (v20)
        {
          v21 = v20;
          v29 = v20;
          v22 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
          swift_unknownObjectRetain(v21);
          swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
          v23 = v30;
          swift_unknownObjectRelease(v21);
          v19 = v11;
          v17 = v12;
          if (v23)
            continue;
        }
        goto LABEL_42;
      }
    }
  }
  if (v3 < 0)
    v4 = *v1;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v4))
    goto LABEL_8;
}

uint64_t sub_10033B834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = sub_10003F544((uint64_t *)&unk_100564E10);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ShowInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v14 = *(_QWORD *)(a1 + 56);
  v26 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v18 = (unint64_t)(v15 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v19 = 0;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_6;
    }
    v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v18)
      return swift_release(a1);
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v19;
    if (!v23)
    {
      v19 = v22 + 1;
      if (v22 + 1 >= v18)
        return swift_release(a1);
      v23 = *(_QWORD *)(v26 + 8 * v19);
      if (!v23)
      {
        v19 = v22 + 2;
        if (v22 + 2 >= v18)
          return swift_release(a1);
        v23 = *(_QWORD *)(v26 + 8 * v19);
        if (!v23)
        {
          v19 = v22 + 3;
          if (v22 + 3 >= v18)
            return swift_release(a1);
          v23 = *(_QWORD *)(v26 + 8 * v19);
          if (!v23)
            break;
        }
      }
    }
LABEL_23:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v13, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v21, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v13, v6);
    sub_10033A49C((uint64_t)v10, (uint64_t)v5);
    sub_100007A28((uint64_t)v5, (uint64_t *)&unk_100564E10);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  v24 = v22 + 4;
  if (v24 >= v18)
    return swift_release(a1);
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v19 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    v19 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v19 >= v18)
      return swift_release(a1);
    v23 = *(_QWORD *)(v26 + 8 * v19);
    ++v24;
    if (v23)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t *sub_10033BA98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t isStackAllocationSafe;
  char v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  unint64_t *v37;
  void *v38;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD v47[9];
  uint64_t v48[5];

  v2 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  v3 = *(_QWORD *)(a1 + 56);
  v42 = a1 + 56;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  v40 = ~v4;
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & v3;
  v41 = (unint64_t)(63 - v4) >> 6;
  v46 = (char *)(a2 + 56);
  swift_bridgeObjectRetain(a1);
  v43 = v7;
  v44 = 0;
  while (1)
  {
    if (v6)
    {
      v45 = (v6 - 1) & v6;
      v8 = __clz(__rbit64(v6)) | (v44 << 6);
    }
    else
    {
      v9 = v44 + 1;
      if (__OFADD__(v44, 1))
      {
        __break(1u);
        goto LABEL_39;
      }
      if (v9 >= v41)
        goto LABEL_37;
      v10 = *(_QWORD *)(v42 + 8 * v9);
      v11 = v44 + 1;
      if (!v10)
      {
        v11 = v44 + 2;
        if (v44 + 2 >= v41)
          goto LABEL_37;
        v10 = *(_QWORD *)(v42 + 8 * v11);
        if (!v10)
        {
          v11 = v44 + 3;
          if (v44 + 3 >= v41)
            goto LABEL_37;
          v10 = *(_QWORD *)(v42 + 8 * v11);
          if (!v10)
          {
            v11 = v44 + 4;
            if (v44 + 4 >= v41)
              goto LABEL_37;
            v10 = *(_QWORD *)(v42 + 8 * v11);
            if (!v10)
            {
              v12 = v44 + 5;
              if (v44 + 5 >= v41)
              {
LABEL_37:
                sub_10017F43C(v7);
                return (unint64_t *)v2;
              }
              v10 = *(_QWORD *)(v42 + 8 * v12);
              if (!v10)
              {
                while (1)
                {
                  v11 = v12 + 1;
                  if (__OFADD__(v12, 1))
                    break;
                  if (v11 >= v41)
                    goto LABEL_37;
                  v10 = *(_QWORD *)(v42 + 8 * v11);
                  ++v12;
                  if (v10)
                    goto LABEL_24;
                }
LABEL_39:
                __break(1u);
              }
              v11 = v44 + 5;
            }
          }
        }
      }
LABEL_24:
      v44 = v11;
      v45 = (v10 - 1) & v10;
      v8 = __clz(__rbit64(v10)) + (v11 << 6);
    }
    v13 = *(_QWORD *)(v7 + 48) + 24 * v8;
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(unsigned __int8 *)(v13 + 16);
    Hasher.init(_seed:)(v47, *(_QWORD *)(v2 + 40));
    sub_10003CAD8(v14, v15, v16);
    EpisodeStateIdentifier.hash(into:)(v47, v14, v15, v16);
    v17 = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v2 + 32);
    v19 = v17 & ~v18;
    if (((*(_QWORD *)&v46[(v19 >> 3) & 0xFFFFFFFFFFFFF8] >> v19) & 1) != 0)
      break;
LABEL_6:
    sub_10003CA84(v14, v15, v16);
    v7 = v43;
    v6 = v45;
  }
  v20 = *(_QWORD *)(v2 + 48) + 24 * v19;
  v22 = *(_QWORD *)v20;
  v21 = *(_QWORD *)(v20 + 8);
  v23 = *(unsigned __int8 *)(v20 + 16);
  sub_10003CAD8(*(_QWORD *)v20, v21, *(_BYTE *)(v20 + 16));
  v24 = static EpisodeStateIdentifier.== infix(_:_:)(v22, v21, v23, v14, v15, v16);
  sub_10003CA84(v22, v21, v23);
  if ((v24 & 1) == 0)
  {
    v25 = ~v18;
    do
    {
      v19 = (v19 + 1) & v25;
      if (((*(_QWORD *)&v46[(v19 >> 3) & 0xFFFFFFFFFFFFF8] >> v19) & 1) == 0)
        goto LABEL_6;
      v26 = *(_QWORD *)(v2 + 48) + 24 * v19;
      v27 = *(_QWORD *)v26;
      v28 = *(_QWORD *)(v26 + 8);
      v29 = *(unsigned __int8 *)(v26 + 16);
      sub_10003CAD8(*(_QWORD *)v26, v28, *(_BYTE *)(v26 + 16));
      v30 = static EpisodeStateIdentifier.== infix(_:_:)(v27, v28, v29, v14, v15, v16);
      sub_10003CA84(v27, v28, v29);
    }
    while ((v30 & 1) == 0);
  }
  isStackAllocationSafe = sub_10003CA84(v14, v15, v16);
  v48[0] = v43;
  v48[1] = v42;
  v48[2] = v40;
  v48[3] = v44;
  v48[4] = v45;
  v32 = *(_BYTE *)(v2 + 32);
  v33 = v32 & 0x3F;
  v34 = (1 << v32) + 63;
  v35 = v34 >> 6;
  v36 = 8 * (v34 >> 6);
  if (v33 < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v34 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v40 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0), v46, v36);
    v37 = sub_10033CF08((unint64_t *)((char *)&v40 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0)), v35, v2, v19, v48);
    swift_release(v2);
    sub_10017F43C(v48[0]);
  }
  else
  {
    v38 = (void *)swift_slowAlloc(v36, -1);
    memcpy(v38, v46, v36);
    v37 = sub_10033CF08((unint64_t *)v38, v35, v2, v19, v48);
    swift_release(v2);
    sub_10017F43C(v48[0]);
    swift_slowDealloc(v38, -1, -1);
  }
  return v37;
}

void *sub_10033BFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  id v30;
  char v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t isStackAllocationSafe;
  char v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  _QWORD v55[5];

  v2 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
    v7 = sub_100241438();
    v8 = Set.Iterator.init(_cocoa:)(v55, v5, v6, v7);
    v3 = v55[0];
    v9 = v55[1];
    v11 = v55[2];
    v10 = v55[3];
    v12 = v55[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v9 = a1 + 56;
    v11 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v50 = v3;
  v51 = v9;
  v52 = v11;
  v53 = v10;
  v54 = v12;
  v16 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v12)
      {
        v17 = (v12 - 1) & v12;
        v18 = __clz(__rbit64(v12)) | (v10 << 6);
LABEL_17:
        v19 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v18);
        v20 = v19;
        goto LABEL_18;
      }
      v32 = v10 + 1;
      if (__OFADD__(v10, 1))
        __break(1u);
      v33 = (unint64_t)(v11 + 64) >> 6;
      if (v32 >= v33)
      {
        v19 = 0;
        v17 = 0;
        goto LABEL_18;
      }
      v34 = *(_QWORD *)(v51 + 8 * v32);
      if (v34)
      {
LABEL_31:
        v17 = (v34 - 1) & v34;
        v18 = __clz(__rbit64(v34)) + (v32 << 6);
        v10 = v32;
        goto LABEL_17;
      }
      v35 = v10 + 2;
      if (v10 + 2 >= v33)
        goto LABEL_47;
      v34 = *(_QWORD *)(v51 + 8 * v35);
      if (v34)
      {
LABEL_35:
        v32 = v35;
        goto LABEL_31;
      }
      if (v10 + 3 < v33)
      {
        v34 = *(_QWORD *)(v51 + 8 * (v10 + 3));
        if (v34)
        {
          v32 = v10 + 3;
          goto LABEL_31;
        }
        v35 = v10 + 4;
        if (v10 + 4 >= v33)
        {
          v19 = 0;
          v17 = 0;
          v10 += 3;
LABEL_18:
          v53 = v10;
          v54 = v17;
          if (!v19)
            goto LABEL_56;
          goto LABEL_22;
        }
        v34 = *(_QWORD *)(v51 + 8 * v35);
        if (v34)
          goto LABEL_35;
        v32 = v10 + 5;
        if (v10 + 5 < v33)
        {
          v34 = *(_QWORD *)(v51 + 8 * v32);
          if (v34)
            goto LABEL_31;
          v32 = v33 - 1;
          v36 = v10 + 6;
          while (v33 != v36)
          {
            v34 = *(_QWORD *)(v51 + 8 * v36++);
            if (v34)
            {
              v32 = v36 - 1;
              goto LABEL_31;
            }
          }
LABEL_47:
          v19 = 0;
          v17 = 0;
          v10 = v32;
          goto LABEL_18;
        }
      }
      v19 = 0;
      v17 = 0;
      v10 = v35;
      goto LABEL_18;
    }
    v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21)
      goto LABEL_57;
    v22 = v21;
    v48 = v21;
    v23 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v49, &v48, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v19 = v49;
    swift_unknownObjectRelease(v22);
    if (!v19)
    {
LABEL_56:
      v3 = v50;
LABEL_57:
      sub_10017F43C(v3);
      return (void *)v2;
    }
LABEL_22:
    v24 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v25 = -1 << *(_BYTE *)(v2 + 32);
    v26 = v24 & ~v25;
    if (((*(_QWORD *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
      goto LABEL_13;
    sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
    v27 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v26);
    v28 = static NSObject.== infix(_:_:)(v27, v19);

    if ((v28 & 1) != 0)
      break;
    v29 = ~v25;
    while (1)
    {
      v26 = (v26 + 1) & v29;
      if (((*(_QWORD *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
        break;
      v30 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v26);
      v31 = static NSObject.== infix(_:_:)(v30, v19);

      if ((v31 & 1) != 0)
        goto LABEL_50;
    }
LABEL_13:

    v3 = v50;
    v11 = v52;
    v10 = v53;
    v12 = v54;
  }
LABEL_50:

  v38 = *(_BYTE *)(v2 + 32);
  v39 = v38 & 0x3F;
  v40 = (1 << v38) + 63;
  v41 = v40 >> 6;
  v42 = 8 * (v40 >> 6);
  if (v39 < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v40 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v42);
    sub_10033D298((unint64_t *)((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0)), v41, v2, v26, &v50);
    v44 = v43;
    swift_release(v2);
    sub_10017F43C(v50);
  }
  else
  {
    v45 = (void *)swift_slowAlloc(v42, -1);
    memcpy(v45, (const void *)(v2 + 56), v42);
    sub_10033D298((unint64_t *)v45, v41, v2, v26, &v50);
    v44 = v46;
    swift_release(v2);
    sub_10017F43C(v50);
    swift_slowDealloc(v45, -1, -1);
  }
  return (void *)v44;
}

void *sub_10033C4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  void *v51;
  void *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;

  v4 = sub_10003F544((uint64_t *)&unk_100564E10);
  __chkstk_darwin(v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ShowInfo(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v60 = (char *)&v54 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v61 = a1;
  v62 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v63 = v15;
  v64 = 0;
  v65 = v17 & v14;
  v59 = (char *)(a2 + 56);
  v22 = v18;
  swift_bridgeObjectRetain(v18);
  v23 = 0;
  v55 = v6;
  v58 = a2;
  v56 = v20;
  v57 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v24 = (v20 - 1) & v20;
  v25 = __clz(__rbit64(v20)) | (v23 << 6);
  v26 = v23;
  v27 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v25, v7);
  v28 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v28, 1, v7);
    v61 = v22;
    v62 = v27;
    v63 = v21;
    v64 = v26;
    v65 = v24;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_10017F43C(v22);
      sub_100007A28((uint64_t)v6, (uint64_t *)&unk_100564E10);
      return (void *)v58;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v60, v6, v7);
    v32 = v58;
    v33 = *(_QWORD *)(v58 + 40);
    v34 = sub_100026844(&qword_100560A88, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t)&protocol conformance descriptor for ShowInfo);
    v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v7, v34);
    v36 = -1 << *(_BYTE *)(v32 + 32);
    v37 = v35 & ~v36;
    if (((*(_QWORD *)&v59[(v37 >> 3) & 0xFFFFFFFFFFFFF8] >> v37) & 1) != 0)
      break;
    v44 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v44(v60, v7);
    v23 = v64;
    v20 = v65;
    v22 = v61;
    v19 = v62;
    v21 = v63;
    v6 = v55;
    v56 = v65;
    v57 = v64;
    if (v65)
      goto LABEL_6;
LABEL_8:
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
      __break(1u);
    v27 = v19;
    v29 = (unint64_t)(v21 + 64) >> 6;
    if (v26 >= v29)
      goto LABEL_26;
    v30 = *(_QWORD *)(v19 + 8 * v26);
    if (v30)
      goto LABEL_11;
    v23 += 2;
    if (v26 + 1 >= v29)
      goto LABEL_36;
    v30 = *(_QWORD *)(v19 + 8 * v23);
    if (v30)
      goto LABEL_14;
    if (v26 + 2 >= v29)
    {
LABEL_26:
      v24 = 0;
      v28 = 1;
      v26 = v23;
    }
    else
    {
      v30 = *(_QWORD *)(v19 + 8 * (v26 + 2));
      if (v30)
      {
        v26 += 2;
        goto LABEL_11;
      }
      v23 = v26 + 3;
      if (v26 + 3 >= v29)
      {
        v24 = 0;
        v28 = 1;
        v26 += 2;
      }
      else
      {
        v30 = *(_QWORD *)(v19 + 8 * v23);
        if (v30)
        {
LABEL_14:
          v26 = v23;
LABEL_11:
          v24 = (v30 - 1) & v30;
          v25 = __clz(__rbit64(v30)) + (v26 << 6);
          goto LABEL_7;
        }
        v26 += 4;
        if (v26 >= v29)
          goto LABEL_26;
        v30 = *(_QWORD *)(v19 + 8 * v26);
        if (v30)
          goto LABEL_11;
        v26 = v29 - 1;
        v31 = v57 + 6;
        while (v29 != v31)
        {
          v30 = *(_QWORD *)(v19 + 8 * v31++);
          if (v30)
          {
            v26 = v31 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v24 = 0;
        v28 = 1;
      }
    }
  }
  v38 = v32;
  v39 = ~v36;
  v40 = *(_QWORD *)(v8 + 72);
  v41 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v41(v11, *(_QWORD *)(v38 + 48) + v40 * v37, v7);
    v42 = sub_100026844((unint64_t *)&unk_100564E20, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t)&protocol conformance descriptor for ShowInfo);
    v43 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v60, v7, v42);
    v44 = *(void (**)(char *, uint64_t))(v8 + 8);
    v44(v11, v7);
    if ((v43 & 1) != 0)
      break;
    v37 = (v37 + 1) & v39;
    if (((*(_QWORD *)&v59[(v37 >> 3) & 0xFFFFFFFFFFFFF8] >> v37) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v44)(v60, v7);
  v46 = *(_BYTE *)(v38 + 32);
  v47 = v46 & 0x3F;
  v48 = (1 << v46) + 63;
  v49 = v48 >> 6;
  v50 = 8 * (v48 >> 6);
  if (v47 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v48 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0), v59, v50);
    v51 = sub_10033D62C((unint64_t *)((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0)), v49, v38, v37, &v61);
    swift_release(v38);
    sub_10017F43C(v61);
  }
  else
  {
    v53 = (void *)swift_slowAlloc(v50, -1);
    memcpy(v53, v59, v50);
    v51 = sub_10033D62C((unint64_t *)v53, v49, v38, v37, &v61);
    swift_release(v38);
    sub_10017F43C(v61);
    swift_slowDealloc(v53, -1, -1);
  }
  return v51;
}

unint64_t *sub_10033CAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v41 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v40 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v40)
          goto LABEL_47;
        v13 = *(_QWORD *)(v41 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v40)
            goto LABEL_47;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v40)
              goto LABEL_47;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v40)
                goto LABEL_47;
              v13 = *(_QWORD *)(v41 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_47:
                  sub_10017F43C(a1);
                  return (unint64_t *)v2;
                }
                v13 = *(_QWORD *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v40)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v41 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v42, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      v36 = sub_10033DA70((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_10017F43C(v43);
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, (const void *)(v2 + 56), v35);
      v36 = sub_10033DA70((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_10017F43C(v43);
      swift_slowDealloc(v37, -1, -1);
    }
    return v36;
  }
  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t *sub_10033CF08(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[9];
  uint64_t v48;

  v5 = *(_QWORD *)(a3 + 16);
  v44 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v6 = v5 - 1;
  v48 = a3;
  v45 = a5;
  v46 = a3 + 56;
  while (2)
  {
    v43 = v6;
    do
    {
      while (1)
      {
        v7 = a5[3];
        v8 = a5[4];
        if (v8)
        {
          v9 = (v8 - 1) & v8;
          v10 = __clz(__rbit64(v8)) | (v7 << 6);
          goto LABEL_16;
        }
        v11 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          goto LABEL_38;
        }
        v12 = (unint64_t)(a5[2] + 64) >> 6;
        v13 = a5[3];
        if (v11 >= v12)
          goto LABEL_36;
        v14 = a5[1];
        v15 = *(_QWORD *)(v14 + 8 * v11);
        if (!v15)
        {
          v16 = v7 + 2;
          v13 = v7 + 1;
          if (v7 + 2 >= v12)
            goto LABEL_36;
          v15 = *(_QWORD *)(v14 + 8 * v16);
          if (!v15)
          {
            v13 = v7 + 2;
            if (v7 + 3 >= v12)
              goto LABEL_36;
            v15 = *(_QWORD *)(v14 + 8 * (v7 + 3));
            if (v15)
            {
              v11 = v7 + 3;
              goto LABEL_15;
            }
            v16 = v7 + 4;
            v13 = v7 + 3;
            if (v7 + 4 >= v12)
              goto LABEL_36;
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (!v15)
            {
              v11 = v7 + 5;
              v13 = v7 + 4;
              if (v7 + 5 >= v12)
                goto LABEL_36;
              v15 = *(_QWORD *)(v14 + 8 * v11);
              if (!v15)
              {
                v13 = v12 - 1;
                v40 = v7 + 6;
                while (v12 != v40)
                {
                  v15 = *(_QWORD *)(v14 + 8 * v40++);
                  if (v15)
                  {
                    v11 = v40 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_36:
                a5[3] = v13;
                a5[4] = 0;
                v41 = v48;
                swift_retain();
                return (unint64_t *)sub_10033DD64(v44, a2, v43, v41);
              }
              goto LABEL_15;
            }
          }
          v11 = v16;
        }
LABEL_15:
        v9 = (v15 - 1) & v15;
        v10 = __clz(__rbit64(v15)) + (v11 << 6);
        v7 = v11;
LABEL_16:
        v17 = *(_QWORD *)(*a5 + 48) + 24 * v10;
        v18 = *(_QWORD *)v17;
        v19 = *(_QWORD *)(v17 + 8);
        v20 = *(unsigned __int8 *)(v17 + 16);
        a5[3] = v7;
        a5[4] = v9;
        v21 = v48;
        Hasher.init(_seed:)(v47, *(_QWORD *)(v48 + 40));
        sub_10003CAD8(v18, v19, v20);
        EpisodeStateIdentifier.hash(into:)(v47, v18, v19, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(v21 + 32);
        v24 = v22 & ~v23;
        if (((1 << v24) & *(_QWORD *)(v46 + 8 * (v24 >> 6))) == 0)
          goto LABEL_3;
        v25 = *(_QWORD *)(v48 + 48) + 24 * v24;
        v26 = *(_QWORD *)v25;
        v27 = *(_QWORD *)(v25 + 8);
        v28 = *(unsigned __int8 *)(v25 + 16);
        sub_10003CAD8(*(_QWORD *)v25, v27, *(_BYTE *)(v25 + 16));
        v29 = static EpisodeStateIdentifier.== infix(_:_:)(v26, v27, v28, v18, v19, v20);
        sub_10003CA84(v26, v27, v28);
        if ((v29 & 1) != 0)
          break;
        v32 = ~v23;
        while (1)
        {
          v24 = (v24 + 1) & v32;
          if (((*(_QWORD *)(v46 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
            break;
          v33 = *(_QWORD *)(v48 + 48) + 24 * v24;
          v34 = *(_QWORD *)v33;
          v35 = *(_QWORD *)(v33 + 8);
          v36 = *(unsigned __int8 *)(v33 + 16);
          sub_10003CAD8(*(_QWORD *)v33, v35, *(_BYTE *)(v33 + 16));
          v37 = static EpisodeStateIdentifier.== infix(_:_:)(v34, v35, v36, v18, v19, v20);
          sub_10003CA84(v34, v35, v36);
          if ((v37 & 1) != 0)
          {
            result = (unint64_t *)sub_10003CA84(v18, v19, v20);
            v30 = v24 >> 6;
            v31 = 1 << v24;
            goto LABEL_23;
          }
        }
LABEL_3:
        result = (unint64_t *)sub_10003CA84(v18, v19, v20);
        a5 = v45;
      }
      result = (unint64_t *)sub_10003CA84(v18, v19, v20);
      v31 = 1 << v24;
      v30 = v24 >> 6;
LABEL_23:
      v38 = v30;
      v39 = v44[v30];
      v44[v38] = v39 & ~v31;
      a5 = v45;
    }
    while ((v31 & v39) == 0);
    v6 = v43 - 1;
    if (__OFSUB__(v43, 1))
    {
LABEL_38:
      __break(1u);
      return result;
    }
    if (v43 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

void sub_10033D298(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  id v27;
  char v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v41;
  void *v42;

  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v7 = v6 - 1;
  v39 = a3 + 56;
  while (2)
  {
    v37 = v7;
    do
    {
      while (1)
      {
        if ((*a5 & 0x8000000000000000) == 0)
        {
          v9 = a5[3];
          v8 = a5[4];
          if (v8)
          {
            v10 = (v8 - 1) & v8;
            v11 = __clz(__rbit64(v8)) | (v9 << 6);
LABEL_7:
            v12 = *(void **)(*(_QWORD *)(*a5 + 48) + 8 * v11);
            v13 = v12;
            goto LABEL_8;
          }
          v29 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_49;
          }
          v30 = (unint64_t)(a5[2] + 64) >> 6;
          if (v29 >= v30)
          {
            v12 = 0;
            v10 = 0;
            goto LABEL_8;
          }
          v31 = a5[1];
          v32 = *(_QWORD *)(v31 + 8 * v29);
          if (v32)
          {
LABEL_22:
            v10 = (v32 - 1) & v32;
            v11 = __clz(__rbit64(v32)) + (v29 << 6);
            v9 = v29;
            goto LABEL_7;
          }
          v34 = v9 + 2;
          if (v9 + 2 >= v30)
            goto LABEL_41;
          v32 = *(_QWORD *)(v31 + 8 * v34);
          if (v32)
          {
LABEL_29:
            v29 = v34;
            goto LABEL_22;
          }
          if (v9 + 3 < v30)
          {
            v32 = *(_QWORD *)(v31 + 8 * (v9 + 3));
            if (v32)
            {
              v29 = v9 + 3;
              goto LABEL_22;
            }
            v34 = v9 + 4;
            if (v9 + 4 >= v30)
            {
              v12 = 0;
              v10 = 0;
              v9 += 3;
LABEL_8:
              a5[3] = v9;
              a5[4] = v10;
              if (!v12)
                goto LABEL_47;
              goto LABEL_12;
            }
            v32 = *(_QWORD *)(v31 + 8 * v34);
            if (v32)
              goto LABEL_29;
            v29 = v9 + 5;
            if (v9 + 5 < v30)
            {
              v32 = *(_QWORD *)(v31 + 8 * v29);
              if (v32)
                goto LABEL_22;
              v29 = v30 - 1;
              v35 = v9 + 6;
              while (v30 != v35)
              {
                v32 = *(_QWORD *)(v31 + 8 * v35++);
                if (v32)
                {
                  v29 = v35 - 1;
                  goto LABEL_22;
                }
              }
LABEL_41:
              v12 = 0;
              v10 = 0;
              v9 = v29;
              goto LABEL_8;
            }
          }
          v12 = 0;
          v10 = 0;
          v9 = v34;
          goto LABEL_8;
        }
        v14 = __CocoaSet.Iterator.next()(a1);
        if (!v14
          || (v15 = v14,
              v41 = v14,
              v16 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr),
              swift_unknownObjectRetain(v15),
              swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v16, 7),
              v12 = v42,
              swift_unknownObjectRelease(v15),
              !v12))
        {
LABEL_47:
          swift_retain();
          sub_10033E02C(a1, a2, v37, a3, (uint64_t *)&unk_100565FA0);
          return;
        }
LABEL_12:
        v17 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a3 + 40));
        v18 = -1 << *(_BYTE *)(a3 + 32);
        v19 = v17 & ~v18;
        v20 = v19 >> 6;
        v21 = 1 << v19;
        if (((1 << v19) & *(_QWORD *)(v39 + 8 * (v19 >> 6))) == 0)
          goto LABEL_3;
        sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
        v22 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v19);
        v23 = static NSObject.== infix(_:_:)(v22, v12);

        if ((v23 & 1) != 0)
          break;
        v24 = ~v18;
        for (i = v19 + 1; ; i = v26 + 1)
        {
          v26 = i & v24;
          if (((*(_QWORD *)(v39 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
            break;
          v27 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v26);
          v28 = static NSObject.== infix(_:_:)(v27, v12);

          if ((v28 & 1) != 0)
          {

            v20 = v26 >> 6;
            v21 = 1 << v26;
            goto LABEL_25;
          }
        }
LABEL_3:

      }
LABEL_25:
      v33 = a1[v20];
      a1[v20] = v33 & ~v21;
    }
    while ((v21 & v33) == 0);
    v7 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_49:
      __break(1u);
      return;
    }
    if (v37 != 1)
      continue;
    break;
  }
}

void *sub_10033D62C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  char v42;
  int64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v51 = a2;
  v9 = sub_10003F544((uint64_t *)&unk_100564E10);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ShowInfo(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v14);
  v59 = (char *)&v50 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v53 = a1;
  v54 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v57 = a3 + 56;
  v58 = a3;
  v55 = a5;
  while (2)
  {
    v52 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v56 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v43 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v45 = *(_QWORD *)(v25 + 8 * v43);
        if (v45)
          goto LABEL_17;
        if (v26 + 2 >= v44)
          goto LABEL_34;
        v45 = *(_QWORD *)(v25 + 8 * (v26 + 2));
        if (v45)
        {
          v43 = v26 + 2;
LABEL_17:
          v29 = (v45 - 1) & v45;
          v30 = __clz(__rbit64(v45)) + (v43 << 6);
          v26 = v43;
          goto LABEL_7;
        }
        if (v26 + 3 >= v44)
        {
          v29 = 0;
          v31 = 1;
          v26 += 2;
          goto LABEL_8;
        }
        v45 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v45)
        {
          v43 = v26 + 3;
          goto LABEL_17;
        }
        v43 = v26 + 4;
        if (v26 + 4 < v44)
        {
          v45 = *(_QWORD *)(v25 + 8 * v43);
          if (v45)
            goto LABEL_17;
          v43 = v44 - 1;
          v48 = v26 + 5;
          while (v44 != v48)
          {
            v45 = *(_QWORD *)(v25 + 8 * v48++);
            if (v45)
            {
              v43 = v48 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          v29 = 0;
          v31 = 1;
          v26 = v43;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v56;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          sub_100007A28((uint64_t)v11, (uint64_t *)&unk_100564E10);
          v49 = v58;
          swift_retain(v58);
          return (void *)sub_10033E284(v53, v51, v52, v49);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v59, v11, v12);
        v32 = v58;
        v33 = *(_QWORD *)(v58 + 40);
        v34 = sub_100026844(&qword_100560A88, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t)&protocol conformance descriptor for ShowInfo);
        v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        v36 = -1 << *(_BYTE *)(v32 + 32);
        v37 = v35 & ~v36;
        if (((*(_QWORD *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = (void *)v23(v59, v12);
        v11 = v54;
        a5 = v55;
      }
      v38 = ~v36;
      v39 = *(_QWORD *)(v13 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(_QWORD *)(v58 + 48) + v39 * v37, v12);
        v41 = sub_100026844((unint64_t *)&unk_100564E20, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t)&protocol conformance descriptor for ShowInfo);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v59, v12, v41);
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v42 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_4;
      }
      result = (void *)v23(v59, v12);
      v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v54;
      v47 = *(unint64_t *)((char *)v53 + v46);
      *(unint64_t *)((char *)v53 + v46) = v47 & ~(1 << v37);
      a5 = v55;
    }
    while ((v47 & (1 << v37)) == 0);
    v22 = v52 - 1;
    if (__OFSUB__(v52, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v52 != 1)
      continue;
    return &_swiftEmptySetSingleton;
  }
}

unint64_t *sub_10033DA70(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  int64_t v38;
  uint64_t v40;
  unint64_t *v41;
  _QWORD v42[9];
  uint64_t v43;

  v7 = *(_QWORD *)(a3 + 16);
  v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v43 = a3 + 56;
  while (2)
  {
    v40 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_45;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_45;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_15;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_45;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v15 = v14 - 1;
                v38 = v9 + 6;
                while (v14 != v38)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    v13 = v38 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain(a3);
                return (unint64_t *)sub_10033E584(v41, a2, v40, a3);
              }
              goto LABEL_15;
            }
          }
          v13 = v18;
        }
LABEL_15:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_16:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42, *(_QWORD *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v43 + 8 * (v24 >> 6))) == 0)
          goto LABEL_3;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = v28[1];
        v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) != 0)
          break;
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v43 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease(v20);
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_23;
          }
        }
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }
      result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_23:
      v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v40 - 1;
    if (__OFSUB__(v40, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v40 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

Swift::Int sub_10033DD64(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v33[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10003F544((uint64_t *)&unk_100565FB0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v31 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v31)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v31)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v31)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = *(_QWORD *)(v4 + 48) + 24 * v13;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(unsigned __int8 *)(v17 + 16);
    Hasher.init(_seed:)(v33, v8[5]);
    sub_10003CAD8(v18, v19, v20);
    EpisodeStateIdentifier.hash(into:)(v33, v18, v19, v20);
    result = Hasher._finalize()();
    v21 = -1 << *((_BYTE *)v8 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = v8[6] + 24 * v24;
    *(_QWORD *)v29 = v18;
    *(_QWORD *)(v29 + 8) = v19;
    *(_BYTE *)(v29 + 16) = v20;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v31)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v31)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_10033E014(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10033E02C(a1, a2, a3, a4, (uint64_t *)&unk_100564E60);
}

Swift::Int sub_10033E020(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10033E02C(a1, a2, a3, a4, (uint64_t *)&unk_100565FA0);
}

Swift::Int sub_10033E02C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v30;

  v5 = a4;
  if (!a3)
  {
    v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v5);
    return (Swift::Int)v10;
  }
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v5;
  sub_10003F544(a5);
  result = static _SetStorage.allocate(capacity:)(v6);
  v10 = (_QWORD *)result;
  v30 = a1;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v16 >= a2)
      goto LABEL_36;
    v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= a2)
        goto LABEL_36;
      v17 = v30[v12];
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= a2)
          goto LABEL_36;
        v17 = v30[v12];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = v10[5];
    v20 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *((_BYTE *)v10 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6)
      goto LABEL_36;
  }
  v18 = v16 + 3;
  if (v18 >= a2)
    goto LABEL_36;
  v17 = v30[v18];
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= a2)
      goto LABEL_36;
    v17 = v30[v12];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10033E284(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v8 = type metadata accessor for ShowInfo(0);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v40 = v9;
  sub_10003F544((uint64_t *)&unk_100565F90);
  result = static _SetStorage.allocate(capacity:)(a3);
  v12 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  v17 = v40;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v20 >= v39)
      {
LABEL_37:
        swift_release(a4);
        return v12;
      }
      v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        v15 = v20 + 1;
        if (v20 + 1 >= v39)
          goto LABEL_37;
        v21 = v38[v15];
        if (!v21)
        {
          v15 = v20 + 2;
          if (v20 + 2 >= v39)
            goto LABEL_37;
          v21 = v38[v15];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v39)
              goto LABEL_37;
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v15 >= v39)
                  goto LABEL_37;
                v21 = v38[v15];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v15 = v22;
          }
        }
      }
LABEL_24:
      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }
    v23 = a4;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    v26 = *(_QWORD *)(v12 + 40);
    v27 = sub_100026844(&qword_100560A88, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t)&protocol conformance descriptor for ShowInfo);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      v17 = v40;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      v17 = v40;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v12 + 48) + v31 * v25, v11, v8);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v23;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_10033E584(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10003F544(&qword_100552B70);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10033E818(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10033E8A0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(void (*)(uint64_t), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v67;
  uint64_t v68;
  void *v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[3];
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[5];

  v87 = a7;
  v88 = a8;
  v94 = a6;
  v95 = a5;
  v96 = a4;
  v89 = a16;
  v90 = a17;
  v91 = a15;
  v92 = a14;
  v93 = a13;
  v83 = a12;
  v86 = a11;
  v82 = a10;
  v85 = a9;
  v78 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v79 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v75);
  v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchTimeInterval(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100[3] = &type metadata for AccounStoreDsidProvider;
  v100[4] = &off_1004C3908;
  swift_bridgeObjectRelease(a3);
  v30 = a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_delegate;
  *(_QWORD *)(v30 + 8) = 0;
  v81 = v30;
  swift_unknownObjectWeakInit(v30, 0);
  v31 = OBJC_IVAR____TtC8Podcasts11JobPipeline_secureDownloadRenewalManager;
  type metadata accessor for SecureDownloadRenewalManager(0);
  *(_QWORD *)(a18 + v31) = SecureDownloadRenewalManager.__allocating_init()();
  v32 = OBJC_IVAR____TtC8Podcasts11JobPipeline_throttler;
  if (qword_100551FB0 != -1)
    swift_once(&qword_100551FB0, sub_10013E3EC);
  v76 = a1 & 1;
  v33 = sub_100047DA4(v26, (uint64_t)qword_100572D18);
  v74 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v74(v29, v33, v26);
  v34 = type metadata accessor for Throttler(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  *(_QWORD *)(a18 + v32) = sub_1002AFF60((uint64_t)v29);
  *(_QWORD *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_taskObservation) = 0;
  *(_QWORD *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline____lazy_storage___operationQueue) = 0;
  v72 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v35 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v84 = v27;
  static DispatchQoS.unspecified.getter(v35);
  v97[0] = _swiftEmptyArrayStorage;
  v36 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v73 = v32;
  v37 = v36;
  v38 = sub_10003F544(&qword_100555A00);
  v80 = v26;
  v39 = v38;
  v40 = sub_10003AEC0((unint64_t *)&qword_1005521C0, &qword_100555A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(v97, v39, v40, v75, v37);
  v41 = v79;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v79, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v78);
  v42 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000017, 0x800000010043E320, v25, v22, v41, 0);
  *(_QWORD *)(a18 + v72) = v42;
  v43 = (_OWORD *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  *v43 = 0u;
  v43[1] = 0u;
  v44 = OBJC_IVAR____TtC8Podcasts11JobPipeline_analyticsChannel;
  *(_QWORD *)(a18 + v44) = objc_msgSend(objc_allocWithZone((Class)PFCoreAnalyticsChannel), "init");
  v45 = (_QWORD *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_bugReporter);
  v46 = objc_msgSend((id)objc_opt_self(PFAutoBugCaptureBugReporter), "sharedInstance");
  v45[3] = sub_100005EC8(0, (unint64_t *)&qword_1005536B8, PFAutoBugCaptureBugReporter_ptr);
  v45[4] = &protocol witness table for PFAutoBugCaptureBugReporter;
  *v45 = v46;
  v74(v29, v90, v26);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v47 = sub_1002AFF60((uint64_t)v29);
  v48 = *(_QWORD *)(a18 + v73);
  *(_QWORD *)(a18 + v73) = v47;
  swift_release(v48);
  *(_BYTE *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_type) = v76;
  v49 = a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_assetsFolder;
  v78 = type metadata accessor for URL(0);
  v79 = *(char **)(v78 - 8);
  (*((void (**)(uint64_t, uint64_t, uint64_t))v79 + 2))(v49, v91, v78);
  v50 = (_QWORD *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_episodeStorage);
  v51 = v85;
  v52 = v82;
  *v50 = v85;
  v50[1] = v52;
  v53 = (_QWORD *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_jobStorage);
  v54 = v86;
  v55 = v83;
  *v53 = v86;
  v53[1] = v55;
  sub_100007A64(v93, a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_mediaLibraryClient, &qword_1005536B0);
  sub_10000A520((uint64_t)v100, a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_dsidProvider);
  sub_10000A520((uint64_t)v92, a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_artworkStorage);
  v56 = v81;
  *(_QWORD *)(v81 + 8) = &off_1004C38B8;
  swift_unknownObjectWeakAssign(v56, v89);
  sub_10014FDF8(v96, a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_metadata, type metadata accessor for EpisodeMetadata);
  sub_10014FDF8(v95, a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline__job, type metadata accessor for DownloadJob);
  sub_10000A520((uint64_t)v94, a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline__task);
  v57 = (uint64_t *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_assetPrefetchBlock);
  v58 = v87;
  v59 = v88;
  *v57 = v87;
  v57[1] = v59;
  type metadata accessor for FairPlayInvalidationManager(0);
  swift_unknownObjectRetain(v51);
  swift_unknownObjectRetain(v54);
  v60 = sub_10002CA20(v58, v59);
  *(_QWORD *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_fairPlayInvalidationManager) = FairPlayInvalidationManager.__allocating_init()(v60);
  v61 = *(id *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  v62 = sub_10003F544(&qword_100564DA0);
  OS_dispatch_queue.sync<A>(execute:)(v97, sub_100340978, a18, v62);

  v63 = v98;
  v64 = v99;
  sub_10003A834(v97, v98);
  v65 = swift_allocObject(&unk_1004C3A18, 24, 7);
  swift_weakInit(v65 + 16, a18);
  v66 = *(uint64_t (**)(void (*)(uint64_t), uint64_t, uint64_t, uint64_t, __n128))(v64 + 136);
  v67 = swift_retain(v65);
  v68 = v66(sub_1003409B4, v65, v63, v64, v67);
  swift_unknownObjectRelease(v51);
  swift_unknownObjectRelease(v54);

  swift_release(v65);
  sub_10002CA30(v58, v59);
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v90, v80);
  (*((void (**)(uint64_t, uint64_t))v79 + 1))(v91, v78);
  sub_10003D380(v92);
  sub_10003D380(v100);
  sub_100007A28(v93, &qword_1005536B0);
  sub_10003D380(v94);
  sub_10003F970(v95, type metadata accessor for DownloadJob);
  sub_10003F970(v96, type metadata accessor for EpisodeMetadata);
  swift_release(v65);
  v69 = *(void **)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_taskObservation);
  *(_QWORD *)(a18 + OBJC_IVAR____TtC8Podcasts11JobPipeline_taskObservation) = v68;

  sub_10003D380(v97);
  return a18;
}

uint64_t sub_10033F048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, void *a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(_QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD v64[5];
  _QWORD v65[5];
  _QWORD v66[4];
  _BYTE v67[8];
  uint64_t v68;
  _QWORD v69[5];

  v59 = a8;
  v61 = a7;
  v60 = a6;
  v63 = a5;
  v51 = a4;
  v52 = a3;
  v58 = a2;
  v57 = a1;
  v56 = a16;
  v55 = a9;
  v53 = a14;
  v49 = a15;
  v46 = a13;
  v62 = a12;
  v54 = a10;
  v50 = a11;
  v18 = type metadata accessor for DispatchTimeInterval(0);
  v45 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v44 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v47 = v20;
  v48 = v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for EpisodeMetadata(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69[3] = &type metadata for AccounStoreDsidProvider;
  v69[4] = &off_1004C3908;
  sub_10014FDF8(a3, (uint64_t)v29, v30);
  sub_10014FDF8(a4, (uint64_t)v26, type metadata accessor for DownloadJob);
  sub_10000A520((uint64_t)v63, (uint64_t)&v68);
  sub_100007A64(a11, (uint64_t)v67, &qword_1005536B0);
  sub_10000A520((uint64_t)v69, (uint64_t)v66);
  sub_10000A520((uint64_t)v62, (uint64_t)v65);
  v31 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v46, v20);
  v32 = v45;
  v33 = (uint64_t)v44;
  v34 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v49, v18);
  v35 = sub_100038DEC((uint64_t)v66, v66[3]);
  __chkstk_darwin(v35);
  (*(void (**)(void))(v36 + 16))();
  v64[3] = &type metadata for AccounStoreDsidProvider;
  v64[4] = &off_1004C3908;
  v37 = type metadata accessor for JobPipeline(0);
  v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  v39 = sub_100038DEC((uint64_t)v64, (uint64_t)&type metadata for AccounStoreDsidProvider);
  __chkstk_darwin(v39);
  (*(void (**)(void))(v40 + 16))();
  v41 = sub_10033E8A0(v56, v57, v58, (uint64_t)v29, (uint64_t)v26, &v68, v60, v61, v59, v55, *((uint64_t *)&v55 + 1), v54, (uint64_t)v67, v65, (uint64_t)v23, v53, v33, v38);
  sub_10003D380(v64);
  sub_10003D380(v66);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v18);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v31, v47);
  sub_10003D380(v62);
  sub_10003D380(v69);
  sub_100007A28(v50, &qword_1005536B0);
  sub_10003D380(v63);
  sub_10003F970(v51, type metadata accessor for DownloadJob);
  sub_10003F970(v52, type metadata accessor for EpisodeMetadata);
  return v41;
}

_QWORD *sub_10033F4E8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v45 = a2;
  v46 = a3;
  v44 = sub_10003F544((uint64_t *)&unk_100564E00);
  v5 = __chkstk_darwin(v44);
  v43 = (uint64_t)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v42 = (uint64_t)v36 - v8;
  __chkstk_darwin(v7);
  v41 = (char *)v36 - v9;
  v10 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v10)
  {
    v36[1] = v3;
    v49 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v10);
    result = (_QWORD *)sub_10033E818(a1);
    v13 = (uint64_t)result;
    v14 = 0;
    v15 = a1 + 64;
    v37 = a1 + 80;
    v38 = v10;
    v39 = v12;
    v40 = a1 + 64;
    v16 = (uint64_t)v41;
    while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(_BYTE *)(a1 + 32))
    {
      v18 = (unint64_t)v13 >> 6;
      if ((*(_QWORD *)(v15 + 8 * ((unint64_t)v13 >> 6)) & (1 << v13)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
        goto LABEL_23;
      v47 = v14;
      v48 = 1 << v13;
      v19 = v44;
      v20 = v16 + *(int *)(v44 + 48);
      v21 = *(_QWORD *)(a1 + 48);
      v22 = type metadata accessor for DownloadJob(0);
      sub_10014FDF8(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v13, v16, type metadata accessor for DownloadJob);
      sub_10000A520(*(_QWORD *)(a1 + 56) + 40 * v13, v20);
      v23 = v42;
      sub_10014FDF8(v16, v42, type metadata accessor for DownloadJob);
      sub_10000A520(v20, v23 + *(int *)(v19 + 48));
      v24 = a1;
      v25 = v43;
      sub_10003DC78(v23, v43, (uint64_t *)&unk_100564E00);
      sub_100007A28(v16, (uint64_t *)&unk_100564E00);
      v26 = v45(v25, v25 + *(int *)(v19 + 48));
      v27 = v25;
      a1 = v24;
      v28 = sub_100007A28(v27, (uint64_t *)&unk_100564E00);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      v29 = v49[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
      v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v26);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v30);
      v17 = 1 << *(_BYTE *)(v24 + 32);
      if (v13 >= v17)
        goto LABEL_24;
      v15 = v40;
      v31 = *(_QWORD *)(v40 + 8 * v18);
      if ((v31 & v48) == 0)
        goto LABEL_25;
      LODWORD(v12) = v39;
      if (*(_DWORD *)(v24 + 36) != (_DWORD)v39)
        goto LABEL_26;
      v32 = v31 & (-2 << (v13 & 0x3F));
      if (v32)
      {
        v17 = __clz(__rbit64(v32)) | v13 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = v18 + 1;
        v34 = (unint64_t)(v17 + 63) >> 6;
        if (v18 + 1 < v34)
        {
          v35 = *(_QWORD *)(v40 + 8 * v33);
          if (v35)
          {
LABEL_18:
            v17 = __clz(__rbit64(v35)) + (v33 << 6);
          }
          else
          {
            while (v34 - 2 != v18)
            {
              v35 = *(_QWORD *)(v37 + 8 * v18++);
              if (v35)
              {
                v33 = v18 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v14 = v47 + 1;
      v13 = v17;
      if (v47 + 1 == v38)
        return v49;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t sub_10033F80C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10033F830()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_10033F86C()
{
  uint64_t v0;

  sub_100332674(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_10033F884@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10033F8B0()
{
  sub_10033F914(1);
}

double sub_10033F8BC()
{
  uint64_t v0;

  return sub_1003363DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_10033F8D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10033F90C()
{
  sub_10033F914(0);
}

void sub_10033F914(char a1)
{
  uint64_t v1;

  sub_10032E61C(*(_QWORD *)(v1 + 24), a1, *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_10033F940@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10013E510(v1, a1);
}

void sub_10033F95C()
{
  uint64_t v0;

  sub_100337088(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint8_t **)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_10033F96C()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v1 = objc_msgSend(v0, "environment");

  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16))
    sub_10002E5D8(0xD00000000000001BLL, 0x800000010043E2C0);
  return swift_bridgeObjectRelease(v2);
}

void sub_10033FA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v45 = a6;
  v46 = a7;
  v43 = a3;
  v44 = a4;
  v42 = a2;
  v41 = sub_10003F544((uint64_t *)&unk_100564DD0);
  __chkstk_darwin();
  v10 = (uint64_t *)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v12 = (uint64_t *)((char *)&v37 - v11);
  v47 = (unint64_t)_swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(a1 + 64);
  v38 = a1 + 64;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v39 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v17 = 0;
  v40 = a5 & 1;
  while (v16)
  {
    v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v19 = v18 | (v17 << 6);
LABEL_22:
    v23 = *(_QWORD *)(a1 + 56);
    v24 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v19);
    v25 = *v24;
    v26 = v24[1];
    v27 = v23 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for EpisodeMetadata(0) - 8) + 72) * v19;
    v28 = v41;
    sub_10014FDF8(v27, (uint64_t)v12 + *(int *)(v41 + 48), type metadata accessor for EpisodeMetadata);
    *v12 = v25;
    v12[1] = v26;
    sub_10003DC78((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_100564DD0);
    v29 = *v10;
    v30 = v10[1];
    v31 = (uint64_t)v10 + *(int *)(v28 + 48);
    swift_bridgeObjectRetain(v26);
    v32 = sub_1003314EC(v29, v30, v31, v43, v44, v40, v45, v46);
    v33 = sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100564DD0);
    if (v32)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      v35 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v34 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v35 >= v34 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
      v36 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v32);
      specialized Array._endMutation()(v36);
    }
  }
  v20 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v20 >= v39)
    goto LABEL_26;
  v21 = *(_QWORD *)(v38 + 8 * v20);
  ++v17;
  if (v21)
    goto LABEL_21;
  v17 = v20 + 1;
  if (v20 + 1 >= v39)
    goto LABEL_26;
  v21 = *(_QWORD *)(v38 + 8 * v17);
  if (v21)
    goto LABEL_21;
  v17 = v20 + 2;
  if (v20 + 2 >= v39)
    goto LABEL_26;
  v21 = *(_QWORD *)(v38 + 8 * v17);
  if (v21)
    goto LABEL_21;
  v17 = v20 + 3;
  if (v20 + 3 >= v39)
    goto LABEL_26;
  v21 = *(_QWORD *)(v38 + 8 * v17);
  if (v21)
  {
LABEL_21:
    v16 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
    goto LABEL_22;
  }
  v22 = v20 + 4;
  if (v22 >= v39)
  {
LABEL_26:
    swift_release(a1);
    return;
  }
  v21 = *(_QWORD *)(v38 + 8 * v22);
  if (v21)
  {
    v17 = v22;
    goto LABEL_21;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v39)
      goto LABEL_26;
    v21 = *(_QWORD *)(v38 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
}

_QWORD *sub_10033FD0C(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v4 = a1;
  v21 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    v6 = 0;
    v7 = v4 & 0xC000000000000001;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    v18 = i;
    v19 = v4;
    while (1)
    {
      if (v7)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
        v10 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
LABEL_14:
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(v4);
          swift_release(v9);
          swift_release(v21);
          return a2;
        }
        goto LABEL_9;
      }
      if (v6 >= *(_QWORD *)(v8 + 16))
        break;
      v9 = *(_QWORD *)(v4 + 8 * v6 + 32);
      swift_retain();
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_14;
LABEL_9:
      v20 = v9;
      v11 = sub_1003301BC(&v20, (uint64_t)a2);
      if (v2)
        goto LABEL_15;
      if ((v11 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v12 = v8;
        v13 = v21[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
        v14 = v13;
        v8 = v12;
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v9);
        specialized ContiguousArray._endMutation()(v15);
        i = v18;
        v4 = v19;
      }
      else
      {
        swift_release(v9);
      }
      ++v6;
      if (v10 == i)
      {
        a2 = v21;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_18:
    if (v4 < 0)
      v16 = v4;
    else
      v16 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  a2 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return a2;
}

_QWORD *sub_10033FEB0(uint64_t a1, uint64_t a2, _QWORD *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;

  v5 = v4;
  LOBYTE(v6) = a4;
  v41 = a2;
  v42 = a3;
  v40 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v40);
  v39 = (uint64_t *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_37;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      v10 = 0;
      v11 = 0xE900000000000064;
      v12 = 0x7261646E6174732ELL;
      v38 = a1 & 0xC000000000000001;
      v36 = a1;
      v37 = a1 & 0xFFFFFFFFFFFFFF8;
      if ((v6 & 1) != 0)
        v12 = 1936484398;
      v35 = v12;
      if ((v6 & 1) != 0)
        v11 = 0xE400000000000000;
      v34 = v11;
      while (v38)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_34:
          __break(1u);
          return v43;
        }
LABEL_13:
        v15 = *(id *)(v13 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
        v17 = v39;
        v16 = v40;
        v18 = v5;
        OS_dispatch_queue.sync<A>(execute:)(v39, sub_10033F940, v13, v40);

        v19 = (char *)v17 + *(int *)(v16 + 32);
        v20 = *(_QWORD *)v19;
        v6 = (_QWORD *)*((_QWORD *)v19 + 1);
        v21 = v19[16];
        swift_bridgeObjectRetain(v6);
        sub_10003F970((uint64_t)v17, type metadata accessor for DownloadJob);
        v22 = v20 == v41 && v6 == v42;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v6, v41, v42, 0) & 1) != 0)
        {
          if (v21)
            v23 = 1936484398;
          else
            v23 = 0x7261646E6174732ELL;
          if (v21)
            v24 = 0xE400000000000000;
          else
            v24 = 0xE900000000000064;
          v25 = v34;
          if (v23 == v35 && v24 == v34)
          {
            swift_bridgeObjectRelease(v6);
            v28 = swift_bridgeObjectRelease_n(v25, 2);
LABEL_31:
            v6 = &v43;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
            v29 = v43[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
            v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v13);
            specialized ContiguousArray._endMutation()(v30);
            goto LABEL_9;
          }
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v35, v34, 0);
          swift_bridgeObjectRelease(v6);
          swift_bridgeObjectRelease(v24);
          v28 = swift_bridgeObjectRelease(v25);
          if ((v27 & 1) != 0)
            goto LABEL_31;
          swift_release(v13);
        }
        else
        {
          swift_release(v13);
          swift_bridgeObjectRelease(v6);
        }
LABEL_9:
        v5 = v18;
        ++v10;
        a1 = v36;
        if (v14 == v9)
          return v43;
      }
      if (v10 < *(_QWORD *)(v37 + 16))
        break;
      __break(1u);
LABEL_37:
      if (a1 < 0)
        v32 = a1;
      else
        v32 = a1 & 0xFFFFFFFFFFFFFF8;
      v9 = _CocoaArrayWrapper.endIndex.getter(v32);
      if (!v9)
        return _swiftEmptyArrayStorage;
    }
    v13 = *(_QWORD *)(a1 + 8 * v10 + 32);
    swift_retain(v13);
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_34;
    goto LABEL_13;
  }
  return _swiftEmptyArrayStorage;
}

void sub_100340198(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62[24];
  uint64_t v63;

  v53 = a2;
  v59 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v58 = (uint64_t *)((char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = *(_QWORD *)(a1 + 56);
  v49 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v4;
  v51 = (unint64_t)(v5 + 63) >> 6;
  v52 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage;
  v54 = a1;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  v50 = xmmword_1003CA200;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v8 << 6);
    }
    else
    {
      if (__OFADD__(v8++, 1))
        goto LABEL_51;
      if (v8 >= v51)
        goto LABEL_49;
      v12 = *(_QWORD *)(v49 + 8 * v8);
      if (!v12)
      {
        v13 = v8 + 1;
        if (v8 + 1 >= v51)
          goto LABEL_49;
        v12 = *(_QWORD *)(v49 + 8 * v13);
        if (v12)
          goto LABEL_16;
        v13 = v8 + 2;
        if (v8 + 2 >= v51)
          goto LABEL_49;
        v12 = *(_QWORD *)(v49 + 8 * v13);
        if (v12)
          goto LABEL_16;
        v13 = v8 + 3;
        if (v8 + 3 >= v51)
          goto LABEL_49;
        v12 = *(_QWORD *)(v49 + 8 * v13);
        if (v12)
        {
LABEL_16:
          v8 = v13;
        }
        else
        {
          v37 = v8 + 4;
          if (v8 + 4 >= v51)
            goto LABEL_49;
          v12 = *(_QWORD *)(v49 + 8 * v37);
          v8 += 4;
          if (!v12)
          {
            while (1)
            {
              v8 = v37 + 1;
              if (__OFADD__(v37, 1))
                goto LABEL_52;
              if (v8 >= v51)
                break;
              v12 = *(_QWORD *)(v49 + 8 * v8);
              ++v37;
              if (v12)
                goto LABEL_17;
            }
LABEL_49:
            swift_release(v54);
            return;
          }
        }
      }
LABEL_17:
      v7 = (v12 - 1) & v12;
      v10 = __clz(__rbit64(v12)) + (v8 << 6);
    }
    v14 = (uint64_t *)(*(_QWORD *)(v54 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = *(_QWORD *)(v53 + v52);
    v18 = *(void **)(v17 + 16);
    swift_bridgeObjectRetain(v16);
    objc_msgSend(v18, "lock", swift_retain().n128_f64[0]);
    swift_beginAccess(v17 + 24, v62, 0, 0);
    v19 = *(_QWORD *)(v17 + 24);
    if ((unint64_t)v19 >> 62)
      break;
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*(_QWORD *)(v17 + 24), 2);
    swift_bridgeObjectRetain(v16);
    if (v20)
      goto LABEL_20;
LABEL_46:
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v19);
    v23 = 0;
LABEL_47:
    objc_msgSend(*(id *)(v17 + 16), "unlock", swift_bridgeObjectRelease(v19).n128_f64[0]);
    swift_release(v17);
    if (v23)
    {
      swift_release(v23);
      v42 = static os_log_type_t.error.getter(v41);
      v43 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v44 = (void *)static OS_os_log.downloads.getter(v43);
      v45 = sub_10003F544(&qword_1005559A0);
      v46 = swift_allocObject(v45, 72, 7);
      *(_OWORD *)(v46 + 16) = v50;
      *(_QWORD *)(v46 + 56) = &type metadata for String;
      *(_QWORD *)(v46 + 64) = sub_10003E198();
      *(_QWORD *)(v46 + 32) = v15;
      *(_QWORD *)(v46 + 40) = v16;
      *(_QWORD *)&v47 = swift_bridgeObjectRetain(v16).n128_u64[0];
      os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v44, "Download for episode uuid %{public}s is already in flight", 57, 2, v46, v47);
      swift_bridgeObjectRelease(v16);

      v16 = v46;
    }
    swift_bridgeObjectRelease(v16);
  }
  v38 = v17;
  if (v19 < 0)
    v39 = *(_QWORD *)(v17 + 24);
  else
    v39 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v19, 2);
  swift_bridgeObjectRetain(v16);
  v40 = v39;
  v17 = v38;
  v20 = _CocoaArrayWrapper.endIndex.getter(v40);
  if (!v20)
    goto LABEL_46;
LABEL_20:
  v56 = v8;
  v57 = v17;
  v55 = v7;
  v60 = v16;
  v61 = v19 & 0xC000000000000001;
  v21 = 4;
  while (1)
  {
    v22 = v21 - 4;
    if (!v61)
      break;
    v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21 - 4, v19);
    v24 = v21 - 3;
    if (__OFADD__(v22, 1))
      goto LABEL_50;
LABEL_26:
    v25 = *(id *)(v23 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    v26 = v15;
    v28 = v58;
    v27 = v59;
    v29 = v63;
    OS_dispatch_queue.sync<A>(execute:)(v58, sub_10033F940, v23, v59);
    v63 = v29;

    v30 = (_QWORD *)((char *)v28 + *(int *)(v27 + 20));
    v32 = *v30;
    v31 = v30[1];
    swift_bridgeObjectRetain(v31);
    v33 = (uint64_t)v28;
    v15 = v26;
    v16 = v60;
    sub_10003F970(v33, type metadata accessor for DownloadJob);
    if (v32 == v15 && v31 == v16)
    {
      swift_bridgeObjectRelease(v19);
      v36 = v16;
LABEL_35:
      v7 = v55;
      v8 = v56;
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v36);
      v17 = v57;
      goto LABEL_47;
    }
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, v15, v16, 0);
    swift_bridgeObjectRelease(v31);
    if ((v35 & 1) != 0)
    {
      v36 = v19;
      goto LABEL_35;
    }
    swift_release(v23);
    ++v21;
    if (v24 == v20)
    {
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v19);
      v23 = 0;
      v7 = v55;
      v8 = v56;
      v17 = v57;
      goto LABEL_47;
    }
  }
  v23 = *(_QWORD *)(v19 + 8 * v21);
  swift_retain();
  v24 = v21 - 3;
  if (!__OFADD__(v22, 1))
    goto LABEL_26;
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

void sub_100340684(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t Strong;
  void *v17;
  NSString v18;
  _BYTE v19[24];

  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = a2 + 16;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v9 << 6);
LABEL_22:
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11 + 8);
    swift_beginAccess(v8, v19, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v8);
    if (Strong)
    {
      v17 = (void *)Strong;
      swift_bridgeObjectRetain(v15);
      v18 = String._bridgeToObjectiveC()();
      objc_msgSend(v17, "downloadEpisode:isFromSaving:", v18, 0);
      swift_bridgeObjectRelease(v15);

    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_21;
  v9 = v12 + 1;
  if (v12 + 1 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
    goto LABEL_21;
  v9 = v12 + 2;
  if (v12 + 2 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
    goto LABEL_21;
  v9 = v12 + 3;
  if (v12 + 3 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_21:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_22;
  }
  v14 = v12 + 4;
  if (v14 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_24;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_100340848()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

double sub_100340874()
{
  uint64_t v0;

  return sub_100337D14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v0 + 40));
}

uint64_t sub_100340884()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003408A8()
{
  sub_1003383D8();
}

uint64_t sub_1003408B0()
{
  return type metadata accessor for EpisodeDownloadsManager(0);
}

ValueMetadata *type metadata accessor for AccounStoreDsidProvider()
{
  return &type metadata for AccounStoreDsidProvider;
}

uint64_t sub_1003408C8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003408EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1003380CC(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_1003408F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

void sub_100340928()
{
  uint64_t v0;
  uint64_t v1;
  Class isa;

  v1 = *(_QWORD *)(v0 + 16);
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(v1 + 16))(v1, isa);

}

uint64_t sub_100340978@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10013E5D0(v1, a1);
}

uint64_t sub_100340990()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003409B4(uint64_t a1)
{
  uint64_t v1;

  sub_10013E6C4(a1, v1);
}

uint64_t sub_1003409BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1003409CC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_10032F748(a1, *(unsigned __int8 *)(v2 + 16), a2);
}

uint64_t sub_1003409E4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100340A18(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_10033003C(a1, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2);
}

uint64_t sub_100340A3C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100340A70(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1003306F4(a1, *(_QWORD **)(v2 + 16), *(void (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_100340A8C(uint64_t a1)
{
  uint64_t v1;

  return sub_100045830(a1, v1, (uint64_t *)&unk_100564DC0, (void (*)(uint64_t, uint64_t))sub_100045994, (void (*)(uint64_t, uint64_t))sub_100045978);
}

uint64_t sub_100340ABC(uint64_t a1)
{
  uint64_t v1;

  return sub_100339894(a1, v1, &qword_100563DB0, &OBJC_IVAR____TtC8Podcasts26StartJobPipelinesOperation_input, (void (*)(uint64_t, uint64_t))sub_100045994, (void (*)(uint64_t, uint64_t))sub_100045978);
}

uint64_t sub_100340AF4(uint64_t a1)
{
  uint64_t v1;

  return sub_100045830(a1, v1, &qword_100563DB0, (void (*)(uint64_t, uint64_t))sub_100045994, (void (*)(uint64_t, uint64_t))sub_100045978);
}

uint64_t sub_100340B24()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_100340B58(uint64_t a1)
{
  uint64_t v1;

  sub_100330CD8(a1, *(void (**)(void *, __n128))(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100340B68()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100340B9C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100331E8C(a1, a2, a3 & 1, v3);
}

uint64_t sub_100340BA8()
{
  return sub_100340E6C((void (*)(_QWORD))&_swift_release, 56);
}

uint64_t sub_100340BB8()
{
  return sub_10002A264((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003720C8);
}

uint64_t sub_100340BC4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

void sub_100340BD4(_OWORD *a1@<X8>)
{
  uint64_t *v1;

  sub_10032BD6C(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100340BF0()
{
  return sub_100340E6C((void (*)(_QWORD))&_swift_bridgeObjectRelease, 72);
}

uint64_t sub_100340C04()
{
  return sub_100340E6C((void (*)(_QWORD))&_swift_bridgeObjectRelease, 72);
}

uint64_t sub_100340C14(uint64_t a1)
{
  uint64_t *v1;

  return sub_10032E470(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_100340C28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100340C4C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100340C78(uint64_t a1)
{
  uint64_t v1;

  sub_10032D950(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100340C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10032C6C8(a1, a2, v2);
}

uint64_t sub_100340C98()
{
  uint64_t v0;

  return sub_100333E28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)sub_10033F940, &selRef_downloadManagerDidUpdateDownload_, (uint64_t (*)(void))&static os_log_type_t.info.getter, "Download pipeline did send notification for pipeline update: %s");
}

uint64_t sub_100340CD0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100340D04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100340D18()
{
  uint64_t v0;

  return sub_1003340D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100340D24(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1003359EC(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_100340D30()
{
  return sub_100340E6C((void (*)(_QWORD))&_swift_release, 56);
}

uint64_t sub_100340D40()
{
  return sub_10002A264((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003721DC);
}

double sub_100340D4C(uint64_t a1)
{
  uint64_t v1;

  return sub_100335F04(a1, v1);
}

uint64_t sub_100340D68()
{
  uint64_t v0;

  return sub_1003346DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100340D70(id a1, char a2)
{
  if (a2 == 1)
  {
    swift_errorRelease(a1);
  }
  else if (!a2)
  {

  }
}

id sub_100340D8C(id result, char a2)
{
  if (a2 == 1)
    return (id)swift_errorRetain(result);
  if (!a2)
    return result;
  return result;
}

uint64_t sub_100340DA8(uint64_t result, uint64_t a2, char a3, char a4)
{
  if (a4 == 1)
    return swift_errorRelease();
  if (!a4)
    return sub_1001520B8(result, a2, a3);
  return result;
}

uint64_t sub_100340DC4(uint64_t result, uint64_t a2, char a3, char a4)
{
  if (a4 == 1)
    return swift_errorRetain();
  if (!a4)
    return sub_100340DE0(result, a2, a3);
  return result;
}

uint64_t sub_100340DE0(uint64_t result, uint64_t a2, char a3)
{
  if (a3 >> 6 == 2)
    return swift_errorRetain();
  if (!(a3 >> 6))
    return sub_10014F9CC(result, a2, a3);
  return result;
}

uint64_t sub_100340E00()
{
  uint64_t v0;

  return sub_100333E28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)sub_10033F940, &selRef_downloadManagerDidAddDownload_, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Download pipeline did send notification for pipeline start: %s");
}

uint64_t sub_100340E38()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100340E5C()
{
  return sub_100340E6C((void (*)(_QWORD))&_swift_release, 56);
}

uint64_t sub_100340E6C(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 32));
  a1(*(_QWORD *)(v2 + 48));
  return swift_deallocObject(v2, a2, 7);
}

double sub_100340EB8()
{
  uint64_t v0;

  return sub_100337EC0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100340ECC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100340EF8()
{
  uint64_t v0;

  sub_100337884(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100340F00()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100340F10()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

void sub_100340F34(uint64_t a1)
{
  uint64_t v1;

  sub_10033645C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100340F44()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

void sub_100340F70()
{
  uint64_t v0;

  sub_100336590(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_100340F80()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100340FA4()
{
  uint64_t v0;

  return sub_100339064(*(void **)(v0 + 24));
}

unint64_t sub_100340FAC()
{
  unint64_t result;

  result = qword_100564ED8;
  if (!qword_100564ED8)
  {
    result = swift_getWitnessTable(&unk_1003CA074, &type metadata for DownloaderSessionConfigurationType);
    atomic_store(result, (unint64_t *)&qword_100564ED8);
  }
  return result;
}

uint64_t sub_100340FF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100341014()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_10003D380((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100341040(uint64_t a1, uint64_t a2, _QWORD *a3, char a4, uint64_t a5)
{
  uint64_t v5;

  return sub_100332C04(a1, a2, a3, a4 & 1, a5, v5);
}

uint64_t sub_10034104C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_10003D380(v0 + 3);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100341080()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  if (*(_QWORD *)(v0 + 56))
    swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

void sub_100341178(_OWORD *a1@<X8>)
{
  sub_100340BD4(a1);
}

void sub_10034118C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  void (*v16)();
  _QWORD aBlock[5];
  uint64_t v18;
  __int16 v19;
  char v20[24];

  v1 = type metadata accessor for StationShowContextActionData(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_10055A370);
  __chkstk_darwin();
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v0 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_stationShowData;
  swift_beginAccess(v7, v20, 0, 0);
  sub_100299580(v7, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1))
  {
    sub_1002995C8((uint64_t)v6);
  }
  else
  {
    sub_1001C5068((uint64_t)v6, (uint64_t)v4);
    sub_1002995C8((uint64_t)v6);
    v8 = (void *)sub_1001C4E30();
    sub_1001B8650((uint64_t)v4);
    if (v8)
    {
      v19 = 0;
      v9 = objc_msgSend(v8, "managedObjectContext");
      if (v9)
      {
        v10 = v9;
        v11 = (_QWORD *)swift_allocObject(&unk_1004C43E8, 40, 7);
        v11[2] = v8;
        v11[3] = (char *)&v19 + 1;
        v11[4] = &v19;
        v12 = swift_allocObject(&unk_1004C4410, 32, 7);
        *(_QWORD *)(v12 + 16) = sub_100342110;
        *(_QWORD *)(v12 + 24) = v11;
        aBlock[4] = sub_1001529CC;
        v18 = v12;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100029B1C;
        aBlock[3] = &unk_1004C4428;
        v13 = _Block_copy(aBlock);
        v14 = v18;
        v15 = v8;
        swift_retain();
        objc_msgSend(v10, "performBlockAndWait:", v13, swift_release(v14).n128_f64[0]);

        _Block_release(v13);
        LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v12, "", 131, 45, 58, 1);
        swift_release(v12);
        if ((v15 & 1) != 0)
        {
          __break(1u);
          return;
        }
        if ((v19 & 0x100) != 0)
        {
          sub_10002CA30((uint64_t)sub_100342110, (uint64_t)v11);
          return;
        }
        v16 = sub_100342110;
      }
      else
      {

        v11 = 0;
        v16 = 0;
      }
      sub_10002CA30((uint64_t)v16, (uint64_t)v11);
    }
  }
}

void sub_10034141C(void *a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned __int8 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v6 = type metadata accessor for NSFastEnumerationIterator(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, "episodes");
  if (v10)
  {
    v11 = v10;
    v19 = v7;
    v20 = v6;
    v12 = NSOrderedSet.makeIterator()();
    NSFastEnumerationIterator.next()(&v23, v12);
    while (v24)
    {
      sub_10013B9CC(&v23, v22);
      v13 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
      v14 = swift_dynamicCast(&v21, v22, (char *)&type metadata for Any + 8, v13, 6);
      if ((v14 & 1) != 0)
      {
        v15 = v21;
        v16 = (objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") & 1) != 0? 0: objc_msgSend(v15, "isExplicit");
        *a2 = v16;
        v17 = objc_msgSend(v15, "isExternalType");

        *a3 = v17;
        if ((*a2 & 1) != 0 || v17)
          break;
      }
      NSFastEnumerationIterator.next()(&v23, v14);
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v20);

  }
}

void sub_1003415C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void (*v17)();
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  char isEscapingClosureAtFileLocation;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  id v29;
  NSString v30;
  __n128 v31;
  void *v32;
  void *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void (*v42)();
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void **aBlock;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  void *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  char v58[32];

  v50 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin();
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StationShowContextActionData(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_10055A370);
  __chkstk_darwin();
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v0 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_stationShowData;
  swift_beginAccess(v14, v58, 0, 0);
  sub_100299580(v14, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
  {
    sub_1002995C8((uint64_t)v13);
    return;
  }
  v48 = v3;
  v49 = v1;
  v47 = v7;
  sub_1001C5068((uint64_t)v13, (uint64_t)v11);
  sub_1002995C8((uint64_t)v13);
  v15 = (void *)sub_1001C4E30();
  sub_1001B8650((uint64_t)v11);
  if (v15)
  {
    v45 = v5;
    v46 = v4;
    v16 = _swiftEmptyArrayStorage;
    v57 = _swiftEmptyArrayStorage;
    v17 = (void (*)())objc_msgSend(v15, "managedObjectContext");
    if (v17)
    {
      v18 = swift_allocObject(&unk_1004C4370, 32, 7);
      *(_QWORD *)(v18 + 16) = v15;
      *(_QWORD *)(v18 + 24) = &v57;
      v19 = swift_allocObject(&unk_1004C4398, 32, 7);
      *(_QWORD *)(v19 + 16) = sub_1003420D4;
      *(_QWORD *)(v19 + 24) = v18;
      v55 = sub_100029B3C;
      v56 = v19;
      aBlock = _NSConcreteStackBlock;
      v52 = 1107296256;
      v53 = sub_100029B1C;
      v54 = &unk_1004C43B0;
      v20 = _Block_copy(&aBlock);
      v21 = v56;
      v22 = v15;
      swift_retain();
      objc_msgSend(v17, "performBlockAndWait:", v20, swift_release(v21).n128_f64[0]);

      _Block_release(v20);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v19, "", 131, 73, 58, 1);
      swift_release(v19);
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
        return;
      }
      v17 = sub_1003420D4;
      v16 = v57;
      v24 = v57[2];
      if (v24)
        goto LABEL_7;
    }
    else
    {
      v18 = 0;
      v24 = _swiftEmptyArrayStorage[2];
      if (v24)
      {
LABEL_7:
        v42 = v17;
        v43 = v18;
        v44 = v15;
        v25 = (void *)objc_opt_self(MTPlayerController);
        swift_bridgeObjectRetain(v16);
        v41 = v16;
        v26 = v16 + 5;
        do
        {
          v27 = *v26;
          v28 = objc_msgSend(v25, "defaultInstance", swift_bridgeObjectRetain(*v26).n128_f64[0]);
          v29 = objc_msgSend(v28, "upNextController");

          v30 = String._bridgeToObjectiveC()();
          objc_msgSend(v29, "addEpisodeUuidToUpNext:", v30, swift_bridgeObjectRelease(v27).n128_f64[0]);

          v26 += 2;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease(v41);
        sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
        v32 = (void *)static OS_dispatch_queue.main.getter(v31);
        v55 = sub_100341D30;
        v56 = 0;
        aBlock = _NSConcreteStackBlock;
        v52 = 1107296256;
        v53 = sub_100027AF8;
        v54 = &unk_1004C4338;
        v33 = _Block_copy(&aBlock);
        v34 = v47;
        static DispatchQoS.unspecified.getter(v33);
        aBlock = (void **)_swiftEmptyArrayStorage;
        v35 = sub_10017F258();
        v36 = sub_10003F544((uint64_t *)&unk_10055B200);
        v37 = sub_100026534();
        v38 = v48;
        v39 = v50;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v36, v37, v50, v35);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v38, v33);
        _Block_release(v33);

        (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v39);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v34, v46);
        v17 = v42;
        v18 = v43;
        goto LABEL_12;
      }
    }

LABEL_12:
    swift_bridgeObjectRelease(v57);
    sub_10002CA30((uint64_t)v17, v18);
  }
}

void sub_100341A9C(void *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  char **v9;
  _UNKNOWN **v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  _UNKNOWN **v21;
  char **v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  _OWORD v35[2];
  __int128 v36;
  uint64_t v37;

  v33 = a2;
  v3 = type metadata accessor for NSFastEnumerationIterator(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "episodes");
  if (v7)
  {
    v31 = v4;
    v32 = v3;
    v30 = v7;
    v8 = NSOrderedSet.makeIterator()();
    NSFastEnumerationIterator.next()(&v36, v8);
    if (v37)
    {
      v9 = &selRef_uniquenessHash;
      v10 = CPInterfaceController_ptr;
      do
      {
        sub_10013B9CC(&v36, v35);
        v12 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
        v11 = swift_dynamicCast(&v34, v35, (char *)&type metadata for Any + 8, v12, 6);
        if ((v11 & 1) != 0)
        {
          v13 = v34;
          v14 = objc_msgSend(v34, v9[219]);
          if (v14)
          {
            v15 = v14;
            v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
            v18 = v17;

            if (objc_msgSend((id)objc_opt_self(v10[290]), "isExplicitContentAllowed"))
            {
              if ((objc_msgSend(v13, "isExternalType") & 1) == 0)
                goto LABEL_14;
            }
            else
            {
              v19 = objc_msgSend(v13, "isExplicit");
              v20 = objc_msgSend(v13, "isExternalType");
              if ((v19 & 1) == 0 && (v20 & 1) == 0)
              {
LABEL_14:
                v21 = v10;
                v22 = v9;
                v23 = v33;
                v24 = (_QWORD *)*v33;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v33);
                *v23 = v24;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v24 = sub_10027AE00(0, v24[2] + 1, 1, v24);
                  *v33 = v24;
                }
                v27 = v24[2];
                v26 = v24[3];
                if (v27 >= v26 >> 1)
                {
                  v24 = sub_10027AE00((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
                  *v33 = v24;
                }
                v24[2] = v27 + 1;
                v28 = &v24[2 * v27];
                v28[4] = v16;
                v28[5] = v18;

                v9 = v22;
                v10 = v21;
                goto LABEL_6;
              }
            }
            swift_bridgeObjectRelease(v18);
          }

        }
LABEL_6:
        NSFastEnumerationIterator.next()(&v36, v11);
      }
      while (v37);
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v32);

  }
}

void sub_100341D30()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;

  v0 = type metadata accessor for HUDViewController.HUDType(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v3 + 104))(v2, enum case for HUDViewController.HUDType.addToQueue(_:));
  v4 = objc_allocWithZone((Class)type metadata accessor for HUDViewController(0));
  v5 = (void *)HUDViewController.init(type:)(v2);
  dispatch thunk of HUDViewController.present()();

}

uint64_t sub_100341DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1002995C8(v0 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_stationShowData);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_configuration));
  v1 = v0 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100341E30()
{
  return type metadata accessor for AddToQueueStationShowContextAction(0);
}

uint64_t type metadata accessor for AddToQueueStationShowContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100564FD0;
  if (!qword_100564FD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AddToQueueStationShowContextAction);
  return result;
}

void sub_100341E74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_100299358(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    v4 = type metadata accessor for MetricsLabel(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

double sub_100341F04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_stationShowData;
  swift_beginAccess(v3, v5, 33, 0);
  sub_100299538(a1, v3);
  *(_QWORD *)&result = swift_endAccess(v5).n128_u64[0];
  return result;
}

uint64_t sub_100341F5C()
{
  return 0x6461622E74786574;
}

uint64_t sub_100341F80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100341FC4()
{
  return 28;
}

double sub_100341FD4()
{
  uint64_t v0;
  _QWORD *v1;
  double result;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_configuration);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_configuration, v3, 0, 0);
  *(_QWORD *)&result = swift_retain(*v1).n128_u64[0];
  return result;
}

uint64_t sub_10034201C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_configuration);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t (*sub_10034206C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_configuration, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1003420B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1003420D4()
{
  uint64_t v0;

  sub_100341A9C(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_1003420DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003420EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_100342110()
{
  uint64_t v0;

  sub_10034141C(*(void **)(v0 + 16), *(unsigned __int8 **)(v0 + 24), *(_BYTE **)(v0 + 32));
}

uint64_t sub_10034211C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for DummyCategoryIngester()
{
  return objc_opt_self(_TtC8Podcasts21DummyCategoryIngester);
}

uint64_t sub_100342170@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setDateFormat:", v10);

  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "dateFromString:", v11);

  if (v12)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v13 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v13(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if ((_DWORD)v14 != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v13)(a1, v8, v2);
    }
  }
  else
  {
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  Date.init(timeIntervalSinceNow:)(v14, 0.0);

  return sub_1001780E4((uint64_t)v8);
}

double static MTNotificationTestActionFactory.runDefaultAction()()
{
  _QWORD *v0;
  double result;

  v0 = sub_1003432B4();
  sub_1002861E0(0xD00000000000001ELL, 0x800000010043EB60, (uint64_t)v0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

id static MTNotificationTestActionFactory.notificationTestActionsViewController()()
{
  _QWORD *v0;
  id v1;

  v0 = sub_1003432B4();
  v1 = objc_allocWithZone((Class)type metadata accessor for MTTestActionListViewController());
  return MTTestActionListViewController.init(title:tests:)(0x6163696669746F4ELL, 0xED0000736E6F6974, (unint64_t)v0);
}

double static MTNotificationTestActionFactory.runOldestNotificationAction()()
{
  return sub_100343B4C((uint64_t (*)(_QWORD))_s22PostOldestNotificationCMa, (uint64_t)&off_1004BEF88, (void (*)(_QWORD *, uint64_t, __n128))sub_100284AA8);
}

double static MTNotificationTestActionFactory.runRandomNotificationAction()()
{
  return sub_100343B4C((uint64_t (*)(_QWORD))_s22PostRandomNotificationCMa, (uint64_t)&off_1004BEF68, (void (*)(_QWORD *, uint64_t, __n128))sub_100284F64);
}

id MTNotificationTestActionFactory.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MTNotificationTestActionFactory();
  return objc_msgSendSuper2(&v2, "init");
}

id MTNotificationTestActionFactory.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MTNotificationTestActionFactory();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1003425E4(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  id v16;
  uint64_t v17;
  __n128 v18;
  void *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v28 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  __chkstk_darwin();
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v14 = (char *)&v28 - v13;
  v15 = byte_100572DA8;
  byte_100572DA8 = 1;
  if (qword_100552088 != -1)
    swift_once(&qword_100552088, sub_10025BAF0);
  v16 = (id)qword_100572F28;
  MTNotificationSettingsPresentationController.presentModal(highlightedPodcastUuid:)((Swift::String_optional)0);

  a1(v17);
  sub_10002C5E0();
  v19 = (void *)static OS_dispatch_queue.main.getter(v18);
  static DispatchTime.now()(v19);
  + infix(_:_:)(v12, 1.0);
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v12, v9);
  v21 = swift_allocObject(&unk_1004C4508, 17, 7);
  *(_BYTE *)(v21 + 16) = v15;
  aBlock[4] = sub_100343DD4;
  v33 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C4520;
  v22 = _Block_copy(aBlock);
  swift_release(v33);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_10017F258();
  v25 = sub_10003F544((uint64_t *)&unk_10055B200);
  v26 = sub_100026534();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v3, v24);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v8, v5, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v9);
}

void sub_100342898()
{
  qword_1005731D0 = 3670016;
}

uint64_t sub_1003428A8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;
  _QWORD v15[2];

  if (!a3)
  {
LABEL_25:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001004349F0, "Podcasts/MTNotificationTestAction+ContentCreation.swift", 55, 2, 211, 0);
    __break(1u);
    JUMPOUT(0x100342AF4);
  }
  if ((a3 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a3) & 0xF;
  else
    v5 = a2 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    goto LABEL_21;
  v6 = 0;
  v7 = 0;
  while ((a3 & 0x1000000000000000) != 0)
  {
    v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v6 << 16, a2, a3);
    v10 = __OFADD__(v7, v8);
    v7 += v8;
    if (v10)
      goto LABEL_20;
LABEL_8:
    v6 += v9;
    if (v6 >= v5)
      goto LABEL_22;
  }
  if ((a3 & 0x2000000000000000) != 0)
  {
    v15[0] = a2;
    v15[1] = a3 & 0xFFFFFFFFFFFFFFLL;
    v12 = *((unsigned __int8 *)v15 + v6);
    if (*((char *)v15 + v6) < 0)
      __asm { BR              X9 }
  }
  else
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a2 & 0x1000000000000000) == 0)
      v11 = _StringObject.sharedUTF8.getter(a2, a3);
    v12 = *(unsigned __int8 *)(v11 + v6);
    if (*(char *)(v11 + v6) < 0)
      __asm { BR              X10 }
  }
  v9 = 1;
  v10 = __OFADD__(v7, v12);
  v7 += v12;
  if (!v10)
    goto LABEL_8;
LABEL_20:
  __break(1u);
LABEL_21:
  v7 = 0;
LABEL_22:
  result = a1 + v7;
  if (__OFADD__(a1, v7))
  {
    __break(1u);
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_100342B14()
{
  uint64_t v0;
  uint64_t i;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v7;

  v0 = 0;
  for (i = 1; i != 1001; ++i)
  {
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(0xE000000000000000);
    v7 = v0;
    v2._countAndFlagsBits = 0xD000000000000015;
    v2._object = (void *)0x800000010043EE60;
    String.append(_:)(v2);
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    v5._countAndFlagsBits = 3026478;
    v5._object = (void *)0xE300000000000000;
    String.append(_:)(v5);
    v0 = v7;
  }
  return v7;
}

unint64_t sub_100342C00(uint64_t a1, void *a2, unint64_t a3, unint64_t a4)
{
  void *v6;
  Swift::String v7;

  if (!a2)
    a1 = sub_1001E7978(a3, a4);
  v6 = a2;
  swift_bridgeObjectRetain(a2);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  v7._countAndFlagsBits = a1;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  return 0xD000000000000011;
}

void sub_100342CAC(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v61;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v61 = a5;
  v9 = _swiftEmptyArrayStorage;
  v64 = *(_QWORD *)(a5 + 16);
  if (v64)
  {
    v10 = 0;
    v11 = 0x7FFFFFFFFFFFFFE0;
    if (a6 > 0x7FFFFFFFFFFFFFE0)
      v11 = a6;
    v12 = v11 - a6;
    v13 = _swiftEmptyArrayStorage;
    v9 = _swiftEmptyArrayStorage;
    do
    {
      if (__OFADD__(a6, v10))
      {
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      if (v12 == v10)
        goto LABEL_38;
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        v13 = sub_10027BFBC(0, v13[2] + 1, 1, v13);
      v15 = v13[2];
      v14 = v13[3];
      if (v15 >= v14 >> 1)
        v13 = sub_10027BFBC((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
      v13[2] = v15 + 1;
      *(double *)&v13[v15 + 4] = (double)(a6 + v10 + 32) * 25.0 + 2520.0;
      if (qword_100552178 != -1)
        swift_once(&qword_100552178, sub_100342898);
      v16 = qword_1005731D0;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_10027B24C(0, v9[2] + 1, 1, v9);
      v18 = v9[2];
      v17 = v9[3];
      if (v18 >= v17 >> 1)
        v9 = sub_10027B24C((_QWORD *)(v17 > 1), v18 + 1, 1, v9);
      ++v10;
      v9[2] = v18 + 1;
      v9[v18 + 4] = v16;
    }
    while (v64 != v10);
  }
  else
  {
    v13 = _swiftEmptyArrayStorage;
  }
  v10 = a7;
  if (a7 >> 62)
    goto LABEL_42;
  v19 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v20 = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(a7);
  v21 = a6;
  if (v19)
  {
    while (v19 >= 1)
    {
      v22 = 0;
      v23 = v10 & 0xC000000000000001;
      v61 = v19;
      while (1)
      {
        if (v23)
        {
          v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v10);
        }
        else
        {
          v24 = *(_QWORD *)(v10 + 8 * v22 + 32);
          swift_retain();
        }
        v25 = *(_QWORD *)(v24 + 16);
        v26 = v25 - v21;
        if (__OFSUB__(v25, v21))
          break;
        if ((v26 & 0x8000000000000000) != 0 || (uint64_t)v26 >= v64)
        {
          swift_release(v24);
        }
        else
        {
          _StringGuts.grow(_:)(20);
          if (v26 >= *(_QWORD *)(v20 + 16))
            goto LABEL_40;
          v27 = v20 + 16 * v26;
          v10 = v20;
          v29 = *(_QWORD *)(v27 + 32);
          v28 = *(_QWORD *)(v27 + 40);
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRelease(0xE000000000000000);
          v65 = v29;
          v66 = v28;
          v30._countAndFlagsBits = 0x6574656C65442820;
          v30._object = (void *)0xEB00000000202C64;
          String.append(_:)(v30);
          v31 = *(_QWORD *)(v24 + 24);
          v32 = *(_QWORD *)(v31 + 16);
          v33 = *(void **)(v31 + 24);
          swift_bridgeObjectRetain(v33);
          v34._countAndFlagsBits = v32;
          v34._object = v33;
          String.append(_:)(v34);
          swift_bridgeObjectRelease(v33);
          v35._countAndFlagsBits = 8236;
          v35._object = (void *)0xE200000000000000;
          String.append(_:)(v35);
          v36 = *(_QWORD *)(v24 + 24);
          v37 = *(_QWORD *)(v36 + 32);
          v38 = *(void **)(v36 + 40);
          swift_bridgeObjectRetain(v38);
          v39._countAndFlagsBits = v37;
          v39._object = v38;
          String.append(_:)(v39);
          swift_bridgeObjectRelease(v38);
          v40._countAndFlagsBits = 41;
          v40._object = (void *)0xE100000000000000;
          String.append(_:)(v40);
          v41 = (_QWORD *)v10;
          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
            v41 = sub_10037A990((_QWORD *)v10);
          if (v26 >= v41[2])
            goto LABEL_41;
          v42 = v41;
          v43 = &v41[2 * v26];
          v44 = v43[5];
          v43[4] = v65;
          v43[5] = v66;
          swift_release(v24);
          swift_bridgeObjectRelease(v44);
          v20 = (uint64_t)v42;
          v10 = a7;
          v21 = a6;
          v19 = v61;
        }
        if (v19 == ++v22)
          goto LABEL_46;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      if (v10 < 0)
        v45 = v10;
      else
        v45 = v10 & 0xFFFFFFFFFFFFFF8;
      v20 = v61;
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v10);
      v19 = _CocoaArrayWrapper.endIndex.getter(v45);
      v21 = a6;
      if (!v19)
        goto LABEL_46;
    }
    __break(1u);
  }
  else
  {
LABEL_46:
    swift_bridgeObjectRelease(v10);
    v46 = v10;
    v47 = v20;
    v48 = sub_100342C00(a1, a2, a3, a4);
    v50 = v49;
    v51 = sub_10003F544((uint64_t *)&unk_100553780);
    v52 = swift_allocObject(v51, 40, 7);
    *(_OWORD *)(v52 + 16) = xmmword_1003CA250;
    v53 = type metadata accessor for MTNotificationTestAction.PostFakeContentStep();
    v54 = (_QWORD *)swift_allocObject(v53, 120, 7);
    v54[13] = _swiftEmptyArrayStorage;
    v54[14] = _swiftEmptyArrayStorage;
    v54[2] = v48;
    v54[3] = v50;
    v54[4] = a3;
    v54[5] = a4;
    v54[6] = a6;
    v54[7] = v47;
    v54[8] = v13;
    v54[9] = v9;
    v54[10] = v46;
    v54[11] = a8;
    v54[12] = a9;
    *(_QWORD *)(v52 + 32) = v54;
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v47);
    specialized Array._endMutation()(v55);
    swift_bridgeObjectRelease(v47);
  }
}

uint64_t sub_100343184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[64];

  type metadata accessor for MTNotificationTestAction();
  v4 = sub_10003F544(&qword_1005547B0);
  inited = swift_initStackObject(v4, v13);
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  swift_bridgeObjectRetain(a2);
  v6 = sub_100342B14();
  v8 = v7;
  sub_100342CAC(0xD00000000000001BLL, (void *)0x800000010043EE00, 0xD00000000000001FLL, 0x800000010043EE20, (uint64_t)&off_1004AD3C0, 0, (unint64_t)_swiftEmptyArrayStorage, v6, v7);
  v10 = v9;
  v11 = sub_10017946C(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(inited + 56) = sub_10003F544(&qword_1005549D0);
  *(_QWORD *)(inited + 32) = v11;
  return sub_100246DA8(0xD00000000000001FLL, 0x800000010043EDE0, a1, a2, inited);
}

_QWORD *sub_1003432B4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[64];

  v0 = type metadata accessor for MTToggleUserDefaultTestAction();
  v1 = swift_allocObject(v0, 88, 7);
  *(_QWORD *)(v1 + 72) = 0xD00000000000002DLL;
  *(_QWORD *)(v1 + 80) = 0x800000010043ECD0;
  *(_BYTE *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 16) = 0xD000000000000023;
  *(_QWORD *)(v1 + 24) = 0x800000010043ECA0;
  strcpy((char *)(v1 + 32), "Debug Options");
  *(_WORD *)(v1 + 46) = -4864;
  *(_QWORD *)(v1 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 56) = _swiftEmptyArrayStorage;
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "BOOLForKey:", v3, swift_retain().n128_f64[0]);

  *(_BYTE *)(v1 + 64) = v4;
  swift_release(v1);
  v5 = type metadata accessor for MTNotificationTestAction();
  v6 = sub_10003F544(&qword_1005547B0);
  inited = swift_initStackObject(v6, v60);
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  v8 = sub_10003F544((uint64_t *)&unk_1005549B0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1003CA200;
  v10 = type metadata accessor for MTNotificationTestAction.ClearAllHistoryStep();
  v11 = swift_allocObject(v10, 16, 7);
  *(_QWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 64) = &off_1004B0C40;
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(inited + 56) = sub_10003F544(&qword_1005549D0);
  *(_QWORD *)(inited + 32) = v9;
  v59 = sub_100246DA8(0xD000000000000010, 0x800000010043ED00, 0x6974552074736554, 0xEE0073656974696CLL, inited);
  v12 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
  v13 = _s37PickEpisodesThenPostNotificationsStepCMa();
  v14 = swift_allocObject(v13, 32, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1003D62B0;
  *(_QWORD *)(v12 + 56) = v13;
  *(_QWORD *)(v12 + 64) = &off_1004BEF58;
  *(_QWORD *)(v12 + 32) = v14;
  v15 = swift_allocObject(v5, 64, 7);
  *(_QWORD *)(v15 + 16) = 0x100000000000001ELL;
  *(_QWORD *)(v15 + 24) = 0x800000010043ED20;
  strcpy((char *)(v15 + 32), "Test Utilities");
  *(_BYTE *)(v15 + 47) = -18;
  *(_QWORD *)(v15 + 48) = v12;
  *(_QWORD *)(v15 + 56) = v12;
  v58 = v15;
  v16 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1003CA200;
  v17 = _s34PostOneNotificationForEveryPodcastCMa();
  v18 = swift_allocObject(v17, 16, 7);
  *(_QWORD *)(v16 + 56) = v17;
  *(_QWORD *)(v16 + 64) = &off_1004BEF98;
  *(_QWORD *)(v16 + 32) = v18;
  v19 = swift_allocObject(v5, 64, 7);
  *(_QWORD *)(v19 + 16) = 0xD000000000000025;
  *(_QWORD *)(v19 + 24) = 0x800000010043ED40;
  strcpy((char *)(v19 + 32), "Test Utilities");
  *(_BYTE *)(v19 + 47) = -18;
  *(_QWORD *)(v19 + 48) = v16;
  *(_QWORD *)(v19 + 56) = v16;
  v20 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1003CA200;
  v21 = _s24PickShowThenGoToSettingsCMa();
  v22 = swift_allocObject(v21, 16, 7);
  *(_QWORD *)(v20 + 56) = v21;
  *(_QWORD *)(v20 + 64) = &off_1004B6658;
  *(_QWORD *)(v20 + 32) = v22;
  v23 = swift_allocObject(v5, 64, 7);
  *(_QWORD *)(v23 + 16) = 0x1000000000000013;
  *(_QWORD *)(v23 + 24) = 0x800000010043ED70;
  strcpy((char *)(v23 + 32), "Test Utilities");
  *(_BYTE *)(v23 + 47) = -18;
  *(_QWORD *)(v23 + 48) = v20;
  *(_QWORD *)(v23 + 56) = v20;
  v24 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1003CA200;
  v25 = type metadata accessor for MTTestActionBlockStep();
  v26 = swift_allocObject(v25, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_1003425E4;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v24 + 56) = v25;
  *(_QWORD *)(v24 + 64) = &off_1004B6248;
  *(_QWORD *)(v24 + 32) = v26;
  v27 = swift_allocObject(v5, 64, 7);
  *(_QWORD *)(v27 + 16) = 0x1000000000000020;
  *(_QWORD *)(v27 + 24) = 0x800000010043ED90;
  strcpy((char *)(v27 + 32), "Test Utilities");
  *(_BYTE *)(v27 + 47) = -18;
  *(_QWORD *)(v27 + 48) = v24;
  *(_QWORD *)(v27 + 56) = v24;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && __OFADD__(_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage), 6))
  {
    __break(1u);
  }
  else
  {
    v28 = sub_1002243A8();
    specialized Array._endMutation()(v28);
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v30 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v12 < v30 >> 1)
      goto LABEL_3;
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v12 + 1, 1);
LABEL_3:
  v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v1);
  specialized Array._endMutation()(v31);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
  v34 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v33 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v34 >= v33 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
  v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v59);
  specialized Array._endMutation()(v35);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
  v38 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v37 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v38 >= v37 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
  v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v58);
  specialized Array._endMutation()(v39);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v40);
  v42 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v41 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v42 >= v41 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
  v43 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, v19);
  specialized Array._endMutation()(v43);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
  v46 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v45 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v46 >= v45 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
  v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v23);
  specialized Array._endMutation()(v47);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v48);
  v50 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v49 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v50 >= v49 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
  v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v27);
  specialized Array._endMutation()(v51);
  swift_release(v1);
  swift_release(v27);
  swift_release(v23);
  swift_release(v19);
  swift_release(v58);
  swift_release(v59);
  v52 = sub_100343184(0xD000000000000013, 0x800000010043EDC0);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v53);
  v55 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v54 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v55 >= v54 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
  v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v52);
  specialized Array._endMutation()(v56);
  swift_release(v52);
  return _swiftEmptyArrayStorage;
}

double _s8Podcasts31MTNotificationTestActionFactoryC025runMostRecentNotificationD0yyFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double result;

  v0 = type metadata accessor for MTTestActionRunner();
  v1 = swift_allocObject(v0, 17, 7);
  *(_BYTE *)(v1 + 16) = 0;
  v2 = sub_10003F544((uint64_t *)&unk_1005549B0);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1003CA200;
  v4 = _s26PostMostRecentNotificationCMa();
  v5 = swift_allocObject(v4, 16, 7);
  *(_QWORD *)(v3 + 56) = v4;
  *(_QWORD *)(v3 + 64) = &off_1004BEF78;
  *(_QWORD *)(v3 + 32) = v5;
  v6 = type metadata accessor for MTNotificationTestAction();
  v7 = (_QWORD *)swift_allocObject(v6, 64, 7);
  v7[2] = 0x6365522074736F4DLL;
  v7[3] = 0xEB00000000746E65;
  v7[4] = 0x654D206775626544;
  v7[5] = 0xEA0000000000756ELL;
  v7[6] = v3;
  v7[7] = v3;
  swift_bridgeObjectRetain(v3);
  sub_1002845EC((uint64_t)v7, v1);
  swift_release(v1);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

double sub_100343B4C(uint64_t (*a1)(_QWORD), uint64_t a2, void (*a3)(_QWORD *, uint64_t, __n128))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __n128 v14;
  double result;

  v6 = type metadata accessor for MTTestActionRunner();
  v7 = swift_allocObject(v6, 17, 7);
  *(_BYTE *)(v7 + 16) = 0;
  v8 = sub_10003F544((uint64_t *)&unk_1005549B0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1003CA200;
  v10 = a1(0);
  v11 = swift_allocObject(v10, 16, 7);
  *(_QWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 64) = a2;
  *(_QWORD *)(v9 + 32) = v11;
  v12 = type metadata accessor for MTNotificationTestAction();
  v13 = (_QWORD *)swift_allocObject(v12, 64, 7);
  v13[2] = 0x747365646C4FLL;
  v13[3] = 0xE600000000000000;
  v13[4] = 0x654D206775626544;
  v13[5] = 0xEA0000000000756ELL;
  v13[6] = v9;
  v13[7] = v9;
  v14 = swift_bridgeObjectRetain(v9);
  a3(v13, v7, v14);
  swift_release(v7);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for MTNotificationTestActionFactory()
{
  return objc_opt_self(_TtC8Podcasts31MTNotificationTestActionFactory);
}

uint64_t _s8DefaultsCMa()
{
  return objc_opt_self(_TtCC8Podcasts24MTNotificationTestAction8Defaults);
}

uint64_t _s15RealContentPoolCMa()
{
  return objc_opt_self(_TtCC8Podcasts24MTNotificationTestActionP33_F3D561DB78FA8D348A9E7C1CBB8AE55015RealContentPool);
}

uint64_t _s15RealContentPoolC4NameOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100343CFC + 4 * byte_1003D62C5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100343D30 + 4 * byte_1003D62C0[v4]))();
}

uint64_t sub_100343D30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100343D38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100343D40);
  return result;
}

uint64_t sub_100343D4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100343D54);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100343D58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100343D60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15RealContentPoolC4NameOMa()
{
  return &_s15RealContentPoolC4NameON;
}

unint64_t sub_100343D80()
{
  unint64_t result;

  result = qword_1005652E0;
  if (!qword_1005652E0)
  {
    result = swift_getWitnessTable(&unk_1003D6370, &_s15RealContentPoolC4NameON);
    atomic_store(result, (unint64_t *)&qword_1005652E0);
  }
  return result;
}

uint64_t sub_100343DC4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_100343DD4()
{
  uint64_t v0;

  byte_100572DA8 = *(_BYTE *)(v0 + 16);
}

uint64_t sub_100343DE4@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t (*v34)();
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  _UNKNOWN **v48;

  v2 = v1;
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for CLSContextMetadata(0);
  v7 = *((_QWORD *)v6 - 1);
  __chkstk_darwin();
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((objc_msgSend((id)objc_opt_self(MTStoreIdentifier), "isEmpty:", objc_msgSend(v1, "storeTrackId")) & 1) != 0)return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(a1, 1, 1, v6);
  v10 = objc_msgSend(v1, "title");
  if (!v10)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(a1, 1, 1, v6);
  v11 = v10;
  v42 = a1;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v39 = v13;
  v40 = v12;

  *(_QWORD *)&v46 = objc_msgSend(v2, "storeTrackId");
  v14 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v16 = v15;
  v17 = objc_msgSend(v2, "podcast");
  if (v17)
  {
    v18 = v17;
    *((_QWORD *)&v47 + 1) = sub_100005EC8(0, (unint64_t *)&qword_100553810, MTPodcast_ptr);
    v48 = &off_1004C26D8;
    *(_QWORD *)&v46 = v18;
  }
  else
  {
    v48 = 0;
    v46 = 0u;
    v47 = 0u;
  }
  v9[40] = 1;
  *((_QWORD *)v9 + 6) = 0;
  v20 = (uint64_t)&v9[v6[9]];
  v21 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = (uint64_t (**)())&v9[v6[10]];
  *v22 = variable initialization expression of MTNotificationSettingsPresentationController.activePresentedSettingsViewController;
  v22[1] = 0;
  v41 = v6[11];
  *(_QWORD *)&v9[v41] = 0;
  v23 = v6[12];
  *(_QWORD *)&v9[v23] = 0;
  *(_QWORD *)v9 = 14;
  *((_QWORD *)v9 + 1) = v14;
  v24 = v40;
  *((_QWORD *)v9 + 2) = v16;
  *((_QWORD *)v9 + 3) = v24;
  *((_QWORD *)v9 + 4) = v39;
  sub_1002D5F74((uint64_t)&v46, (uint64_t)v43);
  v25 = v44;
  if (v44)
  {
    v26 = v45;
    sub_10003A834(v43, v44);
    v25 = sub_1001F62CC(v25, v26);
    sub_1001F63B0((uint64_t)&v46);
    sub_10003D380(v43);
  }
  else
  {
    sub_1001F63B0((uint64_t)&v46);
    sub_1001F63B0((uint64_t)v43);
  }
  *(_QWORD *)&v27 = swift_bridgeObjectRelease(*(_QWORD *)&v9[v23]).n128_u64[0];
  *(_QWORD *)&v9[v23] = v25;
  *((_QWORD *)v9 + 6) = objc_msgSend(v2, "episodeNumber", v27);
  sub_1003441B4((uint64_t)v5);
  sub_1001C99E0((uint64_t)v5, v20);
  v28 = objc_msgSend(v2, "uuid");
  v29 = (uint64_t)v28;
  if (v28)
  {
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

    v33 = (double)CLSContextThumbnailMaximumAllowedDimension;
    v29 = swift_allocObject(&unk_1004C45B8, 48, 7);
    *(_QWORD *)(v29 + 16) = v30;
    *(_QWORD *)(v29 + 24) = v32;
    *(double *)(v29 + 32) = v33;
    *(double *)(v29 + 40) = v33;
    v34 = (uint64_t (*)())sub_100344894;
  }
  else
  {
    v34 = variable initialization expression of MTNotificationSettingsPresentationController.activePresentedSettingsViewController;
  }
  *(_QWORD *)&v35 = swift_release(v22[1]).n128_u64[0];
  *v22 = v34;
  v22[1] = (uint64_t (*)())v29;
  objc_msgSend(v2, "pubDate", v35);
  v36 = v42;
  *(_QWORD *)&v9[v41] = v37;
  sub_10014FDF8((uint64_t)v9, v36, type metadata accessor for CLSContextMetadata);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(v36, 0, 1, v6);
  return sub_10003F970((uint64_t)v9, type metadata accessor for CLSContextMetadata);
}

uint64_t sub_1003441B4@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;

  v2 = v1;
  v54 = a1;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for URLComponents(0);
  v7 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin();
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PodcastsURLEpisodeParameters(0);
  __chkstk_darwin();
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v14 = (char *)&v52 - v13;
  v15 = objc_msgSend(v2, "podcast");
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, "storeCollectionId");

    *(_OWORD *)v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    *(_WORD *)(v14 + 57) = 514;
    v18 = &v14[*(int *)(v10 + 40)];
    v19 = type metadata accessor for MetricsWidgetContext(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
    *((_QWORD *)v14 + 4) = v17;
    v14[40] = 0;
    *((_QWORD *)v14 + 6) = objc_msgSend(v2, "storeTrackId");
    v14[56] = 0;
    type metadata accessor for PodcastsURLScheme();
    sub_10014FDF8((uint64_t)v14, (uint64_t)v12, type metadata accessor for PodcastsURLEpisodeParameters);
    v20 = type metadata accessor for PodcastsURLShowCommand(0);
    v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    sub_1002D5FBC((uint64_t)v12, v21 + OBJC_IVAR____TtC8Podcasts25PodcastsURLEpisodeCommand_episodeParameters);
    v22 = type metadata accessor for PodcastsURLNowPlayingCommand();
    if (swift_dynamicCastClass(v21, v22))
    {
      swift_retain();
      URLComponents.init()(v23);
      URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
      v24 = 0x6979616C50776F6ELL;
      v25 = 0xEA0000000000676ELL;
LABEL_8:
      v33 = URLComponents.host.setter(v24, v25);
LABEL_9:
      URLComponents.url.getter(v33);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v53);
LABEL_10:
      swift_release(v21);
LABEL_11:
      swift_release(v21);
      return sub_10003F970((uint64_t)v14, type metadata accessor for PodcastsURLEpisodeParameters);
    }
    v31 = type metadata accessor for PodcastsURLBrowseCommand();
    if (swift_dynamicCastClass(v21, v31))
    {
      swift_retain();
      URLComponents.init()(v32);
      URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
      v24 = 0x6573776F7262;
      v25 = 0xE600000000000000;
      goto LABEL_8;
    }
    v36 = type metadata accessor for PodcastsURLOpenCommand(0);
    v37 = swift_dynamicCastClass(v21, v36);
    if (v37)
    {
      v38 = v37;
      swift_retain();
      sub_100329BCC(v38, v54);
      goto LABEL_10;
    }
    v39 = swift_dynamicCastClass(v21, v20);
    if (v39)
    {
      v40 = v39;
      swift_retain();
      URLComponents.init()(v41);
      URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
      v42 = 2003789939;
    }
    else
    {
      v43 = type metadata accessor for PodcastsURLPlayCommand(0);
      v44 = swift_dynamicCastClass(v21, v43);
      if (!v44)
      {
        v48 = type metadata accessor for PodcastsURLShowAndPlayCommand(0);
        v49 = swift_dynamicCastClass(v21, v48);
        if (!v49)
        {
          v51 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v54, 1, 1, v51);
          goto LABEL_11;
        }
        v40 = v49;
        swift_retain();
        URLComponents.init()(v50);
        URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
        v42 = 0x79616C70776F6873;
        v46 = 0xE800000000000000;
        goto LABEL_22;
      }
      v40 = v44;
      swift_retain();
      URLComponents.init()(v45);
      URLComponents.scheme.setter(0x7374736163646F70, 0xE800000000000000);
      v42 = 2036427888;
    }
    v46 = 0xE400000000000000;
LABEL_22:
    URLComponents.host.setter(v42, v46);
    sub_10032AAE0(v40 + OBJC_IVAR____TtC8Podcasts25PodcastsURLEpisodeCommand_episodeParameters);
    v33 = URLComponents.queryItems.setter(v47);
    goto LABEL_9;
  }
  v26 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.classKit.getter(v26);
  v27 = v2;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v30 = 134217984;
    v55 = -[NSObject storeTrackId](v27, "storeTrackId");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v30 + 4, v30 + 12);

    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to build share URL, unknown show for episode - %lld", v30, 0xCu);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {

    v28 = v27;
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v35 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v54, 1, 1, v35);
}

id sub_100344704(double a1, double a2)
{
  void *v4;
  NSString v5;
  id v6;
  id v7;

  v4 = (void *)objc_opt_self(MTEpisode);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "artworkForEpisodeUuid:size:triggerDownload:", v5, 0, a1, a2);

  v7 = objc_msgSend(v6, "CGImage");
  return v7;
}

uint64_t sub_1003447B0()
{
  id *v0;

  objc_msgSend(*v0, "storeTrackId");
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
}

double sub_1003447FC@<D0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  id v4;
  double result;

  v3 = objc_msgSend(*v1, "podcast");
  if (v3)
  {
    v4 = v3;
    *(_QWORD *)(a1 + 24) = sub_100005EC8(0, (unint64_t *)&qword_100553810, MTPodcast_ptr);
    *(_QWORD *)(a1 + 32) = &off_1004C26D8;
    *(_QWORD *)a1 = v4;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100344870()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

id sub_100344894()
{
  uint64_t v0;

  return sub_100344704(*(double *)(v0 + 32), *(double *)(v0 + 40));
}

void sub_1003448A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for AssetDownloadStatus(0);
  __chkstk_darwin();
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100345FC8(v0, (uint64_t)v3);
  v4 = (char *)sub_100344938 + 4 * byte_1003D63C0[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_100344938()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;

  v2 = *v0;
  *(_QWORD *)(v1 - 48) = 0;
  *(_QWORD *)(v1 - 40) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 - 40));
  *(_QWORD *)(v1 - 48) = 0x202C64656C696146;
  *(_QWORD *)(v1 - 40) = 0xEF3A20726F727265;
  swift_getErrorValue(v2, v1 - 56, v1 - 80);
  v3._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v1 - 72), *(_QWORD *)(v1 - 64));
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  swift_errorRelease();
  return *(_QWORD *)(v1 - 48);
}

void sub_100344A40()
{
  uint64_t v0;
  char *v1;

  type metadata accessor for Logger(0);
  __chkstk_darwin();
  v1 = (char *)&loc_100344AD8
     + *((int *)qword_100344D18
       + *(unsigned __int8 *)sub_10003A834((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config + 24)));
  __asm { BR              X10 }
}

uint64_t sub_100344AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  unint64_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;

  static Logger.downloads.getter(a1);
  swift_bridgeObjectRetain(0x800000010042DE50);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(12, -1);
    *(_QWORD *)(v5 - 112) = v1;
    v10 = (uint8_t *)v9;
    v11 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v5 - 120) = v4;
    v12 = v11;
    *(_QWORD *)(v5 - 128) = v3;
    *(_DWORD *)v10 = 136446210;
    strcpy((char *)(v5 - 104), "ConfigType: ");
    *(_BYTE *)(v5 - 91) = 0;
    *(_WORD *)(v5 - 90) = -5120;
    *(_QWORD *)(v5 - 88) = v11;
    swift_bridgeObjectRetain(0x800000010042DE50);
    v13._countAndFlagsBits = 0xD00000000000002DLL;
    v13._object = (void *)0x800000010042DE50;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(0x800000010042DE50);
    v14 = *(_QWORD *)(v5 - 96);
    *(_QWORD *)(v5 - 104) = sub_10003D274(*(_QWORD *)(v5 - 104), v14, (uint64_t *)(v5 - 88));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 104, v5 - 96, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(0x800000010042DE50, 2);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalidating downloader for %{public}s", v10, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    v15 = v10;
    v1 = *(_QWORD *)(v5 - 112);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 120) + 8))(v2, *(_QWORD *)(v5 - 128));
  }
  else
  {

    swift_bridgeObjectRelease_n(0x800000010042DE50, 2);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  v16 = *(void **)(v1 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_urlSession);
  if (!v16)
  {
    __break(1u);
    JUMPOUT(0x100344D18);
  }
  objc_msgSend(v16, "invalidateAndCancel");
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader), v18);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v17 + 8) + 72))(ObjectType);
}

void sub_100344D28()
{
  uint64_t v0;
  char *v1;

  type metadata accessor for Logger(0);
  __chkstk_darwin();
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  type metadata accessor for URL(0);
  __chkstk_darwin();
  v1 = (char *)&loc_100344E50
     + dword_10034517C[*(unsigned __int8 *)sub_10003A834((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config + 24))];
  __asm { BR              X10 }
}

uint64_t sub_100344E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSURL *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  int64_t v24;
  id v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  void *object;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  _QWORD *v34;

  *(_QWORD *)(v7 - 112) = 0xD00000000000002DLL;
  DownloadableURLOptions.url.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v8 = sub_1001C9958(v1);
    v9 = static Logger.downloads.getter(v8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to download because no url was provided.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    result = (*(uint64_t (**)(uint64_t, _QWORD))(v6 + 8))(v5, *(_QWORD *)(v7 - 136));
    v14 = *(_QWORD *)(v7 - 120);
    v15 = *(_QWORD *)(v7 - 112);
    *(_QWORD *)(v14 + 32) = 0;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
    v16 = objc_allocWithZone((Class)NSMutableURLRequest);
    *(_QWORD *)(v7 - 136) = v4;
    URL._bridgeToObjectiveC()(v17);
    v19 = v18;
    v20 = objc_msgSend(v16, "initWithURL:", v18);

    objc_msgSend(v20, "setNonAppInitiated:", ((uint64_t (*)(id))DownloadableURLOptions.nonAppInitiated.getter)(objc_msgSend(v20, "setAllowsCellularAccess:", *(_DWORD *)(v7 - 140) & 1)) & 1);
    v21 = *(void **)(*(_QWORD *)(v7 - 128) + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_urlSession);
    if (!v21)
    {
      __break(1u);
      JUMPOUT(0x10034517CLL);
    }
    v22 = objc_msgSend(v21, "downloadTaskWithRequest:", v20);
    v23 = v22;
    if ((*(_DWORD *)(v7 - 156) & 1) != 0)
      v24 = NSURLSessionTransferSizeUnknown;
    else
      v24 = *(_QWORD *)(v7 - 152);
    objc_msgSend(v22, "setCountOfBytesClientExpectsToReceive:", v24);
    v15 = *(_QWORD *)(v7 - 112);
    *(_QWORD *)(v7 - 96) = v15;
    *(_QWORD *)(v7 - 88) = 0x800000010042DE50;
    v25 = v23;
    swift_bridgeObjectRetain(0x800000010042DE50);
    v26._countAndFlagsBits = 0x7261646E6174732ELL;
    v26._object = (void *)0xE900000000000064;
    String.append(_:)(v26);
    v27 = *(_QWORD *)(v7 - 88);
    *(_QWORD *)(v7 - 96) = *(_QWORD *)(v7 - 96);
    *(_QWORD *)(v7 - 88) = v27;
    v28._countAndFlagsBits = 46;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    *(_QWORD *)(v7 - 104) = objc_msgSend(v25, "taskIdentifier");
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(object);
    v31 = *(_QWORD *)(v7 - 88);
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "setTaskDescription:", v32, swift_bridgeObjectRelease(v31).n128_f64[0]);

    v33 = sub_100005EC8(0, &qword_1005654B8, NSURLSessionDownloadTask_ptr);
    v34 = *(_QWORD **)(v7 - 120);
    v34[3] = v33;
    v34[4] = &off_1004B3EA8;
    *v34 = v25;

    result = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v7 - 136), v3);
  }
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = v15;
  *(_QWORD *)(v0 + 24) = 0x800000010042DE50;
  *(_BYTE *)(v0 + 32) = 0;
  return result;
}

void sub_1003451D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v28[24];
  _BYTE v29[24];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1 + 16;
  v8 = static Logger.downloads.getter(v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Calling Background URLSession completion handler.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
  swift_beginAccess(v7, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v13 = (void *)Strong;
    v15 = *(void (**)(void))(Strong + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_backgroundCompletionHandler);
    v14 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_backgroundCompletionHandler + 8);
    sub_10002CA20((uint64_t)v15, v14);

    if (v15)
    {
      v15();
      sub_10002CA30((uint64_t)v15, v14);
    }
  }
  swift_beginAccess(v7, v28, 0, 0);
  v16 = swift_unknownObjectWeakLoadStrong(v7);
  if (v16)
  {
    v17 = (char *)v16;
    v18 = (uint64_t *)(v16 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_backgroundCompletionHandler);
    v19 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_backgroundCompletionHandler);
    v20 = v18[1];
    *v18 = 0;
    v18[1] = 0;
    sub_10002CA30(v19, v20);
    v21 = *(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader + 8];
    ObjectType = swift_getObjectType(*(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader], v22);
    v24 = *v18;
    v25 = v18[1];
    v26 = *(_QWORD *)(v21 + 8);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    sub_10002CA20(v24, v25);
    v27(v24, v25, ObjectType, v26);

  }
}

id sub_100345598()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AssetsDownloader();
  return objc_msgSendSuper2(&v2, "dealloc");
}

char *sub_100345638(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  char *v19;
  char *v20;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *(char **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = &v10[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = (int *)sub_10003F544(&qword_10055B210);
      v13 = v12[12];
      v14 = &a1[v13];
      v15 = &a2[v13];
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v14[8] = v15[8];
      *(_QWORD *)&a1[v12[16]] = *(_QWORD *)&a2[v12[16]];
      v16 = v12[20];
      v17 = *(void **)&a2[v16];
      *(_QWORD *)&a1[v16] = v17;
      v18 = v17;
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v19 = *(char **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      v20 = v19;
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = *(char **)a2;
      swift_errorRetain();
      *(_QWORD *)a1 = v9;
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void sub_100345788(void **a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;
  void *v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v4 = type metadata accessor for URL(0);
      (*(void (**)(void **, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = *(void **)((char *)a1 + *(int *)(sub_10003F544(&qword_10055B210) + 80));
LABEL_7:

      return;
    case 1:
      v5 = *a1;
      goto LABEL_7;
    case 0:
      swift_errorRelease();
      break;
  }
}

char *sub_100345810(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = (int *)sub_10003F544(&qword_10055B210);
    v10 = v9[12];
    v11 = &a1[v10];
    v12 = &a2[v10];
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    *(_QWORD *)&a1[v9[16]] = *(_QWORD *)&a2[v9[16]];
    v13 = v9[20];
    v14 = *(void **)&a2[v13];
    *(_QWORD *)&a1[v13] = v14;
    v15 = v14;
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v16 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v17 = v16;
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = *(void **)a2;
    swift_errorRetain();
    *(_QWORD *)a1 = v7;
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void **sub_100345938(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;

  if (a1 != a2)
  {
    sub_10022B340((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for URL(0);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = (int *)sub_10003F544(&qword_10055B210);
      v10 = v9[12];
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = v12[8];
      *(_QWORD *)v11 = *(_QWORD *)v12;
      v11[8] = v13;
      *(void **)((char *)a1 + v9[16]) = *(void **)((char *)a2 + v9[16]);
      v14 = v9[20];
      v15 = *(void **)((char *)a2 + v14);
      *(void **)((char *)a1 + v14) = v15;
      v16 = v15;
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v17 = *a2;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      v18 = v17;
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = *a2;
      swift_errorRetain();
      *a1 = v7;
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t type metadata accessor for AssetDownloadStatus(uint64_t a1)
{
  uint64_t result;

  result = qword_100565478;
  if (!qword_100565478)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AssetDownloadStatus);
  return result;
}

char *sub_100345AB4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    v6 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = (int *)sub_10003F544(&qword_10055B210);
    v8 = v7[12];
    v9 = &a1[v8];
    v10 = &a2[v8];
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    *(_QWORD *)&a1[v7[16]] = *(_QWORD *)&a2[v7[16]];
    *(_QWORD *)&a1[v7[20]] = *(_QWORD *)&a2[v7[20]];
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_100345B80(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;

  if (a1 != a2)
  {
    sub_10022B340((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      v6 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = (int *)sub_10003F544(&qword_10055B210);
      v8 = v7[12];
      v9 = &a1[v8];
      v10 = &a2[v8];
      *(_QWORD *)v9 = *(_QWORD *)v10;
      v9[8] = v10[8];
      *(_QWORD *)&a1[v7[16]] = *(_QWORD *)&a2[v7[16]];
      *(_QWORD *)&a1[v7[20]] = *(_QWORD *)&a2[v7[20]];
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100345C5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];
  _BYTE v5[32];
  _QWORD v6[3];

  v6[0] = "\b";
  v6[1] = &unk_1003D6440;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1003D6458;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_1003D6470;
    swift_getTupleTypeLayout(v5, 0, 4, v4);
    v6[2] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v6);
    return 0;
  }
  return result;
}

uint64_t sub_100345D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler + 8);
  *v5 = a1;
  v5[1] = a2;
  sub_10002CA20(a1, a2);
  sub_10002CA30(v6, v7);
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader), v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8) + 16))(a1, a2, ObjectType);
}

void sub_100345D94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __n128 v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v9 = v8;
  *(_QWORD *)&v31 = a6;
  v15 = a4 & 1;
  v30 = a7 & 1;
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin();
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (URL.isHLSPlaylist()())
  {
    v21 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader + 8);
    ObjectType = swift_getObjectType(*(_QWORD *)(v9 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader), v20);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v21 + 8) + 40))(&v32, a1, a2, a3, v15, a5 & 1, v31, v30, ObjectType, *(_QWORD *)(v21 + 8));
    v23 = v32;
    v24 = v33;
    v25 = v34;
    v26 = v35;
  }
  else
  {
    type metadata accessor for DownloadableURLOptions(0, v20);
    v27.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a2, v16);
    v28 = (void *)DownloadableURLOptions.__allocating_init(_:nonAppInitiated:)(v19, v15, v27);
    sub_100344D28();
    v31 = v32;
    v24 = v33;
    v25 = v34;
    v26 = v35;

    v23 = v31;
  }
  *(_OWORD *)a8 = v23;
  *(_QWORD *)(a8 + 16) = v24;
  *(_QWORD *)(a8 + 24) = v25;
  *(_BYTE *)(a8 + 32) = v26;
}

uint64_t sub_100345F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_backgroundCompletionHandler);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_backgroundCompletionHandler);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_backgroundCompletionHandler + 8);
  *v5 = a1;
  v5[1] = a2;
  sub_10002CA20(a1, a2);
  sub_10002CA30(v6, v7);
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader), v9);
  v11 = *v5;
  v12 = v5[1];
  v13 = *(_QWORD *)(v8 + 8);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  sub_10002CA20(v11, v12);
  v14(v11, v12, ObjectType, v13);
  return sub_10002CA30(a1, a2);
}

uint64_t sub_100345FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssetDownloadStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10034600C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint8_t *v21;
  __n128 v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v34 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin();
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static Logger.downloads.getter(v9);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    v33 = v5;
    v16 = v3;
    v17 = v0;
    v18 = v4;
    v19 = v1;
    v20 = v15;
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Downloader finished processing URLSession events.", v15, 2u);
    v21 = v20;
    v1 = v19;
    v4 = v18;
    v0 = v17;
    v3 = v16;
    v5 = v33;
    swift_slowDealloc(v21, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v23 = (void *)static OS_dispatch_queue.main.getter(v22);
  v24 = swift_allocObject(&unk_1004C4638, 24, 7);
  swift_unknownObjectWeakInit(v24 + 16);
  aBlock[4] = sub_100348058;
  v36 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C4678;
  v25 = _Block_copy(aBlock);
  swift_release(v36);
  v26 = v34;
  static DispatchQoS.unspecified.getter(v27);
  aBlock[0] = _swiftEmptyArrayStorage;
  v28 = sub_10017F258();
  v29 = sub_10003F544((uint64_t *)&unk_10055B200);
  v30 = sub_100026534();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v0, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v26, v3, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v26, v4);
}

uint64_t sub_1003462D4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  id v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  __n128 v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  id v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[3];
  char v102[8];
  _QWORD v103[3];
  char v104[8];
  uint64_t v105;
  uint64_t aBlock[3];
  void *v107;
  void (*v108)();
  uint64_t v109;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v97 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin();
  v98 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for AssetDownloadStatus(0);
  __chkstk_darwin();
  v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger(0);
  __chkstk_darwin();
  v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v14 = (char *)&v89 - v13;
  v15 = __chkstk_darwin();
  v17 = (char *)&v89 - v16;
  v99 = v7;
  v95 = v15;
  v94 = v18;
  if (!a2)
  {
    static Logger.downloads.getter(v15);
    v27 = a1;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v93 = v5;
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      aBlock[0] = v31;
      *(_DWORD *)v30 = 136446210;
      v32 = v27;
      v33 = objc_msgSend(v32, "taskDescription");
      if (v33)
      {
        v34 = v33;
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v37 = v36;

      }
      else
      {
        v35 = 0x6E776F6E6B6E755BLL;

        v37 = 0xEC0000005D646920;
      }
      v105 = sub_10003D274(v35, v37, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, aBlock, v30 + 4, v30 + 12);

      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Download task completed successfully. Nothing to call at this point. Task: %{public}s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      (*(void (**)(char *, uint64_t))(v94 + 8))(v12, v95);
      v5 = v93;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v94 + 8))(v12, v95);
    }
    v74 = v96;
    v73 = v97;
    v78 = v98;
    goto LABEL_32;
  }
  v91 = v10;
  swift_errorRetain();
  v19 = (void *)_convertErrorToNSError(_:)(a2);
  v20 = objc_msgSend(v19, "domain");

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  v26 = v24;
  v93 = v5;
  if (v21 == v25 && v23 == v24)
  {
    swift_bridgeObjectRelease_n(v23, 2);
    goto LABEL_9;
  }
  v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v25, v24, 0);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v26);
  if ((v38 & 1) != 0)
  {
LABEL_9:
    v40 = (void *)_convertErrorToNSError(_:)(a2);
    v41 = objc_msgSend(v40, "code");

    if (v41 == (id)-999)
    {
      static Logger.downloads.getter(v39);
      swift_errorRetain();
      v42 = a1;
      swift_errorRetain();
      v43 = v42;
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.error.getter(v44);
      v46 = os_log_type_enabled(v44, v45);
      v89 = v43;
      if (v46)
      {
        v90 = v4;
        v47 = swift_slowAlloc(22, -1);
        v48 = swift_slowAlloc(64, -1);
        aBlock[0] = v48;
        *(_DWORD *)v47 = 136446466;
        swift_getErrorValue(a2, v102, v101);
        v49 = Error.localizedDescription.getter(v101[1], v101[2]);
        v51 = v50;
        v105 = sub_10003D274(v49, v50, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, aBlock, v47 + 4, v47 + 12);
        swift_bridgeObjectRelease(v51);
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v47 + 12) = 2082;
        v52 = v43;
        v53 = objc_msgSend(v52, "taskDescription");
        if (v53)
        {
          v54 = v53;
          v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v57 = v56;

        }
        else
        {
          v55 = 0x6E776F6E6B6E755BLL;

          v57 = 0xEC0000005D646920;
        }
        v105 = sub_10003D274(v55, v57, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, aBlock, v47 + 14, v47 + 22);

        swift_bridgeObjectRelease(v57);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Download failed with error cancelled. %{public}s for task %{public}s", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v47, -1, -1);

        (*(void (**)(char *, uint64_t))(v94 + 8))(v17, v95);
        v4 = v90;
        v5 = v93;
        v74 = v96;
        v73 = v97;
        v76 = v100;
        v43 = v89;
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(char *, uint64_t))(v94 + 8))(v17, v95);
        v5 = v93;
        v74 = v96;
        v73 = v97;
        v76 = v100;
      }
      if (*(_QWORD *)(v76 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler))
      {
        v107 = (void *)sub_100005EC8(0, &qword_10055B1E0, NSURLSessionTask_ptr);
        v108 = (void (*)())&off_1004B3EA8;
        aBlock[0] = (uint64_t)v43;
        v79 = (char *)&loc_100346D84
            + dword_100346FBC[*(unsigned __int8 *)sub_10003A834((_QWORD *)(v76 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config), *(_QWORD *)(v76+ OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config+ 24))];
        __asm { BR              X10 }
      }
      swift_errorRelease();
      v78 = v98;
      goto LABEL_32;
    }
  }
  static Logger.downloads.getter(v39);
  swift_errorRetain();
  v58 = a1;
  swift_errorRetain();
  v59 = v58;
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.error.getter(v60);
  if (os_log_type_enabled(v60, v61))
  {
    v90 = v4;
    v62 = swift_slowAlloc(22, -1);
    v63 = swift_slowAlloc(64, -1);
    aBlock[0] = v63;
    *(_DWORD *)v62 = 136446466;
    swift_getErrorValue(a2, v104, v103);
    v64 = Error.localizedDescription.getter(v103[1], v103[2]);
    v66 = v65;
    v105 = sub_10003D274(v64, v65, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, aBlock, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v66);
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v62 + 12) = 2082;
    v89 = v59;
    v67 = v59;
    v68 = objc_msgSend(v67, "taskDescription");
    if (v68)
    {
      v69 = v68;
      v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      v72 = v71;

    }
    else
    {
      v70 = 0x6E776F6E6B6E755BLL;

      v72 = 0xEC0000005D646920;
    }
    v105 = sub_10003D274(v70, v72, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, aBlock, v62 + 14, v62 + 22);

    swift_bridgeObjectRelease(v72);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Download failed with generic error %{public}s for task %{public}s", (uint8_t *)v62, 0x16u);
    swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v62, -1, -1);

    (*(void (**)(char *, uint64_t))(v94 + 8))(v14, v95);
    v4 = v90;
    v74 = v96;
    v73 = v97;
    v75 = v100;
    v59 = v89;
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v94 + 8))(v14, v95);
    v74 = v96;
    v73 = v97;
    v75 = v100;
  }
  if (*(_QWORD *)(v75 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler))
  {
    v107 = (void *)sub_100005EC8(0, &qword_10055B1E0, NSURLSessionTask_ptr);
    v108 = (void (*)())&off_1004B3EA8;
    aBlock[0] = (uint64_t)v59;
    v77 = (char *)&loc_100346A3C
        + dword_100346FAC[*(unsigned __int8 *)sub_10003A834((_QWORD *)(v75 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config), *(_QWORD *)(v75 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config + 24))];
    __asm { BR              X10 }
  }
  swift_errorRelease();
  v5 = v93;
  v78 = v98;
LABEL_32:
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v81 = (void *)static OS_dispatch_queue.main.getter(v80);
  v82 = swift_allocObject(&unk_1004C4638, 24, 7);
  swift_unknownObjectWeakInit(v82 + 16);
  v108 = sub_100348058;
  v109 = v82;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100027AF8;
  v107 = &unk_1004C4650;
  v83 = _Block_copy(aBlock);
  swift_release(v109);
  static DispatchQoS.unspecified.getter(v84);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v85 = sub_10017F258();
  v86 = sub_10003F544((uint64_t *)&unk_10055B200);
  v87 = sub_100026534();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v86, v87, v4, v85);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v78, v73, v83);
  _Block_release(v83);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v73, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v78, v74);
}

void sub_100346FCC(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  void (**v5)(_QWORD, _QWORD);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  id v58;
  _BYTE v59[168];
  uint64_t v60[3];
  uint64_t v61;
  _UNKNOWN **v62;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(void (***)(_QWORD, _QWORD))(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v49 - v8;
  v10 = type metadata accessor for AssetDownloadStatus(0);
  __chkstk_darwin();
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)objc_msgSend(a1, "response");
  v55 = v10;
  v56 = v12;
  if (v13)
  {
    v57 = v13;
    v14 = objc_opt_self(NSHTTPURLResponse);
    v15 = (void *)swift_dynamicCastObjCClass(v57, v14);
    if (v15)
    {
      v53 = v15;
      v16 = (char *)objc_msgSend(v15, "statusCode");
      if ((unint64_t)(v16 - 300) >= 0xFFFFFFFFFFFFFF9CLL)
      {
        v40 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v41 = NSUserDefaults.episodeDownloadErrorEnabled.getter();

        v42 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler];
        if ((v41 & 1) != 0)
        {
          if (v42)
          {
            v61 = sub_100005EC8(0, &qword_1005654B8, NSURLSessionDownloadTask_ptr);
            v62 = &off_1004B3EA8;
            v60[0] = (uint64_t)a1;
            v43 = (char *)&loc_100347360
                + dword_100347D94[*(unsigned __int8 *)sub_10003A834(&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config], *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config+ 24])];
            __asm { BR              X10 }
          }
        }
        else if (v42)
        {
          v61 = sub_100005EC8(0, &qword_1005654B8, NSURLSessionDownloadTask_ptr);
          v62 = &off_1004B3EA8;
          v60[0] = (uint64_t)a1;
          v46 = (char *)&loc_100347580
              + dword_100347D84[*(unsigned __int8 *)sub_10003A834(&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config], *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config+ 24])];
          __asm { BR              X10 }
        }

      }
      else
      {
        static Logger.downloads.getter(v16);
        v17 = a1;
        v18 = v57;
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.error.getter(v19);
        v21 = os_log_type_enabled(v19, v20);
        v51 = v18;
        v52 = (uint64_t)v17;
        if (v21)
        {
          v54 = v4;
          v57 = v2;
          v22 = swift_slowAlloc(22, -1);
          v50 = swift_slowAlloc(32, -1);
          v60[0] = v50;
          *(_DWORD *)v22 = 134349314;
          v58 = objc_msgSend(v53, "statusCode");
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v22 + 4, v22 + 12);

          *(_WORD *)(v22 + 12) = 2082;
          v23 = v17;
          v24 = objc_msgSend(v23, "taskDescription");
          if (v24)
          {
            v25 = v24;
            v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
            v28 = v27;

          }
          else
          {
            v26 = 0x6E776F6E6B6E755BLL;

            v28 = 0xEC0000005D646920;
          }
          v58 = (id)sub_10003D274(v26, v28, v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v22 + 14, v22 + 22);

          swift_bridgeObjectRelease(v28);
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Download failed. Server response statusCode: %{public}ld. Task: %{public}s", (uint8_t *)v22, 0x16u);
          v47 = v50;
          swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v47, -1, -1);
          swift_slowDealloc(v22, -1, -1);

          ((void (**)(char *, uint64_t))v5)[1](v9, v54);
          v2 = v57;
        }
        else
        {

          ((void (**)(char *, uint64_t))v5)[1](v9, v4);
        }
        if (*(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler])
        {
          v61 = sub_100005EC8(0, &qword_1005654B8, NSURLSessionDownloadTask_ptr);
          v62 = &off_1004B3EA8;
          v60[0] = v52;
          v48 = (char *)&loc_1003478A8
              + dword_100347DA4[*(unsigned __int8 *)sub_10003A834(&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config], *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config+ 24])];
          __asm { BR              X10 }
        }

      }
      return;
    }

  }
  static Logger.downloads.getter(v13);
  v29 = a1;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v53 = v5;
    v54 = v4;
    v57 = v2;
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = (char *)swift_slowAlloc(32, -1);
    v60[0] = (uint64_t)v51;
    *(_DWORD *)v32 = 136446210;
    v52 = (uint64_t)v29;
    v33 = v29;
    v34 = objc_msgSend(v33, "taskDescription");
    if (v34)
    {
      v35 = v34;
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v38 = v37;

    }
    else
    {
      v36 = 0x6E776F6E6B6E755BLL;

      v38 = 0xEC0000005D646920;
    }
    v44 = v51;
    v58 = (id)sub_10003D274(v36, v38, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v32 + 4, v32 + 12);

    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Invalid response. Can't get HTTPURLResponse from URLSessionDownloadTask.response task: %{public}s.", v32, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    (*((void (**)(char *, uint64_t))v53 + 1))(v7, v54);
    v2 = v57;
    v39 = v52;
  }
  else
  {

    ((void (**)(char *, uint64_t))v5)[1](v7, v4);
    v39 = (uint64_t)v29;
  }
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler])
  {
    v61 = sub_100005EC8(0, &qword_1005654B8, NSURLSessionDownloadTask_ptr);
    v62 = &off_1004B3EA8;
    v60[0] = v39;
    v45 = (char *)&loc_1003474D8
        + dword_100347DB4[*(unsigned __int8 *)sub_10003A834(&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config], *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config + 24])];
    __asm { BR              X10 }
  }
}

void sub_100347DC4()
{
  uint64_t v0;
  char *v1;

  type metadata accessor for AssetDownloadStatus(0);
  __chkstk_darwin();
  v1 = (char *)&loc_100347E64
     + dword_100348024[*(unsigned __int8 *)sub_10003A834((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config + 24))];
  __asm { BR              X10 }
}

void sub_100347E74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSString v27;
  NSString v28;
  void (*v29)(uint64_t, unint64_t, unint64_t, _QWORD, _QWORD *);
  uint64_t v30;
  id v31;
  id v32;

  *(_QWORD *)(v26 - 128) = objc_msgSend(v25, "progress");
  v27 = String._bridgeToObjectiveC()();
  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(*(id *)(v26 - 128), "setUserInfoObject:forKey:", v27, v28);

  v29 = *(void (**)(uint64_t, unint64_t, unint64_t, _QWORD, _QWORD *))(v21
                                                                                             + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler);
  if (v29)
  {
    v30 = *(_QWORD *)(v21 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler + 8);
    *(_QWORD *)(v26 - 96) = sub_100005EC8(0, &qword_1005654B8, NSURLSessionDownloadTask_ptr);
    *(_QWORD *)(v26 - 88) = &off_1004B3EA8;
    *(_QWORD *)(v26 - 120) = v25;
    *v20 = *(_QWORD *)(v26 - 128);
    v20[1] = v23;
    v20[2] = v22;
    swift_storeEnumTagMultiPayload(v20, v24, 1);
    sub_10002CA20((uint64_t)v29, v30);
    v31 = v25;
    v32 = *(id *)(v26 - 128);
    v29(v26 - 120, 0xD00000000000002DLL, 0x800000010042DE50, 0, v20);
    sub_10002CA30((uint64_t)v29, v30);

    swift_bridgeObjectRelease(0x800000010042DE50);
    sub_10022B340((uint64_t)v20);
    sub_10003D380((_QWORD *)(v26 - 120));
  }
  else
  {
    swift_bridgeObjectRelease(0x800000010042DE50);

  }
}

uint64_t sub_100348034()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100348058()
{
  uint64_t v0;

  sub_1003451D8(v0);
}

uint64_t sub_100348070()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1003480B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

ValueMetadata *type metadata accessor for FetchShowLatestEpisodesIntentImplementation()
{
  return &type metadata for FetchShowLatestEpisodesIntentImplementation;
}

uint64_t sub_100348128()
{
  return sub_100026844((unint64_t *)&unk_1005654C8, (uint64_t (*)(uint64_t))&type metadata accessor for FetchShowLatestEpisodesIntent, (uint64_t)&protocol conformance descriptor for FetchShowLatestEpisodesIntent);
}

uint64_t sub_100348154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005654D8 + dword_1005654D8);
  v6 = (_QWORD *)swift_task_alloc(unk_1005654DC);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_100252240;
  return v8(a2, a3);
}

uint64_t sub_1003481C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ShowLatestCatalogEpisodesIntent;
  uint64_t v8;
  uint64_t ShowLatestLocalEpisodesIntent;
  uint64_t v10;
  _QWORD *v11;

  v2[9] = a1;
  v2[10] = a2;
  v3 = type metadata accessor for EpisodeEntity(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ShowEntity(0);
  v2[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[15] = v6;
  v2[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  ShowLatestCatalogEpisodesIntent = type metadata accessor for FetchShowLatestCatalogEpisodesIntent(0);
  v2[17] = ShowLatestCatalogEpisodesIntent;
  v8 = *(_QWORD *)(ShowLatestCatalogEpisodesIntent - 8);
  v2[18] = v8;
  v2[19] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  ShowLatestLocalEpisodesIntent = type metadata accessor for FetchShowLatestLocalEpisodesIntent(0);
  v2[20] = ShowLatestLocalEpisodesIntent;
  v2[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(ShowLatestLocalEpisodesIntent - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544((uint64_t *)&unk_10055B8B0);
  v11 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v2[22] = v11;
  *v11 = v2;
  v11[1] = sub_1003482DC;
  return BaseObjectGraph.inject<A>(_:)(v2 + 2, v10, v10);
}

uint64_t sub_1003482DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100348854;
  else
    v3 = sub_100348340;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100348340()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ShowLatestEpisodes;
  _QWORD *v6;
  uint64_t v7;

  v2 = v0[20];
  v1 = v0[21];
  v3 = v0[5];
  v4 = v0[6];
  sub_10003A834(v0 + 2, v3);
  ShowLatestEpisodes = FetchShowLatestEpisodesIntent.show.getter();
  *(_QWORD *)(v1 + *(int *)(v2 + 20)) = FetchShowLatestEpisodesIntent.limit.getter(ShowLatestEpisodes);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[24] = v6;
  v7 = sub_100026844((unint64_t *)&qword_10055C8A0, type metadata accessor for FetchShowLatestLocalEpisodesIntent, (uint64_t)&unk_1003CEFA0);
  *v6 = v0;
  v6[1] = sub_100348410;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 7, v0[21], v0[10], v0[20], v7, v3, v4);
}

uint64_t sub_100348410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v2);
  sub_100348984(v3);
  if (v0)
    v4 = sub_1003488B4;
  else
    v4 = sub_100348480;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100348480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ShowLatestEpisodes;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD *)(v0 + 168);
    v3 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 104);
    sub_10003D380((_QWORD *)(v0 + 16));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRelease(v1);
    v10 = *(_QWORD *)(v0 + 40);
    v17 = *(_QWORD *)(v0 + 48);
    sub_10003A834((_QWORD *)(v0 + 16), v10);
    ShowLatestEpisodes = FetchShowLatestEpisodesIntent.show.getter();
    v12 = ShowEntity.adamID.getter(ShowLatestEpisodes);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
    v14 = FetchShowLatestEpisodesIntent.limit.getter(v13);
    FetchShowLatestCatalogEpisodesIntent.init(adamID:limit:extendedTypes:)(v12, v14, _swiftEmptyArrayStorage);
    v15 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
    *(_QWORD *)(v0 + 208) = v15;
    v16 = sub_100026844(&qword_1005654E0, (uint64_t (*)(uint64_t))&type metadata accessor for FetchShowLatestCatalogEpisodesIntent, (uint64_t)&protocol conformance descriptor for FetchShowLatestCatalogEpisodesIntent);
    *v15 = v0;
    v15[1] = sub_100348618;
    return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 64, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 136), v16, v10, v17);
  }
}

uint64_t sub_100348618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_10034891C;
  else
    v6 = sub_10034869C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10034869C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 64);
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease(v1);
    v12 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 104);
    sub_10003D380((_QWORD *)(v0 + 16));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  if (v1 < 0)
    v11 = *(_QWORD *)(v0 + 64);
  else
    v11 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  v2 = _CocoaArrayWrapper.endIndex.getter(v11);
  swift_bridgeObjectRelease(v1);
  if (!v2)
    goto LABEL_16;
LABEL_3:
  result = sub_10017B36C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v0 + 96);
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      else
        v6 = *(id *)(v1 + 8 * v4 + 32);
      EpisodeEntity.init(mediaObject:)(v6);
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_10017B36C(v7 > 1, v8 + 1, 1);
      v9 = *(_QWORD *)(v0 + 104);
      v10 = *(_QWORD *)(v0 + 88);
      ++v4;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))((char *)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v8, v9, v10);
    }
    while (v2 != v4);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_100348854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003488B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10003D380((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10034891C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10003D380((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100348984(uint64_t a1)
{
  uint64_t ShowLatestLocalEpisodesIntent;

  ShowLatestLocalEpisodesIntent = type metadata accessor for FetchShowLatestLocalEpisodesIntent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(ShowLatestLocalEpisodesIntent - 8) + 8))(a1, ShowLatestLocalEpisodesIntent);
  return a1;
}

_QWORD *sub_1003489C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v22;
  unint64_t v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  const char *v29;
  unint64_t v30;
  NSBundle v31;
  uint64_t v32;
  unint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v38;
  _QWORD v39[5];
  _BYTE v40[24];

  v1 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v1);
  v3 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v39 - v9;
  v11 = v0 + OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type;
  swift_beginAccess(v11, v40, 0, 0);
  sub_1003126CC(v11, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10034A36C((uint64_t)v3);
  }
  else
  {
    sub_10017FE20((uint64_t)v3, (uint64_t)v10);
    sub_10034A3AC((uint64_t)v10, (uint64_t)v8);
    switch(swift_getEnumCaseMultiPayload(v8, v4))
    {
      case 0u:
        v12 = *(_QWORD *)v8;
        v13 = *((_QWORD *)v8 + 1);
        v14 = *((_QWORD *)v8 + 2);
        v15 = *((_QWORD *)v8 + 3);
        v16 = *((_QWORD *)v8 + 4);
        v17 = *((_QWORD *)v8 + 5);
        v18 = *((_QWORD *)v8 + 6);
        v19 = *((_QWORD *)v8 + 7);
        if (v8[64] == 9 && v12 == 3 && (v14 | v13 | v15 | v16 | v17 | v18 | v19) == 0)
        {
          v22 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v24 = 0xD00000000000002ALL;
          v23 = 0xD000000000000034;
          v38 = 0x800000010043F1D0;
          v25 = "CARPLAY_LIBRARY_LATEST_EPISODES_EMPTY_STATE_SUBTITLE";
          goto LABEL_21;
        }
        sub_10003F49C(v12, v13, v14, v15, v16, v17, v18, v19, v8[64]);
        sub_1001A65B0((uint64_t)v10);
        return _swiftEmptyArrayStorage;
      case 6u:
        swift_release(*(_QWORD *)v8);
        v22 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v23 = 0xD00000000000002ALL;
        v24 = 0xD000000000000030;
        v38 = 0x800000010043F040;
        v25 = "CARPLAY_EMPTY_STATION_EMPTY_STATE_SUBTITLE";
        goto LABEL_21;
      case 8u:
        v22 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v23 = 0xD000000000000024;
        v24 = 0xD00000000000004ALL;
        v38 = 0x800000010043F140;
        v25 = "CARPLAY_LIBRARY_EMPTY_STATE_SUBTITLE";
LABEL_21:
        v30 = (unint64_t)(v25 - 32) | 0x8000000000000000;
        v31.super.isa = v22;
        v32 = 0;
        v33 = 0xE000000000000000;
        goto LABEL_22;
      case 9u:
        v26 = type metadata accessor for Podcasts(0);
        v39[3] = v26;
        v39[4] = sub_1001E04E4();
        v27 = sub_1000242A8(v39);
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v27, enum case for Podcasts.homeTab(_:), v26);
        v28 = isFeatureEnabled(_:)(v39);
        sub_10003D380(v39);
        v22 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        if ((v28 & 1) != 0)
        {
          v23 = 0xD000000000000021;
          v38 = 0x800000010043F0B0;
          v29 = "CARPLAY_HOME_EMPTY_STATE_SUBTITLE";
        }
        else
        {
          v23 = 0xD000000000000027;
          v38 = 0x800000010043F0B0;
          v29 = "CARPLAY_LISTEN_NOW_EMPTY_STATE_SUBTITLE";
        }
        v30 = (unint64_t)(v29 - 32) | 0x8000000000000000;
        v31.super.isa = v22;
        v32 = 0;
        v33 = 0xE000000000000000;
        v24 = 0xD000000000000023;
LABEL_22:
        v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v23, (Swift::String_optional)0, v31, *(Swift::String *)&v32, *(Swift::String *)&v24);

        v35 = sub_10003F544((uint64_t *)&unk_1005588B0);
        v36 = swift_allocObject(v35, 48, 7);
        *(_OWORD *)(v36 + 16) = xmmword_1003CA200;
        *(Swift::String *)(v36 + 32) = v34;
        sub_1001A65B0((uint64_t)v10);
        break;
      default:
        sub_1001A65B0((uint64_t)v10);
        sub_1001A65B0((uint64_t)v8);
        break;
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100348E0C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100348E48 + 4 * byte_1003D6570[a1]))(0x6669636570736E75, 0xEB00000000646569);
}

uint64_t sub_100348E48()
{
  return 0x6573776F7262;
}

unint64_t sub_100348E5C()
{
  return 0xD000000000000016;
}

uint64_t sub_100348F50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_100348E0C(*a1);
  v5 = v4;
  v6 = sub_100348E0C(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100348FD8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_100348E0C(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_100349038(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_100348E0C(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_100349078(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_100348E0C(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1003490D4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10034A324(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100349100@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100348E0C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1003491BC()
{
  return type metadata accessor for CarPlayTemplateInfo(0);
}

uint64_t type metadata accessor for CarPlayTemplateInfo(uint64_t a1)
{
  return sub_10003EAF4(a1, (uint64_t *)&unk_100565510, (uint64_t)&nominal type descriptor for CarPlayTemplateInfo);
}

void sub_1003491D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10020F388(319, &qword_100565520, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1003D65D8;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for CarPlayTemplateInfo.TemplateType(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100565598, (uint64_t)&nominal type descriptor for CarPlayTemplateInfo.TemplateType);
}

uint64_t *sub_100349270(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (uint64_t *)(v17 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *(_QWORD *)a2;
        v9 = *((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        v11 = *((_QWORD *)a2 + 3);
        v12 = *((_QWORD *)a2 + 4);
        v13 = *((_QWORD *)a2 + 5);
        v15 = *((_QWORD *)a2 + 6);
        v14 = *((_QWORD *)a2 + 7);
        v34 = v14;
        v16 = a2[64];
        sub_100168ED4(v8, v9, v10, v11, v12, v13, v15, v14, v16);
        *a1 = v8;
        a1[1] = v9;
        a1[2] = v10;
        a1[3] = v11;
        a1[4] = v12;
        a1[5] = v13;
        a1[6] = v15;
        a1[7] = v34;
        *((_BYTE *)a1 + 64) = v16;
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v19 = *((_QWORD *)a2 + 1);
        *a1 = *(_QWORD *)a2;
        a1[1] = v19;
        *((_BYTE *)a1 + 16) = a2[16];
        swift_bridgeObjectRetain(v19);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v20 = *(void **)a2;
        v21 = a2[8];
        sub_1002AB250(v20, v21);
        *a1 = (uint64_t)v20;
        *((_BYTE *)a1 + 8) = v21;
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v22 = type metadata accessor for URL(0);
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(a2, 1, v22))
        {
          v24 = sub_10003F544((uint64_t *)&unk_100553DC0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 16))(a1, a2, v22);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v23 + 56))(a1, 0, 1, v22);
        }
        v29 = sub_10003F544((uint64_t *)&unk_100554EE0);
        *(uint64_t *)((char *)a1 + *(int *)(v29 + 48)) = *(_QWORD *)&a2[*(int *)(v29 + 48)];
        swift_retain();
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v25 = *(_QWORD *)a2;
        *a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v25);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 6u:
        *a1 = *(_QWORD *)a2;
        swift_retain();
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        v26 = type metadata accessor for URL(0);
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(a2, 1, v26))
        {
          v28 = sub_10003F544((uint64_t *)&unk_100553DC0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 16))(a1, a2, v26);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v27 + 56))(a1, 0, 1, v26);
        }
        v30 = sub_10003F544(&qword_100556410);
        *(uint64_t *)((char *)a1 + *(int *)(v30 + 48)) = *(_QWORD *)&a2[*(int *)(v30 + 48)];
        v31 = *(int *)(v30 + 64);
        v32 = (char *)a1 + v31;
        v33 = &a2[v31];
        v32[8] = v33[8];
        *(_QWORD *)v32 = *(_QWORD *)v33;
        swift_retain();
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

double sub_10034959C(_QWORD *a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      sub_10003F49C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], *((_BYTE *)a1 + 64));
      return result;
    case 1u:
      v4 = a1[1];
      goto LABEL_9;
    case 2u:
      sub_1001A67AC((void *)*a1, *((_BYTE *)a1 + 8));
      return result;
    case 3u:
      v5 = type metadata accessor for URL(0);
      v6 = *(_QWORD *)(v5 - 8);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
        (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
      v7 = (uint64_t *)&unk_100554EE0;
      goto LABEL_14;
    case 4u:
      v4 = *a1;
LABEL_9:
      *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
      return result;
    case 6u:
      *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
      return result;
    case 7u:
      v8 = type metadata accessor for URL(0);
      v9 = *(_QWORD *)(v8 - 8);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8))
        (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(a1, v8);
      v7 = &qword_100556410;
LABEL_14:
      v10 = *(_QWORD *)((char *)a1 + *(int *)(sub_10003F544(v7) + 48));
      *(_QWORD *)&result = swift_release(v10).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1003496F4(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v34;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = *(_QWORD *)a2;
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 2);
      v9 = *((_QWORD *)a2 + 3);
      v10 = *((_QWORD *)a2 + 4);
      v11 = *((_QWORD *)a2 + 5);
      v13 = *((_QWORD *)a2 + 6);
      v12 = *((_QWORD *)a2 + 7);
      v34 = v12;
      v14 = a2[64];
      sub_100168ED4(v6, v7, v8, v9, v10, v11, v13, v12, v14);
      *a1 = v6;
      a1[1] = v7;
      a1[2] = v8;
      a1[3] = v9;
      a1[4] = v10;
      a1[5] = v11;
      a1[6] = v13;
      a1[7] = v34;
      *((_BYTE *)a1 + 64) = v14;
      v15 = a1;
      v16 = a3;
      v17 = 0;
      goto LABEL_16;
    case 1u:
      v18 = *((_QWORD *)a2 + 1);
      *a1 = *(_QWORD *)a2;
      a1[1] = v18;
      *((_BYTE *)a1 + 16) = a2[16];
      swift_bridgeObjectRetain(v18);
      v15 = a1;
      v16 = a3;
      v17 = 1;
      goto LABEL_16;
    case 2u:
      v19 = *(void **)a2;
      v20 = a2[8];
      sub_1002AB250(v19, v20);
      *a1 = (uint64_t)v19;
      *((_BYTE *)a1 + 8) = v20;
      v15 = a1;
      v16 = a3;
      v17 = 2;
      goto LABEL_16;
    case 3u:
      v21 = type metadata accessor for URL(0);
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(a2, 1, v21))
      {
        v23 = sub_10003F544((uint64_t *)&unk_100553DC0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 16))(a1, a2, v21);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v22 + 56))(a1, 0, 1, v21);
      }
      v28 = sub_10003F544((uint64_t *)&unk_100554EE0);
      *(uint64_t *)((char *)a1 + *(int *)(v28 + 48)) = *(_QWORD *)&a2[*(int *)(v28 + 48)];
      swift_retain();
      v15 = a1;
      v16 = a3;
      v17 = 3;
      goto LABEL_16;
    case 4u:
      v24 = *(_QWORD *)a2;
      *a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v24);
      v15 = a1;
      v16 = a3;
      v17 = 4;
      goto LABEL_16;
    case 6u:
      *a1 = *(_QWORD *)a2;
      swift_retain();
      v15 = a1;
      v16 = a3;
      v17 = 6;
      goto LABEL_16;
    case 7u:
      v25 = type metadata accessor for URL(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(a2, 1, v25))
      {
        v27 = sub_10003F544((uint64_t *)&unk_100553DC0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 16))(a1, a2, v25);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v26 + 56))(a1, 0, 1, v25);
      }
      v29 = sub_10003F544(&qword_100556410);
      *(uint64_t *)((char *)a1 + *(int *)(v29 + 48)) = *(_QWORD *)&a2[*(int *)(v29 + 48)];
      v30 = *(int *)(v29 + 64);
      v31 = (char *)a1 + v30;
      v32 = &a2[v30];
      v31[8] = v32[8];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      swift_retain();
      v15 = a1;
      v16 = a3;
      v17 = 7;
LABEL_16:
      swift_storeEnumTagMultiPayload(v15, v16, v17);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_1003499E0(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v35;

  if (a1 != (uint64_t *)a2)
  {
    sub_1001A65B0((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = *(_QWORD *)a2;
        v7 = *((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        v9 = *((_QWORD *)a2 + 3);
        v10 = *((_QWORD *)a2 + 4);
        v11 = *((_QWORD *)a2 + 5);
        v13 = *((_QWORD *)a2 + 6);
        v12 = *((_QWORD *)a2 + 7);
        v35 = v12;
        v14 = a2[64];
        sub_100168ED4(v6, v7, v8, v9, v10, v11, v13, v12, v14);
        *a1 = v6;
        a1[1] = v7;
        a1[2] = v8;
        a1[3] = v9;
        a1[4] = v10;
        a1[5] = v11;
        a1[6] = v13;
        a1[7] = v35;
        *((_BYTE *)a1 + 64) = v14;
        v15 = a1;
        v16 = a3;
        v17 = 0;
        goto LABEL_17;
      case 1u:
        *a1 = *(_QWORD *)a2;
        v18 = *((_QWORD *)a2 + 1);
        a1[1] = v18;
        *((_BYTE *)a1 + 16) = a2[16];
        swift_bridgeObjectRetain(v18);
        v15 = a1;
        v16 = a3;
        v17 = 1;
        goto LABEL_17;
      case 2u:
        v19 = *(void **)a2;
        v20 = a2[8];
        sub_1002AB250(v19, v20);
        *a1 = (uint64_t)v19;
        *((_BYTE *)a1 + 8) = v20;
        v15 = a1;
        v16 = a3;
        v17 = 2;
        goto LABEL_17;
      case 3u:
        v21 = type metadata accessor for URL(0);
        v22 = *(_QWORD *)(v21 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(a2, 1, v21))
        {
          v23 = sub_10003F544((uint64_t *)&unk_100553DC0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 16))(a1, a2, v21);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v22 + 56))(a1, 0, 1, v21);
        }
        v28 = sub_10003F544((uint64_t *)&unk_100554EE0);
        *(uint64_t *)((char *)a1 + *(int *)(v28 + 48)) = *(_QWORD *)&a2[*(int *)(v28 + 48)];
        swift_retain();
        v15 = a1;
        v16 = a3;
        v17 = 3;
        goto LABEL_17;
      case 4u:
        v24 = *(_QWORD *)a2;
        *a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v24);
        v15 = a1;
        v16 = a3;
        v17 = 4;
        goto LABEL_17;
      case 6u:
        *a1 = *(_QWORD *)a2;
        swift_retain();
        v15 = a1;
        v16 = a3;
        v17 = 6;
        goto LABEL_17;
      case 7u:
        v25 = type metadata accessor for URL(0);
        v26 = *(_QWORD *)(v25 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(a2, 1, v25))
        {
          v27 = sub_10003F544((uint64_t *)&unk_100553DC0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 16))(a1, a2, v25);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v26 + 56))(a1, 0, 1, v25);
        }
        v29 = sub_10003F544(&qword_100556410);
        *(uint64_t *)((char *)a1 + *(int *)(v29 + 48)) = *(_QWORD *)&a2[*(int *)(v29 + 48)];
        v30 = *(int *)(v29 + 64);
        v31 = (char *)a1 + v30;
        v32 = &a2[v30];
        v33 = v32[8];
        *(_QWORD *)v31 = *(_QWORD *)v32;
        v31[8] = v33;
        swift_retain();
        v15 = a1;
        v16 = a3;
        v17 = 7;
LABEL_17:
        swift_storeEnumTagMultiPayload(v15, v16, v17);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_100349CE4(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 7)
  {
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
    {
      v12 = sub_10003F544((uint64_t *)&unk_100553DC0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(a1, a2, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    }
    v17 = sub_10003F544(&qword_100556410);
    *(_QWORD *)&a1[*(int *)(v17 + 48)] = *(_QWORD *)&a2[*(int *)(v17 + 48)];
    v18 = *(int *)(v17 + 64);
    v19 = &a1[v18];
    v20 = &a2[v18];
    v19[8] = v20[8];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v14 = a1;
    v15 = a3;
    v16 = 7;
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 3)
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10003F544((uint64_t *)&unk_100553DC0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v13 = sub_10003F544((uint64_t *)&unk_100554EE0);
    *(_QWORD *)&a1[*(int *)(v13 + 48)] = *(_QWORD *)&a2[*(int *)(v13 + 48)];
    v14 = a1;
    v15 = a3;
    v16 = 3;
LABEL_12:
    swift_storeEnumTagMultiPayload(v14, v15, v16);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_100349EAC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  if (a1 != a2)
  {
    sub_1001A65B0((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 7)
    {
      v10 = type metadata accessor for URL(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        v12 = sub_10003F544((uint64_t *)&unk_100553DC0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(a1, a2, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      v17 = sub_10003F544(&qword_100556410);
      *(_QWORD *)&a1[*(int *)(v17 + 48)] = *(_QWORD *)&a2[*(int *)(v17 + 48)];
      v18 = *(int *)(v17 + 64);
      v19 = &a1[v18];
      v20 = &a2[v18];
      v19[8] = v20[8];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v14 = a1;
      v15 = a3;
      v16 = 7;
      goto LABEL_13;
    }
    if (EnumCaseMultiPayload == 3)
    {
      v7 = type metadata accessor for URL(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_10003F544((uint64_t *)&unk_100553DC0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v13 = sub_10003F544((uint64_t *)&unk_100554EE0);
      *(_QWORD *)&a1[*(int *)(v13 + 48)] = *(_QWORD *)&a2[*(int *)(v13 + 48)];
      v14 = a1;
      v15 = a3;
      v16 = 3;
LABEL_13:
      swift_storeEnumTagMultiPayload(v14, v15, v16);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_10034A084(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _BYTE v6[32];
  _QWORD v7[8];

  v7[0] = "A";
  v7[1] = &unk_1003D6618;
  v7[2] = &unk_1003D6630;
  sub_10020F388(319, (unint64_t *)&qword_100553498, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_getTupleTypeLayout2(v6, v4, &unk_1003D6648);
    v7[3] = v6;
    v7[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v7[5] = &unk_1003D6660;
    v7[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_getTupleTypeLayout3(v5, v4, &unk_1003D6648, &unk_1003D6678);
    v7[7] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256, 8, v7);
  }
}

uint64_t getEnumTagSinglePayload for CarPlayTemplateInfo.PlaybackSource(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CarPlayTemplateInfo.PlaybackSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10034A25C + 4 * byte_1003D65B2[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10034A290 + 4 * byte_1003D65AD[v4]))();
}

uint64_t sub_10034A290(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10034A298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10034A2A0);
  return result;
}

uint64_t sub_10034A2AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10034A2B4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_10034A2B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10034A2C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CarPlayTemplateInfo.PlaybackSource()
{
  return &type metadata for CarPlayTemplateInfo.PlaybackSource;
}

unint64_t sub_10034A2E0()
{
  unint64_t result;

  result = qword_1005655D0;
  if (!qword_1005655D0)
  {
    result = swift_getWitnessTable(&unk_1003D6718, &type metadata for CarPlayTemplateInfo.PlaybackSource);
    atomic_store(result, (unint64_t *)&qword_1005655D0);
  }
  return result;
}

unint64_t sub_10034A324(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004AD3F0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

uint64_t sub_10034A36C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544((uint64_t *)&unk_100555310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10034A3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for BlueMoonStubPlayerController()
{
  return objc_opt_self(_TtC8Podcasts28BlueMoonStubPlayerController);
}

void sub_10034A410()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000045, 0x800000010043F2E0, "Podcasts/BlueMoonStubPlayerController.swift", 43, 2, 13, 0);
  __break(1u);
}

void sub_10034A468()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000032, 0x800000010043F2A0, "Podcasts/BlueMoonStubPlayerController.swift", 43, 2, 17, 0);
  __break(1u);
}

void sub_10034A4C0()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000031, 0x800000010043F260, "Podcasts/BlueMoonStubPlayerController.swift", 43, 2, 21, 0);
  __break(1u);
}

_QWORD *sub_10034A518()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_10003D380(v0 + 9);
  swift_unknownObjectRelease(v0[14]);
  swift_release(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  sub_10003D380(v0 + 19);
  swift_release(v0[24]);
  swift_release(v0[25]);
  return v0;
}

uint64_t sub_10034A56C()
{
  uint64_t v0;

  sub_10034A518();
  return swift_deallocClassInstance(v0, 208, 7);
}

uint64_t type metadata accessor for CarPlayStationDetailProvider()
{
  return objc_opt_self(_TtC8Podcasts28CarPlayStationDetailProvider);
}

uint64_t sub_10034A5AC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0;
  v2 = type metadata accessor for ObserverQueue(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_100565770);
  v42 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_10003F544(&qword_100565778);
  v45 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin();
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_10003F544(&qword_100565780);
  v46 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin();
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v0[15];
  ObjectType = swift_getObjectType(v0[14], v14);
  v16 = dispatch thunk of LibraryDataProviderProtocol.fetchStationDetailObserver(with:)(v0[17], v0[18], ObjectType, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ObserverQueue.main(_:), v2);
  v17 = sub_10002F9C8(&qword_100565788, &qword_100565790, (uint64_t)&protocol conformance descriptor for AnyObserver<A>);
  v18 = Promise<A>.observerPublisher(receiveOn:)(v5, v17);
  v19 = swift_release(v16);
  (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v19);
  v48 = v18;
  v20 = sub_10003F544(&qword_100565798);
  v21 = swift_allocObject(v20, 40, 7);
  *(_OWORD *)(v21 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v21 + 32) = v1[2];
  v47 = v21;
  specialized Array._endMutation()(v21);
  v22 = v47;
  swift_retain();
  v23 = sub_10003F544(&qword_1005657A0);
  v24 = sub_10002F9C8((unint64_t *)&unk_1005657A8, &qword_1005657A0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.prepend(_:)(v22, v23, v24);
  swift_release(v18);
  swift_bridgeObjectRelease(v22);
  v48 = v1[25];
  v25 = sub_10003F544((uint64_t *)&unk_100555110);
  v26 = sub_10002F9C8(&qword_1005657B8, &qword_100565770, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
  v27 = sub_10002F9C8(&qword_1005564C0, (uint64_t *)&unk_100555110, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.combineLatest<A>(_:)(&v48, v6, v25, v26, v27);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v6);
  v28 = swift_allocObject(&unk_1004C48E0, 24, 7);
  swift_weakInit(v28 + 16, v1);
  v29 = swift_allocObject(&unk_1004C4908, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_10034B0EC;
  *(_QWORD *)(v29 + 24) = v28;
  v30 = static Subscribers.Demand.unlimited.getter(v29);
  v31 = sub_10003F544((uint64_t *)&unk_100556430);
  v32 = sub_10002F9C8((unint64_t *)&unk_1005657C0, &qword_100565778, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v33 = sub_10002F9C8(&qword_1005551B8, (uint64_t *)&unk_100556430, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v34 = v30;
  v35 = v43;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v34, sub_100184294, v29, v43, v31, v32, v33);
  v36 = swift_release(v29);
  (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v10, v35, v36);
  v37 = sub_10002F9C8((unint64_t *)&unk_1005657D0, &qword_100565780, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v38 = v44;
  v39 = Publisher.eraseToAnyPublisher()(v44, v37);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v38);
  return v39;
}

uint64_t sub_10034A9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char v45[24];
  _OWORD v46[3];

  v4 = sub_10003F544(&qword_1005551E8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_1005657E0);
  v40 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_1005657E8);
  v41 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544((uint64_t *)&unk_1005657F0);
  v42 = *(_QWORD *)(v14 - 8);
  v43 = v14;
  __chkstk_darwin();
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v45, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
    goto LABEL_5;
  v18 = Strong;
  if (!a1)
  {
    swift_release(Strong);
LABEL_5:
    *(_QWORD *)&v46[0] = _swiftEmptyArrayStorage;
    v34 = sub_10003F544(&qword_1005545E0);
    Just.init(_:)(v46, v34);
    v35 = sub_10002F9C8(&qword_100565800, &qword_1005551E8, (uint64_t)&protocol conformance descriptor for Just<A>);
    v32 = Publisher.eraseToAnyPublisher()(v4, v35);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v36);
    return v32;
  }
  v38 = v11;
  v19 = *(_QWORD *)(Strong + 128);
  v20 = *(_OWORD *)(Strong + 40);
  v46[0] = *(_OWORD *)(Strong + 24);
  v46[1] = v20;
  v46[2] = *(_OWORD *)(Strong + 56);
  v21 = a1;
  v22 = *(_QWORD *)(v18 + 192);
  v39 = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  v23 = sub_1003748A4(v18 + 72, v19, v46, v18 + 152, (uint64_t)sub_100181074, v22);
  swift_release(v19);
  swift_release(v22);
  v44 = (_QWORD *)v23;
  v24 = sub_10003F544((uint64_t *)&unk_100565808);
  v25 = sub_10003F544((uint64_t *)&unk_1005544E0);
  v26 = sub_10002F9C8(&qword_100565818, (uint64_t *)&unk_100565808, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_100162E58, 0, v24, v25, v26);
  swift_release(v23);
  v27 = sub_10003F544(&qword_1005545E0);
  Publishers.CompactMap.map<A>(_:)(sub_10034AD78, 0, v8, v27);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v8);
  v44 = _swiftEmptyArrayStorage;
  v28 = sub_10002F9C8(&qword_100565820, &qword_1005657E8, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v29 = v38;
  Publisher.replaceEmpty(with:)(&v44, v38, v28);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v29);
  v30 = sub_10002F9C8(&qword_100565828, (uint64_t *)&unk_1005657F0, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceEmpty<A>);
  v31 = v43;
  v32 = Publisher.eraseToAnyPublisher()(v43, v30);
  swift_release(v18);
  v33 = swift_release(v39);
  (*(void (**)(char *, uint64_t, __n128))(v42 + 8))(v16, v31, v33);
  return v32;
}

uint64_t sub_10034AD78@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  unint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char *v20;
  Class isa;
  id v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = sub_100181038();
  static OS_os_log.carPlay.getter(v9);
  v10 = swift_bridgeObjectRetain_n(v8, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = (unint64_t)v8 >> 62;
  if (os_log_type_enabled(v11, v12))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    if (v13)
    {
      if (v8 < 0)
        v28 = v8;
      else
        v28 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v15 = _CocoaArrayWrapper.endIndex.getter(v28);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v15 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v8);
    v30 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CarPlayStationDetailProvider: section total items count is %ld.", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = sub_10003F544((uint64_t *)&unk_100553780);
  v17 = swift_allocObject(v16, 40, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1003CA250;
  if (v13)
  {
    if (v8 < 0)
      v25 = v8;
    else
      v25 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v26 = sub_10003F544(&qword_1005544F0);
    v27 = _bridgeCocoaArray<A>(_:)(v25, v26);
    swift_bridgeObjectRelease(v8);
    v8 = v27;
  }
  else
  {
    swift_bridgeObjectRetain(v8);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v18);
  }
  v19 = objc_allocWithZone((Class)CPListSection);
  v20 = sub_100180784(v8);
  swift_bridgeObjectRelease(v8);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v22 = objc_msgSend(v19, "initWithItems:", isa, swift_bridgeObjectRelease(v20).n128_f64[0]);

  *(_QWORD *)(v17 + 32) = v22;
  v30 = v17;
  result = specialized Array._endMutation()(v23);
  *a2 = v30;
  return result;
}

uint64_t sub_10034B014()
{
  return sub_10034A5AC();
}

uint64_t sub_10034B034()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10003F544((uint64_t *)&unk_1005550F0);
  v1 = sub_10002F9C8(&qword_100554FB0, (uint64_t *)&unk_1005550F0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_10034B0A4()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_10034B0C8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10034B0EC(uint64_t a1)
{
  uint64_t v1;

  return sub_10034A9C4(a1, v1);
}

uint64_t sub_10034B0F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10034B118(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19[3];

  v4 = v3;
  v7 = sub_10003F544((uint64_t *)&unk_1005550F0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  *(_QWORD *)(v3 + 192) = PassthroughSubject.init()(v8);
  v9 = sub_10003F544((uint64_t *)&unk_100555110);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  *(_QWORD *)(v3 + 200) = CurrentValueSubject.init(_:)(v10);
  *(_QWORD *)(v3 + 16) = a2;
  v11 = a3[1];
  *(_OWORD *)(v3 + 24) = *a3;
  *(_OWORD *)(v3 + 40) = v11;
  *(_OWORD *)(v3 + 56) = a3[2];
  v12 = sub_10003F544((uint64_t *)&unk_100555120);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v19, v12, v12);
  sub_10002099C(v19, v4 + 72);
  v13 = sub_10003F544(&qword_1005609B0);
  BaseObjectGraph.inject<A>(_:)(v19, v13, v13);
  *(_OWORD *)(v4 + 112) = v19[0];
  v14 = sub_10003F544(&qword_100553720);
  BaseObjectGraph.inject<A>(_:)(v19, v14, v14);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)&v19[0];
  v15 = sub_10003F544((uint64_t *)&unk_1005588D0);
  BaseObjectGraph.inject<A>(_:)(v19, v15, v15);
  v16 = sub_10002099C(v19, v4 + 152);
  *(_QWORD *)(v4 + 136) = StationDetail.uuid.getter(v16);
  *(_QWORD *)(v4 + 144) = v17;
  return v4;
}

_QWORD *sub_10034B264()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t EpisodeContextAction;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t PodcastContextAction;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  _QWORD *v168;
  void (*v169)(uint64_t, uint64_t, uint64_t);
  __int128 v170[2];
  __int128 v171;
  uint64_t v172;
  _UNKNOWN **v173;
  Swift::String v174;
  Swift::String v175;
  Swift::String v176;
  Swift::String v177;

  v1 = v0;
  v158 = *v0;
  v2 = sub_10003F544((uint64_t *)&unk_100565930);
  v3 = (_QWORD *)swift_allocObject(v2, 624, 7);
  *((_OWORD *)v3 + 1) = xmmword_1003D6820;
  v161 = (uint64_t)(v0 + 15);
  sub_10000A520((uint64_t)(v0 + 15), (uint64_t)&v171);
  v4 = v0[21];
  v5 = type metadata accessor for PlayEpisodeContextAction(0);
  v6 = (_QWORD *)swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6[2] = 0;
  v6[3] = 0;
  v7 = (char *)v6 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state;
  v8 = type metadata accessor for EpisodePlayState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  sub_10002099C(&v171, (uint64_t)(v6 + 4));
  v6[9] = v4;
  v3[4] = v6;
  v3[5] = &off_1004B89D0;
  v9 = type metadata accessor for OpenEpisodeContextAction(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  v11 = v10 + OBJC_IVAR____TtC8Podcasts24OpenEpisodeContextAction_metricsLabel;
  v12 = enum case for MetricsLabel.select(_:);
  v163 = enum case for MetricsLabel.select(_:);
  v13 = type metadata accessor for MetricsLabel(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104);
  v14(v11, v12, v13);
  v3[6] = v10;
  v3[7] = &off_1004B5658;
  v15 = (uint64_t)(v0 + 4);
  sub_10000A520((uint64_t)(v0 + 4), (uint64_t)&v171);
  v16 = v0[3];
  v17 = (uint64_t)(v0 + 23);
  sub_10000A520(v17, (uint64_t)v170);
  v18 = type metadata accessor for DownloadEpisodeContextAction(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_BYTE *)(v19 + 128) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  v14(v19 + OBJC_IVAR____TtC8Podcasts28DownloadEpisodeContextAction_metricsLabel, enum case for MetricsLabel.downloadEpisode(_:), v13);
  sub_10002099C(&v171, v19 + 40);
  *(_QWORD *)(v19 + 80) = v16;
  v164 = v16;
  sub_10034E0E0((uint64_t)v170, v19 + 88);
  v3[8] = v19;
  v3[9] = &off_1004B37E8;
  v20 = v1[22];
  v168 = v1;
  v165 = v20;
  sub_10000A520(v15, (uint64_t)&v171);
  v21 = type metadata accessor for RemoveDownloadContextAction(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_OWORD *)(v22 + 72) = 0u;
  *(_OWORD *)(v22 + 88) = 0u;
  v14(v22 + OBJC_IVAR____TtC8Podcasts27RemoveDownloadContextAction_metricsLabel, enum case for MetricsLabel.removeDownload(_:), v13);
  *(_QWORD *)(v22 + 64) = v20;
  *(_QWORD *)(v22 + 16) = v16;
  sub_10002099C(&v171, v22 + 24);
  v3[10] = v22;
  v3[11] = &off_1004B88B0;
  v23 = v1[28];
  EpisodeContextAction = type metadata accessor for PlayNextEpisodeContextAction(0);
  v25 = (_QWORD *)swift_allocObject(EpisodeContextAction, *(unsigned int *)(EpisodeContextAction + 48), *(unsigned __int16 *)(EpisodeContextAction + 52));
  v25[3] = 0;
  v25[4] = 0;
  v169 = v14;
  v14((uint64_t)v25 + OBJC_IVAR____TtC8Podcasts28PlayNextEpisodeContextAction_metricsLabel, enum case for MetricsLabel.playEpisodeNext(_:), v13);
  v25[2] = v23;
  v3[12] = v25;
  v3[13] = &off_1004B1528;
  v26 = type metadata accessor for AddToQueueEpisodeContextAction(0);
  v27 = (_QWORD *)swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27[3] = 0;
  v27[4] = 0;
  v14((uint64_t)v27 + OBJC_IVAR____TtC8Podcasts30AddToQueueEpisodeContextAction_metricsLabel, enum case for MetricsLabel.addToQueueEpisode(_:), v13);
  v27[2] = v23;
  v28 = v23;
  v3[14] = v27;
  v3[15] = &off_1004BA180;
  v29 = type metadata accessor for RemoveFromQueueContextAction();
  v30 = swift_allocObject(v29, 72, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_OWORD *)(v30 + 48) = xmmword_1003CC5B0;
  *(_QWORD *)(v30 + 64) = 0;
  *(_BYTE *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 40) = v23;
  v3[16] = v30;
  v3[17] = &off_1004B9F58;
  v31 = swift_allocObject(v29, 72, 7);
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = 0;
  *(_OWORD *)(v31 + 48) = xmmword_1003CC5B0;
  *(_QWORD *)(v31 + 64) = 0;
  *(_BYTE *)(v31 + 32) = 1;
  *(_QWORD *)(v31 + 40) = v23;
  v3[18] = v31;
  v3[19] = &off_1004B9F58;
  v32 = v15;
  v159 = v15;
  sub_10000A520(v15, (uint64_t)&v171);
  sub_10000A520(v17, (uint64_t)v170);
  v33 = type metadata accessor for MarkEpisodeContextAction();
  v34 = swift_allocObject(v33, 144, 7);
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 136) = 1;
  *(_BYTE *)(v34 + 32) = 0;
  *(_QWORD *)(v34 + 40) = v4;
  sub_10002099C(&v171, v34 + 48);
  sub_10002099C(v170, v34 + 88);
  *(_QWORD *)(v34 + 128) = v28;
  v3[20] = v34;
  v3[21] = &off_1004B1910;
  sub_10000A520(v32, (uint64_t)&v171);
  sub_10000A520(v17, (uint64_t)v170);
  v35 = swift_allocObject(v33, 144, 7);
  *(_QWORD *)(v35 + 16) = 0;
  *(_QWORD *)(v35 + 24) = 0;
  *(_QWORD *)(v35 + 136) = 1;
  *(_BYTE *)(v35 + 32) = 1;
  *(_QWORD *)(v35 + 40) = v4;
  sub_10002099C(&v171, v35 + 48);
  sub_10002099C(v170, v35 + 88);
  *(_QWORD *)(v35 + 128) = v28;
  v36 = v28;
  v37 = v13;
  v3[22] = v35;
  v3[23] = &off_1004B1910;
  v38 = type metadata accessor for CopyLinkEpisodeContextAction(0);
  v39 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  *(_QWORD *)(v39 + 24) = 0;
  *(_QWORD *)(v39 + 32) = 0;
  *(_QWORD *)(v39 + 16) = 0;
  *(_BYTE *)(v39 + 40) = 1;
  *(_QWORD *)(v39 + 48) = 0;
  *(_BYTE *)(v39 + 56) = 1;
  *(_OWORD *)(v39 + 64) = xmmword_1003D6830;
  *(_QWORD *)(v39 + 80) = 0xE400000000000000;
  v169(v39 + OBJC_IVAR____TtC8Podcasts28CopyLinkEpisodeContextAction_metricsLabel, enum case for MetricsLabel.copyLinkEpisode(_:), v13);
  v40 = v39 + OBJC_IVAR____TtC8Podcasts28CopyLinkEpisodeContextAction_shareLink;
  v41 = type metadata accessor for URL(0);
  v166 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
  v167 = v41;
  v166(v40, 1, 1, v41);
  v3[24] = v39;
  v3[25] = &off_1004B35F0;
  sub_10000A520(v161, (uint64_t)&v171);
  v42 = type metadata accessor for GoToEpisodeContextAction(0);
  v43 = swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  *(_QWORD *)(v43 + 56) = 0;
  *(_QWORD *)(v43 + 64) = 0;
  v162 = (id)objc_opt_self(NSBundle);
  swift_retain_n(v36, 6);
  swift_retain_n(v4, 3);
  swift_retain_n(v16, 2);
  v44 = objc_msgSend(v162, "mainBundle", swift_retain().n128_f64[0]);
  v174._countAndFlagsBits = 0xD00000000000001CLL;
  v174._object = (void *)0x800000010043F410;
  v45._countAndFlagsBits = 0x50455F4F545F4F47;
  v45._object = (void *)0xED000045444F5349;
  v46._countAndFlagsBits = 0;
  v46._object = (void *)0xE000000000000000;
  v47 = NSLocalizedString(_:tableName:bundle:value:comment:)(v45, (Swift::String_optional)0, (NSBundle)v44, v46, v174);

  *(Swift::String *)(v43 + 72) = v47;
  *(_OWORD *)(v43 + 88) = xmmword_1003D6840;
  *(_QWORD *)(v43 + 104) = 0xEB00000000657261;
  v48 = enum case for MetricsLabel.navigate(_:);
  v169(v43 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_metricsLabel, enum case for MetricsLabel.navigate(_:), v13);
  *(_BYTE *)(v43 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_contextActionType) = 5;
  sub_10002099C(&v171, v43 + 16);
  v3[26] = v43;
  v3[27] = &off_1004B8AC8;
  sub_10000A520(v161, (uint64_t)&v171);
  v49 = type metadata accessor for EpisodePresentPodcastContextAction(0);
  v50 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  *(_QWORD *)(v50 + 16) = 0;
  *(_QWORD *)(v50 + 24) = 0;
  v169(v50 + OBJC_IVAR____TtC8Podcasts34EpisodePresentPodcastContextAction_metricsLabel, v163, v13);
  sub_10002099C(&v171, v50 + 32);
  v3[28] = v50;
  v3[29] = &off_1004C6AB0;
  v51 = type metadata accessor for ViewTranscriptContextAction(0);
  v52 = swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  *(_QWORD *)(v52 + 16) = 0;
  *(_QWORD *)(v52 + 24) = 0;
  v53 = v52 + OBJC_IVAR____TtC8Podcasts27ViewTranscriptContextAction_transcriptInfo;
  v54 = type metadata accessor for TranscriptRequestInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 1, 1, v54);
  v3[30] = v52;
  v3[31] = &off_1004BCD90;
  sub_10000A520(v159, (uint64_t)&v171);
  v55 = v168[14];
  v56 = type metadata accessor for SubscribeEpisodeContextAction();
  v57 = (_QWORD *)swift_allocObject(v56, 80, 7);
  v57[8] = 0;
  v57[9] = 0;
  sub_10002099C(&v171, (uint64_t)(v57 + 2));
  v57[7] = v55;
  v3[32] = v57;
  v3[33] = &off_1004B3B08;
  sub_10000A520(v159, (uint64_t)&v171);
  v58 = type metadata accessor for SubscribePodcastContextAction(0);
  v59 = (_QWORD *)swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  v59[2] = 0;
  v59[3] = 0;
  v169((uint64_t)v59 + OBJC_IVAR____TtC8Podcasts29SubscribePodcastContextAction_metricsLabel, enum case for MetricsLabel.subscribe(_:), v13);
  sub_10002099C(&v171, (uint64_t)(v59 + 4));
  v59[9] = v55;
  v3[34] = v59;
  v3[35] = &off_1004B9998;
  sub_10000A520(v159, (uint64_t)&v171);
  sub_10000A520((uint64_t)(v168 + 9), (uint64_t)v170);
  v60 = type metadata accessor for UnsubscribePodcastContextAction(0);
  v61 = (_QWORD *)swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
  v61[2] = 0;
  v61[3] = 0;
  v169((uint64_t)v61 + OBJC_IVAR____TtC8Podcasts31UnsubscribePodcastContextAction_metricsLabel, enum case for MetricsLabel.unsubscribe(_:), v13);
  sub_10002099C(&v171, (uint64_t)(v61 + 4));
  v61[9] = v55;
  v160 = v55;
  sub_10002099C(v170, (uint64_t)(v61 + 10));
  v3[36] = v61;
  v3[37] = &off_1004B0578;
  sub_10000A520(v159, (uint64_t)&v171);
  v62 = type metadata accessor for RefollowPodcastContextAction(0);
  v63 = swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
  *(_QWORD *)(v63 + 16) = 0;
  *(_QWORD *)(v63 + 24) = 0;
  v169(v63 + OBJC_IVAR____TtC8Podcasts28RefollowPodcastContextAction_metricsLabel, enum case for MetricsLabel.refollow(_:), v13);
  sub_10002099C(&v171, v63 + 32);
  v3[38] = v63;
  v3[39] = &off_1004B07C8;
  sub_10000A520(v159, (uint64_t)&v171);
  v64 = type metadata accessor for DeleteRecentlyUnfollowedPodcastContextAction(0);
  v65 = swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
  *(_QWORD *)(v65 + 56) = 0;
  *(_QWORD *)(v65 + 64) = 0;
  *(_OWORD *)(v65 + 72) = xmmword_1003D6850;
  *(_QWORD *)(v65 + 88) = 0xE500000000000000;
  v169(v65 + OBJC_IVAR____TtC8Podcasts44DeleteRecentlyUnfollowedPodcastContextAction_metricsLabel, enum case for MetricsLabel.deleteShow(_:), v13);
  *(_BYTE *)(v65 + OBJC_IVAR____TtC8Podcasts44DeleteRecentlyUnfollowedPodcastContextAction_contextActionType) = 31;
  sub_10002099C(&v171, v65 + 16);
  v3[40] = v65;
  v3[41] = &off_1004C6998;
  sub_10000A520(v161, (uint64_t)&v171);
  v66 = type metadata accessor for GoToShowPodcastContextAction(0);
  v67 = swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  *(_QWORD *)(v67 + 16) = 0;
  *(_QWORD *)(v67 + 24) = 0;
  v169(v67 + OBJC_IVAR____TtC8Podcasts28GoToShowPodcastContextAction_metricsLabel, v48, v13);
  sub_10002099C(&v171, v67 + 32);
  v3[42] = v67;
  v3[43] = &off_1004B34F8;
  v68 = type metadata accessor for SettingsPodcastContextAction(0);
  v69 = swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
  *(_QWORD *)(v69 + 16) = 0;
  *(_QWORD *)(v69 + 24) = 0;
  v169(v69 + OBJC_IVAR____TtC8Podcasts28SettingsPodcastContextAction_metricsLabel, enum case for MetricsLabel.settingsPodcast(_:), v13);
  v3[44] = v69;
  v3[45] = &off_1004C6028;
  PodcastContextAction = type metadata accessor for PlayNextPodcastContextAction(0);
  v71 = (_QWORD *)swift_allocObject(PodcastContextAction, *(unsigned int *)(PodcastContextAction + 48), *(unsigned __int16 *)(PodcastContextAction + 52));
  v71[3] = 0;
  v71[4] = 0;
  v169((uint64_t)v71 + OBJC_IVAR____TtC8Podcasts28PlayNextPodcastContextAction_metricsLabel, enum case for MetricsLabel.playPodcastNext(_:), v13);
  v71[2] = v36;
  v3[46] = v71;
  v3[47] = &off_1004BE268;
  v72 = type metadata accessor for AddToQueuePodcastContextAction(0);
  v73 = (_QWORD *)swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
  v73[3] = 0;
  v73[4] = 0;
  v169((uint64_t)v73 + OBJC_IVAR____TtC8Podcasts30AddToQueuePodcastContextAction_metricsLabel, enum case for MetricsLabel.addToQueuePodcast(_:), v13);
  v73[2] = v36;
  v3[48] = v73;
  v3[49] = &off_1004B45C8;
  v74 = type metadata accessor for CopyLinkPodcastContextAction(0);
  v75 = swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  *(_QWORD *)(v75 + 16) = 0;
  *(_QWORD *)(v75 + 24) = 0;
  *(_QWORD *)(v75 + 32) = 0;
  *(_OWORD *)(v75 + 40) = xmmword_1003D6860;
  v169(v75 + OBJC_IVAR____TtC8Podcasts28CopyLinkPodcastContextAction_metricsLabel, enum case for MetricsLabel.copyLinkPodcast(_:), v13);
  v166(v75 + OBJC_IVAR____TtC8Podcasts28CopyLinkPodcastContextAction_shareLink, 1, 1, v167);
  v3[50] = v75;
  v3[51] = &off_1004C0608;
  v76 = type metadata accessor for ReportPodcastContextAction(0);
  v77 = (_QWORD *)swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
  v77[2] = 0;
  v77[3] = 0;
  v77[4] = 0;
  v169((uint64_t)v77 + OBJC_IVAR____TtC8Podcasts26ReportPodcastContextAction_metricsLabel, enum case for MetricsLabel.reportPodcast(_:), v13);
  v3[52] = v77;
  v3[53] = &off_1004B9C50;
  sub_10000A520(v159, (uint64_t)&v171);
  v78 = type metadata accessor for MarkAllAsPlayedContextAction(0);
  v79 = swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
  *(_QWORD *)(v79 + 56) = 0;
  *(_QWORD *)(v79 + 64) = 0;
  *(_BYTE *)(v79 + 72) = 0;
  swift_retain_n(v55, 3);
  swift_retain_n(v36, 2);
  v80 = objc_msgSend(v162, "mainBundle");
  v81._countAndFlagsBits = 0xD000000000000012;
  v175._object = (void *)0xE000000000000000;
  v81._object = (void *)0x800000010043F430;
  v82._countAndFlagsBits = 0;
  v82._object = (void *)0xE000000000000000;
  v175._countAndFlagsBits = 0;
  v83 = NSLocalizedString(_:tableName:bundle:value:comment:)(v81, (Swift::String_optional)0, (NSBundle)v80, v82, v175);

  *(Swift::String *)(v79 + 80) = v83;
  *(_OWORD *)(v79 + 96) = xmmword_1003D6870;
  *(_QWORD *)(v79 + 112) = 0x80000001004316C0;
  v169(v79 + OBJC_IVAR____TtC8Podcasts28MarkAllAsPlayedContextAction_metricsLabel, enum case for MetricsLabel.markAllEpisodesAsPlayed(_:), v13);
  *(_BYTE *)(v79 + OBJC_IVAR____TtC8Podcasts28MarkAllAsPlayedContextAction_contextActionType) = 29;
  sub_10002099C(&v171, v79 + 16);
  v3[54] = v79;
  v3[55] = &off_1004C2828;
  v84 = v168[20];
  v85 = type metadata accessor for BookmarkEpisodeContextAction(0);
  v86 = swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
  *(_QWORD *)(v86 + 16) = 0;
  *(_QWORD *)(v86 + 24) = 0;
  *(_QWORD *)(v86 + 32) = 0;
  *(_OWORD *)(v86 + 40) = xmmword_1003CBA40;
  v169(v86 + OBJC_IVAR____TtC8Podcasts28BookmarkEpisodeContextAction_metricsLabel, enum case for MetricsLabel.bookmarkEpisode(_:), v13);
  *(_BYTE *)(v86 + OBJC_IVAR____TtC8Podcasts28BookmarkEpisodeContextAction_contextActionType) = 10;
  *(_QWORD *)(v86 + OBJC_IVAR____TtC8Podcasts28BookmarkEpisodeContextAction_bookmarksController) = v84;
  v3[56] = v86;
  v3[57] = &off_1004B1BB0;
  v87 = type metadata accessor for RemoveEpisodeFromBookmarksContextAction(0);
  v88 = swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
  *(_QWORD *)(v88 + 16) = 0;
  *(_QWORD *)(v88 + 24) = 0;
  swift_retain_n(v84, 2);
  v89 = objc_msgSend(v162, "mainBundle");
  v176._object = (void *)0xEE0065646F736970;
  v90._countAndFlagsBits = 0x455F455641534E55;
  v90._object = (void *)0xEE0045444F534950;
  v91._countAndFlagsBits = 0;
  v91._object = (void *)0xE000000000000000;
  v176._countAndFlagsBits = 0x4520657661736E55;
  v92 = NSLocalizedString(_:tableName:bundle:value:comment:)(v90, (Swift::String_optional)0, (NSBundle)v89, v91, v176);

  *(Swift::String *)(v88 + 32) = v92;
  *(_OWORD *)(v88 + 48) = xmmword_1003D6880;
  *(_QWORD *)(v88 + 64) = 0xEE006873616C732ELL;
  v169(v88 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_metricsLabel, enum case for MetricsLabel.removeEpisodeFromBookmarks(_:), v13);
  *(_BYTE *)(v88 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_contextActionType) = 11;
  *(_QWORD *)(v88 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_bookmarksController) = v84;
  v3[58] = v88;
  v3[59] = &off_1004B8530;
  v93 = type metadata accessor for DeleteStationShowContextAction(0);
  v94 = swift_allocObject(v93, *(unsigned int *)(v93 + 48), *(unsigned __int16 *)(v93 + 52));
  v95 = v94 + OBJC_IVAR____TtC8Podcasts30DeleteStationShowContextAction_stationShowData;
  v96 = type metadata accessor for StationShowContextActionData(0);
  v97 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56);
  v97(v95, 1, 1, v96);
  *(_QWORD *)(v94 + OBJC_IVAR____TtC8Podcasts30DeleteStationShowContextAction_configuration) = 0;
  v169(v94 + OBJC_IVAR____TtC8Podcasts30DeleteStationShowContextAction_metricsLabel, enum case for MetricsLabel.deleteStationShow(_:), v13);
  v3[60] = v94;
  v3[61] = &off_1004BBCD8;
  v98 = type metadata accessor for AddToQueueStationShowContextAction(0);
  v99 = swift_allocObject(v98, *(unsigned int *)(v98 + 48), *(unsigned __int16 *)(v98 + 52));
  v97(v99 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_stationShowData, 1, 1, v96);
  *(_QWORD *)(v99 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_configuration) = 0;
  v169(v99 + OBJC_IVAR____TtC8Podcasts34AddToQueueStationShowContextAction_metricsLabel, enum case for MetricsLabel.addToQueueStationShow(_:), v13);
  v3[62] = v99;
  v3[63] = &off_1004C4258;
  v100 = type metadata accessor for CopyLinkOtherContextAction(0);
  v101 = swift_allocObject(v100, *(unsigned int *)(v100 + 48), *(unsigned __int16 *)(v100 + 52));
  *(_QWORD *)(v101 + 16) = 0;
  v166(v101 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_link, 1, 1, v167);
  *(_QWORD *)(v101 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_attributes) = 0;
  *(_OWORD *)(v101 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_systemImageName) = xmmword_1003D6860;
  v169(v101 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_metricsLabel, enum case for MetricsLabel.copyLinkOther(_:), v13);
  *(_BYTE *)(v101 + OBJC_IVAR____TtC8Podcasts26CopyLinkOtherContextAction_contextActionType) = 42;
  v3[64] = v101;
  v3[65] = &off_1004C11B0;
  sub_10000A520(v159, (uint64_t)&v171);
  sub_10000A520((uint64_t)(v168 + 9), (uint64_t)v170);
  v102 = type metadata accessor for RemoveAllDownloadsFromShowContextAction(0);
  v103 = swift_allocObject(v102, *(unsigned int *)(v102 + 48), *(unsigned __int16 *)(v102 + 52));
  *(_QWORD *)(v103 + 104) = 0;
  *(_QWORD *)(v103 + 112) = 0;
  v104 = objc_msgSend(v162, "mainBundle", swift_retain().n128_f64[0]);
  v177._object = (void *)0x800000010043F470;
  v105._object = (void *)0x800000010043F450;
  v105._countAndFlagsBits = 0xD000000000000010;
  v106._countAndFlagsBits = 0;
  v106._object = (void *)0xE000000000000000;
  v177._countAndFlagsBits = 0xD000000000000010;
  v107 = NSLocalizedString(_:tableName:bundle:value:comment:)(v105, (Swift::String_optional)0, (NSBundle)v104, v106, v177);

  *(Swift::String *)(v103 + 120) = v107;
  *(_OWORD *)(v103 + 136) = xmmword_1003D6850;
  *(_QWORD *)(v103 + 152) = 0xE500000000000000;
  v169(v103 + OBJC_IVAR____TtC8Podcasts39RemoveAllDownloadsFromShowContextAction_metricsLabel, enum case for MetricsLabel.removeAllDownloadsFromShow(_:), v13);
  *(_BYTE *)(v103 + OBJC_IVAR____TtC8Podcasts39RemoveAllDownloadsFromShowContextAction_contextActionType) = 20;
  sub_10002099C(&v171, v103 + 16);
  sub_10002099C(v170, v103 + 56);
  *(_QWORD *)(v103 + 96) = v160;
  v3[66] = v103;
  v3[67] = &off_1004B1E28;
  sub_10000A520((uint64_t)(v168 + 9), (uint64_t)&v171);
  sub_10000A520(v159, (uint64_t)v170);
  v108 = type metadata accessor for RemovePodcastContextAction(0);
  v109 = swift_allocObject(v108, *(unsigned int *)(v108 + 48), *(unsigned __int16 *)(v108 + 52));
  *(_QWORD *)(v109 + 96) = 0;
  *(_QWORD *)(v109 + 104) = 0;
  *(_OWORD *)(v109 + 112) = xmmword_1003D6850;
  *(_QWORD *)(v109 + 128) = 0xE500000000000000;
  v169(v109 + OBJC_IVAR____TtC8Podcasts26RemovePodcastContextAction_metricsLabel, enum case for MetricsLabel.removeShowFromLibrary(_:), v13);
  *(_BYTE *)(v109 + OBJC_IVAR____TtC8Podcasts26RemovePodcastContextAction_contextActionType) = 21;
  sub_10002099C(&v171, v109 + 16);
  sub_10002099C(v170, v109 + 56);
  v3[68] = v109;
  v3[69] = &off_1004BA088;
  sub_10000A520(v159, (uint64_t)&v171);
  v110 = type metadata accessor for HidePlayedEpisodesPodcastContextAction(0);
  v111 = swift_allocObject(v110, *(unsigned int *)(v110 + 48), *(unsigned __int16 *)(v110 + 52));
  *(_QWORD *)(v111 + 56) = 0;
  *(_QWORD *)(v111 + 64) = 0;
  *(_WORD *)(v111 + 72) = 0;
  *(_BYTE *)(v111 + 74) = 25;
  *(_OWORD *)(v111 + 80) = xmmword_1003D6890;
  *(_QWORD *)(v111 + 96) = 0xE900000000000068;
  v169(v111 + OBJC_IVAR____TtC8Podcasts38HidePlayedEpisodesPodcastContextAction_metricsLabel, enum case for MetricsLabel.hidePlayedEpisodes(_:), v13);
  sub_10002099C(&v171, v111 + 16);
  v3[70] = v111;
  v3[71] = &off_1004C2940;
  sub_10000A520(v159, (uint64_t)&v171);
  v112 = type metadata accessor for RemoveFromLibraryEpisodeContextAction(0);
  swift_allocObject(v112, *(unsigned int *)(v112 + 48), *(unsigned __int16 *)(v112 + 52));
  v3[72] = sub_1002BF354(&v171);
  v3[73] = &off_1004BD910;
  sub_10000A520(v159, (uint64_t)&v171);
  v113 = type metadata accessor for RemoveFromUpNextEpisodeContextAction(0);
  swift_allocObject(v113, *(unsigned int *)(v113 + 48), *(unsigned __int16 *)(v113 + 52));
  v3[74] = sub_100247320(&v171);
  v3[75] = &off_1004B81F8;
  sub_10000A520(v159, (uint64_t)&v171);
  v114 = type metadata accessor for RemoveFromStationContextAction();
  v115 = (_QWORD *)swift_allocObject(v114, 96, 7);
  v115[10] = 0;
  v115[11] = 0;
  v115[9] = v165;
  v115[2] = 0;
  v115[3] = v164;
  sub_10002099C(&v171, (uint64_t)(v115 + 4));
  v3[76] = v115;
  v3[77] = &off_1004B2C50;
  v116 = type metadata accessor for Podcasts(0);
  v172 = v116;
  v173 = (_UNKNOWN **)sub_1001E04E4();
  v117 = sub_1000242A8(&v171);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v116 - 8) + 104))(v117, enum case for Podcasts.ponderosa(_:), v116);
  swift_retain();
  swift_retain();
  LOBYTE(v116) = isFeatureEnabled(_:)(&v171);
  sub_10003D380(&v171);
  if ((v116 & 1) != 0)
  {
    v118 = type metadata accessor for FavoriteContextAction(0);
    v119 = swift_allocObject(v118, *(unsigned int *)(v118 + 48), *(unsigned __int16 *)(v118 + 52));
    *(_OWORD *)(v119 + 16) = xmmword_1003D68A0;
    *(_QWORD *)(v119 + 32) = 0xE400000000000000;
    v169(v119 + OBJC_IVAR____TtC8Podcasts21FavoriteContextAction_metricsLabel, enum case for MetricsLabel.favorite(_:), v37);
    *(_BYTE *)(v119 + OBJC_IVAR____TtC8Podcasts21FavoriteContextAction_contextActionType) = 32;
    v120 = v119 + OBJC_IVAR____TtC8Podcasts21FavoriteContextAction_adamID;
    *(_QWORD *)v120 = 0;
    *(_BYTE *)(v120 + 8) = 1;
    *(_BYTE *)(v119 + OBJC_IVAR____TtC8Podcasts21FavoriteContextAction_interestState) = 4;
    *(_QWORD *)(v119 + OBJC_IVAR____TtC8Podcasts21FavoriteContextAction_configuration) = 0;
    v121 = type metadata accessor for InterestRepository(0);
    swift_retain();
    BaseObjectGraph.inject<A>(_:)(&v171, v121, v121);
    *(_QWORD *)(v119 + OBJC_IVAR____TtC8Podcasts21FavoriteContextAction_interestRepository) = v171;
    v122 = type metadata accessor for InterestStateController(0);
    BaseObjectGraph.inject<A>(_:)(&v171, v122, v122);
    swift_release(v165);
    *(_QWORD *)(v119 + OBJC_IVAR____TtC8Podcasts21FavoriteContextAction_interestStateController) = v171;
    v124 = v3[2];
    v123 = v3[3];
    if (v124 >= v123 >> 1)
      v3 = sub_10027C0C8((_QWORD *)(v123 > 1), v124 + 1, 1, v3);
    v3[2] = v124 + 1;
    v125 = &v3[2 * v124];
    v125[4] = v119;
    v125[5] = &off_1004BAC88;
    v126 = type metadata accessor for UndoFavoriteContextAction(0);
    v127 = swift_allocObject(v126, *(unsigned int *)(v126 + 48), *(unsigned __int16 *)(v126 + 52));
    *(_OWORD *)(v127 + 16) = xmmword_1003D68B0;
    *(_QWORD *)(v127 + 32) = 0xEA00000000006873;
    v169(v127 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_metricsLabel, enum case for MetricsLabel.undoFavorite(_:), v37);
    *(_BYTE *)(v127 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_contextActionType) = 33;
    v128 = v127 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_adamID;
    *(_QWORD *)v128 = 0;
    *(_BYTE *)(v128 + 8) = 1;
    *(_BYTE *)(v127 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_interestState) = 4;
    *(_QWORD *)(v127 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_configuration) = 0;
    swift_retain();
    BaseObjectGraph.inject<A>(_:)(&v171, v121, v121);
    *(_QWORD *)(v127 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_interestRepository) = v171;
    BaseObjectGraph.inject<A>(_:)(&v171, v122, v122);
    swift_release(v165);
    *(_QWORD *)(v127 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_interestStateController) = v171;
    v130 = v3[2];
    v129 = v3[3];
    if (v130 >= v129 >> 1)
      v3 = sub_10027C0C8((_QWORD *)(v129 > 1), v130 + 1, 1, v3);
    v3[2] = v130 + 1;
    v131 = &v3[2 * v130];
    v131[4] = v127;
    v131[5] = &off_1004C2E58;
    v132 = type metadata accessor for FavoriteCategoriesContextAction(0);
    v133 = swift_allocObject(v132, *(unsigned int *)(v132 + 48), *(unsigned __int16 *)(v132 + 52));
    *(_OWORD *)(v133 + 16) = xmmword_1003D68C0;
    *(_QWORD *)(v133 + 32) = 0xEB0000000074656CLL;
    v169(v133 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_metricsLabel, enum case for MetricsLabel.favoriteCategories(_:), v37);
    *(_BYTE *)(v133 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_contextActionType) = 34;
    *(_QWORD *)(v133 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration) = 0;
    v135 = v3[2];
    v134 = v3[3];
    if (v135 >= v134 >> 1)
      v3 = sub_10027C0C8((_QWORD *)(v134 > 1), v135 + 1, 1, v3);
    v3[2] = v135 + 1;
    v136 = &v3[2 * v135];
    v136[4] = v133;
    v136[5] = &off_1004B9688;
    v172 = v158;
    v173 = &off_1004C4928;
    *(_QWORD *)&v171 = v168;
    v137 = type metadata accessor for ShareCategoryContextAction(0);
    v138 = swift_allocObject(v137, *(unsigned int *)(v137 + 48), *(unsigned __int16 *)(v137 + 52));
    v139 = sub_10003F544(&qword_10055E200);
    swift_retain();
    swift_retain();
    BaseObjectGraph.inject<A>(_:)(v170, v139, v139);
    *(_QWORD *)(v138 + OBJC_IVAR____TtC8Podcasts26ShareCategoryContextAction_managedContextProvider) = *(_QWORD *)&v170[0];
    sub_10000A520((uint64_t)&v171, (uint64_t)v170);
    *(_QWORD *)(v138 + 16) = 0;
    v166(v138 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_link, 1, 1, v167);
    v140 = (_QWORD *)(v138 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_shareTitle);
    *v140 = 0;
    v140[1] = 0;
    *(_QWORD *)(v138 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_attributes) = 0;
    v141 = (_QWORD *)(v138 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_systemImageName);
    *v141 = 0xD000000000000013;
    v141[1] = 0x80000001004359B0;
    v169(v138 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_metricsLabel, enum case for MetricsLabel.shareOther(_:), v37);
    *(_BYTE *)(v138 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_contextActionType) = 39;
    sub_10002099C(v170, v138 + 24);
    swift_release(v165);
    sub_10003D380(&v171);
    v143 = v3[2];
    v142 = v3[3];
    if (v143 >= v142 >> 1)
      v3 = sub_10027C0C8((_QWORD *)(v142 > 1), v143 + 1, 1, v3);
    v3[2] = v143 + 1;
    v144 = &v3[2 * v143];
    v144[4] = v138;
    v144[5] = &off_1004C0720;
    v145 = type metadata accessor for SuggestLessContextAction(0);
    v146 = swift_allocObject(v145, *(unsigned int *)(v145 + 48), *(unsigned __int16 *)(v145 + 52));
    *(_OWORD *)(v146 + 16) = xmmword_1003D68D0;
    *(_QWORD *)(v146 + 32) = 0xEF6E776F6473626DLL;
    v169(v146 + OBJC_IVAR____TtC8Podcasts24SuggestLessContextAction_metricsLabel, enum case for MetricsLabel.suggestLess(_:), v37);
    *(_BYTE *)(v146 + OBJC_IVAR____TtC8Podcasts24SuggestLessContextAction_contextActionType) = 35;
    v147 = v146 + OBJC_IVAR____TtC8Podcasts24SuggestLessContextAction_adamID;
    *(_QWORD *)v147 = 0;
    *(_BYTE *)(v147 + 8) = 1;
    *(_BYTE *)(v146 + OBJC_IVAR____TtC8Podcasts24SuggestLessContextAction_interestState) = 4;
    *(_QWORD *)(v146 + OBJC_IVAR____TtC8Podcasts24SuggestLessContextAction_configuration) = 0;
    swift_retain();
    BaseObjectGraph.inject<A>(_:)(&v171, v121, v121);
    *(_QWORD *)(v146 + OBJC_IVAR____TtC8Podcasts24SuggestLessContextAction_interestRepository) = v171;
    BaseObjectGraph.inject<A>(_:)(&v171, v122, v122);
    swift_release(v165);
    *(_QWORD *)(v146 + OBJC_IVAR____TtC8Podcasts24SuggestLessContextAction_interestStateController) = v171;
    v149 = v3[2];
    v148 = v3[3];
    if (v149 >= v148 >> 1)
      v3 = sub_10027C0C8((_QWORD *)(v148 > 1), v149 + 1, 1, v3);
    v3[2] = v149 + 1;
    v150 = &v3[2 * v149];
    v150[4] = v146;
    v150[5] = &off_1004BBB08;
    v151 = type metadata accessor for UndoSuggestLessContextAction(0);
    v152 = swift_allocObject(v151, *(unsigned int *)(v151 + 48), *(unsigned __int16 *)(v151 + 52));
    *(_OWORD *)(v152 + 16) = xmmword_1003D68D0;
    *(_QWORD *)(v152 + 32) = 0xEF6E776F6473626DLL;
    v169(v152 + OBJC_IVAR____TtC8Podcasts28UndoSuggestLessContextAction_metricsLabel, enum case for MetricsLabel.undoSuggestLess(_:), v37);
    *(_BYTE *)(v152 + OBJC_IVAR____TtC8Podcasts28UndoSuggestLessContextAction_contextActionType) = 36;
    v153 = v152 + OBJC_IVAR____TtC8Podcasts28UndoSuggestLessContextAction_adamID;
    *(_QWORD *)v153 = 0;
    *(_BYTE *)(v153 + 8) = 1;
    *(_BYTE *)(v152 + OBJC_IVAR____TtC8Podcasts28UndoSuggestLessContextAction_interestState) = 4;
    *(_QWORD *)(v152 + OBJC_IVAR____TtC8Podcasts28UndoSuggestLessContextAction_configuration) = 0;
    swift_retain();
    BaseObjectGraph.inject<A>(_:)(&v171, v121, v121);
    *(_QWORD *)(v152 + OBJC_IVAR____TtC8Podcasts28UndoSuggestLessContextAction_interestRepository) = v171;
    BaseObjectGraph.inject<A>(_:)(&v171, v122, v122);
    swift_release(v165);
    *(_QWORD *)(v152 + OBJC_IVAR____TtC8Podcasts28UndoSuggestLessContextAction_interestStateController) = v171;
    v155 = v3[2];
    v154 = v3[3];
    if (v155 >= v154 >> 1)
      v3 = sub_10027C0C8((_QWORD *)(v154 > 1), v155 + 1, 1, v3);
    v3[2] = v155 + 1;
    v156 = &v3[2 * v155];
    v156[4] = v152;
    v156[5] = &off_1004BF728;
  }
  return v3;
}

uint64_t sub_10034CD54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v27[2];
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;

  v1 = *v0;
  v2 = sub_10003F544(&qword_100565948);
  v3 = swift_allocObject(v2, 96, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1003CB770;
  v29 = v1;
  v30 = &off_1004C4928;
  *(_QWORD *)&v28 = v0;
  v4 = type metadata accessor for ShareEpisodeContextAction(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 80) = 1;
  *(_QWORD *)(v5 + 88) = 0;
  *(_BYTE *)(v5 + 96) = 1;
  v6 = v5 + OBJC_IVAR____TtC8Podcasts25ShareEpisodeContextAction_metricsLabel;
  v7 = enum case for MetricsLabel.share(_:);
  v8 = type metadata accessor for MetricsLabel(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104);
  v9(v6, v7, v8);
  sub_10002099C(&v28, v5 + 32);
  *(_QWORD *)(v3 + 32) = v5;
  *(_QWORD *)(v3 + 40) = &off_1004C3018;
  v29 = v1;
  v30 = &off_1004C4928;
  *(_QWORD *)&v28 = v0;
  v10 = type metadata accessor for SharePodcastContextAction(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  v9(v11 + OBJC_IVAR____TtC8Podcasts25SharePodcastContextAction_metricsLabel, v7, v8);
  sub_10002099C(&v28, v11 + 32);
  *(_QWORD *)(v3 + 48) = v11;
  *(_QWORD *)(v3 + 56) = &off_1004B65E8;
  v29 = v1;
  v30 = &off_1004C4928;
  *(_QWORD *)&v28 = v0;
  v12 = type metadata accessor for ShareOtherContextAction(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v13 + 16) = 0;
  v14 = v13 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_link;
  v15 = type metadata accessor for URL(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v26(v14, 1, 1, v15);
  v16 = (_QWORD *)(v13 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_shareTitle);
  *v16 = 0;
  v16[1] = 0;
  *(_QWORD *)(v13 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_attributes) = 0;
  v17 = (_QWORD *)(v13 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_systemImageName);
  *v17 = 0xD000000000000013;
  v17[1] = 0x80000001004359B0;
  v18 = enum case for MetricsLabel.shareOther(_:);
  v9(v13 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_metricsLabel, enum case for MetricsLabel.shareOther(_:), v8);
  *(_BYTE *)(v13 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_contextActionType) = 39;
  sub_10002099C(&v28, v13 + 24);
  *(_QWORD *)(v3 + 64) = v13;
  *(_QWORD *)(v3 + 72) = &off_1004C0760;
  v19 = v0[22];
  v29 = v1;
  v30 = &off_1004C4928;
  *(_QWORD *)&v28 = v0;
  v20 = type metadata accessor for ShareCategoryContextAction(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = sub_10003F544(&qword_10055E200);
  swift_retain_n(v0, 4);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v27, v22, v22);
  *(_QWORD *)(v21 + OBJC_IVAR____TtC8Podcasts26ShareCategoryContextAction_managedContextProvider) = *(_QWORD *)&v27[0];
  sub_10000A520((uint64_t)&v28, (uint64_t)v27);
  *(_QWORD *)(v21 + 16) = 0;
  v26(v21 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_link, 1, 1, v15);
  v23 = (_QWORD *)(v21 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_shareTitle);
  *v23 = 0;
  v23[1] = 0;
  *(_QWORD *)(v21 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_attributes) = 0;
  v24 = (_QWORD *)(v21 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_systemImageName);
  *v24 = 0xD000000000000013;
  v24[1] = 0x80000001004359B0;
  v9(v21 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_metricsLabel, v18, v8);
  *(_BYTE *)(v21 + OBJC_IVAR____TtC8Podcasts23ShareOtherContextAction_contextActionType) = 39;
  sub_10002099C(v27, v21 + 24);
  swift_release(v19);
  sub_10003D380(&v28);
  *(_QWORD *)(v3 + 80) = v21;
  *(_QWORD *)(v3 + 88) = &off_1004C0760;
  return v3;
}

uint64_t sub_10034D0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t EpisodeContextAction;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  __int128 v19[2];
  __int128 v20[2];

  v1 = sub_10003F544((uint64_t *)&unk_100565930);
  v2 = swift_allocObject(v1, 96, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1003CB770;
  v3 = *(_QWORD *)(v0 + 168);
  v4 = v0 + 32;
  sub_10000A520(v0 + 32, (uint64_t)v20);
  v5 = v0 + 184;
  sub_10000A520(v0 + 184, (uint64_t)v19);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = type metadata accessor for MarkEpisodeContextAction();
  v8 = swift_allocObject(v7, 144, 7);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 136) = 1;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v3;
  sub_10002099C(v20, v8 + 48);
  sub_10002099C(v19, v8 + 88);
  *(_QWORD *)(v8 + 128) = v6;
  *(_QWORD *)(v2 + 32) = v8;
  *(_QWORD *)(v2 + 40) = &off_1004B1910;
  sub_10000A520(v4, (uint64_t)v20);
  sub_10000A520(v5, (uint64_t)v19);
  v9 = swift_allocObject(v7, 144, 7);
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 136) = 1;
  *(_BYTE *)(v9 + 32) = 1;
  *(_QWORD *)(v9 + 40) = v3;
  sub_10002099C(v20, v9 + 48);
  sub_10002099C(v19, v9 + 88);
  *(_QWORD *)(v9 + 128) = v6;
  *(_QWORD *)(v2 + 48) = v9;
  *(_QWORD *)(v2 + 56) = &off_1004B1910;
  EpisodeContextAction = type metadata accessor for PlayNextEpisodeContextAction(0);
  v11 = (_QWORD *)swift_allocObject(EpisodeContextAction, *(unsigned int *)(EpisodeContextAction + 48), *(unsigned __int16 *)(EpisodeContextAction + 52));
  v11[3] = 0;
  v11[4] = 0;
  v12 = (char *)v11 + OBJC_IVAR____TtC8Podcasts28PlayNextEpisodeContextAction_metricsLabel;
  v13 = enum case for MetricsLabel.playEpisodeNext(_:);
  v14 = type metadata accessor for MetricsLabel(0);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104);
  v15(v12, v13, v14);
  v11[2] = v6;
  *(_QWORD *)(v2 + 64) = v11;
  *(_QWORD *)(v2 + 72) = &off_1004B1528;
  v16 = type metadata accessor for AddToQueueEpisodeContextAction(0);
  v17 = (char *)swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *((_QWORD *)v17 + 3) = 0;
  *((_QWORD *)v17 + 4) = 0;
  v15(&v17[OBJC_IVAR____TtC8Podcasts30AddToQueueEpisodeContextAction_metricsLabel], enum case for MetricsLabel.addToQueueEpisode(_:), v14);
  *((_QWORD *)v17 + 2) = v6;
  *(_QWORD *)(v2 + 80) = v17;
  *(_QWORD *)(v2 + 88) = &off_1004BA180;
  swift_retain_n(v6, 4);
  swift_retain_n(v3, 2);
  return v2;
}

uint64_t sub_10034D310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  _BYTE v29[40];
  __int128 v30[2];
  Swift::String v31;

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_100565930);
  v3 = swift_allocObject(v2, 128, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1003CAEF0;
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = v0 + 32;
  sub_10000A520(v0 + 32, (uint64_t)v30);
  v7 = type metadata accessor for RemoveFromStationContextAction();
  v8 = (_QWORD *)swift_allocObject(v7, 96, 7);
  v8[10] = 0;
  v8[11] = 0;
  v8[9] = v4;
  v8[2] = 0;
  v8[3] = v5;
  sub_10002099C(v30, (uint64_t)(v8 + 4));
  *(_QWORD *)(v3 + 32) = v8;
  *(_QWORD *)(v3 + 40) = &off_1004B2C50;
  sub_10000A520(v6, (uint64_t)v30);
  v9 = type metadata accessor for RemoveFromUpNextEpisodeContextAction(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  swift_retain();
  swift_retain();
  *(_QWORD *)(v3 + 48) = sub_100247320(v30);
  *(_QWORD *)(v3 + 56) = &off_1004B81F8;
  sub_10000A520(v6, (uint64_t)v30);
  sub_10000A520(v1 + 184, (uint64_t)v29);
  v10 = type metadata accessor for DownloadEpisodeContextAction(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(_BYTE *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  v12 = v11 + OBJC_IVAR____TtC8Podcasts28DownloadEpisodeContextAction_metricsLabel;
  v13 = enum case for MetricsLabel.downloadEpisode(_:);
  v14 = type metadata accessor for MetricsLabel(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104);
  v15(v12, v13, v14);
  sub_10002099C(v30, v11 + 40);
  *(_QWORD *)(v11 + 80) = v5;
  sub_10034E0E0((uint64_t)v29, v11 + 88);
  *(_QWORD *)(v3 + 64) = v11;
  *(_QWORD *)(v3 + 72) = &off_1004B37E8;
  sub_10000A520(v6, (uint64_t)v30);
  v16 = type metadata accessor for RemoveDownloadContextAction(0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  v15(v17 + OBJC_IVAR____TtC8Podcasts27RemoveDownloadContextAction_metricsLabel, enum case for MetricsLabel.removeDownload(_:), v14);
  *(_QWORD *)(v17 + 64) = v4;
  *(_QWORD *)(v17 + 16) = v5;
  sub_10002099C(v30, v17 + 24);
  *(_QWORD *)(v3 + 80) = v17;
  *(_QWORD *)(v3 + 88) = &off_1004B88B0;
  v18 = *(_QWORD *)(v1 + 160);
  v19 = type metadata accessor for BookmarkEpisodeContextAction(0);
  v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  *(_OWORD *)(v20 + 40) = xmmword_1003CBA40;
  v15(v20 + OBJC_IVAR____TtC8Podcasts28BookmarkEpisodeContextAction_metricsLabel, enum case for MetricsLabel.bookmarkEpisode(_:), v14);
  *(_BYTE *)(v20 + OBJC_IVAR____TtC8Podcasts28BookmarkEpisodeContextAction_contextActionType) = 10;
  *(_QWORD *)(v20 + OBJC_IVAR____TtC8Podcasts28BookmarkEpisodeContextAction_bookmarksController) = v18;
  *(_QWORD *)(v3 + 96) = v20;
  *(_QWORD *)(v3 + 104) = &off_1004B1BB0;
  v21 = type metadata accessor for RemoveEpisodeFromBookmarksContextAction(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  v23 = (void *)objc_opt_self(NSBundle);
  swift_retain_n(v5, 2);
  swift_retain_n(v18, 2);
  v24 = objc_msgSend(v23, "mainBundle", swift_retain().n128_f64[0]);
  v31._object = (void *)0xEE0065646F736970;
  v25._countAndFlagsBits = 0x455F455641534E55;
  v25._object = (void *)0xEE0045444F534950;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 0x4520657661736E55;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v31);

  *(Swift::String *)(v22 + 32) = v27;
  *(_OWORD *)(v22 + 48) = xmmword_1003D6880;
  *(_QWORD *)(v22 + 64) = 0xEE006873616C732ELL;
  v15(v22 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_metricsLabel, enum case for MetricsLabel.removeEpisodeFromBookmarks(_:), v14);
  *(_BYTE *)(v22 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_contextActionType) = 11;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_bookmarksController) = v18;
  *(_QWORD *)(v3 + 112) = v22;
  *(_QWORD *)(v3 + 120) = &off_1004B8530;
  return v3;
}

_QWORD *sub_10034D6F8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  int64_t v49;
  __int128 v50;
  uint64_t v51;
  _UNKNOWN **v52;
  Swift::String v53;

  v1 = v0;
  v2 = *v0;
  v3 = sub_10003F544((uint64_t *)&unk_100565930);
  v4 = (_QWORD *)swift_allocObject(v3, 64, 7);
  *((_OWORD *)v4 + 1) = xmmword_1003CA220;
  sub_10000A520((uint64_t)(v0 + 15), (uint64_t)&v50);
  v5 = v0[21];
  v6 = type metadata accessor for PlayTranscriptSelectionContextAction(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  swift_retain();
  v4[4] = sub_10020CF2C(&v50, v5);
  v4[5] = &off_1004B6128;
  v7 = type metadata accessor for CopyTranscriptSelectionContextAction(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v53._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 2037411651;
  v10._object = (void *)0xE400000000000000;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v53._countAndFlagsBits = 0;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v53);

  *(Swift::String *)(v8 + 32) = v12;
  *(_OWORD *)(v8 + 48) = xmmword_1003D68E0;
  *(_QWORD *)(v8 + 64) = 0xEA0000000000636FLL;
  v13 = v8 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_metricsLabel;
  v14 = enum case for MetricsLabel.copyTranscriptSelection(_:);
  v15 = type metadata accessor for MetricsLabel(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104);
  v16(v13, v14, v15);
  v17 = v8 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_referenceTime;
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = v8 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_playerTime;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = v8 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_shareLink;
  v20 = type metadata accessor for URL(0);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_QWORD *)(v8 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_selectedText) = 0;
  v4[6] = v8;
  v4[7] = &off_1004B82F0;
  if (os_feature_enabled_copy_link_with_timestamp(v21))
  {
    v51 = v2;
    v52 = &off_1004C4928;
    *(_QWORD *)&v50 = v1;
    v22 = type metadata accessor for ShareEpisodeContextAction(0);
    v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    *(_QWORD *)(v23 + 72) = 0;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    *(_BYTE *)(v23 + 80) = 1;
    *(_QWORD *)(v23 + 88) = 0;
    *(_BYTE *)(v23 + 96) = 1;
    v16(v23 + OBJC_IVAR____TtC8Podcasts25ShareEpisodeContextAction_metricsLabel, enum case for MetricsLabel.share(_:), v15);
    sub_10002099C(&v50, v23 + 32);
    swift_retain();
    v4 = sub_10027C0C8((_QWORD *)1, 3, 1, v4);
    v4[2] = 3;
    v4[8] = v23;
    v4[9] = &off_1004C2F20;
  }
  v24 = type metadata accessor for ViewTranscriptContextAction(0);
  v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  v26 = v25 + OBJC_IVAR____TtC8Podcasts27ViewTranscriptContextAction_transcriptInfo;
  v27 = type metadata accessor for TranscriptRequestInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = type metadata accessor for ReportPodcastContextAction(0);
  v29 = (_QWORD *)swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29[4] = 0;
  v29[2] = 0;
  v29[3] = 0;
  v16((uint64_t)v29 + OBJC_IVAR____TtC8Podcasts26ReportPodcastContextAction_metricsLabel, enum case for MetricsLabel.reportPodcast(_:), v15);
  v30 = v4[2];
  v31 = v30 + 2;
  if (__OFADD__(v30, 2))
  {
    __break(1u);
  }
  else
  {
    v32 = v4[3];
    v33 = v32 >> 1;
    if ((uint64_t)(v32 >> 1) >= v31)
      goto LABEL_5;
  }
  if (v30 <= v31)
    v49 = v30 + 2;
  else
    v49 = v30;
  v4 = sub_10027C0C8((_QWORD *)1, v49, 1, v4);
  v30 = v4[2];
  v32 = v4[3];
  v33 = v32 >> 1;
LABEL_5:
  v34 = v30 + 1;
  swift_retain();
  if (v33 <= v30)
    v4 = sub_10027C0C8((_QWORD *)(v32 > 1), v30 + 1, 1, v4);
  v4[2] = v34;
  v35 = &v4[2 * v30];
  v35[4] = v25;
  v35[5] = &off_1004BCD90;
  v36 = v4[3];
  v37 = v30 + 2;
  swift_unknownObjectRetain(v29);
  if (v34 >= v36 >> 1)
    v4 = sub_10027C0C8((_QWORD *)(v36 > 1), v37, 1, v4);
  v4[2] = v37;
  v38 = &v4[2 * v34];
  v38[4] = v29;
  v38[5] = &off_1004B9C50;
  swift_release(v25);
  swift_release(v29);
  if (objc_msgSend((id)objc_opt_self(PFClientUtil), "isRunningOnInternalOS"))
  {
    v39 = type metadata accessor for Podcasts(0);
    v51 = v39;
    v52 = (_UNKNOWN **)sub_1001E04E4();
    v40 = sub_1000242A8(&v50);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v40, enum case for Podcasts.disableTapToRadarInTranscripts(_:), v39);
    LOBYTE(v39) = isFeatureEnabled(_:)(&v50);
    sub_10003D380(&v50);
    if ((v39 & 1) == 0)
    {
      v41 = type metadata accessor for TranscriptionErrorTTRContextAction(0);
      v42 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
      *(_QWORD *)(v42 + 16) = 0;
      *(_QWORD *)(v42 + 24) = 0;
      *(_QWORD *)(v42 + 32) = 0xD000000000000019;
      *(_QWORD *)(v42 + 40) = 0x800000010043F3F0;
      *(_OWORD *)(v42 + 48) = xmmword_1003D68F0;
      *(_QWORD *)(v42 + 64) = 0xE800000000000000;
      v16(v42 + OBJC_IVAR____TtC8Podcasts34TranscriptionErrorTTRContextAction_metricsLabel, v14, v15);
      v43 = (_QWORD *)(v42 + OBJC_IVAR____TtC8Podcasts34TranscriptionErrorTTRContextAction_selectedText);
      *v43 = 0;
      v43[1] = 0;
      v44 = (_QWORD *)(v42 + OBJC_IVAR____TtC8Podcasts34TranscriptionErrorTTRContextAction_timestamp);
      *v44 = 0;
      v44[1] = 0;
      v46 = v4[2];
      v45 = v4[3];
      if (v46 >= v45 >> 1)
        v4 = sub_10027C0C8((_QWORD *)(v45 > 1), v46 + 1, 1, v4);
      v4[2] = v46 + 1;
      v47 = &v4[2 * v46];
      v47[4] = v42;
      v47[5] = &off_1004BF970;
    }
  }
  return v4;
}

void sub_10034DC7C(char a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;

  if ((a1 & 1) != 0)
  {
    sub_10000A520((uint64_t)(v2 + 15), (uint64_t)&v15);
    v9 = type metadata accessor for EpisodePresentPodcastContextAction(0);
    v10 = (_QWORD *)swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v10[2] = 0;
    v10[3] = 0;
    v11 = (char *)v10 + OBJC_IVAR____TtC8Podcasts34EpisodePresentPodcastContextAction_metricsLabel;
    v12 = enum case for MetricsLabel.select(_:);
    v13 = type metadata accessor for MetricsLabel(0);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v11, v12, v13);
    sub_10002099C(&v15, (uint64_t)(v10 + 4));
    sub_10020641C(a2);
    sub_10037DA48();
    swift_setDeallocating(v10);
    swift_release(v10[2]);
    swift_release(v10[3]);
    sub_10003D380(v10 + 4);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))((uint64_t)v10 + OBJC_IVAR____TtC8Podcasts34EpisodePresentPodcastContextAction_metricsLabel, v13);
    swift_deallocClassInstance(v10, *(unsigned int *)(*v10 + 48), *(unsigned __int16 *)(*v10 + 52));
  }
  else
  {
    v16 = *v2;
    v17 = &off_1004C4928;
    v4 = type metadata accessor for ShareEpisodeContextAction(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    *(_QWORD *)(v5 + 72) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_BYTE *)(v5 + 80) = 1;
    *(_QWORD *)(v5 + 88) = 0;
    *(_BYTE *)(v5 + 96) = 1;
    v6 = v5 + OBJC_IVAR____TtC8Podcasts25ShareEpisodeContextAction_metricsLabel;
    v7 = enum case for MetricsLabel.share(_:);
    v8 = type metadata accessor for MetricsLabel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
    sub_10002099C(&v15, v5 + 32);
    swift_retain();
    sub_100206630(a2);
    sub_100321948();
    swift_release(v5);
  }
}

_QWORD *sub_10034DE38()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10003D380(v0 + 4);
  sub_10003D380(v0 + 9);
  swift_release(v0[14]);
  sub_10003D380(v0 + 15);
  swift_release(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  sub_10003D380(v0 + 23);
  swift_release(v0[28]);
  sub_10002CA30(v0[29], v0[30]);
  return v0;
}

uint64_t sub_10034DEAC()
{
  uint64_t v0;

  sub_10034DE38();
  return swift_deallocClassInstance(v0, 248, 7);
}

_QWORD *sub_10034DECC()
{
  return sub_10034B264();
}

uint64_t sub_10034DEEC()
{
  return sub_10034CD54();
}

uint64_t sub_10034DF0C()
{
  return sub_10034D0F4();
}

uint64_t sub_10034DF2C()
{
  return sub_10034D310();
}

_QWORD *sub_10034DF4C()
{
  return sub_10034D6F8();
}

uint64_t sub_10034DF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_10003F544(&qword_100565928);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1003CA200;
  v2 = type metadata accessor for ContextMenuLockupPreviewProvider();
  v3 = swift_allocObject(v2, 16, 7);
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = &off_1004C6908;
  *(_QWORD *)(v1 + 32) = v3;
  return v1;
}

void sub_10034DFD8(char a1, uint64_t a2)
{
  sub_10034DC7C(a1 & 1, a2);
}

uint64_t sub_10034DFFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = *v0;
  swift_beginAccess(v1 + 232, v4, 0, 0);
  v2 = *(_QWORD *)(v1 + 232);
  sub_10002CA20(v2, *(_QWORD *)(v1 + 240));
  return v2;
}

uint64_t sub_10034E04C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = *v2;
  swift_beginAccess(v5 + 232, v9, 1, 0);
  v6 = *(_QWORD *)(v5 + 232);
  v7 = *(_QWORD *)(v5 + 240);
  *(_QWORD *)(v5 + 232) = a1;
  *(_QWORD *)(v5 + 240) = a2;
  return sub_10002CA30(v6, v7);
}

uint64_t (*sub_10034E0A0(uint64_t a1))(_QWORD)
{
  _QWORD *v1;

  swift_beginAccess(*v1 + 232, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10034E0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100565940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10034E128(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15[2];

  v2 = v1;
  v4 = type metadata accessor for HUDPresenter();
  v2[2] = swift_allocObject(v4, 16, 7);
  v2[29] = 0;
  v2[30] = 0;
  v2[22] = a1;
  v5 = sub_10003F544((uint64_t *)&unk_100555130);
  swift_retain(a1);
  BaseObjectGraph.inject<A>(_:)(v15, v5, v5);
  v2[3] = *(_QWORD *)&v15[0];
  v6 = sub_10003F544(&qword_100553BE0);
  BaseObjectGraph.inject<A>(_:)(v15, v6, v6);
  sub_10002099C(v15, (uint64_t)(v2 + 4));
  v7 = type metadata accessor for PodcastStateController(0);
  BaseObjectGraph.inject<A>(_:)(v15, v7, v7);
  v2[14] = *(_QWORD *)&v15[0];
  v8 = sub_10003F544((uint64_t *)&unk_100562A90);
  BaseObjectGraph.inject<A>(_:)(v15, v8, v8);
  sub_10002099C(v15, (uint64_t)(v2 + 15));
  v9 = type metadata accessor for BookmarksController(0);
  BaseObjectGraph.inject<A>(_:)(v15, v9, v9);
  v2[20] = *(_QWORD *)&v15[0];
  v10 = sub_10003F544(&qword_100565950);
  BaseObjectGraph.inject<A>(_:)(v15, v10, v10);
  sub_10002099C(v15, (uint64_t)(v2 + 9));
  v11 = sub_10003F544(&qword_100553720);
  BaseObjectGraph.inject<A>(_:)(v15, v11, v11);
  v2[21] = *(_QWORD *)&v15[0];
  v12 = sub_10003F544((uint64_t *)&unk_100555120);
  BaseObjectGraph.inject<A>(_:)(v15, v12, v12);
  sub_10002099C(v15, (uint64_t)(v2 + 23));
  v13 = type metadata accessor for PlaybackController(0);
  BaseObjectGraph.inject<A>(_:)(v15, v13, v13);
  v2[28] = *(_QWORD *)&v15[0];
  return v2;
}

ValueMetadata *type metadata accessor for FetchShowEntitiesIntentImplementation()
{
  return &type metadata for FetchShowEntitiesIntentImplementation;
}

uint64_t sub_10034E2C0()
{
  return sub_100026844((unint64_t *)&unk_100565958, (uint64_t (*)(uint64_t))&type metadata accessor for FetchShowEntitiesIntent, (uint64_t)&protocol conformance descriptor for FetchShowEntitiesIntent);
}

_QWORD *sub_10034E2EC(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10017B480(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      v9 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_10017B480(v7 > 1, v8 + 1, 1);
        result = v9;
      }
      result[2] = v8 + 1;
      result[v8 + 4] = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_10034E3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v6 = (uint64_t (*)(uint64_t))((char *)&dword_100565968 + dword_100565968);
  v4 = (_QWORD *)swift_task_alloc(unk_10056596C);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_100252240;
  return v6(a2);
}

uint64_t sub_10034E40C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = a1;
  v2 = type metadata accessor for ShowEntity.ShowEntityQuery(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10034E46C, 0, 0);
}

uint64_t sub_10034E46C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t ShowEntities;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = ShowEntity.ShowEntityQuery.init()();
  ShowEntities = FetchShowEntitiesIntent.contentIDs.getter(v1);
  v3 = Array<A>.unpack()();
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease(ShowEntities);
  v0[7] = v3;
  v0[8] = v5;
  v0[9] = v7;
  v8 = sub_10034E2EC(v7);
  v9 = sub_10036A458((uint64_t)v8);
  v0[10] = v9;
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRetain(v5);
  v11 = sub_10002B070(v10);
  v0[11] = v11;
  swift_bridgeObjectRelease(v5);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to LibraryEntityQuery.findAndPrepareEntities(for:adamIDs:uuids:)[1]);
  v0[12] = v12;
  v13 = sub_100026844((unint64_t *)&unk_100565970, (uint64_t (*)(uint64_t))&type metadata accessor for ShowEntity.ShowEntityQuery, (uint64_t)&protocol conformance descriptor for ShowEntity.ShowEntityQuery);
  *v12 = v0;
  v12[1] = sub_10034E580;
  return LibraryEntityQuery.findAndPrepareEntities(for:adamIDs:uuids:)(v3, v9, v11, v0[4], v13);
}

uint64_t sub_10034E580(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  *(_QWORD *)(*(_QWORD *)v2 + 104) = v1;
  swift_task_dealloc(v5);
  v6 = v4[10];
  v7 = v4[11];
  if (v1)
  {
    swift_bridgeObjectRelease(v4[11]);
    swift_bridgeObjectRelease(v6);
    v8 = sub_10034E68C;
  }
  else
  {
    v10 = v4[8];
    v9 = v4[9];
    swift_bridgeObjectRelease(v4[7]);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    v4[14] = a1;
    v8 = sub_10034E63C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10034E63C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(v2, *(_QWORD *)(v0 + 32));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10034E68C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_10034E700(unint64_t a1)
{
  return sub_10034E724(a1, MTChannel_ptr);
}

_QWORD *sub_10034E70C(unint64_t a1)
{
  return sub_10034E724(a1, MTEpisode_ptr);
}

_QWORD *sub_10034E718(unint64_t a1)
{
  return sub_10034E724(a1, MTPodcast_ptr);
}

_QWORD *sub_10034E724(unint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
        v7 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v8 = v6;
        v9 = objc_opt_self(*a2);
        v10 = swift_dynamicCastObjCClass(v8, v9);
        if (!v10)
        {
          swift_unknownObjectRelease(v8);
          goto LABEL_15;
        }
        v11 = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v12 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
        v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
        specialized ContiguousArray._endMutation()(v13);
        if (v7 == v4)
          return _swiftEmptyArrayStorage;
      }
      __break(1u);
    }
    else
    {
      v14 = 0;
      v15 = v3 + 32;
      while (1)
      {
        v16 = v14 + 1;
        if (__OFADD__(v14, 1))
          break;
        v17 = *(void **)(v15 + 8 * v14);
        v18 = objc_opt_self(*a2);
        v19 = swift_dynamicCastObjCClass(v17, v18);
        if (!v19)
        {
LABEL_15:
          swift_release(_swiftEmptyArrayStorage);
          return 0;
        }
        v3 = v19;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        v20 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
        v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v3);
        specialized ContiguousArray._endMutation()(v21);
        ++v14;
        if (v16 == v4)
          return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    if (v3 < 0)
      v23 = v3;
    else
      v23 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v24 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v3);
    specialized ContiguousArray.reserveCapacity(_:)(v24);
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v3);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10034E904(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9[2];
  uint64_t v10;
  _BYTE v11[32];
  __int128 v12[2];
  _QWORD *v13;

  v2 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  sub_10017B140(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_10003D344(i, (uint64_t)v11);
      v5 = sub_10003F544(&qword_100553CF0);
      if (!swift_dynamicCast(v9, v11, (char *)&type metadata for Any + 8, v5, 6))
        break;
      sub_10002099C(v9, (uint64_t)v12);
      sub_10002099C(v12, (uint64_t)v9);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10017B140(0, v3[2] + 1, 1);
        v3 = v13;
      }
      v7 = v3[2];
      v6 = v3[3];
      if (v7 >= v6 >> 1)
      {
        sub_10017B140(v6 > 1, v7 + 1, 1);
        v3 = v13;
      }
      v3[2] = v7 + 1;
      sub_10002099C(v9, (uint64_t)&v3[5 * v7 + 4]);
      if (!--v2)
        return v3;
    }
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    swift_release(v3);
    sub_100007A28((uint64_t)v9, (uint64_t *)&unk_100565EC8);
    return 0;
  }
  return v3;
}

_QWORD *sub_10034EA78(uint64_t a1)
{
  return sub_10034EEC0(a1, (uint64_t (*)(_QWORD))&type metadata accessor for LibraryEpisodeLockup);
}

_QWORD *sub_10034EA84(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        v5 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v6 = v4;
        v7 = objc_opt_self(CPListItem);
        v8 = swift_dynamicCastObjCClass(v6, v7);
        if (!v8)
        {
          swift_unknownObjectRelease(v6);
          goto LABEL_15;
        }
        v9 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        v10 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
        v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
        specialized ContiguousArray._endMutation()(v11);
        if (v5 == v2)
          return _swiftEmptyArrayStorage;
      }
      __break(1u);
    }
    else
    {
      v12 = 0;
      v13 = v1 + 32;
      while (1)
      {
        v14 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        v15 = *(_QWORD *)(v13 + 8 * v12);
        v16 = objc_opt_self(CPListItem);
        v17 = swift_dynamicCastObjCClass(v15, v16);
        if (!v17)
        {
LABEL_15:
          swift_release(_swiftEmptyArrayStorage);
          return 0;
        }
        v1 = v17;
        v18 = swift_unknownObjectRetain(v15);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
        v19 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
        v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v1);
        specialized ContiguousArray._endMutation()(v20);
        ++v12;
        if (v14 == v2)
          return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    if (v1 < 0)
      v22 = v1;
    else
      v22 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v23 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
    specialized ContiguousArray.reserveCapacity(_:)(v23);
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10034EC6C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_43;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    sub_10017B1FC(0, v3 & ~(v3 >> 63), 0);
    v5 = _swiftEmptyArrayStorage;
    if (v2)
      break;
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return v5;
LABEL_10:
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        v10 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v11 = v8;
        ObjectType = swift_getObjectType(v8, v9);
        v13 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for MediaObjectEpisodeBucket);
        if (v13)
          v14 = v13;
        else
          v14 = 0;
        if (v13)
          v15 = v11;
        else
          v15 = 0;
        if (!v15)
        {
          swift_release(_swiftEmptyArrayStorage);
          swift_unknownObjectRelease(v11);
          return 0;
        }
        v17 = _swiftEmptyArrayStorage[2];
        v16 = _swiftEmptyArrayStorage[3];
        if (v17 >= v16 >> 1)
          sub_10017B1FC(v16 > 1, v17 + 1, 1);
        _swiftEmptyArrayStorage[2] = v17 + 1;
        v18 = &_swiftEmptyArrayStorage[2 * v17];
        v18[4] = v15;
        v18[5] = v14;
        if (v10 == v2)
          return v5;
      }
      __break(1u);
    }
    else
    {
      v19 = 0;
      v30 = v1 + 32;
      while (1)
      {
        v20 = v19 + 1;
        if (__OFADD__(v19, 1))
          break;
        v21 = *(_QWORD *)(v30 + 8 * v19);
        v22 = swift_getObjectType(v21, v4);
        v23 = swift_conformsToProtocol2(v22, &protocol descriptor for MediaObjectEpisodeBucket);
        if (v23)
          v24 = v23;
        else
          v24 = 0;
        if (v23)
          v25 = v21;
        else
          v25 = 0;
        if (!v25)
        {
          swift_release(_swiftEmptyArrayStorage);
          return 0;
        }
        v1 = _swiftEmptyArrayStorage[2];
        v26 = _swiftEmptyArrayStorage[3];
        swift_unknownObjectRetain(v21);
        if (v1 >= v26 >> 1)
          sub_10017B1FC(v26 > 1, v1 + 1, 1);
        _swiftEmptyArrayStorage[2] = v1 + 1;
        v27 = &_swiftEmptyArrayStorage[2 * v1];
        v27[4] = v25;
        v27[5] = v24;
        ++v19;
        if (v20 == v2)
          return v5;
      }
    }
    __break(1u);
LABEL_43:
    if (v1 < 0)
      v29 = v1;
    else
      v29 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v1);
  }
  if (v1 < 0)
    v6 = v1;
  else
    v6 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v2 = _CocoaArrayWrapper.endIndex.getter(v6);
  swift_bridgeObjectRelease(v1);
  if (v2)
    goto LABEL_10;
  return v5;
}

_QWORD *sub_10034EEA8(unint64_t a1)
{
  return sub_10034F560(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ServerPodcastEpisode);
}

_QWORD *sub_10034EEB4(uint64_t a1)
{
  return sub_10034EEC0(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ShowHeader);
}

_QWORD *sub_10034EEC0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[40];
  _QWORD *v15;

  v15 = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v4);
  if (!v4)
    return v15;
  for (i = a1 + 32; ; i += 40)
  {
    sub_10000A520(i, (uint64_t)v14);
    v6 = sub_10003F544(&qword_1005545F0);
    v7 = a2(0);
    v8 = swift_dynamicCast(&v13, v14, v6, v7, 6);
    if (!(_DWORD)v8)
      break;
    v9 = v13;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
    v10 = v15[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
    v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
    specialized ContiguousArray._endMutation()(v11);
    if (!--v4)
      return v15;
  }
  v13 = 0;
  swift_release(v15);
  swift_release(v13);
  return 0;
}

_QWORD *sub_10034EFCC(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  _BYTE v11[32];
  _QWORD *v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  sub_10017B16C(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_10003D344(i, (uint64_t)v11);
      v5 = sub_10003F544(&qword_1005549E0);
      if (!swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v5, 6))
        break;
      v6 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10017B16C(0, v3[2] + 1, 1);
        v3 = v12;
      }
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_10017B16C(v7 > 1, v8 + 1, 1);
        v3 = v12;
      }
      v3[2] = v8 + 1;
      v3[v8 + 4] = v6;
      if (!--v2)
        return v3;
    }
    v10 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  return v3;
}

_QWORD *sub_10034F110(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        v5 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v6 = v4;
        v7 = type metadata accessor for MTInterest(0);
        v8 = swift_dynamicCastClass(v6, v7);
        if (!v8)
        {
          swift_unknownObjectRelease(v6);
          goto LABEL_15;
        }
        v9 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        v10 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
        v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
        specialized ContiguousArray._endMutation()(v11);
        if (v5 == v2)
          return _swiftEmptyArrayStorage;
      }
      __break(1u);
    }
    else
    {
      v12 = 0;
      v13 = v1 + 32;
      while (1)
      {
        v14 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        v15 = *(void **)(v13 + 8 * v12);
        v16 = type metadata accessor for MTInterest(0);
        v17 = swift_dynamicCastClass(v15, v16);
        if (!v17)
        {
LABEL_15:
          swift_release(_swiftEmptyArrayStorage);
          return 0;
        }
        v1 = v17;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v18 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v1);
        specialized ContiguousArray._endMutation()(v19);
        ++v12;
        if (v14 == v2)
          return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    if (v1 < 0)
      v21 = v1;
    else
      v21 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v1);
    specialized ContiguousArray.reserveCapacity(_:)(v22);
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v1);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10034F2EC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_29;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v24 = _swiftEmptyArrayStorage;
    sub_10017B16C(0, v3 & ~(v3 >> 63), 0);
    v4 = v24;
    if (v2)
      break;
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return v4;
LABEL_10:
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        v8 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v9 = v7;
        v23 = 0;
        static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v7, &v23, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
        swift_unknownObjectRelease(v9);
        v10 = v23;
        if (!v23)
          goto LABEL_25;
        v24 = v4;
        v12 = v4[2];
        v11 = v4[3];
        if (v12 >= v11 >> 1)
        {
          sub_10017B16C(v11 > 1, v12 + 1, 1);
          v4 = v24;
        }
        v4[2] = v12 + 1;
        v4[v12 + 4] = v10;
        if (v8 == v2)
          return v4;
      }
      __break(1u);
    }
    else
    {
      v13 = 0;
      v14 = v1 + 32;
      v1 = (uint64_t)&type metadata for Any + 8;
      while (1)
      {
        v15 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        v16 = *(void **)(v14 + 8 * v13);
        v23 = 0;
        v17 = v16;
        ((void (*)(void))static Dictionary._conditionallyBridgeFromObjectiveC(_:result:))();

        v18 = v23;
        if (!v23)
        {
LABEL_25:
          swift_release(v4);
          return 0;
        }
        v24 = v4;
        v20 = v4[2];
        v19 = v4[3];
        if (v20 >= v19 >> 1)
        {
          sub_10017B16C(v19 > 1, v20 + 1, 1);
          v4 = v24;
        }
        v4[2] = v20 + 1;
        v4[v20 + 4] = v18;
        ++v13;
        if (v15 == v2)
          return v4;
      }
    }
    __break(1u);
LABEL_29:
    if (v1 < 0)
      v22 = v1;
    else
      v22 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
  }
  if (v1 < 0)
    v5 = v1;
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v2 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(v1);
  if (v2)
    goto LABEL_10;
  return v4;
}

_QWORD *sub_10034F53C(uint64_t a1)
{
  return sub_10034EEC0(a1, (uint64_t (*)(_QWORD))&type metadata accessor for Showcase);
}

_QWORD *sub_10034F548(uint64_t a1)
{
  return sub_10034EEC0(a1, (uint64_t (*)(_QWORD))&type metadata accessor for LegacyLockup);
}

_QWORD *sub_10034F554(unint64_t a1)
{
  return sub_10034F560(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ServerPodcast);
}

_QWORD *sub_10034F560(unint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
        v7 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v8 = v6;
        v9 = a2(0);
        v10 = swift_dynamicCastClass(v8, v9);
        if (!v10)
        {
          swift_unknownObjectRelease(v8);
          goto LABEL_15;
        }
        v11 = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v12 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
        v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
        specialized ContiguousArray._endMutation()(v13);
        if (v7 == v4)
          return _swiftEmptyArrayStorage;
      }
      __break(1u);
    }
    else
    {
      v14 = 0;
      v15 = v3 + 32;
      while (1)
      {
        v16 = v14 + 1;
        if (__OFADD__(v14, 1))
          break;
        v17 = *(_QWORD *)(v15 + 8 * v14);
        v18 = a2(0);
        v19 = swift_dynamicCastClass(v17, v18);
        if (!v19)
        {
LABEL_15:
          swift_release(_swiftEmptyArrayStorage);
          return 0;
        }
        v3 = v19;
        v20 = swift_unknownObjectRetain(v17);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        v21 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
        v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v3);
        specialized ContiguousArray._endMutation()(v22);
        ++v14;
        if (v16 == v4)
          return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    if (v3 < 0)
      v24 = v3;
    else
      v24 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v25 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(v3);
    specialized ContiguousArray.reserveCapacity(_:)(v25);
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(v3);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10034F744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100007A28(a1, (uint64_t *)&unk_10055FF00);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10, v8);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_1004C5118, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, (char *)&type metadata for () + 8, &unk_100565EE0, v17);
}

uint64_t sub_10034F890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100007A28(a1, (uint64_t *)&unk_10055FF00);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10, v8);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_1004C50F0, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  v18 = sub_10003F544((uint64_t *)&unk_100565EB8);
  if (v15 | v13)
  {
    v21[0] = 0;
    v21[1] = 0;
    v19 = v21;
    v21[2] = v13;
    v21[3] = v15;
  }
  else
  {
    v19 = 0;
  }
  return swift_task_create(v9, v19, v18, &unk_100565EB0, v17);
}

uint64_t sub_10034F9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, __n128);
  __n128 v10;
  uint64_t v12;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, __n128))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = swift_retain(v8);
  v9(v7, v10);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10034FA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100007A28(a1, (uint64_t *)&unk_10055FF00);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      v16 = 0;
      return swift_task_create(v9, v16, &type metadata for () + 1, a2, a3);
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v10, v8);
  swift_unknownObjectRetain(v10);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13))
    goto LABEL_6;
  v19[0] = 0;
  v19[1] = 0;
  v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v9, v16, &type metadata for () + 1, a2, a3);
}

uint64_t sub_10034FBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100007A28(a1, (uint64_t *)&unk_10055FF00);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10, v8);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = sub_10003F544((uint64_t *)&unk_100565EB8);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_10034FCF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;

  v1 = type metadata accessor for ShowOffer(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EpisodeOffer(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = EpisodeOffer.contentRating.getter(v7);
  if (v10 == 2)
  {
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v0, v5);
  }
  else
  {
    v15 = ContentRating.rawValue.getter(v10 & 1);
    v17 = v16;
    v19 = ContentRating.rawValue.getter(1);
    v20 = v18;
    if (v15 == v19 && v17 == v18)
    {
      swift_bridgeObjectRelease_n(v17, 2);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v0, v5);
LABEL_17:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") ^ 1;
    }
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v18, 0);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v20);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v0, v5);
    if ((v29 & 1) != 0)
      goto LABEL_17;
  }
  v12 = EpisodeOffer.showOffer.getter(v11);
  v13 = ShowOffer.contentRating.getter(v12);
  if (v13 == 2)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    return 0;
  }
  v21 = ContentRating.rawValue.getter(v13 & 1);
  v23 = v22;
  v24 = ContentRating.rawValue.getter(1);
  if (v21 == v24 && v23 == v25)
  {
    swift_bridgeObjectRelease_n(v23, 2);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    goto LABEL_17;
  }
  v27 = v25;
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v24, v25, 0);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v27);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = 0;
  if ((v28 & 1) != 0)
    return objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") ^ 1;
  return result;
}

_QWORD *sub_10034FF68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v3 = ((uint64_t (*)(void))DeviceCapacityMonitor.CapacityLevel.rawValue.getter)();
  result = (_QWORD *)DeviceCapacityMonitor.CapacityLevel.rawValue.getter(0);
  if ((_QWORD *)v3 != result)
  {
    v5 = a2 + 16;
    swift_beginAccess(v5, v9, 0, 0);
    result = (_QWORD *)swift_weakLoadStrong(v5);
    if (result)
    {
      v6 = result;
      v7 = result[26];
      v8 = result[27];
      sub_10003A834(result + 23, v7);
      dispatch thunk of PodcastsStateCoordinatorProtocol.cancelAllDownloads(userInitiated:from:)(0, 3, v7, v8);
      return (_QWORD *)swift_release(v6);
    }
  }
  return result;
}

_QWORD *sub_100350004()
{
  uint64_t v0;
  _QWORD *v1;
  Swift::Int64 v2;
  uint64_t v3;
  void *v4;

  v1 = (_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 272) & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + 264);
    v3 = type metadata accessor for DeviceCapacityMonitor(0);
    v4 = (void *)static DeviceCapacityMonitor.shared.getter(v3);
    DeviceCapacityMonitor.removeCapacityChangeObserver(with:)(v2);

  }
  swift_unknownObjectRelease(v1[2]);
  swift_unknownObjectRelease(v1[4]);
  swift_unknownObjectRelease(v1[6]);
  swift_unknownObjectRelease(v1[7]);
  swift_unknownObjectRelease(v1[9]);
  swift_unknownObjectRelease(v1[11]);
  swift_unknownObjectRelease(v1[13]);
  sub_10003D380(v1 + 15);
  swift_unknownObjectRelease(v1[20]);
  swift_release(v1[22]);
  sub_10003D380(v1 + 23);
  sub_10003D380(v1 + 28);
  swift_release(v1[35]);
  sub_10003D380(v1 + 36);
  swift_release(v1[41]);
  return v1;
}

uint64_t sub_1003500D0()
{
  uint64_t v0;

  sub_100350004();
  return swift_deallocClassInstance(v0, 336, 7);
}

uint64_t sub_1003500F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_100350108, 0, 0);
}

uint64_t sub_100350108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 328);
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    v2 = async function pointer to PlaybackController.pause()[1];
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 40) = v3;
    *v3 = v0;
    v3[1] = sub_10035018C;
    return PlaybackController.pause()();
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10035018C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 32);
  if (v0)
  {
    swift_errorRelease();
    swift_release(v4);
    v5 = sub_100365084;
  }
  else
  {
    swift_release(v4);
    v5 = sub_10035020C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10035020C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 48) != 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100350228(uint64_t a1)
{
  return sub_10035118C(a1, (uint64_t)&unk_1004C5910, (uint64_t)sub_100364F3C);
}

void sub_10035023C(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  char v6;
  _BYTE v7[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    sub_100361EE8(a1);
    swift_release(v5);
  }
  else
  {
    v6 = 0;
    Promise.resolve(_:)(&v6);
  }
}

id sub_1003502B8(void *a1, _BYTE *a2, void *a3)
{
  id result;

  if (objc_msgSend(a1, "isAuthenticatedDark"))
    objc_msgSend(a1, "setAuthenticatedDark:", 0);
  objc_msgSend(a1, "resetGoDarkWithReason:", 3);
  if (a3)
    result = objc_msgSend(a3, "saveInCurrentBlock");
  else
    result = 0;
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_10035033C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  uint64_t v26;
  char v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  void **aBlock;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  void *v48;
  void *v49;
  uint64_t v50;

  v40 = a2;
  v41 = a4;
  v43 = a3;
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100361A48();
  sub_10003F544((uint64_t *)&unk_100565E60);
  v17 = Promise.__allocating_init()();
  if ((a6 & 1) != 0
    && (objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") & 1) == 0)
  {
    v36 = (void *)objc_opt_self(MTRestrictionsUtil);
    v49 = sub_100364ECC;
    v50 = v17;
    aBlock = _NSConcreteStackBlock;
    v46 = 1107296256;
    v47 = sub_10001C290;
    v48 = &unk_1004C58D8;
    v37 = _Block_copy(&aBlock);
    v38 = v50;
    swift_retain_n(v17, 2);
    objc_msgSend(v36, "presentExplicitRestrictionAlertIfNeededOfType:actionCompletion:", 1, v37, swift_release(v38).n128_f64[0]);
    _Block_release(v37);
    swift_release(v17);
    return v17;
  }
  v42 = a7;
  v18 = sub_100005EC8(0, (unint64_t *)&qword_100565F80, off_1004A4578);
  v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "sharedInstance");
  v20 = objc_msgSend(objc_allocWithZone((Class)MTAddPodcastParams), "init");
  sub_100007A64(a1, (uint64_t)v12, (uint64_t *)&unk_100553DC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100007A28((uint64_t)v12, (uint64_t *)&unk_100553DC0);
    if (a5)
    {
LABEL_5:
      v21 = String._bridgeToObjectiveC()();
      goto LABEL_8;
    }
  }
  else
  {
    v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URL.absoluteString.getter(v22);
    v24 = v23;
    v25 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "setUrl:", v25, swift_bridgeObjectRelease(v24).n128_f64[0]);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (a5)
      goto LABEL_5;
  }
  v21 = 0;
LABEL_8:
  v26 = v44;
  v27 = v43;
  objc_msgSend(v20, "setLocation:", v21, v40, v41);

  if ((v27 & 1) != 0
    || (v28 = objc_allocWithZone((Class)NSNumber),
        (v29 = objc_msgSend(v28, "initWithUnsignedLongLong:", v40)) == 0))
  {
    v31 = 0;
  }
  else
  {
    v30 = v29;
    v31 = objc_msgSend(v29, "longLongValue");

  }
  objc_msgSend(v20, "setStoreCollectionId:", v31);
  v32 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v32 + 16, v26);
  v33 = swift_allocObject(&unk_1004C5898, 33, 7);
  *(_QWORD *)(v33 + 16) = v17;
  *(_QWORD *)(v33 + 24) = v32;
  *(_BYTE *)(v33 + 32) = v42 & 1;
  v49 = sub_100364EC0;
  v50 = v33;
  aBlock = _NSConcreteStackBlock;
  v46 = 1107296256;
  v47 = sub_10001C290;
  v48 = &unk_1004C58B0;
  v34 = _Block_copy(&aBlock);
  v35 = v50;
  swift_retain();
  objc_msgSend(v20, "setCompletion:", v34, swift_release(v35).n128_f64[0]);
  _Block_release(v34);
  objc_msgSend(v19, "subscribeToPodcastWithParams:", v20);

  return v17;
}

double sub_10035073C(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t Strong;
  double result;
  uint64_t v9;
  _BYTE v10[24];

  v6 = a3 + 16;
  v10[0] = a1;
  Promise.resolve(_:)(v10);
  swift_beginAccess(v6, v10, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    v9 = Strong;
    sub_100350DD4(a1 & 1, a4 & 1);
    *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  }
  return result;
}

void sub_1003507B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t Strong;
  _QWORD *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSString v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t inited;
  unint64_t v34;
  id v35;
  NSString v36;
  Class isa;
  id v38;
  id v39;
  _QWORD aBlock[5];
  uint64_t v41;
  _BYTE v42[80];
  _BYTE v43[24];

  v11 = a2 + 16;
  swift_beginAccess(a2 + 16, v43, 0, 0);
  Strong = swift_weakLoadStrong(v11);
  if (Strong)
  {
    v13 = (_QWORD *)Strong;
    if (a1)
    {
      v14 = (void *)objc_opt_self(PFRestrictionsUtil);
      v15 = a1;
      if ((objc_msgSend(v14, "isExplicitContentAllowed") & 1) != 0
        || (objc_msgSend(v15, "isExplicit") & 1) == 0)
      {
        v19 = objc_msgSend(v15, "managedObjectContext");
        if (v19)
        {
          v20 = v19;
          v21 = v13[26];
          v22 = v13[27];
          sub_10003A834(v13 + 23, v21);
          dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeEnableSubscription(onPodcastUUID:from:context:)(a4, a5, 3, v20, v21, v22);
          LOBYTE(aBlock[0]) = 1;
          Promise.resolve(_:)(aBlock);
          sub_100005EC8(0, (unint64_t *)&qword_100561290, UITraitCollection_ptr);
          if ((static UITraitCollection.interfaceIdiomIsMac.getter() & 1) != 0
            || (v24 = v13[21],
                ObjectType = swift_getObjectType(v13[20], v23),
                (dispatch thunk of MTNotificationManagerProtocol.canPromptForNotificationPermissionsWithPreWarmSheet()(ObjectType, v24) & 1) == 0))
          {
            if ((a6 & 1) != 0)
              sub_100350E70();
          }
          v26 = v13[21];
          v27 = swift_getObjectType(v13[20], v23);
          dispatch thunk of MTNotificationManagerProtocol.requestNotificationPermissionsWithPreWarmSheetIfNeeded()(v27, v26);
          swift_release(v13);

        }
        else
        {
          v32 = sub_10003F544(&qword_1005654C0);
          inited = swift_initStackObject(v32, v42);
          *(_OWORD *)(inited + 16) = xmmword_1003CA200;
          *(_QWORD *)(inited + 32) = 1684632949;
          *(_QWORD *)(inited + 40) = 0xE400000000000000;
          *(_QWORD *)(inited + 72) = &type metadata for String;
          *(_QWORD *)(inited + 48) = a4;
          *(_QWORD *)(inited + 56) = a5;
          swift_bridgeObjectRetain(a5);
          v34 = sub_1001386B4(inited);
          v35 = objc_allocWithZone((Class)NSError);
          v36 = String._bridgeToObjectiveC()();
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          v38 = objc_msgSend(v35, "initWithDomain:code:userInfo:", v36, 42, isa, swift_bridgeObjectRelease(v34).n128_f64[0]);

          v39 = v38;
          Promise.reject(_:)(v39);
          swift_release(v13);

        }
      }
      else
      {
        v16 = (void *)objc_opt_self(MTRestrictionsUtil);
        aBlock[4] = sub_100365078;
        v41 = a3;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10001C290;
        aBlock[3] = &unk_1004C4FC8;
        v17 = _Block_copy(aBlock);
        v18 = v41;
        swift_retain_n(a3, 2);
        objc_msgSend(v16, "presentExplicitRestrictionAlertIfNeededOfType:actionCompletion:", 1, v17, swift_release(v18).n128_f64[0]);
        _Block_release(v17);
        swift_release(v13);

        swift_release(a3);
      }
    }
    else
    {
      v28 = objc_allocWithZone((Class)NSError);
      v29 = String._bridgeToObjectiveC()();
      v30 = objc_msgSend(v28, "initWithDomain:code:userInfo:", v29, 42, 0);

      v31 = v30;
      Promise.reject(_:)(v31);
      swift_release(v13);

    }
  }
}

void sub_100350B7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v8;
  id v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t inited;
  unint64_t v19;
  id v20;
  NSString v21;
  Class isa;
  id v23;
  id v24;
  id v25;
  char v26;
  _BYTE v27[80];

  if (a1)
  {
    v8 = a1;
    v9 = objc_msgSend(v8, "managedObjectContext");
    if (v9)
    {
      v10 = v9;
      v11 = a5 + 23;
      v13 = a5[26];
      v12 = a5[27];
      sub_10003A834(v11, v13);
      dispatch thunk of PodcastsStateCoordinatorProtocol.disableSubscription(onPodcastUUID:from:context:)(a3, a4, 3, v10, v13, v12);
      v26 = 1;
      Promise.resolve(_:)(&v26);

    }
    else
    {
      v17 = sub_10003F544(&qword_1005654C0);
      inited = swift_initStackObject(v17, v27);
      *(_OWORD *)(inited + 16) = xmmword_1003CA200;
      *(_QWORD *)(inited + 32) = 1684632949;
      *(_QWORD *)(inited + 40) = 0xE400000000000000;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 48) = a3;
      *(_QWORD *)(inited + 56) = a4;
      swift_bridgeObjectRetain(a4);
      v19 = sub_1001386B4(inited);
      v20 = objc_allocWithZone((Class)NSError);
      v21 = String._bridgeToObjectiveC()();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v23 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 42, isa, swift_bridgeObjectRelease(v19).n128_f64[0]);

      v24 = v23;
      Promise.reject(_:)(v24);

    }
  }
  else
  {
    v14 = objc_allocWithZone((Class)NSError);
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v14, "initWithDomain:code:userInfo:", v15, 42, 0);

    v25 = v16;
    Promise.reject(_:)(v25);

  }
}

uint64_t sub_100350DD4(char a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;

  sub_100005EC8(0, (unint64_t *)&qword_100561290, UITraitCollection_ptr);
  result = static UITraitCollection.interfaceIdiomIsMac.getter();
  if ((result & 1) != 0
    || (v7 = *(_QWORD *)(v2 + 168),
        ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 160), v6),
        result = dispatch thunk of MTNotificationManagerProtocol.canPromptForNotificationPermissionsWithPreWarmSheet()(ObjectType, v7), (result & 1) == 0))
  {
    if ((a1 & 1) == 0)
      return result;
    if ((a2 & 1) != 0)
      sub_100350E70();
    goto LABEL_8;
  }
  if ((a1 & 1) != 0)
  {
LABEL_8:
    v9 = *(_QWORD *)(v2 + 168);
    v10 = swift_getObjectType(*(_QWORD *)(v2 + 160), v6);
    return dispatch thunk of MTNotificationManagerProtocol.requestNotificationPermissionsWithPreWarmSheetIfNeeded()(v10, v9);
  }
  return result;
}

uint64_t sub_100350E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v10 = (void *)static OS_dispatch_queue.main.getter(v9);
  v11 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v11 + 16, v1);
  aBlock[4] = sub_100364EA8;
  v21 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C5860;
  v12 = _Block_copy(aBlock);
  swift_release(v21);
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  v14 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10003F544((uint64_t *)&unk_10055B200);
  v16 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v2, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100351088(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  _BYTE v12[24];

  v2 = type metadata accessor for HUDViewController.HUDType(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v12, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(Strong + 56);
    swift_unknownObjectRetain(v8);
    swift_release(v7);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for HUDViewController.HUDType.following(_:), v2);
    v9 = objc_allocWithZone((Class)type metadata accessor for HUDViewController(0));
    v10 = (void *)HUDViewController.init(type:)(v5);
    dispatch thunk of HUDViewController.present()();
    swift_unknownObjectRelease(v8);

  }
}

uint64_t sub_100351178(uint64_t a1)
{
  return sub_10035118C(a1, (uint64_t)&unk_1004C5848, (uint64_t)sub_100364E90);
}

uint64_t sub_10035118C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;

  v6 = v3;
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544((uint64_t *)&unk_100565E60);
  v9 = Promise.__allocating_init()();
  result = ShowOffer.adamId.getter(v9);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v11 = result;
    ShowOffer.feedUrl.getter(result);
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12);
    if ((_DWORD)v14 == 1)
    {
      sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DC0);
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v15 = URL.absoluteString.getter(v14);
      v16 = v17;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v12);
    }
    type metadata accessor for CoreDataFetcher(0);
    v18 = swift_allocObject(&unk_1004C4D30, 24, 7);
    swift_weakInit(v18 + 16, v6);
    v19 = swift_allocObject(a2, 32, 7);
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v9;
    swift_retain();
    v20 = swift_retain();
    static CoreDataFetcher.fetchPodcast(adamId:feedUrl:completion:)(v11, v15, v16, a3, v19, v20);
    swift_release(v19);
    swift_release(v18);
    swift_bridgeObjectRelease(v16);
    return v9;
  }
  return result;
}

double sub_100351340(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    sub_100362124(a1);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

uint64_t sub_1003513AC(uint64_t a1)
{
  return sub_10035118C(a1, (uint64_t)&unk_1004C5820, (uint64_t)sub_100364E68);
}

void sub_1003513C0(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  id v6;
  id v7;
  unsigned __int8 v8;
  id v9;
  NSString v10;
  id v11;
  unsigned __int8 v12;
  _BYTE v13[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    if (a1)
    {
      v6 = a1;
      v7 = objc_msgSend(v6, "managedObjectContext");
      objc_msgSend(v6, "setEpisodeLimit:", &_mh_execute_header);
      if (v7)
        v8 = objc_msgSend(v7, "saveInCurrentBlock");
      else
        v8 = 0;
      v12 = v8;
      Promise.resolve(_:)(&v12);
      swift_release(v5);

    }
    else
    {
      v9 = objc_allocWithZone((Class)NSError);
      v10 = String._bridgeToObjectiveC()();
      v11 = objc_msgSend(v9, "initWithDomain:code:userInfo:", v10, 42, 0);

      v6 = v11;
      Promise.reject(_:)();
      swift_release(v5);

    }
  }
}

uint64_t sub_100351500(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003516B4(a1, a2, a3, (uint64_t)&unk_1004C57D0, (uint64_t)sub_100364E4C, (uint64_t)&unk_1004C57E8);
}

void sub_10035151C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  NSString v6;
  id v7;
  uint64_t Strong;
  uint64_t v9;
  id v10;
  unsigned __int8 v11;
  id v12;
  NSString v13;
  id v14;
  unsigned __int8 v15;
  _BYTE v16[24];

  v5 = a4 + 16;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(a1, "podcastForUuid:", v6);

  swift_beginAccess(v5, v16, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v9 = Strong;
    if (v7)
    {
      v7 = v7;
      v10 = objc_msgSend(v7, "managedObjectContext");
      objc_msgSend(v7, "setEpisodeLimit:", &_mh_execute_header);
      if (v10)
        v11 = objc_msgSend(v10, "saveInCurrentBlock");
      else
        v11 = 0;
      v15 = v11;
      Promise.resolve(_:)(&v15);
      swift_release(v9);

    }
    else
    {
      v12 = objc_allocWithZone((Class)NSError);
      v13 = String._bridgeToObjectiveC()();
      v14 = objc_msgSend(v12, "initWithDomain:code:userInfo:", v13, 42, 0);

      v7 = v14;
      Promise.reject(_:)();
      swift_release(v9);
    }

  }
}

uint64_t sub_100351698(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003516B4(a1, a2, a3, (uint64_t)&unk_1004C5780, (uint64_t)sub_100364E00, (uint64_t)&unk_1004C5798);
}

uint64_t sub_1003516B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  id v19;
  _QWORD v21[5];
  _QWORD *v22;

  v10 = v6;
  sub_10003F544((uint64_t *)&unk_100565E60);
  v14 = Promise.__allocating_init()();
  v15 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v15 + 16, v10);
  v16 = (_QWORD *)swift_allocObject(a4, 56, 7);
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = v15;
  v16[6] = v14;
  v21[4] = a5;
  v22 = v16;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_100027AF8;
  v21[3] = a6;
  v17 = _Block_copy(v21);
  v18 = v22;
  v19 = a1;
  swift_bridgeObjectRetain(a3);
  swift_retain();
  objc_msgSend(v19, "performBlock:", v17, swift_release(v18).n128_f64[0]);
  _Block_release(v17);
  return v14;
}

void sub_1003517E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  NSString v6;
  id v7;
  uint64_t Strong;
  uint64_t v9;
  _BYTE v10[24];

  v5 = a4 + 16;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(a1, "podcastForUuid:", v6);

  swift_beginAccess(v5, v10, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v9 = Strong;
    sub_100362124(v7);
    swift_release(v9);
  }

}

void sub_100351884(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t updated;
  uint64_t v15;
  _BYTE v17[24];

  type metadata accessor for FeedUpdateResult(0);
  __chkstk_darwin();
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1)
  {
    swift_beginAccess(a3 + 16, v17, 0, 0);
    Strong = swift_weakLoadStrong(a3 + 16);
    if (Strong)
    {
      v11 = Strong;
      swift_retain();
      v12 = a1;
      sub_1003622A8(v12, a4, v11, a2);
      swift_release(a2);

      swift_release(v11);
    }
  }
  else
  {
    v13 = enum case for FeedUpdateError.missingPodcast(_:);
    updated = type metadata accessor for FeedUpdateError(0);
    v15 = *(_QWORD *)(updated - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v9, v13, updated);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v9, 0, 2, updated);
    Promise.resolve(_:)(v9);
    sub_100363F8C((uint64_t)v9);
  }
}

uint64_t sub_1003519B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  sub_10003F544((uint64_t *)&unk_100565E70);
  v7 = Promise.__allocating_init()();
  type metadata accessor for CoreDataFetcher(0);
  v8 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v8 + 16, v3);
  v9 = swift_allocObject(&unk_1004C5758, 33, 7);
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = v8;
  *(_BYTE *)(v9 + 32) = a3;
  swift_retain();
  v10 = swift_retain();
  static CoreDataFetcher.fetchPodcast(with:completion:)(a1, a2, sub_100365080, v9, v10);
  swift_release(v9);
  swift_release(v8);
  v15[3] = type metadata accessor for SyncTaskScheduler(0);
  v15[4] = &protocol witness table for SyncTaskScheduler;
  sub_1000242A8(v15);
  SyncTaskScheduler.init()();
  v11 = sub_10003F544((uint64_t *)&unk_100565E60);
  v12 = sub_10002F9C8(&qword_100565F78, (uint64_t *)&unk_100565E60, (uint64_t)&protocol conformance descriptor for Promise<A>);
  v13 = Promise.flatMap<A>(on:_:)(v15, sub_100351B24, 0, v11, v12);
  swift_release(v7);
  sub_10003D380(v15);
  return v13;
}

uint64_t sub_100351B24(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t updated;
  int v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;

  type metadata accessor for FeedUpdateResult(0);
  __chkstk_darwin();
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100364DB8(a1, (uint64_t)v3);
  updated = type metadata accessor for FeedUpdateError(0);
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v3, 2, updated);
  if (!v5)
  {
    sub_100363F8C((uint64_t)v3);
    goto LABEL_5;
  }
  if (v5 == 1)
  {
LABEL_5:
    sub_10003F544((uint64_t *)&unk_100565E60);
    v10 = 0;
    v6 = &v10;
    return Promise.__allocating_init(value:)(v6);
  }
  sub_10003F544((uint64_t *)&unk_100565E60);
  v9 = 1;
  v6 = &v9;
  return Promise.__allocating_init(value:)(v6);
}

void sub_100351BF8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t updated;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];

  type metadata accessor for FeedUpdateResult(0);
  __chkstk_darwin();
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (!a1)
  {
    v11 = enum case for FeedUpdateError.missingPodcast(_:);
    updated = type metadata accessor for FeedUpdateError(0);
    v13 = *(_QWORD *)(updated - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v7, v11, updated);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v7, 0, 2, updated);
    Promise.resolve(_:)(v7);
LABEL_7:
    sub_100363F8C((uint64_t)v7);
    return;
  }
  v8 = a1;
  if ((objc_msgSend(v8, "isImplicitlyFollowed") & 1) == 0)
  {
    v14 = enum case for FeedUpdateError.notImplicitlyFollowed(_:);
    v15 = type metadata accessor for FeedUpdateError(0);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v7, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v7, 0, 2, v15);
    Promise.resolve(_:)(v7);

    goto LABEL_7;
  }
  swift_beginAccess(a3 + 16, v18, 0, 0);
  Strong = swift_weakLoadStrong(a3 + 16);
  if (Strong)
  {
    v10 = Strong;
    swift_retain();
    sub_100362920(v8, 0x41u, v10, a2);
    swift_release(v10);

    swift_release(a2);
  }
  else
  {

  }
}

uint64_t sub_100351D98(uint64_t a1, char a2, void (*a3)(_QWORD *))
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t updated;
  uint64_t v11;
  uint64_t v13;

  type metadata accessor for FeedUpdateResult(0);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) != 0)
  {
    *v7 = a1;
    v9 = enum case for FeedUpdateError.feedUpdaterInternalError(_:);
    updated = type metadata accessor for FeedUpdateError(0);
    v11 = *(_QWORD *)(updated - 8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 104))(v7, v9, updated);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 2, updated);
    swift_errorRetain();
  }
  else
  {
    v8 = type metadata accessor for FeedUpdateError(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 2, 2, v8);
  }
  a3(v7);
  return sub_100363F8C((uint64_t)v7);
}

uint64_t sub_100351EA0(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  char *v32;
  int v33;
  void *v34;
  id v35;
  NSObject *v36;
  uint8_t *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t updated;
  char *v43;
  id v44;
  void (*v45)(char *, uint64_t);
  void *v46;
  void *v47;
  char *v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ObjectType;
  void (*v61)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  os_log_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *);
  uint64_t v81;
  double v82;
  char v83[8];
  char v84[32];

  v79 = a8;
  v80 = a3;
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v23 = (char *)&v68 - v22;
  type metadata accessor for FeedUpdateResult(0);
  __chkstk_darwin();
  if (!a2)
  {
    v73 = v23;
    v74 = v19;
    v77 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    v78 = a4;
    v75 = v21;
    v76 = a7;
    swift_beginAccess(a5 + 16, v84, 0, 0);
    Strong = swift_weakLoadStrong(a5 + 16);
    if (!Strong)
    {
      updated = type metadata accessor for FeedUpdateError(0);
      v43 = v77;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 56))(v77, 1, 2, updated);
      v80(v43);
LABEL_20:
      v29 = (uint64_t)v43;
      return sub_100363F8C(v29);
    }
    v72 = Strong;
    v31 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v32 = v73;
    static OS_os_log.feedUpdate.getter(v31);
    v33 = static os_log_type_t.default.getter();
    v34 = a1;
    v35 = a1;
    v36 = Logger.logObject.getter(v35);
    if (os_log_type_enabled(v36, (os_log_type_t)v33))
    {
      v69 = v33;
      v70 = v36;
      v71 = v31;
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v68 = swift_slowAlloc(32, -1);
      v82 = *(double *)&v68;
      *(_DWORD *)v37 = 136315138;
      if (a1)
      {
        v38 = objc_msgSend(v35, "description");
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v41 = v40;

      }
      else
      {
        v41 = 0xE500000000000000;
        v39 = 0x3E6C696E3CLL;
      }
      v81 = sub_10003D274(v39, v41, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v37 + 4, v37 + 12);

      v44 = v35;
      swift_bridgeObjectRelease(v41);
      v49 = v70;
      _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v69, "Bag time threshold loaded with value of %s seconds", v37, 0xCu);
      v50 = v68;
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v37, -1, -1);

      v45 = *(void (**)(char *, uint64_t))(v74 + 8);
      v45(v32, v18);
      v46 = a6;
      v48 = v75;
      v47 = v76;
      if (!v34)
        goto LABEL_13;
    }
    else
    {

      v44 = v35;
      v45 = *(void (**)(char *, uint64_t))(v74 + 8);
      v45(v32, v18);
      v46 = a6;
      v48 = v75;
      v47 = v76;
      if (!v34)
        goto LABEL_13;
    }
    v82 = 0.0;
    v83[0] = 1;
    static Double._conditionallyBridgeFromObjectiveC(_:result:)(v44, &v82);
    if (v83[0] != 1)
    {
      *(double *)&v52 = v82;
      goto LABEL_15;
    }
LABEL_13:
    objc_msgSend(v46, "libraryShowFetchThresholdDefaultValue", v68);
    v52 = v51;
LABEL_15:
    v53 = objc_msgSend(v47, "timeIntervalSinceNow", v68);
    v56 = fabs(v55);
    if (*(double *)&v52 < v56)
    {
      v57 = v72;
      v58 = *(_QWORD *)(v72 + 16);
      v59 = *(_QWORD *)(v72 + 24);
      ObjectType = swift_getObjectType(v58, v54);
      v61 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 24);
      swift_unknownObjectRetain(v58);
      v61(v79, a9, a10 & 1, 1, 8, a11, a12, ObjectType, v59);
      swift_release(v57);
      return swift_unknownObjectRelease(v58);
    }
    v63 = static OS_os_log.feedUpdate.getter(v53);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = swift_slowAlloc(22, -1);
      *(_DWORD *)v66 = 134218240;
      v82 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v66 + 4, v66 + 12);
      *(_WORD *)(v66 + 12) = 2048;
      v82 = *(double *)&v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v66 + 14, v66 + 22);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Skipping feed update because last one happened %f seconds ago, which is less than the min interval provided by MAPI %f seconds", (uint8_t *)v66, 0x16u);
      swift_slowDealloc(v66, -1, -1);
    }

    v45(v48, v18);
    v67 = type metadata accessor for FeedUpdateError(0);
    v43 = v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v77, 1, 2, v67);
    v80(v43);
    swift_release(v72);
    goto LABEL_20;
  }
  *(uint64_t *)((char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0)) = a2;
  v25 = enum case for FeedUpdateError.bagIntervalFetchFailure(_:);
  v26 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for FeedUpdateError(0);
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 104))(v26, v25, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v26, 0, 2, v27);
  swift_errorRetain();
  v80(v26);
  v29 = (uint64_t)v26;
  return sub_100363F8C(v29);
}

uint64_t sub_100352434()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  void (*v11)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v12;
  _QWORD v14[5];

  sub_10003F544((uint64_t *)&unk_100565E60);
  v1 = Promise.__allocating_init()();
  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v3 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 16), v4);
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
  v7 = swift_retain();
  v8 = NSNotificationCenter.weakObserver(for:using:)(v6, sub_100363F40, v1, v7);

  swift_release(v1);
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v10 = swift_retain();
  v14[3] = v9;
  v14[4] = &protocol witness table for OS_dispatch_queue;
  v14[0] = static OS_dispatch_queue.main.getter(v10);
  Promise.always(on:perform:)(v14, j_j___s8ShelfKit24WeakNotificationObserverC10invalidateyyF, v8);
  swift_release(v8);
  sub_10003D380(v14);
  v11 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, __n128))(v3 + 40);
  v12 = swift_retain();
  v11(sub_100363F5C, v1, ObjectType, v3, v12);
  swift_release(v8);
  swift_release(v1);
  return v1;
}

double sub_1003525A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  __CFString *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t Strong;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ObjectType;
  void *v52;
  void (*v53)(void *, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v54;
  double result;
  uint64_t v56;
  uint64_t inited;
  unint64_t v58;
  id v59;
  NSString v60;
  Class isa;
  id v62;
  id v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  _OWORD v72[2];
  __int128 v73;
  uint64_t v74;
  void *v75;
  void *v76;
  _BYTE v77[88];

  v10 = type metadata accessor for NSFastEnumerationIterator(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v65 - v14;
  if (a1)
  {
    v66 = a5 + 16;
    v76 = &_swiftEmptySetSingleton;
    v16 = a1;
    v17 = objc_msgSend(v16, "podcasts");
    v70 = a4;
    v69 = v16;
    v68 = v10;
    v67 = v11;
    if (v17)
    {
      v65 = v17;
      v18 = NSOrderedSet.makeIterator()();
      NSFastEnumerationIterator.next()(&v73, v18);
      while (v74)
      {
        sub_10013B9CC(&v73, v72);
        v24 = sub_100005EC8(0, (unint64_t *)&qword_100553810, MTPodcast_ptr);
        v23 = swift_dynamicCast(&v71, v72, (char *)&type metadata for Any + 8, v24, 6);
        if ((v23 & 1) != 0)
        {
          v25 = v71;
          v26 = objc_msgSend(v71, "uuid");
          if (v26)
          {
            v19 = v26;
            v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
            v22 = v21;

            sub_10002B270((uint64_t *)v72, v20, v22);
            swift_bridgeObjectRelease(*((_QWORD *)&v72[0] + 1));
          }
          else
          {

          }
        }
        NSFastEnumerationIterator.next()(&v73, v23);
      }
      (*(void (**)(char *, uint64_t))(v67 + 8))(v15, v68);

      a4 = v70;
      v16 = v69;
    }
    v27 = objc_msgSend(v16, "settings");
    if (v27)
    {
      v65 = v27;
      v28 = NSOrderedSet.makeIterator()();
      NSFastEnumerationIterator.next()(&v73, v28);
      while (v74)
      {
        sub_10013B9CC(&v73, v72);
        v30 = sub_100005EC8(0, &qword_100553DA0, MTPodcastPlaylistSettings_ptr);
        v29 = swift_dynamicCast(&v71, v72, (char *)&type metadata for Any + 8, v30, 6);
        if ((v29 & 1) != 0)
        {
          v31 = v71;
          v32 = objc_msgSend(v71, "podcast");
          if (v32
            && (v33 = v32, v34 = objc_msgSend(v32, "uuid"), v33, v34))
          {
            v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
            v37 = v36;

            objc_msgSend(v31, "setNeedsUpdate:", 1);
            sub_10002B270((uint64_t *)v72, v35, v37);

            swift_bridgeObjectRelease(*((_QWORD *)&v72[0] + 1));
          }
          else
          {

          }
        }
        NSFastEnumerationIterator.next()(&v73, v29);
      }
      (*(void (**)(char *, uint64_t))(v67 + 8))(v13, v68);

      a4 = v70;
      v16 = v69;
    }
    v38 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v39 = CFSTR("MTFeedUpdateDidEndUpdatingAllFeeds");
    v40 = swift_retain();
    v41 = NSNotificationCenter.weakObserver(for:using:)(v39, sub_100363F40, a4, v40);

    swift_release(a4);
    v42 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v43 = swift_retain();
    v44 = static OS_dispatch_queue.main.getter(v43);
    v74 = v42;
    v75 = &protocol witness table for OS_dispatch_queue;
    *(_QWORD *)&v73 = v44;
    Promise.always(on:perform:)(&v73, j___s8ShelfKit24WeakNotificationObserverC10invalidateyyF, v41);
    swift_release(v41);
    sub_10003D380(&v73);
    v45 = v66;
    swift_beginAccess(v66, &v73, 0, 0);
    Strong = swift_weakLoadStrong(v45);
    if (Strong)
    {
      v47 = Strong;
      v48 = *(_QWORD *)(Strong + 16);
      v49 = *(_QWORD *)(Strong + 24);
      swift_unknownObjectRetain(v48);
      swift_release(v47);
      ObjectType = swift_getObjectType(v48, v50);
      v52 = v76;
      v53 = *(void (**)(void *, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, __n128))(v49 + 32);
      v54 = swift_retain();
      v53(v52, 1, 9, sub_100363F5C, a4, ObjectType, v49, v54);
      swift_bridgeObjectRelease(v52);
      swift_release(a4);

      swift_unknownObjectRelease(v48);
      *(_QWORD *)&result = swift_release(v41).n128_u64[0];
    }
    else
    {
      v64 = v76;

      swift_release(v41);
      *(_QWORD *)&result = swift_bridgeObjectRelease(v64).n128_u64[0];
    }
  }
  else
  {
    v56 = sub_10003F544(&qword_1005654C0);
    inited = swift_initStackObject(v56, v77);
    *(_OWORD *)(inited + 16) = xmmword_1003CA200;
    *(_QWORD *)(inited + 32) = 0x556E6F6974617473;
    *(_QWORD *)(inited + 40) = 0xEB00000000646975;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = a2;
    *(_QWORD *)(inited + 56) = a3;
    swift_bridgeObjectRetain(a3);
    v58 = sub_1001386B4(inited);
    v59 = objc_allocWithZone((Class)NSError);
    v60 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v62 = objc_msgSend(v59, "initWithDomain:code:userInfo:", v60, 42, isa, swift_bridgeObjectRelease(v58).n128_f64[0]);

    v63 = v62;
    Promise.reject(_:)(v63);

  }
  return result;
}

uint64_t sub_100352BE4()
{
  uint64_t result;
  char v1;

  result = Promise.isResolved.getter();
  if ((result & 1) == 0)
  {
    v1 = 1;
    return Promise.resolve(_:)(&v1);
  }
  return result;
}

uint64_t sub_100352C20(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  if (!result)
  {
    v4 = v1;
    v5 = v2;
    result = Promise.isResolved.getter();
    if ((result & 1) == 0)
    {
      v3 = 0;
      return Promise.resolve(_:)(&v3);
    }
  }
  return result;
}

void sub_100352C60(void *a1, uint64_t updated, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  id v12;

  if (a1)
  {
    v12 = a1;
    v5 = MTPodcast.episodeUserFilter.getter();
    if ((_BYTE)v6 == 0xFF
      || (v7 = v5,
          v8 = v6,
          sub_100168F7C(updated, a3),
          v9 = static EpisodeUserFilter.== infix(_:_:)(v7, v8, updated, a3),
          sub_1001691E8(updated, a3),
          sub_100363E50(v7, v8),
          (v9 & 1) == 0))
    {
      sub_100168F7C(updated, a3);
    }
    else
    {
      updated = EpisodeUserFilter.flipUpdateState.getter(updated, a3);
      a3 = v10;
    }
    sub_100168F7C(updated, a3);
    MTPodcast.episodeUserFilter.setter(updated, a3);
    v11 = objc_msgSend(v12, "managedObjectContext");
    objc_msgSend(v11, "saveInCurrentBlock");
    sub_1001691E8(updated, a3);

  }
}

void sub_100352D80(void *a1, uint64_t a2)
{
  id v3;
  id v4;

  if (a1)
  {
    v4 = a1;
    objc_msgSend(v4, "setShowTypeSetting:", a2);
    v3 = objc_msgSend(v4, "managedObjectContext");
    objc_msgSend(v3, "saveInCurrentBlock");

  }
}

void sub_100352DF4()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v1 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v2 = objc_msgSend(v1, "privateQueueContext");

  v3 = swift_allocObject(&unk_1004C5708, 32, 7);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v0;
  v7[4] = sub_100364DA0;
  v8 = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100027AF8;
  v7[3] = &unk_1004C5720;
  v4 = _Block_copy(v7);
  v5 = v8;
  v6 = v2;
  swift_retain();
  objc_msgSend(v6, "performBlock:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);

}

void sub_100352EF4(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint8_t *v28;
  __n128 v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ObjectType;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  __int128 v81;
  _QWORD *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  char *v87;
  void (*v88)(char *, uint64_t, __n128);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v90 = a2;
  v85 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin();
  v5 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v89 = (char *)&v79 - v6;
  __chkstk_darwin();
  v87 = (char *)&v79 - v7;
  __chkstk_darwin();
  v9 = (char *)&v79 - v8;
  __chkstk_darwin();
  v11 = (char *)&v79 - v10;
  v12 = (void *)kMTPodcastEntityName;
  v13 = (void *)objc_opt_self(MTPodcast);
  v14 = v12;
  v15 = objc_msgSend(v13, "predicateForRecentlyUnfollowed");
  isa = Array._bridgeToObjectiveC()().super.isa;
  v86 = a1;
  v17 = objc_msgSend(a1, "objectsInEntity:predicate:sortDescriptors:", v14, v15, isa);

  if (v17
    && (v19 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr),
        v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v19),
        v17,
        v21 = (uint64_t)sub_10034E724(v20, MTPodcast_ptr),
        swift_bridgeObjectRelease(v20),
        v21))
  {
    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0)
        v78 = v21;
      else
        v78 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      v22 = _CocoaArrayWrapper.endIndex.getter(v78);
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v23 = v85;
    if (v22 < 1)
    {
      swift_bridgeObjectRelease(v21);
      v35 = static Logger.podcastsStatesCoordination.getter(v34);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "No recently unfollowed shows to follow.", v38, 2u);
        swift_slowDealloc(v38, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v23);
    }
    else
    {
      static Logger.podcastsStatesCoordination.getter(v18);
      swift_bridgeObjectRetain(v21);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v27 = 134217984;
        v91 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease(v21);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Refollowing %ld recently unfollowed shows.", v27, 0xCu);
        v28 = v27;
        v23 = v85;
        swift_slowDealloc(v28, -1, -1);

      }
      else
      {

        v29 = swift_bridgeObjectRelease(v21);
      }
      v88 = *(void (**)(char *, uint64_t, __n128))(v3 + 8);
      v88(v9, v23, v29);
      if ((unint64_t)v21 >> 62)
      {
        if (v21 < 0)
          v41 = v21;
        else
          v41 = v21 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v21);
        v39 = _CocoaArrayWrapper.endIndex.getter(v41);
        swift_bridgeObjectRelease(v21);
        v40 = v90;
        if (!v39)
          goto LABEL_41;
      }
      else
      {
        v39 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
        v40 = v90;
        if (!v39)
        {
LABEL_41:
          swift_bridgeObjectRelease(v21);
          return;
        }
      }
      v42 = objc_opt_self(PFRestrictionsUtil);
      if (v39 >= 1)
      {
        v44 = (void *)v42;
        v45 = 0;
        v82 = (_QWORD *)(v40 + 184);
        v46 = v21 & 0xC000000000000001;
        *(_QWORD *)&v43 = 136315138;
        v81 = v43;
        v80 = (char *)&type metadata for Any + 8;
        v83 = v21 & 0xC000000000000001;
        v84 = (void *)v42;
        do
        {
          if (v46)
            v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, v21);
          else
            v47 = *(id *)(v21 + 8 * v45 + 32);
          v48 = v47;
          if ((objc_msgSend(v44, "isExplicitContentAllowed") & 1) != 0
            || (objc_msgSend(v48, "isExplicit") & 1) == 0)
          {
            v49 = objc_msgSend(v48, "uuid");
            if (v49)
            {
              v50 = v49;
              v51 = v21;
              v52 = v39;
              v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
              v55 = v54;

              v56 = *(_QWORD *)(v90 + 208);
              v57 = *(_QWORD *)(v90 + 216);
              sub_10003A834(v82, v56);
              v58 = v56;
              v59 = v90;
              dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeEnableSubscription(onPodcastUUID:from:context:)(v53, v55, 3, v86, v58, v57);
              sub_100005EC8(0, (unint64_t *)&qword_100561290, UITraitCollection_ptr);
              if ((static UITraitCollection.interfaceIdiomIsMac.getter() & 1) == 0)
              {
                v61 = *(_QWORD *)(v59 + 168);
                ObjectType = swift_getObjectType(*(_QWORD *)(v59 + 160), v60);
                dispatch thunk of MTNotificationManagerProtocol.canPromptForNotificationPermissionsWithPreWarmSheet()(ObjectType, v61);
              }
              v63 = *(_QWORD *)(v59 + 168);
              v64 = swift_getObjectType(*(_QWORD *)(v59 + 160), v60);
              v65 = dispatch thunk of MTNotificationManagerProtocol.requestNotificationPermissionsWithPreWarmSheetIfNeeded()(v64, v63);
              v66 = v89;
              static Logger.podcastsStatesCoordination.getter(v65);
              swift_bridgeObjectRetain(v55);
              v68 = Logger.logObject.getter(v67);
              v69 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v68, v69))
              {
                v70 = swift_slowAlloc(12, -1);
                v71 = swift_slowAlloc(32, -1);
                v91 = v71;
                *(_DWORD *)v70 = v81;
                swift_bridgeObjectRetain(v55);
                *(_QWORD *)(v70 + 4) = sub_10003D274(v53, v55, &v91);
                swift_bridgeObjectRelease_n(v55, 3);
                _os_log_impl((void *)&_mh_execute_header, v68, v69, "Followed show with uuid %s.", (uint8_t *)v70, 0xCu);
                swift_arrayDestroy(v71, 1, v80);
                v72 = v71;
                v23 = v85;
                swift_slowDealloc(v72, -1, -1);
                swift_slowDealloc(v70, -1, -1);

                v73 = v89;
              }
              else
              {

                swift_bridgeObjectRelease_n(v55, 2);
                v73 = v66;
              }
              ((void (*)(char *, uint64_t))v88)(v73, v23);
              v39 = v52;
              v21 = v51;
              v46 = v83;
              v44 = v84;
            }
            else
            {
              v74 = static Logger.podcastsStatesCoordination.getter(0);
              v75 = Logger.logObject.getter(v74);
              v76 = static os_log_type_t.error.getter(v75);
              if (os_log_type_enabled(v75, v76))
              {
                v77 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v77 = 0;
                _os_log_impl((void *)&_mh_execute_header, v75, v76, "Missing UUID when re-following show.", v77, 2u);
                swift_slowDealloc(v77, -1, -1);
              }

              ((void (*)(char *, uint64_t))v88)(v87, v23);
            }
          }
          else
          {
            objc_msgSend((id)objc_opt_self(MTRestrictionsUtil), "presentExplicitRestrictionAlertIfNeededOfType:actionCompletion:", 1, 0);

          }
          ++v45;
        }
        while (v39 != v45);
        goto LABEL_41;
      }
      __break(1u);
    }
  }
  else
  {
    v30 = static Logger.podcastsStatesCoordination.getter(v18);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to fetch recently unfollowed shows", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v85);
  }
}

void sub_10035369C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  Class isa;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  __n128 v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v41 - v6;
  __chkstk_darwin();
  v9 = (char *)&v41 - v8;
  v10 = (void *)kMTPodcastEntityName;
  v11 = (void *)objc_opt_self(MTPodcast);
  v12 = v10;
  v13 = objc_msgSend(v11, "predicateForRecentlyUnfollowed");
  isa = Array._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(a1, "objectsInEntity:predicate:sortDescriptors:", v12, v13, isa);

  if (!v15
    || (v17 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr),
        v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v17),
        v15,
        v19 = (uint64_t)sub_10034E724(v18, MTPodcast_ptr),
        swift_bridgeObjectRelease(v18),
        !v19))
  {
    v26 = static Logger.podcastsStatesCoordination.getter(v16);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to fetch recently unfollowed shows", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    return;
  }
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v35 = v19;
    else
      v35 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v20 = _CocoaArrayWrapper.endIndex.getter(v35);
    swift_bridgeObjectRelease(v19);
    if (v20 >= 1)
      goto LABEL_5;
LABEL_29:
    swift_bridgeObjectRelease(v19);
    v37 = static Logger.podcastsStatesCoordination.getter(v36);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "No recently unfollowed shows to delete.", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return;
  }
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v20 < 1)
    goto LABEL_29;
LABEL_5:
  static Logger.podcastsStatesCoordination.getter(v16);
  swift_bridgeObjectRetain(v19);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v24 = 134217984;
    v42 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Deleting %ld recently unfollowed shows.", v24, 0xCu);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    v25 = swift_bridgeObjectRelease(v19);
  }
  (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v7, v2, v25);
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v31 = v19;
    else
      v31 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v30 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v19);
    if (!v30)
      goto LABEL_24;
  }
  else
  {
    v30 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v30)
    {
LABEL_24:
      objc_msgSend(a1, "saveInCurrentBlock", swift_bridgeObjectRelease(v19).n128_f64[0]);
      return;
    }
  }
  if (v30 >= 1)
  {
    for (i = 0; i != v30; ++i)
    {
      if ((v19 & 0xC000000000000001) != 0)
        v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v19);
      else
        v33 = *(id *)(v19 + 8 * i + 32);
      v34 = v33;
      objc_msgSend(v33, "setLastUnfollowedDate:", 0.0);

    }
    goto LABEL_24;
  }
  __break(1u);
}

void sub_100353B10(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;
  NSString v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  double v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  __chkstk_darwin();
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)&v40 - v9;
  __chkstk_darwin();
  v12 = (char *)&v40 - v11;
  v13 = (void *)kMTPodcastEntityName;
  v14 = (void *)objc_opt_self(MTPodcast);
  v15 = v13;
  v41 = a2;
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v14, "predicateForPodcastUUID:", v16);

  v40 = a1;
  v18 = objc_msgSend(a1, "objectInEntity:predicate:", v15, v17);

  if (v18)
  {
    v20 = objc_opt_self(MTPodcast);
    v21 = (void *)swift_dynamicCastObjCClass(v18, v20);
    if (v21)
    {
      v22 = v21;
      v23 = objc_msgSend(v21, "lastUnfollowedDate");
      if (v24 <= 0.0)
      {
        static Logger.podcastsStatesCoordination.getter(v23);
        v35 = swift_bridgeObjectRetain_n(a3, 2);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.error.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(12, -1);
          v39 = swift_slowAlloc(32, -1);
          v45 = v39;
          *(_DWORD *)v38 = 136315138;
          swift_bridgeObjectRetain(a3);
          v44 = sub_10003D274(v41, a3, &v45);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v38 + 4, v38 + 12);
          swift_bridgeObjectRelease_n(a3, 3);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Show %s is not recently unfollowed. Not deleting.", v38, 0xCu);
          swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v38, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a3, 2);
        }

        (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v43);
      }
      else
      {
        static Logger.podcastsStatesCoordination.getter(v23);
        v25 = swift_bridgeObjectRetain_n(a3, 2);
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc(12, -1);
          v29 = swift_slowAlloc(32, -1);
          v45 = v29;
          *(_DWORD *)v28 = 136315138;
          swift_bridgeObjectRetain(a3);
          v44 = sub_10003D274(v41, a3, &v45);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v28 + 4, v28 + 12);
          swift_bridgeObjectRelease_n(a3, 3);
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Deleting recently unfollowed show: %s", v28, 0xCu);
          swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v29, -1, -1);
          swift_slowDealloc(v28, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a3, 2);
        }
        (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v43);
        objc_msgSend(v22, "setLastUnfollowedDate:", 0.0);
        objc_msgSend(v40, "saveInCurrentBlock");

      }
      return;
    }

  }
  static Logger.podcastsStatesCoordination.getter(v19);
  v30 = swift_bridgeObjectRetain_n(a3, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v45 = v34;
    *(_DWORD *)v33 = 136315138;
    swift_bridgeObjectRetain(a3);
    v44 = sub_10003D274(v41, a3, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to fetch recently unfollowed show: %s", v33, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v43);
}

uint64_t sub_100354068(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSString v12;
  id v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  _BYTE v19[24];

  v8 = type metadata accessor for StationSortOrder(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(a1, "playlistForUuid:", v12);

  if (!v13)
  {
    v16 = 0;
LABEL_16:
    result = swift_beginAccess(a4 + 16, v19, 1, 0);
    *(_BYTE *)(a4 + 16) = v16;
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a5, v8);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v14 == enum case for StationSortOrder.library(_:))
  {
    v15 = 0;
LABEL_15:
    objc_msgSend(v13, "setContainerOrder:", v15);
    v16 = 1;
    objc_msgSend(v13, "setNeedsUpdate:", 1);

    goto LABEL_16;
  }
  if (v14 == enum case for StationSortOrder.mostRecent(_:))
  {
    v15 = 1;
    goto LABEL_15;
  }
  if (v14 == enum case for StationSortOrder.manual(_:))
  {
    v15 = 2;
    goto LABEL_15;
  }
  if (v14 == enum case for StationSortOrder.oldest(_:))
  {
    v15 = 3;
    goto LABEL_15;
  }
  if (v14 == enum case for StationSortOrder.showTitle(_:))
  {
    v15 = 4;
    goto LABEL_15;
  }
  if (v14 == enum case for StationSortOrder.showTitleAscending(_:))
  {
    v15 = 5;
    goto LABEL_15;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x206E776F6E6B6E55, 0xEC00000065707974, "Podcasts/StationSortOrder+MTPlaylistContainerOrder.swift", 56, 2, 67, 0);
  __break(1u);
  return result;
}

void sub_100354290(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSString v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __n128 v24;
  void *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v38;
  id v39;
  id v40;
  _OWORD v41[2];
  __int128 aBlock;
  uint64_t (*v43)(uint64_t);
  void *v44;
  void (*v45)();
  uint64_t v46;

  LODWORD(v35) = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v37 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NSFastEnumerationIterator(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = String._bridgeToObjectiveC()();
  v36 = a1;
  v39 = objc_msgSend(a1, "playlistForUuid:", v15);

  if (v39)
  {
    v34 = v9;
    v16 = objc_msgSend(v39, "defaultSettings");
    if (v16)
    {
      v17 = v16;
      v32 = v8;
      v33 = v6;
      objc_msgSend(v16, "setShowPlayedEpisodes:", (v35 & 1) == 0);
      objc_msgSend(v39, "setNeedsUpdate:", 1);
      v18 = objc_msgSend(v39, "settings");
      if (v18)
      {
        v19 = v18;
        v35 = v5;
        v20 = NSOrderedSet.makeIterator()();
        NSFastEnumerationIterator.next()(&aBlock, v20);
        while (v44)
        {
          sub_10013B9CC(&aBlock, v41);
          v21 = sub_100005EC8(0, &qword_100553DA0, MTPodcastPlaylistSettings_ptr);
          v22 = swift_dynamicCast(&v40, v41, (char *)&type metadata for Any + 8, v21, 6);
          if ((v22 & 1) != 0)
          {
            v23 = v40;
            objc_msgSend(v40, "takeValuesFromDefaultSettings:", v17);

          }
          NSFastEnumerationIterator.next()(&aBlock, v22);
        }
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);

        v5 = v35;
      }
      objc_msgSend(v36, "saveInCurrentBlock");
      sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
      v25 = (void *)static OS_dispatch_queue.main.getter(v24);
      v45 = sub_100354684;
      v46 = 0;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v43 = sub_100027AF8;
      v44 = &unk_1004C4B90;
      v26 = _Block_copy(&aBlock);
      v27 = v37;
      static DispatchQoS.unspecified.getter(v26);
      *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
      v28 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v29 = sub_10003F544((uint64_t *)&unk_10055B200);
      v30 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
      v31 = v32;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v29, v30, v5, v28);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v31, v26);

      _Block_release(v26);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v5);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v34);
    }
    else
    {

    }
  }
}

void sub_100354684()
{
  uint64_t v0;
  id v1;

  v0 = type metadata accessor for SyncKeysRepository(0);
  v1 = (id)static SyncKeysRepository.shared.getter(v0);
  SyncKeysRepository.isPlaylistSyncDirty.setter(1);

}

uint64_t sub_1003546CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  _QWORD v19[5];
  _QWORD *v20;

  v9 = swift_allocObject(&unk_1004C4BC8, 17, 7);
  *(_BYTE *)(v9 + 16) = 0;
  v10 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v11 = objc_msgSend(v10, "mainOrPrivateContext");

  v12 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v12 + 16, v4);
  v13 = (_QWORD *)swift_allocObject(&unk_1004C56B8, 72, 7);
  v13[2] = v11;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a1;
  v13[6] = a2;
  v13[7] = v9;
  v13[8] = v12;
  v19[4] = sub_100364D60;
  v20 = v13;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100027AF8;
  v19[3] = &unk_1004C56D0;
  v14 = _Block_copy(v19);
  v15 = v20;
  v16 = v11;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  swift_retain();
  objc_msgSend(v16, "performBlockAndWaitWithSave:", v14, swift_release(v15).n128_f64[0]);

  _Block_release(v14);
  swift_beginAccess(v9 + 16, v19, 0, 0);
  v17 = *(unsigned __int8 *)(v9 + 16);
  swift_release(v9);
  return v17;
}

uint64_t sub_10035487C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  NSString v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  char v23;
  uint64_t *v24;
  uint64_t result;
  uint64_t v26;
  _BYTE v27[24];

  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(a1, "playlistForUuid:", v12);

  if (!v13)
    goto LABEL_6;
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(a1, "episodeForUuid:", v14);

  if (!v15)
  {

LABEL_6:
    v23 = 0;
    v24 = (uint64_t *)v27;
    goto LABEL_9;
  }
  v16 = a7 + 16;
  objc_msgSend(v13, "removeEpisode:", v15);
  objc_msgSend(v13, "setNeedsUpdate:", 1);
  swift_beginAccess(v16, v27, 0, 0);
  Strong = swift_weakLoadStrong(v16);
  if (Strong)
  {
    v18 = Strong;
    v19 = *(_QWORD *)(Strong + 88);
    v20 = *(_QWORD *)(Strong + 96);
    swift_unknownObjectRetain(v19);
    swift_release(v18);
    ObjectType = swift_getObjectType(v19, v21);
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v20 + 8))(a2, a3, a1, ObjectType, v20);

    swift_unknownObjectRelease(v19);
  }
  else
  {

  }
  v23 = 1;
  v24 = &v26;
LABEL_9:
  result = swift_beginAccess(a6 + 16, v24, 1, 0);
  *(_BYTE *)(a6 + 16) = v23;
  return result;
}

void sub_100354A18(void *a1)
{
  __n128 v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  _QWORD v14[2];

  if (a1)
  {
    v13 = a1;
    MTPodcast.adamId.getter(v1);
    if ((v2 & 1) == 0)
    {
      v3 = sub_100030584();
      v4 = BinaryInteger.description.getter(&type metadata for UInt64, v3);
      v6 = v5;
      v14[0] = v4;
      v14[1] = v5;
      Promise.resolve(_:)(v14);
      swift_bridgeObjectRelease(v6);

      return;
    }
    v10 = objc_allocWithZone((Class)NSError);
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v10, "initWithDomain:code:userInfo:", v11, 42, 0);

    Promise.reject(_:)(v12);
  }
  else
  {
    v7 = objc_allocWithZone((Class)NSError);
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "initWithDomain:code:userInfo:", v8, 42, 0);

    v13 = v9;
    Promise.reject(_:)(v13);

  }
}

void sub_100354B90(void *a1)
{
  id v1;
  __n128 v2;
  void *v3;
  char v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  NSString v14;
  id v15;
  id v16;
  _QWORD v17[2];

  if (a1)
  {
    v16 = a1;
    v1 = objc_msgSend(v16, "podcast");
    if (v1)
    {
      v3 = v1;
      MTPodcast.adamId.getter(v2);
      v5 = v4;

      if ((v5 & 1) == 0)
      {
        v6 = sub_100030584();
        v7 = BinaryInteger.description.getter(&type metadata for UInt64, v6);
        v9 = v8;
        v17[0] = v7;
        v17[1] = v8;
        Promise.resolve(_:)(v17);
        swift_bridgeObjectRelease(v9);

        return;
      }
    }
    v10 = objc_allocWithZone((Class)NSError);
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v10, "initWithDomain:code:userInfo:", v11, 42, 0);

    Promise.reject(_:)(v12);
  }
  else
  {
    v13 = objc_allocWithZone((Class)NSError);
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend(v13, "initWithDomain:code:userInfo:", v14, 42, 0);

    v16 = v15;
    Promise.reject(_:)(v16);

  }
}

void sub_100354D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __n128 v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  __int128 v59;
  __int128 v60;

  v10 = v9;
  v56 = a2;
  v57 = a7;
  v49 = a6;
  v52 = a4;
  v55 = a1;
  v13 = type metadata accessor for MetricsData(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100565F70);
  __chkstk_darwin();
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MetricsActivity(0);
  v20 = (void *)static MetricsActivity.shared.getter(v19);
  v21 = MetricsActivity.currentPageFields.getter();

  v48 = v13;
  if (!v21)
  {
    v59 = 0u;
    v60 = 0u;
    goto LABEL_9;
  }
  if (!*(_QWORD *)(v21 + 16) || (v22 = sub_10002E5D8(0x6F43646572616873, 0xED0000746E65746ELL), (v23 & 1) == 0))
  {
    v59 = 0u;
    v60 = 0u;
    swift_bridgeObjectRelease(v21);
    goto LABEL_9;
  }
  sub_10003D344(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v59);
  swift_bridgeObjectRelease(v21);
  if (!*((_QWORD *)&v60 + 1))
  {
LABEL_9:
    v24 = sub_100007A28((uint64_t)&v59, (uint64_t *)&unk_100552300);
    goto LABEL_10;
  }
  v24 = swift_dynamicCast(&v58, &v59, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  if ((_DWORD)v24)
  {
    v25 = v58;
    goto LABEL_11;
  }
LABEL_10:
  v25 = 0;
LABEL_11:
  v26 = MetricsLabel.rawValue.getter(v24);
  v28 = v27;
  v46 = v16;
  v47 = v14;
  v53 = a8;
  v54 = v10;
  v51 = v25;
  v50 = v26;
  v29 = a5;
  if (a8)
  {
    v30 = a8;
  }
  else
  {
    v57 = static MetricsTargetType.button.getter();
    v30 = v31;
  }
  v32 = v49;
  v33 = v49;
  if (!v49)
  {
    v33 = v56;
    swift_bridgeObjectRetain(v56);
    v29 = v55;
  }
  type metadata accessor for ClickMetricsEvent(0);
  v34 = type metadata accessor for MetricsPageType(0);
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v18, v52, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v18, 0, 1, v34);
  swift_bridgeObjectRetain(v53);
  v36 = swift_bridgeObjectRetain(v32);
  v37 = static ClickMetricsEvent.makeClickEvent(targetId:actionType:targetType:channelAdamId:pageId:pageType:sharedPage:location:)(v55, v56, v50, v28, v57, v30, 0, 0, v36, v29, v33, v18, (_BYTE)v51, a9);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v33);
  v38 = sub_100007A28((uint64_t)v18, &qword_100565F70);
  v39 = *(_QWORD *)(v54 + 176);
  if (v39)
  {
    v40 = swift_retain();
    v41 = v46;
    dispatch thunk of MetricsEvent.metricsData.getter(v40);
    MetricsController.process(_:)(v41);
    swift_release(v37);
    v42 = swift_release(v39);
    (*(void (**)(char *, uint64_t, __n128))(v47 + 8))(v41, v48, v42);
  }
  else
  {
    v43 = static os_log_type_t.error.getter(v38);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v44 = (void *)static OS_os_log.metrics.getter();
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "Metrics controller is not set.", 30, 2, _swiftEmptyArrayStorage);
    swift_release(v37);

  }
}

uint64_t sub_1003550A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[6];

  v46 = a3;
  v53 = a7;
  v54 = a8;
  v51 = a5;
  v52 = a6;
  v43 = a1;
  v44 = a2;
  v47 = a4;
  v48 = a9;
  v9 = sub_10003F544(&qword_100565F60);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v10;
  __chkstk_darwin();
  v55 = (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MetricsPageType(0);
  v13 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin();
  v42 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MetricsLabel(0);
  v16 = *(_QWORD *)(v15 - 8);
  v39 = v15;
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin();
  v40 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100565F68);
  v18 = Promise.__allocating_init()();
  type metadata accessor for CoreDataFetcher(0);
  v19 = swift_retain();
  static CoreDataFetcher.fetchEpisode(with:completion:)(v43, v44, sub_100364ADC, v18, v19);
  swift_release(v18);
  v20 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v20 + 16, v45);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v46, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v47, v12);
  sub_100007A64(v48, v55, &qword_100565F60);
  v21 = *(unsigned __int8 *)(v16 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = *(unsigned __int8 *)(v13 + 80);
  v24 = (v17 + v23 + v22) & ~v23;
  v25 = (v14 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(unsigned __int8 *)(v49 + 80);
  v28 = (v27 + v26 + 16) & ~v27;
  v29 = swift_allocObject(&unk_1004C5690, v28 + v50, v21 | v23 | v27 | 7);
  *(_QWORD *)(v29 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v29 + v22, v40, v39);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v29 + v24, v42, v41);
  v30 = (_QWORD *)(v29 + v25);
  v31 = v52;
  *v30 = v51;
  v30[1] = v31;
  v32 = (_QWORD *)(v29 + v26);
  v33 = v54;
  *v32 = v53;
  v32[1] = v33;
  sub_10003DC78(v55, v29 + v28, &qword_100565F60);
  v34 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  swift_bridgeObjectRetain(v33);
  v35 = swift_bridgeObjectRetain(v31);
  v36 = static OS_dispatch_queue.main.getter(v35);
  v56[3] = v34;
  v56[4] = &protocol witness table for OS_dispatch_queue;
  v56[0] = v36;
  Promise.then(perform:orCatchError:on:)(sub_100364AD8, v29, sub_1003553A8, 0, v56);
  swift_release(v29);
  swift_release(v18);
  return sub_10003D380(v56);
}

uint64_t sub_1003553AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[6];

  v46 = a3;
  v53 = a7;
  v54 = a8;
  v51 = a5;
  v52 = a6;
  v43 = a1;
  v44 = a2;
  v47 = a4;
  v48 = a9;
  v9 = sub_10003F544(&qword_100565F60);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v10;
  __chkstk_darwin();
  v55 = (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MetricsPageType(0);
  v13 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin();
  v42 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MetricsLabel(0);
  v16 = *(_QWORD *)(v15 - 8);
  v39 = v15;
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin();
  v40 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100565F68);
  v18 = Promise.__allocating_init()();
  type metadata accessor for CoreDataFetcher(0);
  v19 = swift_retain();
  static CoreDataFetcher.fetchPodcast(with:completion:)(v43, v44, sub_100364ACC, v18, v19);
  swift_release(v18);
  v20 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v20 + 16, v45);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v46, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v47, v12);
  sub_100007A64(v48, v55, &qword_100565F60);
  v21 = *(unsigned __int8 *)(v16 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = *(unsigned __int8 *)(v13 + 80);
  v24 = (v17 + v23 + v22) & ~v23;
  v25 = (v14 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(unsigned __int8 *)(v49 + 80);
  v28 = (v27 + v26 + 16) & ~v27;
  v29 = swift_allocObject(&unk_1004C5668, v28 + v50, v21 | v23 | v27 | 7);
  *(_QWORD *)(v29 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v29 + v22, v40, v39);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v29 + v24, v42, v41);
  v30 = (_QWORD *)(v29 + v25);
  v31 = v52;
  *v30 = v51;
  v30[1] = v31;
  v32 = (_QWORD *)(v29 + v26);
  v33 = v54;
  *v32 = v53;
  v32[1] = v33;
  sub_10003DC78(v55, v29 + v28, &qword_100565F60);
  v34 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  swift_bridgeObjectRetain(v33);
  v35 = swift_bridgeObjectRetain(v31);
  v36 = static OS_dispatch_queue.main.getter(v35);
  v56[3] = v34;
  v56[4] = &protocol witness table for OS_dispatch_queue;
  v56[0] = v36;
  Promise.then(perform:orCatchError:on:)(sub_100364AD8, v29, sub_1003553A8, 0, v56);
  swift_release(v29);
  swift_release(v18);
  return sub_10003D380(v56);
}

double sub_1003556AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Strong;
  double result;
  uint64_t v20;
  _BYTE v21[24];

  v15 = *a1;
  v16 = a1[1];
  v17 = a2 + 16;
  swift_beginAccess(a2 + 16, v21, 0, 0);
  Strong = swift_weakLoadStrong(v17);
  if (Strong)
  {
    v20 = Strong;
    sub_100354D2C(v15, v16, a3, a4, a5, a6, a7, a8, a9);
    *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  }
  return result;
}

void sub_100355768(uint64_t a1)
{
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  NSObject *log;
  uint64_t v9;
  _QWORD v10[3];
  _BYTE v11[8];
  uint64_t v12;

  v2 = static os_log_type_t.error.getter(a1);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  log = static OS_os_log.metrics.getter();
  if (os_log_type_enabled(log, v2))
  {
    swift_errorRetain();
    swift_errorRetain();
    v3 = (uint8_t *)swift_slowAlloc(12, -1);
    v4 = swift_slowAlloc(32, -1);
    v12 = v4;
    *(_DWORD *)v3 = 136315138;
    swift_getErrorValue(a1, v11, v10);
    v5 = Error.localizedDescription.getter(v10[1], v10[2]);
    v7 = v6;
    v9 = sub_10003D274(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, v10, v3 + 4, v3 + 12);
    swift_bridgeObjectRelease(v7);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v2, "%s", v3, 0xCu);
    swift_arrayDestroy(v4, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

double sub_10035590C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = v1;
    v5 = (void *)objc_opt_self(MTDB);
    v6 = (_QWORD *)(v1 + 184);
    swift_bridgeObjectRetain(a1);
    v15 = a1;
    v7 = (_QWORD *)(a1 + 40);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      v10 = objc_msgSend(v5, "sharedInstance", swift_bridgeObjectRetain(*v7).n128_f64[0]);
      v11 = objc_msgSend(v10, "mainOrPrivateContext");

      v12 = *(_QWORD *)(v3 + 208);
      v13 = *(_QWORD *)(v3 + 216);
      sub_10003A834(v6, v12);
      dispatch thunk of PodcastsStateCoordinatorProtocol.downloadEpisode(withUUID:isFromSaving:from:in:)(v8, v9, 0, 3, v11, v12, v13);
      swift_bridgeObjectRelease(v9);

      v7 += 2;
      --v2;
    }
    while (v2);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v15).n128_u64[0];
  }
  return result;
}

void sub_100355A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  _QWORD v11[5];
  _QWORD *v12;

  v2 = v1;
  v4 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v5 = objc_msgSend(v4, "importContext");

  v6 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v6 + 16, v2);
  v7 = (_QWORD *)swift_allocObject(&unk_1004C5618, 40, 7);
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = v5;
  v11[4] = sub_100364AC0;
  v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100027AF8;
  v11[3] = &unk_1004C5630;
  v8 = _Block_copy(v11);
  v9 = v12;
  swift_bridgeObjectRetain(a1);
  v10 = v5;
  objc_msgSend(v10, "performBlock:", v8, swift_release(v9).n128_f64[0]);
  _Block_release(v8);

}

double sub_100355B68(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t Strong;
  double result;
  _QWORD *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE v18[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v18, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v8 = (_QWORD *)Strong;
    v9 = a3;
    v10 = sub_1003613EC(a2, (uint64_t)v9);

    v17 = v10;
    v11 = v10[2];
    if (v11)
    {
      v12 = v10 + 5;
      do
      {
        v13 = *(v12 - 1);
        v14 = *v12;
        v15 = v8[26];
        v16 = v8[27];
        sub_10003A834(v8 + 23, v15);
        swift_bridgeObjectRetain(v14);
        dispatch thunk of PodcastsStateCoordinatorProtocol.downloadEpisode(withUUID:isFromSaving:from:in:)(v13, v14, 0, 3, v9, v15, v16);
        swift_bridgeObjectRelease(v14);
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    swift_release(v8);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v17).n128_u64[0];
  }
  return result;
}

double sub_100355C78(uint64_t a1)
{
  uint64_t v1;
  id v2;
  double result;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", a1);
  if (v2)
  {
    v4 = v2;
    v5 = objc_msgSend(*(id *)(v1 + 48), "downloadManager");
    v6 = objc_msgSend(v5, "episodeUuidForDownloadWithAdamID:", v4);
    v7 = swift_unknownObjectRelease(v5);
    if (v6)
    {
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v10 = v9;

      v11 = *(_QWORD *)(v1 + 208);
      v12 = *(_QWORD *)(v1 + 216);
      sub_10003A834((_QWORD *)(v1 + 184), v11);
      dispatch thunk of PodcastsStateCoordinatorProtocol.cancelDownload(forEpisodeWithUUID:userInitiated:from:)(v8, v10, 1, 3, v11, v12);
    }
    else
    {
      v13 = static os_log_type_t.error.getter(v7);
      v14 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v15 = static OS_os_log.downloads.getter(v14);
      v16 = sub_10003F544(&qword_1005559A0);
      v10 = swift_allocObject(v16, 72, 7);
      *(_OWORD *)(v10 + 16) = xmmword_1003CA200;
      v17 = objc_msgSend(v4, "description");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      *(_QWORD *)(v10 + 56) = &type metadata for String;
      *(_QWORD *)(v10 + 64) = sub_10003E198();
      *(_QWORD *)(v10 + 32) = v18;
      *(_QWORD *)(v10 + 40) = v20;
      os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v15, "Unable to cancel download with adamId %{public}s, episode with matching uuid not found in download manager.", 107, 2, v10);

      v4 = (void *)v15;
    }

    *(_QWORD *)&result = swift_bridgeObjectRelease(v10).n128_u64[0];
  }
  return result;
}

void sub_100355E44(uint64_t a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v27 = 0;
  v28 = 0;
  v3 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v4 = objc_msgSend(v3, "mainOrPrivateContext");

  v5 = (_QWORD *)swift_allocObject(&unk_1004C55A0, 40, 7);
  v5[2] = a1;
  v5[3] = v4;
  v5[4] = &v27;
  v6 = swift_allocObject(&unk_1004C55C8, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_100364A70;
  *(_QWORD *)(v6 + 24) = v5;
  v25[4] = sub_1001529CC;
  v26 = v6;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1107296256;
  v25[2] = sub_100029B1C;
  v25[3] = &unk_1004C55E0;
  v7 = _Block_copy(v25);
  v8 = v26;
  v9 = v4;
  swift_retain();
  objc_msgSend(v9, "performBlockAndWait:", v7, swift_release(v8).n128_f64[0]);
  _Block_release(v7);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v6, "", 113, 1057, 32, 1);
  swift_release(v6);
  if ((v7 & 1) != 0)
  {
LABEL_8:
    __break(1u);
    return;
  }
  v11 = v28;
  if (v28)
  {
    v12 = v27;
    v13 = v1[26];
    v14 = v1[27];
    sub_10003A834(v1 + 23, v13);
    swift_bridgeObjectRetain(v11);
    dispatch thunk of PodcastsStateCoordinatorProtocol.removeDownload(forEpisodeWithUUID:from:shouldAllowAutomaticRedownloads:)(v12, v11, 3, 0, v13, v14);

    v15 = v11;
  }
  else
  {
    v16 = static os_log_type_t.error.getter(v10);
    v17 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v18 = (void *)static OS_os_log.downloads.getter(v17);
    v19 = sub_10003F544(&qword_1005559A0);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1003CA200;
    v25[0] = a1;
    v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v23 = v22;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_10003E198();
    *(_QWORD *)(v20 + 32) = v21;
    *(_QWORD *)(v20 + 40) = v23;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v18, "Unable to delete download with adamId %{public}s, episode with matching uuid not found in DB.", 93, 2, v20);

    v15 = v20;
  }
  swift_bridgeObjectRelease(v15);
  v24 = v28;
  swift_release(v5);
  swift_bridgeObjectRelease(v24);
}

uint64_t sub_1003560F0(uint64_t a1, void *a2, uint64_t *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = objc_msgSend((id)objc_opt_self(MTEpisode), "predicateForEpisodeStoreTrackId:", a1);
  v6 = objc_msgSend(a2, "objectInEntity:predicate:", kMTEpisodeEntityName, v5);
  if (!v6)
    goto LABEL_7;
  v7 = v6;
  v8 = objc_opt_self(MTEpisode);
  v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
  if (!v9)
  {

LABEL_8:
    v12 = 0;
    v14 = 0;
    goto LABEL_9;
  }
  v10 = objc_msgSend(v9, "uuid");
  if (!v10)
  {

LABEL_7:
    goto LABEL_8;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;

LABEL_9:
  v15 = a3[1];
  *a3 = v12;
  a3[1] = v14;
  return swift_bridgeObjectRelease(v15);
}

void sub_1003561F0(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  NSString v6;
  id v7;
  unsigned __int8 v8;

  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(a1, "episodeForUuid:", v6);

  if (v7)
  {
    v8 = objc_msgSend(v7, "isBookmarked");

    *a4 = v8;
  }
}

uint64_t sub_10035626C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 40) = a8;
  *(_BYTE *)(v8 + 96) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  v9 = type metadata accessor for BookmarkEpisodeIntent(0);
  *(_QWORD *)(v8 + 48) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003562D4, 0, 0);
}

uint64_t sub_1003562D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  _QWORD *v20;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10017B2BC(0, *(_QWORD *)(v1 + 16), 0);
    v3 = v20;
    v4 = v20[2];
    v5 = 24 * v4 + 48;
    v6 = (_QWORD *)(v1 + 40);
    do
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      v9 = v20[3];
      swift_bridgeObjectRetain(*v6);
      if (v4 >= v9 >> 1)
        sub_10017B2BC(v9 > 1, v4 + 1, 1);
      v20[2] = v4 + 1;
      v10 = (char *)v20 + v5;
      *((_QWORD *)v10 - 2) = v8;
      *((_QWORD *)v10 - 1) = v7;
      *v10 = 1;
      v5 += 24;
      v6 += 2;
      ++v4;
      --v2;
    }
    while (v2);
    v0 = v19;
  }
  v0[9] = v3;
  v11 = (_QWORD *)v0[2];
  v12 = swift_bridgeObjectRetain(v3);
  BookmarkEpisodeIntent.init(episodeIdentifiers:)(v12);
  v13 = v11[39];
  v14 = v11[40];
  sub_10003A834(v11 + 36, v13);
  v15 = v11[35];
  v16 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[10] = v16;
  v17 = sub_100026844(&qword_100565E40, (uint64_t (*)(uint64_t))&type metadata accessor for BookmarkEpisodeIntent, (uint64_t)&protocol conformance descriptor for BookmarkEpisodeIntent);
  *v16 = v0;
  v16[1] = sub_10035645C;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v17, v0[8], v15, v0[6], v17, v13, v14);
}

uint64_t sub_10035645C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10036517C;
  else
    v3 = sub_1003564C0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003564C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_BYTE *)(v0 + 96);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v2, *(_QWORD *)(v0 + 48));
  sub_100357FF0(1, v5, v3, v4);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100356540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t EpisodeOfferContentIDsIntent;
  uint64_t v12;

  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_BYTE *)(v8 + 152) = a6;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = a5;
  v9 = type metadata accessor for BookmarkEpisodeIntent(0);
  *(_QWORD *)(v8 + 56) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 64) = v10;
  *(_QWORD *)(v8 + 72) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  EpisodeOfferContentIDsIntent = type metadata accessor for FindOrCreateEpisodeOfferContentIDsIntent(0);
  *(_QWORD *)(v8 + 80) = EpisodeOfferContentIDsIntent;
  v12 = *(_QWORD *)(EpisodeOfferContentIDsIntent - 8);
  *(_QWORD *)(v8 + 88) = v12;
  *(_QWORD *)(v8 + 96) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003565D0, 0, 0);
}

uint64_t sub_1003565D0()
{
  _QWORD *v0;
  _QWORD *v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = (_QWORD *)v0[4];
  v2 = swift_bridgeObjectRetain(v0[3]);
  FindOrCreateEpisodeOfferContentIDsIntent.init(episodeOffers:)(v2);
  v3 = v1[39];
  v4 = v1[40];
  sub_10003A834(v1 + 36, v3);
  v5 = v1[35];
  v0[13] = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[14] = v6;
  v7 = sub_100026844(&qword_100565E38, (uint64_t (*)(uint64_t))&type metadata accessor for FindOrCreateEpisodeOfferContentIDsIntent, (uint64_t)&protocol conformance descriptor for FindOrCreateEpisodeOfferContentIDsIntent);
  *v6 = v0;
  v6[1] = sub_10035669C;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 2, v0[12], v5, v0[10], v7, v3, v4);
}

uint64_t sub_10035669C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10036507C;
  else
    v3 = sub_100356700;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100356700()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = (_QWORD *)v0[4];
  v2 = v1 + 36;
  v3 = v0[2];
  v0[16] = v3;
  v4 = swift_bridgeObjectRetain(v3);
  BookmarkEpisodeIntent.init(episodeIdentifiers:)(v4);
  v5 = v1[39];
  v6 = v1[40];
  sub_10003A834(v2, v5);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[17] = v7;
  v8 = sub_100026844(&qword_100565E40, (uint64_t (*)(uint64_t))&type metadata accessor for BookmarkEpisodeIntent, (uint64_t)&protocol conformance descriptor for BookmarkEpisodeIntent);
  *v7 = v0;
  v7[1] = sub_1003567BC;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v8, v0[9], v0[13], v0[7], v8, v5, v6);
}

uint64_t sub_1003567BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100365198;
  else
    v3 = sub_100356820;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100356820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __n128 v9;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_BYTE *)(v0 + 152);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v5, *(_QWORD *)(v0 + 56));
  sub_100357FF0(1, v8, v6, v7);
  v9 = swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v2, v4, v9);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1003568D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_100357388(a1, a2, a3, a4, (uint64_t)&type metadata for String, "LibraryActionController.removeEpisodesFromBookmarks() - for episodes UUID %s", (uint64_t)&unk_1004C5578, (uint64_t)&unk_100565F58);
}

uint64_t sub_1003568F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 40) = a8;
  *(_BYTE *)(v8 + 96) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  v9 = type metadata accessor for UnbookmarkEpisodeIntent(0);
  *(_QWORD *)(v8 + 48) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10035695C, 0, 0);
}

uint64_t sub_10035695C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  _QWORD *v20;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10017B2BC(0, *(_QWORD *)(v1 + 16), 0);
    v3 = v20;
    v4 = v20[2];
    v5 = 24 * v4 + 48;
    v6 = (_QWORD *)(v1 + 40);
    do
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      v9 = v20[3];
      swift_bridgeObjectRetain(*v6);
      if (v4 >= v9 >> 1)
        sub_10017B2BC(v9 > 1, v4 + 1, 1);
      v20[2] = v4 + 1;
      v10 = (char *)v20 + v5;
      *((_QWORD *)v10 - 2) = v8;
      *((_QWORD *)v10 - 1) = v7;
      *v10 = 1;
      v5 += 24;
      v6 += 2;
      ++v4;
      --v2;
    }
    while (v2);
    v0 = v19;
  }
  v0[9] = v3;
  v11 = (_QWORD *)v0[2];
  v12 = swift_bridgeObjectRetain(v3);
  UnbookmarkEpisodeIntent.init(episodeIdentifiers:)(v12);
  v13 = v11[39];
  v14 = v11[40];
  sub_10003A834(v11 + 36, v13);
  v15 = v11[35];
  v16 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[10] = v16;
  v17 = sub_100026844(&qword_100565F28, (uint64_t (*)(uint64_t))&type metadata accessor for UnbookmarkEpisodeIntent, (uint64_t)&protocol conformance descriptor for UnbookmarkEpisodeIntent);
  *v16 = v0;
  v16[1] = sub_100356AE4;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v17, v0[8], v15, v0[6], v17, v13, v14);
}

uint64_t sub_100356AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100356BC8;
  else
    v3 = sub_100356B48;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100356B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_BYTE *)(v0 + 96);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v2, *(_QWORD *)(v0 + 48));
  sub_100357FF0(0, v5, v3, v4);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100356BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100356C18(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double result;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = v4;
  sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin();
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v43 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin();
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.podcastsStatesCoordination.getter(v13);
  v16 = swift_bridgeObjectRetain_n(a1, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v41 = a3;
    v19 = swift_slowAlloc(12, -1);
    v42 = a4;
    v20 = (uint8_t *)v19;
    v38 = swift_slowAlloc(32, -1);
    v45 = v38;
    v40 = a2;
    *(_DWORD *)v20 = 136315138;
    v37 = v20 + 4;
    v21 = v5;
    v22 = type metadata accessor for EpisodeOffer(0);
    swift_bridgeObjectRetain(a1);
    v24 = Array.description.getter(v23, v22);
    v39 = v12;
    v25 = v11;
    v27 = v26;
    swift_bridgeObjectRelease(a1);
    v28 = v24;
    v5 = v21;
    v44 = sub_10003D274(v28, v27, &v45);
    a3 = v41;
    LOBYTE(a2) = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v37, v20 + 12);
    v29 = v27;
    v11 = v25;
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease_n(a1, 2);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "LibraryActionController.removeEpisodesFromBookmarks() - for episode offers %s", v20, 0xCu);
    v30 = v38;
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    v31 = v20;
    a4 = v42;
    swift_slowDealloc(v31, -1, -1);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v39);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v12);
  }
  v32 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v11, 1, 1, v32);
  v33 = swift_allocObject(&unk_1004C5550, 72, 7);
  *(_QWORD *)(v33 + 16) = 0;
  *(_QWORD *)(v33 + 24) = 0;
  *(_QWORD *)(v33 + 32) = a1;
  *(_QWORD *)(v33 + 40) = v5;
  *(_BYTE *)(v33 + 48) = a2 & 1;
  *(_QWORD *)(v33 + 56) = a3;
  *(_QWORD *)(v33 + 64) = a4;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_10002CA20(a3, a4);
  v34 = sub_10034FA88((uint64_t)v11, (uint64_t)&unk_100565F48, v33);
  *(_QWORD *)&result = swift_release(v34).n128_u64[0];
  return result;
}

uint64_t sub_100356F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t EpisodeOfferContentIDsIntent;
  uint64_t v12;

  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_BYTE *)(v8 + 152) = a6;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = a5;
  v9 = type metadata accessor for UnbookmarkEpisodeIntent(0);
  *(_QWORD *)(v8 + 56) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 64) = v10;
  *(_QWORD *)(v8 + 72) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  EpisodeOfferContentIDsIntent = type metadata accessor for FindOrCreateEpisodeOfferContentIDsIntent(0);
  *(_QWORD *)(v8 + 80) = EpisodeOfferContentIDsIntent;
  v12 = *(_QWORD *)(EpisodeOfferContentIDsIntent - 8);
  *(_QWORD *)(v8 + 88) = v12;
  *(_QWORD *)(v8 + 96) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100356F9C, 0, 0);
}

uint64_t sub_100356F9C()
{
  _QWORD *v0;
  _QWORD *v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = (_QWORD *)v0[4];
  v2 = swift_bridgeObjectRetain(v0[3]);
  FindOrCreateEpisodeOfferContentIDsIntent.init(episodeOffers:)(v2);
  v3 = v1[39];
  v4 = v1[40];
  sub_10003A834(v1 + 36, v3);
  v5 = v1[35];
  v0[13] = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[14] = v6;
  v7 = sub_100026844(&qword_100565E38, (uint64_t (*)(uint64_t))&type metadata accessor for FindOrCreateEpisodeOfferContentIDsIntent, (uint64_t)&protocol conformance descriptor for FindOrCreateEpisodeOfferContentIDsIntent);
  *v6 = v0;
  v6[1] = sub_100357068;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 2, v0[12], v5, v0[10], v7, v3, v4);
}

uint64_t sub_100357068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100357314;
  else
    v3 = sub_1003570CC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003570CC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = (_QWORD *)v0[4];
  v2 = v1 + 36;
  v3 = v0[2];
  v0[16] = v3;
  v4 = swift_bridgeObjectRetain(v3);
  UnbookmarkEpisodeIntent.init(episodeIdentifiers:)(v4);
  v5 = v1[39];
  v6 = v1[40];
  sub_10003A834(v2, v5);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[17] = v7;
  v8 = sub_100026844(&qword_100565F28, (uint64_t (*)(uint64_t))&type metadata accessor for UnbookmarkEpisodeIntent, (uint64_t)&protocol conformance descriptor for UnbookmarkEpisodeIntent);
  *v7 = v0;
  v7[1] = sub_100357188;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v8, v0[9], v0[13], v0[7], v8, v5, v6);
}

uint64_t sub_100357188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10035729C;
  else
    v3 = sub_1003571EC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003571EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __n128 v9;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_BYTE *)(v0 + 152);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v5, *(_QWORD *)(v0 + 56));
  sub_100357FF0(0, v8, v6, v7);
  v9 = swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v2, v4, v9);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035729C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100357314()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100357364(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_100357388(a1, a2, a3, a4, (uint64_t)&type metadata for Int64, "LibraryActionController.removeEpisodesFromBookmarks() - for storeIds %s", (uint64_t)&unk_1004C5528, (uint64_t)&unk_100565F38);
}

double sub_100357388(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8)
{
  char *v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double result;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v44 = a5;
  v45 = a6;
  LODWORD(v12) = a2;
  sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin();
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v16 - 8);
  v47 = v16;
  v17 = __chkstk_darwin();
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.podcastsStatesCoordination.getter(v17);
  v20 = swift_bridgeObjectRetain_n(a1, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v41 = a3;
    v23 = swift_slowAlloc(12, -1);
    v42 = a4;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v43 = a8;
    v26 = v25;
    v50 = v25;
    v40 = a7;
    *(_DWORD *)v24 = 136315138;
    v39 = v24 + 4;
    swift_bridgeObjectRetain(a1);
    v28 = Array.description.getter(v27, v44);
    LODWORD(v44) = (_DWORD)v12;
    v12 = v15;
    v30 = v29;
    swift_bridgeObjectRelease(a1);
    v31 = v28;
    a3 = v41;
    v49 = sub_10003D274(v31, v30, &v50);
    a7 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v39, v24 + 12);
    v32 = v30;
    v15 = v12;
    LOBYTE(v12) = v44;
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease_n(a1, 2);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v45, v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    v33 = v26;
    a8 = v43;
    swift_slowDealloc(v33, -1, -1);
    v34 = v24;
    a4 = v42;
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
  }

  (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
  v35 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v15, 1, 1, v35);
  v36 = swift_allocObject(a7, 72, 7);
  *(_QWORD *)(v36 + 16) = 0;
  *(_QWORD *)(v36 + 24) = 0;
  *(_QWORD *)(v36 + 32) = v48;
  *(_QWORD *)(v36 + 40) = a1;
  *(_BYTE *)(v36 + 48) = v12 & 1;
  *(_QWORD *)(v36 + 56) = a3;
  *(_QWORD *)(v36 + 64) = a4;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_10002CA20(a3, a4);
  v37 = sub_10034FA88((uint64_t)v15, a8, v36);
  *(_QWORD *)&result = swift_release(v37).n128_u64[0];
  return result;
}

uint64_t sub_100357654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 40) = a8;
  *(_BYTE *)(v8 + 96) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  v9 = type metadata accessor for UnbookmarkEpisodeIntent(0);
  *(_QWORD *)(v8 + 48) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003576BC, 0, 0);
}

uint64_t sub_1003576BC()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    sub_10017B2BC(0, v2, 0);
    v3 = (uint64_t *)(v1 + 32);
    do
    {
      v4 = *v3++;
      v5 = AdamID.init(rawValue:)(v4 & ~(v4 >> 63));
      v7 = _swiftEmptyArrayStorage[2];
      v6 = _swiftEmptyArrayStorage[3];
      if (v7 >= v6 >> 1)
        sub_10017B2BC(v6 > 1, v7 + 1, 1);
      _swiftEmptyArrayStorage[2] = v7 + 1;
      v8 = &_swiftEmptyArrayStorage[3 * v7];
      v8[4] = v5;
      v8[5] = 0;
      *((_BYTE *)v8 + 48) = 0;
      --v2;
    }
    while (v2);
  }
  v0[9] = _swiftEmptyArrayStorage;
  v9 = (_QWORD *)v0[2];
  v10 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  UnbookmarkEpisodeIntent.init(episodeIdentifiers:)(v10);
  v11 = v9[39];
  v12 = v9[40];
  sub_10003A834(v9 + 36, v11);
  v13 = v9[35];
  v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[10] = v14;
  v15 = sub_100026844(&qword_100565F28, (uint64_t (*)(uint64_t))&type metadata accessor for UnbookmarkEpisodeIntent, (uint64_t)&protocol conformance descriptor for UnbookmarkEpisodeIntent);
  *v14 = v0;
  v14[1] = sub_100357820;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v15, v0[8], v13, v0[6], v15, v11, v12);
}

uint64_t sub_100357820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10036517C;
  else
    v3 = sub_100365174;
  return swift_task_switch(v3, 0, 0);
}

double sub_100357884(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = v4;
  sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin();
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v33 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin();
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.podcastsStatesCoordination.getter(v13);
  v16 = swift_bridgeObjectRetain_n(a2, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v31 = a3;
    v19 = swift_slowAlloc(12, -1);
    v32 = a4;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v29 = v12;
    v22 = v21;
    v35 = v21;
    v30 = v11;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(a2);
    v34 = sub_10003D274(a1, a2, &v35);
    v11 = v30;
    a3 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "LibraryActionController.removeEpisodesFromBookmarks() - for podcast UUID %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v23 = v20;
    a4 = v32;
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v29);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v12);
  }
  v24 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v11, 1, 1, v24);
  v25 = (_QWORD *)swift_allocObject(&unk_1004C5500, 72, 7);
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = a1;
  v25[5] = a2;
  v25[6] = v5;
  v25[7] = a3;
  v25[8] = a4;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  sub_10002CA20(a3, a4);
  v26 = sub_10034FA88((uint64_t)v11, (uint64_t)&unk_100565F18, (uint64_t)v25);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_100357B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ShowEpisodesIntent;
  uint64_t v12;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[3] = a4;
  v9 = type metadata accessor for UnbookmarkEpisodeIntent(0);
  v8[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[9] = v10;
  v8[10] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  ShowEpisodesIntent = type metadata accessor for FindShowEpisodesIntent(0);
  v8[11] = ShowEpisodesIntent;
  v12 = *(_QWORD *)(ShowEpisodesIntent - 8);
  v8[12] = v12;
  v8[13] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100357BC4, 0, 0);
}

uint64_t sub_100357BC4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  NSString v5;
  id v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = v0[4];
  v2 = (_QWORD *)v0[5];
  v3 = v0[3];
  v4 = (void *)objc_opt_self(MTEpisode);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "predicateForBookmarkedEpisodesOnPodcastUuid:", v5);

  v7 = swift_bridgeObjectRetain(v1);
  FindShowEpisodesIntent.init(showIdentifier:predicate:limit:sortDescriptors:)(v3, v1, 1, v6, 0, 1, 0, v7);
  v8 = v2[39];
  v9 = v2[40];
  sub_10003A834(v2 + 36, v8);
  v10 = v2[35];
  v0[14] = v10;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[15] = v11;
  v12 = sub_100026844(&qword_100565F20, (uint64_t (*)(uint64_t))&type metadata accessor for FindShowEpisodesIntent, (uint64_t)&protocol conformance descriptor for FindShowEpisodesIntent);
  *v11 = v0;
  v11[1] = sub_100357D00;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 2, v0[13], v10, v0[11], v12, v8, v9);
}

uint64_t sub_100357D00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100357FA0;
  else
    v3 = sub_100357D64;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100357D64()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = (_QWORD *)v0[5];
  v2 = v1 + 36;
  v3 = v0[2];
  v0[17] = v3;
  v4 = swift_bridgeObjectRetain(v3);
  UnbookmarkEpisodeIntent.init(episodeIdentifiers:)(v4);
  v5 = v1[39];
  v6 = v1[40];
  sub_10003A834(v2, v5);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[18] = v7;
  v8 = sub_100026844(&qword_100565F28, (uint64_t (*)(uint64_t))&type metadata accessor for UnbookmarkEpisodeIntent, (uint64_t)&protocol conformance descriptor for UnbookmarkEpisodeIntent);
  *v7 = v0;
  v7[1] = sub_100357E20;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v8, v0[10], v0[14], v0[8], v8, v5, v6);
}

uint64_t sub_100357E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100357F28;
  else
    v3 = sub_100357E84;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100357E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v5, *(_QWORD *)(v0 + 64));
  sub_100357FF0(0, 0, v6, v7);
  v8 = swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v2, v4, v8);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100357F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100357FA0()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100357FF0(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v13 - 8);
  v29 = v13;
  __chkstk_darwin();
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v18 + 16, v5);
  v19 = swift_allocObject(&unk_1004C54B0, 48, 7);
  *(_BYTE *)(v19 + 16) = a2;
  *(_BYTE *)(v19 + 17) = a1;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = a3;
  *(_QWORD *)(v19 + 40) = a4;
  aBlock[4] = sub_10036470C;
  v32 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C54C8;
  v20 = _Block_copy(aBlock);
  v21 = v32;
  sub_10002CA20(a3, a4);
  swift_release(v21);
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10003F544((uint64_t *)&unk_10055B200);
  v25 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v10, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v15, v29);
}

void sub_100358248(char a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  _BYTE v21[24];

  v8 = type metadata accessor for HUDViewController.HUDType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a1 & 1) == 0)
    goto LABEL_8;
  v12 = a3 + 16;
  if ((a2 & 1) != 0)
  {
    swift_beginAccess(v12, v21, 0, 0);
    Strong = swift_weakLoadStrong(v12);
    if (!Strong)
      goto LABEL_8;
    v14 = Strong;
    v15 = (unsigned int *)&enum case for HUDViewController.HUDType.addedToBookmarks(_:);
  }
  else
  {
    swift_beginAccess(v12, v21, 0, 0);
    v16 = swift_weakLoadStrong(v12);
    if (!v16)
      goto LABEL_8;
    v14 = v16;
    v15 = (unsigned int *)&enum case for HUDViewController.HUDType.removedFromBookmarks(_:);
  }
  v17 = *(_QWORD *)(v14 + 56);
  swift_unknownObjectRetain(v17);
  swift_release(v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v11, *v15, v8);
  v18 = objc_allocWithZone((Class)type metadata accessor for HUDViewController(0));
  v19 = (void *)HUDViewController.init(type:)(v11);
  dispatch thunk of HUDViewController.present()();
  swift_unknownObjectRelease(v17);

LABEL_8:
  if (a4)
    a4(1);
}

void sub_10035838C(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v9 = v8;
  v10 = objc_allocWithZone((Class)NSFetchRequest);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "initWithEntityName:", v11, swift_bridgeObjectRelease(v9).n128_f64[0]);

  if ((a2 & 1) == 0)
    objc_msgSend(v12, "setFetchLimit:", a1);
  objc_msgSend(v12, "setPredicate:", a3);
  v13 = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  v14 = NSManagedObjectContext.count<A>(for:)(v12, v13);

  *a4 = v14;
}

void sub_1003584B0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v5 = v4;
  v6 = objc_allocWithZone((Class)NSFetchRequest);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "initWithEntityName:", v7, swift_bridgeObjectRelease(v5).n128_f64[0]);

  objc_msgSend(v8, "setPredicate:", a1);
  v9 = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  v10 = NSManagedObjectContext.count<A>(for:)(v8, v9);

  *a2 = v10;
}

void sub_10035860C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  _QWORD v12[5];
  _QWORD *v13;

  v2 = v1;
  v4 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v5 = objc_msgSend(v4, "mainOrPrivateContext");

  v6 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v6 + 16, v2);
  v7 = (_QWORD *)swift_allocObject(&unk_1004C5460, 40, 7);
  v7[2] = v6;
  v7[3] = v5;
  v7[4] = a1;
  v12[4] = sub_1003646CC;
  v13 = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100027AF8;
  v12[3] = &unk_1004C5478;
  v8 = _Block_copy(v12);
  v9 = v13;
  v10 = v5;
  v11 = a1;
  objc_msgSend(v10, "performBlock:", v8, swift_release(v9).n128_f64[0]);
  _Block_release(v8);

}

void sub_100358738(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  Class isa;
  id v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = (_QWORD *)Strong;
    v8 = kMTEpisodeEntityName;
    v9 = (uint64_t)_swiftEmptyArrayStorage;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v11 = objc_msgSend(a2, "objectsInEntity:predicate:sortDescriptors:", v8, a3, isa);

    if (v11)
    {
      v12 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
      v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

      v14 = sub_10034E724(v13, MTEpisode_ptr);
      swift_bridgeObjectRelease(v13);
      if (v14)
        v9 = (uint64_t)v14;
    }
    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0)
        v21 = v9;
      else
        v21 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v15 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v9);
      if (v15)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
        {
          __break(1u);
          return;
        }
        v16 = 0;
        do
        {
          if ((v9 & 0xC000000000000001) != 0)
            v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v9);
          else
            v17 = *(id *)(v9 + 8 * v16 + 32);
          v18 = v17;
          ++v16;
          v19 = v7[26];
          v20 = v7[27];
          sub_10003A834(v7 + 23, v19);
          dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeRemoveFromRecoveredEpisodesIfNeeded(episode:)(v18, v19, v20);

        }
        while (v15 != v16);
      }
    }
    objc_msgSend(a2, "saveInCurrentBlock", swift_bridgeObjectRelease(v9).n128_f64[0]);
    swift_release(v7);
  }
}

void sub_100358938(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v5 = v4;
  v6 = objc_allocWithZone((Class)NSFetchRequest);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "initWithEntityName:", v7, swift_bridgeObjectRelease(v5).n128_f64[0]);

  objc_msgSend(v8, "setPredicate:", a1);
  v9 = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  v10 = NSManagedObjectContext.count<A>(for:)(v8, v9);

  *a2 = v10;
}

void sub_100358A34(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  NSString v9;
  id v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  NSString v26;
  id v27;
  _QWORD aBlock[5];
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;

  v4 = (void *)objc_opt_self(NSBundle);
  v5 = objc_msgSend(v4, "mainBundle");
  v6._countAndFlagsBits = 0xD000000000000034;
  v30._object = (void *)0xE000000000000000;
  v6._object = (void *)0x800000010043F6A0;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v30._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v30)._object;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v10 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v9, 0, 0);

  v11 = objc_msgSend(v4, "mainBundle");
  v31._object = (void *)0xE000000000000000;
  v12._object = (void *)0x800000010043F6E0;
  v12._countAndFlagsBits = 0xD00000000000001BLL;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 0;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v31)._object;

  v15 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v15 + 16, v2);
  v16 = swift_allocObject(&unk_1004C5410, 32, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = a2;
  swift_retain();
  v17 = a2;
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  aBlock[4] = sub_100364690;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AC13C;
  aBlock[3] = &unk_1004C5428;
  v19 = _Block_copy(aBlock);
  swift_release(v29);
  v20 = (void *)objc_opt_self(UIAlertAction);
  v21 = objc_msgSend(v20, "actionWithTitle:style:handler:", v18, 0, v19);
  _Block_release(v19);

  objc_msgSend(v10, "addAction:", v21, swift_release(v15).n128_f64[0]);
  v22 = objc_msgSend(v4, "mainBundle");
  v32._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0x6C65636E6143;
  v23._object = (void *)0xE600000000000000;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v32._countAndFlagsBits = 0;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v32)._object;

  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v20, "actionWithTitle:style:handler:", v26, 1, 0, swift_bridgeObjectRelease(v25).n128_f64[0]);

  objc_msgSend(v10, "addAction:", v27);
  PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v10, 1, 15, 1, 0, 0);

}

double sub_100358D78(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  _BYTE v8[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    sub_100359124(a3);
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_100358DD4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;

  v2 = v1;
  v4 = type metadata accessor for SheetActionStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ActionMetrics(0);
  __chkstk_darwin();
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)objc_opt_self(NSBundle);
  v11 = objc_msgSend(v10, "mainBundle");
  v12._countAndFlagsBits = 0xD000000000000034;
  v36._object = (void *)0xE000000000000000;
  v12._object = (void *)0x800000010043F6A0;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v36._countAndFlagsBits = 0;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v36);
  object = v14._object;
  countAndFlagsBits = v14._countAndFlagsBits;

  v15 = objc_msgSend(v10, "mainBundle");
  v37._object = (void *)0xE000000000000000;
  v16._object = (void *)0x800000010043F6E0;
  v16._countAndFlagsBits = 0xD00000000000001BLL;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v37);

  v19 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v19 + 16, v2);
  v20 = swift_allocObject(&unk_1004C53E8, 32, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = a1;
  swift_retain();
  v21 = static Link.Presentation.textFollowsTintColor.getter(a1);
  v22 = Link.Presentation.init(rawValue:)(0);
  v23 = Link.Presentation.init(rawValue:)(v22);
  v24 = Link.Presentation.init(rawValue:)(v23 & v21);
  if (v24 != v21)
  {
    v24 = Link.Presentation.init(rawValue:)(v22 | v21);
    v22 = v24;
  }
  static ActionMetrics.notInstrumented.getter(v24);
  v25 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = ClosureAction.init(title:presentationStyle:actionMetrics:closure:)(v18._countAndFlagsBits, v18._object, v22, v9, sub_100364684, v20);
  swift_release(v19);
  v27 = sub_10003F544((uint64_t *)&unk_100553780);
  v28 = swift_allocObject(v27, 40, 7);
  *(_OWORD *)(v28 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v28 + 32) = v26;
  v35 = v28;
  specialized Array._endMutation()(v28);
  v29 = v35;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for SheetActionStyle.defaultStyle(_:), v4);
  v30 = type metadata accessor for SheetAction(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  return SheetAction.init(title:sheetTitle:message:actions:cancellable:style:)(0, 0, countAndFlagsBits, object, 0, 0, v29, 1, v7);
}

double sub_1003590C8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    sub_100359124(a2);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

void sub_100359124(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  id v24;
  _QWORD v25[5];
  _QWORD *v26;

  v2 = v1;
  v4 = objc_msgSend((id)objc_opt_self(MTEpisode), "predicateForVisuallyPlayed:", 0);
  v5 = objc_msgSend(a1, "AND:", v4);

  if ((static Podcasts.isBlueMoonEnabled()(v6) & 1) != 0)
  {
    v8 = v2[41];
    if (v8)
    {
      swift_retain();
      v10 = (void *)dispatch thunk of PlaybackController.nowPlayingItem.getter(v9);
      swift_release(v8);
      if (v10)
      {
        v8 = MPModelObject.uuid.getter(v11);
        v13 = v12;

        goto LABEL_13;
      }
      v8 = 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  v14 = v2[5];
  ObjectType = swift_getObjectType(v2[4], v7);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(ObjectType, v14);
  if (v17)
    v8 = v16;
  else
    v8 = 0;
  if (v17)
    v13 = v17;
  else
    v13 = 0xE000000000000000;
LABEL_13:
  v18 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v19 = objc_msgSend(v18, "privateQueueContext");

  v20 = (_QWORD *)swift_allocObject(&unk_1004C5348, 56, 7);
  v20[2] = v5;
  v20[3] = v19;
  v20[4] = v8;
  v20[5] = v13;
  v20[6] = v2;
  v25[4] = sub_1003645D0;
  v26 = v20;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1107296256;
  v25[2] = sub_100027AF8;
  v25[3] = &unk_1004C5360;
  v21 = _Block_copy(v25);
  v22 = v26;
  v23 = v5;
  v24 = v19;
  swift_retain();
  objc_msgSend(v24, "performBlock:", v21, swift_release(v22).n128_f64[0]);
  _Block_release(v21);

}

void sub_10035930C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSArray v24;
  __n128 v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __n128 v45;
  void *v46;
  Class v47;
  void *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  objc_class *isa;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  char *v72;
  void *v73;
  _OWORD v74[2];
  __int128 aBlock;
  uint64_t (*v76)(uint64_t);
  void *v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  uint64_t v79;

  v66 = a5;
  v71 = a3;
  v64 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin();
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v63 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin();
  v62 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for NSFastEnumerationIterator(0);
  v67 = *(_QWORD *)(v15 - 8);
  v68 = v15;
  __chkstk_darwin();
  v72 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v18 = v17;
  v19 = objc_allocWithZone((Class)NSFetchRequest);
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v19, "initWithEntityName:", v20, swift_bridgeObjectRelease(v18).n128_f64[0]);

  objc_msgSend(v21, "setPredicate:", a1);
  objc_msgSend(v21, "setReturnsObjectsAsFaults:", 0);
  objc_msgSend(v21, "setFetchBatchSize:", 50);
  v22 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v69 = v21;
  v70 = a2;
  v23 = NSManagedObjectContext.fetch<A>(_:)(v21, v22);
  v24.super.isa = Array._bridgeToObjectiveC()().super.isa;
  v25 = swift_bridgeObjectRelease(v23);
  v26 = v72;
  v27 = NSArray.makeIterator()(v25);
  NSFastEnumerationIterator.next()(&aBlock, v27);
  if (v77)
  {
    isa = v24.super.isa;
    v58 = v12;
    v59 = v11;
    v60 = v10;
    v61 = v8;
    v28 = 0;
    v29 = 0;
    do
    {
      sub_10013B9CC(&aBlock, v74);
      swift_dynamicCast(&v73, v74, (char *)&type metadata for Any + 8, v22, 7);
      v31 = v73;
      v32 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
      if (!v32)
        goto LABEL_25;
      v33 = v32;
      objc_msgSend(v32, "setPlayState:fromContextActions:manually:forUserActionOnEpisode:saveChanges:", 0, 1, 1, v31, 0);

      v34 = objc_msgSend(v31, "uuid");
      if (v34)
      {
        v35 = v34;
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v38 = v37;

        if (a4)
        {
          if (v36 == v71 && v38 == a4)
          {
            swift_bridgeObjectRelease(v38);
            v29 = 1;
          }
          else
          {
            v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v71, a4, 0);
            swift_bridgeObjectRelease(v38);
            v29 |= v39;
          }
        }
        else
        {
          swift_bridgeObjectRelease(v38);
        }
        v26 = v72;
      }
      else
      {
        v29 |= a4 == 0;
      }
      if (__OFADD__(v28, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
        return;
      }
      if (__ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * (v28 + 1), 1) <= 0x51EB851EB851EB8uLL)
        objc_msgSend(v70, "saveInCurrentBlock");

      NSFastEnumerationIterator.next()(&aBlock, v30);
      ++v28;
    }
    while (v77);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v26, v68);
    v40 = objc_msgSend(v70, "saveInCurrentBlock");
    v24.super.isa = isa;
    if ((v29 & 1) == 0)
      goto LABEL_21;
    if ((static Podcasts.isBlueMoonEnabled()(v40) & 1) != 0)
    {
      v41 = type metadata accessor for TaskPriority(0);
      v42 = (uint64_t)v62;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v62, 1, 1, v41);
      v43 = (_QWORD *)swift_allocObject(&unk_1004C53C0, 40, 7);
      v43[2] = 0;
      v43[3] = 0;
      v43[4] = v66;
      swift_retain();
      v44 = sub_10034FBBC(v42, (uint64_t)&unk_100565F00, (uint64_t)v43);
      swift_release(v44);
      goto LABEL_21;
    }
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v46 = (void *)static OS_dispatch_queue.main.getter(v45);
    v78 = sub_1003645DC;
    v79 = v66;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v76 = sub_100027AF8;
    v77 = &unk_1004C5388;
    v47 = v24.super.isa;
    v48 = _Block_copy(&aBlock);
    v49 = v79;
    swift_retain();
    swift_release(v49);
    v50 = v63;
    static DispatchQoS.unspecified.getter(v51);
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    v52 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v53 = sub_10003F544((uint64_t *)&unk_10055B200);
    v54 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
    v55 = v60;
    v56 = v53;
    v57 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v56, v54, v64, v52);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v50, v55, v48);

    _Block_release(v48);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v55, v57);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v50, v59);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v26, v68);
    objc_msgSend(v70, "saveInCurrentBlock");
LABEL_21:

  }
}

uint64_t sub_100359990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_1003599A8, 0, 0);
}

uint64_t sub_1003599A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 328);
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    v2 = async function pointer to PlaybackController.pause()[1];
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 40) = v3;
    *v3 = v0;
    v3[1] = sub_100359A2C;
    return PlaybackController.pause()();
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100359A2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100359AB8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 32));
    v4 = sub_100359A98;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100359A98()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 32) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100359AB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100359AEC(void *a1, char a2)
{
  uint64_t v2;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD v12[5];
  uint64_t v13;

  v5 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v6 = objc_msgSend(v5, "privateQueueContext");

  v7 = swift_allocObject(&unk_1004C52A8, 41, 7);
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v7 + 32) = v2;
  *(_BYTE *)(v7 + 40) = a2;
  v12[4] = sub_100364568;
  v13 = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100027AF8;
  v12[3] = &unk_1004C52C0;
  v8 = _Block_copy(v12);
  v9 = v13;
  v10 = a1;
  v11 = v6;
  swift_retain();
  objc_msgSend(v11, "performBlock:", v8, swift_release(v9).n128_f64[0]);
  _Block_release(v8);

}

uint64_t sub_100359C08(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  __n128 v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Class v50;
  int v51;
  id v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  _OWORD v61[2];
  __int128 aBlock;
  uint64_t (*v63)(uint64_t);
  void *v64;
  double (*v65)();
  uint64_t v66;

  v51 = a4;
  v53 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v58 = *(_QWORD *)(v5 - 8);
  v59 = v5;
  __chkstk_darwin();
  v57 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  __chkstk_darwin();
  v54 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for NSFastEnumerationIterator(0);
  v48 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin();
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v12 = v11;
  v13 = objc_allocWithZone((Class)NSFetchRequest);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "initWithEntityName:", v14, swift_bridgeObjectRelease(v12).n128_f64[0]);

  objc_msgSend(v15, "setPredicate:", a1);
  objc_msgSend(v15, "setReturnsObjectsAsFaults:", 0);
  v16 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v52 = v15;
  v17 = NSManagedObjectContext.fetch<A>(_:)(v15, v16);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v19 = swift_bridgeObjectRelease(v17);
  v50 = isa;
  v20 = NSArray.makeIterator()(v19);
  NSFastEnumerationIterator.next()(&aBlock, v20);
  v21 = _swiftEmptyArrayStorage;
  if (v64)
  {
    v47 = 0;
    do
    {
      sub_10013B9CC(&aBlock, v61);
      swift_dynamicCast(&v60, v61, (char *)&type metadata for Any + 8, v16, 7);
      v22 = v60;
      v23 = objc_msgSend(v60, "uuid", v47);
      if (v23)
      {
        v25 = v23;
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v28 = v27;

        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          v21 = sub_10027AE00(0, v21[2] + 1, 1, v21);
        v30 = v21[2];
        v29 = v21[3];
        if (v30 >= v29 >> 1)
          v21 = sub_10027AE00((_QWORD *)(v29 > 1), v30 + 1, 1, v21);
        v21[2] = v30 + 1;
        v31 = &v21[2 * v30];
        v31[4] = v26;
        v31[5] = v28;
      }

      NSFastEnumerationIterator.next()(&aBlock, v24);
    }
    while (v64);
  }
  (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v49);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v33 = (void *)static OS_dispatch_queue.main.getter(v32);
  v34 = swift_allocObject(&unk_1004C52F8, 33, 7);
  v35 = v53;
  *(_QWORD *)(v34 + 16) = v21;
  *(_QWORD *)(v34 + 24) = v35;
  *(_BYTE *)(v34 + 32) = v51 & 1;
  v65 = sub_100364588;
  v66 = v34;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v63 = sub_100027AF8;
  v64 = &unk_1004C5310;
  v36 = _Block_copy(&aBlock);
  v37 = v66;
  swift_retain();
  swift_release(v37);
  v38 = v54;
  static DispatchQoS.unspecified.getter(v39);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  v40 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v41 = sub_10003F544((uint64_t *)&unk_10055B200);
  v42 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  v43 = v57;
  v44 = v41;
  v45 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v44, v42, v59, v40);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v43, v36);
  _Block_release(v36);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v45);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v38, v56);
}

double sub_10035A0D8(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v6 = a2 + 23;
    swift_bridgeObjectRetain(a1);
    v15 = v7;
    v8 = (uint64_t *)(v7 + 40);
    v9 = a3 & 1;
    do
    {
      v10 = *(v8 - 1);
      v11 = *v8;
      v12 = a2[26];
      v13 = a2[27];
      sub_10003A834(v6, v12);
      swift_bridgeObjectRetain(v11);
      dispatch thunk of PodcastsStateCoordinatorProtocol.removeDownload(forEpisodeWithUUID:from:shouldAllowAutomaticRedownloads:)(v10, v11, 3, v9, v12, v13);
      swift_bridgeObjectRelease(v11);
      v8 += 2;
      --v3;
    }
    while (v3);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v15).n128_u64[0];
  }
  return result;
}

void sub_10035A1B4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (a1 && (v3 = objc_msgSend(a1, "title")) != 0)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10035A218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v14;
  char v15;

  v5 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v6 = objc_msgSend(v5, "mainOrPrivateContext");

  v15 = 2;
  v7 = (_QWORD *)swift_allocObject(&unk_1004C5230, 56, 7);
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = &v15;
  v7[5] = v2;
  v7[6] = a2;
  v8 = swift_allocObject(&unk_1004C5258, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_100364514;
  *(_QWORD *)(v8 + 24) = v7;
  aBlock[4] = sub_1001529CC;
  v14 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004C5270;
  v9 = _Block_copy(aBlock);
  v10 = v14;
  v11 = v6;
  swift_retain();
  swift_retain();
  objc_msgSend(v11, "performBlockAndWait:", v9, swift_release(v10).n128_f64[0]);

  _Block_release(v9);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 113, 1480, 28, 1);
  swift_release(v8);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v7);
}

void sub_10035A3B0(void *a1, uint64_t a2, BOOL *a3, uint64_t a4, uint64_t a5)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  id v14;

  v7 = objc_msgSend(a1, "podcastForStoreId:", a2);
  if (v7)
  {
    v14 = v7;
    v8 = objc_msgSend(v7, "uuid");
    if (v8)
    {
      v9 = v8;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

      v13 = sub_100363924(v10, v12, a5);
      swift_bridgeObjectRelease(v12);

      *a3 = v13;
    }
    else
    {

    }
  }
}

id sub_10035A47C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  double v13;
  uint64_t v15;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "episodeForStoreTrackID:", a2);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "podcast");
    if (v10)
    {
      v11 = v10;
      v12 = Date.init()();
      v13 = Date.timeIntervalSinceReferenceDate.getter(v12);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      objc_msgSend(v11, "setLastDismissedEpisodeUpsellBannerDate:", v13);

    }
    else
    {

    }
  }
  return objc_msgSend(a1, "saveInCurrentBlock");
}

void sub_10035A584(uint64_t a1, unint64_t a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  NSString v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = type metadata accessor for Logger(0);
  v29 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  __chkstk_darwin();
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = (char *)&v29 - v11;
  v13 = (void *)objc_opt_self(MTEpisode);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "predicateForDownloadedEpisodesOnPodcastUuid:", v14);

  sub_100359AEC(v15, a4);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v13, "predicateForBookmarksMigrationRecoveredEpisodesOnPodcastUuid:", v16);

  sub_10035860C(v17);
  if ((a3 & 1) != 0)
  {
    static Logger.podcastsStatesCoordination.getter(v18);
    v19 = swift_bridgeObjectRetain_n(a2, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v32 = v23;
      *(_DWORD *)v22 = 136315138;
      swift_bridgeObjectRetain(a2);
      v31 = sub_10003D274(a1, a2, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "removeShowFromLibrary and all bookmarks for podcasts %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
    sub_100357884(a1, a2, 0, 0);
  }
  else
  {
    static Logger.podcastsStatesCoordination.getter(v18);
    v24 = swift_bridgeObjectRetain_n(a2, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v32 = v28;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain(a2);
      v31 = sub_10003D274(a1, a2, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "removeShowFromLibrary wihtout removing bookmarks for podcasts %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
  }
}

uint64_t sub_10035A94C()
{
  uint64_t v0;

  type metadata accessor for StoreReviewPromptController(0);
  v0 = static StoreReviewPromptController.shared.getter();
  dispatch thunk of StoreReviewPromptController.didFollowShow()();
  return swift_release(v0);
}

void sub_10035A980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10035AB2C(a1, a2, a3, a4, (uint64_t)&unk_1004C51E0, (uint64_t)sub_1003644DC, (uint64_t)&unk_1004C51F8);
}

void sub_10035A99C(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4, void (*a5)(id), uint64_t a6)
{
  void (*v6)(id);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  id v22;
  id v23;
  uint64_t v24;
  void (*v25)(id);
  void *v26;
  uint64_t v27;

  v6 = a5;
  v8 = a1;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v24 = a6;
    v25 = a5;
    v12 = a3 + 23;
    swift_bridgeObjectRetain_n(a1, 2);
    v26 = a2;
    v13 = a2;
    v27 = v8;
    v14 = (_QWORD *)(v8 + 40);
    v15 = 1 - v9;
    do
    {
      v16 = *v14;
      swift_bridgeObjectRetain(*v14);
      v17 = String._bridgeToObjectiveC()();
      v18 = objc_msgSend(v13, "episodeForUuid:", v17);
      swift_bridgeObjectRelease(v16);

      if (v18)
      {
        v20 = a3[26];
        v19 = a3[27];
        sub_10003A834(v12, v20);
        dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeMark(_:as:in:from:)(v18, a4, v13, 3, v20, v19);

        if (!v15)
        {
LABEL_7:
          v8 = v27;
          *(_QWORD *)&v21 = swift_bridgeObjectRelease(v27).n128_u64[0];
          v6 = v25;
          a2 = v26;
          goto LABEL_9;
        }
      }
      else if (!v15)
      {
        goto LABEL_7;
      }
      v14 += 2;
      ++v15;
    }
    while (v15 != 1);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v22 = a2;
LABEL_9:
    v23 = objc_msgSend(a2, "saveInCurrentBlock", v21, v24, v25);
    if (v6)
      v6(v23);

    swift_bridgeObjectRelease(v8);
  }
}

void sub_10035AB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10035AB2C(a1, a2, a3, a4, (uint64_t)&unk_1004C5190, (uint64_t)sub_100364488, (uint64_t)&unk_1004C51A8);
}

void sub_10035AB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  id v16;
  id v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  id v21;
  _QWORD v22[5];
  _QWORD *v23;

  v11 = v7;
  v16 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v17 = objc_msgSend(v16, "mainOrPrivateContext");

  v18 = (_QWORD *)swift_allocObject(a5, 64, 7);
  v18[2] = a1;
  v18[3] = v17;
  v18[4] = v11;
  v18[5] = a2;
  v18[6] = a3;
  v18[7] = a4;
  v22[4] = a6;
  v23 = v18;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 1107296256;
  v22[2] = sub_100027AF8;
  v22[3] = a7;
  v19 = _Block_copy(v22);
  v20 = v23;
  swift_bridgeObjectRetain(a1);
  v21 = v17;
  swift_retain();
  sub_10002CA20(a3, a4);
  objc_msgSend(v21, "performBlock:", v19, swift_release(v20).n128_f64[0]);
  _Block_release(v19);

}

id sub_10035AC6C(uint64_t a1, id a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(id))
{
  uint64_t (*v5)(id);
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id result;
  uint64_t v18;

  v5 = a5;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    type metadata accessor for CoreDataFetcher(0);
    v10 = *(_QWORD *)(type metadata accessor for EpisodeOffer(0) - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    v18 = a1;
    v13 = swift_bridgeObjectRetain(a1);
    do
    {
      v14 = (void *)static CoreDataFetcher.unsafeFindOrCreateStoreEpisode(for:in:)(v11, a2, v13);
      v15 = a3[26];
      v16 = a3[27];
      sub_10003A834(a3 + 23, v15);
      dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeMark(_:as:in:from:)(v14, a4, a2, 3, v15, v16);

      v11 += v12;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease(v18);
    v5 = a5;
  }
  result = objc_msgSend(a2, "saveInCurrentBlock");
  if (v5)
    return (id)v5(result);
  return result;
}

void sub_10035AD84(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  Class isa;
  id v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  v4 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = kMTEpisodeEntityName;
  v8 = (uint64_t)_swiftEmptyArrayStorage;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(a1, "objectsInEntity:predicate:sortDescriptors:", v7, a2, isa);

  if (v10)
  {
    v11 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

    v13 = sub_10034E724(v12, MTEpisode_ptr);
    swift_bridgeObjectRelease(v12);
    if (v13)
      v8 = (uint64_t)v13;
  }
  if (!((unint64_t)v8 >> 62))
  {
    v14 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
      goto LABEL_6;
LABEL_19:
    *(_QWORD *)&v22 = swift_bridgeObjectRelease(v8).n128_u64[0];
LABEL_20:
    objc_msgSend(a1, "saveInCurrentBlock", v22);
    return;
  }
  if (v8 < 0)
    v23 = v8;
  else
    v23 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v14 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v8);
  if (!v14)
    goto LABEL_19;
LABEL_6:
  if (v14 >= 1)
  {
    v24 = a1;
    for (i = 0; i != v14; ++i)
    {
      if ((v8 & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v8);
      else
        v16 = *(id *)(v8 + 8 * i + 32);
      v17 = v16;
      objc_msgSend(v16, "setListenNowEpisode:", 0, v24);
      v18 = objc_msgSend(v17, "podcast");
      if (v18)
      {
        v19 = v18;
        v20 = Date.init()(v18);
        v21 = Date.timeIntervalSinceReferenceDate.getter(v20);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
        objc_msgSend(v19, "setLastRemovedFromUpNextDate:", v21);

        v17 = v19;
      }

    }
    *(_QWORD *)&v22 = swift_bridgeObjectRelease(v8).n128_u64[0];
    a1 = v24;
    goto LABEL_20;
  }
  __break(1u);
}

void sub_10035AFF4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  id v13;
  _QWORD v14[5];
  _QWORD *v15;

  v4 = v3;
  v8 = objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
  v9 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v9 + 16, v4);
  v10 = (_QWORD *)swift_allocObject(&unk_1004C5140, 48, 7);
  v10[2] = v9;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a1;
  v14[4] = sub_100364434;
  v15 = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10034F9E4;
  v14[3] = &unk_1004C5158;
  v11 = _Block_copy(v14);
  v12 = v15;
  swift_retain();
  v13 = a1;
  objc_msgSend(v8, "reportAConcernURLWithCompletion:", v11, swift_release(v12).n128_f64[0]);
  _Block_release(v11);

}

uint64_t sub_10035B114(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, void *a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t Strong;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t *);
  char *v63;
  uint64_t v64;
  char v65[24];
  _QWORD v66[8];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char v70;

  v64 = a1;
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v63 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_1005533D0);
  __chkstk_darwin();
  v16 = (uint64_t *)((char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v65, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
  {
    v21 = sub_100364440();
    v22 = swift_allocError(&type metadata for TranscriptError, v21, 0, 0);
    *v23 = 0;
    *v16 = v22;
    swift_storeEnumTagMultiPayload(v16, v14, 1);
    a3(v16);
    return sub_100007A28((uint64_t)v16, &qword_1005533D0);
  }
  v58 = Strong;
  v61 = a4;
  v18 = objc_msgSend(a5, "title");
  if (v18)
  {
    v19 = v18;
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v59 = v20;

  }
  else
  {
    v56 = 0;
    v59 = 0;
  }
  v24 = MPModelObject.adamID.getter(v18);
  v62 = a3;
  v60 = v14;
  if ((v25 & 1) != 0)
  {
    v57 = 0;
    v28 = 0;
  }
  else
  {
    v66[0] = v24;
    v26 = sub_100030584();
    v57 = BinaryInteger.description.getter(&type metadata for UInt64, v26);
    v28 = v27;
  }
  v29 = objc_msgSend(a5, "podcast");
  if (v29)
  {
    v30 = v29;
    v31 = v12;
    v32 = v11;
    v33 = objc_msgSend(v29, "title");

    if (v33)
    {
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

    }
    else
    {
      v34 = 0;
      v36 = 0;
    }
    v11 = v32;
    v12 = v31;
  }
  else
  {
    v34 = 0;
    v36 = 0;
  }
  v37 = objc_msgSend(a5, "podcast");
  if (v37)
  {
    v38 = v37;
    v39 = v12;
    v40 = v11;
    v41 = MPModelObject.adamID.getter(v37);
    v43 = v42;

    if ((v43 & 1) != 0)
    {
      v37 = 0;
      v46 = 0;
    }
    else
    {
      v66[0] = v41;
      v44 = sub_100030584();
      v37 = (id)BinaryInteger.description.getter(&type metadata for UInt64, v44);
      v46 = v45;
    }
    v11 = v40;
    v12 = v39;
  }
  else
  {
    v46 = 0;
  }
  v47 = v59;
  v66[0] = v56;
  v66[1] = v59;
  v66[2] = v57;
  v66[3] = v28;
  v66[4] = v34;
  v66[5] = v36;
  v66[6] = v37;
  v66[7] = v46;
  v67 = 0u;
  v68 = 0u;
  v69 = 0;
  v70 = 1;
  v48 = v58;
  sub_10003A834((_QWORD *)(v58 + 224), *(_QWORD *)(v58 + 248));
  sub_10020CCEC((uint64_t)v66, v64, (uint64_t)v10);
  swift_bridgeObjectRelease_n(0, 2);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v36);
  v49 = swift_bridgeObjectRelease(v46);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48))(v10, 1, v11, v49) == 1)
  {
    sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100553DC0);
    v50 = sub_100364440();
    v51 = swift_allocError(&type metadata for TranscriptError, v50, 0, 0);
    *v52 = 1;
    *v16 = v51;
    swift_storeEnumTagMultiPayload(v16, v60, 1);
    v62(v16);
    swift_release(v48);
    return sub_100007A28((uint64_t)v16, &qword_1005533D0);
  }
  v54 = v63;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v63, v10, v11);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(v16, v54, v11);
  swift_storeEnumTagMultiPayload(v16, v60, 0);
  v62(v16);
  swift_release(v48);
  sub_100007A28((uint64_t)v16, &qword_1005533D0);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v54, v11);
}

void sub_10035B5B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;

  sub_10003F544((uint64_t *)&unk_10055FF00);
  v1 = __chkstk_darwin();
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  if ((static Podcasts.isBlueMoonEnabled()(v1) & 1) != 0)
  {
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
    v7 = (_QWORD *)swift_allocObject(&unk_1004C50C8, 40, 7);
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = v4;
    swift_retain();
    v8 = sub_10034F890((uint64_t)v3, (uint64_t)&unk_100565EA0, (uint64_t)v7);
    swift_release(v8);
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 40);
    ObjectType = swift_getObjectType(*(_QWORD *)(v4 + 32), v5);
    (*(void (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);
  }
}

uint64_t sub_10035B6A0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v3 = swift_allocObject(&unk_1004C50A0, 81, 7);
  sub_10016965C(a1, v3 + 16);
  sub_1001860CC(a1);
  type metadata accessor for MTEpisodePubDateLimit(0);
  v5 = v4;
  v6 = sub_100026844(&qword_100565E90, (uint64_t (*)(uint64_t))type metadata accessor for MTEpisodePubDateLimit, (uint64_t)&unk_1003C8704);
  v7 = NSUserDefaults.queryPublisher<A>(_:)(sub_10036426C, v3, v5, v6);

  swift_release(v3);
  return v7;
}

uint64_t sub_10035B768(uint64_t a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v3 = swift_allocObject(&unk_1004C5078, 81, 7);
  sub_10016965C(a1, v3 + 16);
  sub_1001860CC(a1);
  v4 = sub_1003641E4();
  v5 = NSUserDefaults.queryPublisher<A>(_:)(sub_1003641BC, v3, &type metadata for EpisodeSortType, v4);

  swift_release(v3);
  return v5;
}

uint64_t sub_10035B810(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v3 = swift_allocObject(&unk_1004C5050, 81, 7);
  sub_10016965C(a1, v3 + 16);
  sub_1001860CC(a1);
  v4 = NSUserDefaults.queryPublisher<A>(_:)(sub_10036418C, v3, &type metadata for Bool, &protocol witness table for Bool);

  swift_release(v3);
  return v4;
}

uint64_t sub_10035B8B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  return sub_10035033C(a1, a2, a3 & 1, a4, a5, a6, a7);
}

uint64_t sub_10035B8DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;

  v5 = *v2;
  sub_10003F544((uint64_t *)&unk_100565E60);
  v6 = Promise.__allocating_init()();
  type metadata accessor for CoreDataFetcher(0);
  v7 = (_QWORD *)swift_allocObject(&unk_1004C5028, 48, 7);
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = v5;
  swift_retain();
  swift_bridgeObjectRetain(a2);
  v8 = swift_retain();
  static CoreDataFetcher.fetchPodcast(with:completion:)(a1, a2, sub_10036417C, v7, v8);
  swift_release(v7);
  return v6;
}

uint64_t sub_10035B990(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;

  v7 = *v3;
  sub_100361A48();
  sub_10003F544((uint64_t *)&unk_100565E60);
  v8 = Promise.__allocating_init()();
  type metadata accessor for CoreDataFetcher(0);
  v9 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v9 + 16, v7);
  v10 = swift_allocObject(&unk_1004C4FB0, 49, 7);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  *(_BYTE *)(v10 + 48) = a3;
  swift_retain();
  swift_retain();
  v11 = swift_bridgeObjectRetain(a2);
  static CoreDataFetcher.fetchPodcast(with:completion:)(a1, a2, sub_100364138, v10, v11);
  swift_release(v9);
  swift_release(v10);
  return v8;
}

uint64_t sub_10035BA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10035BB40(a1, a2, a3, a4, (uint64_t)&unk_1004C4F88, (uint64_t)sub_100365190);
}

uint64_t sub_10035BA98(uint64_t a1)
{
  return sub_100351178(a1);
}

uint64_t sub_10035BAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10035BB40(a1, a2, a3, a4, (uint64_t)&unk_1004C4F60, (uint64_t)sub_10036518C);
}

uint64_t sub_10035BACC(uint64_t a1)
{
  return sub_1003513AC(a1);
}

uint64_t sub_10035BAEC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100351500(a1, a2, a3);
}

uint64_t sub_10035BB0C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100351698(a1, a2, a3);
}

uint64_t sub_10035BB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10035BB40(a1, a2, a3, a4, (uint64_t)&unk_1004C4EC0, (uint64_t)sub_100365194);
}

uint64_t sub_10035BB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;

  v11 = *v6;
  sub_10003F544((uint64_t *)&unk_100565E60);
  v12 = Promise.__allocating_init()();
  type metadata accessor for CoreDataFetcher(0);
  v13 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v13 + 16, v11);
  v14 = swift_allocObject(a5, 32, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  swift_retain();
  v15 = swift_retain();
  static CoreDataFetcher.fetchPodcast(with:completion:)(a1, a2, a6, v14, v15);
  swift_release(v13);
  swift_release(v14);
  return v12;
}

uint64_t sub_10035BC1C(uint64_t a1)
{
  return sub_100350228(a1);
}

uint64_t sub_10035BC3C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;

  v7 = *v3;
  sub_10003F544((uint64_t *)&unk_100565E70);
  v8 = Promise.__allocating_init()();
  type metadata accessor for CoreDataFetcher(0);
  v9 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v9 + 16, v7);
  v10 = swift_allocObject(&unk_1004C4E20, 33, 7);
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = v9;
  *(_BYTE *)(v10 + 32) = a3;
  swift_retain();
  v11 = swift_retain();
  static CoreDataFetcher.fetchPodcast(with:completion:)(a1, a2, sub_100363FEC, v10, v11);
  swift_release(v9);
  swift_release(v10);
  return v8;
}

uint64_t sub_10035BD20(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1003519B4(a1, a2, a3);
}

uint64_t sub_10035BD40(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v3 = *v1;
  sub_10003F544((uint64_t *)&unk_100565E70);
  v4 = Promise.__allocating_init()();
  type metadata accessor for CoreDataFetcher(0);
  v5 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v5 + 16, v3);
  v6 = swift_allocObject(&unk_1004C4D80, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v5;
  swift_retain();
  v7 = swift_retain();
  static CoreDataFetcher.fetchPodcast(adamId:feedUrl:completion:)(a1, 0, 0, sub_100363F84, v6, v7);
  swift_release(v5);
  swift_release(v6);
  return v4;
}

uint64_t sub_10035BE14()
{
  return sub_100352434();
}

uint64_t sub_10035BE34(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;

  v5 = *v2;
  sub_10003F544((uint64_t *)&unk_100565E60);
  v6 = Promise.__allocating_init()();
  type metadata accessor for CoreDataFetcher(0);
  v7 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v7 + 16, v5);
  v8 = (_QWORD *)swift_allocObject(&unk_1004C4D58, 48, 7);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v6;
  v8[5] = v7;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  v9 = swift_retain();
  static CoreDataFetcher.fetchStation(with:completion:)(a1, a2, sub_100363F34, v8, v9);
  swift_release(v7);
  swift_release(v8);
  return v6;
}

void sub_10035BF14()
{
  sub_100352DF4();
}

void sub_10035BF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10035C108(a1, a2, a3, (SEL *)&selRef_setPodcastsOrder_);
}

uint64_t sub_10035BF48()
{
  id v0;
  uint64_t v1;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v1 = NSUserDefaults.showListSortType.getter();

  return v1;
}

void sub_10035BF94(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  NSUserDefaults.showListSortType.setter(a1);

}

double sub_10035BFF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  __n128 v9;
  double result;

  type metadata accessor for CoreDataFetcher(0);
  v8 = swift_allocObject(&unk_1004C4C68, 25, 7);
  *(_QWORD *)(v8 + 16) = a3;
  *(_BYTE *)(v8 + 24) = a4;
  sub_100168F7C(a3, a4);
  static CoreDataFetcher.fetchPodcast(with:completion:)(a1, a2, sub_100363E44, v8, v9);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

double sub_10035C080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  double result;

  type metadata accessor for CoreDataFetcher(0);
  v6 = swift_allocObject(&unk_1004C4C40, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  static CoreDataFetcher.fetchPodcast(with:completion:)(a1, a2, sub_100363E14, v6, v7);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

void sub_10035C0FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10035C108(a1, a2, a3, (SEL *)&selRef_setStationsOrder_);
}

void sub_10035C108(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v5;
  void *v6;
  Class isa;

  v5 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
  if (v5)
  {
    v6 = v5;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v6, *a4, isa);

  }
  else
  {
    __break(1u);
  }
}

id sub_10035C190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10035C1A8(a1, a2, a3, a4, a5, (SEL *)&selRef_setEpisodesOrder_forStation_);
}

id sub_10035C19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10035C1A8(a1, a2, a3, a4, a5, (SEL *)&selRef_setStationShowGroupOrder_forStation_);
}

id sub_10035C1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  id result;
  void *v8;
  Class isa;
  NSString v10;
  id v11;

  result = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
  if (result)
  {
    v8 = result;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v8, *a6, isa, v10);

    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10035C258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t ObjectType;
  void *v7;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  ObjectType = swift_getObjectType(*(_QWORD *)(*(_QWORD *)v2 + 72), a2);
  v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8))(a1, a2, ObjectType, v5);
  type metadata accessor for StationDetail(0);
  sub_1002DA298(v7, 0, 0, 0);
}

BOOL sub_10035C2CC()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
  if (v0)
  {
    v1 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "deleteStationWithUuid:", v1);

  }
  return v0 != 0;
}

uint64_t sub_10035C358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003546CC(a1, a2, a3, a4) & 1;
}

void sub_10035C37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100354D2C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10035C3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1003550A8(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10035C3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1003553AC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10035C40C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_retain(a1);
  return swift_release(v2);
}

double sub_10035C438()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 176)).n128_u64[0];
  return result;
}

void sub_10035C444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v7 = (_QWORD *)*v3;
  v8 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v12 = objc_msgSend(v8, "mainOrPrivateContext");

  v9 = v7 + 23;
  v10 = v7[26];
  v11 = v7[27];
  sub_10003A834(v9, v10);
  dispatch thunk of PodcastsStateCoordinatorProtocol.downloadEpisode(withUUID:isFromSaving:from:in:)(a1, a2, a3, 3, v12, v10, v11);

}

double sub_10035C4FC(uint64_t a1)
{
  return sub_10035590C(a1);
}

void sub_10035C51C(uint64_t a1)
{
  sub_100355A38(a1);
}

uint64_t sub_10035C53C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  sub_10003A834((_QWORD *)(*(_QWORD *)v1 + 184), v3);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.cancelAllDownloads(userInitiated:from:)(a1, 3, v3, v4);
}

uint64_t sub_10035C58C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 208);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 216);
  sub_10003A834((_QWORD *)(*(_QWORD *)v2 + 184), v5);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.cancelDownload(forEpisodeWithUUID:userInitiated:from:)(a1, a2, 1, 3, v5, v6);
}

double sub_10035C5F0(uint64_t a1)
{
  return sub_100355C78(a1);
}

void sub_10035C610()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)v0 + 48), "downloadManager");
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "resumeOrPauseEpisodeDownloadWithUuid:", v2);
  swift_unknownObjectRelease(v1);

}

uint64_t sub_10035C690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(*(_QWORD *)v3 + 208);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 216);
  sub_10003A834((_QWORD *)(*(_QWORD *)v3 + 184), v7);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.removeDownload(forEpisodeWithUUID:from:shouldAllowAutomaticRedownloads:)(a1, a2, 3, a3, v7, v8);
}

void sub_10035C6F8(uint64_t a1)
{
  sub_100355E44(a1);
}

uint64_t sub_10035C718(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t ObjectType;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 112);
  ObjectType = swift_getObjectType(*(_QWORD *)(*(_QWORD *)v2 + 104), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8))(a1, a2, ObjectType, v5);
}

double sub_10035C76C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin();
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v4;
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  v13 = swift_allocObject(&unk_1004C4AB0, 72, 7);
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = v11;
  *(_QWORD *)(v13 + 40) = a1;
  *(_BYTE *)(v13 + 48) = a2;
  *(_QWORD *)(v13 + 56) = a3;
  *(_QWORD *)(v13 + 64) = a4;
  swift_retain();
  swift_bridgeObjectRetain(a1);
  sub_10002CA20(a3, a4);
  v14 = sub_10034FA88((uint64_t)v10, (uint64_t)&unk_100565E50, v13);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

double sub_10035C86C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin();
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v4;
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  v13 = swift_allocObject(&unk_1004C4A88, 72, 7);
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = a1;
  *(_QWORD *)(v13 + 40) = v11;
  *(_BYTE *)(v13 + 48) = a2;
  *(_QWORD *)(v13 + 56) = a3;
  *(_QWORD *)(v13 + 64) = a4;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_10002CA20(a3, a4);
  v14 = sub_10034FA88((uint64_t)v10, (uint64_t)&unk_100565E30, v13);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

double sub_10035C96C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_1003568D0(a1, a2, a3, a4);
}

double sub_10035C98C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_100356C18(a1, a2, a3, a4);
}

double sub_10035C9AC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_100357364(a1, a2, a3, a4);
}

double sub_10035C9CC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100357884(a1, a2, a3, a4);
}

void sub_10035C9EC()
{
  void *v0;
  NSString v1;
  id v2;

  v0 = (void *)objc_opt_self(MTEpisode);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "predicateForBookmarksMigrationRecoveredEpisodesOnPodcastUuid:", v1);

  sub_10035860C(v2);
}

uint64_t sub_10035CA70(uint64_t a1)
{
  id v2;
  id v3;
  _QWORD v5[5];
  uint64_t v6;

  v2 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v3 = objc_msgSend(v2, "mainOrPrivateContext");

  v5[2] = a1;
  v5[3] = v3;
  NSManagedObjectContext.performAndWait<A>(_:)(&v6, sub_100363BA8, v5, &type metadata for Int);

  return v6;
}

void sub_10035CB08(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  id v6;

  v2 = (void *)objc_opt_self(MTEpisode);
  swift_bridgeObjectRetain(a1);
  v4 = sub_10002B070(v3);
  swift_bridgeObjectRelease(a1);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(v2, "predicateForEpisodeUuids:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

  sub_10035860C(v6);
}

void sub_10035CBB8(uint64_t a1, void *a2)
{
  sub_100358A34(a1, a2);
}

uint64_t sub_10035CBD8(void *a1)
{
  return sub_100358DD4(a1);
}

void sub_10035CBF8(void *a1)
{
  sub_100359124(a1);
}

void sub_10035CC20(uint64_t a1, uint64_t a2, char a3)
{
  void *v4;
  NSString v5;
  id v6;

  v4 = (void *)objc_opt_self(MTEpisode);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "predicateForDownloadedEpisodesOnPodcastUuid:", v5);

  sub_100359AEC(v6, a3);
}

void sub_10035CCB4()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(MTEpisode), "predicateForDownloaded:excludeHidden:", 1, 0);
  sub_100359AEC(v0, 0);

}

uint64_t sub_10035CD10(uint64_t a1, uint64_t a2)
{
  return sub_100363734(a1, a2, (SEL *)&selRef_predicateForDownloadedEpisodesOnPodcastUuid_, (uint64_t)sub_100363B8C);
}

uint64_t sub_10035CD34()
{
  id v0;
  id v1;
  id v2;
  _QWORD v4[3];
  char v5;
  id v6;
  id v7;
  uint64_t v8;

  v0 = objc_msgSend((id)objc_opt_self(MTEpisode), "predicateForDownloaded:excludeHidden:", 1, 0);
  v1 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v2 = objc_msgSend(v1, "mainOrPrivateContext");

  v4[2] = 0;
  v5 = 1;
  v6 = v0;
  v7 = v2;
  NSManagedObjectContext.performAndWait<A>(_:)(&v8, sub_100363B8C, v4, &type metadata for Int);

  return v8;
}

uint64_t sub_10035CE08(uint64_t a1, uint64_t a2)
{
  return sub_100363734(a1, a2, (SEL *)&selRef_predicateForBookmarkedEpisodesOnPodcastUuid_, (uint64_t)sub_100363B8C);
}

uint64_t sub_10035CE34(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_10035A218(a1, a2);
  return v2 & 1;
}

void sub_10035CE5C(uint64_t a1, unint64_t a2, char a3, char a4)
{
  sub_10035A584(a1, a2, a3, a4);
}

uint64_t sub_10035CE7C()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v4;

  v0 = (void *)objc_opt_self(MTPodcast);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "predicateForPodcastUUID:", v1);

  type metadata accessor for CoreDataFetcher(0);
  static CoreDataFetcher.performAndWaitOnPodcast<A>(with:block:)(&v4, v2, sub_10035A1B4, 0, &type metadata for String);

  return v4;
}

void sub_10035CF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10035A980(a1, a2, a3, a4);
}

void sub_10035CF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10035AB10(a1, a2, a3, a4);
}

void sub_10035CF68(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10035AFF4(a1, a2, a3);
}

void sub_10035CF88(uint64_t a1, uint64_t a2)
{
  sub_10035CFAC(a1, a2, (unsigned int *)&enum case for HUDViewController.HUDType.addedToBookmarks(_:));
}

void sub_10035CF94(uint64_t a1, uint64_t a2)
{
  sub_10035CFAC(a1, a2, (unsigned int *)&enum case for HUDViewController.HUDType.removedFromBookmarks(_:));
}

void sub_10035CFA0(uint64_t a1, uint64_t a2)
{
  sub_10035CFAC(a1, a2, (unsigned int *)&enum case for HUDViewController.HUDType.following(_:));
}

void sub_10035CFAC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;

  v4 = type metadata accessor for HUDViewController.HUDType(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v7 + 104))(v6, *a3);
  v8 = objc_allocWithZone((Class)type metadata accessor for HUDViewController(0));
  v9 = (void *)HUDViewController.init(type:)(v6);
  dispatch thunk of HUDViewController.present()();

}

uint64_t sub_10035D03C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10035D0A0;
  return v6(a1);
}

uint64_t sub_10035D0A0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10035D0EC(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  double v9;
  uint64_t v10;

  v5 = a4();
  v6 = *a1;
  v7 = *a1 + 8;
  v9 = v5;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6, v7);
  *a1 = v7;
  return result;
}

uint64_t sub_10035D13C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for PlaybackIntent.Option(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100026844(&qword_1005529E8, v12, (uint64_t)&protocol conformance descriptor for PlaybackIntent.Option);
  swift_bridgeObjectRetain(v10);
  v37 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v15;
    v36 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100026844(&qword_1005529F0, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackIntent.Option, (uint64_t)&protocol conformance descriptor for PlaybackIntent.Option);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v35;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v33;
        a1 = v34;
        v26 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *(_QWORD *)(*v33 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v37;
    v20(v9, v37, v6);
    v38 = *v3;
    *v3 = 0x8000000000000000;
    sub_10035E844((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v38;
    v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1;
  }
}

uint64_t sub_10035D398(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v7 = a4 & 1;
  v8 = *v4;
  Hasher.init(_seed:)(v39, *(_QWORD *)(*v4 + 40));
  swift_bridgeObjectRetain(v8);
  EpisodeStateIdentifier.hash(into:)(v39, a2, a3, v7);
  v9 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v8 + 32));
  v10 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    v37 = a2;
    v38 = a3;
    goto LABEL_10;
  }
  v34 = -1 << *(_BYTE *)(v8 + 32);
  v11 = 24 * v9;
  v12 = *(_QWORD *)(v8 + 48) + 24 * v9;
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v7;
  v16 = *(unsigned __int8 *)(v12 + 16);
  sub_10003CAD8(*(_QWORD *)v12, v14, *(_BYTE *)(v12 + 16));
  v17 = static EpisodeStateIdentifier.== infix(_:_:)(v13, v14, v16, a2, a3, v15);
  v18 = a3;
  v19 = v17;
  v20 = v13;
  v21 = v18;
  sub_10003CA84(v20, v14, v16);
  if ((v19 & 1) == 0)
  {
    v37 = a2;
    v38 = v21;
    v9 = (v9 + 1) & ~v34;
    if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    {
      v7 = v15;
      while (1)
      {
        v11 = 24 * v9;
        v22 = *(_QWORD *)(v8 + 48) + 24 * v9;
        v23 = *(_QWORD *)v22;
        v24 = *(_QWORD *)(v22 + 8);
        v25 = *(unsigned __int8 *)(v22 + 16);
        sub_10003CAD8(*(_QWORD *)v22, v24, *(_BYTE *)(v22 + 16));
        v26 = static EpisodeStateIdentifier.== infix(_:_:)(v23, v24, v25, a2, v38, v7);
        sub_10003CA84(v23, v24, v25);
        if ((v26 & 1) != 0)
          break;
        v9 = (v9 + 1) & ~v34;
        v7 = v15;
        if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_10;
      }
      v21 = v38;
      goto LABEL_12;
    }
    LODWORD(v7) = v15;
LABEL_10:
    swift_bridgeObjectRelease(v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v35);
    v39[0] = *v35;
    *v35 = 0x8000000000000000;
    sub_10003CAD8(v37, v38, v7);
    sub_10035EA98(v37, v38, v7, v9, isUniquelyReferenced_nonNull_native);
    v28 = *v35;
    *v35 = v39[0];
    swift_bridgeObjectRelease(v28);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v38;
    result = 1;
    *(_BYTE *)(a1 + 16) = (_DWORD)v7 != 0;
    return result;
  }
LABEL_12:
  swift_bridgeObjectRelease(v8);
  sub_10003CA84(a2, v21, v15);
  v30 = *(_QWORD *)(*v35 + 48) + v11;
  v31 = *(_QWORD *)v30;
  v32 = *(_QWORD *)(v30 + 8);
  v33 = *(_BYTE *)(v30 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v30;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v33;
  sub_10003CAD8(v31, v32, v33);
  return 0;
}

uint64_t sub_10035D640(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for ShowInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100026844(&qword_100560A88, v12, (uint64_t)&protocol conformance descriptor for ShowInfo);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100026844((unint64_t *)&unk_100564E20, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t)&protocol conformance descriptor for ShowInfo);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_10035ED10((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_10035D89C(uint64_t *a1, uint64_t a2)
{
  return sub_10035D8C4(a1, a2, &qword_100565F88, (uint64_t)&type metadata for Int64);
}

uint64_t sub_10035D8B0(uint64_t *a1, uint64_t a2)
{
  return sub_10035D8C4(a1, a2, &qword_100565FF8, (uint64_t)&type metadata for UInt64);
}

uint64_t sub_10035D8C4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;

  v7 = v4;
  v10 = *v4;
  v11 = static Hasher._hash(seed:_:)(*(_QWORD *)(v10 + 40), a2);
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v19 = *v7;
    *v7 = 0x8000000000000000;
    sub_10035EF64(a2, v13, isUniquelyReferenced_nonNull_native, a3, a4);
    v18 = *v7;
    *v7 = v19;
    swift_bridgeObjectRelease(v18);
    result = 1;
    goto LABEL_8;
  }
  v14 = *(_QWORD *)(v10 + 48);
  if (*(_QWORD *)(v14 + 8 * v13) != a2)
  {
    v15 = ~v12;
    do
    {
      v13 = (v13 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v14 + 8 * v13) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

void sub_10035D9D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10003F544(&qword_100552B78);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v11)
                    goto LABEL_36;
                  v19 = v8[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = *(_QWORD *)(v3 + 48) + 40 * v17;
      v32 = *(_OWORD *)v21;
      v33 = *(_OWORD *)(v21 + 16);
      v34 = *(_QWORD *)(v21 + 32);
      v22 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v6 + 48) + 40 * v14;
      *(_OWORD *)v15 = v32;
      *(_OWORD *)(v15 + 16) = v33;
      *(_QWORD *)(v15 + 32) = v34;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10035DC9C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10003F544((uint64_t *)&unk_100565FB0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v35 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v33 = v2;
    v34 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain();
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v16 >= v34)
          goto LABEL_36;
        v17 = v35[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v34)
            goto LABEL_36;
          v17 = v35[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v34)
              goto LABEL_36;
            v17 = v35[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v34)
              {
LABEL_36:
                swift_release(v3);
                v2 = v33;
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v35[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v11 >= v34)
                    goto LABEL_36;
                  v17 = v35[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = v3;
      v20 = *(_QWORD *)(v3 + 48) + 24 * v15;
      v21 = *(_QWORD *)v20;
      v22 = *(_QWORD *)(v20 + 8);
      v23 = *(unsigned __int8 *)(v20 + 16);
      Hasher.init(_seed:)(v36, *(_QWORD *)(v6 + 40));
      EpisodeStateIdentifier.hash(into:)(v36, v21, v22, v23);
      v24 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v10 + 8 * v27);
        }
        while (v31 == -1);
        v12 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = *(_QWORD *)(v6 + 48) + 24 * v12;
      *(_QWORD *)v13 = v21;
      *(_QWORD *)(v13 + 8) = v22;
      *(_BYTE *)(v13 + 16) = v23;
      ++*(_QWORD *)(v6 + 16);
      v3 = v19;
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10035DFAC(uint64_t a1)
{
  sub_10035DFD0(a1, (uint64_t *)&unk_100564E60);
}

void sub_10035DFB8(uint64_t a1)
{
  sub_10035DFD0(a1, (uint64_t *)&unk_100565FA0);
}

void sub_10035DFC4(uint64_t a1)
{
  sub_10035DFD0(a1, &qword_100564E38);
}

void sub_10035DFD0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    swift_retain(v4);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v18 >= v12)
          goto LABEL_36;
        v19 = v9[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v12)
            goto LABEL_36;
          v19 = v9[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v12)
              goto LABEL_36;
            v19 = v9[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v12)
              {
LABEL_36:
                swift_release(v4);
                v3 = v31;
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v12)
                    goto LABEL_36;
                  v19 = v9[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      v22 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  swift_release(v4);
  *v3 = v7;
}

void sub_10035E268(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  unint64_t *v49;
  uint64_t v50;

  v49 = a4;
  v50 = a5;
  v7 = v5;
  v48 = a2;
  v9 = a2(0);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10003F544(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v46 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v44 = v7;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  v20 = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v25 >= v45)
      goto LABEL_35;
    v26 = v46[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_35;
      v26 = v46[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v45)
          goto LABEL_35;
        v26 = v46[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v47 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v47 + 32);
    v31(v11, v29 + v30 * v24, v9, v20);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_100026844(v49, v48, v50);
    v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    ((void (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v45)
  {
    v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v45)
          goto LABEL_35;
        v26 = v46[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v44;
  v42 = 1 << *(_BYTE *)(v12 + 32);
  if (v42 > 63)
    bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v46 = -1 << v42;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  swift_release(v12);
  *v7 = v14;
}

void sub_10035E5C8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v4 + 56);
    v10 = 1 << *(_BYTE *)(v4 + 32);
    v30 = -1 << v10;
    v31 = v3;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v4 + 56);
    v32 = 1 << *(_BYTE *)(v4 + 32);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = v6 + 56;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v18 >= v13)
          goto LABEL_36;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_36;
          v19 = v9[v8];
          if (!v19)
          {
            v8 = v18 + 2;
            if (v18 + 2 >= v13)
              goto LABEL_36;
            v19 = v9[v8];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_36:
                if (v32 >= 64)
                  bzero((void *)(v4 + 56), 8 * v13);
                else
                  *v9 = v30;
                v3 = v31;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v8 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v8 >= v13)
                    goto LABEL_36;
                  v19 = v9[v8];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v8 = v20;
            }
          }
        }
LABEL_26:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      v22 = static Hasher._hash(seed:_:)(*(_QWORD *)(v7 + 40), v21);
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  swift_release(v4);
  *v3 = v7;
}

uint64_t sub_10035E844(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for PlaybackIntent.Option(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10035E268(v12, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackIntent.Option, &qword_1005529E0, &qword_1005529E8, (uint64_t)&protocol conformance descriptor for PlaybackIntent.Option);
  }
  else
  {
    if (v11 > v10)
    {
      sub_10035F94C((uint64_t (*)(_QWORD))&type metadata accessor for PlaybackIntent.Option, &qword_1005529E0);
      goto LABEL_12;
    }
    sub_1003604E4(v12, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackIntent.Option, &qword_1005529E0, &qword_1005529E8, (uint64_t)&protocol conformance descriptor for PlaybackIntent.Option);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100026844(&qword_1005529E8, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackIntent.Option, (uint64_t)&protocol conformance descriptor for PlaybackIntent.Option);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100026844(&qword_1005529F0, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackIntent.Option, (uint64_t)&protocol conformance descriptor for PlaybackIntent.Option);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_10035EA98(uint64_t result, uint64_t a2, char a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD v36[9];

  v8 = result;
  v9 = a3 & 1;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0)
  {
    v12 = result;
  }
  else
  {
    v13 = v10 + 1;
    if ((a5 & 1) != 0)
    {
      sub_10035DC9C(v13);
    }
    else
    {
      if (v11 > v10)
      {
        v12 = v8;
        result = (uint64_t)sub_10035F5C4();
        goto LABEL_18;
      }
      sub_10035FF8C(v13);
    }
    v14 = *v5;
    Hasher.init(_seed:)(v36, *(_QWORD *)(*v5 + 40));
    EpisodeStateIdentifier.hash(into:)(v36, v8, a2, v9);
    result = Hasher._finalize()();
    a4 = result & ~(-1 << *(_BYTE *)(v14 + 32));
    v15 = v14 + 56;
    if (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
    {
      v33 = -1 << *(_BYTE *)(v14 + 32);
      v35 = v14;
      v16 = *(_QWORD *)(v14 + 48) + 24 * a4;
      v17 = *(_QWORD *)v16;
      v18 = *(_QWORD *)(v16 + 8);
      v19 = *(unsigned __int8 *)(v16 + 16);
      sub_10003CAD8(*(_QWORD *)v16, v18, *(_BYTE *)(v16 + 16));
      v12 = v8;
      v20 = v8;
      v21 = a2;
      v22 = static EpisodeStateIdentifier.== infix(_:_:)(v17, v18, v19, v20, a2, v9);
      result = sub_10003CA84(v17, v18, v19);
      if ((v22 & 1) != 0)
        goto LABEL_21;
      a4 = (a4 + 1) & ~v33;
      if (((*(_QWORD *)(v15 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
      {
        a2 = v21;
        while (1)
        {
          v23 = *(_QWORD *)(v35 + 48) + 24 * a4;
          v24 = *(_QWORD *)v23;
          v25 = *(_QWORD *)(v23 + 8);
          v26 = *(unsigned __int8 *)(v23 + 16);
          sub_10003CAD8(*(_QWORD *)v23, v25, *(_BYTE *)(v23 + 16));
          v27 = static EpisodeStateIdentifier.== infix(_:_:)(v24, v25, v26, v12, a2, v9);
          result = sub_10003CA84(v24, v25, v26);
          if ((v27 & 1) != 0)
            goto LABEL_21;
          a4 = (a4 + 1) & ~v33;
          a2 = v21;
          if (((*(_QWORD *)(v15 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) == 0)
            goto LABEL_18;
        }
      }
      a2 = v21;
    }
    else
    {
      v12 = v8;
    }
  }
LABEL_18:
  v28 = *v34;
  *(_QWORD *)(*v34 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v29 = *(_QWORD *)(v28 + 48) + 24 * a4;
  *(_QWORD *)v29 = v12;
  *(_QWORD *)(v29 + 8) = a2;
  *(_BYTE *)(v29 + 16) = (_DWORD)v9 != 0;
  v30 = *(_QWORD *)(v28 + 16);
  v31 = __OFADD__(v30, 1);
  v32 = v30 + 1;
  if (!v31)
  {
    *(_QWORD *)(v28 + 16) = v32;
    return result;
  }
  __break(1u);
LABEL_21:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for EpisodeStateIdentifier);
  __break(1u);
  return result;
}

uint64_t sub_10035ED10(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for ShowInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10035E268(v12, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t *)&unk_100565F90, &qword_100560A88, (uint64_t)&protocol conformance descriptor for ShowInfo);
  }
  else
  {
    if (v11 > v10)
    {
      sub_10035F94C((uint64_t (*)(_QWORD))&type metadata accessor for ShowInfo, (uint64_t *)&unk_100565F90);
      goto LABEL_12;
    }
    sub_1003604E4(v12, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t *)&unk_100565F90, &qword_100560A88, (uint64_t)&protocol conformance descriptor for ShowInfo);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100026844(&qword_100560A88, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t)&protocol conformance descriptor for ShowInfo);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100026844((unint64_t *)&unk_100564E20, (uint64_t (*)(uint64_t))&type metadata accessor for ShowInfo, (uint64_t)&protocol conformance descriptor for ShowInfo);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_10035EF64(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10035E5C8(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_10035FB70(a4);
      goto LABEL_14;
    }
    sub_100360800(v11, a4);
  }
  v12 = *v5;
  v13 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v5 + 40), a1);
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    if (*(_QWORD *)(v15 + 8 * a2) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a5);
      __break(1u);
    }
    else
    {
      v16 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v15 + 8 * a2) == a1)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v17 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v20;
}

void *sub_10035F098()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  sub_10003F544(&qword_100552B78);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    result = (void *)sub_100048678(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10035F264()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10003F544((uint64_t *)&unk_100565FE0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10035F414()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10003F544(&qword_100552B70);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10035F5C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10003F544((uint64_t *)&unk_100565FB0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v21 = *(_QWORD *)v17;
    *(_QWORD *)(v21 + 8) = v19;
    *(_BYTE *)(v21 + 16) = v20;
    result = (void *)sub_10003CAD8(v18, v19, v20);
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10035F780()
{
  return sub_10035F798((uint64_t *)&unk_100565FA0);
}

id sub_10035F78C()
{
  return sub_10035F798(&qword_100564E38);
}

id sub_10035F798(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_10003F544(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10035F938()
{
  return sub_10035F94C((uint64_t (*)(_QWORD))&type metadata accessor for ShowInfo, (uint64_t *)&unk_100565F90);
}

void *sub_10035F94C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_10003F544(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_10035FB70(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_10003F544(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 56 + 8 * v8)
    memmove(v6, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_10035FCFC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];
  uint64_t v33;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10003F544(&qword_100552B78);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_27;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v20 >= v11)
      goto LABEL_36;
    v21 = *(_QWORD *)(v8 + 8 * v20);
    ++v13;
    if (!v21)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v11)
        goto LABEL_36;
      v21 = *(_QWORD *)(v8 + 8 * v13);
      if (!v21)
      {
        v13 = v20 + 2;
        if (v20 + 2 >= v11)
          goto LABEL_36;
        v21 = *(_QWORD *)(v8 + 8 * v13);
        if (!v21)
          break;
      }
    }
LABEL_26:
    v10 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v13 << 6);
LABEL_27:
    sub_100048678(*(_QWORD *)(v3 + 48) + 40 * v19, (uint64_t)v32);
    v23 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v6 + 48) + 40 * v14;
    v16 = v32[0];
    v17 = v32[1];
    *(_QWORD *)(v15 + 32) = v33;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    ++*(_QWORD *)(v6 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v11)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v21 = *(_QWORD *)(v8 + 8 * v22);
  if (v21)
  {
    v13 = v22;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v11)
      goto LABEL_36;
    v21 = *(_QWORD *)(v8 + 8 * v13);
    ++v22;
    if (v21)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_10035FF8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10003F544((uint64_t *)&unk_100565FB0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v31 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain();
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_27;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v32)
      goto LABEL_36;
    v17 = *(_QWORD *)(v31 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_36;
      v17 = *(_QWORD *)(v31 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_36;
        v17 = *(_QWORD *)(v31 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_27:
    v19 = *(_QWORD *)(v3 + 48) + 24 * v15;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(unsigned __int8 *)(v19 + 16);
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    sub_10003CAD8(v20, v21, v22);
    EpisodeStateIdentifier.hash(into:)(v33, v20, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v10 + 8 * v26);
      }
      while (v30 == -1);
      v12 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = *(_QWORD *)(v6 + 48) + 24 * v12;
    *(_QWORD *)v13 = v20;
    *(_QWORD *)(v13 + 8) = v21;
    *(_BYTE *)(v13 + 16) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v31 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v32)
      goto LABEL_36;
    v17 = *(_QWORD *)(v31 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_10036026C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::Int v20;
  id v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10003F544(&qword_100564E38);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v11)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v11)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v11)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v6 + 40);
    v21 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v22 = NSObject._rawHashValue(seed:)(v20);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v11)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1003604E4(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t (*v43)(uint64_t);
  unint64_t *v44;
  uint64_t v45;

  v44 = a4;
  v45 = a5;
  v7 = v5;
  v43 = a2;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10003F544(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    swift_release(v13);
LABEL_37:
    *v7 = v15;
    return;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v40 = v7;
  v41 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v42 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  v21 = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v42)
      goto LABEL_35;
    v27 = *(_QWORD *)(v41 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v42)
        goto LABEL_35;
      v27 = *(_QWORD *)(v41 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v42)
          goto LABEL_35;
        v27 = *(_QWORD *)(v41 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v9, v21);
    v30 = *(_QWORD *)(v15 + 40);
    v31 = sub_100026844(v44, v43, v45);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v33 = -1 << *(_BYTE *)(v15 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v42)
  {
LABEL_35:
    swift_release_n(v13, 2);
    v7 = v40;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v41 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v42)
      goto LABEL_35;
    v27 = *(_QWORD *)(v41 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

void sub_100360800(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    swift_release(v4);
LABEL_38:
    *v3 = v7;
    return;
  }
  v30 = v3;
  v8 = 0;
  v9 = v4 + 56;
  v10 = 1 << *(_BYTE *)(v4 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v4 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 56;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_27;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_36;
      v19 = *(_QWORD *)(v9 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_36;
        v19 = *(_QWORD *)(v9 + 8 * v8);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_27:
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    v22 = static Hasher._hash(seed:_:)(*(_QWORD *)(v7 + 40), v21);
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v14 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_36:
    swift_release(v4);
    v3 = v30;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void (*sub_100360A5C(void (**a1)(id *), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100360C54(v6, a2, a3);
  return sub_100179A78;
}

void (*sub_100360AB0(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_100360CC0(v6, a2, a3);
  return sub_100179A78;
}

void (*sub_100360B04(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100360D2C(v6, a2, a3);
  return sub_100179A78;
}

void (*sub_100360B58(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_100360D98(v6, a2, a3);
  return sub_100179A78;
}

void (*sub_100360BAC(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_100360E04(v6, a2, a3);
  return sub_100179A78;
}

void (*sub_100360C00(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_100360E78(v6, a2, a3);
  return sub_100179A78;
}

void (*sub_100360C54(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_100365180;
  }
  __break(1u);
  return result;
}

uint64_t *sub_100360CC0(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_1002BD2DC;
  }
  __break(1u);
  return result;
}

void (*sub_100360D2C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1002BD334;
  }
  __break(1u);
  return result;
}

uint64_t *sub_100360D98(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_100365184;
  }
  __break(1u);
  return result;
}

uint64_t *sub_100360E04(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_100360E70;
  }
  __break(1u);
  return result;
}

uint64_t sub_100360E70(_QWORD *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t *sub_100360E78(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_100365188;
  }
  __break(1u);
  return result;
}

uint64_t sub_100360EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21)
{
  uint64_t v23;
  void *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  _QWORD v35[5];
  _QWORD v36[6];

  v36[3] = type metadata accessor for RestrictionsController();
  v36[4] = &off_1004B0550;
  v36[0] = a14;
  v35[3] = type metadata accessor for TranscriptReportConcernURLBuilder();
  v35[4] = &off_1004B6110;
  v35[0] = a18;
  *(_QWORD *)(a21 + 176) = 0;
  *(_QWORD *)(a21 + 264) = 0;
  *(_BYTE *)(a21 + 272) = 1;
  *(_QWORD *)(a21 + 328) = 0;
  *(_QWORD *)(a21 + 280) = a20;
  sub_10000A520((uint64_t)a19, a21 + 288);
  *(_QWORD *)(a21 + 16) = a1;
  *(_QWORD *)(a21 + 24) = a2;
  *(_QWORD *)(a21 + 32) = a3;
  *(_QWORD *)(a21 + 40) = a4;
  *(_QWORD *)(a21 + 48) = a5;
  *(_QWORD *)(a21 + 56) = a6;
  *(_QWORD *)(a21 + 64) = a7;
  *(_QWORD *)(a21 + 72) = a8;
  *(_QWORD *)(a21 + 80) = a9;
  *(_QWORD *)(a21 + 88) = a10;
  *(_QWORD *)(a21 + 96) = a11;
  *(_QWORD *)(a21 + 104) = a12;
  *(_QWORD *)(a21 + 112) = a13;
  sub_10000A520((uint64_t)v36, a21 + 120);
  *(_QWORD *)(a21 + 160) = a15;
  *(_QWORD *)(a21 + 168) = a16;
  sub_10000A520((uint64_t)a17, a21 + 184);
  sub_10000A520((uint64_t)v35, a21 + 224);
  type metadata accessor for DeviceCapacityMonitor(0);
  swift_retain(a20);
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a3);
  swift_unknownObjectRetain(a5);
  swift_unknownObjectRetain(a6);
  swift_unknownObjectRetain(a8);
  swift_unknownObjectRetain(a10);
  swift_unknownObjectRetain(a12);
  v23 = swift_unknownObjectRetain(a15);
  v24 = (void *)static DeviceCapacityMonitor.shared.getter(v23);
  v25 = swift_allocObject(&unk_1004C4D30, 24, 7);
  swift_weakInit(v25 + 16, a21);
  v26 = swift_retain(v25);
  v27 = DeviceCapacityMonitor.addCapacityChangeObserver(options:callback:)(3, sub_100364F54, v25, v26);
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(a5);
  swift_unknownObjectRelease(a6);
  swift_unknownObjectRelease(a8);
  swift_unknownObjectRelease(a10);
  swift_unknownObjectRelease(a12);
  swift_unknownObjectRelease(a15);
  swift_release(a20);

  swift_release(v25);
  sub_10003D380(a19);
  sub_10003D380(v35);
  sub_10003D380(a17);
  sub_10003D380(v36);
  swift_release(v25);
  *(_QWORD *)(a21 + 264) = v27;
  *(_BYTE *)(a21 + 272) = 0;
  return a21;
}

uint64_t sub_10036116C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, __int128 a13, _QWORD *a14, uint64_t a15, _QWORD *a16, uint64_t a17)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  _UNKNOWN **v42;
  _QWORD v43[3];
  uint64_t v44;
  _UNKNOWN **v45;

  v38 = a7;
  v39 = a8;
  v36 = a5;
  v37 = a6;
  v34 = a3;
  v35 = a4;
  v32 = a10;
  v33 = a9;
  v31 = a13;
  v44 = type metadata accessor for RestrictionsController();
  v45 = &off_1004B0550;
  v43[0] = a12;
  v41 = type metadata accessor for TranscriptReportConcernURLBuilder();
  v42 = &off_1004B6110;
  v40[0] = a15;
  v19 = type metadata accessor for LibraryActionController();
  v20 = swift_allocObject(v19, 336, 7);
  v21 = sub_100038DEC((uint64_t)v43, v44);
  __chkstk_darwin(v21);
  v23 = (uint64_t *)((char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  v25 = sub_100038DEC((uint64_t)v40, v41);
  __chkstk_darwin(v25);
  v27 = (uint64_t *)((char *)&v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  v29 = sub_100360EE4(a1, a2, v34, v35, v36, v37, v38, v39, v33, *((uint64_t *)&v33 + 1), v32, *((uint64_t *)&v32 + 1), a11, *v23, v31, *((uint64_t *)&v31 + 1), a14, *v27, a16,
          a17,
          v20);
  sub_10003D380(v40);
  sub_10003D380(v43);
  return v29;
}

uint64_t sub_100361334(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_10036139C;
  return v5(v2 + 32);
}

uint64_t sub_10036139C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

_QWORD *sub_1003613EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(type metadata accessor for EpisodeOffer(0) - 8);
  v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  type metadata accessor for CoreDataFetcher(0);
  v6 = *(_QWORD *)(v4 + 72);
  v19 = a1;
  v7 = swift_bridgeObjectRetain(a1);
  v8 = _swiftEmptyArrayStorage;
  do
  {
    v9 = (void *)static CoreDataFetcher.unsafeFindOrCreateStoreEpisode(for:in:)(v5, a2, v7);
    v10 = objc_msgSend(v9, "uuid");
    if (v10)
    {
      v11 = v10;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v14 = v13;

      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_10027AE00(0, v8[2] + 1, 1, v8);
      v16 = v8[2];
      v15 = v8[3];
      if (v16 >= v15 >> 1)
        v8 = sub_10027AE00((_QWORD *)(v15 > 1), v16 + 1, 1, v8);
      v8[2] = v16 + 1;
      v17 = &v8[2 * v16];
      v17[4] = v12;
      v17[5] = v14;
    }
    else
    {

    }
    v5 += v6;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease(v19);
  return v8;
}

uint64_t sub_100361558(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  _QWORD v47[5];
  _QWORD v48[5];
  _QWORD v49[2];
  _QWORD v50[5];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  uint64_t v55;
  _QWORD v56[2];
  _QWORD v57[3];

  v2 = sub_10003F544(&qword_100553B70);
  BaseObjectGraph.inject<A>(_:)(v57, v2, v2);
  v44 = v57[1];
  v45 = v57[0];
  v3 = sub_10003F544((uint64_t *)&unk_100553BC0);
  BaseObjectGraph.inject<A>(_:)(v56, v3, v3);
  v42 = v56[1];
  v43 = v56[0];
  v4 = sub_10003F544((uint64_t *)&unk_100553B60);
  BaseObjectGraph.inject<A>(_:)(&v55, v4, v4);
  v41 = v55;
  v5 = sub_10003F544((uint64_t *)&unk_100565FC0);
  BaseObjectGraph.inject<A>(_:)(v54, v5, v5);
  v39 = v54[1];
  v40 = v54[0];
  v6 = sub_10003F544((uint64_t *)&unk_100553B80);
  BaseObjectGraph.inject<A>(_:)(v53, v6, v6);
  v37 = v53[1];
  v38 = v53[0];
  v7 = sub_10003F544((uint64_t *)&unk_100565FD0);
  BaseObjectGraph.inject<A>(_:)(v52, v7, v7);
  v8 = v52[1];
  v36 = v52[0];
  v9 = sub_10003F544((uint64_t *)&unk_100553BD0);
  BaseObjectGraph.inject<A>(_:)(v51, v9, v9);
  v10 = v51[0];
  v11 = v51[1];
  v12 = sub_10003F544((uint64_t *)&unk_10055C410);
  BaseObjectGraph.inject<A>(_:)(v50, v12, v12);
  v13 = sub_10003F544((uint64_t *)&unk_100553BA0);
  BaseObjectGraph.inject<A>(_:)(v49, v13, v13);
  v14 = v49[0];
  v15 = v49[1];
  v16 = sub_10003F544(&qword_100553AE0);
  BaseObjectGraph.inject<A>(_:)(v48, v16, v16);
  v17 = sub_10003F544((uint64_t *)&unk_10055C420);
  BaseObjectGraph.inject<A>(_:)(v47, v17, v17);
  v18 = sub_10003F544((uint64_t *)&unk_10055B8B0);
  BaseObjectGraph.inject<A>(_:)(v46, v18, v18);
  v19 = sub_100038DEC((uint64_t)v50, v50[3]);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_100038DEC((uint64_t)v47, v47[3]);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = *v21;
  v28 = *v25;
  swift_retain(a1);
  *(_QWORD *)&v35 = v14;
  *((_QWORD *)&v35 + 1) = v15;
  *(_QWORD *)&v34 = v8;
  *((_QWORD *)&v34 + 1) = v10;
  *((_QWORD *)&v33 + 1) = v36;
  *(_QWORD *)&v33 = v37;
  v29 = sub_10036116C(v45, v44, v43, v42, v41, v40, v39, v38, v33, v34, v11, v27, v35, v48, v28, v46, a1);
  sub_10003D380(v47);
  sub_10003D380(v50);
  v30 = type metadata accessor for PlaybackController(0);
  swift_retain(v29);
  BaseObjectGraph.inject<A>(_:)(v50, v30, v30);
  swift_release(a1);
  v31 = *(_QWORD *)(v29 + 328);
  *(_QWORD *)(v29 + 328) = v50[0];
  swift_release(v29);
  swift_release(v31);
  return v29;
}

BOOL sub_100361860(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = objc_msgSend((id)objc_opt_self(MTEpisode), "predicateForVisuallyPlayed:", 0);
  v3 = objc_msgSend(a1, "AND:", v2);

  v4 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v5 = objc_msgSend(v4, "mainOrPrivateContext");

  v7[2] = v3;
  v7[3] = v5;
  NSManagedObjectContext.performAndWait<A>(_:)(&v8, sub_100363BA0, v7, &type metadata for Int);

  return v8 > 0;
}

BOOL sub_100361950()
{
  void *v0;
  NSString v1;
  id v2;
  id v3;
  id v4;
  _QWORD v6[3];
  char v7;
  id v8;
  id v9;
  uint64_t v10;

  v0 = (void *)objc_opt_self(MTEpisode);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "predicateForDownloadedEpisodesOnPodcastUuid:", v1);

  v3 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v4 = objc_msgSend(v3, "mainOrPrivateContext");

  v6[2] = 0;
  v7 = 1;
  v8 = v2;
  v9 = v4;
  NSManagedObjectContext.performAndWait<A>(_:)(&v10, sub_100363B8C, v6, &type metadata for Int);

  return v10 > 0;
}

uint64_t sub_100361A48()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v15 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v8 = (void *)static OS_dispatch_queue.main.getter(v7);
  aBlock[4] = sub_10035A94C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C4FF0;
  v9 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v9);
  aBlock[0] = _swiftEmptyArrayStorage;
  v10 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v11 = sub_10003F544((uint64_t *)&unk_10055B200);
  v12 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v11, v12, v0, v10);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v2, v9);
  _Block_release(v9);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v2, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_100361C30(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD v14[5];
  uint64_t v15;

  v2 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v3 = objc_msgSend(v2, "privateQueueContext");

  v4 = (void *)objc_opt_self(MTEpisode);
  swift_bridgeObjectRetain(a1);
  v6 = sub_10002B070(v5);
  swift_bridgeObjectRelease(a1);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v4, "predicateForEpisodeUuids:", isa, swift_bridgeObjectRelease(v6).n128_f64[0]);

  v9 = swift_allocObject(&unk_1004C49E8, 32, 7);
  *(_QWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v9 + 24) = v8;
  v14[4] = sub_100361DD4;
  v15 = v9;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100027AF8;
  v14[3] = &unk_1004C4A00;
  v10 = _Block_copy(v14);
  v11 = v15;
  v12 = v3;
  v13 = v8;
  objc_msgSend(v12, "performBlock:", v10, swift_release(v11).n128_f64[0]);
  _Block_release(v10);

}

uint64_t sub_100361DA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100361DD4()
{
  uint64_t v0;

  sub_10035AD84(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100361DDC(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  id v9;
  _QWORD v10[5];
  _QWORD *v11;

  v4 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v5 = objc_msgSend(v4, "privateQueueContext");

  v6 = (_QWORD *)swift_allocObject(&unk_1004C4C90, 40, 7);
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  v10[4] = sub_100363EA4;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100027AF8;
  v10[3] = &unk_1004C4CA8;
  v7 = _Block_copy(v10);
  v8 = v11;
  v9 = v5;
  swift_bridgeObjectRetain(a2);
  objc_msgSend(v9, "performBlock:", v7, swift_release(v8).n128_f64[0]);
  _Block_release(v7);

}

void sub_100361EE8(void *a1)
{
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id (*v10)();
  char v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  _QWORD aBlock[5];
  uint64_t v17;
  char v18;

  if (!a1)
  {
    v12 = objc_allocWithZone((Class)NSError);
    v13 = String._bridgeToObjectiveC()();
    v14 = objc_msgSend(v12, "initWithDomain:code:userInfo:", v13, 42, 0);

    v15 = v14;
    Promise.reject(_:)(v15);

    return;
  }
  v1 = a1;
  v2 = objc_msgSend(v1, "managedObjectContext");
  v18 = 0;
  if (!v2)
  {
    v11 = 0;
    v10 = 0;
    v3 = 0;
    goto LABEL_7;
  }
  v3 = (_QWORD *)swift_allocObject(&unk_1004C4EE8, 40, 7);
  v3[2] = v1;
  v3[3] = &v18;
  v3[4] = v2;
  v4 = swift_allocObject(&unk_1004C4F10, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_1003640C8;
  *(_QWORD *)(v4 + 24) = v3;
  aBlock[4] = sub_1001529CC;
  v17 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004C4F28;
  v5 = _Block_copy(aBlock);
  v6 = v17;
  v7 = v2;
  v8 = v1;
  v9 = v7;
  swift_retain();
  objc_msgSend(v9, "performBlockAndWait:", v5, swift_release(v6).n128_f64[0]);

  _Block_release(v5);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v4, "", 113, 199, 33, 1);
  swift_release(v4);
  if ((v5 & 1) == 0)
  {
    v10 = sub_1003640C8;
    v11 = v18;
LABEL_7:
    LOBYTE(aBlock[0]) = v11;
    Promise.resolve(_:)(aBlock);

    sub_10002CA30((uint64_t)v10, (uint64_t)v3);
    return;
  }
  __break(1u);
}

void sub_100362124(void *a1)
{
  id v1;
  id v2;
  id v3;
  const mach_header_64 *v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  unsigned __int8 v9;
  id v10;
  unsigned __int8 v11;

  if (a1)
  {
    v1 = a1;
    v2 = objc_msgSend(v1, "managedObjectContext");
    v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSettingsUserDefaults");
    v4 = (const mach_header_64 *)objc_msgSend(v3, "episodeLimitForKey:", kMTPodcastEpisodeLimitDefaultKey);

    if (v4 == &_mh_execute_header)
      v5 = static MTPodcastEpisodeLimit.defaultOption.getter();
    else
      v5 = 0x100000001;
    objc_msgSend(v1, "setEpisodeLimit:", v5);
    if (v2)
      v9 = objc_msgSend(v2, "saveInCurrentBlock");
    else
      v9 = 0;
    v11 = v9;
    Promise.resolve(_:)(&v11);

  }
  else
  {
    v6 = objc_allocWithZone((Class)NSError);
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "initWithDomain:code:userInfo:", v7, 42, 0);

    v10 = v8;
    Promise.reject(_:)();

  }
}

double sub_1003622A8(void *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t updated;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v44;
  uint64_t v45;
  double result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t ObjectType;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD aBlock[3];
  void *v78;
  uint64_t (*v79)();
  uint64_t v80;
  void *v81;
  _OWORD v82[2];

  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  __chkstk_darwin();
  v10 = (char *)v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v13 = (char *)v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v15 = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FeedUpdateResult(0);
  __chkstk_darwin();
  v17 = (char *)v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(a1, "uuid", swift_retain().n128_f64[0]);
  if (v18)
  {
    v19 = v18;
    v20 = a2;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v76 = v22;

    v23 = swift_allocObject(&unk_1004C4E48, 32, 7);
    *(_QWORD *)(v23 + 16) = j___s9JetEngine7PromiseC7resolveyyxF;
    *(_QWORD *)(v23 + 24) = a4;
    if (v20 >> 6)
    {
      if (v20 >> 6 == 1)
      {
        v73 = v23;
        v25 = v20 & 1;
        v26 = objc_msgSend(a1, "valueForKey:", kPodcastUpdatedDate, swift_retain().n128_f64[0]);
        if (v26)
        {
          v27 = v26;
          _bridgeAnyObjectToAny(_:)(v82, v26);
          swift_unknownObjectRelease(v27);
        }
        else
        {
          memset(v82, 0, sizeof(v82));
        }
        v47 = v25;
        sub_10003DC78((uint64_t)v82, (uint64_t)aBlock, (uint64_t *)&unk_100552300);
        if (v78)
        {
          v48 = sub_100005EC8(0, &qword_100565E80, NSDate_ptr);
          if ((swift_dynamicCast(&v81, aBlock, (char *)&type metadata for Any + 8, v48, 6) & 1) != 0)
          {
            v72 = v81;
            v71[1] = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
            static DispatchQoS.userInitiated.getter();
            aBlock[0] = _swiftEmptyArrayStorage;
            v71[0] = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
            v50 = sub_10003F544(&qword_100555A00);
            v51 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
            dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v50, v51, v11, v71[0]);
            (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v75);
            v52 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ELL, 0x800000010043F630, v15, v13, v10, 0);
            v53 = objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
            v54 = objc_msgSend(v53, "doubleForKey:", kLibraryShowFetchThreshold);
            v55 = objc_msgSend(v54, "asyncValuePromiseOnQueue:", v52);

            v56 = swift_allocObject(&unk_1004C4D30, 24, 7);
            swift_weakInit(v56 + 16, a3);
            v57 = swift_allocObject(&unk_1004C4E70, 96, 7);
            *(_QWORD *)(v57 + 16) = j___s9JetEngine7PromiseC7resolveyyxF;
            *(_QWORD *)(v57 + 24) = a4;
            *(_QWORD *)(v57 + 32) = v56;
            *(_QWORD *)(v57 + 40) = v53;
            v58 = v72;
            *(_QWORD *)(v57 + 48) = v72;
            *(_QWORD *)(v57 + 56) = v21;
            *(_QWORD *)(v57 + 64) = v76;
            *(_BYTE *)(v57 + 72) = v25;
            v59 = v73;
            *(_QWORD *)(v57 + 80) = sub_100365178;
            *(_QWORD *)(v57 + 88) = v59;
            v79 = sub_100363FD8;
            v80 = v57;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = sub_100301468;
            v78 = &unk_1004C4E88;
            v60 = _Block_copy(aBlock);
            v61 = v80;
            swift_retain();
            v62 = v53;
            v63 = v58;
            swift_retain();
            objc_msgSend(v55, "addFinishBlock:", v60, swift_release(v61).n128_f64[0]);
            swift_release(v59);
            _Block_release(v60);

            goto LABEL_19;
          }
        }
        else
        {
          sub_100007A28((uint64_t)aBlock, (uint64_t *)&unk_100552300);
        }
        v64 = *(_QWORD *)(a3 + 24);
        ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16), v49);
        v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v64 + 24);
        v70 = v64;
        v67 = v21;
        v68 = v76;
        v69 = v73;
        v66(v67, v76, v47, 1, 8, sub_100365178, v73, ObjectType, v70);
        swift_release(v69);
        swift_bridgeObjectRelease(v68);
        goto LABEL_19;
      }
      v40 = *(_QWORD *)(a3 + 24);
      v41 = v23;
      v42 = swift_getObjectType(*(_QWORD *)(a3 + 16), v24);
      v43 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v40 + 16);
      v44 = swift_retain();
      v45 = v76;
      v43(v21, v76, 0, 8, sub_100365178, v41, v42, v40, v44);
      swift_release(v41);
      v39 = v45;
    }
    else
    {
      if ((v20 & 1) != 0)
        v31 = 23;
      else
        v31 = 3;
      v32 = *(_QWORD *)(a3 + 16);
      v33 = *(_QWORD *)(a3 + 24);
      v34 = v23;
      v35 = swift_getObjectType(v32, v24);
      v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v33 + 16);
      v37 = swift_retain();
      v38 = v76;
      v36(v21, v76, 1, v31, sub_100365178, v34, v35, v33, v37);
      swift_release(v34);
      v39 = v38;
    }
    swift_bridgeObjectRelease(v39);
    *(_QWORD *)&result = swift_release(a4).n128_u64[0];
    return result;
  }
  v28 = enum case for FeedUpdateError.missingPodcastUUID(_:);
  updated = type metadata accessor for FeedUpdateError();
  v30 = *(_QWORD *)(updated - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v17, v28, updated);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v17, 0, 2, updated);
  Promise.resolve(_:)(v17);
  sub_100363F8C((uint64_t)v17);
LABEL_19:
  *(_QWORD *)&result = swift_release(a4).n128_u64[0];
  return result;
}

double sub_100362920(void *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t updated;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t ObjectType;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD aBlock[3];
  void *v78;
  uint64_t (*v79)();
  uint64_t v80;
  void *v81;
  _OWORD v82[2];

  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  __chkstk_darwin();
  v10 = (char *)v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v13 = (char *)v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v15 = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FeedUpdateResult(0);
  __chkstk_darwin();
  v17 = (char *)v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(a1, "uuid", swift_retain().n128_f64[0]);
  if (!v18)
  {
    v28 = enum case for FeedUpdateError.missingPodcastUUID(_:);
    updated = type metadata accessor for FeedUpdateError(0);
    v30 = *(_QWORD *)(updated - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v17, v28, updated);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v17, 0, 2, updated);
    Promise.resolve(_:)(v17);
    sub_100363F8C((uint64_t)v17);
    v31 = a4;
LABEL_19:
    *(_QWORD *)&result = swift_release(v31).n128_u64[0];
    return result;
  }
  v19 = v18;
  v20 = a2;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v76 = v22;

  v23 = swift_allocObject(&unk_1004C4DA8, 32, 7);
  *(_QWORD *)(v23 + 16) = j_j___s9JetEngine7PromiseC7resolveyyxF;
  *(_QWORD *)(v23 + 24) = a4;
  if (v20 >> 6)
  {
    if (v20 >> 6 == 1)
    {
      v73 = v23;
      v25 = v20 & 1;
      v26 = objc_msgSend(a1, "valueForKey:", kPodcastUpdatedDate, swift_retain().n128_f64[0]);
      if (v26)
      {
        v27 = v26;
        _bridgeAnyObjectToAny(_:)(v82, v26);
        swift_unknownObjectRelease(v27);
      }
      else
      {
        memset(v82, 0, sizeof(v82));
      }
      v47 = v25;
      sub_10003DC78((uint64_t)v82, (uint64_t)aBlock, (uint64_t *)&unk_100552300);
      if (v78)
      {
        v48 = sub_100005EC8(0, &qword_100565E80, NSDate_ptr);
        if ((swift_dynamicCast(&v81, aBlock, (char *)&type metadata for Any + 8, v48, 6) & 1) != 0)
        {
          v72 = v81;
          v71[1] = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
          static DispatchQoS.userInitiated.getter();
          aBlock[0] = _swiftEmptyArrayStorage;
          v71[0] = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
          v50 = sub_10003F544(&qword_100555A00);
          v51 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
          dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v50, v51, v11, v71[0]);
          (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v75);
          v52 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ELL, 0x800000010043F630, v15, v13, v10, 0);
          v53 = objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
          v54 = objc_msgSend(v53, "doubleForKey:", kLibraryShowFetchThreshold);
          v55 = objc_msgSend(v54, "asyncValuePromiseOnQueue:", v52);

          v56 = swift_allocObject(&unk_1004C4D30, 24, 7);
          swift_weakInit(v56 + 16, a3);
          v57 = swift_allocObject(&unk_1004C4DD0, 96, 7);
          *(_QWORD *)(v57 + 16) = j_j___s9JetEngine7PromiseC7resolveyyxF;
          *(_QWORD *)(v57 + 24) = a4;
          *(_QWORD *)(v57 + 32) = v56;
          *(_QWORD *)(v57 + 40) = v53;
          v58 = v72;
          *(_QWORD *)(v57 + 48) = v72;
          *(_QWORD *)(v57 + 56) = v21;
          *(_QWORD *)(v57 + 64) = v76;
          *(_BYTE *)(v57 + 72) = v25;
          v59 = v73;
          *(_QWORD *)(v57 + 80) = sub_100363FC8;
          *(_QWORD *)(v57 + 88) = v59;
          v79 = sub_100363FD8;
          v80 = v57;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100301468;
          v78 = &unk_1004C4DE8;
          v60 = _Block_copy(aBlock);
          v61 = v80;
          swift_retain();
          v62 = v53;
          v63 = v58;
          swift_retain();
          objc_msgSend(v55, "addFinishBlock:", v60, swift_release(v61).n128_f64[0]);
          swift_release(v59);
          _Block_release(v60);
          swift_release(a4);

          return result;
        }
      }
      else
      {
        sub_100007A28((uint64_t)aBlock, (uint64_t *)&unk_100552300);
      }
      v64 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16), v49);
      v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, uint64_t))(v64 + 24);
      v70 = v64;
      v67 = v21;
      v68 = v76;
      v69 = v73;
      v66(v67, v76, v47, 1, 8, sub_100363FC8, v73, ObjectType, v70);
      swift_release(a4);
      swift_bridgeObjectRelease(v68);
      v31 = v69;
      goto LABEL_19;
    }
    v41 = *(_QWORD *)(a3 + 24);
    v42 = v23;
    v43 = swift_getObjectType(*(_QWORD *)(a3 + 16), v24);
    v44 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, uint64_t, __n128))(v41 + 16);
    v45 = swift_retain();
    v46 = v76;
    v44(v21, v76, 0, 8, sub_100363FC8, v42, v43, v41, v45);
    swift_release(a4);
    swift_bridgeObjectRelease(v46);
    *(_QWORD *)&result = swift_release(v42).n128_u64[0];
  }
  else
  {
    if ((v20 & 1) != 0)
      v32 = 23;
    else
      v32 = 3;
    v33 = *(_QWORD *)(a3 + 16);
    v34 = *(_QWORD *)(a3 + 24);
    v35 = v23;
    v36 = swift_getObjectType(v33, v24);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, uint64_t, __n128))(v34 + 16);
    v38 = swift_retain();
    v39 = v76;
    v37(v21, v76, 1, v32, sub_100363FC8, v35, v36, v34, v38);
    swift_release(a4);
    swift_bridgeObjectRelease(v39);
    *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  }
  return result;
}

void sub_100362FAC()
{
  id v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v1 = objc_msgSend(v0, "privateQueueContext");

  v2 = swift_allocObject(&unk_1004C4CE0, 24, 7);
  *(_QWORD *)(v2 + 16) = v1;
  v6[4] = sub_100363ED4;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_100027AF8;
  v6[3] = &unk_1004C4CF8;
  v3 = _Block_copy(v6);
  v4 = v7;
  v5 = v1;
  objc_msgSend(v5, "performBlock:", v3, swift_release(v4).n128_f64[0]);
  _Block_release(v3);

}

uint64_t sub_1003630A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  char *v25;

  v23 = a1;
  v5 = type metadata accessor for StationSortOrder(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin();
  v8 = swift_allocObject(&unk_1004C4BC8, 17, 7);
  *(_BYTE *)(v8 + 16) = 0;
  v9 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v10 = objc_msgSend(v9, "mainOrPrivateContext");

  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v11 + 48) & ~v11;
  v13 = (char *)swift_allocObject(&unk_1004C4BF0, v12 + v7, v11 | 7);
  v14 = v23;
  *((_QWORD *)v13 + 2) = v10;
  *((_QWORD *)v13 + 3) = v14;
  *((_QWORD *)v13 + 4) = a2;
  *((_QWORD *)v13 + 5) = v8;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v13[v12], (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = sub_100363DD0;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C4C08;
  v15 = _Block_copy(aBlock);
  v16 = v25;
  v17 = v10;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  objc_msgSend(v17, "performBlockAndWaitWithSave:", v15, swift_release(v16).n128_f64[0]);
  _Block_release(v15);
  swift_beginAccess(v8 + 16, aBlock, 0, 0);
  if (*(_BYTE *)(v8 + 16) == 1)
  {
    v18 = type metadata accessor for SyncKeysRepository(0);
    v19 = (void *)static SyncKeysRepository.shared.getter(v18);
    SyncKeysRepository.isPlaylistSyncDirty.setter(1);

  }
  v20 = *(unsigned __int8 *)(v8 + 16);
  swift_release(v8);
  return v20;
}

void sub_1003632B8(uint64_t a1, uint64_t a2, char a3)
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  uint64_t v13;

  v6 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v7 = objc_msgSend(v6, "mainOrPrivateContext");

  v8 = swift_allocObject(&unk_1004C4B50, 41, 7);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = a2;
  *(_BYTE *)(v8 + 40) = a3;
  v12[4] = sub_100363D2C;
  v13 = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100027AF8;
  v12[3] = &unk_1004C4B68;
  v9 = _Block_copy(v12);
  v10 = v13;
  v11 = v7;
  swift_bridgeObjectRetain(a2);
  objc_msgSend(v11, "performBlock:", v9, swift_release(v10).n128_f64[0]);
  _Block_release(v9);

}

void sub_1003633D4(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD aBlock[5];
  uint64_t v12;
  char v13;

  v13 = 0;
  v4 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v5 = objc_msgSend(v4, "mainOrPrivateContext");

  v6 = (_QWORD *)swift_allocObject(&unk_1004C4AD8, 48, 7);
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  v6[5] = &v13;
  v7 = swift_allocObject(&unk_1004C4B00, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_100363D08;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_100029B3C;
  v12 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004C4B18;
  v8 = _Block_copy(aBlock);
  v9 = v12;
  v10 = v5;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  objc_msgSend(v10, "performBlockAndWait:", v8, swift_release(v9).n128_f64[0]);

  _Block_release(v8);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation(v7, "", 113, 1081, 32, 1);
  swift_release(v7);
  if ((a2 & 1) != 0)
    __break(1u);
  else
    swift_release(v6);
}

BOOL sub_100363564()
{
  id v0;
  id v1;
  id v2;
  _QWORD v4[3];
  char v5;
  id v6;
  id v7;
  uint64_t v8;

  v0 = objc_msgSend((id)objc_opt_self(MTEpisode), "predicateForDownloaded:excludeHidden:", 1, 0);
  v1 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v2 = objc_msgSend(v1, "mainOrPrivateContext");

  v4[2] = 0;
  v5 = 1;
  v6 = v0;
  v7 = v2;
  NSManagedObjectContext.performAndWait<A>(_:)(&v8, sub_100363B8C, v4, &type metadata for Int);

  return v8 > 0;
}

BOOL sub_10036363C()
{
  void *v0;
  NSString v1;
  id v2;
  id v3;
  id v4;
  _QWORD v6[3];
  char v7;
  id v8;
  id v9;
  uint64_t v10;

  v0 = (void *)objc_opt_self(MTEpisode);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "predicateForBookmarkedEpisodesOnPodcastUuid:", v1);

  v3 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v4 = objc_msgSend(v3, "mainOrPrivateContext");

  v6[2] = 0;
  v7 = 1;
  v8 = v2;
  v9 = v4;
  NSManagedObjectContext.performAndWait<A>(_:)(&v10, sub_100363B8C, v6, &type metadata for Int);

  return v10 > 0;
}

uint64_t sub_100363734(uint64_t a1, uint64_t a2, SEL *a3, uint64_t a4)
{
  void *v6;
  NSString v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[3];
  char v13;
  id v14;
  id v15;
  uint64_t v16;

  v6 = (void *)objc_opt_self(MTEpisode);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, *a3, v7);

  v9 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v10 = objc_msgSend(v9, "mainOrPrivateContext");

  v12[2] = 0;
  v13 = 1;
  v14 = v8;
  v15 = v10;
  NSManagedObjectContext.performAndWait<A>(_:)(&v16, a4, v12, &type metadata for Int);

  return v16;
}

BOOL sub_10036382C()
{
  void *v0;
  NSString v1;
  id v2;
  id v3;
  id v4;
  _QWORD v6[3];
  char v7;
  id v8;
  id v9;
  uint64_t v10;

  v0 = (void *)objc_opt_self(MTEpisode);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "predicateForLibraryEpisodesOnPodcastUuid:", v1);

  v3 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v4 = objc_msgSend(v3, "mainOrPrivateContext");

  v6[2] = 0;
  v7 = 1;
  v8 = v2;
  v9 = v4;
  NSManagedObjectContext.performAndWait<A>(_:)(&v10, sub_100363B8C, v6, &type metadata for Int);

  return v10 > 0;
}

BOOL sub_100363924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  id v5;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[3];
  char v13;
  id v14;
  id v15;
  uint64_t v16;

  v4 = (void *)objc_opt_self(MTEpisode);
  v5 = objc_msgSend(v4, "predicateForPartiallyPlayedInLastTwoMonths");
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "predicateForAllEpisodesOnPodcastUuid:", v6);

  v8 = objc_msgSend(v5, "AND:", v7);
  v9 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v10 = objc_msgSend(v9, "mainOrPrivateContext");

  v12[2] = a3;
  v13 = 0;
  v14 = v8;
  v15 = v10;
  NSManagedObjectContext.performAndWait<A>(_:)(&v16, sub_100363B8C, v12, &type metadata for Int);

  return v16 >= a3;
}

void sub_100363A64(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v3 = objc_msgSend(v2, "mainOrPrivateContext");

  v4 = swift_allocObject(&unk_1004C4A38, 32, 7);
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = a1;
  v8[4] = sub_100363B84;
  v9 = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100027AF8;
  v8[3] = &unk_1004C4A50;
  v5 = _Block_copy(v8);
  v6 = v9;
  v7 = v3;
  objc_msgSend(v7, "performBlock:", v5, swift_release(v6).n128_f64[0]);
  _Block_release(v5);

}

uint64_t sub_100363B60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_100363B84()
{
  uint64_t v0;

  return sub_10035A47C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100363B90(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_10035838C(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_100363BA0(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100358938(*(_QWORD *)(v1 + 16), a1);
}

void sub_100363BA8(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1003584B0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100363BB0()
{
  return sub_10036495C((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100363BC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_100565E2C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10023A498;
  return sub_100356540(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_100363C58()
{
  return sub_10036495C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100363C6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_100565E4C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10023A498;
  return sub_10035626C(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_100363D00()
{
  return sub_100363E6C(48);
}

void sub_100363D08()
{
  uint64_t v0;

  sub_1003561F0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 **)(v0 + 40));
}

uint64_t sub_100363D14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100363D24()
{
  return sub_100363E6C(41);
}

void sub_100363D2C()
{
  uint64_t v0;

  sub_100354290(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_100363D3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100363D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for StationSortOrder(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100363DD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StationSortOrder(0) - 8) + 80);
  return sub_100354068(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v0 + ((v1 + 48) & ~v1));
}

uint64_t sub_100363E04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100363E14(void *a1)
{
  uint64_t v1;

  sub_100352D80(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100363E1C()
{
  uint64_t v0;

  sub_1001691E8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject(v0, 25, 7);
}

void sub_100363E44(void *a1)
{
  uint64_t v1;

  sub_100352C60(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_100363E50(uint64_t result, char a2)
{
  if (a2 != -1)
    return sub_1001691E8(result, a2);
  return result;
}

uint64_t sub_100363E64()
{
  return sub_100363E6C(40);
}

uint64_t sub_100363E6C(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

void sub_100363EA4()
{
  uint64_t v0;

  sub_100353B10(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100363EB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100363ED4()
{
  uint64_t v0;

  sub_10035369C(*(void **)(v0 + 16));
}

uint64_t sub_100363EDC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100363F00()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

double sub_100363F34(void *a1)
{
  uint64_t *v1;

  return sub_1003525A0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100363F40()
{
  return sub_100352BE4();
}

uint64_t sub_100363F5C(uint64_t a1)
{
  return sub_100352C20(a1);
}

uint64_t sub_100363F74()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_release, 32);
}

void sub_100363F84(void *a1)
{
  uint64_t v1;

  sub_100351BF8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100363F8C(uint64_t a1)
{
  uint64_t updated;

  updated = type metadata accessor for FeedUpdateResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 8))(a1, updated);
  return a1;
}

uint64_t sub_100363FC8(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100351D98(a1, a2 & 1, *(void (**)(_QWORD *))(v2 + 16));
}

uint64_t sub_100363FDC()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_release, 33);
}

void sub_100363FEC(void *a1)
{
  uint64_t v1;

  sub_100351884(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100364000()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10036404C(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100351EA0(a1, a2, *(void (**)(char *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(void **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_BYTE *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t sub_10036408C()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_release, 32);
}

uint64_t sub_10036409C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

id sub_1003640C8()
{
  uint64_t v0;

  return sub_1003502B8(*(void **)(v0 + 16), *(_BYTE **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1003640D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003640E4()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_release, 32);
}

uint64_t sub_1003640F4()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_release, 32);
}

uint64_t sub_100364104()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 49, 7);
}

void sub_100364138(void *a1)
{
  uint64_t v1;

  sub_1003507B8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48));
}

uint64_t sub_100364148()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10036417C(void *a1)
{
  uint64_t v1;

  sub_100350B7C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40));
}

uint64_t sub_10036418C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EpisodeListType.hidePlayedEpisodes.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1003641BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EpisodeListType.sortTypeFromUserDefaults.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1003641E4()
{
  unint64_t result;

  result = qword_100565E88;
  if (!qword_100565E88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeSortType, &type metadata for EpisodeSortType);
    atomic_store(result, (unint64_t *)&qword_100565E88);
  }
  return result;
}

uint64_t sub_10036422C()
{
  uint64_t v0;

  sub_10003F49C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  return swift_deallocObject(v0, 81, 7);
}

uint64_t sub_10036426C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EpisodeListType.pubDateLimit.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100364298(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_100565E9C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100191178;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100350108, 0, 0);
}

uint64_t sub_1003642FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100364320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100565EAC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10023A498;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100565EA8 + dword_100565EA8))(a1, v4);
}

uint64_t sub_100364390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100565EDC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10023A498;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100565ED8 + dword_100565ED8))(a1, v4);
}

uint64_t sub_100364400()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100364434(uint64_t a1)
{
  uint64_t v1;

  return sub_10035B114(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

unint64_t sub_100364440()
{
  unint64_t result;

  result = qword_100565EF0;
  if (!qword_100565EF0)
  {
    result = swift_getWitnessTable(&unk_1003D6E38, &type metadata for TranscriptError);
    atomic_store(result, &qword_100565EF0);
  }
  return result;
}

uint64_t sub_100364488()
{
  return sub_100151998((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10035AC6C);
}

uint64_t sub_100364498()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1003644DC()
{
  return sub_100151998((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10035A99C);
}

uint64_t sub_1003644E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100364514()
{
  uint64_t v0;

  sub_10035A3B0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(BOOL **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100364524()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100364534()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100364568()
{
  uint64_t v0;

  return sub_100359C08(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_100364578()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_bridgeObjectRelease, 33);
}

double sub_100364588()
{
  uint64_t v0;

  return sub_10035A0D8(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_100364594()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1003645D0()
{
  return sub_10002A264((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10035930C);
}

uint64_t sub_1003645DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v2 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 32), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(ObjectType, v3);
}

uint64_t sub_10036461C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_100565EFC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100191178;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_1003599A8, 0, 0);
}

double sub_100364684()
{
  uint64_t v0;

  return sub_1003590C8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

double sub_100364690(uint64_t a1)
{
  uint64_t v1;

  return sub_100358D78(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100364698()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1003646CC()
{
  uint64_t v0;

  sub_100358738(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1003646D8()
{
  _QWORD *v0;

  swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10036470C()
{
  uint64_t v0;

  sub_100358248(*(_BYTE *)(v0 + 16), *(_BYTE *)(v0 + 17), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t sub_100364720()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  if (v0[7])
    swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100364764(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_100565F14);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10023A498;
  return sub_100357B34(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1003647F8()
{
  return sub_10036495C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10036480C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_100565F34);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10023A498;
  return sub_100357654(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1003648A0()
{
  return sub_10036495C((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003648B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_100565F44);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10023A498;
  return sub_100356F0C(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_100364948()
{
  return sub_10036495C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10036495C(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  _QWORD *v2;

  swift_unknownObjectRelease(v2[2]);
  a1(v2[4]);
  a2(v2[5]);
  if (v2[7])
    swift_release(v2[8]);
  return swift_deallocObject(v2, 72, 7);
}

uint64_t sub_1003649B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_100565F54);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10023A498;
  return sub_1003568F4(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_100364A4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100364A70()
{
  uint64_t v0;

  return sub_1003560F0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_100364A7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100364A8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

double sub_100364AC0()
{
  uint64_t v0;

  return sub_100355B68(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

void sub_100364ACC(void *a1)
{
  sub_100354A18(a1);
}

void sub_100364ADC(void *a1)
{
  sub_100354B90(a1);
}

uint64_t sub_100364AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = type metadata accessor for MetricsLabel(0);
  v1 = *(_QWORD *)(v18 - 8);
  v21 = *(unsigned __int8 *)(v1 + 80);
  v2 = (v21 + 24) & ~v21;
  v3 = *(_QWORD *)(v1 + 64);
  v4 = type metadata accessor for MetricsPageType(0);
  v5 = *(_QWORD *)(v4 - 8);
  v20 = *(unsigned __int8 *)(v5 + 80);
  v6 = (v2 + v3 + v20) & ~v20;
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(sub_10003F544(&qword_100565F60) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v19 = *(_QWORD *)(v9 + 64);
  v11 = swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 8))(v0 + v2, v18, v11);
  v12 = v0 + v6;
  v13 = (v10 + v8 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  v14 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  v15 = type metadata accessor for ChildAndParentLocation(0, v14);
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v0 + v13, 1, v15))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v0 + v13, v15);
  return swift_deallocObject(v0, v13 + v19, v21 | v20 | v10 | 7);
}

double sub_100364C4C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(type metadata accessor for MetricsLabel(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for MetricsPageType(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_10003F544(&qword_100565F60) - 8) + 80);
  return sub_1003556AC(a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + v7, *(_QWORD *)(v1 + v8), *(_QWORD *)(v1 + v8 + 8), *(_QWORD *)(v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), v1 + ((v9 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v9));
}

uint64_t sub_100364D1C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100364D60()
{
  uint64_t v0;

  return sub_10035487C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100364D74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100364DA0()
{
  uint64_t v0;

  sub_100352EF4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100364DA8()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_release, 33);
}

uint64_t sub_100364DB8(uint64_t a1, uint64_t a2)
{
  uint64_t updated;

  updated = type metadata accessor for FeedUpdateResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 16))(a2, a1, updated);
  return a2;
}

uint64_t sub_100364E00()
{
  return sub_10002A264((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003517E0);
}

uint64_t sub_100364E10()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100364E4C()
{
  return sub_10002A264((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10035151C);
}

uint64_t sub_100364E58()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_release, 32);
}

void sub_100364E68(void *a1)
{
  uint64_t v1;

  sub_1003513C0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100364E80()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_release, 32);
}

double sub_100364E90(void *a1)
{
  uint64_t v1;

  return sub_100351340(a1, *(_QWORD *)(v1 + 16));
}

void sub_100364EA8()
{
  uint64_t v0;

  sub_100351088(v0);
}

uint64_t sub_100364EB0()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_release, 33);
}

double sub_100364EC0(char a1)
{
  uint64_t v1;

  return sub_10035073C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100364ECC()
{
  char v1;

  v1 = 0;
  return Promise.resolve(_:)(&v1);
}

uint64_t sub_100364EF0()
{
  return sub_100364F00((void (*)(_QWORD))&_swift_release, 32);
}

uint64_t sub_100364F00(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  swift_release(*(_QWORD *)(v2 + 24));
  return swift_deallocObject(v2, a2, 7);
}

void sub_100364F3C(void *a1)
{
  uint64_t v1;

  sub_10035023C(a1, *(_QWORD *)(v1 + 16));
}

_QWORD *sub_100364F54(uint64_t a1)
{
  uint64_t v1;

  return sub_10034FF68(a1, v1);
}

uint64_t storeEnumTagSinglePayload for TranscriptError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100364FA8 + 4 * byte_1003D6A37[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100364FDC + 4 * byte_1003D6A32[v4]))();
}

uint64_t sub_100364FDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100364FE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100364FECLL);
  return result;
}

uint64_t sub_100364FF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100365000);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100365004(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036500C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptError()
{
  return &type metadata for TranscriptError;
}

unint64_t sub_10036502C()
{
  unint64_t result;

  result = qword_100565FF0;
  if (!qword_100565FF0)
  {
    result = swift_getWitnessTable(&unk_1003D6E10, &type metadata for TranscriptError);
    atomic_store(result, (unint64_t *)&qword_100565FF0);
  }
  return result;
}

void sub_100365208(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v15;
  __n128 v16;
  objc_super v17;

  v3 = v2;
  ObjectType = swift_getObjectType(a1, a2);
  v6 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
  if (v6)
    v8 = v6;
  else
    v8 = 0;
  if (v6)
    v9 = a1;
  else
    v9 = 0;
  if (v9)
  {
    v10 = swift_getObjectType(v9, v7);
    v11 = swift_allocObject(&unk_1004C5E70, 32, 7);
    *(_QWORD *)(v11 + 24) = v8;
    swift_unknownObjectWeakInit(v11 + 16);
    v12 = swift_allocObject(&unk_1004C5E98, 24, 7);
    swift_unknownObjectWeakInit(v12 + 16);
    v13 = swift_allocObject(&unk_1004C5EC0, 32, 7);
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)(v13 + 24) = v11;
    v14 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t, __n128))(v8 + 72);
    v15 = a1;
    swift_retain();
    v16 = swift_retain();
    v14(sub_1000450E8, v13, v10, v8, v16);
    swift_release(v11);
    swift_release(v12);
    swift_release(v13);
    v17.receiver = v3;
    v17.super_class = (Class)type metadata accessor for BaseOperation();
    objc_msgSendSuper2(&v17, "addDependency:", v15);

  }
}

id sub_1003653A8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BaseOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t storeEnumTagSinglePayload for BaseOperation.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100365424 + 4 * byte_1003D6E85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100365458 + 4 * byte_1003D6E80[v4]))();
}

uint64_t sub_100365458(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100365460(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100365468);
  return result;
}

uint64_t sub_100365474(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036547CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100365480(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100365488(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BaseOperation.State()
{
  return &type metadata for BaseOperation.State;
}

unsigned __int8 *sub_1003654A4(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = __dst[v7];
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_errorRelease(*(_QWORD *)__dst);
    else
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v10 = __src[v7];
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = *(_QWORD *)__src;
      swift_errorRetain(v12);
      *(_QWORD *)__dst = v12;
      __dst[v7] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

_BYTE *sub_100365654(_BYTE *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *(_QWORD *)__dst = *a2;
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_10036573C(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = __dst[v7];
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_errorRelease(*(_QWORD *)__dst);
    else
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v10 = __src[v7];
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v7] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t sub_1003658E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1003659A8 + 4 * byte_1003D6EB2[(v4 - 1)]))();
}

void sub_1003659F4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_100000004;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_100365B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_100365BE4 + 4 * byte_1003D6EC0[v3]))();
}

void sub_100365C2C(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

unint64_t sub_100365CF8()
{
  unint64_t result;

  result = qword_1005660D8;
  if (!qword_1005660D8)
  {
    result = swift_getWitnessTable(&unk_1003D6FC0, &type metadata for BaseOperation.State);
    atomic_store(result, (unint64_t *)&qword_1005660D8);
  }
  return result;
}

uint64_t sub_100365D3C(uint64_t a1)
{
  sub_100365D60(a1);
  return swift_errorRelease();
}

id sub_100365D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock), "lock");
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation__error);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation__error) = a1;
  swift_errorRetain(a1);
  swift_errorRelease(v4);
  return objc_msgSend(*(id *)(v1 + v3), "unlock");
}

uint64_t sub_100365DC8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100365DEC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100365E10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100365E3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100365E60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_100044BF0();

  }
  v6 = static os_log_type_t.debug.getter(Strong);
  return os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, a2, "Finished group execution", 24, 2, _swiftEmptyArrayStorage);
}

id sub_100365EE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = static os_log_type_t.debug.getter();
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts14GroupOperation_log), "Starting group execution", 24, 2, _swiftEmptyArrayStorage);
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts14GroupOperation_queue), "setSuspended:", 0);
}

void sub_100365F68()
{
  uint64_t v0;

  sub_10003A858(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts14GroupOperation_input), *(_BYTE *)(v0 + OBJC_IVAR____TtC8Podcasts14GroupOperation_input + 8));

}

id sub_100365FAC(uint64_t a1)
{
  return sub_1001C3784(a1, type metadata accessor for GroupOperation);
}

uint64_t type metadata accessor for GroupOperation()
{
  return objc_opt_self(_TtC8Podcasts14GroupOperation);
}

uint64_t sub_100366028@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = v1 + OBJC_IVAR____TtC8Podcasts14GroupOperation_input;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts14GroupOperation_input);
  *(_QWORD *)a1 = v3;
  v4 = *(_BYTE *)(v2 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  return sub_10003A8DC(v3, v4);
}

void sub_100366048()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(__n128);
  __n128 v3;

  v2 = *(void (**)(__n128))(v0
                                     + OBJC_IVAR____TtC8PodcastsP33_176443A13D08CABECD6433E0302173B315FinishOperation_block);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PodcastsP33_176443A13D08CABECD6433E0302173B315FinishOperation_block + 8);
  v3 = swift_retain();
  v2(v3);
  swift_release(v1);
  sub_100044BF0();
}

uint64_t sub_1003660BC()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0
                                 + OBJC_IVAR____TtC8PodcastsP33_176443A13D08CABECD6433E0302173B315FinishOperation_block
                                 + 8));
}

id sub_1003660D0()
{
  return sub_1001C3784(0, type metadata accessor for FinishOperation);
}

uint64_t type metadata accessor for FinishOperation()
{
  return objc_opt_self(_TtC8PodcastsP33_176443A13D08CABECD6433E0302173B315FinishOperation);
}

uint64_t sub_100366114(uint64_t a1, char a2, void *a3)
{
  char *v3;
  char *v7;
  id v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  uint64_t (**v18)();
  char *v19;
  id v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  objc_class *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  objc_super v56;
  objc_super v57;
  objc_super v58;

  v7 = &v3[OBJC_IVAR____TtC8Podcasts14GroupOperation_input];
  *(_QWORD *)v7 = 0;
  v7[8] = 2;
  v8 = objc_allocWithZone((Class)NSOperationQueue);
  v9 = v3;
  v10 = objc_msgSend(v8, "init");
  v11 = v10;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8Podcasts14GroupOperation_queue] = v10;
  if ((a2 & 1) != 0)
    objc_msgSend(v10, "setMaxConcurrentOperationCount:", 1);
  objc_msgSend(v11, "setSuspended:", 1);
  *(_QWORD *)&v9[OBJC_IVAR____TtC8Podcasts14GroupOperation_log] = a3;
  v12 = a3;

  v58.receiver = v9;
  v58.super_class = (Class)type metadata accessor for GroupOperation();
  v13 = objc_msgSendSuper2(&v58, "init");
  v14 = swift_allocObject(&unk_1004C5F48, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v13);
  v15 = swift_allocObject(&unk_1004C5F70, 32, 7);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v12;
  v16 = (objc_class *)type metadata accessor for FinishOperation();
  v17 = (char *)objc_allocWithZone(v16);
  v18 = (uint64_t (**)())&v17[OBJC_IVAR____TtC8PodcastsP33_176443A13D08CABECD6433E0302173B315FinishOperation_block];
  *v18 = sub_10036651C;
  v18[1] = (uint64_t (*)())v15;
  v57.receiver = v17;
  v57.super_class = v16;
  v48 = v12;
  v19 = (char *)v13;
  v20 = objc_msgSendSuper2(&v57, "init");
  v21 = OBJC_IVAR____TtC8Podcasts14GroupOperation_queue;
  v22 = &selRef__grabBagWithCompletionBlock_;
  v54 = v20;
  objc_msgSend(*(id *)&v19[OBJC_IVAR____TtC8Podcasts14GroupOperation_queue], "addOperation:");
  if (!((unint64_t)a1 >> 62))
  {
    v23 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a1);
    if (v23)
      goto LABEL_5;
LABEL_24:

    swift_bridgeObjectRelease(a1);
    return (uint64_t)v19;
  }
  if (a1 < 0)
    v47 = a1;
  else
    v47 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  result = _CocoaArrayWrapper.endIndex.getter(v47);
  v23 = result;
  if (!result)
    goto LABEL_24;
LABEL_5:
  if (v23 >= 1)
  {
    v25 = 0;
    v55 = a1 & 0xC000000000000001;
    v51 = v19;
    v52 = a1;
    v49 = v23;
    v50 = v21;
    do
    {
      if (v55)
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, a1);
      else
        v26 = *(id *)(a1 + 8 * v25 + 32);
      v27 = v26;
      v28 = objc_opt_self(NSOperation);
      v29 = swift_dynamicCastObjCClass(v27, v28);
      if (v29)
      {
        v31 = v29;
        ObjectType = swift_getObjectType(v29, v30);
        v33 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
        if (v33)
          v35 = v33;
        else
          v35 = 0;
        if (v33)
          v36 = v31;
        else
          v36 = 0;
        if (v36)
        {
          v53 = swift_getObjectType(v36, v34);
          v37 = swift_allocObject(&unk_1004C5F98, 32, 7);
          *(_QWORD *)(v37 + 24) = v35;
          swift_unknownObjectWeakInit(v37 + 16, v36);
          v38 = swift_allocObject(&unk_1004C5FC0, 24, 7);
          swift_unknownObjectWeakInit(v38 + 16, v54);
          v39 = swift_allocObject(&unk_1004C5FE8, 32, 7);
          *(_QWORD *)(v39 + 16) = v38;
          *(_QWORD *)(v39 + 24) = v37;
          v40 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t, __n128))(v35 + 72);
          swift_unknownObjectRetain(v27);
          v41 = v27;
          swift_retain(v38);
          v42 = swift_retain(v37);
          v40(sub_1000450E8, v39, v53, v35, v42);
          a1 = v52;
          v43 = v37;
          v21 = v50;
          swift_release(v43);
          v44 = v38;
          v22 = &selRef__grabBagWithCompletionBlock_;
          swift_release(v44);
          v45 = v39;
          v19 = v51;
          swift_release(v45);
          v46 = (objc_class *)type metadata accessor for BaseOperation();
          v56.receiver = v54;
          v56.super_class = v46;
          objc_msgSendSuper2(&v56, "addDependency:", v31, v48);

          v23 = v49;
        }
      }
      ++v25;
      objc_msgSend(*(id *)&v19[v21], v22[427], v27, v48);

    }
    while (v23 != v25);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003664CC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003664F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10036651C()
{
  uint64_t v0;

  return sub_100365E60(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100366524()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100366548()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_100366578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  _BYTE v13[24];

  v1 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin();
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin();
  v5 = &v13[-v4 - 8];
  v6 = *(_QWORD *)(v0 + 16);
  if (!v6)
    return 0;
  v7 = v6 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v6 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v13, 0, 0);
  sub_10016E904(v7, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload(v5, v1) == 1)
  {
    sub_10016E98C((uint64_t)v5);
    return 0;
  }
  v8 = *((_QWORD *)v5 + 1);
  swift_retain();
  swift_bridgeObjectRelease(v8);
  sub_10016E904(v7, (uint64_t)v3);
  v9 = (void *)sub_1001E2CF0();
  sub_10016E98C((uint64_t)v3);
  if (!v9)
  {
    swift_release(v6);
    return 0;
  }
  v10 = objc_msgSend(v9, "subscribed");

  swift_release(v6);
  return v10;
}

void sub_1003666C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  void (*v35)(__n128);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  char v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  int v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  unsigned int *v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  Swift::String v88;
  Swift::String v89;
  uint64_t v90;
  __n128 v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t ObjectType;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  _QWORD v122[4];
  _QWORD v123[3];
  void *v124;
  unint64_t v125;
  uint64_t v126;
  char v127[8];
  char v128[8];

  v1 = type metadata accessor for LogMessage.StringInterpolation(0);
  __chkstk_darwin(v1);
  v111 = (char *)&v100 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for OSLogger(0);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v112 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for ActionMetricsBehavior(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v108 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v5);
  v105 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for FlowDestinationPageHeader(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for FlowPresentationContext(0);
  v118 = *(_QWORD *)(v119 - 8);
  v8 = __chkstk_darwin(v119);
  v106 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v100 - v10;
  v12 = type metadata accessor for FlowPresentationHints(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for FlowDestination(0);
  v116 = *(_QWORD *)(v117 - 8);
  v16 = __chkstk_darwin(v117);
  v115 = (uint64_t *)((char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v100 - v18);
  v20 = sub_10003F544(qword_1005542D8);
  __chkstk_darwin(v20);
  v22 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PresentationSource(0);
  v121 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v120 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin(v25);
  v27 = (uint64_t *)((char *)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = *(_QWORD *)(v0 + 16);
  if (v28)
  {
    v102 = v23;
    v29 = v28 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
    swift_beginAccess(v28 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v128, 0, 0);
    sub_10016E904(v29, (uint64_t)v27);
    if (swift_getEnumCaseMultiPayload(v27, v25) == 1)
    {
      sub_10016E98C((uint64_t)v27);
      return;
    }
    v30 = *v27;
    v31 = v27[1];
    v32 = v0 + 24;
    v33 = swift_beginAccess(v0 + 24, v127, 0, 0);
    v34 = *(_QWORD *)(v0 + 24);
    if (v34)
    {
      v101 = v30;
      v35 = *(void (**)(__n128))(*(_QWORD *)v34 + 120);
      v36 = swift_retain();
      v35(v36);
      swift_release(v34);
      v37 = v121;
      v38 = v102;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v22, 1, v102) != 1)
      {
        v100 = v31;
        v39 = v120;
        v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v37 + 32))(v120, v22, v38);
        v41 = (void *)PresentationSource.viewController.getter(v40);
        if (!v41)
        {
          (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v38);
          swift_bridgeObjectRelease(v100);
          return;
        }
        v42 = v41;
        v43 = objc_msgSend(v41, "traitCollection");
        v44 = UITraitCollection.interfaceIdiomIsMac.getter();

        if ((v44 & 1) == 0)
        {
          v53 = v42;
          v54 = v100;
          if (*(_QWORD *)v32)
          {
            v55 = *(_QWORD *)(*(_QWORD *)v32 + 16);
            v56 = v42;
            swift_retain();
            v58 = UIResponder.nearestActionRunner.getter(v57);
            v60 = v59;

            if (v58)
            {
              v61 = v115;
              *v115 = v101;
              v61[1] = v54;
              (*(void (**)(void))(v116 + 104))();
              v62 = v106;
              v63 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v118 + 104))(v106, enum case for FlowPresentationContext.presentPopover(_:), v119);
              v64 = static Link.Presentation.textFollowsTintColor.getter(v63);
              v65 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
              v66 = Link.Presentation.init(rawValue:)(0);
              v67 = Link.Presentation.init(rawValue:)(v66);
              if (Link.Presentation.init(rawValue:)(v67 & v64) != v64)
                v66 = Link.Presentation.init(rawValue:)(v66 | v64);
              v68 = Link.Presentation.init(rawValue:)(v66);
              if (Link.Presentation.init(rawValue:)(v68 & v65) != v65)
                v66 = Link.Presentation.init(rawValue:)(v66 | v65);
              v69 = v105;
              v70 = v107;
              v71 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v103 + 104))(v107, enum case for FlowDestinationPageHeader.standard(_:), v104);
              static ActionMetrics.notInstrumented.getter(v71);
              v72 = type metadata accessor for FlowAction(0);
              swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
              v73 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v115, 0, 0, 0, 0, v62, 0, v66, v70, v69);
              v74 = static Link.Presentation.textFollowsTintColor.getter(v73);
              v75 = Link.Presentation.init(rawValue:)(0);
              v76 = Link.Presentation.init(rawValue:)(v75);
              if (Link.Presentation.init(rawValue:)(v76 & v74) != v74)
                v75 = Link.Presentation.init(rawValue:)(v75 | v74);
              v77 = (unsigned int *)type metadata accessor for PopoverAction(0);
              swift_allocObject(v77, v77[12], *((unsigned __int16 *)v77 + 26));
              v78 = PopoverAction.init(title:presentationStyle:flowAction:)(0, 0, v75, v73);
              PresentationSource.popoverSource.getter(&v126);
              type metadata accessor for ActionRunnerOptions(0);
              v79 = swift_retain();
              v80 = BaseObjectGraph.__allocating_init(_:)(v79);
              sub_10020C738((uint64_t)&v126, (uint64_t)v123);
              if (v124)
              {
                v81 = sub_10036744C();
                if (swift_dynamicCast(v122, v123, (char *)&type metadata for Any + 8, v81, 6))
                  v82 = (void *)v122[0];
                else
                  v82 = 0;
              }
              else
              {
                sub_100007A28((uint64_t)v123, (uint64_t *)&unk_100552300);
                v82 = 0;
              }
              sub_10020C738((uint64_t)&v126, (uint64_t)v122);
              v92 = v82;
              ActionOrigin.init(sender:view:)(v123, v122, v82);
              v93 = ActionRunnerOptions.withActionOrigin(_:)(v123);
              sub_100007A28((uint64_t)v123, (uint64_t *)&unk_100557CB0);
              swift_release(v80);

              ObjectType = swift_getObjectType(v58, v94);
              v124 = v77;
              v125 = sub_100367404();
              v123[0] = v78;
              v96 = v109;
              v97 = v108;
              v98 = v110;
              (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v108, enum case for ActionMetricsBehavior.notProcessed(_:), v110);
              swift_retain();
              v99 = ActionRunner.perform(_:withMetrics:asPartOf:)(v123, v97, v93, ObjectType, v60);

              swift_release(v55);
              swift_release(v78);
              swift_unknownObjectRelease(v58);
              swift_release(v93);
              swift_release(v99);
              (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
              sub_100007A28((uint64_t)&v126, (uint64_t *)&unk_100552300);
              goto LABEL_32;
            }
            v45 = swift_release(v55);
          }
          v83 = v112;
          static OSLogger.actions.getter(v45);
          v84 = sub_10003F544(&qword_100557CA8);
          v85 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
          v86 = swift_allocObject(v84, ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(_QWORD *)(v85 + 72), *(unsigned __int8 *)(v85 + 80) | 7);
          *(_OWORD *)(v86 + 16) = xmmword_1003CA200;
          v87 = v111;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(72, 1);
          v88._countAndFlagsBits = 0xD00000000000002ELL;
          v88._object = (void *)0x800000010043F9C0;
          LogMessage.StringInterpolation.appendLiteral(_:)(v88);
          v124 = &type metadata for String;
          v123[0] = v101;
          v123[1] = v54;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(v123);
          sub_100007A28((uint64_t)v123, (uint64_t *)&unk_100552300);
          v89._object = (void *)0x8000000100437FF0;
          v89._countAndFlagsBits = 0xD00000000000001ALL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v89);
          LogMessage.init(stringInterpolation:)(v87);
          v90 = v114;
          Logger.error(_:)(v86, v114, &protocol witness table for OSLogger);

          v91 = swift_bridgeObjectRelease(v86);
          (*(void (**)(char *, uint64_t, __n128))(v113 + 8))(v83, v90, v91);
          (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v102);
          return;
        }
        v46 = v42;
        UIResponder.nearestFlowController.getter(v123);

        v47 = v124;
        if (v124)
        {
          v115 = (_QWORD *)v125;
          sub_10003A834(v123, (uint64_t)v124);
          v48 = v100;
          *v19 = v101;
          v19[1] = v48;
          v49 = v116;
          v50 = v117;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v116 + 104))(v19, enum case for FlowDestination.podcastSettings(_:), v117);
          (*(void (**)(char *, _QWORD, uint64_t))(v118 + 104))(v11, enum case for FlowPresentationContext.presentModalPageSheet(_:), v119);
          FlowPresentationHints.init(context:animate:)(v11, 2);
          dispatch thunk of FlowController.show(destination:hints:referrer:)(v19, v15, 0, 0, v47, v115);

          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
          (*(void (**)(_QWORD *, uint64_t))(v49 + 8))(v19, v50);
LABEL_32:
          (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v102);
          sub_10003D380(v123);
          return;
        }
        (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v102);
        swift_bridgeObjectRelease(v100);

        v51 = &qword_100554570;
        v52 = (char *)v123;
        goto LABEL_12;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v121 + 56))(v22, 1, 1, v102, v33);
    }
    swift_bridgeObjectRelease(v31);
    v51 = qword_1005542D8;
    v52 = v22;
LABEL_12:
    sub_100007A28((uint64_t)v52, v51);
  }
}

uint64_t sub_1003671EC()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts28SettingsPodcastContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10036724C()
{
  return type metadata accessor for SettingsPodcastContextAction(0);
}

uint64_t type metadata accessor for SettingsPodcastContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_1005661B0;
  if (!qword_1005661B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsPodcastContextAction);
  return result;
}

uint64_t sub_100367290(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = "\b";
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100367308()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x73676E6974746553;
  v1._object = (void *)0xE800000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1003673A0()
{
  return 1918985575;
}

uint64_t sub_1003673B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts28SettingsPodcastContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1003673F4()
{
  return 24;
}

unint64_t sub_100367404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100566248;
  if (!qword_100566248)
  {
    v1 = type metadata accessor for PopoverAction(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Action, v1);
    atomic_store(result, (unint64_t *)&qword_100566248);
  }
  return result;
}

unint64_t sub_10036744C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100566250;
  if (!qword_100566250)
  {
    v1 = objc_opt_self(UIView);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100566250);
  }
  return result;
}

uint64_t sub_100367488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, unint64_t, uint64_t, __n128);
  __n128 v24;
  char v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;

  v1 = type metadata accessor for EpisodeOffer(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v19 = *(_QWORD *)(v6 + 16);
    if (!v19)
      return 1;
    v20 = *(_QWORD *)(v0 + 16);
    v21 = v6 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v39 = v5;
    sub_100198BD4(v20, v5, 1u);
    v22 = *(_QWORD *)(v2 + 72);
    v40 = v20;
    v41 = v22;
    v23 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v2 + 16);
    v24 = swift_bridgeObjectRetain(v20);
    while (1)
    {
      v27 = v23(v4, v21, v1, v24);
      if (EpisodeOffer.mediaType.getter(v27) == 3)
        break;
      v28 = ((uint64_t (*)(void))EpisodeMediaType.rawValue.getter)();
      v30 = v29;
      v32 = EpisodeMediaType.rawValue.getter(2);
      v33 = v31;
      if (v28 == v32 && v30 == v31)
      {
        swift_bridgeObjectRelease_n(v30, 2);
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      }
      else
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0);
        swift_bridgeObjectRelease(v30);
        v26 = swift_bridgeObjectRelease(v33);
        (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v4, v1, v26);
        if ((v25 & 1) == 0)
          goto LABEL_22;
      }
      v21 += v41;
      if (!--v19)
      {
        v7 = 1;
        v35 = v39;
        v34 = v40;
        sub_100198C1C(v40, v39, 1u);
        sub_100198C1C(v34, v35, 1u);
        return v7;
      }
    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
LABEL_22:
    v37 = v39;
    v36 = v40;
    sub_100198C1C(v40, v39, 1u);
    sub_100198C1C(v36, v37, 1u);
    return 0;
  }
  if (*(_BYTE *)(v0 + 32))
    return 0;
  v7 = 1;
  v42 = 1;
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v9 = v5;
    type metadata accessor for CoreDataFetcher(0);
    v39 = v9;
    sub_100198BD4(v6, v9, 0);
    swift_bridgeObjectRetain(v6);
    v11 = v8 - 1;
    v40 = v6;
    v12 = (uint64_t *)(v6 + 40);
    do
    {
      v14 = *(v12 - 1);
      v13 = *v12;
      __chkstk_darwin(v10);
      *(&v39 - 2) = (uint64_t)&v42;
      swift_bridgeObjectRetain(v13);
      static CoreDataFetcher.performAndWaitOnEpisode<A>(with:block:)(v15, v14, v13, sub_10036A208, &v39 - 4, (char *)&type metadata for () + 8);
      swift_bridgeObjectRelease(v13);
      v7 = v42;
      v17 = v11-- != 0;
      if (v42 != 1)
        break;
      v12 += 2;
    }
    while (v17);
    v18 = v40;
    sub_100198C1C(v40, v39, 0);
    swift_bridgeObjectRelease(v18);
  }
  return v7;
}

void sub_100367770()
{
  __asm { BR              X10 }
}

uint64_t sub_1003677B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, __n128);

  *v0 = v1;
  v2 = enum case for BookmarksControllerEpisodeData.localEpisodes(_:);
  v3 = type metadata accessor for BookmarksControllerEpisodeData(0);
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v3 - 8) + 104);
  v4 = swift_bridgeObjectRetain(v1);
  return v6(v0, v2, v3, v4);
}

void sub_100367C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t j;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v17);
    if (!v2)
      goto LABEL_21;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v2)
      goto LABEL_21;
  }
  if (v2 < 1)
  {
    __break(1u);
    goto LABEL_36;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v2; ++i)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      v6 = MPCPlayerResponseItem.podcastEpisode.getter();
      v7 = swift_unknownObjectRelease(v5);
      if (v6)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
        v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v9 >= v8 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v6);
        specialized Array._endMutation()(v4);
      }
    }
  }
  else
  {
    for (j = 0; j != v2; ++j)
    {
      v12 = *(id *)(a1 + 8 * j + 32);
      v13 = MPCPlayerResponseItem.podcastEpisode.getter();

      if (v13)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
        v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v15 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v16 >= v15 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
        specialized Array._endMutation()(v11);
      }
    }
  }
LABEL_21:
  swift_bridgeObjectRelease(a1);
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v18)
      goto LABEL_23;
LABEL_34:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    return;
  }
  if ((uint64_t)_swiftEmptyArrayStorage < 0)
    v24 = _swiftEmptyArrayStorage;
  else
    v24 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v18 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  if (!v18)
    goto LABEL_34;
LABEL_23:
  specialized ContiguousArray.reserveCapacity(_:)(v18);
  if ((v18 & 0x8000000000000000) == 0)
  {
    sub_100186514();
    v19 = 0;
    do
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, _swiftEmptyArrayStorage);
      else
        v20 = (id)_swiftEmptyArrayStorage[v19 + 4];
      ++v19;
      v21 = IMPlayerItem.init(modelObject:includeArtworkCatalog:)(v20, 1);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      v22 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
      v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v21);
      specialized ContiguousArray._endMutation()(v23);
    }
    while (v18 != v19);
    goto LABEL_34;
  }
LABEL_36:
  __break(1u);
}

void sub_100367F44()
{
  __asm { BR              X10 }
}

BOOL sub_100367F84()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = sub_100368248(1);
  v1 = v0[2];
  swift_bridgeObjectRelease(v0);
  return v1 != 0;
}

_QWORD *sub_100368248(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE v12[24];
  _QWORD **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = _swiftEmptyArrayStorage;
  if (!*(_BYTE *)(v1 + 32))
  {
    v4 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRetain(v4);
    v17 = _swiftEmptyArrayStorage;
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = type metadata accessor for CoreDataFetcher(0);
      v16 = v4;
      v7 = (uint64_t *)(v4 + 40);
      do
      {
        v8 = *(v7 - 1);
        v9 = *v7;
        __chkstk_darwin(v6);
        v12[16] = a1 & 1;
        v13 = &v17;
        v14 = v8;
        v15 = v9;
        swift_bridgeObjectRetain(v9);
        static CoreDataFetcher.performAndWaitOnEpisode<A>(with:block:)(v10, v8, v9, sub_10036A23C, v12, (char *)&type metadata for () + 8);
        swift_bridgeObjectRelease(v9);
        v7 += 2;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease(v16);
      return v17;
    }
    else
    {
      swift_bridgeObjectRelease(v4);
    }
  }
  return v2;
}

void sub_100368368(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, unint64_t, uint64_t, __n128);
  uint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __n128 v44;
  unsigned __int8 v45;
  uint64_t v46;
  char *v47;
  __n128 v48;
  char v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;

  v56 = a1;
  v2 = type metadata accessor for ShowOffer(0);
  v57 = *(_QWORD *)(v2 - 8);
  v58 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EpisodeOffer(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v59 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v65 = (char *)&v54 - v10;
  v11 = __chkstk_darwin(v9);
  v64 = (char *)&v54 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v54 - v13;
  if (*(_BYTE *)(v1 + 32) == 1)
  {
    v16 = *(_QWORD *)(v1 + 16);
    v15 = *(_QWORD *)(v1 + 24);
    v66 = (char *)_swiftEmptyArrayStorage;
    v17 = *(_QWORD *)(v16 + 16);
    v18 = swift_bridgeObjectRetain(v16);
    v61 = v17;
    if (v17)
    {
      v54 = v15;
      v60 = v4;
      v19 = 0;
      while (1)
      {
        if (v19 >= *(_QWORD *)(v16 + 16))
        {
          __break(1u);
          return;
        }
        v20 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        v21 = *(_QWORD *)(v6 + 72);
        v22 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
        v23 = v22(v14, v16 + v20 + v21 * v19, v5, v18);
        v24 = EpisodeOffer.contentRating.getter(v23);
        v63 = v21;
        if (v24 == 2)
        {
          v25 = v64;
          v26 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v64, v14, v5);
        }
        else
        {
          v31 = ContentRating.rawValue.getter(v24 & 1);
          v33 = v32;
          v35 = ContentRating.rawValue.getter(1);
          v36 = v34;
          if (v31 == v35 && v33 == v34)
          {
            swift_bridgeObjectRelease_n(v33, 2);
            v25 = v64;
            ((void (*)(char *, char *, uint64_t))v22)(v64, v14, v5);
LABEL_19:
            v30 = *(void (**)(char *, uint64_t))(v6 + 8);
            v30(v25, v5);
            goto LABEL_20;
          }
          v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v35, v34, 0);
          swift_bridgeObjectRelease(v33);
          v44 = swift_bridgeObjectRelease(v36);
          v25 = v64;
          v26 = v22(v64, (unint64_t)v14, v5, v44);
          if ((v43 & 1) != 0)
            goto LABEL_19;
        }
        v62 = v20;
        v27 = v60;
        v28 = EpisodeOffer.showOffer.getter(v26);
        v29 = ShowOffer.contentRating.getter(v28);
        if (v29 == 2)
        {
          (*(void (**)(char *, uint64_t))(v57 + 8))(v27, v58);
          v30 = *(void (**)(char *, uint64_t))(v6 + 8);
          v30(v25, v5);
          v20 = v62;
LABEL_24:
          v47 = v65;
          v46 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v65, v14, v5);
          goto LABEL_25;
        }
        v37 = ContentRating.rawValue.getter(v29 & 1);
        v39 = v38;
        v41 = ContentRating.rawValue.getter(1);
        v42 = v40;
        if (v37 == v41 && v39 == v40)
        {
          swift_bridgeObjectRelease_n(v39, 2);
          (*(void (**)(char *, uint64_t))(v57 + 8))(v60, v58);
          v25 = v64;
          v20 = v62;
          goto LABEL_19;
        }
        v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v41, v40, 0);
        swift_bridgeObjectRelease(v39);
        v48 = swift_bridgeObjectRelease(v42);
        (*(void (**)(char *, uint64_t, __n128))(v57 + 8))(v60, v58, v48);
        v30 = *(void (**)(char *, uint64_t))(v6 + 8);
        v30(v64, v5);
        v20 = v62;
        if ((v55 & 1) == 0)
          goto LABEL_24;
LABEL_20:
        v45 = objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed");
        v46 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v65, v14, v5);
        if ((v45 & 1) == 0 && (v56 & 1) == 0)
        {
          v30(v65, v5);
          goto LABEL_5;
        }
        v47 = v65;
LABEL_25:
        v49 = EpisodeOffer.isEntitledOffer.getter(v46);
        v30(v47, v5);
        if ((v49 & 1) != 0)
        {
          v50 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
          v50(v59, v14, v5);
          v51 = v66;
          if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
          {
            sub_10017B058(0, *((_QWORD *)v51 + 2) + 1, 1);
            v51 = v66;
          }
          v53 = *((_QWORD *)v51 + 2);
          v52 = *((_QWORD *)v51 + 3);
          if (v53 >= v52 >> 1)
          {
            sub_10017B058(v52 > 1, v53 + 1, 1);
            v51 = v66;
          }
          *((_QWORD *)v51 + 2) = v53 + 1;
          v50(&v51[v20 + v53 * v63], v59, v5);
          v66 = v51;
          goto LABEL_6;
        }
LABEL_5:
        v30(v14, v5);
LABEL_6:
        if (v61 == ++v19)
        {
          v15 = v54;
          break;
        }
      }
    }
    sub_100198C1C(v16, v15, 1u);
  }
}

uint64_t sub_100368814(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  int v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v17;
  uint64_t v18;

  v4 = a3;
  v5 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v6 = objc_msgSend(v5, "mainOrPrivateContext");

  if (v4 || !a1[2])
  {

    return 0;
  }
  v8 = a1[4];
  v9 = a1[5];
  v18 = 0;
  v10 = (_QWORD *)swift_allocObject(&unk_1004C61C0, 48, 7);
  v10[2] = &v18;
  v10[3] = v6;
  v10[4] = v8;
  v10[5] = v9;
  v11 = swift_allocObject(&unk_1004C61E8, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_10036A278;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_100029B3C;
  v17 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004C6200;
  v12 = _Block_copy(aBlock);
  v13 = v17;
  swift_bridgeObjectRetain(v9);
  v14 = v6;
  swift_retain();
  swift_release(v13);
  objc_msgSend(v14, "performBlockAndWait:", v12);

  _Block_release(v12);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(v11, "", 123, 31, 36, 1);
  result = swift_release(v11);
  if ((v14 & 1) == 0)
  {
    v7 = v18;
    swift_release(v10);
    return v7;
  }
  __break(1u);
  return result;
}

void sub_1003689C0()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for ShowOffer(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_100368A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  Swift::String v8;
  Swift::String v9;
  _QWORD v11[16];

  v1 = *(_QWORD *)(v0 - 128);
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain(v1);
  if (v2)
  {
    type metadata accessor for CoreDataFetcher(0);
    swift_bridgeObjectRetain(v1);
    v3 = (uint64_t *)(v1 + 40);
    v4 = v2;
    do
    {
      v5 = *(v3 - 1);
      v6 = *v3;
      __chkstk_darwin();
      v11[2] = v0 - 96;
      v11[3] = v0 - 112;
      swift_bridgeObjectRetain(v6);
      static CoreDataFetcher.performAndWaitOnEpisode<A>(with:block:)(v7, v5, v6, sub_10036A200, v11, &type metadata for () + 1);
      swift_bridgeObjectRelease(v6);
      if (v2 != 1)
      {
        v8._countAndFlagsBits = 44;
        v8._object = (void *)0xE100000000000000;
        String.append(_:)(v8);
        v9._countAndFlagsBits = 44;
        v9._object = (void *)0xE100000000000000;
        String.append(_:)(v9);
      }
      v3 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 - 128), 2);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
  }
  return *(_QWORD *)(v0 - 96);
}

void sub_1003690AC(void **a1, void *a2)
{
  NSString v4;
  id v5;
  void *v6;

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a2, "episodeForUuid:", v4);

  v6 = *a1;
  *a1 = v5;

}

void sub_100369110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  __n128 v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char **v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  unsigned int v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  _QWORD *v88;
  id v89;
  id v90;
  char *v91;

  v1 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v1);
  v3 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for EpisodeOffer(0);
  v91 = *(char **)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  v80 = v0;
  v9 = *(unsigned __int8 *)(v0 + 32);
  v87 = v8;
  if (v9 == 2)
  {
    v81 = v7;
    if ((unint64_t)v8 >> 62)
    {
      if (v8 >= 0)
        v79 = v8 & 0xFFFFFFFFFFFFFF8;
      else
        v79 = v8;
      sub_100198BD4(v8, v7, 2u);
      swift_bridgeObjectRetain(v8);
      v22 = _CocoaArrayWrapper.endIndex.getter(v79);
      if (v22)
      {
LABEL_14:
        v86 = (id)objc_opt_self(MTStoreIdentifier);
        v85 = type metadata accessor for CoreDataFetcher(0);
        if (v22 < 1)
        {
          __break(1u);
          return;
        }
        v23 = 0;
        v24 = *(void **)(v80 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_mangedContextProvider);
        v82 = v8 & 0xC000000000000001;
        v83 = v24;
        v88 = _swiftEmptyArrayStorage;
        v25 = &selRef_dateLabelDescriptionForEpisode_download_;
        v91 = v3;
        v84 = v22;
        do
        {
          if (v82)
            v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v8);
          else
            v27 = *(id *)(v8 + 8 * v23 + 32);
          v28 = v27;
          v90 = objc_msgSend(v83, "mainOrPrivateContext", v80);
          v29 = objc_msgSend(v28, v25[339]);
          v30 = objc_msgSend(v86, "isNotEmpty:", v29);
          if (v30)
            v89 = objc_msgSend(v28, v25[339]);
          else
            v89 = 0;
          v31 = objc_msgSend(v28, "episodeGuid");
          if (v31)
          {
            v32 = v31;
            v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
            v35 = v34;

          }
          else
          {
            v33 = 0;
            v35 = 0;
          }
          v36 = objc_msgSend(v28, "title");
          if (v36)
          {
            v37 = v36;
            v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
            v40 = v39;

          }
          else
          {
            v38 = 0;
            v40 = 0;
          }
          v41 = objc_msgSend(v28, "pubDate");
          if (v41)
          {
            v42 = v41;
            v43 = v91;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v41);

            v44 = type metadata accessor for Date(0);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
          }
          else
          {
            v45 = type metadata accessor for Date(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v91, 1, 1, v45);
          }
          v46 = objc_msgSend(v28, "podcastUuid");
          if (v46)
          {
            v47 = v46;
            v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
            v50 = v49;

          }
          else
          {
            v48 = 0;
            v50 = 0;
          }
          v51 = v30 ^ 1;
          v52 = v90;
          v53 = v38;
          v54 = (uint64_t)v91;
          v55 = (void *)static CoreDataFetcher.fetchEpisode(contentId:guid:title:pubDate:podcastUuid:with:)(v89, v51, v33, v35, v53, v40, v91, v48, v50, v90);
          swift_bridgeObjectRelease(v50);
          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(v35);
          sub_1001780E4(v54);
          if (v55)
          {
            v56 = objc_msgSend(v55, "uuid");
            if (v56)
            {
              v57 = v56;
              v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
              v60 = v59;

              v61 = v88;
              if ((swift_isUniquelyReferenced_nonNull_native(v88) & 1) == 0)
                v61 = sub_10027AE00(0, v61[2] + 1, 1, v61);
              v63 = v61[2];
              v62 = v61[3];
              v88 = v61;
              if (v63 >= v62 >> 1)
                v88 = sub_10027AE00((_QWORD *)(v62 > 1), v63 + 1, 1, v88);
              v64 = v88;
              v88[2] = v63 + 1;
              v65 = &v64[2 * v63];
              v65[4] = v58;
              v65[5] = v60;
              v66 = v52;
              v52 = v55;
            }
            else
            {
              v66 = v55;
            }
            v26 = v84;

            v8 = v87;
          }
          else
          {
            v8 = v87;
            v26 = v84;
          }
          v25 = &selRef_dateLabelDescriptionForEpisode_download_;
          ++v23;

        }
        while (v26 != v23);
        sub_100198C1C(v8, v81, 2u);
        v67 = v88;
        if (v88[2])
        {
LABEL_46:
          v68 = v80;
          v69 = *(_QWORD *)(v80 + 16);
          v70 = *(_QWORD *)(v80 + 24);
          *(_QWORD *)(v80 + 16) = v67;
          *(_QWORD *)(v68 + 24) = 0;
          v71 = *(_BYTE *)(v68 + 32);
          *(_BYTE *)(v68 + 32) = 0;
          v72 = sub_100198C1C(v69, v70, v71);
          sub_100369110(v72);
          sub_100198C1C(v8, v81, 2u);
          return;
        }
LABEL_56:
        sub_100198C1C(v8, v81, 2u);
        v78 = v67;
        goto LABEL_57;
      }
    }
    else
    {
      v22 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      sub_100198BD4(v8, v7, 2u);
      swift_bridgeObjectRetain(v8);
      if (v22)
        goto LABEL_14;
    }
    sub_100198C1C(v8, v81, 2u);
    v67 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
      goto LABEL_46;
    goto LABEL_56;
  }
  if (v9 != 1)
    return;
  v81 = v7;
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    type metadata accessor for CoreDataFetcher(0);
    v11 = v8 + ((v91[80] + 32) & ~(unint64_t)v91[80]);
    v12 = (void *)*((_QWORD *)v91 + 9);
    v89 = (id)*((_QWORD *)v91 + 2);
    v90 = v12;
    v13 = swift_bridgeObjectRetain(v8);
    v14 = _swiftEmptyArrayStorage;
    do
    {
      ((void (*)(char *, unint64_t, uint64_t, __n128))v89)(v6, v11, v4, v13);
      v16 = static CoreDataFetcher.episodeUuid(for:)(v6);
      if (v17)
      {
        v18 = v16;
        v19 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v14 = sub_10027AE00(0, v14[2] + 1, 1, v14);
        v21 = v14[2];
        v20 = v14[3];
        if (v21 >= v20 >> 1)
          v14 = sub_10027AE00((_QWORD *)(v20 > 1), v21 + 1, 1, v14);
        v14[2] = v21 + 1;
        v15 = &v14[2 * v21];
        v15[4] = v18;
        v15[5] = v19;
      }
      (*((void (**)(char *, uint64_t))v91 + 1))(v6, v4);
      v11 += (unint64_t)v90;
      --v10;
    }
    while (v10);
  }
  else
  {
    swift_bridgeObjectRetain(v8);
    v14 = _swiftEmptyArrayStorage;
  }
  if (v14[2])
  {
    v73 = v80;
    v74 = *(_QWORD *)(v80 + 16);
    v75 = *(_QWORD *)(v80 + 24);
    *(_QWORD *)(v80 + 16) = v14;
    *(_QWORD *)(v73 + 24) = 0;
    v76 = *(_BYTE *)(v73 + 32);
    *(_BYTE *)(v73 + 32) = 0;
    v77 = sub_100198C1C(v74, v75, v76);
    sub_100369110(v77);
    sub_100198C1C(v87, v81, 1u);
    return;
  }
  sub_100198C1C(v87, v81, 1u);
  v78 = v14;
LABEL_57:
  swift_bridgeObjectRelease(v78);
}

uint64_t sub_10036976C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100198C1C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  v1 = v0 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_presentationHint;
  v2 = type metadata accessor for PreviewingPresentationHint(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_mangedContextProvider));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1003697D8()
{
  return type metadata accessor for EpisodeContextActionData(0);
}

uint64_t type metadata accessor for EpisodeContextActionData(uint64_t a1)
{
  uint64_t result;

  result = qword_100566290;
  if (!qword_100566290)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeContextActionData);
  return result;
}

uint64_t sub_10036981C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1003D7120;
  result = type metadata accessor for PreviewingPresentationHint(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1003D7138;
    v4[3] = &unk_1003D7150;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for EpisodeContextActionDataType(uint64_t a1)
{
  return sub_100198C1C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s8Podcasts28EpisodeContextActionDataTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100198BD4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for EpisodeContextActionDataType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100198BD4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100198C1C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for EpisodeContextActionDataType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100198C1C(v4, v5, v6);
  return a1;
}

uint64_t sub_10036999C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1003699A4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EpisodeContextActionDataType()
{
  return &type metadata for EpisodeContextActionDataType;
}

_QWORD *sub_1003699BC()
{
  uint64_t v0;
  _QWORD *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[7];
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  result = _swiftEmptyArrayStorage;
  if (!*(_BYTE *)(v0 + 32))
  {
    v2 = *(_QWORD *)(v0 + 16);
    v3 = *(_QWORD *)(v0 + 24);
    v14 = _swiftEmptyArrayStorage;
    v4 = *(_QWORD *)(v2 + 16);
    if (v4)
    {
      type metadata accessor for CoreDataFetcher(0);
      v12 = v3;
      sub_100198BD4(v2, v3, 0);
      swift_bridgeObjectRetain(v2);
      v13 = v2;
      v6 = (uint64_t *)(v2 + 40);
      do
      {
        v7 = *(v6 - 1);
        v8 = *v6;
        __chkstk_darwin(v5);
        v11[2] = &v14;
        v11[3] = v7;
        v11[4] = v8;
        swift_bridgeObjectRetain(v8);
        static CoreDataFetcher.performAndWaitOnEpisode<A>(with:block:)(v9, v7, v8, sub_10036A294, v11, (char *)&type metadata for () + 8);
        swift_bridgeObjectRelease(v8);
        v6 += 2;
        --v4;
      }
      while (v4);
      v10 = v13;
      sub_100198C1C(v13, v12, 0);
      swift_bridgeObjectRelease(v10);
      return v14;
    }
  }
  return result;
}

void sub_100369AE4(void *a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  id v12;

  if (a1)
  {
    v12 = a1;
    if ((objc_msgSend(v12, "isRestricted") & 1) == 0)
    {
      v7 = *a2;
      swift_bridgeObjectRetain(a4);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
      *a2 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v7 = sub_10027AE00(0, v7[2] + 1, 1, v7);
        *a2 = v7;
      }
      v10 = v7[2];
      v9 = v7[3];
      if (v10 >= v9 >> 1)
      {
        v7 = sub_10027AE00((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
        *a2 = v7;
      }
      v7[2] = v10 + 1;
      v11 = &v7[2 * v10];
      v11[4] = a3;
      v11[5] = a4;
    }

  }
}

void sub_100369BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, unint64_t, uint64_t, __n128);
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __n128 v41;
  char *v42;
  void (*v43)(uint64_t, uint64_t);
  char v44;
  __n128 v45;
  void (*v46)(uint64_t, char *, uint64_t);
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  _QWORD *v59;

  v1 = type metadata accessor for ShowOffer(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EpisodeOffer(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v12 = (char *)&v50 - v11;
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v56 = v10;
    v57 = v9;
    v58 = v4;
    v59 = _swiftEmptyArrayStorage;
    v13 = *(_QWORD *)(v0 + 16);
    v51 = *(_QWORD *)(v0 + 24);
    v14 = *(_QWORD *)(v13 + 16);
    v16 = swift_bridgeObjectRetain(v13);
    v55 = v14;
    if (v14)
    {
      v52 = v2;
      v53 = v1;
      v17 = 0;
      v18 = v58;
      v54 = v15;
      do
      {
        if (v17 >= *(_QWORD *)(v15 + 16))
        {
          __break(1u);
          return;
        }
        v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        v20 = *(_QWORD *)(v6 + 72);
        v21 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
        v22 = v21(v12, v15 + v19 + v20 * v17, v5, v16);
        v23 = EpisodeOffer.contentRating.getter(v22);
        if (v23 == 2)
        {
          v24 = v56;
          v25 = ((uint64_t (*)(char *, char *, uint64_t))v21)(v56, v12, v5);
        }
        else
        {
          v28 = ContentRating.rawValue.getter(v23 & 1);
          v30 = v29;
          v32 = ContentRating.rawValue.getter(1);
          v33 = v31;
          if (v28 == v32 && v30 == v31)
          {
            swift_bridgeObjectRelease_n(v30, 2);
            v24 = v56;
            ((void (*)(char *, char *, uint64_t))v21)(v56, v12, v5);
            v18 = v58;
LABEL_18:
            v42 = v24;
            v43 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
            v43((uint64_t)v42, v5);
            goto LABEL_19;
          }
          v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0);
          swift_bridgeObjectRelease(v30);
          v41 = swift_bridgeObjectRelease(v33);
          v24 = v56;
          v25 = v21(v56, (unint64_t)v12, v5, v41);
          v18 = v58;
          if ((v40 & 1) != 0)
            goto LABEL_18;
        }
        v26 = EpisodeOffer.showOffer.getter(v25);
        v27 = ShowOffer.contentRating.getter(v26);
        if (v27 == 2)
        {
          (*(void (**)(char *, uint64_t))(v52 + 8))(v18, v53);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v24, v5);
LABEL_22:
          v46 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
          v46((uint64_t)v57, v12, v5);
          v47 = v59;
          if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
          {
            sub_10017B058(0, v47[2] + 1, 1);
            v47 = v59;
          }
          v49 = v47[2];
          v48 = v47[3];
          if (v49 >= v48 >> 1)
          {
            sub_10017B058(v48 > 1, v49 + 1, 1);
            v47 = v59;
          }
          v47[2] = v49 + 1;
          v46((uint64_t)v47 + v19 + v49 * v20, v57, v5);
          v59 = v47;
          v18 = v58;
          goto LABEL_5;
        }
        v34 = ContentRating.rawValue.getter(v27 & 1);
        v36 = v35;
        v38 = ContentRating.rawValue.getter(1);
        v39 = v37;
        if (v34 == v38 && v36 == v37)
        {
          swift_bridgeObjectRelease_n(v36, 2);
          v18 = v58;
          (*(void (**)(char *, uint64_t))(v52 + 8))(v58, v53);
          v24 = v56;
          goto LABEL_18;
        }
        v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v38, v37, 0);
        swift_bridgeObjectRelease(v36);
        v45 = swift_bridgeObjectRelease(v39);
        v18 = v58;
        (*(void (**)(char *, uint64_t, __n128))(v52 + 8))(v58, v53, v45);
        v43 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
        v43((uint64_t)v56, v5);
        if ((v44 & 1) == 0)
          goto LABEL_22;
LABEL_19:
        if ((objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") & 1) != 0)goto LABEL_22;
        v43((uint64_t)v12, v5);
LABEL_5:
        ++v17;
        v15 = v54;
      }
      while (v55 != v17);
    }
    sub_100198C1C(v15, v51, 1u);
  }
}

double sub_100369FD0(void *a1)
{
  id v1;
  __n128 v2;
  void *v3;
  char v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double result;

  if (!a1)
  {
    v9 = 0xE000000000000000;
    v10 = 0xE000000000000000;
    String.append(_:)(*(Swift::String *)&a1);
    swift_bridgeObjectRelease(0xE000000000000000);
    v11 = 0;
    goto LABEL_11;
  }
  v1 = objc_msgSend(a1, "podcast");
  if (v1)
  {
    v3 = v1;
    MTPodcast.adamId.getter(v2);
    v5 = v4;

    if ((v5 & 1) == 0)
    {
      v6 = sub_100030584();
      v1 = (id)BinaryInteger.description.getter(&type metadata for UInt64, v6);
      v8 = v7;
      goto LABEL_8;
    }
    v1 = 0;
  }
  v8 = 0xE000000000000000;
LABEL_8:
  v12 = v8;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease(v8);
  MTEpisode.contentId.getter(v13);
  if ((v14 & 1) != 0)
  {
    v11 = 0;
    v9 = 0xE000000000000000;
  }
  else
  {
    v15 = sub_100030584();
    v11 = BinaryInteger.description.getter(&type metadata for UInt64, v15);
    v9 = v16;
  }
LABEL_11:
  v17 = v9;
  String.append(_:)(*(Swift::String *)&v11);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
  return result;
}

void sub_10036A0EC(void *a1, char a2, _QWORD **a3, uint64_t a4, uint64_t a5)
{
  id v9;
  void *v10;
  unsigned __int8 v11;
  unsigned int v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  id v23;

  if (a1)
  {
    v9 = a1;
    v10 = v9;
    v23 = v9;
    if ((a2 & 1) != 0 || (v11 = objc_msgSend(v9, "isRestricted"), v10 = v23, (v11 & 1) == 0))
    {
      v12 = objc_msgSend(v10, "isEntitled");
      v10 = v23;
      if (v12)
      {
        v13 = *a3;
        swift_bridgeObjectRetain(a5);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
        *a3 = v13;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v13 = sub_10027AE00(0, v13[2] + 1, 1, v13);
          *a3 = v13;
        }
        v15 = v13[2];
        v16 = v13[3];
        v17 = v15 + 1;
        if (v15 >= v16 >> 1)
        {
          v22 = v15 + 1;
          v19 = v13;
          v20 = v13[2];
          v21 = sub_10027AE00((_QWORD *)(v16 > 1), v15 + 1, 1, v19);
          v15 = v20;
          v17 = v22;
          v13 = v21;
          *a3 = v21;
        }
        v10 = v23;
        v13[2] = v17;
        v18 = &v13[2 * v15];
        v18[4] = a4;
        v18[5] = a5;
      }
    }

  }
}

double sub_10036A200(void *a1)
{
  return sub_100369FD0(a1);
}

id sub_10036A208(id result)
{
  uint64_t v1;
  _BYTE *v2;

  if (result)
  {
    v2 = *(_BYTE **)(v1 + 16);
    result = objc_msgSend(result, "isDownloadable");
    if ((_DWORD)result)
      *v2 = 0;
  }
  return result;
}

void sub_10036A23C(void *a1)
{
  uint64_t v1;

  sub_10036A0EC(a1, *(_BYTE *)(v1 + 16), *(_QWORD ***)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10036A24C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10036A278()
{
  uint64_t v0;

  sub_1003690AC(*(void ***)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10036A284()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10036A294(void *a1)
{
  uint64_t v1;

  sub_100369AE4(a1, *(_QWORD ***)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

Swift::Void __swiftcall MTLibrary.removeEpisodes(with:)(Swift::OpaquePointer with)
{
  void *v1;
  void *v2;
  int64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  Class isa;

  v2 = v1;
  v3 = *((_QWORD *)with._rawValue + 2);
  if (v3)
  {
    sub_100048628(0, v3, 0);
    v5 = (char *)with._rawValue + 32;
    do
    {
      v5 += 8;
      v6 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v8 = v7;
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_100048628(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v6;
      v11[5] = v8;
      --v3;
    }
    while (v3);
    v2 = v1;
  }
  v12 = sub_10002B070((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  isa = Set._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "removeDownloadAssetsForEpisodeUuids:", isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

}

uint64_t sub_10036A43C(uint64_t a1)
{
  return sub_10036A474(a1, (uint64_t)&type metadata for Int64, (uint64_t)&protocol witness table for Int64, (void (*)(uint64_t *, uint64_t))sub_10035D89C);
}

uint64_t sub_10036A458(uint64_t a1)
{
  return sub_10036A474(a1, (uint64_t)&type metadata for UInt64, (uint64_t)&protocol witness table for UInt64, (void (*)(uint64_t *, uint64_t))sub_10035D8B0);
}

uint64_t sub_10036A474(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, uint64_t))
{
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v6);
  v11 = result;
  if (v6)
  {
    v8 = (uint64_t *)(a1 + 32);
    do
    {
      v9 = *v8++;
      a4(&v10, v9);
      --v6;
    }
    while (v6);
    return v11;
  }
  return result;
}

id InterestSyncStorage.importContext.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8Podcasts19InterestSyncStorage_importContext);
}

id InterestSyncStorage.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InterestSyncStorage();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for InterestSyncStorage()
{
  return objc_opt_self(_TtC8Podcasts19InterestSyncStorage);
}

id sub_10036A604()
{
  _QWORD *v0;

  return *(id *)(*v0 + OBJC_IVAR____TtC8Podcasts19InterestSyncStorage_importContext);
}

uint64_t InterestSyncStorage.isInterestSyncDirty.getter()
{
  uint64_t v0;
  void *v1;
  char v2;

  v0 = type metadata accessor for SyncKeysRepository(0);
  v1 = (void *)static SyncKeysRepository.shared.getter(v0);
  v2 = SyncKeysRepository.isInterestSyncDirty.getter();

  return v2 & 1;
}

void InterestSyncStorage.isInterestSyncDirty.setter(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = type metadata accessor for SyncKeysRepository(0);
  v3 = (id)static SyncKeysRepository.shared.getter(v2);
  SyncKeysRepository.isInterestSyncDirty.setter(a1);

}

void (*InterestSyncStorage.isInterestSyncDirty.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  char v4;

  v2 = type metadata accessor for SyncKeysRepository(0);
  *(_QWORD *)a1 = v2;
  v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  v4 = SyncKeysRepository.isInterestSyncDirty.getter();

  *(_BYTE *)(a1 + 8) = v4 & 1;
  return sub_10036A6FC;
}

void sub_10036A6FC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = (id)static SyncKeysRepository.shared.getter(a1);
  SyncKeysRepository.isInterestSyncDirty.setter(v1);

}

uint64_t InterestSyncStorage.interestLastSyncTimestamp.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t Sync;

  v0 = type metadata accessor for SyncKeysRepository(0);
  v1 = (void *)static SyncKeysRepository.shared.getter(v0);
  Sync = SyncKeysRepository.interestLastSyncTimestamp.getter();

  return Sync;
}

void InterestSyncStorage.interestLastSyncTimestamp.setter(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v4 = type metadata accessor for SyncKeysRepository(0);
  v6 = (id)static SyncKeysRepository.shared.getter(v4);
  if ((a2 & 1) != 0)
    v5 = 0;
  else
    v5 = a1;
  SyncKeysRepository.interestLastSyncTimestamp.setter(v5, 0);

}

void (*sub_10036A7EC(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = InterestSyncStorage.interestLastSyncTimestamp.modify((uint64_t)v2);
  return sub_100179A78;
}

void (*InterestSyncStorage.interestLastSyncTimestamp.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t Sync;
  char v5;
  char v6;

  v2 = type metadata accessor for SyncKeysRepository(0);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  Sync = SyncKeysRepository.interestLastSyncTimestamp.getter();
  v6 = v5;

  *(_QWORD *)a1 = Sync;
  *(_BYTE *)(a1 + 8) = v6 & 1;
  return sub_10036A88C;
}

void sub_10036A88C(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  id v4;

  v1 = *a1;
  v2 = *((unsigned __int8 *)a1 + 8);
  v4 = (id)static SyncKeysRepository.shared.getter(a1);
  if (v2)
    v3 = 0;
  else
    v3 = v1;
  SyncKeysRepository.interestLastSyncTimestamp.setter(v3, 0);

}

uint64_t sub_10036A8E4(uint64_t a1, uint64_t a2)
{
  return sub_100179C18(a1, a2, (uint64_t (*)(void))&SyncKeysRepository.interestSyncVersion.getter);
}

uint64_t InterestSyncStorage.syncVersion.getter()
{
  return sub_100179C74((uint64_t (*)(void))&SyncKeysRepository.interestSyncVersion.getter);
}

void sub_10036A8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100179CD0(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))&SyncKeysRepository.interestSyncVersion.setter);
}

void InterestSyncStorage.syncVersion.setter(uint64_t a1, uint64_t a2)
{
  sub_100179D3C(a1, a2, (void (*)(uint64_t, uint64_t))&SyncKeysRepository.interestSyncVersion.setter);
}

void (*sub_10036A914(uint64_t **a1))(_QWORD *)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)InterestSyncStorage.syncVersion.modify(v2);
  return sub_100179A78;
}

void (*InterestSyncStorage.syncVersion.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for SyncKeysRepository(0);
  a1[2] = v2;
  v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  v4 = SyncKeysRepository.interestSyncVersion.getter();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return sub_10036A9AC;
}

void sub_10036A9AC(uint64_t *a1, char a2)
{
  sub_100179E6C(a1, a2, (void (*)(uint64_t, uint64_t))&SyncKeysRepository.interestSyncVersion.setter);
}

void sub_10036A9B8()
{
  InterestSyncStorage.fetchAllInterests()();
}

void InterestSyncStorage.fetchAllInterests()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Updated;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  double v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int64_t v80;
  unint64_t v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  double v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  id v110;
  _QWORD *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  int64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125[16];
  uint64_t v126;
  id v127;
  __int128 v128;
  void *v129;
  _QWORD v130[4];
  _QWORD *v131;

  sub_10003F544(&qword_1005522F0);
  __chkstk_darwin();
  v116 = (char *)&v109 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v3 = (char *)&v109 - v2;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v123 = v4;
  v124 = v5;
  __chkstk_darwin();
  v115 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin();
  v117 = (char *)&v109 - v8;
  kMTInterestEntityName.getter(v7);
  v10 = v9;
  v11 = objc_allocWithZone((Class)NSFetchRequest);
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "initWithEntityName:", v12, swift_bridgeObjectRelease(v10).n128_f64[0]);

  v14 = objc_msgSend((id)objc_opt_self(NSPredicate), "truePredicate");
  objc_msgSend(v13, "setPredicate:", v14);

  v15 = sub_10003F544(&qword_1005547B0);
  v16 = swift_allocObject(v15, 160, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1003CB770;
  v17 = kInterestAdamID.getter();
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v18;
  v19 = kInterestInterestValue.getter();
  *(_QWORD *)(v16 + 88) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = v19;
  *(_QWORD *)(v16 + 72) = v20;
  Updated = kInterestLastUpdatedDate.getter(v19);
  *(_QWORD *)(v16 + 120) = &type metadata for String;
  *(_QWORD *)(v16 + 96) = Updated;
  *(_QWORD *)(v16 + 104) = v22;
  v23 = kInterestUnknownSyncProperties.getter();
  *(_QWORD *)(v16 + 152) = &type metadata for String;
  *(_QWORD *)(v16 + 128) = v23;
  *(_QWORD *)(v16 + 136) = v24;
  v118 = (char *)&type metadata for Any + 8;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v13, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v16).n128_f64[0]);

  objc_msgSend(v13, "setResultType:", 2);
  v126 = v0;
  v127 = v13;
  v110 = v13;
  v26 = sub_10003F544((uint64_t *)&unk_100554890);
  NSManagedObjectContext.performAndWait<A>(_:)(v130, sub_10036B6C4, v125, v26);
  v27 = v130[0];
  v28 = *(_QWORD *)(v130[0] + 16);
  if (!v28)
  {
    swift_bridgeObjectRelease(v130[0]);
    v63 = _swiftEmptyArrayStorage;
    v67 = _swiftEmptyArrayStorage[2];
    if (!v67)
      goto LABEL_72;
    goto LABEL_37;
  }
  v131 = _swiftEmptyArrayStorage;
  sub_10017B16C(0, v28, 0);
  v113 = sub_10003F544(&qword_100552958);
  v29 = 0;
  v109 = v27;
  v112 = (char *)(v27 + 32);
  v111 = (_QWORD *)v28;
LABEL_3:
  v30 = *(_QWORD *)&v112[8 * v29];
  v114 = v29 + 1;
  v31 = static _DictionaryStorage.copy(original:)(v30);
  v32 = (_QWORD *)v31;
  v33 = 1 << *(_BYTE *)(v30 + 32);
  v34 = *(_QWORD *)(v30 + 64);
  v119 = v30 + 64;
  if (v33 < 64)
    v35 = ~(-1 << v33);
  else
    v35 = -1;
  v36 = v35 & v34;
  v120 = (char *)((unint64_t)(v33 + 63) >> 6);
  v121 = v31 + 64;
  v122 = v30;
  swift_bridgeObjectRetain(v30);
  v37 = 0;
  v38 = v123;
  v39 = v118;
  if (v36)
  {
LABEL_7:
    v40 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    v41 = v40 | (v37 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v42 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v42 >= (uint64_t)v120)
      goto LABEL_30;
    v43 = *(_QWORD *)(v119 + 8 * v42);
    ++v37;
    if (!v43)
    {
      v37 = v42 + 1;
      if (v42 + 1 >= (uint64_t)v120)
        goto LABEL_30;
      v43 = *(_QWORD *)(v119 + 8 * v37);
      if (!v43)
      {
        v37 = v42 + 2;
        if (v42 + 2 >= (uint64_t)v120)
          goto LABEL_30;
        v43 = *(_QWORD *)(v119 + 8 * v37);
        if (!v43)
        {
          v44 = v42 + 3;
          if (v44 < (uint64_t)v120)
          {
            v43 = *(_QWORD *)(v119 + 8 * v44);
            if (v43)
            {
              v37 = v44;
              goto LABEL_21;
            }
            while (1)
            {
              v37 = v44 + 1;
              if (__OFADD__(v44, 1))
                break;
              if (v37 >= (uint64_t)v120)
                goto LABEL_30;
              v43 = *(_QWORD *)(v119 + 8 * v37);
              ++v44;
              if (v43)
                goto LABEL_21;
            }
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
            return;
          }
LABEL_30:
          swift_bridgeObjectRelease(v122);
          v63 = v131;
          if ((swift_isUniquelyReferenced_nonNull_native(v131) & 1) == 0)
          {
            sub_10017B16C(0, v63[2] + 1, 1);
            v63 = v131;
          }
          v64 = v111;
          v66 = v63[2];
          v65 = v63[3];
          if (v66 >= v65 >> 1)
          {
            sub_10017B16C(v65 > 1, v66 + 1, 1);
            v63 = v131;
          }
          v63[2] = v66 + 1;
          v63[v66 + 4] = v32;
          v29 = v114;
          if ((_QWORD *)v114 == v64)
          {
            swift_bridgeObjectRelease(v109);
            v67 = v63[2];
            if (!v67)
            {
LABEL_72:
              swift_bridgeObjectRelease(v63);
              v32 = _swiftEmptyArrayStorage;
              v100 = _swiftEmptyArrayStorage[2];
              if (v100)
                goto LABEL_76;
              goto LABEL_80;
            }
LABEL_37:
            v131 = _swiftEmptyArrayStorage;
            sub_10017B16C(0, v67, 0);
            v114 = sub_10003F544(&qword_100552958);
            v68 = 0;
            v111 = v63;
            v113 = (uint64_t)(v63 + 4);
            v120 = (char *)&type metadata for Any + 8;
            v112 = (char *)v67;
            while (2)
            {
              v69 = *(_QWORD *)(v113 + 8 * (_QWORD)v68);
              v117 = v68 + 1;
              v70 = static _DictionaryStorage.copy(original:)(v69);
              v71 = (_QWORD *)v70;
              v72 = 1 << *(_BYTE *)(v69 + 32);
              v73 = *(_QWORD *)(v69 + 64);
              v118 = (char *)(v69 + 64);
              if (v72 < 64)
                v74 = ~(-1 << v72);
              else
                v74 = -1;
              v75 = v74 & v73;
              v119 = (unint64_t)(v72 + 63) >> 6;
              v121 = v70 + 64;
              v122 = v69;
              swift_bridgeObjectRetain(v69);
              v76 = 0;
              v77 = (uint64_t)v116;
              if (v75)
              {
LABEL_42:
                v78 = __clz(__rbit64(v75));
                v75 &= v75 - 1;
                v79 = v78 | (v76 << 6);
                goto LABEL_57;
              }
LABEL_43:
              v80 = v76 + 1;
              if (__OFADD__(v76, 1))
                goto LABEL_83;
              if (v80 >= v119)
                goto LABEL_65;
              v81 = *(_QWORD *)&v118[8 * v80];
              ++v76;
              if (!v81)
              {
                v76 = v80 + 1;
                if (v80 + 1 >= v119)
                  goto LABEL_65;
                v81 = *(_QWORD *)&v118[8 * v76];
                if (!v81)
                {
                  v76 = v80 + 2;
                  if (v80 + 2 >= v119)
                    goto LABEL_65;
                  v81 = *(_QWORD *)&v118[8 * v76];
                  if (!v81)
                  {
                    v82 = v80 + 3;
                    if (v82 >= v119)
                    {
LABEL_65:
                      swift_bridgeObjectRelease(v122);
                      v32 = v131;
                      if ((swift_isUniquelyReferenced_nonNull_native(v131) & 1) == 0)
                      {
                        sub_10017B16C(0, v32[2] + 1, 1);
                        v32 = v131;
                      }
                      v99 = v32[2];
                      v98 = v32[3];
                      if (v99 >= v98 >> 1)
                      {
                        sub_10017B16C(v98 > 1, v99 + 1, 1);
                        v32 = v131;
                      }
                      v32[2] = v99 + 1;
                      v32[v99 + 4] = v71;
                      v68 = v117;
                      if (v117 != v112)
                        continue;
                      goto LABEL_75;
                    }
                    v81 = *(_QWORD *)&v118[8 * v82];
                    if (!v81)
                    {
                      while (1)
                      {
                        v76 = v82 + 1;
                        if (__OFADD__(v82, 1))
                          goto LABEL_85;
                        if (v76 >= v119)
                          goto LABEL_65;
                        v81 = *(_QWORD *)&v118[8 * v76];
                        ++v82;
                        if (v81)
                          goto LABEL_56;
                      }
                    }
                    v76 = v82;
                  }
                }
              }
              break;
            }
LABEL_56:
            v75 = (v81 - 1) & v81;
            v79 = __clz(__rbit64(v81)) + (v76 << 6);
LABEL_57:
            v83 = (uint64_t *)(*(_QWORD *)(v122 + 48) + 16 * v79);
            v84 = *v83;
            v85 = v83[1];
            sub_10003D344(*(_QWORD *)(v122 + 56) + 32 * v79, (uint64_t)v130);
            sub_10003D344((uint64_t)v130, (uint64_t)&v128);
            swift_bridgeObjectRetain(v85);
            v86 = v123;
            v87 = swift_dynamicCast(v77, &v128, v120, v123, 6);
            v88 = v124;
            v89 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56);
            if (v87)
            {
              v89(v77, 0, 1, v86);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v77, 1, v86) != 1)
              {
                v90 = v123;
                v91 = v124;
                v92 = v115;
                v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 32))(v115, v77, v123);
                v94 = Date.timeIntervalSinceReferenceDate.getter(v93);
                v77 = (uint64_t)v116;
                v129 = &type metadata for Double;
                *(double *)&v128 = v94;
                (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v90);
LABEL_62:
                sub_10003D380(v130);
                *(_QWORD *)(v121 + ((v79 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v79;
                v95 = (_QWORD *)(v71[6] + 16 * v79);
                *v95 = v84;
                v95[1] = v85;
                sub_10013B9CC(&v128, (_OWORD *)(v71[7] + 32 * v79));
                v96 = v71[2];
                v61 = __OFADD__(v96, 1);
                v97 = v96 + 1;
                if (v61)
                {
                  __break(1u);
                  goto LABEL_82;
                }
                v71[2] = v97;
                if (v75)
                  goto LABEL_42;
                goto LABEL_43;
              }
            }
            else
            {
              v89(v77, 1, 1, v86);
            }
            sub_1001780E4(v77);
            sub_10003D344((uint64_t)v130, (uint64_t)&v128);
            goto LABEL_62;
          }
          goto LABEL_3;
        }
      }
    }
LABEL_21:
    v36 = (v43 - 1) & v43;
    v41 = __clz(__rbit64(v43)) + (v37 << 6);
LABEL_22:
    v45 = (uint64_t *)(*(_QWORD *)(v122 + 48) + 16 * v41);
    v47 = *v45;
    v46 = v45[1];
    sub_10003D344(*(_QWORD *)(v122 + 56) + 32 * v41, (uint64_t)v130);
    sub_10003D344((uint64_t)v130, (uint64_t)&v128);
    swift_bridgeObjectRetain(v46);
    v48 = swift_dynamicCast(v3, &v128, v39, v38, 6);
    v49 = v3;
    v50 = v124;
    v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56);
    if (v48)
    {
      v51(v49, 0, 1, v38);
      v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48))(v49, 1, v38);
      v3 = v49;
      if (v52 != 1)
      {
        v53 = v124;
        v54 = v117;
        v55 = (*(uint64_t (**)(char *, char *, uint64_t))(v124 + 32))(v117, v49, v38);
        v56 = Date.timeIntervalSinceReferenceDate.getter(v55);
        v38 = v123;
        v129 = &type metadata for Double;
        *(double *)&v128 = v56;
        v57 = *(void (**)(char *, uint64_t))(v53 + 8);
        v3 = v49;
        v58 = v54;
        v39 = v118;
        v57(v58, v123);
        goto LABEL_27;
      }
    }
    else
    {
      v51(v49, 1, 1, v38);
      v3 = v49;
    }
    sub_1001780E4((uint64_t)v3);
    sub_10003D344((uint64_t)v130, (uint64_t)&v128);
LABEL_27:
    sub_10003D380(v130);
    *(_QWORD *)(v121 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v59 = (_QWORD *)(v32[6] + 16 * v41);
    *v59 = v47;
    v59[1] = v46;
    sub_10013B9CC(&v128, (_OWORD *)(v32[7] + 32 * v41));
    v60 = v32[2];
    v61 = __OFADD__(v60, 1);
    v62 = v60 + 1;
    if (v61)
      break;
    v32[2] = v62;
    if (v36)
      goto LABEL_7;
  }
  __break(1u);
LABEL_75:
  swift_bridgeObjectRelease(v111);
  v100 = v32[2];
  if (v100)
  {
LABEL_76:
    v130[0] = _swiftEmptyArrayStorage;
    sub_10017B16C(0, v100, 0);
    v101 = type metadata accessor for RemoteInterest(0);
    v102 = 0;
    v103 = v130[0];
    do
    {
      v104 = v32[v102 + 4];
      v105 = swift_bridgeObjectRetain(v104);
      v106 = Dictionary<>.flatteningUnknownSyncProperties<A>(for:)(v101, v104, v101, &protocol witness table for RemoteInterest, v105);
      swift_bridgeObjectRelease(v104);
      v130[0] = v103;
      v108 = *(_QWORD *)(v103 + 16);
      v107 = *(_QWORD *)(v103 + 24);
      if (v108 >= v107 >> 1)
      {
        sub_10017B16C(v107 > 1, v108 + 1, 1);
        v103 = v130[0];
      }
      ++v102;
      *(_QWORD *)(v103 + 16) = v108 + 1;
      *(_QWORD *)(v103 + 8 * v108 + 32) = v106;
    }
    while (v100 != v102);
  }
LABEL_80:
  swift_bridgeObjectRelease(v32);

}

uint64_t InterestSyncStorage.unsafeInterest(for:in:)(uint64_t a1)
{
  uint64_t v1;

  v1 = AdamID.init(rawValue:)(a1 & ~(a1 >> 63));
  return NSManagedObjectContext.unsafeInterest(forAdamID:)(v1);
}

void static InterestSyncStorage.resetInterestSync()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v0 = type metadata accessor for SyncKeysRepository(0);
  v1 = (void *)static SyncKeysRepository.shared.getter(v0);
  SyncKeysRepository.interestLastSyncTimestamp.setter(0, 1);

  v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  SyncKeysRepository.interestSyncVersion.setter(0, 0);

  v5 = (id)static SyncKeysRepository.shared.getter(v4);
  SyncKeysRepository.isInterestSyncDirty.setter(1);

}

void sub_10036B620(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = sub_100005EC8(0, (unint64_t *)&qword_100554EF0, NSDictionary_ptr);
  v5 = NSManagedObjectContext.fetch<A>(_:)(a1, v4);
  v6 = sub_10034F2EC(v5);
  swift_bridgeObjectRelease(v5);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
    v7 = v6;
  *a2 = v7;
}

void sub_10036B6C4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10036B620(*(_QWORD *)(v1 + 24), a1);
}

void sub_10036B6CC(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  char **v7;
  unint64_t v8;
  id v9;
  unint64_t v10;
  id v11;
  id v12;

  v4 = AdamID.init(rawValue:)(objc_msgSend(a1, "adamID"));
  v5 = NSManagedObjectContext.unsafeCategory(forAdamID:)(v4);
  if (v5)
  {
    v6 = (id)v5;
    v7 = &selRef_setCategory_;
LABEL_9:
    v12 = v6;
    objc_msgSend(a1, *v7);
    objc_msgSend(v12, "setInterest:", a1);

    return;
  }
  v8 = (unint64_t)objc_msgSend(a1, "adamID");
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  v9 = objc_msgSend(a2, "channelForStoreId:", v8);
  if (v9)
  {
    v6 = v9;
    v7 = &selRef_setChannel_;
    goto LABEL_9;
  }
  v10 = (unint64_t)objc_msgSend(a1, "adamID");
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_12;
  v11 = objc_msgSend(a2, "podcastForStoreId:", v10);
  if (v11)
  {
    v6 = v11;
    v7 = &selRef_setPodcast_;
    goto LABEL_9;
  }
}

void _s8Podcasts19InterestSyncStorageC017unsafeUpdateLocalB8IfNeeded3for06remoteB02iny0A10Foundation10MTInterestC_AH06RemoteB0VSo22NSManagedObjectContextCtF_0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  double v22;
  id v23;
  uint64_t v24;
  double v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  void *v28;
  double v29;
  id v30;
  double v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  double v42;
  char *v43;
  uint64_t v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  id v57;
  Class isa;
  void (*v59)(char *, uint64_t);
  int v60;
  os_log_t v61;
  id v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;

  v67 = a3;
  v5 = type metadata accessor for RemoteInterest(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v66 = (char *)&v59 - v9;
  __chkstk_darwin();
  v64 = (char *)&v59 - v10;
  v11 = type metadata accessor for Logger(0);
  v68 = *(_QWORD *)(v11 - 8);
  v69 = v11;
  __chkstk_darwin();
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v65 = (char *)&v59 - v14;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin();
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v20 = COERCE_DOUBLE(RemoteInterest.interestValueUpdatedDate.getter(v17));
  if ((v21 & 1) != 0)
  {
    static Logger.cloudSync.getter(v20);
    v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v51 = 134217984;
      *(double *)&v52 = COERCE_DOUBLE(RemoteInterest.adamID.getter(v51));
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v70 = *(double *)&v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v51 + 4, v51 + 12);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "[Interests] Remote interest doesn't have an interestValueUpdatedDate. We cannot determine which interestValue to use. Not syncing this interest: %lld", v51, 0xCu);
      swift_slowDealloc(v51, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    v54 = v68;
    v53 = v69;

    (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v53);
  }
  else
  {
    v22 = *(double *)&v20;
    v23 = objc_msgSend(a1, "lastUpdatedDate");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

    v25 = Date.timeIntervalSinceReferenceDate.getter(v24);
    v26 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
    v27 = v26(v19, v15);
    v28 = a1;
    if (v25 < v22)
    {
      v29 = RemoteInterest.interestValue.getter(v27);
      v30 = objc_msgSend(a1, "interestValue");
      if (v29 != v31)
      {
        v63 = v15;
        v32 = v65;
        static Logger.cloudSync.getter(v30);
        v33 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
        v34 = v64;
        v33(v64, a2, v5);
        v33(v66, a2, v5);
        v62 = v28;
        v35 = Logger.logObject.getter(v62);
        v36 = static os_log_type_t.default.getter();
        v37 = v36;
        v38 = os_log_type_enabled(v35, v36);
        v61 = v35;
        if (v38)
        {
          v39 = swift_slowAlloc(32, -1);
          *(_DWORD *)v39 = 134218496;
          v60 = v37;
          *(double *)&v40 = COERCE_DOUBLE(RemoteInterest.adamID.getter(v39));
          v59 = *(void (**)(char *, uint64_t))(v6 + 8);
          v59(v34, v5);
          v70 = *(double *)&v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v39 + 4, v39 + 12);
          *(_WORD *)(v39 + 12) = 2048;
          v41 = v62;
          objc_msgSend(v62, "interestValue");
          v70 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v39 + 14, v39 + 22);

          *(_WORD *)(v39 + 22) = 2048;
          v32 = v65;
          v43 = v66;
          v64 = (char *)(v39 + 24);
          v70 = RemoteInterest.interestValue.getter(v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v64, v39 + 32);
          v59(v43, v5);
          v45 = v61;
          _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v60, "[Interests] Remote interestValue is more recent than the local version, and the value is different. Updating the interestValue for %lld from %f to %f", (uint8_t *)v39, 0x20u);
          swift_slowDealloc(v39, -1, -1);
          v47 = v68;
          v46 = v69;
        }
        else
        {
          v55 = *(void (**)(char *, uint64_t))(v6 + 8);
          v55(v34, v5);
          v41 = v62;

          v55(v66, v5);
          v47 = v68;
          v46 = v69;
          v45 = v61;
        }

        v56 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v32, v46);
        v57 = objc_msgSend(v41, "setInterestValue:", RemoteInterest.interestValue.getter(v56));
        static Date.now.getter(v57);
        isa = Date._bridgeToObjectiveC()().super.isa;
        v26(v19, v63);
        objc_msgSend(v41, "setLastUpdatedDate:", isa);

      }
    }
    sub_10036B6CC(v28, v67);
  }
}

uint64_t _s8Podcasts19InterestSyncStorageC015unsafeInsertNewB03for2in0A10Foundation10MTInterestCSgAG06RemoteB0V_So22NSManagedObjectContextCtF_0(uint64_t a1, void (**a2)(char *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (**v6)(char *, _QWORD);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  double v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (**v41)(char *, _QWORD);
  uint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  void (**v46)(char *, _QWORD);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a1;
  v3 = type metadata accessor for RemoteInterest(0);
  v48 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v47 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(void (***)(char *, _QWORD))(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin();
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)objc_opt_self(NSEntityDescription);
  kMTInterestEntityName.getter(v12);
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  *(_QWORD *)&v16 = swift_bridgeObjectRelease(v14).n128_u64[0];
  v46 = a2;
  v17 = objc_msgSend(v12, "insertNewObjectForEntityForName:inManagedObjectContext:", v15, a2, v16);

  v18 = type metadata accessor for MTInterest(0);
  v19 = swift_dynamicCastClass(v17, v18);
  if (!v19)
  {
    v46 = v6;
    v32 = v5;

    static Logger.cloudSync.getter(v33);
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v49, v3);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v37 = 134217984;
      v38 = v47;
      v39 = RemoteInterest.adamID.getter(v37);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v3);
      v50 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v37 + 4, v37 + 12);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Cannot create MTInterest for adamID: %lld. Unable to favorite interest.", v37, 0xCu);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v3);
    }
    v40 = v32;
    v41 = v46;

    v41[1](v8, v40);
    return 0;
  }
  v20 = (void *)v19;
  v21 = RemoteInterest.adamID.getter(v19);
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = objc_msgSend(v20, "setInterestValue:", RemoteInterest.interestValue.getter(objc_msgSend(v20, "setAdamID:", v21)));
    static Date.now.getter(v22);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v45);
    objc_msgSend(v20, "setLastUpdatedDate:", isa);

    v24 = RemoteInterest.unknownSyncProperties.getter();
    v50 = v24;
    v25 = sub_10003F544(&qword_1005604E8);
    v26 = sub_10036C51C();
    LOBYTE(isa) = Collection.isNotEmpty.getter(v25, v26, v27);
    v28 = swift_bridgeObjectRelease(v24);
    if ((isa & 1) != 0)
    {
      v29 = RemoteSyncTypeWithUnknownSyncProperties.encodeUnknownSyncProperties()(v3, &protocol witness table for RemoteInterest, v28);
      if (v30 >> 60 == 15)
      {
        v31 = 0;
      }
      else
      {
        v42 = v29;
        v43 = v30;
        v31 = Data._bridgeToObjectiveC()().super.isa;
        sub_1001C0F60(v42, v43);
      }
      objc_msgSend(v20, "setUnknownSyncProperties:", v31);

    }
    else
    {
      objc_msgSend(v20, "setUnknownSyncProperties:", 0, v28.n128_f64[0]);
    }
    sub_10036B6CC(v20, v46);
    return (uint64_t)v20;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

id sub_10036C114(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  double v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  Class isa;
  id v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SyncKeysRepository(0);
  v11 = (void *)static SyncKeysRepository.shared.getter(v10);
  v12 = COERCE_DOUBLE(SyncKeysRepository.interestLastSyncTimestamp.getter());
  v14 = v13;

  if ((v14 & 1) != 0)
  {
    v24 = static Logger.cloudSync.getter();
    v25 = static os_log_type_t.default.getter(v24);
    v26 = v25;
    v27 = Logger.logObject.getter(v25);
    v28 = v26;
    if (os_log_type_enabled(v27, v26))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[NonFollowedShows] We never synced before, so there are no old Implicit Follows to clean up.", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return objc_msgSend((id)objc_opt_self(NSPredicate), "falsePredicate");
  }
  else
  {
    v15 = Date.init(timeIntervalSinceReferenceDate:)(v12);
    kInterestLastUpdatedDate.getter(v15);
    v17 = v16;
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v20 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateForDateKey:isLessThanDate:", v18, isa);

    type metadata accessor for MTInterest(0);
    v21 = (void *)static MTInterest.predicateForInterests(excludingAdamIDs:)(a1);
    v22 = objc_msgSend(v21, "AND:", v20);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return v22;
  }
}

_QWORD *_s8Podcasts19InterestSyncStorageC039unsafeInterestsOnlyInLocalAndBeforeLastC016excludingAdamIDs2inSay0A10Foundation10MTInterestCGSgSays5Int64VG_So22NSManagedObjectContextCtF_0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  Class isa;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;

  v3 = sub_10036C114(a1);
  kMTInterestEntityName.getter(v3);
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = v3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(a2, "objectsInEntity:predicate:sortDescriptors:", v6, v7, isa);

  if (v9)
  {
    v10 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

    v9 = sub_10034F110(v11);
    swift_bridgeObjectRelease(v11);
  }

  return v9;
}

uint64_t _s8Podcasts19InterestSyncStorageC29unsafeRemoveInterestsIfNeeded3forySay0A10Foundation10MTInterestCG_tF_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  id v5;
  void *v6;
  uint64_t v7;

  if (!((unint64_t)a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
    return swift_bridgeObjectRelease(a1);
  }
  if (a1 < 0)
    v7 = a1;
  else
    v7 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  result = _CocoaArrayWrapper.endIndex.getter(v7);
  v2 = result;
  if (!result)
    return swift_bridgeObjectRelease(a1);
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v5 = *(id *)(a1 + 8 * i + 32);
      v6 = v5;
      objc_msgSend(v5, "setInterestValue:", 0.0);

    }
    return swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

unint64_t sub_10036C51C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005604F0;
  if (!qword_1005604F0)
  {
    v1 = sub_10003CA40(&qword_1005604E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1005604F0);
  }
  return result;
}

uint64_t sub_10036C568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[3];
  _OWORD v24[4];
  char v25;

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_100566580);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ShowLockupStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + 80);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 72), v11);
  memset(v24, 0, sizeof(v24));
  v25 = -1;
  ShowLockupStyle.init(includesOfferButton:defaultSubtitle:unfollowedSubtitle:groupedEpisodesListType:)(0, 15, 16, v24);
  v13 = dispatch thunk of LibraryDataProviderProtocol.showsPaginatedPublisher(listType:sortBy:lockupStyle:pageSize:)(0, 1, 2, v9, 12, ObjectType, v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v23[0] = v13;
  v14 = sub_10003F544(&qword_100553E98);
  v15 = sub_10002F9C8(&qword_100566590, &qword_100553E98, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  Publisher.removeDuplicates(by:)(sub_10036C7C8, 0, v14, v15);
  v16 = swift_allocObject(&unk_1004C6328, 24, 7);
  swift_weakInit(v16 + 16, v0);
  v17 = sub_10002F9C8(&qword_100566598, (uint64_t *)&unk_100566580, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v18 = Publisher<>.sink(receiveValue:)(sub_10036E8B4, v16, v2, v17);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v1 += 152;
  swift_beginAccess(v1, v23, 33, 0);
  v19 = sub_10003F544((uint64_t *)&unk_100556450);
  v20 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v1, v19, v20);
  swift_endAccess(v23);
  swift_release(v13);
  return swift_release(v18);
}

uint64_t sub_10036C7C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v0 = sub_10003F544((uint64_t *)&unk_1005665A0);
  FRPOutput.content.getter(&v21, v0);
  v1 = v21;
  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0)
      v18 = v21;
    else
      v18 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v21);
    v2 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v2 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    result = sub_10017B0DC(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_33;
    }
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
      }
      else
      {
        v5 = *(_QWORD *)(v1 + 8 * i + 32);
        v6 = swift_retain();
      }
      v7 = LegacyLockup.adamId.getter(v6);
      swift_release(v5);
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
        sub_10017B0DC(v8 > 1, v9 + 1, 1);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v7;
    }
  }
  swift_bridgeObjectRelease(v1);
  FRPOutput.content.getter(&v21, v0);
  v10 = v21;
  if (!((unint64_t)v21 >> 62))
  {
    v11 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
      goto LABEL_14;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    v20 = sub_100163488(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    return v20;
  }
  if (v21 < 0)
    v19 = v21;
  else
    v19 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v21);
  v11 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v10);
  if (!v11)
    goto LABEL_31;
LABEL_14:
  result = sub_10017B0DC(0, v11 & ~(v11 >> 63), 0);
  if ((v11 & 0x8000000000000000) == 0)
  {
    for (j = 0; j != v11; ++j)
    {
      if ((v10 & 0xC000000000000001) != 0)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, v10);
      }
      else
      {
        v13 = *(_QWORD *)(v10 + 8 * j + 32);
        v14 = swift_retain();
      }
      v15 = LegacyLockup.adamId.getter(v14);
      swift_release(v13);
      v17 = _swiftEmptyArrayStorage[2];
      v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1)
        sub_10017B0DC(v16 > 1, v17 + 1, 1);
      _swiftEmptyArrayStorage[2] = v17 + 1;
      _swiftEmptyArrayStorage[v17 + 4] = v15;
    }
    goto LABEL_31;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10036CA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  char v10;
  void *v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _BYTE v23[24];
  _OWORD v24[3];
  Swift::String v25;

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v23, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = sub_10003F544((uint64_t *)&unk_1005665A0);
    FRPOutput.content.getter(v24, v5);
    v6 = *(_QWORD *)&v24[0];
    v22[0] = *(_QWORD *)&v24[0];
    v7 = sub_10003F544((uint64_t *)&unk_100559EC0);
    v8 = sub_10002F9C8((unint64_t *)&unk_1005665B0, (uint64_t *)&unk_100559EC0, (uint64_t)&protocol conformance descriptor for [A]);
    v10 = Collection.isNotEmpty.getter(v7, v8, v9);
    swift_bridgeObjectRelease(v6);
    if ((v10 & 1) != 0)
    {
      v11 = (void *)objc_opt_self(NSBundle);
      swift_retain_n(v4, 2);
      v12 = objc_msgSend(v11, "mainBundle");
      v25._object = (void *)0x800000010043FB30;
      v13._object = (void *)0x800000010043FB10;
      v13._countAndFlagsBits = 0xD000000000000010;
      v14._countAndFlagsBits = 0;
      v14._object = (void *)0xE000000000000000;
      v25._countAndFlagsBits = 0xD000000000000010;
      v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v25);

      FRPOutput.content.getter(v22, v5);
      v16 = v22[0];
      v17 = *(_OWORD *)(v4 + 40);
      v24[0] = *(_OWORD *)(v4 + 24);
      v24[1] = v17;
      v24[2] = *(_OWORD *)(v4 + 56);
      swift_retain();
      v18 = sub_1002FBA50(v15._countAndFlagsBits, (uint64_t)v15._object, 2, v24, v4 + 88, (uint64_t)sub_10036E8BC, v4, (uint64_t)sub_10036E8EC, v4, (uint64_t)sub_10036E8F4, v4, v16);
      swift_bridgeObjectRelease(v16);
      swift_release(v4);
      swift_bridgeObjectRelease(v15._object);
      swift_beginAccess(v4 + 152, v22, 33, 0);
      v19 = sub_10003F544((uint64_t *)&unk_100556450);
      v20 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
      AnyCancellable.store<A>(in:)(v4 + 152, v19, v20);
      swift_endAccess(v22);
      swift_release_n(v4, 3);
      v21 = v18;
    }
    else
    {
      *(_QWORD *)&v24[0] = 0;
      PassthroughSubject.send(_:)(v24);
      v21 = v4;
    }
    return swift_release(v21);
  }
  return result;
}

void sub_10036CD10(void *a1)
{
  id v1;
  void *v2;

  v2 = a1;
  v1 = a1;
  PassthroughSubject.send(_:)(&v2);

}

void sub_10036CD4C(void *a1)
{
  id v1;
  void *v2;

  v2 = a1;
  v1 = a1;
  PassthroughSubject.send(_:)(&v2);

}

uint64_t sub_10036CD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  void (*v29)(char *, uint64_t, __n128);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD, uint64_t);
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  char *v45;
  __n128 v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t, __n128);
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  void (*v75)(char *, uint64_t);
  void (*v77)(char *, uint64_t, __n128);
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, _QWORD, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _OWORD v105[4];
  char v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  char v112;

  v1 = v0;
  v95 = sub_10003F544(&qword_100566518);
  v96 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin();
  v92 = (char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_10003F544(&qword_100566520);
  v99 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin();
  v93 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_10003F544(&qword_100566528);
  v100 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin();
  v94 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ObserverQueue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = v5;
  __chkstk_darwin();
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_10003F544(&qword_100566530);
  v102 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin();
  v91 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v89 = (char *)&v77 - v11;
  __chkstk_darwin();
  v88 = (char *)&v77 - v12;
  __chkstk_darwin();
  v86 = (char *)&v77 - v13;
  __chkstk_darwin();
  v101 = (char *)&v77 - v14;
  __chkstk_darwin();
  v103 = (char *)&v77 - v15;
  type metadata accessor for TabMenuProvider(0);
  v16 = *(_QWORD *)(v0 + 16);
  v17 = (void *)objc_opt_self(NSUserDefaults);
  v18 = objc_msgSend(v17, "standardUserDefaults", swift_retain().n128_f64[0]);
  v19 = TabMenuProvider.__allocating_init(asPartOf:userDefaults:interfaceMode:)(v16, v18, 0);
  v85 = dispatch thunk of TabMenuProvider.libraryPublisher.getter();
  swift_release(v19);
  v87 = v1;
  v20 = *(_QWORD *)(v1 + 72);
  v84 = *(_QWORD *)(v1 + 80);
  v21 = v84;
  ObjectType = swift_getObjectType(v20, v22);
  v80 = ObjectType;
  v24 = dispatch thunk of LibraryDataProviderProtocol.fetchShowCountObserver(listType:)(0, 1, ObjectType, v21);
  v25 = enum case for ObserverQueue.main(_:);
  v83 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
  v78 = enum case for ObserverQueue.main(_:);
  v26 = v7;
  v83(v9, enum case for ObserverQueue.main(_:), v7);
  v82 = sub_10002F9C8(&qword_1005664A8, &qword_1005664B0, (uint64_t)&protocol conformance descriptor for AnyObserver<A>);
  v27 = Promise<A>.observerPublisher(receiveOn:)(v9, v82);
  v28 = swift_release(v24);
  v29 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
  v29(v9, v26, v28);
  v77 = v29;
  v107 = v27;
  v30 = sub_10003F544(&qword_1005664B8);
  v81 = sub_10002F9C8(&qword_1005664C0, &qword_1005664B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v79 = v30;
  Publisher<>.removeDuplicates()(v30, v81, &protocol witness table for UInt);
  swift_release(v27);
  v107 = 4;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0;
  v112 = 9;
  v31 = ObjectType;
  v32 = v84;
  v33 = dispatch thunk of LibraryDataProviderProtocol.fetchEpisodeCountObserver(for:)(&v107, v31, v84);
  v34 = v25;
  v35 = v83;
  v83(v9, v34, v26);
  v36 = v82;
  v37 = Promise<A>.observerPublisher(receiveOn:)(v9, v82);
  v38 = swift_release(v33);
  v29(v9, v26, v38);
  *(_QWORD *)&v105[0] = v37;
  v39 = v101;
  v40 = v30;
  v41 = v81;
  Publisher<>.removeDuplicates()(v40, v81, &protocol witness table for UInt);
  swift_release(v37);
  memset(v105, 0, sizeof(v105));
  v106 = 9;
  v42 = dispatch thunk of LibraryDataProviderProtocol.fetchEpisodeCountObserver(for:)(v105, v80, v32);
  v35(v9, v78, v26);
  v43 = Promise<A>.observerPublisher(receiveOn:)(v9, v36);
  v44 = swift_release(v42);
  v77(v9, v26, v44);
  v104 = v43;
  v45 = v86;
  Publisher<>.removeDuplicates()(v79, v41, &protocol witness table for UInt);
  v46 = swift_release(v43);
  v47 = v85;
  v104 = v85;
  v48 = *(void (**)(char *, char *, uint64_t, __n128))(v102 + 16);
  v49 = v88;
  v50 = v90;
  v48(v88, v103, v90, v46);
  v51 = v89;
  ((void (*)(char *, char *, uint64_t))v48)(v89, v39, v50);
  v52 = v91;
  v53 = v50;
  ((void (*)(char *, char *, uint64_t))v48)(v91, v45, v50);
  v54 = v47;
  swift_retain();
  v55 = sub_10003F544(&qword_100566538);
  v56 = sub_10002F9C8(&qword_100566540, &qword_100566538, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v57 = sub_10002F9C8((unint64_t *)&unk_100566548, &qword_100566530, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v58 = v92;
  v59 = v52;
  v60 = v53;
  Publishers.CombineLatest4.init(_:_:_:_:)(&v104, v49, v51, v59, v55, v53, v53, v53, v56, v57, v57, v57);
  v61 = *(_QWORD *)(v87 + 144);
  v62 = swift_allocObject(&unk_1004C6300, 32, 7);
  *(_QWORD *)(v62 + 16) = sub_10036E700;
  *(_QWORD *)(v62 + 24) = v61;
  swift_retain();
  v63 = sub_10003F544((uint64_t *)&unk_1005544E0);
  v64 = sub_10002F9C8(&qword_100566558, &qword_100566518, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest4<A, B, C, D>);
  v65 = v93;
  v66 = v95;
  Publisher.map<A>(_:)(sub_10036E72C, v62, v95, v63, v64);
  v67 = swift_release(v62);
  (*(void (**)(char *, uint64_t, __n128))(v96 + 8))(v58, v66, v67);
  v68 = sub_10002F9C8(&qword_100566560, &qword_100566520, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v69 = v94;
  v70 = v97;
  Publisher.removeDuplicates(by:)(sub_10036D990, 0, v97, v68);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v65, v70);
  v71 = sub_10002F9C8(&qword_100566568, &qword_100566528, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v72 = v98;
  v73 = Publisher.eraseToAnyPublisher()(v98, v71);
  v74 = swift_release(v54);
  (*(void (**)(char *, uint64_t, __n128))(v100 + 8))(v69, v72, v74);
  v75 = *(void (**)(char *, uint64_t))(v102 + 8);
  v75(v45, v60);
  v75(v101, v60);
  v75(v103, v60);
  return v73;
}

_QWORD *sub_10036D5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, unint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  _BYTE v59[24];
  uint64_t v60;
  unint64_t v61;

  v54 = a4;
  v55 = a3;
  v56 = a2;
  sub_10003F544(&qword_100566578);
  __chkstk_darwin();
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TabMenu.Item(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin();
  v14 = (char *)&v49 - v13;
  v15 = TabMenu.Section.items.getter(v12);
  v16 = _swiftEmptyArrayStorage;
  v61 = (unint64_t)_swiftEmptyArrayStorage;
  v17 = *(_QWORD *)(v15 + 16);
  if (v17)
  {
    v52 = a5;
    v53 = v7;
    v18 = v15 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v19 = *(_QWORD *)(v9 + 72);
    v20 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16);
    v51 = v15;
    v21 = swift_bridgeObjectRetain(v15);
    v57 = v9;
    while (1)
    {
      v22 = v20(v14, v18, v8, v21);
      if ((TabMenu.Item.enabled.getter(v22) & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
LABEL_4:
      v18 += v19;
      if (!--v17)
      {
        v47 = v51;
        swift_bridgeObjectRelease(v51);
        v15 = v47;
        v16 = (_QWORD *)v61;
        goto LABEL_27;
      }
    }
    v23 = ((uint64_t (*)(void))TabMenu.Item.navigationTab.getter)();
    v24 = static NavigationTab.== infix(_:_:)(v23, 1);
    sub_100175988(v23);
    v25 = ((uint64_t (*)(char *, char *, uint64_t))v20)(v11, v14, v8);
    if ((v24 & 1) != 0)
    {
      v26 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
      v27 = v26(v11, v8);
    }
    else
    {
      v28 = TabMenu.Item.navigationTab.getter(v25);
      v29 = static NavigationTab.== infix(_:_:)(v28, 16);
      sub_100175988(v28);
      v26 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
      v27 = v26(v11, v8);
      if ((v29 & 1) == 0)
        goto LABEL_10;
    }
    if (!v56)
    {
LABEL_25:
      v26(v14, v8);
      v9 = v57;
      goto LABEL_4;
    }
LABEL_10:
    v30 = TabMenu.Item.navigationTab.getter(v27);
    v31 = static NavigationTab.== infix(_:_:)(v30, 15);
    v32 = sub_100175988(v30);
    if ((v31 & 1) == 0 || v55)
    {
      v33 = TabMenu.Item.navigationTab.getter(v32);
      v34 = static NavigationTab.== infix(_:_:)(v33, 4);
      sub_100175988(v33);
      if ((v34 & 1) == 0 || v54)
      {
        v35 = (uint64_t)v53;
        static Link.libraryLink(from:)(v14);
        v36 = type metadata accessor for Link(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36) == 1)
        {
          sub_100007A28(v35, &qword_100566578);
        }
        else
        {
          sub_100181098(v35 + *(int *)(v36 + 36), (uint64_t)v59);
          if (v60)
          {
            v37 = v52;
            swift_retain();
            v38 = sub_10003F544(&qword_100554920);
            v39 = type metadata accessor for FlowAction(0);
            if ((swift_dynamicCast(&v58, v59, v38, v39, 6) & 1) != 0)
            {
              v50 = v58;
              v40 = sub_10017F460(*((_QWORD *)v53 + 2), *((_QWORD *)v53 + 3), 0, 0, 0, (uint64_t)sub_100181074, v37);
              swift_release(v37);
              swift_release(v50);
              sub_100181120((uint64_t)v53);
              v41 = v26(v14, v8);
              v9 = v57;
              v50 = v40;
              if (v40)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
                v43 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v42 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v43 >= v42 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
                v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v50);
                specialized Array._endMutation()(v44);
              }
              goto LABEL_4;
            }
            v46 = v37;
          }
          else
          {
            v45 = v52;
            swift_retain();
            sub_100007A28((uint64_t)v59, (uint64_t *)&unk_100554FF0);
            v46 = v45;
          }
          swift_release(v46);
          sub_100181120((uint64_t)v53);
        }
      }
    }
    goto LABEL_25;
  }
LABEL_27:
  swift_bridgeObjectRelease(v15);
  return v16;
}

uint64_t sub_10036D990(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v2 = *a1;
  v3 = *a2;
  if ((unint64_t)*a1 >> 62)
  {
    if (v2 < 0)
      v31 = *a1;
    else
      v31 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4)
  {
    result = sub_10017B260(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
    {
      __break(1u);
      goto LABEL_40;
    }
    v33 = v3;
    v6 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v2);
      else
        v7 = *(id *)(v2 + 8 * v6 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, "text", v33);
      if (v9)
      {
        v10 = v9;
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v13 = v12;

      }
      else
      {

        v11 = 0;
        v13 = 0;
      }
      v15 = _swiftEmptyArrayStorage[2];
      v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1)
        sub_10017B260(v14 > 1, v15 + 1, 1);
      ++v6;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      v16 = &_swiftEmptyArrayStorage[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
    }
    while (v4 != v6);
    v3 = v33;
  }
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v32 = v3;
    else
      v32 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v17 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v17 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v17)
    goto LABEL_30;
  result = sub_10017B260(0, v17 & ~(v17 >> 63), 0);
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = 0;
    v34 = v3 & 0xC000000000000001;
    do
    {
      if (v34)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v3);
      else
        v19 = *(id *)(v3 + 8 * v18 + 32);
      v20 = v19;
      v21 = v3;
      v22 = objc_msgSend(v19, "text", v34);
      if (v22)
      {
        v23 = v22;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v26 = v25;

      }
      else
      {

        v24 = 0;
        v26 = 0;
      }
      v28 = _swiftEmptyArrayStorage[2];
      v27 = _swiftEmptyArrayStorage[3];
      if (v28 >= v27 >> 1)
        sub_10017B260(v27 > 1, v28 + 1, 1);
      ++v18;
      _swiftEmptyArrayStorage[2] = v28 + 1;
      v29 = &_swiftEmptyArrayStorage[2 * v28];
      v29[4] = v24;
      v29[5] = v26;
      v3 = v21;
    }
    while (v17 != v18);
LABEL_30:
    v30 = sub_1001634FC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    return v30 & 1;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10036DC64()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[9]);
  sub_10003D380(v0 + 11);
  swift_release(v0[17]);
  swift_release(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  return swift_deallocClassInstance(v0, 160, 7);
}

uint64_t type metadata accessor for CarPlayLibraryProvider()
{
  return objc_opt_self(_TtC8Podcasts22CarPlayLibraryProvider);
}

uint64_t sub_10036DCD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  v1 = v0;
  v52 = sub_10003F544(&qword_100566488);
  v54 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin();
  v50 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_10003F544(&qword_100566490);
  v55 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin();
  v51 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ObserverQueue(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_100566498);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_1005664A0);
  v48 = *(_QWORD *)(v12 - 8);
  v49 = v12;
  __chkstk_darwin();
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v56 = (char *)&v47 - v15;
  v16 = *(_QWORD *)(v0 + 80);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 72), v17);
  v19 = LibraryDataProviderProtocol.fetchShowCountObserver()(ObjectType, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ObserverQueue.main(_:), v4);
  v20 = sub_10002F9C8(&qword_1005664A8, &qword_1005664B0, (uint64_t)&protocol conformance descriptor for AnyObserver<A>);
  v21 = Promise<A>.observerPublisher(receiveOn:)(v7, v20);
  v22 = swift_release(v19);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v22);
  v58 = v21;
  v23 = sub_10003F544(&qword_1005664B8);
  v24 = sub_10002F9C8(&qword_1005664C0, &qword_1005664B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_10036E184, 0, v23, &type metadata for Bool, v24);
  swift_release(v21);
  v25 = sub_10002F9C8(&qword_1005664C8, &qword_100566498, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v26 = v56;
  Publisher<>.removeDuplicates()(v8, v25, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v58 = *(_QWORD *)(v1 + 136);
  v27 = sub_10003F544(&qword_1005664D0);
  v28 = sub_10002F9C8(&qword_1005664D8, &qword_1005664D0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v29 = Publisher.eraseToAnyPublisher()(v27, v28);
  v31 = v48;
  v30 = v49;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v14, v26, v49);
  v58 = v29;
  swift_retain();
  v57 = sub_10036CD88();
  v32 = sub_10003F544((uint64_t *)&unk_1005664E0);
  v33 = sub_10003F544(&qword_100559ED0);
  v34 = sub_10002F9C8(&qword_1005664F0, &qword_1005664A0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v35 = sub_10002F9C8(&qword_1005664F8, (uint64_t *)&unk_1005664E0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v36 = sub_10002F9C8((unint64_t *)&unk_100559EE0, &qword_100559ED0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v37 = v50;
  Publishers.CombineLatest3.init(_:_:_:)(v14, &v58, &v57, v30, v32, v33, v34, v35, v36);
  v38 = sub_10003F544(&qword_1005545E0);
  v39 = sub_10002F9C8(&qword_100566500, &qword_100566488, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  v41 = v51;
  v40 = v52;
  Publisher.map<A>(_:)(sub_10036E640, 0, v52, v38, v39);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v40);
  v42 = sub_10002F9C8((unint64_t *)&unk_100566508, &qword_100566490, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v43 = v53;
  v44 = Publisher.eraseToAnyPublisher()(v53, v42);
  v45 = swift_release(v29);
  (*(void (**)(char *, uint64_t, __n128))(v55 + 8))(v41, v43, v45);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v56, v30);
  return v44;
}

_QWORD *sub_10036E184@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 0;
  return result;
}

_QWORD *sub_10036E198(char a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char *v38;
  Class isa;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __objc2_prot *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v11 = (char *)&v52 - v10;
  if ((a1 & 1) != 0)
  {
    v12 = sub_100181038();
    v13 = static OS_os_log.carPlay.getter(v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "CarPlayLibraryProvider: No shows. Returning empty sections.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    v56 = (uint64_t)_swiftEmptyArrayStorage;
    if (a2)
    {
      v18 = a2;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
      v20 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v19 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v20 >= v19 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
      specialized Array._endMutation()(v21);
    }
    if ((unint64_t)a3 >> 62)
    {
      if (a3 < 0)
        v45 = a3;
      else
        v45 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v46 = sub_10003F544(&qword_100556510);
      v47 = _bridgeCocoaArray<A>(_:)(v45, v46);
      swift_bridgeObjectRelease(a3);
      a3 = v47;
    }
    else
    {
      swift_bridgeObjectRetain(a3);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v22);
    }
    sub_100173F70(a3);
    v23 = sub_100181038();
    static OS_os_log.carPlay.getter(v23);
    v24 = v56;
    v25 = swift_bridgeObjectRetain_n(v56, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v28 = 134217984;
      if ((unint64_t)v24 >> 62)
      {
        if (v24 < 0)
          v51 = v24;
        else
          v51 = v24 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v24);
        v29 = _CocoaArrayWrapper.endIndex.getter(v51);
        swift_bridgeObjectRelease(v24);
      }
      else
      {
        v29 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v24);
      v54 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "CarPlayLibraryProvider: section total items count is %ld.", v28, 0xCu);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v24, 2);
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    v30 = sub_10003F544((uint64_t *)&unk_100553780);
    v31 = swift_allocObject(v30, 40, 7);
    *(_OWORD *)(v31 + 16) = xmmword_1003CA250;
    swift_beginAccess(&v56, &v54, 0, 0);
    v32 = v56;
    if ((unint64_t)v56 >> 62)
    {
      if (v56 < 0)
        v48 = v56;
      else
        v48 = v56 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v56);
      v49 = sub_10003F544(&qword_1005544F0);
      v50 = _bridgeCocoaArray<A>(_:)(v48, v49);
      swift_bridgeObjectRelease_n(v32, 2);
      v32 = v50;
    }
    else
    {
      v33 = v56 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v56);
      v35 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v34);
      v36 = sub_10003F544(&qword_1005544F0);
      if (swift_dynamicCastMetatype(v35, v36) || (v42 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
      {
LABEL_18:
        swift_bridgeObjectRelease(v32);
      }
      else
      {
        v43 = (uint64_t *)(v33 + 32);
        while (1)
        {
          v44 = *v43;
          v53 = &OBJC_PROTOCOL___CPListTemplateItem;
          if (!swift_dynamicCastObjCProtocolConditional(v44, 1, &v53))
            break;
          ++v43;
          if (!--v42)
            goto LABEL_18;
        }
        swift_bridgeObjectRelease(v32);
        v32 = v33 | 1;
      }
    }
    v37 = objc_allocWithZone((Class)CPListSection);
    v38 = sub_100180784(v32);
    swift_bridgeObjectRelease(v32);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v40 = objc_msgSend(v37, "initWithItems:", isa, swift_bridgeObjectRelease(v38).n128_f64[0]);

    *(_QWORD *)(v31 + 32) = v40;
    v52 = v31;
    specialized Array._endMutation()(v41);
    return (_QWORD *)v52;
  }
}

_QWORD *sub_10036E640@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = sub_10036E198(*(_BYTE *)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_10036E670()
{
  return sub_10036DCD0();
}

uint64_t sub_10036E690()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10003F544((uint64_t *)&unk_1005550F0);
  v1 = sub_10002F9C8(&qword_100554FB0, (uint64_t *)&unk_1005550F0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

_QWORD *sub_10036E700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10036D5A8(a1, a2, a3, a4, v4);
}

uint64_t sub_10036E708()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10036E72C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, _QWORD);
  int *v6;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v2 + 16);
  v6 = (int *)sub_10003F544(&qword_100566570);
  result = v5(a1, *(_QWORD *)(a1 + v6[12]), *(_QWORD *)(a1 + v6[16]), *(_QWORD *)(a1 + v6[20]));
  *a2 = result;
  return result;
}

uint64_t sub_10036E788(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14[3];

  v3 = v2;
  *(_QWORD *)(v2 + 128) = 12;
  v6 = sub_10003F544(&qword_1005664D0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)(v2 + 136) = PassthroughSubject.init()(v7);
  v8 = sub_10003F544((uint64_t *)&unk_1005550F0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v2 + 144) = PassthroughSubject.init()(v9);
  *(_QWORD *)(v2 + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v2 + 16) = a1;
  v10 = a2[1];
  *(_OWORD *)(v2 + 24) = *a2;
  *(_OWORD *)(v2 + 40) = v10;
  *(_OWORD *)(v2 + 56) = a2[2];
  v11 = sub_10003F544(&qword_1005609B0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v14, v11, v11);
  *(_OWORD *)(v3 + 72) = v14[0];
  v12 = sub_10003F544((uint64_t *)&unk_1005588D0);
  BaseObjectGraph.inject<A>(_:)(v14, v12, v12);
  sub_10002099C(v14, v3 + 88);
  sub_10036C568();
  return v3;
}

uint64_t sub_10036E890()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10036E8B4(uint64_t a1)
{
  uint64_t v1;

  return sub_10036CA9C(a1, v1);
}

uint64_t sub_10036E8BC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return PassthroughSubject.send(_:)(&v2);
}

void sub_10036E8EC(void *a1)
{
  sub_10036CD10(a1);
}

void sub_10036E8F4(void *a1)
{
  sub_10036CD4C(a1);
}

uint64_t *sub_10036E8FC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for OpenTranscriptIntent(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)v4 + v8) = v10;
    v11 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)v4 + v9) = v11;
    v12 = a3[7];
    v13 = (char *)v4 + v12;
    v14 = (char *)a2 + v12;
    v15 = *(_OWORD *)((char *)a2 + v12 + 24);
    *(_OWORD *)((char *)v4 + v12 + 24) = v15;
    v16 = v15;
    v17 = **(void (***)(char *, char *, uint64_t, __n128))(v15 - 8);
    swift_retain(v10);
    v18 = swift_retain(v11);
    v17(v13, v14, v16, v18);
    v19 = a3[8];
    v20 = a3[9];
    v21 = *(_OWORD *)((char *)a2 + v19);
    *(_OWORD *)((char *)v4 + v19) = v21;
    v22 = *(uint64_t *)((char *)a2 + v20);
    *(uint64_t *)((char *)v4 + v20) = v22;
    swift_unknownObjectRetain(v21);
  }
  swift_retain(v22);
  return v4;
}

double sub_10036E9F8(uint64_t a1, int *a2)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for OpenTranscriptIntent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release(*(_QWORD *)(a1 + a2[5]));
  swift_release(*(_QWORD *)(a1 + a2[6]));
  sub_10003D380((_QWORD *)(a1 + a2[7]));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[8]));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[9])).n128_u64[0];
  return result;
}

uint64_t sub_10036EA6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v6 = type metadata accessor for OpenTranscriptIntent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(a2 + v11 + 24);
  *(_OWORD *)(a1 + v11 + 24) = v14;
  v15 = v14;
  v16 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v14 - 8);
  swift_retain(v9);
  v17 = swift_retain(v10);
  v16(v12, v13, v15, v17);
  v18 = a3[8];
  v19 = a3[9];
  v20 = *(_OWORD *)(a2 + v18);
  *(_OWORD *)(a1 + v18) = v20;
  v21 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  swift_unknownObjectRetain(v20);
  swift_retain(v21);
  return a1;
}

uint64_t sub_10036EB40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for OpenTranscriptIntent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_retain();
  swift_release(v8);
  v9 = a3[6];
  v10 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_retain();
  swift_release(v10);
  sub_10013C884((_QWORD *)(a1 + a3[7]), (_QWORD *)(a2 + a3[7]));
  v11 = a3[8];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  v16 = *v12;
  *v12 = *v13;
  swift_unknownObjectRetain(v14);
  swift_unknownObjectRelease(v16);
  v12[1] = v15;
  v17 = a3[9];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_retain();
  swift_release(v19);
  return a1;
}

uint64_t sub_10036EC24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;

  v6 = type metadata accessor for OpenTranscriptIntent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = (__int128 *)(a2 + v8);
  v12 = *v11;
  v13 = v11[1];
  *(_QWORD *)(v10 + 32) = *((_QWORD *)v11 + 4);
  *(_OWORD *)v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10036ECB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for OpenTranscriptIntent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  v9 = a3[6];
  v10 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_release(v10);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  sub_10003D380((_QWORD *)(a1 + v11));
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  v15 = a3[8];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = v17[1];
  v19 = *v16;
  *v16 = *v17;
  swift_unknownObjectRelease(v19);
  v16[1] = v18;
  v20 = a3[9];
  v21 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  swift_release(v21);
  return a1;
}

uint64_t sub_10036ED90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10036ED9C);
}

uint64_t sub_10036ED9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for OpenTranscriptIntent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10036EE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10036EE24);
}

uint64_t sub_10036EE24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for OpenTranscriptIntent(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for OpenTranscriptIntentImplementation(uint64_t a1)
{
  uint64_t result;

  result = qword_100566618;
  if (!qword_100566618)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OpenTranscriptIntentImplementation);
  return result;
}

uint64_t sub_10036EED8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for OpenTranscriptIntent(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = "(";
    v4[4] = &unk_1003D72D0;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10036EF64()
{
  return sub_100026844((unint64_t *)&unk_100566660, (uint64_t (*)(uint64_t))&type metadata accessor for OpenTranscriptIntent, (uint64_t)&protocol conformance descriptor for OpenTranscriptIntent);
}

double sub_10036EF90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  double result;
  __int128 v15;

  v6 = type metadata accessor for OpenTranscriptIntent(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a3, a2, v6);
  v8 = (int *)type metadata accessor for OpenTranscriptIntentImplementation(0);
  *(_QWORD *)(a3 + v8[9]) = a1;
  v9 = type metadata accessor for PlaybackController(0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(&v15, v9, v9);
  *(_QWORD *)(a3 + v8[5]) = v15;
  v10 = type metadata accessor for NowPlayingBootstrap();
  BaseObjectGraph.inject<A>(_:)(&v15, v10, v10);
  *(_QWORD *)(a3 + v8[6]) = v15;
  v11 = sub_10003F544((uint64_t *)&unk_10055B8B0);
  BaseObjectGraph.inject<A>(_:)((_QWORD *)(a3 + v8[7]), v11, v11);
  v12 = sub_10003F544((uint64_t *)&unk_100554530);
  BaseObjectGraph.inject<A>(_:)(&v15, v12, v12);
  v13 = swift_release(a1);
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(a2, v6, v13);
  result = *(double *)&v15;
  *(_OWORD *)(a3 + v8[8]) = v15;
  return result;
}

uint64_t sub_10036F0B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;

  v1[5] = v0;
  v2 = sub_10003F544(&qword_1005629D8);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10003F544(&qword_10055D198);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for EpisodeEntity(0);
  v1[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[9] = v5;
  v1[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TranscriptRequestInformation(0);
  v1[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[12] = v7;
  v1[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v1[14] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v1[15] = v10;
  v1[16] = v11;
  return swift_task_switch(sub_10036F1B8, v10, v11);
}

uint64_t sub_10036F1B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  _QWORD *v16;
  _QWORD *v17;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = OpenTranscriptIntent.episode.getter();
  EpisodeEntity.transcriptRequestInformation.getter(v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1) == 1)
  {
    v8 = *(_QWORD *)(v0 + 56);
    swift_release(*(_QWORD *)(v0 + 112));
    sub_100007A28(v8, &qword_10055D198);
    v9 = sub_100370290();
    v10 = swift_allocError(&type metadata for OpenTranscriptError, v9, 0, 0);
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 88));
    sub_10036F6BC();
    if ((v15 & 1) != 0)
    {
      v16 = (_QWORD *)swift_task_alloc(dword_10056668C);
      *(_QWORD *)(v0 + 136) = v16;
      *v16 = v0;
      v16[1] = sub_10036F35C;
      return sub_10036F890();
    }
    else
    {
      v17 = (_QWORD *)swift_task_alloc(dword_100566684);
      *(_QWORD *)(v0 + 152) = v17;
      *v17 = v0;
      v17[1] = sub_10036F4F4;
      return sub_10036FBE8(*(_QWORD *)(v0 + 104));
    }
  }
}

uint64_t sub_10036F35C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10036F5CC;
  else
    v4 = sub_10036F3BC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
}

uint64_t sub_10036F3BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 112));
  type metadata accessor for OpenTranscriptIntentImplementation(0);
  v5 = NowPlayingHostedContentID.transcript.unsafeMutableAddressor();
  swift_beginAccess(v5, v0 + 16, 0, 0);
  v6 = type metadata accessor for NowPlayingHostedContentID(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v5, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v6);
  v8 = sub_10000C3B0();
  v9 = *(_QWORD *)(v8 + 16);
  swift_retain();
  v10 = swift_release(v8);
  dispatch thunk of NowPlayingViewModel.updateContentSelection(_:animated:)(v4, 1, v10);
  swift_release(v9);
  sub_100007A28(v4, &qword_1005629D8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v11 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10036F4F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10036F644;
  else
    v4 = sub_10036F554;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
}

uint64_t sub_10036F554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 112));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10036F5CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 112));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10036F644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 112));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10036F6BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  id v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v0 = type metadata accessor for EpisodeEntity(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v5 = (char *)&v24 - v4;
  v6 = type metadata accessor for OpenTranscriptIntentImplementation(0);
  v7 = (void *)dispatch thunk of PlaybackController.nowPlayingItem.getter(v6);
  if (v7)
  {
    v8 = v7;
    v9 = MPModelObject.uuid.getter(v8);
    v11 = v10;

    if (v11)
    {
      v12 = OpenTranscriptIntent.episode.getter();
      v13 = EpisodeEntity.uuid.getter(v12);
      v15 = v14;
      (*(void (**)(char *, uint64_t))(v1 + 8))(v5, v0);
      if (v15)
      {
        if (v9 == v13 && v11 == v15)
        {

          swift_bridgeObjectRelease(v11);
          swift_bridgeObjectRelease(v15);
          return;
        }
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v13, v15, 0);
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v15);
        if ((v17 & 1) != 0)
        {

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v11);
      }
    }
    v18 = v8;
    v19 = MPModelObject.adamID.getter(v18);
    v21 = v20;

    if ((v21 & 1) == 0)
    {
      if (v19 < 0)
      {
        __break(1u);
      }
      else
      {
        v22 = OpenTranscriptIntent.episode.getter();
        v23 = EpisodeEntity.adamID.getter(v22);
        (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);

        if ((v23 & 0x8000000000000000) == 0)
          return;
      }
      __break(1u);
      return;
    }

  }
}

uint64_t sub_10036F890()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v1[7] = v0;
  v2 = type metadata accessor for ActionMetricsBehavior(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ActionOutcome(0);
  v1[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[12] = v5;
  v1[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v1[14] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v1[15] = v8;
  v1[16] = v9;
  return swift_task_switch(sub_10036F94C, v8, v9);
}

uint64_t sub_10036F94C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v2 = v0[9];
  v1 = v0[10];
  v4 = v0[7];
  v3 = v0[8];
  v5 = type metadata accessor for PresentNowPlayingAction(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = PresentNowPlayingAction.init()();
  v0[17] = v6;
  v7 = type metadata accessor for OpenTranscriptIntentImplementation(0);
  v8 = (_QWORD *)(v4 + *(int *)(v7 + 32));
  v14 = v8[1];
  ObjectType = swift_getObjectType(*v8, v9);
  v0[5] = v5;
  v0[6] = sub_100026844(&qword_100566690, (uint64_t (*)(uint64_t))&type metadata accessor for PresentNowPlayingAction, (uint64_t)&protocol conformance descriptor for Action);
  v0[2] = v6;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ActionMetricsBehavior.notProcessed(_:), v3);
  v11 = *(_QWORD *)(v4 + *(int *)(v7 + 36));
  swift_retain();
  v0[18] = ActionRunner.perform(_:withMetrics:asPartOf:)(v0 + 2, v1, v11, ObjectType, v14);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10003D380(v0 + 2);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to Promise.then()[1]);
  v0[19] = v12;
  *v12 = v0;
  v12[1] = sub_10036FAA8;
  return Promise.then()(v0[13]);
}

uint64_t sub_10036FAA8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[15];
    v5 = v2[16];
    v6 = sub_10036FB84;
  }
  else
  {
    v7 = v2[18];
    (*(void (**)(_QWORD, _QWORD))(v2[12] + 8))(v2[13], v2[11]);
    swift_release(v7);
    v4 = v2[15];
    v5 = v2[16];
    v6 = sub_10036FB28;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10036FB28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10036FB84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(v2);
  swift_release(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10036FBE8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for ActionMetricsBehavior(0);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActionOutcome(0);
  v2[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[13] = v6;
  v2[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionMetrics(0);
  v2[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FlowDestinationPageHeader(0);
  v2[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[17] = v9;
  v2[18] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FlowPresentationContext(0);
  v2[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[20] = v11;
  v2[21] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FlowDestination(0);
  v2[22] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[23] = v13;
  v2[24] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MainActor(0);
  v2[25] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  v2[26] = v16;
  v2[27] = v17;
  return swift_task_switch(sub_10036FD3C, v16, v17);
}

uint64_t sub_10036FD3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  _QWORD *v33;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v0[23];
  v1 = v0[24];
  v4 = v0[21];
  v3 = v0[22];
  v5 = v0[19];
  v6 = v0[20];
  v7 = v0[7];
  v8 = sub_10003F544(&qword_1005612A0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1003CA200;
  v10 = type metadata accessor for TranscriptRequestInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v1, v7, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for FlowDestination.episodeDetailTranscript(_:), v3);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v4, enum case for FlowPresentationContext.pushDetail(_:), v5);
  v12 = static Link.Presentation.textFollowsTintColor.getter(v11);
  v13 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  v14 = Link.Presentation.init(rawValue:)(0);
  v15 = Link.Presentation.init(rawValue:)(v14);
  if (Link.Presentation.init(rawValue:)(v15 & v12) != v12)
    v14 = Link.Presentation.init(rawValue:)(v14 | v12);
  v16 = Link.Presentation.init(rawValue:)(v14);
  if (Link.Presentation.init(rawValue:)(v16 & v13) != v13)
    v14 = Link.Presentation.init(rawValue:)(v14 | v13);
  v17 = v0[24];
  v18 = v0[21];
  v19 = v0[18];
  v20 = v0[15];
  v37 = v0[10];
  v38 = v0[11];
  v21 = v0[8];
  v39 = v0[9];
  v22 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0[17] + 104))(v19, enum case for FlowDestinationPageHeader.standard(_:), v0[16]);
  static ActionMetrics.notInstrumented.getter(v22);
  v23 = type metadata accessor for FlowAction(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v17, 0, 0, 0, 0, v18, 0, v14, v19, v20);
  *(_QWORD *)(v9 + 56) = v23;
  *(_QWORD *)(v9 + 64) = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v9 + 32) = v24;
  v25 = Link.Presentation.init(rawValue:)(0);
  LOBYTE(v24) = v25;
  static ActionMetrics.notInstrumented.getter(v25);
  v26 = type metadata accessor for TabChangeAction(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  LOBYTE(v35) = v24;
  v27 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 10, v9, 0, 0, 0, 0, v35, v20);
  v0[28] = v27;
  v28 = type metadata accessor for OpenTranscriptIntentImplementation(0);
  v29 = (_QWORD *)(v21 + *(int *)(v28 + 32));
  v36 = v29[1];
  ObjectType = swift_getObjectType(*v29, v30);
  v0[5] = v26;
  v0[6] = sub_100026844((unint64_t *)&unk_100560980, (uint64_t (*)(uint64_t))&type metadata accessor for TabChangeAction, (uint64_t)&protocol conformance descriptor for Action);
  v0[2] = v27;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v38, enum case for ActionMetricsBehavior.notProcessed(_:), v39);
  v32 = *(_QWORD *)(v21 + *(int *)(v28 + 36));
  swift_retain();
  v0[29] = ActionRunner.perform(_:withMetrics:asPartOf:)(v0 + 2, v38, v32, ObjectType, v36);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
  sub_10003D380(v0 + 2);
  v33 = (_QWORD *)swift_task_alloc(async function pointer to Promise.then()[1]);
  v0[30] = v33;
  *v33 = v0;
  v33[1] = sub_100370090;
  return Promise.then()(v0[14]);
}

uint64_t sub_100370090()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[26];
    v5 = v2[27];
    v6 = sub_1003701A8;
  }
  else
  {
    v7 = v2[29];
    (*(void (**)(_QWORD, _QWORD))(v2[13] + 8))(v2[14], v2[12]);
    swift_release(v7);
    v4 = v2[26];
    v5 = v2[27];
    v6 = sub_100370110;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100370110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 224));
  swift_release(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003701A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 224));
  swift_release(v2);
  swift_release(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10037024C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100566674);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100191178;
  return sub_10036F0B4();
}

unint64_t sub_100370290()
{
  unint64_t result;

  result = qword_100566678;
  if (!qword_100566678)
  {
    result = swift_getWitnessTable(&unk_1003D73D4, &type metadata for OpenTranscriptError);
    atomic_store(result, &qword_100566678);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OpenTranscriptError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100370314 + 4 * byte_1003D7270[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100370334 + 4 * byte_1003D7275[v4]))();
}

_BYTE *sub_100370314(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100370334(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10037033C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100370344(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10037034C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100370354(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OpenTranscriptError()
{
  return &type metadata for OpenTranscriptError;
}

uint64_t sub_100370370()
{
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000032, 0x800000010043FB50);
}

unint64_t sub_100370390()
{
  unint64_t result;

  result = qword_100566698[0];
  if (!qword_100566698[0])
  {
    result = swift_getWitnessTable(&unk_1003D73AC, &type metadata for OpenTranscriptError);
    atomic_store(result, qword_100566698);
  }
  return result;
}

void sub_1003703D4()
{
  sub_1003703F0();
}

void sub_1003703F0()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.BlockOperation", 23, "init()", 6, 0);
  __break(1u);
}

id sub_10037041C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackgroundTaskManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10037044C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100370470()
{
  sub_100018E74();
}

id MTFeedUpdateManager.statusManager.getter()
{
  void *v0;
  id result;

  result = objc_msgSend(v0, "feedManager");
  if (!result)
    __break(1u);
  return result;
}

double sub_1003704C8(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t, __n128))
{
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  double result;

  v8 = sub_1001390A0((uint64_t)_swiftEmptyArrayStorage);
  v9 = a2;
  swift_retain();
  sub_100373404(v8, a1, v9, a3);
  v11 = v10;

  v12 = swift_release(a3);
  a4(v11, v12);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  return result;
}

void sub_100370568(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(__n128);
  uint64_t v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v4 = v3;
  v21 = a3;
  sub_10003F544(&qword_100566948);
  __chkstk_darwin();
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)&v21 - v9;
  v11 = *(uint64_t (**)(__n128))(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  v13 = swift_retain();
  v14 = (void *)v11(v13);
  swift_release(v12);
  v15 = sub_10003F544(&qword_1005631A8);
  v22 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v10, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject(&unk_1004C6620, 56, 7);
  v16[2] = v14;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = v10;
  v16[6] = v4;
  v17 = swift_allocObject(&unk_1004C6648, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_100373354;
  *(_QWORD *)(v17 + 24) = v16;
  aBlock[4] = sub_100029B3C;
  v24 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004C6660;
  v18 = _Block_copy(aBlock);
  v19 = v24;
  v20 = v14;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  swift_retain();
  objc_msgSend(v20, "performBlockAndWait:", v18, swift_release(v19).n128_f64[0]);
  _Block_release(v18);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation(v17, "", 100, 59, 28, 1);
  swift_release(v17);
  if ((v19 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_100373374((uint64_t)v10, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, v15) != 1)
    {

      sub_10003DC78((uint64_t)v8, v21, &qword_1005631A8);
      sub_100007A28((uint64_t)v10, &qword_100566948);
      swift_release(v16);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1003707C0(void *a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_10003F544(&qword_100566948);
  __chkstk_darwin();
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(a1, "episodeForUuid:", v10);

  if (v11)
  {
    sub_100370B2C(a2, a3, v11, a1, (uint64_t)v9);

    v13 = sub_10003F544(&qword_1005631A8);
    swift_storeEnumTagMultiPayload(v9, v13, 0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 0, 1, v13);
    return sub_1003733BC((uint64_t)v9, a4);
  }
  else
  {
    sub_100007A28(a4, &qword_100566948);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 2;
    v12 = sub_10003F544(&qword_1005631A8);
    swift_storeEnumTagMultiPayload(a4, v12, 1);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a4, 0, 1, v12);
  }
}

void sub_100370B2C(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  id v53;
  id v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  char *v60;
  unint64_t v61;
  __n128 v62;
  id v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  double v91;
  double v92;
  double v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  void *v99;
  id v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  char *v145;
  void (*v146)(char *, uint64_t, uint64_t);
  id v147;
  uint64_t v148;
  _QWORD v149[2];
  uint64_t v150;
  _QWORD v151[3];
  uint64_t v152;
  uint64_t v153;

  v132 = a5;
  v144 = a4;
  v148 = a2;
  v146 = a1;
  sub_10003F544(&qword_1005522F0);
  __chkstk_darwin();
  v131 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v135 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v136 = v8;
  v137 = v9;
  __chkstk_darwin();
  v133 = (char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v134 = (char *)&v127 - v11;
  v12 = type metadata accessor for BugReportFrequency(0);
  v142 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v145 = (char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BugReport.Domain(0);
  v139 = *(_QWORD *)(v14 - 8);
  v140 = v14;
  __chkstk_darwin();
  v141 = (char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for BugReport.ErrorKind(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin();
  v19 = (char *)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PodcastsSystem(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin();
  v23 = (char *)&v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = a3;
  v24 = a3;
  v25 = v148;
  v26 = objc_msgSend(v24, "isDownloaded");
  if ((_DWORD)v26)
  {
    v27 = static os_log_type_t.error.getter(v26);
    v28 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v138 = v12;
    v29 = (void *)static OS_os_log.downloads.getter(v28);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v29, "Invalid state. Episode is already downloaded", 44, 2, _swiftEmptyArrayStorage);

    sub_10000A520(v143 + 32, (uint64_t)v151);
    v130 = v153;
    v143 = v152;
    v129 = sub_10003A834(v151, v152);
    (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v23, enum case for PodcastsSystem.downloads(_:), v20);
    (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for BugReport.ErrorKind.duplicateDownloads(_:), v16);
    v30 = v141;
    (*(void (**)(char *, _QWORD, uint64_t))(v139 + 104))(v141, enum case for BugReport.Domain.podcasts(_:), v140);
    v31 = objc_allocWithZone((Class)type metadata accessor for BugReport(0));
    v32 = (void *)BugReport.init(domain:system:errorKind:forceSubmissionAttempt:)(v30, v23, v19, 0);
    v33 = v142;
    (*(void (**)(char *, _QWORD, uint64_t))(v142 + 104))(v145, enum case for BugReportFrequency.daily(_:), v138);
    v34 = sub_10003F544(&qword_100559A90);
    inited = swift_initStackObject(v34, &v150);
    *(_OWORD *)(inited + 16) = xmmword_1003CA210;
    v149[0] = 0xD000000000000013;
    v149[1] = 0x800000010043FC40;
    AnyHashable.init<A>(_:)(v149, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for String;
    v36 = v148;
    *(_QWORD *)(inited + 72) = v146;
    *(_QWORD *)(inited + 80) = v36;
    strcpy((char *)v149, "PodcastAdamID");
    HIWORD(v149[1]) = -4864;
    swift_bridgeObjectRetain(v36);
    AnyHashable.init<A>(_:)(v149, &type metadata for String, &protocol witness table for String);
    v37 = v147;
    v38 = objc_msgSend(v147, "podcast");
    if (v38)
    {
      v39 = v38;
      v40 = (uint64_t)objc_msgSend(v38, "storeCollectionId");
      v149[0] = AdamID.init(rawValue:)(v40 & ~(v40 >> 63));
      v41 = sub_100030584();
      v42 = BinaryInteger.description.getter(&type metadata for UInt64, v41);
      v44 = v43;

      v45 = (uint64_t *)(inited + 144);
      *(_QWORD *)(inited + 168) = &type metadata for String;
      if (v44)
      {
        *v45 = v42;
        goto LABEL_7;
      }
    }
    else
    {
      v45 = (uint64_t *)(inited + 144);
      *(_QWORD *)(inited + 168) = &type metadata for String;
    }
    *v45 = 0x49434550534E553CLL;
    v44 = 0xED00003E44454946;
LABEL_7:
    *(_QWORD *)(inited + 152) = v44;
    strcpy((char *)v149, "PodcastsUUID");
    BYTE5(v149[1]) = 0;
    HIWORD(v149[1]) = -5120;
    AnyHashable.init<A>(_:)(v149, &type metadata for String, &protocol witness table for String);
    v46 = objc_msgSend(v37, "podcastUuid");
    if (v46)
    {
      v47 = v46;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v50 = v49;

      v51 = (uint64_t *)(inited + 216);
      *(_QWORD *)(inited + 240) = &type metadata for String;
      if (v50)
      {
        *v51 = v48;
        v52 = v33;
        goto LABEL_12;
      }
    }
    else
    {
      v51 = (uint64_t *)(inited + 216);
      *(_QWORD *)(inited + 240) = &type metadata for String;
    }
    v52 = v33;
    *v51 = 0x49434550534E553CLL;
    v50 = 0xED00003E44454946;
LABEL_12:
    *(_QWORD *)(inited + 224) = v50;
    strcpy((char *)v149, "EpisodeAdamID");
    HIWORD(v149[1]) = -4864;
    AnyHashable.init<A>(_:)(v149, &type metadata for String, &protocol witness table for String);
    v53 = objc_msgSend(v37, "storeTrackId");
    *(_QWORD *)(inited + 312) = &type metadata for Int64;
    *(_QWORD *)(inited + 288) = v53;
    v149[0] = 0xD000000000000013;
    v149[1] = 0x800000010043FC60;
    AnyHashable.init<A>(_:)(v149, &type metadata for String, &protocol witness table for String);
    v54 = objc_msgSend(v144, "name");
    if (v54)
    {
      v55 = v54;
      v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      v58 = v57;

      v59 = (uint64_t *)(inited + 360);
      *(_QWORD *)(inited + 384) = &type metadata for String;
      if (v58)
      {
        *v59 = v56;
        v52 = v33;
        v60 = v145;
LABEL_18:
        *(_QWORD *)(inited + 368) = v58;
        v61 = sub_10013842C(inited);
        dispatch thunk of BugReporter.submit(bugReport:maximumFrequency:userInfo:)(v32, v60, v61, v143, v130);

        v62 = swift_bridgeObjectRelease(v61);
        (*(void (**)(char *, uint64_t, __n128))(v52 + 8))(v60, v138, v62);
        sub_10003D380(v151);
        v25 = v148;
        goto LABEL_19;
      }
      v52 = v33;
    }
    else
    {
      v59 = (uint64_t *)(inited + 360);
      *(_QWORD *)(inited + 384) = &type metadata for String;
    }
    *v59 = 0x49434550534E553CLL;
    v60 = v145;
    v58 = 0xED00003E44454946;
    goto LABEL_18;
  }
LABEL_19:
  v63 = v147;
  if (objc_msgSend(v147, "feedDeleted"))
  {
    v64 = sub_1001E44C0();
    swift_allocError(&type metadata for EpisodeMetadataError, v64, 0, 0);
    *(_QWORD *)v65 = v146;
    *(_QWORD *)(v65 + 8) = v25;
    *(_BYTE *)(v65 + 16) = 1;
LABEL_23:
    swift_bridgeObjectRetain(v25);
LABEL_36:
    swift_willThrow(v68);
    return;
  }
  if (objc_msgSend(v63, "isRestricted"))
  {
    v66 = sub_1001E44C0();
    swift_allocError(&type metadata for EpisodeMetadataError, v66, 0, 0);
    *(_QWORD *)v67 = v146;
    *(_QWORD *)(v67 + 8) = v25;
    *(_BYTE *)(v67 + 16) = 0;
    goto LABEL_23;
  }
  if ((objc_msgSend(v63, "isExternalType") & 1) != 0
    || (objc_msgSend(v63, "isMedia") & 1) == 0)
  {
    v79 = sub_1001E44C0();
    v68 = swift_allocError(&type metadata for EpisodeMetadataError, v79, 0, 0);
    *(_OWORD *)v80 = xmmword_1003D7500;
LABEL_35:
    *(_BYTE *)(v80 + 16) = 3;
    goto LABEL_36;
  }
  v69 = objc_msgSend(v63, "enclosureURL");
  if (!v69)
  {
LABEL_34:
    v81 = sub_1001E44C0();
    v68 = swift_allocError(&type metadata for EpisodeMetadataError, v81, 0, 0);
    *(_QWORD *)v80 = 0;
    *(_QWORD *)(v80 + 8) = 0;
    goto LABEL_35;
  }
  v70 = v69;
  v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
  v73 = v72;

  v74 = HIBYTE(v73) & 0xF;
  if ((v73 & 0x2000000000000000) == 0)
    v74 = v71 & 0xFFFFFFFFFFFFLL;
  if (!v74)
  {
    swift_bridgeObjectRelease(v73);
    goto LABEL_34;
  }
  v75 = (uint64_t)v135;
  URL.init(string:)(v71, v73);
  v76 = swift_bridgeObjectRelease(v73);
  v78 = v136;
  v77 = v137;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v137 + 48))(v75, 1, v136, v76) == 1)
  {
    sub_100007A28(v75, (uint64_t *)&unk_100553DC0);
    goto LABEL_34;
  }
  v82 = v134;
  v146 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 32);
  v146(v134, v75, v78);
  v83 = objc_msgSend(v63, "podcast");
  if (!v83)
    goto LABEL_40;
  v84 = v83;
  v85 = (uint64_t)objc_msgSend(v83, "storeCollectionId");
  v86 = AdamID.init(rawValue:)(v85 & ~(v85 >> 63));
  if ((AdamID.isEmpty.getter(v86) & 1) != 0)
  {

LABEL_40:
    v87 = 0;
    LODWORD(v144) = 1;
    goto LABEL_43;
  }
  v88 = (uint64_t)objc_msgSend(v84, "storeCollectionId");
  v87 = AdamID.init(rawValue:)(v88 & ~(v88 >> 63));

  if (v87 < 0)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  LODWORD(v144) = 0;
LABEL_43:
  v148 = MTEpisode.contentId.getter(v83);
  v145 = (char *)v87;
  if ((v89 & 1) != 0 || (AdamID.isEmpty.getter(v148) & 1) != 0)
  {
    v148 = 0;
    LODWORD(v143) = 1;
  }
  else
  {
    if (v148 < 0)
    {
LABEL_82:
      __break(1u);
      return;
    }
    LODWORD(v143) = 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v133, v82, v78);
  v90 = objc_msgSend(v63, "isAudio");
  objc_msgSend(v63, "duration");
  v92 = v91;
  if (v91 > 0.0)
  {
    objc_msgSend(v63, "duration");
    if ((~*(_QWORD *)&v93 & 0x7FF0000000000000) != 0)
    {
      if (v93 > -9.22337204e18)
      {
        if (v93 < 9.22337204e18)
        {
          v142 = (uint64_t)v93;
          goto LABEL_54;
        }
        goto LABEL_80;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  v142 = 0;
LABEL_54:
  v140 = (uint64_t)objc_msgSend(v63, "byteSize");
  if (v140 < 1)
    v141 = 0;
  else
    v141 = (char *)objc_msgSend(v63, "byteSize");
  v94 = objc_msgSend(v63, "guid");
  if (v94)
  {
    v95 = v94;
    v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v138 = v97;
    v139 = v96;

  }
  else
  {
    v138 = 0;
    v139 = 0;
  }
  v98 = objc_msgSend(v63, "podcast");
  if (v98
    && (v99 = v98, v100 = objc_msgSend(v98, "title"), v99, v100))
  {
    v135 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    v130 = v101;

  }
  else
  {
    v135 = 0;
    v130 = 0;
  }
  v102 = objc_msgSend(v63, "podcast");
  if (v102
    && (v103 = v102, v104 = objc_msgSend(v102, "feedURL"), v103, v104))
  {
    v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
    v128 = v106;
    v129 = (_QWORD *)v105;

  }
  else
  {
    v128 = 0;
    v129 = 0;
  }
  v107 = (uint64_t)v131;
  v108 = v137;
  LODWORD(v137) = v90 ^ 1;
  v109 = v63;
  v110 = objc_msgSend(v63, "podcast");
  v111 = v110;
  if (v110)
  {
    v112 = objc_msgSend(v110, "updatedFeedURL");

    if (v112)
    {
      v111 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
      v114 = v113;

    }
    else
    {
      v111 = 0;
      v114 = 0;
    }
    v109 = v63;
  }
  else
  {
    v114 = 0;
  }
  v115 = objc_msgSend(v109, "lastCacheDeletePurge");
  if (v115)
  {
    v116 = v115;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v115);

    (*(void (**)(char *, uint64_t))(v108 + 8))(v134, v78);
    v117 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v107, 0, 1, v117);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v108 + 8))(v134, v78);
    v118 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 56))(v107, 1, 1, v118);
  }
  v119 = v140 < 1;
  v120 = (int *)type metadata accessor for EpisodeMetadata(0);
  v121 = v132;
  v146((char *)(v132 + v120[11]), (uint64_t)v133, v78);
  *(_BYTE *)(v121 + v120[12]) = v137;
  v122 = v121 + v120[13];
  *(_QWORD *)v122 = v141;
  *(_BYTE *)(v122 + 8) = v119;
  *(_QWORD *)v121 = 0;
  *(_QWORD *)(v121 + 8) = 0;
  v123 = v138;
  *(_QWORD *)(v121 + 16) = v139;
  *(_QWORD *)(v121 + 24) = v123;
  *(_QWORD *)(v121 + 32) = v148;
  *(_BYTE *)(v121 + 40) = v143;
  *(_QWORD *)(v121 + 48) = v145;
  *(_BYTE *)(v121 + 56) = (_BYTE)v144;
  v124 = v130;
  *(_QWORD *)(v121 + 64) = v135;
  *(_QWORD *)(v121 + 72) = v124;
  v125 = v128;
  *(_QWORD *)(v121 + 80) = v129;
  *(_QWORD *)(v121 + 88) = v125;
  *(_QWORD *)(v121 + 96) = v111;
  *(_QWORD *)(v121 + 104) = v114;
  v126 = v121 + v120[14];
  *(_QWORD *)v126 = v142;
  *(_BYTE *)(v126 + 8) = v92 <= 0.0;
  sub_10003DC78(v107, v121 + v120[15], &qword_1005522F0);
}

void sub_10037185C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD, uint64_t), uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  void (*v57)(_QWORD, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v54 = a7;
  v56 = a6;
  v60 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v60 - 8);
  v15 = __chkstk_darwin(v60);
  v17 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)v52 - v18;
  v20 = type metadata accessor for Logger(0);
  v58 = *(_QWORD *)(v20 - 8);
  v59 = v20;
  v21 = __chkstk_darwin(v20);
  v23 = (char *)v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)v52 - v24;
  v53 = a2;
  v26 = String._bridgeToObjectiveC()();
  v55 = a1;
  v27 = objc_msgSend(a1, "episodeForUuid:", v26);

  v57 = a5;
  if (v27)
  {
    static Logger.database.getter(v28);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a4, v60);
    v29 = swift_bridgeObjectRetain_n(a3, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(32, -1);
      v52[1] = a4;
      v33 = v32;
      v52[0] = swift_slowAlloc(64, -1);
      v62 = v52[0];
      *(_DWORD *)v33 = 136315650;
      swift_bridgeObjectRetain(a3);
      v61 = sub_10003D274(v53, a3, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v33 + 4, v33 + 12);
      v34 = swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v33 + 12) = 2080;
      v35 = URL.absoluteString.getter(v34);
      v37 = v36;
      v61 = sub_10003D274(v35, v36, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease(v37);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v60);
      *(_WORD *)(v33 + 22) = 2048;
      v61 = *(_QWORD *)&a8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v33 + 24, v33 + 32);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Updating episode %s with assetURL %s at downloadDate %f", (uint8_t *)v33, 0x20u);
      v38 = v52[0];
      swift_arrayDestroy(v52[0], 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v60);
    }

    v48 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v23, v59);
    URL.absoluteString.getter(v48);
    v50 = v49;
    v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    objc_msgSend(v27, "setAssetURL:", v51);

    objc_msgSend(v27, "setByteSize:", v54);
    objc_msgSend(v27, "setDownloadDate:", a8);
    objc_msgSend(v55, "saveInCurrentBlock");
    v57(0, 0);

  }
  else
  {
    static Logger.database.getter(v28);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, a4, v60);
    v39 = swift_bridgeObjectRetain_n(a3, 2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc(32, -1);
      v43 = swift_slowAlloc(64, -1);
      v62 = v43;
      *(_DWORD *)v42 = 136315650;
      swift_bridgeObjectRetain(a3);
      v61 = sub_10003D274(v53, a3, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v42 + 4, v42 + 12);
      v44 = swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v42 + 12) = 2080;
      v45 = URL.absoluteString.getter(v44);
      v47 = v46;
      v61 = sub_10003D274(v45, v46, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v42 + 14, v42 + 22);
      swift_bridgeObjectRelease(v47);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v60);
      *(_WORD *)(v42 + 22) = 2048;
      v61 = *(_QWORD *)&a8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v42 + 24, v42 + 32);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to locate episode %s to update with assetURL %s at downloadDate %f", (uint8_t *)v42, 0x20u);
      swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v60);
    }

    (*(void (**)(char *, uint64_t))(v58 + 8))(v25, v59);
    v57(0, 1);
  }
}

void sub_100371DD8(void *a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSString v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  void (*v36)(_QWORD, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v36 = a4;
  v11 = type metadata accessor for MediaLibraryPid(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(a1, "episodeForUuid:", v15);

  if (v16)
  {
    v33 = a2;
    v18 = static os_log_type_t.default.getter(v17);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v19 = static OS_os_log.downloads.getter();
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v35 = a6;
    v20(v14, a6, v11);
    v34 = v19;
    if (os_log_type_enabled(v19, v18))
    {
      swift_bridgeObjectRetain_n(a3, 2);
      v21 = swift_slowAlloc(22, -1);
      v32 = a5;
      v22 = v21;
      v23 = swift_slowAlloc(32, -1);
      v31 = v23;
      v38 = v23;
      *(_DWORD *)v22 = 134218242;
      v30 = v18;
      v24 = MediaLibraryPid.value.getter(v23);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      v37 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain(a3);
      v37 = sub_10003D274(v33, a3, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease_n(a3, 3);
      v25 = v34;
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v30, "Updating MTEpisode with media library persistent id %lld. EpisodeUUID %s.", (uint8_t *)v22, 0x16u);
      v26 = v31;
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {
      v28 = *(void (**)(char *, uint64_t))(v12 + 8);
      swift_bridgeObjectRetain_n(a3, 2);
      v28(v14, v11);
      swift_bridgeObjectRelease_n(a3, 2);

    }
    objc_msgSend(v16, "setPersistentID:", MediaLibraryPid.value.getter(v27));
    objc_msgSend(a1, "saveInCurrentBlock");
    v36(0, 0);

  }
  else
  {
    v36(0, 1);
  }
}

uint64_t sub_1003720C8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t))
{
  NSString v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;

  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(a1, "episodeForUuid:", v6);

  if (!v7)
    return a4(0, 0, 1);
  v8 = objc_msgSend(v7, "podcast");
  v9 = v8;
  if (v8)
  {
    v10 = objc_msgSend(v8, "title");

    if (v10)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v9 = v12;

    }
    else
    {
      v11 = 0;
      v9 = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  a4(v11, v9, 0);

  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_1003721DC(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  NSString v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(a1, "episodeForUuid:", v6);

  if (!v7)
    return a4(0, 0, 1);
  v8 = objc_msgSend(v7, "title");
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  a4(v10, v12, 0);

  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_1003722C0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  NSString v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  unint64_t v27;
  id v28;
  NSString v29;
  Class isa;
  id v31;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(_QWORD *);
  char v38[80];

  v8 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v35 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_1005533C0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(a1, "episodeForUuid:", v17);

  if (!v18)
  {
    *v16 = 0;
    swift_storeEnumTagMultiPayload(v16, v14, 1);
    a4(v16);
    return sub_100007A28((uint64_t)v16, &qword_1005533C0);
  }
  v36 = a5;
  v37 = a4;
  v19 = objc_msgSend(v18, "assetURL");
  if (!v19)
  {
LABEL_5:
    v24 = sub_10003F544(&qword_1005654C0);
    inited = swift_initStackObject(v24, v38);
    *(_OWORD *)(inited + 16) = xmmword_1003CA200;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v26;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000018;
    *(_QWORD *)(inited + 56) = 0x800000010043FDD0;
    v27 = sub_1001386B4(inited);
    v28 = objc_allocWithZone((Class)NSError);
    v29 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v27);
    v31 = objc_msgSend(v28, "initWithDomain:code:userInfo:", v29, 1, isa);

    *v16 = v31;
    swift_storeEnumTagMultiPayload(v16, v14, 1);
    v37(v16);

    return sub_100007A28((uint64_t)v16, &qword_1005533C0);
  }
  v20 = v19;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v23 = v22;

  URL.init(string:)(v21, v23);
  swift_bridgeObjectRelease(v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100553DC0);
    goto LABEL_5;
  }
  v33 = v35;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v35, v10, v11);
  (*(void (**)(_QWORD *, char *, uint64_t))(v12 + 16))(v16, v33, v11);
  swift_storeEnumTagMultiPayload(v16, v14, 0);
  v37(v16);

  sub_100007A28((uint64_t)v16, &qword_1005533C0);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v33, v11);
}

void sub_100372630(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t))
{
  NSString v6;
  id v7;

  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(a1, "episodeForUuid:", v6);

  if (v7)
  {
    objc_msgSend(v7, "setAssetURL:", 0);
    objc_msgSend(v7, "setByteSize:", 0);
    objc_msgSend(a1, "saveInCurrentBlock");
    a4(0, 0);

  }
  else
  {
    a4(0, 1);
  }
}

uint64_t sub_100372704(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  id v13;
  id v14;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19[2];

  v5 = a2;
  v6 = (uint64_t)sub_1002D9DD0(a1, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v11 = v6;
    else
      v11 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v11);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
    if (!v7)
      goto LABEL_13;
  }
  if (v7 < 1)
    __break(1u);
  v8 = 0;
  do
  {
    if ((v6 & 0xC000000000000001) != 0)
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
    else
      v9 = *(id *)(v6 + 8 * v8 + 32);
    v10 = v9;
    ++v8;
    objc_msgSend(v9, "setAssetURL:", 0);
    objc_msgSend(v10, "setByteSize:", 0);

  }
  while (v7 != v8);
LABEL_13:
  swift_bridgeObjectRelease_n(v6, 2);
  v19[0] = 0;
  v12 = objc_msgSend(v5, "save:", v19);
  v13 = v19[0];
  if ((v12 & 1) != 0)
  {
    v14 = v19[0];
    return a3(0, 0);
  }
  else
  {
    v16 = v19[0];
    v17 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v18);
    swift_errorRetain();
    a3(v17, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
}

void sub_1003728D0(uint64_t a1, void *a2, void (*a3)(id, uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  uint64_t i;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(char *, char *, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  Class isa;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  _QWORD *v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t inited;
  uint64_t v84;
  unint64_t v85;
  id v86;
  NSString v87;
  Class v88;
  id v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void (*v95)(id, uint64_t);
  id v96;
  uint64_t (*v97)(char *, uint64_t, uint64_t);
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _BYTE v101[80];
  unint64_t v102;

  v94 = a4;
  v95 = a3;
  v96 = a2;
  v5 = type metadata accessor for MediaLibraryPid(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v93 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v91 = (char *)&v91 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v91 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v91 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v91 - v17;
  v19 = _swiftEmptyArrayStorage;
  v102 = (unint64_t)_swiftEmptyArrayStorage;
  v20 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v100 = v6;
  if (v20)
  {
    v21 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v22 = *(_QWORD *)(v6 + 72);
    v92 = a1;
    v98 = v21;
    v99 = (unint64_t)v16;
    v23 = a1 + v21;
    v97 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v24 = v97;
    for (i = v97(v18, a1 + v21, v5); ; i = v24(v18, v23, v5))
    {
      if ((MediaLibraryPid.isValid.getter(i) & 1) != 0)
      {
        v26 = v5;
        v27 = *(void (**)(char *, char *))(v6 + 32);
        v28 = v26;
        v27(v16, v18);
        v29 = (_QWORD *)v102;
        if ((swift_isUniquelyReferenced_nonNull_native(v102) & 1) == 0)
        {
          sub_10017B2E8(0, v29[2] + 1, 1);
          v29 = (_QWORD *)v102;
        }
        v31 = v29[2];
        v30 = v29[3];
        if (v31 >= v30 >> 1)
        {
          sub_10017B2E8(v30 > 1, v31 + 1, 1);
          v29 = (_QWORD *)v102;
        }
        v29[2] = v31 + 1;
        v16 = (char *)v99;
        ((void (*)(char *, unint64_t, uint64_t))v27)((char *)v29 + v98 + v31 * v22, v99, v28);
        v5 = v28;
        v102 = (unint64_t)v29;
        v6 = v100;
        v24 = v97;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
      }
      v23 += v22;
      if (!--v20)
        break;
    }
    v32 = (_QWORD *)v102;
    a1 = v92;
    v19 = _swiftEmptyArrayStorage;
  }
  else
  {
    v32 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(a1);
  v102 = (unint64_t)_swiftEmptyArrayStorage;
  v33 = v32[2];
  if (v33)
  {
    v34 = v32;
    v35 = (char *)v32 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v36 = *(_QWORD *)(v6 + 72);
    v37 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v6 + 16);
    v99 = (unint64_t)v34;
    v38 = swift_retain(v34);
    do
    {
      v40 = v37(v13, v35, v5, v38);
      v41 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithLongLong:", MediaLibraryPid.value.getter(v40));
      v42 = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v13, v5);
      if (v41)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
        v44 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v43 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v44 >= v43 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
        v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v41);
        specialized Array._endMutation()(v39);
      }
      v35 += v36;
      --v33;
    }
    while (v33);
    v32 = (_QWORD *)v99;
    swift_release(v99);
    v19 = (_QWORD *)v102;
  }
  v45 = (void *)objc_opt_self(MTEpisode);
  swift_release(v32);
  sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  v47 = objc_msgSend(v45, "predicateForPersistentIds:", isa);

  v48 = objc_msgSend(v96, "objectsInEntity:predicate:sortDescriptors:", kMTEpisodeEntityName, v47, 0);
  if (!v48
    || (v49 = v48,
        v50 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr),
        v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50),
        v49,
        v52 = (uint64_t)sub_10034E70C(v51),
        swift_bridgeObjectRelease(v51),
        !v52))
  {
    v82 = sub_10003F544(&qword_1005654C0);
    inited = swift_initStackObject(v82, v101);
    *(_OWORD *)(inited + 16) = xmmword_1003CA200;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v84;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000032;
    *(_QWORD *)(inited + 56) = 0x800000010043FD60;
    v85 = sub_1001386B4(inited);
    v86 = objc_allocWithZone((Class)NSError);
    v87 = String._bridgeToObjectiveC()();
    v88 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v85);
    v89 = objc_msgSend(v86, "initWithDomain:code:userInfo:", v87, 2, v88);

    v95(v89, 1);
    return;
  }
  v53 = sub_10013925C((uint64_t)_swiftEmptyArrayStorage);
  v54 = v52 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)v52 >> 62))
  {
    v55 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v52);
    if (v55)
      goto LABEL_26;
LABEL_51:
    swift_bridgeObjectRelease_n(v52, 2);
    v95((id)v53, 0);

    swift_bridgeObjectRelease(v53);
    return;
  }
LABEL_53:
  if (v52 >= 0)
    v90 = v54;
  else
    v90 = v52;
  swift_bridgeObjectRetain_n(v52, 2);
  v55 = _CocoaArrayWrapper.endIndex.getter(v90);
  swift_bridgeObjectRelease(v52);
  if (!v55)
    goto LABEL_51;
LABEL_26:
  v56 = 0;
  v99 = v52 & 0xC000000000000001;
  while (2)
  {
    v98 = v53;
    v53 = v56;
    while (1)
    {
      if (v99)
        v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v53, v52);
      else
        v59 = *(id *)(v52 + 8 * v53 + 32);
      v60 = v59;
      v56 = v53 + 1;
      if (__OFADD__(v53, 1))
      {
        __break(1u);
        goto LABEL_53;
      }
      v61 = objc_msgSend(v59, "uuid");
      if (v61)
        break;
LABEL_28:
      v57 = static os_log_type_t.error.getter();
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v58 = (void *)static OS_os_log.downloads.getter();
      os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Fetched episode has no uuid or persistentID", 43, 2, _swiftEmptyArrayStorage);

      ++v53;
      if (v56 == v55)
      {
        v53 = v98;
        goto LABEL_51;
      }
    }
    v62 = v61;
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v65 = v64;

    if (!sub_100373860((uint64_t)objc_msgSend(v60, "persistentID")))
    {
      swift_bridgeObjectRelease(v65);
      goto LABEL_28;
    }
    v96 = v47;
    v66 = objc_msgSend(v60, "persistentID");
    v67 = v91;
    MediaLibraryPid.init(_:)(v66);
    v68 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
    v68(v93, v67, v5);
    v69 = (_QWORD *)v98;
    LODWORD(v97) = swift_isUniquelyReferenced_nonNull_native(v98);
    v102 = (unint64_t)v69;
    v71 = sub_10002E5D8(v63, v65);
    v72 = v69[2];
    v73 = (v70 & 1) == 0;
    v74 = v72 + v73;
    if (__OFADD__(v72, v73))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v69[3] >= v74)
    {
      if ((v97 & 1) != 0)
      {
        v77 = (_QWORD *)v102;
        if ((v70 & 1) == 0)
          goto LABEL_45;
      }
      else
      {
        LODWORD(v98) = v70;
        sub_10021F578();
        v77 = (_QWORD *)v102;
        if ((v98 & 1) == 0)
          goto LABEL_45;
      }
LABEL_43:
      (*(void (**)(unint64_t, char *, uint64_t))(v100 + 40))(v77[7] + *(_QWORD *)(v100 + 72) * v71, v93, v5);
LABEL_47:
      v47 = v96;
      v53 = v102;

      swift_bridgeObjectRelease(v65);
      swift_bridgeObjectRelease(0x8000000000000000);
      if (v56 != v55)
        continue;
      goto LABEL_51;
    }
    break;
  }
  LODWORD(v98) = v70;
  sub_10021A578(v74, v97);
  v75 = sub_10002E5D8(v63, v65);
  if ((v98 & 1) != (v76 & 1))
    goto LABEL_60;
  v71 = v75;
  v77 = (_QWORD *)v102;
  if ((v98 & 1) != 0)
    goto LABEL_43;
LABEL_45:
  v77[(v71 >> 6) + 8] |= 1 << v71;
  v78 = (uint64_t *)(v77[6] + 16 * v71);
  *v78 = v63;
  v78[1] = v65;
  v68((char *)(v77[7] + *(_QWORD *)(v100 + 72) * v71), v93, v5);
  v79 = v77[2];
  v80 = __OFADD__(v79, 1);
  v81 = v79 + 1;
  if (!v80)
  {
    v77[2] = v81;
    swift_bridgeObjectRetain(v65);
    goto LABEL_47;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100373128(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(id, uint64_t))
{
  NSString v8;
  id v9;
  id v10;
  id v11;

  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a1, "episodeForUuid:", v8);

  if (v9)
  {
    v10 = sub_1002BBC8C(a4);
    if (v10)
    {
      v11 = v10;
      a5(v10, 0);

      return;
    }

  }
  a5(0, 1);
}

void sub_1003731F4(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  NSString v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(a1, "episodeForUuid:", v6);

  if (v13)
  {
    v7 = objc_msgSend(v13, "podcastUuid");
    if (v7)
    {
      v8 = v7;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v11 = v10;

    }
    else
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTLibraryDefaultImageKey);
      v11 = v12;
    }
    a4(v9, v11, 0);
    swift_bridgeObjectRelease(v11);

  }
  else
  {
    a4(0, 0, 1);
  }
}

uint64_t sub_1003732F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_10003D380((_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_100373320()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100373354()
{
  uint64_t v0;

  return sub_1003707C0(*(void **)(v0 + 16), *(void (**)(char *, uint64_t, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100373364()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100373374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100566948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003733BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100566948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100373404(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  char v59[8];

  v5 = v4;
  v50 = a4;
  v53 = a3;
  v47 = a1;
  type metadata accessor for EpisodeMetadata(0);
  __chkstk_darwin();
  v46 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v52 = (uint64_t)&v46 - v8;
  v9 = *(_QWORD *)(a2 + 56);
  v49 = a2 + 56;
  v10 = 1 << *(_BYTE *)(a2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v51 = (unint64_t)(v10 + 63) >> 6;
  v54 = a2;
  swift_bridgeObjectRetain(a2);
  v13 = 0;
  v48 = xmmword_1003CA220;
  while (v12)
  {
    v17 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v18 = v17 | (v13 << 6);
    v19 = v53;
LABEL_20:
    v23 = *(_QWORD *)(v54 + 48) + 16 * v18;
    v24 = *(void (**)(char *, uint64_t, uint64_t))v23;
    v25 = *(_QWORD *)(v23 + 8);
    swift_bridgeObjectRetain(v25);
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v19, "episodeForUuid:", v26);

    if (v27)
    {
      swift_bridgeObjectRetain(v25);
      v29 = v5;
      sub_100370B2C(v24, v25, v27, v19, v52);
      if (v5)
      {

        swift_bridgeObjectRelease(v25);
        v55 = static os_log_type_t.error.getter(v30);
        v31 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
        v32 = (void *)static OS_os_log.downloads.getter(v31);
        v33 = sub_10003F544(&qword_1005559A0);
        v34 = swift_allocObject(v33, 112, 7);
        v56 = v12;
        v35 = v13;
        v36 = (_QWORD *)v34;
        *(_OWORD *)(v34 + 16) = v48;
        *(_QWORD *)(v34 + 56) = &type metadata for String;
        v37 = sub_10003E198();
        v36[8] = v37;
        v36[4] = v24;
        v36[5] = v25;
        swift_getErrorValue(v29, v59, v58);
        v38 = v58[1];
        v39 = v58[2];
        swift_bridgeObjectRetain(v25);
        v40 = Error.localizedDescription.getter(v38, v39);
        v36[12] = &type metadata for String;
        v36[13] = v37;
        v36[9] = v40;
        v36[10] = v41;
        os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v32, "Failed to create episode metadata for episode uuid %{public}s error: %s", 71, 2, v36);

        v42 = v36;
        v13 = v35;
        v12 = v56;
        swift_bridgeObjectRelease(v42);
        swift_errorRelease();
        swift_bridgeObjectRelease(v25);
        v5 = 0;
      }
      else
      {
        v43 = v46;
        sub_1003069C8(v52, v46);
        v44 = v47;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v47);
        v57 = v44;
        sub_10021CE18(v43, (uint64_t)v24, v25, isUniquelyReferenced_nonNull_native);
        v47 = v57;

        swift_bridgeObjectRelease_n(v25, 2);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
    }
    else
    {
      v14 = static os_log_type_t.info.getter(v28);
      v15 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v16 = (void *)static OS_os_log.downloads.getter(v15);
      os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v16, "Failed to create episode metadata. Episode not found.", 53, 2, _swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(v25);

    }
  }
  if (__OFADD__(v13++, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v13 >= v51)
    goto LABEL_28;
  v21 = *(_QWORD *)(v49 + 8 * v13);
  v19 = v53;
  if (v21)
  {
LABEL_19:
    v12 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v13 << 6);
    goto LABEL_20;
  }
  v22 = v13 + 1;
  if (v13 + 1 >= v51)
    goto LABEL_28;
  v21 = *(_QWORD *)(v49 + 8 * v22);
  if (v21)
    goto LABEL_18;
  v22 = v13 + 2;
  if (v13 + 2 >= v51)
    goto LABEL_28;
  v21 = *(_QWORD *)(v49 + 8 * v22);
  if (v21)
    goto LABEL_18;
  v22 = v13 + 3;
  if (v13 + 3 >= v51)
    goto LABEL_28;
  v21 = *(_QWORD *)(v49 + 8 * v22);
  if (v21)
    goto LABEL_18;
  v22 = v13 + 4;
  if (v13 + 4 >= v51)
  {
LABEL_28:
    swift_release(v54);
    return;
  }
  v21 = *(_QWORD *)(v49 + 8 * v22);
  if (v21)
  {
LABEL_18:
    v13 = v22;
    goto LABEL_19;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v51)
      goto LABEL_28;
    v21 = *(_QWORD *)(v49 + 8 * v13);
    ++v22;
    if (v21)
      goto LABEL_19;
  }
LABEL_30:
  __break(1u);
}

BOOL sub_100373860(uint64_t a1)
{
  return kEpisodePersistentIdNotInMediaLibrary != a1;
}

uint64_t destroy for ValidatorResult(uint64_t a1)
{
  return sub_1001520B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s8Podcasts15ValidatorResultOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100340DE0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ValidatorResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100340DE0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1001520B8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ValidatorResult(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1001520B8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValidatorResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3D && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 61);
  v3 = (*(_BYTE *)(a1 + 16) & 0x3C | (*(unsigned __int8 *)(a1 + 16) >> 6)) ^ 0x3F;
  if (v3 >= 0x3C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ValidatorResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3C)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 61;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3D)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x3D)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_100373A10(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16) >> 6;
  if (v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_100373A2C(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 3 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for ValidatorResult()
{
  return &type metadata for ValidatorResult;
}

char *sub_100373AEC(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v6;
  objc_class *v7;
  id v8;
  char *v9;
  id v10;
  NSString v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  void *object;
  NSString v20;
  id v21;
  id v22;
  id v23;
  objc_super v25;
  Swift::String v26;

  *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_contentViewController] = 0;
  v6 = &v3[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_newEpisodeNotifcationGroupInitialHighlightedPodcastUuid];
  v7 = (objc_class *)type metadata accessor for MTNotificationSettingsSectionedViewController();
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v8 = objc_allocWithZone(v7);
  v9 = v3;
  v10 = objc_msgSend(v8, "init");
  *(_QWORD *)&v9[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_sectionedContentViewController] = v10;

  if (a2)
  {
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v11 = 0;
  }
  v25.receiver = v9;
  v25.super_class = (Class)type metadata accessor for MTNotificationSettingsViewController();
  v12 = (char *)objc_msgSendSuper2(&v25, "initWithNibName:bundle:", v11, a3);

  v13 = *(_QWORD *)&v12[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_sectionedContentViewController]
      + OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_delegate;
  *(_QWORD *)(v13 + 8) = &off_1004C6720;
  swift_unknownObjectWeakAssign(v13, v12);
  v14 = v12;
  v15 = objc_msgSend(v14, "navigationItem");
  v16 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v26._object = (void *)0xED0000736E6F6974;
  v17._object = (void *)0x800000010043FE70;
  v17._countAndFlagsBits = 0xD00000000000001BLL;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0x6163696669746F4ELL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v26)._object;

  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "setTitle:", v20, swift_bridgeObjectRelease(object).n128_f64[0]);

  v21 = objc_msgSend(v14, "navigationItem");
  objc_msgSend(v21, "setLargeTitleDisplayMode:", 2);

  v22 = objc_msgSend(v14, "navigationItem");
  v23 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithBarButtonSystemItem:target:action:", 0, v14, "dismissButtonTappedFrom:");
  objc_msgSend(v22, "setRightBarButtonItem:", v23);

  return v14;
}

Swift::Void __swiftcall MTNotificationSettingsViewController.viewDidLoad()()
{
  char *v0;
  void *v1;
  id v2;
  objc_super v3;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MTNotificationSettingsViewController();
  objc_msgSendSuper2(&v3, "viewDidLoad");
  v1 = *(void **)&v0[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_sectionedContentViewController];
  v2 = v1;
  sub_1003741B8(v1);
}

uint64_t type metadata accessor for MTNotificationSettingsViewController()
{
  return objc_opt_self(_TtC8Podcasts36MTNotificationSettingsViewController);
}

Swift::Void __swiftcall MTNotificationSettingsViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MTNotificationSettingsViewController();
  objc_msgSendSuper2(&v3, "viewWillAppear:", a1);
  sub_1001A8450();
}

Swift::Void __swiftcall MTNotificationSettingsViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MTNotificationSettingsViewController();
  objc_msgSendSuper2(&v3, "viewDidAppear:", a1);
  if (qword_100552088 != -1)
    swift_once(&qword_100552088, sub_10025BAF0);
  swift_unknownObjectWeakAssign(qword_100572F28+ OBJC_IVAR____TtC8Podcasts44MTNotificationSettingsPresentationController_activePresentedSettingsViewController);
}

Swift::Void __swiftcall MTNotificationSettingsViewController.viewDidDisappear(_:)(Swift::Bool a1)
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MTNotificationSettingsViewController();
  objc_msgSendSuper2(&v3, "viewDidDisappear:", a1);
  if (qword_100552088 != -1)
    swift_once(&qword_100552088, sub_10025BAF0);
  swift_unknownObjectWeakAssign(qword_100572F28+ OBJC_IVAR____TtC8Podcasts44MTNotificationSettingsPresentationController_activePresentedSettingsViewController);
}

void sub_1003741B8(void *a1)
{
  char *v1;
  char *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;

  v2 = v1;
  v3 = a1;
  v4 = OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_contentViewController;
  v5 = *(void **)&v2[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_contentViewController];
  *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_contentViewController] = a1;
  v27 = a1;
  if (v5)
  {
    if (v3)
    {
      sub_100374558();
      v6 = v5;
      v7 = v27;
      v8 = static NSObject.== infix(_:_:)(v6, v7);

      if ((v8 & 1) != 0)
      {
        v27 = v7;
LABEL_15:

        return;
      }
    }
    v6 = v5;
    objc_msgSend(v6, "willMoveToParentViewController:", 0);
    objc_msgSend(v6, "removeFromParentViewController");
    objc_msgSend(v6, "didMoveToParentViewController:", 0);

    v3 = *(void **)&v2[v4];
    if (!v3)
      goto LABEL_15;
  }
  else if (!v3)
  {
    v6 = 0;
    goto LABEL_15;
  }
  v6 = v3;
  objc_msgSend(v6, "willMoveToParentViewController:", v2);
  v9 = objc_msgSend(v6, "view");
  if (!v9)
  {
    __break(1u);
    goto LABEL_17;
  }
  v10 = v9;
  v11 = objc_msgSend(v2, "view");
  if (!v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v12 = v11;
  objc_msgSend(v11, "bounds");
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;

  objc_msgSend(v10, "setFrame:", v14, v16, v18, v20);
  v21 = objc_msgSend(v6, "view");
  if (!v21)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v22 = v21;
  objc_msgSend(v21, "setAutoresizingMask:", 18);

  objc_msgSend(v2, "addChildViewController:", v6);
  v23 = objc_msgSend(v2, "view");
  if (!v23)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v24 = v23;
  v25 = objc_msgSend(v6, "view");
  if (v25)
  {
    v26 = v25;
    objc_msgSend(v24, "addSubview:", v25);

    objc_msgSend(v6, "didMoveToParentViewController:", v2);
    objc_msgSend(v2, "addChildViewController:", v6);

    v27 = v6;
    goto LABEL_15;
  }
LABEL_20:
  __break(1u);
}

id MTNotificationSettingsViewController.dismissButtonTapped(from:)()
{
  void *v0;

  return objc_msgSend(v0, "dismissViewControllerAnimated:completion:", 1, 0);
}

id MTNotificationSettingsViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MTNotificationSettingsViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_100374558()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100554578;
  if (!qword_100554578)
  {
    v1 = objc_opt_self(UIViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100554578);
  }
  return result;
}

_QWORD *sub_100374594(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_100048628(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    v15 = v1 & 0xC000000000000001;
    v5 = v1;
    while (v2 != v4)
    {
      if (v15)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
        v7 = v6;
      }
      else
      {
        v7 = *(_QWORD *)(v1 + 8 * v4 + 32);
        swift_retain();
      }
      v8 = Episode.title.getter(v6);
      v10 = v9;
      swift_release(v7);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_100048628(v11 > 1, v12 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      v1 = v5;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (v1 < 0)
      v14 = v1;
    else
      v14 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100374704(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v2)
  {
    v3 = _swiftEmptyArrayStorage;
    v4 = 4;
    while (1)
    {
      v6 = v4 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1);
      v8 = v4 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_16;
LABEL_11:
      v9 = swift_retain();
      v10 = dispatch thunk of StationShow.modernLockup.getter(v9);
      v12 = LegacyLockup.title.getter(v10, v11);
      v14 = v13;
      swift_release_n(v7, 2);
      swift_release(v10);
      if (v14)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = sub_10027AE00(0, v3[2] + 1, 1, v3);
        v16 = v3[2];
        v15 = v3[3];
        if (v16 >= v15 >> 1)
          v3 = sub_10027AE00((_QWORD *)(v15 > 1), v16 + 1, 1, v3);
        v3[2] = v16 + 1;
        v5 = &v3[2 * v16];
        v5[4] = v12;
        v5[5] = v14;
      }
      ++v4;
      if (v8 == v2)
        goto LABEL_22;
    }
    v7 = *(_QWORD *)(a1 + 8 * v4);
    swift_retain();
    v8 = v4 - 3;
    if (!__OFADD__(v6, 1))
      goto LABEL_11;
LABEL_16:
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v17);
  }
  v3 = _swiftEmptyArrayStorage;
LABEL_22:
  swift_bridgeObjectRelease(a1);
  return v3;
}

uint64_t sub_1003748A4(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __n128 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _OWORD *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  uint64_t v132;
  uint64_t v133;
  void (**v134)(uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;

  v132 = a5;
  v133 = a6;
  v130 = a4;
  v131 = a3;
  v137 = a2;
  v129 = a1;
  v6 = sub_10003F544(&qword_100566990);
  v139 = *(_QWORD *)(v6 - 8);
  v140 = v6;
  __chkstk_darwin();
  v138 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_10003F544(&qword_100566998);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin();
  v117 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_10003F544(&qword_1005669A0);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin();
  v121 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_10003F544(&qword_1005669A8);
  v125 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin();
  v122 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_10003F544(&qword_1005669B0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin();
  v126 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_10003F544(&qword_1005669B8);
  v118 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin();
  v134 = (void (**)(uint64_t, uint64_t))((char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v113 = sub_10003F544(&qword_1005669C0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin();
  v111 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_10003F544(&qword_1005669C8);
  v115 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin();
  v114 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544(&qword_1005669D0);
  v16 = *(void (***)(uint64_t, uint64_t))(v15 - 8);
  __chkstk_darwin();
  v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544(&qword_1005669D8);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin();
  v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10003F544(&qword_1005669E0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin();
  v27 = (char *)&v110 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = StationDetail.grouped.getter(v25);
  if ((v28 & 1) != 0)
  {
    v128 = (uint64_t)v18;
    v134 = v16;
    v135 = v15;
    v136 = v20;
    v126 = (char *)v19;
    v137 = v24;
    v127 = v23;
    v29 = dispatch thunk of StationDetail.visibleShows.getter();
    if (v29)
    {
      v30 = v29;
      *(_QWORD *)&v142 = v29;
      v31 = sub_10003F544(&qword_100566A40);
      v32 = sub_10002F9C8(&qword_100566A48, &qword_100566A40, (uint64_t)&protocol conformance descriptor for [A]);
      if ((Collection.isNotEmpty.getter(v31, v32, v33) & 1) != 0)
      {
        *(_QWORD *)&v142 = v30;
        v34 = sub_10002F9C8(&qword_100566A50, &qword_100566A40, (uint64_t)&protocol conformance descriptor for [A]);
        v35 = v111;
        Sequence.publisher.getter(v31, v34);
        v37 = StationDetail.title.getter(v36);
        v39 = v38;
        v40 = StationDetail.uuid.getter(v37);
        v42 = v41;
        sub_10000A520(v129, (uint64_t)&v142);
        sub_10000A520(v130, (uint64_t)&v141);
        v43 = swift_allocObject(&unk_1004C6798, 192, 7);
        *(_QWORD *)(v43 + 16) = v40;
        *(_QWORD *)(v43 + 24) = v42;
        *(_QWORD *)(v43 + 32) = v37;
        *(_QWORD *)(v43 + 40) = v39;
        sub_10002099C(&v142, v43 + 48);
        v44 = v131;
        v45 = v131[1];
        *(_OWORD *)(v43 + 88) = *v131;
        *(_OWORD *)(v43 + 104) = v45;
        *(_OWORD *)(v43 + 120) = v44[2];
        sub_10002099C(&v141, v43 + 136);
        v46 = v133;
        *(_QWORD *)(v43 + 176) = v132;
        *(_QWORD *)(v43 + 184) = v46;
        swift_retain();
        v48 = static Subscribers.Demand.unlimited.getter(v47);
        v49 = sub_10003F544(&qword_1005552C0);
        v50 = sub_10002F9C8(&qword_100566A58, &qword_1005669C0, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
        v51 = sub_10002F9C8((unint64_t *)&unk_1005552D0, &qword_1005552C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        v52 = v114;
        v53 = v113;
        Publisher<>.flatMap<A>(maxPublishers:_:)(v48, sub_1003758E0, v43, v113, v49, v50, v51);
        v54 = swift_release(v43);
        (*(void (**)(char *, uint64_t, __n128))(v112 + 8))(v35, v53, v54);
        v55 = sub_10037576C();
        v56 = sub_10002F9C8(&qword_100566A60, &qword_1005669C8, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
        v57 = v128;
        v58 = v116;
        Publisher.compactMap<A>(_:)(sub_100183858, 0, v116, v55, v56);
        (*(void (**)(char *, uint64_t))(v115 + 8))(v52, v58);
        v59 = sub_10002F9C8(&qword_100566A68, &qword_1005669D0, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
        v60 = v135;
        Publisher.collect()(v135, v59);
        v134[1](v57, v60);
        v61 = swift_allocObject(&unk_1004C67C0, 24, 7);
        *(_QWORD *)(v61 + 16) = v30;
        v62 = sub_10003F544(&qword_1005669E8);
        v63 = sub_10002F9C8(&qword_100566A70, &qword_1005669D8, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
        v64 = v126;
        Publisher.map<A>(_:)(sub_100375918, v61, v126, v62, v63);
        v65 = swift_release(v61);
        (*(void (**)(char *, char *, __n128))(v136 + 8))(v22, v64, v65);
        v66 = sub_10002F9C8(&qword_100566A78, &qword_1005669E0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
        v67 = v127;
        v68 = Publisher.eraseToAnyPublisher()(v127, v66);
        v69 = *(void (**)(char *, uint64_t))(v137 + 8);
        v70 = v27;
LABEL_10:
        v69(v70, v67);
        return v68;
      }
      goto LABEL_8;
    }
LABEL_9:
    *(_QWORD *)&v142 = 0;
    v106 = sub_10003F544(&qword_1005669E8);
    v107 = v138;
    Just.init(_:)(&v142, v106);
    v108 = sub_10002F9C8(&qword_1005669F0, &qword_100566990, (uint64_t)&protocol conformance descriptor for Just<A>);
    v67 = v140;
    v68 = Publisher.eraseToAnyPublisher()(v140, v108);
    v69 = *(void (**)(char *, uint64_t))(v139 + 8);
    v70 = v107;
    goto LABEL_10;
  }
  v72 = v136;
  v71 = v137;
  v73 = (char *)v134;
  v74 = v135;
  v75 = dispatch thunk of StationDetail.episodes.getter(v28);
  if (!v75)
    goto LABEL_9;
  v76 = v133;
  v30 = v75;
  *(_QWORD *)&v142 = v75;
  v77 = sub_10003F544(&qword_1005669F8);
  v78 = sub_10002F9C8(&qword_100566A00, &qword_1005669F8, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v77, v78, v79) & 1) == 0)
  {
LABEL_8:
    swift_bridgeObjectRelease(v30);
    goto LABEL_9;
  }
  *(_QWORD *)&v142 = v30;
  v80 = sub_10002F9C8((unint64_t *)&unk_100566A08, &qword_1005669F8, (uint64_t)&protocol conformance descriptor for [A]);
  v81 = v117;
  Sequence.publisher.getter(v77, v80);
  sub_10000A520(v129, (uint64_t)&v142);
  sub_10000A520(v130, (uint64_t)&v141);
  v82 = swift_allocObject(&unk_1004C6748, 168, 7);
  sub_10002099C(&v142, v82 + 16);
  *(_QWORD *)(v82 + 56) = v71;
  v83 = v131;
  v84 = v131[1];
  *(_OWORD *)(v82 + 64) = *v131;
  *(_OWORD *)(v82 + 80) = v84;
  *(_OWORD *)(v82 + 96) = v83[2];
  sub_10002099C(&v141, v82 + 112);
  *(_QWORD *)(v82 + 152) = v132;
  *(_QWORD *)(v82 + 160) = v76;
  swift_retain();
  swift_retain();
  v86 = static Subscribers.Demand.unlimited.getter(v85);
  v87 = sub_10003F544(&qword_1005552C0);
  v88 = sub_10002F9C8(&qword_100566A18, &qword_100566998, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  v89 = sub_10002F9C8((unint64_t *)&unk_1005552D0, &qword_1005552C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v90 = v121;
  v91 = v86;
  v92 = v120;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v91, sub_100375754, v82, v120, v87, v88, v89);
  v93 = swift_release(v82);
  (*(void (**)(char *, uint64_t, __n128))(v119 + 8))(v81, v92, v93);
  v94 = sub_10037576C();
  v95 = sub_10002F9C8(&qword_100566A20, &qword_1005669A0, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v96 = v122;
  v97 = v124;
  Publisher.compactMap<A>(_:)(sub_1002E5BEC, 0, v124, v94, v95);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v90, v97);
  v98 = sub_10002F9C8(&qword_100566A28, &qword_1005669A8, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v99 = v126;
  Publisher.collect()(v72, v98);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v96, v72);
  v100 = swift_allocObject(&unk_1004C6770, 24, 7);
  *(_QWORD *)(v100 + 16) = v30;
  v101 = sub_10003F544(&qword_1005669E8);
  v102 = sub_10002F9C8(&qword_100566A30, &qword_1005669B0, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  v103 = v128;
  Publisher.map<A>(_:)(sub_100375894, v100, v128, v101, v102);
  v104 = swift_release(v100);
  (*(void (**)(char *, uint64_t, __n128))(v127 + 8))(v99, v103, v104);
  v105 = sub_10002F9C8(&qword_100566A38, &qword_1005669B8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v68 = Publisher.eraseToAnyPublisher()(v74, v105);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v73, v74);
  return v68;
}

uint64_t sub_100375380@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _OWORD *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10)
{
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD v31[8];
  char v32;

  v14 = swift_bridgeObjectRetain(a2);
  v15 = StationShow.uuid.getter(v14);
  v17 = v16;
  v18 = StationShow.podcast.getter();
  v20 = Podcast.uuid.getter(v19);
  v22 = v21;
  swift_release(v18);
  v23 = swift_bridgeObjectRetain(a4);
  v24 = dispatch thunk of StationShow.modernLockup.getter(v23);
  v31[0] = a1;
  v31[1] = a2;
  v31[2] = v15;
  v31[3] = v17;
  v31[4] = a3;
  v31[5] = a4;
  v31[6] = v20;
  v31[7] = v22;
  v32 = 4;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v22);
  v25 = sub_1002F99C8(a5, (uint64_t)v31, 0, a6, a7, a9, a10);
  swift_release(v24);
  swift_bridgeObjectRelease_n(v22, 2);
  swift_bridgeObjectRelease_n(a4, 2);
  swift_bridgeObjectRelease_n(v17, 2);
  result = swift_bridgeObjectRelease_n(a2, 2);
  *a8 = v25;
  return result;
}

void sub_1003754CC(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = sub_100374704(a2);
  v6 = v5;
  if (v4 < 0 || (v4 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
    v7 = (uint64_t)sub_1001F9A98(v8);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v7 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
  }
  v9 = v7;
  sub_1001FCB68(&v9, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v6);
  *a3 = v9;
}

void sub_10037558C(unint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v22 = a7;
  sub_10003F544((uint64_t *)&unk_100553DE0);
  __chkstk_darwin();
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_10055B790);
  __chkstk_darwin();
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = type metadata accessor for SectionContext(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 1, 1, v18);
  v19 = dispatch thunk of Episode.defaultLockup(for:sectionContext:)(v16, v14);
  sub_100007A28((uint64_t)v14, (uint64_t *)&unk_100553DE0);
  sub_100007A28((uint64_t)v16, &qword_10055B790);
  v20 = sub_1002F8AB8(a1, a2, 1, 0, 10, a3, a4, a5, a6);
  swift_release(v19);
  *v22 = v20;
}

uint64_t sub_100375718()
{
  _QWORD *v0;

  sub_10003D380(v0 + 2);
  swift_release(v0[7]);
  sub_10003D380(v0 + 14);
  swift_release(v0[20]);
  return swift_deallocObject(v0, 168, 7);
}

void sub_100375754(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_10037558C(v1 + 16, *(_QWORD *)(v1 + 56), (_OWORD *)(v1 + 64), v1 + 112, *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160), a1);
}

unint64_t sub_10037576C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100559F60;
  if (!qword_100559F60)
  {
    v1 = objc_opt_self(CPListItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100559F60);
  }
  return result;
}

void sub_1003757A8(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = sub_100374594(a2);
  v6 = v5;
  if (v4 < 0 || (v4 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
    v7 = (uint64_t)sub_1001F9A98(v8);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v7 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
  }
  v9 = v7;
  sub_1001FCB68(&v9, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v6);
  *a3 = v9;
}

uint64_t sub_100375870()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100375894(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1003757A8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_10037589C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  sub_10003D380(v0 + 6);
  sub_10003D380(v0 + 17);
  swift_release(v0[23]);
  return swift_deallocObject(v0, 192, 7);
}

uint64_t sub_1003758E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100375380(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + 48, (_OWORD *)(v1 + 88), v1 + 136, a1, *(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184));
}

void sub_100375918(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1003754CC(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_100375924()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  id v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint8_t *v27;
  id v28;
  uint64_t v29;
  void *v30;

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static Podcasts.isBlueMoonEnabled()(v7);
  v11 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v28 = v11;
  if ((v10 & 1) != 0)
  {
    v12 = objc_msgSend(v11, "BOOLForKey:", kMTSuccessfullyMigratedLegacyPlaybackQueue);

    if ((v12 & 1) == 0)
    {
      static Logger.modernPlayback.getter(v13);
      v14 = swift_retain_n(v1, 2);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.default.getter(v15);
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v18 = (void *)swift_slowAlloc(32, -1);
        v28 = v18;
        *(_DWORD *)v17 = 136315138;
        v27 = v17 + 4;
        v29 = *v1;
        v30 = v18;
        v19 = sub_10003F544(&qword_100566B60);
        v20 = String.init<A>(describing:)(&v29, v19);
        v22 = v21;
        v29 = sub_10003D274(v20, v21, (uint64_t *)&v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v27, v17 + 12);
        swift_bridgeObjectRelease(v22);
        swift_release_n(v1, 2);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%s] Performing legacy queue migration.", v17, 0xCu);
        v23 = v28;
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }
      else
      {
        swift_release_n(v1, 2);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      v24 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v4, 1, 1, v24);
      v25 = (_QWORD *)swift_allocObject(&unk_1004C6800, 40, 7);
      v25[2] = 0;
      v25[3] = 0;
      v25[4] = v1;
      swift_retain(v1);
      v26 = sub_10034F744((uint64_t)v4, (uint64_t)&unk_100566BA0, (uint64_t)v25);
      swift_release(v26);
    }
  }
  else
  {
    objc_msgSend(v11, "setBool:forKey:", 0, kMTSuccessfullyMigratedLegacyPlaybackQueue);

  }
}

uint64_t sub_100375C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4[5] = a4;
  v5 = type metadata accessor for Logger(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_100566AAC);
  v4[9] = v7;
  *v7 = v4;
  v7[1] = sub_100375C90;
  return sub_100375FB0();
}

uint64_t sub_100375C90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100375D04, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 64));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100375D04(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v3 = v1 + 5;
  static Logger.modernPlayback.getter(a1);
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = v1[10];
    v23 = v1[7];
    v8 = (_QWORD *)v1[5];
    v24 = v1[6];
    v25 = v1[8];
    v9 = swift_slowAlloc(22, -1);
    v21 = (uint64_t *)swift_slowAlloc(8, -1);
    v22 = swift_slowAlloc(32, -1);
    v26 = v22;
    *(_DWORD *)v9 = 136315394;
    v1[2] = *v8;
    v10 = sub_10003F544(&qword_100566B60);
    v11 = String.init<A>(describing:)(v1 + 2, v10);
    v13 = v12;
    v2[3] = sub_10003D274(v11, v12, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 3, v2 + 4, v9 + 4, v9 + 12);
    swift_release_n(v8, 2);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    v14 = _swift_stdlib_bridgeErrorToNSError(v7);
    v2[4] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 4, v3, v9 + 14, v9 + 22);
    *v21 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s] Error migrating old player queue: %@", (uint8_t *)v9, 0x16u);
    v15 = sub_10003F544((uint64_t *)&unk_100556480);
    swift_arrayDestroy(v21, 1, v15);
    swift_slowDealloc(v21, -1, -1);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }
  else
  {
    v17 = v1[7];
    v16 = v1[8];
    v19 = v1[5];
    v18 = v1[6];
    swift_errorRelease();
    swift_release_n(v19, 2);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  swift_task_dealloc(v2[8]);
  return ((uint64_t (*)(void))v2[1])();
}

uint64_t sub_100375FB0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1[36] = v0;
  v2 = type metadata accessor for MediaIdentifier(0);
  v1[37] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[38] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[39] = swift_task_alloc(v4);
  v1[40] = swift_task_alloc(v4);
  v1[41] = swift_task_alloc(v4);
  v5 = type metadata accessor for PlaybackController.QueueCommand(0);
  v1[42] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[43] = v6;
  v1[44] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v1[45] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[46] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[47] = swift_task_alloc(v9);
  v1[48] = swift_task_alloc(v9);
  v1[49] = swift_task_alloc(v9);
  v1[50] = swift_task_alloc(v9);
  v10 = sub_10003F544(&qword_10055A7B0);
  v1[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PlaybackIntent(0);
  v1[52] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[53] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[54] = swift_task_alloc(v13);
  v1[55] = swift_task_alloc(v13);
  v1[56] = swift_task_alloc(v13);
  v1[57] = swift_task_alloc(v13);
  return swift_task_switch(sub_100376118, 0, 0);
}

uint64_t sub_100376118()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *ObjCClassFromMetadata;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v1, "setBool:forKey:", 1, kMTSuccessfullyMigratedLegacyPlaybackQueue);

  v2 = objc_msgSend((id)objc_opt_self(MTPlayerController), "_loadActivityForRestoration");
  *(_QWORD *)(v0 + 464) = v2;
  if (v2)
  {
    v3 = v2;
    v4 = v0 + 16;
    v5 = sub_100005EC8(0, &qword_100566B88, &off_1004A44B0);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v5);
    *(_QWORD *)(v0 + 56) = v0 + 224;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100376340;
    v7 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 120) = _NSConcreteStackBlock;
    v8 = (_QWORD *)(v0 + 120);
    v8[1] = 0x40000000;
    v8[2] = sub_100377E64;
    v8[3] = &unk_1004C67D8;
    v8[4] = v7;
    objc_msgSend(ObjCClassFromMetadata, "restoreActivity:completion:", v3, v8);
    return swift_continuation_await(v4);
  }
  else
  {
    v10 = sub_100378E8C();
    v24 = swift_allocError(&type metadata for LegacyPlaybackQueueMigrator.Error, v10, 0, 0);
    *v11 = 0;
    swift_willThrow(v24);
    v12 = *(_QWORD *)(v0 + 448);
    v14 = *(_QWORD *)(v0 + 432);
    v13 = *(_QWORD *)(v0 + 440);
    v16 = *(_QWORD *)(v0 + 400);
    v15 = *(_QWORD *)(v0 + 408);
    v18 = *(_QWORD *)(v0 + 384);
    v17 = *(_QWORD *)(v0 + 392);
    v19 = *(_QWORD *)(v0 + 376);
    v20 = *(_QWORD *)(v0 + 352);
    v21 = *(_QWORD *)(v0 + 328);
    v22 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 456));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100376340()
{
  return swift_task_switch(sub_10037638C, 0, 0);
}

uint64_t sub_10037638C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void **)(v0 + 224);
  *(_QWORD *)(v0 + 472) = v1;
  if (v1)
  {
    v2 = objc_opt_self(MTPlayerManifest);
    v3 = swift_dynamicCastObjCClass(v1, v2);
    *(_QWORD *)(v0 + 480) = v3;
    if (v3)
    {
      v4 = (_QWORD *)swift_task_alloc(dword_10056051C);
      *(_QWORD *)(v0 + 488) = v4;
      *v4 = v0;
      v4[1] = sub_100376524;
      return sub_1002BC960(*(_QWORD *)(v0 + 408));
    }

  }
  v6 = *(void **)(v0 + 464);
  v7 = sub_100378E8C();
  v21 = swift_allocError(&type metadata for LegacyPlaybackQueueMigrator.Error, v7, 0, 0);
  *v8 = 1;
  swift_willThrow(v21);

  v9 = *(_QWORD *)(v0 + 448);
  v11 = *(_QWORD *)(v0 + 432);
  v10 = *(_QWORD *)(v0 + 440);
  v13 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 384);
  v14 = *(_QWORD *)(v0 + 392);
  v16 = *(_QWORD *)(v0 + 376);
  v17 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 328);
  v19 = *(_QWORD *)(v0 + 320);
  v20 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 456));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100376524()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 488));
  return swift_task_switch(sub_100376578, 0, 0);
}

uint64_t sub_100376578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  void *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  id v31;
  void (*v32)(uint64_t, uint64_t);
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __n128 v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __n128 v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __n128 v69;
  void (*v70)(uint64_t, id, __n128);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  id v83;
  _QWORD *v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  char *v103;
  uint64_t v104[2];

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 408);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(void **)(v0 + 472);
  if (v4 == 1)
  {
    v6 = *(void **)(v0 + 464);
    sub_100007A28(v3, &qword_10055A7B0);
    v7 = sub_100378E8C();
    v100 = swift_allocError(&type metadata for LegacyPlaybackQueueMigrator.Error, v7, 0, 0);
    *v8 = 2;
    swift_willThrow(v100);

    v9 = *(_QWORD *)(v0 + 448);
    v11 = *(_QWORD *)(v0 + 432);
    v10 = *(_QWORD *)(v0 + 440);
    v13 = *(_QWORD *)(v0 + 400);
    v12 = *(_QWORD *)(v0 + 408);
    v15 = *(_QWORD *)(v0 + 384);
    v14 = *(_QWORD *)(v0 + 392);
    v16 = *(_QWORD *)(v0 + 376);
    v17 = *(_QWORD *)(v0 + 352);
    v89 = *(_QWORD *)(v0 + 328);
    v92 = *(_QWORD *)(v0 + 320);
    v96 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 456));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v89);
    swift_task_dealloc(v92);
    swift_task_dealloc(v96);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 288);
    v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 456), v3, v1);
    static Logger.modernPlayback.getter(v20);
    swift_retain_n(v19, 2);
    v21 = Logger.logObject.getter(v5);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v83 = *(id *)(v0 + 480);
      v86 = *(void **)(v0 + 472);
      v93 = *(_QWORD *)(v0 + 368);
      v97 = *(_QWORD *)(v0 + 360);
      v101 = *(_QWORD *)(v0 + 400);
      v23 = *(_QWORD **)(v0 + 288);
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(32, -1);
      v104[0] = v25;
      *(_DWORD *)v24 = 136315394;
      *(_QWORD *)(v0 + 264) = *v23;
      v26 = sub_10003F544(&qword_100566B60);
      v27 = String.init<A>(describing:)(v0 + 264, v26);
      v29 = v28;
      *(_QWORD *)(v0 + 272) = sub_10003D274(v27, v28, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v24 + 4, v24 + 12);
      swift_release_n(v23, 2);
      *(_QWORD *)&v30 = swift_bridgeObjectRelease(v29).n128_u64[0];
      *(_WORD *)(v24 + 12) = 2048;
      v31 = objc_msgSend(v83, "count", v30);

      *(_QWORD *)(v0 + 280) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v24 + 14, v24 + 22);

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%s] Loaded manifest with %ld items", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      v32 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
      v32(v101, v97);
    }
    else
    {
      v33 = *(void **)(v0 + 472);
      v34 = *(_QWORD *)(v0 + 400);
      v35 = *(_QWORD *)(v0 + 360);
      v36 = *(_QWORD *)(v0 + 368);
      v37 = *(_QWORD *)(v0 + 288);

      swift_release_n(v37, 2);
      v32 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v32(v34, v35);
    }
    v102 = v32;
    *(_QWORD *)(v0 + 496) = v32;
    v38 = *(_QWORD *)(v0 + 448);
    v39 = *(_QWORD *)(v0 + 416);
    v40 = *(_QWORD *)(v0 + 352);
    v84 = *(_QWORD **)(v0 + 424);
    v87 = *(_QWORD *)(v0 + 344);
    v90 = *(_QWORD *)(v0 + 336);
    v94 = *(_QWORD *)(v0 + 288);
    v98 = *(_QWORD *)(v0 + 440);
    v41 = sub_10003F544(&qword_10055B7A0);
    v42 = type metadata accessor for PlaybackIntent.Option(0);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(unsigned __int8 *)(v43 + 80);
    v45 = (v44 + 32) & ~v44;
    v46 = swift_allocObject(v41, v45 + *(_QWORD *)(v43 + 72), v44 | 7);
    *(_OWORD *)(v46 + 16) = xmmword_1003CA200;
    v47 = v46 + v45;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 104))(v47, enum case for PlaybackIntent.Option.ignoreContinuousPlaybackSetting(_:), v42);
    v48 = sub_10013BB7C(v46);
    swift_setDeallocating(v46);
    swift_arrayDestroy(v47, 1, v42);
    swift_deallocClassInstance(v46, 32, 7);
    PlaybackIntent.withOptions(_:)(v48);
    v49 = swift_bridgeObjectRelease(v48);
    v50 = (void (*)(uint64_t, uint64_t, uint64_t, __n128))v84[2];
    v50(v40, v38, v39, v49);
    v51 = enum case for PlaybackController.QueueCommand.replace(_:);
    v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 104);
    *(_QWORD *)(v0 + 504) = v52;
    v53 = v52(v40, v51, v90);
    static Logger.modernPlayback.getter(v53);
    ((void (*)(uint64_t, uint64_t, uint64_t))v50)(v98, v38, v39);
    v54 = swift_retain_n(v94, 2);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter();
    v57 = os_log_type_enabled(v55, v56);
    v58 = *(_QWORD *)(v0 + 440);
    if (v57)
    {
      v82 = *(_QWORD *)(v0 + 432);
      v85 = *(id *)(v0 + 416);
      v99 = *(_QWORD *)(v0 + 392);
      v91 = *(_QWORD *)(v0 + 424);
      v95 = *(_QWORD *)(v0 + 360);
      v59 = *(_QWORD **)(v0 + 288);
      v60 = swift_slowAlloc(22, -1);
      v88 = swift_slowAlloc(64, -1);
      v104[0] = v88;
      *(_DWORD *)v60 = 136315394;
      *(_QWORD *)(v0 + 240) = *v59;
      v61 = sub_10003F544(&qword_100566B60);
      v62 = String.init<A>(describing:)(v0 + 240, v61);
      v64 = v63;
      *(_QWORD *)(v0 + 248) = sub_10003D274(v62, v63, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v60 + 4, v60 + 12);
      swift_release_n(v59, 2);
      v65 = swift_bridgeObjectRelease(v64);
      *(_WORD *)(v60 + 12) = 2080;
      v50(v82, v58, (uint64_t)v85, v65);
      v66 = String.init<A>(describing:)(v82, v85);
      v68 = v67;
      *(_QWORD *)(v0 + 256) = sub_10003D274(v66, v67, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v60 + 14, v60 + 22);
      v69 = swift_bridgeObjectRelease(v68);
      v70 = *(void (**)(uint64_t, id, __n128))(v91 + 8);
      v70(v58, v85, v69);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "[%s] Created intent from legacy queue with %s Sending to engine when available.", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v60, -1, -1);

      v72 = v95;
      v71 = v99;
    }
    else
    {
      v73 = *(_QWORD *)(v0 + 416);
      v74 = *(_QWORD *)(v0 + 424);
      v75 = *(_QWORD *)(v0 + 392);
      v76 = *(_QWORD *)(v0 + 360);
      swift_release_n(*(_QWORD *)(v0 + 288), 2);
      v70 = *(void (**)(uint64_t, id, __n128))(v74 + 8);
      ((void (*)(uint64_t, uint64_t))v70)(v58, v73);

      v71 = v75;
      v72 = v76;
    }
    v102(v71, v72);
    *(_QWORD *)(v0 + 512) = v70;
    v78 = *(_QWORD *)(v0 + 344);
    v77 = *(_QWORD *)(v0 + 352);
    v79 = *(_QWORD *)(v0 + 336);
    *(_QWORD *)(v0 + 520) = *(_QWORD *)(*(_QWORD *)(v0 + 288) + 16);
    *(_QWORD *)(v0 + 184) = v79;
    *(_QWORD *)(v0 + 192) = &protocol witness table for PlaybackController.QueueCommand;
    v80 = sub_1000242A8((_QWORD *)(v0 + 160));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v78 + 16))(v80, v77, v79);
    v103 = (char *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
         + async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:);
    v81 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
                                     + 1));
    *(_QWORD *)(v0 + 528) = v81;
    *v81 = v0;
    v81[1] = sub_100376CC0;
    return ((uint64_t (*)(uint64_t, _QWORD, double))v103)(v0 + 160, 0, 5.0);
  }
}

