uint64_t sub_100003E08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = *v2;
  v6 = *v2 + 40;
  swift_beginAccess(v6, v8, 1, 0);
  *(_QWORD *)(v5 + 48) = a2;
  swift_unknownObjectWeakAssign(v6, a1);
  return swift_unknownObjectRelease(a1);
}

void sub_100003EE0(id a1)
{
  void *v1;
  uint64_t v2;
  unsigned __int8 v3;
  id v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = kMTExternalCookiesHaveBeenPurged;
  v3 = objc_msgSend(v1, "BOOLForKey:", kMTExternalCookiesHaveBeenPurged);

  if ((v3 & 1) == 0)
  {
    +[MTURLSessionManager purgeExternalCookies](MTURLSessionManager, "purgeExternalCookies");
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v4, "setBool:forKey:", 1, v2);

  }
}

void sub_10000416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);
  _Unwind_Resume(a1);
}

void sub_100004300(uint64_t a1)
{
  id v1;
  void *v2;
  objc_super v3;

  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTLibrary;
  v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  v2 = (void *)qword_100567278;
  qword_100567278 = (uint64_t)v1;

}

uint64_t type metadata accessor for EpisodeDownloadStateControllerProvider()
{
  return objc_opt_self(_TtC8Podcasts38EpisodeDownloadStateControllerProvider);
}

unint64_t sub_1000043DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(&qword_100552BF0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v15 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v15);
    result = sub_100029DFC(v7, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for HUDPresenter()
{
  return objc_opt_self(_TtC8Podcasts12HUDPresenter);
}

uint64_t sub_1000045A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = "\b";
  result = type metadata accessor for MediaRequest.ContentType(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_1003CCB40;
    v4[7] = &unk_1003CCB40;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100004654(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[23];

  v8[0] = "\b";
  v8[1] = &unk_1003CAA50;
  v8[2] = &unk_1003CAA68;
  v8[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[5] = &unk_1003CAA80;
  v8[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[8] = &unk_1003CAA68;
  v8[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[12] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[13] = &unk_1003CAA98;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v8[14] = *(_QWORD *)(v2 - 8) + 64;
    v8[15] = &unk_1003CAAB0;
    v8[16] = (char *)&value witness table for Builtin.NativeObject + 64;
    v8[17] = "\b";
    v8[18] = &unk_1003CAAC8;
    v8[19] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4 = type metadata accessor for Calendar(319);
    if (v5 <= 0x3F)
    {
      v8[20] = *(_QWORD *)(v4 - 8) + 64;
      sub_100009A7C(319);
      if (v7 <= 0x3F)
      {
        v8[21] = *(_QWORD *)(v6 - 8) + 64;
        v8[22] = &unk_1003CAAE0;
        swift_updateClassMetadata2(a1, 256, 23, v8, a1 + 80);
      }
    }
  }
}

void sub_1000047F0(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("MTListenNowManagerListenNowContentDidChange"), 0);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "update");

}

void sub_100004850(id a1)
{
  NSMutableSet *v1;
  void *v2;
  NSMutableDictionary *v3;
  void *v4;

  v1 = objc_opt_new(NSMutableSet);
  v2 = (void *)qword_1005674F0;
  qword_1005674F0 = (uint64_t)v1;

  v3 = objc_opt_new(NSMutableDictionary);
  v4 = (void *)qword_1005674F8;
  qword_1005674F8 = (uint64_t)v3;

}

void sub_1000048DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100553498)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100553498);
  }
}

uint64_t type metadata accessor for PodcastsStateCoordinator()
{
  return objc_opt_self(_TtC8Podcasts24PodcastsStateCoordinator);
}

void sub_100004994(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clampsController"));
  objc_msgSend(v1, "reset");

}

id sub_100004A04()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PodcastsPlayerAdapter(0)), "init");
  qword_100573030 = (uint64_t)result;
  return result;
}

void sub_100004B9C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_100004BF0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_1003D4318;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_1003D4330;
    v4[6] = &unk_1003D4348;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100004C98(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MPVolumeController);
  objc_msgSend(*(id *)(a1 + 32), "setVolumeController:", v2);

}

uint64_t type metadata accessor for PodcastsStateTransitionsExternalEffects()
{
  return objc_opt_self(_TtC8Podcasts39PodcastsStateTransitionsExternalEffects);
}

uint64_t type metadata accessor for NowPlayingBootstrap()
{
  return objc_opt_self(_TtC8Podcasts19NowPlayingBootstrap);
}

void sub_100004E14(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;

  v3 = (id *)(a1 + 48);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "restoreFromUserActivity:withManifest:startPlayback:reason:interactive:completion:", *(_QWORD *)(a1 + 32), v4, *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 65), *(_QWORD *)(a1 + 40));

}

void sub_100004E78(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_100031758(0);

  }
}

uint64_t type metadata accessor for DownloadsAlertPresenter()
{
  return objc_opt_self(_TtC8Podcasts23DownloadsAlertPresenter);
}

void sub_100004FA8(uint64_t a1)
{
  id v1;
  void *v2;
  objc_super v3;

  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTSyncController;
  v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  v2 = (void *)qword_1005674B0;
  qword_1005674B0 = (uint64_t)v1;

}

void sub_100005038(uint64_t a1, void *a2)
{
  MTPodcastManifest *v3;
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "length"))
  {
    v3 = -[MTPodcastManifest initWithInitialEpisodeUuid:sectionType:]([MTPodcastManifest alloc], "initWithInitialEpisodeUuid:sectionType:", v4, objc_msgSend(*(id *)(a1 + 32), "unsignedIntegerValue"));
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1000050C4(uint64_t a1)
{
  id v1;
  void *v2;
  objc_super v3;

  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTReachability;
  v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  v2 = (void *)qword_100567448;
  qword_100567448 = (uint64_t)v1;

}

id sub_100005114(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listenNowQueryObserver"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100048454;
  v4[3] = &unk_1004A8FB0;
  v4[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "results:", v4);

  return objc_msgSend(*(id *)(a1 + 32), "_endBackgroundTask");
}

void sub_100005558(uint64_t a1)
{
  id v1;
  void *v2;
  objc_super v3;

  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTShowsPreferencesDataStore;
  v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  v2 = (void *)qword_100567600;
  qword_100567600 = (uint64_t)v1;

}

uint64_t type metadata accessor for LibraryActionController()
{
  return objc_opt_self(_TtC8Podcasts23LibraryActionController);
}

uint64_t type metadata accessor for MenuBarController()
{
  return objc_opt_self(_TtC8Podcasts17MenuBarController);
}

id sub_1000055E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;

  v1 = OBJC_IVAR___MTDebouncedAutoDownloadProcessor____lazy_storage___debouncedProcessor;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR___MTDebouncedAutoDownloadProcessor____lazy_storage___debouncedProcessor);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___MTDebouncedAutoDownloadProcessor____lazy_storage___debouncedProcessor);
  }
  else
  {
    v3 = sub_1000215A0(v0);
    v4 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain(v3);
    swift_release(v4);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

void sub_10000564C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[12];

  v6[0] = &unk_1003CD680;
  v6[1] = &unk_1003CD680;
  v6[2] = &unk_1003CD698;
  v6[3] = &unk_1003CD698;
  v6[4] = &unk_1003CD680;
  v6[5] = &unk_1003CD680;
  v6[6] = &unk_1003CD680;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[7] = *(_QWORD *)(v2 - 8) + 64;
    v6[8] = &unk_1003CD6B0;
    v6[9] = &unk_1003CD698;
    v6[10] = &unk_1003CD698;
    sub_100005A58(319);
    if (v5 <= 0x3F)
    {
      v6[11] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 12, v6, a1 + 16);
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CoreDataDownloadLibrary(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

uint64_t sub_1000057A8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for CoreDataDownloadJobStorage()
{
  return objc_opt_self(_TtC8Podcasts26CoreDataDownloadJobStorage);
}

id sub_10000597C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ForegroundSyncUtil(0)), "init");
  static ForegroundSyncUtil.shared = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for PodcastsFlowTabBarController()
{
  return objc_opt_self(_TtC8Podcasts28PodcastsFlowTabBarController);
}

uint64_t type metadata accessor for PodcastsContextActionProvider()
{
  return objc_opt_self(_TtC8Podcasts29PodcastsContextActionProvider);
}

uint64_t sub_1000059EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for EpisodeListSettings(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100005A58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100554848)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100554848);
  }
}

uint64_t sub_100005AAC(void *a1)
{
  uint64_t v2;
  id v3;

  v2 = swift_allocObject(&unk_1004BB838, 24, 7);
  *(_QWORD *)(v2 + 16) = a1;
  v3 = a1;
  static FeedManagerBagConfiguration.getConfigurationOrLocalDefault(completion:)(sub_10004A8E8, v2);
  return swift_release(v2);
}

uint64_t type metadata accessor for ImplicitFollowsDecayCoordinator()
{
  return objc_opt_self(_TtC8Podcasts31ImplicitFollowsDecayCoordinator);
}

uint64_t sub_100005E40(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005EC8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void sub_100005F00(id a1)
{
  id v1;

  if (qword_100567258 != -1)
    dispatch_once(&qword_100567258, &stru_1004A64C8);
  v1 = (id)objc_claimAutoreleasedReturnValue(+[MTPurchaseControllerWrapper sharedInstance](MTPurchaseControllerWrapper, "sharedInstance"));
  objc_msgSend(v1, "fetchChannelUpdatesCheckingEntitlementsNotification");

}

uint64_t sub_100005FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___actionController;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___actionController);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___actionController);
  }
  else
  {
    v4 = v0;
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_objectGraph);
    v6 = type metadata accessor for LibraryActionController();
    swift_retain(v5);
    BaseObjectGraph.inject<A>(_:)(&v9, v6, v6);
    swift_release(v5);
    v3 = v9;
    v7 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v9;
    swift_retain(v3);
    swift_release(v7);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

void sub_100006050(id a1, NSString *a2, id a3, id a4)
{
  id v5;

  v5 = a4;
  if (-[NSString isEqualToString:](a2, "isEqualToString:", kMTShowSiriSuggestionsKey))
    sub_10001B7EC(kMTApplicationBundleIdentifier, (int)objc_msgSend(v5, "BOOLValue"));

}

uint64_t sub_1000060B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[22];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = &unk_1003D60D0;
  v4[6] = "\b";
  v4[7] = &unk_1003D60E8;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(result - 8) + 64;
    v4[9] = &unk_1003D6100;
    v4[10] = &unk_1003D60E8;
    v4[11] = &unk_1003D6100;
    v4[12] = &unk_1003D6118;
    v4[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[14] = "\b";
    v4[15] = &unk_1003D6130;
    v4[16] = &unk_1003D6130;
    v4[17] = &unk_1003D6130;
    v4[18] = &unk_1003D6100;
    v4[19] = &unk_1003D6118;
    v4[20] = &unk_1003D6148;
    v4[21] = "\b";
    return swift_updateClassMetadata2(a1, 256, 22, v4, a1 + 80);
  }
  return result;
}

void sub_10000627C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10003F544(&qword_100552B70);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_100006528(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_100049D2C();

}

unint64_t sub_100006760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100565F80;
  if (!qword_100565F80)
  {
    v1 = objc_opt_self(MTSubscriptionManager);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100565F80);
  }
  return result;
}

uint64_t sub_10000679C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1003CC4A8;
    v4[5] = &unk_1003CC4C0;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for RestrictionsController()
{
  return objc_opt_self(_TtC8Podcasts22RestrictionsController);
}

id sub_100006944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;

  v1 = OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___debouncedProcessor;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___debouncedProcessor);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___debouncedProcessor);
  }
  else
  {
    v3 = sub_100020644(v0);
    v4 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain(v3);
    swift_release(v4);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

void sub_1000069A8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "mt_compactMap:", &stru_1004A97B0));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100006BB4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "episodes"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "uuid"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v3, "isPlayheadResumable");
}

void destroy for CoreDataDownloadLibrary(id *a1)
{

}

void sub_100006F4C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[SyncControllerFactory resolvedSyncController](_TtC8Podcasts21SyncControllerFactory, "resolvedSyncController"));
  objc_msgSend(v1, "applicationWillEnterForeground");

}

void sub_100006F80(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10003F544((uint64_t *)&unk_100565FE0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain_n(v22, 2);
    String.hash(into:)(v33, v21, v22);
    swift_bridgeObjectRelease(v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_100007238(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    v6[1] = &unk_1003CD6D8;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(result - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[4] = &unk_1003CD6F0;
      result = type metadata accessor for EpisodeMetadata(319);
      if (v5 <= 0x3F)
      {
        v6[5] = *(_QWORD *)(result - 8) + 64;
        v6[6] = &unk_1003CD708;
        swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for EpisodeController()
{
  return objc_opt_self(_TtC8Podcasts17EpisodeController);
}

uint64_t type metadata accessor for TranscriptReportConcernURLBuilder()
{
  return objc_opt_self(_TtC8Podcasts33TranscriptReportConcernURLBuilder);
}

uint64_t type metadata accessor for GlobalActionController()
{
  return objc_opt_self(_TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController);
}

unint64_t sub_100007440()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t result;
  _BYTE v3[56];

  v0 = sub_10003F544(&qword_10055FF40);
  inited = swift_initStackObject(v0, v3);
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  strcpy((char *)(inited + 32), "journal_mode");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  *(_QWORD *)(inited + 48) = NSString.init(stringLiteral:)("WAL", 3, 2);
  result = sub_100048D4C(inited);
  qword_100555818 = result;
  return result;
}

id sub_1000074E8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayMigrationBridge(0)), "init");
  qword_100572D40 = (uint64_t)result;
  return result;
}

void sub_100007518(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[10];

  sub_10004AD1C();
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[2] = &unk_1003D2388;
    v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[6] = &unk_1003D23A0;
    v6[7] = &unk_1003D23B8;
    v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4 = type metadata accessor for OSSignpostID(319);
    if (v5 <= 0x3F)
    {
      v6[9] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 10, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for DebugActionsController()
{
  return objc_opt_self(_TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122DebugActionsController);
}

id sub_1000076EC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FeedManager(0)), "init");
  static FeedManager.shared = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for LibraryViewControllerProvider()
{
  return objc_opt_self(_TtC8Podcasts29LibraryViewControllerProvider);
}

uint64_t sub_10000773C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100552300);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000078E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v4 = a1 + OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncabilityController;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncabilityController, v13, 0, 0);
  sub_100007A64(v4, (uint64_t)v14, &qword_10055C9E0);
  if (v15)
  {
    sub_10000A520((uint64_t)v14, (uint64_t)v10);
    sub_100007A28((uint64_t)v14, &qword_10055C9E0);
    v5 = v11;
    v6 = v12;
    sub_10003A834(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    sub_10003D380(v10);
  }
  else
  {
    sub_100007A28((uint64_t)v14, &qword_10055C9E0);
  }
  sub_100007A64(a1 + OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncToAppController, (uint64_t)v14, &qword_10055C9E8);
  v7 = v15;
  if (v15)
  {
    v8 = v16;
    sub_10003A834(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    sub_10003D380(v14);
  }
  else
  {
    sub_100007A28((uint64_t)v14, &qword_10055C9E8);
  }
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_100007A28(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10003F544(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100007A64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10003F544(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_10000825C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void (*v8)(void *, uint64_t, void *);
  id v9;
  id v10;

  v8 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v10 = a2;
  v9 = a4;
  v8(a2, a3, a4);
  swift_release(v7);

}

id sub_1000083F0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  int v6;
  id v7;

  v2 = _MTLogCategoryFeedUpdate();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    v6 = 134217984;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found %ld podcasts requiring retry feed fetch.", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(*(id *)(a1 + 40), "_updatePodcastsWithUUIDs:userInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:", *(_QWORD *)(a1 + 32), 0, 1, 1, 4, *(_QWORD *)(a1 + 48));
}

id sub_1000084B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  objc_super v8;

  v1 = qword_100557F70;
  v2 = *(_QWORD *)((swift_isaMask & *v0) + 0x50);
  v3 = *(_QWORD *)((swift_isaMask & *v0) + 0x58);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = v0;
  *(_QWORD *)((char *)v0 + v1) = Set.init()(v2, v4);

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for DownloadManagerObserver(0, v2, v3, v6);
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t sub_1000085B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR___MTFeedManager__feedIngesterProvider);
  v6 = *(_QWORD *)(a1 + OBJC_IVAR___MTFeedManager_downloadManager);
  v2 = v6;
  swift_beginAccess(v1 + 56, v5, 33, 0);
  swift_unknownObjectRetain_n(v2, 2);
  v3 = sub_10003F544((uint64_t *)&unk_10055ED80);
  Synchronized.wrappedValue.setter(&v6, v3);
  swift_endAccess(v5);
  return swift_unknownObjectRelease(v2);
}

void sub_1000087D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000087F0()
{
  uint64_t v0;

  v0 = *(_QWORD *)(EpisodeStateChanges.updated.getter() + 16);
  swift_bridgeObjectRelease();
  return v0 != 0;
}

uint64_t sub_100008858(void *a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  if (qword_1005520C0 != -1)
    swift_once(&qword_1005520C0, sub_100004A04);
  v2 = (void *)qword_100573030;
  v3 = swift_allocObject(&unk_1004BDC20, 32, 7);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = a1;
  v4 = a1;
  v5 = v2;
  dispatch_to_main_queue(_:)(sub_10004AA0C, v3);
  return swift_release(v3);
}

uint64_t sub_100008B68(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544((uint64_t *)&unk_1005588B0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_1000092C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000092E8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "player"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "videoViewController"));
  objc_msgSend(v4, "setDelegate:", v2);

  v5 = (id)objc_claimAutoreleasedReturnValue(+[MPVolumeHUDController sharedInstance](MPVolumeHUDController, "sharedInstance"));
  objc_msgSend(v5, "addVolumeDisplay:", *(_QWORD *)(a1 + 32));

}

void sub_1000093E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, void *);
  id v7;
  id v8;

  v6 = *(void (**)(id, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, a3);
  swift_release(v5);

}

void sub_100009564(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  int v7;
  uint64_t v8;
  void *i;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  void *v24;
  _BYTE v25[128];

  v3 = objc_msgSend(a2, "mutableCopy");
  objc_msgSend(*(id *)(a1 + 32), "setPlayerItems:", v3);

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerItems"));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v8)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v11 = objc_msgSend(v10, "setEditingStyleFlags:", 3);
        v13 = _MTLogCategoryPlayback(v11, v12);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "title"));
          *(_DWORD *)buf = 67109378;
          v22 = v7 + (_DWORD)i;
          v23 = 2112;
          v24 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Up Next Controller item at index %d: %@", buf, 0x12u);

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
      v7 += (int)i;
    }
    while (v6);
  }

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8) + 24))
    objc_msgSend(*(id *)(v16 + 32), "_upNextDidChange");
}

id sub_100009918(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = _MTLogCategoryDefault(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting all processors...", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "startProcessors:", -1);
}

void sub_100009A7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100553C20)
  {
    v2 = type metadata accessor for OSSignpostID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100553C20);
  }
}

uint64_t sub_100009AD0(uint64_t a1, char a2)
{
  id v4;

  v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = a2;
  objc_sync_exit(v4);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100009DCC(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  MTBackgroundTaskManager *v6;

  v2 = objc_alloc((Class)MTSiriPlistDumper);
  v6 = objc_alloc_init(MTBackgroundTaskManager);
  v3 = objc_msgSend(v2, "initWithBackgroundTaskManager:", v6);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 48);
  *(_QWORD *)(v4 + 48) = v3;

}

uint64_t sub_100009F00(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;
  _BYTE v18[40];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  swift_bridgeObjectRetain(v6);
  v8 = AnyHashable._rawHashValue(seed:)(v7);
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      sub_100048678(*(_QWORD *)(v6 + 48) + 40 * v10, (uint64_t)v18);
      v12 = static AnyHashable.== infix(_:_:)(v18, a2);
      sub_100048644((uint64_t)v18);
      if ((v12 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease(v6);
    sub_100048644(a2);
    sub_100048678(*(_QWORD *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_100048678(a2, (uint64_t)v18);
    v17 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000486B4((uint64_t)v18, v10, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v17;
    swift_bridgeObjectRelease(v14);
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return 1;
  }
}

void sub_10000A078(id a1)
{
  void *v1;
  MTFullDownloadsGateway *v2;
  void *v3;
  id v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MTLegacyDownloadManagerProvider sharedInstance](MTLegacyDownloadManagerProvider, "sharedInstance"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "downloadManager"));

  v2 = -[MTFullDownloadsGateway initWithDownloadManager:]([MTFullDownloadsGateway alloc], "initWithDownloadManager:", v4);
  v3 = (void *)qword_100567590;
  qword_100567590 = (uint64_t)v2;

}

uint64_t sub_10000A2C8(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100005EC8(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A38C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  uint64_t v6;

  v5 = (char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x180);
  v6 = type metadata accessor for OperationResult(0, *(_QWORD *)((swift_isaMask & *a1) + 0x170), a3, a4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_release(*(_QWORD *)((char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x188) + 8));
}

_QWORD *sub_10000A404(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  void (*v11)(__n128);
  id v12;
  __n128 v13;
  _BYTE v15[24];
  _QWORD v16[5];
  _QWORD v17[5];

  v17[3] = type metadata accessor for ImplicitFollowsDecayCoordinator();
  v17[4] = &protocol witness table for ImplicitFollowsDecayCoordinator;
  v17[0] = a3;
  v16[3] = type metadata accessor for PodcastsStateTransitionsExternalEffects();
  v16[4] = &protocol witness table for PodcastsStateTransitionsExternalEffects;
  v16[0] = a4;
  sub_10000A520((uint64_t)a1, (uint64_t)(a5 + 2));
  a5[7] = a2;
  sub_10000A520((uint64_t)v17, (uint64_t)(a5 + 8));
  sub_10000A520((uint64_t)v16, (uint64_t)(a5 + 13));
  swift_beginAccess(a5 + 8, v15, 33, 0);
  v10 = a5[12];
  sub_100038DEC((uint64_t)(a5 + 8), a5[11]);
  v11 = *(void (**)(__n128))(v10 + 24);
  v12 = a2;
  v13 = swift_retain(a5);
  v11(v13);
  swift_endAccess(v15);
  sub_10003D380(v16);
  sub_10003D380(v17);
  sub_10003D380(a1);
  return a5;
}

uint64_t sub_10000A520(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_10000A9B0()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  byte_10055C8D0 = v2;
}

void sub_10000ACF4(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  v3 = objc_msgSend(*(id *)(a1 + 32), "subscriptionState");
  if ((_DWORD)v3 == 1)
  {
    objc_sync_exit(v2);

    v2 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    objc_msgSend(v2, "registerForRemoteNotifications");
  }
  else
  {
    v4 = _MTLogCategoryCloudSync(v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to complete APNS registration. Reason: interrupted.", v6, 2u);
    }

    objc_sync_exit(v2);
  }

}

void sub_10000ADB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000ADC8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transcriptIdentifier"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transcriptIdentifier"));
    if (v4 == (void *)v5)
    {

LABEL_8:
      goto LABEL_9;
    }
    v6 = (void *)v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transcriptIdentifier"));
    v8 = objc_msgSend(v7, "isNotEmpty");

    if (v8)
    {
      v11 = _MTLogCategoryPlayback(v9, v10);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transcriptIdentifier"));
        v17 = 138412546;
        v18 = v13;
        v19 = 2112;
        v20 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Updating currentItem for episode entitled %@ with transcriptIdentifier %@", (uint8_t *)&v17, 0x16u);

      }
      v15 = *(void **)(a1 + 32);
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transcriptIdentifier"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transcriptProvider"));
      objc_msgSend(v15, "updateTranscriptInformation:transcriptSource:", v4, v16);

      goto LABEL_8;
    }
  }
LABEL_9:

}

uint64_t type metadata accessor for DownloadingEpisodeStateDataSource()
{
  return objc_opt_self(_TtC8Podcasts33DownloadingEpisodeStateDataSource);
}

void sub_10000B164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v19 = a1;
  v20 = a2;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v18);
  v21 = _swiftEmptyArrayStorage;
  v14 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_10003F544(&qword_100555A00);
  v16 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v8, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  *(_QWORD *)(a3 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ELL, 0x8000000100430490, v13, v10, v7, 0);
  *(_QWORD *)(a3 + 56) = UIBackgroundTaskInvalid;
  *(_BYTE *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 32) = v19;
  *(_QWORD *)(a3 + 40) = &off_1004B7950;
  *(_QWORD *)(a3 + 16) = v20;
  *(_QWORD *)(a3 + 24) = &off_1004B3730;
  return a3;
}

void sub_10000B5F0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = _MTLogCategoryDefault();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MTAccountController: Setting active account: %@", (uint8_t *)&v5, 0xCu);
  }

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 56), *(id *)(a1 + 32));
}

uint64_t sub_10000B860(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = type metadata accessor for DownloadingEpisodeStateDataSource();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100339C8C(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_10035DFD0(v29, &qword_100564E38);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100339E70((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      type metadata accessor for DownloadingEpisodeStateDataSource();
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)();

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)();

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_10004881C((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

id sub_10000BDF8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  _BYTE *v5;
  _QWORD *v6;
  id v7;
  double v8;
  id v9;
  objc_super v11;
  _QWORD v12[5];

  v2 = type metadata accessor for AppTraits_iOS();
  v3 = swift_allocObject(v2, 16, 7);
  v12[3] = v2;
  v12[4] = &off_1004BEBE0;
  v12[0] = v3;
  v4 = (objc_class *)type metadata accessor for AppController();
  v5 = objc_allocWithZone(v4);
  v5[OBJC_IVAR____TtC8PodcastsP33_9AAABDB1DF664191160F6CD588B99E9913AppController_migrationPresentationCanceled] = 0;
  v6 = &v5[OBJC_IVAR____TtC8PodcastsP33_9AAABDB1DF664191160F6CD588B99E9913AppController_onLibrarySelection];
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PodcastsP33_9AAABDB1DF664191160F6CD588B99E9913AppController_appDelegate] = a1;
  sub_10000A520((uint64_t)v12, (uint64_t)&v5[OBJC_IVAR____TtC8PodcastsP33_9AAABDB1DF664191160F6CD588B99E9913AppController_appTraits]);
  v11.receiver = v5;
  v11.super_class = v4;
  v7 = a1;
  *(_QWORD *)&v8 = swift_retain(v3).n128_u64[0];
  v9 = objc_msgSendSuper2(&v11, "init", v8);
  sub_10003D380(v12);
  swift_release(v3);
  return v9;
}

id sub_10000BEDC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  objc_super v8;
  _BYTE v9[24];
  _OWORD v10[2];
  uint64_t v11;

  v1 = (uint64_t)&v0[OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncabilityController];
  v2 = type metadata accessor for PlatformContentController_Null();
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)(v1 + 32) = 0;
  v3 = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(v3 + 16) = 0;
  v4 = (uint64_t *)&v0[OBJC_IVAR____TtC8Podcasts25PlatformContentController_platformImpl];
  v4[3] = v2;
  v4[4] = (uint64_t)&off_1004B87B8;
  *v4 = v3;
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_beginAccess(v1, v9, 33, 0);
  v5 = v0;
  sub_1000490FC((uint64_t)v10, v1);
  swift_endAccess(v9);
  v6 = &v5[OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncToAppController];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_QWORD *)v6 + 4) = 0;

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for PlatformContentController();
  return objc_msgSendSuper2(&v8, "init");
}

id sub_10000C210()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 88);
  if (v1)
  {
    v2 = *(id *)(v0 + 88);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
    objc_msgSend(v3, "setMaxConcurrentOperationCount:", 1);
    v4 = *(void **)(v0 + 88);
    *(_QWORD *)(v0 + 88) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t sub_10000C3B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 80);
  }
  else
  {
    v3 = v0;
    v4 = *(_QWORD *)(v0 + 16);
    v5 = type metadata accessor for NowPlayingMediaPlayerController();
    swift_allocObject(v5, 320, 7);
    v6 = swift_retain(v4);
    v2 = NowPlayingMediaPlayerController.init(asPartOf:)(v6);
    v7 = *(_QWORD *)(v3 + 80);
    *(_QWORD *)(v3 + 80) = v2;
    swift_retain(v2);
    swift_release(v7);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

void sub_10000C434(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionClamps"));
  v2 = objc_opt_class(NSMutableDictionary);
  if ((objc_opt_isKindOfClass(v5, v2) & 1) == 0)
  {
    if (v5)
    {
      v3 = objc_msgSend(v5, "mutableCopy");

      v4 = v3;
    }
    else
    {
      v4 = objc_alloc_init((Class)NSMutableDictionary);
    }
    v5 = v4;
    objc_msgSend(*(id *)(a1 + 32), "setTransactionClamps:");
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10000C4D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  id v10;

  v5 = a3;
  v6 = _MTLogCategoryArtworkDownload(objc_msgSend(*(id *)(a1 + 32), "setBool:forKey:", a2, kMTImageProviderMigrationHasOccurred));
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if ((_DWORD)a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "ImageProvider Migration Complete", (uint8_t *)&v9, 2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "_removeImageStoreContent");
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 138412290;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to complete library artwork migration to image provider: %@", (uint8_t *)&v9, 0xCu);
    }

  }
}

void sub_10000C6A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  _OWORD v7[2];
  char v8;

  v1 = OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_overlayViewController;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_overlayViewController);
  v3 = v2;
  static ViewControllerContainment.remove(_:)(v2);

  v4 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = 0;

  v5 = *(void **)(v0 + v1);
  memset(v7, 0, sizeof(v7));
  v8 = 1;
  v6 = v5;
  static ViewControllerContainment.add(_:to:frame:)(v5, v0, v7);

}

void sub_10000C828(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  v4[0] = objc_opt_class(NSString);
  v4[1] = objc_opt_class(NSArray);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 2));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1));
  v3 = (void *)qword_100567538;
  qword_100567538 = v2;

}

unint64_t sub_10000C920()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  unint64_t result;
  uint64_t v8;

  v0 = sub_10003F544(&qword_10055FF40);
  inited = swift_initStackObject(v0, &v8);
  *(_OWORD *)(inited + 16) = xmmword_1003CA220;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSMigratePersistentStoresAutomaticallyOption);
  *(_QWORD *)(inited + 40) = v2;
  sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSPersistentStoreFileProtectionKey);
  *(_QWORD *)(inited + 64) = v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSFileProtectionNone);
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(inited + 72) = v6;
  result = sub_100048D4C(inited);
  qword_100555810 = result;
  return result;
}

void sub_10000CC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *sub_10000CEB0()
{
  uint64_t v0;
  _QWORD *v1;
  void *result;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  char v6;
  _QWORD v7[5];

  v0 = type metadata accessor for Podcasts(0);
  v7[3] = v0;
  v7[4] = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v1 = sub_1000242A8(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for Podcasts.widgetNowPlayingArtwork(_:), v0);
  LOBYTE(v0) = isFeatureEnabled(_:)(v7);
  result = (void *)sub_10003D380(v7);
  if ((v0 & 1) != 0 && (result = MTLCreateSystemDefaultDevice()) != 0)
  {
    v3 = result;
    v4 = objc_msgSend(result, "hasUnifiedMemory");
    v5 = objc_msgSend(v3, "supportsFamily:", 1004);
    result = (void *)swift_unknownObjectRelease(v3);
    v6 = v4 & v5;
  }
  else
  {
    v6 = 0;
  }
  byte_1005623E0 = v6;
  return result;
}

void sub_10000D058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (qword_100552020 != -1)
    swift_once(&qword_100552020, sub_1000176E8);
  v0 = qword_100558328;
  v1 = swift_bridgeObjectRetain(qword_100558328);
  v2 = defaultPodcastTransitionRules.getter(v1);
  v3 = type metadata accessor for PodcastStateController(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  result = PodcastStateController.init(dataSources:transitionRules:)(v0, v2);
  qword_100572E48 = result;
  return result;
}

void sub_10000D210()
{
  void *v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  id v11;
  uint64_t v12;
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "_applePodcastsFoundationSharedUserDefaults");
  v2 = kMTEpisodesPendingDeletionDefaultKey;
  v3 = objc_msgSend(v1, "objectForKey:", kMTEpisodesPendingDeletionDefaultKey);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v13, v3);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_10000773C((uint64_t)v13, (uint64_t)v14);
  if (v15)
  {
    v4 = sub_10003F544((uint64_t *)&unk_10055FDF0);
    if ((swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
    {
      v5 = v12;
      v6 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
      if (v6)
      {
        v7 = v6;
        v8 = swift_bridgeObjectRetain(v5);
        v9 = sub_10002B070(v8);
        swift_bridgeObjectRelease(v5);
        isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v9);
        objc_msgSend(v7, "removeDownloadAssetsForEpisodeUuids:", isa);
        swift_bridgeObjectRelease(v5);

      }
      else
      {
        swift_bridgeObjectRelease(v5);
      }
      v11 = objc_msgSend(v0, "_applePodcastsFoundationSharedUserDefaults");
      objc_msgSend(v11, "removeObjectForKey:", v2);

    }
  }
  else
  {
    sub_1000485DC((uint64_t)v14);
  }
}

uint64_t sub_10000D3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;

  v22 = a2;
  v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DownloadsAlertPresenter();
  v26 = &off_1004B52E0;
  *(_QWORD *)&v24 = a1;
  v14 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v14);
  v23 = _swiftEmptyArrayStorage;
  v15 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10003F544(&qword_100555A00);
  v17 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v16, v17, v8, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v21);
  *(_QWORD *)(a3 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000024, 0x80000001004304C0, v13, v10, v7, 0);
  *(_QWORD *)(a3 + 64) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a3 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController____lazy_storage___debouncer) = 0;
  *(_BYTE *)(a3 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController_active) = 1;
  sub_10002099C(&v24, a3 + 16);
  v18 = a3 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController_debounceInterval;
  v19 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, v22, v19);
  return a3;
}

void sub_10000D630(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = objc_opt_class(NSDictionary);
  v5 = objc_opt_class(NSDate);
  v6 = objc_opt_class(NSString);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 3));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1, v4, v5));
  v3 = (void *)qword_100567318;
  qword_100567318 = v2;

}

void sub_10000D6F4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "player"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "manifest"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "activity"));
  objc_msgSend(*(id *)(a1 + 32), "setCurrentActivity:", v3);

}

void sub_10000D794(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "privateQueueContext"));

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10002C6B8;
  v6[3] = &unk_1004A6640;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  objc_msgSend(v5, "performBlockAndWaitWithSave:", v6);

}

void sub_10000DBB4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSMutableDictionary *v12;
  void *v13;
  id obj;
  NSMutableDictionary *v15;
  uint64_t v16;
  dispatch_semaphore_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[4];
  NSMutableDictionary *v21;
  _QWORD v22[5];
  NSMutableDictionary *v23;
  NSObject *v24;
  uint64_t *v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD v32[3];
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];

  kdebug_trace(723517564, 0, 0, 0, 0);
  v2 = *(id *)(a1 + 32);
  v16 = a1;
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") >= 0xB)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subarrayWithRange:", 0, 10));

    v2 = (id)v3;
  }
  v17 = dispatch_semaphore_create(1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mainOrPrivateContext"));

  v15 = objc_opt_new(NSMutableDictionary);
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  obj = v2;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
  if (v5)
  {
    v18 = *(_QWORD *)v47;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v47 != v18)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)v6);
        v40 = 0;
        v41 = &v40;
        v42 = 0x3032000000;
        v43 = sub_10004675C;
        v44 = sub_100046A24;
        v45 = 0;
        v34 = 0;
        v35 = &v34;
        v36 = 0x3032000000;
        v37 = sub_10004675C;
        v38 = sub_100046A24;
        v39 = 0;
        v32[0] = 0;
        v32[1] = v32;
        v32[2] = 0x2020000000;
        v33 = 0;
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_100006BB4;
        v26[3] = &unk_1004A70A0;
        v27 = v19;
        v28 = v7;
        v29 = &v40;
        v30 = &v34;
        v31 = v32;
        objc_msgSend(v27, "performBlockAndWait:", v26);
        if (objc_msgSend((id)v41[5], "length"))
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTIntentDonationUtil sharedInstance](MTIntentDonationUtil, "sharedInstance"));
          v9 = v35[5];
          v10 = v41[5];
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          v22[2] = sub_1000C3440;
          v22[3] = &unk_1004A9CE8;
          v22[4] = *(_QWORD *)(v16 + 40);
          v23 = v15;
          v25 = &v40;
          v11 = v17;
          v24 = v11;
          objc_msgSend(v8, "prepareIntentForEpisodeUuid:stationUuid:includeImage:includeStorePlatformData:completion:", v9, v10, 1, 0, v22);

          dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
        }

        _Block_object_dispose(v32, 8);
        _Block_object_dispose(&v34, 8);

        _Block_object_dispose(&v40, 8);
        v6 = (char *)v6 + 1;
      }
      while (v5 != v6);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
    }
    while (v5);
  }

  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000C34C8;
  v20[3] = &unk_1004A8D28;
  v21 = v15;
  v12 = v15;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obj, "mt_compactMap:", v20));
  objc_msgSend(*(id *)(v16 + 40), "setStationIntents:", v13);

  kdebug_trace(723517568, 0, 0, 0, 0);
}

void sub_10000DFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_10000E0AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000E338(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  dispatch_time_t v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  id v19;
  _QWORD block[5];
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  void *v24;

  v6 = a2;
  v7 = a4;
  v8 = (void *)v7;
  if (v7 | *(_QWORD *)(a1 + 32))
  {
    v9 = _MTLogCategoryCloudSync(v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v22 = v11;
      v23 = 2112;
      v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "MTSyncController fetch of GetAll/PutAll bag value failed. Errors=%@ %@", buf, 0x16u);
    }

    v12 = dispatch_time(0, 60000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D53A8;
    block[3] = &unk_1004A6200;
    block[4] = *(_QWORD *)(a1 + 40);
    dispatch_after(v12, (dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000D53B0;
    v16[3] = &unk_1004A7398;
    v13 = *(NSObject **)(a1 + 48);
    v14 = *(id *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 40);
    v17 = v14;
    v18 = v15;
    v19 = v6;
    dispatch_async(v13, v16);

  }
}

id sub_10000E4D4()
{
  id v0;
  id v1;
  objc_class *v2;
  _BYTE *v3;
  id result;
  objc_super v5;

  v0 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v1 = objc_msgSend(v0, "privateQueueContext");

  v2 = (objc_class *)type metadata accessor for DebouncedAutoDownloadProcessor();
  v3 = objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR___MTDebouncedAutoDownloadProcessor____lazy_storage___debouncedProcessor] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___MTDebouncedAutoDownloadProcessor_debounceInterval] = 0x3FF0000000000000;
  v3[OBJC_IVAR___MTDebouncedAutoDownloadProcessor_isRunning] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___MTDebouncedAutoDownloadProcessor_context] = v1;
  v5.receiver = v3;
  v5.super_class = v2;
  result = objc_msgSendSuper2(&v5, "init");
  static DebouncedAutoDownloadProcessor.sharedInstance = (uint64_t)result;
  return result;
}

id sub_10000E640()
{
  id v0;
  id v1;
  objc_class *v2;
  _BYTE *v3;
  char *v4;
  id result;
  objc_super v6;

  v0 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v1 = objc_msgSend(v0, "privateQueueContext");

  v2 = (objc_class *)type metadata accessor for DebouncedAssetRemovalProcessor();
  v3 = objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_debounceInterval] = 0x3FF0000000000000;
  v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_isRunning] = 0;
  v4 = &v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___episodeStorage];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 4) = 0;
  *(_QWORD *)&v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___debouncedProcessor] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_context] = v1;
  v6.receiver = v3;
  v6.super_class = v2;
  result = objc_msgSendSuper2(&v6, "init");
  static DebouncedAssetRemovalProcessor.sharedInstance = (uint64_t)result;
  return result;
}

void sub_10000E714(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  char v12;

  if (*(_QWORD *)(a1 + 32))
  {
    if (*(_QWORD *)(a1 + 64) == 2)
    {
      +[IMMetrics recordUserAction:dataSource:](IMMetrics, "recordUserAction:dataSource:", CFSTR("handoff_restore_activity"));
      objc_msgSend(*(id *)(a1 + 40), "getContinuationStreamsWithCompletionHandler:", &stru_1004ABAB0);
    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 72);
    v5 = *(_QWORD *)(a1 + 64);
    v6 = *(unsigned __int8 *)(a1 + 73);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000484CC;
    v8[3] = &unk_1004ABAD8;
    objc_copyWeak(&v11, (id *)(a1 + 56));
    v12 = *(_BYTE *)(a1 + 72);
    v9 = *(id *)(a1 + 40);
    v10 = *(id *)(a1 + 48);
    objc_msgSend(WeakRetained, "setManifest:startPlayback:forceLocal:reason:interactive:completion:", v3, v4, 1, v5, v6, v8);

    objc_destroyWeak(&v11);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (v7)
      (*(void (**)(uint64_t, _QWORD))(v7 + 16))(v7, 0);
  }
}

void sub_10000E870(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10000E928(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = (void *)a1[4];
  v2 = a1[5];
  v8 = kEpisodeUuid;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsInEntity:predicate:propertiesToFetch:limit:", kMTEpisodeEntityName, v2, v4, 1));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "uuid"));

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10000EA14(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  id v3;

  if (a2 == 1)
  {
    v3 = objc_begin_catch(exception_object);
    (*(void (**)(void))(*(_QWORD *)(v2 + 48) + 16))();

    objc_end_catch();
    JUMPOUT(0x10000E9E4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000EADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  result = type metadata accessor for OperationResult(319, *(_QWORD *)(a1 + 368), a3, a4);
  if (v6 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 384));
    if (v7 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(result - 8) + 64;
      v8[2] = (char *)&value witness table for () + 64;
      v8[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      result = swift_initClassMetadata2(a1, 0, 4, v8, a1 + 408);
      if (!result)
        return 0;
    }
  }
  return result;
}

void sub_10000ED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000F430(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;
  id v8;

  v2 = objc_alloc_init((Class)ICCloudClient);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100009AD0;
  v6[3] = &unk_1004ABC20;
  v4 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v2;
  v8 = v4;
  v5 = v2;
  objc_msgSend(v5, "isAuthenticatedWithQueue:completionHandler:", v3, v6);

}

Swift::Void __swiftcall ForegroundSyncUtil.syncEverythingIfNeeded()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + OBJC_IVAR___MTForegroundSyncUtil_needsSyncing) & 1) != 0)
  {
    sub_1002E3538();
  }
  else
  {
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v5 = static OS_os_log.cloudSync.getter();
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[Foreground Sync] Not syncing. Already synced.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t sub_10000F770(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v4);
    return 0;
  }
  return result;
}

void sub_10000F88C(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  double v12;
  double Current;
  id v14;
  uint64_t v15;
  double v16;
  uint64_t v18;
  NSObject *v19;
  uint8_t v20[16];

  v2 = *(unsigned __int8 *)(a1 + 80);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForPlayerItem:", *(_QWORD *)(a1 + 40)));
  if (*(_BYTE *)(a1 + 81))
  {
    v4 = *(void **)(a1 + 48);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "previousPlayingEpisodeUuid"));
    LOBYTE(v4) = objc_msgSend(v4, "isEqual:", v5);

    v6 = v2 != 0;
    if ((v4 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 56), "setPreviousPlayingEpisodeUuid:", *(_QWORD *)(a1 + 48));
      +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
      objc_msgSend(v3, "setLastDatePlayed:");
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "assetURL"));

      if (!v7)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTStoreReportingController sharedInstance](MTStoreReportingController, "sharedInstance"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dictionaryRepresentation"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "userManifest"));
        objc_msgSend(v8, "reportWithType:userInfo:location:reason:", 2, v9, CFSTR("epst"), objc_msgSend(v10, "playReason"));

      }
      v6 = 1;
    }
  }
  else
  {
    v6 = v2 != 0;
  }
  v11 = v6 | objc_msgSend(*(id *)(a1 + 56), "updateEpisode:andPlayerItem:withElapsedTime:andDuration:onMediaItemWillChange:", v3, *(_QWORD *)(a1 + 40), 0, *(double *)(a1 + 64), *(double *)(a1 + 72));
  if (*(double *)(a1 + 72) > 0.0)
  {
    objc_msgSend(v3, "duration");
    if (v12 != *(double *)(a1 + 72))
    {
      objc_msgSend(v3, "setDuration:");
      objc_msgSend(*(id *)(a1 + 40), "setDuration:", *(double *)(a1 + 72));
      v11 = 1;
    }
  }
  Current = CFAbsoluteTimeGetCurrent();
  v14 = objc_msgSend(*(id *)(a1 + 56), "lastPlaybackSaveTime");
  if (Current - v16 > 15.0 || v11 != 0)
  {
    v18 = _MTLogCategoryPlayback(v14, v15);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "updateEpisodeForPlayerUpdateForceSave saving", v20, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
    objc_msgSend(*(id *)(a1 + 56), "setLastPlaybackSaveTime:", CFAbsoluteTimeGetCurrent());
  }

}

void sub_10000FAA0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10003F544((uint64_t *)&unk_100565FE0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v34, v21, v22);
      swift_bridgeObjectRelease(v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10000FE78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000104C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100010514()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  void *v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  v34 = v3;
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v15 = objc_msgSend(v14, "privateQueueContext");

  LODWORD(v14) = objc_msgSend(v15, "hasChanges");
  if (!(_DWORD)v14)
    return sub_10004A698();
  v30 = v9;
  v31 = v7;
  v32 = v6;
  v17 = static Logger.widget.getter(v16);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Timeline has changed but it's not saved yet. Waiting for save notification", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v21 = swift_allocObject(&unk_1004C0550, 24, 7);
  *(_QWORD *)(v21 + 16) = v1;
  aBlock[4] = sub_1002EB58C;
  v37 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C0568;
  v22 = _Block_copy(aBlock);
  v23 = v1;
  v24 = v30;
  static DispatchQoS.unspecified.getter(v23);
  v35 = _swiftEmptyArrayStorage;
  v25 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10003F544((uint64_t *)&unk_10055B200);
  v27 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  v28 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v26, v27, v33, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v5, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v28);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v24, v32);
  return swift_release(v37);
}

id ForegroundSyncUtil.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  objc_class *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  id v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  objc_class *v45;
  uint64_t v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  objc_super v53;
  _OWORD v54[2];
  _BYTE v55[24];
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  void *v59;
  _QWORD v60[6];

  v1 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v1);
  v52 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for LibraryImageProvider(0);
  v51 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v49 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = OBJC_IVAR___MTForegroundSyncUtil_defaults;
  v15 = (void *)objc_opt_self(NSUserDefaults);
  v48 = v15;
  v16 = v0;
  *(_QWORD *)&v0[v14] = objc_msgSend(v15, "_applePodcastsFoundationSharedUserDefaults");
  v17 = OBJC_IVAR___MTForegroundSyncUtil_workQueue;
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v18);
  v60[0] = _swiftEmptyArrayStorage;
  v19 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v20 = sub_10003F544(&qword_100555A00);
  v21 = sub_10003AEC0((unint64_t *)&qword_1005521C0, &qword_100555A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(v60, v20, v21, v4, v19);
  *(_QWORD *)&v16[v17] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000012, 0x80000001003D42D0, v9, v6, v13, 0);
  v22 = OBJC_IVAR___MTForegroundSyncUtil_syncController;
  *(_QWORD *)&v16[v22] = objc_msgSend((id)objc_opt_self(MTSyncController), "sharedInstance");
  v23 = objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
  v60[3] = sub_100005EC8(0, &qword_1005522F8, IMURLBag_ptr);
  v60[4] = &protocol witness table for IMURLBag;
  v60[0] = v23;
  v24 = (objc_class *)type metadata accessor for MediaRequestController(0);
  v25 = objc_msgSend(objc_allocWithZone(v24), "init");
  v58 = (uint64_t)v24;
  v59 = &protocol witness table for MediaRequestController;
  v57[0] = v25;
  v26 = type metadata accessor for MAPICategoriesProvider(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = MAPICategoriesProvider.init(mediaRequestController:)(v57);
  v58 = v26;
  v59 = &protocol witness table for MAPICategoriesProvider;
  v57[0] = v27;
  v28 = v49;
  static LibraryImageProvider.background.getter(v27);
  v29 = type metadata accessor for CategoryIngester();
  v30 = (_QWORD *)swift_allocObject(v29, 56, 7);
  v31 = v50;
  v30[5] = v50;
  v30[6] = &protocol witness table for LibraryImageProvider;
  v32 = sub_1000242A8(v30 + 2);
  (*(void (**)(_QWORD *, char *, uint64_t))(v51 + 32))(v32, v28, v31);
  v33 = objc_msgSend(v48, "_applePodcastsFoundationSharedUserDefaults");
  v34 = objc_msgSend(v33, "objectForKey:", kMTLastCategoriesSyncDateDefaultKey);

  if (v34)
  {
    _bridgeAnyObjectToAny(_:)(v54, v34);
    swift_unknownObjectRelease(v34);
  }
  else
  {
    memset(v54, 0, sizeof(v54));
  }
  sub_10000773C((uint64_t)v54, (uint64_t)v55);
  v35 = v52;
  if (v56)
  {
    v36 = type metadata accessor for Date(0);
    v37 = swift_dynamicCast(v35, v55, (char *)&type metadata for Any + 8, v36, 6);
    v38 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, v37 ^ 1u, 1, v36);
  }
  else
  {
    sub_1000485DC((uint64_t)v55);
    v39 = type metadata accessor for Date(0);
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v35, 1, 1, v39);
  }
  v40 = OBJC_IVAR___MTForegroundSyncUtil_categoriesSyncUtil;
  v41 = static OS_dispatch_queue.uiAssetPreparationQueue.getter(v38);
  v42 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v43 = objc_msgSend(v42, "importContext");

  v44 = type metadata accessor for CategoriesSyncUtil(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  *(_QWORD *)&v16[v40] = CategoriesSyncUtil.init(categoriesSyncThresholdProvider:categoriesProvider:categoryIngester:lastCategoriesSyncDate:queue:ctx:)(v60, v57, v30, v35, v41, v43);
  static Date.distantPast.getter();
  *(_QWORD *)&v16[OBJC_IVAR___MTForegroundSyncUtil____lazy_storage___formatter] = 0;
  v16[OBJC_IVAR___MTForegroundSyncUtil_needsSyncing] = 1;

  v45 = (objc_class *)type metadata accessor for ForegroundSyncUtil(0);
  v53.receiver = v16;
  v53.super_class = v45;
  return objc_msgSendSuper2(&v53, "init");
}

void sub_100010E98(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint8_t buf[8];
  _QWORD v18[5];

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100048070;
  v18[3] = &unk_1004A6200;
  v18[4] = *(_QWORD *)(a1 + 32);
  v2 = objc_retainBlock(v18);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "player"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "manifest"));

  if (v4)
  {
    ((void (*)(_QWORD *))v2[2])(v2);
  }
  else
  {
    v7 = *(void **)(a1 + 40);
    if (v7)
    {
      v8 = *(void **)(a1 + 32);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100112A48;
      v13[3] = &unk_1004ABA48;
      v9 = v7;
      v10 = *(_QWORD *)(a1 + 32);
      v14 = v9;
      v15 = v10;
      v16 = v2;
      objc_msgSend(v8, "restoreFromUserActivity:startPlayback:reason:interactive:completion:", v9, 0, 1, 0, v13);

    }
    else
    {
      v11 = _MTLogCategoryPlayback(v5, v6);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Restoration: No user activity found on disk", buf, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "_restoreDefaultManifestIfNeededWithCompletion:", v2);
    }
  }

}

uint64_t sub_100011244(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FeedManagerBagConfiguration(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v21[1] = *(_QWORD *)&a2[OBJC_IVAR___MTFeedManager_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(&unk_1004BB860, v14 + v12, v13 | 7);
  *(_QWORD *)(v15 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_10004A884;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004BB878;
  v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(a2);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10003F544((uint64_t *)&unk_10055B200);
  v19 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v23);
  return swift_release(v27);
}

Swift::Void __swiftcall ForegroundSyncUtil.feedUpdateAllPodcastsOnForeground()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD aBlock[5];
  uint64_t v17;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)&v0[OBJC_IVAR___MTForegroundSyncUtil_workQueue];
  v9 = swift_allocObject(&unk_1004BFCD0, 24, 7);
  *(_QWORD *)(v9 + 16) = v0;
  aBlock[4] = sub_10004A440;
  v17 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004BFCE8;
  v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v15 = _swiftEmptyArrayStorage;
  v11 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_10003F544((uint64_t *)&unk_10055B200);
  v13 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release(v17);
}

void sub_100011768(id a1)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  BOOL v7;
  MZKeyValueStoreClampsController *v8;
  void *v9;
  id v10;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MZPreferences storeBookkeeperPreferences](MZPreferences, "storeBookkeeperPreferences"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:withDefaultValue:", CFSTR("MZKeyValueStoreClamps"), 0));

  if (v2)
  {
    v10 = 0;
    v3 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(MZKeyValueStoreClampsController), v2, &v10);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = v10;
    v6 = (void *)qword_100567310;
    qword_100567310 = v4;

  }
  else
  {
    v5 = 0;
  }
  if (qword_100567310)
    v7 = v5 == 0;
  else
    v7 = 0;
  if (!v7)
  {
    v8 = objc_alloc_init(MZKeyValueStoreClampsController);
    v9 = (void *)qword_100567310;
    qword_100567310 = (uint64_t)v8;

  }
}

Swift::Void __swiftcall LibraryDataProvider.restorePreviouslyDownloadedEpisodes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_downloadsRestoreController);
  if (v1)
  {
    v2 = static os_log_type_t.default.getter();
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v3 = (void *)static OS_os_log.restore.getter();
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Received request to attempt post-restore if necessary.", 54, 2, _swiftEmptyArrayStorage);

    OS_dispatch_queue.sync<A>(execute:)(&v8, sub_10004AAC8, v1, &type metadata for Bool);
    if (v8 == 1)
    {
      v4 = static os_log_type_t.default.getter();
      v5 = (void *)static OS_os_log.restore.getter();
      os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Post-restore request has been processed already, and user might have been prompted already.", 91, 2, _swiftEmptyArrayStorage);

    }
    else
    {
      v6 = swift_allocObject(&unk_1004AFDD8, 24, 7);
      swift_weakInit(v6 + 16, v1);
      v7 = (_QWORD *)swift_allocObject(&unk_1004AFE00, 40, 7);
      v7[2] = v6;
      v7[3] = UInt64.int64Representation.getter;
      v7[4] = 0;
      swift_retain(v6);
      sub_1000199A0((uint64_t)sub_10004AAA8, (uint64_t)v7);
      swift_release(v6);
      swift_release(v7);
    }
  }
}

void sub_1000119D8(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playbackContext"));

  v3 = objc_alloc((Class)NSFetchedResultsController);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchRequest"));
  v5 = objc_msgSend(v3, "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", v4, v8, 0, 0);
  objc_msgSend(*(id *)(a1 + 32), "setFrc:", v5);

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "frc"));
  objc_msgSend(v7, "setDelegate:", v6);

  objc_msgSend(*(id *)(a1 + 32), "_refetch:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_100011AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  aBlock[4] = sub_10004A688;
  v22 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004C01A8;
  v12 = _Block_copy(aBlock);
  v13 = v22;
  swift_retain(a2);
  v14 = swift_release(v13);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10003F544((uint64_t *)&unk_10055B200);
  v17 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_100011CA4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint8_t buf[4];
  NSObject *v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("DerivedPropertyObserverPersistentHistoryToken")));

  if (v3)
  {
    v16 = 0;
    v6 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(NSPersistentHistoryToken), v3, &v16);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = v16;
    v10 = v8;
    if (v8)
    {
      v11 = _MTLogCategoryDatabase(v8, v9);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Derived Property Observer encountered error trying to fetch previous history token %@", buf, 0xCu);
      }
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = v7;
      v12 = *(NSObject **)(v14 + 96);
      *(_QWORD *)(v14 + 96) = v15;
    }

  }
  else
  {
    v13 = _MTLogCategoryDatabase(v4, v5);
    v10 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Derived Property Observer has never processed persistent history data.", buf, 2u);
    }
  }

}

void sub_100011E98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100012188(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  _QWORD v15[4];
  NSObject *v16;
  _QWORD v17[4];
  NSObject *v18;

  v2 = dispatch_group_create();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "upNextManifest"));
  v4 = objc_msgSend(v3, "isLoaded");

  if ((v4 & 1) == 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "upNextManifest"));
    objc_msgSend(v5, "setIsLoaded:", 1);

    dispatch_group_enter(v2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "upNextManifest"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1000F2B38;
    v17[3] = &unk_1004A6200;
    v18 = v2;
    objc_msgSend(v6, "_load:", v17);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userManifest"));
  v8 = objc_msgSend(v7, "isLoaded");

  if ((v8 & 1) == 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userManifest"));
    objc_msgSend(v9, "setIsLoaded:", 1);

    dispatch_group_enter(v2);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userManifest"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000F2B40;
    v15[3] = &unk_1004A6200;
    v16 = v2;
    objc_msgSend(v10, "_load:", v15);

  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadQueue"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000483F0;
  v13[3] = &unk_1004A63C8;
  v12 = *(void **)(a1 + 40);
  v13[4] = *(_QWORD *)(a1 + 32);
  v14 = v12;
  dispatch_group_notify(v2, v11, v13);

}

uint64_t sub_100012358()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)&v0[OBJC_IVAR___MTFeedManager_queue];
  v9 = swift_allocObject(&unk_1004BBA18, 24, 7);
  *(_QWORD *)(v9 + 16) = v0;
  aBlock[4] = sub_10004A958;
  v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004BBA30;
  v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_10003F544((uint64_t *)&unk_10055B200);
  v13 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

void sub_100012654(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100012848(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint8_t v18[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "manifest"));
  v3 = objc_msgSend(*(id *)(a1 + 40), "_validatePlaybackRequest:", *(_QWORD *)(a1 + 32));
  if (v3 == (id)11)
  {
    v5 = _MTLogCategoryPlayback(11, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to setPlaybackQueue because we need an internet connection.", v18, 2u);
    }

    v7 = *(void **)(a1 + 32);
    v8 = 11;
  }
  else
  {
    v9 = (uint64_t)v3;
    v10 = objc_msgSend(*(id *)(a1 + 32), "dryRun");
    v7 = *(void **)(a1 + 32);
    if (!v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "context"));
      v12 = objc_msgSend(v11, "playbackIsUserRequested");

      if (v12)
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[MTIntentDonationUtil sharedInstance](MTIntentDonationUtil, "sharedInstance"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
        objc_msgSend(v13, "donateManifestCurrentItem:playReason:", v2, objc_msgSend(v14, "source"));

      }
      if (v9 == 1)
      {
        v15 = *(void **)(a1 + 40);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "manifest"));
        LODWORD(v15) = objc_msgSend(v15, "_openExternalItemIfNeededForManifest:", v16);

        if (!(_DWORD)v15)
        {
          if (os_feature_enabled_red_sun())
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
            objc_msgSend(v17, "setUpNextQueueIntent:", 1);

          }
          else if ((objc_msgSend(*(id *)(a1 + 40), "_promptToClearUpNextIfNeededForRequest:", *(_QWORD *)(a1 + 32)) & 1) != 0)
          {
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 40), "_setPlaybackQueue:", *(_QWORD *)(a1 + 32));
          goto LABEL_14;
        }
        v9 = 7;
      }
      v7 = *(void **)(a1 + 32);
    }
    v8 = v9;
  }
  objc_msgSend(v7, "finishWithStatus:", v8);
LABEL_14:

}

uint64_t sub_1000129F4(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE v17[24];
  Swift::Int v18;

  v3 = v2;
  v6 = (uint64_t *)&v2[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates];
  v8 = *v6;
  v7 = v6[1];
  *v6 = a1;
  v6[1] = a2;
  sub_10002CA20(v8, v7);
  sub_10002CA20(a1, a2);
  sub_10002CA30(v8, v7);
  if (v8)
  {
    if (*v6)
    {
      sub_10002CA30(a1, a2);
      return sub_10002CA30(v8, v7);
    }
    v15 = *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadManagerObserver];
    swift_beginAccess(v15 + qword_100557F70, v17, 33, 0);
    v16 = (void *)sub_10033A2D8(v3);
    swift_endAccess(v17);

    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadsNotifier], "unregisterForUpdates:", v15);
    sub_10002CA30(a1, a2);
    v13 = v8;
    v14 = v7;
  }
  else
  {
    v10 = *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadManagerObserver];
    swift_beginAccess(v10 + qword_100557F70, v17, 33, 0);
    v11 = v3;
    sub_10000B860(&v18, v11);
    v12 = (void *)v18;
    swift_endAccess(v17);

    objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadsNotifier], "registerForUpdates:", v10);
    v13 = a1;
    v14 = a2;
  }
  return sub_10002CA30(v13, v14);
}

uint64_t sub_100012BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  result = type metadata accessor for OperationResult(319, *(_QWORD *)(a1 + 368), a3, a4);
  if (v6 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = (char *)&value witness table for () + 64;
    result = swift_initClassMetadata2(a1, 0, 2, v7, a1 + 384);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100012E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  uint64_t v18;
  id *v19;
  id v22;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  if (a2 == 1)
  {
    v22 = objc_begin_catch(a1);
    if (v18)
      (*(void (**)(uint64_t, _QWORD))(v18 + 16))(v18, 0);

    objc_end_catch();
    JUMPOUT(0x100012E04);
  }
  _Unwind_Resume(a1);
}

void sub_100012E8C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint8_t v8[16];

  v2 = _MTLogCategoryDefault();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MTAccountController: updating active account", v8, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_activeAccountBlocking"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_DSID"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringValue"));

  v7 = *(_QWORD *)(a1 + 40);
  if (v7 | v6 && (objc_msgSend((id)v7, "isEqualToString:", v6) & 1) == 0)
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1004A9C38);
  objc_msgSend(*(id *)(a1 + 32), "setActiveAccount:", v4);
  objc_msgSend(*(id *)(a1 + 32), "setHasFetchedInitialAccount:", 1);

}

void sub_100012FB0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  uint32_t v27;
  void *v28;
  void *v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id v35;
  uint8_t v36[128];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "temporaryDirectory"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v35 = 0;
  v29 = (void *)v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentsOfDirectoryAtPath:error:", v2, &v35));
  v5 = v35;

  if (v5)
  {
    v6 = _MTLogCategoryFeedUpdate();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedDescription"));
      *(_DWORD *)buf = 138412546;
      v38 = v29;
      v39 = 2112;
      v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to obtain list of files in directory:%@, error:%@", buf, 0x16u);

    }
  }
  v28 = v5;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v9 = v4;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v32 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v14, "containsString:", CFSTR("_feed")))
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
          v16 = objc_msgSend(v15, "keepsFeedFileInTempDirAfterDownload");

          if (!v16 || objc_msgSend(*(id *)(a1 + 32), "isFileExpired:inDirectory:", v14, v29))
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "stringByAppendingPathComponent:", v14));
            v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
            v30 = 0;
            v19 = objc_msgSend(v18, "removeItemAtPath:error:", v17, &v30);
            v20 = v30;

            v21 = _MTLogCategoryFeedUpdate();
            v22 = objc_claimAutoreleasedReturnValue(v21);
            v23 = v22;
            if ((v19 & 1) != 0)
            {
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                v38 = v17;
                v24 = v23;
                v25 = OS_LOG_TYPE_DEBUG;
                v26 = "Temporary feed file has been removed:%@";
                v27 = 12;
                goto LABEL_18;
              }
            }
            else if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v38 = v17;
              v39 = 2112;
              v40 = v20;
              v24 = v23;
              v25 = OS_LOG_TYPE_ERROR;
              v26 = "Failed to remove temporary feed file at:%@, error:%@";
              v27 = 22;
LABEL_18:
              _os_log_impl((void *)&_mh_execute_header, v24, v25, v26, buf, v27);
            }

            continue;
          }
        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    }
    while (v11);
  }

}

void sub_1000133CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForPlayerItem:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100013408(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id location;

  v2 = objc_msgSend(objc_alloc((Class)MTAllPropertyChangesQueryObserver), "initWithEntityName:predicate:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "setAllPropertyChangeObserver:", v2);

  objc_initWeak(&location, *(id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allPropertyChangeObserver"));
  objc_msgSend(v3, "startObserving");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allPropertyChangeObserver"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10011577C;
  v6[3] = &unk_1004AA708;
  objc_copyWeak(&v7, &location);
  v5 = objc_msgSend(v4, "addResultsChangedHandler:", v6);

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void sub_1000134F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10001392C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100013950(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSMutableArray *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint8_t buf[4];
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "restorationCompletions"));
  v4 = _MTLogCategoryPlayback(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v11 = objc_msgSend(v2, "count");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Finished restoring manifest. Will call %lu completions", buf, 0xCu);
  }

  v6 = objc_opt_new(NSMutableArray);
  objc_msgSend(*(id *)(a1 + 32), "setRestorationCompletions:", v6);

  objc_msgSend(*(id *)(a1 + 32), "setIsManifestRestorationOngoing:", 0);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100112B78;
  v8[3] = &unk_1004A6200;
  v9 = v2;
  v7 = v2;
  +[IMAVPlayer performOnMainQueue:](IMAVPlayer, "performOnMainQueue:", v8);

}

void sub_100013A94(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "podcast"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uuid"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "title"));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "sortDescriptorsForPlayOrder"));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  v12 = objc_claimAutoreleasedReturnValue(+[MTPodcastDetailDataSource predicateForPodcast:sectionType:](MTPodcastDetailDataSource, "predicateForPodcast:sectionType:", v2, *(_QWORD *)(a1 + 80)));
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

}

void sub_100013B68(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "importContext"));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100019444;
  v7[3] = &unk_1004A6618;
  v8 = v3;
  v9 = (id)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForPodcastsNeedingRetry:](MTPodcast, "predicateForPodcastsNeedingRetry:", 1));
  v4 = *(void **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = v4;
  v5 = v9;
  v6 = v3;
  objc_msgSend(v6, "performBlock:", v7);

}

void sub_1000143B0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  int8x16_t v13;
  _QWORD v14[4];
  id v15;
  int8x16_t v16;
  id v17;

  v6 = a2;
  v7 = a4;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "URLForKey:", kMTSyncPutAll));
  v9 = *(_QWORD *)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10000E338;
  v14[3] = &unk_1004AA1C8;
  v15 = v7;
  v13 = *(int8x16_t *)(a1 + 40);
  v10 = (id)v13.i64[0];
  v16 = vextq_s8(v13, v13, 8uLL);
  v17 = v6;
  v11 = v6;
  v12 = v7;
  objc_msgSend(v8, "asyncValueOnQueue:withCompletion:", v9, v14);

}

void sub_100014C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PodcastsPlayerAdapter.controller(_:defersResponseReplacement:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  void *v4;
  id v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  id result;
  void *v12;
  _QWORD *v13;
  id v14;

  v4 = v3;
  v7 = objc_msgSend(a1, "request");
  v8 = objc_opt_self(MPCPlayerRequest);
  v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
  if (!v9)
  {
    swift_unknownObjectRelease(v7);
    goto LABEL_5;
  }
  v10 = *(_QWORD **)&v3[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator];
  result = objc_msgSend(v9, "playerPath");
  if (result)
  {
    v12 = result;
    (*(void (**)(void))((swift_isaMask & *v10) + 0x110))();
    swift_unknownObjectRelease(v7);

LABEL_5:
    v13 = (_QWORD *)swift_allocObject(&unk_1004BE608, 40, 7);
    v13[2] = a2;
    v13[3] = a3;
    v13[4] = v4;
    swift_retain(a3);
    v14 = v4;
    dispatch_to_main_queue(_:)(sub_10004AC44, v13);
    return (id)swift_release(v13);
  }
  __break(1u);
  return result;
}

uint64_t sub_100015284(uint64_t a1)
{
  _BOOL8 v2;
  id WeakRetained;
  uint64_t result;

  if (*(_BYTE *)(a1 + 48))
    v2 = *(_BYTE *)(a1 + 49) != 0;
  else
    v2 = 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setGlobalCellularEnabled:", v2);

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100015604(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[5];
  uint8_t buf[16];

  v2 = _MTLogCategoryiTunesMigration();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[iTunesMigration] stop showing migration screen.", buf, 2u);
  }

  if (*(_BYTE *)(a1 + 40))
    v4 = objc_msgSend(*(id *)(a1 + 32), "switchToLibraryIfNowHasContent");
  if ((os_feature_enabled_bluemoon(v4) & 1) == 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100105028;
    v9[3] = &unk_1004AB470;
    v9[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v5, "setPlatformSyncPlayheadChangeObserverBlock:", v9);

  }
  v6 = _MTLogCategoryiTunesMigration();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[iTunesMigration] starting post migration stuff...", buf, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "setupAfterBecomingActive");
}

__n128 initializeBufferWithCopyOfBuffer for UberArtworkResetMigrator(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

void sub_10001682C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100016860(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD block[4];
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) |= +[MTPlaylistQueryManager updatePlaylist:inContext:](MTPlaylistQueryManager, "updatePlaylist:inContext:", v7, *(_QWORD *)(a1 + 40));
        if (*(_QWORD *)(a1 + 48))
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistForUuid:", v7));
          (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v4);
  }

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    objc_msgSend(*(id *)(a1 + 40), "saveInCurrentBlock");
    v9 = *(void **)(a1 + 40);
    v10 = kMTPlaylistEntityName;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate truePredicate](NSPredicate, "truePredicate"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectsInEntity:predicate:sortDescriptors:", v10, v11, 0));

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100047E98;
    block[3] = &unk_1004A6200;
    v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "mt_compactMap:", &stru_1004AA6B8));
    v13 = v15;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_100016B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100016BA4(id a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  void *v4;
  uint8_t v5[16];

  v1 = _MTLogCategoryDefault(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Foreground Sync] Application is Active! Starting all processors", v5, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[PFDeferredLaunchTaskCoordinator sharedInstance](PFDeferredLaunchTaskCoordinator, "sharedInstance"));
  objc_msgSend(v3, "deferWork:", &stru_1004A6408);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[PFDeferredLaunchTaskCoordinator sharedInstance](PFDeferredLaunchTaskCoordinator, "sharedInstance"));
  objc_msgSend(v4, "deferWork:", &stru_1004A6468);

}

_QWORD *sub_100016C4C(_QWORD *a1)
{
  destroy for DownloaderConfiguration(a1);
  return a1;
}

uint64_t destroy for DownloaderConfiguration(_QWORD *a1)
{
  sub_10003D380(a1);
  sub_10003D380(a1 + 5);
  sub_10003D380(a1 + 10);
  return sub_10003D380(a1 + 15);
}

void sub_100016CB4()
{
  id v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;
  void **v4;
  id v5;
  void **v6;

  v6 = sub_10002A45C();
  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v1 = objc_msgSend(v0, "delegate");

  if (!v1)
    goto LABEL_8;
  if ((objc_msgSend(v1, "respondsToSelector:", "window") & 1) == 0)
  {

    swift_unknownObjectRelease(v1);
    return;
  }
  v5 = objc_msgSend(v1, "window");
  swift_unknownObjectRelease(v1);
  if (!v5)
    goto LABEL_8;
  v2 = type metadata accessor for Window(0);
  v3 = (_QWORD *)swift_dynamicCastClass(v5, v2);
  if (!v3)
  {

LABEL_8:
    v4 = v6;
    goto LABEL_9;
  }
  (*(void (**)(void **))((swift_isaMask & *v3) + 0xC0))(v6);

  v4 = (void **)v5;
LABEL_9:

}

void sub_100016DD8(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  id v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100047AE0;
    v3[3] = &unk_1004A9D58;
    v4 = *(id *)(a1 + 32);
    v5 = a2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

  }
}

uint64_t sub_100016E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t Strong;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  NSObject *v44;
  void **v46;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void **aBlock;
  _QWORD v61[4];
  uint64_t v62;
  char v63[24];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v56 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v55 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v55 - v20;
  a4 += 16;
  swift_beginAccess(a4, v63, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (!Strong)
  {
    v32 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v33 = static OS_os_log.feedUpdate.getter(v32);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "[Foreground Sync] Unable to unwrap self in ForegroundSyncUtil.", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    v37 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
    v38 = v21;
    return v37(v38, v58);
  }
  v23 = Strong;
  if (a3)
  {
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v24 = swift_errorRetain(a3);
    static OS_os_log.feedUpdate.getter(v24);
    v25 = swift_errorRetain(a3);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v28 = 138412290;
      v30 = _convertErrorToNSError(_:)(a3);
      aBlock = (void **)v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v61, v28 + 4, v28 + 12);
      *v29 = v30;
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[Foreground Sync] Failed to fetch feed update threshold from the bag with error: %@", v28, 0xCu);
      v31 = sub_10003F544((uint64_t *)&unk_100556480);
      swift_arrayDestroy(v29, 1, v31);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      swift_errorRelease(a3);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);

    }
    v37 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
    v38 = v19;
    return v37(v38, v58);
  }
  if (a1
    && (aBlock = 0,
        LOBYTE(v61[0]) = 1,
        static Double._conditionallyBridgeFromObjectiveC(_:result:)(a1, &aBlock),
        (v61[0] & 1) == 0))
  {
    v46 = aBlock;
    v47 = swift_allocObject(&unk_1004BFD70, 32, 7);
    *(_QWORD *)(v47 + 16) = v46;
    *(_QWORD *)(v47 + 24) = v23;
    v61[3] = sub_10004A4A0;
    v62 = v47;
    aBlock = _NSConcreteStackBlock;
    v61[0] = 1107296256;
    v61[1] = sub_100027AF8;
    v61[2] = &unk_1004BFD88;
    v48 = _Block_copy(&aBlock);
    v49 = v23;
    static DispatchQoS.unspecified.getter(v49);
    v59 = _swiftEmptyArrayStorage;
    v50 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v51 = sub_10003F544((uint64_t *)&unk_10055B200);
    v52 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v51, v52, v7, v50);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v48);
    _Block_release(v48);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v55);

    return swift_release(v62);
  }
  else
  {
    v39 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v40 = static OS_os_log.feedUpdate.getter(v39);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "[Foreground Sync] Unable to cast value for feed update threshold from the bag to a Double.", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
      v44 = v23;
    }
    else
    {
      v44 = v41;
      v41 = v23;
    }
    v54 = v57;
    v53 = v58;

    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v16, v53);
  }
}

void sub_100017510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000176E8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t result;

  v0 = sub_10003F544(&qword_100558330);
  v1 = swift_allocObject(v0, 80, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1003CA240;
  v2 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v3 = type metadata accessor for LibraryPodcastStateDataSource(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v1 + 32) = LibraryPodcastStateDataSource.init(contextProvider:)(v2);
  *(_QWORD *)(v1 + 40) = &protocol witness table for LibraryPodcastStateDataSource;
  v4 = sub_100006760();
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "sharedInstance");
  v6 = objc_msgSend(v5, "podcastStateDataSource");

  *(_QWORD *)(v1 + 48) = v6;
  *(_QWORD *)(v1 + 56) = &protocol witness table for AddingPodcastStateDataSource;
  v7 = type metadata accessor for DefaultPodcastStateDataSource(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  result = DefaultPodcastStateDataSource.init()();
  *(_QWORD *)(v1 + 64) = result;
  *(_QWORD *)(v1 + 72) = &protocol witness table for DefaultPodcastStateDataSource;
  qword_100558328 = v1;
  return result;
}

void sub_1000177FC(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "_activityRestorationPath");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v2, "removeItemAtURL:error:", v4, 0);

  v5 = *(_QWORD *)(a1 + 40);
  v14 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, &v14));
  v7 = v14;
  v9 = v7;
  if (v7)
  {
    v10 = _MTLogCategoryPlayback(v7, v8);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to archive activity with error %@", buf, 0xCu);
    }

  }
  v12 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "_activityRestorationPath");
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  objc_msgSend(v6, "writeToURL:atomically:", v13, 1);

}

unint64_t sub_100017E34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005536B8;
  if (!qword_1005536B8)
  {
    v1 = objc_opt_self(PFAutoBugCaptureBugReporter);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005536B8);
  }
  return result;
}

id sub_100018218(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  objc_class *v26;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  objc_super v31;
  uint64_t v32;

  v2 = v1;
  v30 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_expectedEpisodeStates] = &_swiftEmptyDictionarySingleton;
  v14 = &v2[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v29 = OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_accessQueue;
  v28 = sub_10002C5E0();
  v15 = sub_10003F544(&qword_100559B78);
  v16 = swift_allocObject(v15, ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72), *(unsigned __int8 *)(v11 + 80) | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1003CA200;
  v17 = v2;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  v32 = v16;
  v18 = sub_100005E40((unint64_t *)&qword_1005521B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10003F544(&qword_100555A00);
  v20 = sub_100048CA8();
  v21 = dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v19, v20, v10, v18);
  static DispatchQoS.unspecified.getter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x8000000100437CC0, v9, v13, v6, 0);
  *(_QWORD *)&v2[v29] = v22;
  v23 = OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadManagerObserver;
  *(_QWORD *)&v17[v23] = objc_msgSend(objc_allocWithZone((Class)sub_10003F544(&qword_10055CFE0)), "init");
  v24 = v30;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadsNotifier] = v30;
  v25 = v24;

  v26 = (objc_class *)type metadata accessor for DownloadingEpisodeStateDataSource();
  v31.receiver = v17;
  v31.super_class = v26;
  return objc_msgSendSuper2(&v31, "init");
}

uint64_t sub_100018494(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  id WeakRetained;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  _QWORD v16[3];
  _QWORD v17[3];

  if ((objc_msgSend(*(id *)(a1 + 32), "suppressMetrics") & 1) == 0)
  {
    v16[0] = CFSTR("interactive");
    v2 = *(_QWORD *)(a1 + 40);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 48), "isInteractive")));
    v17[0] = v3;
    v16[1] = CFSTR("shouldStart");
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
    v17[1] = v4;
    v16[2] = CFSTR("play_source");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTStoreReportingController reportingStringForPlayReason:](MTStoreReportingController, "reportingStringForPlayReason:", *(_QWORD *)(a1 + 72)));
    v17[2] = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 3));
    +[IMMetrics recordUserAction:dataSource:withData:](IMMetrics, "recordUserAction:dataSource:withData:", CFSTR("play_manifest"), v2, v6);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v8 = objc_msgSend(v7, "upNextQueueIntent") == (id)2;

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "upNextController"));
    objc_msgSend(v9, "clear");

  }
  if (*(_BYTE *)(a1 + 80))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100111E38;
    v12[3] = &unk_1004A81A8;
    objc_copyWeak(&v15, (id *)(a1 + 64));
    v13 = *(id *)(a1 + 48);
    v14 = *(id *)(a1 + 32);
    +[IMAVPlayer performOnMainQueue:](IMAVPlayer, "performOnMainQueue:", v12);

    objc_destroyWeak(&v15);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_sync_enter(WeakRetained);
    objc_msgSend(*(id *)(a1 + 32), "finishWithStatus:", 1);
    objc_sync_exit(WeakRetained);

  }
  return kdebug_trace(723518088, 0, 0, 0, 0);
}

void sub_1000186F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100018DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;

  objc_sync_exit(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100018DE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  StaticString.description.getter(v1, v2, v3);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  LODWORD(v6) = objc_msgSend(v4, "BOOLForKey:", v7);

  return v6 ^ 1;
}

void sub_100018E74()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint8_t *v19;
  _DWORD *v20;
  id v21;
  uint64_t v22;
  _DWORD *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v22 - v8;
  v10 = OBJC_IVAR___MTBackgroundTaskManager_task;
  if (*(_QWORD *)&v1[OBJC_IVAR___MTBackgroundTaskManager_task] == UIBackgroundTaskInvalid)
  {
    v11 = static Logger.backgroundTaskManager.getter(v7);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Tried to end background task but there is no ongoing background task.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    static Logger.backgroundTaskManager.getter(v7);
    v15 = v1;
    v16 = ((uint64_t (*)(void))Logger.logObject.getter)();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = v15;
      v19 = v18;
      *(_DWORD *)v18 = 134217984;
      v20 = v18 + 12;
      v23 = v18 + 4;
      v25 = Int.hashValue.getter(*(_QWORD *)&v1[v10]);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v23, v20);

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Ending background task with identifier hash: %ld.", v19, 0xCu);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {

      v16 = v15;
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    v21 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    objc_msgSend(v21, "endBackgroundTask:", *(_QWORD *)&v1[v10]);

    *(_QWORD *)&v1[v10] = UIBackgroundTaskInvalid;
  }
}

uint64_t sub_1000190D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  NSString v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;

  v0 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v1);
  v6 = (char *)&v23 - v5;
  __chkstk_darwin(v4);
  v8 = (char *)&v23 - v7;
  v9 = type metadata accessor for CoreDataDownloadJobStorage();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v12 = String._bridgeToObjectiveC()();
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v11, "URLForResource:withExtension:", v12, v13);

  if (v14)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);

    v15 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 0, 1, v15);
  }
  else
  {
    v15 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  }
  sub_10003DC78((uint64_t)v6, (uint64_t)v8, (uint64_t *)&unk_100553DC0);
  sub_100007A64((uint64_t)v8, (uint64_t)v3, (uint64_t *)&unk_100553DC0);
  type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v3, 1, v15);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v18 = objc_allocWithZone((Class)NSManagedObjectModel);
    URL._bridgeToObjectiveC()(v19);
    v21 = v20;
    v22 = objc_msgSend(v18, "initWithContentsOfURL:", v20);

    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v3, v15);
    if (v22)
    {
      sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DC0);
      return (uint64_t)v22;
    }
  }
  __break(1u);
  return result;
}

void sub_100019444(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;

  v2 = kMTPodcastEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", kPodcastUpdatedDate, 1));
  v20 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 1));
  v7 = kPodcastUuid;
  v19 = kPodcastUuid;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectDictionariesInEntity:predicate:sortDescriptors:propertiesToFetch:includeObjectId:", v2, v4, v6, v8, 0));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "valueForKey:", v7));
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "workQueue"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000083F0;
  v15[3] = &unk_1004A8C40;
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(void **)(a1 + 56);
  v16 = v10;
  v17 = v12;
  v18 = v13;
  v14 = v10;
  dispatch_async(v11, v15);

}

void sub_1000195E8(uint64_t a1)
{
  double v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSString *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint8_t buf[4];
  void *v18;

  v2 = *(double *)(a1 + 40);
  v3 = _MTLogCategoryCloudSync(a1);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2 >= 0.0)
  {
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 40)));
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v6, "timeIntervalSinceNow");
      v9 = v8;
      objc_msgSend(v7, "timeIntervalSinceNow");
      v11 = v9 - v10;
      if (v11 <= 60.0)
        v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.2f seconds"), *(_QWORD *)&v11, v16);
      else
        v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%ld minutes, %ld seconds"), (uint64_t)v11 / 60, (uint64_t)v11 % 60);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (%@ from now)"), v6, v13));

      *(_DWORD *)buf = 138412290;
      v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "scheduling next timer update at %@", buf, 0xCu);

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "_timerFired:", 0, 0, *(double *)(a1 + 40)));
    objc_msgSend(*(id *)(a1 + 32), "setTimer:", v15);

  }
  else
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "scheduled timer date already passed.  Firing immediately", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "_timerFired:", 0);
  }
}

void sub_1000197FC(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  _QWORD block[5];
  id v10;
  _QWORD v11[4];
  NSObject *v12;
  _QWORD v13[4];
  NSObject *v14;
  _QWORD v15[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10004E644;
  v15[3] = &unk_1004A6200;
  v15[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 32), "setFairPlayMigrationBackgroundTask:", objc_msgSend(v2, "beginBackgroundTaskWithName:expirationHandler:", CFSTR("com.apple.podcasts.FairPlayMigration"), v15));

  v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[PFFairPlayRolloutController sharedInstance](PFFairPlayRolloutController, "sharedInstance"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100047F94;
  v13[3] = &unk_1004A63A0;
  v5 = v3;
  v14 = v5;
  objc_msgSend(v4, "didRollbackStatusChangeWithCompletion:", v13);

  dispatch_group_enter(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[PFFairPlayMigrationController sharedInstance](PFFairPlayMigrationController, "sharedInstance"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10004E750;
  v11[3] = &unk_1004A6200;
  v12 = v5;
  v7 = v5;
  objc_msgSend(v6, "migrateIfNecessaryWithCompletion:", v11);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004E758;
  block[3] = &unk_1004A63C8;
  v8 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v10 = v8;
  dispatch_group_notify(v7, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000199A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)@<X0>(uint64_t@<X8>);
  objc_class *v6;
  char *v7;
  char *v8;
  uint64_t (**v9)@<X0>(uint64_t@<X8>);
  double v10;
  char *v11;
  uint64_t v12;
  uint64_t (**v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  Class isa;
  uint64_t v21;
  objc_super v22;

  v5 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject(&unk_1004B7E28, 40, 7);
  *((_QWORD *)v5 + 2) = v2;
  *((_QWORD *)v5 + 3) = a1;
  *((_QWORD *)v5 + 4) = a2;
  v6 = (objc_class *)sub_10003F544((uint64_t *)&unk_10055BCB0);
  v7 = (char *)objc_allocWithZone(v6);
  v8 = &v7[*(_QWORD *)((swift_isaMask & *(_QWORD *)v7) + 0x180)];
  *(_QWORD *)v8 = 0;
  v8[8] = 2;
  v9 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v7[*(_QWORD *)((swift_isaMask & *(_QWORD *)v7) + 0x188)];
  *v9 = sub_1000498A4;
  v9[1] = v5;
  v22.receiver = v7;
  v22.super_class = v6;
  swift_retain(v2);
  *(_QWORD *)&v10 = swift_retain(a2).n128_u64[0];
  v11 = (char *)objc_msgSendSuper2(&v22, "init", v10);
  v12 = swift_allocObject(&unk_1004B7E50, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  v13 = (uint64_t (**)(uint64_t))&v11[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v14 = *(_QWORD *)&v11[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v15 = *(_QWORD *)&v11[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
  *v13 = sub_100244B88;
  v13[1] = (uint64_t (*)(uint64_t))v12;
  swift_retain(a2);
  sub_10002CA30(v14, v15);
  v16 = sub_10000C210();
  v17 = sub_10003F544((uint64_t *)&unk_100553780);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v18 + 32) = v11;
  v21 = v18;
  specialized Array._endMutation()(v18);
  sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
  v19 = v11;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  objc_msgSend(v16, "addOperations:waitUntilFinished:", isa, 0);

}

uint64_t sub_100019F54(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  void **aBlock;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  void *v45;
  uint64_t (*v46)();
  uint64_t v47;
  char v48[24];

  v13 = a5 + 16;
  swift_beginAccess(a5 + 16, v48, 0, 0);
  Strong = swift_weakLoadStrong(v13);
  if (!Strong)
    goto LABEL_3;
  v15 = Strong;
  v39 = a4;
  v16 = *(NSObject **)(Strong + 48);
  v41 = a7;
  v17 = swift_allocObject(&unk_1004BE200, 25, 7);
  *(_QWORD *)(v17 + 16) = v15;
  *(_BYTE *)(v17 + 24) = 1;
  v40 = a6;
  v18 = swift_allocObject(&unk_1004BE228, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_10004AAB8;
  *(_QWORD *)(v18 + 24) = v17;
  v46 = sub_100029B3C;
  v47 = v18;
  aBlock = _NSConcreteStackBlock;
  v43 = 1107296256;
  v44 = sub_100029B1C;
  v45 = &unk_1004BE240;
  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = _Block_copy(&aBlock);
  v23 = v47;
  swift_retain(v15);
  swift_retain(v18);
  swift_release(v23);
  v24 = v16;
  a4 = v39;
  dispatch_sync(v24, v22);
  v25 = v22;
  a3 = v21;
  a2 = v20;
  a1 = v19;
  _Block_release(v25);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation(v18, "", 104, 43, 30, 1);
  swift_release(v15);
  v26 = v17;
  a7 = v41;
  swift_release(v26);
  v27 = v18;
  a6 = v40;
  result = swift_release(v27);
  if ((v23 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    if ((a4 & 1) != 0)
    {
      v30 = sub_100047858(a1, a2, a3);
      v31 = static os_log_type_t.error.getter(v30);
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v32 = (void *)static OS_os_log.restore.getter();
      v33 = sub_10003F544(&qword_1005559A0);
      v34 = swift_allocObject(v33, 72, 7);
      *(_OWORD *)(v34 + 16) = xmmword_1003CA200;
      aBlock = (void **)a1;
      v43 = a2;
      LOBYTE(v44) = a3;
      v35 = sub_10004A190();
      v36 = Error.localizedDescription.getter(&type metadata for RestoreRunnerError, v35);
      v38 = v37;
      *(_QWORD *)(v34 + 56) = &type metadata for String;
      *(_QWORD *)(v34 + 64) = sub_10003E198();
      *(_QWORD *)(v34 + 32) = v36;
      *(_QWORD *)(v34 + 40) = v38;
      os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Post-restore downloads will not be started due to underlying error: %{public}s", 78, 2, v34);

      swift_bridgeObjectRelease(v34);
      a6(0);
      return sub_1002C8C30(a1, a2, a3, 1);
    }
    else
    {
      swift_beginAccess(v13, &aBlock, 0, 0);
      result = swift_weakLoadStrong(v13);
      if (result)
      {
        v29 = result;
        sub_1002C8AE8(a1, a2, a3);
        sub_1002C7D3C(a1, a2, a3, a6, a7);
        sub_1002C8C30(a1, a2, a3, 0);
        return swift_release(v29);
      }
    }
  }
  return result;
}

id sub_10001A270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t updated;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id result;
  void *v22;
  id v23;
  NSObject *v24;
  id v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  id v45;
  __n128 v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  void (*v52)(id *, __n128);
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  id v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  NSObject *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  Class v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  void *v76;
  uint64_t v77;
  char v78[24];
  _BYTE v79[40];
  _QWORD v80[6];

  updated = type metadata accessor for FeedUpdateRequest(0);
  v73 = *(_QWORD *)(updated - 8);
  v74 = updated;
  __chkstk_darwin(updated);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v70 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v69 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FeedManagerBagConfiguration(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80[3] = type metadata accessor for FeedIngesterProvider();
  v80[4] = sub_100026844(&qword_10055ED08, (uint64_t (*)(uint64_t))type metadata accessor for FeedIngesterProvider, (uint64_t)&protocol conformance descriptor for FeedIngesterProvider);
  v80[0] = a2;
  v15 = (void *)objc_opt_self(MTDB);
  v16 = objc_msgSend(v15, "sharedInstance", swift_retain(a2).n128_f64[0]);
  v17 = objc_msgSend(v16, "importContext");

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  sub_10000A520((uint64_t)v80, (uint64_t)v79);
  v18 = type metadata accessor for StoreFeedUpdater(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = v17;
  v20 = StoreFeedUpdater.init(bagConfiguration:ctx:ingesterProvider:)(v14, v19, v79);
  result = objc_msgSend(objc_allocWithZone((Class)MTExternalFeedDownloader), "initWithDelegate:", 0);
  if (result)
  {
    v22 = result;
    sub_10000A520((uint64_t)v80, (uint64_t)v79);
    v72 = (Class)type metadata accessor for RSSFeedUpdater(0);
    v23 = objc_allocWithZone(v72);
    v24 = v19;
    v25 = v22;
    v68 = v24;
    v67 = v25;
    v26 = (void *)RSSFeedUpdater.init(ctx:ingesterProvider:externalFeedDownloader:)(v24, v79);
    v27 = (_QWORD *)(a3 + OBJC_IVAR___MTFeedManager__system);
    v28 = *(_QWORD *)(a3 + OBJC_IVAR___MTFeedManager__system);
    v29 = *(_QWORD *)(a3 + OBJC_IVAR___MTFeedManager__system + 8);
    v30 = *(_QWORD *)(a3 + OBJC_IVAR___MTFeedManager__system + 16);
    *v27 = v26;
    v27[1] = &protocol witness table for RSSFeedUpdater;
    v27[2] = v20;
    v31 = v26;
    v71 = a3;
    v32 = v31;
    swift_retain_n(v20, 2);
    v33 = v32;
    v34 = v71;
    v35 = v33;
    sub_1002941C0(v28, v29, v30);
    sub_1002919D0((uint64_t)v35, (uint64_t)&protocol witness table for RSSFeedUpdater, v20);
    v36 = (uint64_t *)(v34 + OBJC_IVAR___MTFeedManager__pendingRequests);
    swift_beginAccess(v34 + OBJC_IVAR___MTFeedManager__pendingRequests, v79, 1, 0);
    v37 = *v36;
    *v36 = (uint64_t)_swiftEmptyArrayStorage;
    v38 = *(_QWORD *)(v37 + 16);
    if (v38)
    {
      v66 = v9;
      v39 = (void *)objc_opt_self(MTStoreIdentifier);
      v40 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      v65 = v37;
      v41 = v37 + v40;
      v42 = *(_QWORD *)(v73 + 72);
      v43 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
      v43(v8, v41, v74);
      while (1)
      {
        v45 = v35;
        v46 = swift_retain(v20);
        if (objc_msgSend(v39, "isEmpty:", FeedUpdateRequest.podcastStoreId.getter(v46)))
          dispatch thunk of URLBasedFeedUpdater.updateFeed(request:)(v8, v72, &protocol witness table for RSSFeedUpdater);
        else
          dispatch thunk of StoreFeedUpdater.updateFeed(request:)(v8);

        swift_release(v20);
        v44 = v74;
        (*(void (**)(char *, uint64_t))(v73 + 8))(v8, v74);
        v41 += v42;
        if (!--v38)
          break;
        v43(v8, v41, v44);
      }
      swift_bridgeObjectRelease(v65);
      v9 = v66;
      v34 = v71;
    }
    else
    {
      swift_bridgeObjectRelease(v37);
    }
    v47 = (uint64_t *)(v34 + OBJC_IVAR___MTFeedManager__pendingBlocks);
    swift_beginAccess(v34 + OBJC_IVAR___MTFeedManager__pendingBlocks, v78, 1, 0);
    v48 = *v47;
    *v47 = (uint64_t)_swiftEmptyArrayStorage;
    v49 = *(_QWORD *)(v48 + 16);
    if (v49)
    {
      v50 = (uint64_t *)(v48 + 40);
      do
      {
        v52 = (void (*)(id *, __n128))*(v50 - 1);
        v51 = *v50;
        v75 = v35;
        v76 = &protocol witness table for RSSFeedUpdater;
        v77 = v20;
        v53 = swift_retain(v51);
        v52(&v75, v53);
        swift_release(v51);
        v50 += 2;
        --v49;
      }
      while (v49);
    }
    swift_bridgeObjectRelease(v48);
    v75 = v35;
    v76 = &protocol witness table for RSSFeedUpdater;
    v77 = v20;
    v54 = sub_10003F544((uint64_t *)&unk_10055EB20);
    UninitializedCurrentValueSubject.send(_:)(&v75, v54);
    v55 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v56 = v69;
    v57 = static OS_os_log.feedUpdate.getter(v55);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "System setup complete", v60, 2u);
      swift_slowDealloc(v60, -1, -1);

      swift_release_n(v20, 2);
      v61 = v35;
      v62 = v58;
      v63 = v70;
    }
    else
    {

      swift_release_n(v20, 2);
      v63 = v70;
      v62 = v68;
      v61 = v67;
    }

    (*(void (**)(char *, uint64_t))(v63 + 8))(v56, v9);
    return (id)sub_10003D380(v80);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t start(int a1, char **a2)
{
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  objc_class *v11;
  NSString *v12;
  NSString *v13;
  NSString *v14;
  NSString *v15;
  uint64_t v16;

  v4 = (objc_class *)objc_opt_class(MTAppDelegate_iOS);
  v5 = objc_autoreleasePoolPush();
  setenv("JSC_numberOfGCMarkers", "3", 1);
  v6 = setenv("JSC_numberOfWorklistThreads", "2", 1);
  if (MKBDeviceUnlockedSinceBoot(v6) != 1)
  {
    NSLog(CFSTR("Podcasts launched before first unlock since boot."));
    exit(0);
  }
  v7 = objc_msgSend(objc_alloc((Class)IMMetricsController), "initWithTopic:", CFSTR("xp_its_podcasts_main"));
  objc_msgSend(v7, "setShouldSuppressUserInfo:", 1);
  v8 = objc_msgSend(objc_alloc((Class)IMMetricsController), "initWithTopic:", CFSTR("xp_dzc_main"));
  objc_msgSend(v8, "setShouldSuppressUserInfo:", 1);
  objc_msgSend(v8, "setShouldIgnoreDNU:", 1);
  +[IMMetrics addMetricsController:](IMMetrics, "addMetricsController:", v8);
  v9 = objc_msgSend(objc_alloc((Class)IMMetricsController), "initWithTopic:", CFSTR("xp_amp_podcasts_main"));
  objc_msgSend(v9, "setShouldSuppressUserInfo:", 1);
  objc_msgSend(v9, "setShouldIgnoreDNU:", 1);
  +[IMMetrics addMetricsController:](IMMetrics, "addMetricsController:", v9);
  v10 = objc_msgSend(objc_alloc((Class)IMMetricsController), "initWithTopic:", CFSTR("xp_amp_podcasts_paf"));
  objc_msgSend(v10, "setShouldSuppressUserInfo:", 1);
  objc_msgSend(v10, "setShouldIgnoreDNU:", 1);
  +[IMMetrics addMetricsController:](IMMetrics, "addMetricsController:", v10);
  +[IMMetrics setDefaultMetricsController:](IMMetrics, "setDefaultMetricsController:", v7);
  +[IMMetrics enable](IMMetrics, "enable");
  +[IMMetrics startTimer:](IMMetrics, "startTimer:", CFSTR("app_launch"));
  +[MTLibraryMigrationUtil migrateDatabasePropertiesToSharedContainerIfNeeded](MTLibraryMigrationUtil, "migrateDatabasePropertiesToSharedContainerIfNeeded");
  +[MTLibraryMigrator migrateDatabaseToSharedContainerIfNeeded](MTLibraryMigrator, "migrateDatabaseToSharedContainerIfNeeded");
  if (+[MTLibraryMigrator needsMigration](MTLibraryMigrator, "needsMigration"))
    v4 = (objc_class *)objc_opt_class(MTMigrationAppDelegate_iOS);

  objc_autoreleasePoolPop(v5);
  v11 = (objc_class *)objc_opt_class(MTApplication_iOS);
  v12 = NSStringFromClass(v11);
  v13 = (NSString *)objc_claimAutoreleasedReturnValue(v12);
  v14 = NSStringFromClass(v4);
  v15 = (NSString *)objc_claimAutoreleasedReturnValue(v14);
  v16 = UIApplicationMain(a1, a2, v13, v15);

  return v16;
}

uint64_t sub_10001ABC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = sub_10003F544((uint64_t *)&unk_100553780);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1003CDE60;
  v4 = sub_10003F544(&qword_10055C880);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = swift_retain(a1);
  v6 = OnDemandLibraryEpisodeStateDataSource.init(episodeStateRepository:)(v5);
  v7 = sub_10002F9C8(&qword_10055C888, &qword_10055C880, (uint64_t)&protocol conformance descriptor for OnDemandLibraryEpisodeStateDataSource<A>);
  v8 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()(v4, v7);
  swift_release(v6);
  *(_QWORD *)(v3 + 32) = v8;
  v9 = sub_10003F544(&qword_10055C890);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = DefaultEpisodeStateDataSource.init()();
  v11 = sub_10002F9C8(&qword_10055C898, &qword_10055C890, (uint64_t)&protocol conformance descriptor for DefaultEpisodeStateDataSource<A>);
  v12 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()(v9, v11);
  v13 = swift_release(v10);
  *(_QWORD *)(v3 + 40) = v12;
  v14 = specialized Array._endMutation()(v13);
  v15 = defaultEpisodeBookmarkTransitionRules.getter(v14);
  v16 = sub_10003F544((uint64_t *)&unk_100553AD0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  return EpisodeStateController.init(dataSources:transitionRules:)(v3, v15);
}

void sub_10001AEF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  uint64_t v4;
  id v5;
  id v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    v4 = OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController;
    v5 = objc_msgSend(*(id *)(Strong + OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController), "request");
    v6 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator], "playbackPlayerPath");
    objc_msgSend(v5, "setPlayerPath:", v6);

    objc_msgSend(*(id *)&v3[v4], "setNeedsReloadForSignificantRequestChange");
  }
}

void sub_10001B1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v7 = static OS_os_log.feedUpdate.getter(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[Foreground Sync] Initiating feed updates on app foreground.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v11 = objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
  v12 = objc_msgSend(v11, "integerForKey:", kForegroundFeedUpdateThreshold);

  v13 = swift_allocObject(&unk_1004BFD20, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v1);
  aBlock[4] = sub_10004A4AC;
  v16 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000825C;
  aBlock[3] = &unk_1004BFD38;
  v14 = _Block_copy(aBlock);
  swift_release(v16);
  objc_msgSend(v12, "asyncValueWithCompletion:", v14);
  _Block_release(v14);

}

void sub_10001B630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  Class isa;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void **aBlock;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v15;
  void (*v16)();
  uint64_t v17;
  _BYTE v18[72];

  v1 = sub_10003F544(&qword_1005535A8);
  inited = swift_initStackObject(v1, v18);
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  aBlock = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodesPendingDeletionDefaultKey);
  v13 = v3;
  AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
  v4 = sub_100048A8C(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for AnyHashable);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v6 = objc_allocWithZone((Class)MTDefaultsChangeNotifier);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  v8 = objc_msgSend(v6, "initWithProperties:defaults:", isa, v5);

  if (v8)
  {
    *(_QWORD *)(v0 + 16) = v8;
    v16 = sub_100326B68;
    v17 = v0;
    aBlock = _NSConcreteStackBlock;
    v13 = 1107296256;
    v14 = sub_1003268B4;
    v15 = &unk_1004C33D0;
    v9 = _Block_copy(&aBlock);
    v10 = v17;
    v11 = v8;
    swift_retain(v0);
    swift_release(v10);
    objc_msgSend(v11, "addCallback:", v9);
    _Block_release(v9);

  }
  else
  {
    __break(1u);
  }
}

void sub_10001B7EC(void *a1, int a2)
{
  void *v3;
  void *v4;
  NSMutableArray *v5;
  NSMutableArray *v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  id v8;

  v8 = a1;
  v3 = (void *)CFPreferencesCopyAppValue(CFSTR("AppCanShowSiriSuggestionsBlacklist"), CFSTR("com.apple.suggestions"));
  v4 = v3;
  if (v3)
    v5 = (NSMutableArray *)objc_msgSend(v3, "mutableCopy");
  else
    v5 = objc_opt_new(NSMutableArray);
  v6 = v5;
  if (a2)
  {
    -[NSMutableArray removeObject:](v5, "removeObject:", v8);
  }
  else if ((-[NSMutableArray containsObject:](v5, "containsObject:", v8) & 1) == 0)
  {
    -[NSMutableArray addObject:](v6, "addObject:", v8);
  }
  CFPreferencesSetAppValue(CFSTR("AppCanShowSiriSuggestionsBlacklist"), v6, CFSTR("com.apple.suggestions"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.suggestions.settingsChanged"), 0, 0, 1u);

}

void sub_10001BA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  v1 = v0;
  v2 = sub_10003F544(&qword_100556700);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_100556708);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  RepublishingValueSubject.value.getter(&v28, v8);
  v11 = v28;

  if (!v11)
  {
    v12 = os_feature_enabled_red_sun();
    if ((_DWORD)v12)
    {
      v13 = static Podcasts.isUIPSidebarEnabled.getter(v12);
      if ((v13 & 1) == 0 && (v13 = dispatch thunk of RootSplitViewController.interfaceMode.getter(), (v13 & 1) != 0))
      {
        UISplitViewController.mcui.getter(v13);
        v19 = sub_10000C3B0();
        v20 = type metadata accessor for NowPlayingMediaPlayerController(0);
        v21 = sub_100005E40(&qword_1005566F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NowPlayingMediaPlayerController, (uint64_t)&protocol conformance descriptor for NowPlayingMediaPlayerController);
        v22 = (void *)MCUINamespace<A>.installNowPlayingView<A>(controller:)(v19, v20, v21);
        swift_release(v19);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        v28 = v22;
        RepublishingValueSubject.send(_:)(&v28);

      }
      else
      {
        UITabBarController.mcui.getter(v13);
        v14 = sub_10000C3B0();
        v15 = type metadata accessor for NowPlayingMediaPlayerController(0);
        v16 = sub_100005E40(&qword_1005566F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NowPlayingMediaPlayerController, (uint64_t)&protocol conformance descriptor for NowPlayingMediaPlayerController);
        v17 = (void *)MCUINamespace<A>.installNowPlayingView<A>(controller:)(v14, v15, v16);
        swift_release(v14);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        v28 = v17;
        RepublishingValueSubject.send(_:)(&v28);

      }
      RepublishingValueSubject.value.getter(&v28, v18);
      v24 = v28;
      if (v28)
      {
        v25 = sub_100005E40(&qword_100556710, v23, (uint64_t (*)(uint64_t))type metadata accessor for NowPlayingBootstrap, (uint64_t)&unk_1003CBEF4);
        v26 = swift_unknownObjectRetain(v1);
        dispatch thunk of NowPlayingViewController.delegate.setter(v26, v25);

      }
      sub_1001A695C();
    }
  }
}

void sub_10001BE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C290(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10001C2CC(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v8 = static OS_os_log.feedUpdate.getter();
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v11 = 134217984;
    v14 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v11 + 4, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a2, v11, 0xCu);
    swift_slowDealloc(v11, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10001C414(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(_QWORD *, _QWORD, uint64_t);
  uint64_t result;
  _QWORD *v22;
  char v23;
  void **aBlock;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v6 = static OS_os_log.cloudSync.getter();
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[Foreground Sync] Syncing BookKeeper and UPP.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(*(id *)(a1 + OBJC_IVAR___MTForegroundSyncUtil_syncController), "syncEverything");
  v10 = sub_100005EC8(0, &qword_100553B78, &off_1004A43D0);
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "sharedInstance");
  v28 = (uint64_t)sub_10004A434;
  v29 = 0;
  aBlock = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_10001C290;
  v27 = &unk_1004BFE28;
  v12 = _Block_copy(&aBlock);
  objc_msgSend(v11, "updateAllPodcastsNeedingRetry:", v12);
  _Block_release(v12);

  v13 = objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
  v14 = objc_msgSend(v13, "batchFeedFetchIsEnabled");

  v15 = *(_QWORD *)(a1 + OBJC_IVAR___MTForegroundSyncUtil_workQueue);
  v28 = (uint64_t)sub_1002E3728;
  v29 = 0;
  aBlock = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_10000825C;
  v27 = &unk_1004BFE50;
  v16 = _Block_copy(&aBlock);
  objc_msgSend(v14, "asyncValueOnQueue:withCompletion:", v15, v16);
  _Block_release(v16);

  v17 = type metadata accessor for Podcasts(0);
  v27 = (void *)v17;
  v18 = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v28 = v18;
  v19 = sub_1000242A8(&aBlock);
  v20 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104);
  v20(v19, enum case for Podcasts.ponderosa(_:), v17);
  LOBYTE(v16) = isFeatureEnabled(_:)(&aBlock);
  result = sub_10003D380(&aBlock);
  if ((v16 & 1) != 0)
  {
    v27 = (void *)v17;
    v28 = v18;
    v22 = sub_1000242A8(&aBlock);
    v20(v22, enum case for Podcasts.categoriesInLibrary(_:), v17);
    v23 = isFeatureEnabled(_:)(&aBlock);
    result = sub_10003D380(&aBlock);
    if ((v23 & 1) != 0)
      return CategoriesSyncUtil.syncCategories(completionHandler:)(0, 0);
  }
  return result;
}

void sub_10001CB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001CB30(void *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;

  v2 = static os_log_type_t.default.getter(a1);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v3 = (void *)static OS_os_log.launch.getter();
  v4 = sub_10003F544(&qword_1005559A0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1003CA200;
  v6 = objc_msgSend(a1, "activityType");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10003E198();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Continue user activity type: %{public}s", 39, 2, v5);

  swift_bridgeObjectRelease(v5);
  v10 = (void *)objc_opt_self(UIApplication);
  v11 = objc_msgSend(v10, "sharedApplication");
  v12 = objc_msgSend(v11, "delegate");

  if (v12)
  {
    if ((objc_msgSend(v12, "respondsToSelector:", "application:continueUserActivity:restorationHandler:") & 1) != 0)
    {
      v13 = objc_msgSend(v10, "sharedApplication");
      v16[4] = UInt64.int64Representation.getter;
      v17 = 0;
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 1107296256;
      v16[2] = sub_10023CD38;
      v16[3] = &unk_1004B7528;
      v14 = _Block_copy(v16);
      objc_msgSend(v12, "application:continueUserActivity:restorationHandler:", v13, a1, v14);
      _Block_release(v14);
      v15 = v17;
      swift_unknownObjectRelease(v12);

      swift_release(v15);
    }
    else
    {
      swift_unknownObjectRelease(v12);
    }
  }
}

void sub_10001CFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10001D150(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  char active;
  unsigned int *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  void *v32;
  void *v33;
  id v34;
  NSString v35;
  id v36;
  __n128 v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void **aBlock;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;

  v2 = v1;
  v63 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v68 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v67 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v65 = *(_QWORD *)(v5 - 8);
  v66 = v5;
  __chkstk_darwin(v5);
  v64 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AppEnterMetricsEvent.EnterKind(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v62 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v62 - v15;
  type metadata accessor for AnalyticsIdentifierManager(0);
  v17 = (void *)static AnalyticsIdentifierManager.sharedInstance.getter();
  dispatch thunk of AnalyticsIdentifierManager.resetIfNeeded()();

  type metadata accessor for MetricsActivity(0);
  v18 = (void *)static MetricsActivity.shared.getter();
  active = MetricsActivity.hasActiveCrossfireReferral.getter();

  if ((active & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v16, enum case for AppEnterMetricsEvent.EnterKind.link(_:), v7);
  }
  else
  {
    if (v2[OBJC_IVAR____TtC8Podcasts11AppDelegate_appHasBeenInBackground] == 1)
      v20 = (unsigned int *)&enum case for AppEnterMetricsEvent.EnterKind.taskSwitch(_:);
    else
      v20 = (unsigned int *)&enum case for AppEnterMetricsEvent.EnterKind.launch(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v16, *v20, v7);
  }
  v21 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v21(v14, v16, v7);
  v21(v11, v14, v7);
  v22 = *(unsigned __int8 *)(v8 + 80);
  v23 = (v22 + 24) & ~v22;
  v24 = swift_allocObject(&unk_1004BDEC8, v23 + v9, v22 | 7);
  *(_QWORD *)(v24 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v24 + v23, v14, v7);
  v25 = v2;
  sub_1002C0430();
  v69 = v3;
  if (v26)
  {
    v27 = v26;
LABEL_11:
    sub_1002C0E80(v26, v25, (uint64_t)v11);

    swift_release(v24);
    v30 = v27;
    goto LABEL_12;
  }
  v28 = type metadata accessor for Podcasts(0);
  v73 = (void *)v28;
  v74 = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v29 = sub_1000242A8(&aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v29, enum case for Podcasts.objectGraphBuilderInitialization(_:), v28);
  LOBYTE(v28) = isFeatureEnabled(_:)(&aBlock);
  sub_10003D380(&aBlock);
  if ((v28 & 1) != 0)
  {
    v27 = *(_QWORD *)&v25[OBJC_IVAR____TtC8Podcasts11AppDelegate_objectGraph];
    swift_retain(v27);
    goto LABEL_11;
  }
  v54 = swift_allocObject(&unk_1004BDEF0, 32, 7);
  *(_QWORD *)(v54 + 16) = sub_1002C789C;
  *(_QWORD *)(v54 + 24) = v24;
  v62 = v54;
  v55 = &v25[OBJC_IVAR____TtC8Podcasts11AppDelegate_pendingBootstrapBlocks];
  swift_beginAccess(&v25[OBJC_IVAR____TtC8Podcasts11AppDelegate_pendingBootstrapBlocks], &aBlock, 33, 0);
  v56 = *(_QWORD **)v55;
  swift_retain(v24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v56);
  *(_QWORD *)v55 = v56;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v56 = sub_10027B720(0, v56[2] + 1, 1, v56);
    *(_QWORD *)v55 = v56;
  }
  v59 = v56[2];
  v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    v56 = sub_10027B720((_QWORD *)(v58 > 1), v59 + 1, 1, v56);
    *(_QWORD *)v55 = v56;
  }
  v56[2] = v59 + 1;
  v60 = &v56[2 * v59];
  v61 = v62;
  v60[4] = sub_100176EE8;
  v60[5] = v61;
  swift_endAccess(&aBlock);

  v30 = v24;
LABEL_12:
  swift_release(v30);
  v31 = *(void (**)(char *, uint64_t))(v8 + 8);
  v31(v11, v7);
  v32 = (void *)objc_opt_self(MPAVRoutingController);
  v74 = (uint64_t)sub_100008858;
  v75 = 0;
  aBlock = _NSConcreteStackBlock;
  v71 = 1107296256;
  v72 = sub_1000489A8;
  v73 = &unk_1004BDF08;
  v33 = _Block_copy(&aBlock);
  objc_msgSend(v32, "getActiveRouteWithTimeout:completion:", v33, 1.0);
  _Block_release(v33);
  v34 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v35 = String._bridgeToObjectiveC()();
  v36 = objc_msgSend(v34, "stringForKey:", v35);

  if (v36)
  {

    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v38 = (void *)static OS_dispatch_queue.main.getter(v37);
    v39 = swift_allocObject(&unk_1004BDF40, 32, 7);
    v40 = v63;
    *(_QWORD *)(v39 + 16) = v25;
    *(_QWORD *)(v39 + 24) = v40;
    v74 = (uint64_t)sub_1002C78DC;
    v75 = v39;
    aBlock = _NSConcreteStackBlock;
    v71 = 1107296256;
    v72 = sub_100027AF8;
    v73 = &unk_1004BDF58;
    v41 = _Block_copy(&aBlock);
    v42 = v75;
    v43 = v25;
    v44 = v40;
    v45 = swift_release(v42);
    v46 = v64;
    static DispatchQoS.unspecified.getter(v45);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v47 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v48 = sub_10003F544((uint64_t *)&unk_10055B200);
    v49 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
    v50 = v67;
    v51 = v48;
    v52 = v69;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v51, v49, v69, v47);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v50, v41);
    _Block_release(v41);

    (*(void (**)(char *, uint64_t))(v68 + 8))(v50, v52);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v46, v66);
  }
  return ((uint64_t (*)(char *, uint64_t))v31)(v16, v7);
}

id sub_10001D998(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSMutableSet *v7;
  uint64_t v8;
  void *v9;
  NSMutableSet *v10;
  uint64_t v11;
  void *v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "valueForKey:", CFSTR("uuid")));
  v4 = objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v3));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v4;

  v7 = objc_opt_new(NSMutableSet);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v7;

  v10 = objc_opt_new(NSMutableSet);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 24);
  *(_QWORD *)(v11 + 24) = v10;

  return objc_msgSend(*(id *)(a1 + 32), "notifyObservers");
}

void sub_10001E088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001E0C8(char *a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t (*v24)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint8_t *v37;
  char *v38;
  id v39;
  Class isa;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint8_t *v45;
  void **v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint8_t *v52;
  uint8_t *v53;
  uint64_t (*v54)(char *, uint64_t);
  void **v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void **aBlock;
  _QWORD v61[5];
  char v62[32];

  v57 = a1;
  v3 = type metadata accessor for Date(0);
  v58 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v52 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v52 - v10;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v56 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v52 - v16;
  v55 = (void **)sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v18 = ((uint64_t (*)(void))static OS_os_log.feedUpdate.getter)();
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = v12;
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v22 = 134217984;
    aBlock = *(void ***)&a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v61, v22 + 4, v22 + 12);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "[Foreground Sync] threshold bag value: %f", v22, 0xCu);
    v23 = v22;
    v12 = v21;
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  v25 = v24(v17, v12);
  static Date.now.getter(v25);
  v26 = &v57[OBJC_IVAR___MTForegroundSyncUtil_lastExpectedFeedsUpdateDate];
  swift_beginAccess(&v57[OBJC_IVAR___MTForegroundSyncUtil_lastExpectedFeedsUpdateDate], v62, 0, 0);
  v27 = v12;
  v28 = v58;
  v29 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v29(v6, v26, v3);
  static Date.+ infix(_:_:)(v6, a2);
  v30 = *(void (**)(char *, uint64_t))(v28 + 8);
  v30(v6, v3);
  v31 = sub_100026844((unint64_t *)&unk_100562020, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  LOBYTE(v28) = dispatch thunk of static Comparable.< infix(_:_:)(v11, v9, v3, v31);
  v30(v9, v3);
  v32 = ((uint64_t (*)(char *, uint64_t))v30)(v11, v3);
  if ((v28 & 1) != 0)
  {
    v54 = v24;
    v58 = v27;
    static OS_os_log.feedUpdate.getter(v32);
    v33 = v57;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter();
    v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      LODWORD(v57) = v36;
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = (void **)swift_slowAlloc(32, -1);
      aBlock = v55;
      v38 = v11;
      v53 = v37;
      *(_DWORD *)v37 = 136315138;
      v52 = v37 + 4;
      v39 = sub_1002E3480();
      v29(v38, v26, v3);
      isa = Date._bridgeToObjectiveC()().super.isa;
      v30(v38, v3);
      v41 = objc_msgSend(v39, "stringFromDate:", isa);

      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;

      v59 = sub_10003D274(v42, v44, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &aBlock, v52, v37 + 12);

      swift_bridgeObjectRelease(v44);
      v45 = v53;
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v57, "[Foreground Sync] Not updating feeds on app foreground because within feed update threshold. Last update occurred: %s", v53, 0xCu);
      v46 = v55;
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {

    }
    return v54(v56, v58);
  }
  else
  {
    v47 = sub_100005EC8(0, &qword_100553B78, &off_1004A43D0);
    v48 = objc_msgSend((id)swift_getObjCClassFromMetadata(v47), "sharedInstance");
    v61[3] = sub_10004A494;
    v61[4] = 0;
    aBlock = _NSConcreteStackBlock;
    v61[0] = 1107296256;
    v61[1] = sub_10001C290;
    v61[2] = &unk_1004BFDB0;
    v49 = _Block_copy(&aBlock);
    objc_msgSend(v48, "updateAllPodcastsUserInitiated:forced:source:started:", 0, 0, 24, v49);
    _Block_release(v49);

    static Date.now.getter(v50);
    swift_beginAccess(v26, &aBlock, 33, 0);
    (*(void (**)(char *, char *, uint64_t))(v58 + 40))(v26, v11, v3);
    return swift_endAccess(&aBlock);
  }
}

uint64_t sub_10001E624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  _QWORD v28[3];
  uint64_t v29;
  void *v30;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static os_signpost_type_t.begin.getter(v3);
  v23 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v7 = (void *)static OS_os_log.episodeStatesSignpost.getter(v23);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_signpostName);
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_signpostName + 8);
  v10 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_signpostName + 16);
  sub_10001E89C((uint64_t)v5);
  v25 = v9;
  v26 = v8;
  v24 = v10;
  os_signpost(_:dso:log:name:signpostID:)(v6, &_mh_execute_header, v7, v8, v9, v10, v5);

  v11 = *(void (**)(char *, uint64_t))(v2 + 8);
  v11(v5, v1);
  EpisodeStateRepository.startObservingChanges()();
  v12 = ((uint64_t (*)(void))dispatch thunk of EpisodeStateController.startObservingChanges())();
  v13 = dispatch thunk of EpisodeStateController.startObservingChanges()(v12);
  dispatch thunk of EpisodeStateController.startObservingChanges()(v13);
  if (qword_1005520B8 != -1)
    swift_once(&qword_1005520B8, sub_10004AB18);
  swift_beginAccess(&static PodcastsStateCoordinator.shared, v27, 0, 0);
  v14 = (void *)static PodcastsStateCoordinator.shared;
  v29 = type metadata accessor for PodcastsStateCoordinator();
  v30 = (void *)sub_100026844(&qword_100553AE8, (uint64_t (*)(uint64_t))type metadata accessor for PodcastsStateCoordinator, (uint64_t)&protocol conformance descriptor for PodcastsStateCoordinator);
  v28[0] = v14;
  v15 = type metadata accessor for LocalLibraryPlaybackPositionTracker(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = v14;
  v17 = LocalLibraryPlaybackPositionTracker.init(stateCoordinator:)(v28);
  v29 = v15;
  v30 = &protocol witness table for LocalLibraryPlaybackPositionTracker;
  v28[0] = v17;
  dispatch thunk of PlaybackController.playbackPositionTracker.setter(v28);
  v18 = (id)static PodcastsStateCoordinator.shared;
  PodcastsStateCoordinator.startTrackingChangesInDownloads()();

  v20 = static os_signpost_type_t.end.getter(v19);
  v21 = (void *)static OS_os_log.episodeStatesSignpost.getter(v20);
  sub_10001E89C((uint64_t)v5);
  os_signpost(_:dso:log:name:signpostID:)(v20, &_mh_execute_header, v21, v26, v25, v24, v5);

  return ((uint64_t (*)(char *, uint64_t))v11)(v5, v1);
}

uint64_t sub_10001E89C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE v16[24];

  v2 = v1;
  v4 = sub_10003F544(&qword_100553CF8);
  v5 = __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v15[-v8];
  v10 = v2 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___signpostID;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___signpostID, v16, 0, 0);
  sub_100007A64(v10, (uint64_t)v9, &qword_100553CF8);
  v11 = type metadata accessor for OSSignpostID(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(a1, v9, v11);
  sub_100007A28((uint64_t)v9, &qword_100553CF8);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v13 = static OS_os_log.episodeStatesSignpost.getter();
  swift_unknownObjectRetain(v2);
  OSSignpostID.init(log:object:)(v13, v2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
  swift_beginAccess(v10, v15, 33, 0);
  sub_10016DE28((uint64_t)v7, v10, &qword_100553CF8);
  return swift_endAccess(v15);
}

void sub_10001EF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001EF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  Class isa;
  uint64_t v34;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v37 = a2;
  v38 = a3;
  v39 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v13);
  v40 = _swiftEmptyArrayStorage;
  v14 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_10003F544(&qword_100555A00);
  v16 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
  v17 = v15;
  v18 = v36[1];
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v17, v16, v7, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  *(_QWORD *)(v18 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000019, 0x80000001004315F0, v12, v9, v6, 0);
  if (qword_100552000 != -1)
    swift_once(&qword_100552000, sub_100048EA0);
  v19 = (void *)qword_100555820;
  v20 = objc_allocWithZone((Class)NSPersistentContainer);
  v21 = v19;
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v20, "initWithName:managedObjectModel:", v22, v21);

  v24 = v38;
  v25 = v39;
  v26 = v37;
  sub_10002D390(v39, v37, v38, 0);
  v28 = v27;
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v24);
  v29 = sub_10003F544((uint64_t *)&unk_100553780);
  v30 = swift_allocObject(v29, 40, 7);
  *(_OWORD *)(v30 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v30 + 32) = v28;
  v40 = (_QWORD *)v30;
  specialized Array._endMutation()(v30);
  v31 = v40;
  sub_100005EC8(0, &qword_100555A08, NSPersistentStoreDescription_ptr);
  v32 = v28;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v23, "setPersistentStoreDescriptions:", isa);

  v34 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v25, v34);
  *(_QWORD *)(v18 + 24) = v23;
  return v18;
}

uint64_t sub_10001F2EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t ObjectType;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, void (*)(uint64_t), _QWORD *, __n128);
  uint64_t WitnessTable;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  uint64_t v15;

  ObjectType = swift_getObjectType(v2, a2);
  v4 = (_QWORD *)(swift_isaMask & *v2);
  v5 = v4[46];
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(ObjectType);
  v8 = (char *)&v15 - v7;
  v9 = *(void (**)(char *, void (*)(uint64_t), _QWORD *, __n128))((char *)v2 + v4[49]);
  WitnessTable = swift_getWitnessTable(&unk_1003D18BC, ObjectType);
  sub_100044F10(ObjectType, WitnessTable, (uint64_t)v8);
  v11 = swift_allocObject(&unk_1004BA508, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v2);
  v12 = (_QWORD *)swift_allocObject(&unk_1004BA530, 40, 7);
  v12[2] = v5;
  v12[3] = v4[47];
  v12[4] = v11;
  v13 = swift_retain(v11);
  v9(v8, sub_10003A8F0, v12, v13);
  swift_release(v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v11);
}

uint64_t sub_10001F430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10003A420(a1, a2, a3, (_QWORD *)(v3 + 16), *(unsigned __int8 *)(v3 + 56), *(_QWORD *)(v3 + 64));
}

uint64_t sub_10001F440(_QWORD *a1)
{
  return WidgetNowPlayingInfo.encode(to:)(a1);
}

uint64_t WidgetNowPlayingInfo.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v3 = v1;
  v5 = sub_10003F544(&qword_10055A7C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003A834(a1, v9);
  v11 = sub_1000314D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetNowPlayingInfo.CodingKeys, &type metadata for WidgetNowPlayingInfo.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v35 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v35, v5);
  if (!v2)
  {
    v14 = *((unsigned __int8 *)v3 + 16);
    v34 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v34, v5);
    v15 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
    v16 = (uint64_t)v3 + v15[6];
    v33 = 2;
    v17 = type metadata accessor for Date(0);
    v18 = sub_100026844(&qword_100557EB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v33, v5, v17, v18);
    v19 = (uint64_t)v3 + v15[7];
    v32 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v32, v5, v17, v18);
    v20 = (uint64_t *)((char *)v3 + v15[8]);
    v21 = *v20;
    v22 = *((unsigned __int8 *)v20 + 8);
    v31 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v31, v5);
    v23 = (uint64_t *)((char *)v3 + v15[9]);
    v24 = *v23;
    v25 = *((unsigned __int8 *)v23 + 8);
    v30 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v30, v5);
    v26 = (uint64_t)v3 + v15[10];
    v29 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v29, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001F6AC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char *v16;
  id v17;
  char *v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD aBlock[3];
  void *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  sub_1002C0430();
  if (v2)
  {
    v3 = v2;
    type metadata accessor for StoreReviewPromptController(0);
    v5 = static StoreReviewPromptController.shared.getter(v4);
    dispatch thunk of StoreReviewPromptController.prepareToTrackBecomeActive()();
    swift_release(v5);
    v6 = v3;
LABEL_5:
    swift_release(v6);
    goto LABEL_6;
  }
  v7 = type metadata accessor for Podcasts(0);
  v28 = (void *)v7;
  v29 = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v8 = sub_1000242A8(aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v8, enum case for Podcasts.objectGraphBuilderInitialization(_:), v7);
  LOBYTE(v7) = isFeatureEnabled(_:)(aBlock);
  sub_10003D380(aBlock);
  if ((v7 & 1) != 0)
  {
    v9 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_objectGraph];
    type metadata accessor for StoreReviewPromptController(0);
    v10 = swift_retain(v9);
    v11 = static StoreReviewPromptController.shared.getter(v10);
    dispatch thunk of StoreReviewPromptController.prepareToTrackBecomeActive()();
    swift_release(v9);
    v6 = v11;
    goto LABEL_5;
  }
  v19 = &v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_pendingBootstrapBlocks];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_pendingBootstrapBlocks], aBlock, 33, 0);
  v20 = *(_QWORD **)v19;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v19);
  *(_QWORD *)v19 = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v20 = sub_10027B720(0, v20[2] + 1, 1, v20);
    *(_QWORD *)v19 = v20;
  }
  v23 = v20[2];
  v22 = v20[3];
  v24 = v23 + 1;
  if (v23 >= v22 >> 1)
  {
    v26 = sub_10027B720((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
    v24 = v23 + 1;
    v20 = v26;
    *(_QWORD *)v19 = v26;
  }
  v20[2] = v24;
  v25 = &v20[2 * v23];
  v25[4] = sub_1002C4444;
  v25[5] = 0;
  swift_endAccess(aBlock);
LABEL_6:
  v12 = objc_msgSend((id)objc_opt_self(ASKRebootstrapCoordinator), "sharedCoordinator");
  v13 = swift_allocObject(&unk_1004BDFE0, 24, 7);
  *(_QWORD *)(v13 + 16) = v1;
  v29 = (uint64_t)sub_1002C7A30;
  v30 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  v28 = &unk_1004BDFF8;
  v14 = _Block_copy(aBlock);
  v15 = v30;
  v16 = v1;
  swift_release(v15);
  objc_msgSend(v12, "registerAppBootstrapHandler:", v14);
  _Block_release(v14);

  v17 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v17, "addObserver:selector:name:object:", v16, "activeSystemRouteDidChangeWithNotification:", MPAVRoutingControllerActiveSystemRouteDidChangeNotification, 0);

  static MetricsVisualizer.setupMetricsEventVisualizer()();
  return 1;
}

void sub_10001FAE8(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;

  v5 = (void *)objc_opt_self(NSNotificationCenter);
  v6 = a1;
  v7 = objc_msgSend(v5, "defaultCenter");
  v8 = *(_QWORD *)(a3() + 8);
  swift_bridgeObjectRetain(v8);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v7, "postNotificationName:object:", v9, v6);

}

uint64_t sub_10001FE34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD v30[3];
  _BYTE v31[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + OBJC_IVAR____TtC8Podcasts13WidgetManager_workQueue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
    goto LABEL_28;
  v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Podcasts13WidgetManager_seenEpisodeUUIDs);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts13WidgetManager_seenEpisodeUUIDs, v31, 0, 0);
  v12 = *v11;
  if (*(_QWORD *)(*v11 + 16) <= *(_QWORD *)(a1 + 16) >> 3)
  {
    v30[0] = a1;
    swift_bridgeObjectRetain(a1);
    v15 = swift_bridgeObjectRetain(v12);
    sub_100048B14(v15);
    swift_bridgeObjectRelease(v12);
    v14 = (unint64_t *)v30[0];
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v13 = swift_bridgeObjectRetain(v12);
    v14 = sub_10033CAA0(v13, a1);
    swift_bridgeObjectRelease(v12);
  }
  swift_beginAccess(v11, v30, 33, 0);
  v16 = swift_bridgeObjectRetain(a1);
  sub_10002B104(v16);
  result = swift_endAccess(v30);
  v17 = 0;
  v18 = v14 + 7;
  v19 = 1 << *((_BYTE *)v14 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v14[7];
  v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v24 = v23 | (v17 << 6);
      goto LABEL_9;
    }
    v27 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v22)
      return swift_release(v14);
    v28 = v18[v27];
    ++v17;
    if (!v28)
    {
      v17 = v27 + 1;
      if (v27 + 1 >= v22)
        return swift_release(v14);
      v28 = v18[v17];
      if (!v28)
      {
        v17 = v27 + 2;
        if (v27 + 2 >= v22)
          return swift_release(v14);
        v28 = v18[v17];
        if (!v28)
          break;
      }
    }
LABEL_24:
    v21 = (v28 - 1) & v28;
    v24 = __clz(__rbit64(v28)) + (v17 << 6);
LABEL_9:
    v25 = (_QWORD *)(v14[6] + 16 * v24);
    v26 = v25[1];
    v30[0] = *v25;
    v30[1] = v26;
    swift_bridgeObjectRetain(v26);
    PassthroughSubject.send(_:)(v30);
    result = swift_bridgeObjectRelease(v26);
  }
  v29 = v27 + 3;
  if (v29 >= v22)
    return swift_release(v14);
  v28 = v18[v29];
  if (v28)
  {
    v17 = v29;
    goto LABEL_24;
  }
  while (1)
  {
    v17 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v17 >= v22)
      return swift_release(v14);
    v28 = v18[v17];
    ++v29;
    if (v28)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void sub_1000200E0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  char *v6;
  uint64_t v7;

  v5 = (uint64_t *)(swift_isaMask & *(_QWORD *)a1);
  v6 = &a1[v5[51]];
  v7 = type metadata accessor for OperationResult(0, v5[46], a3, a4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  (*(void (**)(char *))(*(_QWORD *)(v5[48] - 8) + 8))(&a1[*(_QWORD *)((swift_isaMask & *(_QWORD *)a1)
                                                                                 + 0x1A0)]);
  swift_release(*(_QWORD *)&a1[*(_QWORD *)((swift_isaMask & *(_QWORD *)a1) + 0x1A8) + 8]);

}

uint64_t sub_100020194(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3 & 1;
  v6 = type metadata accessor for DownloadingEpisodeStateDataSource();
  v8 = sub_100005E40(&qword_10055CFC0, v7, (uint64_t (*)(uint64_t))type metadata accessor for DownloadingEpisodeStateDataSource, (uint64_t)&unk_1003D0A78);
  return SynchronizedEpisodeStateDataSource.state(for:)(a1, a2, v5, v6, v8);
}

void sub_100020424(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  id v19;

  kdebug_trace(723518044, 0, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predicate"));

  if (v2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "predicate"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_augmentPredicate:", v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchRequest"));
    objc_msgSend(v6, "setPredicate:", v5);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "frc"));
  objc_msgSend(v7, "performFetch:", 0);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "frc"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fetchedObjects"));

  objc_msgSend(*(id *)(a1 + 32), "_processResults:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "valueForKey:", kEpisodeUuid));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "valueForKey:", kObjectID));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:](NSDictionary, "dictionaryWithObjects:forKeys:", v11, v10));

  kdebug_trace(723518048, 0, 0, 0, 0);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000483B0;
  v16[3] = &unk_1004A6618;
  v13 = *(void **)(a1 + 40);
  v16[4] = *(_QWORD *)(a1 + 32);
  v17 = v10;
  v18 = v12;
  v19 = v13;
  v14 = v12;
  v15 = v10;
  +[IMAVPlayer performOnMainQueue:](IMAVPlayer, "performOnMainQueue:", v16);

}

id sub_100020644(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id result;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD v28[5];
  _BYTE v29[40];
  _QWORD v30[5];
  _BYTE v31[40];
  _QWORD v32[6];

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v28 - v7;
  v9 = *(double *)(a1 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor_debounceInterval);
  v10 = OBJC_IVAR___MTDebouncedAssetRemovalProcessor_context;
  v11 = *(void **)(a1 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor_context);
  sub_10002C5E0();
  v12 = v11;
  v13 = ((uint64_t (*)(void))static OS_dispatch_queue.automaticAssetManagement.getter)();
  v14 = type metadata accessor for AssetRemovalProcessorDataSource(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = AssetRemovalProcessorDataSource.init(managedObjectContext:receiverQueue:)(v12, v13);
  v32[3] = v14;
  v32[4] = &protocol witness table for AssetRemovalProcessorDataSource;
  v32[0] = v15;
  sub_1000208AC((uint64_t)v31);
  sub_1000208AC((uint64_t)v29);
  v16 = *(void **)(a1 + v10);
  v17 = (void *)objc_opt_self(MTLibrary);
  v18 = v16;
  result = objc_msgSend(v17, "sharedInstance");
  if (result)
  {
    v20 = result;
    v21 = ((uint64_t (*)(void))static OS_dispatch_queue.automaticAssetManagement.getter)();
    v28[3] = &type metadata for CoreDataDownloadLibrary;
    v22 = sub_100049628();
    v28[0] = v18;
    v28[1] = v20;
    v28[4] = v22;
    v28[2] = v21;
    v25 = static OS_dispatch_queue.automaticAssetManagement.getter(v22, v23, v24);
    v26 = objc_msgSend((id)objc_opt_self(MTConstants), "managedAssetsDirectoryURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

    URL.standardized.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v30[3] = type metadata accessor for AssetRemovalProcessorDelegate(0);
    v30[4] = &protocol witness table for AssetRemovalProcessorDelegate;
    sub_1000242A8(v30);
    AssetRemovalProcessorDelegate.init(episodeAndShowStorage:library:workQueue:managedAssetDirectory:)(v29, v28, v25, v8);
    v27 = type metadata accessor for DebouncedEpisodeAndShowProcessor(0);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    return (id)DebouncedEpisodeAndShowProcessor.init(interval:dataSource:storage:delegate:workQueue:inverseBatchSize:)(v32, v31, v30, 0, 100, v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000208AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE v9[40];
  __int128 v10;
  uint64_t v11;
  void *v12;
  _BYTE v13[24];

  v3 = v1 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___episodeStorage;
  swift_beginAccess(v1 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___episodeStorage, v13, 0, 0);
  sub_1000209B4(v3, (uint64_t)&v10);
  if (!v11)
  {
    sub_10004AD80((uint64_t)&v10);
    v4 = *(void **)(v1 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor_context);
    v5 = type metadata accessor for CoreDataEpisodeAndShowStorage(0);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v6 = CoreDataEpisodeAndShowStorage.init(context:)(v4);
    v11 = v5;
    v12 = &protocol witness table for CoreDataEpisodeAndShowStorage;
    *(_QWORD *)&v10 = v6;
    sub_10000A520((uint64_t)&v10, (uint64_t)v9);
    swift_beginAccess(v3, v8, 33, 0);
    sub_10004ADC0((uint64_t)v9, v3);
    swift_endAccess(v8);
  }
  return sub_10002099C(&v10, a1);
}

uint64_t sub_10002099C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000209B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_1005569D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000209FC(void *a1, uint64_t a2, void *a3, SEL *a4)
{
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v7 = (void *)objc_opt_self(UIApplication);
  v8 = a3;
  v12 = a1;
  v9 = objc_msgSend(v7, "sharedApplication");
  v10 = objc_msgSend(v9, "delegate");

  if (v10)
  {
    if ((objc_msgSend(v10, "respondsToSelector:", *a4) & 1) != 0)
    {
      v11 = objc_msgSend(v7, "sharedApplication");
      objc_msgSend(v10, *a4, v11);

    }
    else
    {

    }
    swift_unknownObjectRelease(v10);
  }
  else
  {

  }
}

uint64_t sub_100020B18(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  NSString v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  id v22;
  uint64_t v23;
  char *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t aBlock[5];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v43 - v12;
  v14 = OBJC_IVAR___MTBackgroundTaskManager_task;
  if (*(_QWORD *)&v3[OBJC_IVAR___MTBackgroundTaskManager_task] == UIBackgroundTaskInvalid)
  {
    v45 = v7;
    v15 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v16 = String._bridgeToObjectiveC()();
    v17 = swift_allocObject(&unk_1004C6558, 24, 7);
    *(_QWORD *)(v17 + 16) = v3;
    aBlock[4] = (uint64_t)sub_100370470;
    v47 = v17;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100027AF8;
    aBlock[3] = (uint64_t)&unk_1004C6570;
    v18 = _Block_copy(aBlock);
    v19 = v47;
    v20 = v3;
    v44 = a1;
    v21 = v20;
    swift_release(v19);
    v22 = objc_msgSend(v15, "beginBackgroundTaskWithName:expirationHandler:", v16, v18);
    _Block_release(v18);

    *(_QWORD *)&v3[v14] = v22;
    static Logger.backgroundTaskManager.getter(v23);
    v24 = v21;
    swift_bridgeObjectRetain_n(a2, 2);
    v25 = v24;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(32, -1);
      aBlock[0] = v29;
      *(_DWORD *)v28 = 134218242;
      v43 = v6;
      v30 = Int.hashValue.getter(*(_QWORD *)&v3[v14]);

      v48 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v28 + 4, v28 + 12);

      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain(a2);
      v48 = sub_10003D274(v44, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Started background task with identifier hash: %ld with name: %s.", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v13, v43);
    }

    swift_bridgeObjectRelease_n(a2, 2);
    v41 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
    v42 = v13;
  }
  else
  {
    static Logger.backgroundTaskManager.getter(v11);
    v32 = v3;
    swift_bridgeObjectRetain_n(a2, 2);
    v33 = v32;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(22, -1);
      v45 = v7;
      v37 = v36;
      v38 = swift_slowAlloc(32, -1);
      v44 = a1;
      v39 = v38;
      aBlock[0] = v38;
      *(_DWORD *)v37 = 134218242;
      v43 = v6;
      v40 = Int.hashValue.getter(*(_QWORD *)&v3[v14]);

      v48 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 4, v37 + 12);

      *(_WORD *)(v37 + 12) = 2080;
      swift_bridgeObjectRetain(a2);
      v48 = sub_10003D274(v44, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Tried to start background task but there is already an ongoing background task in progress with identifier hash: %ld. Not starting background task with name: %s.", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v37, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v10, v43);
    }

    swift_bridgeObjectRelease_n(a2, 2);
    v41 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v42 = v10;
  }
  return v41(v42, v6);
}

id sub_1000215A0(uint64_t a1)
{
  double v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *ObjCClassFromMetadata;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id result;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  _QWORD v31[5];
  _QWORD v32[5];

  v2 = *(double *)(a1 + OBJC_IVAR___MTDebouncedAutoDownloadProcessor_debounceInterval);
  v3 = OBJC_IVAR___MTDebouncedAutoDownloadProcessor_context;
  v4 = *(void **)(a1 + OBJC_IVAR___MTDebouncedAutoDownloadProcessor_context);
  v5 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v5);
  v7 = v4;
  v8 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v12 = static OS_dispatch_queue.automaticAssetManagement.getter(v9, v10, v11);
  v13 = type metadata accessor for DeviceCapacityMonitor(0);
  v14 = static DeviceCapacityMonitor.shared.getter(v13);
  v15 = type metadata accessor for AutoDownloadProcessorDataSource(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v32[3] = v15;
  v32[4] = &protocol witness table for AutoDownloadProcessorDataSource;
  v32[0] = AutoDownloadProcessorDataSource.init(context:accountDataSource:workQueue:capacityMonitor:)(v7, v8, v12, v14);
  v16 = *(void **)(a1 + v3);
  v17 = type metadata accessor for CoreDataEpisodeAndShowStorage(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v31[3] = v17;
  v31[4] = &protocol witness table for CoreDataEpisodeAndShowStorage;
  v31[0] = CoreDataEpisodeAndShowStorage.init(context:)(v16);
  result = objc_msgSend((id)objc_opt_self(MTReachability), "sharedInstance");
  if (result)
  {
    v19 = result;
    v20 = *(id *)(a1 + v3);
    v21 = static DeviceCapacityMonitor.shared.getter(v20);
    v22 = sub_100005EC8(0, &qword_100553730, MTLegacyDownloadManagerProvider_ptr);
    v23 = objc_msgSend((id)swift_getObjCClassFromMetadata(v22), "sharedInstance");
    v24 = objc_msgSend(v23, "downloadManager");

    v25 = objc_msgSend(objc_allocWithZone((Class)PFCoreAnalyticsChannel), "init");
    v28 = static OS_dispatch_queue.automaticAssetManagement.getter(v25, v26, v27);
    v30[3] = type metadata accessor for AutoDownloadProcessorDownloader(0);
    v30[4] = &protocol witness table for AutoDownloadProcessorDownloader;
    sub_1000242A8(v30);
    AutoDownloadProcessorDownloader.init(reachability:context:capacityMonitor:downloader:analyticsChannel:workQueue:)(v19, v20, v21, v24, v25, v28);
    v29 = type metadata accessor for DebouncedEpisodeAndShowProcessor(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    return (id)DebouncedEpisodeAndShowProcessor.init(interval:dataSource:storage:delegate:workQueue:inverseBatchSize:)(v32, v31, v30, 0, 100, v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100021AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000222C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_10002234C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  id v13;
  uint8_t buf[4];
  id v15;

  v2 = *(void **)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v13 = 0;
  v3 = objc_msgSend(v2, "executeRequest:error:", v1, &v13);
  v4 = v13;
  v6 = _MTLogCategoryDatabase(v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v4;
      v9 = "Derived Property Observer encountered error deleting history %@";
      v10 = v8;
      v11 = OS_LOG_TYPE_ERROR;
      v12 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, buf, v12);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v15) = 14;
    v9 = "Derived Property Observer deleted persistent history older than %d days ago";
    v10 = v8;
    v11 = OS_LOG_TYPE_INFO;
    v12 = 8;
    goto LABEL_6;
  }

}

void sub_10002245C(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id obj;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v4 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v4 + 40);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeRequest:error:", v3, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_100022814(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100022A00(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  uint64_t v6;

  v5 = (char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x180);
  v6 = type metadata accessor for OperationResult(0, *(_QWORD *)((swift_isaMask & *a1) + 0x170), a3, a4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_release(*(_QWORD *)((char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x188) + 8));
}

void sub_100022A78(void (*a1)(void), uint64_t a2, void *a3)
{
  id v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  UIMenuElementSize preferredElementSize;
  id v16;
  Swift::String v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  id v24;
  int v25;
  char *v26;
  int v27;
  id v28;
  uint64_t v29;
  NSString v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  id v43;
  id v44;
  uint64_t v45;
  NSString v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  void *v52;
  double v53;
  double v54;
  double *v55;
  double v56;
  id v57;
  uint64_t v58;
  NSString v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::OpaquePointer v64;
  _QWORD aBlock[5];
  uint64_t v66;
  char v67[24];
  char v68[24];
  UIImage_optional v69;

  a1();
  v4 = sub_100023110();
  isa = (Class)objc_msgSend(v4, "playbackRateCommand");

  if (isa)
  {
    swift_unknownObjectRelease(isa);
    v7 = swift_allocObject(&unk_1004BE948, 24, 7);
    swift_unknownObjectWeakInit(v7 + 16, a3);
    v8 = (void *)objc_opt_self(UIDeferredMenuElement);
    v9 = swift_allocObject(&unk_1004BE998, 32, 7);
    *(_QWORD *)(v9 + 16) = sub_1002CE778;
    *(_QWORD *)(v9 + 24) = v7;
    aBlock[4] = sub_1002CE7A4;
    v66 = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002CC590;
    aBlock[3] = &unk_1004BE9B0;
    v10 = _Block_copy(aBlock);
    v11 = v66;
    swift_retain(v7);
    swift_release(v11);
    v12 = objc_msgSend(v8, "elementWithUncachedProvider:", v10);
    _Block_release(v10);
    sub_100005EC8(0, &qword_10055B058, UIMenu_ptr);
    v13 = sub_10003F544((uint64_t *)&unk_100553780);
    v14 = swift_allocObject(v13, 40, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1003CA250;
    *(_QWORD *)(v14 + 32) = v12;
    aBlock[0] = v14;
    specialized Array._endMutation()(v14);
    preferredElementSize = aBlock[0];
    v16 = v12;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v69.value.super.isa = 0;
    v69.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v17, (Swift::String_optional)0, v69, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v64).super.super.isa;

    swift_release(v7);
  }
  KeyPath = swift_getKeyPath(&unk_1003D38E0, v6);
  v20 = swift_getKeyPath(&unk_1003D3908, v19);
  aBlock[0] = isa;
  v21 = a3;
  static Published.subscript.setter(aBlock, v21, KeyPath, v20);
  v22 = objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController], "response");
  if (v22)
  {
    v23 = v22;
    v24 = objc_msgSend(v22, "state");

    v25 = v24 == (id)2;
  }
  else
  {
    v25 = 0;
  }
  v26 = &v21[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_isTargetPlaying];
  swift_beginAccess(&v21[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_isTargetPlaying], aBlock, 1, 0);
  v27 = *v26;
  *v26 = v25;
  if (v25 != v27)
  {
    v28 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v29 = *(_QWORD *)(PlayerNotification_PlaystateDidChange.unsafeMutableAddressor() + 8);
    swift_bridgeObjectRetain(v29);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v28, "postNotificationName:object:", v30, v21);

  }
  v31 = sub_100023110();
  if (v31)
  {
    v32 = v31;
    v33 = objc_msgSend(v31, "seekCommand");

    if (v33)
    {
      v34 = objc_msgSend(v33, "preferredForwardJumpIntervals");
      swift_unknownObjectRelease(v33);
      v35 = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
      v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

      if ((unint64_t)v36 >> 62)
      {
        if (v36 < 0)
          v60 = v36;
        else
          v60 = v36 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v36);
        v61 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease(v36);
        if (v61)
          goto LABEL_12;
      }
      else if (*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_12:
        if ((v36 & 0xC000000000000001) != 0)
        {
          v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v36);
        }
        else
        {
          if (!*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_43;
          }
          v37 = *(id *)(v36 + 32);
        }
        v38 = v37;
        swift_bridgeObjectRelease(v36);
        objc_msgSend(v38, "doubleValue");
        v40 = v39;
        v41 = (double *)&v21[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_jumpForwardsAmount];
        swift_beginAccess(&v21[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_jumpForwardsAmount], v67, 1, 0);
        v42 = *v41;
        *v41 = v40;
        if (v42 == v40)
        {

          v43 = sub_100023110();
          if (!v43)
            return;
          goto LABEL_20;
        }
        v44 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
        v45 = *(_QWORD *)(PlayerNotification_JumpDurationDidChange.unsafeMutableAddressor() + 8);
        swift_bridgeObjectRetain(v45);
        v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v45);
        objc_msgSend(v44, "postNotificationName:object:", v46, v21);

        goto LABEL_19;
      }
      swift_bridgeObjectRelease(v36);
      v43 = sub_100023110();
      if (!v43)
        return;
      goto LABEL_20;
    }
  }
LABEL_19:
  v43 = sub_100023110();
  if (!v43)
    return;
LABEL_20:
  v47 = v43;
  v48 = objc_msgSend(v43, "seekCommand");

  if (!v48)
    return;
  v49 = objc_msgSend(v48, "preferredBackwardJumpIntervals");
  swift_unknownObjectRelease(v48);
  v50 = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

  if (!((unint64_t)v36 >> 62))
  {
    if (*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_23;
LABEL_39:
    swift_bridgeObjectRelease(v36);
    return;
  }
  if (v36 < 0)
    v62 = v36;
  else
    v62 = v36 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v36);
  v63 = _CocoaArrayWrapper.endIndex.getter(v62);
  swift_bridgeObjectRelease(v36);
  if (!v63)
    goto LABEL_39;
LABEL_23:
  if ((v36 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v51 = *(id *)(v36 + 32);
    goto LABEL_26;
  }
LABEL_43:
  v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v36);
LABEL_26:
  v52 = v51;
  swift_bridgeObjectRelease(v36);
  objc_msgSend(v52, "doubleValue");
  v54 = v53;
  v55 = (double *)&v21[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_jumpBackwardsAmount];
  swift_beginAccess(&v21[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_jumpBackwardsAmount], v68, 1, 0);
  v56 = *v55;
  *v55 = v54;
  if (v56 == v54)
  {

  }
  else
  {
    v57 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v58 = *(_QWORD *)(PlayerNotification_JumpDurationDidChange.unsafeMutableAddressor() + 8);
    swift_bridgeObjectRetain(v58);
    v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v58);
    objc_msgSend(v57, "postNotificationName:object:", v59, v21);

  }
}

id sub_100023110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v21;
  Class isa;
  uint64_t v23;

  v1 = sub_10003F544((uint64_t *)&unk_1005598F0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v23 - v5;
  v9 = type metadata accessor for IndexPath(0, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController), "response");
  if (v13
    && (v14 = v13, v15 = objc_msgSend(v13, "tracklist"), v14, v15))
  {
    v16 = objc_msgSend(v15, "playingItemIndexPath");
    if (v16)
    {
      v17 = v16;
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v16);

      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v4, v18, 1, v9);
    sub_100023340((uint64_t)v4, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v6, v9);
      v21 = objc_msgSend(v15, "items");
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v19 = objc_msgSend(v21, "itemAtIndexPath:", isa);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      return v19;
    }

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v9);
  }
  sub_100007A28((uint64_t)v6, (uint64_t *)&unk_1005598F0);
  return 0;
}

uint64_t sub_100023340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_1005598F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100023388(uint64_t a1)
{
  void *v2;
  void *v3;
  const __CFBoolean *Value;
  BOOL v5;
  char v6;
  _QWORD block[4];
  id v8;
  id v9;
  BOOL v10;
  char v11;
  id location;
  CFDictionaryRef v13;

  v13 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bundleIdentifier"));

  _CTServerConnectionCopyCellularUsagePolicy(*(_QWORD *)(a1 + 48), v3, &v13);
  CFRelease(*(CFTypeRef *)(a1 + 48));
  if (v13)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(v13, kCTCellularUsagePolicyDataAllowed);
    v5 = CFBooleanGetValue(Value) != 0;
    CFRelease(v13);
  }
  else
  {
    v5 = 0;
  }
  if (+[PSCellularDataSettingsDetail isEnabled](PSCellularDataSettingsDetail, "isEnabled"))
    v6 = MGGetBoolAnswer(CFSTR("cellular-data"));
  else
    v6 = 0;
  objc_initWeak(&location, *(id *)(a1 + 32));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100015284;
  block[3] = &unk_1004A9DE8;
  objc_copyWeak(&v9, &location);
  v10 = v5;
  v11 = v6;
  v8 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);

}

void sub_100023658(uint64_t a1, int a2, id a3)
{
  id v4;

  v4 = objc_retainBlock(a3);
  (*((void (**)(id, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t sub_100023698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v3 = a3;
  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (!a2)
  {
    v6 = 0;
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, &protocol witness table for String);
  if (v3)
LABEL_3:
    v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for String, &protocol witness table for String);
LABEL_4:
  swift_retain(v4);
  v5(v6, v3);
  swift_release(v4);
  swift_bridgeObjectRelease(v3);
  return swift_bridgeObjectRelease(v6);
}

id sub_100023738()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  id v32;
  id result;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  objc_class *v44;
  id v45;
  uint64_t v46;
  void *v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD aBlock[5];
  uint64_t v74;
  objc_super v75;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v66 = *(_QWORD *)(v1 - 8);
  v67 = v1;
  __chkstk_darwin(v1);
  v65 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OSSignposter(0);
  v61 = *(_QWORD *)(v3 - 8);
  v62 = v3;
  __chkstk_darwin(v3);
  v59 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for OSSignpostID(0);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v57 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LibraryImageProvider(0);
  v7 = *(_QWORD *)(v6 - 8);
  v70 = v6;
  v71 = v7;
  __chkstk_darwin(v6);
  v69 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v0;
  UninitializedCurrentValueSubject.init()(&type metadata for FeedManager.System, &type metadata for Never, &protocol witness table for Never);
  v68 = OBJC_IVAR___MTFeedManager_queue;
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v20 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v15);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_10003F544(&qword_100555A00);
  v23 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v9, v21);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x616E614D64656546, 0xEB00000000726567, v14, v11, v18, 0);
  *(_QWORD *)&v19[v68] = v24;
  v25 = &v19[OBJC_IVAR___MTFeedManager__system];
  *v25 = 0;
  v25[1] = 0;
  v25[2] = 0;
  *(_QWORD *)&v19[OBJC_IVAR___MTFeedManager__pendingRequests] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v19[OBJC_IVAR___MTFeedManager__pendingBlocks] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v19[OBJC_IVAR___MTFeedManager__subscriptions] = _swiftEmptyArrayStorage;
  v19[OBJC_IVAR___MTFeedManager__wasUpdating] = 0;
  *(_QWORD *)&v19[OBJC_IVAR___MTFeedManager_downloadManager] = 0;
  v26 = v69;
  static LibraryImageProvider.background.getter(v24);
  v27 = type metadata accessor for CategoryIngester();
  v28 = (_QWORD *)swift_allocObject(v27, 56, 7);
  v29 = v70;
  v28[5] = v70;
  v28[6] = &protocol witness table for LibraryImageProvider;
  v30 = sub_1000242A8(v28 + 2);
  (*(void (**)(_QWORD *, char *, uint64_t))(v71 + 32))(v30, v26, v29);
  v31 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v32 = objc_msgSend(v31, "importContext");

  result = objc_msgSend((id)objc_opt_self(MTStoreInfoUpdater), "sharedInstance");
  if (result)
  {
    v34 = result;
    v35 = objc_msgSend((id)objc_opt_self(MTSyncController), "sharedInstance");
    result = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
    if (result)
    {
      v36 = result;
      v37 = type metadata accessor for FeedIngesterProvider();
      v38 = (_QWORD *)swift_allocObject(v37, 80, 7);
      swift_retain(v28);
      v39 = sub_100294114(v32, v34, v35, (uint64_t)v28, v36, v38);

      swift_release(v28);
      *(_QWORD *)&v19[OBJC_IVAR___MTFeedManager__feedIngesterProvider] = v39;
      v40 = v59;
      v41 = static OSSignposter.feedUpdate.getter();
      v42 = OSSignposter.logHandle.getter(v41);
      v43 = v57;
      OSSignpostID.init(log:)(v42);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v40, v62);
      (*(void (**)(_BYTE *, char *, uint64_t))(v58 + 32))(&v19[OBJC_IVAR___MTFeedManager_signpostID], v43, v60);

      v44 = (objc_class *)type metadata accessor for FeedManager(0);
      v75.receiver = v19;
      v75.super_class = v44;
      v45 = objc_msgSendSuper2(&v75, "init");
      v46 = swift_allocObject(&unk_1004BB7E8, 24, 7);
      *(_QWORD *)(v46 + 16) = v45;
      aBlock[4] = sub_10004A8F0;
      v74 = v46;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100027AF8;
      aBlock[3] = &unk_1004BB800;
      v47 = _Block_copy(aBlock);
      v48 = v45;
      v49 = v14;
      static DispatchQoS.unspecified.getter(v48);
      v72 = _swiftEmptyArrayStorage;
      v50 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v51 = sub_10003F544((uint64_t *)&unk_10055B200);
      v52 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
      v53 = v65;
      v54 = v51;
      v55 = v67;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v54, v52, v67, v50);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v49, v53, v47);
      _Block_release(v47);
      swift_release(v28);

      (*(void (**)(char *, uint64_t))(v66 + 8))(v53, v55);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v49, v64);
      swift_release(v74);
      return v48;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100023DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  v0 = type metadata accessor for URL(0);
  __chkstk_darwin(v0);
  v22 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10003F544(&qword_100558EE8);
  v21 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_100558EF0);
  v20 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AssetCaches(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100558EF8);
  v13 = swift_allocObject(v12, 152, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1003CA240;
  *(_QWORD *)(v13 + 56) = type metadata accessor for AVAssetsInLibraryIssueIdentifier(0);
  *(_QWORD *)(v13 + 64) = &protocol witness table for AVAssetsInLibraryIssueIdentifier;
  sub_1000242A8((_QWORD *)(v13 + 32));
  AVAssetsInLibraryIssueIdentifier.init()();
  v14 = objc_msgSend(objc_allocWithZone((Class)PFCoreAnalyticsChannel), "init");
  *(_QWORD *)(v13 + 96) = type metadata accessor for CoreDataEpisodeAssetIssueIdentifier(0);
  *(_QWORD *)(v13 + 104) = &protocol witness table for CoreDataEpisodeAssetIssueIdentifier;
  sub_1000242A8((_QWORD *)(v13 + 72));
  v15 = CoreDataEpisodeAssetIssueIdentifier.init(analyticsChannel:)(v14);
  v16 = static AssetCaches.shared.getter(v15);
  AssetCaches.artwork.getter(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  CacheDomain.disk.getter(v5);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v5);
  v17 = v22;
  CacheDomain.DiskCaches.directory.getter(v2);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  *(_QWORD *)(v13 + 136) = type metadata accessor for UnownedImageIssueIdentifier(0);
  *(_QWORD *)(v13 + 144) = sub_1001DC00C();
  sub_1000242A8((_QWORD *)(v13 + 112));
  result = UnownedImageIssueIdentifier.init(directory:)(v17);
  qword_100558ED0 = v13;
  return result;
}

id sub_100024048()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  unint64_t v15;
  id v16;
  _BYTE v17[24];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  v0 = type metadata accessor for DownloadEnvironment(0);
  __chkstk_darwin(v0);
  v2 = &v17[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100552030 != -1)
    swift_once(&qword_100552030, sub_100023DE0);
  v3 = qword_100558ED0;
  v20[3] = type metadata accessor for CompoundDownloadedAssetIssueIdentifier(0);
  v20[4] = &protocol witness table for CompoundDownloadedAssetIssueIdentifier;
  sub_1000242A8(v20);
  v4 = swift_bridgeObjectRetain(v3);
  CompoundDownloadedAssetIssueIdentifier.init(identifiers:)(v4);
  v5 = sub_10003F544(&qword_100558ED8);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v6 + 56) = type metadata accessor for DeletionDownloadConsistencyIssueResolutionStrategy(0);
  *(_QWORD *)(v6 + 64) = &protocol witness table for DeletionDownloadConsistencyIssueResolutionStrategy;
  sub_1000242A8((_QWORD *)(v6 + 32));
  DeletionDownloadConsistencyIssueResolutionStrategy.init()();
  v19[3] = type metadata accessor for PrioritizedDownloadConsistencyResolutionStrategy(0);
  v19[4] = &protocol witness table for PrioritizedDownloadConsistencyResolutionStrategy;
  sub_1000242A8(v19);
  PrioritizedDownloadConsistencyResolutionStrategy.init(strategies:)(v6);
  result = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
  if (result)
  {
    v8 = result;
    if (qword_1005520B8 != -1)
      swift_once(&qword_1005520B8, sub_10004AB18);
    swift_beginAccess(&static PodcastsStateCoordinator.shared, v17, 0, 0);
    v9 = (void *)static PodcastsStateCoordinator.shared;
    v10 = (void *)objc_opt_self(MTDB);
    v11 = v9;
    v12 = v8;
    v13 = objc_msgSend(v10, "sharedInstance");
    v14 = objc_msgSend(v13, "privateQueueContext");

    v18[3] = &type metadata for AppDownloadedEffectApplicator;
    v15 = sub_100049180();
    v18[0] = v12;
    v18[1] = v11;
    v18[4] = v15;
    v18[2] = v14;
    static DownloadEnvironment.live.getter();
    v16 = objc_allocWithZone((Class)type metadata accessor for DownloadConsistency(0));
    result = (id)DownloadConsistency.init(issueIdentifier:resolutionStrategy:effectApplicator:downloadEnvironment:)(v20, v19, v18, v2);
    static DownloadConsistency.application = (uint64_t)result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1000242A8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

void sub_1000242E4(void *a1, void *a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  void **v63;
  int64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void **aBlock;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t);
  void *v92;
  uint64_t (*v93)();
  uint64_t v94;
  __objc2_prot *v95;
  _QWORD v96[6];

  v4 = (void *)objc_opt_self(UIApplication);
  v5 = objc_msgSend(v4, "sharedApplication");
  v6 = objc_msgSend(v5, "delegate");

  if (v6)
  {
    v95 = &OBJC_PROTOCOL___MTAppDelegateProtocol;
    v7 = swift_dynamicCastObjCProtocolConditional(v6, 1, &v95);
    if (v7)
    {
      v8 = (void *)v7;
      v9 = objc_opt_self(UIWindowScene);
      v10 = swift_dynamicCastObjCClass(a1, v9);
      if (v10)
      {
        v11 = v10;
        if ((objc_msgSend(v8, "respondsToSelector:", "createWindowWithScene:") & 1) != 0)
        {
          v12 = a1;
          v13 = objc_msgSend(v8, "createWindowWithScene:", v11);
          if (!v13)
          {
            swift_unknownObjectRelease(v6);

            return;
          }
          v14 = v13;
          v82 = v12;
          v15 = objc_msgSend(v13, "traitCollection");
          v16 = objc_msgSend(v15, "userInterfaceIdiom");

          if (!v16)
          {
            v17 = (void *)objc_opt_self(UITraitCollection);
            v18 = v14;
            v19 = objc_msgSend(v17, "traitCollectionWithHorizontalSizeClass:", 1);
            objc_msgSend(v18, "_setLocalOverrideTraitCollection:", v19);

          }
          objc_msgSend(v8, "setWindow:", v14);
          if ((objc_msgSend(v8, "respondsToSelector:", "willConnectScene") & 1) != 0)
            objc_msgSend(v8, "willConnectScene");
          objc_msgSend(v14, "makeKeyAndVisible");
          v20 = objc_msgSend(a2, "shortcutItem");
          v21 = (_QWORD *)&unk_1003CA000;
          v83 = v6;
          v87 = v4;
          v81 = v14;
          if (v20)
          {
            v22 = v20;
            v23 = static os_log_type_t.default.getter(v20);
            v24 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
            v25 = (void *)static OS_os_log.launch.getter(v24);
            v26 = sub_10003F544(&qword_1005559A0);
            v27 = swift_allocObject(v26, 72, 7);
            *(_OWORD *)(v27 + 16) = xmmword_1003CA200;
            v28 = objc_msgSend(v22, "type");
            v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
            v31 = v30;

            *(_QWORD *)(v27 + 56) = &type metadata for String;
            *(_QWORD *)(v27 + 64) = sub_10003E198();
            *(_QWORD *)(v27 + 32) = v29;
            *(_QWORD *)(v27 + 40) = v31;
            os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v25, "Perform shortcut action type: %{public}s", 40, 2, v27);

            swift_bridgeObjectRelease(v27);
            v32 = objc_msgSend(v87, "sharedApplication");
            v33 = objc_msgSend(v32, "delegate");

            if (v33)
            {
              v21 = &unk_1003CA000;
              if ((objc_msgSend(v33, "respondsToSelector:", "application:performActionForShortcutItem:completionHandler:") & 1) != 0)
              {
                swift_unknownObjectRetain(v33);
                v34 = objc_msgSend(v87, "sharedApplication");
                v93 = UInt64.int64Representation.getter;
                v94 = 0;
                aBlock = _NSConcreteStackBlock;
                v90 = 1107296256;
                v91 = sub_10001C290;
                v92 = &unk_1004B75C8;
                v35 = _Block_copy(&aBlock);
                objc_msgSend(v33, "application:performActionForShortcutItem:completionHandler:", v34, v22, v35);
                _Block_release(v35);
                v36 = v94;

                swift_unknownObjectRelease_n(v33, 2);
                swift_release(v36);
              }
              else
              {

                swift_unknownObjectRelease(v33);
              }
            }
            else
            {

              v21 = (_QWORD *)&unk_1003CA000;
            }
          }
          v37 = objc_msgSend(a2, "URLContexts");
          v38 = sub_100005EC8(0, &qword_10055B978, UIOpenURLContext_ptr);
          v39 = sub_100024C10((unint64_t *)&unk_10055B980, &qword_10055B978, UIOpenURLContext_ptr);
          v40 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v37, v38, v39);

          if ((v40 & 0xC000000000000001) != 0)
          {
            if (v40 < 0)
              v41 = v40;
            else
              v41 = v40 & 0xFFFFFFFFFFFFFF8;
            if (__CocoaSet.count.getter(v41) < 1)
            {
LABEL_25:
              swift_bridgeObjectRelease(v40);
              v42 = objc_msgSend(a2, "userActivities");
              v43 = sub_100005EC8(0, &qword_10055B998, NSUserActivity_ptr);
              v44 = sub_100024C10((unint64_t *)&unk_10055B9A0, &qword_10055B998, NSUserActivity_ptr);
              v45 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v42, v43, v44);

              v84 = v43;
              if ((v45 & 0xC000000000000001) != 0)
              {
                if (v45 < 0)
                  v47 = v45;
                else
                  v47 = v45 & 0xFFFFFFFFFFFFFF8;
                v48 = __CocoaSet.makeIterator()(v47);
                v46 = Set.Iterator.init(_cocoa:)(v96, v48, v43, v44);
                v45 = v96[0];
                v86 = v96[1];
                v49 = v96[2];
                v50 = v96[3];
                v51 = v96[4];
              }
              else
              {
                v50 = 0;
                v52 = -1 << *(_BYTE *)(v45 + 32);
                v86 = v45 + 56;
                v53 = ~v52;
                v54 = -v52;
                if (v54 < 64)
                  v55 = ~(-1 << v54);
                else
                  v55 = -1;
                v51 = v55 & *(_QWORD *)(v45 + 56);
                v49 = v53;
              }
              v85 = (unint64_t)(v49 + 64) >> 6;
              v56 = v21[58];
              while (1)
              {
                if (v45 < 0)
                {
                  v60 = __CocoaSet.Iterator.next()(v46);
                  if (!v60)
                    goto LABEL_64;
                  v61 = v60;
                  v88 = v60;
                  swift_unknownObjectRetain(v60);
                  swift_dynamicCast(&aBlock, &v88, (char *)&type metadata for Swift.AnyObject + 8, v84, 7);
                  v62 = aBlock;
                  v63 = (void **)swift_unknownObjectRelease(v61);
                  v59 = v50;
                  v57 = v51;
                }
                else
                {
                  if (v51)
                  {
                    v57 = (v51 - 1) & v51;
                    v58 = __clz(__rbit64(v51)) | (v50 << 6);
                    v59 = v50;
                  }
                  else
                  {
                    v64 = v50 + 1;
                    if (__OFADD__(v50, 1))
                    {
                      __break(1u);
                      return;
                    }
                    if (v64 >= v85)
                      goto LABEL_64;
                    v65 = *(_QWORD *)(v86 + 8 * v64);
                    v59 = v50 + 1;
                    if (!v65)
                    {
                      v59 = v50 + 2;
                      if (v50 + 2 >= v85)
                        goto LABEL_64;
                      v65 = *(_QWORD *)(v86 + 8 * v59);
                      if (!v65)
                      {
                        v59 = v50 + 3;
                        if (v50 + 3 >= v85)
                          goto LABEL_64;
                        v65 = *(_QWORD *)(v86 + 8 * v59);
                        if (!v65)
                        {
                          v59 = v50 + 4;
                          if (v50 + 4 >= v85)
                            goto LABEL_64;
                          v65 = *(_QWORD *)(v86 + 8 * v59);
                          if (!v65)
                          {
                            v66 = v50 + 5;
                            while (v85 != v66)
                            {
                              v65 = *(_QWORD *)(v86 + 8 * v66++);
                              if (v65)
                              {
                                v59 = v66 - 1;
                                goto LABEL_57;
                              }
                            }
LABEL_64:
                            sub_10017F43C(v45);
                            swift_unknownObjectRelease(v83);

                            return;
                          }
                        }
                      }
                    }
LABEL_57:
                    v57 = (v65 - 1) & v65;
                    v58 = __clz(__rbit64(v65)) + (v59 << 6);
                  }
                  v63 = (void **)*(id *)(*(_QWORD *)(v45 + 48) + 8 * v58);
                  v62 = v63;
                }
                if (!v62)
                  goto LABEL_64;
                v67 = static os_log_type_t.default.getter(v63);
                v68 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
                v69 = (void *)static OS_os_log.launch.getter(v68);
                v70 = sub_10003F544(&qword_1005559A0);
                v71 = swift_allocObject(v70, 72, 7);
                *(_OWORD *)(v71 + 16) = xmmword_1003CA200;
                v72 = objc_msgSend(v62, "activityType");
                v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
                v75 = v74;

                *(_QWORD *)(v71 + 56) = &type metadata for String;
                *(_QWORD *)(v71 + 64) = sub_10003E198();
                *(_QWORD *)(v71 + 32) = v73;
                *(_QWORD *)(v71 + 40) = v75;
                os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v69, "Continue user activity type: %{public}s", 39, 2, v71);

                swift_bridgeObjectRelease(v71);
                v76 = objc_msgSend(v87, "sharedApplication");
                v77 = objc_msgSend(v76, "delegate");

                if (v77)
                {
                  if ((objc_msgSend(v77, "respondsToSelector:", "application:continueUserActivity:restorationHandler:") & 1) != 0)
                  {
                    v78 = objc_msgSend(v87, "sharedApplication");
                    v93 = UInt64.int64Representation.getter;
                    v94 = 0;
                    aBlock = _NSConcreteStackBlock;
                    v90 = v56;
                    v91 = sub_10023CD38;
                    v92 = &unk_1004B75A0;
                    v79 = _Block_copy(&aBlock);
                    objc_msgSend(v77, "application:continueUserActivity:restorationHandler:", v78, v62, v79);
                    _Block_release(v79);
                    v80 = v94;

                    swift_unknownObjectRelease(v77);
                    v46 = (_QWORD *)swift_release(v80);
                  }
                  else
                  {

                    v46 = (_QWORD *)swift_unknownObjectRelease(v77);
                  }
                }
                else
                {

                }
                v50 = v59;
                v51 = v57;
              }
            }
          }
          else if (*(uint64_t *)(v40 + 16) < 1)
          {
            goto LABEL_25;
          }
          sub_10023D05C(v40);
          goto LABEL_25;
        }
      }
    }
    swift_unknownObjectRelease(v6);
  }
}

uint64_t sub_100024C10(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100005EC8(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100024E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char **v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void **v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v2 = v1;
  if ((static Podcasts.isBlueMoonEnabled()(a1) & 1) != 0)
  {
    v3 = &selRef__grabBagWithCompletionBlock_;
    sub_1002E9684();
  }
  else
  {
    v4 = sub_10003F544(&qword_1005624B0);
    inited = swift_initStackObject(v4, &v58);
    *(_OWORD *)(inited + 16) = xmmword_1003D44A0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MTApplicationWillResignActiveNotification);
    *(_QWORD *)(inited + 40) = v6;
    *(_QWORD *)(inited + 48) = sub_1002EA500;
    *(_QWORD *)(inited + 56) = 0;
    *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMAVPlayerNotification_StateDidChange);
    *(_QWORD *)(inited + 72) = v7;
    *(_QWORD *)(inited + 80) = sub_1002EA524;
    *(_QWORD *)(inited + 88) = 0;
    *(_QWORD *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMAVPlayerNotification_PlayerHeadDidChange);
    *(_QWORD *)(inited + 104) = v8;
    *(_QWORD *)(inited + 112) = sub_1002EA548;
    *(_QWORD *)(inited + 120) = 0;
    *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMAVPlayerNotification_MediaItemDidChange);
    *(_QWORD *)(inited + 136) = v9;
    *(_QWORD *)(inited + 144) = sub_1002EA56C;
    *(_QWORD *)(inited + 152) = 0;
    *(_QWORD *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMAVPlayerNotification_DurationAvailable);
    *(_QWORD *)(inited + 168) = v10;
    *(_QWORD *)(inited + 176) = sub_1002EA590;
    *(_QWORD *)(inited + 184) = 0;
    *(_QWORD *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMAVPlayerNotification_PlaybackSpeedChanged);
    *(_QWORD *)(inited + 200) = v11;
    *(_QWORD *)(inited + 208) = sub_1002EA5B4;
    *(_QWORD *)(inited + 216) = 0;
    *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMAVPlayerNotification_PlayerItemReadyToPlay);
    *(_QWORD *)(inited + 232) = v12;
    *(_QWORD *)(inited + 240) = sub_1002EA5D8;
    *(_QWORD *)(inited + 248) = 0;
    v13 = sub_10002E4B0(inited);
    v14 = __chkstk_darwin(v13);
    v15 = sub_1002EB0F0(v14, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*(*)(uint64_t))(), uint64_t))sub_1002EB3C4);
    swift_bridgeObjectRelease(v13);
    v16 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Podcasts13WidgetManager_observerTokens);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts13WidgetManager_observerTokens, &v57, 1, 0);
    v17 = *v16;
    *v16 = (uint64_t)v15;
    swift_bridgeObjectRelease(v17);
    v18 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v19 = (void *)IMAVPlayerNotification_PeriodicUpdate;
    v20 = swift_allocObject(&unk_1004C0118, 24, 7);
    swift_unknownObjectWeakInit(v20 + 16, v2);
    v55 = sub_10004A690;
    v56 = v20;
    v51 = _NSConcreteStackBlock;
    v52 = 1107296256;
    v53 = sub_10002BF30;
    v54 = &unk_1004C0130;
    v21 = _Block_copy(&v51);
    v22 = v56;
    v23 = v19;
    swift_release(v22);
    v3 = &selRef__grabBagWithCompletionBlock_;
    v24 = objc_msgSend(v18, "addObserverForName:object:queue:usingBlock:", v23, 0, 0, v21);
    _Block_release(v21);

    v25 = swift_beginAccess(v16, &v51, 33, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
    v27 = *(_QWORD *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v26 = *(_QWORD *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v27 >= v26 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
    v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v24);
    specialized Array._endMutation()(v28);
    swift_endAccess(&v51);
  }
  v29 = (void *)objc_opt_self(NSNotificationCenter);
  v30 = objc_msgSend(v29, "defaultCenter");
  v31 = MTApplicationWillTerminateNotification;
  v32 = swift_allocObject(&unk_1004C0118, 24, 7);
  swift_unknownObjectWeakInit(v32 + 16, v2);
  v55 = sub_1002EB3F0;
  v56 = v32;
  v51 = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_10002BF30;
  v54 = &unk_1004C0158;
  v33 = _Block_copy(&v51);
  swift_release(v56);
  v34 = objc_msgSend(v30, v3[426], v31, 0, 0, v33);
  _Block_release(v33);

  v35 = (_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts13WidgetManager_observerTokens);
  v36 = swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts13WidgetManager_observerTokens, &v51, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
  v38 = *(_QWORD *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v37 = *(_QWORD *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v38 >= v37 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
  v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v34);
  specialized Array._endMutation()(v39);
  swift_endAccess(&v51);
  v40 = objc_msgSend(v29, "defaultCenter");
  v41 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v42 = objc_msgSend(v41, "privateQueueContext");

  v43 = swift_allocObject(&unk_1004C0118, 24, 7);
  swift_unknownObjectWeakInit(v43 + 16, v2);
  v55 = sub_10002BFD4;
  v56 = v43;
  v51 = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_10002BF30;
  v54 = &unk_1004C0180;
  v44 = _Block_copy(&v51);
  swift_release(v56);
  v45 = objc_msgSend(v40, v3[426], NSManagedObjectContextDidSaveNotification, v42, 0, v44);
  _Block_release(v44);

  v46 = swift_beginAccess(v35, &v51, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
  v48 = *(_QWORD *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v47 = *(_QWORD *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v48 >= v47 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
  v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v45);
  specialized Array._endMutation()(v49);
  return swift_endAccess(&v51);
}

void sub_100025424(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeUuid"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "episodeForUuid:", v3));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "compositeManifest"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "metricsAdditionalData"));
  v6 = objc_msgSend(v5, "mutableCopy");

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "player"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v7, "isPlaybackRequested")));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("isPlaying"));

  objc_msgSend(v6, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 56), CFSTR("manifest"));
  +[IMMetrics recordUserAction:dataSource:withData:](IMMetrics, "recordUserAction:dataSource:withData:", CFSTR("change_track"), v9, v6);

}

uint64_t sub_100025818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  id v31;
  __CFString *v32;
  __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char v108[24];
  id v109[4];

  v1 = sub_10003F544(&qword_1005609B8);
  v100 = *(_QWORD *)(v1 - 8);
  v101 = v1;
  __chkstk_darwin(v1);
  v99 = (char *)&v81 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10003F544(&qword_1005609C0);
  v103 = *(_QWORD *)(v3 - 8);
  v104 = v3;
  __chkstk_darwin(v3);
  v102 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_1005609C8);
  v106 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v105 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_10003F544((uint64_t *)&unk_1005609D0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v8);
  v92 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v90);
  v91 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v87 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v86 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10003F544(&qword_1005609E0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_10003F544(&qword_1005609E8);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v23 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10003F544((uint64_t *)&unk_1005609F0);
  v97 = *(_QWORD *)(v24 - 8);
  v98 = v24;
  __chkstk_darwin(v24);
  v96 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v0;
  v27 = v0 + OBJC_IVAR____TtC8Podcasts11AppDelegate_flowController;
  swift_beginAccess(v27, v108, 0, 0);
  sub_100007A64(v27, (uint64_t)v109, &qword_100554570);
  if (!v109[3])
    return sub_100007A28((uint64_t)v109, &qword_100554570);
  v28 = sub_10003F544(&qword_100554550);
  v29 = type metadata accessor for BaseFlowController(0);
  result = swift_dynamicCast(&v107, v109, v28, v29, 6);
  if ((result & 1) != 0)
  {
    v83 = v107;
    v31 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v32 = CFSTR("MTSyncControllerSubscriptionSyncCompleted");
    v82 = v5;
    v33 = v32;
    NSNotificationCenter.publisher(for:object:)();

    v34 = sub_100026844(&qword_100556578, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
    Publisher.first()(v14, v34);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v81 = v26;
    v35 = sub_1002C04FC();
    v36 = type metadata accessor for LibraryDataProvider(0);
    BaseObjectGraph.inject<A>(_:)(v109, v36, v36);
    swift_release(v35);
    v37 = v109[0];
    v38 = swift_allocObject(&unk_1004BDE78, 24, 7);
    *(_QWORD *)(v38 + 16) = v37;
    v39 = static Subscribers.Demand.unlimited.getter(v38);
    v40 = sub_10003F544(&qword_100560A00);
    v41 = sub_10002F9C8(&qword_100560A08, &qword_1005609E0, (uint64_t)&protocol conformance descriptor for Publishers.First<A>);
    v42 = sub_10002F9C8((unint64_t *)&unk_100560A10, &qword_100560A00, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.flatMap<A>(maxPublishers:_:)(v39, sub_1002C7778, v38, v18, v40, v41, v42);
    swift_release(v38);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v43 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v44 = v86;
    v45 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v84 + 104))(v86, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v85);
    v46 = v87;
    static DispatchQoS.unspecified.getter(v45);
    v109[0] = _swiftEmptyArrayStorage;
    v47 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v48 = sub_10003F544(&qword_100555A00);
    v49 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
    v50 = v91;
    dispatch thunk of SetAlgebra.init<A>(_:)(v109, v48, v49, v90, v47);
    v109[0] = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x800000010043A850, v46, v50, v44, 0);
    v51 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v52 = (uint64_t)v92;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v92, 1, 1, v51);
    v53 = sub_10002F9C8((unint64_t *)&unk_100560A20, &qword_1005609E8, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v54 = sub_1000489AC();
    v55 = v96;
    v56 = v89;
    Publisher.receive<A>(on:options:)(v109, v52, v89, v43, v53, v54);
    sub_100007A28(v52, &qword_1005564A0);

    (*(void (**)(char *, uint64_t))(v88 + 8))(v23, v56);
    v57 = sub_10002F9C8(&qword_100560A30, (uint64_t *)&unk_1005609F0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v58 = v93;
    v59 = v98;
    Publisher.first()(v98, v57);
    v60 = sub_10002F9C8(&qword_100560A38, (uint64_t *)&unk_1005609D0, (uint64_t)&protocol conformance descriptor for Publishers.First<A>);
    v61 = v83;
    swift_retain(v83);
    v62 = v95;
    v63 = Publisher<>.sink(receiveValue:)(sub_1002C77C4, v61, v95, v60);
    swift_release(v61);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v58, v62);
    v64 = v81 + OBJC_IVAR____TtC8Podcasts11AppDelegate_subscriptions;
    swift_beginAccess(v81 + OBJC_IVAR____TtC8Podcasts11AppDelegate_subscriptions, v109, 33, 0);
    v65 = sub_10003F544((uint64_t *)&unk_100556450);
    v66 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
    AnyCancellable.store<A>(in:)(v64, v65, v66);
    swift_endAccess(v109);
    swift_release(v63);
    v67 = sub_10003F544(&qword_100560A40);
    v68 = v99;
    Publisher.map<A>(_:)(sub_1002C20FC, 0, v59, v67, v57);
    v109[0] = 0;
    v109[1] = 0;
    v69 = sub_10003F544(&qword_100560A48);
    v70 = sub_10002F9C8(&qword_100560A50, &qword_1005609B8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v71 = v101;
    v72 = v102;
    Publisher.scan<A>(_:_:)(v109, sub_1002C2140, 0, v101, v69, v70);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v68, v71);
    v73 = sub_10003F544(&qword_100560A58);
    v74 = sub_10002F9C8(&qword_100560A60, &qword_1005609C0, (uint64_t)&protocol conformance descriptor for Publishers.Scan<A, B>);
    v76 = v104;
    v75 = v105;
    Publisher.compactMap<A>(_:)(sub_1002C216C, 0, v104, v73, v74);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v72, v76);
    v77 = sub_10002F9C8(&qword_100560A68, &qword_1005609C8, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
    v78 = v83;
    swift_retain(v83);
    v79 = v82;
    v80 = Publisher<>.sink(receiveValue:)(sub_1002C77CC, v78, v82, v77);
    swift_release(v78);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v75, v79);
    swift_beginAccess(v64, v109, 33, 0);
    AnyCancellable.store<A>(in:)(v64, v65, v66);
    swift_endAccess(v109);
    swift_release(v78);
    swift_release(v80);
    return (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v55, v59);
  }
  return result;
}

uint64_t sub_100026240(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  __n128 v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;
  _BYTE v29[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v29, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (result)
  {
    v11 = (void *)result;
    v25 = objc_msgSend(*(id *)(result + OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator), "metadataPlayerPath");
    v12 = objc_msgSend(v25, "route");
    v26 = v3;
    if (v12)
    {
      v13 = v12;
      if ((objc_msgSend(v12, "isDeviceRoute") & 1) == 0)
      {
        v15 = objc_msgSend((id)objc_opt_self(MPVolumeHardwareButtonController), "sharedController");
        v14 = objc_msgSend(objc_allocWithZone((Class)MPVolumeControllerRouteDataSource), "initWithGroupRoute:outputDeviceRoute:", v13, 0);
        objc_msgSend(v15, "setActiveDataSource:", v14);

        goto LABEL_7;
      }

    }
    v14 = objc_msgSend((id)objc_opt_self(MPVolumeHardwareButtonController), "sharedController");
    objc_msgSend(v14, "setActiveDataSource:", 0);
LABEL_7:

    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v17 = (void *)static OS_dispatch_queue.main.getter(v16);
    aBlock[4] = sub_10002EC94;
    v28 = a1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100027AF8;
    aBlock[3] = &unk_1004BE960;
    v18 = _Block_copy(aBlock);
    v19 = v28;
    swift_retain(a1);
    v20 = swift_release(v19);
    static DispatchQoS.unspecified.getter(v20);
    aBlock[0] = _swiftEmptyArrayStorage;
    v21 = sub_10017F258();
    v22 = sub_10003F544((uint64_t *)&unk_10055B200);
    v23 = sub_100026534();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v2, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

unint64_t sub_100026534()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100556BC0;
  if (!qword_100556BC0)
  {
    v1 = sub_10003CA40((uint64_t *)&unk_10055B200);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100556BC0);
  }
  return result;
}

uint64_t sub_100026580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  objc_class *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[5];

  v6 = type metadata accessor for Podcasts(0);
  v29[3] = v6;
  v29[4] = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v7 = sub_1000242A8(v29);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v7, enum case for Podcasts.responsivePlayback(_:), v6);
  LOBYTE(v6) = isFeatureEnabled(_:)(v29);
  sub_10003D380(v29);
  if ((v6 & 1) != 0)
  {
    v8 = (void *)objc_opt_self(MTEpisodeLookupUtil);
    swift_retain(a1);
    v9 = objc_msgSend(v8, "sharedInstance", swift_retain(a3).n128_f64[0]);
    v10 = type metadata accessor for PlayStateDataSource(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = PlayStateDataSource.init(playbackController:pendingPlaybackStore:episodeLookupUtil:)(a1, a3, v9);
    v29[0] = v11;
    v12 = sub_100026844(&qword_100559B70, (uint64_t (*)(uint64_t))&type metadata accessor for PlayStateDataSource, (uint64_t)&protocol conformance descriptor for PlayStateDataSource);
    v13 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()(v10, v12);
    swift_release(v11);
  }
  else
  {
    v14 = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
    v15 = objc_msgSend((id)objc_opt_self(MTEpisodeLookupUtil), "sharedInstance");
    v16 = (objc_class *)type metadata accessor for PlayingEpisodePlayStateDataSource();
    v17 = sub_1001F6F2C(v14, v15, (char *)objc_allocWithZone(v16));
    v29[0] = v17;
    v18 = sub_100026844(&qword_1005598D0, (uint64_t (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource, (uint64_t)&unk_1003CDFE4);
    v13 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()(v16, v18);

  }
  v19 = sub_10003F544((uint64_t *)&unk_100553780);
  v20 = swift_allocObject(v19, 56, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1003CA260;
  *(_QWORD *)(v20 + 32) = v13;
  *(_QWORD *)(v20 + 40) = a2;
  v21 = sub_10003F544(&qword_100559B60);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  swift_retain(v13);
  v22 = swift_retain(a2);
  v23 = DefaultEpisodeStateDataSource.init()(v22);
  v29[0] = v23;
  v24 = sub_10002F9C8(&qword_100559B68, &qword_100559B60, (uint64_t)&protocol conformance descriptor for DefaultEpisodeStateDataSource<A>);
  v25 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()(v21, v24);
  v26 = swift_release(v23);
  *(_QWORD *)(v20 + 48) = v25;
  v29[0] = v20;
  specialized Array._endMutation()(v26);
  v27 = v29[0];
  swift_release(v13);
  return v27;
}

uint64_t sub_100026844(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

id sub_100026884()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  uint64_t EpisodesStates;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  id *v23;
  void *v24;
  id result;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  _QWORD v44[5];
  _QWORD v45[3];
  uint64_t v46;
  _UNKNOWN **v47;

  v0 = type metadata accessor for Podcasts(0);
  v46 = v0;
  v47 = (_UNKNOWN **)sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v1 = sub_1000242A8(v45);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for Podcasts.simplifiedSyncDirtyHandling(_:), v0);
  v2 = isFeatureEnabled(_:)(v45);
  sub_10003D380(v45);
  EpisodesStates = type metadata accessor for FetchEpisodesStates();
  v4 = swift_allocObject(EpisodesStates, 16, 7);
  v46 = EpisodesStates;
  v47 = &off_1004BF6E0;
  v45[0] = v4;
  if ((v2 & 1) != 0)
  {
    v5 = type metadata accessor for SimplifiedPodcastsStateTransitionsFinder();
    v6 = (_QWORD *)swift_allocObject(v5, 56, 7);
    v7 = sub_100038DEC((uint64_t)v45, EpisodesStates);
    __chkstk_darwin(v7);
    v9 = (_QWORD *)((char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    v11 = *v9;
    v6[5] = EpisodesStates;
    v6[6] = &off_1004BF6E0;
    v6[2] = v11;
    sub_10003D380(v45);
    v12 = &off_1004C26C0;
  }
  else
  {
    v5 = type metadata accessor for OriginBasedPodcastsStateTransitionsFinder();
    v6 = (_QWORD *)swift_allocObject(v5, 56, 7);
    v13 = sub_100038DEC((uint64_t)v45, EpisodesStates);
    __chkstk_darwin(v13);
    v15 = (_QWORD *)((char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v16 + 16))(v15);
    v17 = *v15;
    v6[5] = EpisodesStates;
    v6[6] = &off_1004BF6E0;
    v6[2] = v17;
    sub_10003D380(v45);
    v12 = &off_1004B3210;
  }
  v46 = v5;
  v47 = v12;
  v45[0] = v6;
  v18 = type metadata accessor for SyncKeysRepository(0);
  v19 = (void *)static SyncKeysRepository.shared.getter(v18);
  v20 = objc_msgSend((id)objc_opt_self(MTSyncController), "sharedInstance");
  v21 = objc_msgSend((id)objc_opt_self(MTDownloadsGateway), "shared");
  sub_10000A520((uint64_t)v45, (uint64_t)v44);
  v22 = type metadata accessor for ImplicitFollowsDecayCoordinator();
  swift_allocObject(v22, 56, 7);
  v23 = ImplicitFollowsDecayCoordinator.init()();
  v24 = (void *)objc_opt_self(MTLibrary);
  result = objc_msgSend(v24, "sharedInstance");
  if (result)
  {
    v26 = result;
    v27 = sub_100005EC8(0, &qword_100553B78, &off_1004A43D0);
    v28 = objc_msgSend((id)swift_getObjCClassFromMetadata(v27), "sharedInstance");
    v29 = type metadata accessor for PodcastsStateTransitionsExternalEffects();
    v30 = (_QWORD *)swift_allocObject(v29, 40, 7);
    v30[2] = v26;
    v30[3] = v28;
    v30[4] = v20;
    v31 = type metadata accessor for PodcastsStateTransitions();
    v32 = (_QWORD *)swift_allocObject(v31, 144, 7);
    v33 = v20;
    v34 = v19;
    v35 = sub_10000A404(v44, v34, (uint64_t)v23, (uint64_t)v30, v32);

    type metadata accessor for EpisodeStateRepository(0);
    v36 = static EpisodeStateRepository.shared.getter();
    v37 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
    v38 = type metadata accessor for PodcastsStateCoordinatorPersistentStore(0);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    v39 = v34;
    v40 = PodcastsStateCoordinatorPersistentStore.init(syncKeysRepository:)();
    result = objc_msgSend(v24, "sharedInstance");
    if (result)
    {
      v41 = (uint64_t)result;
      v42 = (char *)objc_allocWithZone((Class)type metadata accessor for PodcastsStateCoordinator());
      v43 = sub_1002B9DE8((uint64_t)v21, (uint64_t)v35, v36, (uint64_t)v37, v40, (uint64_t)v33, v41, v42);

      sub_10003D380(v45);
      return v43;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_100027874(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)MTBaseEpisodeListManifest;
  return objc_msgSendSuper2(&v3, "enumerateObjectsUsingBlock:", v1);
}

void sub_100027A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100027AF8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_100027B24()
{
  uint64_t v0;

  sub_100027B5C(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

void sub_100027B5C(void *a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  _QWORD v22[5];
  uint64_t v23;

  v17 = objc_autoreleasePoolPush();
  v18 = swift_allocObject(&unk_1004C46B0, 80, 7);
  *(_BYTE *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  *(_QWORD *)(v18 + 32) = a4;
  *(_QWORD *)(v18 + 40) = a5;
  *(_QWORD *)(v18 + 48) = a6;
  *(_QWORD *)(v18 + 56) = a7;
  *(_QWORD *)(v18 + 64) = a8;
  *(_QWORD *)(v18 + 72) = a9;
  v22[4] = sub_100037E4C;
  v23 = v18;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 1107296256;
  v22[2] = sub_100037DB0;
  v22[3] = &unk_1004C46C8;
  v19 = _Block_copy(v22);
  v20 = v23;
  v21 = a3;
  swift_retain(a5);
  sub_10002CA20(a6, a7);
  swift_retain(a9);
  swift_release(v20);
  objc_msgSend(a1, "getAllTasksWithCompletionHandler:", v19);
  _Block_release(v19);
  objc_autoreleasePoolPop(v17);
}

uint64_t sub_100027C84()
{
  uint64_t v0;

  return sub_100027C8C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100027C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OBJC_IVAR____TtC8Podcasts13WidgetManager_waitToReloadUntilSave;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8Podcasts13WidgetManager_waitToReloadUntilSave) == 1)
  {
    v8 = static Logger.widget.getter(result);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received save notification after Timeline change", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(_BYTE *)(a1 + v7) = 0;
    return sub_10004A698();
  }
  return result;
}

uint64_t sub_100027DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Logger.widget.getter(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Reloading Timeline", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  type metadata accessor for WidgetCenter(0);
  v9 = static WidgetCenter.shared.getter();
  dispatch thunk of WidgetCenter.reloadTimelines(ofKind:)(0xD000000000000020, 0x800000010043BF20);
  return swift_release(v9);
}

void sub_100028690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1000286DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const __CFString *v17;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeUuid"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "episodeForUuid:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "itemDescriptionWithoutHTML"));
  v6 = _MTLogCategoryMediaRemote(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "title"));
    v10 = (void *)v9;
    v11 = &stru_1004C6D40;
    v12 = 138543874;
    v13 = v8;
    v14 = 2112;
    if (!v5)
      v11 = CFSTR(" - NO DESCRIPTION");
    v15 = v9;
    v16 = 2112;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[InfoCenter] Did fetch info for content item %{public}@ - %@%@", (uint8_t *)&v12, 0x20u);

  }
  (*(void (**)(_QWORD, void *))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v5);

}

void sub_100028B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100028B7C(id a1, MPRemoteCommandCenter *a2)
{
  MPRemoteCommandCenter *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const __CFString *v11;
  const __CFString *v12;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter playCommand](v2, "playCommand"));
  objc_msgSend(v3, "setEnabled:", 1);

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter setPlaybackQueueCommand](v2, "setPlaybackQueueCommand"));
  objc_msgSend(v4, "setEnabled:", 1);

  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter setPlaybackQueueCommand](v2, "setPlaybackQueueCommand"));
  objc_msgSend(v5, "registerSupportedQueueType:", 5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter setPlaybackSessionCommand](v2, "setPlaybackSessionCommand"));
  objc_msgSend(v6, "setEnabled:", 1);

  v12 = CFSTR("com.apple.podcasts.MTPlaybackQueueController.GenericQueue");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter setPlaybackSessionCommand](v2, "setPlaybackSessionCommand"));
  objc_msgSend(v8, "setExportableSessionTypes:", v7);

  v11 = CFSTR("com.apple.podcasts.MTPlaybackQueueController.GenericQueue");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v10 = (void *)objc_claimAutoreleasedReturnValue(-[MPRemoteCommandCenter setPlaybackSessionCommand](v2, "setPlaybackSessionCommand"));

  objc_msgSend(v10, "setSupportedSessionTypes:", v9);
}

void sub_1000292D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_100029688(_QWORD *a1, int a2, id a3)
{
  id v4;

  v4 = objc_retainBlock(a3);
  (*((void (**)(id, _QWORD, _QWORD, _QWORD))v4 + 2))(v4, a1[4], a1[5], a1[6]);

}

void sub_1000296CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id WeakRetained;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100030954;
  v15[3] = &unk_1004A9A80;
  objc_copyWeak(&v19, v10);
  v12 = v7;
  v16 = v12;
  v13 = v8;
  v17 = v13;
  v14 = v9;
  v18 = v14;
  objc_msgSend(WeakRetained, "enqueueWorkBlock:", v15);

  objc_destroyWeak(&v19);
}

void sub_1000297D0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100029A90(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingUserDefaultArchivedData"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2 == 0;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", *(_QWORD *)(a1 + 32), 1, 0));
  objc_msgSend(*(id *)(a1 + 32), "setPendingUserDefaultArchivedData:", v3);

}

uint64_t sub_100029B1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100029B3C()
{
  uint64_t v0;

  return sub_100029B64(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100029B44()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100029B64(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100029B84()
{
  return sub_10002A264(sub_100029B90);
}

uint64_t sub_100029B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[24];

  v9 = (_QWORD *)(a1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders, v15, 33, 0);
  swift_bridgeObjectRetain(a3);
  if (a4)
  {
    swift_unknownObjectRetain(a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v14 = *v9;
    *v9 = 0x8000000000000000;
    sub_100029C88(a4, a5, a2, a3, isUniquelyReferenced_nonNull_native);
    v11 = *v9;
    *v9 = v14;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    v12 = sub_10021710C(a2, a3);
    swift_bridgeObjectRelease(a3);
    swift_unknownObjectRelease(v12);
  }
  return swift_endAccess(v15);
}

uint64_t sub_100029C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_100029DFC(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10021F174();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_unknownObjectRelease(*v21);
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }
    goto LABEL_14;
  }
  sub_100029F50(v17, a5 & 1);
  v23 = sub_100029DFC(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DownloaderSessionConfigurationType);
  __break(1u);
  return result;
}

unint64_t sub_100029DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v7, a1, a2);
  swift_bridgeObjectRelease(a2);
  v5 = Hasher._finalize()();
  return sub_100029E70(a1, a2, v5);
}

unint64_t sub_100029E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void sub_100029F50(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  __int128 v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_100552BF0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v23 >= v36)
          goto LABEL_36;
        v24 = v37[v23];
        ++v13;
        if (!v24)
        {
          v13 = v23 + 1;
          if (v23 + 1 >= v36)
            goto LABEL_36;
          v24 = v37[v13];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v36)
            {
LABEL_36:
              swift_release(v5);
              v3 = v35;
              if ((a2 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v37[v25];
            if (!v24)
            {
              while (1)
              {
                v13 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v13 >= v36)
                  goto LABEL_36;
                v24 = v37[v13];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v13 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v38 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain(v32);
        swift_unknownObjectRetain(v38);
      }
      Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
      swift_bridgeObjectRetain(v32);
      String.hash(into:)(v39, v33, v32);
      swift_bridgeObjectRelease(v32);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v38;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

uint64_t sub_10002A264(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

char *sub_10002A278()
{
  uint64_t v0;

  return sub_10002A280(v0);
}

char *sub_10002A280(uint64_t a1)
{
  uint64_t v1;
  char *result;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  _BYTE v17[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  result = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = *(id *)&result[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver];

    v15 = 0;
    LODWORD(v3) = objc_msgSend(v4, "performFetch:", &v15);

    if ((_DWORD)v3)
    {
      return (char *)v15;
    }
    else
    {
      v13 = v15;
      v5 = v15;
      v6 = _convertNSErrorToError(_:)(v13);

      swift_willThrow();
      v7 = sub_10003F544(&qword_1005547B0);
      v8 = swift_allocObject(v7, 64, 7);
      *(_OWORD *)(v8 + 16) = xmmword_1003CA200;
      v15 = 0;
      v16 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      v9._object = (void *)0x8000000100430770;
      v9._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v9);
      v14 = v6;
      v10 = sub_10003F544((uint64_t *)&unk_10055A340);
      _print_unlocked<A, B>(_:_:)(&v14, &v15, v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v11 = v15;
      v12 = v16;
      *(_QWORD *)(v8 + 56) = &type metadata for String;
      *(_QWORD *)(v8 + 32) = v11;
      *(_QWORD *)(v8 + 40) = v12;
      print(_:separator:terminator:)(v8, 32, 0xE100000000000000, 10, 0xE100000000000000);
      swift_bridgeObjectRelease(v8);
      return (char *)swift_errorRelease(v6);
    }
  }
  return result;
}

void **sub_10002A45C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void ***v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  void **v50;
  void *v51;
  void *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  void (*v63)(void ***, __n128);
  uint64_t v64;
  __n128 v65;
  _QWORD *v66;
  __n128 v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  char v87;
  void **v88;
  void **v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  char *v98;
  void *v99;
  uint64_t v100;
  void **v101;
  void **v102;
  char *v103;
  void **v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  void **aBlock;
  uint64_t v118;
  uint64_t (*v119)(uint64_t);
  void *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[3];
  _QWORD v124[6];

  v1 = v0;
  v111 = type metadata accessor for DispatchWorkItemFlags(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v107 = (char *)&v100 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for DispatchQoS(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v103 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for MetricsPipeline(0);
  v113 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v112 = (uint64_t *)((char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10003F544(&qword_10055E910);
  __chkstk_darwin(v5);
  v7 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Podcasts(0);
  v120 = (void *)v8;
  v121 = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v9 = sub_1000242A8(&aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v9, enum case for Podcasts.objectGraphBuilderInitialization(_:), v8);
  LOBYTE(v8) = isFeatureEnabled(_:)(&aBlock);
  sub_10003D380(&aBlock);
  if ((v8 & 1) != 0)
  {
    v10 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts11AppDelegate_objectGraph];
    swift_retain(v10);
  }
  else
  {
    v10 = AppBootstrap.buildForegroundDependencies()();
  }
  sub_100005EC8(0, (unint64_t *)&qword_100561290, UITraitCollection_ptr);
  if ((static UITraitCollection.interfaceIdiomIsMac.getter() & 1) != 0)
  {
    v11 = type metadata accessor for ArtworkLoader(0);
    BaseObjectGraph.injectIfAvailable<A>(_:)(&aBlock, v11, v11);
    v12 = aBlock;
    if (aBlock)
    {
      v13 = sub_100005EC8(0, &qword_1005536C0, MTImageStore_ptr);
      objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "defaultMaxImageDimensionInPixels");
      v15 = v14;
      v16 = (_QWORD *)swift_allocObject(&unk_1004BDD60, 40, 7);
      v16[2] = sub_10030FB90;
      v16[3] = 0;
      v16[4] = v15;
      ArtworkLoader.alternativeSize.setter(sub_1002C76B4, v16);
      swift_release(v12);
    }
  }
  sub_1002C5368();
  v17 = type metadata accessor for HomePageProvider(0);
  BaseObjectGraph.inject<A>(_:)(&aBlock, v17, v17);
  v18 = aBlock;
  HomePageProvider.loadPageContent()();
  swift_release(v18);
  v19 = sub_10017208C(v10);
  v20 = sub_10003F544((uint64_t *)&unk_100554530);
  BaseObjectGraph.inject<A>(_:)(&aBlock, v20, v20);
  v21 = aBlock;
  v22 = v118;
  v23 = sub_10003F544(&qword_100554550);
  BaseObjectGraph.inject<A>(_:)(v124, v23, v23);
  v24 = type metadata accessor for PodcastsFlowTabBarController();
  BaseObjectGraph.inject<A>(_:)(&aBlock, v24, v24);
  v25 = aBlock;
  v26 = type metadata accessor for RootSplitViewController(0);
  BaseObjectGraph.inject<A>(_:)(&aBlock, v26, v26);
  v27 = aBlock;
  v28 = type metadata accessor for MenuBarController();
  v105 = v19;
  BaseObjectGraph.inject<A>(_:)(&aBlock, v28, v28);
  v29 = *(void **)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_commandController];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_commandController] = aBlock;

  sub_10000A520((uint64_t)v124, (uint64_t)&aBlock);
  v30 = (uint64_t)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_flowController];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_flowController], v123, 33, 0);
  sub_10016DE28((uint64_t)&aBlock, v30, &qword_100554570);
  swift_endAccess(v123);
  v31 = (void ***)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_urlActionRunner];
  v32 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_urlActionRunner];
  *v31 = v21;
  v31[1] = (void **)v22;
  swift_unknownObjectRetain(v21);
  swift_unknownObjectRelease(v32);
  aBlock = v21;
  v118 = v22;
  v33 = v20;
  v34 = v20;
  v35 = v21;
  v106 = v10;
  v36 = BaseObjectGraph.satisfying<A>(_:with:)(v33, &aBlock, v34);
  v37 = BaseObjectGraph.satisfying<A>(_:with:)(v23, v124, v23);
  swift_release(v36);
  v38 = type metadata accessor for NowPlayingBootstrap();
  swift_allocObject(v38, 128, 7);
  swift_retain(v37);
  v39 = v27;
  v40 = v25;
  v41 = sub_1001A7BE4(v37, v39, v40);

  sub_10001BA28();
  v42 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_nowPlayingBootstrap];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_nowPlayingBootstrap] = v41;
  v114 = (void **)v41;
  swift_retain(v41);
  swift_release(v42);
  v43 = type metadata accessor for UserActivityController();
  BaseObjectGraph.injectIfAvailable<A>(_:)(&aBlock, v43, v43);
  v44 = aBlock;
  if (aBlock)
  {
    v45 = aBlock[6];
    aBlock[6] = v35;
    v44[7] = (void *)v22;
    swift_unknownObjectRetain(v35);
    swift_release(v44);
    swift_unknownObjectRelease(v45);
  }
  aBlock = v114;
  v46 = BaseObjectGraph.satisfying<A>(_:with:)(v38, &aBlock, v38);
  swift_release_n(v37, 2);
  v47 = sub_100026844(&qword_100560990, (uint64_t (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController, (uint64_t)&unk_1003D5058);
  v48 = type metadata accessor for EpisodeController();
  v49 = v40;
  swift_retain(v46);
  BaseObjectGraph.injectIfAvailable<A>(_:)(&aBlock, v48, v48);
  v50 = aBlock;
  v102 = v39;
  if (aBlock)
  {
    aBlock[3] = (void *)v47;
    swift_unknownObjectWeakAssign(v50 + 2, v49);

    swift_release(v50);
  }
  else
  {

  }
  sub_1002C5464();
  type metadata accessor for PurchaseControllerWrapper(0);
  v51 = (void *)static PurchaseControllerWrapper.sharedInstance.getter();
  v52 = (void *)PurchaseControllerWrapper.purchaseController.getter();

  v53 = type metadata accessor for SubscriptionConfirmationSheetHandler(0);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v54 = swift_retain(v46);
  v55 = SubscriptionConfirmationSheetHandler.init(asPartOf:)(v54);
  v120 = (void *)v53;
  v121 = sub_100026844(&qword_100560998, (uint64_t (*)(uint64_t))&type metadata accessor for SubscriptionConfirmationSheetHandler, (uint64_t)&protocol conformance descriptor for SubscriptionConfirmationSheetHandler);
  aBlock = (void **)v55;
  dispatch thunk of PurchaseController.subscriptionConfirmatonHandler.setter(&aBlock);

  v56 = OBJC_IVAR____TtC8Podcasts11AppDelegate_widgetManager;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_widgetManager])
  {
    if ((sub_1002C55A4() & 1) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  v91 = sub_10003F544(&qword_1005609B0);
  swift_retain(v46);
  BaseObjectGraph.inject<A>(_:)(v123, v91, v91);
  v92 = v123[0];
  v93 = v123[1];
  v94 = sub_10003F544((uint64_t *)&unk_1005588D0);
  BaseObjectGraph.inject<A>(_:)(&aBlock, v94, v94);
  v95 = type metadata accessor for PlaybackController(0);
  BaseObjectGraph.inject<A>(_:)(&v116, v95, v95);
  v96 = v116;
  v97 = objc_allocWithZone((Class)type metadata accessor for WidgetManager(0));
  v98 = sub_1002E7F38(v92, v93, &aBlock, v96, 1.0);
  swift_release(v46);
  v99 = *(void **)&v1[v56];
  *(_QWORD *)&v1[v56] = v98;

  if ((sub_1002C55A4() & 1) != 0)
  {
LABEL_14:
    PPTViewControllerProxy.init(tabBarController:)(v49);
    v57 = type metadata accessor for PPTViewControllerProxy(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v7, 0, 1, v57);
    v58 = (uint64_t)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_pptViewHierarchyProxy];
    swift_beginAccess(&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_pptViewHierarchyProxy], &aBlock, 33, 0);
    sub_10016DE28((uint64_t)v7, v58, &qword_10055E910);
    swift_endAccess(&aBlock);
  }
LABEL_15:
  sub_1002C3E70(v49);
  sub_100025818();
  v59 = &v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_pendingBootstrapBlocks];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_pendingBootstrapBlocks], v123, 1, 0);
  v60 = *(_QWORD *)v59;
  v61 = *(_QWORD *)(*(_QWORD *)v59 + 16);
  v104 = v35;
  v101 = v49;
  if (v61)
  {
    swift_bridgeObjectRetain(v60);
    v62 = (uint64_t *)(v60 + 40);
    do
    {
      v63 = (void (*)(void ***, __n128))*(v62 - 1);
      v64 = *v62;
      aBlock = (void **)v46;
      v65 = swift_retain(v64);
      v63(&aBlock, v65);
      swift_release(v64);
      v62 += 2;
      --v61;
    }
    while (v61);
    swift_bridgeObjectRelease(v60);
    v60 = *(_QWORD *)v59;
  }
  *(_QWORD *)v59 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v60);
  v66 = v112;
  BaseObjectGraph.inject<A>(_:)(v112, v115, v115);
  static PendingAppLaunch.didFinishLaunch(postEventUsing:)(v66);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v68 = (void *)static OS_dispatch_queue.main.getter(v67);
  v69 = swift_allocObject(&unk_1004BDCE8, 32, 7);
  *(_QWORD *)(v69 + 16) = v1;
  *(_QWORD *)(v69 + 24) = v46;
  v121 = (uint64_t)sub_1002C763C;
  v122 = v69;
  aBlock = _NSConcreteStackBlock;
  v118 = 1107296256;
  v119 = sub_100027AF8;
  v120 = &unk_1004BDD00;
  v70 = _Block_copy(&aBlock);
  v71 = v122;
  swift_retain(v46);
  v72 = v1;
  v73 = swift_release(v71);
  v74 = v103;
  static DispatchQoS.unspecified.getter(v73);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v75 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v76 = sub_10003F544((uint64_t *)&unk_10055B200);
  v77 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  v78 = v107;
  v79 = v111;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v76, v77, v111, v75);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v74, v78, v70);
  _Block_release(v70);

  (*(void (**)(char *, uint64_t))(v110 + 8))(v78, v79);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v74, v109);
  type metadata accessor for AppDependencyManager(0);
  v80 = static AppDependencyManager.shared.getter();
  LOBYTE(v116) = 0;
  v81 = sub_100175104();
  AnyHashable.init<A>(_:)(&v116, &type metadata for AppDependencyKey, v81);
  v82 = swift_allocObject(&unk_1004BDD38, 32, 7);
  v83 = v105;
  *(_QWORD *)(v82 + 16) = v46;
  *(_QWORD *)(v82 + 24) = v83;
  v84 = type metadata accessor for BaseObjectGraph(0);
  v85 = swift_retain(v83);
  AppDependencyManager.add<A>(key:dependency:)(&aBlock, sub_1002C7664, v82, v84, v85);
  swift_release(v80);
  swift_release(v82);
  v86 = sub_100007A28((uint64_t)&aBlock, &qword_100554540);
  v87 = static Podcasts.isUIPSidebarEnabled.getter(v86);
  swift_release(v106);
  swift_unknownObjectRelease(v104);
  swift_release(v83);
  swift_release(v114);
  swift_release(v46);
  (*(void (**)(_QWORD *, uint64_t))(v113 + 8))(v66, v115);
  sub_10003D380(v124);
  if ((v87 & 1) != 0)
    v88 = v102;
  else
    v88 = v101;
  if ((v87 & 1) != 0)
    v89 = v101;
  else
    v89 = v102;

  return v89;
}

uint64_t sub_10002B070(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10002B270(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10002B104(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16[2];

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      return swift_release(v1);
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        return swift_release(v1);
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          return swift_release(v1);
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            return swift_release(v1);
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain(v12);
    sub_10002B270(v16, v11, v12);
    result = swift_bridgeObjectRelease(v16[1]);
  }
  v15 = v13 + 4;
  if (v15 >= v7)
    return swift_release(v1);
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      return swift_release(v1);
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10002B270(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_10002B41C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10002B41C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10002B5B4(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_10035F414();
      goto LABEL_22;
    }
    sub_10000627C(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void sub_10002B5B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10003F544(&qword_100552B70);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10002B890(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingEpisodeWithID:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "_mediaItemForEpisode:", v5));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10002B940(char a1)
{
  char *v1;
  _QWORD v2[5];

  v2[3] = &type metadata for PodcastsDownloader;
  v2[4] = &off_1004ADF88;
  LOBYTE(v2[0]) = a1;
  v1 = (char *)sub_10002B9B8
     + 4 * byte_1003CA788[*(unsigned __int8 *)sub_10003A834(v2, (uint64_t)&type metadata for PodcastsDownloader)];
  __asm { BR              X10 }
}

id sub_10002B9B8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  char *v7;
  uint64_t (**v8)(uint64_t, uint64_t, uint64_t);
  id v9;
  objc_super v11;
  __int128 v12[2];
  uint64_t v13[2];
  _QWORD v14[13];

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_expectedDownloaderTypes, v12, 33, 0);
  sub_10002BB34(v13, 0xD00000000000002DLL, 0x800000010042DE50);
  v2 = v13[1];
  swift_endAccess(v12);
  swift_bridgeObjectRelease(v2);
  v3 = swift_allocObject(&unk_1004B02D8, 24, 7);
  swift_unknownObjectWeakInit(v3 + 16, v1);
  sub_10000A520((uint64_t)v14, (uint64_t)v12);
  v4 = swift_allocObject(&unk_1004B0350, 72, 7);
  sub_10002099C(v12, v4 + 16);
  *(_BYTE *)(v4 + 56) = v0 & 1;
  *(_QWORD *)(v4 + 64) = v3;
  v5 = (objc_class *)sub_10003F544(&qword_1005540C8);
  v6 = (char *)objc_allocWithZone(v5);
  v7 = &v6[*(_QWORD *)((swift_isaMask & *(_QWORD *)v6) + 0x180)];
  *(_QWORD *)v7 = 0;
  v7[8] = 2;
  v8 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v6[*(_QWORD *)((swift_isaMask & *(_QWORD *)v6) + 0x188)];
  *v8 = sub_10001F430;
  v8[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v4;
  v11.receiver = v6;
  v11.super_class = v5;
  v9 = objc_msgSendSuper2(&v11, "init");
  sub_10003D380(v14);
  return v9;
}

uint64_t sub_10002BB34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v24, a2, a3);
  swift_bridgeObjectRelease(a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_10002BCF0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10002BCF0(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10000FAA0(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_10035F264();
      goto LABEL_22;
    }
    sub_100006F80(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v28, v8, a2);
  swift_bridgeObjectRelease(a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DownloaderSessionConfigurationType);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

id sub_10002BE98()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___serialQueue;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___serialQueue);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___serialQueue);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
    objc_msgSend(v4, "setQualityOfService:", -1);
    objc_msgSend(v4, "setMaxConcurrentOperationCount:", 1);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_10002BF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_10002BFD4(uint64_t a1)
{
  uint64_t v1;

  sub_1002A41E4(a1, v1, (void (*)(void))sub_10002C1E0);
}

uint64_t sub_10002BFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts13WidgetManager_refreshQueue];
  v14 = swift_allocObject(a1, 24, 7);
  *(_QWORD *)(v14 + 16) = v3;
  aBlock[4] = a2;
  v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v3);
  v22 = _swiftEmptyArrayStorage;
  v16 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10003F544((uint64_t *)&unk_10055B200);
  v18 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v7, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

uint64_t sub_10002C1E0()
{
  return sub_10002BFF4((uint64_t)&unk_1004C00C8, (uint64_t)sub_100027C84, (uint64_t)&unk_1004C00E0);
}

uint64_t sub_10002C1FC(uint64_t a1)
{
  uint64_t v1;

  return sub_10002C20C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_10002C20C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  __n128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t aBlock[5];
  _QWORD *v53;

  v48 = a4;
  v45 = a2;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v49 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v15 - 8);
  v47 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.widget.getter(v16);
  v19 = swift_bridgeObjectRetain_n(a3, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v42 = a6;
    v22 = swift_slowAlloc(12, -1);
    v41 = a5;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v44 = v9;
    v25 = v24;
    aBlock[0] = v24;
    v43 = v13;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(a3);
    v51 = sub_10003D274(v45, a3, aBlock);
    a6 = v42;
    v13 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Observed %s", v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v26 = v25;
    v9 = v44;
    swift_slowDealloc(v26, -1, -1);
    v27 = v23;
    a5 = v41;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v47);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v29 = (void *)static OS_dispatch_queue.main.getter(v28);
  v30 = (_QWORD *)swift_allocObject(&unk_1004C0280, 40, 7);
  v31 = v48;
  v30[2] = v48;
  v30[3] = a5;
  v30[4] = a6;
  aBlock[4] = (uint64_t)sub_10002EC18;
  v53 = v30;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100027AF8;
  aBlock[3] = (uint64_t)&unk_1004C0298;
  v32 = _Block_copy(aBlock);
  v33 = v53;
  swift_retain(v31);
  swift_retain(a6);
  v34 = swift_release(v33);
  v35 = v49;
  static DispatchQoS.unspecified.getter(v34);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v36 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v37 = sub_10003F544((uint64_t *)&unk_10055B200);
  v38 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v37, v38, v9, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v12, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v35, v13);
}

unint64_t sub_10002C5E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100555190;
  if (!qword_100555190)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100555190);
  }
  return result;
}

void sub_10002C6B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *j;
  void *v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];

  v2 = *(void **)(a1 + 32);
  v3 = kMTPlaylistEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate truePredicate](NSPredicate, "truePredicate"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectsInEntity:predicate:sortDescriptors:", v3, v4, 0));

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v11, "setNeedsUpdate:", 1);
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "settings", 0));
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v21;
          do
          {
            for (j = 0; j != v14; j = (char *)j + 1)
            {
              if (*(_QWORD *)v21 != v15)
                objc_enumerationMutation(v12);
              objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)j), "setNeedsUpdate:", 1);
            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
          }
          while (v14);
        }

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v8);
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", kPodcastUuid));
  v18 = *(void **)(a1 + 40);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v17));
  objc_msgSend(v18, "updatePlaylistsWithUuids:", v19);

}

void sub_10002C8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t Strong;
  void *v8;
  __n128 v9;
  char v10;
  id v11;
  _BYTE v13[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v8 = (void *)Strong;
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    *v6 = static OS_dispatch_queue.main.getter(v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
    v10 = _dispatchPreconditionTest(_:)(v6);
    (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
    if ((v10 & 1) != 0)
    {
      v11 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      objc_msgSend(v11, "postNotificationName:object:", CFSTR("MTFeedUpdateDidMakeProgress"), v8);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10002CA20(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10002CA30(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void sub_10002CA40(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_processLatestPersistentHistoryTransactions");

}

void sub_10002D05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  uint64_t v31;

  _Block_object_dispose((const void *)(v31 - 256), 8);
  _Block_object_dispose((const void *)(v31 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_10002D350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10002D390(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v7;
  NSURL *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  id v18;
  NSString v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  id v36;
  NSString v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;

  v7 = objc_allocWithZone((Class)NSPersistentStoreDescription);
  URL._bridgeToObjectiveC()(v8);
  v10 = v9;
  v11 = objc_msgSend(v7, "initWithURL:", v9);

  objc_msgSend(v11, "setShouldAddStoreAsynchronously:", a4 & 1);
  v12 = a2 + 64;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(a2 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_27;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v22 >= v16)
      goto LABEL_30;
    v23 = *(_QWORD *)(v12 + 8 * v22);
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_30;
      v23 = *(_QWORD *)(v12 + 8 * v17);
      if (!v23)
      {
        v17 = v22 + 2;
        if (v22 + 2 >= v16)
          goto LABEL_30;
        v23 = *(_QWORD *)(v12 + 8 * v17);
        if (!v23)
        {
          v17 = v22 + 3;
          if (v22 + 3 >= v16)
            goto LABEL_30;
          v23 = *(_QWORD *)(v12 + 8 * v17);
          if (!v23)
          {
            v17 = v22 + 4;
            if (v22 + 4 >= v16)
              goto LABEL_30;
            v23 = *(_QWORD *)(v12 + 8 * v17);
            if (!v23)
              break;
          }
        }
      }
    }
LABEL_26:
    v15 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_27:
    v25 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v21);
    v27 = *v25;
    v26 = v25[1];
    v18 = *(id *)(a2 + 16);
    swift_bridgeObjectRetain(v26);
    if (v18)
    {
      swift_bridgeObjectRetain(v26);
      v28 = sub_10002E5D8(v27, v26);
      if ((v29 & 1) != 0)
        v18 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v28);
      else
        v18 = 0;
      swift_bridgeObjectRelease(v26);
    }
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    objc_msgSend(v11, "setOption:forKey:", v18, v19);

  }
  v24 = v22 + 5;
  if (v24 >= v16)
  {
LABEL_30:
    swift_release(a2);
    v30 = a3 + 64;
    v31 = 1 << *(_BYTE *)(a3 + 32);
    v32 = -1;
    if (v31 < 64)
      v32 = ~(-1 << v31);
    v33 = v32 & *(_QWORD *)(a3 + 64);
    v34 = (unint64_t)(v31 + 63) >> 6;
    swift_bridgeObjectRetain(a3);
    v35 = 0;
    while (1)
    {
      if (v33)
      {
        v38 = __clz(__rbit64(v33));
        v33 &= v33 - 1;
        v39 = v38 | (v35 << 6);
      }
      else
      {
        v40 = v35 + 1;
        if (__OFADD__(v35, 1))
          goto LABEL_61;
        if (v40 >= v34)
        {
LABEL_59:
          swift_release(a3);
          return;
        }
        v41 = *(_QWORD *)(v30 + 8 * v40);
        ++v35;
        if (!v41)
        {
          v35 = v40 + 1;
          if (v40 + 1 >= v34)
            goto LABEL_59;
          v41 = *(_QWORD *)(v30 + 8 * v35);
          if (!v41)
          {
            v35 = v40 + 2;
            if (v40 + 2 >= v34)
              goto LABEL_59;
            v41 = *(_QWORD *)(v30 + 8 * v35);
            if (!v41)
            {
              v35 = v40 + 3;
              if (v40 + 3 >= v34)
                goto LABEL_59;
              v41 = *(_QWORD *)(v30 + 8 * v35);
              if (!v41)
              {
                v35 = v40 + 4;
                if (v40 + 4 >= v34)
                  goto LABEL_59;
                v41 = *(_QWORD *)(v30 + 8 * v35);
                if (!v41)
                {
                  v42 = v40 + 5;
                  if (v42 >= v34)
                    goto LABEL_59;
                  v41 = *(_QWORD *)(v30 + 8 * v42);
                  if (!v41)
                  {
                    while (1)
                    {
                      v35 = v42 + 1;
                      if (__OFADD__(v42, 1))
                        goto LABEL_63;
                      if (v35 >= v34)
                        goto LABEL_59;
                      v41 = *(_QWORD *)(v30 + 8 * v35);
                      ++v42;
                      if (v41)
                        goto LABEL_55;
                    }
                  }
                  v35 = v42;
                }
              }
            }
          }
        }
LABEL_55:
        v33 = (v41 - 1) & v41;
        v39 = __clz(__rbit64(v41)) + (v35 << 6);
      }
      v43 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v39);
      v45 = *v43;
      v44 = v43[1];
      v36 = *(id *)(a3 + 16);
      swift_bridgeObjectRetain(v44);
      if (v36)
      {
        swift_bridgeObjectRetain(v44);
        v46 = sub_10002E5D8(v45, v44);
        if ((v47 & 1) != 0)
          v36 = *(id *)(*(_QWORD *)(a3 + 56) + 8 * v46);
        else
          v36 = 0;
        swift_bridgeObjectRelease(v44);
      }
      v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v44);
      objc_msgSend(v11, "setValue:forPragmaNamed:", v36, v37);

    }
  }
  v23 = *(_QWORD *)(v12 + 8 * v24);
  if (v23)
  {
    v17 = v24;
    goto LABEL_26;
  }
  while (1)
  {
    v17 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v17 >= v16)
      goto LABEL_30;
    v23 = *(_QWORD *)(v12 + 8 * v17);
    ++v24;
    if (v23)
      goto LABEL_26;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
}

char *sub_10002D78C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  id v22;
  id v23;
  id v24;
  NSString v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  Class isa;
  Class v35;
  id v36;
  unint64_t v37;
  id v38;
  Class v39;
  Class v40;
  id v41;
  id v42;
  uint64_t v43;
  char *v44;
  void *v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  void *v79;
  char *v80;
  id v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  char *v86;
  id v87;
  id v88;
  id v89;
  id v90;
  void *v91;
  char *v92;
  id v93;
  id v94;
  id v95;
  id v96;
  void *v97;
  char *v98;
  id v99;
  id v100;
  id v101;
  id v102;
  void *v103;
  char *v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  uint64_t v112;
  id v113;
  id v114;
  char *v115;
  __int128 v116;
  char v117;
  _QWORD v118[3];
  char v119;
  char v120;
  objc_super v121;

  v1 = sub_10003F544((uint64_t *)&unk_100560D80);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v112 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = &v0[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter__playbackSpeedMenu];
  v118[0] = 0;
  v6 = v0;
  v7 = sub_10003F544(&qword_100560D70);
  Published.init(initialValue:)(v118, v7);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v4, v1);
  v8 = OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator;
  v9 = kPodcastsPlayerID;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastsPlayerID);
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTApplicationBundleIdentifier);
  v15 = v14;
  v16 = objc_allocWithZone((Class)type metadata accessor for PlayerPathCoordinator(0));
  *(_QWORD *)&v6[v8] = PlayerPathCoordinator.init(playerID:bundleID:)(v10, v12, v13, v15);
  v17 = OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController;
  *(_QWORD *)&v6[v17] = objc_msgSend(objc_allocWithZone((Class)MPRequestResponseController), "init");
  v18 = &v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerID];
  *(_QWORD *)v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  *((_QWORD *)v18 + 1) = v19;
  v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_isTargetPlaying] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_jumpForwardsAmount] = 0x403E000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_jumpBackwardsAmount] = 0x402E000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_bindings] = _swiftEmptyArrayStorage;
  v20 = type metadata accessor for ExplicitContentPresenter(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  *(_QWORD *)&v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_explicitContentPresenter] = ExplicitContentPresenter.init()();

  v21 = (objc_class *)type metadata accessor for PodcastsPlayerAdapter(0);
  v121.receiver = v6;
  v121.super_class = v21;
  v22 = objc_msgSendSuper2(&v121, "init");
  v23 = objc_allocWithZone((Class)MPCPlayerRequest);
  v115 = (char *)v22;
  v24 = objc_msgSend(v23, "init");
  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v24, "setLabel:", v25);

  v26 = sub_10003F544((uint64_t *)&unk_100560F50);
  inited = swift_initStackObject(v26, &v120);
  v116 = xmmword_1003CA200;
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipGenericPodcastEpisode);
  *(_QWORD *)(inited + 40) = v28;
  v29 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v30 = swift_allocObject(v29, 48, 7);
  *(_OWORD *)(v30 + 16) = v116;
  *(_QWORD *)(v30 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPodcastEpisodeTitle);
  *(_QWORD *)(v30 + 40) = v31;
  v32 = sub_10002E4A4((uint64_t)_swiftEmptyArrayStorage);
  v33 = objc_allocWithZone((Class)MPPropertySet);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  sub_100005EC8(0, (unint64_t *)&unk_100560F60, MPPropertySet_ptr);
  v35 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v32);
  v36 = objc_msgSend(v33, "initWithProperties:relationships:", isa, v35);

  *(_QWORD *)(inited + 48) = v36;
  v37 = sub_10002E4A4(inited);
  v38 = objc_allocWithZone((Class)MPPropertySet);
  v39 = Array._bridgeToObjectiveC()().super.isa;
  v40 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v37);
  v41 = objc_msgSend(v38, "initWithProperties:relationships:", v39, v40);

  v42 = v41;
  objc_msgSend(v24, "setPlayingItemProperties:", v42);
  objc_msgSend(v24, "setQueueItemProperties:", v42);
  v113 = v42;

  v43 = OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController;
  v44 = v115;
  v45 = *(void **)&v115[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController];
  v114 = v24;
  objc_msgSend(v45, "setRequest:", v24);
  objc_msgSend(v45, "setDelegate:", v44);
  v46 = objc_msgSend(v45, "request");
  v47 = OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator;
  v48 = objc_msgSend(*(id *)&v44[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator], "playbackPlayerPath");
  objc_msgSend(v46, "setPlayerPath:", v48);

  objc_msgSend(*(id *)&v44[v43], "beginAutomaticResponseLoading");
  v49 = sub_10003F544((uint64_t *)&unk_100560F68);
  v50 = swift_initStackObject(v49, &v119);
  *(_OWORD *)(v50 + 16) = v116;
  v51 = *(void **)&v44[v47];
  *(_QWORD *)(v50 + 32) = v51;
  *(_QWORD *)(v50 + 40) = 0xD000000000000012;
  *(_QWORD *)(v50 + 48) = 0x800000010043AF20;
  *(_BYTE *)(v50 + 56) = 0;
  v52 = swift_allocObject(&unk_1004BE948, 24, 7);
  swift_unknownObjectWeakInit(v52 + 16, v44);
  v53 = type metadata accessor for DeprecatedBinding(0);
  swift_allocObject(v53, 40, 7);
  v54 = v51;
  v55 = v44;
  v56 = DeprecatedBinding.init(_:configurationBlock:)(v50, sub_10004ABF0, v52);
  v57 = &v55[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_bindings];
  v58 = swift_beginAccess(&v55[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_bindings], v118, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
  v60 = *(_QWORD *)((*(_QWORD *)v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v59 = *(_QWORD *)((*(_QWORD *)v57 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v60 >= v59 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
  v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v56);
  specialized Array._endMutation()(v61);
  swift_endAccess(v118);
  v62 = swift_initStackObject(v49, &v117);
  *(_OWORD *)(v62 + 16) = v116;
  v63 = v55;
  v64 = *(void **)&v55[v47];
  *(_QWORD *)(v62 + 32) = v64;
  *(_QWORD *)(v62 + 40) = 0xD000000000000012;
  *(_QWORD *)(v62 + 48) = 0x800000010043AE20;
  *(_BYTE *)(v62 + 56) = 0;
  v65 = swift_allocObject(&unk_1004BE948, 24, 7);
  swift_unknownObjectWeakInit(v65 + 16, v63);
  swift_allocObject(v53, 40, 7);
  v66 = v64;
  v67 = DeprecatedBinding.init(_:configurationBlock:)(v62, sub_10004ABF8, v65);
  v68 = swift_beginAccess(v57, v118, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v68);
  v70 = *(_QWORD *)((*(_QWORD *)v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v69 = *(_QWORD *)((*(_QWORD *)v57 & 0xFFFFFFFFFFFFFF8) + 0x18);
  v71 = v63;
  if (v70 >= v69 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
  v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v70, v67);
  specialized Array._endMutation()(v72);
  v73 = swift_endAccess(v118);
  if ((static Podcasts.isBlueMoonEnabled()(v73) & 1) != 0)
  {
    v74 = v114;
    v75 = v113;
  }
  else
  {
    v76 = (void *)objc_opt_self(NSNotificationCenter);
    v77 = objc_msgSend(v76, "defaultCenter");
    v78 = (void *)IMAVPlayerNotification_PeriodicUpdate;
    v79 = (void *)objc_opt_self(MTPlayerController);
    v80 = v63;
    v81 = v78;
    v82 = objc_msgSend(v79, "defaultInstance");
    v83 = objc_msgSend(v82, "player");

    objc_msgSend(v77, "addObserver:selector:name:object:", v80, "periodicUpdate", v81, v83);
    v84 = objc_msgSend(v76, "defaultCenter");
    v85 = (void *)IMAVPlayerNotification_AutoStopModeDidChange;
    v86 = v80;
    v87 = v85;
    v88 = objc_msgSend(v79, "defaultInstance");
    v89 = objc_msgSend(v88, "player");

    objc_msgSend(v84, "addObserver:selector:name:object:", v86, "autoStopModeDidChange", v87, v89);
    v90 = objc_msgSend(v76, "defaultCenter");
    v91 = (void *)IMAVPlayerNotification_CurrentChapterDidChange;
    v92 = v86;
    v93 = v91;
    v94 = objc_msgSend(v79, "defaultInstance");
    v95 = objc_msgSend(v94, "player");

    objc_msgSend(v90, "addObserver:selector:name:object:", v92, "currentChapterDidChange", v93, v95);
    v96 = objc_msgSend(v76, "defaultCenter");
    v97 = (void *)IMAVPlayerNotification_LoadedDurationDidChange;
    v98 = v92;
    v99 = v97;
    v100 = objc_msgSend(v79, "defaultInstance");
    v101 = objc_msgSend(v100, "player");

    objc_msgSend(v96, "addObserver:selector:name:object:", v98, "loadedDurationDidChange", v99, v101);
    v102 = objc_msgSend(v76, "defaultCenter");
    v103 = (void *)IMAVPlayerNotification_PlayerVolumeDidChange;
    v104 = v98;
    v105 = v103;
    v106 = objc_msgSend(v79, "defaultInstance");
    v107 = objc_msgSend(v106, "player");

    objc_msgSend(v102, "addObserver:selector:name:object:", v104, "playerVolumeDidChange", v105, v107);
    v75 = objc_msgSend(v76, "defaultCenter");
    v108 = v104;
    v109 = objc_msgSend(v79, "defaultInstance");
    v110 = objc_msgSend(v109, "player");

    v74 = objc_msgSend(v110, "player");
    v71 = v115;
    objc_msgSend(v75, "addObserver:selector:name:object:", v108, "playerRateDidChange", AVPlayerRateDidChangeNotification, v74);

  }
  return v71;
}

unint64_t sub_10002E390(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_10002E5D8(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002E4A4(uint64_t a1)
{
  return sub_10002E390(a1, &qword_100552A68);
}

unint64_t sub_10002E4B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(&qword_100552A60);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v15 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(*((_QWORD *)&v15 + 1));
    result = sub_10002E5D8(v7, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002E5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100029E70(a1, a2, v5);
}

uint64_t sub_10002E63C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10002E654()
{
  return sub_10002E63C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003DCBC);
}

uint64_t sub_10002E660()
{
  return sub_10002E63C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003CAFC);
}

uint64_t type metadata accessor for ChannelListObserver()
{
  return objc_opt_self(_TtC8Podcasts19ChannelListObserver);
}

uint64_t sub_10002E6AC()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  Class isa;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  Class v42;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t result;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD aBlock[5];
  uint64_t v57;
  objc_super v58;

  v1 = v0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_currentValue] = _swiftEmptyArrayStorage;
  v2 = &v0[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_didChange];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = OBJC_IVAR____TtC8Podcasts19ChannelListObserver_mangedContextProvider;
  v55 = OBJC_IVAR____TtC8Podcasts19ChannelListObserver_mangedContextProvider;
  v4 = (void *)objc_opt_self(MTDB);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "sharedInstance");
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTChannelEntityName);
  v7 = v6;
  v8 = objc_allocWithZone((Class)NSFetchRequest);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v10 = objc_msgSend(v8, "initWithEntityName:", v9);

  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v11 = sub_10003F544(&qword_1005559A0);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1003CA220;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(kChannelAvailableShowCount);
  v15 = v14;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v16 = sub_10003E198();
  *(_QWORD *)(v12 + 64) = v16;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(kChannelSubscriptionActive);
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v16;
  *(_QWORD *)(v12 + 72) = v17;
  *(_QWORD *)(v12 + 80) = v18;
  v19 = (void *)NSPredicate.init(format:_:)(0xD000000000000012, 0x8000000100430750, v12);
  objc_msgSend(v10, "setPredicate:", v19);

  v20 = sub_10003F544((uint64_t *)&unk_100553780);
  v21 = swift_allocObject(v20, 40, 7);
  *(_OWORD *)(v21 + 16) = xmmword_1003CA250;
  v22 = kChannelName;
  static String._unconditionallyBridgeFromObjectiveC(_:)(kChannelName);
  v24 = v23;
  v25 = objc_allocWithZone((Class)NSSortDescriptor);
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  v27 = objc_msgSend(v25, "initWithKey:ascending:", v26, 1);

  *(_QWORD *)(v21 + 32) = v27;
  aBlock[0] = v21;
  specialized Array._endMutation()(v28);
  sub_100005EC8(0, (unint64_t *)&qword_1005547A0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  objc_msgSend(v10, "setSortDescriptors:", isa);

  v30 = objc_msgSend(*(id *)&v1[v55], "privateQueueContext");
  v31 = objc_msgSend(objc_allocWithZone((Class)MTFetchedResultsController), "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", v10, v30, 0, 0);
  v32 = OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver] = v31;
  v33 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v34 = swift_allocObject(v33, 128, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1003CAEF0;
  *(_QWORD *)(v34 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  *(_QWORD *)(v34 + 40) = v35;
  *(_QWORD *)(v34 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(kChannelStoreId);
  *(_QWORD *)(v34 + 56) = v36;
  *(_QWORD *)(v34 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kChannelPodcastUuids);
  *(_QWORD *)(v34 + 72) = v37;
  *(_QWORD *)(v34 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kChannelArtworkURL);
  *(_QWORD *)(v34 + 88) = v38;
  *(_QWORD *)(v34 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(kChannelLogoImageURL);
  *(_QWORD *)(v34 + 104) = v39;
  *(_QWORD *)(v34 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)(kChannelUberBackgroundImageURL);
  *(_QWORD *)(v34 + 120) = v40;
  v41 = *(id *)&v5[v32];
  v42 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v34);
  objc_msgSend(v41, "setPropertyKeys:", v42);

  v58.receiver = v5;
  v58.super_class = (Class)type metadata accessor for ChannelListObserver();
  v43 = (char *)objc_msgSendSuper2(&v58, "init");
  v44 = OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver;
  v45 = *(void **)&v43[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver];
  v46 = v43;
  objc_msgSend(v45, "setDelegate:", v46);
  v47 = swift_allocObject(&unk_1004B0A88, 24, 7);
  swift_unknownObjectWeakInit(v47 + 16, v46);
  v48 = swift_allocObject(&unk_1004B0AB0, 32, 7);
  *(_QWORD *)(v48 + 16) = sub_10002A278;
  *(_QWORD *)(v48 + 24) = v47;
  aBlock[4] = sub_1001529CC;
  v57 = v48;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004B0AC8;
  v49 = _Block_copy(aBlock);
  v50 = v57;
  swift_retain(v48);
  swift_release(v50);
  objc_msgSend(v30, "performBlockAndWait:", v49);
  _Block_release(v49);
  LOBYTE(v49) = swift_isEscapingClosureAtFileLocation(v48, "", 108, 48, 32, 1);
  result = swift_release(v48);
  if ((v49 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_sync_enter(v46);
    v52 = *(id *)&v43[v44];
    v53 = sub_100176BB4(v52);

    v54 = *(_QWORD *)&v46[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_currentValue];
    *(_QWORD *)&v46[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_currentValue] = v53;
    swift_bridgeObjectRelease(v54);
    objc_sync_exit(v46);
    swift_release(v47);

    return (uint64_t)v46;
  }
  return result;
}

uint64_t sub_10002EC18()
{
  uint64_t v0;

  return sub_10002EC24(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_10002EC24(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    v6 = (void (*)(void))a2();
    v8 = v7;
    v6();

    return swift_release(v8);
  }
  return result;
}

void sub_10002EC94()
{
  uint64_t v0;

  sub_10002EC9C(v0);
}

void sub_10002EC9C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  NSString v4;
  void *Strong;
  _BYTE v6[24];

  v1 = a1 + 16;
  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v3 = *(_QWORD *)(PlayerNotification_PlayerPathDidChange.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  swift_beginAccess(v1, v6, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  objc_msgSend(v2, "postNotificationName:object:", v4, Strong);

}

uint64_t sub_10002ED8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((objc_msgSend(v0, "isCancelled") & 1) != 0
    || (v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock,
        objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock), "lock"),
        v2 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__error),
        objc_msgSend(*(id *)((char *)v0 + v1), "unlock"),
        v2))
  {
    v3 = 37;
  }
  else
  {
    sub_10002EE20();
    v3 = 36;
  }
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 8 * v3))();
}

void sub_10002EE20()
{
  char *v0;
  NSString v1;
  uint64_t v2;
  id v3;

  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "willChangeValueForKey:", v1);

  v2 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8Podcasts13BaseOperation_lock], "lock");
  if (v0[OBJC_IVAR____TtC8Podcasts13BaseOperation__state] != 2)
    v0[OBJC_IVAR____TtC8Podcasts13BaseOperation__state] = 1;
  objc_msgSend(*(id *)&v0[v2], "unlock");
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "didChangeValueForKey:", v3);

}

BOOL sub_10002F680()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock), "lock");
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__state);
  objc_msgSend(*(id *)(v0 + v1), "unlock");
  return v2 == 2;
}

void LibraryDataProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.LibraryDataProvider", 28, "init()", 6, 0);
  __break(1u);
}

id sub_10002F77C(void *a1, void *a2, uint64_t a3, char *a4)
{
  objc_class *v8;
  id v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  objc_super v32;
  uint64_t v33;

  *(_QWORD *)&a4[OBJC_IVAR____TtC8Podcasts38EpisodeDownloadStateControllerProvider_downloadManager] = a1;
  v8 = (objc_class *)type metadata accessor for DownloadingEpisodeStateDataSource();
  v9 = objc_allocWithZone(v8);
  v10 = a4;
  v11 = a1;
  v12 = sub_100018218(a2);
  v13 = sub_10003F544((uint64_t *)&unk_100553780);
  v14 = swift_allocObject(v13, 56, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1003CA260;
  v33 = (uint64_t)v12;
  v15 = sub_100026844(&qword_100554088, (uint64_t (*)(uint64_t))type metadata accessor for DownloadingEpisodeStateDataSource, (uint64_t)&unk_1003D0A04);
  *(_QWORD *)(v14 + 32) = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()(v8, v15);
  v16 = sub_10003F544(&qword_100554090);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = swift_retain(a3);
  v33 = OnDemandLibraryEpisodeStateDataSource.init(episodeStateRepository:)(v17);
  v18 = sub_10002F9C8(&qword_100554098, &qword_100554090, (uint64_t)&protocol conformance descriptor for OnDemandLibraryEpisodeStateDataSource<A>);
  v19 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()(v16, v18);
  swift_release(v33);
  *(_QWORD *)(v14 + 40) = v19;
  v20 = sub_10003F544(&qword_1005540A0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = DefaultEpisodeStateDataSource.init()(v21);
  v23 = sub_10002F9C8(&qword_1005540A8, &qword_1005540A0, (uint64_t)&protocol conformance descriptor for DefaultEpisodeStateDataSource<A>);
  v24 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()(v20, v23);
  v25 = swift_release(v22);
  *(_QWORD *)(v14 + 48) = v24;
  v33 = v14;
  v26 = specialized Array._endMutation()(v25);
  v27 = v14;
  v28 = defaultEpisodeDownloadTransitionRules.getter(v26);
  v29 = sub_10003F544((uint64_t *)&unk_100555130);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  *(_QWORD *)&v10[OBJC_IVAR____TtC8Podcasts38EpisodeDownloadStateControllerProvider_stateController] = EpisodeStateController.init(dataSources:transitionRules:)(v27, v28);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8Podcasts38EpisodeDownloadStateControllerProvider_downloadsNotifier] = a2;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8Podcasts38EpisodeDownloadStateControllerProvider_downloadingStateDataSource] = v12;
  v30 = a2;

  v32.receiver = v10;
  v32.super_class = (Class)type metadata accessor for EpisodeDownloadStateControllerProvider();
  return objc_msgSendSuper2(&v32, "init");
}

uint64_t sub_10002F9C8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10003CA40(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_100030528()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock), "lock");
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__state);
  objc_msgSend(*(id *)(v0 + v1), "unlock");
  return v2 == 1;
}

unint64_t sub_100030584()
{
  unint64_t result;

  result = qword_1005592F0;
  if (!qword_1005592F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1005592F0);
  }
  return result;
}

uint64_t sub_1000305F8()
{
  char *v0;
  uint64_t v1;
  int v2;
  objc_super v4;

  v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8Podcasts13BaseOperation_lock], "lock");
  v2 = v0[OBJC_IVAR____TtC8Podcasts13BaseOperation__state];
  objc_msgSend(*(id *)&v0[v1], "unlock");
  if (v2)
    return 0;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for BaseOperation();
  if ((objc_msgSendSuper2(&v4, "isReady") & 1) != 0)
    return 1;
  else
    return (uint64_t)objc_msgSend(v0, "isCancelled");
}

uint64_t type metadata accessor for BaseOperation()
{
  return objc_opt_self(_TtC8Podcasts13BaseOperation);
}

void sub_1000306B4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  __int16 v10;
  uint8_t buf[2];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = objc_msgSend(WeakRetained, "isStopping");
    if (!(_DWORD)v4)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      goto LABEL_10;
    }
    v5 = _MTLogCategoryDefault(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v7 = "Attempting to execute work after the processor has stopped.";
      v8 = (uint8_t *)&v10;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    }
  }
  else
  {
    v9 = _MTLogCategoryDefault(0);
    v6 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v7 = "Attempting to execute work after the processor has been deallocated.";
      v8 = buf;
      goto LABEL_7;
    }
  }

LABEL_10:
}

void sub_1000308E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100030954(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "resultsChangedWithDeletedIds:insertIds:updatedIds:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100030994(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  id WeakRetained;
  NSObject *v8;
  dispatch_source_t v9;
  dispatch_time_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  MTDefaultsChangeNotifier *v15;
  void *v16;
  MTDefaultsChangeNotifier *v17;
  void *v18;
  void *v19;
  void **v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *, void *, void *);
  void *v23;
  id v24;
  _QWORD handler[4];
  id v26;

  v2 = *(id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "createQueryObserver"));
  objc_msgSend(v2, "setQueryObserver:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "queryObserver"));
  objc_msgSend(v4, "startObserving");

  objc_msgSend(v2, "updatePredicateDuration");
  v6 = v5;
  if (fabs(v5) > 2.22044605e-16)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workQueue"));
    v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v8);
    objc_msgSend(v2, "setTimer:", v9);

    v10 = dispatch_walltime(0, 0);
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "timer"));
    dispatch_source_set_timer(v11, v10, (unint64_t)(v6 * 1000000000.0), 0);

    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "timer"));
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000BFC64;
    handler[3] = &unk_1004A7570;
    objc_copyWeak(&v26, (id *)(a1 + 40));
    dispatch_source_set_event_handler(v12, handler);

    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "timer"));
    dispatch_resume(v13);

    objc_destroyWeak(&v26);
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultPropertiesThatAffectPredicate"));
  if (objc_msgSend(v14, "count"))
  {
    v15 = [MTDefaultsChangeNotifier alloc];
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSettingsUserDefaults](NSUserDefaults, "_applePodcastsFoundationSettingsUserDefaults"));
    v17 = -[MTDefaultsChangeNotifier initWithProperties:defaults:](v15, "initWithProperties:defaults:", v14, v16);
    objc_msgSend(v2, "setDefaultsNotifier:", v17);

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultsNotifier"));
    v20 = _NSConcreteStackBlock;
    v21 = 3221225472;
    v22 = sub_1000BFC90;
    v23 = &unk_1004A7598;
    objc_copyWeak(&v24, (id *)(a1 + 40));
    objc_msgSend(v18, "addCallback:", &v20);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultsNotifier", v20, v21, v22, v23));
    objc_msgSend(v19, "start");

    objc_destroyWeak(&v24);
  }

}

void sub_100030C2C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100030D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100030FFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetNowPlayingInfo.init(from:)(a1, a2);
}

uint64_t WidgetNowPlayingInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v39 = a2;
  v3 = sub_10003F544(&qword_1005522F0);
  v4 = __chkstk_darwin(v3);
  v40 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v37 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v37 - v9;
  v41 = sub_10003F544(&qword_10055A7D0);
  v11 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  v43 = a1;
  sub_10003A834(a1, v18);
  v19 = sub_1000314D8();
  v42 = v13;
  v20 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetNowPlayingInfo.CodingKeys, &type metadata for WidgetNowPlayingInfo.CodingKeys, v19, v18, v17);
  if (v20)
    return sub_10003D380(v43);
  v21 = v10;
  v51 = 0;
  v22 = v41;
  *(_QWORD *)v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v41);
  *((_QWORD *)v16 + 1) = v23;
  v50 = 1;
  v16[16] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v22) & 1;
  v24 = type metadata accessor for Date(0);
  v44 = v16;
  v25 = v24;
  v49 = 2;
  v26 = (uint64_t)v21;
  v27 = sub_100026844(&qword_100557ED0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, &v49, v22, v25, v27);
  sub_100031454(v26, (uint64_t)&v44[v14[6]]);
  v48 = 3;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, &v48, v22, v25, v27);
  v37 = v25;
  v38 = v27;
  v28 = (uint64_t)v44;
  sub_100031454((uint64_t)v8, (uint64_t)&v44[v14[7]]);
  v47 = 4;
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v22);
  v30 = v28 + v14[8];
  *(_QWORD *)v30 = v29;
  *(_BYTE *)(v30 + 8) = v31 & 1;
  v46 = 5;
  v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v22);
  v33 = v28 + v14[9];
  *(_QWORD *)v33 = v32;
  *(_BYTE *)(v33 + 8) = v34 & 1;
  v45 = 6;
  v35 = (uint64_t)v40;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, &v45, v22, v37, v38);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v22);
  sub_100031454(v35, v28 + v14[10]);
  sub_10003151C(v28, v39);
  sub_10003D380(v43);
  return sub_10003149C(v28);
}

uint64_t sub_100031454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_1005522F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003149C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetNowPlayingInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000314D8()
{
  unint64_t result;

  result = qword_10055A7C8;
  if (!qword_10055A7C8)
  {
    result = swift_getWitnessTable(&unk_1003CEC84, &type metadata for WidgetNowPlayingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10055A7C8);
  }
  return result;
}

uint64_t sub_10003151C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetNowPlayingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_10003F544(&qword_1005522F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v12)(a2 + v15, 1, v10))
  {
    v18 = sub_10003F544(&qword_1005522F0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v16, v17, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  }
  v19 = a3[8];
  v20 = a3[9];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  v25 = a3[10];
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  if (((unsigned int (*)(const void *, uint64_t, uint64_t))v12)(v27, 1, v10))
  {
    v28 = sub_10003F544(&qword_1005522F0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v26, v27, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v26, 0, 1, v10);
  }
  return a1;
}

void sub_100031758(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  id v48;
  double v49;
  double v50;
  void *v51;
  id v52;
  double v53;
  double v54;
  double v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  uint64_t *v60;
  float v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  double v71;
  uint64_t v72;
  double v73;
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(uint64_t *, uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  id v93;
  void *v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  double v100;
  double v101;
  int *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  char v143[24];
  char v144[24];
  char v145[24];
  char v146[16];
  double v147;
  char v148[8];
  double v149;
  double v150;

  v130 = a1;
  v2 = type metadata accessor for WidgetNowPlayingInfo(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_1005624A8);
  v6 = __chkstk_darwin(v5);
  v123 = (uint64_t)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v135 = (char *)&v121 - v9;
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v121 - v10);
  v134 = type metadata accessor for Date(0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v13 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_1005522F0);
  v15 = __chkstk_darwin(v14);
  v132 = (uint64_t)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v131 = (uint64_t)&v121 - v18;
  v19 = __chkstk_darwin(v17);
  v122 = (char *)&v121 - v20;
  v21 = __chkstk_darwin(v19);
  v139 = (uint64_t)&v121 - v22;
  v23 = __chkstk_darwin(v21);
  v124 = (char *)&v121 - v24;
  v25 = __chkstk_darwin(v23);
  v140 = (uint64_t)&v121 - v26;
  __chkstk_darwin(v25);
  v142 = (uint64_t)&v121 - v27;
  v127 = type metadata accessor for Logger(0);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v29 = (char *)&v121 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = OBJC_IVAR____TtC8Podcasts13WidgetManager_playerController;
  v31 = *(void **)(v1 + OBJC_IVAR____TtC8Podcasts13WidgetManager_playerController);
  if (!v31)
  {
    __break(1u);
    goto LABEL_58;
  }
  v32 = objc_msgSend(v31, "player");
  v33 = objc_msgSend(v32, "currentItem");

  v125 = v13;
  if (!v33)
    goto LABEL_9;
  v34 = objc_opt_self(MTPlayerItem);
  v35 = (void *)swift_dynamicCastObjCClass(v33, v34);
  if (!v35)
  {

LABEL_9:
    v128 = 0;
    v136 = 0;
    v36 = 0;
    goto LABEL_10;
  }
  v36 = objc_msgSend(v35, "episode");

  if (v36 && (v37 = objc_msgSend(v36, "uuid")) != 0)
  {
    v38 = v37;
    v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v136 = v39;

  }
  else
  {
    v128 = 0;
    v136 = 0;
  }
LABEL_10:
  v40 = *(void **)(v1 + v30);
  if (!v40)
  {
LABEL_58:
    swift_bridgeObjectRelease(v136);
    __break(1u);
    goto LABEL_59;
  }
  v41 = objc_msgSend(v40, "player");
  v137 = objc_msgSend(v41, "state");

  v42 = *(void **)(v1 + v30);
  if (!v42)
  {
LABEL_59:
    swift_bridgeObjectRelease(v136);
    __break(1u);
LABEL_60:
    swift_bridgeObjectRelease(v136);
    __break(1u);
    goto LABEL_61;
  }
  v43 = objc_msgSend(v42, "player");
  objc_msgSend(v43, "duration");
  v45 = v44;

  if (v45 > 0.0)
    v46 = v45;
  else
    v46 = 0.0;
  v150 = v46;
  v47 = *(void **)(v1 + v30);
  if (!v47)
    goto LABEL_60;
  v48 = objc_msgSend(v47, "player");
  objc_msgSend(v48, "duration");
  v50 = v49;

  v51 = *(void **)(v1 + v30);
  if (!v51)
  {
LABEL_61:
    swift_bridgeObjectRelease(v136);
    __break(1u);
LABEL_62:
    swift_bridgeObjectRelease(v136);
    __break(1u);
    return;
  }
  v52 = objc_msgSend(v51, "player");
  objc_msgSend(v52, "currentTime");
  v54 = v53;

  if (v50 - v54 > 0.0)
    v55 = v50 - v54;
  else
    v55 = 0.0;
  v149 = v55;
  v56 = *(void **)(v1 + v30);
  if (!v56)
    goto LABEL_62;
  v57 = objc_msgSend(v56, "player");
  v58 = objc_msgSend(v57, "playbackSpeed");

  v60 = (uint64_t *)v135;
  if (v58)
  {
    v59 = objc_msgSend((id)objc_opt_self(IMAVPlayer), "rateForPlaybackSpeed:", v58);
    v62 = 1.0 / v61;
    v55 = v55 * v62;
    v46 = v46 * v62;
    v149 = v55;
    v150 = v46;
  }
  v63 = v140;
  v141 = v36;
  v138 = v1;
  v129 = (int *)v2;
  if ((v130 & 1) != 0)
  {
    v64 = static Logger.widget.getter(v59);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.default.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      v67 = v137 == (id)1;
      v68 = swift_slowAlloc(38, -1);
      *(_DWORD *)v68 = 67109888;
      LODWORD(v147) = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, (char *)&v147 + 4, v68 + 4, v68 + 8);
      *(_WORD *)(v68 + 8) = 2048;
      v147 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148, v68 + 10, v68 + 18);
      *(_WORD *)(v68 + 18) = 2048;
      v147 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148, v68 + 20, v68 + 28);
      *(_WORD *)(v68 + 28) = 2048;
      v147 = *(double *)&v58;
      v60 = (uint64_t *)v135;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148, v68 + 30, v68 + 38);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "playerDidChange update: isPlaying %{BOOL}d, duration %f, timeRemaining %f, speed %lu", (uint8_t *)v68, 0x26u);
      v69 = v68;
      v63 = v140;
      swift_slowDealloc(v69, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v126 + 8))(v29, v127);
  }
  v70 = v137;
  if (v137 == (id)1)
  {
    swift_beginAccess(&v149, v144, 0, 0);
    v71 = v149;
    if (v149 > 0.0)
    {
      v72 = swift_beginAccess(&v150, v143, 0, 0);
      v73 = v150;
      if (v71 <= v150)
      {
        v81 = v125;
        v82 = Date.init()(v72);
        v83 = (uint64_t)v124;
        Date.addingTimeInterval(_:)(v82, v71 - v73);
        v84 = v133;
        v85 = *(void (**)(char *, uint64_t))(v133 + 8);
        v86 = v134;
        v85(v81, v134);
        v87 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56);
        v87(v83, 0, 1, v86);
        v88 = sub_10003DC78(v83, v142, &qword_1005522F0);
        v89 = Date.init()(v88);
        Date.addingTimeInterval(_:)(v89, v149);
        v85(v81, v86);
        v70 = v137;
        v87(v83, 0, 1, v86);
        sub_10003DC78(v83, v140, &qword_1005522F0);
        v76 = v139;
        v87(v139, 1, 1, v86);
        v63 = v140;
        v77 = v136;
        goto LABEL_35;
      }
    }
  }
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v133 + 56);
  v75 = v134;
  v74(v142, 1, 1, v134);
  v74(v63, 1, 1, v75);
  v76 = v139;
  v74(v139, 1, 1, v75);
  v77 = v136;
  if (v70 == (id)1)
  {
LABEL_35:
    v90 = sub_10003F544(&qword_1005624A0);
    *v11 = v128;
    v11[1] = v77;
    Date.init()(v90);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v11, 0, 1, v90);
    v91 = v138 + OBJC_IVAR____TtC8Podcasts13WidgetManager_lastPlayedInfo;
    swift_beginAccess(v138 + OBJC_IVAR____TtC8Podcasts13WidgetManager_lastPlayedInfo, &v147, 33, 0);
    sub_1002EB358((uint64_t)v11, v91);
    swift_endAccess(&v147);
    sub_100007A28(v76, &qword_1005522F0);
    sub_100007A64(v63, v76, &qword_1005522F0);
    goto LABEL_36;
  }
  if (!v136)
    goto LABEL_36;
  v78 = v138 + OBJC_IVAR____TtC8Podcasts13WidgetManager_lastPlayedInfo;
  swift_beginAccess(v138 + OBJC_IVAR____TtC8Podcasts13WidgetManager_lastPlayedInfo, v145, 0, 0);
  sub_100007A64(v78, (uint64_t)v60, &qword_1005624A8);
  v79 = sub_10003F544(&qword_1005624A0);
  v80 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 48);
  if (v80(v60, 1, v79))
  {
    sub_100007A28((uint64_t)v60, &qword_1005624A8);
    swift_bridgeObjectRelease(v136);
    goto LABEL_36;
  }
  v110 = *v60;
  v109 = v60[1];
  swift_bridgeObjectRetain(v109);
  sub_100007A28((uint64_t)v60, &qword_1005624A8);
  if (!v109)
  {
    swift_bridgeObjectRelease(v136);
    v63 = v140;
    goto LABEL_36;
  }
  v111 = v136;
  if (v110 == v128 && v109 == v136)
  {
    swift_bridgeObjectRelease(v109);
    swift_bridgeObjectRelease(v111);
    v63 = v140;
  }
  else
  {
    v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v109, v128, v136, 0);
    swift_bridgeObjectRelease(v109);
    swift_bridgeObjectRelease(v111);
    v63 = v140;
    if ((v112 & 1) == 0)
      goto LABEL_36;
  }
  v113 = v141;
  if (v141 && !objc_msgSend(v141, "playState"))
  {
    v92 = v113;
    v70 = v137;
    goto LABEL_37;
  }
  v114 = v123;
  sub_100007A64(v78, v123, &qword_1005624A8);
  if (v80((uint64_t *)v114, 1, v79))
  {
    sub_100007A28(v76, &qword_1005522F0);
    sub_100007A28(v114, &qword_1005624A8);
    v115 = 1;
    v116 = v134;
    v117 = (uint64_t)v122;
  }
  else
  {
    v118 = v133;
    v119 = v125;
    v116 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v125, v114 + *(int *)(v79 + 48), v134);
    v120 = sub_100007A28(v114, &qword_1005624A8);
    v117 = (uint64_t)v122;
    Date.addingTimeInterval(_:)(v120, 480.0);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v116);
    sub_100007A28(v76, &qword_1005522F0);
    v115 = 0;
  }
  v74(v117, v115, 1, v116);
  sub_10003DC78(v117, v76, &qword_1005522F0);
  v70 = v137;
LABEL_36:
  v92 = v141;
  if (!v141)
  {
LABEL_39:
    v137 = 0;
    v136 = 0;
    goto LABEL_40;
  }
LABEL_37:
  v93 = objc_msgSend(v92, "uuid");
  v141 = v92;
  if (!v93)
    goto LABEL_39;
  v94 = v93;
  v137 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
  v136 = v95;

LABEL_40:
  v96 = v70 == (id)1;
  v97 = v131;
  sub_100007A64(v142, v131, &qword_1005522F0);
  v98 = v132;
  sub_100007A64(v63, v132, &qword_1005522F0);
  swift_beginAccess(&v149, &v147, 0, 0);
  v99 = v149 <= 0.0;
  if (v149 > 0.0)
    v100 = v149;
  else
    v100 = 0.0;
  swift_beginAccess(&v150, v146, 0, 0);
  v101 = v150;
  v102 = v129;
  v103 = v4;
  v104 = (uint64_t)&v4[v129[10]];
  v105 = v139;
  sub_100007A64(v139, v104, &qword_1005522F0);
  v106 = v136;
  *(_QWORD *)v103 = v137;
  *((_QWORD *)v103 + 1) = v106;
  v103[16] = v96;
  sub_10003DC78(v97, (uint64_t)&v103[v102[6]], &qword_1005522F0);
  sub_10003DC78(v98, (uint64_t)&v103[v102[7]], &qword_1005522F0);
  v107 = &v103[v102[8]];
  *(double *)v107 = v100;
  v107[8] = v99;
  v108 = &v103[v102[9]];
  *(double *)v108 = v101;
  v108[8] = 0;
  sub_100032488((uint64_t *)v103);
  sub_100007A28(v105, &qword_1005522F0);
  sub_100007A28(v140, &qword_1005522F0);
  sub_100007A28(v142, &qword_1005522F0);

}

uint64_t sub_100032488(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_10055A8A8);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetNowPlayingInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032694((uint64_t)v12);
  if (!_s8Podcasts20WidgetNowPlayingInfoV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v12, a1))
  {
    sub_100032B18((uint64_t)a1);
    sub_10003151C((uint64_t)v12, (uint64_t)v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    v13 = sub_100032F10((uint64_t)v8);
    v14 = sub_100007A28((uint64_t)v8, &qword_10055A8A8);
    if ((v13 & 1) != 0)
    {
      v15 = static Logger.widget.getter(v14);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "nowPlayingInfo changed enough to trigger refresh", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      WidgetNowPlayingInfo.logInfo()();
      sub_10004A698();
    }
  }
  sub_10003F970((uint64_t)a1, type metadata accessor for WidgetNowPlayingInfo);
  return sub_10003F970((uint64_t)v12, type metadata accessor for WidgetNowPlayingInfo);
}

uint64_t sub_100032694@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "dataForKey:", v4);

  if (v5)
  {
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v9 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v10 = sub_100032AC8(v6, v8);
    v11 = JSONDecoder.init()(v10);
    v12 = type metadata accessor for WidgetNowPlayingInfo(0);
    v13 = sub_100026844(&qword_10055A8B8, type metadata accessor for WidgetNowPlayingInfo, (uint64_t)&protocol conformance descriptor for WidgetNowPlayingInfo);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v12, v6, v8, v12, v13);
    swift_release(v11);
    sub_100032A84(v6, v8);
    return sub_100032A84(v6, v8);
  }
  else
  {
    v15 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
    v16 = a1 + v15[6];
    v17 = type metadata accessor for Date(0);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
    v18(v16, 1, 1, v17);
    v18(a1 + v15[7], 1, 1, v17);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(a1 + v15[10], 1, 1, v17);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v19 = a1 + v15[8];
    *(_QWORD *)v19 = 0;
    *(_BYTE *)(v19 + 8) = 1;
    v20 = a1 + v15[9];
    *(_QWORD *)v20 = 0;
    *(_BYTE *)(v20 + 8) = 1;
  }
  return result;
}

uint64_t sub_100032A84(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100032AC8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t storeEnumTagSinglePayload for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100213960);
}

uint64_t sub_100032B18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  Class isa;
  NSString v13;

  v2 = type metadata accessor for WidgetNowPlayingInfo(0);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for Logger(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = JSONEncoder.init()();
  v7 = sub_100026844(&qword_10055A8B0, type metadata accessor for WidgetNowPlayingInfo, (uint64_t)&protocol conformance descriptor for WidgetNowPlayingInfo);
  v8 = dispatch thunk of JSONEncoder.encode<A>(_:)(a1, v2, v7);
  v10 = v9;
  swift_release(v6);
  v11 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  isa = Data._bridgeToObjectiveC()().super.isa;
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setValue:forKey:", isa, v13);

  return sub_100032A84(v8, v10);
}

uint64_t sub_100032F10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  int v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint8_t *v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  char *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  char v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;

  v2 = sub_10003F544(&qword_10055A8A0);
  v3 = __chkstk_darwin(v2);
  v116 = (uint64_t)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v115 = (uint64_t)&v114 - v6;
  v7 = __chkstk_darwin(v5);
  v122 = (uint64_t)&v114 - v8;
  v9 = __chkstk_darwin(v7);
  v119 = (char *)&v114 - v10;
  v11 = __chkstk_darwin(v9);
  v118 = (uint64_t)&v114 - v12;
  v13 = __chkstk_darwin(v11);
  v120 = (uint64_t)&v114 - v14;
  v15 = __chkstk_darwin(v13);
  v124 = (uint64_t)&v114 - v16;
  __chkstk_darwin(v15);
  v121 = (char *)&v114 - v17;
  v18 = type metadata accessor for Logger(0);
  v126 = *(_QWORD *)(v18 - 8);
  v127 = v18;
  v19 = __chkstk_darwin(v18);
  v114 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v117 = (char *)&v114 - v22;
  v23 = __chkstk_darwin(v21);
  v125 = (char *)&v114 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v114 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v114 - v28;
  v30 = sub_10003F544(&qword_10055A8A8);
  __chkstk_darwin(v30);
  v32 = (char *)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = __chkstk_darwin(v33);
  v123 = (uint64_t)&v114 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v39 = (char *)&v114 - v38;
  v40 = __chkstk_darwin(v37);
  v42 = (uint64_t *)((char *)&v114 - v41);
  __chkstk_darwin(v40);
  v44 = (char *)&v114 - v43;
  sub_100007A64(a1, (uint64_t)v32, &qword_10055A8A8);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33) == 1)
  {
    sub_100007A28((uint64_t)v32, &qword_10055A8A8);
    return 1;
  }
  v45 = sub_100033BA4((uint64_t)v32, (uint64_t)v44);
  v46 = v128;
  v47 = *(_QWORD *)(v128 + 8);
  v48 = *((_QWORD *)v44 + 1);
  if (v47)
  {
    if (v48)
    {
      if ((v45 = *(_QWORD *)v128, *(_QWORD *)v128 == *(_QWORD *)v44) && v47 == v48
        || (v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v47, *(_QWORD *)v44, v48, 0), (v45 & 1) != 0))
      {
LABEL_8:
        if (*(unsigned __int8 *)(v46 + 16) != v44[16])
        {
          static Logger.widget.getter(v45);
          v49 = sub_10003151C(v46, (uint64_t)v39);
          v50 = Logger.logObject.getter(v49);
          v51 = static os_log_type_t.default.getter(v50);
          if (os_log_type_enabled(v50, v51))
          {
            v52 = (uint8_t *)swift_slowAlloc(8, -1);
            *(_DWORD *)v52 = 67109120;
            v53 = v39[16];
            sub_10003149C((uint64_t)v39);
            LODWORD(v130) = v53;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 4, v52 + 4, v52 + 8);
            _os_log_impl((void *)&_mh_execute_header, v50, v51, "WidgetNowPlayingInfo: isPlaying has changed %{BOOL}d", v52, 8u);
            swift_slowDealloc(v52, -1, -1);
          }
          else
          {
            sub_10003149C((uint64_t)v39);
          }

          (*(void (**)(char *, uint64_t))(v126 + 8))(v27, v127);
          goto LABEL_24;
        }
        if (*(_BYTE *)(v46 + 16)
          && (sub_100033BE8(0xD000000000000017, 0x80000001004358D0, v46 + v33[7], (uint64_t)&v44[v33[7]]) & 1) != 0)
        {
          goto LABEL_24;
        }
        v63 = sub_100033BE8(0xD00000000000001ALL, 0x80000001004358F0, v46 + v33[10], (uint64_t)&v44[v33[10]]);
        if ((v63 & 1) != 0)
          goto LABEL_24;
        v64 = v33[8];
        v65 = (uint64_t *)(v46 + v64);
        v66 = *(_BYTE *)(v46 + v64 + 8);
        v67 = &v44[v64];
        if ((v66 & 1) != 0)
        {
          if (v67[8])
          {
LABEL_21:
            sub_10003149C((uint64_t)v44);
            return 0;
          }
LABEL_30:
          static Logger.widget.getter(v63);
          v70 = v46;
          v71 = v123;
          v72 = sub_10003151C(v70, v123);
          v73 = Logger.logObject.getter(v72);
          v74 = static os_log_type_t.default.getter(v73);
          if (os_log_type_enabled(v73, v74))
          {
            v75 = (uint8_t *)swift_slowAlloc(12, -1);
            v76 = v75;
            *(_DWORD *)v75 = 134217984;
            v77 = v71 + v33[8];
            v78 = *(double *)v77;
            if (*(_BYTE *)(v77 + 8))
              v78 = 0.0;
            v130 = v78;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v75 + 4, v75 + 12);
            sub_10003149C(v71);
            _os_log_impl((void *)&_mh_execute_header, v73, v74, "WidgetNowPlayingInfo: timeRemaining has changed %f", v76, 0xCu);
            swift_slowDealloc(v76, -1, -1);

          }
          else
          {

            sub_10003149C(v71);
          }
          (*(void (**)(char *, uint64_t))(v126 + 8))(v125, v127);
          goto LABEL_24;
        }
        if ((v67[8] & 1) != 0)
          goto LABEL_30;
        v79 = *v65;
        v80 = *(char **)v67;
        v81 = (uint64_t)v121;
        PlayButtonTimeFormatHelper.init(timeLeft:duration:)(*v65, 0, *(_QWORD *)(v46 + v33[9]), *(unsigned __int8 *)(v46 + v33[9] + 8));
        v82 = &v44[v33[9]];
        v83 = *(_QWORD *)v82;
        v84 = v82[8];
        v85 = v124;
        v125 = v80;
        PlayButtonTimeFormatHelper.init(timeLeft:duration:)(v80, 0, v83, v84);
        v86 = v120;
        sub_100007A64(v81, v120, &qword_10055A8A0);
        v87 = type metadata accessor for PlayButtonTimeFormatHelper(0);
        v88 = *(_QWORD *)(v87 - 8);
        v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
        if (v89(v86, 1, v87) == 1)
        {
          sub_100007A28(v86, &qword_10055A8A0);
          v90 = 3;
        }
        else
        {
          v90 = PlayButtonTimeFormatHelper.formatStyle.getter();
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v87);
        }
        v91 = v118;
        v92 = (uint64_t)v119;
        sub_100007A64(v85, v118, &qword_10055A8A0);
        if (v89(v91, 1, v87) == 1)
        {
          sub_100007A28(v91, &qword_10055A8A0);
          if (v90 == 3)
          {
            LOBYTE(v93) = 3;
LABEL_43:
            v123 = v79;
            v94 = v93 == 3;
            goto LABEL_44;
          }
        }
        else
        {
          v93 = PlayButtonTimeFormatHelper.formatStyle.getter();
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v91, v87);
          if (v90 == 3)
            goto LABEL_43;
          if (v93 != 3)
          {
            v123 = v79;
            v94 = static PlayButtonTimeFormatHelper.FormatStyle.== infix(_:_:)(v90, v93);
LABEL_44:
            sub_100007A64(v81, v92, &qword_10055A8A0);
            v95 = v122;
            sub_100007A64(v124, v122, &qword_10055A8A0);
            if ((v94 & 1) != 0)
            {
              v96 = v115;
              sub_100007A64(v92, v115, &qword_10055A8A0);
              if (v89(v96, 1, v87) == 1)
              {
                sub_100007A28(v96, &qword_10055A8A0);
                v97 = 6;
              }
              else
              {
                v97 = PlayButtonTimeFormatHelper.widgetCountDownHelper.getter();
                (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v96, v87);
              }
              v104 = v116;
              sub_100007A64(v122, v116, &qword_10055A8A0);
              if (v89(v104, 1, v87) == 1)
              {
                sub_100007A28(v104, &qword_10055A8A0);
                v95 = v122;
                if (v97 == 6)
                {
                  LOBYTE(v105) = 6;
                  goto LABEL_59;
                }
              }
              else
              {
                v105 = PlayButtonTimeFormatHelper.widgetCountDownHelper.getter();
                (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v104, v87);
                if (v97 == 6)
                {
LABEL_59:
                  sub_100007A28(v122, &qword_10055A8A0);
                  v98 = sub_100007A28(v92, &qword_10055A8A0);
                  v106 = v123;
                  if (v105 == 6)
                    goto LABEL_60;
                  goto LABEL_50;
                }
                v95 = v122;
                if (v105 != 6)
                {
                  v113 = static PlayButtonTimeFormatHelper.WidgetCountDownSizeRestrictingHelper.== infix(_:_:)(v97, v105);
                  sub_100007A28(v95, &qword_10055A8A0);
                  v98 = sub_100007A28(v92, &qword_10055A8A0);
                  v106 = v123;
                  if ((v113 & 1) != 0)
                  {
LABEL_60:
                    if ((*(_BYTE *)(v128 + 16) & 1) != 0
                      || (v107 = vabdd_f64(*(double *)&v106, *(double *)&v125), v107 <= 1.0))
                    {
                      sub_100007A28(v124, &qword_10055A8A0);
                      sub_100007A28(v81, &qword_10055A8A0);
                      goto LABEL_21;
                    }
                    v108 = v114;
                    v109 = static Logger.widget.getter(v98);
                    v110 = Logger.logObject.getter(v109);
                    v111 = static os_log_type_t.default.getter(v110);
                    if (os_log_type_enabled(v110, v111))
                    {
                      v112 = swift_slowAlloc(22, -1);
                      *(_DWORD *)v112 = 134218240;
                      v130 = v107;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v112 + 4, v112 + 12);
                      *(_WORD *)(v112 + 12) = 2048;
                      v130 = *(double *)&v106;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v112 + 14, v112 + 22);
                      _os_log_impl((void *)&_mh_execute_header, v110, v111, "WidgetNowPlayingInfo: timeRemaining has changed by %f seconds %f", (uint8_t *)v112, 0x16u);
                      swift_slowDealloc(v112, -1, -1);
                    }

                    (*(void (**)(char *, uint64_t))(v126 + 8))(v108, v127);
                    goto LABEL_53;
                  }
LABEL_50:
                  v99 = v117;
                  v100 = static Logger.widget.getter(v98);
                  v101 = Logger.logObject.getter(v100);
                  v102 = static os_log_type_t.default.getter(v101);
                  if (os_log_type_enabled(v101, v102))
                  {
                    v103 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v103 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v101, v102, "WidgetNowPlayingInfo: format is changing", v103, 2u);
                    swift_slowDealloc(v103, -1, -1);
                  }

                  (*(void (**)(char *, uint64_t))(v126 + 8))(v99, v127);
LABEL_53:
                  sub_100007A28(v124, &qword_10055A8A0);
                  sub_100007A28(v81, &qword_10055A8A0);
                  goto LABEL_24;
                }
              }
            }
LABEL_49:
            sub_100007A28(v95, &qword_10055A8A0);
            v98 = sub_100007A28(v92, &qword_10055A8A0);
            goto LABEL_50;
          }
        }
        sub_100007A64(v81, v92, &qword_10055A8A0);
        v95 = v122;
        sub_100007A64(v124, v122, &qword_10055A8A0);
        goto LABEL_49;
      }
    }
  }
  else if (!v48)
  {
    goto LABEL_8;
  }
  static Logger.widget.getter(v45);
  v54 = sub_10003151C(v46, (uint64_t)v42);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  if (!os_log_type_enabled(v55, v56))
  {

    sub_10003149C((uint64_t)v42);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v29, v127);
LABEL_24:
    sub_10003149C((uint64_t)v44);
    return 1;
  }
  v57 = (uint64_t)v44;
  v58 = (uint8_t *)swift_slowAlloc(12, -1);
  v59 = swift_slowAlloc(32, -1);
  v130 = *(double *)&v59;
  *(_DWORD *)v58 = 136446210;
  v60 = v42[1];
  if (v60)
  {
    v61 = *v42;
    v62 = v42[1];
  }
  else
  {
    v62 = 0xE500000000000000;
    v61 = 0x3E6C696E3CLL;
  }
  swift_bridgeObjectRetain(v60);
  v129 = sub_10003D274(v61, v62, (uint64_t *)&v130);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v58 + 4, v58 + 12);
  swift_bridgeObjectRelease(v62);
  sub_10003149C((uint64_t)v42);
  _os_log_impl((void *)&_mh_execute_header, v55, v56, "WidgetNowPlayingInfo: currentEpisodeUUID has changed %{public}s", v58, 0xCu);
  v68 = 1;
  swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v59, -1, -1);
  swift_slowDealloc(v58, -1, -1);

  (*(void (**)(char *, uint64_t))(v126 + 8))(v29, v127);
  sub_10003149C(v57);
  return v68;
}

uint64_t getEnumTagSinglePayload for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002138D4);
}

uint64_t sub_100033BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetNowPlayingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033BE8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  double v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void (*v72)(char *, uint64_t);
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;

  v85 = (char *)a4;
  v82 = a2;
  v78 = a1;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v76 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v76 - v12;
  v77 = sub_10003F544(&qword_1005522F0);
  v14 = __chkstk_darwin(v77);
  v76 = (uint64_t)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v79 = (char *)&v76 - v16;
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  v83 = v17;
  v84 = v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v80 = (char *)&v76 - v22;
  v23 = sub_10003F544(&qword_100558EB8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (uint64_t)&v26[*(int *)(v24 + 48)];
  v28 = a3;
  sub_100007A64(a3, (uint64_t)v26, &qword_1005522F0);
  sub_100007A64((uint64_t)v85, v27, &qword_1005522F0);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v30 = v29(v26, 1, v5);
  v31 = v29((char *)v27, 1, v5);
  if (v30 == 1)
  {
    if (v31 != 1)
    {
      v32 = sub_100007A28(v27, &qword_1005522F0);
LABEL_6:
      v35 = v82;
      v37 = (uint64_t)v79;
      v36 = v80;
      static Logger.widget.getter(v32);
      sub_100007A64(v28, v37, &qword_1005522F0);
      v38 = swift_bridgeObjectRetain_n(v35, 2);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(22, -1);
        v42 = swift_slowAlloc(64, -1);
        v87 = v42;
        *(_DWORD *)v41 = 136446466;
        swift_bridgeObjectRetain(v35);
        v86 = sub_10003D274(v78, v35, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v41 + 4, v41 + 12);
        swift_bridgeObjectRelease_n(v35, 3);
        *(_WORD *)(v41 + 12) = 2082;
        v43 = v76;
        sub_100007A64(v37, v76, &qword_1005522F0);
        v44 = String.init<A>(describing:)(v43, v77);
        v46 = v45;
        v86 = sub_10003D274(v44, v45, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v41 + 14, v41 + 22);
        swift_bridgeObjectRelease(v46);
        sub_100007A28(v37, &qword_1005522F0);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "WidgetNowPlayingInfo: %{public}s has changed %{public}s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v35, 2);
        sub_100007A28(v37, &qword_1005522F0);
      }

      (*(void (**)(char *, uint64_t))(v84 + 8))(v36, v83);
      return 1;
    }
    return 0;
  }
  v33 = v5;
  v34 = v81;
  if (v31 == 1)
  {
    v32 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v26, v5);
    goto LABEL_6;
  }
  v47 = v21;
  v48 = v13;
  v49 = v6;
  v50 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v51 = v33;
  v50(v48, v26, v33);
  v50(v11, (char *)v27, v51);
  v53 = fabs(Date.distance(to:)(v11));
  if (v53 <= 1.0)
  {
    v74 = *(void (**)(char *, uint64_t))(v6 + 8);
    v74(v11, v51);
    v74(v48, v51);
    return 0;
  }
  v54 = v47;
  static Logger.widget.getter(v52);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v34, v48, v51);
  v55 = v82;
  v56 = swift_bridgeObjectRetain_n(v82, 2);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.default.getter(v57);
  v59 = v58;
  v60 = os_log_type_enabled(v57, v58);
  v61 = v83;
  if (v60)
  {
    v62 = swift_slowAlloc(32, -1);
    v85 = v11;
    LODWORD(v79) = v59;
    v63 = v62;
    v64 = swift_slowAlloc(64, -1);
    v65 = v34;
    v77 = v49;
    v66 = v64;
    v87 = v64;
    *(_DWORD *)v63 = 136446722;
    v67 = v61;
    swift_bridgeObjectRetain(v55);
    v86 = sub_10003D274(v78, v55, &v87);
    v80 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v63 + 4, v63 + 12);
    swift_bridgeObjectRelease_n(v55, 3);
    *(_WORD *)(v63 + 12) = 2048;
    v86 = *(_QWORD *)&v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v63 + 14, v63 + 22);
    *(_WORD *)(v63 + 22) = 2082;
    v68 = sub_100026844(qword_100560490, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v69 = dispatch thunk of CustomStringConvertible.description.getter(v51, v68);
    v71 = v70;
    v86 = sub_10003D274(v69, v70, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v63 + 24, v63 + 32);
    swift_bridgeObjectRelease(v71);
    v72 = *(void (**)(char *, uint64_t))(v77 + 8);
    v72(v65, v51);
    _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v79, "WidgetNowPlayingInfo: %{public}s has changed by %f seconds %{public}s", (uint8_t *)v63, 0x20u);
    swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v63, -1, -1);

    (*(void (**)(char *, uint64_t))(v84 + 8))(v54, v67);
    v72(v85, v51);
    v72(v80, v51);
  }
  else
  {

    v75 = *(void (**)(char *, uint64_t))(v49 + 8);
    v75(v34, v51);
    swift_bridgeObjectRelease_n(v55, 2);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v54, v61);
    v75(v11, v51);
    v75(v48, v51);
  }
  return 1;
}

void sub_1000342E4(id a1, UNNotificationSettings *a2)
{
  UNNotificationSettings *v2;
  _BOOL8 v3;
  void *v4;
  id v5;
  id v6;

  v2 = a2;
  v3 = -[UNNotificationSettings authorizationStatus](v2, "authorizationStatus") != UNAuthorizationStatusNotDetermined;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults"));
  objc_msgSend(v4, "setBool:forKey:", v3, kMTDidPromptForNotificationsPermissionsKey);

  v5 = -[UNNotificationSettings authorizationStatus](v2, "authorizationStatus");
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults"));
  objc_msgSend(v6, "setBool:forKey:", v5 == (id)2, kMTNotificationStatusIsAuthorizedKey);

}

void sub_100034C54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100034EF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100035188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1000357E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100035D9C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000362C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void FeedManager.updateFeed(forFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, char a6, char a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  NSURL *v18;
  char *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSURL *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  _QWORD aBlock[5];
  uint64_t v33;

  v31[0] = a3;
  v16 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v16);
  v18 = (NSURL *)((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (char *)((char *)v31 - (char *)v18);
  URL._bridgeToObjectiveC()(v18);
  v21 = v20;
  sub_100036A44(a2, (uint64_t)v19);
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1, v22) != 1)
  {
    URL._bridgeToObjectiveC()(v24);
    v25 = v26;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v22);
  }
  if (a5)
    a5 = String._bridgeToObjectiveC()();
  if (a10)
  {
    aBlock[4] = a10;
    v33 = a11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100153D50;
    aBlock[3] = &unk_1004BB558;
    v27 = _Block_copy(aBlock);
    v28 = v33;
    swift_retain(a11);
    swift_release(v28);
  }
  else
  {
    v27 = 0;
  }
  LOBYTE(v30) = 0;
  LOBYTE(v29) = a8 & 1;
  objc_msgSend((id)v31[1], "updateFeedForFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:isSubscribing:feedDownloadedHook:preProcessFeedHook:postProcessFeedHook:completion:", v21, v25, v31[0], a5, a6 & 1, a7 & 1, v29, a9, v30, 0, 0, 0, v27);
  _Block_release(v27);

}

uint64_t sub_100036A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100553DC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FeedManager.updateFeed(forFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:isSubscribing:feedDownloadedHook:preProcessFeedHook:postProcessFeedHook:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t updated;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  void *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD aBlock[5];
  uint64_t v82;

  v71 = a7;
  v72 = a8;
  v70 = a6;
  v64 = a5;
  v68 = a3;
  v69 = a4;
  v63 = a2;
  v62 = a1;
  v67 = a9;
  v66 = a10;
  v65 = a17;
  v61 = a18;
  v58 = a15;
  v76 = type metadata accessor for DispatchWorkItemFlags(0);
  v79 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v75 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v77 = *(_QWORD *)(v19 - 8);
  v78 = v19;
  __chkstk_darwin(v19);
  v74 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v21);
  v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v23;
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v27;
  updated = type metadata accessor for FeedUpdateRequest(0);
  v59 = *(_QWORD *)(updated - 8);
  v28 = *(_QWORD *)(v59 + 64);
  v29 = __chkstk_darwin(updated);
  v57 = (char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v56 = (char *)&v53 - v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v62, v24);
  sub_100036A44(v63, (uint64_t)v23);
  v31 = v64;
  swift_bridgeObjectRetain(v64);
  sub_10002CA20(a11, a12);
  sub_10002CA20(a13, a14);
  v32 = v58;
  sub_10002CA20(v58, a16);
  v33 = v65;
  v34 = v61;
  sub_10002CA20(v65, v61);
  v35 = v56;
  FeedUpdateRequest.init(feedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:isSubscribing:feedDownloadedHook:preProcessFeedHook:postProcessFeedHook:completion:)(v55, v54, v68, v69, v31, v70, v71, v72, v67, (_BYTE)v66, a11, a12, a13, a14, v32, a16, v33, v34);
  v36 = v73;
  v37 = v59;
  v38 = v57;
  v39 = updated;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v57, v35, updated);
  v40 = *(unsigned __int8 *)(v37 + 80);
  v41 = (v40 + 24) & ~v40;
  v42 = swift_allocObject(&unk_1004BB590, v41 + v28, v40 | 7);
  *(_QWORD *)(v42 + 16) = v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v42 + v41, v38, v39);
  aBlock[4] = sub_100294100;
  v82 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004BB5A8;
  v43 = _Block_copy(aBlock);
  v44 = v36;
  v45 = v74;
  static DispatchQoS.unspecified.getter(v44);
  v80 = _swiftEmptyArrayStorage;
  v46 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v47 = sub_10003F544((uint64_t *)&unk_10055B200);
  v48 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  v49 = v75;
  v50 = v47;
  v51 = v76;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v50, v48, v76, v46);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v45, v49, v43);
  _Block_release(v43);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v49, v51);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v45, v78);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v39);
  return swift_release(v82);
}

void sub_100037218(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD block[4];
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  int8x16_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  uint8_t buf[4];
  void *v43;
  _QWORD v44[5];
  _QWORD v45[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = objc_msgSend(*(id *)(a1 + 48), "isPodcastUpdatable:userInitiated:forced:", v2, *(unsigned __int8 *)(a1 + 128), *(unsigned __int8 *)(a1 + 129));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
    goto LABEL_14;
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bestFeedURLExcludingRedirectURL:", *(_BYTE *)(a1 + 130) == 0));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = objc_msgSend(v2, "storeCollectionId");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "feedURL"));
  if (v6)
    v7 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", v6);
  else
    v7 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40), v7);
  if (v6)

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
    goto LABEL_14;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsApplicationStateMonitor shared](PodcastsApplicationStateMonitor, "shared"));
    v9 = objc_msgSend(v8, "isActive");

    v31 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey userInitiated](MTFeedUpdateMetricsDataKey, "userInitiated"));
    v44[0] = v31;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 128)));
    v45[0] = v30;
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey foreground](MTFeedUpdateMetricsDataKey, "foreground"));
    v44[1] = v29;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9));
    v45[1] = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey backgroundFetch](MTFeedUpdateMetricsDataKey, "backgroundFetch"));
    v44[2] = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 131)));
    v45[2] = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey podcastStoreId](MTFeedUpdateMetricsDataKey, "podcastStoreId"));
    v44[3] = v13;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24)));
    v45[3] = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey source](MTFeedUpdateMetricsDataKey, "source"));
    v44[4] = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 120)));
    v45[4] = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v45, v44, 5));

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsAction podcastDataSource](MTFeedUpdateMetricsAction, "podcastDataSource"));
    +[IMMetrics recordEvent:dataSource:data:](IMMetrics, "recordEvent:dataSource:data:", v18, v2, v17);

    v20 = _MTLogCategoryFeedUpdate(v19);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v43 = v17;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Updating podcast %@", buf, 0xCu);
    }

    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
    {
LABEL_14:
      v28 = objc_claimAutoreleasedReturnValue(+[FeedUpdaterObjcError notYetUpdatable](_TtC18PodcastsFoundation20FeedUpdaterObjcError, "notYetUpdatable"));
LABEL_15:
      v27 = (void *)v28;
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
      goto LABEL_16;
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
  {
    v28 = objc_claimAutoreleasedReturnValue(+[FeedUpdaterObjcError feedURLIsEmpty](_TtC18PodcastsFoundation20FeedUpdaterObjcError, "feedURLIsEmpty"));
    goto LABEL_15;
  }
  v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "workQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000EE800;
  block[3] = &unk_1004AAC90;
  v23 = *(id *)(a1 + 72);
  v24 = *(_QWORD *)(a1 + 96);
  v34 = v23;
  v36 = v24;
  v37 = vextq_s8(*(int8x16_t *)(a1 + 104), *(int8x16_t *)(a1 + 104), 8uLL);
  v25 = *(id *)(a1 + 56);
  v39 = *(_BYTE *)(a1 + 128);
  v40 = *(_BYTE *)(a1 + 132);
  v41 = *(_BYTE *)(a1 + 131);
  v26 = *(_QWORD *)(a1 + 120);
  v33 = v25;
  v38 = v26;
  v35 = *(id *)(a1 + 80);
  dispatch_async(v22, block);

  v27 = v34;
LABEL_16:

}

void sub_100037748(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v3 = a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (*(_QWORD *)(a1 + 40))
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1000EE7E0;
    v4[3] = &unk_1004A7028;
    v6 = *(id *)(a1 + 40);
    v5 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

  }
}

void sub_1000377F0(uint64_t a1, char a2)
{
  _QWORD v3[4];
  id v4;
  char v5;

  if (*(_QWORD *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000476B8;
    v3[3] = &unk_1004A7EF8;
    v4 = *(id *)(a1 + 32);
    v5 = a2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

  }
}

void sub_100037D24(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x100037C18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100037DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, __n128);
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v4 = *(void (**)(uint64_t, __n128))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_100005EC8(0, &qword_10055B1E0, NSURLSessionTask_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  v7 = swift_retain(v3);
  v4(v6, v7);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100037E1C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000395AC(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(uint64_t (**)(uint64_t, _UNKNOWN **))(v1 + 64));
}

void sub_100037E4C(uint64_t a1)
{
  uint64_t v1;

  sub_100037E80(a1, *(_BYTE *)(v1 + 16), *(char **)(v1 + 24), *(void (**)(uint64_t, _QWORD *))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void (**)(char *, _UNKNOWN **))(v1 + 64), *(_QWORD *)(v1 + 72));
}

void sub_100037E80(uint64_t a1, char a2, char *a3, void (*a4)(uint64_t, _QWORD *), uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(char *, _UNKNOWN **), uint64_t a9)
{
  os_unfair_lock_s *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD aBlock[5];
  _QWORD *v34;

  if ((a2 & 1) != 0)
  {
    v15 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)&a3[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader]
                                         + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_sessionLock)
                             + 16);
    os_unfair_lock_lock(v15);
    sub_1000380DC((_QWORD *(*)(uint64_t *__return_ptr))sub_100038118, aBlock);
    os_unfair_lock_unlock(v15);
    v16 = (void *)aBlock[0];
    v17 = (_QWORD *)swift_allocObject(&unk_1004C4700, 80, 7);
    v17[2] = a4;
    v17[3] = a5;
    v17[4] = a1;
    v17[5] = a3;
    v17[6] = a6;
    v17[7] = a7;
    v17[8] = a8;
    v17[9] = a9;
    aBlock[4] = sub_100037E1C;
    v34 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100037DB0;
    aBlock[3] = &unk_1004C4718;
    v18 = _Block_copy(aBlock);
    v19 = v34;
    swift_retain(a5);
    swift_bridgeObjectRetain(a1);
    v20 = a3;
    sub_10002CA20(a6, a7);
    swift_retain(a9);
    swift_release(v19);
    objc_msgSend(v16, "getAllTasksWithCompletionHandler:", v18);
    _Block_release(v18);

  }
  else
  {
    v21 = sub_1000396E4(a1);
    a4(v21, _swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v21);
    v22 = (uint64_t *)&a3[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler];
    v23 = *(_QWORD *)&a3[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler];
    v24 = *(_QWORD *)&a3[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler + 8];
    *v22 = a6;
    v22[1] = a7;
    sub_10002CA20(a6, a7);
    sub_10002CA20(a6, a7);
    sub_10002CA30(v23, v24);
    v25 = *(_QWORD *)&a3[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader + 8];
    ObjectType = swift_getObjectType(*(_QWORD *)&a3[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader], v26);
    v28 = *v22;
    v29 = v22[1];
    v30 = *(_QWORD *)(v25 + 8);
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 16);
    sub_10002CA20(v28, v29);
    v31(v28, v29, ObjectType, v30);
    sub_10002CA30(a6, a7);
    a8(a3, &off_1004C45D8);
  }
}

_QWORD *sub_1000380DC@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

id sub_100038118@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100038130(*(char **)(v1 + 16), a1);
}

id sub_100038130@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  id v5;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  char *v12;
  id v13;
  void *v14;

  v3 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader__session;
  v4 = *(void **)&a1[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader__session];
  if (v4)
  {
    v5 = *(id *)&a1[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader__session];
  }
  else
  {
    v7 = (char *)sub_10003A834(&a1[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(_QWORD *)&a1[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config + 24]);
    sub_100038220(1, *v7);
    v9 = v8;
    v10 = sub_100038534();
    v11 = (void *)objc_opt_self(AVAssetDownloadURLSession);
    v12 = a1;
    v13 = objc_msgSend(v11, "sessionWithConfiguration:assetDownloadDelegate:delegateQueue:", v9, v12, v10);

    v14 = *(void **)&a1[v3];
    *(_QWORD *)&a1[v3] = v13;
    v5 = v13;

    v4 = 0;
  }
  *a2 = v5;
  return v4;
}

void sub_100038220(uint64_t a1, char a2)
{
  __asm { BR              X12 }
}

uint64_t sub_100038278(char a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  uint64_t v5;

  if ((a1 & 1) != 0)
    v2 = 1936484398;
  else
    v2 = 0x7261646E6174732ELL;
  if ((a1 & 1) != 0)
    v3 = (void *)0xE400000000000000;
  else
    v3 = (void *)0xE900000000000064;
  swift_bridgeObjectRetain(0x800000010042DE50);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(0x800000010042DE50);
  v5 = swift_bridgeObjectRelease(v3);
  return ((uint64_t (*)(uint64_t))((char *)&loc_100038320 + dword_10013D994[v1]))(v5);
}

id sub_100038330()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  id v4;

  v1 = (void *)objc_opt_self(NSURLSessionConfiguration);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v0);
  v3 = objc_msgSend(v1, "backgroundSessionConfigurationWithIdentifier:", v2);

  v4 = v3;
  objc_msgSend(v4, "setHTTPCookieAcceptPolicy:", 1);
  objc_msgSend(v4, "setHTTPShouldSetCookies:", 0);

  return v4;
}

id sub_100038534()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___sessionDelegateQueue;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___sessionDelegateQueue);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___sessionDelegateQueue);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1000385A4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  _BYTE v12[40];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_10000A520((uint64_t)a1, a5);
  sub_10000A520((uint64_t)a2, a5 + 40);
  sub_10000A520((uint64_t)a3, a5 + 80);
  sub_10000A520((uint64_t)a4, a5 + 120);
  sub_10000A520((uint64_t)a1, (uint64_t)v12);
  sub_10000A520((uint64_t)a2, (uint64_t)&v13);
  sub_10000A520((uint64_t)a3, (uint64_t)&v14);
  sub_10000A520((uint64_t)a4, (uint64_t)&v15);
  v10 = sub_10003F544(&qword_100552F08);
  swift_arrayDestroy(v12, 4, v10);
  sub_10003D380(a4);
  sub_10003D380(a3);
  sub_10003D380(a2);
  return sub_10003D380(a1);
}

_OWORD *sub_100038690(_OWORD *a1, _OWORD *a2)
{
  initializeWithCopy for DownloaderConfiguration(a2, a1);
  return a2;
}

_OWORD *initializeWithCopy for DownloaderConfiguration(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  return a1;
}

uint64_t sub_100038768(char a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE v52[12];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD aBlock[3];
  void *v64;
  void (*v65)();
  uint64_t v66;
  _QWORD v67[3];
  ValueMetadata *v68;
  _UNKNOWN **v69;
  _QWORD v70[3];
  ValueMetadata *v71;
  _UNKNOWN **v72;

  v57 = a8;
  v56 = a7;
  v55 = a6;
  v54 = a3;
  v53 = a2;
  v59 = type metadata accessor for DispatchWorkItemFlags(0);
  v62 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v58 = &v52[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v12 - 8);
  v61 = v12;
  __chkstk_darwin(v12);
  v14 = &v52[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for DispatchQoS.QoSClass(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v52[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v71 = &type metadata for PodcastsDownloader;
  v72 = &off_1004ADF88;
  LOBYTE(v70[0]) = a1;
  sub_10000A520((uint64_t)v70, (uint64_t)aBlock);
  v19 = sub_100038DEC((uint64_t)aBlock, (uint64_t)v64);
  __chkstk_darwin(v19);
  v21 = &v52[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(char *))(v22 + 16))(v21);
  v23 = *v21;
  v68 = &type metadata for PodcastsDownloader;
  v69 = &off_1004ADF88;
  LOBYTE(v67[0]) = v23;
  v24 = (char *)objc_allocWithZone((Class)type metadata accessor for AssetsDownloader());
  v25 = sub_100038DEC((uint64_t)v67, (uint64_t)v68);
  __chkstk_darwin(v25);
  v27 = &v52[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(char *))(v28 + 16))(v27);
  v29 = (char *)sub_100038C0C(*v27, v24);
  sub_10003D380(v67);
  sub_10003D380(aBlock);
  v30 = (char *)sub_10003A834(v70, (uint64_t)v71);
  sub_100038220(0, *v30);
  v32 = v31;
  v33 = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:delegate:delegateQueue:", v31, v29, 0);

  v34 = *(void **)&v29[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_urlSession];
  *(_QWORD *)&v29[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_urlSession] = v33;
  v35 = v33;

  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchQoS.QoSClass.default(_:), v15);
  v36 = (void *)static OS_dispatch_queue.global(qos:)(v18);
  (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v15);
  v37 = swift_allocObject(&unk_1004C41E8, 88, 7);
  *(_QWORD *)(v37 + 16) = v35;
  *(_BYTE *)(v37 + 24) = v53;
  v38 = v54;
  *(_QWORD *)(v37 + 32) = v29;
  *(_QWORD *)(v37 + 40) = v38;
  *(_QWORD *)(v37 + 48) = a4;
  *(_QWORD *)(v37 + 56) = a5;
  v39 = v55;
  v40 = v56;
  *(_QWORD *)(v37 + 64) = v55;
  *(_QWORD *)(v37 + 72) = v40;
  v41 = v57;
  *(_QWORD *)(v37 + 80) = v57;
  v65 = sub_100027B24;
  v66 = v37;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  v64 = &unk_1004C4200;
  v42 = _Block_copy(aBlock);
  v43 = v35;
  v44 = v29;
  swift_retain(a4);
  sub_10002CA20(a5, v39);
  swift_retain(v41);
  static DispatchQoS.unspecified.getter(v45);
  v67[0] = _swiftEmptyArrayStorage;
  v46 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v47 = sub_10003F544((uint64_t *)&unk_10055B200);
  v48 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
  v50 = v58;
  v49 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)(v67, v47, v48, v59, v46);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v50, v42);
  _Block_release(v42);

  (*(void (**)(_BYTE *, uint64_t))(v62 + 8))(v50, v49);
  (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v14, v61);
  swift_release(v66);
  return sub_10003D380(v70);
}

uint64_t type metadata accessor for AssetsDownloader()
{
  return objc_opt_self(_TtC8Podcasts16AssetsDownloader);
}

id sub_100038C0C(char a1, char *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char **v17;
  objc_class *v18;
  id v19;
  uint64_t v21;
  objc_super v22;
  _QWORD v23[3];
  ValueMetadata *v24;
  _UNKNOWN **v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v27[3] = &type metadata for PodcastsDownloader;
  v27[4] = &off_1004ADF88;
  LOBYTE(v27[0]) = a1;
  *(_QWORD *)&a2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_urlSession] = 0;
  v3 = &a2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_backgroundCompletionHandler];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &a2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  sub_10000A520((uint64_t)v27, (uint64_t)&a2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config]);
  sub_10000A520((uint64_t)v27, (uint64_t)v26);
  v5 = sub_100038DEC((uint64_t)v26, v26[3]);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = *v7;
  v24 = &type metadata for PodcastsDownloader;
  v25 = &off_1004ADF88;
  LOBYTE(v23[0]) = v9;
  v10 = (char *)objc_allocWithZone((Class)type metadata accessor for FairPlayAssetsDownloader());
  v11 = sub_100038DEC((uint64_t)v23, (uint64_t)v24);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_BYTE *))(v14 + 16))(v13);
  LOBYTE(v7) = *v13;
  v15 = a2;
  v16 = sub_100038E34((char)v7, v10);
  sub_10003D380(v23);
  sub_10003D380(v26);
  v17 = (char **)&v15[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader];
  *v17 = v16;
  v17[1] = (char *)&off_1004B69C8;

  v18 = (objc_class *)type metadata accessor for AssetsDownloader();
  v22.receiver = v15;
  v22.super_class = v18;
  v19 = objc_msgSendSuper2(&v22, "init");
  sub_10003D380(v27);
  return v19;
}

_BYTE *initializeBufferWithCopyOfBuffer for SessionConfigFlavor(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_100038DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t type metadata accessor for FairPlayAssetsDownloader()
{
  return objc_opt_self(_TtC8Podcasts24FairPlayAssetsDownloader);
}

char *sub_100038E34(char a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  id v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  id v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  objc_class *ObjectType;
  objc_super v44;
  _QWORD *v45;
  _QWORD v46[5];

  ObjectType = (objc_class *)swift_getObjectType(a2, a2);
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = &type metadata for PodcastsDownloader;
  v46[4] = &off_1004ADF88;
  LOBYTE(v46[0]) = a1;
  v13 = &a2[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &a2[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_backgroundCompletionHandler];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_urlProtocolDelegate;
  v16 = objc_allocWithZone((Class)type metadata accessor for UIStoreResponseDelegate(0));
  v17 = a2;
  *(_QWORD *)&a2[v15] = objc_msgSend(v16, "init");
  v18 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_fairPlayDownloadsObserver;
  v19 = type metadata accessor for FairPlayDownloadsObserver();
  swift_allocObject(v19, 48, 7);
  *(_QWORD *)&v17[v18] = sub_100039234();
  v20 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_sessionLock;
  v21 = sub_10003F544(&qword_100564EE0);
  v22 = swift_allocObject(v21, 20, 7);
  *(_DWORD *)(v22 + 16) = 0;
  *(_QWORD *)&v17[v20] = v22;
  v23 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_taskToKeyAdamIDMap;
  v24 = sub_10003F544(&qword_100564EE8);
  v25 = swift_allocObject(v24, 28, 7);
  *(_DWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 16) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v17[v23] = v25;
  v26 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_taskToKeyLoaderMap;
  v27 = sub_10003F544(&qword_100564EF0);
  v28 = swift_allocObject(v27, 28, 7);
  *(_DWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 16) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v17[v26] = v28;
  v29 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_internalQueue;
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  static DispatchQoS.userInteractive.getter();
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v31 = sub_10003F544(&qword_100555A00);
  v32 = sub_10003AEC0((unint64_t *)&qword_1005521C0, &qword_100555A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v7, v30);
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v42);
  *(_QWORD *)&v17[v29] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002BLL, 0x800000010043E9C0, v12, v9, v6, 0);
  *(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___sessionDelegateQueue] = 0;
  v33 = &v17[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___logPrefix];
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader__session] = 0;
  sub_10000A520((uint64_t)v46, (uint64_t)&v17[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config]);
  type metadata accessor for FairPlayKeyLoader(0);
  v34 = (void *)FairPlayKeyLoader.__allocating_init()();
  v35 = *(id *)&v17[v29];
  v36 = FairPlayKeyLoading.receive(on:)();

  *(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_fairPlayKeyLoader] = v36;
  v44.receiver = v17;
  v44.super_class = ObjectType;
  v37 = (char *)objc_msgSendSuper2(&v44, "init");
  sub_10003D380(v46);
  v38 = *(_QWORD *)&v37[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_fairPlayDownloadsObserver];
  *(_QWORD *)(v38 + 24) = &off_1004B6968;
  swift_unknownObjectWeakAssign(v38 + 16, v37);
  return v37;
}

uint64_t type metadata accessor for FairPlayDownloadsObserver()
{
  return objc_opt_self(_TtC8Podcasts25FairPlayDownloadsObserver);
}

_QWORD *sub_100039234()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0;
  v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[3] = 0;
  swift_unknownObjectWeakInit(v1 + 2, 0);
  v1[4] = sub_100039410((uint64_t)_swiftEmptyArrayStorage);
  v11 = sub_10002C5E0();
  static DispatchQoS.unspecified.getter(v11);
  v17 = _swiftEmptyArrayStorage;
  v12 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_10003F544(&qword_100555A00);
  v14 = sub_10003AEC0((unint64_t *)&qword_1005521C0, &qword_100555A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v5, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v16);
  v1[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002CLL, 0x8000000100437AE0, v10, v7, v4, 0);
  return v1;
}

unint64_t sub_100039410(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_10003F544(&qword_100552C20);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_10003F544(&qword_100552C28);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100007A64(v13, (uint64_t)v5, &qword_100552C20);
    v15 = *v5;
    result = sub_1001CD240(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v8[6] + 8 * result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
    result = sub_10013BE30(v10, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1000395AC(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, _UNKNOWN **))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = sub_1000396E4(a4);
  v14 = sub_1000396E4(a1);
  a2(v13, v14);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  v15 = (uint64_t *)(a5 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler);
  v16 = *(_QWORD *)(a5 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler);
  v17 = *(_QWORD *)(a5 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler + 8);
  *v15 = a6;
  v15[1] = a7;
  sub_10002CA20(a6, a7);
  sub_10002CA20(a6, a7);
  sub_10002CA30(v16, v17);
  v18 = *(_QWORD *)(a5 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(a5 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader), v19);
  v21 = *v15;
  v22 = v15[1];
  v23 = *(_QWORD *)(v18 + 8);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 16);
  sub_10002CA20(v21, v22);
  v24(v21, v22, ObjectType, v23);
  sub_10002CA30(a6, a7);
  return a8(a5, &off_1004C45D8);
}

uint64_t sub_1000396E4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;
  _QWORD *v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v18 = _swiftEmptyArrayStorage;
  result = sub_10017B454(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v18 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10017B454(v7 > 1, v8 + 1, 1);
          v3 = v18;
        }
        ++v5;
        v16 = sub_100005EC8(0, &qword_10055B1E0, NSURLSessionTask_ptr);
        v17 = &off_1004B3EA8;
        *(_QWORD *)&v15 = v6;
        v3[2] = v8 + 1;
        sub_10002099C(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v18 = v3;
        v12 = v3[2];
        v11 = v3[3];
        v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_10017B454(v11 > 1, v12 + 1, 1);
          v3 = v18;
        }
        v16 = sub_100005EC8(0, &qword_10055B1E0, NSURLSessionTask_ptr);
        v17 = &off_1004B3EA8;
        *(_QWORD *)&v15 = v13;
        v3[2] = v12 + 1;
        sub_10002099C(&v15, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000398D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = (uint64_t *)(v6 + *a5);
  v8 = *v7;
  v9 = v7[1];
  *v7 = a1;
  v7[1] = a2;
  return a6(v8, v9);
}

uint64_t sub_1000398F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000398D4(a1, a2, a3, a4, &OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler, sub_10002CA30);
}

uint64_t sub_100039904(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100039910(a1, a2, *(_QWORD *)(v2 + 16), (_QWORD *)(v2 + 24));
}

uint64_t sub_100039910(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  uint64_t result;
  void *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  _BYTE v23[24];

  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v23, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = (unsigned __int8 *)sub_10003A834(a4, a4[3]);
    v11 = sub_10013D9A4(0, *v10);
    v13 = v12;
    sub_100039A04(v11, v12, v14 & 1, a1);

    swift_bridgeObjectRelease(v13);
  }
  swift_beginAccess(v7, &v22, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v7);
  if (result)
  {
    v16 = (void *)result;
    v17 = (unsigned __int8 *)sub_10003A834(a4, a4[3]);
    v18 = sub_10013D9A4(1, *v17);
    v20 = v19;
    sub_100039A04(v18, v19, v21 & 1, a2);

    return swift_bridgeObjectRelease(v20);
  }
  return result;
}

void sub_100039A04(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  char *v4;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  objc_class *v21;
  char *v22;
  char *v23;
  uint64_t (**v24)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  char *v25;
  uint64_t v26;
  uint64_t (**v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (**v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  Class isa;
  void (*v57)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v58;
  uint64_t v59;
  void *v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  objc_super v64;
  uint64_t v65;
  objc_super v66;
  objc_super v67;

  v8 = a3 & 1;
  v9 = *(_QWORD *)(a4 + 16);
  if (v9)
  {
    v10 = a4 + 32;
    swift_bridgeObjectRetain(a4);
    do
    {
      sub_10032C314(v10, a1, a2, v8);
      v10 += 40;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease(a4);
  }
  v11 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_jobStorage;
  v12 = (objc_class *)type metadata accessor for SyncDownloadJobsOperation();
  v62 = *(_OWORD *)&v4[v11];
  v13 = (char *)objc_allocWithZone(v12);
  v60 = v4;
  v14 = OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_operationQueue;
  v15 = objc_allocWithZone((Class)NSOperationQueue);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  v16 = v62;
  swift_unknownObjectRetain(v62);
  v17 = v13;
  *(_QWORD *)&v13[v14] = objc_msgSend(v15, "init");
  *(_OWORD *)&v17[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_jobStorage] = v62;
  v63 = a4;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks] = a4;
  v18 = &v17[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
  *(_QWORD *)v18 = a1;
  *((_QWORD *)v18 + 1) = a2;
  v18[16] = v8;
  swift_unknownObjectRetain(v16);

  v67.receiver = v17;
  v67.super_class = v12;
  v19 = (char *)objc_msgSendSuper2(&v67, "init");
  swift_unknownObjectRelease(v16);
  v20 = swift_allocObject(&unk_1004C3D10, 24, 7);
  *(_QWORD *)(v20 + 16) = v60;
  v21 = (objc_class *)sub_10003F544(&qword_100564DE8);
  v22 = (char *)objc_allocWithZone(v21);
  v23 = &v22[*(_QWORD *)((swift_isaMask & *(_QWORD *)v22) + 0x180)];
  *(_QWORD *)v23 = 0;
  v23[8] = 2;
  v24 = (uint64_t (**)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))&v22[*(_QWORD *)((swift_isaMask & *(_QWORD *)v22)
                                                                                   + 0x188)];
  *v24 = sub_1000453F0;
  v24[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v20;
  v66.receiver = v22;
  v66.super_class = v21;
  v60;
  v25 = (char *)objc_msgSendSuper2(&v66, "init");
  v26 = swift_allocObject(&unk_1004C3D38, 24, 7);
  swift_unknownObjectWeakInit(v26 + 16, v25);
  v27 = (uint64_t (**)(uint64_t))&v19[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v28 = *(_QWORD *)&v19[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v29 = *(_QWORD *)&v19[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v27 = sub_10003FB30;
  v27[1] = (uint64_t (*)(uint64_t))v26;
  sub_10002CA30(v28, v29);
  v30 = objc_opt_self(NSOperation);
  v31 = swift_dynamicCastObjCClass(v19, v30);
  if (v31)
  {
    v33 = v31;
    ObjectType = swift_getObjectType(v31, v32);
    v35 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
    if (v35)
      v37 = v35;
    else
      v37 = 0;
    if (v35)
      v38 = v33;
    else
      v38 = 0;
    if (v38)
    {
      v59 = swift_getObjectType(v38, v36);
      v39 = swift_allocObject(&unk_1004C3B80, 32, 7);
      *(_QWORD *)(v39 + 24) = v37;
      swift_unknownObjectWeakInit(v39 + 16, v38);
      v61 = v25;
      v40 = swift_allocObject(&unk_1004C3BA8, 24, 7);
      swift_unknownObjectWeakInit(v40 + 16, v61);
      v41 = v19;
      v42 = swift_allocObject(&unk_1004C3D88, 32, 7);
      *(_QWORD *)(v42 + 16) = v40;
      *(_QWORD *)(v42 + 24) = v39;
      v57 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v37 + 72);
      swift_unknownObjectRetain(v41);
      v58 = v41;
      swift_retain(v40);
      v43 = swift_retain(v39);
      v57(sub_1000456D4, v42, v59, v37, v43);
      swift_release(v39);
      v44 = v40;
      v25 = v61;
      swift_release(v44);
      v45 = v42;
      v19 = v41;
      swift_release(v45);
      v64.receiver = v61;
      v64.super_class = (Class)type metadata accessor for BaseOperation();
      objc_msgSendSuper2(&v64, "addDependency:", v33);

    }
  }
  v46 = swift_allocObject(&unk_1004C3D60, 48, 7);
  *(_QWORD *)(v46 + 16) = a1;
  *(_QWORD *)(v46 + 24) = a2;
  *(_BYTE *)(v46 + 32) = v8;
  *(_QWORD *)(v46 + 40) = v63;
  v47 = (void (**)(uint64_t))&v25[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v48 = *(_QWORD *)&v25[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v49 = *(_QWORD *)&v25[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
  *v47 = sub_100340C78;
  v47[1] = (void (*)(uint64_t))v46;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(a2);
  sub_10002CA30(v48, v49);
  v50 = sub_100039ED8();
  v51 = sub_10003F544((uint64_t *)&unk_100553780);
  v52 = swift_allocObject(v51, 48, 7);
  *(_OWORD *)(v52 + 16) = xmmword_1003CDE60;
  *(_QWORD *)(v52 + 32) = v19;
  *(_QWORD *)(v52 + 40) = v25;
  v65 = v52;
  specialized Array._endMutation()(v52);
  v53 = v65;
  sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
  v54 = v19;
  v55 = v25;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v53);
  objc_msgSend(v50, "addOperations:waitUntilFinished:", isa, 1);

}

uint64_t type metadata accessor for SyncDownloadJobsOperation()
{
  return objc_opt_self(_TtC8Podcasts25SyncDownloadJobsOperation);
}

id sub_100039ED8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___restoreQueue;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___restoreQueue);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___restoreQueue);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
    objc_msgSend(v4, "setMaxConcurrentOperationCount:", 1);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_100039F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100039F6C(a1, a2, *(_QWORD *)(v2 + 16), (_QWORD *)(v2 + 24), *(uint64_t (**)(_QWORD, _QWORD))(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_100039F6C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD, _QWORD), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  _BYTE v25[24];

  v22 = a6;
  v9 = type metadata accessor for Logger(0);
  v20 = *(_QWORD *)(v9 - 8);
  v21 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v25, 0, 0);
  if (swift_unknownObjectWeakLoadStrong(a3))
  {
    v12 = (char *)&loc_10003A048 + 4 * byte_1003D6054[*(unsigned __int8 *)sub_10003A834(a4, a4[3])];
    __asm { BR              X10 }
  }
  static Logger.downloads.getter(0);
  v13 = sub_10000A520((uint64_t)a4, (uint64_t)v24);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (_DWORD *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    *v16 = 136446210;
    v17 = *(unsigned __int8 *)sub_10003A834(v24, v24[3]);
    v19[1] = a5;
    __asm { BR              X10 }
  }
  sub_10003D380(v24);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v21);
  return a5(0, 0);
}

uint64_t sub_10003A2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v17[5];
  uint64_t v18;

  v9 = *(NSObject **)&v4[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_accessQueue];
  v10 = (_QWORD *)swift_allocObject(&unk_1004C3E00, 56, 7);
  v10[2] = v4;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a1;
  v10[6] = a2;
  v11 = swift_allocObject(&unk_1004C3E28, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_100029B84;
  *(_QWORD *)(v11 + 24) = v10;
  v17[4] = sub_100029B3C;
  v18 = v11;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_100029B1C;
  v17[3] = &unk_1004C3E40;
  v12 = _Block_copy(v17);
  v13 = v18;
  swift_unknownObjectRetain(a1);
  swift_retain(v11);
  v14 = v4;
  swift_release(v13);
  dispatch_sync(v9, v12);
  swift_unknownObjectRelease(a1);
  _Block_release(v12);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v11, "", 93, 100, 30, 1);
  swift_release(v10);
  result = swift_release(v11);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10003A420(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Strong;
  void *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, _QWORD *, char, uint64_t);
  _QWORD *v29;
  char v30;
  _QWORD v32[4];
  int v33;
  uint64_t v34;
  __int128 v35[2];
  uint64_t v36[3];
  __int128 v37;
  uint64_t v38;

  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_1004C4170, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  v34 = a6;
  v16 = a6 + 16;
  swift_retain(a3);
  static Logger.downloads.getter(v17);
  v18 = sub_10000A520((uint64_t)a4, (uint64_t)&v37);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v32[0] = v12;
    v32[2] = v16;
    v32[3] = v15;
    v33 = a5;
    v21 = (_DWORD *)swift_slowAlloc(12, -1);
    v36[0] = swift_slowAlloc(32, -1);
    *v21 = 136446210;
    v22 = *(unsigned __int8 *)sub_10003A834(&v37, v38);
    v32[1] = v11;
    __asm { BR              X10 }
  }
  sub_10003D380(&v37);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_10000A520((uint64_t)a4, (uint64_t)&v37);
  v23 = swift_allocObject(&unk_1004C4198, 64, 7);
  v24 = v34;
  *(_QWORD *)(v23 + 16) = v34;
  sub_10002099C(&v37, v23 + 24);
  swift_beginAccess(v16, v36, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v16);
  if (Strong)
  {
    v26 = (void *)Strong;
    v27 = swift_allocObject(&unk_1004C3648, 24, 7);
    swift_unknownObjectWeakInit(v27 + 16, v26);
    swift_retain(v24);

    v28 = sub_100341040;
  }
  else
  {
    swift_retain(v24);
    v28 = 0;
    v27 = 0;
  }
  sub_10000A520((uint64_t)a4, (uint64_t)v35);
  v29 = (_QWORD *)swift_allocObject(&unk_1004C41C0, 80, 7);
  v29[2] = v24;
  sub_10002099C(v35, (uint64_t)(v29 + 3));
  v29[8] = sub_10003A86C;
  v29[9] = v15;
  v30 = *(_BYTE *)sub_10003A834(a4, a4[3]);
  swift_retain(v24);
  sub_100038768(v30, a5 & 1, (uint64_t)sub_100039904, v23, (uint64_t)v28, v27, (uint64_t)sub_100039F5C, (uint64_t)v29);
  sub_10002CA30((uint64_t)v28, v27);
  swift_release(v29);
  return swift_release(v23);
}

_QWORD *sub_10003A834(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10003A858(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_errorRelease();
  return result;
}

uint64_t sub_10003A86C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10003A8A8(a1, a2, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_10003A874(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2;
  return v3(&v5);
}

uint64_t sub_10003A8A8(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4;
  char v5;

  v4 = a1;
  v5 = a2;
  return a3(&v4);
}

uint64_t sub_10003A8DC(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_errorRetain();
  return result;
}

void sub_10003A8F0(uint64_t a1)
{
  uint64_t *v1;

  sub_10003A8FC(a1, v1[4], v1[2], v1[3]);
}

void sub_10003A8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t WitnessTable;
  _BYTE v13[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v10 = (void *)Strong;
    v11 = type metadata accessor for AsyncBlockOperation(0, a3, a4, v9);
    WitnessTable = swift_getWitnessTable(&unk_1003D18A0, v11);
    sub_100044860(a1, v11, WitnessTable, (uint64_t)&off_1004C5DF8, (uint64_t)&off_1004C5DD8);

  }
}

uint64_t type metadata accessor for AsyncBlockOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000450B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncBlockOperation);
}

id *ImplicitFollowsDecayCoordinator.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  id *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  id v53[3];

  v0 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v0);
  v50 = (char *)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v49 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v48 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10003F544(&qword_100558C48);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  __chkstk_darwin(v3);
  v45 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_10003F544(&qword_100558C50);
  v52 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  static DispatchQoS.background.getter();
  v53[0] = _swiftEmptyArrayStorage;
  v17 = sub_100048A44();
  v18 = sub_10003F544(&qword_100555A00);
  v19 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v53, v18, v19, v10, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6);
  v44 = v16;
  v20 = v43;
  v20[2] = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x800000010042E300, v15, v12, v9, 0);
  v21 = sub_10003F544(&qword_1005521C8);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = (void *)PassthroughSubject.init()();
  v20[3] = v22;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_10013B450((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v23 = &_swiftEmptySetSingleton;
  }
  v25 = v41;
  v24 = v42;
  v20[4] = v23;
  v20[6] = 0;
  swift_unknownObjectWeakInit(v20 + 5, 0);
  v53[0] = v22;
  v26 = sub_10002F9C8(&qword_100558C58, &qword_1005521C8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  swift_retain(v22);
  v27 = v45;
  Publisher.filter(_:)(MTWelcomeViewController.isAcknowledgementRequired.getter, 0, v21, v26);
  swift_release(v22);
  v28 = v48;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(5);
  v53[0] = v20[2];
  v29 = v53[0];
  v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v31 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v50, 1, 1, v30);
  v32 = sub_10002F9C8(&qword_100558C60, &qword_100558C48, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v33 = sub_1000489AC();
  v34 = v29;
  v35 = v47;
  Publisher.debounce<A>(for:scheduler:options:)(v28, v53, v31, v47, v44, v32, v33);
  sub_100048A04(v31);

  (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v51);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v27, v35);
  v36 = swift_allocObject(&unk_1004B3D28, 24, 7);
  swift_weakInit(v36 + 16, v20);
  v37 = sub_10002F9C8(&qword_100558C68, &qword_100558C50, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v38 = Publisher<>.sink(receiveValue:)(sub_1001D7164, v36, v24, v37);
  swift_release(v36);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v25, v24);
  swift_beginAccess(v20 + 4, v53, 33, 0);
  AnyCancellable.store(in:)(v20 + 4);
  swift_endAccess(v53);
  swift_release(v38);
  return v20;
}

uint64_t sub_10003AEC0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10003CA40(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003AF00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void (*v9)(char *, char *, uint64_t (*)(uint64_t), _QWORD *, __n128);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  __n128 v19;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t (*)(uint64_t), _QWORD *, __n128);
  uint64_t v25;
  _QWORD v26[5];

  v2 = *(_QWORD *)((swift_isaMask & *v1) + 0x170);
  v25 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(a1);
  v4 = (char *)&v21 - v3;
  v6 = *(void **)((char *)v1 + v5[54]);
  v7 = v5[52];
  v8 = (_QWORD *)((char *)v1 + v5[53]);
  v9 = (void (*)(char *, char *, uint64_t (*)(uint64_t), _QWORD *, __n128))*v8;
  v23 = v8[1];
  v24 = v9;
  v22 = (char *)v1 + v7;
  v10 = v5[47];
  v11 = v5[48];
  v12 = v5[49];
  v13 = v5[50];
  v26[0] = v2;
  v26[1] = v10;
  v26[2] = v11;
  v26[3] = v12;
  v26[4] = v13;
  v14 = type metadata accessor for StorageOperation(0, (uint64_t)v26);
  WitnessTable = swift_getWitnessTable(&unk_1003D12DC, v14);
  sub_100044F10(v14, WitnessTable, (uint64_t)v4);
  v16 = swift_allocObject(&unk_1004B9E60, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v1);
  v17 = (_QWORD *)swift_allocObject(&unk_1004B9E88, 72, 7);
  v17[2] = v2;
  v17[3] = v10;
  v17[4] = v11;
  v17[5] = v12;
  v17[6] = v13;
  v17[7] = v6;
  v17[8] = v16;
  v18 = v6;
  v19 = swift_retain(v16);
  v24(v22, v4, sub_10003E1DC, v17, v19);
  swift_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v2);
  return swift_release(v16);
}

uint64_t type metadata accessor for StorageOperation(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for StorageOperation);
}

void sub_10003B094(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10003B09C(a1, a2, a3, a4, *(void **)(v4 + 16));
}

void sub_10003B09C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t aBlock;
  unint64_t v48[4];
  uint64_t v49;

  v8 = *a1;
  v9 = static os_log_type_t.default.getter();
  v10 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v11 = static OS_os_log.downloads.getter(v10);
  v12 = a5;
  v13 = &unk_100559000;
  v14 = &unk_100559000;
  if (os_log_type_enabled(v11, v9))
  {
    v43 = v8;
    v15 = v12;
    v44 = a4;
    v16 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(32, -1);
    *(_DWORD *)v16 = 136446466;
    v17 = *(_QWORD *)&v15[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
    v18 = *(void **)&v15[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
    v19 = v15[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
    v46 = v42;
    aBlock = 0x496E6F6973736553;
    v48[0] = 0xEB00000000203A44;
    if (v19)
      v20 = 1936484398;
    else
      v20 = 0x7261646E6174732ELL;
    if (v19)
      v21 = (void *)0xE400000000000000;
    else
      v21 = (void *)0xE900000000000064;
    v45 = v17;
    swift_bridgeObjectRetain_n(v18, 2);
    v22._countAndFlagsBits = v20;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v21);
    v23._countAndFlagsBits = v45;
    v24 = v18;
    v23._object = v18;
    String.append(_:)(v23);
    v25 = v18;
    v13 = (_QWORD *)&unk_100559000;
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v24);
    v26 = v48[0];
    aBlock = sub_10003D274(aBlock, v48[0], &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v48, v16 + 4, v16 + 12);

    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v16 + 12) = 2050;
    v27 = *(_QWORD *)(*(_QWORD *)&v15[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks] + 16);

    aBlock = v27;
    v14 = (_QWORD *)&unk_100559000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v48, v16 + 14, v16 + 22);

    v8 = v43;
    _os_log_impl((void *)&_mh_execute_header, v11, v9, "Delete not running jobs from storage for session %{public}s. Number of running downloads %{public}ld", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    v28 = v16;
    a4 = v44;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {

  }
  v29 = *(_QWORD *)&v12[v14[139]];
  v30 = v12;
  swift_bridgeObjectRetain(v29);
  v32 = sub_10003B448(v31, v30);
  swift_bridgeObjectRelease(v29);

  v33 = &v30[v13[138]];
  v35 = *(_QWORD *)v33;
  v34 = *((_QWORD *)v33 + 1);
  v36 = v33[16];
  v37 = objc_msgSend(*(id *)(v8 + 16), "newBackgroundContext");
  v38 = swift_allocObject(&unk_1004B4AD0, 72, 7);
  *(_QWORD *)(v38 + 16) = v35;
  *(_QWORD *)(v38 + 24) = v34;
  *(_BYTE *)(v38 + 32) = v36;
  *(_QWORD *)(v38 + 40) = v32;
  *(_QWORD *)(v38 + 48) = v37;
  *(_QWORD *)(v38 + 56) = a3;
  *(_QWORD *)(v38 + 64) = a4;
  v48[3] = (unint64_t)sub_10002E660;
  v49 = v38;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v48[0] = 1107296256;
  v48[1] = (unint64_t)sub_100027AF8;
  v48[2] = (unint64_t)&unk_1004B4AE8;
  v39 = _Block_copy(&aBlock);
  v40 = v49;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v32);
  v41 = v37;
  swift_retain(a4);
  swift_release(v40);
  objc_msgSend(v41, "performBlock:", v39);
  _Block_release(v39);
  swift_bridgeObjectRelease(v32);

}

_QWORD *sub_10003B448(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v6 = (_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(a1);
  v7 = _swiftEmptyArrayStorage;
  do
  {
    sub_1001E487C(v6, a2, (uint64_t)&v12);
    if (v2)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(a1);
      return v7;
    }
    if ((v13 & 1) == 0)
    {
      v8 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        v7 = sub_10027B99C(0, v7[2] + 1, 1, v7);
      v10 = v7[2];
      v9 = v7[3];
      if (v10 >= v9 >> 1)
        v7 = sub_10027B99C((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      v7[2] = v10 + 1;
      v7[v10 + 4] = v8;
    }
    v6 += 5;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease(a1);
  return v7;
}

void sub_10003B57C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10003B584(a1, a2, a3, a4, *(void **)(v4 + 16));
}

void sub_10003B584(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  unint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  char *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  _BYTE *v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t (*v54)();
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  id v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t aBlock;
  unint64_t v75[2];
  void *v76;
  uint64_t (*v77)();
  uint64_t v78;

  v6 = (void *)0xE900000000000064;
  v66 = *a1;
  v7 = *a2;
  v8 = static os_log_type_t.default.getter();
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v10 = static OS_os_log.downloads.getter(v9);
  v11 = os_log_type_enabled(v10, v8);
  v69 = a5;
  if (v7 < 1)
  {
    if (!v11)
      goto LABEL_18;
    v23 = a5;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    *(_DWORD *)v24 = 136446210;
    v26 = *(_QWORD *)&v23[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
    v27 = *(void **)&v23[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
    v28 = v23[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
    v73 = v25;
    aBlock = 0x496E6F6973736553;
    v75[0] = 0xEB00000000203A44;
    if (v28)
      v29 = 1936484398;
    else
      v29 = 0x7261646E6174732ELL;
    if (v28)
      v30 = (void *)0xE400000000000000;
    else
      v30 = (void *)0xE900000000000064;
    v71 = v26;
    swift_bridgeObjectRetain_n(v27, 2);
    v31._countAndFlagsBits = v29;
    v31._object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v30);
    v32._countAndFlagsBits = v71;
    v32._object = v27;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v27);
    v33 = v75[0];
    aBlock = sub_10003D274(aBlock, v75[0], &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v75, v24 + 4, v24 + 12);

    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v10, v8, "No jobs have been deleted from storage for session %{public}s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v22 = (uint64_t)v24;
  }
  else
  {
    if (!v11)
      goto LABEL_18;
    v12 = a5;
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(32, -1);
    v73 = v14;
    aBlock = v7;
    *(_DWORD *)v13 = 134349314;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v75, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2082;
    v15 = *(_QWORD *)&v12[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
    v16 = *(void **)&v12[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
    v17 = v12[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
    aBlock = 0x496E6F6973736553;
    v75[0] = 0xEB00000000203A44;
    if (v17)
      v18 = 1936484398;
    else
      v18 = 0x7261646E6174732ELL;
    if (v17)
      v6 = (void *)0xE400000000000000;
    v70 = v15;
    swift_bridgeObjectRetain_n(v16, 2);
    v19._countAndFlagsBits = v18;
    v19._object = v6;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v6);
    v20._countAndFlagsBits = v70;
    v20._object = v16;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v16);
    v21 = v75[0];
    aBlock = sub_10003D274(aBlock, v75[0], &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v75, v13 + 14, v13 + 22);

    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v10, v8, "Deleted %{public}ld jobs from storage for session %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v22 = v13;
  }
  swift_slowDealloc(v22, -1, -1);
LABEL_18:

  v34 = static os_log_type_t.default.getter();
  v35 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v36 = static OS_os_log.downloads.getter(v35);
  v37 = v34;
  if (os_log_type_enabled(v36, v34))
  {
    v38 = v69;
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    *(_DWORD *)v39 = 136446210;
    v41 = *(_QWORD *)&v38[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
    v42 = *(void **)&v38[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
    v43 = v38[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
    v73 = v40;
    aBlock = 0x496E6F6973736553;
    v75[0] = 0xEB00000000203A44;
    if (v43)
      v44 = 1936484398;
    else
      v44 = 0x7261646E6174732ELL;
    if (v43)
      v45 = (void *)0xE400000000000000;
    else
      v45 = (void *)0xE900000000000064;
    v72 = v41;
    swift_bridgeObjectRetain_n(v42, 2);
    v46._countAndFlagsBits = v44;
    v46._object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(v45);
    v47._countAndFlagsBits = v72;
    v47._object = v42;
    String.append(_:)(v47);
    swift_bridgeObjectRelease(v42);
    v48 = v69;
    swift_bridgeObjectRelease(v42);
    v49 = v75[0];
    aBlock = sub_10003D274(aBlock, v75[0], &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v75, v39 + 4, v39 + 12);

    swift_bridgeObjectRelease(v49);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Fetch running jobs from storage for session%{public}s", v39, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

    v48 = v69;
  }
  v50 = *(_QWORD *)&v48[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks];
  v51 = *(_QWORD *)(v50 + 16);
  if (v51)
  {
    swift_bridgeObjectRetain(v50);
    sub_10017B27C(0, v51, 0);
    v52 = v50 + 32;
    do
    {
      sub_10000A520(v52, (uint64_t)&aBlock);
      v53 = v76;
      v54 = v77;
      sub_10003A834(&aBlock, (uint64_t)v76);
      v55 = (*((uint64_t (**)(void *, uint64_t (*)()))v54 + 3))(v53, v54);
      sub_10003D380(&aBlock);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10017B27C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v57 = _swiftEmptyArrayStorage[2];
      v56 = _swiftEmptyArrayStorage[3];
      if (v57 >= v56 >> 1)
        sub_10017B27C(v56 > 1, v57 + 1, 1);
      _swiftEmptyArrayStorage[2] = v57 + 1;
      _swiftEmptyArrayStorage[v57 + 4] = v55;
      v52 += 40;
      --v51;
    }
    while (v51);
    swift_bridgeObjectRelease(v50);
  }
  v59 = *(_QWORD *)&v48[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
  v58 = *(_QWORD *)&v48[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
  v60 = v48[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
  v61 = objc_msgSend(*(id *)(v66 + 16), "newBackgroundContext");
  v62 = swift_allocObject(&unk_1004B4A80, 72, 7);
  *(_QWORD *)(v62 + 16) = v59;
  *(_QWORD *)(v62 + 24) = v58;
  *(_BYTE *)(v62 + 32) = v60;
  *(_QWORD *)(v62 + 40) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v62 + 48) = v61;
  *(_QWORD *)(v62 + 56) = a3;
  *(_QWORD *)(v62 + 64) = a4;
  v77 = sub_10002E654;
  v78 = v62;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v75[0] = 1107296256;
  v75[1] = (unint64_t)sub_100027AF8;
  v76 = &unk_1004B4A98;
  v63 = _Block_copy(&aBlock);
  v64 = v78;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v65 = v61;
  swift_retain(a4);
  swift_release(v64);
  objc_msgSend(v65, "performBlock:", v63);
  _Block_release(v63);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);

}

void sub_10003BD18()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  void (**v12)(uint64_t *, uint64_t, uint64_t, uint64_t);
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  objc_class *v18;
  char *v19;
  char *v20;
  void (**v21)(uint64_t *, uint64_t *, uint64_t, uint64_t);
  char *v22;
  char *v23;
  uint64_t v24;
  objc_class *v25;
  char *v26;
  char *v27;
  void (**v28)(uint64_t *@<X0>, uint64_t@<X8>);
  char *v29;
  id v30;
  uint64_t v31;
  objc_class *v32;
  char *v33;
  char *v34;
  uint64_t (**v35)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  char *v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t (**v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ObjectType;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  void (*v58)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (**v62)(uint64_t);
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  void (*v81)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v82;
  __n128 v83;
  objc_class *v84;
  char *v85;
  uint64_t v86;
  uint64_t (**v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void (*v103)(void (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v104;
  __n128 v105;
  objc_class *v106;
  char *v107;
  uint64_t v108;
  uint64_t (**v109)(uint64_t);
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  id v118;
  char *v119;
  char *v120;
  Class isa;
  id v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  void *v126;
  uint64_t v127;
  void *v128;
  objc_super v129;
  objc_super v130;
  objc_super v131;
  objc_super v132;
  objc_super v133;
  objc_super v134;
  objc_super v135;
  _QWORD v136[6];

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain_n(*(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks], 2);
    do
    {
      sub_10000A520(v3, (uint64_t)v136);
      sub_1001E45D0((uint64_t)v136);
      sub_10003D380(v136);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n(v1, 2);
  }
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_jobStorage];
  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_jobStorage + 8];
  v6 = swift_allocObject(&unk_1004B4878, 24, 7);
  *(_QWORD *)(v6 + 16) = v0;
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  swift_unknownObjectRetain(v4);
  v7 = v0;
  v8 = static OS_os_log.downloads.getter(v7);
  v9 = (objc_class *)sub_10003F544(&qword_1005594A0);
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[*(_QWORD *)((swift_isaMask & *(_QWORD *)v10) + 0x198)];
  *(_QWORD *)v11 = 0;
  v11[8] = 2;
  v12 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))&v10[*(_QWORD *)((swift_isaMask & *(_QWORD *)v10)
                                                                                   + 0x1A8)];
  *v12 = sub_10003B094;
  v12[1] = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v6;
  v13 = &v10[*(_QWORD *)((swift_isaMask & *(_QWORD *)v10) + 0x1A0)];
  *(_QWORD *)v13 = v4;
  *((_QWORD *)v13 + 1) = v5;
  *(_QWORD *)&v10[*(_QWORD *)((swift_isaMask & *(_QWORD *)v10) + 0x1B0)] = v8;
  v135.receiver = v10;
  v135.super_class = v9;
  v14 = (char *)objc_msgSendSuper2(&v135, "init");
  v15 = swift_allocObject(&unk_1004B48A0, 24, 7);
  *(_QWORD *)(v15 + 16) = v7;
  swift_unknownObjectRetain(v4);
  v16 = v7;
  v17 = static OS_os_log.downloads.getter(v16);
  v18 = (objc_class *)sub_10003F544(&qword_1005594A8);
  v19 = (char *)objc_allocWithZone(v18);
  v20 = &v19[*(_QWORD *)((swift_isaMask & *(_QWORD *)v19) + 0x198)];
  *(_QWORD *)v20 = 0;
  v20[8] = 2;
  v21 = (void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))&v19[*(_QWORD *)((swift_isaMask & *(_QWORD *)v19)
                                                                                     + 0x1A8)];
  *v21 = sub_10003B57C;
  v21[1] = (void (*)(uint64_t *, uint64_t *, uint64_t, uint64_t))v15;
  v22 = &v19[*(_QWORD *)((swift_isaMask & *(_QWORD *)v19) + 0x1A0)];
  *(_QWORD *)v22 = v4;
  *((_QWORD *)v22 + 1) = v5;
  *(_QWORD *)&v19[*(_QWORD *)((swift_isaMask & *(_QWORD *)v19) + 0x1B0)] = v17;
  v134.receiver = v19;
  v134.super_class = v18;
  v23 = (char *)objc_msgSendSuper2(&v134, "init");
  v24 = swift_allocObject(&unk_1004B48C8, 24, 7);
  *(_QWORD *)(v24 + 16) = v16;
  v25 = (objc_class *)sub_10003F544(&qword_1005594B0);
  v26 = (char *)objc_allocWithZone(v25);
  v27 = &v26[*(_QWORD *)((swift_isaMask & *(_QWORD *)v26) + 0x180)];
  *(_QWORD *)v27 = 0;
  v27[8] = 2;
  v28 = (void (**)(uint64_t *@<X0>, uint64_t@<X8>))&v26[*(_QWORD *)((swift_isaMask & *(_QWORD *)v26) + 0x188)];
  *v28 = sub_100045370;
  v28[1] = (void (*)(uint64_t *@<X0>, uint64_t@<X8>))v24;
  v133.receiver = v26;
  v133.super_class = v25;
  v29 = v16;
  v30 = objc_msgSendSuper2(&v133, "init");
  v31 = swift_allocObject(&unk_1004B48F0, 24, 7);
  *(_QWORD *)(v31 + 16) = v29;
  v32 = (objc_class *)sub_10003F544(&qword_1005594B8);
  v33 = (char *)objc_allocWithZone(v32);
  v34 = &v33[*(_QWORD *)((swift_isaMask & *(_QWORD *)v33) + 0x180)];
  *(_QWORD *)v34 = 0;
  v34[8] = 2;
  v35 = (uint64_t (**)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))&v33[*(_QWORD *)((swift_isaMask & *(_QWORD *)v33)
                                                                                   + 0x188)];
  *v35 = sub_100045358;
  v35[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v31;
  v132.receiver = v33;
  v132.super_class = v32;
  v36 = v29;
  v37 = v23;
  v125 = v36;
  v38 = objc_msgSendSuper2(&v132, "init");
  v39 = swift_allocObject(&unk_1004B4918, 24, 7);
  swift_unknownObjectWeakInit(v39 + 16, v23);
  v40 = (uint64_t (**)(uint64_t))&v14[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v41 = *(_QWORD *)&v14[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v42 = *(_QWORD *)&v14[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v40 = sub_1000456D8;
  v40[1] = (uint64_t (*)(uint64_t))v39;
  sub_10002CA30(v41, v42);
  v43 = objc_opt_self(NSOperation);
  v126 = v14;
  v44 = swift_dynamicCastObjCClass(v14, v43);
  if (v44)
  {
    v46 = v44;
    ObjectType = swift_getObjectType(v44, v45);
    v48 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
    v50 = v48 ? v48 : 0;
    v51 = v48 ? v46 : 0;
    if (v51)
    {
      v127 = swift_getObjectType(v51, v49);
      v52 = swift_allocObject(&unk_1004B49B8, 32, 7);
      *(_QWORD *)(v52 + 24) = v50;
      swift_unknownObjectWeakInit(v52 + 16, v51);
      v53 = v23;
      v54 = swift_allocObject(&unk_1004B49E0, 24, 7);
      swift_unknownObjectWeakInit(v54 + 16, v23);
      v55 = swift_allocObject(&unk_1004B4A58, 32, 7);
      *(_QWORD *)(v55 + 16) = v54;
      *(_QWORD *)(v55 + 24) = v52;
      v56 = v30;
      v57 = v38;
      v58 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v50 + 72);
      v122 = (id)swift_unknownObjectRetain(v126);
      swift_retain(v54);
      v59 = swift_retain(v52);
      v58(sub_1000456D4, v55, v127, v50, v59);
      v38 = v57;
      v30 = v56;
      swift_release(v52);
      v60 = v54;
      v37 = v53;
      swift_release(v60);
      swift_release(v55);
      v129.receiver = v53;
      v129.super_class = (Class)type metadata accessor for BaseOperation();
      objc_msgSendSuper2(&v129, "addDependency:", v46);

    }
  }
  v61 = swift_allocObject(&unk_1004B4940, 24, 7);
  swift_unknownObjectWeakInit(v61 + 16, v30);
  v62 = (uint64_t (**)(uint64_t))&v37[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v63 = v37;
  v64 = *(_QWORD *)&v37[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v65 = *(_QWORD *)&v37[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v62 = sub_100045828;
  v62[1] = (uint64_t (*)(uint64_t))v61;
  v66 = v63;
  sub_10002CA30(v64, v65);
  v67 = objc_opt_self(NSOperation);
  v128 = v66;
  v68 = swift_dynamicCastObjCClass(v66, v67);
  if (v68)
  {
    v70 = v68;
    v71 = swift_getObjectType(v68, v69);
    v72 = swift_conformsToProtocol2(v71, &protocol descriptor for PodcastsOperation);
    v74 = v72 ? v72 : 0;
    v75 = v72 ? v70 : 0;
    if (v75)
    {
      v123 = swift_getObjectType(v75, v73);
      v76 = swift_allocObject(&unk_1004B49B8, 32, 7);
      *(_QWORD *)(v76 + 24) = v74;
      swift_unknownObjectWeakInit(v76 + 16, v75);
      v77 = swift_allocObject(&unk_1004B49E0, 24, 7);
      swift_unknownObjectWeakInit(v77 + 16, v30);
      v78 = swift_allocObject(&unk_1004B4A30, 32, 7);
      *(_QWORD *)(v78 + 16) = v77;
      *(_QWORD *)(v78 + 24) = v76;
      v79 = v30;
      v80 = v38;
      v81 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v74 + 72);
      v82 = (id)swift_unknownObjectRetain(v128);
      swift_retain(v77);
      v83 = swift_retain(v76);
      v81(sub_1000456D4, v78, v123, v74, v83);
      v38 = v80;
      v30 = v79;
      swift_release(v76);
      swift_release(v77);
      swift_release(v78);
      v84 = (objc_class *)type metadata accessor for BaseOperation();
      v130.receiver = v79;
      v130.super_class = v84;
      objc_msgSendSuper2(&v130, "addDependency:", v70);

    }
  }
  v85 = (char *)v30;

  v86 = swift_allocObject(&unk_1004B4968, 24, 7);
  swift_unknownObjectWeakInit(v86 + 16, v38);
  v87 = (uint64_t (**)(uint64_t))&v85[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v88 = *(_QWORD *)&v85[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v89 = *(_QWORD *)&v85[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v87 = sub_100045828;
  v87[1] = (uint64_t (*)(uint64_t))v86;
  sub_10002CA30(v88, v89);
  v90 = objc_opt_self(NSOperation);
  v91 = swift_dynamicCastObjCClass(v85, v90);
  if (v91)
  {
    v93 = v91;
    v94 = swift_getObjectType(v91, v92);
    v95 = swift_conformsToProtocol2(v94, &protocol descriptor for PodcastsOperation);
    if (v95)
      v97 = v95;
    else
      v97 = 0;
    if (v95)
      v98 = v93;
    else
      v98 = 0;
    if (v98)
    {
      v124 = swift_getObjectType(v98, v96);
      v99 = swift_allocObject(&unk_1004B49B8, 32, 7);
      *(_QWORD *)(v99 + 24) = v97;
      swift_unknownObjectWeakInit(v99 + 16, v98);
      v100 = swift_allocObject(&unk_1004B49E0, 24, 7);
      swift_unknownObjectWeakInit(v100 + 16, v38);
      v101 = swift_allocObject(&unk_1004B4A08, 32, 7);
      *(_QWORD *)(v101 + 16) = v100;
      *(_QWORD *)(v101 + 24) = v99;
      v102 = v38;
      v103 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t, __n128))(v97 + 72);
      swift_unknownObjectRetain(v85);
      v104 = v85;
      swift_retain(v100);
      v105 = swift_retain(v99);
      v103(sub_1000450E8, v101, v124, v97, v105);
      v38 = v102;
      swift_release(v99);
      swift_release(v100);
      swift_release(v101);
      v106 = (objc_class *)type metadata accessor for BaseOperation();
      v131.receiver = v102;
      v131.super_class = v106;
      objc_msgSendSuper2(&v131, "addDependency:", v93);

    }
  }
  v107 = (char *)v38;

  v108 = swift_allocObject(&unk_1004B4990, 24, 7);
  *(_QWORD *)(v108 + 16) = v125;
  v109 = (uint64_t (**)(uint64_t))&v107[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v110 = *(_QWORD *)&v107[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v111 = *(_QWORD *)&v107[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
  *v109 = sub_1001E5398;
  v109[1] = (uint64_t (*)(uint64_t))v108;
  v112 = v125;
  sub_10002CA30(v110, v111);

  v113 = *(void **)&v112[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_operationQueue];
  v114 = sub_10003F544((uint64_t *)&unk_100553780);
  v115 = swift_allocObject(v114, 64, 7);
  *(_OWORD *)(v115 + 16) = xmmword_1003CBDC0;
  *(_QWORD *)(v115 + 32) = v126;
  *(_QWORD *)(v115 + 40) = v128;
  *(_QWORD *)(v115 + 48) = v85;
  *(_QWORD *)(v115 + 56) = v107;
  v136[0] = v115;
  specialized Array._endMutation()(v115);
  v116 = v136[0];
  sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
  v117 = v126;
  v118 = v128;
  v119 = v85;
  v120 = v107;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v116);
  objc_msgSend(v113, "addOperations:waitUntilFinished:", isa, 0);

}

id sub_10003C6C0()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  char *v4;
  char *v5;
  objc_super v7;

  v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  v2 = objc_allocWithZone((Class)NSRecursiveLock);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");
  *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts13BaseOperation__error] = 0;
  v3[OBJC_IVAR____TtC8Podcasts13BaseOperation__state] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts13BaseOperation__onFinishBlocks] = _swiftEmptyArrayStorage;
  v4 = &v3[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = &v3[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;

  v7.receiver = v3;
  v7.super_class = (Class)type metadata accessor for BaseOperation();
  return objc_msgSendSuper2(&v7, "init");
}

uint64_t sub_10003C788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a3;
  v5 = sub_10003F544(&qword_100562578);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_100562580);
  v29 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v13 = objc_msgSend(v12, "privateQueueContext");

  v14 = swift_allocObject(&unk_1004C05F0, 32, 7);
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  swift_bridgeObjectRetain(a2);
  v15 = sub_10003F544(&qword_100562588);
  v16 = NSManagedObjectContext.performAndPublish<A>(_:)(sub_1002EB63C, v14, v15);

  swift_release(v14);
  v31 = v16;
  v17 = sub_10003F544(&qword_100562590);
  v18 = sub_10003F544(&qword_100562598);
  v19 = sub_10002F9C8(&qword_1005625A0, &qword_100562590, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.compactMap<A>(_:)(sub_100162E58, 0, v17, v18, v19);
  v20 = swift_release(v16);
  v21 = static Subscribers.Demand.unlimited.getter(v20);
  v22 = sub_10003F544(&qword_1005625A8);
  v23 = sub_10002F9C8(&qword_1005625B0, &qword_100562578, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v24 = sub_10002F9C8(&qword_1005625B8, &qword_1005625A8, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  Publisher.flatMap<A>(maxPublishers:_:)(v21, sub_1002EB030, 0, v5, v22, v23, v24);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v25 = type metadata accessor for ArtworkRequest(0);
  v26 = sub_10002F9C8(&qword_1005625C0, &qword_100562580, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  Publisher.compactMap<A>(_:)(sub_1002EB0A4, 0, v9, v25, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v11, v9);
}

uint64_t sub_10003CA40(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10003CA84(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t sub_10003CA94()
{
  unint64_t result;

  result = qword_100560508;
  if (!qword_100560508)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeStateIdentifier, &type metadata for EpisodeStateIdentifier);
    atomic_store(result, (unint64_t *)&qword_100560508);
  }
  return result;
}

uint64_t sub_10003CAD8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain(a2);
  return result;
}

_QWORD *sub_10003CAE8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10027BC1C(a1, a2, a3, a4, &qword_100559FE0, (uint64_t)&type metadata for EpisodeStateIdentifier);
}

uint64_t sub_10003CAFC(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  int v40;
  uint64_t countAndFlagsBits;
  int v42;
  os_log_type_t v43;
  uint64_t v44;
  NSObject *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *object;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  _BYTE v69[4];
  int v70;
  uint64_t v71;
  Swift::String v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  uint64_t *v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t);
  Swift::String v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;

  v80 = a7;
  v81 = a6;
  v78 = a5;
  v79 = sub_10003F544(&qword_1005559C0);
  v11 = __chkstk_darwin(v79);
  v75 = &v69[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v76 = (uint64_t *)&v69[-v13];
  v14 = objc_allocWithZone((Class)NSFetchRequest);
  v15 = String._bridgeToObjectiveC()();
  v77 = objc_msgSend(v14, "initWithEntityName:", v15);

  v16 = sub_10003F544(&qword_1005559A0);
  v17 = swift_allocObject(v16, 192, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1003CB770;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v18 = sub_10003E198();
  *(_QWORD *)(v17 + 64) = v18;
  *(_QWORD *)(v17 + 32) = 0xD000000000000011;
  *(_QWORD *)(v17 + 40) = 0x8000000100431530;
  if ((a3 & 1) != 0)
    v19 = 1936484398;
  else
    v19 = 0x7261646E6174732ELL;
  if ((a3 & 1) != 0)
    v20 = (void *)0xE400000000000000;
  else
    v20 = (void *)0xE900000000000064;
  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v73 = a1;
  v74 = a2;
  *(_QWORD *)&v84 = a1;
  *((_QWORD *)&v84 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  v72._countAndFlagsBits = v19;
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  v72._object = v20;
  swift_bridgeObjectRelease(v20);
  v22 = v84;
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v18;
  *(_OWORD *)(v17 + 72) = v22;
  *(_QWORD *)(v17 + 136) = &type metadata for String;
  *(_QWORD *)(v17 + 144) = v18;
  strcpy((char *)(v17 + 112), "taskIdentifier");
  *(_BYTE *)(v17 + 127) = -18;
  *(_QWORD *)(v17 + 176) = sub_10003F544(&qword_1005559A8);
  *(_QWORD *)(v17 + 184) = sub_10002F9C8((unint64_t *)&unk_1005559B0, &qword_1005559A8, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v17 + 152) = a4;
  v23 = a4;
  swift_bridgeObjectRetain(a4);
  v24 = v77;
  v25 = (void *)NSPredicate.init(format:_:)(0xD00000000000001ALL, 0x8000000100431570, v17);
  objc_msgSend(v24, "setPredicate:", v25);

  v26 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v24);
  objc_msgSend(v26, "setResultType:", 2);
  *(_QWORD *)&v84 = 0;
  v27 = objc_msgSend(v78, "executeRequest:error:", v26, &v84);
  v28 = (void *)v84;
  if (!v27)
  {
    v35 = (id)v84;
    v36 = _convertNSErrorToError(_:)(v28);

    swift_willThrow();
    v37 = (uint64_t)v75;
    *v75 = v36;
    v38 = type metadata accessor for JobStorageError(0);
    swift_storeEnumTagMultiPayload(v37, v38, 0);
    swift_storeEnumTagMultiPayload(v37, v79, 1);
    swift_errorRetain(v36);
    v81(v37);

    swift_errorRelease(v36);
    goto LABEL_26;
  }
  v29 = v27;
  v30 = objc_opt_self(NSBatchDeleteResult);
  v31 = (void *)swift_dynamicCastObjCClass(v29, v30);
  if (v31)
  {
    v32 = v28;
    v33 = objc_msgSend(v31, "result");
    if (v33)
    {
      v34 = v33;
      _bridgeAnyObjectToAny(_:)(&v82, v33);
      swift_unknownObjectRelease(v34);
    }
    else
    {
      memset(&v82, 0, 32);
    }
    sub_10003DC78((uint64_t)&v82, (uint64_t)&v84, (uint64_t *)&unk_100552300);
    if (*((_QWORD *)&v85 + 1))
    {
      v40 = swift_dynamicCast(&v82, &v84, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
      if (v40)
        countAndFlagsBits = v82._countAndFlagsBits;
      else
        countAndFlagsBits = 0;
      v42 = v40 ^ 1;
      goto LABEL_20;
    }
  }
  else
  {
    v39 = v28;

    v84 = 0u;
    v85 = 0u;
  }
  sub_100007A28((uint64_t)&v84, (uint64_t *)&unk_100552300);
  countAndFlagsBits = 0;
  v42 = 1;
LABEL_20:
  v43 = static os_log_type_t.default.getter();
  v44 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v45 = static OS_os_log.downloads.getter(v44);
  if (os_log_type_enabled(v45, v43))
  {
    v46 = v74;
    swift_bridgeObjectRetain_n(v74, 2);
    LODWORD(v78) = v42;
    v47 = v23;
    swift_bridgeObjectRetain_n(v23, 2);
    v48 = swift_slowAlloc(32, -1);
    v70 = v43;
    v49 = v48;
    v71 = swift_slowAlloc(96, -1);
    v83 = v71;
    *(_QWORD *)&v84 = countAndFlagsBits;
    *(_DWORD *)v49 = 136315650;
    BYTE8(v84) = (_BYTE)v78;
    v50 = sub_10003F544(&qword_1005559C8);
    v51 = String.init<A>(describing:)(&v84, v50);
    v75 = (_QWORD *)countAndFlagsBits;
    v53 = v52;
    *(_QWORD *)&v84 = sub_10003D274(v51, v52, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v49 + 12) = 2082;
    *(_QWORD *)&v84 = 0x496E6F6973736553;
    *((_QWORD *)&v84 + 1) = 0xEB00000000203A44;
    v82._countAndFlagsBits = v73;
    v82._object = v46;
    swift_bridgeObjectRetain_n(v46, 2);
    object = v72._object;
    String.append(_:)(v72);
    swift_bridgeObjectRelease(object);
    v55 = v31;
    v56 = v82._object;
    String.append(_:)(v82);
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v56);
    v57 = *((_QWORD *)&v84 + 1);
    *(_QWORD *)&v84 = sub_10003D274(v84, *((unint64_t *)&v84 + 1), &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease_n(v46, 2);
    swift_bridgeObjectRelease(v57);
    *(_WORD *)(v49 + 22) = 2082;
    swift_bridgeObjectRetain(v47);
    v59 = Array.description.getter(v58, &type metadata for Int);
    v61 = v60;
    swift_bridgeObjectRelease(v47);
    v62 = v59;
    countAndFlagsBits = (uint64_t)v75;
    *(_QWORD *)&v84 = sub_10003D274(v62, v61, &v83);
    v31 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v49 + 24, v49 + 32);
    v63 = v47;
    v42 = (int)v78;
    swift_bridgeObjectRelease_n(v63, 2);
    swift_bridgeObjectRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v70, "Deleted %s not-running jobs from session identifier %{public}s thats not in tasks %{public}s", (uint8_t *)v49, 0x20u);
    v64 = v71;
    swift_arrayDestroy(v71, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v49, -1, -1);
  }

  v65 = v81;
  v66 = v79;
  v37 = (uint64_t)v76;
  if (v42)
    v67 = 0;
  else
    v67 = countAndFlagsBits;
  *v76 = v67;
  swift_storeEnumTagMultiPayload(v37, v66, 0);
  v65(v37);

  v24 = v31;
LABEL_26:

  return sub_100007A28(v37, &qword_1005559C0);
}

uint64_t sub_10003D274(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];
  void *ObjectType;

  v6 = sub_10003D3A0(v13, 0, 0, 1, a1, a2);
  v8 = v13[0];
  if (v6)
  {
    v9 = v6;
    ObjectType = (void *)swift_getObjectType(v6, v7);
    v13[0] = v9;
    v10 = *a3;
    if (*a3)
    {
      sub_10003D344((uint64_t)v13, *a3);
      *a3 = v10 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v13[0] = a1;
    v13[1] = a2;
    v11 = *a3;
    if (*a3)
    {
      sub_10003D344((uint64_t)v13, *a3);
      *a3 = v11 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10003D380(v13);
  return v8;
}

uint64_t sub_10003D344(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10003D380(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10003D3A0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10003D558(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10003D558(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10003D5EC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100154348(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100154348(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10003D5EC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10003D760(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10003D760(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10003F544((uint64_t *)&unk_1005535B0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

id sub_10003D7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE v14[24];

  v5 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock), "lock");
  v6 = swift_allocObject(&unk_1004C5EE8, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = (_QWORD **)(v2 + OBJC_IVAR____TtC8Podcasts13BaseOperation__onFinishBlocks);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts13BaseOperation__onFinishBlocks, v14, 33, 0);
  v8 = *v7;
  swift_retain(a2);
  swift_retain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  *v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = sub_10003DA28(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = sub_10003DA28((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v8[2] = v11 + 1;
  v12 = &v8[2 * v11];
  v12[4] = sub_100029B3C;
  v12[5] = v6;
  swift_endAccess(v14);
  swift_release(v6);
  return objc_msgSend(*(id *)(v2 + v5), "unlock");
}

_QWORD *sub_10003D90C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_10003F544(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 17;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 4);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[2 * v11 + 4])
          memmove(v17, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10003DA3C(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10003DA28(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10003D90C(a1, a2, a3, a4, &qword_10055DF70, &qword_10055DF50);
}

uint64_t sub_10003DA3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 16 * a1 + 32;
    v8 = a3 + 16 * v5;
    if (v7 >= v8 || v7 + 16 * v5 <= a3)
    {
      v9 = sub_10003F544(a5);
      swift_arrayInitWithCopy(a3, v7, v5, v9);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_10003DB40(_QWORD *__dst, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain(v8);
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X14 }
    }
    if (v9 == 1)
    {
      v11 = *a2;
      swift_errorRetain(*a2);
      *v3 = v11;
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 16))(__dst);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

uint64_t sub_10003DC78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10003F544(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003DCBC(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t result;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  id v48;
  _QWORD *v49;
  uint64_t v50;

  v47 = a7;
  v44 = a5;
  v45 = a6;
  v43 = a1;
  v10 = type metadata accessor for DownloadJob(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_10003F544(&qword_100555998);
  __chkstk_darwin(v46);
  v42 = (_QWORD **)((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = objc_allocWithZone((Class)NSFetchRequest);
  v16 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v15, "initWithEntityName:", v16);

  v17 = sub_10003F544(&qword_1005559A0);
  v18 = swift_allocObject(v17, 192, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1003CB770;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  v19 = sub_10003E198();
  *(_QWORD *)(v18 + 64) = v19;
  *(_QWORD *)(v18 + 32) = 0xD000000000000011;
  *(_QWORD *)(v18 + 40) = 0x8000000100431530;
  if ((a3 & 1) != 0)
    v20 = 1936484398;
  else
    v20 = 0x7261646E6174732ELL;
  if ((a3 & 1) != 0)
    v21 = (void *)0xE400000000000000;
  else
    v21 = (void *)0xE900000000000064;
  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v49 = v43;
  v50 = a2;
  swift_bridgeObjectRetain(a2);
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23 = v49;
  v24 = v50;
  *(_QWORD *)(v18 + 96) = &type metadata for String;
  *(_QWORD *)(v18 + 104) = v19;
  *(_QWORD *)(v18 + 72) = v23;
  *(_QWORD *)(v18 + 80) = v24;
  *(_QWORD *)(v18 + 136) = &type metadata for String;
  *(_QWORD *)(v18 + 144) = v19;
  strcpy((char *)(v18 + 112), "taskIdentifier");
  *(_BYTE *)(v18 + 127) = -18;
  *(_QWORD *)(v18 + 176) = sub_10003F544(&qword_1005559A8);
  *(_QWORD *)(v18 + 184) = sub_10002F9C8((unint64_t *)&unk_1005559B0, &qword_1005559A8, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v18 + 152) = a4;
  swift_bridgeObjectRetain(a4);
  v25 = v18;
  v26 = v48;
  v27 = (void *)NSPredicate.init(format:_:)(0xD000000000000014, 0x8000000100431550, v25);
  objc_msgSend(v26, "setPredicate:", v27);

  v28 = type metadata accessor for CDDownloadJob();
  v29 = NSManagedObjectContext.fetch<A>(_:)(v26, v28);
  v30 = v29;
  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0)
      v41 = v29;
    else
      v41 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v29);
    v31 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease(v30);
  }
  else
  {
    v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v32 = v46;
  v33 = v45;
  if (!v31)
  {
    swift_bridgeObjectRelease(v30);
    v36 = _swiftEmptyArrayStorage;
LABEL_20:
    v40 = (uint64_t)v42;
    *v42 = v36;
    swift_storeEnumTagMultiPayload(v40, v32, 0);
    v33(v40);

    return sub_100007A28(v40, &qword_100555998);
  }
  v49 = _swiftEmptyArrayStorage;
  result = sub_10017B1B4(0, v31 & ~(v31 >> 63), 0);
  if ((v31 & 0x8000000000000000) == 0)
  {
    v35 = 0;
    v36 = v49;
    do
    {
      if ((v30 & 0xC000000000000001) != 0)
        v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v30);
      else
        v37 = *(id *)(v30 + 8 * v35 + 32);
      sub_100194020(v37, (uint64_t)v13);
      v49 = v36;
      v39 = v36[2];
      v38 = v36[3];
      if (v39 >= v38 >> 1)
      {
        sub_10017B1B4(v38 > 1, v39 + 1, 1);
        v36 = v49;
      }
      ++v35;
      v36[2] = v39 + 1;
      sub_10013BE30((uint64_t)v13, (uint64_t)v36+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v39, type metadata accessor for DownloadJob);
    }
    while (v31 != v35);
    swift_bridgeObjectRelease(v30);
    v33 = v45;
    v32 = v46;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for JobStorageError(uint64_t a1)
{
  uint64_t result;

  result = qword_1005590A0;
  if (!qword_1005590A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JobStorageError);
  return result;
}

unint64_t sub_10003E198()
{
  unint64_t result;

  result = qword_100554790;
  if (!qword_100554790)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100554790);
  }
  return result;
}

uint64_t sub_10003E1DC(uint64_t a1)
{
  uint64_t *v1;

  return sub_10003E1F0(a1, v1[7], v1[8], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10003E1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Strong;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t WitnessTable;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[24];

  v65 = a4;
  v66 = a6;
  v69 = a2;
  v64 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v63 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OperationResult(0, v16, v14, v15);
  v67 = *(_QWORD *)(v17 - 8);
  v68 = v17;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v62 = (uint64_t *)((char *)&v60 - v22);
  v23 = *(_QWORD *)(a7 - 8);
  v24 = __chkstk_darwin(v21);
  v61 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v60 - v26;
  v28 = type metadata accessor for Result(0, a5, a7, a8);
  __chkstk_darwin(v28);
  v30 = (char *)&v60 - v29;
  v31 = a3 + 16;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))((char *)&v60 - v29, a1, v28);
  if (swift_getEnumCaseMultiPayload(v30, v28) == 1)
  {
    v64 = *(_QWORD *)(v23 + 32);
    v33 = ((uint64_t (*)(char *, char *, uint64_t))v64)(v27, v30, a7);
    v34 = static os_log_type_t.error.getter(v33);
    v35 = sub_10003F544(&qword_1005559A0);
    v36 = swift_allocObject(v35, 72, 7);
    *(_OWORD *)(v36 + 16) = xmmword_1003CA200;
    v37 = Error.localizedDescription.getter(a7, a8);
    v39 = v38;
    *(_QWORD *)(v36 + 56) = &type metadata for String;
    *(_QWORD *)(v36 + 64) = sub_10003E198();
    *(_QWORD *)(v36 + 32) = v37;
    *(_QWORD *)(v36 + 40) = v39;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v69, "Storage opeartion finished with error %{public}s.", 49, 2, v36);
    swift_bridgeObjectRelease(v36);
    swift_beginAccess(v31, v75, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v31);
    if (Strong)
    {
      v41 = (void *)Strong;
      v42 = v61;
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v61, v27, a7);
      v43 = _getErrorEmbeddedNSError<A>(_:)(v42, a7, a8);
      if (v43)
      {
        v44 = v43;
        (*(void (**)(char *, uint64_t))(v23 + 8))(v42, a7);
      }
      else
      {
        v44 = swift_allocError(a7, a8, 0, 0);
        ((void (*)(uint64_t, char *, uint64_t))v64)(v55, v42, a7);
      }
      v56 = (uint64_t)v62;
      *v62 = v44;
      v57 = v68;
      swift_storeEnumTagMultiPayload(v56, v68, 1);
      v70 = v65;
      v71 = a5;
      v72 = v66;
      v73 = a7;
      v74 = a8;
      v58 = type metadata accessor for StorageOperation(0, (uint64_t)&v70);
      WitnessTable = swift_getWitnessTable(&unk_1003D12C0, v58);
      sub_100044860(v56, v58, WitnessTable, (uint64_t)&off_1004C5DF8, (uint64_t)&off_1004C5DD8);

      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v56, v57);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, a7);
  }
  else
  {
    v46 = v63;
    v45 = v64;
    v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v64 + 32))(v63, v30, a5);
    v48 = static os_log_type_t.debug.getter(v47);
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v69, "Storage operation finished successfully.", 40, 2, _swiftEmptyArrayStorage);
    swift_beginAccess(v31, v75, 0, 0);
    v49 = swift_unknownObjectWeakLoadStrong(v31);
    if (v49)
    {
      v50 = (void *)v49;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v20, v46, a5);
      v51 = v68;
      swift_storeEnumTagMultiPayload(v20, v68, 0);
      v70 = v65;
      v71 = a5;
      v72 = v66;
      v73 = a7;
      v74 = a8;
      v52 = type metadata accessor for StorageOperation(0, (uint64_t)&v70);
      v53 = swift_getWitnessTable(&unk_1003D12C0, v52);
      sub_100044860((uint64_t)v20, v52, v53, (uint64_t)&off_1004C5DF8, (uint64_t)&off_1004C5DD8);

      (*(void (**)(char *, uint64_t))(v67 + 8))(v20, v51);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v46, a5);
  }
}

uint64_t sub_10003E674@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(_QWORD **);
  uint64_t v33;
  uint64_t result;
  void *v35;
  os_log_type_t type;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = v3;
  v7 = *a1;
  v8 = static os_log_type_t.default.getter();
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v10 = static OS_os_log.downloads.getter(v9);
  swift_bridgeObjectRetain(v7);
  v39 = a3;
  if (os_log_type_enabled(v10, v8))
  {
    swift_bridgeObjectRetain(v7);
    type = v8;
    v11 = swift_slowAlloc(22, -1);
    v37 = (_QWORD *)swift_slowAlloc(32, -1);
    v40 = v37;
    *(_DWORD *)v11 = 134349314;
    v43 = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2082;
    v12 = type metadata accessor for DownloadJob(0);
    swift_bridgeObjectRetain(v7);
    v14 = Array.description.getter(v13, v12);
    v16 = v15;
    swift_bridgeObjectRelease(v7);
    v43 = sub_10003D274(v14, v16, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "%{public}ld jobs retreived from storage %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v7);
  }

  v17 = &_swiftEmptyDictionarySingleton;
  v40 = &_swiftEmptyDictionarySingleton;
  v18 = *(_QWORD *)(v7 + 16);
  if (v18)
  {
    v19 = *(_QWORD *)(type metadata accessor for DownloadJob(0) - 8);
    v20 = v7 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v21 = *(_QWORD *)(v19 + 72);
    swift_bridgeObjectRetain(v7);
    while (1)
    {
      sub_1001E4F84((uint64_t)&v40, v20, a2);
      if (v4)
        break;
      v4 = 0;
      v20 += v21;
      if (!--v18)
      {
        swift_bridgeObjectRelease(v7);
        v17 = v40;
        goto LABEL_9;
      }
    }
    v35 = v40;
    swift_bridgeObjectRelease(v7);
    result = swift_bridgeObjectRelease(v35);
    __break(1u);
  }
  else
  {
LABEL_9:
    v22 = static os_log_type_t.default.getter();
    v23 = v22;
    v24 = static OS_os_log.downloads.getter(v22);
    swift_bridgeObjectRetain(v17);
    if (os_log_type_enabled(v24, v23))
    {
      swift_bridgeObjectRetain(v17);
      v25 = swift_slowAlloc(22, -1);
      v38 = (_QWORD *)swift_slowAlloc(32, -1);
      v40 = v38;
      *(_DWORD *)v25 = 134349314;
      v43 = v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v25 + 4, v25 + 12);
      *(_WORD *)(v25 + 12) = 2082;
      v26 = type metadata accessor for DownloadJob(0);
      swift_bridgeObjectRetain(v17);
      v27 = sub_10003F544(&qword_100564DA0);
      v28 = sub_10003FAE8();
      v29 = Dictionary.description.getter(v17, v26, v27, v28);
      v31 = v30;
      swift_bridgeObjectRelease(v17);
      v43 = sub_10003D274(v29, v31, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v25 + 14, v25 + 22);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v24, v23, "Sync completed. Number of jobs running: %{public}ld. %{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(v17);
    }

    v32 = *(void (**)(_QWORD **))(a2 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
    if (v32)
    {
      v33 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8);
      v42 = sub_10003F544((uint64_t *)&unk_100564DF0);
      v40 = v17;
      v41 = 0;
      swift_bridgeObjectRetain(v17);
      sub_10002CA20((uint64_t)v32, v33);
      v32(&v40);
      sub_10002CA30((uint64_t)v32, v33);
      sub_10003D380(&v40);
    }
    sub_100044BF0();
    result = swift_bridgeObjectRelease(v17);
    *(_QWORD *)v39 = 0;
    *(_BYTE *)(v39 + 8) = 0;
  }
  return result;
}

uint64_t sub_10003EAF4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t type metadata accessor for DownloadJob(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100558E48, (uint64_t)&nominal type descriptor for DownloadJob);
}

BOOL _s8Podcasts20WidgetNowPlayingInfoV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  char v48;
  char v49;
  _BOOL8 result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  void (*v63)(_BYTE *, uint64_t);
  int *v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  void (*v75)(_BYTE *, uint64_t, uint64_t);
  uint64_t v76;
  char v77;
  char v78;
  void (*v79)(_BYTE *, uint64_t);
  _BYTE *v80;
  uint64_t v81;
  double *v82;
  char v83;
  double *v84;
  int v85;
  uint64_t v86;
  double *v87;
  char v88;
  double *v89;
  int v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  char v101;
  void (*v102)(_BYTE *, uint64_t);
  _BYTE v103[12];
  int v104;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;

  v4 = type metadata accessor for Date(0);
  v118 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v117 = &v103[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_10003F544(&qword_100558EB8);
  v7 = __chkstk_darwin(v6);
  v9 = &v103[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v7);
  v12 = (int *)&v103[-v11];
  __chkstk_darwin(v10);
  v14 = (int *)&v103[-v13];
  v15 = sub_10003F544(&qword_1005522F0);
  v16 = __chkstk_darwin(v15);
  v18 = &v103[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v16);
  v20 = __chkstk_darwin(v19);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  v23 = __chkstk_darwin(v22);
  v24 = __chkstk_darwin(v23);
  v25 = __chkstk_darwin(v24);
  v27 = &v103[-v26];
  __chkstk_darwin(v25);
  v35 = &v103[-v32];
  v36 = *(_QWORD *)(a1 + 8);
  v37 = a2[1];
  if (!v36)
  {
    if (v37)
      return 0;
    goto LABEL_8;
  }
  if (!v37)
    return 0;
  v38 = *(_QWORD *)a1;
  v39 = *a2;
  if (*(_QWORD *)a1 == *a2 && v36 == v37)
    goto LABEL_8;
  v114 = v6;
  v115 = v28;
  v112 = a1;
  v113 = v12;
  v40 = a2;
  v41 = v33;
  v42 = v29;
  v116 = v4;
  v43 = v34;
  v44 = v14;
  v45 = v30;
  v111 = v27;
  v46 = &v103[-v32];
  v47 = v31;
  v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v36, v39, v37, 0);
  v31 = v47;
  v35 = v46;
  v30 = v45;
  v14 = v44;
  v34 = v43;
  v28 = v115;
  v4 = v116;
  v29 = v42;
  v33 = v41;
  a2 = v40;
  v27 = v111;
  a1 = v112;
  v12 = v113;
  v6 = v114;
  v49 = v48;
  result = 0;
  if ((v49 & 1) != 0)
  {
LABEL_8:
    if (*(unsigned __int8 *)(a1 + 16) != *((unsigned __int8 *)a2 + 16))
      return 0;
    v107 = v31;
    v108 = v33;
    v115 = v28;
    v111 = (_BYTE *)v30;
    v112 = v29;
    v109 = v9;
    v110 = v34;
    v106 = v18;
    v51 = type metadata accessor for WidgetNowPlayingInfo(0);
    v52 = a1 + *(int *)(v51 + 24);
    v116 = v4;
    sub_100007A64(v52, (uint64_t)v35, &qword_1005522F0);
    v113 = (int *)v51;
    sub_100007A64((uint64_t)a2 + *(int *)(v51 + 24), (uint64_t)v27, &qword_1005522F0);
    v53 = (uint64_t)v14 + *(int *)(v6 + 48);
    sub_100007A64((uint64_t)v35, (uint64_t)v14, &qword_1005522F0);
    v54 = v116;
    sub_100007A64((uint64_t)v27, v53, &qword_1005522F0);
    v55 = (uint64_t)v35;
    v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
    if (v56((uint64_t)v14, 1, v54) == 1)
    {
      sub_100007A28((uint64_t)v27, &qword_1005522F0);
      v57 = v116;
      sub_100007A28(v55, &qword_1005522F0);
      if (v56(v53, 1, v57) != 1)
        goto LABEL_20;
      v58 = v56;
      sub_100007A28((uint64_t)v14, &qword_1005522F0);
      v59 = v57;
    }
    else
    {
      v114 = v55;
      v60 = v115;
      sub_100007A64((uint64_t)v14, v115, &qword_1005522F0);
      v105 = v56;
      if (v56(v53, 1, v54) == 1)
      {
        sub_100007A28((uint64_t)v27, &qword_1005522F0);
        sub_100007A28(v114, &qword_1005522F0);
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v60, v54);
        goto LABEL_20;
      }
      v61 = v117;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v118 + 32))(v117, v53, v54);
      v62 = sub_100026844(&qword_100558EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v59 = v54;
      v104 = dispatch thunk of static Equatable.== infix(_:_:)(v60, v61, v54, v62);
      v63 = *(void (**)(_BYTE *, uint64_t))(v118 + 8);
      v63(v61, v59);
      sub_100007A28((uint64_t)v27, &qword_1005522F0);
      sub_100007A28(v114, &qword_1005522F0);
      v63((_BYTE *)v60, v59);
      sub_100007A28((uint64_t)v14, &qword_1005522F0);
      v58 = v105;
      if ((v104 & 1) == 0)
        return 0;
    }
    v64 = v113;
    v65 = v58;
    v66 = v112;
    sub_100007A64(a1 + v113[7], v112, &qword_1005522F0);
    v67 = (uint64_t)a2 + v64[7];
    v68 = (uint64_t)v111;
    sub_100007A64(v67, (uint64_t)v111, &qword_1005522F0);
    v14 = v12;
    v69 = (uint64_t)v12 + *(int *)(v6 + 48);
    sub_100007A64(v66, (uint64_t)v14, &qword_1005522F0);
    sub_100007A64(v68, v69, &qword_1005522F0);
    if (v65((uint64_t)v14, 1, v59) == 1)
    {
      sub_100007A28(v68, &qword_1005522F0);
      sub_100007A28(v66, &qword_1005522F0);
      if (v65(v69, 1, v116) == 1)
      {
        v70 = v65;
        sub_100007A28((uint64_t)v14, &qword_1005522F0);
LABEL_24:
        v81 = v113[8];
        v82 = (double *)(a1 + v81);
        v83 = *(_BYTE *)(a1 + v81 + 8);
        v84 = (double *)((char *)a2 + v81);
        v85 = *((unsigned __int8 *)a2 + v81 + 8);
        if ((v83 & 1) != 0)
        {
          if (!v85)
            return 0;
        }
        else
        {
          if (*v82 != *v84)
            LOBYTE(v85) = 1;
          if ((v85 & 1) != 0)
            return 0;
        }
        v86 = v113[9];
        v87 = (double *)(a1 + v86);
        v88 = *(_BYTE *)(a1 + v86 + 8);
        v89 = (double *)((char *)a2 + v86);
        v90 = *((unsigned __int8 *)a2 + v86 + 8);
        if ((v88 & 1) != 0)
        {
          if (!v90)
            return 0;
        }
        else
        {
          if (*v87 != *v89)
            LOBYTE(v90) = 1;
          if ((v90 & 1) != 0)
            return 0;
        }
        v91 = v113;
        v92 = v107;
        sub_100007A64(a1 + v113[10], v107, &qword_1005522F0);
        v93 = v108;
        sub_100007A64((uint64_t)a2 + v91[10], v108, &qword_1005522F0);
        v94 = (uint64_t)v109;
        v95 = (uint64_t)&v109[*(int *)(v6 + 48)];
        sub_100007A64(v92, (uint64_t)v109, &qword_1005522F0);
        sub_100007A64(v93, v95, &qword_1005522F0);
        v96 = v116;
        if (v70(v94, 1, v116) == 1)
        {
          sub_100007A28(v93, &qword_1005522F0);
          v94 = (uint64_t)v109;
          sub_100007A28(v92, &qword_1005522F0);
          if (v70(v95, 1, v96) == 1)
          {
            sub_100007A28(v94, &qword_1005522F0);
            return 1;
          }
          goto LABEL_41;
        }
        v97 = (uint64_t)v106;
        sub_100007A64(v94, (uint64_t)v106, &qword_1005522F0);
        if (v70(v95, 1, v96) == 1)
        {
          sub_100007A28(v93, &qword_1005522F0);
          sub_100007A28(v92, &qword_1005522F0);
          (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v97, v96);
LABEL_41:
          v72 = v94;
          goto LABEL_21;
        }
        v99 = v117;
        v98 = v118;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v118 + 32))(v117, v95, v96);
        v100 = sub_100026844(&qword_100558EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v101 = dispatch thunk of static Equatable.== infix(_:_:)(v97, v99, v96, v100);
        v102 = *(void (**)(_BYTE *, uint64_t))(v98 + 8);
        v102(v99, v96);
        sub_100007A28(v93, &qword_1005522F0);
        sub_100007A28(v92, &qword_1005522F0);
        v102((_BYTE *)v97, v96);
        sub_100007A28(v94, &qword_1005522F0);
        return (v101 & 1) != 0;
      }
    }
    else
    {
      v71 = v110;
      sub_100007A64((uint64_t)v14, v110, &qword_1005522F0);
      if (v65(v69, 1, v59) != 1)
      {
        v74 = v117;
        v73 = v118;
        v75 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v118 + 32);
        v105 = v65;
        v75(v117, v69, v59);
        v76 = sub_100026844(&qword_100558EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v77 = dispatch thunk of static Equatable.== infix(_:_:)(v71, v74, v59, v76);
        v114 = v6;
        v78 = v77;
        v79 = *(void (**)(_BYTE *, uint64_t))(v73 + 8);
        v80 = v74;
        v70 = v105;
        v79(v80, v59);
        sub_100007A28((uint64_t)v111, &qword_1005522F0);
        sub_100007A28(v112, &qword_1005522F0);
        v6 = v114;
        v79((_BYTE *)v71, v59);
        sub_100007A28((uint64_t)v14, &qword_1005522F0);
        if ((v78 & 1) == 0)
          return 0;
        goto LABEL_24;
      }
      sub_100007A28((uint64_t)v111, &qword_1005522F0);
      sub_100007A28(v112, &qword_1005522F0);
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v71, v59);
    }
LABEL_20:
    v72 = (uint64_t)v14;
LABEL_21:
    sub_100007A28(v72, &qword_100558EB8);
    return 0;
  }
  return result;
}

uint64_t sub_10003F450(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 64);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4);
  return a1;
}

uint64_t sub_10003F49C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 3:
    case 6:
    case 8:
      result = a2;
      goto LABEL_3;
    case 4:
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(a8);
      result = a6;
LABEL_3:
      result = swift_bridgeObjectRelease(result);
      break;
    case 7:
      swift_bridgeObjectRelease(a2);
      result = sub_1001691E8(a3, a4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10003F544(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void MTEpisode.listenNowReason.getter(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t);
  unsigned int *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(v2, "listenNowEpisode")
    || (v8 = objc_msgSend(v2, "podcast")) == 0)
  {
    v11 = type metadata accessor for EpisodeListenNowReason(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v13 = a1;
    v14 = 1;
LABEL_11:
    v12(v13, v14, 1, v11);
    return;
  }
  v9 = v8;
  if (objc_msgSend(v2, "isVisuallyPlayed"))
  {

    v10 = (unsigned int *)&enum case for EpisodeListenNowReason.playAgain(_:);
LABEL_10:
    v15 = *v10;
    v16 = type metadata accessor for EpisodeListenNowReason(0);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104))(a1, v15, v16);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v13 = a1;
    v14 = 0;
    v11 = v16;
    goto LABEL_11;
  }
  if ((objc_msgSend(v2, "isPartiallyPlayed") & 1) != 0
    || (objc_msgSend(v2, "isPartiallyPlayedBackCatalogItem") & 1) != 0
    || objc_msgSend(v2, "isPlayheadPartiallyPlayed"))
  {

    v10 = (unsigned int *)&enum case for EpisodeListenNowReason.resume(_:);
    goto LABEL_10;
  }
  v18 = Date.init()();
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((objc_msgSend(v9, "subscribed") & 1) == 0)
  {
    if (objc_msgSend(v2, "isBookmarked"))
    {
      objc_msgSend(v2, "lastBookmarkedDate");
      v21 = v20;
      objc_msgSend(v9, "lastDatePlayed");
      if (v22 < v21)
        goto LABEL_22;
    }
  }
  objc_msgSend(v9, "lastDatePlayed");
  if (v23 > 0.0)
  {
    if (objc_msgSend(v2, "episodeLevel"))
    {

    }
    else
    {
      objc_msgSend(v2, "pubDate");
      v33 = v32;

      if (v19 < v33 + 5184000.0)
      {
        v34 = (unsigned int *)&enum case for EpisodeListenNowReason.new(_:);
LABEL_27:
        v35 = *v34;
        v36 = type metadata accessor for EpisodeListenNowReason(0);
        v37 = *(_QWORD *)(v36 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 104))(a1, v35, v36);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(a1, 0, 1, v36);
        return;
      }
    }
    v34 = (unsigned int *)&enum case for EpisodeListenNowReason.next(_:);
    goto LABEL_27;
  }
  if (objc_msgSend(v9, "subscribed"))
  {
    objc_msgSend(v9, "addedDate");
    v25 = v24;

    v26 = type metadata accessor for EpisodeListenNowReason(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104);
    if (v19 >= v25 + 5184000.0)
      v29 = (unsigned int *)&enum case for EpisodeListenNowReason.followed(_:);
    else
      v29 = (unsigned int *)&enum case for EpisodeListenNowReason.recentlyFollowed(_:);
LABEL_30:
    v28(a1, *v29, v26);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(a1, 0, 1, v26);
    return;
  }
  if (objc_msgSend(v2, "isBookmarked"))
  {
LABEL_22:
    objc_msgSend(v2, "lastBookmarkedDate");
    v31 = v30;

    v26 = type metadata accessor for EpisodeListenNowReason(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104);
    if (v19 >= v31 + 5184000.0)
      v29 = (unsigned int *)&enum case for EpisodeListenNowReason.saved(_:);
    else
      v29 = (unsigned int *)&enum case for EpisodeListenNowReason.recentlySaved(_:);
    goto LABEL_30;
  }
  v38 = type metadata accessor for EpisodeListenNowReason(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a1, 1, 1, v38);

}

uint64_t sub_10003F970(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for WidgetNowPlayingInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_10055A838;
  if (!qword_10055A838)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetNowPlayingInfo);
  return result;
}

uint64_t destroy for WidgetNowPlayingInfo(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + a2[7];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  v9 = a1 + a2[10];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v9, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  return result;
}

uint64_t type metadata accessor for CDDownloadJob()
{
  return objc_opt_self(_TtC8Podcasts13CDDownloadJob);
}

unint64_t sub_10003FAE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005594C0;
  if (!qword_1005594C0)
  {
    v1 = type metadata accessor for DownloadJob(255);
    result = swift_getWitnessTable(&unk_1003CD734, v1);
    atomic_store(result, (unint64_t *)&qword_1005594C0);
  }
  return result;
}

uint64_t sub_10003FB30(uint64_t a1)
{
  uint64_t v1;

  return sub_100045830(a1, v1, (uint64_t *)&unk_100564DF0, (void (*)(uint64_t, uint64_t))sub_100045994, (void (*)(uint64_t, uint64_t))sub_100045978);
}

void sub_10003FDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004073C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a15, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_100040BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100040D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100040ECC(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id obj;
  uint64_t v16;
  _QWORD block[4];
  id v18;
  uint8_t *v19;
  _QWORD v20[5];
  NSObject *v21;
  uint8_t *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[8];
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feedManager"));
  v3 = objc_msgSend(v2, "abortUpdatesIfNetworkUnreachable:", *(unsigned __int8 *)(a1 + 64));

  if (v3)
  {
    v4 = _MTLogCategoryFeedUpdate();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Skipping feed update due to network not being reachable", buf, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    *(_QWORD *)buf = 0;
    v28 = buf;
    v29 = 0x2020000000;
    v30 = 0;
    v6 = dispatch_group_create();
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    obj = *(id *)(a1 + 40);
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    if (v7)
    {
      v16 = *(_QWORD *)v24;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v24 != v16)
            objc_enumerationMutation(obj);
          v9 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v8);
          dispatch_group_enter(v6);
          v10 = *(void **)(a1 + 32);
          v11 = *(unsigned __int8 *)(a1 + 64);
          v12 = *(unsigned __int8 *)(a1 + 65);
          v13 = *(unsigned __int8 *)(a1 + 66);
          v14 = *(_QWORD *)(a1 + 56);
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472;
          v20[2] = sub_1000EE62C;
          v20[3] = &unk_1004AAC18;
          v20[4] = v10;
          v22 = buf;
          v21 = v6;
          objc_msgSend(v10, "_updatePodcastWithUUID:userInitiated:forced:useBackgroundFetch:source:startedUpdateCallback:", v9, v11, v12, v13, v14, v20);

          v8 = (char *)v8 + 1;
        }
        while (v7 != v8);
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
      }
      while (v7);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000EE6F0;
    block[3] = &unk_1004AABA0;
    v19 = buf;
    v18 = *(id *)(a1 + 48);
    dispatch_group_notify(v6, (dispatch_queue_t)&_dispatch_main_q, block);

    _Block_object_dispose(buf, 8);
  }
}

void sub_100041168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_100041520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 224), 8);
  _Unwind_Resume(a1);
}

BOOL sub_10004155C()
{
  if (+[MTApplication localLibraryUpdatesDisabled](MTApplication, "localLibraryUpdatesDisabled")
    || (+[PFClientUtil isRunningOnHomepod](PFClientUtil, "isRunningOnHomepod") & 1) != 0)
  {
    return 1;
  }
  if (qword_100567500 != -1)
    dispatch_once(&qword_100567500, &stru_1004AACD8);
  return byte_100567508 != 0;
}

uint64_t _s8Podcasts11FeedManagerC32abortUpdatesIfNetworkUnreachable13userInitiatedS2b_tF_0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  void *v11;
  unsigned int v12;
  __n128 v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t)objc_msgSend((id)objc_opt_self(MTReachability), "sharedInstance");
  if (result)
  {
    v11 = (void *)result;
    v12 = objc_msgSend((id)result, "isReachable");

    result = v12 ^ 1;
    if ((v12 & 1) == 0 && (a1 & 1) != 0)
    {
      sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
      v14 = (void *)static OS_dispatch_queue.main.getter(v13);
      aBlock[4] = sub_100292DC0;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100027AF8;
      aBlock[3] = &unk_1004BB9E0;
      v15 = _Block_copy(aBlock);
      static DispatchQoS.unspecified.getter(v15);
      aBlock[0] = _swiftEmptyArrayStorage;
      v16 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v22 = v6;
      v17 = v3;
      v18 = v16;
      v19 = sub_10003F544((uint64_t *)&unk_10055B200);
      v20 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v2, v18);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v15);
      _Block_release(v15);

      (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
      return 1;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10004208C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

int64_t sub_100042A34(id a1, MTEpisode *a2, MTEpisode *a3)
{
  MTEpisode *v4;
  MTEpisode *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  int64_t v10;
  void *v11;
  id v12;
  void *v13;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v4, "podcast"));
  v7 = objc_msgSend(v6, "sortOrder");
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v5, "podcast"));
  v9 = objc_msgSend(v8, "sortOrder");

  if ((uint64_t)v7 <= (uint64_t)v9)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v4, "podcast"));
    v12 = objc_msgSend(v11, "sortOrder");
    v13 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v5, "podcast"));
    v10 = (uint64_t)v12 < (uint64_t)objc_msgSend(v13, "sortOrder");

  }
  else
  {
    v10 = -1;
  }

  return v10;
}

int64_t sub_100042B00(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  MTPodcastPlaylistSettings *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](a2, "podcast"));
  v6 = objc_msgSend(v5, "sortOrder");

  v7 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](v4, "podcast"));
  v8 = objc_msgSend(v7, "sortOrder");

  if ((uint64_t)v6 > (uint64_t)v8)
    return -1;
  else
    return (uint64_t)v6 < (uint64_t)v8;
}

uint64_t sub_100042C18(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *a3;
  return result;
}

void sub_100042C54(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "instanceIdentifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "UUIDString"));
  v8 = objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }

}

void sub_100042F64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000431CC@<X0>(uint64_t *a1@<X3>, unint64_t *a2@<X4>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t result;

  v6 = sub_10003F544(a1);
  v7 = sub_10002F9C8(a2, a1, (uint64_t)&protocol conformance descriptor for Set<A>);
  result = Collection.isNotEmpty.getter(v6, v7, v8);
  *a3 = result & 1;
  return result;
}

void sub_1000434B0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;

  v3 = a2;
  v16 = 0;
  v15 = 0;
  objc_msgSend(v3, "getResourceValue:forKey:error:", &v16, NSURLContentTypeKey, &v15);
  v4 = v16;
  v5 = v15;
  v6 = v5;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 0;
  if (v7 && (objc_msgSend(v4, "conformsToType:", UTTypeImage) & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTImageStoreConstants fileExtension](MTImageStoreConstants, "fileExtension"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "URLByDeletingPathExtension"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "URLByAppendingPathExtension:", v8));

    if ((!objc_msgSend(v4, "isEqual:", *(_QWORD *)(a1 + 32))
       || (objc_msgSend(v3, "isEqual:", v10) & 1) == 0)
      && (v11 = *(void **)(a1 + 40),
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier")),
          LODWORD(v11) = objc_msgSend(v11, "copyImageFromSourceUrl:sourceFileType:to:discardTransparency:enforceSquare:maxDimensionInPixels:", v3, v12, v10, 0, 0, 1.79769313e308), v12, !(_DWORD)v11)|| (objc_msgSend(v3, "isEqual:", v10) & 1) == 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      objc_msgSend(v13, "removeItemAtURL:error:", v3, 0);

    }
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](IMLogger, "sharedLogger"));
    objc_msgSend(v14, "logFile:lineNumber:format:", "/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/Migration/MTLibraryMigrator.m", 2856, CFSTR("Cannot convert the file of type %@ at URL %@. Ignoring. Error %@"), v4, v3, v6);

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    objc_msgSend(v8, "removeItemAtURL:error:", v3, 0);
  }

}

id sub_100043698(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "beginBackgroundTask:", CFSTR("com.apple.podcasts.MTPodcastDerivedPropertyObserver.processPersistentHistoryTransactions"));
}

void sub_100043DB0(uint64_t a1, void *a2)
{
  unsigned int v3;
  id WeakRetained;
  uint64_t v5;
  id v6;

  v3 = objc_msgSend(a2, "isEqualToString:", kMTRemoteSkipInsteadOfNextTrackDefaultKey);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = WeakRetained;
  if (v3)
    objc_msgSend(WeakRetained, "updateRemoteSkipPreferenceFromDefaults:", v5);
  else
    objc_msgSend(WeakRetained, "updatePreferredSkipDurationsFromUserDefaults:forCommandCenter:", v5, *(_QWORD *)(a1 + 40));

}

uint64_t sub_100044658(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *);
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  ObjectType = swift_getObjectType(v2, a2);
  v5 = (_QWORD *)(swift_isaMask & *v2);
  v6 = v5[46];
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(ObjectType);
  v9 = (char *)&v21 - v8;
  v12 = type metadata accessor for OperationResult(0, v5[47], v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v22 = v12;
  v23 = v13;
  v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  v16 = (char *)&v21 - v15;
  v17 = *(void (**)(char *))((char *)v3 + v5[49]);
  WitnessTable = swift_getWitnessTable(&unk_1003D7474, ObjectType);
  sub_100044F10(ObjectType, WitnessTable, (uint64_t)v9);
  v17(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v19 = swift_getWitnessTable(&unk_1003D7458, ObjectType);
  sub_100044860((uint64_t)v16, ObjectType, v19, (uint64_t)&off_1004C5DF8, (uint64_t)&off_1004C5DD8);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v22);
}

uint64_t sub_100044860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(_QWORD *, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  _QWORD v25[4];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_100471BF8, &unk_100471C00);
  v12 = type metadata accessor for OperationResult(0, AssociatedTypeWitness, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (_QWORD *)((char *)v25 - v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a2, a5);
  if (v16)
  {
    v18 = (void (*)(_QWORD *))v16;
    v19 = v17;
    v25[3] = v12;
    v20 = sub_1000242A8(v25);
    v21 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v13 + 16);
    v21(v20, a1, v12);
    v18(v25);
    sub_10002CA30((uint64_t)v18, v19);
    sub_10003D380(v25);
  }
  else
  {
    v21 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v13 + 16);
  }
  v21(v15, a1, v12);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    v22 = *v15;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 88);
    swift_errorRetain(*v15);
    v23(v22, a2, a4);
    swift_errorRelease(v22);
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a2, a4);
}

uint64_t sub_1000449E0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_errorRelease(*a1);
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_100044A28 + 4 * byte_1003D6E8F[v5]))();
  }
}

_BYTE *sub_100044A88(_BYTE *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = *a2;
    swift_errorRetain(*a2);
    *(_QWORD *)__dst = v8;
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

void sub_100044BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t, __n128);
  uint64_t v6;
  __n128 v7;

  v1 = v0;
  v2 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock), "lock");
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation__error);
  v4 = *(void **)(v1 + v2);
  swift_errorRetain(v3);
  objc_msgSend(v4, "unlock");
  if (v3)
  {
    v5 = *(void (**)(uint64_t, __n128))(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation_onError);
    if (v5)
    {
      v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8);
      v7 = swift_retain(v6);
      v5(v3, v7);
      sub_10002CA30((uint64_t)v5, v6);
    }
    swift_errorRelease(v3);
  }
  sub_100044C9C();
  sub_100044D6C();
}

uint64_t sub_100044C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  _BYTE v11[24];

  v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock), "lock");
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__onFinishBlocks);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__onFinishBlocks, v11, 0, 0);
  v3 = *v2;
  v4 = *(void **)(v0 + v1);
  swift_bridgeObjectRetain(v3);
  objc_msgSend(v4, "unlock");
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(v3);
    v6 = (_QWORD *)(v3 + 40);
    do
    {
      v8 = (void (*)(uint64_t))*(v6 - 1);
      v7 = *v6;
      v9 = swift_retain(*v6);
      v8(v9);
      swift_release(v7);
      v6 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v3);
  }
  return swift_bridgeObjectRelease(v3);
}

void sub_100044D6C()
{
  char *v0;
  NSString v1;
  NSString v2;
  uint64_t v3;
  NSString v4;
  id v5;

  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "willChangeValueForKey:", v1);

  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "willChangeValueForKey:", v2);

  v3 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8Podcasts13BaseOperation_lock], "lock");
  if (v0[OBJC_IVAR____TtC8Podcasts13BaseOperation__state] != 2)
    v0[OBJC_IVAR____TtC8Podcasts13BaseOperation__state] = 2;
  objc_msgSend(*(id *)&v0[v3], "unlock");
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "didChangeValueForKey:", v4);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "didChangeValueForKey:", v5);

}

uint64_t sub_100044EB8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x128))();
}

uint64_t sub_100044ED4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  sub_10002CA20(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8));
  return v1;
}

uint64_t sub_100044F10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  AssociatedTypeWitness = (_QWORD *)swift_getAssociatedTypeWitness(255, a2, a1, &unk_100471BB4, &unk_100471BBC);
  v9 = type metadata accessor for OperationResult(0, (uint64_t)AssociatedTypeWitness, v7, v8);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - v10;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if (!EnumCaseMultiPayload)
    return (*(uint64_t (**)(uint64_t, char *, _QWORD *))(*(AssociatedTypeWitness - 1) + 32))(a3, v11, AssociatedTypeWitness);
  if (EnumCaseMultiPayload != 2)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000005CLL, 0x800000010043A070, "Podcasts/BaseOperation.swift", 28, 2, 141, 0);
LABEL_9:
    __break(1u);
    return result;
  }
  if (AssociatedTypeWitness != (_QWORD *)((char *)&type metadata for () + 8))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000054, 0x800000010043A0D0, "Podcasts/BaseOperation.swift", 28, 2, 139, 0);
    goto LABEL_9;
  }
  return swift_dynamicCast(a3, v13, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, 7);
}

uint64_t sub_1000450B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t type metadata accessor for OperationResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000450B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OperationResult);
}

void sub_1000450E8()
{
  uint64_t v0;

  sub_1000450F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000450F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    swift_beginAccess(a2 + 16, &v14, 0, 0);
    v6 = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (v6)
    {
      v8 = v6;
      v9 = *(_QWORD *)(a2 + 24);
      ObjectType = swift_getObjectType(v6, v7);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 80))(ObjectType, v9);
      swift_unknownObjectRelease(v8);
    }
    else
    {
      v11 = 0;
    }
    v12 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
    objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC8Podcasts13BaseOperation_lock], "lock");
    v13 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Podcasts13BaseOperation__error];
    *(_QWORD *)&v5[OBJC_IVAR____TtC8Podcasts13BaseOperation__error] = v11;
    swift_errorRetain(v11);
    swift_errorRelease(v13);
    objc_msgSend(*(id *)&v5[v12], "unlock");
    swift_errorRelease(v11);

  }
}

uint64_t sub_1000451EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock), "lock");
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__error);
  v3 = *(void **)(v0 + v1);
  swift_errorRetain(v2);
  objc_msgSend(v3, "unlock");
  return v2;
}

uint64_t sub_100045254@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9[24];

  v3 = swift_isaMask & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x180);
  swift_beginAccess(v4, v9, 0, 0);
  v7 = type metadata accessor for OperationResult(0, *(_QWORD *)(v3 + 368), v5, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v4, v7);
}

uint64_t sub_1000452D8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9[24];

  v3 = swift_isaMask & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x198);
  swift_beginAccess(v4, v9, 0, 0);
  v7 = type metadata accessor for OperationResult(0, *(_QWORD *)(v3 + 368), v5, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v4, v7);
}

uint64_t sub_100045358@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10003E674(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_100045370(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100045388(a1, *(void **)(v2 + 16), a2);
}

void sub_100045388(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v4 = *a1;
  v5 = a2;
  v6 = sub_1001E53D0(v4, (uint64_t)v5);

  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = 0;
}

uint64_t sub_1000453F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100045408(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_100045408@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];

  v5 = *a1;
  v6 = swift_allocObject(&unk_1004C3648, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16, a2);
  v7 = sub_10033F4E8(v5, sub_100340C8C, v6);
  swift_release(v6);
  v8 = a2;
  v9 = (uint64_t)sub_1000455A4((uint64_t)v7, (uint64_t)v8);
  swift_bridgeObjectRelease(v7);

  swift_unknownObjectWeakInit(v16, v8);
  if (!((unint64_t)v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v9);
    if (v10)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease_n(v9, 2);
    result = swift_unknownObjectWeakDestroy(v16);
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    return result;
  }
  if (v9 < 0)
    v14 = v9;
  else
    v14 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  result = _CocoaArrayWrapper.endIndex.getter(v14);
  v10 = result;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v10 >= 1)
  {
    v12 = 0;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v9);
      }
      else
      {
        v13 = *(_QWORD *)(v9 + 8 * v12 + 32);
        swift_retain(v13);
      }
      ++v12;
      v15 = v13;
      sub_10032D4DC(&v15, (uint64_t)v16);
      swift_release(v13);
    }
    while (v10 != v12);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000455A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  result = _swiftEmptyArrayStorage;
  v16 = (unint64_t)_swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v5; ++i)
    {
      v9 = *(_QWORD *)(a1 + 8 * i + 32);
      v15 = v9;
      swift_retain(v9);
      sub_10032CE1C(&v15, a2, &v14);
      if (v2)
      {
        swift_bridgeObjectRelease(a1);
        swift_release(v9);
        return (_QWORD *)swift_bridgeObjectRelease(v16);
      }
      v10 = swift_release(v9);
      v11 = v14;
      if (v14)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v13 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        specialized Array._endMutation()(v8);
      }
    }
    swift_bridgeObjectRelease(a1);
    return (_QWORD *)v16;
  }
  return result;
}

uint64_t sub_1000456D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100339A20(a1, v1);
}

uint64_t sub_1000456E0(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *Strong;
  _BYTE v19[24];
  _BYTE v20[32];
  uint64_t v21;
  unsigned __int8 v22;

  v8 = a2 + 16;
  sub_10003D344(a1, (uint64_t)v20);
  v9 = sub_10003F544(a3);
  swift_dynamicCast(&v21, v20, (char *)&type metadata for Any + 8, v9, 7);
  v10 = v22;
  if (v22 >= 2u)
  {
    swift_beginAccess(v8, v20, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v8);
    if (Strong)
    {
      v13 = Strong;
      objc_msgSend(Strong, "cancel");
      goto LABEL_6;
    }
  }
  else
  {
    v11 = v21;
    swift_beginAccess(v8, v20, 0, 0);
    v12 = (_QWORD *)swift_unknownObjectWeakLoadStrong(v8);
    if (v12)
    {
      v13 = v12;
      v14 = (char *)v12 + *(_QWORD *)((swift_isaMask & *v12) + 0x198);
      swift_beginAccess(v14, v19, 1, 0);
      v15 = *(_QWORD *)v14;
      *(_QWORD *)v14 = v11;
      v16 = v14[8];
      v14[8] = v10;
      a4(v11, v10);
      a5(v15, v16);
LABEL_6:

    }
  }
  return ((uint64_t (*)(uint64_t, _QWORD))a5)(v21, v22);
}

uint64_t sub_100045828(uint64_t a1)
{
  uint64_t v1;

  return sub_100339A04(a1, v1);
}

uint64_t sub_100045830(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *Strong;
  _BYTE v19[24];
  _BYTE v20[32];
  uint64_t v21;
  unsigned __int8 v22;

  v8 = a2 + 16;
  sub_10003D344(a1, (uint64_t)v20);
  v9 = sub_10003F544(a3);
  swift_dynamicCast(&v21, v20, (char *)&type metadata for Any + 8, v9, 7);
  v10 = v22;
  if (v22 >= 2u)
  {
    swift_beginAccess(v8, v20, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v8);
    if (Strong)
    {
      v13 = Strong;
      objc_msgSend(Strong, "cancel");
      goto LABEL_6;
    }
  }
  else
  {
    v11 = v21;
    swift_beginAccess(v8, v20, 0, 0);
    v12 = (_QWORD *)swift_unknownObjectWeakLoadStrong(v8);
    if (v12)
    {
      v13 = v12;
      v14 = (char *)v12 + *(_QWORD *)((swift_isaMask & *v12) + 0x180);
      swift_beginAccess(v14, v19, 1, 0);
      v15 = *(_QWORD *)v14;
      *(_QWORD *)v14 = v11;
      v16 = v14[8];
      v14[8] = v10;
      a4(v11, v10);
      a5(v15, v16);
LABEL_6:

    }
  }
  return ((uint64_t (*)(uint64_t, _QWORD))a5)(v21, v22);
}

uint64_t sub_100045978(uint64_t result, char a2)
{
  if (a2 == 1)
    return swift_errorRelease(result);
  if (!a2)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_100045994(uint64_t result, char a2)
{
  if (a2 == 1)
    return swift_errorRetain(result);
  if (!a2)
    return swift_bridgeObjectRetain(result);
  return result;
}

void sub_1000459B0()
{
  sub_100031758(1);
}

Swift::Void __swiftcall PodcastsStateCoordinator.startTrackingChangesInDownloads()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];

  v0 = type metadata accessor for EpisodeStateDomain(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_1005603F0);
  v32 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_1005603F8);
  v34 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544(&qword_100560400);
  v11 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  v36 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  EpisodeStateRepository.startObservingChanges()();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for EpisodeStateDomain.downloadState(_:), v0);
  v14 = EpisodeStateRepository.publisherForChanges(in:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v37[0] = v14;
  v15 = sub_10003F544(&qword_100560410);
  v16 = sub_10002F9C8(&qword_100560418, &qword_100560410, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_1000087F0, 0, v15, v16);
  swift_release(v14);
  v17 = sub_10003F544(&qword_100560420);
  v18 = sub_10002F9C8(&qword_100560428, &qword_1005603F0, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  Publisher.compactMap<A>(_:)(sub_1002B61C0, 0, v4, v17, v18);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v6, v4);
  v20 = static Subscribers.Demand.unlimited.getter(v19);
  v21 = sub_10003F544(&qword_100560430);
  v22 = sub_10002F9C8(&qword_100560438, &qword_1005603F8, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v23 = sub_10002F9C8(&qword_100560440, &qword_100560430, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v20, sub_1002B61E8, 0, v7, v21, v22, v23);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v7);
  v24 = swift_allocObject(&unk_1004BCF60, 24, 7);
  v25 = v33;
  swift_unknownObjectWeakInit(v24 + 16, v33);
  v26 = sub_10002F9C8(&qword_100560448, &qword_100560400, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v27 = v35;
  v28 = Publisher<>.sink(receiveValue:)(sub_1002B62D8, v24, v35, v26);
  swift_release(v24);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v27);
  v29 = v25 + OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_subscriptions;
  swift_beginAccess(v25 + OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_subscriptions, v37, 33, 0);
  v30 = sub_10003F544((uint64_t *)&unk_100556450);
  v31 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v29, v30, v31);
  swift_endAccess(v37);
  swift_release(v28);
}

id ShowsSortType.sortDescriptors.getter(char a1)
{
  id result;
  void *v2;
  unint64_t v3;
  uint64_t v4;

  result = objc_msgSend((id)objc_opt_self(MTPodcast), "sortDescriptorsForSortType:", qword_1003D42A8[a1]);
  if (result)
  {
    v2 = result;
    v3 = sub_100045ED8();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100045ED8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005547A0;
  if (!qword_1005547A0)
  {
    v1 = objc_opt_self(NSSortDescriptor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005547A0);
  }
  return result;
}

void sub_10004636C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100046590(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000465A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000465B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000465C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000465D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000465E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000465F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046604(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046614(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046624(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046634(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046644(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046654(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id sub_100046664(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t sub_10004668C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004669C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000466AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000466BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000466CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000466DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000466EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000466FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004670C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004671C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004672C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004673C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004674C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004675C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004676C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004677C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004678C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004679C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000467AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000467BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000467CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000467DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000467EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000467FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004680C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004681C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004682C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004683C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004684C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004685C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004686C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004687C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004688C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004689C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000468AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id sub_1000468BC(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1000468E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000468F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046904(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046914(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046924(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046934(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100046944(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100046954(uint64_t a1)
{

}

void sub_10004695C(uint64_t a1)
{

}

void sub_100046964(uint64_t a1)
{

}

void sub_10004696C(uint64_t a1)
{

}

void sub_100046974(uint64_t a1)
{

}

void sub_10004697C(uint64_t a1)
{

}

void sub_100046984(uint64_t a1)
{

}

void sub_10004698C(uint64_t a1)
{

}

void sub_100046994(uint64_t a1)
{

}

void sub_10004699C(uint64_t a1)
{

}

void sub_1000469A4(uint64_t a1)
{

}

void sub_1000469AC(uint64_t a1)
{

}

void sub_1000469B4(uint64_t a1)
{

}

void sub_1000469BC(uint64_t a1)
{

}

void sub_1000469C4(uint64_t a1)
{

}

void sub_1000469CC(uint64_t a1)
{

}

void sub_1000469D4(uint64_t a1)
{

}

void sub_1000469DC(uint64_t a1)
{

}

void sub_1000469E4(uint64_t a1)
{

}

void sub_1000469EC(uint64_t a1)
{

}

void sub_1000469F4(uint64_t a1)
{

}

void sub_1000469FC(uint64_t a1)
{

}

void sub_100046A04(uint64_t a1)
{

}

void sub_100046A0C(uint64_t a1)
{

}

void sub_100046A14(uint64_t a1)
{

}

void sub_100046A1C(uint64_t a1)
{

}

void sub_100046A24(uint64_t a1)
{

}

void sub_100046A2C(uint64_t a1)
{

}

void sub_100046A34(uint64_t a1)
{

}

void sub_100046A3C(uint64_t a1)
{

}

void sub_100046A44(uint64_t a1)
{

}

void sub_100046A4C(uint64_t a1)
{

}

void sub_100046A54(uint64_t a1)
{

}

void sub_100046A5C(uint64_t a1)
{

}

void sub_100046A64(uint64_t a1)
{

}

void sub_100046A6C(uint64_t a1)
{

}

void sub_100046A74(uint64_t a1)
{

}

void sub_100046A7C(uint64_t a1)
{

}

void sub_100046A84(uint64_t a1)
{

}

void sub_100046A8C(uint64_t a1)
{

}

void sub_100046A94(uint64_t a1)
{

}

void sub_100046A9C(uint64_t a1)
{

}

void sub_100046AA4(uint64_t a1)
{

}

void sub_100046AAC(uint64_t a1)
{

}

void sub_100046AB4(uint64_t a1)
{

}

void sub_100046ABC(uint64_t a1)
{

}

void sub_100046AC4(uint64_t a1)
{

}

void sub_100046ACC(uint64_t a1)
{

}

void sub_100046AD4(uint64_t a1)
{

}

void sub_100046ADC(uint64_t a1)
{

}

void sub_100046AE4(uint64_t a1)
{

}

void sub_100046AEC(uint64_t a1)
{

}

void sub_100046AF4(uint64_t a1)
{

}

void sub_100046AFC(uint64_t a1)
{

}

void sub_100046B04(uint64_t a1)
{

}

void sub_100046B0C(uint64_t a1)
{

}

id sub_100046B14(id a1, MTEpisode *a2)
{
  return -[MTEpisode uuid](a2, "uuid");
}

uint64_t sub_100046B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004700C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004701C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004702C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004703C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004704C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004705C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004706C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004707C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004708C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004709C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000470AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000470BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000470CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000470DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000470EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000470FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004710C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004711C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004712C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004713C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004714C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004715C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004716C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004717C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004718C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004719C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000471AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000471BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000471CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000471DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000471EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000471FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004720C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004721C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004722C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004723C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004724C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047254(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004725C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047264(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004726C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047274(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004727C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047284(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004728C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047294(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004729C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000472FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047304(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004730C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047314(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004731C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047324(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004732C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047334(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004733C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047344(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004734C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047354(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004735C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047364(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004736C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047374(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004737C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047384(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004738C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047394(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004739C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000473FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047404(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004740C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047414(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004741C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047424(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004742C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047434(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004743C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047444(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004744C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047454(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004745C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047464(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004746C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047474(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004747C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047484(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004748C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047494(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004749C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000474FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047504(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004750C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047514(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004751C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047524(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004752C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047534(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004753C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047544(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004754C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047554(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004755C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047564(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004756C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047574(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004757C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047584(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004758C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047594(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004759C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000475A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000475AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000475B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000475BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000475C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000475CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000475D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000475DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000475E4()
{
  unsigned __int8 *v0;

  return sub_1000475EC(*v0);
}

uint64_t sub_1000475EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100047624 + 4 * byte_1003CEA80[a1]))(0xD000000000000012, 0x8000000100435890);
}

uint64_t sub_100047624()
{
  return 0x6E6979616C507369;
}

id sub_1000476B0(id a1, MTEpisode *a2)
{
  return -[MTEpisode uuid](a2, "uuid");
}

uint64_t sub_1000476B8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t storeEnumTagSinglePayload for WidgetNowPlayingInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100047720 + 4 * byte_1003CEA8C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100047754 + 4 * byte_1003CEA87[v4]))();
}

uint64_t sub_100047754(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004775C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100047764);
  return result;
}

uint64_t sub_100047770(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100047778);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10004777C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047784(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1000477D0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 32);
  if (!v2)
    v2 = *(void **)(v1 + 56);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v2);
}

uint64_t _s8Podcasts18RestoreRunnerErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100047858(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_100047858(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return swift_errorRetain(result);
  if (!a3)
    return swift_bridgeObjectRetain(a2);
  return result;
}

_QWORD *sub_1000478E4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  if (__OFADD__(*result, v2))
    __break(1u);
  else
    *a2 = *result + v2;
  return result;
}

_BYTE *sub_1000478FC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = (*result | result[1]) & 1;
  return result;
}

uint64_t sub_100047914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for BlockOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000450B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BlockOperation);
}

void sub_10004792C(uint64_t a1)
{
  uint64_t v1;

  sub_10002C8E0(a1, v1);
}

id sub_100047A84(id a1, MTPlaylist *a2)
{
  return -[MTPlaylist uuid](a2, "uuid");
}

id sub_100047A8C(uint64_t a1, void *a2)
{
  id v3;
  id result;

  v3 = objc_msgSend(a2, "iTunesMatchEnabled");
  result = objc_msgSend(*(id *)(a1 + 32), "iTunesMatchEnabled");
  if ((_DWORD)v3 != (_DWORD)result)
  {
    objc_msgSend(*(id *)(a1 + 32), "setITunesMatchEnabled:", v3);
    return _objc_msgSend(*(id *)(a1 + 32), "updateiTunesPlaylistForiTunesMatchState");
  }
  return result;
}

uint64_t sub_100047AE0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_100047AF0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C40, (uint64_t)&unk_1004AD830);
}

ValueMetadata *type metadata accessor for DownloaderSessionConfigurationType()
{
  return &type metadata for DownloaderSessionConfigurationType;
}

ValueMetadata *type metadata accessor for ImplicitFollowsDecayEvent()
{
  return &type metadata for ImplicitFollowsDecayEvent;
}

uint64_t type metadata accessor for CarPlayMigrationBridge(uint64_t a1)
{
  uint64_t result;

  result = qword_1005534D0;
  if (!qword_1005534D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CarPlayMigrationBridge);
  return result;
}

uint64_t type metadata accessor for BaseResultsController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000450B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseResultsController);
}

ValueMetadata *type metadata accessor for WidgetNowPlayingInfo.CodingKeys()
{
  return &type metadata for WidgetNowPlayingInfo.CodingKeys;
}

uint64_t destroy for RestoreRunnerError(uint64_t a1)
{
  return sub_100047BD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100047BD0(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return swift_errorRelease(result);
  if (!a3)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t type metadata accessor for WidgetManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100562488;
  if (!qword_100562488)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetManager);
  return result;
}

uint64_t type metadata accessor for PodcastsPlayerAdapter(uint64_t a1)
{
  return sub_10003EAF4(a1, (uint64_t *)&unk_100560E30, (uint64_t)&nominal type descriptor for PodcastsPlayerAdapter);
}

uint64_t sub_100047DA4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

__n128 initializeWithTake for DownloaderSessionIdentifier(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t *sub_100047DD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

void sub_100047E10(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_100567508 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MTFeatureDisabled_FeedUpdate"));

}

void sub_100047E54(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_1005674D0 = objc_msgSend(v1, "BOOLForKey:", CFSTR("MTFeatureDisabled_CloudSync"));

}

void sub_100047E98(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MTUpcomingMediaController sharedInstance](MTUpcomingMediaController, "sharedInstance"));
  objc_msgSend(v2, "setSuggestedStationUuids:", *(_QWORD *)(a1 + 32));

}

id sub_100047EDC(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 32), "_effectiveAutorefreshRate");
  result = objc_msgSend(*(id *)(a1 + 32), "setAutorefreshRate:");
  if (*(_BYTE *)(a1 + 40))
    return objc_msgSend(*(id *)(a1 + 32), "_onQueueStartNewTimer");
  return result;
}

uint64_t sub_100047F20(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100047F34(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateAllPodcastsUserInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:", *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

id sub_100047F50(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((_DWORD)result)
    return _objc_msgSend(*(id *)(a1 + 32), "_onQueueScheduleTimer");
  return result;
}

uint64_t sub_100047F88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100047F94(uint64_t a1, int a2)
{
  void *v3;
  _QWORD v4[4];
  id v5;

  if (a2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[PFFairPlayMigrationController sharedInstance](PFFairPlayMigrationController, "sharedInstance"));
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10004E69C;
    v4[3] = &unk_1004A6200;
    v5 = *(id *)(a1 + 32);
    objc_msgSend(v3, "rollbackIfNecessaryWithCompletion:", v4);

  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void sub_100048034(id a1, NSNotification *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
  objc_msgSend(v2, "getNotificationSettingsWithCompletionHandler:", &stru_1004A6760);

}

id sub_100048070(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setPlayerManifestRestored:", 1);
  return objc_msgSend(*(id *)(a1 + 32), "_invokeRestorationCompletions");
}

void sub_10004809C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[IMAVPlayer sharedPlayer](IMAVPlayer, "sharedPlayer"));
  objc_msgSend(v1, "registerAVSessionCategoryAndMode");

}

void sub_1000480D0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MTListenNowManager sharedInstance](MTListenNowManager, "sharedInstance"));
  objc_msgSend(v1, "startObservingChanges");

}

void sub_100048104(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[BGTaskScheduler sharedScheduler](BGTaskScheduler, "sharedScheduler"));
  objc_msgSend(v1, "cancelAllTaskRequests");

}

id sub_100048138(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueueRestorePlayerManifestWithCompletion:", *(_QWORD *)(a1 + 40));
}

id sub_100048144(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isExternalType");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_100048174(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_submitForegroundAnalytics");
}

id sub_10004817C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_removeTempFiles");
}

void sub_100048184(id a1)
{
  MTMediaContentSourceiOSMusicLibrary *v1;
  void *v2;

  v1 = objc_alloc_init(MTMediaContentSourceiOSMusicLibrary);
  v2 = (void *)qword_100567588;
  qword_100567588 = (uint64_t)v1;

}

void sub_1000481AC(id a1)
{
  MTPodcastDerivedPropertyObserver *v1;
  void *v2;

  v1 = objc_alloc_init(MTPodcastDerivedPropertyObserver);
  v2 = (void *)qword_1005674D8;
  qword_1005674D8 = (uint64_t)v1;

}

void sub_1000481D4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "removeAllObjects");
  objc_msgSend(v3, "setValuesForKeysWithDictionary:", *(_QWORD *)(a1 + 32));

}

id sub_100048214(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reloadData");
}

id sub_100048220(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_verifyFairPlayMigrationWithCompletionHandler:", &stru_1004A6328);
}

void sub_100048230(uint64_t a1)
{
  _QWORD v1[5];
  char v2;

  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_100015604;
  v1[3] = &unk_1004A65F0;
  v2 = *(_BYTE *)(a1 + 40);
  v1[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v1);
}

void sub_100048294(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MTPurchaseControllerWrapper sharedInstance](MTPurchaseControllerWrapper, "sharedInstance"));
  objc_msgSend(v1, "forceFetchLatestChannelUpdates");

}

void sub_1000482C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mt_compactMap:", &stru_1004AA758));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100048308(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listenNowQueryObserver"));
  objc_msgSend(v1, "startObserving");

}

void sub_100048338(id a1)
{
  MZPreferences *v1;
  void *v2;

  v1 = objc_alloc_init(MZPreferences);
  v2 = (void *)qword_1005673E8;
  qword_1005673E8 = (uint64_t)v1;

}

void sub_100048360(id a1, NSMutableDictionary *a2)
{
  -[NSMutableDictionary removeAllObjects](a2, "removeAllObjects");
}

void sub_100048368(id a1)
{
  id v1;

  v1 = +[AMSProcessInfo currentProcess](AMSProcessInfo, "currentProcess");
}

void sub_10004838C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1005675E0;
  qword_1005675E0 = (uint64_t)v1;

}

uint64_t sub_1000483B0(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "_frcDidChangeResults:uuidToManagedObjectIDMap:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000483F0(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "_setupManifestDefaults");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10004842C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableDictionary);
  v2 = (void *)qword_100567438;
  qword_100567438 = (uint64_t)v1;

}

id sub_100048454(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "processListenNowEpisodes:", a2);
}

void sub_100048460(uint64_t a1)
{
  id v2;

  if ((objc_msgSend(*(id *)(a1 + 32), "isObserving") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObserving:", 1);
    v2 = (id)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
    objc_msgSend(v2, "addChangeNotifier:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1000484CC(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  void *v6;
  uint64_t v7;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (a2 == 1 && *(_BYTE *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 32), "currentTime");
    v5 = v4;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "player"));
    objc_msgSend(v6, "setCurrentTime:", v5);

  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    (*(void (**)(uint64_t, BOOL))(v7 + 16))(v7, a2 == 1);

}

id sub_100048564()
{
  return +[MTImageStore defaultStore](MTImageStore, "defaultStore");
}

MTImageDownloader *sub_100048570()
{
  return +[MTImageDownloader sharedInstance](MTImageDownloader, "sharedInstance");
}

BOOL sub_10004857C()
{
  if (+[MTApplication localLibraryUpdatesDisabled](MTApplication, "localLibraryUpdatesDisabled"))
    return 1;
  if (qword_1005674C8 != -1)
    dispatch_once(&qword_1005674C8, &stru_1004AA2C0);
  return byte_1005674D0 != 0;
}

uint64_t sub_1000485DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544((uint64_t *)&unk_100552300);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004861C(uint64_t result, uint64_t a2, char a3, char a4)
{
  if ((a4 & 1) != 0)
    return sub_100047BD0(result, a2, a3);
  return result;
}

uint64_t sub_100048628(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100008B68(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100048644(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_100048678(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000486B4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE v20[40];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10035D9D4(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_10035F098();
      goto LABEL_12;
    }
    sub_10035FCFC(v9);
  }
  v10 = *v3;
  result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      sub_100048678(*(_QWORD *)(v10 + 48) + 40 * a2, (uint64_t)v20);
      v13 = static AnyHashable.== infix(_:_:)(v20, v6);
      result = sub_100048644((uint64_t)v20);
      if ((v13 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v15 = *(_QWORD *)(v14 + 48) + 40 * a2;
  v16 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v6;
  *(_OWORD *)(v15 + 16) = v16;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v6 + 32);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v14 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_10004881C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10035DFD0(v9, &qword_100564E38);
  }
  else
  {
    if (v8 > v7)
    {
      sub_10035F798(&qword_100564E38);
      goto LABEL_14;
    }
    sub_10036026C(v9);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = type metadata accessor for DownloadingEpisodeStateDataSource();
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

unint64_t sub_1000489AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005551A0;
  if (!qword_1005551A0)
  {
    v1 = sub_100005EC8(255, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_1005551A0);
  }
  return result;
}

uint64_t sub_100048A04(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_1005564A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100048A44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005521B0;
  if (!qword_1005521B0)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1005521B0);
  }
  return result;
}

uint64_t sub_100048A8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[40];
  _BYTE v6[40];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2);
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      sub_100048678(v4, (uint64_t)v5);
      sub_100009F00((uint64_t)v6, (uint64_t)v5);
      sub_100048644((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_100048B14(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(result);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v7)
      return swift_release(v2);
    v17 = *(_QWORD *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v7)
        return swift_release(v2);
      v17 = *(_QWORD *)(v3 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v7)
          return swift_release(v2);
        v17 = *(_QWORD *)(v3 + 8 * v8);
        if (!v17)
        {
          v8 = v16 + 3;
          if (v16 + 3 >= v7)
            return swift_release(v2);
          v17 = *(_QWORD *)(v3 + 8 * v8);
          if (!v17)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_10033A6D8(v12, v13);
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    result = swift_bridgeObjectRelease(v15);
  }
  v18 = v16 + 4;
  if (v18 >= v7)
    return swift_release(v2);
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v7)
      return swift_release(v2);
    v17 = *(_QWORD *)(v3 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_100048CA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005521C0;
  if (!qword_1005521C0)
  {
    v1 = sub_10003CA40(&qword_100555A00);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005521C0);
  }
  return result;
}

void sub_100048CF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100562498)
  {
    v2 = sub_10003CA40(&qword_1005624A0);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100562498);
  }
}

unint64_t sub_100048D4C(uint64_t a1)
{
  return sub_10002E390(a1, &qword_100552A08);
}

uint64_t sub_100048D5C()
{
  uint64_t v0;

  return sub_100048D70(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100048D64()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100048D70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t type metadata accessor for WelcomeViewControllerMetricsSender()
{
  return objc_opt_self(MTWelcomeViewControllerMetricsSender);
}

unint64_t sub_100048DAC()
{
  unint64_t result;

  result = qword_100552F00;
  if (!qword_100552F00)
  {
    result = swift_getWitnessTable(&unk_1003CA024, &type metadata for DownloaderSessionConfigurationType);
    atomic_store(result, (unint64_t *)&qword_100552F00);
  }
  return result;
}

uint64_t sub_100048DF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100005E40(&qword_10055CFB8, a2, (uint64_t (*)(uint64_t))type metadata accessor for DownloadingEpisodeStateDataSource, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100048E2C(uint64_t a1, uint64_t a2)
{
  return sub_1000129F4(a1, a2);
}

uint64_t sub_100048E50()
{
  return sub_100005E40(&qword_10055CFB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodeDownloadState, (uint64_t)&protocol conformance descriptor for EpisodeDownloadState);
}

uint64_t type metadata accessor for CoreDataDownloadJobStorageFactory()
{
  return objc_opt_self(_TtC8Podcasts33CoreDataDownloadJobStorageFactory);
}

uint64_t sub_100048EA0()
{
  uint64_t result;

  result = sub_1000190D4();
  qword_100555820 = result;
  return result;
}

void sub_100048EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v7;
  void *object;
  _QWORD v9[3];
  _BYTE v10[8];
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    v13 = v3;
    v14 = v2;
    v15 = v4;
    v16 = v5;
    swift_errorRetain(a2);
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease(0xE000000000000000);
    v11 = 0xD000000000000021;
    v12 = 0x80000001004315C0;
    swift_getErrorValue(a2, v10, v9);
    v7._countAndFlagsBits = Error.localizedDescription.getter(v9[1], v9[2]);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v11, v12, "Podcasts/CoreDataDownloadJobStorage.swift", 41, 2, 252, 0);
    __break(1u);
  }
}

uint64_t type metadata accessor for PlatformContentController_Null()
{
  return objc_opt_self(_TtC8Podcasts30PlatformContentController_Null);
}

uint64_t sub_100048FA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *(_QWORD *)(*(_QWORD *)v1 + 16) = a1;
  return swift_unknownObjectRelease(v2);
}

uint64_t type metadata accessor for DebouncedAutoDownloadProcessor()
{
  return objc_opt_self(MTDebouncedAutoDownloadProcessor);
}

uint64_t type metadata accessor for DebouncedAssetRemovalProcessor()
{
  return objc_opt_self(MTDebouncedAssetRemovalProcessor);
}

uint64_t sub_1000490FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_10055C9E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100049180()
{
  unint64_t result;

  result = qword_100558EE0;
  if (!qword_100558EE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppDownloadedEffectApplicator, &type metadata for AppDownloadedEffectApplicator);
    atomic_store(result, (unint64_t *)&qword_100558EE0);
  }
  return result;
}

uint64_t type metadata accessor for PostRestorePromptPresenter()
{
  return objc_opt_self(_TtC8Podcasts26PostRestorePromptPresenter);
}

uint64_t type metadata accessor for JobPipelineInMemoryStorage()
{
  return objc_opt_self(_TtC8Podcasts26JobPipelineInMemoryStorage);
}

uint64_t type metadata accessor for AppEnterExitEventWatchdoge()
{
  return objc_opt_self(_TtC8Podcasts26AppEnterExitEventWatchdoge);
}

uint64_t type metadata accessor for PlatformContentController()
{
  return objc_opt_self(_TtC8Podcasts25PlatformContentController);
}

uint64_t sub_100049264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _BYTE v10[24];
  _BYTE v11[24];
  uint64_t v12;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncabilityController;
  swift_beginAccess(v3, v10, 0, 0);
  sub_100007A64(v3, (uint64_t)v11, &qword_10055C9E0);
  if (!v12)
    return sub_100007A28((uint64_t)v11, &qword_10055C9E0);
  sub_10000A520((uint64_t)v11, (uint64_t)v9);
  sub_100007A28((uint64_t)v11, &qword_10055C9E0);
  v4 = v9[4];
  sub_10003A834(v9, v9[3]);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v7 = v6;
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_bridgeObjectRelease(v7);
  return sub_10003D380(v9);
}

uint64_t storeEnumTagSinglePayload for ImplicitFollowsDecayEvent(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100049394 + 4 * asc_1003CD480[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000493B4 + 4 * byte_1003CD485[v4]))();
}

_BYTE *sub_100049394(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000493B4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000493BC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000493C4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000493CC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000493D4(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_1000493E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000048DC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = "\t";
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for FairPlayDownloadsObserver.DownloadState(uint64_t a1)
{
  uint64_t result;

  result = qword_10055CB00;
  if (!qword_10055CB00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FairPlayDownloadsObserver.DownloadState);
  return result;
}

uint64_t type metadata accessor for DownloadsAlertController(uint64_t a1)
{
  uint64_t result;

  result = qword_100556E08;
  if (!qword_100556E08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DownloadsAlertController);
  return result;
}

uint64_t sub_1000494D8(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 256, 1, &v2, a1 + 176);
}

uint64_t type metadata accessor for ChapterResultsController(uint64_t a1)
{
  uint64_t result;

  result = qword_10055ACD0;
  if (!qword_10055ACD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ChapterResultsController);
  return result;
}

uint64_t type metadata accessor for EpisodeDownloadsManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100564CC0;
  if (!qword_100564CC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeDownloadsManager);
  return result;
}

uint64_t type metadata accessor for DownloadRemovalObserver()
{
  return objc_opt_self(_TtC8Podcasts23DownloadRemovalObserver);
}

uint64_t sub_1000495B4(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

uint64_t type metadata accessor for DownloadManagerObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000450B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DownloadManagerObserver);
}

id sub_100049608()
{
  return sub_1000084B4();
}

unint64_t sub_100049628()
{
  unint64_t result;

  result = qword_1005569E0;
  if (!qword_1005569E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CoreDataDownloadLibrary, &type metadata for CoreDataDownloadLibrary);
    atomic_store(result, (unint64_t *)&qword_1005569E0);
  }
  return result;
}

uint64_t type metadata accessor for DownloadsRestoreRunner()
{
  return objc_opt_self(_TtC8Podcasts22DownloadsRestoreRunner);
}

uint64_t sub_10004968C(char a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = v1[5];
  v4 = v1[6];
  sub_10003A834(v1 + 2, v3);
  v5 = dispatch thunk of MediaLibraryClientProtocol.mostRecentRestoreToken.getter(v3, v4);
  if (!v6)
    return 2;
  v7 = v5;
  v8 = v6;
  v9 = sub_100241E44(0);
  v11 = v9;
  v12 = v10;
  if ((a1 & 1) != 0)
  {
    if (!v10)
    {
      v15 = v8;
      goto LABEL_19;
    }
    if (v7 == v9 && v8 == v10)
    {
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 0);
      swift_bridgeObjectRelease(v8);
      if ((v14 & 1) == 0)
      {
        v15 = v12;
LABEL_19:
        swift_bridgeObjectRelease(v15);
        return 1;
      }
    }
    v19 = sub_100241E44(1);
    if (v20)
    {
      v21 = v20;
      if (v11 == v19 && v12 == v20)
      {
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v21);
        return 0;
      }
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v19, v20, 0);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v21);
      if ((v22 & 1) != 0)
        return 0;
    }
    else
    {
      swift_bridgeObjectRelease(v12);
    }
  }
  else
  {
    if (v10)
    {
      if (v7 == v9 && v8 == v10)
      {
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v12);
      }
      else
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 0);
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v12);
        if ((v18 & 1) == 0)
          return 0;
      }
      return 0xD000000000000023;
    }
    swift_bridgeObjectRelease(v8);
  }
  return 0;
}

uint64_t sub_1000498A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000498C0(*(_QWORD **)(v1 + 16), *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v1 + 24), a1);
}

uint64_t sub_1000498C0@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, _QWORD, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v6 = sub_10004968C(1);
  if ((v8 & 0x100) != 0)
  {
    v23 = v6;
    v24 = v7;
    v25 = v8;
    if (v8 == 2)
    {
      if (!(v6 | v7))
      {
        v29 = static os_log_type_t.default.getter(v6);
        sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
        v17 = (void *)static OS_os_log.restore.getter();
        os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v17, "Post-restore has been completed already.", 40, 2, _swiftEmptyArrayStorage);
        goto LABEL_11;
      }
      if (!(v6 ^ 1 | v7))
      {
        v26 = static os_log_type_t.error.getter(v6);
        sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
        v27 = (void *)static OS_os_log.restore.getter();
        os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "App did not start restoration of the most recent episodes. This might be an indication of earlier failures during backup restore.", 129, 2, _swiftEmptyArrayStorage);

        v28 = 1;
LABEL_12:
        result = a2(0, v28, 0, 0);
        goto LABEL_13;
      }
    }
    a2(v6, v7, v8, 1);
    result = sub_10004861C(v23, v24, v25, 1);
    goto LABEL_13;
  }
  v9 = static os_log_type_t.default.getter(v6);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v10 = (void *)static OS_os_log.restore.getter();
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Checking if post-restore download is needed.", 44, 2, _swiftEmptyArrayStorage);

  v11 = a1[5];
  v12 = a1[6];
  sub_10003A834(a1 + 2, v11);
  v13 = dispatch thunk of MediaLibraryClientProtocol.postRestoreCandidates()(v11, v12);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = swift_bridgeObjectRelease(v13);
  v16 = static os_log_type_t.default.getter(v15);
  v17 = (void *)static OS_os_log.restore.getter();
  if (!v14)
  {
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Post-restore download is not needed.", 36, 2, _swiftEmptyArrayStorage);
LABEL_11:

    v28 = 0;
    goto LABEL_12;
  }
  v18 = sub_10003F544(&qword_1005559A0);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v19 + 56) = &type metadata for Int;
  *(_QWORD *)(v19 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v19 + 32) = v14;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Number of post-restore episodes to download %d", v30);

  swift_bridgeObjectRelease(v19);
  v20 = swift_allocObject(&unk_1004B7E78, 32, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = v14;
  v21 = swift_retain(a1);
  ((void (*)(uint64_t, void (*)(char, void (*)(uint64_t, uint64_t, _QWORD), uint64_t), uint64_t, _QWORD, __n128))a2)(v14, sub_100244BB4, v20, 0, v21);
  result = swift_release(v20);
LABEL_13:
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  return result;
}

uint64_t type metadata accessor for CoreDataEpisodeStorage()
{
  return objc_opt_self(_TtC8Podcasts22CoreDataEpisodeStorage);
}

uint64_t type metadata accessor for ChannelLockupGenerator()
{
  return objc_opt_self(_TtC8Podcasts22ChannelLockupGenerator);
}

void sub_100049C68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_10004ACC8();
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

uint64_t sub_100049CD4()
{
  return type metadata accessor for CarPlayMigrationBridge(0);
}

uint64_t sub_100049CDC(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = "(";
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 88);
}

uint64_t sub_100049D2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  uint64_t *v10;
  _QWORD v12[5];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;
  _BYTE v18[24];

  v1 = *v0;
  v2 = swift_isaMask;
  v3 = (uint64_t)v0 + qword_10055ABB0;
  swift_beginAccess((char *)v0 + qword_10055ABB0, v18, 0, 0);
  sub_10004AE60(v3, (uint64_t)v16);
  if (!v17)
    return sub_100007A28((uint64_t)v16, &qword_10055AEA8);
  v4 = v2 & v1;
  sub_10000A520((uint64_t)v16, (uint64_t)v13);
  sub_100007A28((uint64_t)v16, &qword_10055AEA8);
  v5 = v14;
  v6 = v15;
  sub_10003A834(v13, v14);
  v12[3] = type metadata accessor for BaseResultsController(0, *(_QWORD *)(v4 + 80), v7, v8);
  v12[4] = &off_1004B6750;
  v12[0] = v0;
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 8);
  v10 = v0;
  v9(v12, v5, v6);
  sub_10003D380(v12);
  return sub_10003D380(v13);
}

uint64_t type metadata accessor for BackgroundTaskManager()
{
  return objc_opt_self(MTBackgroundTaskManager);
}

void sub_100049ED8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v4[0] = &unk_1003CEB78;
  v4[1] = &unk_1003CEB90;
  sub_100005A58(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_1003CEBA8;
    v8 = &unk_1003CEBA8;
    v9 = v5;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

unint64_t sub_100049F6C()
{
  unint64_t result;

  result = qword_10055A890;
  if (!qword_10055A890)
  {
    result = swift_getWitnessTable(&unk_1003CEBCC, &type metadata for WidgetNowPlayingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10055A890);
  }
  return result;
}

unint64_t sub_100049FB0()
{
  unint64_t result;

  result = qword_10055A898;
  if (!qword_10055A898)
  {
    result = swift_getWitnessTable(&unk_1003CEBF4, &type metadata for WidgetNowPlayingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10055A898);
  }
  return result;
}

uint64_t type metadata accessor for NetworkMediaManifest(uint64_t a1)
{
  uint64_t result;

  result = qword_100557D58;
  if (!qword_100557D58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NetworkMediaManifest);
  return result;
}

uint64_t sub_10004A030()
{
  return type metadata accessor for NetworkMediaManifest(0);
}

uint64_t type metadata accessor for FeedIngesterProvider()
{
  return objc_opt_self(_TtC8Podcasts20FeedIngesterProvider);
}

uint64_t type metadata accessor for LibraryDataProvider(uint64_t a1)
{
  return sub_10003EAF4(a1, (uint64_t *)&unk_100553C10, (uint64_t)&nominal type descriptor for LibraryDataProvider);
}

uint64_t sub_10004A09C()
{
  return type metadata accessor for LibraryDataProvider(0);
}

uint64_t type metadata accessor for FetchEpisodesStates()
{
  return objc_opt_self(_TtC8Podcasts19FetchEpisodesStates);
}

uint64_t type metadata accessor for EpisodeListManifest(uint64_t a1)
{
  uint64_t result;

  result = qword_10055E858;
  if (!qword_10055E858)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeListManifest);
  return result;
}

uint64_t sub_10004A12C()
{
  return type metadata accessor for EpisodeListManifest(0);
}

uint64_t sub_10004A164(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

unint64_t sub_10004A190()
{
  unint64_t result;

  result = qword_10055BCA0;
  if (!qword_10055BCA0)
  {
    result = swift_getWitnessTable(&unk_1003CFC68, &type metadata for RestoreRunnerError);
    atomic_store(result, (unint64_t *)&qword_10055BCA0);
  }
  return result;
}

unint64_t sub_10004A1D4(uint64_t a1, uint64_t a2, char a3)
{
  Swift::String v5;
  void *object;
  Swift::String v7;
  unint64_t v9;
  _QWORD v10[3];
  _BYTE v11[8];
  unint64_t v12;
  unint64_t v13;

  if (!a3)
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v12 = 0xD000000000000020;
    v13 = 0x8000000100436FC0;
    v7._countAndFlagsBits = a1;
    v7._object = (void *)a2;
    String.append(_:)(v7);
    return v12;
  }
  if (a3 == 1)
  {
    swift_errorRetain(a1);
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease(0xE000000000000000);
    v12 = 0xD000000000000010;
    v13 = 0x8000000100436F60;
    swift_getErrorValue(a1, v11, v10);
    v5._countAndFlagsBits = Error.localizedDescription.getter(v10[1], v10[2]);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    sub_100047BD0(a1, a2, 1);
    return v12;
  }
  v9 = 0xD00000000000003BLL;
  if (!(a1 ^ 1 | a2))
    v9 = 0xD000000000000038;
  if (a1 | a2)
    return v9;
  else
    return 0xD000000000000037;
}

unint64_t sub_10004A358()
{
  uint64_t v0;

  return sub_10004A1D4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t type metadata accessor for MediaLibraryClient()
{
  return objc_opt_self(_TtC8Podcasts18MediaLibraryClient);
}

uint64_t type metadata accessor for ForegroundSyncUtil(uint64_t a1)
{
  uint64_t result;

  result = qword_100562010;
  if (!qword_100562010)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ForegroundSyncUtil);
  return result;
}

uint64_t sub_10004A3C4()
{
  return type metadata accessor for ForegroundSyncUtil(0);
}

uint64_t sub_10004A434(uint64_t a1)
{
  return sub_10001C2CC(a1, "[Foreground Sync] Started updating %ld podcasts needing retry.");
}

void sub_10004A440()
{
  sub_10001B1D8();
}

uint64_t sub_10004A494(uint64_t a1)
{
  return sub_10001C2CC(a1, "[Foreground Sync] Started updating %ld podcasts on app foreground.");
}

uint64_t sub_10004A4A0()
{
  uint64_t v0;

  return sub_10001E0C8(*(char **)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_10004A4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100016E54(a1, a2, a3, v3);
}

uint64_t type metadata accessor for ShowCountObserver()
{
  return objc_opt_self(_TtC8Podcasts17ShowCountObserver);
}

uint64_t type metadata accessor for ReviewController()
{
  return objc_opt_self(_TtC8Podcasts16ReviewController);
}

uint64_t sub_10004A524(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = &unk_1003CDA60;
  result = type metadata accessor for DownloadJob(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for EpisodeMetadata(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100558D88, (uint64_t)&nominal type descriptor for EpisodeMetadata);
}

void sub_10004A5B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[15];

  v4[0] = &unk_1003D44C8;
  v4[1] = &unk_1003D44E0;
  v4[2] = &unk_1003D44F8;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = &unk_1003D4510;
  v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[10] = &unk_1003D44F8;
  v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100048CF4(319);
  if (v3 <= 0x3F)
  {
    v4[14] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
}

void sub_10004A688()
{
  uint64_t v0;

  sub_100004E78(v0);
}

uint64_t sub_10004A690(uint64_t a1)
{
  uint64_t v1;

  return sub_100011AA4(a1, v1);
}

uint64_t sub_10004A698()
{
  return sub_10002BFF4((uint64_t)&unk_1004C0078, (uint64_t)sub_100027EC0, (uint64_t)&unk_1004C0090);
}

uint64_t type metadata accessor for SceneDelegate()
{
  return objc_opt_self(_TtC8Podcasts13SceneDelegate);
}

uint64_t type metadata accessor for AppTraits_iOS()
{
  return objc_opt_self(_TtC8PodcastsP33_9AAABDB1DF664191160F6CD588B99E9913AppTraits_iOS);
}

uint64_t type metadata accessor for AppController()
{
  return objc_opt_self(_TtC8PodcastsP33_9AAABDB1DF664191160F6CD588B99E9913AppController);
}

double sub_10004A76C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_10003F544(&qword_100561988);
  v1 = swift_allocObject(v0, 72, 7);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v1 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v1 + 56) = &type metadata for UberArtworkResetMigrator;
  *(_QWORD *)(v1 + 64) = &protocol witness table for UberArtworkResetMigrator;
  *(_QWORD *)(v1 + 32) = "com.apple.podcasts.artwork.uber-migration.rdar120006144";
  *(_QWORD *)(v1 + 40) = 55;
  *(_WORD *)(v1 + 48) = 258;
  off_100561958 = (_UNKNOWN *)v1;
  return result;
}

uint64_t sub_10004A7D4(uint64_t a1)
{
  return sub_10004A7F0(a1, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, qword_100561940, (uint64_t (*)(void))&static Logger.database.getter);
}

uint64_t sub_10004A7F0(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;

  v6 = a2(0);
  sub_100047DD0(v6, a3);
  sub_100047DA4(v6, (uint64_t)a3);
  return a4();
}

uint64_t type metadata accessor for FeedManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10055EBF0;
  if (!qword_10055EBF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeedManager);
  return result;
}

uint64_t sub_10004A87C()
{
  return type metadata accessor for FeedManager(0);
}

uint64_t sub_10004A884()
{
  return sub_10004A960((uint64_t (*)(_QWORD))&type metadata accessor for FeedManagerBagConfiguration, sub_10004A898);
}

uint64_t sub_10004A898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + OBJC_IVAR___MTFeedManager__feedIngesterProvider);
  swift_retain(v4);
  sub_10001A270(a2, v4, a1);
  return swift_release(v4);
}

uint64_t sub_10004A8E8(uint64_t a1)
{
  uint64_t v1;

  return sub_100011244(a1, *(char **)(v1 + 16));
}

uint64_t sub_10004A8F0()
{
  uint64_t v0;

  return sub_100005AAC(*(void **)(v0 + 16));
}

uint64_t storeEnumTagSinglePayload for CoreDataDownloadLibrary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10004A958()
{
  uint64_t v0;

  return sub_1000085B0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004A960(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(*(_QWORD *)(v2 + 16), v2 + ((v3 + 24) & ~v3));
}

uint64_t sub_10004A9A4()
{
  return sub_100026844(&qword_100558E98, type metadata accessor for DownloadJob, (uint64_t)&unk_1003CD774);
}

uint64_t type metadata accessor for AppDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_100560948;
  if (!qword_100560948)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppDelegate);
  return result;
}

void sub_10004AA0C()
{
  uint64_t v0;

  sub_10004AA14(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10004AA14(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))((swift_isaMask & **(_QWORD **)(a1
                                                                    + OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator))
                                     + 0xF0);
  v4 = a2;
  v3(a2);

}

uint64_t type metadata accessor for PodcastsDownloadsRestoreController()
{
  return objc_opt_self(_TtC8Podcasts34PodcastsDownloadsRestoreController);
}

uint64_t sub_10004AAA8(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return sub_100019F54(a1, a2, a3, a4 & 1, *(_QWORD *)(v4 + 16), *(void (**)(uint64_t))(v4 + 24), *(_QWORD *)(v4 + 32));
}

void sub_10004AAB8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 64) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10004AAC8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_10004AAEC(v1, a1);
}

void sub_10004AAE0(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 64);
}

uint64_t sub_10004AAEC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 64);
  return result;
}

uint64_t type metadata accessor for PodcastsStateTransitions()
{
  return objc_opt_self(_TtC8Podcasts24PodcastsStateTransitions);
}

id sub_10004AB18()
{
  id result;

  result = sub_100026884();
  static PodcastsStateCoordinator.shared = (uint64_t)result;
  return result;
}

void sub_10004AB34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  sub_10004AC70(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = &unk_1003D3988;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = &unk_1003D39A0;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

uint64_t sub_10004ABF0()
{
  uint64_t v0;

  return sub_100026240(v0);
}

void sub_10004ABF8()
{
  uint64_t v0;

  sub_10001AEF8(v0);
}

void sub_10004AC44()
{
  uint64_t v0;

  sub_100022A78(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t type metadata accessor for OriginBasedPodcastsStateTransitionsFinder()
{
  return objc_opt_self(_TtC8Podcasts41OriginBasedPodcastsStateTransitionsFinder);
}

void sub_10004AC70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100560E40)
  {
    v2 = sub_10003CA40(&qword_100560D70);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100560E40);
  }
}

void sub_10004ACC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1005534E0)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1005534E0);
  }
}

void sub_10004AD1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_10055EC00)
  {
    v0 = type metadata accessor for UninitializedCurrentValueSubject(0, &type metadata for FeedManager.System, &type metadata for Never, &protocol witness table for Never);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_10055EC00);
  }
}

uint64_t sub_10004AD80(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_1005569D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004ADC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_1005569D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_10004AE08(id a1, SEL a2)
{
  if (qword_100552038 != -1)
    swift_once(&qword_100552038, sub_100024048);
  return (id)static DownloadConsistency.application;
}

void sub_10004AE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    sub_100168ED4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10004AE60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_10055AEA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10004B9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10004D1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004D1DC(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "textSettingChanged:value:", *(_QWORD *)(a1 + 32), v4);

}

id sub_10004D698(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addSubview:", a2);
}

void sub_10004D754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_10004D76C(uint64_t a1, void *a2)
{
  double v3;
  uint64_t v4;
  double result;

  objc_msgSend(a2, "sizeThatFits:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = v3 + 30.0 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = result;
  return result;
}

void sub_10004D868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGFloat sub_10004D880(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  CGFloat v7;
  double Height;
  double v9;
  CGFloat MaxX;
  uint64_t v11;
  CGFloat result;
  CGRect v13;
  CGRect v14;

  v3 = a2;
  objc_msgSend(v3, "frame");
  objc_msgSend(*(id *)(a1 + 32), "bounds");
  objc_msgSend(v3, "sizeThatFits:", v4, v5);
  v7 = v6 + 30.0;
  objc_msgSend(*(id *)(a1 + 32), "bounds");
  Height = CGRectGetHeight(v13);
  v9 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  objc_msgSend(v3, "setFrame:", v9, 0.0, v7, Height);

  v14.origin.y = 0.0;
  v14.origin.x = v9;
  v14.size.width = v7;
  v14.size.height = Height;
  MaxX = CGRectGetMaxX(v14);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  result = MaxX + *(double *)(v11 + 24);
  *(CGFloat *)(v11 + 24) = result;
  return result;
}

void sub_10004DAD0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_10004DB00(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  void *v7;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "availableActions"));

  objc_msgSend(WeakRetained, "showActionSheetWithActions:fromButton:", v7, v5);
}

BOOL sub_10004DB7C(id a1, IMActionController *a2)
{
  return 1;
}

id sub_10004DB84(uint64_t a1)
{
  id WeakRetained;
  id v2;
  void *v3;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_msgSend((id)objc_opt_class(WeakRetained), "moreIcon");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTTouchInsetsButton buttonWithType:](MTTouchInsetsButton, "buttonWithType:", 0));
  objc_msgSend(v4, "setImage:forState:", v3, 0);
  objc_msgSend(v4, "setTouchInsets:", -8.0, -12.0, -8.0, -12.0);
  objc_msgSend(v4, "sizeToFit");

  return v4;
}

void sub_10004DC48(id a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("more")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIImage image:inRect:withBacking:opaque:scale:](UIImage, "image:inRect:withBacking:opaque:scale:", v1, v2, 0, 0.0, 0.0, 24.0, 28.0, 0.0));

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "imageWithRenderingMode:", 2));
  v4 = (void *)qword_100567240;
  qword_100567240 = v3;

}

void sub_10004E04C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MTApplication appController](MTApplication, "appController"));
  objc_msgSend(v2, "handleiTMSUrlScheme:", *(_QWORD *)(a1 + 32));

}

void sub_10004E090(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MTApplication appController](MTApplication, "appController"));
  objc_msgSend(v2, "handlePodcastsUrlScheme:", *(_QWORD *)(a1 + 32));

}

void sub_10004E0D4(uint64_t a1)
{
  MTAddPodcastOrStationController *v2;

  v2 = objc_alloc_init(MTAddPodcastOrStationController);
  -[MTAddPodcastOrStationController presentAddPodcastUIWithUrl:](v2, "presentAddPodcastUIWithUrl:", *(_QWORD *)(a1 + 32));

}

void sub_10004E114(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;

  v2 = os_feature_enabled_disable_siri_plist_dumper();
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "siriDonator"));
    objc_msgSend(v4, "startDonation");
  }
  else
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "siriDumper"));
    objc_msgSend(v4, "dumpPlist");
  }

}

void sub_10004E170(id a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcastDerivedPropertyObserver sharedInstance](MTPodcastDerivedPropertyObserver, "sharedInstance"));
  objc_msgSend(v1, "startObserving");

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SyncControllerFactory resolvedSyncController](_TtC8Podcasts21SyncControllerFactory, "resolvedSyncController"));
  objc_msgSend(v2, "start");

}

void sub_10004E3D4(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[SyncControllerFactory resolvedSyncController](_TtC8Podcasts21SyncControllerFactory, "resolvedSyncController"));
  objc_msgSend(v1, "applicationDidEnterBackground");

}

uint64_t sub_10004E5F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 32), "processNotification:", *(_QWORD *)(a1 + 40)));
}

id sub_10004E624(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_validateFairPlayEpisodesWithCompletionHandler:", &stru_1004A6308);
}

uint64_t sub_10004E638(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10004E644(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", objc_msgSend(*(id *)(a1 + 32), "fairPlayMigrationBackgroundTask"));

  return objc_msgSend(*(id *)(a1 + 32), "setFairPlayMigrationBackgroundTask:", UIBackgroundTaskInvalid);
}

void sub_10004E69C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  v2 = _MTLogCategoryDRM();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MTAppDelegate_Shared]: Processing pending key invalidations.", v6, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICUserIdentity activeAccount](ICUserIdentity, "activeAccount"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudController controllerWithUserIdentity:](MPCloudController, "controllerWithUserIdentity:", v4));
  objc_msgSend(v5, "processPendingKeyInvalidations");

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10004E750(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10004E758(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", objc_msgSend(*(id *)(a1 + 32), "fairPlayMigrationBackgroundTask"));

  objc_msgSend(*(id *)(a1 + 32), "setFairPlayMigrationBackgroundTask:", UIBackgroundTaskInvalid);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10004E7BC(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[PFDownloadConsistency application](PFDownloadConsistency, "application"));
  objc_msgSend(v1, "beginEnforcementWithCompletionHandler:", &stru_1004A6448);

}

void sub_10004E7F8(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint32_t v9;
  int v10;
  NSError *v11;

  v2 = a2;
  v3 = _MTLogCategoryDatabase();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v2;
      v6 = "Encountered error enforcing database consistency: %@";
      v7 = v5;
      v8 = OS_LOG_TYPE_ERROR;
      v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v10, v9);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10) = 0;
    v6 = "Finished checking database consistency";
    v7 = v5;
    v8 = OS_LOG_TYPE_INFO;
    v9 = 2;
    goto LABEL_6;
  }

}

void sub_10004E8D8(id a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MTProcessorManager sharedInstance](MTProcessorManager, "sharedInstance"));
  objc_msgSend(v1, "startAllProcessors");

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTBaseProcessor sharedInstance](MTFeedUpdateProcessor, "sharedInstance"));
  objc_msgSend(v2, "startIfNeeded");

  v3 = (id)objc_claimAutoreleasedReturnValue(+[MTBaseProcessor sharedInstance](MTPlaylistQueryManager, "sharedInstance"));
  objc_msgSend(v3, "updateAllPlaylistsWithCompletion:", &stru_1004A6488);

}

void sub_10004E958(id a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  void *v4;
  uint8_t v5[16];

  v1 = _MTLogCategoryDatabase(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Enqueuing hidden podcasts deletion operation", v5, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](MTLibrary, "sharedInstance"));
  objc_msgSend(v3, "cleanUpOldHiddenPodcasts");

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](MTLibrary, "sharedInstance"));
  objc_msgSend(v4, "cleanUpNeutralInterests");

}

void sub_10004EA00(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MTForegroundSyncUtil sharedInstance](MTForegroundSyncUtil, "sharedInstance"));
  objc_msgSend(v1, "updatePlaybackSettingIfNeeded");

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SyncControllerFactory resolvedSyncController](_TtC8Podcasts21SyncControllerFactory, "resolvedSyncController"));
  objc_msgSend(v2, "syncEverything");

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[AnalyticsIdentifierManager sharedInstance](_TtC18PodcastsFoundation26AnalyticsIdentifierManager, "sharedInstance"));
  objc_msgSend(v3, "updateIdentifiers");

  +[MTMusicSubscriptionInfoLoader deleteMusicSubscriptionInfoIfNeeded](MTMusicSubscriptionInfoLoader, "deleteMusicSubscriptionInfoIfNeeded");
}

id sub_10004EB48(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_alloc_init((Class)NSOperationQueue);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setMaxConcurrentOperationCount:", 1);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setName:", CFSTR("com.apple.podcasts.libraryupdate"));
}

MTSiriPlistDumper *__cdecl sub_10004EF14(MTAppDelegate_Shared *self, SEL a2)
{
  return self->_siriDumper;
}

_TtC18PodcastsFoundation11SiriDonator *__cdecl sub_10004EF1C(MTAppDelegate_Shared *self, SEL a2)
{
  return self->_siriDonator;
}

MTSecureDownloadRenewalManager *__cdecl sub_10004EF24(MTAppDelegate_Shared *self, SEL a2)
{
  return self->_secureDownloadRenewalManager;
}

PFFairPlayValidationManager *__cdecl sub_10004EF2C(MTAppDelegate_Shared *self, SEL a2)
{
  return self->_fairPlayValidationManager;
}

void sub_10004F490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004F4A8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

}

void sub_10004F4F4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;

  v2 = _MTLogCategoryFeedUpdate(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v6 = 134217984;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%lld Feed Update Notification: Processed.", (uint8_t *)&v6, 0xCu);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v5, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

}

void sub_10004F850(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:propertiesToFetch:limit:", kMTPodcastEntityName, *(_QWORD *)(a1 + 40), &__NSArray0__struct, 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));

  if (v3)
  {
    v5 = _MTLogCategoryCloudSync(objc_msgSend(v3, "setFeedUpdateNeedsRetry:", 1));
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 48);
      v13 = 134217984;
      v14 = v7;
      v8 = "Retry flag set for podcast with store id %lld";
      v9 = v6;
      v10 = OS_LOG_TYPE_DEFAULT;
      v11 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, v11);
    }
  }
  else
  {
    v12 = _MTLogCategoryCloudSync(v4);
    v6 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      v8 = "Failed trying to set retry flag for a nil podcast";
      v9 = v6;
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 2;
      goto LABEL_6;
    }
  }

}

void sub_10004FA4C(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  MTBackgroundTaskManager *v6;

  v2 = objc_alloc((Class)_TtC18PodcastsFoundation11SiriDonator);
  v6 = objc_alloc_init(MTBackgroundTaskManager);
  v3 = objc_msgSend(v2, "initWithBackgroundTaskManager:", v6);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v3;

}

void sub_10004FBDC(uint64_t a1)
{
  unsigned int v2;
  int v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", kPlaylistITunesPlaylistUuid));
  v2 = objc_msgSend(v4, "hidden");
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != v2)
  {
    objc_msgSend(v4, "setHidden:", v3 != 0);
    objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  }

}

void sub_10004FD3C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = kMTEpisodeEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K IN %@"), kEpisodeUuid, *(_QWORD *)(a1 + 40)));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:", v2, v4, 0, 0));

  objc_msgSend(*(id *)(a1 + 48), "_removeDownloadAssetsForEpisodes:shouldKeep:forced:", v5, *(_QWORD *)(a1 + 56), 0);
}

void sub_10004FEC0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = kMTEpisodeEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K IN %@"), kEpisodeStoreTrackId, *(_QWORD *)(a1 + 40)));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:", v2, v4, 0, 0));

  objc_msgSend(*(id *)(a1 + 48), "_removeDownloadAssetsForEpisodes:shouldKeep:forced:", v5, *(_QWORD *)(a1 + 56), 0);
}

void sub_100050040(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = kMTEpisodeEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForHLSDownloadedExcludeHidden:](MTEpisode, "predicateForHLSDownloadedExcludeHidden:", 0));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectsInEntity:predicate:sortDescriptors:", v3, v4, 0));

  objc_msgSend(*(id *)(a1 + 40), "_removeDownloadAssetsForEpisodes:shouldKeep:forced:", v5, 0, 1);
  objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");

}

uint64_t sub_100050528(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 && !*(_BYTE *)(a1 + 40))
    v5 = (*(uint64_t (**)(uint64_t, id))(v4 + 16))(v4, v3);
  else
    v5 = 0;

  return v5;
}

void sub_100050900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100050918(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForPodcastUUID:](MTPodcast, "predicateForPodcastUUID:", *(_QWORD *)(a1 + 32)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForSubscribedAndNotHidden](MTPodcast, "predicateForSubscribedAndNotHidden"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "AND:", v3));

  if (objc_msgSend(*(id *)(a1 + 40), "countOfObjectsInEntity:predicate:", kMTPodcastEntityName, v4))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;

}

void sub_100050B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100050B80(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForSubscribedAndNotHidden](MTPodcast, "predicateForSubscribedAndNotHidden"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForIdentifer:](MTPodcast, "predicateForIdentifer:", *(_QWORD *)(a1 + 32)));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "AND:", v3));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName, v5, 0));
  if (objc_msgSend(v4, "count"))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;

}

void sub_100050DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100050E0C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForPodcastWithFeedUrl:](MTPodcast, "predicateForPodcastWithFeedUrl:", *(_QWORD *)(a1 + 32)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  v5 = objc_msgSend(v4, "length");

  if (v5)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    if (objc_msgSend(v3, "subscribed"))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsStateCoordinator shared](_TtC8Podcasts24PodcastsStateCoordinator, "shared"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
      objc_msgSend(v6, "enableSubscriptionOnPodcastUUID:from:", v7, 3);

    }
  }

}

void sub_100050F18(uint64_t a1)
{
  MTAddPodcastParams *v2;
  void *v3;
  _QWORD v4[4];
  id v5;

  v2 = objc_opt_new(MTAddPodcastParams);
  -[MTAddPodcastParams setUrl:](v2, "setUrl:", *(_QWORD *)(a1 + 32));
  -[MTAddPodcastParams setLocation:](v2, "setLocation:", CFSTR("pssf"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100050FD8;
  v4[3] = &unk_1004A66E0;
  v5 = *(id *)(a1 + 40);
  -[MTAddPodcastParams setCompletion:](v2, "setCompletion:", v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTSubscriptionManager sharedInstance](MTSubscriptionManager, "sharedInstance"));
  objc_msgSend(v3, "subscribeToPodcastWithParams:", v2);

}

uint64_t sub_100050FD8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000510D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005133C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100051360(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForIdentifer:](MTPodcast, "predicateForIdentifer:", *(_QWORD *)(a1 + 32)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  v5 = objc_msgSend(v4, "length");

  if (v5)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    if (objc_msgSend(v3, "subscribed"))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsStateCoordinator shared](_TtC8Podcasts24PodcastsStateCoordinator, "shared"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
      objc_msgSend(v6, "enableSubscriptionOnPodcastUUID:from:", v7, 3);

    }
  }

}

void sub_10005146C(uint64_t a1)
{
  MTAddPodcastParams *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v2 = objc_opt_new(MTAddPodcastParams);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feedUrl"));
  -[MTAddPodcastParams setUrl:](v2, "setUrl:", v3);

  -[MTAddPodcastParams setLocation:](v2, "setLocation:", CFSTR("pssf"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storeIdentifier"));
  -[MTAddPodcastParams setStoreCollectionId:](v2, "setStoreCollectionId:", objc_msgSend(v4, "longLongValue"));

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100051570;
  v6[3] = &unk_1004A66E0;
  v7 = *(id *)(a1 + 40);
  -[MTAddPodcastParams setCompletion:](v2, "setCompletion:", v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTSubscriptionManager sharedInstance](MTSubscriptionManager, "sharedInstance"));
  objc_msgSend(v5, "subscribeToPodcastWithParams:", v2);

}

uint64_t sub_100051570(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10005164C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForIdentifer:](MTPodcast, "predicateForIdentifer:", *(_QWORD *)(a1 + 32)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  v5 = objc_msgSend(v4, "length");

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsStateCoordinator shared](_TtC8Podcasts24PodcastsStateCoordinator, "shared"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
    objc_msgSend(v6, "disableSubscriptionOnPodcastUUID:from:", v7, 3);

  }
}

void sub_100051EEC(id a1, BOOL a2, NSError *a3)
{
  _BOOL8 v3;
  NSError *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _DWORD v11[2];
  __int16 v12;
  void *v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  NSError *v17;

  v3 = a2;
  v4 = a3;
  v5 = _MTLogCategoryNotifications();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSError domain](v4, "domain"));
    v11[0] = 67109890;
    v11[1] = v3;
    v12 = 2112;
    v13 = v7;
    v14 = 1024;
    v15 = -[NSError code](v4, "code");
    v16 = 2112;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User notifications request granted %x with error %@ - %d - %@", (uint8_t *)v11, 0x22u);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults"));
  objc_msgSend(v8, "setBool:forKey:", 1, kMTDidPromptForNotificationsPermissionsKey);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults"));
  objc_msgSend(v9, "setBool:forKey:", v3, kMTNotificationStatusIsAuthorizedKey);

  if (v3)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[MTNotificationBadgeMigrationController sharedInstance](MTNotificationBadgeMigrationController, "sharedInstance"));
    objc_msgSend(v10, "performMigrationIfNecessary");

  }
}

void sub_100052224(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  _QWORD v7[4];
  id v8;
  uint8_t buf[16];

  v3 = a2;
  v4 = _MTLogCategoryNotifications(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Showing the User the notifications pre-warming sheet.", buf, 2u);
    }

    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "preWarmSheetMetricsOverlayDictionary"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100052330;
    v7[3] = &unk_1004A6828;
    v8 = v3;
    -[NSObject addFinishBlock:](v5, "addFinishBlock:", v7);

  }
  else if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to receive a AMSUserNotificationAuthorizationResult.", buf, 2u);
  }

}

void sub_100052330(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD block[4];
  id v9;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = a2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "request"));
    objc_msgSend(v5, "setMetricsOverlay:", v4);

  }
  v6 = objc_alloc_init((Class)NSDate);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults"));
  objc_msgSend(v7, "setObject:forKey:", v6, kMTNotificationsPreWarmSheetShownDateKey);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005241C;
  block[3] = &unk_1004A6200;
  v9 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10005241C(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[AMSUIDynamicViewController createBagForSubProfile](AMSUIDynamicViewController, "createBagForSubProfile"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIViewController mt_rootViewController](UIViewController, "mt_rootViewController"));
  v3 = objc_alloc((Class)AMSUIEngagementTask);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "request"));
  v5 = objc_msgSend(v3, "initWithRequest:bag:presentingViewController:", v4, v7, v2);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "presentEngagement"));
  objc_msgSend(v6, "addFinishBlock:", &stru_1004A67E0);

}

void sub_1000524D8(id a1, AMSEngagementResult *a2, NSError *a3)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults", a3));
  objc_msgSend(v3, "setBool:forKey:", 1, kMTDidPromptForNotificationsPermissionsKey);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
  objc_msgSend(v4, "getNotificationSettingsWithCompletionHandler:", &stru_1004A6800);

}

void sub_100052548(id a1, UNNotificationSettings *a2)
{
  _BOOL8 v2;
  id v3;

  v2 = (id)-[UNNotificationSettings authorizationStatus](a2, "authorizationStatus") == (id)2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, kMTNotificationStatusIsAuthorizedKey);

}

void sub_100052720(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  uint64_t v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  int v18;
  void *v19;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userId"));
    v8 = (void *)v7;
    if (v7)
      v9 = (__CFString *)v7;
    else
      v9 = &stru_1004C6D40;
    v10 = v9;

    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "clientId"));
    v12 = (void *)v11;
    if (v11)
      v13 = (__CFString *)v11;
    else
      v13 = &stru_1004C6D40;
    v14 = v13;

    objc_msgSend(*(id *)(a1 + 32), "setValue:forKey:", v10, CFSTR("userId"));
    objc_msgSend(*(id *)(a1 + 32), "setValue:forKey:", v14, CFSTR("clientId"));

  }
  else
  {
    v15 = _MTLogCategoryMetrics();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
      v18 = 138412290;
      v19 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to fetch AnalyticsUserIdentifier from AMS for notification manager with error %@", (uint8_t *)&v18, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "finishWithResult:", *(_QWORD *)(a1 + 32));

}

void sub_100052A08(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  v3 = a2;
  v4 = objc_msgSend(v3, "authorizationStatus");
  if (v4 == (id)2)
  {
    (*(void (**)(_QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), objc_msgSend(v3, "hasEnabledSettings"));
  }
  else
  {
    v5 = _MTLogCategoryNotifications(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "canSendNotifications is NO (reason: not authorized)", v7, 2u);
    }

    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0);
  }

}

void sub_100052DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;
  uint64_t v18;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v18 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100052E00(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = UIBackgroundTaskInvalid;
}

void sub_100052E5C(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_signpost_id_t v11;
  int v12;
  uint64_t v13;

  v2 = _MTLogCategoryNotifications(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[4];
    v12 = 138412290;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[DONE] processing notifications for '%@'", (uint8_t *)&v12, 0xCu);
  }

  v5 = a1[5];
  if (v5)
    (*(void (**)(void))(v5 + 16))();
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v6, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));

  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = UIBackgroundTaskInvalid;
  v8 = _MTLogCategoryNotifications(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  v11 = a1[7];
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    LOWORD(v12) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, v11, "ProcessNotifications", "", (uint8_t *)&v12, 2u);
  }

}

void sub_100052FB0(uint64_t a1, char a2)
{
  id WeakRetained;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD block[5];
  id v9;
  uint64_t v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained && (a2 & 1) != 0)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100053074;
    block[3] = &unk_1004A6918;
    v7 = *(_QWORD *)(a1 + 48);
    block[4] = v5;
    v10 = v7;
    v9 = *(id *)(a1 + 32);
    dispatch_async(v6, block);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_100053074(uint64_t a1)
{
  void *v2;
  dispatch_queue_global_t global_queue;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  uint64_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "computeNotificationsWithSchedulingOptions:", *(_QWORD *)(a1 + 48)));
  objc_msgSend(*(id *)(a1 + 32), "markEpisodesAsNotified:", v2);
  global_queue = dispatch_get_global_queue(21, 0);
  v4 = objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100053144;
  v7[3] = &unk_1004A68F0;
  v5 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v2;
  v10 = *(_QWORD *)(a1 + 48);
  v9 = v5;
  v6 = v2;
  dispatch_async(v4, v7);

}

id sub_100053144(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "scheduleLocalNotifications:schedulingOptions:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void sub_10005329C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v18 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcasts"));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i), "episodes"));
        v9 = NSStringFromSelector("uuid");
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "valueForKey:", v10));

        if (v11)
          objc_msgSend(v2, "addObjectsFromArray:", v11);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v5);
  }

  if (objc_msgSend(v2, "count"))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K in %@"), kEpisodeUuid, v2));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v18 + 40), "objectsInEntity:predicate:sortDescriptors:", kMTEpisodeEntityName, v12, 0));
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v20;
      do
      {
        for (j = 0; j != v15; j = (char *)j + 1)
        {
          if (*(_QWORD *)v20 != v16)
            objc_enumerationMutation(v13);
          objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)j), "setSentNotification:", 1);
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
      }
      while (v15);
    }
    objc_msgSend(*(id *)(v18 + 40), "saveInCurrentBlock");

  }
}

NSString *__cdecl sub_100053B1C(id a1, MTNotificationEpisode *a2)
{
  return -[MTNotificationEpisode podcastUuid](a2, "podcastUuid");
}

void sub_100053D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_100053DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (!*(_BYTE *)(v1 + 24))
  {
    *(_BYTE *)(v1 + 24) = 1;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      objc_msgSend(*(id *)(a1 + 32), "removeObserver:");
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v4 = *(void **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;

    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    objc_msgSend(v5, "endIgnoringInteractionEvents");

    v6 = (id)objc_claimAutoreleasedReturnValue(+[MTNotificationSettingsPresentationController shared](_TtC8Podcasts44MTNotificationSettingsPresentationController, "shared"));
    objc_msgSend(v6, "presentModalWithHighlightedPodcastUuid:", *(_QWORD *)(a1 + 40));

  }
}

uint64_t sub_100053E60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005436C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  objc_msgSend(v2, "openURL:withOptions:", *(_QWORD *)(a1 + 32), 0);

}

void sub_100054754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100054774(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

}

void sub_1000547C0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

}

void sub_100054BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100054BC0(id a1, NSNumber *a2)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), a2);
}

void sub_100054BF0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

}

void sub_100054C3C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

}

void sub_100055584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1000555F8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v2 = kMTEpisodeEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode sortDescriptorsForPubDateAscending:](MTEpisode, "sortDescriptorsForPubDateAscending:", 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectDictionariesInEntity:predicate:sortDescriptors:propertiesToFetch:includeObjectId:", v2, v4, v5, *(_QWORD *)(a1 + 48), 0));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](NSSet, "setWithObjects:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100055714;
  v12[3] = &unk_1004A6A60;
  v13 = *(id *)(a1 + 32);
  v14 = v7;
  v8 = v7;
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mt_compactMap:", v12));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

}

id sub_100055714(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v3 = kEpisodeUuid;
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectDictionaryForUuid:entityName:byAddingComputedProperties:toFetchedObjectDictionary:", v5, kMTEpisodeEntityName, *(_QWORD *)(a1 + 40), v4));

  return v6;
}

void sub_100055980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000559B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000559C4(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  dispatch_queue_global_t global_queue;
  NSObject *v15;
  id WeakRetained;
  _QWORD block[4];
  id v18;
  _QWORD v19[4];
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained
    && a2
    && (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcasts")),
        v5 = objc_msgSend(v4, "count"),
        v4,
        v5))
  {
    v6 = dispatch_group_create();
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcasts"));
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v22;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v22 != v10)
            objc_enumerationMutation(v7);
          v12 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v11);
          dispatch_group_enter(v6);
          v13 = *(_QWORD *)(a1 + 56);
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          v19[2] = sub_100055BE8;
          v19[3] = &unk_1004A6200;
          v20 = v6;
          objc_msgSend(WeakRetained, "scheduleLocalNotificationForPodcast:schedulingOptions:completion:", v12, v13, v19);

          v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v9);
    }

    global_queue = dispatch_get_global_queue(21, 0);
    v15 = objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100055BF0;
    block[3] = &unk_1004A6378;
    v18 = *(id *)(a1 + 40);
    dispatch_group_notify(v6, v15, block);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_100055BE8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100055BF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100055D84(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSString *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  MTNotificationEpisode *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  double v28;
  double v29;
  unsigned __int8 v30;
  void *v31;
  void *v32;
  MTNotificationEpisode *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD v46[4];
  id v47;
  id v48;
  uint8_t buf[4];
  id v50;
  _QWORD v51[2];

  if (a2)
  {
    v3 = a2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "UUIDString"));

    v6 = NSTemporaryDirectory();
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v51[0] = v7;
    v51[1] = v5;
    v45 = (void *)v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v51, 2));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPathComponents:](NSURL, "fileURLWithPathComponents:", v8));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pathExtension"));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "URLByAppendingPathExtension:", v10));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v48 = 0;
    LODWORD(v8) = objc_msgSend(v12, "copyItemAtURL:toURL:error:", v3, v11, &v48);

    v13 = v48;
    if ((_DWORD)v8)
    {
      if (v13)
      {
        v15 = _MTLogCategoryNotifications(v14);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v50 = v13;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to copy image to URL for notification with error: %@", buf, 0xCu);
        }

      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[UNNotificationContent mt_imageAttachmentForCacheKey:imageURL:](UNNotificationContent, "mt_imageAttachmentForCacheKey:imageURL:", *(_QWORD *)(a1 + 32), v11));
      if (v17)
        objc_msgSend(*(id *)(a1 + 40), "addObject:", v17);

    }
    v43 = v13;
    v44 = (void *)v11;
    v18 = objc_alloc_init((Class)UNMutableNotificationContent);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "title"));
    objc_msgSend(v18, "setTitle:", v19);

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "author"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "album"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ — %@"), v20, v21));
    objc_msgSend(v18, "setSubtitle:", v22);

    objc_msgSend(v18, "setAttachments:", *(_QWORD *)(a1 + 40));
    v23 = [MTNotificationEpisode alloc];
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "episodeUuid"));
    v25 = objc_msgSend(*(id *)(a1 + 48), "episodeStoreId");
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "title"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "pubDate"));
    objc_msgSend(*(id *)(a1 + 48), "duration");
    v29 = v28;
    v30 = objc_msgSend(*(id *)(a1 + 48), "isVideo");
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "podcastUuid"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "author"));
    LOBYTE(v42) = v30;
    v33 = -[MTNotificationEpisode initWithUuid:storeTrackId:bestTitle:bestSummary:pubDate:duration:byteSize:isVideo:sortPropertyValues:podcastUuid:podcastTitle:podcastStoreCollectionId:](v23, "initWithUuid:storeTrackId:bestTitle:bestSummary:pubDate:duration:byteSize:isVideo:sortPropertyValues:podcastUuid:podcastTitle:podcastStoreCollectionId:", v24, v25, v26, 0, v27, 0, v29, v42, &__NSDictionary0__struct, v31, v32, objc_msgSend(*(id *)(a1 + 48), "podcastStoreId"));

    objc_msgSend(v18, "mt_setUserInfoEpisode:", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "instanceIdentifier"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "UUIDString"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[UNNotificationRequest mt_uniqueRequestIdentifierForPlayerItem:](UNNotificationRequest, "mt_uniqueRequestIdentifierForPlayerItem:", v35));

    v37 = (void *)objc_claimAutoreleasedReturnValue(+[UNNotificationRequest requestWithIdentifier:content:trigger:](UNNotificationRequest, "requestWithIdentifier:content:trigger:", v36, v18, 0));
    v38 = _MTLogCategoryNotifications(v37);
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "title"));
      *(_DWORD *)buf = 138412290;
      v50 = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Requesting to post player item notification for: %@", buf, 0xCu);

    }
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_10005624C;
    v46[3] = &unk_1004A6AD8;
    v47 = *(id *)(a1 + 48);
    objc_msgSend(v41, "addNotificationRequest:withCompletionHandler:", v37, v46);

  }
}

void sub_10005624C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  id v15;

  v3 = a2;
  v4 = _MTLogCategoryNotifications(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "domain"));
    v8 = 138413058;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    v12 = 1024;
    v13 = objc_msgSend(v3, "code");
    v14 = 2112;
    v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Notification request for player item '%@'with error: %@ - %d - %@", (uint8_t *)&v8, 0x26u);

  }
}

void sub_100056778(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  os_signpost_id_t v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_signpost_id_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_signpost_id_t v36;
  uint64_t v37;
  NSObject *v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  _QWORD v54[4];
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  uint8_t buf[4];
  id v61;
  _QWORD v62[2];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));

    v10 = NSTemporaryDirectory();
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v62[0] = v11;
    v62[1] = v9;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v62, 2));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPathComponents:](NSURL, "fileURLWithPathComponents:", v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pathExtension"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "URLByAppendingPathExtension:", v14));

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v59 = 0;
    LODWORD(v13) = objc_msgSend(v16, "copyItemAtURL:toURL:error:", v5, v15, &v59);
    v17 = v59;

    if (!(_DWORD)v13)
    {
      v31 = _MTLogCategoryNotifications(v18);
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v61 = v17;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Failed to copy image to URL for notification with error: %@", buf, 0xCu);
      }

      v34 = _MTLogCategoryNotifications(v33);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      v19 = v35;
      v36 = *(_QWORD *)(a1 + 96);
      if (v36 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v35))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_END, v36, "LOAD_NOTIFICATION_ARTWORK", "FAILED_COPY", buf, 2u);
      }
      goto LABEL_22;
    }
    v19 = objc_claimAutoreleasedReturnValue(+[UNNotificationContent mt_imageAttachmentForCacheKey:imageURL:](UNNotificationContent, "mt_imageAttachmentForCacheKey:imageURL:", *(_QWORD *)(a1 + 32), v15));
    if (v19)
    {
      v20 = _MTLogCategoryNotifications(objc_msgSend(*(id *)(a1 + 40), "addObject:", v19));
      v21 = objc_claimAutoreleasedReturnValue(v20);
      v22 = v21;
      v23 = *(_QWORD *)(a1 + 96);
      if (v23 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v21))
        goto LABEL_21;
      *(_WORD *)buf = 0;
      v24 = "SUCCESS";
    }
    else
    {
      v37 = _MTLogCategoryNotifications(0);
      v38 = objc_claimAutoreleasedReturnValue(v37);
      v22 = v38;
      v23 = *(_QWORD *)(a1 + 96);
      if (v23 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v38))
        goto LABEL_21;
      *(_WORD *)buf = 0;
      v24 = "FAILED_ATTACHMENT";
    }
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_INTERVAL_END, v23, "LOAD_NOTIFICATION_ARTWORK", v24, buf, 2u);
LABEL_21:

LABEL_22:
    goto LABEL_23;
  }
  v25 = _MTLogCategoryNotifications(v6);
  v26 = objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v61 = v7;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Failed to load artwork for notification: %@", buf, 0xCu);
  }

  v28 = _MTLogCategoryNotifications(v27);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  v9 = v29;
  v30 = *(_QWORD *)(a1 + 96);
  if (v30 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v29))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v30, "LOAD_NOTIFICATION_ARTWORK", "FAILED_LOAD", buf, 2u);
  }
LABEL_23:

  v39 = objc_alloc_init((Class)UNMutableNotificationContent);
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
  objc_msgSend(v39, "setCategoryIdentifier:", v40);

  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
  objc_msgSend(v39, "setThreadIdentifier:", v41);

  objc_msgSend(v39, "setTitle:", *(_QWORD *)(a1 + 56));
  objc_msgSend(v39, "setBody:", *(_QWORD *)(a1 + 64));
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
    v42 = *(_QWORD *)(a1 + 40);
  else
    v42 = 0;
  objc_msgSend(v39, "setAttachments:", v42);
  objc_msgSend(v39, "setSummaryArgument:", *(_QWORD *)(a1 + 72));
  objc_msgSend(v39, "setSummaryArgumentCount:", *(_QWORD *)(a1 + 104));
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "uuid"));
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "episodes"));
  objc_msgSend(v39, "mt_setUserInfoPodcastUuid:episodes:", v43, v44);

  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "uuid"));
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[UNNotificationRequest mt_uniqueRequestIdentifierForPodcastUuid:](UNNotificationRequest, "mt_uniqueRequestIdentifierForPodcastUuid:", v45));

  v47 = (void *)objc_claimAutoreleasedReturnValue(+[UNNotificationRequest requestWithIdentifier:content:trigger:](UNNotificationRequest, "requestWithIdentifier:content:trigger:", v46, v39, 0));
  v48 = _MTLogCategoryNotifications(objc_msgSend(v47, "mt_setSchedulingOptions:", *(_QWORD *)(a1 + 112)));
  v49 = objc_claimAutoreleasedReturnValue(v48);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "descriptionForNotificationLogging"));
    *(_DWORD *)buf = 138412290;
    v61 = v50;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Requesting to post notification for: %@", buf, 0xCu);

  }
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472;
  v54[2] = sub_100056D60;
  v54[3] = &unk_1004A6B28;
  v52 = *(id *)(a1 + 72);
  v53 = *(_QWORD *)(a1 + 104);
  v55 = v52;
  v58 = v53;
  v56 = *(id *)(a1 + 80);
  v57 = *(id *)(a1 + 88);
  objc_msgSend(v51, "addNotificationRequest:withCompletionHandler:", v47, v54);

}

void sub_100056D60(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  id v27;

  v3 = a2;
  v4 = _MTLogCategoryNotifications(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "domain"));
    *(_DWORD *)buf = 138413314;
    v19 = v6;
    v20 = 2048;
    v21 = v7;
    v22 = 2112;
    v23 = v8;
    v24 = 1024;
    v25 = objc_msgSend(v3, "code");
    v26 = 2112;
    v27 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Notification request for podcast '%@' with %lu episodes sent with error: %@ - %d - %@", buf, 0x30u);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsAction notificationScheduled](MTFeedUpdateMetricsAction, "notificationScheduled"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey podcastUuid](MTFeedUpdateMetricsDataKey, "podcastUuid"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid", v10));
  v17[0] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey episodeCount](MTFeedUpdateMetricsDataKey, "episodeCount"));
  v16[1] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 56)));
  v17[1] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 2));
  +[IMMetrics recordUserAction:dataSource:withData:](IMMetrics, "recordUserAction:dataSource:withData:", v9, 0, v14);

  v15 = *(_QWORD *)(a1 + 48);
  if (v15)
    (*(void (**)(void))(v15 + 16))();

}

void sub_100056FE0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = *(void **)(a1 + 32);
  v3 = kMTEpisodeEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForSentNotification:](MTEpisode, "predicateForSentNotification:", 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectsInEntity:predicate:sortDescriptors:", v3, v4, 0));

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v10), "setSentNotification:", 0, (_QWORD)v11);
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }

  objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
}

NSString *__cdecl sub_10005756C(id a1, MTNotificationEpisode *a2)
{
  return -[MTNotificationEpisode uuid](a2, "uuid");
}

id sub_1000575D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v3 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = sub_1000465A4;
  v15 = sub_100046954;
  v16 = 0;
  v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000576C8;
  v8[3] = &unk_1004A6B98;
  v5 = v3;
  v9 = v5;
  v10 = &v11;
  objc_msgSend(v4, "performBlockAndWait:", v8);
  v6 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1000576B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000576C8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = (id)objc_opt_new(MTEpisodeLookupRequest);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  objc_msgSend(v8, "setUuid:", v2);

  objc_msgSend(v8, "setStoreTrackId:", objc_msgSend(*(id *)(a1 + 32), "storeTrackId"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastTitle"));
  objc_msgSend(v8, "setPodcastTitle:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisodeLookupUtil sharedInstance](MTEpisodeLookupUtil, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "findEpisodeWithRequest:", v8));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));

  if (v6)
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTBaseEpisodeListManifest mediaItemForEpisodeWithUUID:](MTBaseEpisodeListManifest, "mediaItemForEpisodeWithUUID:", v6));
  else
    v7 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v7);
  if (v6)

}

id sub_1000577D8(id a1, MTNotificationEpisode *a2)
{
  int64_t v2;
  void *v3;

  v2 = -[MTNotificationEpisode storeTrackId](a2, "storeTrackId");
  if ((+[MTStoreIdentifier isEmpty:](MTStoreIdentifier, "isEmpty:", v2) & 1) != 0)
    v3 = 0;
  else
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v2));
  return v3;
}

void sub_100057A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100057A84(uint64_t a1, uint64_t a2)
{
  int v3;
  id *v4;
  id WeakRetained;
  unsigned int v6;
  id v7;
  id v8;

  v3 = a2 == 0;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = objc_msgSend(WeakRetained, "isDeviceStorageSpaceAvailableForPersistence");

  if (v3 != v6)
  {
    v7 = objc_loadWeakRetained(v4);
    objc_msgSend(v7, "setIsDeviceStorageSpaceAvailableForPersistence:", a2 == 0);

    v8 = objc_loadWeakRetained(v4);
    objc_msgSend(v8, "_reCheck");

  }
}

void sub_100057E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100057E84(uint64_t a1)
{
  int v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v3, "currentEpisodeLimitAllowsAutomaticDownloads");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v3, "episodeLimitResolvedValue");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v3, "deletePlayedEpisodesResolvedValue");
  v2 = os_feature_enabled_serial_sort_auto_downloads();
  if (v2)
    LOBYTE(v2) = objc_msgSend(v3, "currentEpisodeLimitIsNextNEpisodes");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v2;

}

void sub_100058250(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  unsigned __int8 v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeForUuid:", v7, (_QWORD)v14));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "podcast"));
        v10 = objc_msgSend(v9, "isDark");

        if ((v10 & 1) == 0)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "podcast"));
          v12 = objc_msgSend(v11, "hidden");

          if ((v12 & 1) == 0)
          {
            v13 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 48)), "_freeSpace");
            if ((unint64_t)(v13 - (_BYTE *)objc_msgSend(v8, "byteSize")) >= 0xC800001)
              objc_msgSend(*(id *)(a1 + 56), "addObject:", v7);
          }
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

}

void sub_100058588(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000585AC(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "episodeUuids"));
  objc_msgSend(v1, "autodownloadEpisodesChanged:", v2);

}

void sub_1000586A4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(PFCoreAnalyticsChannel);
  v2 = (void *)qword_100567288;
  qword_100567288 = v1;

}

id sub_100058800(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *context;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];

  context = objc_autoreleasePoolPush();
  v2 = kMTPodcastEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K in %@"), kPodcastUuid, *(_QWORD *)(a1 + 40)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsInEntity:predicate:sortDescriptors:", v2, v4, 0));

  v6 = objc_alloc_init((Class)NSMutableSet);
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
  v9 = kPlaylistUuid;
  if (v8)
  {
    v10 = v8;
    v11 = *(_QWORD *)v31;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v31 != v11)
          objc_enumerationMutation(v7);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v12), "playlists"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "valueForKey:", v9));
        objc_msgSend(v6, "unionSet:", v14);

        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    }
    while (v10);
  }

  v15 = *(void **)(a1 + 32);
  v16 = kMTPlaylistEntityName;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K in %@"), v9, v6));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectsInEntity:predicate:sortDescriptors:", v16, v17, 0));

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v19 = v18;
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v27;
    do
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v27 != v22)
          objc_enumerationMutation(v19);
        objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v23), "setNeedsUpdate:", 1);
        v23 = (char *)v23 + 1;
      }
      while (v21 != v23);
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v21);
  }

  objc_autoreleasePoolPop(context);
  return objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
}

void sub_100058B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100058BA0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist topLevelPlaylistsExcludingFoldersPredicate](MTPlaylist, "topLevelPlaylistsExcludingFoldersPredicate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPlaylistEntityName, v2, 0));
  if (objc_msgSend(v3, "count"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPlaylistUuid));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v4));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", *(_QWORD *)(a1 + 40)));
    if (objc_msgSend(v5, "isEqualToSet:", v6))
    {
      v17 = v6;
      v18 = v5;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v7 = v3;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v20;
        do
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(_QWORD *)v20 != v10)
              objc_enumerationMutation(v7);
            v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "uuid", v17, v18, (_QWORD)v19));
            v14 = (char *)objc_msgSend(*(id *)(a1 + 40), "count");
            v15 = &v14[~(unint64_t)objc_msgSend(*(id *)(a1 + 40), "indexOfObject:", v13)];
            if (v15 != objc_msgSend(v12, "sortOrder"))
              objc_msgSend(v12, "setSortOrder:", v15);

          }
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
        }
        while (v9);
      }

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](_TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
      objc_msgSend(v16, "setIsPlaylistSyncDirty:", 1);

      v6 = v17;
      v5 = v18;
    }

  }
}

void sub_100058EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100058EE0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  unint64_t v12;
  char *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *j;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts](MTPodcast, "predicateForNotHiddenNotImplicitlyFollowedPodcasts"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName, v2, 0));
  if (objc_msgSend(v3, "count"))
  {
    v22 = v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v29 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "uuid"));
          v12 = (unint64_t)objc_msgSend(*(id *)(a1 + 40), "indexOfObject:", v11);
          if (v12 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v13 = (char *)objc_msgSend(v5, "count") + ~v12;
            if (v13 != objc_msgSend(v10, "sortOrder"))
            {
              objc_msgSend(v10, "setSortOrder:", v13);
              objc_msgSend(v23, "addObject:", v11);
              v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v10, "syncType")));
              objc_msgSend(v4, "addObject:", v14);

            }
          }

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      }
      while (v7);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v15 = v4;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v25;
      do
      {
        for (j = 0; j != v17; j = (char *)j + 1)
        {
          if (*(_QWORD *)v25 != v18)
            objc_enumerationMutation(v15);
          v20 = objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)j), "integerValue");
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](_TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
          objc_msgSend(v21, "markSubscriptionSyncDirty:for:", 1, v20);

        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
      }
      while (v17);
    }

    objc_msgSend(*(id *)(a1 + 48), "_markPlaylistsForUpdateForPodcastUuids:", v23);
    v2 = v22;
  }

}

void sub_1000592DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000592F4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v5 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mutableOrderedSetValueForKey:", kPlaylistEpisodes));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000593E8;
    v6[3] = &unk_1004A6CE8;
    v7 = *(id *)(a1 + 48);
    objc_msgSend(v3, "sortUsingComparator:", v6);
    objc_msgSend(v5, "setContainerOrder:", 2);
    objc_msgSend(v5, "setNeedsUpdate:", 1);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](_TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
    objc_msgSend(v4, "setIsPlaylistSyncDirty:", 1);

    v2 = v5;
  }

}

id sub_1000593E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
  if (objc_msgSend(v7, "containsObject:", v8))
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
    v11 = (uint64_t)objc_msgSend(v9, "indexOfObject:", v10);

  }
  else
  {
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  }

  v12 = *(void **)(a1 + 32);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "uuid"));
  if (objc_msgSend(v12, "containsObject:", v13))
  {
    v14 = *(void **)(a1 + 32);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "uuid"));
    v16 = (uint64_t)objc_msgSend(v14, "indexOfObject:", v15);

  }
  else
  {
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v11));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v16));
  v19 = objc_msgSend(v17, "compare:", v18);

  return v19;
}

void sub_10005963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100059654(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v8 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mutableOrderedSetValueForKey:", kPlaylistSettings));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPlaylistSettingUuid));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "set"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", *(_QWORD *)(a1 + 48)));
    if (objc_msgSend(v5, "isEqualToSet:", v6))
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1000597A8;
      v9[3] = &unk_1004A6D38;
      v10 = *(id *)(a1 + 48);
      objc_msgSend(v3, "sortUsingComparator:", v9);
      objc_msgSend(v8, "setContainerOrder:", 2);
      objc_msgSend(v8, "setNeedsUpdate:", 1);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](_TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
      objc_msgSend(v7, "setIsPlaylistSyncDirty:", 1);

    }
    v2 = v8;
  }

}

id sub_1000597A8(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uuid"));
  v8 = objc_msgSend(v5, "indexOfObject:", v7);

  v9 = *(void **)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "uuid"));

  v11 = objc_msgSend(v9, "indexOfObject:", v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v11));
  v14 = objc_msgSend(v12, "compare:", v13);

  return v14;
}

id sub_1000599D8(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "isAllowedForController:", *(_QWORD *)(a1 + 32));
}

void sub_100059B40(id a1, id a2)
{
  id v2;

  v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "updateActionSheet") & 1) != 0)
  {
    objc_msgSend(v2, "updateActionSheet");
  }
  else if ((objc_opt_respondsToSelector(v2, "updatePopover") & 1) != 0)
  {
    objc_msgSend(v2, "updatePopover");
  }

}

uint64_t sub_100059B9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100059C3C(id a1, id a2)
{
  id v2;

  v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "dismissActionSheet") & 1) != 0)
  {
    objc_msgSend(v2, "dismissActionSheet");
  }
  else if ((objc_opt_respondsToSelector(v2, "dismissPopover") & 1) != 0)
  {
    objc_msgSend(v2, "dismissPopover");
  }

}

uint64_t sub_100059C98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100059D34(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setController:", *(_QWORD *)(a1 + 32));
}

void sub_100059DF8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100059E18(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  void *v7;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "availableActions"));

  objc_msgSend(WeakRetained, "showActionSheetWithActions:fromButton:", v7, v5);
}

BOOL sub_100059E94(id a1, IMActionController *a2)
{
  return 1;
}

void sub_10005AAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005AAC4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = a2;
  v8 = v3;
  if (*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(v3, "setIgnoreSystemFilterPredicates:", 1);
    v3 = v8;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "items"));
  if (objc_msgSend(v4, "count"))
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "arrayByAddingObjectsFromArray:", v4));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
}

BOOL sub_10005AB50(id a1, MPMediaItem *a2)
{
  return !+[MTMediaLibraryUtil isDeletingPersistentId:](MTMediaLibraryUtil, "isDeletingPersistentId:", -[MPMediaItem persistentID](a2, "persistentID"));
}

void sub_10005AD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005AD80(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  _BOOL4 v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = WeakRetained;
  if (!v5)
  {
    v11 = _MTLogCategoryDRM();
    v9 = objc_claimAutoreleasedReturnValue(v11);
    v12 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (!v12)
        goto LABEL_9;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "URL"));
      v14 = objc_msgSend(a1[4], "episodeStoreId");
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
      v17 = 138412802;
      v18 = v13;
      v19 = 2048;
      v20 = v14;
      v21 = 2114;
      v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DRM/MTPlayerItem: Failed to create content key session for asset: %@, adamID: %lld with error: %{public}@.", (uint8_t *)&v17, 0x20u);

    }
    else
    {
      if (!v12)
        goto LABEL_9;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "URL"));
      v16 = objc_msgSend(a1[4], "episodeStoreId");
      v17 = 138412546;
      v18 = v13;
      v19 = 2048;
      v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DRM/MTPlayerItem: No session or error returned for asset: %@, adamID: %lld.", (uint8_t *)&v17, 0x16u);
    }

    goto LABEL_9;
  }
  objc_msgSend(WeakRetained, "setFairPlayKeySession:", v5);
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fairPlayKeyLoader"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "fairPlayKeySession"));
  -[NSObject startKeyRequestWithSession:completion:](v9, "startKeyRequestWithSession:completion:", v10, 0);

LABEL_9:
}

void sub_10005B1F0(uint64_t a1)
{
  void *v1;
  unsigned __int8 v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  id v12;
  uint8_t buf[4];
  id v14;

  v1 = *(void **)(a1 + 32);
  if (v1)
  {
    v12 = 0;
    v2 = objc_msgSend(v1, "completeAndReturnError:", &v12);
    v3 = v12;
    v5 = _MTLogCategoryPlayback(v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = v6;
    if ((v2 & 1) != 0)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        v8 = "Stream written to disk";
        v9 = v7;
        v10 = OS_LOG_TYPE_DEBUG;
        v11 = 2;
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, buf, v11);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v3;
      v8 = "Error completing cache: %@";
      v9 = v7;
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 12;
      goto LABEL_7;
    }

  }
}

void sub_10005B364(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episode"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "podcast"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bestAvailableStoreCleanURL"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10005B7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005B7D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 48) && (objc_msgSend(*(id *)(a1 + 32), "isDownloaded") & 1) == 0)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "enclosureURL"));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v10 = _MTLogCategoryPlayback(v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      v13 = 138412290;
      v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "invalidate asset is local but missing downloads. Switched to streaming URL %@", (uint8_t *)&v13, 0xCu);
    }

  }
  else
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assetURL"));
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;

  }
}

void sub_10005B8FC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "channelForStoreId:", *(_QWORD *)(a1 + 48)));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "subscriptionActive");

}

void sub_10005B948(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeUuid"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "episodeForUuid:", v3));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bestUrl"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_10005BAC0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  id v6;
  __int128 v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10005BB48;
  v5[3] = &unk_1004A6FD8;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = *(_OWORD *)(a1 + 40);
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

}

void sub_10005BB48(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10005BBBC;
  v3[3] = &unk_1004A6FB0;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "retrieveArtwork:withSize:", v3, *(double *)(a1 + 48), *(double *)(a1 + 56));

}

void sub_10005BBBC(uint64_t a1, UIImage *image)
{
  uint64_t v2;
  NSData *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = UIImagePNGRepresentation(image);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, v4, 0);

}

void sub_10005BE1C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10005BEAC;
  v6[3] = &unk_1004A7028;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_10005BEAC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10005BEBC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10005BF4C;
  v6[3] = &unk_1004A7028;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_10005BF4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10005BF5C(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "imageWithSize:", *(double *)(a1 + 40), *(double *)(a1 + 48)));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

void sub_10005C270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10005C2B0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeUuid"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "episodeForUuid:", v3));

  v4 = v16;
  if (v16)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "bestSummary"));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "valueForKey:", kEpisodePubDate));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    v11 = objc_msgSend(v16, "isExplicit");
    v4 = v16;
    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("ATV_EXPLICIT"), &stru_1004C6D40, 0));
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v15 = *(void **)(v14 + 40);
      *(_QWORD *)(v14 + 40) = v13;

      v4 = v16;
    }
  }

}

void sub_10005C67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10005C6A0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcast"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "title"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", kEpisodePubDate));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "verboseDisplayString"));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_10005CD7C(uint64_t a1, void *a2)
{
  id v3;
  MTEpisodeManifest *v4;

  v3 = a2;
  v4 = -[MTEpisodeManifest initWithEpisodeUuid:]([MTEpisodeManifest alloc], "initWithEpisodeUuid:", v3);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005D450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v6);
  _Unwind_Resume(a1);
}

Class sub_10005D4B8(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1005672A0)
  {
    v4 = off_1004A7110;
    v5 = 0;
    qword_1005672A0 = _sl_dlopen(&v4, &v3);
    if (!qword_1005672A0)
    {
      abort_report_np("%s", (const char *)v3);
LABEL_8:
      sub_10037FC6C();
    }
    if (v3)
      free(v3);
  }
  result = objc_getClass("AFAnalytics");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    goto LABEL_8;
  qword_100567298 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10005E8A0(uint64_t a1)
{
  unsigned __int8 v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = objc_msgSend(v3, "deletePlayedEpisodesResolvedValue");
  objc_msgSend(v3, "setDeletePlayedEpisodes:", *(_QWORD *)(a1 + 48));
  if (objc_msgSend(v3, "deletePlayedEpisodesResolvedValue") && (v2 & 1) == 0)
    objc_msgSend(v3, "setShowPlacardForRemovePlayedEpisodes:", 0);

}

void sub_10005EAB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10005EACC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint8_t v14[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread currentThread](NSThread, "currentThread"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "threadDictionary"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("kMTUnplayedRssEpisodesRecursionCount")));
  v5 = (char *)objc_msgSend(v4, "integerValue");

  if ((uint64_t)v5 <= 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v5 + 1));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v9, CFSTR("kMTUnplayedRssEpisodesRecursionCount"));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForRSSEpisodes](MTEpisode, "predicateForRSSEpisodes"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodesOnPodcastUuid:deletePlayedEpisodes:](MTEpisode, "predicateForEpisodesOnPodcastUuid:deletePlayedEpisodes:", v11, 1));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "AND:", v12));

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 40), "countOfObjectsInEntity:predicate:", kMTEpisodeEntityName, v13);
  }
  else
  {
    v7 = _MTLogCategoryDatabase(v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Hit recursion guard for -[MTPodcast countOfUnplayedRssEpisodes]. Short circuiting.", v14, 2u);
    }

  }
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &off_1004D58D8, CFSTR("kMTUnplayedRssEpisodesRecursionCount"));

}

void sub_10005ED9C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "conformsToProtocol:", &OBJC_PROTOCOL___MTColorThemeable))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "colorTheme"));
    objc_msgSend(v4, "setColorTheme:", v3);

  }
}

id sub_10005EF64(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = _MTLogCategoryDefault(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting processors needed for Feed Updates...", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "startProcessors:", 209);
}

id sub_10005F044(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = _MTLogCategoryDefault(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting processors needed for Playback...", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "startProcessors:", 60);
}

id sub_10005F124(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = _MTLogCategoryDefault(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting processors needed for CarPlay...", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "startProcessorsForFeedUpdates");
}

void sub_10005F21C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1005672C8;
  qword_1005672C8 = (uint64_t)v1;

}

id sub_10005F3C0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateDatabaseFromMediaLibrary");
}

void sub_10005FBE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

NSNumber *__cdecl sub_10005FC40(id a1, MPMediaItem *a2)
{
  return +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", -[MPMediaItem persistentID](a2, "persistentID"));
}

uint64_t sub_10005FC70(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2) ^ 1;
}

int64_t sub_10005FC90(id a1, MPMediaItem *a2, MPMediaItem *a3)
{
  MPMediaItem *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MPMediaItem podcastTitle](a3, "podcastTitle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByRemovingInsignificantPrefix"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[MPMediaItem podcastTitle](v4, "podcastTitle"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringByRemovingInsignificantPrefix"));
  v9 = objc_msgSend(v6, "compare:", v8);

  return (int64_t)v9;
}

void sub_10005FD28(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = objc_autoreleasePoolPush();
  v3 = *(void **)(a1 + 32);
  v4 = kMTPlaylistEntityName;
  v5 = kPlaylistMediaLibraryId;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K != 0"), kPlaylistMediaLibraryId));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v5, 0));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectDictionariesInEntity:predicate:sortDescriptors:propertiesToFetch:includeObjectId:", v4, v6, 0, v7, 1));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  objc_autoreleasePoolPop(v2);
}

void sub_10005FDFC(uint64_t a1)
{
  uint64_t v1;
  void *i;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  void *v28;
  const __CFString *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  void *j;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  unsigned int v56;
  uint64_t v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  NSObject *v67;
  _BOOL4 v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  id obj;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  id v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint8_t buf[4];
  void *v91;
  __int16 v92;
  void *v93;
  __int16 v94;
  unsigned int v95;
  __int16 v96;
  double v97;
  _BYTE v98[128];
  _BYTE v99[128];

  v1 = a1;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  obj = *(id *)(a1 + 32);
  v77 = v1;
  v79 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v99, 16);
  if (v79)
  {
    v78 = *(_QWORD *)v87;
    do
    {
      for (i = 0; i != v79; i = (char *)i + 1)
      {
        if (*(_QWORD *)v87 != v78)
          objc_enumerationMutation(obj);
        v3 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * (_QWORD)i);
        v4 = objc_autoreleasePoolPush();
        v5 = objc_msgSend(*(id *)(v1 + 40), "containsObject:", v3);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForProperty:", MPMediaEntityPropertyPersistentID));
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTMLMediaItem itemWithMPMediaItem:isRestoreDownloadCandidate:](MTMLMediaItem, "itemWithMPMediaItem:isRestoreDownloadCandidate:", v3, v5));
        v8 = _MTLogCategoryMediaLibrary();
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v91 = v7;
          v92 = 1024;
          LODWORD(v93) = (_DWORD)v5;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "update-from-MusicLibrary processing item '%@', isRestoreDownloadCandidate = %d", buf, 0x12u);
        }

        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "assetUrl"));
        if (!v10)
        {
          if (!(_DWORD)v5)
            goto LABEL_33;
LABEL_12:
          if (objc_msgSend(v3, "isITunesU"))
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "feedUrl"));
            if ((objc_msgSend(v13, "containsStringInsensitive:", CFSTR("LZDirectory.woa")) & 1) == 0)
            {
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "feedUrl"));
              v15 = objc_msgSend(v14, "containsStringInsensitive:", CFSTR("LZStudent.woa"));

              if ((v15 & 1) != 0)
                goto LABEL_33;
              goto LABEL_15;
            }
          }
          else
          {
LABEL_15:
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 48), "objectForKey:", v6));

            if (v16)
              goto LABEL_33;
            objc_msgSend(*(id *)(v1 + 48), "setObject:forKey:", v7, v6);
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 56), "_findOrAddPodcastForMediaItem:updaterCache:", v7, *(_QWORD *)(v1 + 64)));
            v13 = v17;
            if (v17)
            {
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "uuid"));

              if (v18)
              {
                v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForProperty:", MPMediaItemPropertyArtwork));
                objc_msgSend(v75, "bounds");
                v20 = v19;
                v22 = v21;
                v24 = v23;
                v26 = v25;
                v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uuid"));
                v28 = (void *)v27;
                if (v27)
                  v29 = (const __CFString *)v27;
                else
                  v29 = CFSTR("undefined");
                v30 = objc_claimAutoreleasedReturnValue(+[MTPodcast importedShowArtworkURLFor:](MTPodcast, "importedShowArtworkURLFor:", v29));

                v31 = (void *)objc_claimAutoreleasedReturnValue(+[PUIObjCArtworkProvider shared](PUIObjCArtworkProvider, "shared"));
                v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uuid"));
                v73 = v31;
                v74 = (void *)v30;
                LODWORD(v31) = objc_msgSend(v31, "hasArtworkForShow:withDimensions:fromSource:", v32, v30, v20, v22, v24, v26);

                if ((_DWORD)v31)
                {
                  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "imageWithSize:", v24, v26));
                  if (v33)
                  {
                    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uuid"));
                    objc_msgSend(v73, "cacheArtwork:withDimension:forShow:fromSource:", v33, v34, v30, v20, v22, v24, v26);

                  }
                }
                v35 = *(void **)(v1 + 56);
                v36 = *(_QWORD *)(v1 + 72);
                v37 = *(_QWORD *)(v1 + 80);
                v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uuid"));
                v39 = *(unsigned __int8 *)(v77 + 112);
                v85 = 0;
                objc_msgSend(v35, "_addEpisodeInCtx:mediaItem:episodeCache:podcastUuid:isRestoreDownloadCandidate:canSendNotifications:outEpisodeUUID:", v36, v7, v37, v38, v5, v39, &v85);
                v40 = v85;

                v1 = v77;
                v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v77 + 88), "objectForKey:", v40));
                if (v41)
                {
                  v42 = _MTLogCategoryMediaLibrary();
                  v43 = objc_claimAutoreleasedReturnValue(v42);
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                  {
                    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
                    *(_DWORD *)buf = 138543618;
                    v91 = v41;
                    v92 = 2112;
                    v93 = v44;
                    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Found duplicate medialibrary episode %{public}@ - %@", buf, 0x16u);

                    v1 = v77;
                  }

                  objc_msgSend(*(id *)(v1 + 96), "addObject:", v41);
                }
                if (v40)
                {
                  v45 = *(void **)(v1 + 88);
                  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "persistentId"));
                  objc_msgSend(v45, "setObject:forKey:", v46, v40);

                  v1 = v77;
                }

              }
            }
          }

          goto LABEL_33;
        }
        v11 = (void *)v10;
        v12 = objc_msgSend(v7, "isMissingAsset");

        if (((v12 ^ 1 | v5) & 1) != 0)
          goto LABEL_12;
LABEL_33:

        objc_autoreleasePoolPop(v4);
      }
      v79 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v99, 16);
    }
    while (v79);
  }

  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v80 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 80), "unvisitedEpisodes"));
  v47 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v81, v98, 16);
  if (v47)
  {
    v48 = v47;
    v49 = *(_QWORD *)v82;
    do
    {
      for (j = 0; j != v48; j = (char *)j + 1)
      {
        if (*(_QWORD *)v82 != v49)
          objc_enumerationMutation(v80);
        v51 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * (_QWORD)j);
        v52 = objc_autoreleasePoolPush();
        v53 = objc_msgSend(v51, "persistentID");
        if (v53)
        {
          v54 = *(void **)(v77 + 104);
          v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v53));
          v56 = objc_msgSend(v54, "containsObject:", v55);

        }
        else
        {
          v56 = 0;
        }
        v57 = _MTLogCategoryMediaLibrary();
        v58 = objc_claimAutoreleasedReturnValue(v57);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v53));
          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "uuid"));
          *(_DWORD *)buf = 138412802;
          v91 = v59;
          v92 = 2112;
          v93 = v60;
          v94 = 1024;
          v95 = v56;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "update-from-MusicLibrary found unvisited episode with pid %@ with UUID %@ - isRestoreDownloadCandidate %x", buf, 0x1Cu);

        }
        v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
        objc_msgSend(v61, "timeIntervalSinceReferenceDate");
        v63 = v62;
        objc_msgSend(v51, "downloadDate");
        v65 = v63 - v64;

        v66 = _MTLogCategoryMediaLibrary();
        v67 = objc_claimAutoreleasedReturnValue(v66);
        v68 = os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
        if (v65 <= 500.0)
        {
          if (v68)
          {
            v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v53));
            v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "uuid"));
            *(_DWORD *)buf = 138413058;
            v91 = v71;
            v92 = 2112;
            v93 = v72;
            v94 = 1024;
            v95 = v56;
            v96 = 2048;
            v97 = v65;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "update-from-MusicLibrary skip resetting assetURL of unvisited episode with pid %@ with UUID %@ - isRestoreDownloadCandidate %x. Downloaded %f milliseconds ago.", buf, 0x26u);

          }
        }
        else
        {
          if (v68)
          {
            v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v53));
            v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "uuid"));
            *(_DWORD *)buf = 138413058;
            v91 = v69;
            v92 = 2112;
            v93 = v70;
            v94 = 1024;
            v95 = v56;
            v96 = 2048;
            v97 = v65;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "update-from-MusicLibrary reset assetURL of unvisited episode with pid %@ with UUID %@ - isRestoreDownloadCandidate %x. Downloaded seconds ago %f", buf, 0x26u);

          }
          objc_msgSend(v51, "setAssetURL:", 0);
          if (v56)
            objc_msgSend(v51, "setPersistentID:", v53);
        }
        objc_autoreleasePoolPop(v52);
      }
      v48 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v81, v98, 16);
    }
    while (v48);
  }

}

void sub_100060674(id a1, id a2)
{
  (*((void (**)(id))a2 + 2))(a2);
}

void sub_100060710(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100060798(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;
  uint64_t v9;
  void (*v10)(uint64_t, void *);
  void *v11;
  id v12;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteObserver"));

  if (!v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observerLock"));
    objc_sync_enter(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteObserver"));

    if (!v4)
    {
      objc_initWeak(&location, *(id *)(a1 + 32));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue mainQueue](NSOperationQueue, "mainQueue"));
      v8 = _NSConcreteStackBlock;
      v9 = 3221225472;
      v10 = sub_100060918;
      v11 = &unk_1004A72B8;
      objc_copyWeak(&v12, &location);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "addObserverForName:object:queue:usingBlock:", MPMediaLibraryDidChangeNotification, 0, v6, &v8));
      objc_msgSend(*(id *)(a1 + 32), "setNoteObserver:", v7, v8, v9, v10, v11);

      objc_destroyWeak(&v12);
      objc_destroyWeak(&location);
    }
    objc_sync_exit(v3);

  }
}

void sub_1000608E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_100060918(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "updateMediaLibraryFromNotification:", v3);

}

void sub_1000609D4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id obj;

  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observerLock"));
  objc_sync_enter(obj);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteObserver"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteObserver"));
    objc_msgSend(v3, "removeObserver:", v4);

    objc_msgSend(*(id *)(a1 + 32), "setNoteObserver:", 0);
  }
  objc_sync_exit(obj);

}

void sub_100060A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100060F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100060F98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "assetURL"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "assetURL"));

  v8 = objc_msgSend(*(id *)(a1 + 32), "indexOfObject:", v6);
  v9 = objc_msgSend(*(id *)(a1 + 32), "indexOfObject:", v7);
  if ((uint64_t)v8 < (uint64_t)v9)
    v10 = -1;
  else
    v10 = (uint64_t)v8 > (uint64_t)v9;

  return v10;
}

void sub_100061020(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MTPlaylist aggregateOperation:attribute:predicate:managedObjectContext:](MTPlaylist, "aggregateOperation:attribute:predicate:managedObjectContext:", CFSTR("max:"), kPlaylistSortOrder, 0, *(_QWORD *)(a1 + 32)));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "longLongValue");

}

void sub_100061088(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  uint8_t buf[16];

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist insertNewPlaylistInManagedObjectContext:](MTPlaylist, "insertNewPlaylistInManagedObjectContext:", *(_QWORD *)(a1 + 32)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
  objc_msgSend(v3, "setTitle:", v4);

  v5 = *(void **)(a1 + 32);
  v6 = kMTEpisodeEntityName;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K in %@"), kEpisodeAssetURL, *(_QWORD *)(a1 + 48)));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectsInEntity:predicate:sortDescriptors:", v6, v7, 0));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "sortedArrayUsingComparator:", *(_QWORD *)(a1 + 56)));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mediaLibraryId"));
  objc_msgSend(v3, "setMediaLibraryId:", objc_msgSend(v10, "unsignedLongLongValue"));

  objc_msgSend(v3, "setIsItunesPlaylist:", 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "parentMediaLibraryId"));
  objc_msgSend(v3, "setParentMediaLibraryId:", objc_msgSend(v11, "longLongValue"));

  objc_msgSend(v3, "setIsItunesSmartPlaylist:", objc_msgSend(*(id *)(a1 + 40), "isSmart"));
  if (objc_msgSend(*(id *)(a1 + 40), "isFolder"))
  {
    objc_msgSend(v3, "setIsFolder:", 1);
    objc_msgSend(v3, "setUnplayedCount:", 0);
  }
  else
  {
    v12 = objc_msgSend(*(id *)(a1 + 48), "count");
    v13 = objc_msgSend(v9, "count");
    if (v12 != v13)
    {
      v14 = _MTLogCategoryMediaLibrary(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "******** items not found in database ***********", buf, 2u);
      }

    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithArray:](NSOrderedSet, "orderedSetWithArray:", v9));
    objc_msgSend(v3, "setEpisodes:", v16);

    objc_msgSend(v3, "updateUnplayedCount");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) += objc_msgSend(v9, "count");
  }
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  objc_msgSend(v3, "setSortOrder:");

  objc_autoreleasePoolPop(v2);
}

void sub_1000612DC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned __int8 v27;
  void *v28;
  void *v29;
  unsigned __int8 v30;
  void *v31;
  void *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;

  v2 = objc_autoreleasePoolPush();
  v3 = kMTPlaylistEntityName;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K = %@"), kPlaylistMediaLibraryId, *(_QWORD *)(a1 + 40)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectsInEntity:predicate:sortDescriptors:", v3, v5, 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));

  v8 = *(void **)(a1 + 32);
  v9 = kMTEpisodeEntityName;
  v10 = kEpisodeAssetURL;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "array"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K in %@"), v10, v11));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectsInEntity:predicate:sortDescriptors:", v9, v12, 0));

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "sortedArrayUsingComparator:", *(_QWORD *)(a1 + 64)));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithArray:](NSOrderedSet, "orderedSetWithArray:", v14));

  v17 = _MTLogCategoryMediaLibrary(v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
    v32 = v13;
    v20 = v2;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uuid"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v15, "count")));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "episodes"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v23, "count")));
    *(_DWORD *)buf = 138413058;
    v34 = v19;
    v35 = 2112;
    v36 = v21;
    v37 = 2112;
    v38 = v22;
    v39 = 2112;
    v40 = v24;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%@ %@ [%@ sorted] [%@ existing]", buf, 0x2Au);

    v2 = v20;
    v13 = v32;

  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "name"));
  v27 = objc_msgSend(v25, "isEqualToString:", v26);

  if ((v27 & 1) == 0)
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "name"));
    objc_msgSend(v7, "setTitle:", v28);

  }
  if (objc_msgSend(*(id *)(a1 + 56), "isFolder"))
  {
    objc_msgSend(v7, "setIsFolder:", 1);
    objc_msgSend(v7, "setUnplayedCount:", 0);
  }
  else
  {
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "episodes"));
    v30 = objc_msgSend(v15, "isEqualToOrderedSet:", v29);

    if ((v30 & 1) == 0)
      objc_msgSend(v7, "setEpisodes:", v15);
    objc_msgSend(v7, "updateUnplayedCount");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += objc_msgSend(v15, "count");
  }
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "parentMediaLibraryId"));
  objc_msgSend(v7, "setParentMediaLibraryId:", objc_msgSend(v31, "longLongValue"));

  objc_autoreleasePoolPop(v2);
}

void sub_100061A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void sub_100061A60(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", kPlaylistITunesPlaylistUuid));
  objc_msgSend(v6, "setUnplayedCount:", 0);
  objc_msgSend(v6, "setHidden:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 0);
  v2 = kMTPlaylistEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K in %@"), kPlaylistMediaLibraryId, *(_QWORD *)(a1 + 40)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsInEntity:predicate:sortDescriptors:", v2, v4, 0));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100061B7C;
  v7[3] = &unk_1004A7330;
  v8 = *(id *)(a1 + 32);
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v7);

}

id sub_100061B7C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "deletePlaylist:", a2);
}

void sub_100061FB4(id a1, NSString *a2, id a3, BOOL *a4)
{
  NSString *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  NSString *v11;
  __int16 v12;
  void *v13;

  v5 = a2;
  v6 = a3;
  v7 = _MTLogCategoryMediaLibrary(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
    v10 = 138412546;
    v11 = v5;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%@ - %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_1000633D0(id *a1)
{
  void *v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  id v15;
  float v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  void *v24;
  _BYTE v25[128];

  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "insertedAndUpdatedObjectIDs"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v20;
    *(_QWORD *)&v4 = 138412290;
    v18 = v4;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v20 != v6)
          objc_enumerationMutation(v2);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "existingObjectWithID:error:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v7), 0, v18));
        if (v8)
        {
          v9 = objc_msgSend(a1[6], "haveMediaLibraryPropertiesChangedForEpisode:", v8);
          v10 = (int)v9;
          v11 = _MTLogCategoryMediaLibrary(v9);
          v12 = objc_claimAutoreleasedReturnValue(v11);
          v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
          if (v10)
          {
            if (v13)
            {
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "title"));
              *(_DWORD *)buf = v18;
              v24 = v14;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "updating media library item for episode %@", buf, 0xCu);

            }
            v15 = objc_msgSend(v8, "persistentID");
            objc_msgSend(v8, "playhead");
            +[MTMediaLibraryUtil updateMediaLibraryItem:playhead:playState:playCount:](MTMediaLibraryUtil, "updateMediaLibraryItem:playhead:playState:playCount:", v15, objc_msgSend(v8, "playState"), objc_msgSend(v8, "playCount"), v16);
          }
          else
          {
            if (v13)
            {
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "title"));
              *(_DWORD *)buf = v18;
              v24 = v17;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "no changes to ML play state for episode %@", buf, 0xCu);

            }
          }
        }

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
    }
    while (v5);
  }

}

id sub_100064778(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateCellShadows:", *(unsigned __int8 *)(a1 + 40));
}

void sub_100064ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100064EF0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v7 = objc_msgSend(a2, "indexOfObject:", *(_QWORD *)(a1 + 32));
  if (v7 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", v7, a3));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    *a4 = 1;
  }
}

void sub_100065118(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = objc_msgSend(a2, "indexOfObject:", *(_QWORD *)(a1 + 32));
  if (v5 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = *(void **)(a1 + 40);
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", v5, a3));
    objc_msgSend(v6, "addObject:", v7);

  }
}

void sub_100066200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100066218(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dictionaryRepresentation"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000663D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  _QWORD v21[2];
  _QWORD v22[2];

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userId"));
    v8 = (void *)v7;
    if (v7)
      v9 = (__CFString *)v7;
    else
      v9 = &stru_1004C6D40;
    v10 = v9;

    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "clientId"));
    v12 = (void *)v11;
    if (v11)
      v13 = (__CFString *)v11;
    else
      v13 = &stru_1004C6D40;
    v14 = v13;

    v15 = *(void **)(a1 + 32);
    v21[0] = CFSTR("userId");
    v21[1] = CFSTR("clientId");
    v22[0] = v10;
    v22[1] = v14;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 2));
    objc_msgSend(v15, "im_addPropertiesWithDictionary:", v16);

  }
  else
  {
    v17 = _MTLogCategoryMetrics();
    v10 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
      v19 = 138412290;
      v20 = v18;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to fetch AnalyticsUserIdentifier from AMS for store reporting with error %@", (uint8_t *)&v19, 0xCu);

    }
  }

  +[IMMetrics recordEvent:topic:](IMMetrics, "recordEvent:topic:", *(_QWORD *)(a1 + 32), CFSTR("xp_dzc_main"));
}

void sub_10006679C(id a1)
{
  id v1;
  void *v2;

  v1 = -[MTFeedUpdateIdleCoordinator _initShared]([MTFeedUpdateIdleCoordinator alloc], "_initShared");
  v2 = (void *)qword_1005672E8;
  qword_1005672E8 = (uint64_t)v1;

}

void sub_100066A98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100066B1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100066D44(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForUuid:", v3));

  objc_msgSend(*(id *)(a1 + 40), "setIsSerialPodcast:", objc_msgSend(v4, "isSerialShowTypeInFeed"));
}

void sub_100066F10(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "addPodcastInfoViewHeader");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v2, "reloadData");

}

void sub_100067AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  _Block_object_dispose((const void *)(v11 - 232), 8);
  objc_destroyWeak((id *)(v11 - 184));
  _Unwind_Resume(a1);
}

void sub_100067B44(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForUuid:", v3));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_100067BBC(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100067C34;
  block[3] = &unk_1004A7570;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v2);
}

void sub_100067C34(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "refreshSettings");

}

id sub_100067C60(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateSubscription:", a2);
}

id sub_100067C6C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateNotifications:", a2);
}

id sub_100067C78(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateEpisodeOrderSetting:", a2);
}

id sub_100067C84(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateHidePlayedEpisodes:", a2);
}

id sub_100067C90(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateRemovePlayedDownloads:", a2);
}

id sub_100067C9C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateEpisodeLimit:", a2);
}

void sub_100068290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 216), 8);
  _Block_object_dispose((const void *)(v36 - 184), 8);
  _Block_object_dispose((const void *)(v36 - 152), 8);
  _Block_object_dispose((const void *)(v36 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_100068304(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = objc_autoreleasePoolPush();
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "podcastForUuid:", v4));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v5, "subscribed");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v5, "notifications");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v5, "playbackNewestToOldest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(v5, "deletePlayedEpisodes");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = objc_msgSend(v5, "episodeLimit");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = objc_msgSend(v5, "sortAscending");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = objc_msgSend(v5, "showTypeSetting");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = objc_msgSend(v5, "hidesPlayedEpisodes");

  objc_autoreleasePoolPop(v2);
}

NSString *__cdecl sub_100068B64(id a1, unint64_t a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("LIMIT_HEADER"), &stru_1004C6D40, 0));

  return (NSString *)v3;
}

NSString *__cdecl sub_10006936C(id a1, unint64_t a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("LIMIT_HEADER"), &stru_1004C6D40, 0));

  return (NSString *)v3;
}

id sub_100069650(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;

  v4 = objc_alloc((Class)NSAttributedString);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deletePlayedText:", a2));
  v6 = objc_msgSend(v4, "initWithString:", v5);

  return v6;
}

void sub_100069BA0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForUuid:", v3));

  objc_msgSend(v4, "setEpisodeLimit:", *(_QWORD *)(a1 + 48));
}

void sub_100069E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100069E34(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = objc_autoreleasePoolPush();
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "podcastForUuid:", v4));

  objc_msgSend(v5, "markPlaylistsForUpdate");
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dictionaryRepresentation"));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  objc_autoreleasePoolPop(v2);
}

void sub_100069FC0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForUuid:", v3));

  objc_msgSend(v4, "setNotifications:", *(unsigned __int8 *)(a1 + 48));
}

void sub_10006A14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10006A170(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  id v18;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForUuid:", v3));

  if (v4)
  {
    v5 = objc_msgSend(v4, "showTypeSetting");
    if (v5 != *(id *)(a1 + 64))
    {
      v6 = _MTLogCategoryDatabase(v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a1 + 64);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
        v11 = 134349826;
        v12 = v8;
        v13 = 2114;
        v14 = v9;
        v15 = 2114;
        v16 = v10;
        v17 = 2050;
        v18 = objc_msgSend(v4, "storeCollectionId");
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "MTShowSettingsViewController updateEpisodeOrderSetting about to switch show type setting to %{public}lu, show %{public}@, %{public}@, %{public}lld", (uint8_t *)&v11, 0x2Au);

      }
      objc_msgSend(v4, "setShowTypeSetting:", *(_QWORD *)(a1 + 64));
      objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v4, "showTypeSetting");
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    }
  }

}

void sub_10006A398(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForUuid:", v3));

  objc_msgSend(v4, "setHidesPlayedEpisodes:", *(unsigned int *)(a1 + 48));
}

void sub_10006ABC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10006ABD4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_cleanUpOldHiddenPodcasts");
}

void sub_10006ACC0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenPodcasts](MTPodcast, "predicateForNotHiddenPodcasts"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName, v2, 0));
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(a1 + 40), "_markAsHiddenPodcast:inContext:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7), *(_QWORD *)(a1 + 32));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

}

void sub_10006B1B0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t v14[128];
  uint8_t buf[4];
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName, *(_QWORD *)(a1 + 40), 0));
  v3 = _MTLogCategoryDatabase(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v16 = objc_msgSend(v2, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found %lu podcasts to delete from Recently Unfollowed.", buf, 0xCu);
  }

  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v5 = v2;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v9), "setLastUnfollowedDate:", 0.0, (_QWORD)v10);
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

  objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
}

void sub_10006B3EC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t v14[128];
  uint8_t buf[4];
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName, *(_QWORD *)(a1 + 40), 0));
  v3 = _MTLogCategoryDatabase(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v16 = objc_msgSend(v2, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found %lu podcasts to delete.", buf, 0xCu);
  }

  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v5 = v2;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(a1 + 48), "_unsafeDeletePodcast:ctx:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v9), *(_QWORD *)(a1 + 32), (_QWORD)v10);
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

}

void sub_10006BAF0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTCoreSpotlightUtil uniqueIdentifierForObject:](MTCoreSpotlightUtil, "uniqueIdentifierForObject:", a2));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
    v3 = v4;
  }

}

void sub_10006BCE0(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *j;
  id v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "podcastForUuid:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i)));
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v8, "syncType")));
        objc_msgSend(v2, "addObject:", v9);

        objc_msgSend(*(id *)(a1 + 48), "_markAsHiddenPodcast:inContext:", v8, *(_QWORD *)(a1 + 40));
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v5);
  }

  objc_msgSend(*(id *)(a1 + 40), "saveInCurrentBlock");
  if (*(_BYTE *)(a1 + 56) && objc_msgSend(v2, "count"))
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v10 = v2;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v19;
      do
      {
        for (j = 0; j != v12; j = (char *)j + 1)
        {
          if (*(_QWORD *)v19 != v13)
            objc_enumerationMutation(v10);
          v15 = objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)j), "integerValue", (_QWORD)v18);
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](_TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
          objc_msgSend(v16, "markSubscriptionSyncDirty:for:", 1, v15);

        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      }
      while (v12);
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](_TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
    objc_msgSend(v17, "setIsPlaylistSyncDirty:", 1);

  }
}

id sub_10006CF0C(uint64_t a1)
{
  id v1;
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10006D26C;
  v3[3] = &unk_1004A7760;
  v3[4] = a1;
  v1 = sub_10006D1EC(v3);
  return (id)objc_claimAutoreleasedReturnValue(v1);
}

id sub_10006D1EC(void *a1)
{
  id v1;
  uint64_t (**v2)(_QWORD, _QWORD, _QWORD);
  uint64_t v3;
  void *v4;

  v1 = a1;
  v2 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))v1;
  if (qword_1005672F0 != -1)
  {
    dispatch_once(&qword_1005672F0, &stru_1004A7780);
    if (v2)
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  if (!v1)
    goto LABEL_5;
LABEL_3:
  v3 = v2[2](v2, qword_1005672F8, qword_100567300);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
LABEL_6:

  return v4;
}

id sub_10006D26C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));
  v6 = v5;
  if (v5)
    v7 = v5;
  else
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", &off_1004D5B30));
  v8 = v7;

  return v8;
}

void sub_10006D2F8(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[5];
  _QWORD v16[5];

  v15[0] = &off_1004D5B30;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%d"), CFSTR("podcastAction-"), 0));
  v16[0] = v1;
  v15[1] = &off_1004D5B48;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%d"), CFSTR("podcastAction-"), 1));
  v16[1] = v2;
  v15[2] = &off_1004D5B60;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%d"), CFSTR("podcastAction-"), 2));
  v16[2] = v3;
  v15[3] = &off_1004D5B78;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%d"), CFSTR("podcastAction-"), 3));
  v16[3] = v4;
  v15[4] = &off_1004D5B90;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%d"), CFSTR("podcastAction-"), 4));
  v16[4] = v5;
  v6 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 5));
  v7 = (void *)qword_1005672F8;
  qword_1005672F8 = v6;

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v9 = (void *)qword_1005672F8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10006D504;
  v13[3] = &unk_1004A77A8;
  v14 = v8;
  v10 = v8;
  objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v13);
  v11 = objc_msgSend(v10, "copy");
  v12 = (void *)qword_100567300;
  qword_100567300 = (uint64_t)v11;

}

id sub_10006D504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, a3);
}

id sub_10006D514(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
}

void sub_10006DD5C(uint64_t a1)
{
  void *v2;
  id v3;

  if (*(_QWORD *)(a1 + 40) == 2)
    v3 = (id)objc_claimAutoreleasedReturnValue(+[UIColor cellEmpahsisSwitchBorderColor](UIColor, "cellEmpahsisSwitchBorderColor"));
  else
    v3 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "toggle"));
  objc_msgSend(v2, "setTintColor:", v3);

}

void sub_10006E39C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006E3C4(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      objc_msgSend(WeakRetained, "_asyncFetchArtworkDidLoadImage:forArtworkKey:", v6, *(_QWORD *)(a1 + 32));
    }
    else
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage defaultPodcastArtwork](UIImage, "defaultPodcastArtwork"));
      objc_msgSend(v4, "_asyncFetchArtworkDidLoadImage:forArtworkKey:", v5, *(_QWORD *)(a1 + 32));

    }
  }

}

void sub_10006E454(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      objc_msgSend(WeakRetained, "_asyncFetchArtworkDidLoadImage:forArtworkKey:", v6, *(_QWORD *)(a1 + 32));
    }
    else
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage defaultPodcastArtwork](UIImage, "defaultPodcastArtwork"));
      objc_msgSend(v4, "_asyncFetchArtworkDidLoadImage:forArtworkKey:", v5, *(_QWORD *)(a1 + 32));

    }
  }

}

void sub_10006E594(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "artworkKey"));
  v3 = objc_msgSend(v2, "isEqual:", *(_QWORD *)(a1 + 40));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "imageView"));
    objc_msgSend(v4, "setImage:", *(_QWORD *)(a1 + 48));

    objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
  }
}

void sub_10006E874(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = sub_100046614;
  v9 = sub_10004698C;
  v10 = 0;
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10006E974;
  v4[3] = &unk_1004A6F38;
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = &v5;
  dispatch_sync(v2, v4);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MZPreferences storeBookkeeperPreferences](MZPreferences, "storeBookkeeperPreferences"));
  objc_msgSend(v3, "setObject:forKey:", v6[5], CFSTR("MZKeyValueStoreClamps"));

  _Block_object_dispose(&v5, 8);
}

void sub_10006E95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10006E974(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingUserDefaultArchivedData"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  return objc_msgSend(*(id *)(a1 + 32), "setPendingUserDefaultArchivedData:", 0);
}

void sub_10006EC10(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v3, "setValue:forKey:", v4, *(_QWORD *)(a1 + 32));

}

id sub_10006ECF8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setValue:forKey:", 0, *(_QWORD *)(a1 + 32));
}

void sub_10006F244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006F268(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "valueForKey:", *(_QWORD *)(a1 + 32)));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10006F98C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_fetchShortcutItems"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10006FA14;
  v5[3] = &unk_1004A6640;
  v3 = *(_QWORD *)(a1 + 32);
  v6 = v2;
  v7 = v3;
  v4 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

}

id sub_10006FA14(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "setShortcutItems:", *(_QWORD *)(a1 + 32));

  return objc_msgSend(*(id *)(a1 + 40), "_endBackgroundTask");
}

uint64_t sub_10006FE20(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2 > 0);
}

uint64_t sub_10006FE34(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "scrollToTopMyPodcastsTabAnimated:");
  if ((result & 1) != 0)
    return (uint64_t)_objc_msgSend(*(id *)(a1 + 32), "scrollToTopMyPodcastsTabAnimated:", 1);
  return result;
}

uint64_t sub_10006FE78(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "scrollToTopUnplayedTabAnimated:");
  if ((result & 1) != 0)
    return (uint64_t)_objc_msgSend(*(id *)(a1 + 32), "scrollToTopUnplayedTabAnimated:", 1);
  return result;
}

uint64_t sub_100070070(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 1);
  return result;
}

uint64_t sub_10007008C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 1);
  return result;
}

void sub_100070174(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100070188(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_endBackgroundTask:", 1);
}

void sub_100070278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100070378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100070390(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = kMTPlaylistEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist topLevelPlaylistsExcludingFoldersPredicate](MTPlaylist, "topLevelPlaylistsExcludingFoldersPredicate"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist sortDescriptors](MTPlaylist, "sortDescriptors"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:limit:", v3, v4, v5, 0, 0));

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mt_compactMap:", &stru_1004A7988));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

id sub_100070450(id a1, MTPlaylist *a2)
{
  return +[UIApplicationShortcutItem mt_shortcutItemForStation:](UIApplicationShortcutItem, "mt_shortcutItemForStation:", a2);
}

void sub_100070F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100070F70(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  _BYTE v32[128];
  uint64_t v33;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc((Class)NSFetchRequest);
    v3 = objc_msgSend(v2, "initWithEntityName:", kMTPodcastEntityName);
    objc_msgSend(v3, "setPredicate:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3, "setResultType:", 0);
    objc_msgSend(v3, "setSortDescriptors:", *(_QWORD *)(a1 + 40));
    objc_msgSend(v3, "setFetchLimit:", objc_msgSend(*(id *)(a1 + 48), "fetchLimit"));
    v33 = kPodcastChannel;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v33, 1));
    objc_msgSend(v3, "setRelationshipKeyPathsForPrefetching:", v4);

    objc_msgSend(v3, "setReturnsObjectsAsFaults:", 0);
    v5 = *(void **)(a1 + 56);
    v31 = 0;
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v3, &v31));
    v7 = v31;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v6;

    v10 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
    if (!v10)
    {
      objc_msgSend(v7, "logAndThrow:", 1);
      v10 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
    }
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v11 = v10;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v28;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v28 != v14)
            objc_enumerationMutation(v11);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v15), "channel", (_QWORD)v27));
          v17 = v16;
          if (v16
            && (uint64_t)objc_msgSend(v16, "showCount") >= 2
            && (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "containsObject:", v17) & 1) == 0)
          {
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "addObject:", v17);
          }

          v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      }
      while (v13);
    }

  }
  v18 = *(_QWORD *)(a1 + 64);
  if (v18)
  {
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:limit:", kMTEpisodeEntityName, v18, *(_QWORD *)(a1 + 72), 0, objc_msgSend(*(id *)(a1 + 48), "fetchLimit")));
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;

  }
  v22 = *(_QWORD *)(a1 + 80);
  if (v22)
  {
    v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:limit:", kMTChannelEntityName, v22, *(_QWORD *)(a1 + 88), 0, objc_msgSend(*(id *)(a1 + 48), "fetchLimit")));
    objc_msgSend(v23, "addObjectsFromArray:", v24);

  }
  objc_msgSend(*(id *)(a1 + 48), "setPodcastResults:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), (_QWORD)v27);
  objc_msgSend(*(id *)(a1 + 48), "setEpisodeResults:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40));
  v25 = *(void **)(a1 + 48);
  v26 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "copy");
  objc_msgSend(v25, "setChannelResults:", v26);

}

void sub_100071C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100071CA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_100071E6C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = objc_alloc((Class)NSURLQueryItem);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));
  v6 = objc_msgSend(v4, "initWithName:value:", v3, v5);

  return v6;
}

id sub_100072080(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = objc_alloc((Class)NSURLQueryItem);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));
  v6 = objc_msgSend(v4, "initWithName:value:", v3, v5);

  return v6;
}

void sub_10007218C(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[3];

  v3[0] = CFSTR("playPodcast");
  v3[1] = CFSTR("playPodcasts");
  v3[2] = CFSTR("playStation");
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 3));
  v2 = (void *)qword_100567328;
  qword_100567328 = v1;

}

void sub_100072890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000728A8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "podcast"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uuid"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100073170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000731A0(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id obj;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v4 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v4 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeFetchRequest:error:", v3, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "uuid"));
  v8 = *(_QWORD *)(a1[7] + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_10007392C(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "instanceIdentifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "UUIDString"));
  v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }

}

void sub_1000739C0(uint64_t a1, void *a2)
{
  char v3;
  void *i;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id obj;
  uint64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  void *v33;
  _BYTE v34[128];

  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = a2;
  v20 = a1;
  v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v34, 16);
  v3 = 0;
  if (v23)
  {
    v22 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v23; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v22)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v6 = objc_msgSend(v5, "isExplicit");
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), objc_msgSend(v5, "episodeStoreId")));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v7));
        if (v8)
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v8));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "pf_queryAsDictionary"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("contentItemId")));
          if (objc_msgSend(v11, "length"))
          {
            v12 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v11);
            objc_msgSend(v5, "setInstanceIdentifier:", v12);

            a1 = v20;
          }
          objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v5, v8);

        }
        v3 |= v6;

      }
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v34, 16);
    }
    while (v23);
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsForKeys:notFoundMarker:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)));
    v14 = objc_msgSend(v13, "mutableCopy");

    v15 = _MTLogCategoryMediaRemote(objc_msgSend(v14, "removeObject:", *(_QWORD *)(a1 + 56)));
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = objc_msgSend(v14, "count");
      v18 = objc_msgSend(*(id *)(v20 + 48), "count");
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v20 + 40), "description"));
      *(_DWORD *)buf = 134218498;
      v29 = v17;
      v30 = 2048;
      v31 = v18;
      v32 = 2112;
      v33 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Fetched %lu player items for %lu identifiers. %@", buf, 0x20u);

    }
    if ((v3 & 1) != 0)
      +[PFRestrictionsUtil isExplicitContentAllowed](PFRestrictionsUtil, "isExplicitContentAllowed");
    (*(void (**)(void))(*(_QWORD *)(v20 + 64) + 16))();

  }
}

void sub_100074108(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("playPodcasts");
  v3[1] = CFSTR("playPodcast");
  v4[0] = &off_1004D5BC0;
  v4[1] = &off_1004D5BD8;
  v3[2] = CFSTR("playStation");
  v4[2] = &off_1004D5BF0;
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3));
  v2 = (void *)qword_100567340;
  qword_100567340 = v1;

}

void sub_100074E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak((id *)(v17 - 56));
  _Unwind_Resume(a1);
}

void sub_100074E40(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id WeakRetained;

  v2 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "podcastUuid"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForUuid:", v3));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v4 != 0;

}

void sub_100075000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak((id *)(v17 - 56));
  _Unwind_Resume(a1);
}

void sub_100075034(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id WeakRetained;

  v2 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "episodeUuid"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "episodeForUuid:", v3));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v4 != 0;

}

void sub_100075288(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = _MTLogCategoryMediaRemote(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Got homeUserId: %@", buf, 0xCu);
    }

    v10 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ic_sharedAccountStore](ACAccountStore, "ic_sharedAccountStore"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10007544C;
    v13[3] = &unk_1004A7B78;
    v14 = v10;
    v15 = *(id *)(a1 + 32);
    v12 = v10;
    objc_msgSend(v11, "ic_storeAccountForHomeUserIdentifier:completion:", v12, v13);

  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to get homeUserId with error %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_10007544C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  id v21;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    v8 = _MTLogCategoryMediaRemote(v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v20 = 138412290;
      v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to decode requesterUserId with error %@", (uint8_t *)&v20, 0xCu);
    }

  }
  if (!v5)
  {
    v10 = _MTLogCategoryMediaRemote(v6);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to locate store account for homeUserId", (uint8_t *)&v20, 2u);
    }

  }
  v12 = _MTLogCategoryMediaRemote(v6);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 138412290;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Found account %@ from requesterUserId", (uint8_t *)&v20, 0xCu);
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_privateListeningEnabledForHomeUsers"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", *(_QWORD *)(a1 + 32)));
  v16 = objc_msgSend(v15, "BOOLValue");

  v18 = _MTLogCategoryMediaRemote(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 67109120;
    LODWORD(v21) = v16;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Private listening enabled for account: %d", (uint8_t *)&v20, 8u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100075AF8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void (*v5)(void);
  id v6;

  v6 = a2;
  if (v6)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "insertionPosition"))
    {
      if (objc_msgSend(*(id *)(a1 + 32), "insertionPosition") != (id)1)
      {
LABEL_8:
        v5 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
        goto LABEL_9;
      }
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerController"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "upNextController"));
      objc_msgSend(v4, "addPlayerItemsToUpNext:", v6);
    }
    else
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerController"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "upNextController"));
      objc_msgSend(v4, "addPlayerItemsToPlayNext:", v6);
    }

    goto LABEL_8;
  }
  v5 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
LABEL_9:
  v5();

}

void sub_100076C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_100076CE0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "siriAssetInfo"));
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
  v7 = *(unsigned __int8 *)(a1 + 88);
  v8 = *(_BYTE *)(a1 + 89);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100076DF8;
  v10[3] = &unk_1004A7BF0;
  v11 = *(id *)(a1 + 56);
  v12 = *(id *)(a1 + 64);
  BYTE1(v9) = v8;
  LOBYTE(v9) = 1;
  +[MTSetPlaybackQueueUtil setPlaybackQueueForRequest:playerController:siriAssetInfo:enqueuer:savePlayHistory:startPlayback:forceLocal:isMagicMoment:completion:](MTSetPlaybackQueueUtil, "setPlaybackQueueForRequest:playerController:siriAssetInfo:enqueuer:savePlayHistory:startPlayback:forceLocal:isMagicMoment:completion:", v2, v3, v4, v5, v6, v7, v9, v10);

}

void sub_100076DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v6 = _MTLogCategoryMediaRemote(a1);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v10 = 138412802;
    v11 = v8;
    v12 = 2048;
    v13 = a2;
    v14 = 2048;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SetPlaybackQueue %@ has status %li and queueType %li", (uint8_t *)&v10, 0x20u);
  }

  if (*(_QWORD *)(a1 + 40))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetPlaybackQueueUtil queueCommandCustomStatusForRequestStatus:queueType:](MTSetPlaybackQueueUtil, "queueCommandCustomStatusForRequestStatus:queueType:", a2, a3));
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void sub_100076EF8(uint64_t a1, void *a2, char a3)
{
  id v6;
  id v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  _DWORD v12[2];

  v6 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
  v7 = objc_msgSend(*(id *)(a1 + 32), "length");
  if (v7 && (v7 = objc_msgSend(*(id *)(a1 + 40), "length")) != 0)
  {
    v7 = objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", *(_QWORD *)(a1 + 40));
    v8 = 0;
    if (v6 && (_DWORD)v7 && (a3 & 1) == 0)
      v8 = *(_BYTE *)(a1 + 72) == 0;
  }
  else
  {
    v8 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v8;
  v9 = _MTLogCategoryMediaRemote(v7);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    v12[0] = 67109120;
    v12[1] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Saving play history for request: %d", (uint8_t *)v12, 8u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100077030(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "siriAssetInfo"));
  v4 = *(void **)(a1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000770D8;
  v6[3] = &unk_1004A7C68;
  v7 = v4;
  +[MTSetPlaybackQueueUtil subscribeWithCommandURL:siriAssetInfo:requester:completion:](MTSetPlaybackQueueUtil, "subscribeWithCommandURL:siriAssetInfo:requester:completion:", v2, v3, v5, v6);

}

void sub_1000770D8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  const __CFString *v8;
  void *v9;
  int64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  const __CFString *v14;
  __int16 v15;
  uint64_t v16;

  v6 = _MTLogCategoryMediaRemote(a1);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = CFSTR("FAILED");
    if (a2)
      v8 = CFSTR("SUCCEEDED");
    v13 = 138412546;
    v14 = v8;
    v15 = 2048;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Siri Subscribed: command %@ with MTSubscribeErrorCode %li", (uint8_t *)&v13, 0x16u);
  }

  if (a2)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[SyncControllerFactory resolvedSyncController](_TtC8Podcasts21SyncControllerFactory, "resolvedSyncController"));
    objc_msgSend(v9, "syncSubscriptions");

  }
  if (*(_QWORD *)(a1 + 32))
  {
    v10 = +[MTSetPlaybackQueueUtil subscribeCommandStatusForErrorCode:](MTSetPlaybackQueueUtil, "subscribeCommandStatusForErrorCode:", a3);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[MPRemoteCommandStatus statusWithCode:](MPRemoteCommandStatus, "statusWithCode:", v10));
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);

  }
}

void sub_100077214(_QWORD *a1, void *a2)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint8_t v9[16];

  v4 = a2;
  if (v4)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
    (*(void (**)(void))(a1[5] + 16))();
  }
  else
  {
    v5 = _MTLogCategoryMediaRemote(0);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to lookup requesterUserId. This is fatal", v9, 2u);
    }

    v7 = a1[4];
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MPRemoteCommandStatus statusWithCode:](MPRemoteCommandStatus, "statusWithCode:", 1401));
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
}

void sub_1000772EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v6 = _MTLogCategoryMediaRemote(a1);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trackIdentifiers"));
    v10 = 138412802;
    v11 = v8;
    v12 = 2048;
    v13 = a2;
    v14 = 2048;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RemoteSetPlaybackQueue %@ has status %li and queueType %li", (uint8_t *)&v10, 0x20u);

  }
  if (*(_QWORD *)(a1 + 40))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetPlaybackQueueUtil queueCommandCustomStatusForRequestStatus:queueType:](MTSetPlaybackQueueUtil, "queueCommandCustomStatusForRequestStatus:queueType:", a2, a3));
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void sub_100077404(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MPRemoteCommandStatus statusWithCode:](MPRemoteCommandStatus, "statusWithCode:", 0));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10007779C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  id v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  void *v22;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    v8 = _MTLogCategoryMediaRemote(v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v20 = v10;
      v21 = 2112;
      v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "SetPlaybackSession: Failed to lookup account DSID %@ with error %@", buf, 0x16u);
    }

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerController"));
  v12 = *(void **)(a1 + 48);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10007792C;
  v15[3] = &unk_1004A7CE0;
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 40);
  v16 = v13;
  v17 = v14;
  v18 = *(id *)(a1 + 56);
  +[MTRemoteSetPlaybackQueueUtil decodeAndSetPlaybackQueueForController:fromIdentifiers:enqueuer:accountLookupFailed:startPlayback:upNextQueueIntent:completion:](MTRemoteSetPlaybackQueueUtil, "decodeAndSetPlaybackQueueForController:fromIdentifiers:enqueuer:accountLookupFailed:startPlayback:upNextQueueIntent:completion:", v11, v13, v5, v7 != 0, 0, 2, v15);

}

void sub_10007792C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  int v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v6 = _MTLogCategoryMediaRemote(a1);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "count");
    v11 = 134218496;
    v12 = v8;
    v13 = 2048;
    v14 = a2;
    v15 = 2048;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SetPlaybackSession set %lu identifiers and has status %li and queueType %li", (uint8_t *)&v11, 0x20u);
  }

  if (a2 == 1)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerController"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "player"));
    objc_msgSend(v10, "setPlaybackSpeed:", 0);

  }
  if (*(_QWORD *)(a1 + 48))
  {
    +[MTSetPlaybackQueueUtil queueCommandStatusForRequestStatus:queueType:](MTSetPlaybackQueueUtil, "queueCommandStatusForRequestStatus:queueType:", a2, a3);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_100077C78(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "player"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "manifest"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentItem"));

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 40), "_donateCurrentPlayerItem");
    v5 = objc_msgSend(*(id *)(a1 + 32), "playWithReason:interruptEvent:", 7, *(unsigned __int8 *)(a1 + 56));
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
    {
      if (v5)
        v7 = 0;
      else
        v7 = 200;
      (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, v7);
    }
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerController"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100077DA4;
    v10[3] = &unk_1004A7D30;
    v9 = *(id *)(a1 + 48);
    v10[4] = *(_QWORD *)(a1 + 40);
    v11 = v9;
    +[MTSetPlaybackQueueUtil setAutoResumePlaybackQueueAndStartPlayback:playerController:forceLocal:reason:interactive:completion:](MTSetPlaybackQueueUtil, "setAutoResumePlaybackQueueAndStartPlayback:playerController:forceLocal:reason:interactive:completion:", 1, v8, 0, 7, 0, v10);

  }
}

id sub_100077DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    if (a2 == 1)
      v4 = 0;
    else
      v4 = 200;
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
  }
  return objc_msgSend(*(id *)(a1 + 32), "_donateCurrentPlayerItem");
}

uint64_t sub_100077EB4(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  uint64_t result;

  if (!a2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "player"));
    v5 = objc_msgSend(v4, "isPlaybackRequested");

    if (v5)
      objc_msgSend(*(id *)(a1 + 32), "_donateCurrentPlayerItem");
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

id *sub_100078E38(id *result, uint64_t a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "setValue:forKey:shareModes:", a2, CFSTR("MTShareImage"), 7);
  return result;
}

void sub_100079120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007913C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint8_t buf[4];
  void *v14;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100079270;
    v10[3] = &unk_1004A7E80;
    objc_copyWeak(&v12, (id *)(a1 + 32));
    v11 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

    objc_destroyWeak(&v12);
  }
  else
  {
    v8 = _MTLogCategoryArtworkDownload(v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to load artwork for sharing: %@", buf, 0xCu);
    }

  }
}

void sub_100079270(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setValue:forKey:shareModes:", *(_QWORD *)(a1 + 32), CFSTR("MTShareImage"), 1);
    WeakRetained = v3;
  }

}

id sub_10007963C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setImageIgnoringSmallerSize:forKey:shareMode:", a2, CFSTR("MTShareImage"), 1);
}

void sub_100079720(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint8_t buf[4];
  void *v16;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5)
  {
    v8 = _MTLogCategoryArtworkDownload(v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to fetch artwork for sharing: '%@'", buf, 0xCu);
    }

  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100079848;
  v12[3] = &unk_1004A7028;
  v10 = *(id *)(a1 + 32);
  v13 = v5;
  v14 = v10;
  v11 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v12);

}

uint64_t sub_100079848(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_10007A220(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_10007AC04(uint64_t a1, uint64_t a2)
{
  void *v3;

  if ((a2 & 1) == 0 && *(_BYTE *)(a1 + 56))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v3, "openURL:", *(_QWORD *)(a1 + 40));

    a2 = 1;
  }
  return _objc_msgSend(*(id *)(a1 + 32), "completeOpenURLWithSuccess:completionHandler:", a2, *(_QWORD *)(a1 + 48));
}

uint64_t sub_10007ACE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10007B990(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
    objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 0, 0);

  }
}

void sub_10007BD50(uint64_t a1)
{
  void *v2;
  void (**v3)(_QWORD, _QWORD, _QWORD);
  void *v4;
  char v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controller"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionBlock"));

  if (v2)
  {
    v3 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionBlock"));
    ((void (**)(_QWORD, id, _QWORD))v3)[2](v3, v7, *(_QWORD *)(a1 + 40));

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "delegate"));
  v5 = objc_opt_respondsToSelector(v4, "didPerformActionInSheet:");

  if ((v5 & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "delegate"));
    objc_msgSend(v6, "didPerformActionInSheet:", *(_QWORD *)(a1 + 32));

  }
}

void sub_10007BF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007BF58(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actions"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "presentingButton"));
    objc_msgSend(v4, "showActionSheetWithActions:fromButton:", v2, v3);

    WeakRetained = v4;
  }

}

id sub_10007E6D8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = _MTLogCategoryAsyncTask();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MZAsynchronousTask] WARNING: task timed out: %@", (uint8_t *)&v6, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_invalidateTaskTimer");
  return objc_msgSend(*(id *)(a1 + 32), "setCancelType:", 2);
}

id sub_10007E790(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = _MTLogCategoryAsyncTask();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MZAsynchronousTask] WARNING: background-task assertion HOLD timed out: %@", (uint8_t *)&v6, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_invalidateTaskAssertionForced:", 1);
  return objc_msgSend(*(id *)(a1 + 32), "_invalidateAssertionTimer");
}

void sub_10007E96C(uint64_t a1)
{
  void *v2;
  NSObject *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "taskTimeoutTimer"));

  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "taskTimeoutTimer"));
    dispatch_source_cancel(v3);

    _objc_msgSend(*(id *)(a1 + 32), "setTaskTimeoutTimer:", 0);
  }
}

void sub_10007EA24(uint64_t a1)
{
  void *v2;
  NSObject *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assertionTimeoutTimer"));

  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assertionTimeoutTimer"));
    dispatch_source_cancel(v3);

    _objc_msgSend(*(id *)(a1 + 32), "setAssertionTimeoutTimer:", 0);
  }
}

void sub_10007EB90(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  uint64_t v15;

  v2 = *(void **)(a1 + 40);
  if (v2 != *(void **)(*(_QWORD *)(a1 + 32) + 16))
  {
    v3 = objc_msgSend(v2, "copy");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v3;

    v8 = _MTLogCategoryAsyncTask(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = objc_retainBlock(*(id *)(a1 + 40));
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138412546;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "set expirationHandler %@ for task: %@", (uint8_t *)&v12, 0x16u);

    }
  }
}

void sub_10007ED34(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10007EDE8(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  uint64_t v15;

  v2 = *(void **)(a1 + 40);
  if (v2 != *(void **)(*(_QWORD *)(a1 + 32) + 24))
  {
    v3 = objc_msgSend(v2, "copy");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = v3;

    v8 = _MTLogCategoryAsyncTask(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = objc_retainBlock(*(id *)(a1 + 40));
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138412546;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "set finishedHandler %@ for task: %@", (uint8_t *)&v12, 0x16u);

    }
  }
}

void sub_10007EF8C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_10007F068(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;

  v2 = _MTLogCategoryAsyncTask();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_DWORD *)(a1 + 48);
    v7 = 138412546;
    v8 = v4;
    v9 = 1024;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Invoking expiration handler for %@, with cancelType = %d", (uint8_t *)&v7, 0x12u);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

_DWORD *sub_10007F184(_DWORD *result)
{
  int v1;
  uint64_t v2;

  v1 = result[10];
  v2 = *((_QWORD *)result + 4);
  if (v1 != *(_DWORD *)(v2 + 12))
  {
    *(_DWORD *)(v2 + 12) = v1;
    result = (_DWORD *)*((_QWORD *)result + 4);
    if (result[3])
      return _objc_msgSend(result, "_onQueueFireExpirationHandlerIfNecesary");
  }
  return result;
}

uint64_t sub_10007F240(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 12);
  return result;
}

void sub_10007F2D0(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), *(id *)(a1 + 40));
}

uint64_t sub_10007F390(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10007F3A0(uint64_t a1)
{

}

void sub_10007F3A8(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_10007F438(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 40), *(id *)(a1 + 40));
}

void sub_10007F4F8(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 40));
}

id sub_10007F658(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_invalidateAssertionTimer");
  objc_msgSend(*(id *)(a1 + 32), "_invalidateTaskTimer");
  return objc_msgSend(*(id *)(a1 + 32), "setCancelType:", 1);
}

void sub_10007F68C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  double v5;
  dispatch_time_t v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  double v11;
  dispatch_time_t v12;
  NSObject *v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "taskTimeoutTimer"));

  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "taskTimeoutTimer"));
    dispatch_suspend(v3);

    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "taskTimeoutTimer"));
    objc_msgSend(*(id *)(a1 + 32), "taskTimeout");
    v6 = dispatch_time(0, (unint64_t)(v5 * 1000000000.0));
    dispatch_source_set_timer(v4, v6, 0xFFFFFFFFFFFFFFFFLL, 0);

    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "taskTimeoutTimer"));
    dispatch_resume(v7);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assertionTimeoutTimer"));

  if (v8)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assertionTimeoutTimer"));
    dispatch_suspend(v9);

    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assertionTimeoutTimer"));
    objc_msgSend(*(id *)(a1 + 32), "assertionTimeout");
    v12 = dispatch_time(0, (unint64_t)(v11 * 1000000000.0));
    dispatch_source_set_timer(v10, v12, 0xFFFFFFFFFFFFFFFFLL, 0);

    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assertionTimeoutTimer"));
    dispatch_resume(v13);

  }
}

void sub_10007F8B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "finishedHandler"));
  v4 = (void (**)(_QWORD))v2;
  if (v2)
  {
    v5 = _MTLogCategoryAsyncTask(v2, v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = 138412802;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2112;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Invoking completion handler for %@, result = %@, error = %@", (uint8_t *)&v10, 0x20u);
    }

    v4[2](v4);
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void sub_10007FB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10007FB3C(uint64_t a1)
{
  id result;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  result = objc_msgSend(*(id *)(a1 + 32), "taskInvalidationDisabled");
  if (!(_DWORD)result || *(_BYTE *)(a1 + 48))
  {
    objc_msgSend(*(id *)(a1 + 32), "setTaskInvalidationDisabled:", 0);
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "taskAssertion"));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

    return objc_msgSend(*(id *)(a1 + 32), "setTaskAssertion:", 0);
  }
  return result;
}

void sub_10007FE44(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_10007FE5C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "taskInvalidationDisabled");
  if ((result & 1) == 0)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "setTaskInvalidationDisabled:", 1);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

void sub_10007FEA0(uint64_t a1, void *a2)
{
  id v3;
  dispatch_queue_global_t global_queue;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  global_queue = dispatch_get_global_queue(0, 0);
  v5 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007FF94;
  block[3] = &unk_1004A7F98;
  v12 = *(id *)(a1 + 56);
  v8 = v3;
  v9 = *(id *)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 32);
  v6 = v3;
  dispatch_async(v5, block);

}

void sub_10007FF94(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

id *sub_10007FFC8(id *result)
{
  if (*(_BYTE *)(*((_QWORD *)result[5] + 1) + 24))
    return (id *)objc_msgSend(result[4], "_invalidateTaskAssertionForced:", 1);
  return result;
}

id sub_100080318(double a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (qword_100567358 != -1)
    dispatch_once(&qword_100567358, &stru_1004A8050);
  v2 = (void *)qword_100567350;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringFromDate:", v3));

  return v4;
}

id sub_10008086C(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = a1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v3, "count")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v3));

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10008182C;
  v9[3] = &unk_1004A8030;
  v7 = v5;
  v10 = v7;
  objc_msgSend(v4, "enumerateValuesForProperties:usingBlock:", v6, v9);

  return v7;
}

id sub_100080944(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  char **v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v3 = a2;
  v4 = sub_10008086C(*(void **)(a1 + 32), v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v7 = v3;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (!v8)
    goto LABEL_16;
  v9 = v8;
  v10 = *(_QWORD *)v23;
  v11 = &selRef_shareImageProvider;
  while (2)
  {
    v12 = 0;
    v21 = v11[247];
    do
    {
      if (*(_QWORD *)v23 != v10)
        objc_enumerationMutation(v7);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v22 + 1)
                                                                                                  + 8 * (_QWORD)v12)));
      v14 = objc_opt_class(NSURL);
      if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
      {
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "absoluteString"));
LABEL_11:
        v17 = (void *)v15;

        v13 = v17;
        goto LABEL_12;
      }
      v16 = objc_opt_class(NSString);
      if ((objc_opt_isKindOfClass(v13, v16) & 1) == 0 && (objc_opt_respondsToSelector(v13, v21) & 1) != 0)
      {
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "stringValue"));
        goto LABEL_11;
      }
LABEL_12:
      v18 = objc_opt_class(NSString);
      if ((objc_opt_isKindOfClass(v13, v18) & 1) == 0 || !objc_msgSend(v13, "length"))
      {

        goto LABEL_19;
      }
      objc_msgSend(v6, "appendString:", v13);

      v12 = (char *)v12 + 1;
    }
    while (v9 != v12);
    v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    v11 = &selRef_shareImageProvider;
    if (v9)
      continue;
    break;
  }
LABEL_16:

  if (objc_msgSend(v6, "length"))
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSData MZStringByMD5HashingString:](NSData, "MZStringByMD5HashingString:", v6));
  else
LABEL_19:
    v19 = 0;

  return v19;
}

id *sub_100080FA4(id *result, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (id *)objc_msgSend(result[4], "setObject:forKey:", a3, a2);
  return result;
}

void sub_1000817E4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100567350;
  qword_100567350 = (uint64_t)v1;

  objc_msgSend((id)qword_100567350, "setTimeStyle:", 3);
  objc_msgSend((id)qword_100567350, "setDateStyle:", 1);
}

id *sub_10008182C(id *result, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (id *)objc_msgSend(result[4], "setObject:forKey:", a3, a2);
  return result;
}

id sub_100081C14(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setTitle:forState:", *(_QWORD *)(a1 + 40), 0);
  objc_msgSend(*(id *)(a1 + 32), "sizeToFit");
  return _objc_msgSend(*(id *)(a1 + 32), "layoutBelowIfNeeded");
}

_UNKNOWN **sub_100081F9C()
{
  _UNKNOWN **v0;

  v0 = (_UNKNOWN **)qword_100567360;
  if (!qword_100567360)
  {
    qword_100567360 = (uint64_t)&off_1004D7560;

    v0 = &off_1004D7560;
  }
  return v0;
}

void sub_100081FD4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateAutorefreshRateSettingAndRestartTimer:", 1);

}

id sub_1000821F4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((result & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsActive:", 1);
    return objc_msgSend(*(id *)(a1 + 32), "_onQueueUpdateTimerForActiveChanges");
  }
  return result;
}

id sub_100082290(uint64_t a1)
{
  id result;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  result = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((_DWORD)result)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsActive:", 0);
    objc_msgSend(*(id *)(a1 + 32), "_onQueueUpdateTimerForActiveChanges");
    result = objc_msgSend(*(id *)(a1 + 32), "hasLocalChangesToSync");
    if ((_DWORD)result)
    {
      result = objc_msgSend(*(id *)(a1 + 32), "_automaticallySynchronizeLocalChangesOnResignActive");
      if ((_DWORD)result)
      {
        v3 = _MTLogCategoryCloudSync(result);
        v4 = objc_claimAutoreleasedReturnValue(v3);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v5 = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "starting synchronizing changes for resignActive", v5, 2u);
        }

        return objc_msgSend(*(id *)(a1 + 32), "_onQueueSynchronizeWithAutosynchronizeMask:withCompletionBlock:", 2, &stru_1004A80F0);
      }
    }
  }
  return result;
}

void sub_100082344(id a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = _MTLogCategoryCloudSync(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "finished synchronizing changes for resignActive", v3, 2u);
  }

}

id sub_100082420(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueueSetHasLocalChangesToSync:", *(unsigned __int8 *)(a1 + 40));
}

void sub_100082554(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  kdebug_trace(723517492, 0, 0, 0, 0);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000825E0;
  v3[3] = &unk_1004A6378;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "_onQueueSynchronizeImmediatelyWithCompletionBlock:", v3);

}

uint64_t sub_1000825E0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    (*(void (**)(void))(v1 + 16))();
  return kdebug_trace(723517496, 0, 0, 0, 0);
}

void sub_100082698(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100082704;
  v2[3] = &unk_1004A8118;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "_onQueueLoadBagContextWithCompletionHandler:", v2);

}

uint64_t sub_100082704(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    v5 = objc_msgSend(a2, "UPPDisabled") ^ 1;
    if (a3)
      a2 = 0;
    else
      a2 = (void *)v5;
  }
  return (*(uint64_t (**)(uint64_t, void *))(v3 + 16))(v3, a2);
}

void sub_100082A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100082AC0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100082AD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  id *WeakRetained;
  id *v7;
  unsigned int v8;
  id v9;
  __int16 v10[8];

  v2 = kdebug_trace(723517688, 0, 0, 0, 0);
  v4 = _MTLogCategoryUPPSync(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v10[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "_onQueueSync - UPP synchronizeTask did expire", (uint8_t *)v10, 2u);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = objc_msgSend(WeakRetained[4], "cancelType");
    v9 = v7[6];
    if (v8 == 2)
      objc_msgSend(v9, "timeout");
    else
      objc_msgSend(v9, "cancel");
    objc_msgSend(v7[4], "finishTaskOperationWithResult:error:", &__kCFBooleanFalse, 0);
  }

}

void sub_100082BA4(uint64_t a1)
{
  void *v1;
  void *v2;
  id *WeakRetained;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  unsigned __int8 v12;
  char v13;
  id v14;
  id v15;
  uint8_t buf[4];
  __CFString *v17;

  kdebug_trace(723517684, 0, 0, 0, 0);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = _MTLogCategoryUPPSync(WeakRetained, v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[4], "error"));
      if (v9)
      {
        v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[4], "error"));
        v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedFailureReason"));
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(" ERROR = '%@'."), v2));
      }
      else
      {
        v10 = &stru_1004C6D40;
      }
      *(_DWORD *)buf = 138412290;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "_onQueueSync - UPP synchronize completed. %@", buf, 0xCu);
      if (v9)
      {

      }
    }

    objc_msgSend(v6[4], "invokeTaskCompletionBlocksWithBlock:", &stru_1004A8158);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[4], "result"));
    v12 = objc_msgSend(v11, "BOOLValue");

    v13 = v12 ^ 1;
    if (!*((_BYTE *)v6 + 8))
      v13 = 0;
    *((_BYTE *)v6 + 8) = v13;
    v14 = v6[6];
    v6[6] = 0;

    v15 = v6[4];
    v6[4] = 0;

    objc_msgSend(v6, "_onQueueStartNewTimer");
  }

}

void sub_100082D58(id a1, id a2)
{
  (*((void (**)(id))a2 + 2))(a2);
}

void sub_100082D64(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id WeakRetained;
  double v9;
  double v10;
  void *v11;
  NSObject *v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)WeakRetained + 4), "metrics"));
    objc_msgSend(v11, "setBagLookupEndTime:", v10);

    v12 = *((_QWORD *)WeakRetained + 9);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100082E78;
    block[3] = &unk_1004A81A8;
    objc_copyWeak(&v16, v7);
    v14 = v6;
    v15 = v5;
    dispatch_async(v12, block);

    objc_destroyWeak(&v16);
  }

}

void sub_100082E78(uint64_t a1)
{
  id *v2;
  unsigned __int8 *WeakRetained;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  MZUniversalPlaybackPositionSyncHandler *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  id v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[16];

  v2 = (id *)(a1 + 48);
  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v4 = *(id *)(a1 + 32);
    if (v4)
    {
LABEL_3:
      v5 = (void *)*((_QWORD *)WeakRetained + 4);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
      objc_msgSend(v5, "finishTaskOperationWithResult:error:", v6, v4);

      goto LABEL_4;
    }
    v7 = *(void **)(a1 + 40);
    if (!v7)
    {
      v17 = sub_1000830A0(*(void **)(a1 + 32));
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("MZKeyValueStoreErrorDomain"), -2008, v18));

      if (v4)
        goto LABEL_3;
      v7 = *(void **)(a1 + 40);
    }
    if (objc_msgSend(v7, "UPPDisabled"))
    {
      v8 = sub_1000830A0(*(void **)(a1 + 32));
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("MZKeyValueStoreErrorDomain"), -2007, v9));

      if (v4)
        goto LABEL_3;
    }
    objc_msgSend(*((id *)WeakRetained + 4), "beginTaskOperation");
    v10 = -[MZUniversalPlaybackPositionSyncHandler initWithDataSource:bagContext:andTask:]([MZUniversalPlaybackPositionSyncHandler alloc], "initWithDataSource:bagContext:andTask:", *((_QWORD *)WeakRetained + 2), *(_QWORD *)(a1 + 40), *((_QWORD *)WeakRetained + 4));
    v11 = (void *)*((_QWORD *)WeakRetained + 6);
    *((_QWORD *)WeakRetained + 6) = v10;

    v12 = objc_msgSend(*((id *)WeakRetained + 6), "setCanRequestStoreSignIn:", WeakRetained[9]);
    v14 = _MTLogCategoryUPPSync(v12, v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "_onQueueSync - UPP synchronize operation beginning...", buf, 2u);
    }

    v16 = (void *)*((_QWORD *)WeakRetained + 6);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100083124;
    v19[3] = &unk_1004A8180;
    objc_copyWeak(&v20, v2);
    objc_msgSend(v16, "synchronizeWithCompletionHandler:", v19);
    objc_destroyWeak(&v20);
  }
LABEL_4:

}

void sub_10008308C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1000830A0(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "objectForKey:", NSUnderlyingErrorKey));

    v3 = 0;
    if (!v2)
    {
      v3 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(v3, "setObject:forKey:", v1, NSUnderlyingErrorKey);
    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_100083124(uint64_t a1, char a2, void *a3)
{
  id v5;
  _QWORD *WeakRetained;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  _QWORD *v10;
  id v11;
  char v12;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = WeakRetained[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000831D4;
    block[3] = &unk_1004A7698;
    v10 = WeakRetained;
    v12 = a2;
    v11 = v5;
    dispatch_async(v8, block);

  }
}

void sub_1000831D4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  objc_msgSend(v2, "finishTaskOperationWithResult:error:", v3, *(_QWORD *)(a1 + 40));

}

id sub_1000832E8(uint64_t a1)
{
  double v2;
  double v3;
  _BOOL8 v4;
  double v5;

  objc_msgSend(*(id *)(a1 + 40), "pollingInterval");
  objc_msgSend(*(id *)(a1 + 32), "setBagSpecifiedPollingInterval:");
  objc_msgSend(*(id *)(a1 + 32), "_effectiveAutorefreshRate");
  v3 = v2;
  if ((objc_msgSend(*(id *)(a1 + 32), "initialAutosyncNeeded") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "autorefreshRate");
    v4 = v3 != v5;
  }
  return objc_msgSend(*(id *)(a1 + 32), "_updateAutorefreshRateSettingAndRestartTimer:", v4);
}

void sub_100083678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000836C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "_updateSettingsFromLoadedBagContext:", v7);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);

}

uint64_t sub_100083724(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_100083738(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id *WeakRetained;
  id *v5;
  __int16 v6[8];

  v2 = _MTLogCategoryCloudSync(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v6[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "_onQueueLoadBag - UPP bagLookupTask did expire", (uint8_t *)v6, 2u);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained[5], "finishTaskOperationWithResult:error:", 0, 0);

}

void sub_1000837C4(uint64_t a1)
{
  void *v1;
  void *v2;
  id *WeakRetained;
  id *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  __CFString *v8;
  id v9;
  uint8_t buf[4];
  __CFString *v11;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = _MTLogCategoryCloudSync(WeakRetained);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4[5], "error"));
      if (v7)
      {
        v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4[5], "error"));
        v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedFailureReason"));
        v8 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(" ERROR = '%@'."), v2));
      }
      else
      {
        v8 = &stru_1004C6D40;
      }
      *(_DWORD *)buf = 138412290;
      v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "_onQueueLoadBag - UPP load bag completed.%@", buf, 0xCu);
      if (v7)
      {

      }
    }

    objc_msgSend(v4[5], "invokeTaskCompletionBlocksWithBlock:", &stru_1004A8218);
    v9 = v4[5];
    v4[5] = 0;

  }
}

void sub_100083914(id a1, id a2)
{
  (*((void (**)(id))a2 + 2))(a2);
}

void sub_100083928(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id *WeakRetained;
  id *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 32);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      v10 = _MTLogCategoryCloudSync(WeakRetained);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "_onQueueLoadBag - load bag operation beginning...", buf, 2u);
      }

      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100083A60;
      v12[3] = &unk_1004A81D0;
      objc_copyWeak(&v13, v7);
      +[MZUPPBagContext loadBagContextFromIMURLBag:completionBlock:](MZUPPBagContext, "loadBagContextFromIMURLBag:completionBlock:", v5, v12);
      objc_destroyWeak(&v13);
    }
    else
    {
      objc_msgSend(WeakRetained[5], "finishTaskOperationWithResult:error:", 0, v6);
    }
  }

}

void sub_100083A4C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100083A60(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  NSObject **WeakRetained;
  NSObject **v9;
  NSObject *v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 32);
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v10 = WeakRetained[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100083B40;
    block[3] = &unk_1004A81A8;
    objc_copyWeak(&v14, v7);
    v12 = v5;
    v13 = v6;
    dispatch_async(v10, block);

    objc_destroyWeak(&v14);
  }

}

void sub_100083B40(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[5], "finishTaskOperationWithResult:error:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    WeakRetained = v3;
  }

}

void sub_100083C00(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSErrorUserInfoKey v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMURLBag sharedInstance](IMURLBag, "sharedInstance"));
  if (v2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v6 = NSLocalizedDescriptionKey;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Could not load bag context due to bag failure to load.")));
    v7 = v3;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSCocoaErrorDomain, 100, v4));

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

id sub_100083DBC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueueResumeTimer");
}

id sub_100083DC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueueSuspendTimer");
}

id sub_100083E24(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueueSynchronizeWithAutosynchronizeMask:withCompletionBlock:", 1, 0);
}

void sub_1000859F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a30);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

id sub_100085B08(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "syncInProgress");
  return _objc_msgSend(*(id *)(a1 + 32), "setSyncInProgress:", 1);
}

void sub_100085B40(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int v14;
  void *v15;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MZUniversalPlaybackPositionMetadata metadataWithValuesFromDataSourceItem:](MZUniversalPlaybackPositionMetadata, "metadataWithValuesFromDataSourceItem:", v3));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "itemIdentifier"));
  v7 = objc_msgSend(v6, "length");

  if (v7)
  {
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transactionProcessor"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject metadataItemsFromDataSource](v10, "metadataItemsFromDataSource"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "itemIdentifier"));
    objc_msgSend(v11, "setObject:forKey:", v5, v12);

  }
  else
  {
    v13 = _MTLogCategoryUPPSync(v8, v9);
    v10 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v14 = 138543362;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Will skip syncing item with no sync metadataIdentifier: %{public}@", (uint8_t *)&v14, 0xCu);
    }
  }

}

id sub_100085C90(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "nextObject");
}

void sub_100085D58(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  double v6;
  double v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  double v12;
  void *i;
  void *v14;
  double v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t v25[128];
  uint8_t buf[4];
  double v27;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTEpisodeEntityName, *(_QWORD *)(a1 + 40), 0));
  v2 = objc_msgSend(v1, "count");
  if (v2)
  {
    v4 = _MTLogCategoryUPPSync(v2, v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v27 = COERCE_DOUBLE(objc_msgSend(v1, "count"));
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found %{public}ld local episodes with nil metadataIdentifier. Proceeding to populate the metadataIdentifiers", buf, 0xCu);
    }

    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    v7 = v6;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v8 = v1;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v22;
      v12 = v7;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v11)
            objc_enumerationMutation(v8);
          v14 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v14, "updateUPPIdentifierIfNeeded", (_QWORD)v21);
          objc_msgSend(v14, "metadataTimestamp");
          if (v15 < v12 && v15 > 0.0)
            v12 = v15;
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v10);
    }
    else
    {
      v12 = v7;
    }

    if (v12 != v7)
    {
      v19 = _MTLogCategoryUPPSync(v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v27 = v12;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Changing UppLastSyncTime to the oldest timestamp of updated episodes to force pushing their changes to server: %f", buf, 0xCu);
      }

      +[MTUniversalPlaybackPositionDataSource setUppLastSyncTime:](MTUniversalPlaybackPositionDataSource, "setUppLastSyncTime:", v12);
    }
  }

}

void sub_100086010(uint64_t a1)
{
  void *v2;

  if (objc_msgSend(*(id *)(a1 + 32), "canceled"))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fatalSyncError"));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2 != 0;

  }
}

void sub_100086334(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_10008634C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "syncInProgress");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10008637C(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  kdebug_trace(723517696, 0, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100086420;
  v4[3] = &unk_1004A63C8;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  objc_msgSend(v2, "performBlockAndWait:", v4);

}

void sub_100086420(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = 0;
  objc_msgSend(v2, "_synchronize:", &v4);
  v3 = v4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100087154(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v3));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
  objc_msgSend(*(id *)(a1 + 40), "setTitle:", v4);

}

void sub_1000872C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000872DC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v3));

  v4 = objc_claimAutoreleasedReturnValue(+[MTCoreSpotlightUtil uniqueIdentifierForObject:](MTCoreSpotlightUtil, "uniqueIdentifierForObject:", v7));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_10008744C(uint64_t a1, void *a2)
{
  MTPlaylistManifest *v3;
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "length"))
  {
    v3 = -[MTPlaylistManifest initWithPlaylistUuid:initialEpisodeUuid:]([MTPlaylistManifest alloc], "initWithPlaylistUuid:initialEpisodeUuid:", *(_QWORD *)(a1 + 32), v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1000876CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000876E4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;

  v2 = objc_autoreleasePoolPush();
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playlistForUuid:", v4));

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "episodes"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", kEpisodeUuid));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "array"));
    v9 = objc_msgSend(v8, "copy");
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
  objc_autoreleasePoolPop(v2);
}

void sub_100087B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_100087B44(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v2 = kMTEpisodeEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "persistentId"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForPersistentId:](MTEpisode, "predicateForPersistentId:", v4));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsInEntity:predicate:sortDescriptors:", v2, v5, 0));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstObject"));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "uuid"));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_100088DD4(uint64_t a1, char a2)
{
  _QWORD block[4];
  id v3;

  if ((a2 & 1) == 0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100088E40;
    block[3] = &unk_1004A6200;
    v3 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_100088E40(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  const __CFString *v24;
  const __CFString *v25;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mainQueueContext"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerIdentifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "podcastForFeedUrl:", v4));

  v6 = *(void **)(a1 + 32);
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "itemTitle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("HANDOFF_MESSAGE_EPIOSDE_UNAVAILABLE"), &stru_1004C6D40, 0));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v9, v7, v10));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("HANDOFF_MESSAGE_EPIOSDE_UNAVAILABLE_TITLE"), &stru_1004C6D40, 0));
    v14 = CFSTR("episode_unavailable");
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "containerTitle"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "localizedStringForKey:value:table:", CFSTR("HANDOFF_MESSAGE_NOT_FOLLOWING"), &stru_1004C6D40, 0));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v16, v7));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("HANDOFF_MESSAGE_NOT_FOLLOWING_TITLE"), &stru_1004C6D40, 0));
    v14 = CFSTR("not_subscribed");
  }

  v24 = CFSTR("reason");
  v25 = v14;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
  +[IMMetrics recordUserAction:dataSource:withData:](IMMetrics, "recordUserAction:dataSource:withData:", CFSTR("handoff_failed"), 0, v17);

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v13, v11, 1));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1004C6D40, 0));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v20, 0, 0));
  objc_msgSend(v18, "addAction:", v21);

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[MTApplication appController](MTApplication, "appController"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "rootViewController"));
  objc_msgSend(v23, "presentViewController:animated:completion:", v18, 1, 0);

}

void sub_10008979C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
    objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 0, 0);

  }
}

void sub_100089964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100089988(id *a1)
{
  id WeakRetained;
  id v3;

  objc_msgSend(a1[4], "presentViewController:animated:completion:", a1[5], 0, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "popoverPresentationController"));
  objc_msgSend(v3, "setPermittedArrowDirections:", 3);
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(v3, "setDelegate:", WeakRetained);

}

BOOL sub_100089AD0(id a1, MTEpisodeActionController *a2)
{
  void *v2;
  void *v3;
  BOOL v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = v2;
  v4 = v2
    && (objc_msgSend(v2, "isExternalType") & 1) == 0
    && !objc_msgSend(v3, "isRestricted");

  return v4;
}

void sub_100089B28(id a1, MTEpisodeActionController *a2, id a3)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  v6 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
  +[MTRemoteSetPlaybackQueueUtil insertEpisodeUuids:intoPlaybackQueueAtPosition:](MTRemoteSetPlaybackQueueUtil, "insertEpisodeUuids:intoPlaybackQueueAtPosition:", v5, 0);

}

BOOL sub_100089CA0(id a1, MTEpisodeActionController *a2)
{
  void *v2;
  void *v3;
  BOOL v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = v2;
  v4 = v2
    && (objc_msgSend(v2, "isExternalType") & 1) == 0
    && !objc_msgSend(v3, "isRestricted");

  return v4;
}

void sub_100089CF8(id a1, MTEpisodeActionController *a2, id a3)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  v6 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
  +[MTRemoteSetPlaybackQueueUtil insertEpisodeUuids:intoPlaybackQueueAtPosition:](MTRemoteSetPlaybackQueueUtil, "insertEpisodeUuids:intoPlaybackQueueAtPosition:", v5, 1);

}

BOOL sub_100089E70(id a1, MTEpisodeActionController *a2)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = v2;
  if (!v2
    || (objc_msgSend(v2, "isExternalType") & 1) != 0
    || (objc_msgSend(v3, "isCurrentPlayerItem") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "upNextController"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
    v4 = objc_msgSend(v7, "containsEpisodeUuid:", v8);

  }
  return v4;
}

void sub_100089F20(id a1, MTEpisodeActionController *a2, id a3)
{
  MTEpisodeActionController *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "upNextController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](v3, "actionObject"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
  objc_msgSend(v4, "removeEpisodesForUuid:", v6);

}

NSString *__cdecl sub_10008A00C(id a1, MTEpisodeActionController *a2)
{
  void *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = objc_msgSend(v2, "isVideo");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = v4;
  if (v3)
    v6 = CFSTR("MARK_UNPLAYED_SINGLE_VIDEO");
  else
    v6 = CFSTR("MARK_UNPLAYED_SINGLE_AUDIO");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", v6, &stru_1004C6D40, 0));

  return (NSString *)v7;
}

BOOL sub_10008A094(id a1, MTEpisodeActionController *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = objc_msgSend(v2, "isVisuallyPlayed");

  return v3;
}

void sub_10008A0CC(id a1, MTEpisodeActionController *a2, id a3)
{
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](MTLibrary, "sharedInstance"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
  objc_msgSend(v3, "setPlayed:manually:forUserActionOnEpisodeUuid:", 0, 1, v4);

}

NSString *__cdecl sub_10008A198(id a1, MTEpisodeActionController *a2)
{
  void *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = objc_msgSend(v2, "isVideo");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = v4;
  if (v3)
    v6 = CFSTR("MARK_PLAYED_SINGLE_VIDEO");
  else
    v6 = CFSTR("MARK_PLAYED_SINGLE_AUDIO");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", v6, &stru_1004C6D40, 0));

  return (NSString *)v7;
}

BOOL sub_10008A220(id a1, MTEpisodeActionController *a2)
{
  void *v2;
  char v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = objc_msgSend(v2, "isVisuallyPlayed") ^ 1;

  return v3;
}

void sub_10008A258(id a1, MTEpisodeActionController *a2, id a3)
{
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](MTLibrary, "sharedInstance"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
  objc_msgSend(v3, "setPlayed:manually:forUserActionOnEpisodeUuid:", 1, 0, v4);

}

BOOL sub_10008A370(id a1, MTEpisodeActionController *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = objc_msgSend(v2, "isExternalType");

  return v3;
}

void sub_10008A3A8(id a1, MTEpisodeActionController *a2, id a3)
{
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject", a3));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bestUrl"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v4, "openURL:options:completionHandler:", v3, &__NSDictionary0__struct, 0);

}

void sub_10008A52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_10008A548(id a1, MTEpisodeActionController *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMActionController actionObject](a2, "actionObject"));
  v3 = objc_msgSend(v2, "isShareable");

  return v3;
}

UIBarButtonItem *__cdecl sub_10008A580(id a1)
{
  return (UIBarButtonItem *)objc_msgSend(objc_alloc((Class)UIBarButtonItem), "initWithBarButtonSystemItem:target:action:", 9, 0, 0);
}

void sub_10008A5AC(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "actionObject"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTShareUtil shareViewControllerWithEpisode:applicationActivities:selectedReferenceTime:selectedPlayerTime:currentPlayerTime:](MTShareUtil, "shareViewControllerWithEpisode:applicationActivities:selectedReferenceTime:selectedPlayerTime:currentPlayerTime:", v7, 0, 0.0, 0.0, 0.0));
  objc_msgSend(WeakRetained, "showViewController:inPopoverFromButton:", v8, v5);

}

void sub_10008AB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_10008AB34(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  __int128 v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  __int128 v21;
  uint64_t v22;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008AC30;
  block[3] = &unk_1004A85B8;
  v18 = v8;
  v19 = v7;
  v11 = *(_QWORD *)(a1 + 56);
  v16 = *(_OWORD *)(a1 + 40);
  v20 = v9;
  v22 = v11;
  v12 = (id)v16;
  v21 = v16;
  v13 = v9;
  v14 = v7;
  v15 = v8;
  dispatch_async(v10, block);

}

void sub_10008AC30(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setValue:forKey:", v2, *(_QWORD *)(a1 + 40));
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v6 = *(_QWORD *)(v4 + 40);
    v5 = (id *)(v4 + 40);
    if (!v6)
      objc_storeStrong(v5, v3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_10008AC88(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  uint64_t (**v9)(id, _QWORD, id);
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t (**v14)(id, _QWORD, id);
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v8 = a2;
  v9 = a3;
  v10 = a5;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v11 = v9[2](v9, *(_QWORD *)(a1 + 40), v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10008ADAC;
  v17[3] = &unk_1004A8630;
  v18 = v10;
  v13 = *(_QWORD *)(a1 + 48);
  v21 = *(id *)(a1 + 56);
  v22 = v9;
  v19 = v8;
  v20 = *(id *)(a1 + 40);
  v14 = v9;
  v15 = v8;
  v16 = v10;
  objc_msgSend(v12, "asyncValueOnQueue:withCompletion:", v13, v17);

}

void sub_10008ADAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v5 = *(_QWORD *)(a1 + 32);
  if (a2 || !v5)
  {
    v8 = *(_QWORD *)(a1 + 56);
    if (v5)
      a4 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 16))(v8, *(_QWORD *)(a1 + 40), a2, a4);
  }
  else
  {
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008AE84;
    v9[3] = &unk_1004A8608;
    v11 = *(id *)(a1 + 56);
    v10 = *(id *)(a1 + 40);
    objc_msgSend(v7, "valueWithCompletion:", v9);

  }
}

uint64_t sub_10008AE84(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), a2);
}

AMSBagValue *__cdecl sub_10008AE98(id a1, IMURLBag *a2, NSString *a3)
{
  return (AMSBagValue *)-[IMURLBag URLForKey:](a2, "URLForKey:", a3);
}

AMSBagValue *__cdecl sub_10008AEA0(id a1, IMURLBag *a2, NSString *a3)
{
  return (AMSBagValue *)-[IMURLBag BOOLForKey:](a2, "BOOLForKey:", a3);
}

AMSBagValue *__cdecl sub_10008AEA8(id a1, IMURLBag *a2, NSString *a3)
{
  return (AMSBagValue *)-[IMURLBag doubleForKey:](a2, "doubleForKey:", a3);
}

uint64_t sub_10008AEB0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  dispatch_group_wait(*(dispatch_group_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

BOOL sub_10008B948(id a1, MPMediaItem *a2, BOOL *a3)
{
  void *v3;
  BOOL v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MPMediaItem dateAdded](a2, "dateAdded", a3));
  v4 = v3 != 0;

  return v4;
}

void sub_10008BC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSNumber *__cdecl sub_10008BC74(id a1, MPMediaItem *a2)
{
  return +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", -[MPMediaItem persistentID](a2, "persistentID"));
}

void sub_10008BCA4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10008BD48;
  v6[3] = &unk_1004A8788;
  v2 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "filter:compactMap:", v6, &stru_1004A87C8));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

uint64_t sub_10008BD48(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", a2));
  v4 = v3;
  if (v3)
  {
    v5 = *(void **)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v3, "persistentID")));
    v7 = objc_msgSend(v5, "containsObject:", v6) ^ 1;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id sub_10008BDD0(id a1, NSString *a2)
{
  return a2;
}

void sub_10008C6E8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isEnabled");
  if ((_DWORD)v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_processPendingTransactions");
  }
  else
  {
    v3 = _MTLogCategoryCloudSync(v2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentTransaction"));
      v8 = 138412290;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ Domain is disabled. Cancelling all pending transactions", (uint8_t *)&v8, 0xCu);

    }
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MZKeyValueStoreError keyValueStoreDisabledErrorWithTransaction:underlyingError:](MZKeyValueStoreError, "keyValueStoreDisabledErrorWithTransaction:underlyingError:", 0, 0));
    objc_msgSend(v6, "_cancelAllPendingTransactions:", v7);

  }
}

void sub_10008C87C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clampsController"));
  objc_msgSend(v1, "clearNetworkingBlocked");

}

id sub_10008CB88(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_scheduleTransaction:", *(_QWORD *)(a1 + 40));
}

void sub_10008CC0C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[MZKeyValueStoreError transactionCancelledErrorWithTransaction:underlyingError:](MZKeyValueStoreError, "transactionCancelledErrorWithTransaction:underlyingError:", v2, 0));
  objc_msgSend(v1, "_cancelTransaction:error:", v2, v3);

}

void sub_10008CCB0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MZKeyValueStoreError transactionCancelledErrorWithTransaction:underlyingError:](MZKeyValueStoreError, "transactionCancelledErrorWithTransaction:underlyingError:", 0, 0));
  objc_msgSend(v2, "_cancelAllPendingTransactions:", v3);

  v4 = *(void **)(a1 + 32);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentTransaction"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentTransaction"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MZKeyValueStoreError transactionCancelledErrorWithTransaction:underlyingError:](MZKeyValueStoreError, "transactionCancelledErrorWithTransaction:underlyingError:", v5, 0));
  objc_msgSend(v4, "_cancelTransaction:error:", v7, v6);

}

void sub_10008CDB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MZKeyValueStoreError transactionCancelledErrorWithTransaction:code:underlyingError:](MZKeyValueStoreError, "transactionCancelledErrorWithTransaction:code:underlyingError:", 0, *(_QWORD *)(a1 + 40), 0));
  objc_msgSend(v2, "_cancelAllPendingTransactions:", v3);

  v4 = *(void **)(a1 + 32);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentTransaction"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentTransaction"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MZKeyValueStoreError transactionCancelledErrorWithTransaction:code:underlyingError:](MZKeyValueStoreError, "transactionCancelledErrorWithTransaction:code:underlyingError:", v5, *(_QWORD *)(a1 + 40), 0));
  objc_msgSend(v4, "_cancelTransaction:error:", v7, v6);

}

id sub_10008CF20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resolveError:transaction:resolution:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56));
}

void sub_10008CFB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10008D1D0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10008D390(_Unwind_Exception *a1)
{
  void *v1;
  int v2;

  objc_sync_exit(v1);
  if (v2)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_10008D3B8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x10008D320);
}

void sub_10008D484(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10008D90C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10008DE28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10008DF34(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_delegateTransactionDidFail:withError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "resolveError:transaction:resolution:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), 0);
  return result;
}

id sub_10008E068(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_delegateTransactionDidCancel:withError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10008E96C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10008E988(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10008EA6C;
  v6[3] = &unk_1004A81A8;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  v5 = v3;
  v7 = v5;
  v8 = *(id *)(a1 + 32);
  objc_msgSend(WeakRetained, "performBlock:", v6);

  objc_destroyWeak(&v9);
}

void sub_10008EA58(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10008EA6C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_processOperationOutput:forRequest:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10008F040(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "keyValueStoreController:transactionDidFinish:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10008F1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  id *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v8);
  objc_destroyWeak((id *)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_10008F224(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  unsigned int v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "backgroundTaskAssertion"));
    v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

    WeakRetained = v5;
    if (v4)
    {
      objc_msgSend(v5, "_endBackgroundTask");
      WeakRetained = v5;
    }
  }

}

id sub_10008F320(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

id sub_10008F3E8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v9;
  void *v10;

  v2 = _MTLogCategoryCloudSync(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentTransaction"));
    v9 = 138412290;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%@ Did receive kill switch response. Cancelling all pending transactions", (uint8_t *)&v9, 0xCu);

  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clampsController"));
  objc_msgSend(v5, "setNetworkingBlocked");

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MZKeyValueStoreError killSwitchErrorWithTransaction:underlyingError:](MZKeyValueStoreError, "killSwitchErrorWithTransaction:underlyingError:", 0, 0));
  objc_msgSend(v6, "_cancelAllPendingTransactions:", v7);

  return objc_msgSend(*(id *)(a1 + 32), "setEnabled:", 0);
}

void sub_10008F5B4(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clampsController"));
  objc_msgSend(v2, "setUserCancelledSignIn");

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "authenticationController"));
  v4 = objc_msgSend(v3, "shouldAuthenticate");

  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clampsController"));
    objc_msgSend(v6, "setAuthenticationRequest");

  }
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = _MTLogCategoryCloudSync(v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentTransaction"));
      v10 = *(_QWORD *)(a1 + 48);
      v11 = 138412546;
      v12 = v9;
      v13 = 2112;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%@ AMSURLSession authentication error - %@", (uint8_t *)&v11, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "_transactionDidFail:withError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
}

id sub_100090074(uint64_t a1, int a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setIsDirty:", objc_msgSend(*(id *)(a1 + 32), "isDirty") | a2);
  return _objc_msgSend(*(id *)(a1 + 32), "finishedDeserializationForKey:", *(_QWORD *)(a1 + 40));
}

void sub_100090518(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100090FD0(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTEpisodeEntityName, *(_QWORD *)(a1 + 40), &__NSArray0__struct));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10009106C;
  v3[3] = &unk_1004A8AC0;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v3);

}

void sub_10009106C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  if (+[MTStoreIdentifier isNotEmpty:](MTStoreIdentifier, "isNotEmpty:", objc_msgSend(v9, "storeTrackId")))v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v9, "storeTrackId")));
  else
    v4 = 0;
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, CFSTR("episodeAdamId"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "podcast"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "feedURL"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, CFSTR("feedURL"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "guid"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, CFSTR("guid"));

  objc_msgSend(v9, "lastBookmarkedDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v8, CFSTR("createdDate"));

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
}

void sub_100091950(uint64_t a1)
{
  void *i;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  BOOL v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id obj;
  void *v38;
  uint64_t v39;
  id v40;
  _QWORD v41[5];
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  id v50;
  _BYTE v51[128];

  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count")));
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  obj = *(id *)(a1 + 32);
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
  if (v40)
  {
    v39 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v40; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v39)
          objc_enumerationMutation(obj);
        v3 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("episodeAdamId")));
        v5 = objc_msgSend(v4, "longLongValue");

        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("feedURL")));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("guid")));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("createdDate")));
        objc_msgSend(v8, "doubleValue");
        v10 = v9;

        if (!+[MTStoreIdentifier isEmpty:](MTStoreIdentifier, "isEmpty:", v5)
          || (v7 ? (v11 = v6 == 0) : (v11 = 1), !v11))
        {
          if (+[MTStoreIdentifier isNotEmpty:](MTStoreIdentifier, "isNotEmpty:", v5))
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "findEpisodeByStoreID:inContext:", v5, *(_QWORD *)(a1 + 48)));
            if (v12)
            {
LABEL_18:
              if (v12)
              {
                v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storageProvider"));
                objc_msgSend(v13, "unsafeBookmarkEpisode:onTimestamp:", v12, v10);

                v15 = _MTLogCategoryCloudSync(v14);
                v16 = objc_claimAutoreleasedReturnValue(v15);
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "logPrefix"));
                  v18 = objc_msgSend(v12, "storeTrackId");
                  *(_DWORD *)buf = 138412546;
                  v48 = v17;
                  v49 = 2048;
                  v50 = v18;
                  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%@ Step 1: bookmark local episode: %lld", buf, 0x16u);

                }
                v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "uuid"));
                objc_msgSend(v38, "addObject:", v19);
              }
              else
              {
                v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:title:author:provider:imageUrl:description:](MTPodcast, "insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:title:author:provider:imageUrl:description:", *(_QWORD *)(a1 + 48), 0, v6, +[MTPodcast defaultShowType](MTPodcast, "defaultShowType"), CFSTR("Untitled"), 0, 0, 0, 0));
                objc_msgSend(v12, "setImporting:", 1);
                v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "uuid"));
                v20 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode insertNewEpisodeInManagedObjectContext:canSendNotifications:](MTEpisode, "insertNewEpisodeInManagedObjectContext:canSendNotifications:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64)));
                objc_msgSend(v20, "setIsHidden:", 1);
                objc_msgSend(v20, "setPodcast:", v12);
                objc_msgSend(v20, "setGuid:", v7);
                objc_msgSend(v20, "setStoreTrackId:", v5);
                v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storageProvider"));
                objc_msgSend(v21, "unsafeBookmarkEpisode:onTimestamp:", v20, v10);

                v23 = _MTLogCategoryCloudSync(v22);
                v24 = objc_claimAutoreleasedReturnValue(v23);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                {
                  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "logPrefix"));
                  *(_DWORD *)buf = 138412546;
                  v48 = v25;
                  v49 = 2112;
                  v50 = v19;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%@ Step 1: create podcast for bookmarking: %@", buf, 0x16u);

                }
                v27 = _MTLogCategoryCloudSync(v26);
                v28 = objc_claimAutoreleasedReturnValue(v27);
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                {
                  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "logPrefix"));
                  v30 = objc_msgSend(v20, "storeTrackId");
                  *(_DWORD *)buf = 138412546;
                  v48 = v29;
                  v49 = 2048;
                  v50 = v30;
                  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%@ Step 1: bookmark episode: %lld", buf, 0x16u);

                }
                v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "uuid"));
                objc_msgSend(v38, "addObject:", v31);

                if ((+[MTStoreIdentifier isEmpty:](MTStoreIdentifier, "isEmpty:", v5) & 1) == 0)
                {
                  v32 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastRequestManager sharedInstance](_TtC18PodcastsFoundation21PodcastRequestManager, "sharedInstance"));
                  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v5));
                  v41[0] = _NSConcreteStackBlock;
                  v41[1] = 3221225472;
                  v41[2] = sub_100091F5C;
                  v41[3] = &unk_1004A8B10;
                  v41[4] = *(_QWORD *)(a1 + 40);
                  v42 = v19;
                  objc_msgSend(v32, "updatePodcastWithEpisodeAdamId:completion:", v33, v41);

                }
              }

              goto LABEL_30;
            }
          }
          else
          {
            v12 = 0;
          }
          if (v7 && v6)
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "findEpisodeByFeedURL:guid:inContext:", v6, v7, *(_QWORD *)(a1 + 48)));
          goto LABEL_18;
        }
LABEL_30:

      }
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
    }
    while (v40);
  }

  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "predicateForBookmarksOnlyInLocalAndBeforeLastSyncWithRemoteBookmarksUUIDs:", v38));
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectsInEntity:predicate:sortDescriptors:", kMTEpisodeEntityName, v34, &__NSArray0__struct));
  objc_msgSend(*(id *)(a1 + 40), "checkPotentialLibraryDeletionIssueForRemoteBookmarksCount:episodesToUnbookmarkCount:newVersion:", objc_msgSend(*(id *)(a1 + 32), "count"), objc_msgSend(v35, "count"), *(_QWORD *)(a1 + 56));
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storageProvider"));
  objc_msgSend(v36, "unsafeRemoveFromBookmarksEpisodes:context:", v35, *(_QWORD *)(a1 + 48));

}

void sub_100091F5C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  dispatch_queue_global_t global_queue;
  NSObject *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;

  v5 = a2;
  v6 = a3;
  global_queue = dispatch_get_global_queue(21, 0);
  v8 = objc_claimAutoreleasedReturnValue(global_queue);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100092030;
  v12[3] = &unk_1004A6C78;
  v13 = v5;
  v14 = v6;
  v9 = *(void **)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = v9;
  v10 = v6;
  v11 = v5;
  dispatch_async(v8, v12);

}

void sub_100092030(id *a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  if (a1[4] && a1[5])
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "storageProvider"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "importContext"));

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10009214C;
    v8[3] = &unk_1004A8AE8;
    v9 = v3;
    v10 = a1[7];
    v11 = a1[5];
    v4 = a1[4];
    v5 = a1[6];
    v12 = v4;
    v13 = v5;
    v6 = v3;
    objc_msgSend(v6, "performBlockAndWaitWithSave:", v8);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateManager sharedInstance](MTFeedUpdateManager, "sharedInstance"));
  objc_msgSend(v7, "updatePodcastWithUUID:userInitiated:forced:forceBootstrap:source:completion:", a1[7], 0, 1, 0, 11, 0);

}

void sub_10009214C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "setDisplayType:", *(_QWORD *)(a1 + 48));
  v3 = _MTLogCategoryCloudSync(objc_msgSend(v2, "setStoreCollectionId:", objc_msgSend(*(id *)(a1 + 56), "longLongValue")));
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "logPrefix"));
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = 138412802;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    v12 = 2112;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ Step 1.5: update bookmark show displayType: %@ , store collection id: %@", (uint8_t *)&v8, 0x20u);

  }
}

id sub_100092F34(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  v3 = a1;
  v4 = a2;
  if (v4
    && (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", NSUnderlyingErrorKey)),
        v5,
        !v5))
  {
    if (v3)
      v7 = objc_msgSend(v3, "mutableCopy");
    else
      v7 = objc_alloc_init((Class)NSMutableDictionary);
    v6 = v7;
    objc_msgSend(v7, "setObject:forKey:", v4, NSUnderlyingErrorKey);
  }
  else
  {
    v6 = v3;
  }

  return v6;
}

id sub_10009312C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;

  if (a1 > -1010)
  {
    switch(a1)
    {
      case -1009:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorClientClamp"));
        v2 = (void *)v1;
        v3 = 4294966287;
        goto LABEL_35;
      case -1008:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorValidation"));
        v2 = (void *)v1;
        v3 = 4294966288;
        goto LABEL_35;
      case -1007:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorGeneric"));
        v2 = (void *)v1;
        v3 = 4294966289;
        goto LABEL_35;
      case -1006:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorStoreAccountUserEnteredWrongCredentials"));
        v2 = (void *)v1;
        v3 = 4294966290;
        goto LABEL_35;
      case -1005:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorStoreAccountUserCancelledSignedIn"));
        v2 = (void *)v1;
        v3 = 4294966291;
        goto LABEL_35;
      case -1004:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorStoreAccountSessionExpired"));
        v2 = (void *)v1;
        v3 = 4294966292;
        goto LABEL_35;
      case -1003:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorStoreAccountMismatch"));
        v2 = (void *)v1;
        v3 = 4294966293;
        goto LABEL_35;
      case -1002:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorStoreAccountLoggedOut"));
        v2 = (void *)v1;
        v3 = 4294966294;
        goto LABEL_35;
      case -1001:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorNoStoreAccount"));
        v2 = (void *)v1;
        v3 = 4294966295;
        goto LABEL_35;
      default:
        if (a1 != -1)
          goto LABEL_18;
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorUnknown"));
        v2 = (void *)v1;
        v3 = 0xFFFFFFFFLL;
        break;
    }
    goto LABEL_35;
  }
  if (a1 > -3003)
  {
    switch(a1)
    {
      case -2008:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorKeyBagLoadFailure"));
        v2 = (void *)v1;
        v3 = 4294965288;
        goto LABEL_35;
      case -2007:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorKeyBagKillSwitch"));
        v2 = (void *)v1;
        v3 = 4294965289;
        goto LABEL_35;
      case -2006:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorDisabled"));
        v2 = (void *)v1;
        v3 = 4294965290;
        goto LABEL_35;
      case -2005:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorKillSwitch"));
        v2 = (void *)v1;
        v3 = 4294965291;
        goto LABEL_35;
      case -2004:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorNetworkingBlocked"));
        v2 = (void *)v1;
        v3 = 4294965292;
        goto LABEL_35;
      case -2003:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorUserClamp"));
        v2 = (void *)v1;
        v3 = 4294965293;
        goto LABEL_35;
      case -2002:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorServerClamp"));
        v2 = (void *)v1;
        v3 = 4294965294;
        goto LABEL_35;
      case -2001:
        v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorAuthenticationClamp"));
        v2 = (void *)v1;
        v3 = 4294965295;
        goto LABEL_35;
      default:
        if (a1 == -3002)
        {
          v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorMissingDomain"));
          v2 = (void *)v1;
          v3 = 4294964294;
        }
        else
        {
          if (a1 != -3001)
            goto LABEL_18;
          v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorMissingURL"));
          v2 = (void *)v1;
          v3 = 4294964295;
        }
        break;
    }
    goto LABEL_35;
  }
  switch(a1)
  {
    case -4003:
      v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorTimeout"));
      v2 = (void *)v1;
      v3 = 4294963293;
      goto LABEL_35;
    case -4002:
      v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorDelegateCancelled"));
      v2 = (void *)v1;
      v3 = 4294963294;
      goto LABEL_35;
    case -4001:
      v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "MZKeyValueStoreErrorCancelled"));
      v2 = (void *)v1;
      v3 = 4294963295;
LABEL_35:
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error Code = %@ (%d)"), v1, v3));

      return v4;
  }
LABEL_18:
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error Code = %ld"), a1));
  return v4;
}

void sub_100094A38(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  id v23;
  _QWORD v24[4];
  __int128 v25;
  id v26;
  char *v27;
  _QWORD v28[4];
  __int128 v29;
  uint64_t v30;
  id v31[2];
  id location;
  uint8_t buf[4];
  uint64_t v34;

  v3 = a2;
  v6 = _MTLogCategoryBackgroundFetching(v3, v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = (char *)os_signpost_id_generate(v7);

  v12 = _MTLogCategoryBackgroundFetching(v9, v10, v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = v13;
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    v15 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v34 = v15;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v8, "PodcastsBackgroundTask", "%{name=taskIdentifier}@", buf, 0xCu);
  }

  objc_initWeak(&location, v3);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100094C88;
  v28[3] = &unk_1004A8B80;
  v29 = *(_OWORD *)(a1 + 32);
  v30 = *(_QWORD *)(a1 + 48);
  objc_copyWeak(v31, &location);
  v31[1] = v8;
  v16 = objc_msgSend(v3, "setExpirationHandler:", v28);
  v19 = _MTLogCategoryBackgroundFetching(v16, v17, v18);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v34 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Executing task named %@", buf, 0xCu);
  }

  v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100094DC0;
  v24[3] = &unk_1004A8BA8;
  v25 = *(_OWORD *)(a1 + 32);
  v23 = v3;
  v26 = v23;
  v27 = v8;
  objc_msgSend(v22, "performWithCompletion:", v24);

  objc_destroyWeak(v31);
  objc_destroyWeak(&location);

}

void sub_100094C5C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_100094C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  id WeakRetained;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  os_signpost_id_t v14;
  int v15;
  uint64_t v16;

  v4 = _MTLogCategoryBackgroundFetching(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v15 = 138412290;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Task named %@ expired and was cancelled", (uint8_t *)&v15, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 40), "rescheduleTasksWithIdentifier:completion:", *(_QWORD *)(a1 + 32), 0);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "cancel");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "setTaskCompletedWithSuccess:", 0);

  v11 = _MTLogCategoryBackgroundFetching(v8, v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 64);
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    LOWORD(v15) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_END, v14, "PodcastsBackgroundTask", "CANCELLED", (uint8_t *)&v15, 2u);
  }

}

void sub_100094DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  os_signpost_id_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  v5 = _MTLogCategoryBackgroundFetching(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v15 = 138412546;
    v16 = v7;
    v17 = 1024;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Task named %@ completed with success: %d", (uint8_t *)&v15, 0x12u);
  }

  objc_msgSend(*(id *)(a1 + 40), "rescheduleTasksWithIdentifier:completion:", *(_QWORD *)(a1 + 32), 0);
  v8 = objc_msgSend(*(id *)(a1 + 48), "setTaskCompletedWithSuccess:", a2);
  v11 = _MTLogCategoryBackgroundFetching(v8, v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 56);
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    v15 = 67109120;
    LODWORD(v16) = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_END, v14, "PodcastsBackgroundTask", "COMPLETE (%d)", (uint8_t *)&v15, 8u);
  }

}

void sub_1000952C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a37);
  _Unwind_Resume(a1);
}

void sub_10009530C(id *a1)
{
  void *v2;
  id WeakRetained;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  objc_msgSend(v2, "endBackgroundTask:", objc_msgSend(WeakRetained, "backgroundTaskId"));

  v4 = objc_loadWeakRetained(a1);
  objc_msgSend(v4, "setBackgroundTaskId:", UIBackgroundTaskInvalid);

  v8 = _MTLogCategoryBackgroundFetching(v5, v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error: timed out scheduling background tasks.", v10, 2u);
  }

}

void sub_1000953DC(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_1000953E4(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", objc_msgSend(*(id *)(a1 + 32), "backgroundTaskId"));

  return objc_msgSend(*(id *)(a1 + 32), "setBackgroundTaskId:", UIBackgroundTaskInvalid);
}

void sub_1000954E4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BGTaskScheduler sharedScheduler](BGTaskScheduler, "sharedScheduler"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100095580;
  v6[3] = &unk_1004A8C18;
  v3 = *(id *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 48);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  objc_msgSend(v2, "getPendingTaskRequestsWithCompletionHandler:", v6);

}

void sub_100095580(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  char v6;
  uint64_t v7;
  void *i;
  void *v9;
  unsigned __int8 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v3 = a2;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (!v4)
    goto LABEL_11;
  v5 = v4;
  v6 = 0;
  v7 = *(_QWORD *)v13;
  do
  {
    for (i = 0; i != v5; i = (char *)i + 1)
    {
      if (*(_QWORD *)v13 != v7)
        objc_enumerationMutation(v3);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i), "identifier"));
      v10 = objc_msgSend(v9, "isEqualToString:", *(_QWORD *)(a1 + 32));

      v6 |= v10;
    }
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  }
  while (v5);
  if ((v6 & 1) != 0)
  {
    v11 = *(_QWORD *)(a1 + 48);
    if (v11)
      (*(void (**)(void))(v11 + 16))();
  }
  else
  {
LABEL_11:
    objc_msgSend(*(id *)(a1 + 40), "rescheduleTasksWithIdentifier:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  }

}

uint64_t sub_100095778(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  uint64_t result;
  id v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  uint64_t v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BGTaskScheduler sharedScheduler](BGTaskScheduler, "sharedScheduler"));
  objc_msgSend(v2, "cancelTaskRequestWithIdentifier:", *(_QWORD *)(a1 + 32));

  v3 = objc_msgSend(*(id *)(a1 + 48), "isEnabled");
  if ((_DWORD)v3)
  {
    v5 = objc_msgSend(objc_alloc((Class)BGAppRefreshTaskRequest), "initWithIdentifier:", *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 48), "earliestBeginTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:"));
    -[NSObject setEarliestBeginDate:](v5, "setEarliestBeginDate:", v6);

    v9 = _MTLogCategoryBackgroundFetching(v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 48), "earliestBeginTime");
      *(_DWORD *)buf = 138412546;
      v24 = v11;
      v25 = 2048;
      v26 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Scheduling task named %@ with earliest begin time %f", buf, 0x16u);
    }

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[BGTaskScheduler sharedScheduler](BGTaskScheduler, "sharedScheduler"));
    v22 = 0;
    objc_msgSend(v13, "submitTaskRequest:error:", v5, &v22);
    v14 = v22;

    if (v14)
    {
      v17 = _MTLogCategoryBackgroundFetching(v15, v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v24 = v14;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to schedule background task with error %@", buf, 0xCu);
      }

    }
  }
  else
  {
    v19 = _MTLogCategoryBackgroundFetching(v3, v4);
    v5 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v24 = v20;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Scheduling disabled for %@", buf, 0xCu);
    }
  }

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10009A4E4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t updated;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = objc_msgSend(v3, "count");
  if (v4)
  {
    updated = _MTLogCategoryFeedUpdateIngester(v4);
    v6 = objc_claimAutoreleasedReturnValue(updated);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to re-download episodes after subscription changed %@", (uint8_t *)&v10, 0xCu);
    }

  }
  v7 = _MTLogCategoryFeedUpdateIngester(v4);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
    v10 = 138412290;
    v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Re-downloaded episdes on priceType change for episode uuid: %@", (uint8_t *)&v10, 0xCu);

  }
}

void sub_10009AC40(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "descriptionCache"));
  objc_msgSend(v2, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

}

void sub_10009AC80(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeCache"));
  objc_msgSend(v2, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

}

void sub_10009ADA8(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[11];

  v3[0] = kEpisodeUuid;
  v3[1] = kEpisodeDescription;
  v3[2] = kEpisodePubDate;
  v3[3] = kEpisodeDuration;
  v3[4] = kEpisodePlayhead;
  v3[5] = kEpisodePlayState;
  v3[6] = kEpisodeVideo;
  v3[7] = kEpisodeAudio;
  v3[8] = kEpisodeExternalType;
  v3[9] = kEpisodeUti;
  v3[10] = kEpisodeByteSize;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 11));
  v2 = (void *)qword_100567370;
  qword_100567370 = v1;

}

char *sub_10009B7A0(uint64_t a1, uint64_t a2, char *a3)
{
  char *result;
  _QWORD *v6;

  objc_msgSend(*(id *)(a1 + 32), "appendAttributedString:", a2);
  result = (char *)objc_msgSend(*(id *)(a1 + 40), "count");
  if (result - 1 == a3)
  {
    if (!*(_BYTE *)(a1 + 72))
      return result;
    v6 = (_QWORD *)(a1 + 64);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 32), "appendAttributedString:", *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "appendAttributedString:", *(_QWORD *)(a1 + 56));
  }
  return (char *)objc_msgSend(*(id *)(a1 + 32), "appendAttributedString:", *v6);
}

void sub_10009C0F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSAttributedStringKey v10;
  uint64_t v11;

  v5 = a2;
  if (!a3 && (*(_BYTE *)(a1 + 56) || objc_msgSend(*(id *)(a1 + 32), "length")))
  {
    v7 = *(_QWORD *)(a1 + 40);
    v10 = NSParagraphStyleAttributeName;
    v11 = v7;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
  }
  else
  {
    v6 = 0;
  }
  if (*(_BYTE *)(a1 + 56) || a3 || *(_BYTE *)(a1 + 57))
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("\n"), "stringByAppendingString:", v5));

    v5 = (id)v8;
  }
  v9 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", v5, v6);
  objc_msgSend(*(id *)(a1 + 48), "appendAttributedString:", v9);

}

char *sub_10009C8F4(uint64_t a1, uint64_t a2, char *a3)
{
  char *result;
  _QWORD *v6;

  objc_msgSend(*(id *)(a1 + 32), "appendAttributedString:", a2);
  result = (char *)objc_msgSend(*(id *)(a1 + 40), "count");
  if (result - 1 == a3)
  {
    if (!*(_BYTE *)(a1 + 72))
      return result;
    v6 = (_QWORD *)(a1 + 64);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 32), "appendAttributedString:", *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "appendAttributedString:", *(_QWORD *)(a1 + 56));
  }
  return (char *)objc_msgSend(*(id *)(a1 + 32), "appendAttributedString:", *v6);
}

id sub_10009CAD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10009CB7C;
  v8[3] = &unk_1004A8D28;
  v9 = v3;
  v5 = v3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mt_compactMap:", v8));

  return v6;
}

id sub_10009CB7C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", a2);
}

void sub_10009CC88(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10009CCB0(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009CD28;
  block[3] = &unk_1004A7570;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v2);
}

void sub_10009CD28(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_performDeferredIndexAll");

}

void sub_10009CE9C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  MTCoreSpotlightIndexBatchGenerator *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  int v18;
  MTCoreSpotlightIndexBatchGenerator *v19;

  if (objc_msgSend(*(id *)(a1 + 32), "hasBeenIndexed"))
  {
    v2 = _MTLogCategorySpotlight();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v18) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[IndexAll] bailing.  already indexed...", (uint8_t *)&v18, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    return;
  }
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "indexAllBatchGenerator"));
  if (!v4
    || (v5 = (void *)v4,
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "indexAllBatchGenerator")),
        v7 = objc_msgSend(v6, "finished"),
        v6,
        v5,
        (v7 & 1) != 0))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "savedPartialUploadStateIndexPath"));
    v9 = -[MTCoreSpotlightIndexBatchGenerator initWithStartingIndexPath:]([MTCoreSpotlightIndexBatchGenerator alloc], "initWithStartingIndexPath:", v8);
    objc_msgSend(*(id *)(a1 + 32), "setIndexAllBatchGenerator:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "indexAllBatchGenerator"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "indexAllCompletions"));
    v12 = objc_retainBlock(*(id *)(a1 + 40));
    objc_msgSend(v11, "addObject:", v12);

    v13 = _MTLogCategorySpotlight();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 138412290;
      v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[Indexing] *** scheduling indexAll in batches [%@] ***", (uint8_t *)&v18, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_onIndexingQueueHandleNextBatchOrUpdateRequest");
    goto LABEL_14;
  }
  v15 = _MTLogCategorySpotlight();
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[IndexAll] bailing.  already running...", (uint8_t *)&v18, 2u);
  }

  if (*(_QWORD *)(a1 + 40))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "indexAllBatchGenerator"));
    v9 = (MTCoreSpotlightIndexBatchGenerator *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "indexAllCompletions"));
    v17 = objc_retainBlock(*(id *)(a1 + 40));
    -[MTCoreSpotlightIndexBatchGenerator addObject:](v9, "addObject:", v17);

LABEL_14:
  }
}

void sub_10009D1FC(uint64_t a1)
{
  uint64_t v2;
  MTCSUpdateIndexRequest *v3;
  MTCSUpdateIndexRequest *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  MTCSUpdateIndexRequest *v9;

  if (objc_msgSend(*(id *)(a1 + 32), "hasDeferredIndexAll"))
  {
    v2 = _MTLogCategorySpotlight();
    v3 = (MTCSUpdateIndexRequest *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(&v3->super, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(MTCSUpdateIndexRequest **)(a1 + 40);
      v8 = 138412290;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, &v3->super, OS_LOG_TYPE_DEFAULT, "[Update] Dropping index request (reason '%@') since we haven't yet received the initial indexAllData", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    v3 = -[MTCSUpdateIndexRequest initWithReason:entityLoadingBlock:searchableIndex:completion:]([MTCSUpdateIndexRequest alloc], "initWithReason:entityLoadingBlock:searchableIndex:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updateIndexRequests"));
    objc_msgSend(v5, "addObject:", v3);

    v6 = _MTLogCategorySpotlight();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Indexing] *** scheduling update [%@] ***", (uint8_t *)&v8, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_onIndexingQueueHandleNextBatchOrUpdateRequest");
  }

}

void sub_10009D55C(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10009D5C4;
  v2[3] = &unk_1004A8DC0;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", v2);

}

uint64_t sub_10009D5C4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)(a1 + 32));
}

void sub_10009D7B0(uint64_t a1)
{
  uint64_t (**v2)(_QWORD, _QWORD);
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  id v15;
  id v16;
  uint8_t buf[4];
  uint64_t v18;

  v2 = (uint64_t (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "entityLoadingBlock"));
  v3 = v2[2](v2, *(_QWORD *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  v6 = _MTLogCategorySpotlight(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Indexing] *** handling update [BEGIN] [%@] ***", buf, 0xCu);
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "indexAllBatchGenerator"));
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mt_compactMap:", &stru_1004A8E00));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "indexAllBatchGenerator"));
    objc_msgSend(v11, "markUpdateUnnecessaryForObjectIDs:", v10);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "annotator"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10009D968;
  v14[3] = &unk_1004A8E28;
  v13 = *(void **)(a1 + 56);
  v14[4] = *(_QWORD *)(a1 + 48);
  v15 = v13;
  v16 = *(id *)(a1 + 32);
  +[MTCoreSpotlightUtil prepareSearchableItemsForObjectInArray:annotator:completion:](MTCoreSpotlightUtil, "prepareSearchableItemsForObjectInArray:annotator:completion:", v4, v12, v14);

}

NSManagedObjectID *__cdecl sub_10009D960(id a1, NSManagedObject *a2)
{
  return -[NSManagedObject objectID](a2, "objectID");
}

void sub_10009D968(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  uint64_t v14;

  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10009DAC0;
  v11[3] = &unk_1004A6AD8;
  v12 = *(id *)(a1 + 48);
  v6 = _MTLogCategorySpotlight(objc_msgSend(v4, "searchableIndex:indexSearchableItems:completionHandler:", v5, a2, v11));
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Indexing] *** handling update [DONE] [%@] ***", buf, 0xCu);
  }

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "indexingQueue"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10009DB28;
  v10[3] = &unk_1004A6200;
  v10[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v9, v10);

}

void sub_10009DAC0(uint64_t a1)
{
  void *v2;
  void (**v3)(void);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completion"));

  if (v2)
  {
    v3 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completion"));
    v3[2]();

  }
}

id sub_10009DB28(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setHasIndexingOperationInProgress:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "_onIndexingQueueHandleNextBatchOrUpdateRequest");
}

id sub_10009DC0C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_startProcessNextBatchInGenerator:searchableIndex:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10009DCBC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "annotator"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10009DD80;
  v9[3] = &unk_1004A8E28;
  v7 = *(id *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v10 = v7;
  v11 = v8;
  v12 = *(id *)(a1 + 48);
  +[MTCoreSpotlightUtil prepareSearchableItemsForObjectInArray:annotator:completion:](MTCoreSpotlightUtil, "prepareSearchableItemsForObjectInArray:annotator:completion:", v5, v6, v9);

}

void sub_10009DD80(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;

  v3 = a2;
  if (objc_msgSend(v3, "count") && !objc_msgSend(*(id *)(a1 + 32), "finished"))
  {
    v6 = *(void **)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10009DE50;
    v8[3] = &unk_1004A8E50;
    v7 = *(void **)(a1 + 32);
    v8[4] = v6;
    v9 = v7;
    objc_msgSend(v6, "searchableIndex:indexSearchableItems:completionHandler:", v5, v3, v8);

  }
  else
  {
    if (objc_msgSend(*(id *)(a1 + 32), "canceled"))
      v4 = 2;
    else
      v4 = 4;
    objc_msgSend(*(id *)(a1 + 40), "_didCompleteBatchProcessingBatchGenerator:state:error:", *(_QWORD *)(a1 + 32), v4, 0);
  }

}

void sub_10009DE50(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(v3, "_didCompleteBatchProcessingBatchGenerator:state:error:", *(_QWORD *)(a1 + 40), 3, a2);
  }
  else
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "indexingQueue"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10009DEF8;
    v7[3] = &unk_1004A6640;
    v5 = *(id *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 32);
    v8 = v5;
    v9 = v6;
    dispatch_async(v4, v7);

  }
}

void sub_10009DEF8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextIndexPath"));
  objc_msgSend(*(id *)(a1 + 40), "savePartialUploadStateIndexPath:", v2);
  objc_msgSend(*(id *)(a1 + 40), "setHasIndexingOperationInProgress:", 0);
  objc_msgSend(*(id *)(a1 + 40), "_onIndexingQueueHandleNextBatchOrUpdateRequest");

}

id sub_10009E034(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v10;
  const __CFString *v11;
  __int16 v12;
  uint64_t v13;

  v2 = _MTLogCategorySpotlight(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 56) - 1;
    if (v4 > 3)
      v5 = CFSTR("inactive");
    else
      v5 = *(&off_1004A8FF8 + v4);
    v6 = *(_QWORD *)(a1 + 32);
    v10 = 138412546;
    v11 = v5;
    v12 = 2112;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Indexing] *** completed indexAll (%@) in batches [%@] ***", (uint8_t *)&v10, 0x16u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "indexAllBatchGenerator"));
  v8 = *(void **)(a1 + 32);

  if (v7 == v8)
    objc_msgSend(*(id *)(a1 + 40), "setIndexAllBatchGenerator:", 0);
  objc_msgSend(*(id *)(a1 + 40), "_onQueuePerformCompletionsForGenerator:error:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "setHasIndexingOperationInProgress:", 0);
  return objc_msgSend(*(id *)(a1 + 40), "_onIndexingQueueHandleNextBatchOrUpdateRequest");
}

void sub_10009E408(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v3 = *(NSObject **)(a1 + 32);
  v4 = a2;
  dispatch_group_enter(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTImageStore defaultStore](MTImageStore, "defaultStore"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10009E4B4;
  v6[3] = &unk_1004A8EC8;
  v7 = *(id *)(a1 + 32);
  objc_msgSend(v5, "performWhenURLAvailableForImageForKey:block:", v4, v6);

}

void sub_10009E4B4(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10009E4BC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", ")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Artwork Change (%@)"), v3));

  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchableIndex"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10009E5AC;
  v7[3] = &unk_1004A8D50;
  v8 = *(id *)(a1 + 32);
  objc_msgSend(v5, "updateSearchableIndexWithReason:searchableIndex:entityLoadingBlock:completion:", v4, v6, v7, 0);

}

id sub_10009E5AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void **v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void *v17;
  id v18;
  id v19;
  uint8_t buf[4];
  unsigned int v21;
  __int16 v22;
  void *v23;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v5 = *(void **)(a1 + 32);
  v14 = _NSConcreteStackBlock;
  v15 = 3221225472;
  v16 = sub_10009E728;
  v17 = &unk_1004A8F18;
  v18 = v3;
  v6 = v4;
  v19 = v6;
  v7 = v3;
  v8 = _MTLogCategorySpotlight(objc_msgSend(v5, "enumerateObjectsUsingBlock:", &v14));
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = objc_msgSend(v6, "count", v14, v15, v16, v17, v18, v19);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("uuid")));
    *(_DWORD *)buf = 67109378;
    v21 = v10;
    v22 = 2112;
    v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "update searchable index.  will update %d items (uuids = %@)", buf, 0x12u);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allObjects"));

  return v12;
}

void sub_10009E728(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", a2));
  if (v3)
  {
    v6 = v3;
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);
    v4 = *(void **)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "episodes"));
    objc_msgSend(v4, "unionSet:", v5);

    v3 = v6;
  }

}

void sub_10009E89C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  if (a2)
  {
    v2 = *(void **)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10009E92C;
    v4[3] = &unk_1004A8F60;
    v5 = *(id *)(a1 + 48);
    objc_msgSend(v2, "indexSearchableItems:completionHandler:", v3, v4);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

uint64_t sub_10009E92C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10009E9F0(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  if (a2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchableIndex"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allObjects"));
    objc_msgSend(v4, "deleteSearchableItemsWithIdentifiers:completionHandler:", v3, 0);

  }
}

void sub_10009EA54(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "changesForEntityName:", kMTPodcastEntityName));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "updatedObjectIDs"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](NSMutableSet, "setWithSet:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "changesForEntityName:", kMTEpisodeEntityName));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "updatedObjectIDs"));
  objc_msgSend(v4, "unionSet:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "changesForEntityName:", kMTPlaylistEntityName));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "updatedObjectIDs"));
  objc_msgSend(v4, "unionSet:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", objc_msgSend(v4, "count")));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v10 = v4;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v20;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v20 != v13)
          objc_enumerationMutation(v10);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "existingObjectWithID:error:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v14), 0));
        if (v15)
          objc_msgSend(v9, "addObject:", v15);

        v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v12);
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allObjects"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "annotator"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10009ECD4;
  v18[3] = &unk_1004A8FB0;
  v18[4] = *(_QWORD *)(a1 + 40);
  +[MTCoreSpotlightUtil prepareSearchableItemsForObjectInArray:annotator:completion:](MTCoreSpotlightUtil, "prepareSearchableItemsForObjectInArray:annotator:completion:", v16, v17, v18);

}

void sub_10009ECD4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "searchableIndex"));
  objc_msgSend(v2, "searchableIndex:indexSearchableItems:completionHandler:", v4, v3, 0);

}

void sub_10009EDE8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint8_t buf[16];

  v2 = _MTLogCategorySpotlight(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Indexing] *** received indexAll request ***", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_onQueueCancelCurrentReindexAll");
  objc_msgSend(*(id *)(a1 + 32), "clearHasBeenIndexed");
  objc_msgSend(*(id *)(a1 + 32), "clearPartialUploadState");
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10009EEC4;
  v6[3] = &unk_1004A8F60;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v4, "indexAllDataWithSearchableIndex:completionHandler:", v5, v6);

}

uint64_t sub_10009EEC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10009EFB8(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  unsigned __int8 v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v2 = objc_alloc_init((Class)NSMutableSet);
  v3 = objc_alloc_init((Class)NSMutableSet);
  v20 = a1;
  v21 = objc_alloc_init((Class)NSMutableSet);
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        if ((unint64_t)objc_msgSend(v9, "length", v20) >= 2)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "substringFromIndex:", 1));
          v11 = objc_msgSend(v9, "hasPrefix:", CFSTR("p"));
          v12 = v2;
          if ((v11 & 1) != 0
            || (v13 = objc_msgSend(v9, "hasPrefix:", CFSTR("e")), v12 = v3, (v13 & 1) != 0)
            || (v14 = objc_msgSend(v9, "hasPrefix:", CFSTR("s")), v12 = v21, v14))
          {
            objc_msgSend(v12, "addObject:", v10);
          }

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v6);
  }

  v15 = *(void **)(v20 + 40);
  v16 = *(_QWORD *)(v20 + 48);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10009F228;
  v24[3] = &unk_1004A8FD8;
  v25 = v2;
  v26 = v3;
  v27 = v21;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10009F4AC;
  v22[3] = &unk_1004A6378;
  v23 = *(id *)(v20 + 56);
  v17 = v21;
  v18 = v3;
  v19 = v2;
  objc_msgSend(v15, "updateSearchableIndexWithReason:searchableIndex:entityLoadingBlock:completion:", CFSTR("System Re-index request"), v16, v24, v22);

}

id sub_10009F228(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _QWORD v28[3];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K IN %@"), kPodcastFeedUrl, a1[4]));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTCoreSpotlightUtil fetchRequestForIndexType:additionalPredicate:](MTCoreSpotlightUtil, "fetchRequestForIndexType:additionalPredicate:", 0, v4));
  v28[0] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K IN %@"), kEpisodeGuid, a1[5]));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTCoreSpotlightUtil fetchRequestForIndexType:additionalPredicate:](MTCoreSpotlightUtil, "fetchRequestForIndexType:additionalPredicate:", 1, v6));
  v28[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K IN %@"), kPlaylistUuid, a1[6]));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTCoreSpotlightUtil fetchRequestForIndexType:additionalPredicate:](MTCoreSpotlightUtil, "fetchRequestForIndexType:additionalPredicate:", 2, v8));
  v28[2] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v28, 3));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v12 = v10;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v24;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v24 != v15)
          objc_enumerationMutation(v12);
        v17 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v16);
        v22 = 0;
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v17, &v22));
        v19 = v22;
        v20 = v19;
        if (v19)
          objc_msgSend(v19, "logAndThrow:", 1);
        if (v18)
          objc_msgSend(v11, "addObjectsFromArray:", v18);

        v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v14);
  }

  return v11;
}

uint64_t sub_10009F4AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10009FD0C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  id v7;
  char v8;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10009FDA4;
  v6[3] = &unk_1004A9090;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(id *)(a1 + 56);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v5;
  v8 = *(_BYTE *)(a1 + 64);
  objc_msgSend(v2, "prepareIntentForEpisodeUuid:stationUuid:includeImage:includeStorePlatformData:completion:", v3, v4, 1, 1, v6);

}

void sub_10009FDA4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint8_t buf[4];
  id v16;

  v3 = a2;
  if (v3)
  {
    v4 = objc_msgSend(objc_alloc((Class)INPlayMediaIntentResponse), "initWithCode:userActivity:", 4, 0);
    v5 = objc_msgSend(objc_alloc((Class)objc_msgSend(*(id *)(a1 + 32), "interactionClass")), "initWithIntent:response:", v3, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mediaContainer"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    objc_msgSend(v5, "setGroupIdentifier:", v7);

    v8 = _MTLogCategorySiri(objc_msgSend(v5, "_setDonatedBySiri:", *(unsigned __int8 *)(a1 + 48)));
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Start to donate INInteraction: %@", buf, 0xCu);
    }

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10009FF54;
    v12[3] = &unk_1004A9068;
    v13 = v5;
    v14 = *(id *)(a1 + 40);
    v10 = v5;
    objc_msgSend(v10, "donateInteractionWithCompletion:", v12);

  }
  else
  {
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
      (*(void (**)(uint64_t, _QWORD))(v11 + 16))(v11, 0);
  }

}

void sub_10009FF54(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  id v13;

  v3 = a2;
  v4 = _MTLogCategorySiri();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    v12 = 138412290;
    v13 = v3;
    v7 = "Failed to donate Siri Action with error %@";
    v8 = v6;
    v9 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    v10 = *(void **)(a1 + 32);
    v12 = 138412290;
    v13 = v10;
    v7 = "Success donating INInteraction: %@";
    v8 = v6;
    v9 = OS_LOG_TYPE_DEFAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v12, 0xCu);
LABEL_7:

  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t, BOOL))(v11 + 16))(v11, v3 == 0);

}

void sub_1000A06BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1000A06E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000A0724(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "podcastUuid"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForUuid:", v3));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  v7 = *(void **)(a1 + 32);
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "episodeUuid"));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "episodeForUuid:", v11));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

}

void sub_1000A0CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a68;
  uint64_t v68;

  _Block_object_dispose(&a64, 8);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose(&STACK[0x2C8], 8);
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Block_object_dispose(&STACK[0x318], 8);
  _Block_object_dispose((const void *)(v68 - 232), 8);
  _Block_object_dispose((const void *)(v68 - 200), 8);
  _Block_object_dispose((const void *)(v68 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1000A0D40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;

  v35 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "uuid"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "guid"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v35, "storeTrackId");
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "title"));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "podcast"));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uuid"));
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "podcast"));
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "feedURL"));
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v16;

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "podcast"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = objc_msgSend(v19, "storeCollectionId");

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "podcast"));
  v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "title"));
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
  v23 = *(void **)(v22 + 40);
  *(_QWORD *)(v22 + 40) = v21;

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "podcast"));
  v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "author"));
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
  v27 = *(void **)(v26 + 40);
  *(_QWORD *)(v26 + 40) = v25;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) = objc_msgSend(v35, "isPlayheadResumable");
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40)));
  v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "uuid"));
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
  v31 = *(void **)(v30 + 40);
  *(_QWORD *)(v30 + 40) = v29;

  v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "title"));
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
  v34 = *(void **)(v33 + 40);
  *(_QWORD *)(v33 + 40) = v32;

}

void sub_1000A0F40(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "length");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifierComposer"));
  v12 = v11;
  v35 = v9;
  if (v10)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "universalPlaybackQueueIdentifierForStationUuid:episodeUuid:episodeGuid:episodeStoreId:podcastFeedUrl:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40)));

    v14 = objc_msgSend(objc_alloc((Class)INMediaItem), "initWithIdentifier:title:type:artwork:artist:topics:namedEntities:privateMediaItemValueData:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), 8, v7, 0, 0, 0, 0);
    if (v14)
    {
LABEL_3:
      v33 = v8;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peopleScoresFromMediaData:keyedOnQid:", v9, 0));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peopleScoresFromMediaData:keyedOnQid:", v9, 1));
      v17 = v7;
      v18 = objc_msgSend(objc_alloc((Class)INMediaItem), "initWithIdentifier:title:type:artwork:artist:topics:namedEntities:privateMediaItemValueData:", v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40), 7, v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40), v16, v15, 0);
      v19 = v18;
      v20 = v13;
      if (v18)
      {
        v36 = v18;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v36, 1));
      }
      else
      {
        v21 = &__NSArray0__struct;
      }
      v30 = objc_alloc((Class)INPlayMediaIntent);
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24)));
      v29 = objc_msgSend(v30, "initWithMediaItems:mediaContainer:playShuffled:playbackRepeatMode:resumePlayback:playbackQueueLocation:playbackSpeed:mediaSearch:", v21, v14, &__kCFBooleanFalse, 1, v31, 3, &off_1004D7628, 0);

      v8 = v33;
      v9 = v35;
      v13 = v20;
      v7 = v17;
      goto LABEL_9;
    }
  }
  else
  {
    v34 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "universalPlaybackQueueIdentifierForPodcastUuid:podcastFeedUrl:podcastStoreId:episodeUuid:episodeGuid:episodeStoreId:sampPlaybackOrder:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), 0));

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifierComposer"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "universalPlaybackQueueIdentifierForPodcastUuid:podcastFeedUrl:podcastStoreId:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24)));

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peopleScoresFromMediaData:keyedOnQid:", v8, 0));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peopleScoresFromMediaData:keyedOnQid:", v8, 1));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topicScoresFromMediaData:", v8));
    v27 = v8;
    v28 = objc_msgSend(v26, "mutableCopy");

    objc_msgSend(v28, "addEntriesFromDictionary:", v25);
    v14 = objc_msgSend(objc_alloc((Class)INMediaItem), "initWithIdentifier:title:type:artwork:artist:topics:namedEntities:privateMediaItemValueData:", v23, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40), 6, v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v28, v24, 0);

    v8 = v27;
    v13 = (void *)v34;
    v9 = v35;

    if (v14)
      goto LABEL_3;
  }
  v29 = 0;
LABEL_9:
  v32 = *(_QWORD *)(a1 + 40);
  if (v32)
    (*(void (**)(uint64_t, id))(v32 + 16))(v32, v29);

}

void sub_1000A1338(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  if (*(_BYTE *)(a1 + 64))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000A1414;
    v7[3] = &unk_1004A9158;
    v6 = *(void **)(a1 + 32);
    v9 = *(id *)(a1 + 40);
    v8 = v3;
    objc_msgSend(v6, "fetchMediaDataForEpisodeStoreId:podcastStoreId:completion:", v4, v5, v7);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

uint64_t sub_1000A1414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), a2, a3);
}

void sub_1000A142C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "donationQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A14D8;
  v6[3] = &unk_1004A63C8;
  v7 = v3;
  v8 = *(id *)(a1 + 40);
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_1000A14D8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[INImage imageWithImageData:](INImage, "imageWithImageData:", *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000A15F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  id v7;

  if (a2)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", a2));
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(void (**)(uint64_t))(v4 + 16);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaultPodcastArtworkData"));
    v5 = *(void (**)(uint64_t))(v6 + 16);
    v4 = v6;
  }
  v7 = (id)v3;
  v5(v4);

}

void sub_1000A17EC(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char isKindOfClass;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  void *v12;
  id v13;

  v13 = a2;
  v3 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v13, v3) & 1) != 0
    && (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", a1[4])),
        v5 = objc_opt_class(NSDictionary),
        isKindOfClass = objc_opt_isKindOfClass(v4, v5),
        v4,
        (isKindOfClass & 1) != 0))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", a1[4]));
  }
  else
  {
    v7 = &__NSDictionary0__struct;
  }
  v8 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v13, v8) & 1) != 0
    && (v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", a1[5])),
        v10 = objc_opt_class(NSDictionary),
        v11 = objc_opt_isKindOfClass(v9, v10),
        v9,
        (v11 & 1) != 0))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", a1[5]));
  }
  else
  {
    v12 = &__NSDictionary0__struct;
  }
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_1000A1E24(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create(0, 0);
  v2 = (void *)qword_100567388;
  qword_100567388 = (uint64_t)v1;

}

void sub_1000A1E4C(uint64_t a1)
{
  UIImage *v2;
  NSData *v3;
  uint64_t v4;
  void *v5;
  dispatch_time_t v6;

  if (!qword_100567398)
  {
    v2 = (UIImage *)objc_claimAutoreleasedReturnValue(+[UIImage defaultPodcastArtwork](UIImage, "defaultPodcastArtwork"));
    v3 = UIImageJPEGRepresentation(v2, 0.0);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)qword_100567398;
    qword_100567398 = v4;

  }
  if ((byte_100567390 & 1) == 0)
  {
    byte_100567390 = 1;
    v6 = dispatch_time(0, 1000000000);
    dispatch_after(v6, (dispatch_queue_t)&_dispatch_main_q, &stru_1004A9238);
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (id)qword_100567398);
}

void sub_1000A1EF4(id a1)
{
  dispatch_sync((dispatch_queue_t)qword_100567388, &stru_1004A9258);
}

void sub_1000A1F08(id a1)
{
  void *v1;

  byte_100567390 = 0;
  v1 = (void *)qword_100567398;
  qword_100567398 = 0;

}

id sub_1000A2124(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  MTNotificationEpisode *v3;

  v2 = a2;
  v3 = -[MTNotificationEpisode initWithDictionaryRepresentation:]([MTNotificationEpisode alloc], "initWithDictionaryRepresentation:", v2);

  return v3;
}

id sub_1000A2344(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_1000A2598(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableDictionary);
  v2 = (void *)qword_1005673A0;
  qword_1005673A0 = (uint64_t)v1;

}

void sub_1000A2650(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A26DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3AC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000A3CD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000A3CE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000A3DA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000A3E44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000A3EE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000A3F84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000A427C(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if ((_DWORD)a2 == 1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadataItemsToCommitToKVSStorage"));
    v5 = *(void **)(a1 + 48);
    goto LABEL_5;
  }
  if ((_DWORD)a2 == 2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadataItemsToCommitToDataSource"));
    v5 = *(void **)(a1 + 40);
LABEL_5:
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "itemIdentifier"));
    objc_msgSend(v4, "setObject:forKey:", v5, v6);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageProvider"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadataItemsToCommitToDataSource"));
  objc_msgSend(v7, "setNumMetadataItemsToCommitToDataSource:", objc_msgSend(v8, "count"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageProvider"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadataItemsToCommitToKVSStorage"));
  objc_msgSend(v9, "setNumMetadataItemsToCommitToKVSStorage:", objc_msgSend(v10, "count"));

  return a2;
}

id sub_1000A5300(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;

  objc_msgSend(*(id *)(a1 + 32), "artworkHeightForStyle:sizeType:", *(_QWORD *)(a1 + 40), 1);
  qword_100551080 = v2;
  result = objc_msgSend(*(id *)(a1 + 32), "artworkHeightForStyle:sizeType:", *(_QWORD *)(a1 + 40), 2);
  qword_1005673C0 = v4;
  return result;
}

id sub_1000A5348(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;

  objc_msgSend(*(id *)(a1 + 32), "artworkHeightForStyle:sizeType:", *(_QWORD *)(a1 + 40), 1);
  qword_100551088 = v2;
  result = objc_msgSend(*(id *)(a1 + 32), "artworkHeightForStyle:sizeType:", *(_QWORD *)(a1 + 40), 2);
  qword_1005673D0 = v4;
  return result;
}

void sub_1000A627C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A629C(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "episode"));
  objc_msgSend(v6, "setActionObject:", v8);

  v11 = objc_loadWeakRetained(v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "moreAction"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "availableActions"));

  objc_msgSend(v9, "showActionSheetWithActions:fromButton:", v10, v5);
}

void sub_1000A6D64(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ((objc_msgSend(WeakRetained, "updateDisabledReason") & 1) == 0
    && objc_msgSend(WeakRetained, "disabledReason") == (id)2)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "episode"));

    if (v1)
      objc_msgSend(WeakRetained, "updateIcons");
  }

}

void sub_1000A72E0(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "updateActionSheet") & 1) != 0)
  {
    objc_msgSend(v2, "updateActionSheet");
  }
  else if ((objc_opt_respondsToSelector(v2, "updatePopover") & 1) != 0)
  {
    objc_msgSend(v2, "updatePopover");
  }

}

void sub_1000A7390(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "dismissActionSheet") & 1) != 0)
  {
    objc_msgSend(v2, "dismissActionSheet");
  }
  else if ((objc_opt_respondsToSelector(v2, "dismissPopover") & 1) != 0)
  {
    objc_msgSend(v2, "dismissPopover");
  }

}

void sub_1000A7BB8(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  id v5;

  v1 = *(double *)(a1 + 40);
  v2 = *(double *)(a1 + 48);
  v3 = *(double *)(a1 + 56);
  v4 = *(double *)(a1 + 64);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "moreButton"));
  objc_msgSend(v5, "setFrame:", v1, v2, v3, v4);

}

void sub_1000A7C10(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  id v5;

  v1 = *(double *)(a1 + 40);
  v2 = *(double *)(a1 + 48);
  v3 = *(double *)(a1 + 56);
  v4 = *(double *)(a1 + 64);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "descriptionButton"));
  objc_msgSend(v5, "setFrame:", v1, v2, v3, v4);

}

void sub_1000AAF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AAF84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  unsigned int v10;
  id v11;
  void *v12;
  id v13;

  v13 = a2;
  v5 = a3;
  if (v13)
  {
    v6 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "episode"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "podcastUuid"));
    v10 = objc_msgSend(v5, "isEqualToString:", v9);

    if (v10)
    {
      v11 = objc_loadWeakRetained(v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "artworkView"));
      objc_msgSend(v12, "setArtwork:", v13);

    }
  }

}

void sub_1000AC43C(id a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v1, "scale");
  v3 = v2;

  qword_100551090 = v3;
}

id sub_1000AC714(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];

  v3 = _MTLogCategoryDatabase(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Migration assertion expired while operation is in progress!", v6, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "endBackgroundTask:", objc_msgSend(*(id *)(a1 + 40), "processAssertion"));
}

void sub_1000AC790(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  const char *v20;
  id (*v21)(uint64_t);
  void ***p_block;
  __uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  void *v40;
  void **v41;
  void **block;
  uint8_t buf[16];
  _QWORD v44[9];
  _QWORD v45[9];

  v3 = _MTLogCategoryDatabase(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Start CoreData migration.", buf, 2u);
  }

  v5 = +[MTLibraryMigrator runCoreDataMigration](MTLibraryMigrator, "runCoreDataMigration");
  v7 = _MTLogCategoryDatabase(v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CoreData migration completed successfully.", buf, 2u);
    }

    v12 = _MTLogCategoryDatabase(v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Start data migration.", buf, 2u);
    }

    v14 = +[MTLibraryMigrator runDataMigration](MTLibraryMigrator, "runDataMigration");
    v15 = v14;
    v17 = _MTLogCategoryDatabase(v14, v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v15)
    {
      if (v19)
      {
        *(_WORD *)buf = 0;
        v20 = "Data migration has been completed.";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 2u);
      }
    }
    else if (v19)
    {
      *(_WORD *)buf = 0;
      v20 = "No need to run data migration.";
      goto LABEL_16;
    }

    +[MTLibraryMigrator runImageStoreMigration](MTLibraryMigrator, "runImageStoreMigration");
    block = _NSConcreteStackBlock;
    v21 = sub_1000ACC68;
    p_block = &block;
    goto LABEL_18;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CoreData migration failed.", buf, 2u);
  }

  v41 = _NSConcreteStackBlock;
  v21 = sub_1000ACC70;
  p_block = &v41;
LABEL_18:
  p_block[1] = (void **)3221225472;
  p_block[2] = (void **)v21;
  p_block[3] = (void **)&unk_1004A6200;
  p_block[4] = *(void ***)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, p_block);
  v23 = (clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(_QWORD *)(a1 + 40)) / 0x3B9ACA00;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults"));
  v25 = objc_msgSend(v24, "integerForKey:", CFSTR("migrationAttemptCount"));

  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults"));
  objc_msgSend(v26, "removeObjectForKey:", CFSTR("migrationAttemptCount"));

  v39 = objc_alloc((Class)PFAnalyticsEvent);
  v38 = PFAnalyticsEventNameMigration;
  v44[0] = CFSTR("oldLibraryDataVersion");
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 48)));
  v45[0] = v40;
  v44[1] = CFSTR("newLibraryDataVersion");
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
  v45[1] = v27;
  v44[2] = CFSTR("oldCoreDataVersion");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 64)));
  v45[2] = v28;
  v44[3] = CFSTR("newCoreDataVersion");
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 72)));
  v45[3] = v29;
  v44[4] = CFSTR("durationSeconds");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v23));
  v45[4] = v30;
  v44[5] = CFSTR("success");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5));
  v45[5] = v31;
  v44[6] = CFSTR("didBecomeActiveWhileMigrating");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "didBecomeActiveWhileMigrating")));
  v45[6] = v32;
  v44[7] = CFSTR("migrationAttempts");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v25));
  v45[7] = v33;
  v44[8] = CFSTR("hadCorruptDB");
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
  v45[8] = v34;
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v45, v44, 9));
  v36 = objc_msgSend(v39, "initWithName:payload:", v38, v35);

  v37 = objc_alloc_init((Class)PFCoreAnalyticsChannel);
  objc_msgSend(v37, "sendEvent:", v36);

  +[IMMetrics endTimer:](IMMetrics, "endTimer:", CFSTR("migration"));
}

id sub_1000ACC68(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "finishMigration");
}

id sub_1000ACC70(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "showIncompatibleDBDialog");
}

id sub_1000ACE6C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performIncompatibleDBDialogAction");
}

void sub_1000AD460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000AD484(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcasts"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "valueForKey:", kPodcastUuid));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

id sub_1000AD99C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateUpNext");
}

id sub_1000ADFFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "configureBarButtonItems");
}

void sub_1000AF2F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B002C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B00B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B0400(id a1, NSArray *a2)
{
  NSArray *v2;
  void *v3;
  void *v4;
  void *v5;
  NSArray *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  NSArray *v12;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mainOrPrivateContext"));

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000B04E4;
  v9[3] = &unk_1004A7398;
  v10 = v5;
  v11 = v3;
  v12 = v2;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  objc_msgSend(v8, "performBlockAndWaitWithSave:", v9);

}

void sub_1000B04E4(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist predicateForFlag:isTrue:](MTPlaylist, "predicateForFlag:isTrue:", 4, 1));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPlaylistEntityName));
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v8 = *(void **)(a1 + 40);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "podcasts"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "set"));
        LOBYTE(v8) = objc_msgSend(v8, "isEqual:", v10);

        if ((v8 & 1) == 0)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithArray:](NSOrderedSet, "orderedSetWithArray:", *(_QWORD *)(a1 + 48)));
          objc_msgSend(v7, "setPodcasts:", v11);

          objc_msgSend(v7, "setNeedsUpdate:", 1);
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }

}

id sub_1000B0688(uint64_t a1, void *a2)
{
  CFPreferencesSynchronize(CFSTR("com.apple.storebookkeeper"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  return _objc_msgSend(a2, "_preferencesDidChange");
}

void sub_1000B0B08(id a1, RBSAssertion *a2, NSError *a3)
{
  NSError *v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  int v10;
  NSError *v11;

  v3 = a3;
  v4 = _MTLogCategoryAsyncTask();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      v10 = 138412290;
      v11 = v3;
      v7 = "Background assertion failed to acquire with error %@. App may sleep if it's in the background.";
      v8 = v5;
      v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v10, v9);
    }
  }
  else if (v6)
  {
    LOWORD(v10) = 0;
    v7 = "Background assertion was automatically invalidated. App may sleep if it's in the background.";
    v8 = v5;
    v9 = 2;
    goto LABEL_6;
  }

}

id sub_1000B0D9C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

id sub_1000B10B4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performExpirationHandler");
}

id sub_1000B1268(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_1000B1380(id a1)
{
  dword_1005673F8 = 0;
}

uint64_t sub_1000B14C0(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 32))
    return 1;
  else
    return objc_msgSend(a2, "isExplicit") ^ 1;
}

uint64_t sub_1000B15F4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  __int128 v10;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "itemWithPersistentID:", *(_QWORD *)(a1 + 32)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTMediaLibraryTransactionManager sharedInstance](MTMediaLibraryTransactionManager, "sharedInstance"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B16B0;
  v7[3] = &unk_1004A9540;
  v8 = v3;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a1 + 48);
  v5 = v3;
  objc_msgSend(v4, "requestMediaLibraryWriteTransaction:", v7);

  return 1;
}

uint64_t sub_1000B16B0(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  int64_t v13;
  void *v14;
  id v15;
  void *v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForProperty:", MPMediaItemPropertyBookmarkTime));
  objc_msgSend(v2, "doubleValue");
  v4 = v3;

  if (*(double *)(a1 + 40) != v4)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v5, "setValue:forProperty:", v6, MPMediaItemPropertyBookmarkTime);

  }
  v7 = MPMediaItemPropertyHasBeenPlayed;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForProperty:", MPMediaItemPropertyHasBeenPlayed));
  v9 = objc_msgSend(v8, "BOOLValue");

  v10 = +[MTLibraryLegacyUtil hasBeenPlayedForPlayState:](MTLibraryLegacyUtil, "hasBeenPlayedForPlayState:", *(_QWORD *)(a1 + 48));
  if (v9 != v10)
  {
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10));
    objc_msgSend(v11, "setValue:forProperty:", v12, v7);

  }
  v13 = +[MTLibraryLegacyUtil legacyPlayCountForPlayState:playCount:](MTLibraryLegacyUtil, "legacyPlayCountForPlayState:playCount:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForProperty:", MPMediaItemPropertyPlayCount));
  v15 = objc_msgSend(v14, "longLongValue");

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForProperty:", MPMediaItemPropertyLastPlayedDate));
  objc_msgSend(v16, "timeIntervalSinceNow");
  if ((id)v13 != v15 && (!v16 || fabs(v17) > 5.0))
  {
    v18 = *(void **)(a1 + 32);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v18, "setValue:forProperty:", v19, MPMediaItemPropertyLastPlayedDate);

    v20 = *(void **)(a1 + 32);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v13));
    objc_msgSend(v20, "setValue:forProperty:", v21, MPMediaItemPropertyPlayCount);

    if (!v13)
    {
      v31 = *(void **)(a1 + 32);
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", 0));
      v30 = MPMediaItemPropertyPlayCountSinceSync;
      v28 = v31;
      v29 = v27;
      goto LABEL_12;
    }
    v22 = v13 - (_QWORD)v15;
    if (v13 > (uint64_t)v15)
    {
      v23 = MPMediaItemPropertyPlayCountSinceSync;
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForProperty:", MPMediaItemPropertyPlayCountSinceSync));
      v25 = (char *)objc_msgSend(v24, "unsignedIntegerValue");

      v26 = *(void **)(a1 + 32);
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", &v25[v22]));
      v28 = v26;
      v29 = v27;
      v30 = v23;
LABEL_12:
      objc_msgSend(v28, "setValue:forProperty:", v29, v30);

    }
  }

  return 1;
}

void sub_1000B1978(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v2 = (void *)qword_100567408;
  qword_100567408 = v1;

}

void sub_1000B1ABC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B1BE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B1D04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1F1C(uint64_t a1, void *a2)
{
  id v3;
  NSMutableArray *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[4];
  NSMutableArray *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  v4 = objc_opt_new(NSMutableArray);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v17;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(v5);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "itemWithPersistentID:", objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v9), "unsignedLongLongValue")));
        if (v10)
          -[NSMutableArray addObject:](v4, "addObject:", v10);

        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v7);
  }

  if (-[NSMutableArray count](v4, "count"))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[MTMediaLibraryTransactionManager sharedInstance](MTMediaLibraryTransactionManager, "sharedInstance"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000B20EC;
    v14[3] = &unk_1004A95A8;
    v15 = v4;
    objc_msgSend(v11, "requestMediaLibraryWriteTransaction:completion:", v14, *(_QWORD *)(a1 + 40));

  }
  else
  {
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
      (*(void (**)(uint64_t, _QWORD))(v12 + 16))(v12, 0);
  }

  return 1;
}

uint64_t sub_1000B20EC(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[MPMediaLibrary defaultMediaLibrary](MPMediaLibrary, "defaultMediaLibrary"));
    objc_msgSend(v2, "removeItems:", *(_QWORD *)(a1 + 32));

    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v3 = *(id *)(a1 + 32);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v10;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v10 != v6)
            objc_enumerationMutation(v3);
          +[MTMediaLibraryUtil didDeletePersistentId:](MTMediaLibraryUtil, "didDeletePersistentId:", objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7), "persistentID", (_QWORD)v9));
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v5);
    }

  }
  return 1;
}

void sub_1000B2430(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  char v7;
  void *i;
  void *v9;
  MTUniversalPlaybackPositionMediaItem *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  id obj;
  id v45;
  uint64_t v46;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[4];
  id v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  id v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTEpisodeEntityName, *(_QWORD *)(a1 + 40), 0));
  v2 = objc_msgSend(v1, "count");
  if (!v2)
    goto LABEL_32;
  v4 = _MTLogCategoryUPPSync(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v53 = objc_msgSend(v1, "count");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Syncing %{public}ld local episodes", buf, 0xCu);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v1, "count")));
  v45 = objc_alloc_init((Class)NSMutableSet);
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v41 = v1;
  obj = v1;
  v42 = v6;
  v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
  v7 = 0;
  if (!v47)
    goto LABEL_23;
  v46 = *(_QWORD *)v49;
  while (2)
  {
    for (i = 0; i != v47; i = (char *)i + 1)
    {
      if (*(_QWORD *)v49 != v46)
        objc_enumerationMutation(obj);
      v9 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)i);
      objc_msgSend(v9, "updateUPPIdentifierIfNeeded");
      v10 = objc_alloc_init(MTUniversalPlaybackPositionMediaItem);
      -[MTUniversalPlaybackPositionMediaItem setEpisode:](v10, "setEpisode:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "metadataIdentifier"));
      if (v11)
      {
        objc_msgSend(v6, "setObject:forKey:", v10, v11);
        buf[0] = 0;
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        if (buf[0])
        {

          goto LABEL_23;
        }
      }
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "podcast"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "feedURL"));
      v14 = objc_msgSend(v13, "length");

      if (v14)
      {
        v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "podcast"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject feedURL](v17, "feedURL"));
        objc_msgSend(v45, "addObject:", v18);
      }
      else
      {
        v19 = _MTLogCategoryUPPSync(v15, v16);
        v17 = objc_claimAutoreleasedReturnValue(v19);
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          goto LABEL_16;
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "title"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uuid"));
        v21 = objc_msgSend(v9, "storeTrackId");
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "metadataIdentifier"));
        *(_DWORD *)buf = 138478595;
        v53 = v18;
        v54 = 2114;
        v55 = v20;
        v56 = 2049;
        v57 = v21;
        v58 = 2114;
        v59 = v22;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Skipping playState:<feedURL> sync for episode without a feedURL: %{private}@, %{public}@, %{private}lld, %{public}@", buf, 0x2Au);

        v6 = v42;
      }

LABEL_16:
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "podcast"));
      if (v23)
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "podcast"));
        v25 = objc_msgSend(v24, "subscribed") ^ 1;

      }
      else
      {
        LOBYTE(v25) = 0;
      }

      v7 |= v25;
    }
    v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
    if (v47)
      continue;
    break;
  }
LABEL_23:

  v28 = _MTLogCategoryUPPSync(v26, v27);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    v30 = objc_msgSend(v6, "count");
    *(_DWORD *)buf = 134349314;
    v53 = v30;
    v54 = 2114;
    v55 = v6;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}lu Media Items to Sync: %{public}@", buf, 0x16u);
  }

  v31 = objc_msgSend(*(id *)(a1 + 48), "setMediaItems:", v6);
  v33 = _MTLogCategoryUPPSync(v31, v32);
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v53 = v45;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Schedule an Episode Bookkeeper sync so we get our additional state for feedURLs: %{private}@", buf, 0xCu);
  }

  v35 = (void *)objc_claimAutoreleasedReturnValue(+[SyncControllerFactory resolvedSyncController](_TtC8Podcasts21SyncControllerFactory, "resolvedSyncController"));
  objc_msgSend(v35, "scheduleEpisodeStatePutWithFeedUrls:", v45);

  if ((v7 & 1) != 0)
  {
    v38 = _MTLogCategoryUPPSync(v36, v37);
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Schedule an NonFollowedShows Bookkeeper sync so we Set our updated lastDatePlayed values.", buf, 2u);
    }

    v40 = (void *)objc_claimAutoreleasedReturnValue(+[SyncControllerFactory resolvedSyncController](_TtC8Podcasts21SyncControllerFactory, "resolvedSyncController"));
    objc_msgSend(v40, "syncNonFollowedShowsIfSyncDirty");

  }
  v1 = v41;
LABEL_32:

}

void sub_1000B297C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateComponentsFormatter);
  v2 = (void *)qword_100567418;
  qword_100567418 = (uint64_t)v1;

  objc_msgSend((id)qword_100567418, "setAllowedUnits:", 240);
  _objc_msgSend((id)qword_100567418, "setUnitsStyle:", 1);
}

void sub_1000B2D0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  id v42;
  uint64_t v43;
  double v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  float v66;
  id v67;
  id v68;
  uint64_t v69;
  void *j;
  void (**v71)(_QWORD, _QWORD, double);
  void *v72;
  float v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  NSObject *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  NSObject *v86;
  id v87;
  void *v88;
  void *v89;
  id v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  void *k;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  id v117;
  id v118;
  uint64_t v119;
  void *m;
  id v121;
  void *v122;
  int v123;
  id v124;
  void *v125;
  void *v126;
  uint64_t v127;
  id obj;
  uint64_t v129;
  id v130;
  uint64_t v131;
  void *context;
  void *v133;
  void *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _BYTE v155[128];
  _BYTE v156[128];
  const __CFString *v157;
  void *v158;
  uint8_t buf[4];
  id v160;
  __int16 v161;
  void *v162;
  __int16 v163;
  double v164;
  __int16 v165;
  void *v166;
  __int16 v167;
  double v168;
  __int16 v169;
  void *v170;
  _BYTE v171[128];
  _BYTE v172[128];
  _BYTE v173[128];

  v1 = a1;
  v2 = kMTEpisodeEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K IN %@"), kEpisodeMetadataIdentifier, *(_QWORD *)(a1 + 40)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsInEntity:predicate:sortDescriptors:", v2, v4, 0));

  v6 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v5, "count"));
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  v154 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v151, v173, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v152;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v152 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v151 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "metadataIdentifier"));

        if (v13)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "metadataIdentifier"));
          objc_msgSend(v6, "setValue:forKey:", v12, v14);

        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v151, v173, 16);
    }
    while (v9);
  }
  v126 = v6;
  v122 = v7;

  v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v124 = objc_alloc_init((Class)NSMutableSet);
  v147 = 0u;
  v148 = 0u;
  v149 = 0u;
  v150 = 0u;
  obj = *(id *)(v1 + 48);
  v130 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v147, v172, 16);
  if (v130)
  {
    v15 = 0;
    v129 = *(_QWORD *)v148;
    v127 = PFAnalyticsEventNameUPPMetadataInsert;
    v131 = v1;
    do
    {
      v16 = 0;
      v123 = v15;
      v17 = v15;
      do
      {
        if (*(_QWORD *)v148 != v129)
          objc_enumerationMutation(obj);
        v18 = *(void **)(*((_QWORD *)&v147 + 1) + 8 * (_QWORD)v16);
        context = objc_autoreleasePoolPush();
        v134 = (void *)objc_claimAutoreleasedReturnValue(+[MTUPPMetadata createOrUpdateUPPMetadataFromUPPRecord:inCtx:](MTUPPMetadata, "createOrUpdateUPPMetadataFromUPPRecord:inCtx:", v18, *(_QWORD *)(v1 + 32)));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 56), "mediaItems"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "itemIdentifier"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", v20));

        v133 = v21;
        if (v21)
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "episode"));
          v24 = _MTLogCategoryUPPSync(v22, v23);
          v25 = objc_claimAutoreleasedReturnValue(v24);
          v26 = v17;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "title"));
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "uuid"));
            v29 = objc_msgSend(v22, "storeTrackId");
            *(_DWORD *)buf = 138478851;
            v160 = v27;
            v161 = 2114;
            v162 = v28;
            v163 = 2049;
            v164 = *(double *)&v29;
            v165 = 2114;
            v166 = v18;
            v167 = 2114;
            v168 = *(double *)&v21;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Episode: %{private}@, UUID: %{public}@, adamID: %{private}lld, Metadata: %{public}@, extracted from media item: %{public}@", buf, 0x34u);

          }
        }
        else
        {
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "itemIdentifier"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "objectForKey:", v30));

          v33 = _MTLogCategoryUPPSync(v31, v32);
          v25 = objc_claimAutoreleasedReturnValue(v33);
          v26 = v17;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "title"));
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "uuid"));
            v36 = objc_msgSend(v22, "storeTrackId");
            *(_DWORD *)buf = 138478595;
            v160 = v34;
            v161 = 2114;
            v162 = v35;
            v163 = 2049;
            v164 = *(double *)&v36;
            v165 = 2114;
            v166 = v18;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Episode: %{private}@, UUID: %{public}@, adamID: %{private}lld, Metadata: %{public}@, extracted from local episode dictionary", buf, 0x2Au);

          }
        }
        v37 = v26 + 1;

        if (!v22)
        {
          v53 = _MTLogCategoryUPPSync(v38, v39);
          v54 = objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v160 = v18;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Episode Not Found, Skip: %{public}@", buf, 0xCu);
          }
          goto LABEL_42;
        }
        objc_msgSend(v22, "metadataTimestamp");
        v41 = v40;
        v42 = objc_msgSend(v18, "timestamp");
        if (v41 < v44)
        {
          objc_msgSend((id)objc_opt_class(*(_QWORD *)(v1 + 64)), "updateEpisode:withUPPMetadata:", v22, v134);
          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "playlists"));
          objc_msgSend(v125, "unionSet:", v45);

          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "podcast"));
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "feedURL"));
          v48 = objc_msgSend(v47, "length");

          if (v48)
          {
            v51 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "podcast"));
            v52 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject feedURL](v51, "feedURL"));
            objc_msgSend(v124, "addObject:", v52);
            goto LABEL_31;
          }
          v62 = _MTLogCategoryUPPSync(v49, v50);
          v51 = objc_claimAutoreleasedReturnValue(v62);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "title"));
            *(_DWORD *)buf = 138477827;
            v160 = v52;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Skipping bookkeeper sync for episode without a feedURL: %{private}@", buf, 0xCu);
LABEL_31:

          }
          v1 = v131;

          if ((os_feature_enabled_bluemoon(v63) & 1) == 0)
          {
            v64 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
            v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "uuid"));
            objc_msgSend(v22, "playhead");
            objc_msgSend(v64, "updateUPPEpisodeUuid:bookmarkTime:", v65, v66);

          }
          v145 = 0u;
          v146 = 0u;
          v143 = 0u;
          v144 = 0u;
          v54 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v131 + 64), "episodeObservers"));
          v67 = -[NSObject countByEnumeratingWithState:objects:count:](v54, "countByEnumeratingWithState:objects:count:", &v143, v171, 16);
          if (v67)
          {
            v68 = v67;
            v69 = *(_QWORD *)v144;
            do
            {
              for (j = 0; j != v68; j = (char *)j + 1)
              {
                if (*(_QWORD *)v144 != v69)
                  objc_enumerationMutation(v54);
                v71 = (void (**)(_QWORD, _QWORD, double))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v143 + 1) + 8 * (_QWORD)j), "block"));
                v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "uuid"));
                objc_msgSend(v22, "playhead");
                ((void (**)(_QWORD, void *, double))v71)[2](v71, v72, v73);

              }
              v68 = -[NSObject countByEnumeratingWithState:objects:count:](v54, "countByEnumeratingWithState:objects:count:", &v143, v171, 16);
            }
            while (v68);
            v1 = v131;
          }
LABEL_42:

          v61 = v134;
          if (*(_BYTE *)(v1 + 80))
          {
            objc_msgSend(v134, "timestamp");
            v75 = v74;
            v76 = *(double *)(v1 + 72);
            objc_msgSend(v134, "bookmarkTime");
            if (v77 != 0.0
              || objc_msgSend(v134, "playCount")
              || (objc_msgSend(v134, "hasBeenPlayed") & 1) != 0)
            {
              v78 = v76 - v75;
              v79 = _MTLogCategoryMetrics();
              v80 = objc_claimAutoreleasedReturnValue(v79);
              if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
              {
                v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "metadataIdentifier"));
                v82 = *(void **)(v131 + 72);
                v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v75));
                v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v131 + 64), "_metricsDateFormatter"));
                v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "stringFromTimeInterval:", v78));
                *(_DWORD *)buf = 138413570;
                v160 = v81;
                v161 = 2048;
                v162 = v82;
                v163 = 2048;
                v164 = v75;
                v165 = 2112;
                v166 = v83;
                v167 = 2048;
                v168 = v78;
                v169 = 2112;
                v170 = v85;
                _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Metrics event for %@ - current time %f - creation date %f - %@ - insert delta %f - %@", buf, 0x3Eu);

                v61 = v134;
              }

              v86 = objc_alloc_init((Class)PFCoreAnalyticsChannel);
              v87 = objc_alloc((Class)PFAnalyticsEvent);
              v157 = CFSTR("metadataInsertDelta");
              v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v78));
              v158 = v88;
              v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v158, &v157, 1));
              v90 = objc_msgSend(v87, "initWithName:payload:", v127, v89);
              -[NSObject sendEvent:](v86, "sendEvent:", v90);

              v1 = v131;
            }
            else
            {
              v92 = _MTLogCategoryMetrics();
              v86 = objc_claimAutoreleasedReturnValue(v92);
              if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
              {
                v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "metadataIdentifier"));
                *(_DWORD *)buf = 138412290;
                v160 = v93;
                _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "Metrics event for %@ skipped. Empty update.", buf, 0xCu);

              }
            }

          }
          v17 = v37;
          HIDWORD(v91) = -1030792151 * v37 + 85899344;
          LODWORD(v91) = HIDWORD(v91);
          if ((v91 >> 3) >= 0x147AE15)
            objc_msgSend(*(id *)(v1 + 32), "saveInCurrentBlock");
          goto LABEL_52;
        }
        v55 = _MTLogCategoryUPPSync(v42, v43);
        v56 = objc_claimAutoreleasedReturnValue(v55);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "title"));
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "uuid"));
          v59 = objc_msgSend(v22, "storeTrackId");
          objc_msgSend(v22, "metadataTimestamp");
          *(_DWORD *)buf = 138478851;
          v160 = v57;
          v161 = 2114;
          v162 = v58;
          v163 = 2049;
          v164 = *(double *)&v59;
          v1 = v131;
          v165 = 2050;
          v166 = v60;
          v167 = 2114;
          v168 = *(double *)&v18;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Not updating episode because local T is newer: Episode: %{private}@, UUID: %{public}@, adamID: %{private}lld, episode.metadataTimestamp: %{public}f, remoteMetadata: %{public}@", buf, 0x34u);

        }
        v17 = v37;

        v61 = v134;
LABEL_52:

        objc_autoreleasePoolPop(context);
        v16 = (char *)v16 + 1;
      }
      while (v16 != v130);
      v15 = v123 + (_DWORD)v130;
      v94 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v147, v172, 16);
      v130 = v94;
    }
    while (v94);
  }

  v97 = _MTLogCategoryUPPSync(v95, v96);
  v98 = objc_claimAutoreleasedReturnValue(v97);
  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v160 = v124;
    _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "Schedule an Episode Bookkeeper sync so we get our additional state for feedURLs: %{private}@", buf, 0xCu);
  }

  v99 = (void *)objc_claimAutoreleasedReturnValue(+[SyncControllerFactory resolvedSyncController](_TtC8Podcasts21SyncControllerFactory, "resolvedSyncController"));
  objc_msgSend(v99, "scheduleEpisodeStateGetWithFeedUrls:", v124);

  v102 = _MTLogCategoryUPPSync(v100, v101);
  v103 = objc_claimAutoreleasedReturnValue(v102);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v160 = v125;
    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "Updating unplayed count for playlists: %{public}@", buf, 0xCu);
  }

  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  v104 = v125;
  v105 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v139, v156, 16);
  if (v105)
  {
    v106 = v105;
    v107 = *(_QWORD *)v140;
    do
    {
      for (k = 0; k != v106; k = (char *)k + 1)
      {
        if (*(_QWORD *)v140 != v107)
          objc_enumerationMutation(v104);
        objc_msgSend(*(id *)(*((_QWORD *)&v139 + 1) + 8 * (_QWORD)k), "updateUnplayedCount");
      }
      v106 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v139, v156, 16);
    }
    while (v106);
  }

  v111 = _MTLogCategoryUPPSync(v109, v110);
  v112 = objc_claimAutoreleasedReturnValue(v111);
  if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
  {
    v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 56), "mediaItems"));
    v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "allValues"));
    *(_DWORD *)buf = 138543362;
    v160 = v114;
    _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "Consolidating all remote media items to UPP database, so we never lose UPP data for episodes still not fetched from feed: %{public}@", buf, 0xCu);

  }
  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 56), "mediaItems"));
  v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "allValues"));

  v117 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v135, v155, 16);
  if (v117)
  {
    v118 = v117;
    v119 = *(_QWORD *)v136;
    do
    {
      for (m = 0; m != v118; m = (char *)m + 1)
      {
        if (*(_QWORD *)v136 != v119)
          objc_enumerationMutation(v116);
        v121 = +[MTUPPMetadata createOrUpdateUPPMetadataFromUPPMediaItem:inCtx:](MTUPPMetadata, "createOrUpdateUPPMetadataFromUPPMediaItem:inCtx:", *(_QWORD *)(*((_QWORD *)&v135 + 1) + 8 * (_QWORD)m), *(_QWORD *)(v1 + 32));
      }
      v118 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v135, v155, 16);
    }
    while (v118);
  }

}

void sub_1000B3A50(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[128];
  uint8_t buf[4];
  id v22;

  v2 = *(void **)(a1 + 32);
  v3 = kMTEpisodeEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForMetadataFirstSyncEligible:](MTEpisode, "predicateForMetadataFirstSyncEligible:", 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectsInEntity:predicate:sortDescriptors:", v3, v4, 0));

  v6 = objc_msgSend(v5, "count");
  if (v6)
  {
    v8 = _MTLogCategoryUPPSync(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v22 = objc_msgSend(v5, "count");
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Marking %lu episodes as metadataFirstSyncEligible = NO", buf, 0xCu);
    }

    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v10 = v5;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v17;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v17 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v14);
          +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate", (_QWORD)v16);
          objc_msgSend(v15, "setMetadataTimestamp:");
          objc_msgSend(v15, "setMetadataFirstSyncEligible:", 0);
          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v12);
    }

    objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  }

}

void sub_1000B431C(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  float v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;

  v26 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episode"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "podcast"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v1, "storeCollectionId")));
  v19 = v1;
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "currentFeedURL"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "guid"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "title"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "author"));
  v4 = v26;
  if (!v3)
    v4 = v1;
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "author"));

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "title"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", +[MTLibraryLegacyUtil legacyPlayCountForPlayState:playCount:](MTLibraryLegacyUtil, "legacyPlayCountForPlayState:playCount:", objc_msgSend(v26, "playState"), objc_msgSend(v26, "playCount"))));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[MTLibraryLegacyUtil hasBeenPlayedForPlayState:](MTLibraryLegacyUtil, "hasBeenPlayedForPlayState:", objc_msgSend(v26, "playState"))));
  objc_msgSend(v26, "playhead");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v6));
  objc_msgSend(v26, "metadataTimestamp");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 3));
  objc_msgSend(v26, "importDate");
  v11 = v10;
  +[MTUniversalPlaybackPositionDataSource uppLastSyncTime](MTUniversalPlaybackPositionDataSource, "uppLastSyncTime");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v11 > v12));
  objc_msgSend(v26, "lastUserMarkedAsPlayedDate");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  objc_msgSend(v26, "lastDatePlayed");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v26, "playStateManuallySet")));
  v13 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 12);
  objc_msgSend(v13, "setValue:forKey:", v2, CFSTR("storeItemAdamID"));
  objc_msgSend(v13, "setValue:forKey:", v25, CFSTR("podcastURL"));
  objc_msgSend(v13, "setValue:forKey:", v24, CFSTR("podcastGUID"));
  objc_msgSend(v13, "setValue:forKey:", v23, CFSTR("title"));
  objc_msgSend(v13, "setValue:forKey:", v21, CFSTR("artist"));
  objc_msgSend(v13, "setValue:forKey:", v22, CFSTR("albumTitle"));
  objc_msgSend(v13, "setValue:forKey:", v5, CFSTR("playCount"));
  objc_msgSend(v13, "setValue:forKey:", v18, CFSTR("hasBeenPalyed"));
  objc_msgSend(v13, "setValue:forKey:", v7, CFSTR("bookmarkTime"));
  objc_msgSend(v13, "setValue:forKey:", v8, CFSTR("bookmarkMetadataTimestamp"));
  objc_msgSend(v13, "setValue:forKey:", v9, CFSTR("mediaEntityType"));
  objc_msgSend(v13, "setValue:forKey:", v17, CFSTR("isNew"));
  objc_msgSend(v13, "setValue:forKey:", v16, CFSTR("lastUserMarkedAsPlayedDate"));
  objc_msgSend(v13, "setValue:forKey:", v15, CFSTR("lastDatePlayed"));
  objc_msgSend(v13, "setValue:forKey:", v14, CFSTR("playStateManuallySet"));
  objc_msgSend(*(id *)(a1 + 32), "setMediaItemDictionary:", v13);

}

void sub_1000B4B28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  char isKindOfClass;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;

  v29 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "object"));
  v7 = objc_opt_class(NSDictionary);
  isKindOfClass = objc_opt_isKindOfClass(v6, v7);

  if ((isKindOfClass & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "object"));
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("data")));
    if (!v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("results")));
      v12 = objc_opt_class(NSDictionary);
      v13 = objc_opt_class(v12);
      if ((objc_opt_isKindOfClass(v11, v13) & 1) != 0)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", CFSTR("podcast-episodes")));
        v15 = v14;
        if (v14)
          v16 = v14;
        else
          v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", CFSTR("podcast")));
        v18 = v16;

      }
      else
      {
        v18 = 0;
      }
      v19 = objc_opt_class(NSArray);
      v20 = objc_opt_class(v19);
      if ((objc_opt_isKindOfClass(v18, v20) & 1) != 0)
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "firstObject"));
      else
        v21 = 0;
      v22 = objc_opt_class(NSDictionary);
      v23 = objc_opt_class(v22);
      if ((objc_opt_isKindOfClass(v21, v23) & 1) != 0)
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKey:", CFSTR("data")));
      else
        v24 = 0;
      v25 = objc_opt_class(NSArray);
      v26 = objc_opt_class(v25);
      if ((objc_opt_isKindOfClass(v24, v26) & 1) != 0)
        v27 = v24;
      else
        v27 = 0;
      v10 = v27;

    }
    v28 = *(_QWORD *)(a1 + 32);
    if (v28)
      (*(void (**)(uint64_t, id, _QWORD))(v28 + 16))(v28, v10, 0);

  }
  else
  {
    v17 = *(_QWORD *)(a1 + 32);
    if (v17)
      (*(void (**)(uint64_t, _QWORD, id))(v17 + 16))(v17, 0, v5);
  }

}

void sub_1000B5128(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = objc_msgSend(*(id *)(a1 + 32), "shareModeForShareFromMode:", objc_msgSend(a2, "selectedOptionIndex"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
  objc_msgSend(v4, "setCurrentShareMode:", v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
  v8 = (id)objc_claimAutoreleasedReturnValue(+[MTShareUtil shareActivityItems:](MTShareUtil, "shareActivityItems:", v5));

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "applicationActivities"));
  objc_msgSend(v6, "_updateActivityItems:applicationActivities:", v8, v7);

}

id sub_1000B57F0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "presentAddPodcastUI");
}

id sub_1000B57F8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "presentAddStationUI");
}

void sub_1000B5800(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "popoverPresentationController"));
  objc_msgSend(v1, "setPassthroughViews:", 0);

}

void sub_1000B5B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1000B5B58(uint64_t a1, void *a2)
{
  void *v4;
  id v5;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v5 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "absoluteString"));
  objc_msgSend(v5, "setText:", v4);

  objc_msgSend(v5, "setKeyboardType:", 3);
}

void sub_1000B5BC8(uint64_t a1)
{
  _QWORD v1[4];
  __int128 v2;

  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_1000B5C24;
  v1[3] = &unk_1004A6F38;
  v2 = *(_OWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v1);
}

void sub_1000B5C24(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD v3[4];
  __int128 v4;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "resignFirstResponder");
  v2 = dispatch_time(0, 1000000000);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B5CAC;
  v3[3] = &unk_1004A6B98;
  v4 = *(_OWORD *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, v3);
}

void sub_1000B5CAC(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "text"));
  objc_msgSend(v1, "performSubscribe:", v2);

}

void sub_1000B5CF4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  objc_msgSend(v2, "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);

}

void sub_1000B60A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1000B60C4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  objc_msgSend(v3, "setPlaceholder:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v3, "setAutocapitalizationType:", 2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1000B610C(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "text"));
  v3 = objc_msgSend(v2, "length");

  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "text"));
    objc_msgSend(v4, "presentStationWithTitle:", v5);

  }
}

void sub_1000B619C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  objc_msgSend(v2, "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);

}

void sub_1000B63B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000B63DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v2 = objc_claimAutoreleasedReturnValue(+[MTPlaylist insertNewPlaylistInManagedObjectContext:](MTPlaylist, "insertNewPlaylistInManagedObjectContext:", a1[4]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setTitle:", a1[5]);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setIncludesAllPodcasts:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setNeedsUpdate:", 0);
  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setGeneratedDate:");
  v5 = (void *)a1[4];
  v10 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  objc_msgSend(v5, "obtainPermanentIDsForObjects:error:", v6, 0);

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "uuid"));
  v8 = *(_QWORD *)(a1[7] + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

id sub_1000B8E68(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addEntityToCache:", a2);
}

id sub_1000B91B0()
{
  UITableViewCell *v0;
  void *v1;

  v0 = objc_opt_new(UITableViewCell);
  v1 = (void *)objc_claimAutoreleasedReturnValue(-[UITableViewCell _disclosureChevronImage:](v0, "_disclosureChevronImage:", 0));

  return v1;
}

void sub_1000BAC90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  unint64_t v6;
  NSString *v7;

  v7 = a2;
  v5 = a3;
  if (MPMediaPlaylistPropertyName == v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setName:", v5);
  }
  else if (MPMediaEntityPropertyPersistentID == v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setMediaLibraryId:", v5);
  }
  else if ((NSString *)MPMediaPlaylistPropertyParentPersistentID == v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setParentMediaLibraryId:", v5);
  }
  else if ((NSString *)MPMediaPlaylistPropertyIsFolder == v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsFolder:", objc_msgSend(v5, "BOOLValue"));
  }
  else if (MPMediaPlaylistPropertyPlaylistAttributes == v7)
  {
    v6 = (unint64_t)objc_msgSend(v5, "integerValue");
    objc_msgSend(*(id *)(a1 + 32), "setIsGenius:", (v6 >> 2) & 1);
    objc_msgSend(*(id *)(a1 + 32), "setIsOnTheGo:", v6 & 1);
    objc_msgSend(*(id *)(a1 + 32), "setIsSmart:", (v6 >> 1) & 1);
  }
  else if ((NSString *)MPMediaPlaylistPropertyIsHidden == v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsHidden:", objc_msgSend(v5, "BOOLValue"));
  }

}

void sub_1000BB624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1000BB658(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id obj;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentFetchRequest"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v4 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeFetchRequest:error:", v3, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v5, "count") == 0;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mt_compactMap:", *(_QWORD *)(a1 + 40)));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_entitiesByRemovingAlreadyProcessedFrom:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40)));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

}

id sub_1000BB8E0(id a1, NSManagedObject *a2)
{
  return a2;
}

uint64_t sub_1000BB8F4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  uint64_t v14;

  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - 1;
    if (0x8F5C28F5C28F5C29 * v3 + 0x51EB851EB851EB8 <= 0xA3D70A3D70A3D70)
    {
      v4 = _MTLogCategorySpotlight(result);
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v3));
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "count")));
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 138412802;
        v10 = v6;
        v11 = 2112;
        v12 = v7;
        v13 = 2112;
        v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Indexing] *** batch processing - continuing batch #%@ with %@ entities [%@]", (uint8_t *)&v9, 0x20u);

      }
      result = *(_QWORD *)(a1 + 56);
    }
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1000BBC44(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "externallyProcessedMOIDs"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));

  v6 = objc_msgSend(v4, "containsObject:", v5) ^ 1;
  return v6;
}

void sub_1000BBD64(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create(0, 0);
  v2 = (void *)qword_100567430;
  qword_100567430 = (uint64_t)v1;

}

uint64_t sub_1000BBD8C(uint64_t result)
{
  uint64_t v1;

  v1 = qword_1005515E0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = qword_1005515E0;
  qword_1005515E0 = v1 + 1;
  return result;
}

void sub_1000BBF5C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  const CFStringRef *v8;
  NSString *v9;

  v9 = a2;
  v5 = a3;
  if (MPMediaItemPropertyArtist == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setArtist:", v5);
  }
  else if ((NSString *)MPMediaItemPropertyPodcastURL == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setFeedUrl:", v5);
  }
  else if (MPMediaItemPropertyPodcastTitle == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPodcastTitle:", v5);
  }
  else if (MPMediaItemPropertyPodcastPersistentID == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPodcastPersistentId:", v5);
  }
  else if (MPMediaItemPropertyAssetURL == v9)
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "absoluteString"));
    objc_msgSend(v6, "setAssetUrl:", v7);

  }
  else if ((NSString *)MPMediaItemPropertyIsITunesU == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsItunesU:", objc_msgSend(v5, "BOOLValue"));
  }
  else if (MPMediaItemPropertyPersistentID == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPersistentId:", v5);
  }
  else if ((NSString *)MPMediaItemPropertyFileSize == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setByteSize:", v5);
  }
  else if (MPMediaItemPropertyGenre == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setCategory:", v5);
  }
  else if (MPMediaItemPropertyPlaybackDuration == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setDuration:", v5);
  }
  else if (MPMediaItemPropertyTitle == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setTitle:", v5);
  }
  else if (MPMediaItemPropertyMediaType == v9)
  {
    v8 = &kUTTypeMovie;
    if (objc_msgSend(v5, "integerValue") != (id)1024 && objc_msgSend(v5, "integerValue") != (id)4096)
      v8 = &kUTTypeAudio;
    objc_msgSend(*(id *)(a1 + 32), "setUti:", *v8);
  }
  else if ((NSString *)MPMediaItemPropertyPodcastGUID == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setGuid:", v5);
  }
  else if (MPMediaItemPropertyReleaseDate == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPubDate:", v5);
  }
  else if (MPMediaItemPropertyBookmarkTime == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPlayhead:", v5);
  }
  else if ((NSString *)MPMediaItemPropertyHasBeenPlayed == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setHasBeenPlayed:", objc_msgSend(v5, "BOOLValue"));
  }
  else if (MPMediaItemPropertyPlayCount == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPlayCount:", v5);
  }
  else if ((NSString *)MPMediaItemPropertyDownloadIdentifier == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setDownloadIdentifier:", v5);
  }
  else if ((NSString *)MPMediaItemPropertyRestricted == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsExplicit:", objc_msgSend(v5, "BOOLValue"));
  }
  else if ((NSString *)MPMediaItemPropertyStoreID == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setStoreTrackId:", v5);
  }
  else if ((NSString *)MPMediaItemPropertyStorePlaylistID == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setStoreCollectionId:", v5);
  }
  else if (MPMediaItemPropertyLastPlayedDate == v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setLastPlayedDate:", v5);
  }

}

BOOL sub_1000BC32C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  _BOOL8 v5;
  void *v6;
  void *v7;
  const __CFString *v9;
  void *v10;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "itemWithPersistentID:", objc_msgSend(v2, "persistentID")));

  v5 = +[MTMLMediaItem isMissingAssetForItem:](MTMLMediaItem, "isMissingAssetForItem:", v4);
  if (v5)
  {
    v9 = CFSTR("persistantID");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v4, "persistentID")));
    v10 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    +[IMMetrics recordUserAction:dataSource:withData:](IMMetrics, "recordUserAction:dataSource:withData:", CFSTR("medialibrary_missing_asset"), 0, v7);

    objc_msgSend(v4, "populateLocationPropertiesWithPath:", 0);
  }

  return v5;
}

void sub_1000BCB44(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "setHidden:", 1);
  objc_msgSend(*(id *)(a1 + 40), "_deleteSpotlightIdentifierForPlaylist:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  objc_msgSend(v2, "deletePlaylist:", *(_QWORD *)(a1 + 32));

  v3 = (id)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](_TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
  objc_msgSend(v3, "setIsPlaylistSyncDirty:", 1);

}

void sub_1000BCCF0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 48), "deletePlaylist:", v2);

}

void sub_1000BCE18(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = *(void **)(a1 + 32);
  v3 = kMTPlaylistEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist topLevelPlaylistsExcludingFoldersPredicate](MTPlaylist, "topLevelPlaylistsExcludingFoldersPredicate"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectsInEntity:predicate:sortDescriptors:", v3, v4, 0));

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(a1 + 40), "deletePlaylist:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v10), (_QWORD)v11);
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }

}

void sub_1000BD828(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 136));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000BD880(uint64_t a1, void *a2, char a3)
{
  id v5;
  void *v6;
  objc_super v7;
  _QWORD v8[4];
  id v9;
  id v10;
  char v11;
  id location;

  v5 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000BD978;
  v8[3] = &unk_1004A9900;
  objc_copyWeak(&v10, &location);
  v11 = a3;
  v9 = *(id *)(a1 + 40);
  v7.receiver = v6;
  v7.super_class = (Class)MTStoreManifest;
  objc_msgSendSuper2(&v7, "load:", v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);

}

void sub_1000BD95C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1000BD978(uint64_t a1)
{
  id WeakRetained;
  uint64_t result;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateLoadStatus:", *(unsigned __int8 *)(a1 + 48));

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000BD9C4(id *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id WeakRetained;
  _BOOL8 v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  objc_super v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint8_t v25;
  uint8_t buf[4];
  uint64_t v27;

  v3 = a2;
  v4 = objc_msgSend(a1[4], "timeIntervalSinceNow");
  v6 = v5;
  v8 = _MTLogCategoryNetwork(v4, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "StorePlatform lookup took: %f", buf, 0xCu);
  }

  buf[0] = 0;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v11 = objc_msgSend(WeakRetained, "playbackOrder") == (id)2;

  v12 = objc_loadWeakRetained(a1 + 7);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "podcastAdamId"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "stringValue"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v14));

  v16 = objc_loadWeakRetained(a1 + 7);
  v17 = objc_msgSend((id)objc_opt_class(v16), "playerItemsFromPodcastStorePlatformDictionary:oldestEpisode:restricted:initiatedByAnotherUser:", v15, v11, buf, objc_msgSend(a1[5], "initiatedByAnotherUser"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v19 = objc_loadWeakRetained(a1 + 7);
  objc_msgSend(v19, "setItems:", v18);

  v20 = a1[5];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000BDC0C;
  v22[3] = &unk_1004A9900;
  objc_copyWeak(&v24, a1 + 7);
  v25 = buf[0];
  v23 = a1[6];
  v21.receiver = v20;
  v21.super_class = (Class)MTStoreManifest;
  objc_msgSendSuper2(&v21, "load:", v22);

  objc_destroyWeak(&v24);
}

void sub_1000BDBF0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BDC0C(uint64_t a1)
{
  id WeakRetained;
  uint64_t result;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateLoadStatus:", *(unsigned __int8 *)(a1 + 48));

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000BDC58(uint64_t a1)
{
  id WeakRetained;
  uint64_t result;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateLoadStatus:", 0);

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000BE0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  _Block_object_dispose(&a18, 8);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1000BE120(uint64_t a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  __int128 v9;
  _QWORD v10[4];
  id v11;
  __int128 v12;
  id v13[2];
  char v14;

  v5 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000BE214;
  v10[3] = &unk_1004A99A0;
  objc_copyWeak(v13, (id *)(a1 + 48));
  v6 = v5;
  v7 = *(void **)(a1 + 56);
  v11 = v6;
  v13[1] = v7;
  v9 = *(_OWORD *)(a1 + 32);
  v8 = (id)v9;
  v12 = v9;
  v14 = a3;
  +[IMAVPlayer performOnMainQueue:](IMAVPlayer, "performOnMainQueue:", v10);

  objc_destroyWeak(v13);
}

void sub_1000BE200(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BE214(uint64_t a1)
{
  uint64_t v2;
  id *v3;
  id WeakRetained;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  id v12;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "setItems:", v2);

  v5 = *(_QWORD *)(a1 + 64);
  if (v5 >= (unint64_t)objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    if (!objc_msgSend(*(id *)(a1 + 32), "count"))
    {
      v7 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_12;
    }
    v6 = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = 0x7FFFFFFFFFFFFFFFLL;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_12;
  }
  v7 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v6));
  v9 = v8;
  if (v8)
  {
    v10 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    if (v10 != 0.0)
    {
      objc_msgSend(v8, "duration");
      if (v10 < v11)
        objc_msgSend(v9, "setPlayhead:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
    }
  }

LABEL_12:
  v12 = objc_loadWeakRetained(v3);
  objc_msgSend(v12, "setCurrentIndex:", v7);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 72));
  return result;
}

uint64_t sub_1000BE968(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;

  if (a2)
  {
    v2 = a2;
    v4 = objc_opt_class(NSNull, v3);
    v6 = objc_opt_class(v4, v5);
    isKindOfClass = objc_opt_isKindOfClass(v2, v6);

  }
  else
  {
    isKindOfClass = 1;
  }
  return isKindOfClass & 1;
}

void sub_1000BEC94(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id obj;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:propertiesToFetch:batchSize:", kMTEpisodeEntityName, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = v1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v18;
    v5 = kEpisodeUuid;
    v14 = kEpisodeAssetURL;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v4)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "enclosureURL"));
        if (objc_msgSend(v8, "length"))
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uuid"));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "assetURL"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObject:forKey:](NSMutableDictionary, "dictionaryWithObject:forKey:", v9, v5));
          if (objc_msgSend(v10, "length"))
            objc_msgSend(v11, "setObject:forKey:", v10, v14);
          v12 = *(void **)(a1 + 56);
          v13 = objc_msgSend(v11, "copy");
          objc_msgSend(v12, "setObject:forKey:", v13, v8);

        }
      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v3);
  }

}

id sub_1000BF848(id a1, NSNumber *a2)
{
  return -[NSNumber stringValue](a2, "stringValue");
}

void sub_1000BF850(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  unsigned __int8 v8;
  uint64_t v9;
  double v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v3, "count"));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v17 = a1;
  v5 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = *(_QWORD *)v20;
    v10 = kMTPreferredArtworkSize;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(v5);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i), v17));
        if (v12)
        {
          v18 = 0;
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[MTStorePlatformUtil storeMediaDictionaryFromStorePlatformDictionary:artworkSize:restricted:](MTStorePlatformUtil, "storeMediaDictionaryFromStorePlatformDictionary:artworkSize:restricted:", v12, &v18, v10));
          if (v13)
            objc_msgSend(v4, "addObject:", v13);
          v8 |= v18 != 0;

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v7);
  }
  else
  {
    v8 = 0;
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v17 + 48), "storeMediaDictionariesToPlayerItems:initiatedByAnotherUser:", v4, *(unsigned __int8 *)(v17 + 56)));
  v15 = v14;
  v16 = *(_QWORD *)(v17 + 40);
  if (v16)
    (*(void (**)(uint64_t, void *, _QWORD))(v16 + 16))(v16, v14, (objc_msgSend(v14, "count") == 0) & v8);

}

void sub_1000BFC64(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updatePredicate");

}

void sub_1000BFC90(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id WeakRetained;
  _QWORD v12[4];
  id v13;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000BFD6C;
  v12[3] = &unk_1004A7570;
  objc_copyWeak(&v13, v10);
  objc_msgSend(WeakRetained, "enqueueWorkBlock:", v12);

  objc_destroyWeak(&v13);
}

void sub_1000BFD58(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000BFD6C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updatePredicate");

}

void sub_1000C0404(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;

  v4 = a2;
  if (v4)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000C0498;
    block[3] = &unk_1004A6640;
    v3 = *(NSObject **)(a1 + 32);
    v6 = *(id *)(a1 + 40);
    v7 = v4;
    dispatch_sync(v3, block);

  }
}

id sub_1000C0498(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", *(_QWORD *)(a1 + 40));
}

void sub_1000C04A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v4 = objc_autoreleasePoolPush();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000C056C;
  v6[3] = &unk_1004A9AF8;
  v5 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 32);
  +[MTCoreSpotlightUtil prepareSearchableItemForObject:annotator:completion:](MTCoreSpotlightUtil, "prepareSearchableItemForObject:annotator:completion:", v3, v5, v6);

  objc_autoreleasePoolPop(v4);
}

void sub_1000C056C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1000C0598(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1000C0840(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000C0854(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  double v5;
  _QWORD v6[4];
  id v7;

  if (a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTImageStore defaultStore](MTImageStore, "defaultStore"));
    v4 = kMTLibraryDefaultImageKey;
    v5 = *(double *)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000C092C;
    v6[3] = &unk_1004A9B70;
    v7 = *(id *)(a1 + 32);
    objc_msgSend(v3, "asyncImageURLForKey:squareDimension:cacheKeyModifier:completionHandler:", v4, 0, v6, v5);

  }
}

uint64_t sub_1000C092C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000C0EDC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "attributeSet"));
  objc_msgSend(v5, "setThumbnailURL:", v4);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

uint64_t sub_1000C14D0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "attributeSet"));
  objc_msgSend(v5, "setThumbnailURL:", v4);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

uint64_t sub_1000C1908(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "attributeSet"));
  objc_msgSend(v5, "setThumbnailURL:", v4);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000C1C58(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _QWORD block[4];
  id v5;

  if ((objc_msgSend(*(id *)(a1 + 32), "hasFetchedInitialAccount") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "_updateActiveAccount");
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000C1CF0;
    block[3] = &unk_1004A6378;
    v5 = v2;
    dispatch_async(v3, block);

  }
}

uint64_t sub_1000C1CF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000C1E7C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](MTLibrary, "sharedInstance"));
  objc_msgSend(v1, "removeAllHLSDownloadAssets");

}

void sub_1000C1EB0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("AccountDSIDChangedNotification"), 0);

}

void sub_1000C211C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  _QWORD v15[5];
  id v16;

  if (*(_BYTE *)(a1 + 48))
    goto LABEL_2;
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inFlightAuthRequests"));
  if (objc_msgSend(v14, "containsObject:", *(_QWORD *)(a1 + 40)))
  {

  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "declinedAuthRequests"));
    v13 = objc_msgSend(v12, "containsObject:", *(_QWORD *)(a1 + 40));

    if ((v13 & 1) == 0)
    {
LABEL_2:
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inFlightAuthRequests"));
      objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeAccount"));
      v4 = objc_msgSend(objc_alloc((Class)AMSAuthenticateOptions), "initWithOptionsDictionary:", 0);
      objc_msgSend(v4, "setAuthenticationType:", 0);
      objc_msgSend(v4, "setAllowServerDialogs:", 1);
      objc_msgSend(v4, "setDebugReason:", *(_QWORD *)(a1 + 40));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("SIGN_IN_PODCASTS"), &stru_1004C6D40, 0));
      objc_msgSend(v4, "setPromptTitle:", v6);

      v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIViewController mt_rootViewController](UIViewController, "mt_rootViewController"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mt_topViewController"));

      v9 = objc_msgSend(objc_alloc((Class)AMSUIAuthenticateTask), "initWithAccount:presentingViewController:options:", v3, v8, v4);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performAuthentication"));
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1000C2320;
      v15[3] = &unk_1004A9C88;
      v11 = *(void **)(a1 + 40);
      v15[4] = *(_QWORD *)(a1 + 32);
      v16 = v11;
      objc_msgSend(v10, "addFinishBlock:", v15);

    }
  }
}

void sub_1000C2320(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  _QWORD *v10;
  _QWORD v11[5];
  id v12;

  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3032000000;
  v11[3] = sub_10004674C;
  v11[4] = sub_100046A1C;
  v4 = a3;
  v12 = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000C2404;
  v7[3] = &unk_1004A9C60;
  v5 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v10 = v11;
  v8 = v5;
  v9 = v4;
  v6 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

  _Block_object_dispose(v11, 8);
}

void sub_1000C2404(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;

  objc_msgSend(*(id *)(a1 + 32), "_updateActiveAccount");
  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_underlyingError"));

    if (v3)
    {
      v5 = AKAppleIDAuthenticationErrorDomain;
      while (1)
      {
        v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "ams_underlyingError"));
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v8 = *(void **)(v7 + 40);
        *(_QWORD *)(v7 + 40) = v6;

        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                          + 40), "domain"));
        if (!objc_msgSend(v9, "isEqualToString:", v5))
          goto LABEL_7;
        v10 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "code");

        if (v10 == (id)-7003)
          break;
LABEL_8:
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                           + 40), "ams_underlyingError"));

        if (!v11)
          goto LABEL_9;
      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "declinedAuthRequests"));
      objc_msgSend(v9, "addObject:", *(_QWORD *)(a1 + 40));
LABEL_7:

      goto LABEL_8;
    }
LABEL_9:
    v12 = _MTLogCategoryDefault(v4);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 48);
      v16 = 138412290;
      v17 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to authenticate user with error: %@", (uint8_t *)&v16, 0xCu);
    }

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inFlightAuthRequests"));
  objc_msgSend(v15, "removeObject:", *(_QWORD *)(a1 + 40));

}

void sub_1000C2624(id a1, BOOL a2, NSError *a3)
{
  NSError *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v3 = a3;
  if (v3)
  {
    v4 = _MTLogCategoryDefault();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to sign out user with error: %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_1000C2BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C2BC4(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  unsigned __int8 v3;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_msgSend(WeakRetained, "isCancelled");
    v2 = v4;
    if ((v3 & 1) == 0)
    {
      objc_msgSend(v4, "setIsSleepingOnStartDelay:", 0);
      objc_msgSend(v4, "main");
      v2 = v4;
    }
  }

}

void sub_1000C2DC0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id obj;

  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deferredEpisodeUuids"));
  objc_msgSend(WeakRetained, "_setSuggestedEpisodeUuidsImmediately:", v3);

  objc_msgSend(*(id *)(a1 + 32), "setPendingDeferredUpdate:", 0);
  objc_sync_exit(obj);

}

void sub_1000C2E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000C2F6C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  NSMutableDictionary *v13;
  void *v14;
  id obj;
  NSMutableDictionary *v16;
  uint64_t v17;
  dispatch_semaphore_t v18;
  _QWORD v19[4];
  NSMutableDictionary *v20;
  _QWORD v21[5];
  NSMutableDictionary *v22;
  NSObject *v23;
  uint64_t *v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD v30[3];
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];

  kdebug_trace(723517556, 0, 0, 0, 0);
  v2 = *(id *)(a1 + 32);
  v17 = a1;
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") >= 0xB)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subarrayWithRange:", 0, 10));

    v2 = (id)v3;
  }
  v18 = dispatch_semaphore_create(0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mainOrPrivateContext"));

  v16 = objc_opt_new(NSMutableDictionary);
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  obj = v2;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v39;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v39 != v7)
          objc_enumerationMutation(obj);
        v9 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v8);
        v32 = 0;
        v33 = &v32;
        v34 = 0x3032000000;
        v35 = sub_10004675C;
        v36 = sub_100046A24;
        v37 = 0;
        v30[0] = 0;
        v30[1] = v30;
        v30[2] = 0x2020000000;
        v31 = 0;
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_1000C3340;
        v25[3] = &unk_1004A66B8;
        v26 = v5;
        v27 = v9;
        v28 = &v32;
        v29 = v30;
        objc_msgSend(v26, "performBlockAndWait:", v25);
        if (objc_msgSend((id)v33[5], "length"))
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[MTIntentDonationUtil sharedInstance](MTIntentDonationUtil, "sharedInstance"));
          v11 = v33[5];
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_1000C33AC;
          v21[3] = &unk_1004A9CE8;
          v21[4] = *(_QWORD *)(v17 + 40);
          v22 = v16;
          v24 = &v32;
          v12 = v18;
          v23 = v12;
          objc_msgSend(v10, "prepareIntentForEpisodeUuid:stationUuid:includeImage:includeStorePlatformData:completion:", v11, 0, 1, 0, v21);

          dispatch_semaphore_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
        }

        _Block_object_dispose(v30, 8);
        _Block_object_dispose(&v32, 8);

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
    }
    while (v6);
  }

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1000C3434;
  v19[3] = &unk_1004A8D28;
  v20 = v16;
  v13 = v16;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obj, "mt_compactMap:", v19));
  objc_msgSend(*(id *)(v17 + 40), "setEpisodeIntents:", v14);

  kdebug_trace(723517560, 0, 0, 0, 0);
}

void sub_1000C3314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1000C3340(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v5, "isPlayheadResumable");
}

void sub_1000C33AC(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  if (v4)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  objc_sync_exit(v3);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000C3420(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000C3434(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2);
}

void sub_1000C3440(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  if (v4)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  objc_sync_exit(v3);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000C34B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000C34C8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2);
}

void sub_1000C35B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C36A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C3978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000C39B8(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = _MTLogCategorySiri();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to set relevant shortcuts with error: %@.", (uint8_t *)&v5, 0xCu);
    }

  }
}

uint64_t sub_1000C490C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 40));
  return result;
}

uint64_t sub_1000C4928(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 40));
  return result;
}

uint64_t sub_1000C4AA8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t sub_1000C5258(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000C5268(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1000C5EB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateReachability");
}

id sub_1000C5F60(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateReachability");
}

void sub_1000C5FD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C660C(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  objc_msgSend(v2, "openSensitiveURL:withOptions:", *(_QWORD *)(a1 + 32), 0);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000C6664(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000C676C(id a1)
{
  void *v1;

  v1 = (void *)qword_100567458;
  qword_100567458 = (uint64_t)&off_1004D74E8;

}

void sub_1000C684C(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[9];
  _QWORD v20[9];

  v19[0] = &off_1004D5D88;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("StateVideo")));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "imageWithRenderingMode:", 2));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "_imageThatSuppressesAccessibilityHairlineThickening"));
  v20[0] = v16;
  v19[1] = &off_1004D5D70;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("StateExplicit")));
  v20[1] = v15;
  v19[2] = &off_1004D5E18;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("StateCloud")));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "imageWithRenderingMode:", 2));
  v20[2] = v13;
  v19[3] = &off_1004D5E30;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("StateDocument")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "imageWithRenderingMode:", 2));
  v20[3] = v2;
  v19[4] = &off_1004D5E48;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("StateError")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "imageWithRenderingMode:", 2));
  v20[4] = v4;
  v19[5] = &off_1004D5E60;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("StateAirplane")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "imageFlippedForRightToLeftLayoutDirection"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "imageWithRenderingMode:", 2));
  v20[5] = v7;
  v19[6] = &off_1004D5DB8;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage halfPlayedIcon](UIImage, "halfPlayedIcon"));
  v20[6] = v8;
  v19[7] = &off_1004D5DD0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage unplayedIcon](UIImage, "unplayedIcon"));
  v20[7] = v9;
  v19[8] = &off_1004D5DA0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage nowPlayingIcon](UIImage, "nowPlayingIcon"));
  v20[8] = v10;
  v11 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 9));
  v12 = (void *)qword_100567468;
  qword_100567468 = v11;

}

void sub_1000C757C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void *v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisodeStateView imageForIconKey:theme:](MTEpisodeStateView, "imageForIconKey:theme:", a2, v4));
  objc_msgSend(v6, "setImage:", v5);

  objc_msgSend(v6, "sizeToFit");
}

void sub_1000C823C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C825C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateAllPodcastsTo:", a3);

}

void sub_1000C83B8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  NSMutableSet *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v2 = objc_autoreleasePoolPush();
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(void **)(a1 + 32);
    v4 = kMTPodcastEntityName;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts](MTPodcast, "predicateForNotHiddenNotImplicitlyFollowedPodcasts"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsInEntity:predicate:sortDescriptors:", v4, v5, 0));

    v7 = *(void **)(a1 + 40);
    v8 = objc_opt_new(NSMutableSet);
    objc_msgSend(v7, "setPodcastUuids:", v8);

    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v9 = v6;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v17;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v17 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(a1 + 40);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v13), "uuid", (_QWORD)v16));
          objc_msgSend(v14, "togglePodcastUuid:", v15);

          v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v11);
    }

  }
  objc_autoreleasePoolPop(v2);
}

void sub_1000CA270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1000CA29C(uint64_t a1)
{
  __int128 v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  int v19;
  id v20;
  void *v21;
  void *v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  __int128 v34;
  id v35;
  uint8_t buf[4];
  id v37;
  __int16 v38;
  id v39;

  if (+[MTPlayerController hasDefaultInstance](MTPlayerController, "hasDefaultInstance"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "upNextController"));
    objc_msgSend(v4, "beginUpdates");

  }
  v5 = 0;
  v6 = kMTEpisodeEntityName;
  *(_QWORD *)&v2 = 134218242;
  v34 = v2;
  do
  {
    v7 = objc_autoreleasePoolPush();
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", v6));
    objc_msgSend(v8, "setPredicate:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v8, "setReturnsObjectsAsFaults:", 0);
    objc_msgSend(v8, "setFetchLimit:", 200);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "config"));
    v10 = objc_msgSend(v9, "supportsPlayback");

    if ((v10 & 1) == 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode sortDescriptorsForPubDateAscending:](MTEpisode, "sortDescriptorsForPubDateAscending:", 1));
      objc_msgSend(v8, "setSortDescriptors:", v11);

      objc_msgSend(v8, "setFetchOffset:", 200 * v5);
    }
    v12 = *(void **)(a1 + 48);
    v35 = 0;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "executeFetchRequest:error:", v8, &v35, v34));
    v14 = v35;
    v15 = _MTLogCategoryDatabase(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = v16;
    if (v14)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v18 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v37 = v18;
        v38 = 2112;
        v39 = v14;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Error deleting episodes for predicate %@ - %@", buf, 0x16u);
      }

      v19 = 3;
    }
    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v20 = objc_msgSend(v13, "count");
        v21 = *(void **)(a1 + 32);
        *(_DWORD *)buf = v34;
        v37 = v20;
        v38 = 2112;
        v39 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Deleting %lu episodes for predicate %@", buf, 0x16u);
      }

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "config"));
      v23 = objc_msgSend(v22, "supportsLocalMedia");

      if (v23)
        objc_msgSend(*(id *)(a1 + 40), "_removeDownloadAssetsForEpisodes:shouldKeep:forced:", v13, 0, *(unsigned __int8 *)(a1 + 64));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "config"));
      v25 = objc_msgSend(v24, "supportsPlayback");

      if (v25)
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_updateUpNextDeleting:inContext:forced:podcastUuids:", v13, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)));
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[MTIntentDonationUtil sharedInstance](MTIntentDonationUtil, "sharedInstance"));
        objc_msgSend(v27, "removeDonationsForEpisodeUuids:", v26);

      }
      objc_msgSend(*(id *)(a1 + 48), "saveInCurrentBlock");
      ++v5;
      if ((unint64_t)objc_msgSend(v13, "count") >= 0xC8)
        v19 = 0;
      else
        v19 = 3;
    }

    objc_autoreleasePoolPop(v7);
  }
  while (!v19);
  v29 = _MTLogCategoryDatabase(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v37 = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Finished deleting episodes for predicate %@", buf, 0xCu);
  }

  if (+[MTPlayerController hasDefaultInstance](MTPlayerController, "hasDefaultInstance"))
  {
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "upNextController"));
    objc_msgSend(v33, "endUpdates");

  }
}

void sub_1000CAAD8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(void **)(a1 + 32);
  v3 = kMTPodcastEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate truePredicate](NSPredicate, "truePredicate"));
  v5 = kPodcastUuid;
  v19 = kPodcastUuid;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectDictionariesInEntity:predicate:sortDescriptors:propertiesToFetch:includeObjectId:", v3, v4, 0, v6, 0));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "valueForKey:", v5));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("NOT (%K IN %@)"), kEpisodePodcastUuid, v8));
  v10 = *(void **)(a1 + 32);
  v11 = kMTEpisodeEntityName;
  v12 = kEpisodeUuid;
  v18 = kEpisodeUuid;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectDictionariesInEntity:predicate:sortDescriptors:propertiesToFetch:includeObjectId:", v11, v9, 0, v13, 0));

  if (objc_msgSend(v14, "count"))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "valueForKey:", v12));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v15));

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](IMLogger, "sharedLogger"));
    objc_msgSend(v17, "logFile:lineNumber:format:", "/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/MTLibrary+MTEpisodeDeletion.m", 194, CFSTR("Deleting %ld orphaned episodes..."), objc_msgSend(v16, "count"));

    objc_msgSend(*(id *)(a1 + 40), "_deleteEpisodeUuids:forced:", v16, 1);
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](IMLogger, "sharedLogger"));
    objc_msgSend(v16, "logFile:lineNumber:format:", "/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/MTLibrary+MTEpisodeDeletion.m", 199, CFSTR("No orphaned episodes"));
  }

}

void sub_1000CAECC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  MTMPCAssistantGenericPlaybackQueue *v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint64_t v16;
  char v17;
  uint8_t buf[4];
  id v19;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "finishWithStatus:", 0);
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t, _QWORD))(v7 + 16))(v7, 0);
    v8 = _MTLogCategoryMediaRemote(v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to resolve active player path with error: %@", buf, 0xCu);
    }
  }
  else
  {
    v9 = objc_alloc_init((Class)MPCAssistantCommand);
    v10 = -[MTMPCAssistantGenericPlaybackQueue initWithPlaybackQueueRef:]([MTMPCAssistantGenericPlaybackQueue alloc], "initWithPlaybackQueueRef:", *(_QWORD *)(a1 + 48));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000CB068;
    v13[3] = &unk_1004A9ED0;
    v15 = *(id *)(a1 + 40);
    v11 = *(id *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 56);
    v14 = v11;
    v16 = v12;
    v17 = *(_BYTE *)(a1 + 64);
    -[NSObject sendPlaybackQueue:toDestination:withOptions:completion:](v9, "sendPlaybackQueue:toDestination:withOptions:completion:", v10, v5, 0, v13);

  }
}

void sub_1000CB068(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  int v22;
  id v23;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v6, "containsObject:", &off_1004D5EA8))
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
    {
      v8 = *(void (**)(void))(v7 + 16);
LABEL_4:
      v8();
    }
  }
  else
  {
    if (!v5)
    {
      if (objc_msgSend(v6, "count"))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndex:", 0));
        v13 = objc_msgSend(v12, "intValue");

        v14 = (unint64_t)objc_msgSend(*(id *)(a1 + 48), "requestStatusForMediaRemoteStatus:", v13);
        v15 = v14;
        if (v14 <= 5 && ((1 << v14) & 0x39) != 0)
        {
          v16 = *(void **)(a1 + 48);
          v17 = *(_QWORD *)(a1 + 32);
          if (*(_BYTE *)(a1 + 56))
            objc_msgSend(v16, "promptBeforePerformingRequestAsBufferedAirPlay:queueStatus:", v17, 1);
          else
            objc_msgSend(v16, "performRequestAsBufferedAirPlay:", v17);
          goto LABEL_11;
        }
        v20 = *(void **)(a1 + 32);
      }
      else
      {
        v18 = _MTLogCategoryMediaRemote(0);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v22) = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "No status codes returned after setting remote playback queue", (uint8_t *)&v22, 2u);
        }

        v20 = *(void **)(a1 + 32);
        v15 = 0;
      }
      objc_msgSend(v20, "finishWithStatus:", v15);
      v21 = *(_QWORD *)(a1 + 40);
      if (!v21)
        goto LABEL_11;
      v8 = *(void (**)(void))(v21 + 16);
      goto LABEL_4;
    }
    objc_msgSend(*(id *)(a1 + 32), "finishWithStatus:", 0);
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      v9 = (*(uint64_t (**)(uint64_t, _QWORD))(v9 + 16))(v9, 0);
    v10 = _MTLogCategoryMediaRemote(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v22 = 138412290;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to send item into playback queue with error: %@", (uint8_t *)&v22, 0xCu);
    }

  }
LABEL_11:

}

void sub_1000CB3D0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  _DWORD v11[2];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "firstObject"));
  v5 = objc_msgSend(v4, "unsignedIntValue");
  v6 = objc_msgSend(*(id *)(a1 + 40), "requestStatusForMediaRemoteStatus:", v5);
  v7 = v6;
  if ((_DWORD)v5 && (_DWORD)v5 != 3)
  {
    v8 = _MTLogCategoryMediaRemote(v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11[0] = 67109120;
      v11[1] = (_DWORD)v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "MediaRemote command failed to fallback to Airplay with status %u", (uint8_t *)v11, 8u);
    }

  }
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    (*(void (**)(uint64_t, id, uint64_t))(v10 + 16))(v10, v7, 6);

}

id sub_1000CB624(uint64_t a1, int a2)
{
  if (a2)
    return objc_msgSend(*(id *)(a1 + 40), "performRequestAsBufferedAirPlay:", *(_QWORD *)(a1 + 32));
  else
    return objc_msgSend(*(id *)(a1 + 32), "finishWithStatus:", 2);
}

uint64_t sub_1000CB74C(uint64_t a1, uint64_t a2)
{
  void *v3;
  unsigned int v4;
  uint64_t result;

  if (a2 == 1)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
      v4 = objc_msgSend(v3, "playWithReason:", *(_QWORD *)(a1 + 40));

      if (v4)
        a2 = 1;
      else
        a2 = 5;
    }
    else
    {
      a2 = 1;
    }
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void sub_1000CB7D4(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(v3, "finishWithStatus:", 0);
  }
  else
  {
    objc_msgSend(v3, "setStartPlayback:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setPlaybackDestination:", 0);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
    objc_msgSend(v4, "setPlaybackQueue:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1000CB998(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = a2;
  if (!v3)
  {
    v8 = 0;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MPAVRoutingController systemRoute](MPAVRoutingController, "systemRoute"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
    objc_msgSend(v6, "setPlayerRoute:", v5);

    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      (*(void (**)(uint64_t, _QWORD))(v7 + 16))(v7, 0);

    goto LABEL_7;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v8 = v3;
    (*(void (**)(void))(v4 + 16))();
LABEL_7:
    v3 = v8;
  }

}

void sub_1000CBD60(uint64_t a1, void *a2, int a3, int a4)
{
  id v7;
  id v8;
  MTItemListManifest *v9;
  MTItemListManifest *v10;
  uint64_t v11;
  NSObject *v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  MTPlaybackContext *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void *v27;
  id v28;
  uint64_t v29;
  uint8_t buf[4];
  const __CFString *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;

  v7 = a2;
  v8 = objc_msgSend(v7, "count");
  if (!v8 || a3)
  {
    v11 = _MTLogCategoryMediaRemote(v8);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = CFSTR("Found 0 player items");
      v14 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      if (a3)
        v13 = CFSTR("Target player item not found");
      v31 = v13;
      v32 = 1024;
      v33 = a4;
      v34 = 2112;
      v35 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%@ with restricted (%x) request for identifiers %@", buf, 0x1Cu);
    }

    v15 = *(_QWORD *)(a1 + 56);
    if (v15)
    {
      v16 = 3;
      if (!a3)
        v16 = 0;
      if (a4)
        v17 = 4;
      else
        v17 = v16;
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v15 + 16))(v15, v17, *(_QWORD *)(a1 + 64));
    }
  }
  else
  {
    v9 = -[MTItemListManifest initWithItems:]([MTItemListManifest alloc], "initWithItems:", v7);
    v10 = v9;
    if (*(_QWORD *)(a1 + 40))
    {
      -[MTItemListManifest setIdentifier:](v9, "setIdentifier:");
    }
    else
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "UUIDString"));
      -[MTItemListManifest setIdentifier:](v10, "setIdentifier:", v19);

    }
    -[MTPlayerManifest setNetworkUPPEnabled:](v10, "setNetworkUPPEnabled:", +[PFClientUtil isRunningOnHomepod](PFClientUtil, "isRunningOnHomepod"));
    v20 = objc_alloc_init(MTPlaybackContext);
    -[MTPlaybackContext setSource:](v20, "setSource:", 12);
    -[MTPlaybackContext setInteractive:](v20, "setInteractive:", 0);
    -[MTPlaybackContext setUpNextQueueIntent:](v20, "setUpNextQueueIntent:", *(_QWORD *)(a1 + 72));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetPlaybackQueueRequest requestWithContext:](MTSetPlaybackQueueRequest, "requestWithContext:", v20));
    objc_msgSend(v21, "setStartPlayback:", *(unsigned __int8 *)(a1 + 80));
    objc_msgSend(v21, "setPlaybackDestination:", 0);
    objc_msgSend(v21, "setManifest:", v10);
    v24 = _NSConcreteStackBlock;
    v25 = 3221225472;
    v26 = sub_1000CBFDC;
    v27 = &unk_1004A9F98;
    v22 = *(id *)(a1 + 56);
    v23 = *(_QWORD *)(a1 + 64);
    v28 = v22;
    v29 = v23;
    objc_msgSend(v21, "setCompletion:", &v24);
    objc_msgSend(*(id *)(a1 + 48), "setPlaybackQueue:", v21, v24, v25, v26, v27);

  }
}

uint64_t sub_1000CBFDC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, a2, *(_QWORD *)(a1 + 40));
  return result;
}

void sub_1000CC218(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  dispatch_queue_global_t global_queue;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  id v13;

  v5 = a3;
  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(unsigned int *)(a1 + 40);
    global_queue = dispatch_get_global_queue(0, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    MRMediaRemoteInsertSystemAppPlaybackQueueForPlayer(v6, v7, 0, a2, v9, &stru_1004AA000);

  }
  else
  {
    v10 = _MTLogCategoryMediaRemote();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to resolve active player path with error: %@", (uint8_t *)&v12, 0xCu);
    }

  }
}

void sub_1000CC320(id a1, unsigned int a2)
{
  uint64_t v3;
  NSObject *v4;
  _DWORD v5[2];

  if (a2)
  {
    v3 = _MTLogCategoryMediaRemote(a1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to insert item into playback queue with error: %d", (uint8_t *)v5, 8u);
    }

  }
}

void sub_1000CC4B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;

  v5 = a3;
  v6 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v6)
    {
      v9 = v5;
      (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, 0);
LABEL_6:
      v5 = v9;
    }
  }
  else if (v6)
  {
    v9 = 0;
    v7 = objc_alloc((Class)MPCAssistantMutableRemoteControlDestination);
    v8 = objc_msgSend(v7, "initWithAppBundleID:playerID:origin:", kMTApplicationBundleIdentifier, kPodcastsPlayerID, MRNowPlayingPlayerPathGetOrigin(a2));
    objc_msgSend(v8, "setSingleGroup:", 1);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

    goto LABEL_6;
  }

}

void sub_1000CC760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000CC790(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id obj;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v4 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v4 + 40);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeFetchRequest:error:", v3, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_1000CCCB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CCD0C(id a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v1 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en"));
  v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(&off_1004D7500, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = objc_msgSend(&off_1004D7500, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(&off_1004D7500);
        v7 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v6);
        v8 = objc_alloc_init((Class)NSDateFormatter);
        objc_msgSend(v8, "setDateFormat:", v7);
        objc_msgSend(v8, "setLocale:", v1);
        objc_msgSend(v2, "addObject:", v8);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(&off_1004D7500, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }
  v9 = objc_msgSend(v2, "copy");
  v10 = (void *)qword_100567478;
  qword_100567478 = (uint64_t)v9;

}

void sub_1000CD57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CD5B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForFeedUrl:", v3));

  v4 = v5;
  if (v5)
  {
    objc_msgSend(v5, "setAuthenticatedDark:", 1);
    objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
    v4 = v5;
  }

}

void sub_1000CD62C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForFeedUrl:", v3));

  if (v4)
  {
    v6 = _MTLogCategoryFeedUpdate(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
      v9 = *(_QWORD *)(a1 + 48);
      v10 = 138412546;
      v11 = v8;
      v12 = 2048;
      v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to fetch episodes for podcast using external feed url (%@) with status %ld. Incrementing consecutiveFeedFetchErrors count", (uint8_t *)&v10, 0x16u);

    }
    objc_msgSend(v4, "setConsecutiveFeedFetchErrors:", (char *)objc_msgSend(v4, "consecutiveFeedFetchErrors") + 1);
    objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  }

}

void sub_1000CD744(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForFeedUrl:", v3));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uuid"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1000CD7BC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[3];
  _QWORD v16[3];

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForFeedUrl:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsAction error](MTFeedUpdateMetricsAction, "error"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey statusCode](MTFeedUpdateMetricsDataKey, "statusCode"));
  v15[0] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
  v16[0] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey error](MTFeedUpdateMetricsDataKey, "error"));
  v15[1] = v8;
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "metricsAdditionalData"));
  v10 = (void *)v9;
  v11 = &stru_1004C6D40;
  if (v9)
    v11 = (const __CFString *)v9;
  v16[1] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey pcrFallback](MTFeedUpdateMetricsDataKey, "pcrFallback"));
  v15[2] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64)));
  v16[2] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 3));
  +[IMMetrics recordEvent:dataSource:data:](IMMetrics, "recordEvent:dataSource:data:", v5, v4, v14);

}

void sub_1000CD960(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  __int128 v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;
  _BYTE v27[128];

  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v4 = v3;
    v5 = -[NSObject countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    if (v5)
    {
      v7 = v5;
      v8 = *(_QWORD *)v22;
      *(_QWORD *)&v6 = 138412290;
      v20 = v6;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v8)
            objc_enumerationMutation(v4);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i), "originalRequest", v20, (_QWORD)v21));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URL"));

          if (v11)
          {
            v12 = _MTLogCategoryFeedUpdate();
            v13 = objc_claimAutoreleasedReturnValue(v12);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v20;
              v26 = v11;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Found existing task for feed-update for %@.", buf, 0xCu);
            }

            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
            objc_msgSend(v14, "didRestoreFeedUrlTask:", v11);

          }
        }
        v7 = -[NSObject countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
      }
      while (v7);
    }
  }
  else
  {
    v15 = _MTLogCategoryFeedUpdate();
    v4 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No existing tasks found on background-session.", buf, 2u);
    }
  }

  v16 = _MTLogCategoryFeedUpdate();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
    *(_DWORD *)buf = 138412290;
    v26 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Rebuild pending network tasks - RESUMING workQueue: %@.", buf, 0xCu);

  }
  v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
  dispatch_resume(v19);

}

void sub_1000CEA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CEA70(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;

  v5 = a3;
  v6 = a2;
  v7 = _MTLogCategoryMediaRemote(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
    v13 = 138543618;
    v14 = v9;
    v15 = 2112;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[InfoCenter] Finished fetching artwork for content item %{public}@ - %@", (uint8_t *)&v13, 0x16u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "artworkRequests"));
  objc_msgSend(v11, "removeObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

  return kdebug_trace(723518112, 0, 0, 0, 0);
}

uint64_t sub_1000CEC8C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;

  v3 = a2;
  v4 = _MTLogCategoryMediaRemote(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
    v9 = 138543618;
    v10 = v6;
    v11 = 2112;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[InfoCenter] Did fetch artwork for content item %{public}@ - %@", (uint8_t *)&v9, 0x16u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  return kdebug_trace(723518112, 0, 0, 0, 0);
}

void sub_1000CF0CC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  const __CFString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v4 = a2;
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
  v6 = (void *)v5;
  if (v5)
    v7 = (const __CFString *)v5;
  else
    v7 = &stru_1004C6D40;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", v7));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByAppendingString:", CFSTR(":")));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v20 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "instanceIdentifier"));

  v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "UUIDString"));
  v14 = (void *)v13;
  if (v13)
    v15 = (const __CFString *)v13;
  else
    v15 = &stru_1004C6D40;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "stringByAppendingString:", v15));
  v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "stringByAppendingString:", CFSTR(",")));
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v19 = *(void **)(v18 + 40);
  *(_QWORD *)(v18 + 40) = v17;

}

void sub_1000D0E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D0E44(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v5 = a2;
  v6 = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000D0F18;
  v8[3] = &unk_1004A7E80;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  v7 = v5;
  v9 = v7;
  +[NSThread mainThread:](NSThread, "mainThread:", v8);

  objc_destroyWeak(&v10);
}

void sub_1000D0F04(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000D0F18(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  unsigned int v4;
  void *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = WeakRetained;
    v4 = objc_msgSend(WeakRetained, "isPlaceholder");
    v3 = v5;
    if (v4)
    {
      objc_msgSend(v5, "setImage:", *(_QWORD *)(a1 + 32));
      v3 = v5;
    }
  }

}

void sub_1000D1090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D10AC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000D11A4;
  v12[3] = &unk_1004A81A8;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v10 = v8;
  v13 = v10;
  v11 = v7;
  v14 = v11;
  +[NSThread mainThread:](NSThread, "mainThread:", v12);

  objc_destroyWeak(&v15);
}

void sub_1000D1190(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000D11A4(uint64_t a1)
{
  _QWORD *WeakRetained;
  unsigned int v3;
  _QWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v4 = WeakRetained;
      v3 = objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", WeakRetained[3]);
      WeakRetained = v4;
      if (v3)
      {
        objc_msgSend(v4, "setImage:", *(_QWORD *)(a1 + 32));
        WeakRetained = v4;
      }
    }
  }

}

id sub_1000D2824(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_1000D3FD4(uint64_t a1)
{
  objc_class *v1;
  id v2;
  void *v3;

  v1 = *(objc_class **)(a1 + 32);
  if ((-[objc_class hasPerformedLegacyBadgeMigration](v1, "hasPerformedLegacyBadgeMigration") & 1) == 0)
  {
    v2 = objc_msgSend([v1 alloc], "_initShared");
    v3 = (void *)qword_1005674A8;
    qword_1005674A8 = (uint64_t)v2;

  }
}

void sub_1000D4188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D41AC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "performMigrationIfNecessary");

}

void sub_1000D4384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D439C(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "hasPerformedLegacyBadgeMigration");
  if ((result & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "state");
    v3 = result < 1;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "setState:", 1);
  return result;
}

void sub_1000D4484(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint8_t v7[8];
  _QWORD v8[5];

  v3 = objc_msgSend(a2, "count");
  if (v3)
  {
    v4 = _MTLogCategoryNotifications(v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Legacy badge clearing deferred until no remaining notifications", v7, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "setState:", 0);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000D455C;
    v8[3] = &unk_1004AA170;
    v8[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v6, "getBadgeNumberWithCompletionHandler:", v8);

  }
}

void sub_1000D455C(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint8_t v8[16];

  objc_msgSend(*(id *)(a1 + 32), "setState:", 2);
  objc_msgSend(*(id *)(a1 + 32), "stopObservingApplicationState");
  v4 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "commitHasPerformedLegacyBadgeMigration");
  if (a2)
  {
    v5 = _MTLogCategoryNotifications(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Legacy badge clearing complete", v8, 2u);
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
    objc_msgSend(v7, "setBadgeNumber:withCompletionHandler:", 0, 0);

  }
}

void sub_1000D4668(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appActivateObserver"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appActivateObserver"));
    objc_msgSend(v3, "removeObserver:", v4);

    _objc_msgSend(*(id *)(a1 + 32), "setAppActivateObserver:", 0);
  }
}

id sub_1000D4ADC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeForUuid:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6), (_QWORD)v9));
        objc_msgSend(v7, "setIsNew:", 0);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(a1 + 40), "saveInCurrentBlock");
}

id sub_1000D53A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

void sub_1000D53B0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  int8x16_t v6;
  _QWORD block[4];
  int8x16_t v8;
  id v9;
  uint8_t buf[4];
  uint64_t v11;

  v2 = _MTLogCategoryCloudSync(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting MTSyncController and the bag has loaded with GetAll=%@. ", buf, 0xCu);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D54DC;
  block[3] = &unk_1004A7398;
  v6 = *(int8x16_t *)(a1 + 32);
  v5 = (id)v6.i64[0];
  v8 = vextq_s8(v6, v6, 8uLL);
  v9 = *(id *)(a1 + 48);
  if (qword_1005674C0 != -1)
    dispatch_once(&qword_1005674C0, block);

}

void sub_1000D54DC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  MZKeyValueStoreController *v10;
  MZKeyValueStoreController *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  v2 = _MTLogCategoryCloudSync(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting up MTSyncController. Will kick off initial syncs.", (uint8_t *)&v15, 2u);
  }

  v4 = _MTLogCategoryCloudSync(objc_msgSend(*(id *)(a1 + 32), "_setupUPP"));
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v15 = 138412546;
    v16 = v6;
    v17 = 2112;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "MTSyncController GET URL: %@, PUT URL: %@", (uint8_t *)&v15, 0x16u);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudSyncController"));
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudSyncController"));
    objc_msgSend(v9, "setDelegate:", 0);

  }
  v10 = [MZKeyValueStoreController alloc];
  v11 = -[MZKeyValueStoreController initWithDomain:baseURLForGETAll:baseURLForPUTAll:](v10, "initWithDomain:baseURLForGETAll:baseURLForPUTAll:", kMTPodcastsDomain, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "setCloudSyncController:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudSyncController"));
  objc_msgSend(v12, "setDelegate:", *(_QWORD *)(a1 + 32));

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudSyncController"));
  objc_msgSend(v13, "reset");

  objc_msgSend(*(id *)(a1 + 32), "setIsRunning:", 1);
  objc_msgSend(*(id *)(a1 + 32), "syncEverything");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v14, "postNotificationName:object:", CFSTR("MTSyncControllerDidStartRunningNotification"), 0);

}

void sub_1000D5C1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D5C40(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("MTSyncControllerOperationCompleted"), 0);

}

void sub_1000D5E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_1000D5EC8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "endBackgroundTask");

}

void sub_1000D62AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D6378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000D65E0(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = UIBackgroundTaskInvalid;
}

void sub_1000D663C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _BYTE *WeakRetained;
  id v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  MTTimedOperation *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = objc_msgSend(v5, "BOOLValue");
  v9 = (int)v8;
  v10 = _MTLogCategoryCloudSync(v8);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v9 && WeakRetained)
  {
    if (v12)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "performUniversalPlaybackPositionSync", buf, 2u);
    }

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[MTBaseProcessor sharedInstance](MTAssetRemovalProcessor, "sharedInstance"));
    objc_msgSend(v13, "disable");

    v14 = objc_opt_new(MTTimedOperation);
    -[MTTimedOperation setOperationType:](v14, "setOperationType:", 5);
    -[MTTimedOperation setStartDelay:](v14, "setStartDelay:", 0.0);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000D6840;
    v16[3] = &unk_1004A7570;
    objc_copyWeak(&v17, (id *)(a1 + 40));
    -[MTTimedOperation setMainBlock:](v14, "setMainBlock:", v16);
    objc_msgSend(WeakRetained, "addOperation:", v14);
    WeakRetained[33] = 0;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    objc_msgSend(v15, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

    objc_destroyWeak(&v17);
  }
  else
  {
    if (v12)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "UPPEnabled bag value is false. Will not sync UPP.", buf, 2u);
    }

    v14 = (MTTimedOperation *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    -[MTTimedOperation endBackgroundTask:](v14, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }

}

void sub_1000D6828(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000D6840(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  uint8_t v6[16];

  v2 = _MTLogCategoryCloudSync(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "UPP Sync Started", v6, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "UPPStore"));
  objc_msgSend(v5, "synchronizeImmediatelyWithCompletionBlock:", 0);

}

AMSPromise *__cdecl sub_1000D698C(id a1, NSString *a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  if (-[NSString BOOLValue](a2, "BOOLValue"))
    v2 = 0;
  else
    v2 = +[MTApplication localLibraryUpdatesDisabled](MTApplication, "localLibraryUpdatesDisabled") ^ 1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](AMSPromise, "promiseWithResult:", v3));

  return (AMSPromise *)v4;
}

id sub_1000D6A7C(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 32), "syncCriticalBookkeeperKeysShouldSyncCleanKeys:", 0);
  result = objc_msgSend(*(id *)(a1 + 32), "uppSyncDirtyFlag");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "performUniversalPlaybackPositionSync");
  return result;
}

void sub_1000D6C2C(uint64_t a1)
{
  MTTermsVersionSyncProcessor *v2;
  MTTermsVersionSyncStorage *v3;
  MTTermsVersionSyncProcessor *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v2 = [MTTermsVersionSyncProcessor alloc];
  v3 = objc_opt_new(MTTermsVersionSyncStorage);
  v4 = -[MTTermsVersionSyncProcessor initWithStorage:](v2, "initWithStorage:", v3);

  if (+[MTPrivacyUtil cloudSyncIsDirty](MTPrivacyUtil, "cloudSyncIsDirty"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudSyncController"));
    v10 = kMTTermsVersionKey;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
    v7 = objc_msgSend(v5, "scheduleSetTransactionWithKeys:processor:", v6, v4);
LABEL_5:

    goto LABEL_6;
  }
  if (!+[MTPrivacyUtil allowReporting](MTPrivacyUtil, "allowReporting"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudSyncController"));
    v9 = kMTTermsVersionKey;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
    v8 = objc_msgSend(v5, "scheduleGetTransactionWithKeys:processor:", v6, v4);
    goto LABEL_5;
  }
LABEL_6:

}

void sub_1000D6EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D6ED8(uint64_t a1)
{
  _TtC8Podcasts29NonFollowedShowsSyncProcessor *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  id WeakRetained;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint8_t v14[8];
  uint64_t v15;
  uint64_t v16;

  v2 = objc_alloc_init(_TtC8Podcasts29NonFollowedShowsSyncProcessor);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](_TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
  v4 = objc_msgSend(v3, "isNonFollowedShowsSyncDirty");

  v6 = _MTLogCategoryCloudSync(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v8)
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[NonFollowedShows] SET Implicit Sync Started", v14, 2u);
    }

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudSyncController"));
    v16 = kMTNonFollowedShowsSyncKey;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v16, 1));
    v12 = objc_msgSend(v10, "scheduleSetTransactionWithKeys:processor:", v11, v2);
  }
  else
  {
    if (v8)
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[NonFollowedShows] GET Implicit Sync Started", v14, 2u);
    }

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudSyncController"));
    v15 = kMTNonFollowedShowsSyncKey;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
    v13 = objc_msgSend(v10, "scheduleGetTransactionWithKeys:processor:", v11, v2);
  }

}

void sub_1000D7534(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  MTEpisodeSyncProcessor *v5;
  void *v6;
  MTEpisodeSyncProcessor *v7;
  void *v8;
  void *v9;
  id v10;
  uint8_t v11[16];

  v2 = _MTLogCategoryCloudSync(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Episode SET Started", v11, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "expandFeedUrls:", *(_QWORD *)(a1 + 40)));
  v5 = [MTEpisodeSyncProcessor alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeSyncStorage"));
  v7 = -[MTEpisodeSyncProcessor initWithStorageProvider:](v5, "initWithStorageProvider:", v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudSyncController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allObjects"));
  v10 = objc_msgSend(v8, "scheduleSetTransactionWithKeys:processor:", v9, v7);

}

void sub_1000D7768(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  MTEpisodeSyncProcessor *v5;
  void *v6;
  MTEpisodeSyncProcessor *v7;
  void *v8;
  void *v9;
  id v10;
  uint8_t v11[16];

  v2 = _MTLogCategoryCloudSync(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Episode GET Started", v11, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "expandFeedUrls:", *(_QWORD *)(a1 + 40)));
  v5 = [MTEpisodeSyncProcessor alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeSyncStorage"));
  v7 = -[MTEpisodeSyncProcessor initWithStorageProvider:](v5, "initWithStorageProvider:", v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudSyncController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allObjects"));
  v10 = objc_msgSend(v8, "scheduleGetTransactionWithKeys:processor:", v9, v7);

}

void sub_1000D7BC8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000D7BF0(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  NSObject *WeakRetained;
  _BOOL4 v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cleanKeys"));
  v3 = objc_msgSend(v2, "count");
  v4 = _MTLogCategoryCloudSync(v3);
  WeakRetained = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "description"));
      v10 = 138412290;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "[MultiKey] GET Operation for keys: %@", (uint8_t *)&v10, 0xCu);

    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject cloudSyncController](WeakRetained, "cloudSyncController"));
    v9 = objc_msgSend(v8, "scheduleGetTransactionWithKeys:processor:", v2, *(_QWORD *)(a1 + 32));

  }
  else if (v6)
  {
    LOWORD(v10) = 0;
    _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "[MultiKey] No clean keys found -> No need to schedule MultiKey GET Operation.", (uint8_t *)&v10, 2u);
  }

}

void sub_1000D7D30(id *a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  MTTimedOperation *v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "dirtyKeys"));
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v8 = objc_alloc_init(MTTimedOperation);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "processorForKey:", v7));
        if (!objc_msgSend(v9, "hasLocalChanges"))
        {

          goto LABEL_11;
        }
        -[MTTimedOperation setOperationType:](v8, "setOperationType:", objc_msgSend(v9, "operationTypeForSET"));
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_1000D7F2C;
        v11[3] = &unk_1004AA2A0;
        v11[4] = v7;
        objc_copyWeak(&v13, a1 + 6);
        v10 = v9;
        v12 = v10;
        -[MTTimedOperation setMainBlock:](v8, "setMainBlock:", v11);
        objc_msgSend(a1[5], "addOperation:", v8);

        objc_destroyWeak(&v13);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_11:

}

void sub_1000D7F0C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000D7F2C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint8_t buf[4];
  void *v11;

  v2 = _MTLogCategoryCloudSync(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description"));
    *(_DWORD *)buf = 138412290;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MultiKey] SET Operation for key: %@", buf, 0xCu);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudSyncController"));
  v9 = *(_QWORD *)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  v8 = objc_msgSend(v6, "scheduleSetTransactionWithKeys:processor:", v7, *(_QWORD *)(a1 + 40));

}

id sub_1000D81C4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_synchronousResetToInitialStateDatabase");
  objc_msgSend(*(id *)(a1 + 32), "_synchronousResetToInitialStateMetadata");
  return _objc_msgSend(*(id *)(a1 + 32), "_finaliseResetToInitial:", *(_QWORD *)(a1 + 40));
}

void sub_1000D8290(uint64_t a1)
{
  int IsAudioAccessory;
  int *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  void *j;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *k;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  _BYTE v54[128];
  _BYTE v55[128];

  IsAudioAccessory = MSVDeviceIsAudioAccessory();
  v3 = &OBJC_IVAR___MTEpisodeLockup__showsPlayState;
  if ((objc_msgSend(*(id *)(a1 + 32), "hasPodcastSyncVersion") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "hasPodcastSyncV3Version"))
  {
    v4 = objc_autoreleasePoolPush();
    v5 = *(void **)(a1 + 40);
    v6 = kMTPodcastEntityName;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenPodcasts](MTPodcast, "predicateForNotHiddenPodcasts"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectsInEntity:predicate:sortDescriptors:", v6, v7, 0));

    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v9 = v8;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v49, v55, 16);
    if (v10)
    {
      v11 = v10;
      v40 = v4;
      v12 = 0;
      v13 = *(_QWORD *)v50;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v50 != v13)
            objc_enumerationMutation(v9);
          v15 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)i);
          if ((IsAudioAccessory & 1) == 0
            && objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)i), "hasBeenSynced")
            && (objc_msgSend(v15, "isImplicitlyFollowed") & 1) == 0)
          {
            objc_msgSend(v15, "setHasBeenSynced:", 0);
            v12 = 1;
          }
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeSyncStorage"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "feedURL"));
          objc_msgSend(v16, "resetVersionForFeedUrl:", v17);

          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeSyncStorage"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "updatedFeedURL"));
          objc_msgSend(v18, "resetVersionForFeedUrl:", v19);

        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v49, v55, 16);
      }
      while (v11);

      v4 = v40;
      if ((v12 & 1) != 0)
        objc_msgSend(*(id *)(a1 + 40), "saveInCurrentBlock");
    }
    else
    {

    }
    objc_autoreleasePoolPop(v4);
    v3 = &OBJC_IVAR___MTEpisodeLockup__showsPlayState;
    if (IsAudioAccessory)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](MTLibrary, "sharedInstance"));
      objc_msgSend(v20, "synchronouslyMarkAsHiddenAllPodcastsWithoutResettingSyncVersions");

    }
    objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "resetAllSubscriptionSyncVersion");
    objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "resetPlaylistSyncVersion");
  }
  if (objc_msgSend(*(id *)(a1 + 32), "hasPlaylistSyncVersion"))
  {
    v21 = objc_autoreleasePoolPush();
    if (IsAudioAccessory)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3 + 782, "sharedInstance"));
      objc_msgSend(v22, "deleteAllTopLevelStationsExcludingFolders");
    }
    else
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist topLevelPlaylistsExcludingFoldersPredicate](MTPlaylist, "topLevelPlaylistsExcludingFoldersPredicate"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsInEntity:predicate:sortDescriptors:", kMTPlaylistEntityName, v22, 0));
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
      if (v24)
      {
        v25 = v24;
        v26 = *(_QWORD *)v46;
        do
        {
          for (j = 0; j != v25; j = (char *)j + 1)
          {
            if (*(_QWORD *)v46 != v26)
              objc_enumerationMutation(v23);
            v28 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)j);
            if (objc_msgSend(v28, "hasBeenSynced"))
              objc_msgSend(v28, "setHasBeenSynced:", 0);
          }
          v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
        }
        while (v25);
      }
      objc_msgSend(*(id *)(a1 + 40), "saveInCurrentBlock");

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "resetPlaylistSyncVersion");
  }
  if (+[MTBookmarksSyncStorage hasBookmarksSync](MTBookmarksSyncStorage, "hasBookmarksSync"))
  {
    v29 = objc_autoreleasePoolPush();
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForBookmarkedEpisodes](MTEpisode, "predicateForBookmarkedEpisodes"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsInEntity:predicate:sortDescriptors:", kMTEpisodeEntityName, v30, 0));
    if (objc_msgSend(v31, "count"))
    {
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v32 = v31;
      v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
      if (v33)
      {
        v34 = v33;
        v35 = *(_QWORD *)v42;
        do
        {
          for (k = 0; k != v34; k = (char *)k + 1)
          {
            if (*(_QWORD *)v42 != v35)
              objc_enumerationMutation(v32);
            objc_msgSend(*(id *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)k), "markAsUnbookmarked");
          }
          v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
        }
        while (v34);
      }

      objc_msgSend(*(id *)(a1 + 40), "saveInCurrentBlock");
    }

    objc_autoreleasePoolPop(v29);
    +[MTBookmarksSyncStorage resetBookmarksSync](MTBookmarksSyncStorage, "resetBookmarksSync");
  }
  objc_msgSend(*(id *)(a1 + 40), "deleteAllUPPMetadata");
  if (objc_msgSend(*(id *)(a1 + 32), "hasInterestSyncVersion"))
  {
    v37 = objc_autoreleasePoolPush();
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3 + 782, "sharedInstance"));
    objc_msgSend(v38, "deleteAllInterestsBlockingCaller");

    objc_autoreleasePoolPop(v37);
    +[InterestSyncStorage resetInterestSync](_TtC8Podcasts19InterestSyncStorage, "resetInterestSync");
  }
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3 + 782, "sharedInstance"));
  objc_msgSend(v39, "immediatelyDeleteAllHiddenPodcasts");

}

void sub_1000D89C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D89D8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  uint8_t v12[16];
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  if (objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "isUserLoggedIn"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTPushNotificationController sharedInstance](MTPushNotificationController, "sharedInstance"));
    objc_msgSend(v4, "registerPushNotifications");

  }
  v5 = objc_msgSend(*(id *)(a1 + 32), "isSyncing");
  if ((_DWORD)v5)
  {
    v6 = _MTLogCategoryCloudSync(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Syncing content for new account when current sync finishes", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "setResyncWhenDone:", 1);
  }
  else
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "isUserLoggedIn");
    if ((_DWORD)v8)
    {
      v9 = _MTLogCategoryCloudSync(v8);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Syncing Content for New Account", v12, 2u);
      }

      v11 = (void *)objc_claimAutoreleasedReturnValue(+[MTSyncController sharedInstance](MTSyncController, "sharedInstance"));
      objc_msgSend(v11, "syncEverything");

    }
  }
  objc_sync_exit(v3);

}

void sub_1000D8B2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D8F2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D90A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D91A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D9BFC(id a1, MTBaseQueryObserver *a2, unint64_t a3, BOOL *a4)
{
  -[MTBaseQueryObserver stop](a2, "stop", a3, a4);
}

void sub_1000D9DA0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000D9DBC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  _BYTE v23[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v3 = objc_autoreleasePoolPush();
    objc_msgSend(WeakRetained, "removeEpisodeObserverForPodcasts:", *(_QWORD *)(a1 + 32));
    objc_autoreleasePoolPop(v3);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v4 = *(id *)(a1 + 40);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v19;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v19 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(WeakRetained, "updateEpisodeObserverForPodcast:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v8));
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      }
      while (v6);
    }

    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v9 = *(id *)(a1 + 48);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v15;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v15 != v12)
            objc_enumerationMutation(v9);
          objc_msgSend(WeakRetained, "addEpisodeObserverForPodcast:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v13), (_QWORD)v14);
          v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
      }
      while (v11);
    }

  }
}

void sub_1000DA07C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DA1EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DA45C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DA5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1000DA5F4(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000DA724;
  v10[3] = &unk_1004AA378;
  objc_copyWeak(&v14, a1 + 6);
  objc_copyWeak(&v15, a1 + 5);
  v11 = a1[4];
  v8 = v5;
  v12 = v8;
  v9 = v6;
  v13 = v9;
  objc_msgSend(WeakRetained, "enqueueWorkBlock:", v10);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);

}

void sub_1000DA708(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000DA724(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v2 = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(v2, "episodeUuidObserver:resultsChangedForPodcast:withDeletedIds:andInsertIds:", WeakRetained, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1000DA888(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DA948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DA960(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "valueForKey:", kPodcastUuid));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1000DAA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DAAC0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "uuids"));
  objc_msgSend(v3, "unionSet:", v4);

}

void sub_1000DAF70(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "managedObjectContext"));
  objc_msgSend(v4, "deleteObject:", v3);

}

void sub_1000DAFBC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[MTPodcastPlaylistSettings insertNewSettingsInManagedObjectContext:](MTPodcastPlaylistSettings, "insertNewSettingsInManagedObjectContext:", v5));

  objc_msgSend(v6, "setPodcast:", v4);
  objc_msgSend(v6, "setPlaylist:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v6, "setEpisodesToShow:", objc_msgSend(*(id *)(a1 + 40), "episodesToShow"));
  objc_msgSend(v6, "setMediaType:", objc_msgSend(*(id *)(a1 + 40), "mediaType"));
  objc_msgSend(v6, "setShowPlayedEpisodes:", objc_msgSend(*(id *)(a1 + 40), "showPlayedEpisodes"));
  objc_msgSend(v6, "setTracksDefault:", 1);
  objc_msgSend(v6, "setEpisodesToShow:", 6);

}

void sub_1000DB674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DB690(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "podcast"));
  v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    *a4 = 1;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  }

}

void sub_1000DB7E4(uint64_t a1)
{
  void *v2;
  NSMutableArray *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  NSMutableArray *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *j;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mutableOrderedSetValueForKey:", kPlaylistEpisodes));
  v3 = objc_opt_new(NSMutableArray);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "podcast"));
        v11 = *(void **)(a1 + 40);

        if (v10 == v11)
          -[NSMutableArray addObject:](v3, "addObject:", v9);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v6);
  }

  if (-[NSMutableArray count](v3, "count"))
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v12 = v3;
    v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v12, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v19;
      do
      {
        for (j = 0; j != v14; j = (char *)j + 1)
        {
          if (*(_QWORD *)v19 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)j);
          objc_msgSend(v17, "removePlaylistsObject:", *(_QWORD *)(a1 + 32), (_QWORD)v18);
          objc_msgSend(*(id *)(a1 + 32), "addDeletedEpisodesObject:", v17);
          objc_msgSend(v4, "removeObject:", v17);
        }
        v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v12, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      }
      while (v14);
    }

    objc_msgSend(*(id *)(a1 + 32), "recalculateEpisodeCounts");
  }
  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdate:", 1, (_QWORD)v18);
  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(*(id *)(a1 + 48), "saveInCurrentBlock");

}

id sub_1000DBB78(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
}

void sub_1000DBC60(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mutableOrderedSetValueForKey:", kPlaylistEpisodes));
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "recalculateEpisodeCounts");
  objc_msgSend(*(id *)(a1 + 40), "removePlaylistsObject:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "addDeletedEpisodesObject:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdate:", 1);
  if (!*(_BYTE *)(a1 + 56))
    objc_msgSend(*(id *)(a1 + 48), "saveInCurrentBlock");

}

void sub_1000DBF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DBF20(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K = %lld"), kPlaylistParentMediaLibraryId, objc_msgSend(*(id *)(a1 + 32), "mediaLibraryId")));
  v2 = *(void **)(a1 + 40);
  v3 = kMTPlaylistEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", kPlaylistMediaLibraryId, 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectDictionariesInEntity:predicate:sortDescriptors:propertiesToFetch:includeObjectId:", v3, v6, 0, v4, 1));

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v5, "count");
}

void sub_1000DC0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DC0D8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v2 = kPlaylistMediaLibraryId;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K != 0 AND %K = 0"), kPlaylistMediaLibraryId, kPlaylistParentMediaLibraryId));
  v3 = *(void **)(a1 + 32);
  v4 = kMTPlaylistEntityName;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v2, 0));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectDictionariesInEntity:predicate:sortDescriptors:propertiesToFetch:includeObjectId:", v4, v7, 0, v5, 1));

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "count");
}

void sub_1000DD3A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DD418(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  __int16 v12;
  uint8_t buf[2];

  v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  v3 = objc_msgSend(*(id *)(a1 + 32), "subscriptionState");
  if ((_DWORD)v3 == 4)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    objc_msgSend(v4, "unregisterForRemoteNotifications");

    v5 = _MTLogCategoryCloudSync(objc_msgSend(*(id *)(a1 + 32), "setSubscriptionState:", 0));
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v12 = 0;
      v7 = "Unregistered from APNS.";
      v8 = (uint8_t *)&v12;
      v9 = v6;
      v10 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v7, v8, 2u);
    }
  }
  else
  {
    v11 = _MTLogCategoryCloudSync(v3);
    v6 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v7 = "Failed to complete APNS unregistration: Reason: interrupted.";
      v8 = buf;
      v9 = v6;
      v10 = OS_LOG_TYPE_ERROR;
      goto LABEL_6;
    }
  }

  objc_sync_exit(v2);
}

void sub_1000DD518(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DD7A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DD968(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DD984(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  id v10;
  id v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  int v18;
  void *v19;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v10 = WeakRetained;
    objc_sync_enter(v10);
    v11 = objc_loadWeakRetained((id *)(a1 + 40));
    v12 = objc_msgSend(v11, "subscriptionState");

    objc_sync_exit(v10);
    if (v12 == 1)
    {
      v14 = _MTLogCategoryCloudSync(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      v16 = v15;
      if (v6)
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "base64EncodedStringWithOptions:", 0));
          v18 = 138412290;
          v19 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Starting APNS registration transaction for token = \"%@\"", (uint8_t *)&v18, 0xCu);

        }
        v16 = objc_loadWeakRetained((id *)(a1 + 40));
        -[NSObject executeAction:using:andToken:](v16, "executeAction:using:andToken:", CFSTR("REGISTER"), v6, *(_QWORD *)(a1 + 32));
      }
      else if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v18) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to complete APNS registration. Reason: Failed to load valid subscription URL from bag.", (uint8_t *)&v18, 2u);
      }

    }
  }

}

void sub_1000DDB28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DDC2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DE24C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DE484(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000DEC9C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateUI");
}

id sub_1000DF80C(void *a1)
{
  const __CFData *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;
  _QWORD v7[7];

  v1 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "MZDataByInflatingWithGZip"));
  v2 = (void *)CFPropertyListCreateWithData(0, v1, 0, 0, 0);
  if (!v2)
  {
    v7[0] = objc_opt_class(NSDictionary);
    v7[1] = objc_opt_class(NSArray);
    v7[2] = objc_opt_class(NSString);
    v7[3] = objc_opt_class(NSNumber);
    v7[4] = objc_opt_class(NSData);
    v7[5] = objc_opt_class(NSDate);
    v7[6] = objc_opt_class(NSNull);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v7, 7));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v3));

    v6 = 0;
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v4, v1, &v6));

  }
  return v2;
}

NSMutableArray *sub_1000DF97C(void *a1)
{
  id v1;
  NSMutableArray *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSMutableDictionary *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v1 = a1;
  v2 = objc_opt_new(NSMutableArray);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v19;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v7);
        v9 = objc_opt_class(NSDictionary);
        if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
        {
          v10 = sub_1000DFB28(v8);
          v11 = (id)objc_claimAutoreleasedReturnValue(v10);
        }
        else
        {
          v12 = objc_opt_class(NSArray);
          if ((objc_opt_isKindOfClass(v8, v12) & 1) != 0)
          {
            v13 = sub_1000DF97C(v8);
            v11 = (id)objc_claimAutoreleasedReturnValue(v13);
          }
          else
          {
            v14 = objc_opt_class(NSData);
            if ((objc_opt_isKindOfClass(v8, v14) & 1) != 0)
            {
              v15 = sub_1000DF80C(v8);
              v11 = (id)objc_claimAutoreleasedReturnValue(v15);
            }
            else
            {
              v11 = v8;
            }
          }
        }
        v16 = v11;
        -[NSMutableArray addObject:](v2, "addObject:", v11, (_QWORD)v18);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v5);
  }

  return v2;
}

NSMutableDictionary *sub_1000DFB28(void *a1)
{
  id v1;
  NSMutableDictionary *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v1 = a1;
  v2 = objc_opt_new(NSMutableDictionary);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allKeys", 0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", v8));
        v10 = objc_opt_class(NSDictionary);
        if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
        {
          v11 = sub_1000DFB28(v9);
          v12 = objc_claimAutoreleasedReturnValue(v11);
        }
        else
        {
          v13 = objc_opt_class(NSArray);
          if ((objc_opt_isKindOfClass(v9, v13) & 1) != 0)
          {
            v14 = sub_1000DF97C(v9);
            v12 = objc_claimAutoreleasedReturnValue(v14);
          }
          else
          {
            v15 = objc_opt_class(NSData);
            if ((objc_opt_isKindOfClass(v9, v15) & 1) == 0)
              goto LABEL_13;
            v16 = sub_1000DF80C(v9);
            v12 = objc_claimAutoreleasedReturnValue(v16);
          }
        }
        v17 = (void *)v12;

        v9 = v17;
LABEL_13:
        -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v9, v8);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v5);
  }

  return v2;
}

void sub_1000DFFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000E003C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 32))
  {
    v2 = _MTLogCategoryDatabase();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MTPodcastDerivedPropertyObserver did pause processing.", v4, 2u);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 1;
  }
}

_QWORD *sub_1000E0138(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (*(_BYTE *)(result[4] + 32))
  {
    v1 = result;
    v2 = _MTLogCategoryDatabase(result);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MTPodcastDerivedPropertyObserver did resume processing.", v4, 2u);
    }

    *(_BYTE *)(v1[4] + 32) = 0;
    return objc_msgSend((id)v1[4], "processLatestPersistentHistoryTransactions");
  }
  return result;
}

id sub_1000E02B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "beginBackgroundTask:", CFSTR("com.apple.podcasts.MTPodcastDerivedPropertyObserver.updateDerivedProperties"));
}

void sub_1000E02C8(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  dispatch_time_t v7;
  _QWORD block[4];
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(a1[5], "episodeResultsChangedForPodcastUuid:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v6));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  v7 = dispatch_time(0, 5000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000E0424;
  block[3] = &unk_1004A6200;
  v9 = a1[6];
  dispatch_after(v7, (dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_1000E0424(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "endBackgroundTask");
}

void sub_1000E042C(uint64_t a1)
{
  id v2;
  __int128 v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  uint64_t v17;
  unsigned __int8 v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  BOOL v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *j;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  void *k;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  void *m;
  void *v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  void *n;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  __int128 v76;
  uint64_t v77;
  id v78;
  id obj;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[128];
  _BYTE v117[128];
  uint8_t v118[128];
  uint8_t buf[4];
  id v120;
  _BYTE v121[128];
  _BYTE v122[128];
  _BYTE v123[128];

  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  obj = *(id *)(a1 + 32);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v112, v123, 16);
  if (v2)
  {
    v4 = v2;
    v5 = *(_QWORD *)v113;
    v90 = kMTPodcastEntityName;
    v84 = kPodcastUuid;
    v89 = kMTEpisodeEntityName;
    v83 = kEpisodePodcastUuid;
    *(_QWORD *)&v3 = 134349056;
    v76 = v3;
    v77 = *(_QWORD *)v113;
    do
    {
      v6 = 0;
      v78 = v4;
      do
      {
        if (*(_QWORD *)v113 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * (_QWORD)v6);
        v8 = objc_autoreleasePoolPush();
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "author"));
        v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("MTPodcastDerivedPropertyObserver"));

        if ((v10 & 1) == 0)
        {
          v81 = v8;
          v82 = v6;
          v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
          v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
          v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
          v108 = 0u;
          v109 = 0u;
          v110 = 0u;
          v111 = 0u;
          v80 = v7;
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "changes"));
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v108, v122, 16);
          if (v12)
          {
            v13 = v12;
            v14 = *(_QWORD *)v109;
            do
            {
              for (i = 0; i != v13; i = (char *)i + 1)
              {
                if (*(_QWORD *)v109 != v14)
                  objc_enumerationMutation(v11);
                v16 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * (_QWORD)i);
                v17 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
                if (*(_BYTE *)(v17 + 24))
                {
                  v18 = 1;
                }
                else
                {
                  v18 = objc_msgSend(*(id *)(a1 + 40), "_shouldUpdatePodcastsStatsForChange:", *(_QWORD *)(*((_QWORD *)&v108 + 1) + 8 * (_QWORD)i));
                  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
                }
                *(_BYTE *)(v17 + 24) = v18;
                if (objc_msgSend(*(id *)(a1 + 40), "_changeContainsRelevantEpisodeChanges:", v16, v76))
                {
                  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "changedObjectID"));
                  objc_msgSend(v87, "addObject:", v19);

                }
                if (objc_msgSend(*(id *)(a1 + 40), "_changeContainsRelevantPodcastChanges:", v16))
                {
                  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "changedObjectID"));
                  objc_msgSend(v86, "addObject:", v20);

                }
                if (objc_msgSend(*(id *)(a1 + 40), "_changeContainsRelevantChannelChanges:", v16))
                {
                  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "changedObjectID"));
                  objc_msgSend(v85, "addObject:", v21);

                }
                v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "changedObjectID"));
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "entity"));
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "name"));

                v25 = objc_msgSend(v16, "changeType");
                if (objc_msgSend(v24, "isEqualToString:", v90))
                  v26 = v25 == (id)2;
                else
                  v26 = 0;
                if (v26)
                {
                  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "tombstone"));
                  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKey:", v84));

                  if (v28)
                    objc_msgSend(*(id *)(a1 + 48), "addObject:", v28);

                }
                if (objc_msgSend(v24, "isEqualToString:", v89) && v25 == (id)2)
                {
                  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "tombstone"));
                  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKey:", v83));

                  if (v30)
                    objc_msgSend(*(id *)(a1 + 56), "addObject:", v30);

                }
              }
              v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v108, v122, 16);
            }
            while (v13);
          }

          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "allObjects"));
          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v104, v121, 16);
          if (v32)
          {
            v33 = v32;
            v34 = *(_QWORD *)v105;
            do
            {
              for (j = 0; j != v33; j = (char *)j + 1)
              {
                if (*(_QWORD *)v105 != v34)
                  objc_enumerationMutation(v31);
                v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectWithID:", *(_QWORD *)(*((_QWORD *)&v104 + 1) + 8 * (_QWORD)j), v76));
                v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "podcastUuid"));

                if (v37)
                {
                  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "podcast"));
                  v41 = objc_msgSend(v40, "hidden");

                  if (v41)
                    v42 = *(void **)(a1 + 48);
                  else
                    v42 = *(void **)(a1 + 56);
                  v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "podcastUuid"));
                  objc_msgSend(v42, "addObject:", v44);
                }
                else
                {
                  v43 = _MTLogCategoryDatabase(v38, v39);
                  v44 = objc_claimAutoreleasedReturnValue(v43);
                  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
                  {
                    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "uuid"));
                    *(_DWORD *)buf = 138543362;
                    v120 = v45;
                    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Derived Property Observer has no podcast uuid for episode %{public}@", buf, 0xCu);

                  }
                }

              }
              v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v104, v121, 16);
            }
            while (v33);
          }

          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "allObjects"));
          v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v100, v118, 16);
          if (v47)
          {
            v48 = v47;
            v49 = *(_QWORD *)v101;
            do
            {
              for (k = 0; k != v48; k = (char *)k + 1)
              {
                if (*(_QWORD *)v101 != v49)
                  objc_enumerationMutation(v46);
                v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectWithID:", *(_QWORD *)(*((_QWORD *)&v100 + 1) + 8 * (_QWORD)k), v76));
                v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "uuid"));

                if (v52)
                {
                  if (objc_msgSend(v51, "hidden"))
                    v53 = *(void **)(a1 + 48);
                  else
                    v53 = *(void **)(a1 + 56);
                  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "uuid"));
                  objc_msgSend(v53, "addObject:", v54);

                }
              }
              v48 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v100, v118, 16);
            }
            while (v48);
          }

          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v88 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "allObjects"));
          v55 = objc_msgSend(v88, "countByEnumeratingWithState:objects:count:", &v96, v117, 16);
          if (v55)
          {
            v56 = v55;
            v91 = *(_QWORD *)v97;
            do
            {
              for (m = 0; m != v56; m = (char *)m + 1)
              {
                if (*(_QWORD *)v97 != v91)
                  objc_enumerationMutation(v88);
                v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectWithID:", *(_QWORD *)(*((_QWORD *)&v96 + 1) + 8 * (_QWORD)m), v76));
                v92 = 0u;
                v93 = 0u;
                v94 = 0u;
                v95 = 0u;
                v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "podcasts"));
                v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v92, v116, 16);
                if (v60)
                {
                  v61 = v60;
                  v62 = *(_QWORD *)v93;
                  do
                  {
                    for (n = 0; n != v61; n = (char *)n + 1)
                    {
                      if (*(_QWORD *)v93 != v62)
                        objc_enumerationMutation(v59);
                      v64 = *(void **)(*((_QWORD *)&v92 + 1) + 8 * (_QWORD)n);
                      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "uuid"));

                      if (v65)
                      {
                        if (objc_msgSend(v64, "hidden"))
                          v66 = *(void **)(a1 + 48);
                        else
                          v66 = *(void **)(a1 + 56);
                        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "uuid"));
                        objc_msgSend(v66, "addObject:", v67);

                      }
                    }
                    v61 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v92, v116, 16);
                  }
                  while (v61);
                }

              }
              v56 = objc_msgSend(v88, "countByEnumeratingWithState:objects:count:", &v96, v117, 16);
            }
            while (v56);
          }

          v70 = _MTLogCategoryDatabase(v68, v69);
          v71 = objc_claimAutoreleasedReturnValue(v70);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
          {
            v72 = objc_msgSend(v80, "transactionNumber");
            *(_DWORD *)buf = v76;
            v120 = v72;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "Derived Property Observer processed transaction %{public}lld", buf, 0xCu);
          }

          v73 = objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "token"));
          v74 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
          v75 = *(void **)(v74 + 40);
          *(_QWORD *)(v74 + 40) = v73;

          v5 = v77;
          v4 = v78;
          v8 = v81;
          v6 = v82;
        }
        objc_autoreleasePoolPop(v8);
        v6 = (char *)v6 + 1;
      }
      while (v6 != v4);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v112, v123, 16);
    }
    while (v4);
  }

}

void sub_1000E0CA8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *j;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  uint64_t v48;
  _BYTE v49[128];
  uint64_t v50;
  _BYTE v51[128];
  uint64_t v52;

  v2 = *(void **)(a1 + 32);
  v3 = kMTPodcastEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts](MTPodcast, "predicateForNotHiddenNotImplicitlyFollowedPodcasts"));
  v5 = kPodcastUuid;
  v52 = kPodcastUuid;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v52, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectsInEntity:predicate:propertiesToFetch:batchSize:", v3, v4, v6, 0));

  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uuid"));

        if (v14)
        {
          v15 = *(void **)(a1 + 40);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uuid"));
          objc_msgSend(v15, "addObject:", v16);

        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
    }
    while (v10);
  }

  v17 = *(void **)(a1 + 32);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForHiddenOrImplicitlyFollowedPodcasts](MTPodcast, "predicateForHiddenOrImplicitlyFollowedPodcasts"));
  v50 = v5;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v50, 1));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectsInEntity:predicate:propertiesToFetch:batchSize:", v3, v18, v19, 0));

  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v21 = v20;
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v39, v49, 16);
  if (v22)
  {
    v23 = v22;
    v24 = *(_QWORD *)v40;
    do
    {
      for (j = 0; j != v23; j = (char *)j + 1)
      {
        if (*(_QWORD *)v40 != v24)
          objc_enumerationMutation(v21);
        v26 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)j);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "uuid", (_QWORD)v39));

        if (v27)
        {
          v28 = *(void **)(a1 + 48);
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "uuid"));
          objc_msgSend(v28, "addObject:", v29);

        }
      }
      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v39, v49, 16);
    }
    while (v23);
  }

  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "persistentStoreCoordinator"));
  v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "currentPersistentHistoryTokenFromStores:", 0));
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v33 = *(void **)(v32 + 40);
  *(_QWORD *)(v32 + 40) = v31;

  v36 = _MTLogCategoryDatabase(v34, v35);
  v37 = objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    *(_DWORD *)buf = 138412290;
    v48 = v38;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Derived Property Observer fetched latest token %@", buf, 0xCu);
  }

}

void sub_1000E1004(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v3 = *(id *)(a1 + 32);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v10;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v10 != v5)
            objc_enumerationMutation(v3);
          v7 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
          v8 = WeakRetained[5];
          objc_sync_enter(v8);
          objc_msgSend(WeakRetained[5], "removeObjectForKey:", v7, (_QWORD)v9);
          objc_sync_exit(v8);

          objc_msgSend(WeakRetained, "notifyObserversForPodcast:", v7);
          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v4);
    }

  }
}

void sub_1000E113C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E1158(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  id WeakRetained;
  uint8_t v6[16];

  v3 = _MTLogCategoryDatabase(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Derived Property Observer will update stats for podcasts", v6, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reportStatsForPodcasts");

}

void sub_1000E11D4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_setLastProcessedPersistentHistoryToken:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

}

id sub_1000E1218(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "endBackgroundTask");
}

void sub_1000E15E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Unwind_Resume(exception_object);
}

void sub_1000E1640(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForIsFromiTunesSync:](MTEpisode, "predicateForIsFromiTunesSync:", 1));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "countOfObjectsInEntity:predicate:", kMTEpisodeEntityName, v2);
  v3 = *(void **)(a1 + 32);
  v4 = kMTPodcastEntityName;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts](MTPodcast, "predicateForNotHiddenNotImplicitlyFollowedPodcasts"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "allObjects"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsInEntity:predicate:propertiesToFetch:batchSize:", v4, v5, v6, 0));

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v7, "count");
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v13, "subscribed", (_QWORD)v14))
          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
        if (objc_msgSend(v13, "isAuthenticatedDark"))
          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
        if (objc_msgSend(v13, "isPastAutodownloadOrEpisodeLimitDark"))
          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
        if (objc_msgSend(v13, "notifications"))
          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v10);
  }

}

void sub_1000E1A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000E1A48(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;

  kdebug_trace(723517976, 0, 0, 0, 0);
  v19 = (id)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForUserEpisodesOnPodcastUuid:ctx:](MTEpisode, "predicateForUserEpisodesOnPodcastUuid:ctx:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodesOnUnplayedTabOnPodcastUuid:ctx:](MTEpisode, "predicateForEpisodesOnUnplayedTabOnPodcastUuid:ctx:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  kdebug_trace(723517980, 0, 0, 0, 0);
  v3 = *(void **)(a1 + 40);
  v4 = kMTEpisodeEntityName;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForIsNew:](MTEpisode, "predicateForIsNew:", 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForAllEpisodesOnPodcastUuid:](MTEpisode, "predicateForAllEpisodesOnPodcastUuid:", *(_QWORD *)(a1 + 32)));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "AND:", v6));
  v8 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v3, "countOfObjectsInEntity:predicate:", v4, v7)));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  v11 = *(void **)(a1 + 40);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForPlayed:](MTEpisode, "predicateForPlayed:", 0));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "AND:", v12));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForAllEpisodesOnPodcastUuid:](MTEpisode, "predicateForAllEpisodesOnPodcastUuid:", *(_QWORD *)(a1 + 32)));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "AND:", v14));
  v16 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v11, "countOfObjectsInEntity:predicate:", v4, v15)));
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v16;

  objc_msgSend(*(id *)(a1 + 48), "updateFlagsForPodcastUuid:predicateForUnplayedTab:predicateForUserEpisodes:", *(_QWORD *)(a1 + 32), v2, v19);
}

void sub_1000E21AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 168));
  _Unwind_Resume(a1);
}

void sub_1000E21E0(uint64_t a1)
{
  void *v2;
  char *v3;
  char *v4;
  char *v5;
  char v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  id v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  id WeakRetained;
  char *v35;
  uint64_t v36;
  id v37;
  id v38;
  id obj;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  id v53;
  __int16 v54;
  id v55;
  _BYTE v56[128];
  _BYTE v57[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  kdebug_trace(723518000, 0, 0, 0, 0);
  v36 = kMTEpisodeEntityName;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:propertiesToFetch:batchSize:"));
  kdebug_trace(723518004, 0, 0, 0, 0);
  kdebug_trace(723518008, 0, 0, 0, 0);
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = v2;
  v3 = (char *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v57, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)v45;
    do
    {
      v8 = 0;
      v37 = v5;
      v9 = v5 + 1;
      do
      {
        if (*(_QWORD *)v45 != v7)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)v8);
        v11 = objc_autoreleasePoolPush();
        v12 = objc_msgSend(*(id *)(a1 + 48), "evaluateWithObject:", v10);
        if ((_DWORD)v12 != objc_msgSend(v10, "unplayedTab")
          && (objc_msgSend(*(id *)(a1 + 56), "_shouldSkipSettingPropertiesForWatchPPT") & 1) == 0)
        {
          objc_msgSend(v10, "setUnplayedTab:", v12);
          v6 = 1;
        }
        v13 = objc_msgSend(*(id *)(a1 + 64), "evaluateWithObject:", v10);
        if ((_DWORD)v13 != objc_msgSend(v10, "userEpisode")
          && (objc_msgSend(*(id *)(a1 + 56), "_shouldSkipSettingPropertiesForWatchPPT") & 1) == 0)
        {
          objc_msgSend(v10, "setUserEpisode:", v13);
          v6 = 1;
        }
        if (((objc_msgSend(v10, "isNew") ^ 1 | v13) & 1) == 0
          && (objc_msgSend(*(id *)(a1 + 56), "_shouldSkipSettingPropertiesForWatchPPT") & 1) == 0)
        {
          objc_msgSend(v10, "setIsNew:", 0);
          v6 = 1;
        }
        if (!((unint64_t)v9 % 0xC8) && (v6 & 1) != 0)
        {
          objc_msgSend(*(id *)(a1 + 32), "setTransactionAuthor:", CFSTR("MTPodcastDerivedPropertyObserver"));
          objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
          objc_msgSend(*(id *)(a1 + 32), "setTransactionAuthor:", 0);
          v6 = 0;
        }
        objc_autoreleasePoolPop(v11);
        ++v8;
        ++v9;
      }
      while (v4 != v8);
      v5 = &v4[(_QWORD)v37];
      v4 = (char *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v57, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 32), "setTransactionAuthor:", CFSTR("MTPodcastDerivedPropertyObserver"));
  objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  objc_msgSend(*(id *)(a1 + 32), "setTransactionAuthor:", 0);
  kdebug_trace(723518012, 0, 0, 0, 0);
  kdebug_trace(723518024, 0, 0, 0, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 72)));
  v15 = *(_QWORD *)(a1 + 72);
  v33 = v14;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "channel"));
  v17 = objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodesWhichNeedEntitlementStateUpdateForShowUUID:subscriptionState:](MTEpisode, "predicateForEpisodesWhichNeedEntitlementStateUpdateForShowUUID:subscriptionState:", v15, objc_msgSend(v16, "subscriptionActive")));

  v32 = (void *)v17;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:propertiesToFetch:batchSize:", v36, v17, 0, 200));
  objc_msgSend(*(id *)(a1 + 32), "setTransactionAuthor:", CFSTR("MTPodcastDerivedPropertyObserver"));
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = v18;
  v19 = (char *)objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v40, v56, 16);
  if (v19)
  {
    v20 = v19;
    v21 = 0;
    v22 = *(_QWORD *)v41;
    do
    {
      v23 = 0;
      v35 = v21;
      v24 = v21 + 1;
      do
      {
        if (*(_QWORD *)v41 != v22)
          objc_enumerationMutation(v38);
        v25 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v23);
        v26 = objc_msgSend(v25, "entitlementState");
        v27 = _MTLogCategoryFeedUpdate(objc_msgSend(v25, "updateEntitlementState"));
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "uuid"));
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "title"));
          v31 = objc_msgSend(v25, "entitlementState");
          *(_DWORD *)buf = 138544130;
          v49 = v29;
          v50 = 2112;
          v51 = v30;
          v52 = 2048;
          v53 = v26;
          v54 = 2048;
          v55 = v31;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%{public}@ - %@ updated entitlement state for episode from %lld to %lld from updateFlagForEpisodes", buf, 0x2Au);

        }
        if (__ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * (_QWORD)&v24[v23], 3) <= 0x147AE147AE147AEuLL)
          objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
        ++v23;
      }
      while (v20 != (char *)v23);
      v21 = &v20[(_QWORD)v35];
      v20 = (char *)objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v40, v56, 16);
    }
    while (v20);
  }

  objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  objc_msgSend(*(id *)(a1 + 32), "setTransactionAuthor:", 0);
  kdebug_trace(723518028, 0, 0, 0, 0);

}

uint64_t sub_1000E2780(uint64_t a1)
{
  kdebug_trace(723518032, 0, 0, 0, 0);
  if (os_feature_enabled_serial_sort_auto_downloads(+[MTRecencyUtil unsafeUpdateRelatedFieldsIfUpNextChangedForPodcast:upNextResult:ctx:](MTRecencyUtil, "unsafeUpdateRelatedFieldsIfUpNextChangedForPodcast:upNextResult:ctx:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48))))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 104), "unsafeUpdateEpisodeShowTypeSpecificLevelsWithShowUUID:on:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 48), "setTransactionAuthor:", CFSTR("MTPodcastDerivedPropertyObserver"));
  objc_msgSend(*(id *)(a1 + 48), "saveInCurrentBlock");
  objc_msgSend(*(id *)(a1 + 48), "setTransactionAuthor:", 0);
  return kdebug_trace(723518036, 0, 0, 0, 0);
}

void sub_1000E2824(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;

  v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForLibraryEpisodesOnPodcastUuid:](MTEpisode, "predicateForLibraryEpisodesOnPodcastUuid:", *(_QWORD *)(a1 + 40)));
  v2 = kMTEpisodeEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForBookmarkedEpisodesOnPodcastUuid:](MTEpisode, "predicateForBookmarkedEpisodesOnPodcastUuid:", *(_QWORD *)(a1 + 40)));
  v5 = objc_msgSend(v3, "countOfObjectsInEntity:predicate:", v2, v4);

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForDownloadedEpisodesOnPodcastUuid:](MTEpisode, "predicateForDownloadedEpisodesOnPodcastUuid:", *(_QWORD *)(a1 + 40)));
  v8 = objc_msgSend(v6, "countOfObjectsInEntity:predicate:", v2, v7);

  v9 = objc_msgSend(*(id *)(a1 + 32), "countOfObjectsInEntity:predicate:", v2, v18);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForBookmarkedEpisodesOnPodcastUuid:](MTEpisode, "predicateForBookmarkedEpisodesOnPodcastUuid:", *(_QWORD *)(a1 + 40)));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForVisuallyPlayed:](MTEpisode, "predicateForVisuallyPlayed:", 0));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "AND:", v11));

  v13 = objc_msgSend(*(id *)(a1 + 32), "countOfObjectsInEntity:predicate:", v2, v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForDownloadedEpisodesOnPodcastUuid:](MTEpisode, "predicateForDownloadedEpisodesOnPodcastUuid:", *(_QWORD *)(a1 + 40)));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForVisuallyPlayed:](MTEpisode, "predicateForVisuallyPlayed:", 0));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "AND:", v15));

  v17 = objc_msgSend(*(id *)(a1 + 32), "countOfObjectsInEntity:predicate:", v2, v16);
  objc_msgSend(v19, "setSavedEpisodesCount:", v5);
  objc_msgSend(v19, "setDownloadedEpisodesCount:", v8);
  objc_msgSend(v19, "setLibraryEpisodesCount:", v9);
  objc_msgSend(v19, "setSavedUnplayedEpisodesCount:", v13);
  objc_msgSend(v19, "calculateNewEpisodeCountIn:serialShowsUseExperimentalRules:", *(_QWORD *)(a1 + 32), os_feature_enabled_experimental_serial_episode_count(objc_msgSend(v19, "setDownloadedUnplayedEpisodesCount:", v17)));
  objc_msgSend(*(id *)(a1 + 32), "setTransactionAuthor:", CFSTR("MTPodcastDerivedPropertyObserver"));
  objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  objc_msgSend(*(id *)(a1 + 32), "setTransactionAuthor:", 0);

}

void sub_1000E2D68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E2E10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E2F08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E30E8(uint64_t a1, int a2, id a3)
{
  id v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000E3194;
  block[3] = &unk_1004A62E8;
  v8 = objc_retainBlock(a3);
  v6 = *(id *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v4 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_1000E3194(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000E31F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E3404(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E3478(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000E3A40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updatePlaylistsWithUuids:", *(_QWORD *)(a1 + 40));
}

int64_t sub_1000E3A4C(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  MTPodcastPlaylistSettings *v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v4 = a3;
  -[MTPodcastPlaylistSettings latestEpisodeDate](a2, "latestEpisodeDate");
  v6 = v5;
  -[MTPodcastPlaylistSettings latestEpisodeDate](v4, "latestEpisodeDate");
  v8 = v7;

  if (v6 > v8)
    return -1;
  else
    return v6 < v8;
}

int64_t sub_1000E3AA0(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  MTPodcastPlaylistSettings *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int64_t v9;

  v4 = a3;
  -[MTPodcastPlaylistSettings oldestEpisodeDate](a2, "oldestEpisodeDate");
  v6 = v5;
  -[MTPodcastPlaylistSettings oldestEpisodeDate](v4, "oldestEpisodeDate");
  v8 = v7;

  if (v6 >= v8)
    v9 = 0;
  else
    v9 = -1;
  if (v6 > v8)
    return 1;
  else
    return v9;
}

int64_t sub_1000E3AF4(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  MTPodcastPlaylistSettings *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](a2, "podcast"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](v4, "podcast"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
  v9 = objc_msgSend(v6, "caseInsensitiveCompare:", v8);

  return (int64_t)v9;
}

int64_t sub_1000E3B8C(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  MTPodcastPlaylistSettings *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](a3, "podcast"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[MTPodcastPlaylistSettings podcast](v4, "podcast"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
  v9 = objc_msgSend(v6, "caseInsensitiveCompare:", v8);

  return (int64_t)v9;
}

int64_t sub_1000E3C24(id a1, MTEpisode *a2, MTEpisode *a3)
{
  MTEpisode *v4;
  MTEpisode *v5;
  double v6;
  double v7;
  double v8;
  int64_t v9;
  double v10;
  double v11;
  double v12;

  v4 = a2;
  v5 = a3;
  -[MTEpisode pubDate](v4, "pubDate");
  v7 = v6;
  -[MTEpisode pubDate](v5, "pubDate");
  if (v7 <= v8)
  {
    -[MTEpisode pubDate](v4, "pubDate");
    v11 = v10;
    -[MTEpisode pubDate](v5, "pubDate");
    v9 = v11 < v12;
  }
  else
  {
    v9 = -1;
  }

  return v9;
}

int64_t sub_1000E3CAC(id a1, MTEpisode *a2, MTEpisode *a3)
{
  MTEpisode *v4;
  MTEpisode *v5;
  double v6;
  double v7;
  double v8;
  int64_t v9;
  double v10;
  double v11;
  double v12;

  v4 = a2;
  v5 = a3;
  -[MTEpisode pubDate](v4, "pubDate");
  v7 = v6;
  -[MTEpisode pubDate](v5, "pubDate");
  if (v7 <= v8)
  {
    -[MTEpisode pubDate](v4, "pubDate");
    v11 = v10;
    -[MTEpisode pubDate](v5, "pubDate");
    if (v11 >= v12)
      v9 = 0;
    else
      v9 = -1;
  }
  else
  {
    v9 = 1;
  }

  return v9;
}

int64_t sub_1000E3D34(id a1, MTEpisode *a2, MTEpisode *a3)
{
  MTEpisode *v4;
  MTEpisode *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v4, "podcast"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "title"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode podcast](v5, "podcast"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "title"));
  v10 = objc_msgSend(v7, "caseInsensitiveCompare:", v9);

  if (!v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode title](v4, "title"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode title](v5, "title"));
    v10 = objc_msgSend(v11, "caseInsensitiveCompare:", v12);

  }
  return (int64_t)v10;
}

void sub_1000E3F38(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = kPlaylistITunesPlaylistUuid;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", kPlaylistITunesPlaylistUuid));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("iTunes Playlists"), &stru_1004C6D40, 0));

  if (!v5)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(+[MTPlaylist insertNewPlaylistInManagedObjectContext:](MTPlaylist, "insertNewPlaylistInManagedObjectContext:", *(_QWORD *)(a1 + 32)));
    objc_msgSend(v5, "setTitle:", v4);
    objc_msgSend(v5, "setMediaLibraryId:", 0);
    objc_msgSend(v5, "setIsFolder:", 1);
    objc_msgSend(v5, "setIsBuiltIn:", 1);
    objc_msgSend(v5, "setSortOrder:", 1023);
    objc_msgSend(v5, "setUuid:", v2);
    objc_msgSend(v5, "setHidden:", 1);
    objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  }

}

void sub_1000E4170(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  id v16;
  id location;
  _QWORD v18[3];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "downloadedQueryObserver"));

  if (!v2)
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForDownloaded:excludeHidden:](MTEpisode, "predicateForDownloaded:excludeHidden:", 1, 0));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode sortDescriptorsForPubDateAscending:](MTEpisode, "sortDescriptorsForPubDateAscending:", 0));
    v5 = objc_alloc((Class)MTPropertyChangeQueryObserver);
    v6 = objc_msgSend(v5, "initWithEntityName:predicate:sortDescriptors:", kMTEpisodeEntityName, v3, v4);
    objc_msgSend(*(id *)(a1 + 32), "setDownloadedQueryObserver:", v6);

    v18[0] = kEpisodeAssetURL;
    v18[1] = kEpisodeByteSize;
    v18[2] = kEpisodeDuration;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 3));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "downloadedQueryObserver"));
    objc_msgSend(v8, "setPropertyKeys:", v7);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "downloadedQueryObserver"));
    v12 = _NSConcreteStackBlock;
    v13 = 3221225472;
    v14 = sub_1000E439C;
    v15 = &unk_1004AA708;
    objc_copyWeak(&v16, &location);
    v10 = objc_msgSend(v9, "addResultsChangedHandler:", &v12);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "downloadedQueryObserver", v12, v13, v14, v15));
    objc_msgSend(v11, "startObserving");

    objc_destroyWeak(&v16);
    objc_destroyWeak(&location);
  }
}

void sub_1000E435C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E439C(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "updatePodcastSizeEstimation");
    WeakRetained = v2;
  }

}

id sub_1000E442C(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "downloadedQueryObserver"));
  objc_msgSend(v2, "stop");

  return objc_msgSend(*(id *)(a1 + 32), "setDownloadedQueryObserver:", 0);
}

void sub_1000E44C8(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatePodcastSizeEstimationWorkController"));

  if (!v2)
  {
    v3 = objc_alloc((Class)MTCoalescableWorkController);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
    v5 = objc_msgSend(v3, "initWithWorkQueue:identifier:", v4, CFSTR("MTNMSDefaultsUpdater.updatePodcastSizeEstimation"));
    objc_msgSend(*(id *)(a1 + 32), "setUpdatePodcastSizeEstimationWorkController:", v5);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingDownloadedEpisodes"));

  v7 = *(void **)(a1 + 32);
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "updatePodcastSizeEstimationWorkController"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000E45D4;
    v9[3] = &unk_1004A6200;
    v9[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v8, "schedule:", v9);

  }
  else
  {
    _objc_msgSend(v7, "_onWorkQueueUpdatePodcastSizeEstimation");
  }
}

id sub_1000E45D4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkQueueUpdatePodcastSizeEstimation");
}

void sub_1000E465C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[5];
  _QWORD v14[4];
  id v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingDownloadedEpisodes"));

  if (!v4)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000E4814;
    v14[3] = &unk_1004A8AC0;
    v15 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", objc_msgSend(v3, "count")));
    v5 = v15;
    objc_msgSend(v3, "enumerateObjectsUsingBlock:", v14);
    objc_msgSend(*(id *)(a1 + 32), "setExistingDownloadedEpisodes:", v5);

  }
  v6 = objc_alloc_init((Class)NMSPodcastSizeEstimation);
  v7 = objc_msgSend(v3, "copy");
  if ((objc_msgSend(v6, "isEmpty") & 1) == 0)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000E4904;
    v13[3] = &unk_1004AA730;
    v13[4] = *(_QWORD *)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v13));
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "filteredArrayUsingPredicate:", v8));

    v7 = (id)v9;
  }
  if (objc_msgSend(v7, "count"))
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000E4970;
    v11[3] = &unk_1004A8AC0;
    v10 = v6;
    v12 = v10;
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", v11);
    objc_msgSend(v10, "synchronize");

  }
}

void sub_1000E4814(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));

  if (v4)
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
    objc_msgSend(v6, "addObject:", v7);

  }
  else
  {
    v8 = _MTLogCategoryDefault(v5);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Encountered episode with nil uuid when updating size estimation: %@", (uint8_t *)&v10, 0xCu);
    }

  }
}

uint64_t sub_1000E4904(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "existingDownloadedEpisodes"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));

  v6 = objc_msgSend(v4, "containsObject:", v5) ^ 1;
  return v6;
}

void sub_1000E4970(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;
  double v5;
  double v6;
  void *v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = objc_msgSend(v3, "byteSize");
  objc_msgSend(v3, "duration");
  v6 = v5;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "podcast"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "feedURL"));
  objc_msgSend(v2, "incrementSize:duration:forFeedURL:", v4, v7, v6);

}

id sub_1000E4BC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "stop");
}

void sub_1000E4C50(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listenNowQueryObserver"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000E4CD4;
  v3[3] = &unk_1004AA780;
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "results:", v3);

}

uint64_t sub_1000E4CD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1000E4CE0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_endBackgroundTask:", 1);
}

void sub_1000E59B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1000E59DC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  id v28;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v3 = v2;
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "feedURL"));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    if (*(_BYTE *)(a1 + 96))
    {
      v8 = *(_QWORD *)(a1 + 40);
      v7 = *(void **)(a1 + 48);
      v9 = *(_QWORD *)(a1 + 56);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "absoluteString"));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = objc_msgSend(v7, "updatePodcastWithUuid:withFeed:originalFeedUrl:source:", v8, v9, v10, *(_QWORD *)(a1 + 88));

      v12 = _MTLogCategoryFeedUpdate(v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "resolvedFeedURL"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "absoluteString"));
        v16 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
        v21 = 138413058;
        v22 = v14;
        v23 = 2112;
        v24 = v15;
        v25 = 1024;
        v26 = v16;
        v27 = 2048;
        v28 = objc_msgSend(v3, "storeCollectionId");
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Feed URL %@, requestURL %@, updatedFeedURL %d, for show adam ID %lld", (uint8_t *)&v21, 0x26u);

      }
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));

    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    objc_msgSend(v17, "setUpdatedDate:");
    objc_msgSend(v17, "setImporting:", 0);
    objc_msgSend(v17, "setAuthenticatedDark:", 0);
    objc_msgSend(v17, "setFeedUpdateNeedsRetry:", 0);
    objc_msgSend(v17, "setConsecutiveFeedFetchErrors:", 0);
    if (+[MTStoreIdentifier isEmpty:](MTStoreIdentifier, "isEmpty:", objc_msgSend(v17, "storeCollectionId")))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[MTStoreInfoUpdater sharedInstance](MTStoreInfoUpdater, "sharedInstance"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "uuid"));
      objc_msgSend(v18, "updateStoreInfoForPodcast:", v19);

    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[PUIFeedManagerArtworkBridge shared](PUIFeedManagerArtworkBridge, "shared"));
    objc_msgSend(v20, "updateArtworkForShow:useBackgroundFetch:fetchUberImage:", v17, *(unsigned __int8 *)(a1 + 97), 1);

  }
}

id sub_1000E8538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_compareServerEpisode:toServerEpisode:", a2, a3);
}

void sub_1000E8EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E8ECC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v3 = *(void **)(a1 + 56);
    v10 = v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "redirectURL"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "absoluteString"));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v3, "isUpdatingFeedUrl:", v5);

    v2 = v10;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      v6 = *(void **)(a1 + 56);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "updatedFeedURL"));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v6, "isUpdatingFeedUrl:", v7);

      v2 = v10;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
      {
        v8 = *(void **)(a1 + 56);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "feedURL"));
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v8, "isUpdatingFeedUrl:", v9);

        v2 = v10;
      }
    }
  }

}

void sub_1000E9048(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E90A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E91E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000E9200(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  int v25;
  void *v26;
  id v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint8_t *v32;
  uint8_t v33[8];
  uint8_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  int v42;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (!v4)
    {
      v15 = _MTLogCategoryFeedUpdate(0);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Data hash could not be created. Returning early.", v33, 2u);
      }

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "absoluteString"));
      objc_msgSend(WeakRetained, "_didFinishUpdatingFeedUrl:withError:", v17, 0);

      goto LABEL_23;
    }
    *(_QWORD *)v33 = 0;
    v34 = v33;
    v35 = 0x3032000000;
    v36 = sub_1000467EC;
    v37 = sub_100046A6C;
    v38 = 0;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1000E9688;
    v29[3] = &unk_1004A6690;
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "importContext"));
    v30 = v5;
    v31 = *(id *)(a1 + 32);
    v32 = v33;
    objc_msgSend(v5, "performBlockAndWait:", v29);
    v6 = (id)qword_1005674F8;
    objc_sync_enter(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1005674F8, "objectForKey:", *((_QWORD *)v34 + 5)));
    v8 = objc_msgSend(v4, "isEqualToString:", v7);

    objc_sync_exit(v6);
    v10 = _MTLogCategoryFeedUpdate(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "absoluteString"));
      *(_DWORD *)buf = 138412546;
      v40 = v12;
      v41 = 1024;
      v42 = v8 ^ 1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "feedHasChangedSinceLastUpdate: %@ %d", buf, 0x12u);

    }
    if ((v8 & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      v18 = objc_autoreleasePoolPush();
      v19 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      v14 = (void *)objc_claimAutoreleasedReturnValue(v19);
      objc_autoreleasePoolPop(v18);
    }
    v20 = _MTLogCategoryFeedUpdate(v13);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "absoluteString"));
      *(_DWORD *)buf = 138412546;
      v40 = v22;
      v41 = 1024;
      v42 = v8 ^ 1;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "feedShouldUpdate: %@ %d", buf, 0x12u);

    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "preProcessFeedHook:requestUrl:needsUpdate:", v14, *(_QWORD *)(a1 + 32), v8 ^ 1));
    v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "createdPodcastUUID"));
    if (v24 || (v24 = *((id *)v34 + 5)) != 0)
    {
      if (objc_msgSend(v23, "shouldContinue"))
      {
        objc_msgSend(WeakRetained, "processFeed:podcastUUID:requestUrl:useBackgroundFetch:needsUpdate:source:", v14, v24, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 72), v8 ^ 1, *(_QWORD *)(a1 + 64));
        v25 = 0;
        v26 = 0;
LABEL_20:
        if (((v8 | v25) & 1) == 0)
        {
          v27 = (id)qword_1005674F8;
          objc_sync_enter(v27);
          objc_msgSend((id)qword_1005674F8, "setObject:forKey:", v4, v24);
          objc_msgSend((id)objc_opt_class(WeakRetained), "saveSubscriptionMetadata");
          objc_sync_exit(v27);

        }
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "absoluteString"));
        objc_msgSend(WeakRetained, "_didFinishUpdatingFeedUrl:withError:", v28, v26);

        _Block_object_dispose(v33, 8);
LABEL_23:

        goto LABEL_24;
      }
      v25 = 0;
    }
    else
    {
      v25 = 1;
    }
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[FeedUpdaterObjcError preProcessHookDeniedUpdate](_TtC18PodcastsFoundation20FeedUpdaterObjcError, "preProcessHookDeniedUpdate"));
    goto LABEL_20;
  }
LABEL_24:

}

void sub_1000E962C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E9688(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForFeedUrl:", v3));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uuid"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

id sub_1000E9924(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "uniquenessHash");
}

id sub_1000E992C(uint64_t a1)
{
  IMPodcastParser *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  void *v17;

  v2 = objc_opt_new(IMPodcastParser);
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[IMPodcastParser parseWithData:](v2, "parseWithData:", *(_QWORD *)(a1 + 32)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[IMPodcastParser parseError](v2, "parseError"));

  if (v4)
  {
    v6 = _MTLogCategoryFeedUpdate(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(-[IMPodcastParser parseError](v2, "parseError"));
      v16 = 138412290;
      v17 = v8;
      v9 = "Feed parse error: %@";
LABEL_4:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v16, 0xCu);

    }
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "items"));
    v12 = objc_msgSend(v11, "count");

    if (v12)
    {
      v10 = v3;
      goto LABEL_8;
    }
    v15 = _MTLogCategoryFeedUpdate(v13);
    v7 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
      v16 = 138412290;
      v17 = v8;
      v9 = "Feed has zero items, skipping update to %@";
      goto LABEL_4;
    }
  }

  v10 = 0;
LABEL_8:

  return v10;
}

void sub_1000E9B40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E9BDC(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MTReachability sharedInstance](MTReachability, "sharedInstance"));
  objc_msgSend(v1, "showInternetUnreachableDialog");

}

void sub_1000E9FA0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void **v15;
  uint64_t v16;
  id (*v17)(uint64_t);
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint8_t buf[4];
  void *v23;

  v2 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
  LODWORD(v2) = objc_msgSend(v2, "isUpdatingFeedUrl:", v3);

  if ((_DWORD)v2)
  {
    v5 = _MTLogCategoryFeedUpdate(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
      *(_DWORD *)buf = 138412290;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "NOT STARTING feed update, as Feed %@ is ALREADY updating.", buf, 0xCu);

    }
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "importContext"));

    v15 = _NSConcreteStackBlock;
    v16 = 3221225472;
    v17 = sub_1000EA180;
    v18 = &unk_1004A6580;
    v19 = v9;
    v10 = *(id *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 64);
    v20 = v10;
    v21 = v11;
    v6 = v9;
    -[NSObject performBlock:](v6, "performBlock:", &v15);
    v12 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "absoluteString"));
    objc_msgSend(v12, "didStartUpdatingFeedUrl:cloudSyncUrl:", v13, v14);

    objc_msgSend(*(id *)(a1 + 32), "_startDownloadForFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:useBackgroundFetch:source:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 80), *(unsigned __int8 *)(a1 + 81), *(_QWORD *)(a1 + 72), v15, v16, v17, v18);
  }

}

id sub_1000EA180(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForFeedUrl:", v3));

  if (v4
    || (v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(a1 + 48))), v7 = +[MTStoreIdentifier isNotEmptyNumber:](MTStoreIdentifier, "isNotEmptyNumber:", v6), v6, v7)&& (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForStoreId:", *(_QWORD *)(a1 + 48)))) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    objc_msgSend(v4, "setLastFetchedDate:");

  }
  return objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
}

void sub_1000EA374(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v9)
  {
    v11 = _MTLogCategoryFeedUpdate(v9);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedDescription"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "userInfo"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", NSUnderlyingErrorKey));
      *(_DWORD *)buf = 138412546;
      v24 = v13;
      v25 = 2112;
      v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%@: Underlying error %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "feedDownloadedWithError:task:requestedUrl:", v10, 0, *(_QWORD *)(a1 + 40));
    v16 = *(void **)(a1 + 32);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
    objc_msgSend(v16, "_didFinishUpdatingFeedUrl:withError:", v17, v10);
  }
  else
  {
    v18 = *(void **)(a1 + 32);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000EA56C;
    v21[3] = &unk_1004AA888;
    v22 = v8;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000EA574;
    v19[3] = &unk_1004AA8B0;
    v20 = v7;
    objc_msgSend(v18, "preprocessFeedWithDataHashingBlock:feedCreationBlock:url:useBackgroundFetch:source:", v21, v19, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));

    v17 = v22;
  }

}

id sub_1000EA56C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000EA574(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "toFeed");
}

void sub_1000EA62C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000EA754(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000EA814(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v3 = objc_retainBlock(*(id *)(a1 + 40));
  objc_msgSend(v2, "addObject:", v3);

  return objc_msgSend(*(id *)(a1 + 32), "_queue_processNextPendingFeedIfPossible");
}

id sub_1000EA8D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_processNextPendingFeedIfPossible");
}

void sub_1000EAC0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000EAF14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000EB088(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:userInfo:", *(_QWORD *)(a1 + 32), objc_opt_class(MTBaseFeedManager), *(_QWORD *)(a1 + 40));

}

id sub_1000EBDE4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateAllPodcastsUserInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:", 0, 0, 1, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_1000EBEB4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  void *v18;
  id v19;
  _QWORD v20[5];
  void *v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForAreMediaAPI:](MTPodcast, "predicateForAreMediaAPI:", 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotImplicitlyFollowedPodcasts](MTPodcast, "predicateForNotImplicitlyFollowedPodcasts"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "AND:", v4));

  v6 = *(void **)(a1 + 32);
  v7 = kMTPodcastEntityName;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", kPodcastLastFetchedDate, 1));
  v21 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v21, 1));
  v20[0] = kPodcastUuid;
  v20[1] = kPodcastUpdateAvg;
  v20[2] = kPodcastFeedChangedDate;
  v20[3] = kPodcastStoreCollectionId;
  v20[4] = kPodcastTitle;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v20, 5));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectDictionariesInEntity:predicate:sortDescriptors:propertiesToFetch:includeObjectId:", v7, v5, v9, v10, 0));

  v15 = _NSConcreteStackBlock;
  v16 = 3221225472;
  v17 = sub_1000EC0D4;
  v18 = &unk_1004AA970;
  v19 = v2;
  v12 = v2;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", &v15);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = objc_msgSend(v12, "copy", v15, v16, v17, v18);
  (*(void (**)(uint64_t, id))(v13 + 16))(v13, v14);

}

void sub_1000EC0D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  double v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  double v28;
  int v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  _BOOL4 v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastFeedChangedDate));
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastUpdateAvg));
    v6 = (uint64_t)objc_msgSend(v5, "longLongValue");

    v7 = (double)v6 * 3.0;
    if (v7 < 1209600.0)
      v7 = 1209600.0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dateByAddingTimeInterval:", v7));
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v13 = v12;

    if (v10 >= v13)
    {
      if (v6 >= 14401)
      {
        if ((unint64_t)v6 >= 0x2A301)
        {
          v29 = (int)v6 / 86400;
          if ((int)v6 / 86400 >= 7)
            v29 = 7;
          v28 = (double)(86400 * v29);
        }
        else
        {
          v28 = 86400.0;
        }
      }
      else
      {
        v28 = 3600.0;
      }
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dateByAddingTimeInterval:", v28));
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      v31 = objc_msgSend(v30, "compare:", v16);

      if (v31 != (id)-1)
      {
        v33 = _MTLogCategoryFeedUpdate(v32);
        v34 = objc_claimAutoreleasedReturnValue(v33);
        v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
        v36 = kPodcastUuid;
        if (v35)
        {
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastUuid));
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastTitle));
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastStoreCollectionId));
          *(_DWORD *)buf = 138544642;
          v43 = v37;
          v44 = 2112;
          v45 = v38;
          v46 = 2112;
          v47 = v39;
          v48 = 2112;
          v49 = v4;
          v50 = 1024;
          v51 = (int)v28 / 86400;
          v52 = 1024;
          v53 = (int)(v28 - (double)(86400 * v51)) / 3600;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "MAPI Expected Shows - 🟢 Updating expected show %{public}@ - %@ storeId: %@, feed last changed date: %@, update average: %dd %dh", buf, 0x36u);

        }
        v40 = *(void **)(a1 + 32);
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", v36));
        objc_msgSend(v40, "addObject:", v41);

      }
    }
    else
    {
      v15 = _MTLogCategoryFeedUpdate(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastUuid));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastTitle));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastStoreCollectionId));
        *(_DWORD *)buf = 138544130;
        v43 = v17;
        v44 = 2112;
        v45 = v18;
        v46 = 2112;
        v47 = v19;
        v48 = 2112;
        v49 = v4;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "MAPI Expected Shows - 💤 Skipping dormant show %{public}@ - %@ storeId: %@, feed last changed date: %@. Not including in expected to update feeds.", buf, 0x2Au);

      }
    }
  }
  else
  {
    v20 = _MTLogCategoryFeedUpdate(0);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    v23 = kPodcastUuid;
    if (v22)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastUuid));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastTitle));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastStoreCollectionId));
      *(_DWORD *)buf = 138544130;
      v43 = v24;
      v44 = 2112;
      v45 = v25;
      v46 = 2112;
      v47 = v26;
      v48 = 2112;
      v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "MAPI Expected Shows - 🟡 Updating show with no change date %{public}@ - %@ storeId: %@, feed last changed date: %@", buf, 0x2Au);

    }
    v27 = *(void **)(a1 + 32);
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", v23));
    objc_msgSend(v27, "addObject:", v16);
  }

}

void sub_1000EC678(uint64_t a1)
{
  void *v2;
  id v3;
  _QWORD v4[5];
  id v5;
  uint64_t v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000EC6F4;
  v4[3] = &unk_1004AA9C0;
  v6 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  objc_msgSend(v2, "_fetchMediaAPIShowsExpectedToUpdate:", v4);

}

void sub_1000EC6F4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;

  v3 = a2;
  if ((unint64_t)objc_msgSend(v3, "count") > *(_QWORD *)(a1 + 48))
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subarrayWithRange:", 0));

    v3 = (id)v4;
  }
  v23 = 0;
  v24 = &v23;
  v25 = 0x3032000000;
  v26 = sub_1000467FC;
  v27 = sub_100046A74;
  v28 = &__NSArray0__struct;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "importContext"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", kMTPodcastEntityName));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v3));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForPodcastUuids:](MTPodcast, "predicateForPodcastUuids:", v8));
  objc_msgSend(v7, "setPredicate:", v9);

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1000EC93C;
  v19[3] = &unk_1004A6F10;
  v22 = &v23;
  v10 = v6;
  v20 = v10;
  v11 = v7;
  v21 = v11;
  objc_msgSend(v10, "performBlockAndWait:", v19);
  v12 = v24[5];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000EC978;
  v16[3] = &unk_1004AA998;
  v13 = *(id *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 32);
  v18 = v13;
  v16[4] = v14;
  v15 = v3;
  v17 = v15;
  +[BatchFeedRequestController fetchOutOfDateShowUUIDsWith:completionHandler:](_TtC18PodcastsFoundation26BatchFeedRequestController, "fetchOutOfDateShowUUIDsWith:completionHandler:", v12, v16);

  _Block_object_dispose(&v23, 8);
}

void sub_1000EC920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EC93C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "executeFetchRequest:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000EC978(id *a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v5 = a2;
  if (a3)
  {
    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "workQueue"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000ECA54;
    v9[3] = &unk_1004A6618;
    v7 = a1[5];
    v8 = a1[4];
    v10 = v7;
    v11 = v8;
    v12 = v5;
    v13 = a1[6];
    dispatch_async(v6, v9);

  }
}

id sub_1000ECA54(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  int v6;
  id v7;

  v2 = _MTLogCategoryFeedUpdate(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    v6 = 134217984;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found %ld podcasts expected to update.", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(*(id *)(a1 + 40), "_updatePodcastsWithUUIDs:userInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:", *(_QWORD *)(a1 + 48), 0, 1, 1, 6, *(_QWORD *)(a1 + 56));
}

void sub_1000ECBB0(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000ECC20;
  v2[3] = &unk_1004AA9E8;
  v1 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  v4 = v1;
  objc_msgSend(v3, "_fetchMediaAPIShowsExpectedToUpdate:", v2);

}

void sub_1000ECC20(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD block[4];
  id v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000ECCCC;
  block[3] = &unk_1004A8C40;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v9 = v3;
  v10 = v5;
  v11 = v6;
  v7 = v3;
  dispatch_async(v4, block);

}

void sub_1000ECCCC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint8_t buf[4];
  id v14;

  v2 = _MTLogCategoryFeedUpdate(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134217984;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found %ld podcasts expected to update.", buf, 0xCu);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsAction fetchFeedsExpectedToUpdate](MTFeedUpdateMetricsAction, "fetchFeedsExpectedToUpdate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateMetricsDataKey podcastCount](MTFeedUpdateMetricsDataKey, "podcastCount"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count", v6)));
  v12 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  +[IMMetrics recordUserAction:dataSource:withData:](IMMetrics, "recordUserAction:dataSource:withData:", v5, 0, v8);

  v9 = *(void **)(a1 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v9, "_updatePodcastsWithUUIDs:userInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:", v10, 0, 1, 1, 6, *(_QWORD *)(a1 + 48));

}

void sub_1000ECEFC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  _QWORD block[4];
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char v15;

  v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000ECFD4;
    block[3] = &unk_1004AAA10;
    v7 = v5;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v11 = v7;
    v12 = v8;
    v15 = *(_BYTE *)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 48);
    v13 = v9;
    dispatch_async(v6, block);

  }
}

void sub_1000ECFD4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint8_t buf[4];
  id v12;

  v2 = _MTLogCategoryFeedUpdate(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134217984;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found %ld out of date store shows.", buf, 0xCu);
  }

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v7 = *(unsigned __int8 *)(a1 + 64);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000ED0F4;
  v9[3] = &unk_1004A7948;
  v8 = *(_QWORD *)(a1 + 56);
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v5, "_updatePodcastsWithUUIDs:userInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:", v6, v7, 1, 1, v8, v9);

}

uint64_t sub_1000ED0F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000ED190(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000ED274(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  id v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForAreMediaAPI:](MTPodcast, "predicateForAreMediaAPI:", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenPodcasts](MTPodcast, "predicateForNotHiddenPodcasts"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "AND:", v3));

  if (!*(_BYTE *)(a1 + 56))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotImplicitlyFollowedPodcasts](MTPodcast, "predicateForNotImplicitlyFollowedPodcasts"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "AND:", v5));

    v4 = (void *)v6;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", kMTPodcastEntityName));
  objc_msgSend(v7, "setPredicate:", v4);
  v30 = kPodcastUuid;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v30, 1));
  objc_msgSend(v7, "setPropertiesToFetch:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "executeFetchRequest:", v7));
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v26 != v13)
          objc_enumerationMutation(v10);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i), "uuid"));
        objc_msgSend(v9, "addObject:", v15);

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v12);
  }
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workQueue"));
  v20[0] = _NSConcreteStackBlock;
  v20[2] = sub_1000ED50C;
  v20[3] = &unk_1004A7D58;
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(void **)(a1 + 48);
  v21 = v9;
  v22 = v17;
  v20[1] = 3221225472;
  v24 = *(_BYTE *)(a1 + 57);
  v23 = v18;
  v19 = v9;
  dispatch_async(v16, v20);

}

id sub_1000ED50C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  int v6;
  id v7;

  v2 = _MTLogCategoryFeedUpdate(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    v6 = 134217984;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found %ld non-store shows.", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(*(id *)(a1 + 40), "_updatePodcastsWithUUIDs:userInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:", *(_QWORD *)(a1 + 32), 0, *(unsigned __int8 *)(a1 + 56), 1, 5, *(_QWORD *)(a1 + 48));
}

id sub_1000ED6B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updatePodcastsWithUUIDs:userInitiated:useBackgroundFetch:source:startedUpdatesCallback:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), 0, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void sub_1000ED84C(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  uint8_t buf[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feedManager"));
  v3 = objc_msgSend(v2, "abortUpdatesIfNetworkUnreachable:", *(unsigned __int8 *)(a1 + 72));

  if (v3)
  {
    v5 = _MTLogCategoryFeedUpdate(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Skipping feed update due to network not being reachable", buf, 2u);
    }

    if (*(_QWORD *)(a1 + 56))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000ED970;
      block[3] = &unk_1004A6378;
      v8 = *(id *)(a1 + 56);
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_updatePodcastWithUUID:triggerBy:userInitiated:forced:forceBootstrap:useBackgroundFetch:source:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56));
  }
}

void sub_1000ED970(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(+[FeedUpdaterObjcError internetNotReachable](_TtC18PodcastsFoundation20FeedUpdaterObjcError, "internetNotReachable"));
    (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

  }
}

void sub_1000EDAD8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint8_t buf[4];
  void *v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForPodcastStoreId:](MTPodcast, "predicateForPodcastStoreId:", *(_QWORD *)(a1 + 56)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectInEntity:predicate:", kMTPodcastEntityName, v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  v5 = _MTLogCategoryCloudSync(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sync feed update from push notification for podcast %{public}@", buf, 0xCu);
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateManager sharedInstance](MTFeedUpdateManager, "sharedInstance"));
    objc_msgSend(v8, "_updatePodcastWithUUID:triggerBy:userInitiated:forced:forceBootstrap:source:completion:", v4, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 72), *(unsigned __int8 *)(a1 + 73), 0, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48));
    goto LABEL_9;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v9 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 134217984;
    v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Can't find podcast UUID from store ID %lld", buf, 0xCu);
  }

  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[FeedUpdaterObjcError localShowMissing](_TtC18PodcastsFoundation20FeedUpdaterObjcError, "localShowMissing"));
    (*(void (**)(uint64_t, _QWORD, void *))(v10 + 16))(v10, 0, v8);
LABEL_9:

  }
}

void sub_1000EDE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EDE68(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  _QWORD block[5];
  __int128 v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  void *v24;

  v2 = kMTPodcastEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", kPodcastUpdatedDate, 1));
  v24 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v24, 1));
  v7 = kPodcastUuid;
  v23 = kPodcastUuid;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v23, 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectDictionariesInEntity:predicate:sortDescriptors:propertiesToFetch:includeObjectId:", v2, v4, v6, v8, 0));

  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "valueForKey:", v7));
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "workQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000EE030;
  block[3] = &unk_1004AAB00;
  v14 = *(_QWORD *)(a1 + 48);
  v21 = *(_BYTE *)(a1 + 80);
  v22 = *(_WORD *)(a1 + 81);
  v15 = *(_QWORD *)(a1 + 72);
  v17 = *(_OWORD *)(a1 + 56);
  block[4] = v14;
  v20 = v15;
  v16 = (id)v17;
  v19 = v17;
  dispatch_async(v13, block);

}

void sub_1000EE030(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_updatePodcastsWithUUIDs:userInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), *(unsigned __int8 *)(a1 + 66), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count"))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v2, "timeIntervalSinceReferenceDate");
    objc_msgSend(v3, "setDouble:forKey:", kMTAllPodcastsLastUpdatedDate);

  }
}

void sub_1000EE0E4(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  id v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000EE160;
    v3[3] = &unk_1004A9D58;
    v4 = *(id *)(a1 + 32);
    v5 = a2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

  }
}

uint64_t sub_1000EE160(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1000EE170(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD block[4];
  id v21;
  uint8_t *v22;
  _QWORD v23[4];
  NSObject *v24;
  uint8_t *v25;
  _QWORD v26[5];
  NSObject *v27;
  uint8_t *v28;
  uint64_t v29;
  char v30;
  __int16 v31;
  uint8_t buf[8];
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = a2;
  v7 = a4;
  if (v7 || (objc_msgSend(v6, "BOOLValue") & 1) == 0)
  {
    v18 = _MTLogCategoryFeedUpdate();
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Batch fetch bag value is off. Updating all podcasts through legacy path.", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "_unsafe_updateAllPodcastsUserInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:", *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 58), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v8 = dispatch_group_create();
    *(_QWORD *)buf = 0;
    v33 = buf;
    v34 = 0x2020000000;
    v35 = 0;
    dispatch_group_enter(v8);
    v9 = *(void **)(a1 + 32);
    v10 = *(unsigned __int8 *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 48);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1000EE3B8;
    v26[3] = &unk_1004AAB78;
    v30 = v10;
    v31 = *(_WORD *)(a1 + 57);
    v28 = buf;
    v29 = v11;
    v26[4] = v9;
    v12 = v8;
    v27 = v12;
    objc_msgSend(v9, "_updateAllMediaAPIPodcastsUserInitiated:source:completion:", v10, v11, v26);
    dispatch_group_enter(v12);
    v13 = *(void **)(a1 + 32);
    v14 = *(unsigned __int8 *)(a1 + 56);
    v15 = *(unsigned __int8 *)(a1 + 57);
    v16 = *(_QWORD *)(a1 + 48);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1000EE53C;
    v23[3] = &unk_1004AAB50;
    v25 = buf;
    v17 = v12;
    v24 = v17;
    objc_msgSend(v13, "_updateAllNonMediaAPIPodcastsUserInitiated:forced:source:started:", v14, v15, v16, v23);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000EE558;
    block[3] = &unk_1004AABA0;
    v22 = buf;
    v21 = *(id *)(a1 + 40);
    dispatch_group_notify(v17, (dispatch_queue_t)&_dispatch_main_q, block);

    _Block_object_dispose(buf, 8);
  }

}

void sub_1000EE3A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1000EE3B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __int128 v14;
  _QWORD v15[4];
  __int128 v16;
  uint8_t buf[4];
  id v18;

  v5 = a3;
  if (v5)
  {
    v6 = _MTLogCategoryFeedUpdate();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Batch fetch failed. Updating all podcasts through legacy path. Error - %@", buf, 0xCu);
    }

    v8 = *(void **)(a1 + 32);
    v9 = *(unsigned __int8 *)(a1 + 64);
    v10 = *(unsigned __int8 *)(a1 + 65);
    v11 = *(unsigned __int8 *)(a1 + 66);
    v12 = *(_QWORD *)(a1 + 56);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000EE520;
    v15[3] = &unk_1004AAB50;
    v14 = *(_OWORD *)(a1 + 40);
    v13 = (id)v14;
    v16 = v14;
    objc_msgSend(v8, "_unsafe_updateAllPodcastsUserInitiated:forced:useBackgroundFetch:source:startedUpdatesCallback:", v9, v10, v11, v12, v15);

  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += a2;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void sub_1000EE520(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000EE53C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1000EE558(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = _MTLogCategoryFeedUpdate();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v6 = 134217984;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Initiated the update of %ld podcast feeds.", (uint8_t *)&v6, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000EE62C(uint64_t a1, char a2)
{
  NSObject *v4;
  id v5;
  __int128 v6;
  _QWORD block[4];
  __int128 v8;
  char v9;

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000EE6CC;
  block[3] = &unk_1004AABF0;
  v9 = a2;
  v6 = *(_OWORD *)(a1 + 40);
  v5 = (id)v6;
  v8 = v6;
  dispatch_async(v4, block);

}

void sub_1000EE6CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1000EE6F0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = _MTLogCategoryFeedUpdate();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v6 = 134217984;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Initiated the update of %ld podcast feeds.", (uint8_t *)&v6, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000EE7E0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1000EE800(uint64_t a1)
{
  uint64_t v2;
  id v3;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v3 = (id)objc_claimAutoreleasedReturnValue(+[MTFeedManager sharedInstance](MTFeedManager, "sharedInstance"));
  LOBYTE(v2) = *(_BYTE *)(a1 + 90);
  objc_msgSend(v3, "updateFeedForFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:completion:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), v2, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48));

}

void sub_1000EEB74(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v1, "reloadData");

}

void sub_1000EF8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  id v9;

  if (a2)
  {
    v3 = _MTLogCategoryFeedUpdate(objc_msgSend(*(id *)(a1 + 32), "setInitialFeedUpdateCount:", a2));
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*(id *)(a1 + 32), "initialFeedUpdateCount");
      v8 = 134217984;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Did begin updating %lld feeds for background task", (uint8_t *)&v8, 0xCu);
    }

    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    objc_msgSend(*(id *)(a1 + 32), "setFeedUpdateBeginTime:");
    objc_msgSend(*(id *)(a1 + 32), "setPendingCompletion:", *(_QWORD *)(a1 + 40));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v6, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "didFinishUpdatingAllFeedsNotification:", CFSTR("MTFeedUpdateDidEndUpdatingAllFeeds"), 0);

  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, 1);
  }
}

void sub_1000F0D3C()
{
  sub_1000F0D48(&stru_1004AAD70);
}

void sub_1000F0D48(void *a1)
{
  uint64_t v1;
  id v2;

  v1 = qword_100567510;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_100567510, &stru_1004AAD30);
  objc_msgSend((id)qword_100567518, "start");
  objc_msgSend((id)qword_100567518, "runBlockWhenReady:", v2);

}

void sub_1000F0DB4(id a1)
{
  MTHostWindowReadyTrackingController *v1;
  void *v2;

  v1 = objc_opt_new(MTHostWindowReadyTrackingController);
  v2 = (void *)qword_100567518;
  qword_100567518 = (uint64_t)v1;

}

id sub_1000F0FAC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performPendingBlocksIfReady");
}

void sub_1000F1018(id a1, id a2)
{
  (*((void (**)(id))a2 + 2))(a2);
}

id sub_1000F2480(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[3];
  _QWORD v9[3];

  v8[0] = CFSTR("box-height");
  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("height")));
  v9[0] = v3;
  v8[1] = CFSTR("box-width");
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("width")));
  v9[1] = v4;
  v8[2] = CFSTR("url");
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:"));

  v9[2] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 3));

  return v6;
}

void sub_1000F2B38(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F2B40(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F2DA0(id a1)
{
  NSBundle *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v1 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(MTRestrictionsUtil));
  v11 = (id)objc_claimAutoreleasedReturnValue(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("RESTRICTIONS_ON_LAUNCH"), &stru_1004C6D40, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("RESTRICTIONS_MESSAGE"), &stru_1004C6D40, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1004C6D40, 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v2, v3, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v4, 0, 0));
  objc_msgSend(v5, "addAction:", v6);
  objc_msgSend(v5, "setPreferredAction:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "delegate"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "window"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "rootViewController"));

  objc_msgSend(v10, "presentViewController:animated:completion:", v5, 1, 0);
}

NSString *__cdecl sub_1000F4050(id a1, NSSortDescriptor *a2)
{
  return -[NSSortDescriptor key](a2, "key");
}

void sub_1000F468C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F46A4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  uint64_t v22;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTRecencyUtil upNextForPodcastUuid:excludeExplicit:ctx:](MTRecencyUtil, "upNextForPodcastUuid:excludeExplicit:ctx:", v2, 0, *(_QWORD *)(a1 + 40)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "episodeUuid"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextEpisodeUuid"));
  v6 = _MTLogCategoryDefault(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "episodeUuid"));
    objc_msgSend(v3, "modifiedDate");
    v17 = 138543874;
    v18 = v8;
    v19 = 2114;
    v20 = v9;
    v21 = 2050;
    v22 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "UpNext result from update cursor position for podcast %{public}@: episodeUuid: %{public}@ at %{public}f", (uint8_t *)&v17, 0x20u);

  }
  v12 = _MTLogCategoryDefault(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "episodeUuid"));
    v17 = 138543618;
    v18 = v5;
    v19 = 2114;
    v20 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "UpNext result updating podcast nextEpisodeUuid from %{public}@ to %{public}@", (uint8_t *)&v17, 0x16u);

  }
  if (v5 != v4 && (objc_msgSend(v5, "isEqualToString:", v4) & 1) == 0)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeForUuid:", v4));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeForUuid:", v5));
    if (objc_msgSend(v16, "listenNowEpisode"))
    {
      objc_msgSend(v16, "setListenNowEpisode:", 0);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
    if (v15 && (objc_msgSend(v15, "listenNowEpisode") & 1) == 0)
    {
      objc_msgSend(v15, "setListenNowEpisode:", 1);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      objc_msgSend(v3, "modifiedDate");
      objc_msgSend(*(id *)(a1 + 32), "setModifiedDate:");
    }

  }
  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 40), "saveInCurrentBlock");

}

void sub_1000F4A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F4A6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForFeedUrl:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000F4E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1000F4E4C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", kMTEpisodeEntityName));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodesWithSeasonNumbersOnPodcastUuid:](MTEpisode, "predicateForEpisodesWithSeasonNumbersOnPodcastUuid:", v3));
  objc_msgSend(v2, "setPredicate:", v4);

  objc_msgSend(v2, "setFetchLimit:", 1);
  v5 = *(void **)(a1 + 40);
  v8 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v2, &v8));
  v7 = v8;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v6, "count") != 0;

  objc_msgSend(v7, "logAndThrow:", 0);
}

void sub_1000F505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F5074(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_fetchRequestForDistinctSeasons"));
  v3 = *(void **)(a1 + 40);
  v9 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v2, &v9));
  v5 = v9;
  objc_msgSend(v5, "logAndThrow:", 0);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", kEpisodeSeasonNumber));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_1000F523C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F5254(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predicateForPodcast:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodeType:](MTEpisode, "predicateForEpisodeType:", 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForSeasonNumberWithNoEpisodeNumber:](MTEpisode, "predicateForSeasonNumberWithNoEpisodeNumber:", *(_QWORD *)(a1 + 64)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "AND:", v2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "AND:", v3));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode sortDescriptorsForPubDateAscending:](MTEpisode, "sortDescriptorsForPubDateAscending:", 0));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:limit:", kMTEpisodeEntityName, v5, v6, 0, 1));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1000F5B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F5B70(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleShowNotificationsDebugMenuAction");

}

void sub_1000F5E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000F5E60(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(a1 + 32), "isAudio");
  if ((result & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    result = objc_msgSend(*(id *)(a1 + 32), "isVideo");
    if ((result & 1) != 0)
    {
      v3 = 2;
    }
    else
    {
      result = objc_msgSend(*(id *)(a1 + 32), "isExternalType");
      if (!(_DWORD)result)
        return result;
      v3 = 3;
    }
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v3;
  return result;
}

void sub_1000F5F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000F5F98(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(a1 + 32), "isDownloaded");
  if ((result & 1) != 0)
  {
    v3 = 2;
  }
  else
  {
    if (!*(_QWORD *)(a1 + 32))
      return result;
    v3 = 1;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v3;
  return result;
}

BOOL sub_1000F75A8(uint64_t a1, void *a2, unint64_t a3)
{
  void *v5;
  _BOOL8 v6;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "episodeUuid"));
  if (objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32)))
    v6 = (unint64_t)objc_msgSend(*(id *)(a1 + 40), "count") > a3;
  else
    v6 = 0;

  return v6;
}

BOOL sub_1000F79F4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (unint64_t)objc_msgSend(*(id *)(a1 + 32), "upNextOffset") <= a3
      && (unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") > a3;
}

void sub_1000F7CC4(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("up_next_%@"), *(_QWORD *)(a1 + 32)));
  v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 48), "count")));
  objc_msgSend(v2, "setValue:forKey:", v3, CFSTR("count"));

  +[IMMetrics recordUserAction:dataSource:withData:](IMMetrics, "recordUserAction:dataSource:withData:", v4, *(_QWORD *)(a1 + 56), v2);
}

void sub_1000F7E6C(uint64_t a1)
{
  id v2;
  void *v3;
  MTPlayerItemList *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("up_next_%@"), *(_QWORD *)(a1 + 32)));
  v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 48), "count")));
  objc_msgSend(v2, "setValue:forKey:", v3, CFSTR("count"));

  v4 = -[MTPlayerItemList initWithPlayerItems:]([MTPlayerItemList alloc], "initWithPlayerItems:", *(_QWORD *)(a1 + 56));
  +[IMMetrics recordUserAction:dataSource:withData:](IMMetrics, "recordUserAction:dataSource:withData:", v5, v4, v2);

}

void sub_1000F8150(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_encodedUpNext"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, 0));
  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "_filePath");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v2, "writeToFile:atomically:", v4, 1);

}

void sub_1000F87DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F87F4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 48), "setPlayed:manually:forUserActionOnEpisode:saveChanges:", *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), v2, 1);

}

void sub_1000F8970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F8988(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 48), "setPlayState:manually:forUserActionOnEpisode:saveChanges:", *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), v2, 1);

}

void sub_1000F9EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1000F9F28(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1000F9F84(uint64_t a1)
{
  id WeakRetained;

  if (*(_BYTE *)(a1 + 40))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

void sub_1000FA40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000FA448(id *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  _QWORD v59[4];
  id v60;
  id v61;
  id v62;
  _QWORD v63[4];
  id v64;
  _QWORD v65[4];
  id v66;
  _QWORD v67[4];
  id v68;
  _QWORD v69[4];
  id v70;
  _QWORD v71[4];
  id v72;
  _QWORD v73[4];
  id v74;
  _QWORD v75[4];
  id v76;
  _QWORD v77[3];
  _QWORD v78[3];

  v1 = a1[4];
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "playlistUuid"));
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "playlistForUuid:", v2));

  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "defaultSettings"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "title"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("TITLE_PLACEHOLDER"), &stru_1004C6D40, 0));
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472;
  v75[2] = sub_1000FAF68;
  v75[3] = &unk_1004AB080;
  objc_copyWeak(&v76, a1 + 7);
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetting textSettingWithInitialValue:placeholder:identifier:changeHandler:](MTSetting, "textSettingWithInitialValue:placeholder:identifier:changeHandler:", v3, v5, CFSTR("title"), v75));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist containerOrderOptionArray:](MTPlaylist, "containerOrderOptionArray:", 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist containerOrderOptionArray:](MTPlaylist, "containerOrderOptionArray:", 1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist containerOrderOptionValues](MTPlaylist, "containerOrderOptionValues"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTOptionsDescription optionsWithLongTitles:shortTitles:valueList:](MTOptionsDescription, "optionsWithLongTitles:shortTitles:valueList:", v6, v7, v8));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("Play Order"), &stru_1004C6D40, 0));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("PLAY_ORDER_HEADER"), &stru_1004C6D40, 0));
  LODWORD(v7) = objc_msgSend(v57, "containerOrder");
  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472;
  v73[2] = sub_1000FAFB0;
  v73[3] = &unk_1004AB0A8;
  objc_copyWeak(&v74, a1 + 7);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetting optionSettingWithTitle:headerTitle:footerText:initialValue:optionDescription:identifier:changeHandler:](MTSetting, "optionSettingWithTitle:headerTitle:footerText:initialValue:optionDescription:identifier:changeHandler:", v11, v13, 0, (int)v7, v9, CFSTR("order"), v73));

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "localizedStringForKey:value:table:", CFSTR("Group by Show"), &stru_1004C6D40, 0));
  LODWORD(v8) = objc_msgSend(v57, "isUngroupedList");
  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472;
  v71[2] = sub_1000FAFEC;
  v71[3] = &unk_1004AB0D0;
  objc_copyWeak(&v72, a1 + 7);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetting switchSettingWithTitle:initialValue:identifier:changeHandler:](MTSetting, "switchSettingWithTitle:initialValue:identifier:changeHandler:", v16, v8 ^ 1, CFSTR("groupBy"), v71));

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("Station"), &stru_1004C6D40, 0));
  v78[0] = v54;
  v78[1] = v14;
  v78[2] = v17;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v78, 3));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[MTSettingsGroup groupWithTitle:footerText:settings:](MTSettingsGroup, "groupWithTitle:footerText:settings:", v19, 0, v20));

  objc_msgSend(a1[6], "setObject:forKey:", v21, CFSTR("station"));
  objc_destroyWeak(&v72);

  objc_destroyWeak(&v74);
  objc_destroyWeak(&v76);
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcastPlaylistSettings episodesOptionArray:defaultValue:](MTPodcastPlaylistSettings, "episodesOptionArray:defaultValue:", 0, 0));
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "subarrayWithRange:", 1, (char *)objc_msgSend(v22, "count") - 1));

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcastPlaylistSettings episodesOptionArray:defaultValue:](MTPodcastPlaylistSettings, "episodesOptionArray:defaultValue:", 1, 0));
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "subarrayWithRange:", 1, (char *)objc_msgSend(v23, "count") - 1));

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcastPlaylistSettings episodesOptionValues](MTPodcastPlaylistSettings, "episodesOptionValues"));
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithOrderedSet:range:copyItems:](NSOrderedSet, "orderedSetWithOrderedSet:range:copyItems:", v24, 1, (char *)objc_msgSend(v24, "count") - 1, 0));

  v51 = (void *)objc_claimAutoreleasedReturnValue(+[MTOptionsDescription optionsWithLongTitles:shortTitles:valueList:](MTOptionsDescription, "optionsWithLongTitles:shortTitles:valueList:", v55, v53, v52));
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "localizedStringForKey:value:table:", CFSTR("Episodes Header"), &stru_1004C6D40, 0));
  v27 = objc_msgSend(v56, "episodesToShow");
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472;
  v69[2] = sub_1000FB028;
  v69[3] = &unk_1004AB0A8;
  objc_copyWeak(&v70, a1 + 7);
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetting optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:](MTSetting, "optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:", v26, 0, v27, v51, CFSTR("episodes"), v69));

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcastPlaylistSettings mediaOptionArray:](MTPodcastPlaylistSettings, "mediaOptionArray:", 0));
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcastPlaylistSettings mediaOptionArray:](MTPodcastPlaylistSettings, "mediaOptionArray:", 1));
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcastPlaylistSettings mediaOptionValues](MTPodcastPlaylistSettings, "mediaOptionValues"));
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[MTOptionsDescription optionsWithLongTitles:shortTitles:valueList:](MTOptionsDescription, "optionsWithLongTitles:shortTitles:valueList:", v29, v30, v31));

  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "localizedStringForKey:value:table:", CFSTR("Media Type"), &stru_1004C6D40, 0));
  LODWORD(v30) = objc_msgSend(v56, "mediaType");
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472;
  v67[2] = sub_1000FB094;
  v67[3] = &unk_1004AB0A8;
  objc_copyWeak(&v68, a1 + 7);
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetting optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:](MTSetting, "optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:", v34, 0, v30, v32, CFSTR("type"), v67));

  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "localizedStringForKey:value:table:", CFSTR("Hide Played Episodes"), &stru_1004C6D40, 0));
  LODWORD(v31) = objc_msgSend(v56, "showPlayedEpisodes");
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472;
  v65[2] = sub_1000FB100;
  v65[3] = &unk_1004AB0D0;
  objc_copyWeak(&v66, a1 + 7);
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetting switchSettingWithTitle:initialValue:identifier:changeHandler:](MTSetting, "switchSettingWithTitle:initialValue:identifier:changeHandler:", v37, v31 ^ 1, CFSTR("played"), v65));

  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "localizedStringForKey:value:table:", CFSTR("Include"), &stru_1004C6D40, 0));
  v77[0] = v28;
  v77[1] = v35;
  v77[2] = v38;
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v77, 3));
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[MTSettingsGroup groupWithTitle:footerText:settings:](MTSettingsGroup, "groupWithTitle:footerText:settings:", v40, 0, v41));

  objc_msgSend(a1[6], "setObject:forKey:", v42, CFSTR("include"));
  objc_destroyWeak(&v66);

  objc_destroyWeak(&v68);
  objc_destroyWeak(&v70);

  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "localizedStringForKey:value:table:", CFSTR("Add Podcasts"), &stru_1004C6D40, 0));
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "titleForCurrentPodcasts"));
  v63[0] = _NSConcreteStackBlock;
  v63[1] = 3221225472;
  v63[2] = sub_1000FB16C;
  v63[3] = &unk_1004A7570;
  objc_copyWeak(&v64, a1 + 7);
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetting buttonSettingWithTitle:detailText:identifier:changeHandler:](MTSetting, "buttonSettingWithTitle:detailText:identifier:changeHandler:", v44, v45, CFSTR("add"), v63));

  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "localizedStringForKey:value:table:", CFSTR("PODCASTS_HEADER"), &stru_1004C6D40, 0));
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_1000FB198;
  v59[3] = &unk_1004AB168;
  v60 = a1[4];
  objc_copyWeak(&v62, a1 + 7);
  v49 = v46;
  v61 = v49;
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[MTSettingsGroup groupWithTitle:footerText:settingsHandler:](MTSettingsGroup, "groupWithTitle:footerText:settingsHandler:", v48, 0, v59));

  objc_msgSend(a1[6], "setObject:forKey:", v50, CFSTR("podcasts"));
  objc_destroyWeak(&v62);

  objc_destroyWeak(&v64);
}

void sub_1000FAE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void sub_1000FAF68(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "updateTitle:", v3);

}

void sub_1000FAFB0(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateContainerOrder:", a2);

}

void sub_1000FAFEC(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateUngroupedListSetting:", a2);

}

void sub_1000FB028(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = kPlaylistSettingEpisodesToShow;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  objc_msgSend(WeakRetained, "updateSetting:value:", v3, v4);

}

void sub_1000FB094(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = kPlaylistSettingMediaType;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  objc_msgSend(WeakRetained, "updateSetting:value:", v3, v4);

}

void sub_1000FB100(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = kPlaylistSettingShowPlayedEpisodes;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2 ^ 1u));
  objc_msgSend(WeakRetained, "updateSetting:value:", v3, v4);

}

void sub_1000FB16C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "showAddPodcastsSheet");

}

id sub_1000FB198(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  void **v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = *(void **)(a1 + 32);
  v7 = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_1000FB298;
  v10 = &unk_1004AB140;
  v11 = v3;
  objc_copyWeak(&v14, (id *)(a1 + 48));
  v4 = v2;
  v12 = v4;
  v13 = *(id *)(a1 + 40);
  objc_msgSend(v11, "performBlockAndWait:", &v7);
  v5 = objc_msgSend(v4, "copy", v7, v8, v9, v10);

  objc_destroyWeak(&v14);
  return v5;
}

void sub_1000FB280(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000FB298(uint64_t a1)
{
  void *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  void *i;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id obj;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id *from;
  void *v25;
  id v26;
  void *v27;
  _QWORD v29[4];
  id v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];

  v1 = *(void **)(a1 + 32);
  from = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "playlistUuid"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "playlistForUuid:", v3));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "podcasts"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "defaultSettings"));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 48));
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  obj = v4;
  v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v26)
  {
    v23 = *(_QWORD *)v33;
    v22 = kPlaylistSettingPodcast;
    v21 = kPlaylistSettingPlaylist;
    v20 = kMTPodcastPlaylistSettingsEntityName;
    do
    {
      for (i = 0; i != v26; i = (char *)i + 1)
      {
        if (*(_QWORD *)v33 != v23)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcastPlaylistSettings episodesOptionArray:defaultValue:](MTPodcastPlaylistSettings, "episodesOptionArray:defaultValue:", 0, objc_msgSend(v27, "episodesToShow")));
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcastPlaylistSettings episodesOptionArray:defaultValue:](MTPodcastPlaylistSettings, "episodesOptionArray:defaultValue:", 1, objc_msgSend(v27, "episodesToShow")));
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcastPlaylistSettings episodesOptionValues](MTPodcastPlaylistSettings, "episodesOptionValues"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[MTOptionsDescription optionsWithLongTitles:shortTitles:valueList:footerTextCallback:headerTextCallback:](MTOptionsDescription, "optionsWithLongTitles:shortTitles:valueList:footerTextCallback:headerTextCallback:", v7, v8, v9, 0, &stru_1004AB0F0));

        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K = %@ AND %K = %@"), v22, v6, v21, v25));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:", v20, v11, 0, 1));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lastObject"));
        if ((objc_msgSend(v13, "tracksDefault") & 1) != 0)
          v14 = 6;
        else
          v14 = (uint64_t)objc_msgSend(v13, "episodesToShow");
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "title"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "uuid"));
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_1000FB6C8;
        v29[3] = &unk_1004AB118;
        objc_copyWeak(&v31, from);
        v17 = v13;
        v30 = v17;
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[MTSetting optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:](MTSetting, "optionSettingWithTitle:footerText:initialValue:optionDescription:identifier:changeHandler:", v15, 0, v14, v10, v16, v29));

        objc_msgSend(*(id *)(a1 + 40), "addObject:", v18);
        objc_destroyWeak(&v31);

      }
      v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v26);
  }

}

void sub_1000FB654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id *location)
{
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

NSString *__cdecl sub_1000FB674(id a1, unint64_t a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Include"), &stru_1004C6D40, 0));

  return (NSString *)v3;
}

void sub_1000FB6C8(uint64_t a1, uint64_t a2)
{
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  objc_msgSend(WeakRetained, "updateShowSetting:forSettings:", a2, v4);

}

void sub_1000FB938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000FB96C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v3));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v5, "includesAllPodcasts");
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "podcasts"));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v4, "count");

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "countOfPodcasts");
  }

}

void sub_1000FBCFC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v3));

  objc_msgSend(v6, "setIncludesAllPodcasts:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "podcasts"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndex:", *(_QWORD *)(a1 + 48)));
  objc_msgSend(v6, "removePodcast:", v5);

}

void sub_1000FBE9C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastPlaylistSettingsForUuid:", *(_QWORD *)(a1 + 40)));
  v5 = v2;
  if (*(_QWORD *)(a1 + 48) == 6)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlist"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "defaultSettings"));

    objc_msgSend(v5, "setTracksDefault:", 1);
    objc_msgSend(v5, "takeValuesFromDefaultSettings:", v4);

  }
  else
  {
    objc_msgSend(v2, "setTracksDefault:", 0);
  }
  objc_msgSend(v5, "setEpisodesToShow:", *(_QWORD *)(a1 + 48));
  objc_msgSend(v5, "setNeedsUpdate:", 1);

}

void sub_1000FC06C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v3));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "defaultSettings"));
  objc_msgSend(v4, "setValue:forKey:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  objc_msgSend(v4, "setNeedsUpdate:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "settings"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000FC14C;
  v8[3] = &unk_1004AB1B8;
  v9 = v4;
  v6 = v4;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v8);

}

id sub_1000FC14C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "takeValuesFromDefaultSettings:", *(_QWORD *)(a1 + 32));
}

void sub_1000FC240(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v3));

  objc_msgSend(v4, "setContainerOrder:", *(unsigned int *)(a1 + 48));
  objc_msgSend(v4, "setNeedsUpdate:", 1);

}

void sub_1000FC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000FC568(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v3));

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v4, "includesAllPodcasts");
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "podcasts", 0));
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v16;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(a1 + 48);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v12), "uuid"));
        objc_msgSend(v13, "addObject:", v14);

        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v10);
  }

}

void sub_1000FC7B4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000FC7D0(id *a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  _QWORD block[4];
  id v21;
  _QWORD v22[4];
  id v23;

  v2 = a1[4];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "playlistUuid"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v3));

  v5 = kPodcastUuid;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "addPodcastsViewController"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "podcastUuids"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K in %@"), v5, v8));

  v10 = a1[4];
  v11 = kMTPodcastEntityName;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast sortDescriptorsForAllPodcasts](MTPodcast, "sortDescriptorsForAllPodcasts"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectsInEntity:predicate:sortDescriptors:", v11, v9, v12));

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithArray:](NSOrderedSet, "orderedSetWithArray:", v13));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "podcasts"));
  v16 = objc_msgSend(v15, "mutableCopy");

  objc_msgSend(v16, "minusOrderedSet:", v14);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000FCA24;
  v22[3] = &unk_1004AB1E0;
  v23 = v4;
  v17 = v4;
  objc_msgSend(v16, "enumerateObjectsUsingBlock:", v22);
  objc_msgSend(v17, "setPodcasts:", v14);
  v18 = objc_loadWeakRetained(a1 + 6);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "addPodcastsViewController"));
  objc_msgSend(v17, "setIncludesAllPodcasts:", objc_msgSend(v19, "allPodcastsSelected"));

  objc_msgSend(v17, "setNeedsUpdate:", 1);
  objc_msgSend(a1[4], "saveInCurrentBlock");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000FCA30;
  block[3] = &unk_1004A7570;
  objc_copyWeak(&v21, a1 + 6);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v21);

}

id sub_1000FCA24(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removePodcast:", a2);
}

void sub_1000FCA30(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SyncKeysRepository shared](_TtC18PodcastsFoundation18SyncKeysRepository, "shared"));
  objc_msgSend(v1, "setIsPlaylistSyncDirty:", 1);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "settingsController"));
  objc_msgSend(v2, "reloadGroupWithIdentifier:", CFSTR("podcasts"));

  objc_msgSend(WeakRetained, "updatePodcastCount");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v3, "playlistSettingsDidChangeSetting:", WeakRetained);

}

void sub_1000FCBE0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v3));

  objc_msgSend(v4, "setIsUngroupedList:", *(_BYTE *)(a1 + 48) == 0);
  if (*(_BYTE *)(a1 + 48) && objc_msgSend(v4, "containerOrder") == 2)
    objc_msgSend(v4, "setContainerOrder:", 1);
  objc_msgSend(v4, "setNeedsUpdate:", 1);

}

void sub_1000FCE38(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playlistUuid"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playlistForUuid:", v3));

  objc_msgSend(v4, "setTitle:", *(_QWORD *)(a1 + 48));
}

void sub_1000FD368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000FDCA4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  void *v5;
  int v6;
  id v7;

  v2 = _MTLogCategoryFeedUpdate();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    v6 = 134217984;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Needs feed update for %lu podcasts", (uint8_t *)&v6, 0xCu);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateManager sharedInstance](MTFeedUpdateManager, "sharedInstance"));
  objc_msgSend(v5, "_updatePodcastsWithUUIDs:userInitiated:useBackgroundFetch:source:startedUpdatesCallback:", *(_QWORD *)(a1 + 32), 0, 1, 13, 0);

}

id sub_1000FDEC8(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000FDF1C;
  v3[3] = &unk_1004A8FB0;
  v3[4] = v1;
  return objc_msgSend(v1, "results:", v3);
}

void sub_1000FDF1C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "valueForKey:", kEpisodeUuid));
  objc_msgSend(v2, "checkAutoDownloadsForUuids:", v3);

}

void sub_1000FE0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000FE0D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  _BYTE *WeakRetained;
  id v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  _DWORD v12[2];

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (a4)
      v8 = 0;
    else
      v8 = objc_msgSend(v6, "BOOLValue");
    WeakRetained[56] = (_BYTE)v8;
    v9 = _MTLogCategoryFeedUpdate(v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = WeakRetained[56];
      v12[0] = 67109120;
      v12[1] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MTFeedUpdateProcessor did get new batch fetch enabled value %x will refresh", (uint8_t *)v12, 8u);
    }

    objc_msgSend(WeakRetained, "updatePredicate");
    objc_msgSend(WeakRetained, "_reCheck");
  }

}

void sub_1000FE2D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1000FE2E4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  id v12;
  id v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MPMediaLibrary defaultMediaLibrary](MPMediaLibrary, "defaultMediaLibrary"));
  v4 = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "counterForGeneratingLibraryChangeNotifications");
  if (v4 >= 1)
    objc_msgSend(WeakRetained, "_endGeneratingLibraryChangeNotifications");
  v8 = _NSConcreteStackBlock;
  v9 = 3221225472;
  v10 = sub_1000FE3E0;
  v11 = &unk_1004AB230;
  v13 = *(id *)(a1 + 40);
  v5 = v3;
  v12 = v5;
  v6 = objc_msgSend(v5, "performTransactionWithBlock:", &v8);
  if (v4 >= 1)
    objc_msgSend(WeakRetained, "_beginGeneratingLibraryChangeNotifications", v8, v9, v10, v11);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v6);

}

uint64_t sub_1000FE3E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000FE480(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MPMediaLibrary defaultMediaLibrary](MPMediaLibrary, "defaultMediaLibrary"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

id sub_1000FE818(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "_beginGeneratingLibraryChangeNotifications");
}

uint64_t sub_1000FE8E0(uint64_t a1)
{
  uint64_t result;

  if ((uint64_t)objc_msgSend(*(id *)(a1 + 32), "counterForGeneratingLibraryChangeNotifications") >= 1)
    objc_msgSend(*(id *)(a1 + 32), "_endGeneratingLibraryChangeNotifications");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000FF258(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), objc_msgSend(a2, "BOOLValue"));
}

uint64_t sub_1000FF390(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000FF470(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000FF550(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000FF8FC(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), objc_msgSend(a2, "unsignedIntegerValue"));
}

void sub_1000FFE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_1000FFE44(uint64_t a1)
{
  void *v2;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  void (**v5)(void);
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setValue:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "changeHandler"));

  if (v2)
  {
    v3 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "changeHandler"));
    v3[2](v3, *(_QWORD *)(a1 + 32));

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "reloadHandler"));

  if (v4)
  {
    v5 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "reloadHandler"));
    v5[2]();

  }
}

void sub_100100B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100100B70(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v8;
  unsigned int v9;
  id v10;

  v10 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
  v9 = objc_msgSend(v8, "isEqualToString:", a1[4]);

  if (v9)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a3;
    *a4 = 1;
  }

}

id sub_1001015F4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setCellEmphasis:", *(_QWORD *)(a1 + 40));
}

id sub_100101958(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "group"));
  v6 = objc_msgSend(v4, "isEqual:", v5);

  return v6;
}

void sub_100101F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100101FD4(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "switchSettingChanged:value:", *(_QWORD *)(a1 + 32), a2);

}

void sub_100102D64(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(*(id *)(a1 + 32), "optionSettingChanged:value:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 48), "valueForIndex:", a2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  v5 = *(_QWORD *)(a1 + 56);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1));
  objc_msgSend(v3, "reloadRowsAtIndexPaths:withRowAnimation:", v4, 5);

}

void sub_100103FFC(id a1)
{
  dispatch_queue_t v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = dispatch_queue_create(0, 0);
  v2 = (void *)qword_100567550;
  qword_100567550 = (uint64_t)v1;

  v3 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v4 = (void *)qword_100567558;
  qword_100567558 = v3;

}

uint64_t sub_100104044(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100104118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100104130(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v8));

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_10010420C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, v5);

}

void sub_1001047B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  _QWORD *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[5];
  id v18;

  v3 = a2;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3032000000;
  v17[3] = sub_10004684C;
  v17[4] = sub_100046A9C;
  v18 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mainOrPrivateContext"));

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10010492C;
  v12[3] = &unk_1004A6D10;
  v6 = v3;
  v13 = v6;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 32);
  v14 = v7;
  v15 = v8;
  v16 = v17;
  objc_msgSend(v7, "performBlockAndWait:", v12);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100104D1C;
  v9[3] = &unk_1004AABA0;
  v11 = v17;
  v10 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);

  _Block_object_dispose(v17, 8);
}

void sub_100104914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010492C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  void *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint8_t buf[4];
  int64_t v44;
  __int16 v45;
  _BYTE v46[14];
  __int16 v47;
  void *v48;

  v3 = _MTLogCategoryPlayback(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v44 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "nextEpisodeToPlay is %@", buf, 0xCu);
  }

  v6 = *(void **)(a1 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "initialEpisodeUuid"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "episodeForUuid:", v7));

  v42 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "podcast"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "firstObject"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "podcast"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uuid"));
  v41 = v9;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uuid"));
  v14 = objc_msgSend(v12, "isEqual:", v13);

  if (v14)
  {
    if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") < 2)
      v15 = 0;
    else
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 1));

    v19 = _MTLogCategoryPlayback(v17, v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "title"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "uuid"));
      *(_DWORD *)buf = 138412546;
      v44 = (int64_t)v21;
      v45 = 2112;
      *(_QWORD *)v46 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "nextEpisodeToPlay is the original episode. Pick the 2nd episode instead. %@ %@", buf, 0x16u);

    }
    v16 = 1;
  }
  else
  {
    v16 = 0;
    v15 = v10;
  }
  v23 = +[MTEpisodeUnavailableUtil unavailableReasonForEpisode:](MTEpisodeUnavailableUtil, "unavailableReasonForEpisode:", v15);
  if (v15 && v23)
  {
    v24 = v16 + 1;
    do
    {
      if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") <= v24)
        v25 = 0;
      else
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v24));

      v26 = +[MTEpisodeUnavailableUtil unavailableReasonForEpisode:](MTEpisodeUnavailableUtil, "unavailableReasonForEpisode:", v25);
      v28 = _MTLogCategoryPlayback(v26, v27);
      v29 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "title"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "uuid"));
        *(_DWORD *)buf = 134218754;
        v44 = v26;
        v45 = 1024;
        *(_DWORD *)v46 = v24;
        *(_WORD *)&v46[4] = 2112;
        *(_QWORD *)&v46[6] = v30;
        v47 = 2112;
        v48 = v31;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "nextEpisodeToPlay is not available (Unavailable reason: %lu). Pick the %d next episode instead. %@ %@", buf, 0x26u);

      }
      if (!v25)
        break;
      ++v24;
      v15 = v25;
    }
    while (v26);
  }
  else
  {
    v25 = v15;
  }
  v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "uuid"));
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v34 = *(void **)(v33 + 40);
  *(_QWORD *)(v33 + 40) = v32;

  v37 = _MTLogCategoryPlayback(v35, v36);
  v38 = objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "title"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "uuid"));
    *(_DWORD *)buf = 138412546;
    v44 = (int64_t)v39;
    v45 = 2112;
    *(_QWORD *)v46 = v40;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "nextEpisodeToPlay is %@ %@", buf, 0x16u);

  }
}

void sub_100104D1C(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[MTPlaybackQueueFactory playEpisodeUuid:context:](MTPlaybackQueueFactory, "playEpisodeUuid:context:", v2, 6));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
}

void sub_100104E70(uint64_t a1, void *a2)
{
  MTListenNowManifest *v3;
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "length"))
  {
    v3 = -[MTPodcastManifest initWithInitialEpisodeUuid:sectionType:]([MTListenNowManifest alloc], "initWithInitialEpisodeUuid:sectionType:", v4, objc_msgSend(*(id *)(a1 + 32), "unsignedIntegerValue"));
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

id sub_100105028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "syncablePlayheadDidChangeForEpisodeUuid:isSignificant:", a2, a3);
}

void sub_1001055D8(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTNMSDefaultsUpdater sharedInstance](MTNMSDefaultsUpdater, "sharedInstance"));
  objc_msgSend(v2, "startObservingDownloadedPodcastsChanges");

  objc_msgSend(*(id *)(a1 + 32), "startLibraryUpdate");
  v3 = (id)objc_claimAutoreleasedReturnValue(+[MTCoreSpotlightController sharedInstance](MTCoreSpotlightController, "sharedInstance"));
  objc_msgSend(v3, "scheduleIndexAllIfNecessary");

}

void sub_100105958(id a1)
{
  uint64_t v1;
  NSObject *v2;
  dispatch_semaphore_t v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  dispatch_semaphore_t v7;
  uint8_t buf[16];

  v1 = _MTLogCategoryMediaLibrary(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "library updater running", buf, 2u);
  }

  v3 = dispatch_semaphore_create(0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTMediaLibraryUpdater sharedInstance](MTMediaLibraryUpdater, "sharedInstance"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100105A3C;
  v6[3] = &unk_1004A6200;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "forceUpdateDatabaseFromMediaLibraryWithCompletion:", v6);

  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
}

intptr_t sub_100105A3C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100105A44(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryDataProvider"));
  objc_msgSend(v1, "restorePreviouslyDownloadedEpisodes");

}

void sub_100105BC0(uint64_t a1, char a2)
{
  _QWORD v3[4];
  id v4;
  char v5;

  if (*(_QWORD *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100105C40;
    v3[3] = &unk_1004A7EF8;
    v4 = *(id *)(a1 + 32);
    v5 = a2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

  }
}

uint64_t sub_100105C40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_100106384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  _Block_object_dispose(&a54, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001063C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t (**v5)(_QWORD, _QWORD);
  uint64_t v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "canDeletePlaylistUUIDBlock"));

  if (v4)
  {
    v5 = (uint64_t (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "canDeletePlaylistUUIDBlock"));
    v6 = ((uint64_t (**)(_QWORD, id))v5)[2](v5, v3);

  }
  else
  {
    v6 = 1;
  }

  return v6;
}

id sub_100106438(uint64_t a1, int a2)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (a2)
    return objc_msgSend(v2, "performBlockAndWaitWithSave:");
  else
    return objc_msgSend(v2, "performBlockAndWait:");
}

void sub_100106448(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  int8x16_t v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  int8x16_t v25;
  id v26;
  uint64_t v27;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPlaylistEntityName, 0, 0));
  v3 = (void *)objc_opt_class(*(_QWORD *)(a1 + 40));
  v4 = kPlaylistUuid;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100106648;
  v22[3] = &unk_1004AB580;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 88);
  v23 = v6;
  v27 = v7;
  v24 = *(id *)(a1 + 64);
  v11 = *(int8x16_t *)(a1 + 32);
  v8 = (id)v11.i64[0];
  v25 = vextq_s8(v11, v11, 8uLL);
  v26 = *(id *)(a1 + 72);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100106B68;
  v16[3] = &unk_1004AB5A8;
  v17 = *(id *)(a1 + 56);
  v9 = *(id *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v18 = v9;
  v19 = v10;
  v20 = *(id *)(a1 + 64);
  v21 = *(id *)(a1 + 72);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100106F48;
  v12[3] = &unk_1004AB5D0;
  v15 = *(id *)(a1 + 80);
  v13 = *(id *)(a1 + 56);
  v14 = *(id *)(a1 + 32);
  objc_msgSend(v3, "mergeArray:fromArray:lookupKey:updateBlock:insertBlock:deleteBlock:", v2, v5, v4, v22, v16, v12);

}

void sub_100106648(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD v42[4];
  id v43;
  _QWORD v44[5];
  id v45;
  id v46;
  _QWORD v47[4];
  uint64_t v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = kPlaylistUuid;
    v9 = v7;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", v8));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", kPlaylistTitle));
    *(_DWORD *)buf = 138543618;
    v50 = v10;
    v51 = 2112;
    v52 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "updating playlist (uuid=%{public}@ - title='%@')", buf, 0x16u);

  }
  v12 = v5;
  v13 = v6;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", CFSTR("syncOrderOnly")));
  v15 = objc_msgSend(v14, "BOOLValue");

  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", kPlaylistSortOrder));
    objc_msgSend(v12, "setSortOrder:", objc_msgSend(v16, "longLongValue"));

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", kPlaylistUngroupedList));
    objc_msgSend(v12, "setIsUngroupedList:", objc_msgSend(v17, "BOOLValue"));

  }
  else
  {
    v18 = kPlaylistTitle;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", kPlaylistTitle));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "title"));
    v21 = objc_msgSend(v19, "isEqualToString:", v20);

    if ((v21 & 1) == 0)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", v18));
      objc_msgSend(v12, "setTitle:", v22);

      v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "uuid"));
      objc_msgSend(v23, "addObject:", v24);

    }
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", kPlaylistIncludesAllPodcasts));
    objc_msgSend(v12, "setIncludesAllPodcasts:", objc_msgSend(v25, "BOOLValue"));

    objc_msgSend(v12, "setNeedsUpdate:", 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", kPlaylistSortOrder));
    objc_msgSend(v12, "setSortOrder:", objc_msgSend(v26, "longLongValue"));

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", kPlaylistContainerOrder));
    objc_msgSend(v12, "setContainerOrder:", objc_msgSend(v27, "intValue"));

    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", kPlaylistUngroupedList));
    objc_msgSend(v12, "setIsUngroupedList:", objc_msgSend(v28, "BOOLValue"));

    v29 = *(void **)(a1 + 40);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "uuid"));
    objc_msgSend(v29, "addObject:", v30);

    v31 = *(void **)(a1 + 48);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "defaultSettings"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", kPlaylistDefaultSettings));
    objc_msgSend(v31, "_mergeSetting:syncObj:", v32, v33);

    v34 = (void *)objc_opt_class(*(_QWORD *)(a1 + 48));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "settings"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "array"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", kPlaylistSettings));
    v38 = kPlaylistSettingUuid;
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_100106B38;
    v47[3] = &unk_1004AB508;
    v44[2] = sub_100106B48;
    v44[3] = &unk_1004AB530;
    v39 = *(void **)(a1 + 56);
    v48 = *(_QWORD *)(a1 + 48);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[4] = v48;
    v45 = v39;
    v46 = v12;
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100106B5C;
    v42[3] = &unk_1004AB558;
    v43 = *(id *)(a1 + 56);
    objc_msgSend(v34, "mergeArray:fromArray:lookupKey:updateBlock:insertBlock:deleteBlock:", v36, v37, v38, v47, v44, v42);

  }
  v40 = *(void **)(a1 + 64);
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "uuid"));
  objc_msgSend(v40, "setObject:forKeyedSubscript:", v13, v41);

}

id sub_100106B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_mergeSetting:syncObj:", a2, a3);
}

id sub_100106B48(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addSetting:syncObj:playlist:", *(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 48));
}

id sub_100106B5C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "deleteObject:", a2);
}

void sub_100106B68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  NSObject *v6;
  BOOL v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t v37[128];
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("syncOrderOnly")));
  v5 = objc_msgSend(v4, "BOOLValue");

  if ((v5 & 1) == 0)
  {
    v6 = *(NSObject **)(a1 + 32);
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    v8 = kPlaylistUuid;
    if (v7)
    {
      v9 = v6;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", v8));
      v11 = kPlaylistTitle;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPlaylistTitle));
      *(_DWORD *)buf = 138543618;
      v39 = v10;
      v40 = 2112;
      v41 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "inserting playlist (uuid=%{public}@ - title='%@')", buf, 0x16u);

    }
    else
    {
      v11 = kPlaylistTitle;
    }
    v13 = *(_QWORD *)(a1 + 40);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v8));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaylist insertNewPlaylistInManagedObjectContext:uuid:defaultSettings:](MTPlaylist, "insertNewPlaylistInManagedObjectContext:uuid:defaultSettings:", v13, v14, 0));

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v11));
    objc_msgSend(v15, "setTitle:", v16);

    objc_msgSend(v15, "setHasBeenSynced:", objc_msgSend(*(id *)(a1 + 48), "syncMergeIsFromCloud"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kPlaylistIncludesAllPodcasts));
    objc_msgSend(v15, "setIncludesAllPodcasts:", objc_msgSend(v17, "BOOLValue"));

    objc_msgSend(v15, "setNeedsUpdate:", 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kPlaylistSortOrder));
    objc_msgSend(v15, "setSortOrder:", objc_msgSend(v18, "longLongValue"));

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kPlaylistContainerOrder));
    objc_msgSend(v15, "setContainerOrder:", objc_msgSend(v19, "intValue"));

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kPlaylistUngroupedList));
    objc_msgSend(v15, "setIsUngroupedList:", objc_msgSend(v20, "BOOLValue"));

    v21 = *(void **)(a1 + 48);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "defaultSettings"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kPlaylistDefaultSettings));
    objc_msgSend(v21, "_mergeSetting:syncObj:", v22, v23);

    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kPlaylistSettings, 0));
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v26; i = (char *)i + 1)
        {
          if (*(_QWORD *)v34 != v27)
            objc_enumerationMutation(v24);
          objc_msgSend(*(id *)(a1 + 48), "_addSetting:syncObj:playlist:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i), v15);
        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      }
      while (v26);
    }

    v29 = *(void **)(a1 + 56);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v8));
    objc_msgSend(v29, "addObject:", v30);

    v31 = *(void **)(a1 + 64);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "uuid"));
    objc_msgSend(v31, "setObject:forKeyedSubscript:", v3, v32);

  }
}

void sub_100106F48(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;

  v3 = a2;
  if (objc_msgSend(v3, "hasBeenSynced"))
  {
    if ((objc_msgSend(v3, "isItunesPlaylist") & 1) == 0
      && (objc_msgSend(v3, "isBuiltIn") & 1) == 0)
    {
      v4 = *(_QWORD *)(a1 + 48);
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
      LOBYTE(v4) = (*(uint64_t (**)(uint64_t, void *))(v4 + 16))(v4, v5);

      if ((v4 & 1) == 0)
      {
        v6 = *(NSObject **)(a1 + 32);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          v7 = kPlaylistUuid;
          v8 = v6;
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", v7));
          v10 = 138543362;
          v11 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "deleting playlist (uuid=%{public}@)", (uint8_t *)&v10, 0xCu);

        }
        objc_msgSend(*(id *)(a1 + 40), "deletePlaylist:", v3);
      }
    }
  }

}

id sub_100107088(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_applyOrderingInSyncDictionary:playlist:", *(_QWORD *)(a1 + 40), a2);
}

void sub_1001075EC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v5 = a2;
  v9 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
  v6 = *(void **)(a1 + 32);
  v7 = objc_msgSend(v5, "persistentID");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v7));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, v8);

}

uint64_t sub_10010768C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v5, "persistentID")));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

  v10 = *(void **)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v6, "persistentID")));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

  if (v9)
    v13 = 1;
  else
    v13 = v12 == 0;
  if (v13)
  {
    if (!v9 || v12)
    {
      if (!(v9 | v12))
      {
        v15 = *(void **)(a1 + 40);
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v5, "persistentID")));
        v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v16));

        v17 = *(void **)(a1 + 40);
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v6, "persistentID")));
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v18));

      }
      v14 = (uint64_t)objc_msgSend((id)v9, "compare:", v12);
    }
    else
    {
      v14 = 1;
    }
  }
  else
  {
    v9 = 0;
    v14 = -1;
  }

  return v14;
}

uint64_t sub_100107FBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1001083A0(id a1, NSLayoutConstraint *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  void *v5;
  NSLayoutConstraint *v6;

  v6 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSLayoutConstraint mt_dynamicTypeConstant](v6, "mt_dynamicTypeConstant"));
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "currentConstant");
    -[NSLayoutConstraint setConstant:](v6, "setConstant:");
  }

}

uint64_t sub_10010884C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100109E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  id *v31;

  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100109E68(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didTapStartButton");

}

id sub_10010A17C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performAcknowledgementCompletionBlocks");
}

void sub_10010A26C(id a1, id a2)
{
  (*((void (**)(id))a2 + 2))(a2);
}

void sub_10010ACE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010AD00(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "podcastUuid"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForUuid:", v3));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sortDescriptorsForPlayOrder"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_10010BA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose((const void *)(v59 - 240), 8);
  _Block_object_dispose((const void *)(v59 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10010BAD0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v15 != 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v2 != 0;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40)
    && +[MTStoreIdentifier isNotEmpty:](MTStoreIdentifier, "isNotEmpty:", objc_msgSend(v2, "storeCollectionId")))
  {
    v3 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), objc_msgSend(v2, "storeCollectionId")));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "length") != 0;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40)
    && +[MTStoreIdentifier isNotEmpty:](MTStoreIdentifier, "isNotEmpty:", objc_msgSend(v15, "storeTrackId")))
  {
    v6 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), objc_msgSend(v15, "storeTrackId")));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "podcastFeedUrl"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "podcastForFeedUrl:", v10));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uuid"));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "length") != 0;
  }

}

void sub_10010BCDC(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentItem"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playbackQueueController"));
  objc_msgSend(v4, "setMagicMomentPlayerItem:", v6);

  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(v5, a2, *(_QWORD *)(a1 + 56));

}

void sub_10010BD54(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentItem"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playbackQueueController"));
  objc_msgSend(v4, "setMagicMomentPlayerItem:", v6);

  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v5, a2, 4);

}

void sub_10010C0AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void (*v11)(void);
  uint64_t v12;
  int v13;
  void *v14;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = _MTLogCategoryMediaRemote(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v13 = 138412290;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Siri following a show failed with error: %@", (uint8_t *)&v13, 0xCu);
    }

    if (*(_QWORD *)(a1 + 32))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTSubscriptionController subscriptionControllerErrorDomain](MTSubscriptionController, "subscriptionControllerErrorDomain"));
      if (objc_msgSend(v7, "isEqualToString:", v8))
      {
        v9 = objc_msgSend(v4, "code");
        v10 = +[MTSubscriptionController alreadySubscribedErrorCode](MTSubscriptionController, "alreadySubscribedErrorCode");

        if (v9 == v10)
        {
          v11 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
LABEL_12:
          v11();
          goto LABEL_13;
        }
      }
      else
      {

      }
      v11 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
      goto LABEL_12;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      v11 = *(void (**)(void))(v12 + 16);
      goto LABEL_12;
    }
  }
LABEL_13:

}

uint64_t sub_10010C218(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10010C47C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void (*v13)(void);
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentItem"));
  v4 = _MTLogCategoryPlayback(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v6)
    {
      v7 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67109120;
      v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Restored manifest and there is a current item. startPlayback: %d", buf, 8u);
    }

    if (*(_BYTE *)(a1 + 72))
    {
      v8 = objc_msgSend(v2, "needsNetworkToPlayButNoNetwork");
      if ((_DWORD)v8)
      {
        v10 = _MTLogCategoryPlayback(v8, v9);
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "The current item is not downloaded, and we are not connected to the internet. Cannot start playback.", buf, 2u);
        }

        v12 = *(_QWORD *)(a1 + 40);
        if (v12)
        {
          v13 = *(void (**)(void))(v12 + 16);
LABEL_16:
          v13();
          goto LABEL_17;
        }
      }
      objc_msgSend(*(id *)(a1 + 32), "playWithReason:", 9);
    }
    v16 = *(_QWORD *)(a1 + 40);
    if (v16)
    {
      v13 = *(void (**)(void))(v16 + 16);
      goto LABEL_16;
    }
  }
  else
  {
    if (v6)
    {
      v14 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67109120;
      v19 = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "No manifest to restore. Creating a new play queue and starting playback: %d", buf, 8u);
    }

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaybackQueueFactory playMyPodcastsWithOrder:](MTPlaybackQueueFactory, "playMyPodcastsWithOrder:", *(_QWORD *)(a1 + 48)));
    LOBYTE(v17) = *(_BYTE *)(a1 + 74);
    objc_msgSend(*(id *)(a1 + 56), "_setManifest:playerController:queueType:startPlayback:forceLocal:reason:interactive:completion:", v15, *(_QWORD *)(a1 + 32), 1, *(unsigned __int8 *)(a1 + 72), *(unsigned __int8 *)(a1 + 73), *(_QWORD *)(a1 + 64), v17, *(_QWORD *)(a1 + 40));

  }
LABEL_17:

}

uint64_t sub_10010C754(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, a2, *(_QWORD *)(a1 + 40));
  return result;
}

void sub_10010CA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010CA58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "_mediaItemForEpisode:", v5));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10010EF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010EF78(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;
  _QWORD *v8;
  id v9;
  _QWORD v10[5];
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playbackContext"));

  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x3032000000;
  v10[3] = sub_10004689C;
  v10[4] = sub_100046AC4;
  v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10010F0AC;
  v5[3] = &unk_1004AB800;
  v8 = v10;
  v6 = *(id *)(a1 + 32);
  v4 = v3;
  v7 = v4;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  objc_msgSend(v4, "performBlock:", v5);
  objc_destroyWeak(&v9);

  _Block_object_dispose(v10, 8);
}

void sub_10010F08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_10010F0AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id WeakRetained;
  void *v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v2 = objc_claimAutoreleasedReturnValue(+[PFSecureDownloadRenewalManager inContextKeyDataFor:ctx:](PFSecureDownloadRenewalManager, "inContextKeyDataFor:ctx:", objc_msgSend(*(id *)(a1 + 32), "episodeStoreId"), *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataAccessQueue"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10010F18C;
    v8[3] = &unk_1004A6F38;
    v10 = *(_QWORD *)(a1 + 48);
    v9 = *(id *)(a1 + 32);
    dispatch_async(v7, v8);

  }
}

void sub_10010F18C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v2)
  {
    objc_msgSend(v2, "expirationDate");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"));
    v4 = objc_msgSend(v3, "isLessThanDaysOld:", 30);
    if ((_DWORD)v4)
    {
      v6 = _MTLogCategoryPlayback(v4, v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeUuid"));
        *(_DWORD *)buf = 138412546;
        v15 = v8;
        v16 = 2112;
        v17 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Playback license expired error for episode ADAM ID %@ with renewal date %@", buf, 0x16u);

      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](MTLibrary, "sharedInstance"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeUuid"));
      v13 = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v11));
      objc_msgSend(v9, "removeDownloadAssetsForEpisodeUuids:", v12);

    }
  }
}

void sub_10010F538(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10010F56C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v3)
  {
    v5 = _MTLogCategoryDRM();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));
      v9 = 138412290;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[MTPlayerController]: Unable to remove all FairPlay keys with error %@.", (uint8_t *)&v9, 0xCu);

    }
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "validationManager"));
  objc_msgSend(v8, "validateDownloadedEpisodesWithCompletion:", 0);

}

void sub_10010F664(uint64_t a1, char a2)
{
  id WeakRetained;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint8_t v7[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ((a2 & 1) == 0)
  {
    v4 = _MTLogCategoryDRM();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[MTPlayerController]: Unable to remove all legacy FairPlay keys with error.", v7, 2u);
    }

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "secureDownloadRenewalManager"));
  objc_msgSend(v6, "updateDRMKeysForDownloadsWithUrlProtocolDelegate:completionHandler:", 0, 0);

}

void sub_10010FDF8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_10010FE24(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id WeakRetained;

  if (isTV(a1))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentItem"));
    v3 = objc_msgSend(v2, "isVideo");

    if (v3)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend(WeakRetained, "dismissNowPlayingAnimated:", 1);

    }
  }
}

void sub_10010FEA4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeUuid"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "episodeForUuid:", v3));

  if (v4)
  {
    objc_msgSend(v4, "incremementPlayCount");
    objc_msgSend(*(id *)(a1 + 48), "updateEpisode:andPlayerItem:withElapsedTime:andDuration:onMediaItemWillChange:", v4, *(_QWORD *)(a1 + 40), 1, *(double *)(a1 + 56), *(double *)(a1 + 64));
    +[MTMediaLibraryUtil updateMediaLibraryItem:playhead:playState:playCount:](MTMediaLibraryUtil, "updateMediaLibraryItem:playhead:playState:playCount:", objc_msgSend(v4, "persistentID"), objc_msgSend(v4, "playState"), objc_msgSend(v4, "playCount"), 0.0);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playlists"));
    v6 = objc_msgSend(v5, "copy");

    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v12, "setNeedsUpdate:", 1, (_QWORD)v13);
          objc_msgSend(v12, "updateUnplayedCount");
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v9);
    }

  }
}

void sub_100110050(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "podcastUuid"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcastForUuid:", v3));

  objc_msgSend(v4, "resetGoDarkWithReason:", 4);
  objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");

}

id sub_1001100BC(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];
  __int16 v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10011011C;
  v3[3] = &unk_1004AB8A0;
  v1 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  v4 = *(_WORD *)(a1 + 48);
  return objc_msgSend(v1, "nextManifest:", v3);
}

void sub_10011011C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v6 = v3;
    objc_msgSend(*(id *)(a1 + 32), "setManifest:startPlayback:forceLocal:reason:interactive:completion:", v3, *(unsigned __int8 *)(a1 + 40), 1, 14, 0, 0);
LABEL_7:
    v4 = v6;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 41))
  {
    v6 = 0;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlaybackQueueFactory playMyPodcastsWithOrder:](MTPlaybackQueueFactory, "playMyPodcastsWithOrder:", 0));
    if (v5)
      objc_msgSend(*(id *)(a1 + 32), "setManifest:startPlayback:forceLocal:reason:interactive:completion:", v5, 0, 1, 1, 0, 0);

    goto LABEL_7;
  }
LABEL_8:

}

void sub_1001101C4(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSError *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  NSError *v8;

  v2 = a2;
  v4 = v2;
  if (v2)
  {
    v5 = _MTLogCategoryPlayback(v2, v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Network UPP completed update failed with error %@", (uint8_t *)&v7, 0xCu);
    }

  }
}

void sub_100110270(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD v16[4];
  NSObject *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  id v23;

  v7 = a3;
  v8 = a4;
  v10 = (void *)v8;
  if (v7 | v8)
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1001103CC;
    v16[3] = &unk_1004AB910;
    v21 = a2;
    v17 = *(id *)(a1 + 32);
    v18 = (id)v7;
    v14 = v10;
    v15 = *(_QWORD *)(a1 + 40);
    v19 = v14;
    v20 = v15;
    +[IMAVPlayer performOnMainQueue:](IMAVPlayer, "performOnMainQueue:", v16);

    v12 = v17;
  }
  else
  {
    v11 = _MTLogCategoryPlayback(v8, v9);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = objc_msgSend(*(id *)(a1 + 32), "episodeStoreId");
      *(_DWORD *)buf = 134349056;
      v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[PodcastsStatesCoordination] Episode not inserted for episodeStoreId = %{public}lld. Skipping.", buf, 0xCu);
    }
  }

}

void sub_1001103CC(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  int v13;
  id v14;
  __int16 v15;
  id v16;
  __int16 v17;
  uint64_t v18;

  v2 = *(id *)(a1 + 64);
  v3 = objc_msgSend(*(id *)(a1 + 32), "episodeStoreId");
  v5 = _MTLogCategoryPlayback(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v2 == v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8 = objc_msgSend(*(id *)(a1 + 32), "episodeStoreId");
      v9 = *(void **)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v13 = 134349570;
      v14 = v8;
      v15 = 2112;
      v16 = v9;
      v17 = 2112;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[PodcastsStatesCoordination] Updating playerItem with episodeStoreId = %{public}lld with new inserted Implicit Follow, episodeUUID: %@, podcastUUID: %@.", (uint8_t *)&v13, 0x20u);
    }

    objc_msgSend(*(id *)(a1 + 32), "upgradeToLocalEpisodeBackedItemWithEpisodeUUID:podcastUUID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 56), "beginObservingTranscriptIdentifierChangesForCurrentItem:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v11 = *(void **)(a1 + 64);
      v12 = objc_msgSend(*(id *)(a1 + 32), "episodeStoreId");
      v13 = 134283777;
      v14 = v11;
      v15 = 2049;
      v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[PodcastsStatesCoordination] Skipping update of playerItem: PodcastsStateCoordinator just inserted an implicitly followed show for episode with adamID = %{private}lld, but the current playerItem holds an episodeStoreId = %{private}lld.", (uint8_t *)&v13, 0x16u);
    }

  }
}

void sub_100110524(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  id v11;
  int v12;
  id v13;

  v3 = a2;
  v5 = _MTLogCategoryPlayback(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v3;
      v8 = "Network UPP update failed with error %@";
      v9 = v7;
      v10 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v12, 0xCu);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v11 = objc_msgSend(*(id *)(a1 + 32), "episodeStoreId");
    v12 = 134283521;
    v13 = v11;
    v8 = "Sent playback position to MAPI for episode: %{private}lld";
    v9 = v7;
    v10 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_6;
  }

}

void sub_100110D3C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeUuid"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "episodeForUuid:", v3));

  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");

}

void sub_100110DA4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeUuid"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "episodeForUuid:", v3));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "podcast"));
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "resetGoDarkWithReason:", 4);
    objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  }

}

void sub_100110EF0(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bestUrl"));
  objc_msgSend(v3, "openURL:options:completionHandler:", v2, &__NSDictionary0__struct, 0);

}

uint64_t sub_100111130(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "_performAfterPlay:playbackStarted:", *(_QWORD *)(a1 + 40), a2 == 0);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

id sub_10011136C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentNowPlayingAnimated:", objc_msgSend(*(id *)(a1 + 40), "isInteractive"));
}

void sub_1001118B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a3;
  v5 = objc_msgSend(a2, "mediaRemotePlayerPath");
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v5, v7);

}

void sub_100111D98(uint64_t a1, int a2)
{
  void *v3;
  id v4;
  id v5;

  if (a2)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    if ((objc_msgSend(v5, "isInteractive") & 1) != 0)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
      v4 = objc_msgSend(v3, "upNextQueueIntent");

      if (!v4)
        _objc_msgSend(*(id *)(a1 + 40), "_showGenericPromptToClearUpNextWithRequest:", *(_QWORD *)(a1 + 32));
    }
    else
    {

    }
  }
}

void sub_100111E38(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100111EF8;
  v5[3] = &unk_1004AB9B0;
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  objc_copyWeak(&v7, v2);
  objc_msgSend(WeakRetained, "playWithContext:completion:", v4, v5);

  objc_destroyWeak(&v7);
}

void sub_100111EE4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100111EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  id obj;
  uint8_t buf[16];

  if (a2)
  {
    v3 = _MTLogCategoryPlayback(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Playback request failed because playback failed to start", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "finishWithStatus:", 5);
  }
  else
  {
    obj = objc_loadWeakRetained((id *)(a1 + 40));
    objc_sync_enter(obj);
    objc_msgSend(*(id *)(a1 + 32), "finishWithStatus:", 1);
    objc_sync_exit(obj);

  }
}

void sub_100111FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100111FBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100111FF8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MTEpisodeUnavailableUtil sharedInstance](MTEpisodeUnavailableUtil, "sharedInstance"));
  objc_msgSend(v1, "showDialogForReason:podcastTitle:completion:", 1, 0, 0);

}

void sub_100112038(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "reasonForNotPlayable");
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcast"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1001120A0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MTEpisodeUnavailableUtil sharedInstance](MTEpisodeUnavailableUtil, "sharedInstance"));
  objc_msgSend(v2, "showDialogForReason:podcastTitle:completion:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0);

}

void sub_100112330(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_alertControllerForClearingOrKeepingUpNextWithRequest:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v3, "setTitle:", *(_QWORD *)(a1 + 48));
  objc_msgSend(v3, "setMessage:", *(_QWORD *)(a1 + 56));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIViewController mt_rootViewController](UIViewController, "mt_rootViewController"));
  objc_msgSend(v2, "presentViewController:animated:completion:", v3, 1, 0);

}

void sub_100112510(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_alertControllerForClearingOrKeepingUpNextWithRequest:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v3, "setTitle:", *(_QWORD *)(a1 + 48));
  objc_msgSend(v3, "setMessage:", *(_QWORD *)(a1 + 56));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIViewController mt_rootViewController](UIViewController, "mt_rootViewController"));
  objc_msgSend(v2, "presentViewController:animated:completion:", v3, 1, 0);

}

void sub_1001127F0(uint64_t a1)
{
  void *v2;
  id v3;
  int8x16_t v4;
  _QWORD v5[4];
  int8x16_t v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  objc_msgSend(v2, "setUpNextQueueIntent:", 1);

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100112894;
  v5[3] = &unk_1004A6640;
  v4 = *(int8x16_t *)(a1 + 32);
  v3 = (id)v4.i64[0];
  v6 = vextq_s8(v4, v4, 8uLL);
  +[IMAVPlayer performOnMainQueue:](IMAVPlayer, "performOnMainQueue:", v5);

}

id sub_100112894(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setPlaybackQueue:", *(_QWORD *)(a1 + 40));
}

void sub_1001128A0(uint64_t a1)
{
  void *v2;
  id v3;
  int8x16_t v4;
  _QWORD v5[4];
  int8x16_t v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  objc_msgSend(v2, "setUpNextQueueIntent:", 2);

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100112944;
  v5[3] = &unk_1004A6640;
  v4 = *(int8x16_t *)(a1 + 32);
  v3 = (id)v4.i64[0];
  v6 = vextq_s8(v4, v4, 8uLL);
  +[IMAVPlayer performOnMainQueue:](IMAVPlayer, "performOnMainQueue:", v5);

}

id sub_100112944(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setPlaybackQueue:", *(_QWORD *)(a1 + 40));
}

id sub_100112950(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishWithStatus:", 2);
}

uint64_t sub_100112A08(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setShouldFindSomethingToPlay:", 1);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100112A48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _BOOL4 v13;
  const char *v14;
  uint8_t *v15;
  __int16 v16;
  uint8_t buf[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("MTCompositeManifestIsPlayingFromUpNext")));

  if (objc_msgSend(v3, "BOOLValue"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "upNextController"));
    v5 = objc_msgSend(v4, "count");

    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "compositeManifest"));
      objc_msgSend(v6, "next");

    }
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "player"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "manifest"));

  v11 = _MTLogCategoryPlayback(v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v13)
    {
      v16 = 0;
      v14 = "Restoration: Restored manifest from user activity";
      v15 = (uint8_t *)&v16;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, v15, 2u);
    }
  }
  else if (v13)
  {
    *(_WORD *)buf = 0;
    v14 = "Restoration: No manifest restored from user activity data";
    v15 = buf;
    goto LABEL_9;
  }

  objc_msgSend(*(id *)(a1 + 40), "_restoreDefaultManifestIfNeededWithCompletion:", *(_QWORD *)(a1 + 48));
}

void sub_100112B78(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[16];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v12;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(v1);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v5) + 16))();
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v3);
  }

  v8 = _MTLogCategoryPlayback(v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "All completions called", v10, 2u);
  }

}

uint64_t sub_100112CB0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1001132A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  void *v10;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = _MTLogCategoryMediaRemote(v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = 138412290;
      v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error resolving remote playerPath: %@", (uint8_t *)&v9, 0xCu);
    }

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_sendMediaRemoteCommand:toPlayer:options:", *(unsigned int *)(a1 + 48), a2, *(_QWORD *)(a1 + 40));
  }

}

void sub_100113484(id a1, unsigned int a2, __CFArray *a3)
{
  uint64_t v4;
  NSObject *v5;
  _DWORD v6[2];

  if (a2)
  {
    v4 = _MTLogCategoryMediaRemote(a1);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error sending MediaRemote command to player: %d", (uint8_t *)v6, 8u);
    }

  }
}

void sub_100113C44(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  uint64_t v10;
  NSObject *v11;
  const __CFString *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userId"));
    v8 = (void *)v7;
    if (v7)
      v9 = (const __CFString *)v7;
    else
      v9 = &stru_1004C6D40;
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("userId"));

    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "clientId"));
    v11 = v10;
    if (v10)
      v12 = (const __CFString *)v10;
    else
      v12 = &stru_1004C6D40;
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v12, CFSTR("clientId"));
  }
  else
  {
    v13 = _MTLogCategoryMetrics();
    v11 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
      v15 = 138412290;
      v16 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to fetch AnalyticsUserIdentifier from AMS for play event with error %@", (uint8_t *)&v15, 0xCu);

    }
  }

  +[IMMetrics recordEvent:dataSource:data:topic:](IMMetrics, "recordEvent:dataSource:data:topic:", CFSTR("play"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("xp_amp_podcasts_paf"));
}

void sub_100113F34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100113F48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessLog"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errorLog"));
  v4 = *(void **)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "episodeUuid"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "episodeForUuid:", v5));

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "events"));
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v22;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(a1 + 56), "recordMetricsEventForAccessLog:playerItem:", *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v11), *(_QWORD *)(a1 + 48));
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v9);
  }

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "events", 0));
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(a1 + 56), "recordMetricsEventForErrorLog:withEpisode:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v16), v6);
        v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    }
    while (v14);
  }

}

void sub_10011423C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001153E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  unsigned __int8 v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v7 = objc_msgSend(v5, "isEqual:", v6);

  if ((v7 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v8);

}

id sub_100115770(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_refetch:", 0);
}

void sub_10011577C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_propertyDidChange");

}

id sub_100115A1C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_frcDidChangeResults:uuidToManagedObjectIDMap:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100115BC4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "valueForKey:", kEpisodeUuid));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

id sub_100115EE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "processResults");
}

void sub_100116258(id a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = sub_1000B91B0();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100567570;
  qword_100567570 = v2;

}

uint64_t sub_100116AD4(uint64_t a1, int a2, int a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, (a3 | a2) == 0);
  return result;
}

void sub_100116CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  objc_sync_exit(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100116CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  dispatch_time_t v10;
  _QWORD block[5];

  if (a3 | a2)
  {
    v6 = *(id *)(a1 + 32);
    objc_sync_enter(v6);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v7 + 16))(v7, a2, a3, 0);
      v8 = *(void **)(a1 + 32);
      v9 = objc_retainBlock(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
      objc_msgSend(v8, "removeObject:", v9);

    }
    objc_sync_exit(v6);

  }
  v10 = dispatch_time(0, 250000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100116DF0;
  block[3] = &unk_1004A6200;
  block[4] = *(_QWORD *)(a1 + 40);
  dispatch_after(v10, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_100116DDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100116DF0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "magicMomentCompletionHandlers"));
  objc_sync_enter(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "magicMomentCompletionHandlers"));
  v4 = objc_msgSend(v3, "count");

  objc_sync_exit(v2);
  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "_getNowPlayingInfoAndCallPendingCompletions");
}

void sub_100116E68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100116FA4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100116FC8(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "magicMomentCompletionHandlers"));

  objc_sync_enter(v6);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = objc_loadWeakRetained(v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "magicMomentCompletionHandlers", 0));

  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v8);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v11) + 16))();
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }

  v12 = objc_loadWeakRetained(v4);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "magicMomentCompletionHandlers"));
  objc_msgSend(v13, "removeAllObjects");

  MRMediaRemoteSetWantsNowPlayingNotifications(0);
  objc_sync_exit(v6);

}

void sub_10011714C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100117298(uint64_t a1, uint64_t a2)
{
  uint64_t ContentItemAtOffset;
  void *v4;
  uint64_t v5;
  void *v6;

  ContentItemAtOffset = MRPlaybackQueueGetContentItemAtOffset(a2, 0);
  v4 = (void *)MRContentItemCopyNowPlayingInfo(ContentItemAtOffset);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = v4;
    (*(void (**)(void))(v5 + 16))();
    v4 = v6;
  }

}

void sub_1001175B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  uint64_t v15;

  if ((_DWORD)a2)
  {
    v5 = _MTLogCategoryPlayback(a1, a2);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v14 = 134217984;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to set playback queue: MediaRemote command failed with MRSendCommandError: %ld", (uint8_t *)&v14, 0xCu);
    }

    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v7, 2, a2);
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "firstObject"));
    v9 = objc_msgSend(v8, "unsignedIntValue");
    v11 = v9;
    if ((_DWORD)v9)
    {
      v12 = _MTLogCategoryPlayback(v9, v10);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = 134217984;
        v15 = v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to set playback queue: MediaRemote command failed with MRMediaRemoteCommandHandlerStatus: %ld", (uint8_t *)&v14, 0xCu);
      }

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

void sub_100117824(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[5];

  if (objc_msgSend(*(id *)(a1 + 32), "visible"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vc"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));

    v4 = objc_msgSend(objc_alloc((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 101);
    objc_msgSend(*(id *)(a1 + 32), "setSpinner:", v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "spinner"));
    objc_msgSend(v5, "startAnimating");

    v6 = objc_msgSend(objc_alloc((Class)UILabel), "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
    objc_msgSend(*(id *)(a1 + 32), "setLabel:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:](UIFont, "systemFontOfSize:", 16.0));
    objc_msgSend(v7, "setFont:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
    objc_msgSend(v9, "setTextColor:", v10);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
    objc_msgSend(v11, "setTextAlignment:", 1);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
    objc_msgSend(v12, "setNumberOfLines:", 0);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    objc_msgSend(v13, "setBackgroundColor:", v14);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("UPDATING_LIBRARY"), &stru_1004C6D40, 0));
    objc_msgSend(v15, "setText:", v17);

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "spinner"));
    objc_msgSend(v3, "addSubview:", v18);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
    objc_msgSend(v3, "addSubview:", v19);

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v20, "setNeedsLayout");

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v21, "layoutIfNeeded");

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "spinner"));
    objc_msgSend(v22, "setAlpha:", 0.0);

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
    objc_msgSend(v23, "setAlpha:", 0.0);

    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100117B2C;
    v24[3] = &unk_1004A6200;
    v24[4] = *(_QWORD *)(a1 + 32);
    +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v24, 0.2);

  }
}

void sub_100117B2C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "spinner"));
  objc_msgSend(v2, "setAlpha:", 1.0);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
  objc_msgSend(v3, "setAlpha:", 1.0);

}

void sub_100118658(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v1, "setAdjustContentOffsetForRefreshControlAsNeeded:", 0);

}

void sub_10011868C(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "refreshControl"));
  v3 = objc_msgSend(v2, "isRefreshing");

  if ((v3 & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "refreshControl"));
    objc_msgSend(v4, "beginRefreshing");

    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "refreshControl"));
    objc_msgSend(v5, "endRefreshing");

  }
}

void sub_100118F58(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  unsigned __int8 v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "defaultsKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v4));

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedUuid"));
  if (v8 == v5)
  {

  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedUuid"));
    v7 = objc_msgSend(v8, "isEqualToString:", v6);

    if ((v7 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "restoreSelection");
  }

}

void sub_1001195EC(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "description"));
  objc_msgSend(v4, "setValue:forKey:", v6, v5);

}

CGFloat sub_10011A178(int a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  return sub_10011A198(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0.0);
}

CGFloat sub_10011A198(int a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12)
{
  double v17;
  double MinY;
  uint64_t v25;
  NSObject *v26;
  double MinX;
  double Width;
  double v29;
  uint8_t v31[16];
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  if (((a2 & 0xFFFFFFFFFFFFFFFDLL) != 1) != ((a3 & 0xFFFFFFFFFFFFFFFDLL) == 1))
  {
    switch(a3)
    {
      case 0:
        v32.origin.x = a8;
        v32.origin.y = a9;
        v32.size.width = a10;
        v32.size.height = a11;
        MinY = CGRectGetMinY(v32);
        goto LABEL_12;
      case 1:
        if ((a1 & 1) != 0)
          goto LABEL_8;
        goto LABEL_11;
      case 2:
        v34.origin.x = a8;
        v34.origin.y = a9;
        v34.size.width = a10;
        v34.size.height = a11;
        MinY = CGRectGetMaxY(v34);
        goto LABEL_12;
      case 3:
        if ((a1 & 1) != 0)
        {
LABEL_11:
          v35.origin.x = a8;
          v35.origin.y = a9;
          v35.size.width = a10;
          v35.size.height = a11;
          MinY = CGRectGetMinX(v35);
        }
        else
        {
LABEL_8:
          v33.origin.x = a8;
          v33.origin.y = a9;
          v33.size.width = a10;
          v33.size.height = a11;
          MinY = CGRectGetMaxX(v33);
        }
LABEL_12:
        v17 = MinY;
        break;
      default:
        break;
    }
    v36.origin.x = a4;
    v36.origin.y = a5;
    v36.size.width = a6;
    v36.size.height = a7;
    CGRectGetMinY(v36);
    v37.origin.x = a4;
    v37.origin.y = a5;
    v37.size.width = a6;
    v37.size.height = a7;
    MinX = CGRectGetMinX(v37);
    v38.origin.x = a4;
    v38.origin.y = a5;
    v38.size.width = a6;
    v38.size.height = a7;
    Width = CGRectGetWidth(v38);
    v39.origin.x = a4;
    v39.origin.y = a5;
    v39.size.width = a6;
    v39.size.height = a7;
    CGRectGetHeight(v39);
    switch(a2)
    {
      case 1:
        v29 = 0.0;
        if (a1)
          v29 = Width;
        goto LABEL_19;
      case 3:
        v29 = 0.0;
        if (!a1)
          v29 = Width;
LABEL_19:
        MinX = v17 + a12 - v29;
        break;
      default:
        return MinX;
    }
  }
  else
  {
    v25 = _MTLogCategoryDefault();
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Incompatible Edges", v31, 2u);
    }

    return a4;
  }
  return MinX;
}

void sub_10011A850(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1005675A8;
  qword_1005675A8 = (uint64_t)v1;

  objc_msgSend((id)qword_1005675A8, "setDateStyle:", 0);
  objc_msgSend((id)qword_1005675A8, "setTimeStyle:", 1);
}

void sub_10011AA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_responseForMediaRemoteStatus:error:", a2, a3));
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

  }
}

void sub_10011AC10(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _MRSystemAppPlaybackQueue *v7;
  uint64_t ExternalRepresentation;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = objc_msgSend(a4, "mutableCopy");
  if (objc_msgSend(*(id *)(a1 + 32), "_intentWantsPlaybackQueueIncludedInNowPlayingInfo:", *(_QWORD *)(a1 + 40)))
  {
    v7 = +[MTExtensionPlaybackController playbackQueueForIdentifier:startPlayback:assetInfo:](MTExtensionPlaybackController, "playbackQueueForIdentifier:startPlayback:assetInfo:", *(_QWORD *)(a1 + 48), 1, 0);
    ExternalRepresentation = MRSystemAppPlaybackQueueCreateExternalRepresentation(kCFAllocatorDefault, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(ExternalRepresentation);
    if (v9)
      objc_msgSend(v12, "setObject:forKey:", v9, kMRMediaRemoteOptionSystemAppPlaybackQueueData);
    MRSystemAppPlaybackQueueDestroy(v7);

  }
  v10 = v12;
  if (*(_QWORD *)(a1 + 56))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_responseForMediaRemoteStatus:error:", a2, a3));
    objc_msgSend(v11, "setNowPlayingInfo:", v12);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

    v10 = v12;
  }

}

void sub_10011B864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011B880(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = (void *)a1[4];
  v3 = kMTEpisodeEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForListenNow](MTEpisode, "predicateForListenNow"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:limit:", v3, v4, a1[5], 0, 1));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
  v7 = *(_QWORD *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_10011BB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011BB98(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (v2)
  {
    v5 = v2;
    v4 = objc_msgSend(v2, "hidden");
    v3 = v5;
  }
  else
  {
    v4 = 1;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v4;

}

void sub_10011BDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011BDF4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "nextEpisode"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uuid"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10011C408(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10011C428(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "podcastUuid"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10011C480(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodeForUuid:", *(_QWORD *)(a1 + 40)));
  switch(*(_QWORD *)(a1 + 56))
  {
    case 1:
    case 4:
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v4 = 6;
      goto LABEL_4;
    case 5:
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v4 = 9;
LABEL_4:
      *(_QWORD *)(v3 + 24) = v4;
      break;
    case 6:
      v10 = v2;
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "podcast"));
      v6 = objc_msgSend(v5, "playbackNewestToOldest");

      if (v6)
        v7 = 11;
      else
        v7 = 12;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v7;
      v2 = v10;
      break;
    default:
      v11 = v2;
      v8 = objc_msgSend(v2, "isInUserEpisodes") == 0;
      v2 = v11;
      v9 = 6;
      if (!v8)
        v9 = 9;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v9;
      break;
  }

}

void sub_10011C824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011C83C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  if (objc_msgSend(v4, "hidden"))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v3 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;

  }
}

void sub_10011C9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011C9F4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(a1 + 56);
  v8 = v2;
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_BYTE *)(a1 + 65))
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "newestUserEpisodeExcludingExplicit:", v3));
    else
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "oldestUserEpisodeExcludingExplicit:", v3));
  }
  else if (*(_BYTE *)(a1 + 65))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "newestEpisodeExcludingUuid:excludeExplicit:", 0, v3));
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "oldestEpisodeExcludingExplicit:", v3));
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = v4;
  v7 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v6;

}

void sub_10011CB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011CBA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10011CF94(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = objc_opt_class(NSDictionary);
  v5 = objc_opt_class(NSArray);
  v6 = objc_opt_class(NSString);
  v7 = objc_opt_class(NSNumber);
  v8 = objc_opt_class(NSData);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 5));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1, v4, v5, v6, v7));
  v3 = (void *)qword_1005675C0;
  qword_1005675C0 = v2;

}

void sub_10011E6E8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v1 = *(void **)(a1 + 32);
  v2 = kMTPodcastPlaylistSettingsEntityName;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate truePredicate](NSPredicate, "truePredicate"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectsInEntity:predicate:sortDescriptors:", v2, v3, 0));

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v10, "latestEpisodeDate", (_QWORD)v11);
        objc_msgSend(v10, "setLatestEpisodeAvailabilityDate:");
        objc_msgSend(v10, "oldestEpisodeDate");
        objc_msgSend(v10, "setEarliestEpisodeAvailabilityDate:");
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v7);
  }

}

void sub_10011E8C0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  _QWORD v13[3];

  v13[0] = CFSTR("PlaylistOnTheGo");
  v13[1] = CFSTR("PlaylistMostRecent");
  v13[2] = CFSTR("PlaylistAllUnplayed");
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v13, 3));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), (_QWORD)v8));
        objc_msgSend(v7, "setIsUngroupedList:", 1);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

}

void sub_10011EAE4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", CFSTR("PlaylistOnTheGo")));
  if ((os_feature_enabled_bluemoon(v2) & 1) == 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "upNextController"));
    objc_msgSend(v4, "beginUpdates");

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "episodes", 0));
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v24;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v24 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v9);
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "upNextController"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "uuid"));
          objc_msgSend(v12, "addEpisodeUuidToUpNext:", v13);

          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v7);
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[MTPlayerController defaultInstance](MTPlayerController, "defaultInstance"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "upNextController"));
    objc_msgSend(v15, "endUpdates");

  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[MTLibrary sharedInstance](MTLibrary, "sharedInstance"));
  objc_msgSend(v16, "deletePlaylist:", v2);

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("All Unplayed"), &stru_1004C6D40, 0));

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", CFSTR("PlaylistAllUnplayed")));
  objc_msgSend(*(id *)(a1 + 40), "deleteOrUpdatePlaylist:ifIsDefault:", v19, objc_msgSend(*(id *)(a1 + 40), "isDefaultSettingsForPlaylist:title:episodesToShow:showPlayedEpisodes:includeAllPodcasts:", v19, v18, 0, 0, 1));
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("MOST_RECENT_PLURAL"), &stru_1004C6D40, 0));

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playlistForUuid:", CFSTR("PlaylistMostRecent")));
  objc_msgSend(*(id *)(a1 + 40), "deleteOrUpdatePlaylist:ifIsDefault:", v22, objc_msgSend(*(id *)(a1 + 40), "isDefaultSettingsForPlaylist:title:episodesToShow:showPlayedEpisodes:includeAllPodcasts:", v22, v21, 1, 1, 1));

}

void sub_10011F480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011F498(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  id v14;
  __int16 v15;
  int v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForPodcastIsSubscribed:](MTEpisode, "predicateForPodcastIsSubscribed:", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForBookmarkedEpisodes](MTEpisode, "predicateForBookmarkedEpisodes"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForDownloaded:excludeHidden:](MTEpisode, "predicateForDownloaded:excludeHidden:", 1, 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "OR:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "AND:", v5));

  v7 = objc_alloc((Class)NSFetchRequest);
  v8 = objc_msgSend(v7, "initWithEntityName:", kMTEpisodeEntityName);
  objc_msgSend(v8, "setPredicate:", v6);
  v9 = objc_msgSend(*(id *)(a1 + 32), "countForFetchRequest:error:", v8, 0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (uint64_t)v9 > 0;
  v10 = _MTLogCategoryDatabase(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v13 = 134218240;
    v14 = v9;
    v15 = 1024;
    v16 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) migrateShowListToggle: There are %li library episodes, setting flag to %i", (uint8_t *)&v13, 0x12u);
  }

}

void sub_10011F7C0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *i;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  unsigned __int8 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  id obj;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];
  void *v65;
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  uint64_t v69;
  _BYTE v70[128];

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForNotHiddenPodcasts](MTPodcast, "predicateForNotHiddenPodcasts"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:", kMTPodcastEntityName, v3, 0, 0));

  v6 = _MTLogCategoryDatabase(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) Running migration on podcasts.", buf, 2u);
  }

  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  obj = v4;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v70, 16);
  v51 = v8;
  if (v8)
  {
    v50 = *(_QWORD *)v61;
    v47 = kMTEpisodeEntityName;
    v48 = kEpisodePubDate;
    v54 = kEpisodePodcast;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v61 != v50)
        {
          v10 = v9;
          objc_enumerationMutation(obj);
          v9 = v10;
        }
        v52 = v9;
        v55 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * v9);
        v11 = _MTLogCategoryDatabase(v8);
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "uuid"));
          v14 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138543618;
          v67 = v13;
          v68 = 2048;
          v69 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) Running migration on podcast with uuid %{public}@ and version %ld.", buf, 0x16u);

        }
        v15 = objc_msgSend(*(id *)(a1 + 48), "runMigrationForPodcast:version:", v55, *(_QWORD *)(a1 + 40));
        if ((_DWORD)v15)
        {
          v16 = _MTLogCategoryDatabase(v15);
          v17 = objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "uuid"));
            *(_DWORD *)buf = 138543362;
            v67 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[Migration] (Data) Skipping migration for podcast with uuid %{public}@ because it was deleted.", buf, 0xCu);

          }
        }
        else if (*(uint64_t *)(a1 + 40) < 32)
        {
          v21 = *(void **)(a1 + 32);
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "uuid"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForAllEpisodesOnPodcastUuid:](MTEpisode, "predicateForAllEpisodesOnPodcastUuid:", v22));
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", v48, 0));
          v65 = v24;
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v65, 1));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:", v47, v23, v25, 0));

          v28 = _MTLogCategoryDatabase(v27);
          v29 = objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "uuid"));
            *(_DWORD *)buf = 138543362;
            v67 = v30;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) Running migration on episodes for podcast with uuid: %{public}@", buf, 0xCu);

          }
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v17 = v26;
          v31 = -[NSObject countByEnumeratingWithState:objects:count:](v17, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
          if (v31)
          {
            v53 = 0;
            v32 = *(_QWORD *)v57;
            do
            {
              for (i = 0; i != v31; i = (char *)i + 1)
              {
                if (*(_QWORD *)v57 != v32)
                  objc_enumerationMutation(v17);
                v34 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i);
                v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "podcastUuid"));
                v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "podcast"));
                v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "uuid"));
                v38 = objc_msgSend(v35, "isEqualToString:", v37);

                if ((v38 & 1) == 0)
                {
                  objc_msgSend(v34, "setPrimitiveValue:forKey:", 0, v54);
                  objc_msgSend(v34, "setPodcast:", v55);
                }
                v39 = objc_autoreleasePoolPush();
                switch(*(_QWORD *)(a1 + 40))
                {
                  case 0:
                    objc_msgSend(*(id *)(a1 + 48), "episodeMigrationForVersion0to1:", v34);
                    goto LABEL_27;
                  case 1:
                  case 2:
LABEL_27:
                    objc_msgSend(v34, "setEpisodeLevel:", v53++);
                    goto LABEL_28;
                  case 3:
                  case 4:
                  case 5:
                  case 6:
LABEL_28:
                    objc_msgSend(*(id *)(a1 + 48), "episodeMigrationForVersion6to7:", v34);
                    goto LABEL_29;
                  case 7:
                  case 8:
                  case 9:
                  case 0xALL:
                  case 0xBLL:
                  case 0xCLL:
                  case 0xDLL:
LABEL_29:
                    objc_msgSend(*(id *)(a1 + 48), "episodeMigrationForVersion13to14:", v34);
                    goto LABEL_30;
                  case 0xELL:
                  case 0xFLL:
                  case 0x10:
LABEL_30:
                    objc_msgSend(*(id *)(a1 + 48), "episodeMigrationForVersion16to17:", v34);
                    goto LABEL_31;
                  case 0x11:
LABEL_31:
                    objc_msgSend(*(id *)(a1 + 48), "episodeMigrationForVersion17to18:", v34);
                    goto LABEL_32;
                  case 0x12:
                  case 0x13:
                  case 0x14:
                  case 0x15:
LABEL_32:
                    objc_msgSend(*(id *)(a1 + 48), "episodeMigrationForVersion21to22:", v34);
                    goto LABEL_33;
                  case 0x16:
                  case 0x17:
LABEL_33:
                    objc_msgSend(*(id *)(a1 + 48), "episodeMigrationForVersion23to24:", v34);
                    goto LABEL_34;
                  case 0x18:
LABEL_34:
                    objc_msgSend(*(id *)(a1 + 48), "episodeMigrationForVersion24to25:", v34);
                    goto LABEL_35;
                  case 0x19:
                  case 0x1ALL:
                  case 0x1BLL:
                  case 0x1CLL:
                  case 0x1DLL:
LABEL_35:
                    objc_msgSend(*(id *)(a1 + 48), "episodeMigrationForVersion29to30:", v34);
                    break;
                  default:
                    break;
                }
                objc_autoreleasePoolPop(v39);
              }
              v31 = -[NSObject countByEnumeratingWithState:objects:count:](v17, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
            }
            while (v31);
          }

          v41 = _MTLogCategoryDatabase(v40);
          v42 = objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "uuid"));
            *(_DWORD *)buf = 138543362;
            v67 = v43;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) Finished migration for episodes for podcast with uuid: %{public}@", buf, 0xCu);

          }
        }
        else
        {
          v19 = _MTLogCategoryDatabase(v15);
          v17 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "uuid"));
            *(_DWORD *)buf = 138543362;
            v67 = v20;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[Migration] (Data) Version is >= 32, skipping episodes migration for podcast with uuid %{public}@", buf, 0xCu);

          }
        }

        v9 = v52 + 1;
      }
      while ((id)(v52 + 1) != v51);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v70, 16);
      v51 = v8;
    }
    while (v8);
  }

  v45 = _MTLogCategoryDatabase(v44);
  v46 = objc_claimAutoreleasedReturnValue(v45);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) Finished migration for podcasts.", buf, 2u);
  }

}

void sub_10011FEEC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_10012010C(uint64_t a1)
{
  void *v2;
  id v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "executeFetchRequest:", *(_QWORD *)(a1 + 40)));
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v2;
  v4 = (char *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v14;
    do
    {
      v8 = 0;
      v12 = v6;
      v9 = v6 + 1;
      do
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v3);
        v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v8);
        v11 = objc_autoreleasePoolPush();
        objc_msgSend(v10, "setStoreTrackId:", +[MTStoreIdentifier serpentIdFromAdamId:](MTStoreIdentifier, "serpentIdFromAdamId:", objc_msgSend(v10, "storeTrackId")));
        if (!((unint64_t)&v9[v8] % (unint64_t)objc_msgSend(*(id *)(a1 + 40), "fetchBatchSize")))
          objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
        objc_autoreleasePoolPop(v11);
        ++v8;
      }
      while (v5 != (char *)v8);
      v6 = &v5[(_QWORD)v12];
      v5 = (char *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

}

void sub_100120B64(id *a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "executeFetchRequest:", a1[5]));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7), "resolveAvailabilityDate");
        if (!(((unint64_t)v7 + v5 + 1) % (unint64_t)objc_msgSend(a1[5], "fetchBatchSize")))
          objc_msgSend(a1[4], "saveInCurrentBlock");
        v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      v5 += (uint64_t)v4;
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "newestEpisodeByAvailabiltyTime"));
  objc_msgSend(v8, "firstTimeAvailable");
  objc_msgSend(a1[6], "setLatestEpisodeAvailabilityTime:");

}

void sub_100120D48(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = objc_alloc_init((Class)MTEpisodeLevelCalculator);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  objc_msgSend(v3, "unsafeUpdateEpisodeShowTypeSpecificLevelsWithShowUUID:on:", v2, *(_QWORD *)(a1 + 40));

}

id *sub_100121FE8(id *result)
{
  id *v1;

  v1 = result;
  switch((unint64_t)result[5])
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
      objc_msgSend(result[6], "allEpisodesMigrationForVersion40to41In:", result[4]);
      goto LABEL_3;
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
LABEL_3:
      objc_msgSend(v1[6], "allEpisodesMigrationForVersion43to44In:", v1[4]);
      goto LABEL_4;
    case 0x2CuLL:
    case 0x2DuLL:
LABEL_4:
      objc_msgSend(v1[6], "allEpisodesMigrationForVersion45to46In:", v1[4]);
      goto LABEL_5;
    case 0x2EuLL:
LABEL_5:
      objc_msgSend(v1[6], "allEpisodesMigrationForVersion46to47In:", v1[4]);
      goto LABEL_6;
    case 0x2FuLL:
LABEL_6:
      objc_msgSend(v1[6], "allEpisodesMigrationForVersion47to48In:", v1[4]);
      goto LABEL_7;
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
LABEL_7:
      objc_msgSend(v1[6], "allEpisodesMigrationForVersion51to52In:", v1[4]);
      goto LABEL_8;
    case 0x35uLL:
    case 0x36uLL:
LABEL_8:
      objc_msgSend(v1[6], "allEpisodesMigrationForVersion53to54In:", v1[4]);
      goto LABEL_9;
    case 0x37uLL:
LABEL_9:
      objc_msgSend(v1[6], "allEpisodesMigrationForVersion54to55In:", v1[4]);
      goto LABEL_10;
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
LABEL_10:
      objc_msgSend(v1[6], "allEpisodesMigrationForVersion59to60In:", v1[4]);
      goto LABEL_11;
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
    case 0x40uLL:
    case 0x41uLL:
LABEL_11:
      objc_msgSend(v1[6], "allEpisodesMigrationForVersion65to66In:", v1[4]);
      goto LABEL_12;
    case 0x42uLL:
    case 0x43uLL:
    case 0x44uLL:
LABEL_12:
      result = (id *)_objc_msgSend(v1[6], "allEpisodesMigrationForVersion68to69In:", v1[4]);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1001223E8(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "podcast", (_QWORD)v8));
        objc_msgSend(v7, "modifiedDate");
        +[MTRecencyUtil scoreFromModifiedDate:](MTRecencyUtil, "scoreFromModifiedDate:");
        objc_msgSend(v6, "setModifiedDateScore:");

      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }

}

void sub_1001232FC(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5), "setDownloadBehavior:", 4, (_QWORD)v6);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_100123E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100123E38(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[3];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", kEpisodeLastDatePlayed, 0));
  v20[0] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", kEpisodePersistentID, 0));
  v20[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", kEpisodeAssetURL, 0));
  v20[2] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v20, 3));

  v6 = kMTEpisodeEntityName;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForAudio:](MTEpisode, "predicateForAudio:", 0));
  v19 = kEpisodePodcastUuid;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
  v18[0] = kEpisodeGuid;
  v18[1] = kEpisodeEnclosureUrl;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 2));
  v10 = kEpisodeUuid;
  v17 = kEpisodeUuid;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[PFCoreDataUtils findDuplicateItemsWithEntity:itemsToLookAtFilter:keysThatMustMatchToBeConsideredADuplicate:keysThatShouldNotBeDuplicated:keyValuesOfDuplicatedItemsToReturn:sortDescriptors:](_TtC18PodcastsFoundation15PFCoreDataUtils, "findDuplicateItemsWithEntity:itemsToLookAtFilter:keysThatMustMatchToBeConsideredADuplicate:keysThatShouldNotBeDuplicated:keyValuesOfDuplicatedItemsToReturn:sortDescriptors:", v6, v7, v8, v9, v11, v5));

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v10));
  v14 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v13));
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

}

void sub_10012420C(uint64_t a1)
{
  void *v2;
  void *i;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  unsigned __int8 v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  unsigned __int8 v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  id obj;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  NSObject *v48;
  __int16 v49;
  NSObject *v50;
  _BYTE v51[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "executeFetchRequest:", *(_QWORD *)(a1 + 40)));
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  obj = v2;
  v40 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
  if (v40)
  {
    v39 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v40; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v39)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "assetURL"));
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v5));
        v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "path"));

        v8 = (void *)objc_claimAutoreleasedReturnValue(+[MTConstants managedAssetsDirectoryURL](MTConstants, "managedAssetsDirectoryURL"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "URLByAppendingPathComponent:isDirectory:", v9, 0));
        v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject pathExtension](v7, "pathExtension"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URLByAppendingPathExtension:", v11));
        v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "path"));

        v14 = -[NSObject isEqualToString:](v7, "isEqualToString:", v13);
        if ((_DWORD)v14)
        {
          v15 = _MTLogCategoryDatabase(v14);
          v16 = objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
            *(_DWORD *)buf = 138543618;
            v48 = v7;
            v49 = 2114;
            v50 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) (Watch) No need to remove existing file with same old and new path %{public}@ for episode %{public}@", buf, 0x16u);

          }
        }
        else
        {
          v18 = objc_msgSend(*(id *)(a1 + 48), "fileExistsAtPath:", v13);
          if ((_DWORD)v18)
          {
            v19 = _MTLogCategoryDatabase(v18);
            v20 = objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
              *(_DWORD *)buf = 138543618;
              v48 = v13;
              v49 = 2114;
              v50 = v21;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) (Watch) Will remove existing file at path %{public}@ for episode %{public}@", buf, 0x16u);

            }
            v22 = *(void **)(a1 + 48);
            v42 = 0;
            v23 = objc_msgSend(v22, "removeItemAtPath:error:", v13, &v42);
            v24 = v42;
            v25 = v24;
            if ((v23 & 1) == 0)
            {
              v26 = _MTLogCategoryDatabase(v24);
              v27 = objc_claimAutoreleasedReturnValue(v26);
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                v28 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
                *(_DWORD *)buf = 138543618;
                v48 = v28;
                v49 = 2112;
                v50 = v25;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "[Migration] (Data) (Watch) Failed to remove existing file for episode %{public}@ - %@", buf, 0x16u);

              }
            }

          }
          v29 = *(void **)(a1 + 48);
          v41 = 0;
          v30 = objc_msgSend(v29, "moveItemAtPath:toPath:error:", v7, v13, &v41);
          v31 = v41;
          v16 = v31;
          if ((v30 & 1) == 0)
          {
            v32 = _MTLogCategoryDatabase(v31);
            v33 = objc_claimAutoreleasedReturnValue(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              v34 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
              *(_DWORD *)buf = 138543618;
              v48 = v34;
              v49 = 2112;
              v50 = v16;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "[Migration] (Data) (Watch) Failed to move asset for episode %{public}@ - %@", buf, 0x16u);

            }
            v13 = 0;
          }
          v35 = _MTLogCategoryDatabase(v31);
          v36 = objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            v37 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
            *(_DWORD *)buf = 138543618;
            v48 = v37;
            v49 = 2114;
            v50 = v13;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) (Watch) Updated asset url for episode %{public}@ to %{public}@", buf, 0x16u);

          }
          objc_msgSend(v4, "setAssetURL:", v13);
        }

      }
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
    }
    while (v40);
  }

}

uint64_t sub_100124858(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MPMediaQuery mt_allItemsForPodcastsApp](MPMediaQuery, "mt_allItemsForPodcastsApp"));
  objc_msgSend(*(id *)(a1 + 32), "deleteItems:", v2);

  return 1;
}

void sub_10012489C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  id v12;
  uint8_t buf[4];
  id v14;

  v2 = *(void **)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v12 = 0;
  v3 = objc_msgSend(v2, "executeRequest:error:", v1, &v12);
  v4 = v12;
  v5 = _MTLogCategoryDatabase(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v4;
      v8 = "[Migration] (Data) (Watch) Batch update for medialibrary episode removal failed %@";
      v9 = v7;
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, buf, v11);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v8 = "[Migration] (Data) (Watch) Set all persistent IDs to 0";
    v9 = v7;
    v10 = OS_LOG_TYPE_DEFAULT;
    v11 = 2;
    goto LABEL_6;
  }

}

void sub_100124B0C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  int v14;
  id v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  id v19;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v15 = 0;
  v4 = objc_msgSend(v2, "executeRequest:error:", v3, &v15);
  v5 = v15;
  v6 = _MTLogCategoryDatabase(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)buf = 67109378;
      v17 = v9;
      v18 = 2112;
      v19 = v5;
      v10 = "[Migration] (Data) Failed to prune persistent history older than %d days old - %@";
      v11 = v8;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 18;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, buf, v13);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109120;
    v17 = v14;
    v10 = "[Migration] (Data) Did prune persistent history older than %d days old";
    v11 = v8;
    v12 = OS_LOG_TYPE_DEFAULT;
    v13 = 8;
    goto LABEL_6;
  }

}

void sub_100124D30(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPlaylistEntityName, 0, 0));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100124DC8;
  v3[3] = &unk_1004ABEB0;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v3);

}

void sub_100124DC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  if ((objc_msgSend(v3, "isItunesPlaylist") & 1) == 0
    && (objc_msgSend(v3, "isItunesSmartPlaylist") & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
    if (objc_msgSend(v4, "isEqualToString:", kPlaylistITunesPlaylistUuid))
    {
LABEL_13:

      goto LABEL_14;
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
    v6 = objc_msgSend(v5, "isEqualToString:", CFSTR("PlaylistOnTheGo"));

    if ((v6 & 1) == 0)
    {
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settings", 0));
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v14;
        do
        {
          v11 = 0;
          do
          {
            if (*(_QWORD *)v14 != v10)
              objc_enumerationMutation(v7);
            objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v11), "setNeedsUpdate:", 1);
            v11 = (char *)v11 + 1;
          }
          while (v9 != v11);
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        }
        while (v9);
      }

      v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTBaseProcessor sharedInstance](MTPlaylistQueryManager, "sharedInstance"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
      objc_msgSend(v4, "updatePlaylistWithUuid:inContext:", v12, *(_QWORD *)(a1 + 32));

      goto LABEL_13;
    }
  }
LABEL_14:

}

void sub_10012581C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100125834(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_fetchRequestForMostRecentlyPlayedEpisode"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "executeFetchRequest:", v7));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kPodcastLastDatePlayed));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1001262AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1001262DC(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v3 = v2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "deletePlayedEpisodesResolvedValue");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v3, "episodeLimitResolvedValue");
    v2 = v3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }

}

void sub_1001265D8(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "episodeUuids"));
  objc_msgSend(v1, "_removeDownloadAssetsForEpisodeUuids:reason:", v2, CFSTR("removal process became enabled"));

}

BOOL sub_100126784(id a1, MTEpisode *a2)
{
  MTEpisode *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v29;
  void *v30;
  __int16 v31;
  void *v32;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode assetURL](v2, "assetURL"));
  if (v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v3));
    if (v4)
    {
      v5 = (void *)v4;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTConstants managedAssetsDirectoryURL](MTConstants, "managedAssetsDirectoryURL"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URLByStandardizingPath"));

      if (!v7)
      {
        v15 = _MTLogCategoryDownload(v8, v9);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v29) = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Uh oh, no managedAssetsDirectoryURL found", (uint8_t *)&v29, 2u);
        }

        v18 = _MTLogCategoryDefault(v17);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v29) = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Uh oh, no managedAssetsDirectoryURL found", (uint8_t *)&v29, 2u);
        }
        v14 = 1;
        goto LABEL_20;
      }
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URLByStandardizingPath"));

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "scheme"));
      if (objc_msgSend(v11, "isEqualToString:", CFSTR("ipod-library")))
      {

      }
      else
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "path"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "path"));
        v22 = objc_msgSend(v20, "hasPrefix:", v21);

        if ((v22 & 1) == 0)
        {
          v25 = _MTLogCategoryDownload(v12, v13);
          v19 = objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            v26 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode title](v2, "title"));
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "absoluteString"));
            v29 = 138543618;
            v30 = v26;
            v31 = 2114;
            v32 = v27;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Skipping asset auto-deletion (asset not in managed folder) of episode '%{public}@' url %{public}@", (uint8_t *)&v29, 0x16u);

          }
          v14 = 1;
          goto LABEL_19;
        }
      }
      v23 = _MTLogCategoryDownload(v12, v13);
      v19 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(-[MTEpisode title](v2, "title"));
        v29 = 138543362;
        v30 = v24;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Allowing asset auto-deletion (in managed folder) of episode '%{public}@'", (uint8_t *)&v29, 0xCu);

      }
      v14 = 0;
LABEL_19:
      v5 = v10;
LABEL_20:

      goto LABEL_21;
    }
  }
  v14 = 0;
LABEL_21:

  return v14;
}

void sub_100126D7C(uint64_t a1, void *a2)
{
  MTUnplayedManifest *v3;
  id v4;

  v4 = a2;
  if (!v4)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = -[MTUnplayedManifest initWithInitialEpisodeUuid:]([MTUnplayedManifest alloc], "initWithInitialEpisodeUuid:", v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100126F74(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[12];

  v3[0] = kPodcastFeedUrl;
  v3[1] = kPodcastSubscribed;
  v3[2] = kPodcastTitle;
  v3[3] = kPodcastUpdatedDate;
  v3[4] = kPodcastAddedDate;
  v3[5] = kPodcastStoreCollectionId;
  v3[6] = kPodcastPlaybackNewestToOldest;
  v3[7] = kPodcastDarkCount;
  v3[8] = kPodcastLastTouchDate;
  v3[9] = kPodcastUuid;
  v3[10] = kPodcastSortAscending;
  v3[11] = kPodcastShowTypeSetting;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 12));
  v2 = (void *)qword_1005675D0;
  qword_1005675D0 = v1;

}

void sub_100128118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

id sub_100128148(uint64_t a1)
{
  void *v2;
  void *v3;
  id result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  objc_msgSend(*(id *)(a1 + 32), "setAddedSubscriptions:", v2);

  objc_msgSend(*(id *)(a1 + 32), "markAllShowsAsSynced");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageProvider"));
  objc_msgSend(v3, "immediatelyDeleteAllHiddenPodcasts");

  result = objc_msgSend(*(id *)(a1 + 32), "mergeLocalAndRemoteData:forKey:version:mismatch:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 72));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100128958(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100128988(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint8_t buf[4];
  void *v9;
  __int16 v10;
  void *v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastCacheInContext:", *(_QWORD *)(a1 + 40)));
  v3 = _MTLogCategoryCloudSync(objc_msgSend(*(id *)(a1 + 32), "importRemotePodcastDicts:inContext:visitingPodcastsInCache:updatingPodcastsToAdd:updatingPodcastsToUnsubscribe:mismatch:version:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), v2, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72)));
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logPrefix"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "addedSubscriptions"));
    *(_DWORD *)buf = 138543619;
    v9 = v5;
    v10 = 2113;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ Podcasts added since last sync: %{private}@", buf, 0x16u);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "unvisitedPodcastsToUnsubscribeIn:mismatch:version:", v2, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24, *(_QWORD *)(a1 + 72)));
  objc_msgSend(*(id *)(a1 + 64), "unionSet:", v7);

}

BOOL sub_100128C14(id a1, NSString *a2, id a3)
{
  id v4;
  BOOL v5;

  v4 = a3;
  v5 = !-[NSString isEqualToString:](a2, "isEqualToString:", kPodcastStoreCollectionId)
    || objc_msgSend(v4, "integerValue");

  return v5;
}

void sub_100129780(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[2];
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  id v52;
  __int16 v53;
  void *v54;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", v3));
  v5 = _MTLogCategoryCloudSync(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "logPrefix"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "feedURL"));
    v10 = objc_msgSend(v4, "storeCollectionId");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
    *(_DWORD *)buf = 138544387;
    v46 = v7;
    v47 = 2113;
    v48 = v8;
    v49 = 2113;
    v50 = v9;
    v51 = 2049;
    v52 = v10;
    v53 = 2114;
    v54 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ Unvisited local podcast: \"%{private}@\", %{private}@, %{private}lld, %{public}@", buf, 0x34u);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "addedSubscriptions"));
  v13 = objc_msgSend(v12, "containsObject:", v3);

  if ((v13 & 1) != 0)
  {
    v15 = _MTLogCategoryCloudSync(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "logPrefix"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "feedURL"));
      v20 = objc_msgSend(v4, "storeCollectionId");
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
      *(_DWORD *)buf = 138544387;
      v46 = v17;
      v47 = 2113;
      v48 = v18;
      v49 = 2113;
      v50 = v19;
      v51 = 2049;
      v52 = v20;
      v53 = 2114;
      v54 = v21;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ Marking mismatch = YES. Reason: unvisited local podcast is marked as dirty (not synced yet), i.e. it's new and it's not in cloud yet, we must push it in a subsequent SET transaction: \"%{private}@\", %{private}@, %{private}lld, %{public}@", buf, 0x34u);

    }
    **(_BYTE **)(a1 + 64) = 1;
  }
  else
  {
    v22 = objc_msgSend(v4, "subscribed");
    if ((_DWORD)v22)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "config"));
      v24 = objc_msgSend(v23, "supportsMetrics");

      if (v24)
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storageProvider"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", **(unsigned __int8 **)(a1 + 64), CFSTR("version"), CFSTR("mismatch"), *(_QWORD *)(a1 + 48)));
        v44[1] = v27;
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v44, &v43, 2));
        objc_msgSend(v26, "recordUserAction:dataSource:withData:", CFSTR("cloud_sync_delete_podcast"), v4, v28);

      }
      v29 = _MTLogCategoryCloudSync(v25);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "logPrefix"));
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "feedURL"));
        v34 = objc_msgSend(v4, "storeCollectionId");
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
        *(_DWORD *)buf = 138544387;
        v46 = v31;
        v47 = 2113;
        v48 = v32;
        v49 = 2113;
        v50 = v33;
        v51 = 2049;
        v52 = v34;
        v53 = 2114;
        v54 = v35;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}@ Marking podcast for unsubscription [reason: it's an old subscription (i.e. is marked as already synced) which is not present in cloud, so it must have been unsubscribed remotely]: \"%{private}@\", %{private}@, %{private}lld, %{public}@", buf, 0x34u);

      }
      objc_msgSend(*(id *)(a1 + 56), "addObject:", v3);
    }
    else
    {
      v36 = _MTLogCategoryCloudSync(v22);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "logPrefix"));
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "feedURL"));
        v41 = objc_msgSend(v4, "storeCollectionId");
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
        *(_DWORD *)buf = 138544387;
        v46 = v38;
        v47 = 2113;
        v48 = v39;
        v49 = 2113;
        v50 = v40;
        v51 = 2049;
        v52 = v41;
        v53 = 2114;
        v54 = v42;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%{public}@ Ignoring local unvisited podcast [reason: not subscribed locally]: \"%{private}@\", %{private}@, %{private}lld, %{public}@", buf, 0x34u);

      }
    }
  }

}

void sub_10012A358(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD v35[4];
  id v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  id v48;
  __int16 v49;
  uint64_t v50;

  v2 = *(void **)(a1 + 32);
  v3 = kMTPodcastEntityName;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast sortDescriptorsForManualOrder](MTPodcast, "sortDescriptorsForManualOrder"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectsInEntity:predicate:sortDescriptors:", v3, 0, v4));

  v6 = objc_msgSend(v5, "mutableCopy");
  v7 = objc_alloc_init((Class)NSMutableArray);
  v29 = a1;
  v8 = *(void **)(a1 + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("subscribed == 1")));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "filteredArrayUsingPredicate:", v9));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "valueForKey:", CFSTR("feedURL")));
  v12 = objc_msgSend(v11, "mutableCopy");

  if (objc_msgSend(v12, "count"))
  {
    while (1)
    {
      while (!objc_msgSend(v6, "count"))
      {
LABEL_6:
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472;
        v35[2] = sub_10012A754;
        v35[3] = &unk_1004AC028;
        v14 = v12;
        v36 = v14;
        v15 = objc_msgSend(v5, "indexOfObjectPassingTest:", v35);
        if (v15 != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", v15));
          objc_msgSend(v7, "addObject:", v16);

        }
        objc_msgSend(v14, "removeObjectAtIndex:", 0);

        if (!objc_msgSend(v14, "count"))
          goto LABEL_9;
      }
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", 0));
      objc_msgSend(v6, "removeObjectAtIndex:", 0);
      if (objc_msgSend(v13, "subscribed"))
      {

        goto LABEL_6;
      }
      objc_msgSend(v7, "addObject:", v13);

    }
  }
LABEL_9:
  v28 = v5;
  objc_msgSend(v7, "addObjectsFromArray:", v6, v12);
  v30 = (uint64_t)objc_msgSend(v7, "count");
  if (v30 >= 1)
  {
    v17 = 0;
    v18 = v30;
    do
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", v17));
      v20 = _MTLogCategoryCloudSync(v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      v22 = v18;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v29 + 48), "logPrefix"));
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v19, "sortOrder")));
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v18));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "title"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "feedURL"));
        v31 = objc_msgSend(v19, "storeCollectionId");
        v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "uuid"));
        *(_DWORD *)buf = 138544899;
        v38 = v34;
        v39 = 2112;
        v40 = v32;
        v41 = 2112;
        v42 = v23;
        v43 = 2113;
        v44 = v33;
        v45 = 2113;
        v46 = v24;
        v47 = 2049;
        v48 = v31;
        v49 = 2114;
        v50 = v25;
        v26 = (void *)v25;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%{public}@ Reordering local podcast to match remote order: from %@ to %@. Podcast: \"%{private}@\", %{private}@, %{private}lld, %{public}@", buf, 0x48u);

        v22 = v30 - v17;
      }

      objc_msgSend(v19, "setSortOrder:", v22);
      ++v17;
      --v18;
    }
    while (v18);
  }

}

id sub_10012A754(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "feedURL"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 0));
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5;
}

void sub_10012A9A4(uint64_t a1)
{
  void *v2;
  id v3;
  _QWORD v4[5];
  id v5;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName, *(_QWORD *)(a1 + 40), 0));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10012AA40;
  v4[3] = &unk_1004AA418;
  v2 = *(void **)(a1 + 56);
  v4[4] = *(_QWORD *)(a1 + 48);
  v5 = v2;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v4);

}

void sub_10012AA40(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;

  v3 = a2;
  v4 = _MTLogCategoryCloudSync(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logPrefix"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedURL"));
    v9 = objc_msgSend(v3, "storeCollectionId");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
    v13 = 138544387;
    v14 = v6;
    v15 = 2113;
    v16 = v7;
    v17 = 2113;
    v18 = v8;
    v19 = 2049;
    v20 = v9;
    v21 = 2114;
    v22 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ New locally added subscription detected: \"%{private}@\", %{private}@, %{private}lld, %{public}@", (uint8_t *)&v13, 0x34u);

  }
  v11 = *(void **)(a1 + 40);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  objc_msgSend(v11, "addObject:", v12);

}

void sub_10012AD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10012AD54(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "countOfObjectsInEntity:predicate:", kMTPodcastEntityName, *(_QWORD *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_10012B04C(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName, *(_QWORD *)(a1 + 40), 0));
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5), "setHasBeenSynced:", 1);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_10012B2A4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;

  v2 = kMTPodcastEntityName;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storageProvider"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForSyncablePodcastsForSyncType:](MTPodcast, "predicateForSyncablePodcastsForSyncType:", objc_msgSend(v4, "syncType")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast sortDescriptorsForManualOrder](MTPodcast, "sortDescriptorsForManualOrder"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsInEntity:predicate:sortDescriptors:", v2, v5, v6));

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10012B3A0;
  v9[3] = &unk_1004AA418;
  v7 = *(void **)(a1 + 48);
  v9[4] = *(_QWORD *)(a1 + 40);
  v10 = v7;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", v9);

}

void sub_10012B3A0(uint64_t a1, void *a2)
{
  id v3;
  NSMutableDictionary *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  const __CFString *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  id v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  const __CFString *v45;
  __int16 v46;
  void *v47;
  _BYTE v48[128];

  v3 = a2;
  v4 = objc_opt_new(NSMutableDictionary);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedURL"));
  if (v5)
  {

LABEL_3:
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v6 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "subscriptionSyncProcessorSyncKeys", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v30, v48, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v10)
            objc_enumerationMutation(v7);
          v12 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", v12));
          if (v13)
            -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v13, v12);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v30, v48, 16);
      }
      while (v9);
    }

    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastStoreCollectionId));
    v15 = v14;
    if (v14)
      v14 = -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v14, kPodcastPID);
    v16 = _MTLogCategoryCloudSync(v14);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logPrefix"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary description](v4, "description"));
      *(_DWORD *)buf = 138543619;
      v35 = v18;
      v36 = 2113;
      v37 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@ Adding local podcast: %{private}@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);
    goto LABEL_17;
  }
  v20 = objc_msgSend(v3, "syncType");
  if (v20 == (id)1)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", kPodcastStoreCollectionId));

    if (v21)
      goto LABEL_3;
  }
  v22 = _MTLogCategoryCloudSync(v20);
  v15 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logPrefix"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedURL"));
    v26 = objc_msgSend(v3, "storeCollectionId");
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
    if (objc_msgSend(v3, "subscribed"))
      v28 = CFSTR("YES");
    else
      v28 = CFSTR("NO");
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "description"));
    *(_DWORD *)buf = 138544899;
    v35 = v23;
    v36 = 2113;
    v37 = v24;
    v38 = 2113;
    v39 = v25;
    v40 = 2049;
    v41 = v26;
    v42 = 2114;
    v43 = v27;
    v44 = 2114;
    v45 = v28;
    v46 = 2113;
    v47 = v29;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ Skipping local podcast: \"%{private}@\", %{private}@, %{private}lld, %{public}@, subscribed: %{public}@, description: %{private}@", buf, 0x48u);

  }
LABEL_17:

}

void sub_10012B7F0(uint64_t a1)
{
  uint64_t v1;
  void *i;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  double v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  id obj;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[5];
  NSObject *v49;
  void *v50;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t buf[4];
  NSObject *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  id v63;
  _BYTE v64[128];

  v1 = a1;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  obj = *(id *)(a1 + 32);
  v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
  if (v45)
  {
    v47 = kPodcastTitle;
    v43 = kPodcastFeedUrl;
    v44 = *(_QWORD *)v53;
    v42 = kPodcastStoreCollectionId;
    v41 = v1;
    do
    {
      for (i = 0; i != v45; i = (char *)i + 1)
      {
        if (*(_QWORD *)v53 != v44)
          objc_enumerationMutation(obj);
        v3 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)i);
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v47));
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v43));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v42));
        v7 = objc_msgSend(v6, "unsignedLongLongValue");

        v9 = _MTLogCategoryCloudSync(v8);
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 40), "logPrefix"));
          *(_DWORD *)buf = 138544131;
          v57 = v11;
          v58 = 2113;
          v59 = v4;
          v60 = 2113;
          v61 = v5;
          v62 = 2049;
          v63 = v7;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ Subscribing from cloud to remote podcast: \"%{private}@\", %{private}@, %{private}lld", buf, 0x2Au);

        }
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v5));
        if (!v12)
        {
          v33 = _MTLogCategoryCloudSync(0);
          v14 = objc_claimAutoreleasedReturnValue(v33);
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            goto LABEL_28;
          v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 40), "logPrefix"));
          *(_DWORD *)buf = 138543362;
          v57 = v17;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}@ Attempting to add a podcast with a nil URL", buf, 0xCu);
          goto LABEL_22;
        }
        v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 48), "podcastForFeedUrl:", v5));
        v14 = v13;
        if (v13)
        {
          v13 = -[NSObject hidden](v13, "hidden");
          if ((_DWORD)v13)
          {
            v13 = -[NSObject lastUnfollowedDate](v14, "lastUnfollowedDate");
            if (v15 > *(double *)(v1 + 56))
            {
              v16 = _MTLogCategoryCloudSync(v13);
              v17 = objc_claimAutoreleasedReturnValue(v16);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 40), "logPrefix"));
                v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject uuid](v14, "uuid"));
                -[NSObject lastUnfollowedDate](v14, "lastUnfollowedDate");
                v20 = *(void **)(v1 + 56);
                *(_DWORD *)buf = 138544130;
                v57 = v18;
                v58 = 2114;
                v59 = v19;
                v60 = 2048;
                v61 = v21;
                v62 = 2048;
                v63 = v20;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@ skipping re-subscribe to a hidden podcast with uuid %{public}@, lastUnfollowedDate = %f, lastSyncTimestamp = %f", buf, 0x2Au);

              }
LABEL_22:

              goto LABEL_28;
            }
          }
        }
        v46 = v12;
        v22 = v4;
        v23 = _MTLogCategoryCloudSync(v13);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 40), "logPrefix"));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "description"));
          *(_DWORD *)buf = 138543875;
          v57 = v25;
          v58 = 2113;
          v59 = v22;
          v60 = 2112;
          v61 = v26;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}@ Adding Podcast from Sync with title: %{private}@, PodcastDict: %{Private}@", buf, 0x20u);

        }
        v27 = *(_QWORD *)(v1 + 48);
        v28 = +[MTPodcast defaultShowType](MTPodcast, "defaultShowType");
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v47));
        v30 = objc_claimAutoreleasedReturnValue(+[MTPodcast insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:showTypeInFeed:title:author:provider:imageUrl:description:displayType:showSpecificUpsellCopy:](MTPodcast, "insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:showTypeInFeed:title:author:provider:imageUrl:description:displayType:showSpecificUpsellCopy:", v27, 1, v5, v28, 0, v29, 0, 0, 0, 0, 0, 0));

        if (v30)
        {
          -[NSObject setHasBeenSynced:](v30, "setHasBeenSynced:", 1);
          -[NSObject setStoreCollectionId:](v30, "setStoreCollectionId:", v7);
          -[NSObject setImporting:](v30, "setImporting:", 1);
          v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject displayType](v30, "displayType"));
          v4 = v22;
          if (v32)
          {

            v1 = v41;
            v12 = v46;
LABEL_19:
            objc_msgSend(*(id *)(v1 + 40), "updateSettingsForLocalPodcast:remotePodcast:ctx:", v30, v3, *(_QWORD *)(v1 + 48));
            v14 = v30;
            goto LABEL_28;
          }
          v1 = v41;
          v12 = v46;
          if ((uint64_t)-[NSObject storeCollectionId](v30, "storeCollectionId") < 1)
            goto LABEL_19;
          v37 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastRequestManager sharedInstance](_TtC18PodcastsFoundation21PodcastRequestManager, "sharedInstance"));
          v38 = -[NSObject storeCollectionId](v30, "storeCollectionId");
          v48[0] = _NSConcreteStackBlock;
          v48[1] = 3221225472;
          v48[2] = sub_10012BE54;
          v48[3] = &unk_1004AC050;
          v39 = *(void **)(v41 + 48);
          v48[4] = *(_QWORD *)(v41 + 40);
          v49 = v30;
          v50 = v3;
          v51 = v39;
          v14 = v30;
          objc_msgSend(v37, "updatePodcastWithStoreId:completion:", v38, v48);

          v1 = v41;
        }
        else
        {
          v34 = _MTLogCategoryCloudSync(v31);
          v14 = objc_claimAutoreleasedReturnValue(v34);
          v4 = v22;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v41 + 40), "logPrefix"));
            v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "description"));
            *(_DWORD *)buf = 138543619;
            v57 = v35;
            v58 = 2113;
            v59 = v36;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}@ We can't subscribe from cloud to podcast because the podcast was not found in local DB and a new one was impossible to insert for some reason. Remote podcast: %{private}@", buf, 0x16u);

          }
          v1 = v41;
          v12 = v46;
        }
LABEL_28:

      }
      v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
    }
    while (v45);
  }

}

void sub_10012BE54(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10012BF18;
  v8[3] = &unk_1004A8AE8;
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(void **)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v5;
  v13 = v6;
  v7 = v3;
  objc_msgSend(v4, "performBlock:", v8);

}

void sub_10012BF18(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _QWORD block[4];
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "setDisplayType:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 48), "updateSettingsForLocalPodcast:remotePodcast:ctx:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  objc_msgSend(v2, "saveInCurrentBlock");

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "workQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10012BFD0;
  block[3] = &unk_1004A6200;
  v5 = *(id *)(a1 + 32);
  dispatch_async(v3, block);

}

void sub_10012BFD0(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[MTFeedUpdateManager sharedInstance](MTFeedUpdateManager, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  objc_msgSend(v3, "updatePodcastWithUUID:userInitiated:forced:forceBootstrap:source:completion:", v2, 0, 1, 0, 12, 0);

}

void sub_10012CD98(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v3 = a2;
  v12 = v3;
  if (v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("action")));
    if (v4
      && (v5 = (void *)v4,
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("action"))),
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("url"))),
          v7,
          v6,
          v5,
          v7))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("action")));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("url")));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v10));
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v11);

    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
  }

}

void sub_10012D014(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  MTLibraryLinkService *v6;
  MTLibraryLinkService *v7;
  MTLibraryLinkService *v8;
  id v9;
  _QWORD v10[4];
  MTLibraryLinkService *v11;
  id v12;
  id v13;
  uint64_t v14;

  v9 = a2;
  if (v9)
  {
    v3 = (uint64_t)objc_msgSend(v9, "pf_cleanUrlToStoreId");
    if (v3 >= 1)
    {
      v4 = v3;
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
      v6 = (MTLibraryLinkService *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "importContext"));

      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10012D154;
      v10[3] = &unk_1004A8EA0;
      v11 = v6;
      v12 = *(id *)(a1 + 32);
      v14 = v4;
      v13 = v9;
      v7 = v6;
      -[MTLibraryLinkService performBlockAndWait:](v7, "performBlockAndWait:", v10);

      v8 = v11;
LABEL_6:

      goto LABEL_7;
    }
  }
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 40), "count") >= 2)
  {
    v7 = (MTLibraryLinkService *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subarrayWithRange:", 1, (char *)objc_msgSend(*(id *)(a1 + 40), "count") - 1));
    v8 = objc_alloc_init(MTLibraryLinkService);
    -[MTLibraryLinkService updateAdamIdForPodcast:withFeedURLs:](v8, "updateAdamIdForPodcast:withFeedURLs:", *(_QWORD *)(a1 + 32), v7);
    goto LABEL_6;
  }
LABEL_7:

}

void sub_10012D154(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v4, "setStoreCollectionId:", *(_QWORD *)(a1 + 56));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "absoluteString"));
  objc_msgSend(v4, "setStoreCleanURL:", v2);

  objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTStoreInfoUpdater sharedInstance](MTStoreInfoUpdater, "sharedInstance"));
  objc_msgSend(v3, "updateStoreInfoForEpisodesAndPodcast:skipPodcastLastCheckDate:", *(_QWORD *)(a1 + 40), 1);

}

void sub_10012D2B4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "importContext"));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10012D368;
  v7[3] = &unk_1004A7398;
  v8 = v3;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v9 = v4;
  v10 = v5;
  v6 = v3;
  objc_msgSend(v6, "performBlockAndWait:", v7);

}

void sub_10012D368(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  MTLibraryLinkService *v14;
  void *v15;
  _QWORD v16[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (v2)
  {
    if (objc_msgSend(v2, "storeCollectionId")
      || (+[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate"),
          v5 = v4,
          objc_msgSend(v3, "lastStorePodcastInfoCheckDate"),
          v5 <= v6 + 604800.0))
    {
      objc_msgSend(*(id *)(a1 + 48), "updateStoreInfoForEpisodesAndPodcast:skipPodcastLastCheckDate:", *(_QWORD *)(a1 + 40), 0);
    }
    else
    {
      +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
      objc_msgSend(v3, "setLastStorePodcastInfoCheckDate:");
      objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "updatedFeedURL"));
      if (v7)
      {
        v8 = (void *)v7;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedURL"));

        if (v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "updatedFeedURL"));
          v16[0] = v10;
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedURL"));
          v16[1] = v11;
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v16, 2));

LABEL_11:
          v14 = objc_alloc_init(MTLibraryLinkService);
          -[MTLibraryLinkService updateAdamIdForPodcast:withFeedURLs:](v14, "updateAdamIdForPodcast:withFeedURLs:", *(_QWORD *)(a1 + 40), v12);

          goto LABEL_8;
        }
      }
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedURL"));

      if (v13)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedURL"));
        v15 = v10;
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
        goto LABEL_11;
      }
    }
  }
LABEL_8:

}

void sub_10012D604(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  NSObject *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  id v27;
  uint8_t buf[4];
  void *v29;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (v2 && objc_msgSend(v2, "storeCollectionId"))
  {
    if (*(_BYTE *)(a1 + 56)
      || (+[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate"),
          v5 = v4,
          objc_msgSend(v3, "lastStorePodcastInfoCheckDate"),
          v5 > v6 + 604800.0))
    {
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "storeCleanURL"));
      if (!v7
        || (v8 = (void *)v7,
            v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "storeShortURL")),
            v9,
            v8,
            !v9))
      {
        +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
        objc_msgSend(v3, "setLastStorePodcastInfoCheckDate:");
        objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
        goto LABEL_13;
      }
    }
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    v11 = v10;
    objc_msgSend(v3, "lastStoreEpisodesInfoCheckDate");
    if (v11 > v12 + 86400.0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_fetchRequestForEpisodesWithMissingAdamIdsForPodcastUuid:", *(_QWORD *)(a1 + 40)));
      objc_msgSend(v13, "setFetchLimit:", 1);
      v14 = *(void **)(a1 + 32);
      v27 = 0;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "executeFetchRequest:error:", v13, &v27));
      v16 = v27;
      if (v16)
      {
        v17 = v16;
        v18 = objc_claimAutoreleasedReturnValue(+[IMLogCategory defaultCategory](IMLogCategory, "defaultCategory"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v29 = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to fetch episodes for store info update - %@", buf, 0xCu);
        }

        goto LABEL_14;
      }
      v23 = objc_msgSend(v15, "count");

      if (!v23)
        goto LABEL_15;
LABEL_13:
      v19 = *(void **)(a1 + 48);
      v20 = objc_msgSend(v3, "storeCollectionId");
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10012D868;
      v24[3] = &unk_1004AC0A0;
      v21 = *(id *)(a1 + 40);
      v22 = *(_QWORD *)(a1 + 48);
      v25 = v21;
      v26 = v22;
      objc_msgSend(v19, "getStoreInfoForPodcastWithAdamId:callback:", v20, v24);
      v13 = v25;
LABEL_14:

    }
  }
LABEL_15:

}

void sub_10012D868(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "importContext"));

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10012D9B0;
  v21[3] = &unk_1004AC078;
  v22 = v14;
  v23 = *(id *)(a1 + 32);
  v24 = v9;
  v15 = *(_QWORD *)(a1 + 40);
  v25 = v10;
  v26 = v15;
  v27 = v11;
  v28 = v12;
  v16 = v12;
  v17 = v11;
  v18 = v10;
  v19 = v9;
  v20 = v14;
  objc_msgSend(v20, "performBlockAndWait:", v21);

}

void sub_10012D9B0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  int v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  v3 = *(void **)(a1 + 48);
  v10 = v2;
  if (v3
    && (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "storeCleanURL")),
        v5 = objc_msgSend(v3, "isEqualToString:", v4),
        v4,
        (v5 & 1) == 0))
  {
    objc_msgSend(v10, "setStoreCleanURL:", *(_QWORD *)(a1 + 48));
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(void **)(a1 + 56);
  if (v7
    && (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "storeShortURL")),
        v9 = objc_msgSend(v7, "isEqualToString:", v8),
        v8,
        (v9 & 1) == 0))
  {
    objc_msgSend(v10, "setStoreShortURL:", *(_QWORD *)(a1 + 56));
  }
  else if (!v6)
  {
    goto LABEL_11;
  }
  objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
LABEL_11:
  objc_msgSend(*(id *)(a1 + 64), "updateStoreInfoForEpisodesInPodcast:withEpisodeIds:andEpisodesWithGuid:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));

}

void sub_10012DB9C(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  void *v7;
  id v8;
  char *v9;
  char *v10;
  char v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unsigned __int8 v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  char *v31;
  id obj;
  char v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  if (!v2)
    goto LABEL_25;
  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  v4 = v3;
  objc_msgSend(v2, "lastStoreEpisodesInfoCheckDate");
  if (v4 <= v5 + 86400.0)
    goto LABEL_25;
  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  objc_msgSend(v2, "setLastStoreEpisodesInfoCheckDate:");
  objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "episodesWithMissingAdamIdsForPodcast:withContext:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32)));
  v7 = v6;
  if (!v6 || !objc_msgSend(v6, "count"))
    goto LABEL_24;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v8 = v7;
  v9 = (char *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
  if (!v9)
  {

    goto LABEL_24;
  }
  v10 = v9;
  v29 = v7;
  v30 = v2;
  v11 = 0;
  v12 = 0;
  v13 = *(_QWORD *)v39;
  v33 = 1;
  obj = v8;
  do
  {
    v14 = 0;
    v31 = v12;
    v15 = v12 + 1;
    do
    {
      if (*(_QWORD *)v39 != v13)
        objc_enumerationMutation(obj);
      v16 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v14);
      v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "guid", v29, v30));
      if (v17
        && (v18 = (void *)v17,
            v19 = *(void **)(a1 + 56),
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "guid")),
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v20)),
            v21,
            v20,
            v18,
            v21))
      {
        v22 = *(void **)(a1 + 48);
        v23 = *(void **)(a1 + 56);
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "guid"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v24));
        v26 = objc_msgSend(v22, "updateAdamId:forEpisode:", v25, v16);

        v11 |= v26;
        if ((v11 & 1) == 0)
          goto LABEL_17;
      }
      else
      {
        v33 = 0;
        if ((v11 & 1) == 0)
          goto LABEL_17;
      }
      if (!((unint64_t)v15 % 0xC8))
      {
        objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
        v11 = 0;
      }
LABEL_17:
      ++v14;
      ++v15;
    }
    while (v10 != v14);
    v12 = &v10[(_QWORD)v31];
    v10 = (char *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
  }
  while (v10);

  if ((v11 & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  v7 = v29;
  v2 = v30;
  if ((v33 & 1) == 0)
  {
    v27 = *(_QWORD *)(a1 + 64);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10012DEB0;
    v34[3] = &unk_1004AC0C8;
    v28 = *(void **)(a1 + 40);
    v35 = *(id *)(a1 + 48);
    v36 = v28;
    v37 = *(id *)(a1 + 32);
    objc_msgSend(v35, "getStoreInfoForEpisodesWithAdamIds:callback:", v27, v34);

  }
LABEL_24:

LABEL_25:
}

void sub_10012DEB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTDB sharedInstance](MTDB, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "importContext"));

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10012DF94;
  v9[3] = &unk_1004A8AE8;
  v6 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v5;
  v12 = v3;
  v13 = *(id *)(a1 + 48);
  v7 = v3;
  v8 = v5;
  objc_msgSend(v8, "performBlockAndWait:", v9);

}

void sub_10012DF94(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  void *i;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  id obj;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "episodesWithMissingAdamIdsForPodcast:withContext:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = v2;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "enclosureURL"));
        if (v10)
        {
          v11 = (void *)v10;
          v12 = *(void **)(a1 + 56);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "enclosureURL"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));

          if (v14)
          {
            v15 = *(void **)(a1 + 32);
            v16 = *(void **)(a1 + 56);
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "enclosureURL"));
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v17));
            v19 = objc_msgSend(v15, "updateAdamId:forEpisode:", v18, v9);

            v6 |= v19;
            ++v5;
            if ((v6 & 1) != 0 && !(v5 % 0xC8))
            {
              objc_msgSend(*(id *)(a1 + 64), "saveInCurrentBlock");
              v6 = 0;
            }
          }
        }
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v4);
    if ((v6 & 1) != 0)
      objc_msgSend(*(id *)(a1 + 48), "saveInCurrentBlock");
  }

}

void sub_10012E630(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char isKindOfClass;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];

  v3 = a2;
  v4 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0
    || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringValue")),
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5)),
        v7 = objc_opt_class(NSDictionary),
        isKindOfClass = objc_opt_isKindOfClass(v6, v7),
        v6,
        v5,
        (isKindOfClass & 1) == 0))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_24;
  }
  v37 = a1;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringValue"));
  v38 = v3;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v9));
  v11 = objc_msgSend(v10, "copy");

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("childrenIds")));
  v35 = objc_msgSend(v12, "mutableCopy");

  v36 = v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("children")));
  v39 = objc_alloc_init((Class)NSMutableDictionary);
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v14 = v13;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
  if (!v15)
    goto LABEL_14;
  v16 = v15;
  v17 = *(_QWORD *)v41;
  do
  {
    for (i = 0; i != v16; i = (char *)i + 1)
    {
      if (*(_QWORD *)v41 != v17)
        objc_enumerationMutation(v14);
      v19 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v19));
      v21 = objc_opt_class(NSDictionary);
      if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v19));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("podcastEpisodeGuid")));

        if (!v23)
          continue;
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v19));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("podcastEpisodeGuid")));

        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v19, "longLongValue")));
        objc_msgSend(v39, "setObject:forKeyedSubscript:", v25, v20);

      }
    }
    v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
  }
  while (v16);
LABEL_14:

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "allValues"));
  objc_msgSend(v35, "removeObjectsInArray:", v26);

  v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("url")));
  if (v27)
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("url")));
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));

    if (v28 == v29)
    {
      v27 = 0;
    }
    else
    {
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("url")));
      v27 = objc_msgSend(v30, "copy");

    }
  }
  v31 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("shortUrl")));
  if (v31)
  {
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("shortUrl")));
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));

    if (v32 == v33)
    {
      v31 = 0;
    }
    else
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("shortUrl")));
      v31 = objc_msgSend(v34, "copy");

    }
  }
  v3 = v38;
  (*(void (**)(void))(*(_QWORD *)(v37 + 40) + 16))();

LABEL_24:
}

void sub_10012EB50(uint64_t a1, void *a2)
{
  id v3;
  _UNKNOWN **v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  uint64_t v14;
  char isKindOfClass;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _UNKNOWN **v20;
  void *v21;
  uint64_t v22;
  char v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id obj;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];

  v3 = a2;
  v4 = CPInterfaceController_ptr;
  v5 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    v32 = a1;
    v33 = objc_alloc_init((Class)NSMutableDictionary);
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    obj = *(id *)(a1 + 32);
    v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    if (!v36)
      goto LABEL_21;
    v6 = *(_QWORD *)v38;
    v7 = CFSTR("url");
    v34 = *(_QWORD *)v38;
    while (1)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v38 != v6)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v8);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v9));
        if (v10)
        {
          v11 = (void *)v10;
          v12 = v7;
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v9));
          v14 = objc_opt_class(v4[201]);
          isKindOfClass = objc_opt_isKindOfClass(v13, v14);

          v7 = v12;
          if ((isKindOfClass & 1) != 0)
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v9));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("offers")));
            v18 = objc_opt_class(NSArray);
            if ((objc_opt_isKindOfClass(v17, v18) & 1) == 0)
              goto LABEL_15;
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("offers")));
            v20 = v4;
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectAtIndexedSubscript:", 0));
            v22 = objc_opt_class(v20[201]);
            v23 = objc_opt_isKindOfClass(v21, v22);

            v4 = v20;
            v7 = v12;

            if ((v23 & 1) != 0)
            {
              v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("offers")));
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectAtIndexedSubscript:", 0));

              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("download")));
              v26 = objc_opt_class(v20[201]);
              if ((objc_opt_isKindOfClass(v25, v26) & 1) == 0)
                goto LABEL_14;
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("download")));
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", v12));

              if (v28)
              {
                v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("download")));
                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", CFSTR("url")));

                v30 = objc_msgSend(v9, "copy");
                objc_msgSend(v33, "setObject:forKeyedSubscript:", v30, v25);

                v4 = v20;
LABEL_14:

                v7 = v12;
              }
              else
              {
                v4 = v20;
                v7 = CFSTR("url");
              }
LABEL_15:

            }
            v6 = v34;
          }
        }
        v8 = (char *)v8 + 1;
      }
      while (v36 != v8);
      v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
      v36 = v31;
      if (!v31)
      {
LABEL_21:

        (*(void (**)(void))(*(_QWORD *)(v32 + 40) + 16))();
        break;
      }
    }
  }

}

void sub_10012F3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10012F3D4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *i;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id obj;
  void *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[6];
  _QWORD v51[6];
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];
  _QWORD v61[8];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageProvider"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "feedUrlFromModernKey:", *(_QWORD *)(a1 + 40)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "podcastForFeedUrl:", v3));
  if (v4)
  {
    v34 = v4;
    v35 = v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForAllEpisodesOnPodcastUuid:includeNonAudioEpisodes:](MTEpisode, "predicateForAllEpisodesOnPodcastUuid:includeNonAudioEpisodes:", v5, 1));

    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predicateForFilteringEpisodesWithEmptyPlayState"));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "AND:"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", kMTEpisodeEntityName));
    v32 = (void *)v7;
    objc_msgSend(v8, "setPredicate:", v7);
    v40 = kEpisodeMetadataIdentifier;
    v41 = kEpisodeGuid;
    v61[0] = kEpisodeGuid;
    v61[1] = kEpisodeMetadataIdentifier;
    v38 = kEpisodeLastDatePlayed;
    v39 = kEpisodePlayStateManuallySet;
    v61[2] = kEpisodePlayStateManuallySet;
    v61[3] = kEpisodeLastDatePlayed;
    v36 = kEpisodeIsNew;
    v37 = kEpisodeLastUserMarkedAsPlayedDate;
    v61[4] = kEpisodeLastUserMarkedAsPlayedDate;
    v61[5] = kEpisodeIsNew;
    v61[6] = kEpisodeTitle;
    v61[7] = kEpisodeUuid;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v61, 8));
    objc_msgSend(v8, "setPropertiesToFetch:", v9);

    objc_msgSend(v8, "setFetchBatchSize:", 200);
    v42 = a1;
    v31 = v8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "executeFetchRequest:error:", v8, 0));
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    obj = v10;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v46, v60, 16);
    if (!v11)
      goto LABEL_16;
    v12 = v11;
    v45 = *(_QWORD *)v47;
    while (1)
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v47 != v45)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "guid"));
        if (objc_msgSend(v15, "length"))
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "metadataIdentifier"));
          v17 = objc_msgSend(v16, "length");

          if (v17)
          {
            v44 = *(void **)(*(_QWORD *)(*(_QWORD *)(v42 + 56) + 8) + 40);
            v50[0] = v41;
            v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "guid"));
            v51[0] = v20;
            v50[1] = v40;
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "metadataIdentifier"));
            v51[1] = v21;
            v50[2] = v39;
            v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v14, "playStateManuallySet")));
            v51[2] = v22;
            v50[3] = v38;
            objc_msgSend(v14, "lastDatePlayed");
            v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
            v51[3] = v23;
            v50[4] = v37;
            objc_msgSend(v14, "lastUserMarkedAsPlayedDate");
            v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
            v51[4] = v24;
            v50[5] = v36;
            v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v14, "isNew")));
            v51[5] = v25;
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 6));
            objc_msgSend(v44, "addObject:", v26);

            goto LABEL_13;
          }
        }
        else
        {

        }
        v27 = _MTLogCategoryUPPSync(v18, v19);
        v20 = objc_claimAutoreleasedReturnValue(v27);
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          goto LABEL_14;
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "title"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uuid"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "metadataIdentifier"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "guid"));
        *(_DWORD *)buf = 138544130;
        v53 = v21;
        v54 = 2114;
        v55 = v28;
        v56 = 2114;
        v57 = v29;
        v58 = 2114;
        v59 = v30;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[Episode Sync] Skipping syncing episode without a valid guid and metadataIdentifier: %{public}@, %{public}@, %{public}@, %{public}@", buf, 0x2Au);

LABEL_13:
LABEL_14:

      }
      v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v60, 16);
      if (!v12)
      {
LABEL_16:

        v4 = v34;
        v3 = v35;
        break;
      }
    }
  }

}

void sub_100130350(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  char *v32;
  id obj;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  id v38;
  uint8_t v39[128];
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageProvider"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "feedUrlFromModernKey:", *(_QWORD *)(a1 + 40)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "podcastForFeedUrl:", v3));
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", kMTEpisodeEntityName));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForAllEpisodesOnPodcastUuid:includeNonAudioEpisodes:](MTEpisode, "predicateForAllEpisodesOnPodcastUuid:includeNonAudioEpisodes:", v6, 1));
    objc_msgSend(v5, "setPredicate:", v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_propertiesToFetch"));
    objc_msgSend(v5, "setPropertiesToFetch:", v8);

    objc_msgSend(v5, "setFetchBatchSize:", 200);
    v9 = *(void **)(a1 + 48);
    v38 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "executeFetchRequest:error:", v5, &v38));
    v11 = v38;
    v12 = v11;
    if (v11)
    {
      v13 = _MTLogCategoryCloudSync(v11);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uuid"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
        *(_DWORD *)buf = 138543874;
        v41 = v15;
        v42 = 2112;
        v43 = v16;
        v44 = 2112;
        v45 = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[Episode Sync] Failed to fetch episodes for show %{public}@ - %@ - %@", buf, 0x20u);

      }
    }
    else
    {
      v28 = v10;
      v29 = v5;
      v30 = v4;
      v31 = v3;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      obj = v10;
      v17 = (char *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
      if (v17)
      {
        v18 = v17;
        v19 = 0;
        v20 = *(_QWORD *)v35;
        do
        {
          v21 = 0;
          v32 = v19;
          v22 = v19 + 1;
          do
          {
            if (*(_QWORD *)v35 != v20)
              objc_enumerationMutation(obj);
            v23 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v21);
            v24 = objc_autoreleasePoolPush();
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "guid"));
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "metadataIdentifier"));
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKey:", v25));
            if (v27
              || (v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectForKey:", v26))) != 0)
            {
              if (v25)
                objc_msgSend(*(id *)(a1 + 56), "removeObjectForKey:", v25);
              if (v26)
                objc_msgSend(*(id *)(a1 + 64), "removeObjectForKey:", v26);
              objc_msgSend(*(id *)(a1 + 32), "unsafeUpdateEpisode:forRemoteEpisodeDictionary:", v23, v27);

            }
            if (!((unint64_t)v22 % 0xC8))
              objc_msgSend(*(id *)(a1 + 48), "saveInCurrentBlock");

            objc_autoreleasePoolPop(v24);
            ++v21;
            ++v22;
          }
          while (v18 != v21);
          v19 = &v18[(_QWORD)v32];
          v18 = (char *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
        }
        while (v18);
      }

      objc_msgSend(*(id *)(a1 + 48), "saveInCurrentBlock");
      v4 = v30;
      v3 = v31;
      v10 = v28;
      v5 = v29;
      v12 = 0;
    }

  }
}

void sub_100130B0C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForFeedUrl:", *(_QWORD *)(a1 + 40)));
  if (objc_msgSend(v2, "subscribed"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", kMTEpisodeEntityName));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uuid"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForListenNowForPodcastUuid:](MTEpisode, "predicateForListenNowForPodcastUuid:", v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForVisuallyPlayed:](MTEpisode, "predicateForVisuallyPlayed:", 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "AND:", v6));
    objc_msgSend(v3, "setPredicate:", v7);

    objc_msgSend(v3, "setFetchLimit:", 1);
    v8 = objc_msgSend(*(id *)(a1 + 32), "countForFetchRequest:error:", v3, 0);
    if (v8)
    {
      v9 = _MTLogCategoryDefault(v8);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "title"));
        v15 = 138543362;
        v16 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Recalculating Up Next for podcast %{public}@ which has played up next episode after sync completion", (uint8_t *)&v15, 0xCu);

      }
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uuid"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[MTRecencyUtil upNextForPodcastUuid:excludeExplicit:ctx:](MTRecencyUtil, "upNextForPodcastUuid:excludeExplicit:ctx:", v12, 0, *(_QWORD *)(a1 + 32)));

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uuid"));
      +[MTRecencyUtil unsafeUpdateRelatedFieldsIfUpNextChangedForPodcast:upNextResult:ctx:](MTRecencyUtil, "unsafeUpdateRelatedFieldsIfUpNextChangedForPodcast:upNextResult:ctx:", v14, v13, *(_QWORD *)(a1 + 32));

      objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
    }

  }
}

void sub_100131464(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  _QWORD block[5];
  uint8_t buf[4];
  void *v12;

  v5 = a3;
  v6 = _MTLogCategoryPrivacy(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Acknowledge privacy task has been completed successfully.", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedDescription"));
    *(_DWORD *)buf = 138543362;
    v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to execute acknowledge task, error %{public}@.", buf, 0xCu);

  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001315B0;
  block[3] = &unk_1004A65A0;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1001315B0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;

  +[MTPrivacyUtil markAsAgreedToLatestTerms](MTPrivacyUtil, "markAsAgreedToLatestTerms");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults"));
  objc_msgSend(v2, "setInteger:forKey:", qword_100551FA8, CFSTR("MTWelcomeVersion"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults _applePodcastsFoundationSharedUserDefaults](NSUserDefaults, "_applePodcastsFoundationSharedUserDefaults"));
  objc_msgSend(v3, "synchronize");

  v4 = objc_msgSend(*(id *)(a1 + 32), "shouldShowWelcome");
  if ((_DWORD)v4)
  {
    v5 = _MTLogCategoryPrivacy(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v15 = 0;
      v7 = "shouldShowWelcome = YES after +[MTWelcomeUtil markWelcomeAsShown]";
      v8 = (uint8_t *)&v15;
      v9 = v6;
      v10 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v7, v8, 2u);
    }
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v11, "postNotificationName:object:", kMTDidMarkWelcomeAsShownNotification, 0);

    v13 = _MTLogCategoryPrivacy(v12);
    v6 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      v7 = "Marking Welcome screen as shown was successful.";
      v8 = (uint8_t *)&v14;
      v9 = v6;
      v10 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_6;
    }
  }

}

void sub_10013184C(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, WeakRetained);

  }
}

void sub_100131ECC(uint64_t a1)
{
  void *v2;
  id v3;
  _QWORD v4[5];
  id v5;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPlaylistEntityName, 0, 0));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100131F68;
  v4[3] = &unk_1004AC180;
  v2 = *(void **)(a1 + 48);
  v4[4] = *(_QWORD *)(a1 + 40);
  v5 = v2;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v4);

}

void sub_100131F68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSMutableSet *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *i;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  void *j;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  NSMutableArray *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  id obj;
  NSMutableArray *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[128];
  _QWORD v77[3];
  _QWORD v78[3];
  _BYTE v79[128];

  v3 = a2;
  if ((objc_msgSend(v3, "isItunesPlaylist") & 1) == 0
    && (objc_msgSend(v3, "isItunesSmartPlaylist") & 1) == 0
    && (objc_msgSend(v3, "isBuiltIn") & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "defaultSettings"));

    if (v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dictionaryRepresentation"));
      v6 = objc_msgSend(v5, "mutableCopy");

      if ((objc_msgSend(v3, "hasBeenSynced") & 1) == 0)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "addedPlaylists"));

        if (!v7)
        {
          v8 = objc_opt_new(NSMutableSet);
          objc_msgSend(*(id *)(a1 + 32), "setAddedPlaylists:", v8);

        }
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "addedPlaylists"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
        objc_msgSend(v9, "addObject:", v10);

        objc_msgSend(v3, "setHasBeenSynced:", 1);
      }
      v60 = a1;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "podcasts"));
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settings"));
      v67 = objc_opt_new(NSMutableArray);
      v58 = objc_opt_new(NSMutableArray);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "defaultSettings"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dictionaryRepresentation"));
      v14 = objc_msgSend(v13, "mutableCopy");

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "defaultSettings"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v15, "episodesToShow")));
      objc_msgSend(v14, "setObject:forKey:", v16, CFSTR("episodesToShowTruth"));

      v57 = v14;
      objc_msgSend(v6, "setObject:forKey:", v14, kPlaylistDefaultSettings);
      v61 = v3;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v3, "isUngroupedList")));
      v59 = v6;
      objc_msgSend(v6, "setObject:forKey:", v17, kPlaylistUngroupedList);

      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      obj = v11;
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v79, 16);
      if (v18)
      {
        v19 = v18;
        v20 = *(_QWORD *)v73;
        v21 = kPodcastFeedUrl;
        v22 = kPodcastStoreCollectionId;
        v23 = kPodcastPID;
        do
        {
          for (i = 0; i != v19; i = (char *)i + 1)
          {
            if (*(_QWORD *)v73 != v20)
              objc_enumerationMutation(obj);
            v25 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * (_QWORD)i);
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "feedURL"));

            if (v26)
            {
              v77[0] = v21;
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "feedURL"));
              v78[0] = v27;
              v77[1] = v22;
              v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v25, "storeCollectionId")));
              v78[1] = v28;
              v77[2] = v23;
              v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v25, "storeCollectionId")));
              v78[2] = v29;
              v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v78, v77, 3));
              -[NSMutableArray addObject:](v67, "addObject:", v30);

            }
          }
          v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v79, 16);
        }
        while (v19);
      }

      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v31 = v64;
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v68, v76, 16);
      if (v32)
      {
        v33 = v32;
        v34 = *(_QWORD *)v69;
        v63 = kPlaylistSettingEpisodesToShow;
        v65 = kPlaylistSettingTracksDefault;
        v62 = kPlaylistSettingEpisodeToShowItunesTruth;
        do
        {
          for (j = 0; j != v33; j = (char *)j + 1)
          {
            if (*(_QWORD *)v69 != v34)
              objc_enumerationMutation(v31);
            v36 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * (_QWORD)j);
            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "dictionaryRepresentation"));
            v38 = objc_msgSend(v37, "mutableCopy");

            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "podcast"));
            if (v39)
            {
              v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "podcast"));
              v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "feedURL"));

              if (!v41)
                goto LABEL_34;
              if (objc_msgSend(v36, "tracksDefault"))
              {
                v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v36, "integerForEpisodesToShow")));
                objc_msgSend(v38, "setObject:forKey:", v42, v63);

              }
              v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v36, "episodesToShow")));
              objc_msgSend(v38, "setObject:forKey:", v43, CFSTR("episodesToShowTruth"));

              v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "podcast"));
              v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "feedURL"));
              objc_msgSend(v38, "setObject:forKey:", v45, CFSTR("podcastFeedUrl"));

              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "podcast"));
              v47 = (uint64_t)objc_msgSend(v46, "storeCollectionId");

              if (v47 >= 1)
              {
                v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "podcast"));
                v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v48, "storeCollectionId")));
                objc_msgSend(v38, "setObject:forKey:", v49, CFSTR("podcastStoreCollectionId"));

              }
              v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "podcast"));
              v51 = (uint64_t)objc_msgSend(v50, "podcastPID");

              if (v51 >= 1)
              {
                v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "podcast"));
                v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v52, "storeCollectionId")));
                objc_msgSend(v38, "setObject:forKey:", v53, CFSTR("podcastPID"));

              }
              v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v36, "tracksDefault")));
              objc_msgSend(v38, "setObject:forKey:", v54, v65);

              if (objc_msgSend(v36, "tracksDefault"))
                objc_msgSend(v38, "setObject:forKey:", &off_1004D6730, v62);
            }
            -[NSMutableArray addObject:](v58, "addObject:", v38);
LABEL_34:

          }
          v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v68, v76, 16);
        }
        while (v33);
      }

      objc_msgSend(v59, "setObject:forKey:", v67, CFSTR("podcasts"));
      objc_msgSend(v59, "setObject:forKey:", v58, CFSTR("settings"));
      v3 = v61;
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v61, "includesAllPodcasts")));
      objc_msgSend(v59, "setObject:forKey:", v55, kPlaylistIncludesAllPodcasts);

      objc_msgSend(*(id *)(v60 + 40), "addObject:", v59);
    }
    else
    {
      v56 = (void *)objc_claimAutoreleasedReturnValue(+[IMLogger sharedLogger](IMLogger, "sharedLogger"));
      objc_msgSend(v56, "logFile:lineNumber:format:", "/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/Sync/MTPlaylistSyncProcessor.m", 110, CFSTR("*** Attempting to cloud sync a playlist with nil defaultSettings ***"));

    }
  }

}

id sub_100132A30(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "addedPlaylists"));
  v5 = objc_msgSend(v4, "containsObject:", v3);

  return v5;
}

void sub_100132D3C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  id v13;

  if (*(uint64_t *)(a1 + 56) >= 1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTPodcast predicateForPodcastStoreId:](MTPodcast, "predicateForPodcastStoreId:"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTPodcastEntityName, v2, 0));
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
    if (v4)
    {
      v13 = (id)v4;
      if (*(uint64_t *)(a1 + 64) <= 0)
      {
        v6 = *(_QWORD *)(a1 + 40);
        if (!v6)
        {
          v10 = 0;
          v9 = 0;
          goto LABEL_12;
        }
        v5 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K = %@"), kEpisodeGuid, v6));
      }
      else
      {
        v5 = objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodeStoreTrackId:](MTEpisode, "predicateForEpisodeStoreTrackId:"));
      }
      v7 = (void *)v5;

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:sortDescriptors:", kMTEpisodeEntityName, v7, 0));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
      v10 = v9 == 0;

      v2 = v7;
LABEL_12:

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "appController"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uuid"));
      objc_msgSend(v11, "presentPodcast:episodeUuid:episodeNotAvailable:podcastTab:startPlayback:animated:", v13, v12, v10, 1, 0, 0);

      goto LABEL_13;
    }

  }
  if (*(_QWORD *)(a1 + 48))
  {
    v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "appController"));
    objc_msgSend(v13, "openStoreURL:", *(_QWORD *)(a1 + 48));
LABEL_13:

  }
}

void sub_100133974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001339A8(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = a2;
  if (objc_msgSend(v7, "hasPrefix:", CFSTR("pid")))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsSeparatedByString:", CFSTR("=")));
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lastObject"));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
}

void sub_100133DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100133E18(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;

  v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForFeedUrl:", *(_QWORD *)(a1 + 40)));
  if (v18)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[PodcastsStateCoordinator shared](_TtC8Podcasts24PodcastsStateCoordinator, "shared"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "uuid"));
    objc_msgSend(v2, "unsafeEnableSubscriptionOnPodcastUUID:from:context:", v3, 3, *(_QWORD *)(a1 + 32));

  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "showType"));
    v19 = +[MTPodcast showTypeFromString:](MTPodcast, "showTypeFromString:", v4);

    v5 = *(_QWORD *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "showType"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "title"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "author"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "provider"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "imageURL"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "feedDescription"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "displayType"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "showSpecificUpsellCopy"));
    v18 = (id)objc_claimAutoreleasedReturnValue(+[MTPodcast insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:showTypeInFeed:title:author:provider:imageUrl:description:displayType:showSpecificUpsellCopy:](MTPodcast, "insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:showTypeInFeed:title:author:provider:imageUrl:description:displayType:showSpecificUpsellCopy:", v5, 1, v17, v19, v6, v7, v8, v9, v10, v11, v12, v13));

    objc_msgSend(v18, "setStoreCollectionId:", objc_msgSend(*(id *)(a1 + 56), "storeCollectionId"));
    objc_msgSend(v18, "setImporting:", 1);
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    objc_msgSend(v18, "setUpdatedDate:");
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    objc_msgSend(v18, "setModifiedDate:");
  }
  v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "uuid"));
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

}

void sub_100134130(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForUuid:", *(_QWORD *)(a1 + 40)));
  if ((objc_msgSend(v7, "feedUpdateNeedsRetry") & 1) == 0)
  {
    if (objc_msgSend(v7, "showTypeInFeedResolvedValue") == (id)2)
    {
      v2 = *(void **)(a1 + 48);
    }
    else
    {
      v3 = objc_msgSend(v7, "showTypeInFeedResolvedValue");
      v2 = *(void **)(a1 + 48);
      if (v3 != (id)4)
      {
        if (!objc_msgSend(v2, "_addNewestEpisodeToPodcast:", v7))
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    if ((objc_msgSend(v2, "_addLatestSeasonToPodcast:", v7) & 1) != 0)
LABEL_6:
      objc_msgSend(*(id *)(a1 + 32), "saveInCurrentBlock");
  }
LABEL_7:
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "location"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MTStoreReportingController sharedInstance](MTStoreReportingController, "sharedInstance"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dictionaryRepresentation"));
  objc_msgSend(v5, "reportWithType:userInfo:location:reason:", 4, v6, v4, 0);

}

void sub_1001342EC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_10013440C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100134424(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_addLatestSeasonForSerialPodcast:", *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(a1 + 48), "saveInCurrentBlock");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = (_BYTE)result;
  }
  return result;
}

void sub_1001346A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001346BC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "newestFullEpisode"));
  v3 = v2;
  if (v2)
    v4 = v2;
  else
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "newestEpisode"));
  v5 = v4;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 40), "_addEpisode:toMyEpisodesInPodcast:persist:", v5, *(_QWORD *)(a1 + 32), 1);
}

void sub_10013483C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100134854(uint64_t a1)
{
  id result;
  double v3;

  result = objc_msgSend(*(id *)(a1 + 32), "metadataTimestamp");
  if (fabs(v3) <= 2.22044605e-16)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPlayState:manually:source:", 2, 0, 6);
    objc_msgSend(*(id *)(a1 + 32), "unsuppressAutomaticDownloadsIfNeeded");
    objc_msgSend(*(id *)(a1 + 32), "setMetadataTimestamp:", 0.0);
    objc_msgSend(*(id *)(a1 + 32), "setMetadataFirstSyncEligible:", 1);
    result = objc_msgSend(*(id *)(a1 + 32), "setIsNew:", 1);
    if (*(_BYTE *)(a1 + 56))
    {
      result = objc_msgSend(*(id *)(a1 + 40), "saveInCurrentBlock");
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)result;
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
  return result;
}

id sub_100134D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  int v9;
  uint64_t v10;

  v4 = _MTLogCategoryFeedUpdate(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v6)
    {
      v9 = 134217984;
      v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Podcast exists in the store. Using MAPI for feed update for adamId: %ld", (uint8_t *)&v9, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 40), "setStoreCollectionId:", a2);
  }
  else
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 32);
      v9 = 138412290;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Podcast does not exist in the store. Doing RSS feed update for feedUrl: %@", (uint8_t *)&v9, 0xCu);
    }

  }
  return objc_msgSend(*(id *)(a1 + 48), "_feedUpdateAndSubscribeToPodcast:feedUrl:adamId:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), a2);
}

id sub_100135330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "feedDownloadedWithParams:error:task:", *(_QWORD *)(a1 + 40), a2, a3);
}

id sub_100135344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  uint8_t v11[16];

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "preProcessFeedHookWithParams:feed:requestUrl:needsUpdate:ctx:", *(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 48), a3, a4));
  v6 = _MTLogCategoryFollowing();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 56);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)v11 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, v9, "MTSubscriptionManager pre process complete", "", v11, 2u);
  }

  return v5;
}

void sub_1001353F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  uint8_t v8[16];

  v4 = _MTLogCategoryFollowing(objc_msgSend(*(id *)(a1 + 32), "postProcessFeedHookWithParams:podcastUuid:ctx:", *(_QWORD *)(a1 + 40), a2, a3));
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 48);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)v8 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, v7, "MTSubscriptionManager post process complete", "", v8, 2u);
  }

}

void sub_10013548C(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  _DWORD v13[2];
  __int16 v14;
  id v15;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
  objc_msgSend(v6, "removeSubscribeParamsForFeedUrl:", v7);

  v9 = _MTLogCategoryFollowing(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 48);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    v13[0] = 67109378;
    v13[1] = a2;
    v14 = 2112;
    v15 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v12, "MTSubscriptionManager subscribe", "success: %i, error: %@", (uint8_t *)v13, 0x12u);
  }

}

void sub_10013561C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001356A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001357C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001359AC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100135A50(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("FOLLOW_FAIL"), &stru_1004C6D40, 0));

  if (+[DebugUtil isInternalInstall](DebugUtil, "isInternalInstall"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(" INTERNAL: %@"), v3));

    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "stringByAppendingString:", v4));
    v14 = (id)v5;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("FOLLOW_FAIL_TITLE"), &stru_1004C6D40, 0));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v7, v14, 1));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1004C6D40, 0));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v10, 1, 0));
  objc_msgSend(v8, "addAction:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[MTApplication appController](MTApplication, "appController"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "rootViewController"));

  objc_msgSend(v13, "presentViewController:animated:completion:", v8, 1, 0);
}

void sub_100135D30(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("UNUserNotificationCenter.workQueue", v4);
  v3 = (void *)qword_1005675F0;
  qword_1005675F0 = (uint64_t)v2;

}

void sub_100135EA8(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mt_identifiersMatchingPodcastUuid:inNotificationRequests:", *(_QWORD *)(a1 + 40), a2));
  if (objc_msgSend(v3, "count"))
    objc_msgSend(*(id *)(a1 + 32), "removePendingNotificationRequestsWithIdentifiers:", v3);

}

void sub_100135EFC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "mt_compactMap:", &stru_1004AC388));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mt_identifiersMatchingPodcastUuid:inNotificationRequests:", *(_QWORD *)(a1 + 40)));
  if (objc_msgSend(v3, "count"))
    objc_msgSend(*(id *)(a1 + 32), "removeDeliveredNotificationsWithIdentifiers:", v3);

}

UNNotificationRequest *__cdecl sub_100135F68(id a1, UNNotification *a2)
{
  return -[UNNotification request](a2, "request");
}

void sub_100136150(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  uint8_t buf[4];
  id v12;

  v3 = a2;
  v4 = _MTLogCategoryNotifications(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v12 = objc_msgSend(v3, "count");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found %lu pending notifications.", buf, 0xCu);
  }

  v7 = (void *)a1[4];
  v6 = (void *)a1[5];
  v8 = a1[6];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10013626C;
  v9[3] = &unk_1004AC348;
  v9[4] = v7;
  v10 = v6;
  objc_msgSend(v7, "_mt_identifiersMatchingDeletedEpisodesOnPodcastUuid:inNotificationRequests:ctx:completion:", v10, v3, v8, v9);

}

void sub_10013626C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;

  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v4 = _MTLogCategoryNotifications(objc_msgSend(*(id *)(a1 + 32), "removePendingNotificationRequestsWithIdentifiers:", v3));
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(v3, "count");
      v7 = *(_QWORD *)(a1 + 40);
      v8 = 134218242;
      v9 = v6;
      v10 = 2112;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Removed %lu pending notifications for podcastUUID: %@", (uint8_t *)&v8, 0x16u);
    }

  }
}

void sub_10013634C(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  uint8_t buf[4];
  id v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "mt_compactMap:", &stru_1004AC3A8));
  v4 = _MTLogCategoryNotifications(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v12 = objc_msgSend(v3, "count");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found %lu delivered notifications.", buf, 0xCu);
  }

  v7 = (void *)a1[4];
  v6 = (void *)a1[5];
  v8 = a1[6];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100136480;
  v9[3] = &unk_1004AC348;
  v9[4] = v7;
  v10 = v6;
  objc_msgSend(v7, "_mt_identifiersMatchingDeletedEpisodesOnPodcastUuid:inNotificationRequests:ctx:completion:", v10, v3, v8, v9);

}

UNNotificationRequest *__cdecl sub_100136478(id a1, UNNotification *a2)
{
  return -[UNNotification request](a2, "request");
}

void sub_100136480(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;

  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v4 = _MTLogCategoryNotifications(objc_msgSend(*(id *)(a1 + 32), "removeDeliveredNotificationsWithIdentifiers:", v3));
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(v3, "count");
      v7 = *(_QWORD *)(a1 + 40);
      v8 = 134218242;
      v9 = v6;
      v10 = 2112;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Removed %lu delivered notifications for podcastUUID: %@", (uint8_t *)&v8, 0x16u);
    }

  }
}

void sub_1001365D8(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "mt_compactMap:", &stru_1004AC3C8));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mt_identifiersMatchingPlayerItemsInNotificationRequests:"));
  if (objc_msgSend(v3, "count"))
    objc_msgSend(*(id *)(a1 + 32), "removeDeliveredNotificationsWithIdentifiers:", v3);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

UNNotificationRequest *__cdecl sub_100136654(id a1, UNNotification *a2)
{
  return -[UNNotification request](a2, "request");
}

id sub_1001366E0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  if (+[UNNotificationRequest mt_isUuidRequestIdentifier:matchForPodcastUuid:](UNNotificationRequest, "mt_isUuidRequestIdentifier:matchForPodcastUuid:", v3, *(_QWORD *)(a1 + 32)))
  {
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_100136B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

id sub_100136B48(id a1, MTNotificationEpisode *a2)
{
  return -[MTNotificationEpisode uuid](a2, "uuid");
}

void sub_100136B50(uint64_t a1)
{
  void *v2;
  id v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodeUuids:](MTEpisode, "predicateForEpisodeUuids:", *(_QWORD *)(a1 + 32)));
  v3 = objc_msgSend(*(id *)(a1 + 40), "hasAnyObjectsInEntity:satisfyingPredicate:", kMTEpisodeEntityName, v2);
  v4 = (int)v3;
  v5 = _MTLogCategoryNotifications(v3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 48);
      v11 = 138412546;
      v12 = v8;
      v13 = 2112;
      v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Not deleting notification. Notification contains episode that is not deleted. Episode uuids in notification: %@ podcastUuid: %@", (uint8_t *)&v11, 0x16u);
    }

  }
  else
  {
    if (v7)
    {
      v10 = *(_QWORD *)(a1 + 48);
      v11 = 138412290;
      v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Deleting notification for podcastUuid: %@", (uint8_t *)&v11, 0xCu);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "addObject:", *(_QWORD *)(a1 + 64));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

uint64_t sub_100136CA4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  int v6;
  id v7;

  v2 = _MTLogCategoryNotifications(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count");
    v6 = 134217984;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Deleting %lu notifications.", (uint8_t *)&v6, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100136D78(id a1, UNNotificationRequest *a2)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[UNNotificationRequest identifier](a2, "identifier"));
  if (+[UNNotificationRequest mt_isPlayerItemRequestIdentifier:](UNNotificationRequest, "mt_isPlayerItemRequestIdentifier:", v2))
  {
    v3 = v2;
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1001372F4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint8_t buf[4];
  id v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsInEntity:predicate:propertiesToFetch:batchSize:", kMTEpisodeEntityName, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0));
  v3 = _MTLogCategoryDatabase(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v15 = objc_msgSend(v2, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MTEpisodeUpdaterCache loaded %lu episodes", buf, 0xCu);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001374A4;
  v5[3] = &unk_1004AC4A0;
  v6 = *(id *)(a1 + 56);
  v7 = *(id *)(a1 + 64);
  v8 = *(id *)(a1 + 72);
  v9 = *(id *)(a1 + 80);
  v10 = *(id *)(a1 + 88);
  v11 = *(id *)(a1 + 96);
  v12 = *(id *)(a1 + 104);
  v13 = *(id *)(a1 + 112);
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v5);

}

void sub_1001374A4(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  if (objc_msgSend(v4, "length"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "enclosureURL"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "guid"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v3, "persistentID")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "assetURL"));
    if (v5)
    {
      v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKey:", v5));
      if (!v10)
      {
        v10 = objc_alloc_init((Class)NSMutableArray);
        objc_msgSend(a1[4], "setObject:forKey:", v10, v5);
      }
      objc_msgSend(v10, "addObject:", v4);

    }
    if (v6)
      objc_msgSend(a1[5], "setObject:forKey:", v4, v6);
    if (v7)
      objc_msgSend(a1[6], "setObject:forKey:", v4, v7);
    if (v8)
      objc_msgSend(a1[7], "setObject:forKey:", v4, v8);
    if (v9)
      objc_msgSend(a1[8], "setObject:forKey:", v4, v9);
    objc_msgSend(a1[9], "setObject:forKey:", v3, v4);
    objc_msgSend(a1[10], "setObject:forKey:", v4, v4);
    objc_msgSend(a1[11], "addObject:", v4);

  }
  else
  {
    v11 = _MTLogCategoryDatabase(0);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
      v14 = 138412290;
      v15 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "MTEpisodeUpdaterCache encountered episode without UUID %@", (uint8_t *)&v14, 0xCu);

    }
  }

}

void sub_100137E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100137E40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 24), "objectForUuid:entityName:", a1[5], kMTEpisodeEntityName));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100137E88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 24), "objectForUuid:entityName:", a1[5], kMTEpisodeEntityName));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

unint64_t sub_10013842C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(&qword_100552A20);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100007A64(v7, (uint64_t)v16, &qword_100552A28);
    result = sub_1001CCFC0((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10013B9CC(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10013856C(uint64_t a1)
{
  return sub_100138D00(a1, &qword_100552A98);
}

unint64_t sub_100138578(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(&qword_1005529D0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10002E5D8(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100138698(uint64_t a1)
{
  return sub_100138AAC(a1, &qword_1005529F8, &qword_100552A00, sub_1001CCFBC);
}

unint64_t sub_1001386B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(&qword_100552958);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100007A64(v7, (uint64_t)&v16, (uint64_t *)&unk_100552960);
    v8 = v16;
    v9 = v17;
    result = sub_10002E5D8(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10013B9CC(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001387E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(&qword_100552A48);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *(v6 - 1);
    v7 = *v6;
    sub_10013BE1C(v8);
    swift_bridgeObjectRetain(v7);
    result = sub_1001CD07C(v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001388F0(uint64_t a1)
{
  return sub_100138D00(a1, &qword_100552C18);
}

unint64_t sub_1001388FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10003F544(&qword_100552B60);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10003F544(&qword_100552B68);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100007A64(v13, (uint64_t)v5, &qword_100552B60);
    result = sub_1001CD0D4((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for MediaRequest.ContentType(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100138A90(uint64_t a1)
{
  return sub_100138AAC(a1, &qword_100552B80, &qword_100552B88, sub_1001CCFBC);
}

unint64_t sub_100138AAC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_100007A64(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_10013B9CC(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100138BD4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(&qword_100552A30);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_QWORD *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(*v5);
    swift_bridgeObjectRetain(v7);
    result = sub_10002E5D8(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = (_QWORD *)(v3[7] + 16 * result);
    *v13 = v9;
    v13[1] = v8;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100138CF4(uint64_t a1)
{
  return sub_100138D00(a1, &qword_100552A80);
}

unint64_t sub_100138D00(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    result = sub_10002E5D8(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100138E14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_10003F544(&qword_100552A88);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100007A64(v7, (uint64_t)&v17, &qword_100552A90);
    v8 = v17;
    v9 = v18;
    result = sub_10002E5D8(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_10002099C(&v19, v4[7] + 40 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 56;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100138F54(uint64_t a1)
{
  return sub_10002E390(a1, &qword_1005529D8);
}

unint64_t sub_100138F60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10003F544(&qword_100552A38);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100007A64(v7, (uint64_t)&v16, &qword_100552A40);
    v8 = v16;
    v9 = v17;
    result = sub_10002E5D8(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_10000773C((uint64_t)&v18, v4[7] + 32 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100139094(uint64_t a1)
{
  return sub_10002E390(a1, &qword_100552BF8);
}

unint64_t sub_1001390A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_10003F544(&qword_100552A50);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_10003F544(&qword_100552A58);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100007A64(v13, (uint64_t)v5, &qword_100552A50);
    v15 = *v5;
    v16 = v5[1];
    result = sub_10002E5D8(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for EpisodeMetadata(0);
    result = sub_10013BE30(v10, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, type metadata accessor for EpisodeMetadata);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100139240(uint64_t a1)
{
  return sub_100138AAC(a1, &qword_100552C30, &qword_100552C38, sub_1001CCFBC);
}

unint64_t sub_10013925C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_10003F544(&qword_100552A70);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_10003F544(&qword_100552A78);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100007A64(v13, (uint64_t)v5, &qword_100552A70);
    v15 = *v5;
    v16 = v5[1];
    result = sub_10002E5D8(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for MediaLibraryPid(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of MTNotificationSettingsPresentationController.activePresentedSettingsViewController()
{
  return 0;
}

double variable initialization expression of DebouncedAssetRemovalProcessor.$__lazy_storage_$_episodeStorage@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double variable initialization expression of LibraryDataProvider.podcastStateController()
{
  double result;

  if (qword_100552028 != -1)
    swift_once(&qword_100552028, sub_10000D118);
  *(_QWORD *)&result = swift_retain(qword_100572E48).n128_u64[0];
  return result;
}

uint64_t variable initialization expression of LibraryDataProvider.reviewController()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ReviewController();
  v1 = swift_allocObject(v0, 16, 7);
  sub_100026844(&qword_100552180, (uint64_t (*)(uint64_t))type metadata accessor for ReviewController, (uint64_t)&protocol conformance descriptor for ReviewController);
  return v1;
}

uint64_t variable initialization expression of LibraryDataProvider.hudPresenter()
{
  uint64_t v0;

  v0 = type metadata accessor for HUDPresenter();
  return swift_allocObject(v0, 16, 7);
}

uint64_t variable initialization expression of DebouncedAutoDownloadProcessor.isRunning()
{
  return 0;
}

uint64_t variable initialization expression of LibraryDataProvider.$__lazy_storage_$_signpostID@<X0>(uint64_t a1@<X8>)
{
  return sub_100139730((uint64_t (*)(_QWORD))&type metadata accessor for OSSignpostID, a1);
}

const char *variable initialization expression of LibraryDataProvider.signpostName()
{
  return "LibraryDataProvider.startObservingEpisodesIfNeeded()";
}

uint64_t variable initialization expression of MTNotificationSettingsViewController.newEpisodeNotifcationGroupInitialHighlightedPodcastUuid()
{
  return 0;
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.Configuration.referenceTime()
{
  return 0;
}

void *variable initialization expression of LibraryEpisodePagePresenter.subscriptions()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.headerButtonItems()
{
  uint64_t v0;
  _QWORD *v2;

  v2 = _swiftEmptyArrayStorage;
  v0 = sub_10003F544(&qword_100552188);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return CurrentValueSubject.init(_:)(&v2);
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.pageContent()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v2 = 0;
  swift_storeEnumTagMultiPayload(v2, v3, 0);
  v4 = sub_10003F544(&qword_100552190);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  return CurrentValueSubject.init(_:)(v2);
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.pageHeader()
{
  uint64_t v0;
  __int128 v2;
  int v3;
  char v4;

  v2 = xmmword_1003C8570;
  v3 = 1;
  v4 = 2;
  v0 = sub_10003F544(&qword_100552198);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return CurrentValueSubject.init(_:)(&v2);
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.pageRender()
{
  return sub_1001399C0((uint64_t *)&unk_1005521A0);
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.interactionContextPage@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v2 = type metadata accessor for InteractionContext.Page(0);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return swift_storeEnumTagMultiPayload(a1, v2, 2);
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.pageID()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  v0 = static MetricsPageType.episode.getter();
  v2 = v1;
  v3 = static MetricsPageID.unknown.getter();
  v5 = v4;
  v6._countAndFlagsBits = 95;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v3;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v5);
  return PageID.init(with:)(v0, v2);
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.upsellBannerShelf@<X0>(uint64_t a1@<X8>)
{
  return sub_100139730((uint64_t (*)(_QWORD))&type metadata accessor for ModernShelf, a1);
}

uint64_t sub_100139730@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

void *variable initialization expression of MTTestActionListViewController.orderedTestActionCategories()
{
  return &_swiftEmptyArrayStorage;
}

double variable initialization expression of CarPlayController.$__lazy_storage_$_deviceInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

double variable initialization expression of DebouncedAutoDownloadProcessor.debounceInterval()
{
  return 1.0;
}

unint64_t variable initialization expression of MTTestActionListViewController.orderedTestActionsByCategoryName()
{
  return sub_100138D00((uint64_t)_swiftEmptyArrayStorage, &qword_100552C18);
}

uint64_t variable initialization expression of MTTestActionListViewController.testRunner()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for MTTestActionRunner();
  result = swift_allocObject(v0, 17, 7);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

double variable initialization expression of MTTestActionListViewController.testStartDelay()
{
  return 2.0;
}

uint64_t variable initialization expression of ImplicitFollowsDecayCoordinator.debounceQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  static DispatchQoS.background.getter();
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_10003F544(&qword_100555A00);
  v12 = sub_100048CA8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x800000010042E300, v9, v6, v3, 0);
}

uint64_t variable initialization expression of ImplicitFollowsDecayCoordinator.implicitFollowsEvents()
{
  return sub_1001399C0(&qword_1005521C8);
}

uint64_t sub_1001399C0(uint64_t *a1)
{
  uint64_t v1;

  v1 = sub_10003F544(a1);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return PassthroughSubject.init()();
}

void variable initialization expression of ImplicitFollowsDecayCoordinator.subscriptions()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      sub_10013B450((uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t variable initialization expression of InterestSyncProcessor.signpostID()
{
  return sub_100139A4C((uint64_t (*)(uint64_t))&static OSSignposter.interests.getter);
}

uint64_t variable initialization expression of NonFollowedShowsSyncProcessor.signpostID()
{
  return sub_100139A4C((uint64_t (*)(uint64_t))&static OSSignposter.cloudSync.getter);
}

uint64_t sub_100139A4C(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for OSSignposter(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1(v4);
  v8 = OSSignposter.logHandle.getter(v7);
  OSSignpostID.init(log:)(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

const char *variable initialization expression of UberArtworkResetMigrator.stepIdentifier()
{
  return "com.apple.podcasts.artwork.uber-migration.rdar120006144";
}

uint64_t MTWelcomeViewController.isAcknowledgementRequired.getter()
{
  return 1;
}

id variable initialization expression of UIAppSettingsBridge.app()
{
  return objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
}

uint64_t variable initialization expression of FeedManager.systemFuture()
{
  return UninitializedCurrentValueSubject.init()(&type metadata for FeedManager.System, &type metadata for Never, &protocol witness table for Never);
}

uint64_t variable initialization expression of FeedManager.queue()
{
  return sub_100139C7C(0x616E614D64656546, 0xEB00000000726567);
}

uint64_t variable initialization expression of FeedManager._system()
{
  return 0;
}

uint64_t variable initialization expression of PodcastsPlayerAdapter.playerPathCoordinator()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastsPlayerID);
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTApplicationBundleIdentifier);
  v5 = v4;
  v6 = objc_allocWithZone((Class)type metadata accessor for PlayerPathCoordinator(0));
  return PlayerPathCoordinator.init(playerID:bundleID:)(v0, v2, v3, v5);
}

id variable initialization expression of PodcastsPlayerAdapter.playerRequestController()
{
  return objc_msgSend(objc_allocWithZone((Class)MPRequestResponseController), "init");
}

uint64_t variable initialization expression of PodcastsPlayerAdapter.playerID()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastsPlayerID);
}

double variable initialization expression of PodcastsPlayerAdapter.jumpForwardsAmount()
{
  return 30.0;
}

double variable initialization expression of PodcastsPlayerAdapter.jumpBackwardsAmount()
{
  return 15.0;
}

uint64_t variable initialization expression of CopyTranscriptSelectionProvider.maxTranscriptWordsToCopy()
{
  return 200;
}

id variable initialization expression of ForegroundSyncUtil.defaults()
{
  return objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
}

uint64_t variable initialization expression of ForegroundSyncUtil.workQueue()
{
  return sub_100139C7C(0xD000000000000012, 0x800000010042E370);
}

uint64_t sub_100139C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v14);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10003F544(&qword_100555A00);
  v17 = sub_100048CA8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v4, v15);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a1, a2, v9, v6, v13, 0);
}

id variable initialization expression of ForegroundSyncUtil.syncController()
{
  return objc_msgSend((id)objc_opt_self(MTSyncController), "sharedInstance");
}

uint64_t variable initialization expression of ForegroundSyncUtil.categoriesSyncUtil()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  objc_class *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  _OWORD v26[2];
  _BYTE v27[24];
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  void *v31;
  _QWORD v32[5];

  v0 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v0);
  v2 = (char *)v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LibraryImageProvider(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
  v32[3] = sub_100005EC8(0, &qword_1005522F8, IMURLBag_ptr);
  v32[4] = &protocol witness table for IMURLBag;
  v32[0] = v7;
  v8 = (objc_class *)type metadata accessor for MediaRequestController(0);
  v9 = objc_msgSend(objc_allocWithZone(v8), "init");
  v30 = (uint64_t)v8;
  v31 = &protocol witness table for MediaRequestController;
  v29[0] = v9;
  v10 = type metadata accessor for MAPICategoriesProvider(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = MAPICategoriesProvider.init(mediaRequestController:)(v29);
  v30 = v10;
  v31 = &protocol witness table for MAPICategoriesProvider;
  v29[0] = v11;
  static LibraryImageProvider.background.getter(v11);
  v12 = type metadata accessor for CategoryIngester();
  v13 = (_QWORD *)swift_allocObject(v12, 56, 7);
  v13[5] = v3;
  v13[6] = &protocol witness table for LibraryImageProvider;
  v14 = sub_1000242A8(v13 + 2);
  (*(void (**)(_QWORD *, char *, uint64_t))(v4 + 32))(v14, v6, v3);
  v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v16 = objc_msgSend(v15, "objectForKey:", kMTLastCategoriesSyncDateDefaultKey);

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(v26, v16);
    swift_unknownObjectRelease(v16);
  }
  else
  {
    memset(v26, 0, sizeof(v26));
  }
  sub_10000773C((uint64_t)v26, (uint64_t)v27);
  if (v28)
  {
    v17 = type metadata accessor for Date(0);
    v18 = swift_dynamicCast(v2, v27, (char *)&type metadata for Any + 8, v17, 6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v2, v18 ^ 1u, 1, v17);
  }
  else
  {
    sub_1000485DC((uint64_t)v27);
    v19 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v2, 1, 1, v19);
  }
  v20 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v21 = static OS_dispatch_queue.uiAssetPreparationQueue.getter(v20);
  v22 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v23 = objc_msgSend(v22, "importContext");

  v24 = type metadata accessor for CategoriesSyncUtil(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  return CategoriesSyncUtil.init(categoriesSyncThresholdProvider:categoriesProvider:categoryIngester:lastCategoriesSyncDate:queue:ctx:)(v32, v29, v13, v2, v21, v23);
}

uint64_t variable initialization expression of EpisodeDownloadsManager.delegateQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  _QWORD *v23;
  unint64_t v24;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v23 = 0;
  v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.append(_:)(v10);
  type metadata accessor for EpisodeDownloadsManager(0);
  v11 = sub_10003F544(&qword_1005540B0);
  v12._countAndFlagsBits = _typeName(_:qualified:)(v11, 0);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 0x746167656C65642ELL;
  v14._object = (void *)0xEE00657565755165;
  String.append(_:)(v14);
  v15 = v23;
  v16 = v24;
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10003F544(&qword_100555A00);
  v20 = sub_100048CA8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v4, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v15, v16, v9, v6, v3, 0);
}

uint64_t variable initialization expression of EpisodeDownloadsManager.accessQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  _QWORD *v23;
  unint64_t v24;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v23 = 0;
  v24 = 0xE000000000000000;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.append(_:)(v10);
  type metadata accessor for EpisodeDownloadsManager(0);
  v11 = sub_10003F544(&qword_1005540B0);
  v12._countAndFlagsBits = _typeName(_:qualified:)(v11, 0);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 0x517373656363612ELL;
  v14._object = (void *)0xEC00000065756575;
  String.append(_:)(v14);
  v15 = v23;
  v16 = v24;
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10003F544(&qword_100555A00);
  v20 = sub_100048CA8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v4, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v15, v16, v9, v6, v3, 0);
}

unint64_t variable initialization expression of EpisodeDownloadsManager._downloaders()
{
  return sub_1000043DC((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of EpisodeDownloadsManager.inMemoryStorage()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for JobPipelineInMemoryStorage();
  v1 = swift_allocObject(v0, 32, 7);
  *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone((Class)NSRecursiveLock), "init");
  *(_QWORD *)(v1 + 24) = _swiftEmptyArrayStorage;
  return v1;
}

uint64_t sub_10013A618(uint64_t a1, uint64_t a2)
{
  return sub_10013B178(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_10013A638(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_10013A640@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_10013A654@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_10013A668@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_10013A67C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10013A6A8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_10013A6CC(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_10013A6E0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_10013A6F4(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_10013A708@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10013A71C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10013A730(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_10013A744(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_10013A758()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_10013A768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_10013A780(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

NSNumber sub_10013A794()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_10013A79C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Int._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_10013A7EC(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v7;
  v5 = v8;
  if (v8)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return v3 & 1;
}

uint64_t sub_10013A840@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

BOOL sub_10013A864(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_10013A878@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10013A888(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_10013A894(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

Swift::Int sub_10013A8C4(uint64_t a1, uint64_t a2)
{
  return sub_10013AB1C(a1, a2, (void (*)(uint64_t))&Hasher._combine(_:));
}

void sub_10013A8D0()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10013A8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013AB94(a1, a2, a3, (void (*)(uint64_t))&Hasher._combine(_:));
}

Swift::Int sub_10013A904()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10013A948()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10013A970(uint64_t a1)
{
  Swift::UInt32 *v1;
  Swift::UInt32 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_10013A9B0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10013A9C4(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10013AA38(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10013AAB4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_10013AAF4()
{
  _QWORD *v0;

  return Int.hashValue.getter(*v0);
}

uint64_t sub_10013AAFC(uint64_t a1)
{
  _QWORD *v1;

  return static Hasher._hash(seed:_:)(a1, *v1);
}

Swift::Int sub_10013AB04(uint64_t a1, uint64_t a2)
{
  return sub_10013AB1C(a1, a2, (void (*)(uint64_t))&Hasher._combine(_:));
}

Swift::Int sub_10013AB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013AB94(a1, a2, a3, (void (*)(uint64_t))&Hasher._combine(_:));
}

Swift::Int sub_10013AB1C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t v5;
  _QWORD v7[9];

  v5 = *v3;
  Hasher.init(_seed:)(v7, 0);
  a3(v5);
  return Hasher._finalize()();
}

void sub_10013AB6C()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10013AB94(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD v8[9];

  v6 = *v4;
  Hasher.init(_seed:)(v8, a1);
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_10013ABE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10013BDE4(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

_QWORD *sub_10013AC20@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_10013AC2C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_10013AC3C(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10013AC4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100026844(&qword_100552A10, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_1003C8B64);
  v3 = sub_100026844(&qword_100552A18, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_1003C8B04);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Int);
}

uint64_t sub_10013ACE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100026844(&qword_100552D88, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1003C9A58);
  v3 = sub_100026844(&qword_100552D90, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1003C97F4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10013AD64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100026844(&qword_100552DA8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003C9A9C);
  v3 = sub_100026844((unint64_t *)&unk_100552DB0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003C957C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10013ADE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100026844(&qword_10055B800, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C9B68);
  v3 = sub_100026844(&qword_100552DE0, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C9178);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10013AE6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100026844(&qword_100552DE8, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1003C9088);
  v3 = sub_100026844(&qword_100552DF0, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1003C9030);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10013AEF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100026844((unint64_t *)&qword_100552D78, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003C9A14);
  v3 = sub_100026844(&qword_100552D80, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003C9908);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10013AF74@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10013AF9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100026844(&qword_100552D98, (uint64_t (*)(uint64_t))type metadata accessor for BuildType, (uint64_t)&unk_1003C96FC);
  v3 = sub_100026844(&qword_100552DA0, (uint64_t (*)(uint64_t))type metadata accessor for BuildType, (uint64_t)&unk_1003C969C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10013B020(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100026844((unint64_t *)&qword_10055B990, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1003C9B24);
  v3 = sub_100026844((unint64_t *)&unk_100552DD0, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1003C9354);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10013B0A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10013B0E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100026844(&qword_100560AE0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1003C9AE0);
  v3 = sub_100026844((unint64_t *)&unk_100552DC0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1003C9468);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10013B16C(uint64_t a1, uint64_t a2)
{
  return sub_10013B178(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10013B178(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10013B1B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10013B1F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_10013B264(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10013B2EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE v20[40];
  _OWORD v21[2];
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10003F544(&qword_100552B78);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      sub_100048678(v6 + 40 * v4, (uint64_t)v21);
      result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v3 + 40));
      v8 = ~(-1 << *(_BYTE *)(v3 + 32));
      v9 = result & v8;
      v10 = (result & (unint64_t)v8) >> 6;
      v11 = *(_QWORD *)(v5 + 8 * v10);
      v12 = 1 << (result & v8);
      if ((v12 & v11) != 0)
      {
        while (1)
        {
          sub_100048678(*(_QWORD *)(v3 + 48) + 40 * v9, (uint64_t)v20);
          v13 = static AnyHashable.== infix(_:_:)(v20, v21);
          result = sub_100048644((uint64_t)v20);
          if ((v13 & 1) != 0)
            break;
          v9 = (v9 + 1) & v8;
          v10 = v9 >> 6;
          v11 = *(_QWORD *)(v5 + 8 * (v9 >> 6));
          v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0)
            goto LABEL_8;
        }
        sub_100048644((uint64_t)v21);
      }
      else
      {
LABEL_8:
        *(_QWORD *)(v5 + 8 * v10) = v12 | v11;
        v14 = *(_QWORD *)(v3 + 48) + 40 * v9;
        v15 = v21[0];
        v16 = v21[1];
        *(_QWORD *)(v14 + 32) = v22;
        *(_OWORD *)v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        v17 = *(_QWORD *)(v3 + 16);
        v18 = __OFADD__(v17, 1);
        v19 = v17 + 1;
        if (v18)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v19;
      }
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_10013B450(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(a1);
    if (v3)
    {
LABEL_3:
      sub_10003F544(&qword_100552C00);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      v26 = a1;
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (a1 < 0)
        v7 = a1;
      else
        v7 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(a1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v26 = a1;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v25 = v5;
  while ((v26 & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v26);
    v11 = __OFADD__(v8++, 1);
    if (v11)
      goto LABEL_32;
LABEL_24:
    v27 = v10;
    v29 = v10;
    v12 = v4[5];
    v13 = type metadata accessor for AnyCancellable(0);
    v14 = sub_100026844(&qword_100552C08, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
    v16 = -1 << *((_BYTE *)v4 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
    v20 = 1 << v17;
    if (((1 << v17) & v19) != 0)
    {
      v21 = ~v16;
      v22 = sub_100026844(&qword_100552C10, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        v28 = *(_QWORD *)(v4[6] + 8 * v17);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v22) & 1) != 0)
        {
          swift_release(v27);
          v5 = v25;
          goto LABEL_17;
        }
        v17 = (v17 + 1) & v21;
        v18 = v17 >> 6;
        v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
        v20 = 1 << v17;
      }
      while ((v19 & (1 << v17)) != 0);
      v5 = v25;
    }
    *(_QWORD *)&v9[8 * v18] = v20 | v19;
    *(_QWORD *)(v4[6] + 8 * v17) = v27;
    v23 = v4[2];
    v11 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v11)
      goto LABEL_33;
    v4[2] = v24;
LABEL_17:
    if (v8 == v5)
      return;
  }
  if (v8 >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_34;
  swift_retain(*(_QWORD *)(v26 + 32 + 8 * v8));
  v11 = __OFADD__(v8++, 1);
  if (!v11)
    goto LABEL_24;
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

__n128 initializeWithTake for DownloaderSessionConfigurationType(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10013B6F0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10013B710(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100047AF0(a1, &qword_1005528B0, (uint64_t)&unk_1004AD6B8);
}

void type metadata accessor for MTPodcastCellularDownloadLimit(uint64_t a1)
{
  sub_100047AF0(a1, &qword_1005528B8, (uint64_t)&unk_1004AD6E0);
}

void type metadata accessor for UIBackgroundTaskIdentifier(uint64_t a1)
{
  sub_100047AF0(a1, &qword_1005528C0, (uint64_t)&unk_1004AD700);
}

void type metadata accessor for Attributes(uint64_t a1)
{
  sub_100047AF0(a1, &qword_1005528C8, (uint64_t)&unk_1004AD728);
}

void type metadata accessor for MTPodcastDeletePlayed(uint64_t a1)
{
  sub_100047AF0(a1, &qword_1005528D0, (uint64_t)&unk_1004AD750);
}

void type metadata accessor for MTPodcastHidesPlayedEpisodes(uint64_t a1)
{
  sub_100047AF0(a1, &qword_1005528D8, (uint64_t)&unk_1004AD770);
}

void type metadata accessor for MTPodcastShowType(uint64_t a1)
{
  sub_100047AF0(a1, &qword_1005528E0, (uint64_t)&unk_1004AD790);
}

void type metadata accessor for State(uint64_t a1)
{
  sub_100047AF0(a1, &qword_1005528E8, (uint64_t)&unk_1004AD7B0);
}

void type metadata accessor for LegacyDownloadPhase(uint64_t a1)
{
  sub_100047AF0(a1, &qword_1005528F0, (uint64_t)&unk_1004AD7D0);
}

void type metadata accessor for MTEpisodeDownloadPhase(uint64_t a1)
{
  sub_100047AF0(a1, &qword_1005528F8, (uint64_t)&unk_1004AD7F0);
}

void type metadata accessor for MTEpisodePubDateLimit(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552900, (uint64_t)&unk_1004AD810);
}

uint64_t sub_10013B814()
{
  return sub_100026844(&qword_100552908, (uint64_t (*)(uint64_t))type metadata accessor for Attributes, (uint64_t)&unk_1003C892C);
}

uint64_t sub_10013B840()
{
  return sub_100026844(&qword_100552910, (uint64_t (*)(uint64_t))type metadata accessor for Attributes, (uint64_t)&unk_1003C88F8);
}

uint64_t sub_10013B86C()
{
  return sub_100026844(&qword_100552918, (uint64_t (*)(uint64_t))type metadata accessor for Attributes, (uint64_t)&unk_1003C8958);
}

uint64_t sub_10013B898()
{
  return sub_100026844(&qword_100552920, (uint64_t (*)(uint64_t))type metadata accessor for Attributes, (uint64_t)&unk_1003C8994);
}

uint64_t sub_10013B8C4()
{
  return sub_100026844(&qword_100552928, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_1003C8AC8);
}

uint64_t sub_10013B8F0()
{
  return sub_100026844(&qword_100552930, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_1003C8A9C);
}

uint64_t sub_10013B91C()
{
  return sub_100026844(&qword_100552938, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_1003C8B38);
}

uint64_t sub_10013B948()
{
  return sub_100026844(&qword_100552940, (uint64_t (*)(uint64_t))type metadata accessor for MTPodcastDeletePlayed, (uint64_t)&unk_1003C8884);
}

uint64_t sub_10013B974()
{
  return sub_100026844(&qword_100552948, (uint64_t (*)(uint64_t))type metadata accessor for MTPodcastHidesPlayedEpisodes, (uint64_t)&unk_1003C881C);
}

uint64_t sub_10013B9A0()
{
  return sub_100026844(&qword_100552950, (uint64_t (*)(uint64_t))type metadata accessor for MTPodcastShowType, (uint64_t)&unk_1003C87B4);
}

_OWORD *sub_10013B9CC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

Swift::Int sub_10013B9DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10003F544(&qword_100552B70);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void *sub_10013BB7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for PlaybackIntent.Option(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_10003F544(&qword_1005529E0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100026844(&qword_1005529E8, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackIntent.Option, (uint64_t)&protocol conformance descriptor for PlaybackIntent.Option);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100026844(&qword_1005529F0, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackIntent.Option, (uint64_t)&protocol conformance descriptor for PlaybackIntent.Option);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_10013BDE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10013BE1C(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 0x11)
    return swift_retain(result);
  return result;
}

uint64_t sub_10013BE30(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for MRMediaRemoteError(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C48, (uint64_t)&unk_1004AD858);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C50, (uint64_t)&unk_1004AD878);
}

void type metadata accessor for ProgressUserInfoKey(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C58, (uint64_t)&unk_1004AD8A0);
}

void type metadata accessor for BuildType(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C60, (uint64_t)&unk_1004AD8C8);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C68, (uint64_t)&unk_1004AD8F0);
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C70, (uint64_t)&unk_1004AD918);
}

void type metadata accessor for OpenURLOptionsKey(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C78, (uint64_t)&unk_1004AD940);
}

void type metadata accessor for MTEpisodePlayState(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C80, (uint64_t)&unk_1004AD968);
}

void type metadata accessor for MTPlaybackRequestStatus(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C88, (uint64_t)&unk_1004AD988);
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C90, (uint64_t)&unk_1004AD9A8);
}

void type metadata accessor for ActivityType(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552C98, (uint64_t)&unk_1004AD9D0);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552CA0, (uint64_t)&unk_1004ADA50);
}

void type metadata accessor for Style(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552CA8, (uint64_t)&unk_1004ADA78);
}

uint64_t initializeBufferWithCopyOfBuffer for DownloaderConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for PrototypeUpNextSettingsView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10013BFC4(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10013C018(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

void type metadata accessor for MPCPlayerItemDurationSnapshot(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552CB0, (uint64_t)&unk_1004ADAF0);
}

uint64_t sub_10013C07C()
{
  return sub_100026844(&qword_100552CB8, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1003C8FF8);
}

uint64_t sub_10013C0A8()
{
  return sub_100026844(&qword_100552CC0, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1003C8FD0);
}

uint64_t sub_10013C0D4()
{
  return sub_100026844(&qword_100552CC8, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1003C9060);
}

uint64_t sub_10013C100()
{
  return sub_100026844(&qword_100552CD0, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C913C);
}

uint64_t sub_10013C12C()
{
  return sub_100026844(&qword_100552CD8, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C9110);
}

uint64_t sub_10013C158()
{
  return sub_100026844(&qword_100552CE0, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1003C9318);
}

uint64_t sub_10013C184()
{
  return sub_100026844(&qword_100552CE8, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1003C92EC);
}

uint64_t sub_10013C1B0()
{
  return sub_100026844(&qword_100552CF0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1003C942C);
}

uint64_t sub_10013C1DC()
{
  return sub_100026844(&qword_100552CF8, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1003C9400);
}

uint64_t sub_10013C208()
{
  return sub_100026844(&qword_100552D00, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003C9540);
}

uint64_t sub_10013C234()
{
  return sub_100026844(&qword_100552D08, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003C9514);
}

uint64_t sub_10013C260()
{
  return sub_100026844(&qword_100552D10, (uint64_t (*)(uint64_t))type metadata accessor for BuildType, (uint64_t)&unk_1003C9660);
}

uint64_t sub_10013C28C()
{
  return sub_100026844(&qword_100552D18, (uint64_t (*)(uint64_t))type metadata accessor for BuildType, (uint64_t)&unk_1003C9634);
}

uint64_t sub_10013C2B8()
{
  return sub_100026844(&qword_100552D20, (uint64_t (*)(uint64_t))type metadata accessor for BuildType, (uint64_t)&unk_1003C96D0);
}

uint64_t sub_10013C2E4()
{
  return sub_100026844(&qword_100552D28, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1003C97B8);
}

uint64_t sub_10013C310()
{
  return sub_100026844(&qword_100552D30, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1003C978C);
}

uint64_t sub_10013C33C()
{
  return sub_100026844(&qword_100552D38, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003C98CC);
}

uint64_t sub_10013C368()
{
  return sub_100026844(&qword_100552D40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003C98A0);
}

uint64_t sub_10013C394()
{
  return sub_100026844(&qword_100552D48, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003C993C);
}

uint64_t sub_10013C3C0()
{
  return sub_100026844(&qword_100552D50, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1003C9828);
}

uint64_t sub_10013C3EC()
{
  return sub_100026844(&qword_100552D58, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003C95B0);
}

uint64_t sub_10013C418()
{
  return sub_100026844(&qword_100552D60, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1003C949C);
}

uint64_t sub_10013C444()
{
  return sub_100026844(&qword_100552D68, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1003C9388);
}

uint64_t sub_10013C470()
{
  return sub_100026844(&qword_100552D70, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C91AC);
}

void type metadata accessor for MTEpisodeEntitlementState(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552DF8, (uint64_t)&unk_1004ADB38);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552E00, (uint64_t)&unk_1004ADB58);
}

void type metadata accessor for CLSContextType(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552E08, (uint64_t)&unk_1004ADB88);
}

void type metadata accessor for MTBookmarksSyncType(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552E10, (uint64_t)&unk_1004ADBA8);
}

void type metadata accessor for MTSubscriptionSyncType(uint64_t a1)
{
  sub_100047AF0(a1, &qword_100552E18, (uint64_t)&unk_1004ADBC8);
}

uint64_t sub_10013C500()
{
  return sub_100026844(&qword_100552E20, (uint64_t (*)(uint64_t))type metadata accessor for MTSubscriptionSyncType, (uint64_t)&unk_1003C9C7C);
}

uint64_t sub_10013C52C()
{
  return sub_100026844(&qword_100552E28, (uint64_t (*)(uint64_t))type metadata accessor for MTBookmarksSyncType, (uint64_t)&unk_1003C9D28);
}

void CarPlayController.graph.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

_QWORD *initializeBufferWithCopyOfBuffer for DownloaderSessionConfigurationType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for DownloaderSessionConfigurationType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for DownloaderSessionConfigurationType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloaderSessionConfigurationType(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloaderSessionConfigurationType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for DownloaderSessionIdentifier(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t _s8Podcasts27DownloaderSessionIdentifierVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for DownloaderSessionIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for DownloaderSessionIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloaderSessionIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloaderSessionIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloaderSessionIdentifier()
{
  return &type metadata for DownloaderSessionIdentifier;
}

_QWORD *assignWithCopy for DownloaderConfiguration(_QWORD *a1, _QWORD *a2)
{
  sub_10013C884(a1, a2);
  sub_10013C884(a1 + 5, a2 + 5);
  sub_10013C884(a1 + 10, a2 + 10);
  sub_10013C884(a1 + 15, a2 + 15);
  return a1;
}

_QWORD *sub_10013C884(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for DownloaderConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for DownloaderConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  sub_10003D380((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_10003D380((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_10003D380((_QWORD *)(a1 + 80));
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  sub_10003D380((_QWORD *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloaderConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloaderConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloaderConfiguration()
{
  return &type metadata for DownloaderConfiguration;
}

uint64_t getEnumTagSinglePayload for PodcastsDownloader(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PodcastsDownloader(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10013CC44 + 4 * byte_1003C9E15[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10013CC78 + 4 * byte_1003C9E10[v4]))();
}

uint64_t sub_10013CC78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013CC80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013CC88);
  return result;
}

uint64_t sub_10013CC94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013CC9CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10013CCA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013CCA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013CCB4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10013CCBC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PodcastsDownloader()
{
  return &type metadata for PodcastsDownloader;
}

void sub_10013CCD4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_10013CD30()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD00000000000002DLL, 0x800000010042DE50);
  swift_bridgeObjectRelease(0x800000010042DE50);
  return Hasher._finalize()();
}

Swift::Int sub_10013CD9C(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000010;
  else
    v2 = 0xD000000000000011;
  if ((a1 & 1) != 0)
    v3 = 0x800000010042E140;
  else
    v3 = 0x800000010042E120;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10013CE20(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000011;
  else
    v2 = 0xD000000000000012;
  if ((a1 & 1) != 0)
    v3 = 0x800000010042E100;
  else
    v3 = 0x800000010042E0E0;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_10013CEA0(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_10013CEF0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7972617262696CLL, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_10013CF60(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10013CFA8(uint64_t a1)
{
  String.hash(into:)(a1, 0xD00000000000002DLL, 0x800000010042DE50);
  return swift_bridgeObjectRelease(0x800000010042DE50);
}

void sub_10013CFFC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10013D054()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD00000000000002DLL, 0x800000010042DE50);
  swift_bridgeObjectRelease(0x800000010042DE50);
  return Hasher._finalize()();
}

Swift::Int sub_10013D0C0(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000010;
  else
    v3 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v4 = 0x800000010042E140;
  else
    v4 = 0x800000010042E120;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_10013D140(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0xD000000000000012;
  if ((a2 & 1) != 0)
    v4 = 0x800000010042E100;
  else
    v4 = 0x800000010042E0E0;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10013D1BC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10013D208()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7972617262696CLL, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10013D278(char *a1, char *a2)
{
  return sub_1002790EC(*a1, *a2);
}

Swift::Int sub_10013D284()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 1936484398;
  else
    v2 = 0x7261646E6174732ELL;
  if (v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE900000000000064;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10013D300(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 1936484398;
  else
    v2 = 0x7261646E6174732ELL;
  if (*v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE900000000000064;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10013D358(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 1936484398;
  else
    v3 = 0x7261646E6174732ELL;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE900000000000064;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10013D3D0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004AC5B8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10013D42C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1936484398;
  if (!*v1)
    v2 = 0x7261646E6174732ELL;
  v3 = 0xE900000000000064;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10013D468(_QWORD *a1@<X8>)
{
  *a1 = &off_1004AC608;
}

Swift::Int sub_10013D478()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_10013D4D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10013D514(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10013D568()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  _QWORD v5[2];

  v1 = *v0;
  v2 = (void *)v0[1];
  strcpy((char *)v5, "ConfigType: ");
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  return v5[0];
}

uint64_t sub_10013D5D8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

uint64_t sub_10013D608(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v7;

  if ((a3 & 1) != 0)
    v3 = 1936484398;
  else
    v3 = 0x7261646E6174732ELL;
  if ((a3 & 1) != 0)
    v4 = (void *)0xE400000000000000;
  else
    v4 = (void *)0xE900000000000064;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  swift_bridgeObjectRetain(a2);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v7._object);
  return 0x496E6F6973736553;
}

Swift::Int sub_10013D6C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)(v7, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v1, v2);
  swift_bridgeObjectRelease(v2);
  if (v3)
    v4 = 1936484398;
  else
    v4 = 0x7261646E6174732ELL;
  if (v3)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE900000000000064;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10013D768(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *v1;
  v4 = v1[1];
  v5 = *((unsigned __int8 *)v1 + 16);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  if (v5)
    v6 = 1936484398;
  else
    v6 = 0x7261646E6174732ELL;
  if (v5)
    v7 = 0xE400000000000000;
  else
    v7 = 0xE900000000000064;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v7);
}

Swift::Int sub_10013D7F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = *((unsigned __int8 *)v1 + 16);
  Hasher.init(_seed:)(v8, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v8, v2, v3);
  swift_bridgeObjectRelease(v3);
  if (v4)
    v5 = 1936484398;
  else
    v5 = 0x7261646E6174732ELL;
  if (v4)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE900000000000064;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_10013D898()
{
  uint64_t v0;

  return sub_10013D608(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10013D8A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  BOOL v9;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_BYTE *)a1 + 16);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  v9 = v4 == *(_QWORD *)a2 && v5 == v7;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v7, 0) & 1) != 0)
    return sub_1002790EC(v6, v8);
  else
    return 0;
}

uint64_t sub_10013D908(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10013D944 + 4 * byte_1003C9E2E[a1]))(0xD000000000000033, 0x800000010042DE10);
}

unint64_t sub_10013D944()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_10013D96C()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t sub_10013D9A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10013D9E0 + 4 * byte_1003C9E32[a2]))(a1, 0x800000010042DE10);
}

unint64_t sub_10013D9E0()
{
  return 0xD00000000000002DLL;
}

void sub_10013DA28(char *a1)
{
  sub_1002796C4(*a1);
}

void sub_10013DA34()
{
  char *v0;

  sub_10013CCD4(*v0);
}

void sub_10013DA3C(uint64_t a1)
{
  char *v1;

  sub_10013CF60(a1, *v1);
}

void sub_10013DA44(uint64_t a1)
{
  char *v1;

  sub_10013CFFC(a1, *v1);
}

unint64_t sub_10013DA4C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10013DD14(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10013DA78@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10013D908(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10013DAA4()
{
  unint64_t result;

  result = qword_100552EF0;
  if (!qword_100552EF0)
  {
    result = swift_getWitnessTable(&unk_1003C9F6C, &type metadata for PodcastsDownloader);
    atomic_store(result, (unint64_t *)&qword_100552EF0);
  }
  return result;
}

unint64_t sub_10013DAEC()
{
  unint64_t result;

  result = qword_100552EF8;
  if (!qword_100552EF8)
  {
    result = swift_getWitnessTable(&unk_1003C9F94, &type metadata for DownloaderSessionIdentifier);
    atomic_store(result, (unint64_t *)&qword_100552EF8);
  }
  return result;
}

uint64_t sub_10013DB30(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = String.index(_:offsetBy:limitedBy:)(v6 | (v5 << 16), -result, 15, a2, a3);
    if ((v8 & 1) != 0)
      v9 = 15;
    else
      v9 = v7;
    return String.subscript.getter(15, v9, a2, a3);
  }
  return result;
}

uint64_t sub_10013DBB8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::Bool v7;
  Swift::String v8;
  Swift::Bool v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = 0x7261646E6174732ELL;
  v5 = 0xE900000000000064;
  v6._countAndFlagsBits = 0x7261646E6174732ELL;
  v6._object = (void *)0xE900000000000064;
  v7 = String.hasSuffix(_:)(v6);
  swift_bridgeObjectRelease(0xE900000000000064);
  if (v7
    || (v4 = 1936484398,
        v5 = 0xE400000000000000,
        v8._countAndFlagsBits = 1936484398,
        v8._object = (void *)0xE400000000000000,
        v9 = String.hasSuffix(_:)(v8),
        swift_bridgeObjectRelease(0xE400000000000000),
        v9))
  {
    v10 = String.count.getter(v4, v5);
    swift_bridgeObjectRelease(v5);
    v11 = sub_10013DB30(v10, a1, a2);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    swift_bridgeObjectRelease(a2);
    v18 = static String._fromSubstring(_:)(v11, v13, v15, v17);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  return v18;
}

unint64_t sub_10013DD14(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004AC658, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t getEnumTagSinglePayload for SessionConfigFlavor(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionConfigFlavor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10013DE38 + 4 * byte_1003C9E3B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10013DE6C + 4 * byte_1003C9E36[v4]))();
}

uint64_t sub_10013DE6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013DE74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013DE7CLL);
  return result;
}

uint64_t sub_10013DE88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013DE90);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10013DE94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013DE9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10013DEA8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SessionConfigFlavor()
{
  return &type metadata for SessionConfigFlavor;
}

unint64_t sub_10013DEC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100552F10;
  if (!qword_100552F10)
  {
    v1 = sub_10003CA40(&qword_100552F18);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100552F10);
  }
  return result;
}

unint64_t sub_10013DF18()
{
  unint64_t result;

  result = qword_100552F20;
  if (!qword_100552F20)
  {
    result = swift_getWitnessTable(&unk_1003CA194, &type metadata for SessionConfigFlavor);
    atomic_store(result, (unint64_t *)&qword_100552F20);
  }
  return result;
}

unint64_t sub_10013DF64(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  char v6;
  unint64_t v7;
  Swift::String v8;
  void *object;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  _QWORD v15[3];
  _BYTE v16[8];
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  _QWORD v21[3];
  _BYTE v22[8];

  if (a3 >> 6)
  {
    if (a3 >> 6 == 1)
    {
      v6 = a3 & 0x3F;
      sub_10014F9CC(a1, a2, a3 & 0x3F);
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease(0xE000000000000000);
      v20 = 0x800000010042F5E0;
      v17 = a1;
      v18 = a2;
      v19 = v6;
      v7 = sub_10014FBF0();
      v8._countAndFlagsBits = Error.localizedDescription.getter(&type metadata for PreflightError, v7);
      object = v8._object;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(object);
      sub_100150088(a1, a2, a3);
      return 0xD000000000000011;
    }
    swift_errorRetain(a1);
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17 = 0x20636972656E6547;
    v18 = 0xEF203A726F727265;
    swift_getErrorValue(a1, v22, v21);
    v11 = v21[1];
    v12 = v21[2];
  }
  else
  {
    swift_errorRetain(a1);
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17 = 0x206B726F7774654ELL;
    v18 = 0xEF203A726F727265;
    swift_getErrorValue(a1, v16, v15);
    v11 = v15[1];
    v12 = v15[2];
  }
  v13._countAndFlagsBits = Error.localizedDescription.getter(v11, v12);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  sub_100150088(a1, a2, a3);
  return v17;
}

unint64_t sub_10013E138()
{
  uint64_t v0;

  return sub_10013DF64(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10013E150()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;

  v1 = *v0;
  v2 = (void *)v0[1];
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  return 0x2064696C61766E49;
}

unint64_t sub_10013E1D0(uint64_t a1, uint64_t a2, char a3)
{
  Swift::String v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  unint64_t v15;
  _QWORD v16[3];
  _BYTE v17[8];
  unint64_t v18;
  unint64_t v19;

  if (!a3)
  {
    v18 = 0;
    v19 = 0xE000000000000000;
    _StringGuts.grow(_:)(60);
    v7._countAndFlagsBits = 0xD00000000000002ELL;
    v7._object = (void *)0x800000010042EDF0;
    String.append(_:)(v7);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    v10._countAndFlagsBits = 0x3A74696D696C202CLL;
    v10._object = (void *)0xE900000000000020;
    String.append(_:)(v10);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v12 = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(v12);
    v13._countAndFlagsBits = 46;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    return v18;
  }
  if (a3 == 1)
  {
    swift_errorRetain(a1);
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v18 = 0xD000000000000020;
    v19 = 0x800000010042EDA0;
    swift_getErrorValue(a1, v17, v16);
    v5._countAndFlagsBits = Error.localizedDescription.getter(v16[1], v16[2]);
    v6 = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(v6);
    sub_10014F9F0(a1, a2, 1);
    return v18;
  }
  v15 = 0xD000000000000014;
  if (!(a1 ^ 1 | a2))
    v15 = 0x656C6C65636E6143;
  if (a1 | a2)
    return v15;
  else
    return 0xD000000000000012;
}

unint64_t sub_10013E3E0()
{
  uint64_t v0;

  return sub_10013E1D0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10013E3EC()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval(0);
  sub_100047DD0(v0, qword_100572D18);
  *(_QWORD *)sub_100047DA4(v0, (uint64_t)qword_100572D18) = 200;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

BOOL sub_10013E44C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10013E464()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10013E4A8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10013E4D0(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10013E510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline__job;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline__job, v5, 0, 0);
  return sub_10014FDF8(v3, a2, type metadata accessor for DownloadJob);
}

uint64_t sub_10013E578(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline__job;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline__job, v5, 33, 0);
  sub_10014FE6C(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_10013E5D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000A520(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline__task, a2);
}

id sub_10013E604()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC8Podcasts11JobPipeline____lazy_storage___operationQueue;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline____lazy_storage___operationQueue);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline____lazy_storage___operationQueue);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setName:", v5);

    objc_msgSend(v4, "setMaxConcurrentOperationCount:", 1);
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

void sub_10013E6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];
  __int128 v43[3];
  uint64_t v44[3];
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v47, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(id *)(Strong + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    v7 = sub_10003F544(&qword_100564DA0);
    OS_dispatch_queue.sync<A>(execute:)(v44, sub_10014FC34, v5, v7);
    swift_release(v5);

    v8 = v45;
    v9 = v46;
    sub_10003A834(v44, v45);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v8, v9);
    v12 = v11;
    Strong = sub_10003D380(v44);
    if (a1 != 1)
      goto LABEL_3;
  }
  else
  {
    v10 = 0;
    v12 = 0xE000000000000000;
    if (a1 != 1)
    {
LABEL_3:
      if (a1)
      {
        swift_bridgeObjectRelease(v12);
        return;
      }
      v13 = static os_log_type_t.debug.getter(Strong);
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v14 = static OS_os_log.downloads.getter();
      v15 = v13;
      if (os_log_type_enabled(v14, v13))
      {
        swift_bridgeObjectRetain(v12);
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v17 = swift_slowAlloc(32, -1);
        v44[0] = v17;
        *(_DWORD *)v16 = 136446210;
        swift_bridgeObjectRetain(v12);
        *(_QWORD *)&v43[0] = sub_10003D274(v10, v12, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, (char *)v43 + 8, v16 + 4, v16 + 12);
        swift_bridgeObjectRelease_n(v12, 3);
        v18 = "Task %{public}s is running";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v18, v16, 0xCu);
        swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);

        return;
      }
LABEL_14:
      swift_bridgeObjectRelease(v12);

      return;
    }
  }
  swift_beginAccess(v3, v42, 0, 0);
  v19 = swift_weakLoadStrong(v3);
  if (!v19)
  {
    v29 = static os_log_type_t.error.getter(0);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v14 = static OS_os_log.downloads.getter();
    v15 = v29;
    if (os_log_type_enabled(v14, v29))
    {
      swift_bridgeObjectRetain(v12);
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v44[0] = v17;
      *(_DWORD *)v16 = 136446210;
      swift_bridgeObjectRetain(v12);
      *(_QWORD *)&v43[0] = sub_10003D274(v10, v12, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, (char *)v43 + 8, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease_n(v12, 3);
      v18 = "Task %{public}s state got change into suspended, but no progress provided.";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  v20 = v19;
  v21 = *(id *)(v19 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  v22 = sub_10003F544(&qword_100564DA0);
  OS_dispatch_queue.sync<A>(execute:)(v43, sub_100152A34, v20, v22);
  swift_release(v20);

  v23 = sub_10002099C(v43, (uint64_t)v44);
  v24 = static os_log_type_t.default.getter(v23);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v25 = static OS_os_log.downloads.getter();
  v26 = v24;
  if (os_log_type_enabled(v25, v24))
  {
    swift_bridgeObjectRetain(v12);
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v43[0] = v28;
    *(_DWORD *)v27 = 136446210;
    swift_bridgeObjectRetain(v12);
    v41 = sub_10003D274(v10, v12, (uint64_t *)v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease_n(v12, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Task %{public}s has been suspended", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v12);
  }

  swift_beginAccess(v3, v43, 0, 0);
  v30 = swift_weakLoadStrong(v3);
  if (v30)
  {
    v31 = v30;
    v32 = v45;
    v33 = v46;
    sub_10003A834(v44, v45);
    v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v32, v33);
    v35 = v45;
    v36 = v46;
    sub_10003A834(v44, v45);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 96))(v35, v36);
    v38 = v45;
    v39 = v46;
    sub_10003A834(v44, v45);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 104))(v38, v39);
    sub_10014DFDC(v34, v37, v40, 1);
    swift_release(v31);

  }
  sub_10003D380(v44);
}

void sub_10013EC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  objc_class *v14;
  char *v15;
  char *v16;
  char *v17;
  double v18;
  char *v19;
  objc_class *v20;
  char *v21;
  char *v22;
  void (**v23)(uint64_t);
  double v24;
  objc_class *v25;
  char *v26;
  char *v27;
  uint64_t (**v28)@<X0>(uint64_t@<X8>);
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  char *v34;
  char *v35;
  uint64_t (**v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  objc_class *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  void (**v41)(uint64_t, void (*)(char *), uint64_t);
  double v42;
  void (*v43)(uint64_t@<X0>, uint64_t@<X8>);
  objc_class *v44;
  _QWORD *v45;
  void (**v46)(uint64_t@<X0>, uint64_t@<X8>);
  char *v47;
  uint64_t v48;
  uint64_t (**v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ObjectType;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (**v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v89;
  __n128 v90;
  uint64_t v91;
  objc_class *v92;
  char *v93;
  uint64_t v94;
  void *v95;
  uint64_t (**v96)(uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v113;
  __n128 v114;
  uint64_t v115;
  objc_class *v116;
  char *v117;
  uint64_t v118;
  uint64_t (**v119)(uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v136;
  __n128 v137;
  uint64_t v138;
  uint64_t v139;
  objc_class *v140;
  char *v141;
  uint64_t v142;
  uint64_t (**v143)(uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v160;
  __n128 v161;
  uint64_t v162;
  objc_class *v163;
  char *v164;
  uint64_t v165;
  void (**v166)(uint64_t);
  uint64_t v167;
  uint64_t v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  char *v174;
  id v175;
  char *v176;
  char *v177;
  char *v178;
  Class isa;
  id v180;
  void *v181;
  char *v182;
  char *v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  id v189;
  char *v190;
  uint64_t v191;
  __int128 v192;
  id v193;
  objc_super v194;
  objc_super v195;
  objc_super v196;
  objc_super v197;
  objc_super v198;
  uint64_t v199;
  objc_super v200;
  objc_super v201;
  objc_super v202;
  objc_super v203;
  objc_super v204;
  objc_super v205;

  v7 = (uint64_t *)(v6 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  v9 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck + 8);
  v10 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck + 16);
  v11 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck + 24);
  *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  sub_100151B14(a1, a2, a3, a4);
  sub_100151B40(v8, v9, v10, v11);
  v191 = v6;
  Strong = swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC8Podcasts11JobPipeline_delegate);
  if (Strong)
  {
    v13 = Strong;
    sub_10033351C(v191);
    swift_unknownObjectRelease(v13);
  }
  v14 = (objc_class *)sub_10003F544(&qword_1005533E8);
  v15 = (char *)objc_allocWithZone(v14);
  v16 = &v15[*(_QWORD *)((swift_isaMask & *(_QWORD *)v15) + 0x180)];
  *(_QWORD *)v16 = 0;
  v16[8] = 2;
  v17 = &v15[*(_QWORD *)((swift_isaMask & *(_QWORD *)v15) + 0x188)];
  *(_QWORD *)v17 = sub_100151B6C;
  *((_QWORD *)v17 + 1) = v191;
  v205.receiver = v15;
  v205.super_class = v14;
  *(_QWORD *)&v18 = swift_retain().n128_u64[0];
  v19 = (char *)objc_msgSendSuper2(&v205, "init", v18);
  v20 = (objc_class *)sub_10003F544(&qword_1005533F0);
  v21 = (char *)objc_allocWithZone(v20);
  v22 = &v21[*(_QWORD *)((swift_isaMask & *(_QWORD *)v21) + 0x180)];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *((_WORD *)v22 + 8) = 512;
  v23 = (void (**)(uint64_t))&v21[*(_QWORD *)((swift_isaMask & *(_QWORD *)v21) + 0x188)];
  *v23 = sub_100151B74;
  v23[1] = (void (*)(uint64_t))v191;
  v204.receiver = v21;
  v204.super_class = v20;
  *(_QWORD *)&v24 = swift_retain().n128_u64[0];
  v182 = (char *)objc_msgSendSuper2(&v204, "init", v24);
  v25 = (objc_class *)sub_10003F544((uint64_t *)&unk_10055BCB0);
  v26 = (char *)objc_allocWithZone(v25);
  v27 = &v26[*(_QWORD *)((swift_isaMask & *(_QWORD *)v26) + 0x180)];
  *(_QWORD *)v27 = 0;
  v27[8] = 2;
  v28 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v26[*(_QWORD *)((swift_isaMask & *(_QWORD *)v26) + 0x188)];
  *v28 = sub_100151B8C;
  v28[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v191;
  v203.receiver = v26;
  v203.super_class = v25;
  *(_QWORD *)&v29 = swift_retain().n128_u64[0];
  v180 = objc_msgSendSuper2(&v203, "init", v29);
  v30 = OBJC_IVAR____TtC8Podcasts11JobPipeline_jobStorage;
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  swift_retain();
  v192 = *(_OWORD *)(v191 + v30);
  v31 = swift_unknownObjectRetain(v192);
  v32 = static OS_os_log.downloads.getter(v31);
  v33 = (objc_class *)sub_10003F544(&qword_1005533F8);
  v34 = (char *)objc_allocWithZone(v33);
  v35 = &v34[*(_QWORD *)((swift_isaMask & *(_QWORD *)v34) + 0x198)];
  *(_QWORD *)v35 = 0;
  v35[8] = 2;
  v36 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v34[*(_QWORD *)((swift_isaMask & *(_QWORD *)v34)
                                                                                    + 0x1A8)];
  *v36 = sub_100151BA4;
  v36[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v191;
  *(_OWORD *)&v34[*(_QWORD *)((swift_isaMask & *(_QWORD *)v34) + 0x1A0)] = v192;
  *(_QWORD *)&v34[*(_QWORD *)((swift_isaMask & *(_QWORD *)v34) + 0x1B0)] = v32;
  v202.receiver = v34;
  v202.super_class = v33;
  v184 = objc_msgSendSuper2(&v202, "init");
  v37 = (objc_class *)sub_10003F544(&qword_100553400);
  v38 = objc_allocWithZone(v37);
  v39 = (char *)v38 + *(_QWORD *)((swift_isaMask & *v38) + 0x180);
  v40 = sub_10003F544(&qword_100553408);
  swift_storeEnumTagMultiPayload(v39, v40, 2);
  v41 = (void (**)(uint64_t, void (*)(char *), uint64_t))((char *)v38
                                                                            + *(_QWORD *)((swift_isaMask & *v38)
                                                                                        + 0x188));
  *v41 = sub_100151BAC;
  v41[1] = (void (*)(uint64_t, void (*)(char *), uint64_t))v191;
  v201.receiver = v38;
  v201.super_class = v37;
  *(_QWORD *)&v42 = swift_retain().n128_u64[0];
  v189 = objc_msgSendSuper2(&v201, "init", v42);
  v43 = (void (*)(uint64_t@<X0>, uint64_t@<X8>))swift_allocObject(&unk_1004AF558, 40, 7);
  *((_QWORD *)v43 + 2) = v191;
  *((_QWORD *)v43 + 3) = a5;
  *((_QWORD *)v43 + 4) = a6;
  v44 = (objc_class *)sub_10003F544(&qword_100553410);
  v45 = objc_allocWithZone(v44);
  swift_storeEnumTagMultiPayload((char *)v45 + *(_QWORD *)((swift_isaMask & *v45) + 0x180), v40, 2);
  v46 = (void (**)(uint64_t@<X0>, uint64_t@<X8>))((char *)v45 + *(_QWORD *)((swift_isaMask & *v45) + 0x188));
  *v46 = sub_100151BFC;
  v46[1] = v43;
  swift_retain();
  v47 = v182;
  sub_10002CA20(a5, a6);
  v200.receiver = v45;
  v200.super_class = v44;
  v193 = objc_msgSendSuper2(&v200, "init");
  v48 = swift_allocObject(&unk_1004AF580, 24, 7);
  swift_unknownObjectWeakInit(v48 + 16, v182);
  v49 = (uint64_t (**)(uint64_t))&v19[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v50 = *(_QWORD *)&v19[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v51 = *(_QWORD *)&v19[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v49 = sub_100151C18;
  v49[1] = (uint64_t (*)(uint64_t))v48;
  sub_10002CA30(v50, v51);
  v52 = objc_opt_self(NSOperation);
  v181 = v19;
  v53 = swift_dynamicCastObjCClass(v19, v52);
  if (v53)
  {
    v55 = v53;
    ObjectType = swift_getObjectType(v53, v54);
    v57 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
    v59 = v57 ? v57 : 0;
    v60 = v57 ? v55 : 0;
    if (v60)
    {
      v61 = swift_getObjectType(v60, v58);
      v62 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v62 + 24) = v59;
      swift_unknownObjectWeakInit(v62 + 16, v60);
      v63 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v63 + 16, v182);
      v64 = swift_allocObject(&unk_1004AF710, 32, 7);
      *(_QWORD *)(v64 + 16) = v63;
      *(_QWORD *)(v64 + 24) = v62;
      v65 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v59 + 72);
      v66 = (id)swift_unknownObjectRetain(v181);
      swift_retain();
      v67 = swift_retain();
      v65(sub_1000456D4, v64, v61, v59, v67);
      swift_release(v62);
      swift_release(v63);
      v68 = v64;
      v47 = v182;
      swift_release(v68);
      v194.receiver = v182;
      v194.super_class = (Class)type metadata accessor for BaseOperation();
      objc_msgSendSuper2(&v194, "addDependency:", v55);

    }
  }
  v69 = swift_allocObject(&unk_1004AF5A8, 24, 7);
  swift_unknownObjectWeakInit(v69 + 16, v180);
  v70 = (uint64_t (**)(uint64_t))&v47[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v71 = *(_QWORD *)&v47[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v72 = *(_QWORD *)&v47[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v70 = sub_10014FDA0;
  v70[1] = (uint64_t (*)(uint64_t))v69;
  v73 = v47;
  sub_10002CA30(v71, v72);
  v74 = objc_opt_self(NSOperation);
  v75 = swift_dynamicCastObjCClass(v73, v74);
  v183 = v73;
  v77 = v189;
  if (v75)
  {
    v78 = v75;
    v79 = swift_getObjectType(v75, v76);
    v80 = swift_conformsToProtocol2(v79, &protocol descriptor for PodcastsOperation);
    v82 = v80 ? v80 : 0;
    v83 = v80 ? v78 : 0;
    if (v83)
    {
      v84 = swift_getObjectType(v83, v81);
      v85 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v85 + 24) = v82;
      swift_unknownObjectWeakInit(v85 + 16, v83);
      v86 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v86 + 16, v180);
      v87 = swift_allocObject(&unk_1004AF6E8, 32, 7);
      *(_QWORD *)(v87 + 16) = v86;
      *(_QWORD *)(v87 + 24) = v85;
      v88 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v82 + 72);
      swift_unknownObjectRetain(v73);
      v89 = v73;
      swift_retain();
      v90 = swift_retain();
      v88(sub_1000456D4, v87, v84, v82, v90);
      swift_release(v85);
      v91 = v86;
      v77 = v189;
      swift_release(v91);
      swift_release(v87);
      v92 = (objc_class *)type metadata accessor for BaseOperation();
      v195.receiver = v180;
      v195.super_class = v92;
      objc_msgSendSuper2(&v195, "addDependency:", v78);

      v73 = v183;
    }
  }
  v93 = (char *)v180;

  v94 = swift_allocObject(&unk_1004AF5D0, 24, 7);
  v95 = v184;
  swift_unknownObjectWeakInit(v94 + 16, v184);
  v96 = (uint64_t (**)(uint64_t))&v93[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v97 = *(_QWORD *)&v93[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v98 = *(_QWORD *)&v93[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v96 = sub_100150100;
  v96[1] = (uint64_t (*)(uint64_t))v94;
  sub_10002CA30(v97, v98);
  v99 = objc_opt_self(NSOperation);
  v100 = swift_dynamicCastObjCClass(v93, v99);
  if (v100)
  {
    v102 = v100;
    v103 = swift_getObjectType(v100, v101);
    v104 = swift_conformsToProtocol2(v103, &protocol descriptor for PodcastsOperation);
    v106 = v104 ? v104 : 0;
    v107 = v104 ? v102 : 0;
    if (v107)
    {
      v108 = swift_getObjectType(v107, v105);
      v109 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v109 + 24) = v106;
      swift_unknownObjectWeakInit(v109 + 16, v107);
      v110 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v110 + 16, v184);
      v111 = swift_allocObject(&unk_1004AF6C0, 32, 7);
      *(_QWORD *)(v111 + 16) = v110;
      *(_QWORD *)(v111 + 24) = v109;
      v112 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v106 + 72);
      swift_unknownObjectRetain(v93);
      v113 = v93;
      swift_retain();
      v114 = swift_retain();
      v112(sub_1000456D4, v111, v108, v106, v114);
      v73 = v183;
      swift_release(v109);
      v115 = v110;
      v77 = v189;
      swift_release(v115);
      swift_release(v111);
      v116 = (objc_class *)type metadata accessor for BaseOperation();
      v196.receiver = v184;
      v196.super_class = v116;
      objc_msgSendSuper2(&v196, "addDependency:", v102);

      v95 = v184;
    }
  }
  v117 = v95;

  v118 = swift_allocObject(&unk_1004AF5F8, 24, 7);
  swift_unknownObjectWeakInit(v118 + 16, v77);
  v119 = (uint64_t (**)(uint64_t))&v117[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v120 = *(_QWORD *)&v117[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v121 = *(_QWORD *)&v117[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v119 = sub_100151C20;
  v119[1] = (uint64_t (*)(uint64_t))v118;
  sub_10002CA30(v120, v121);
  v122 = objc_opt_self(NSOperation);
  v123 = swift_dynamicCastObjCClass(v117, v122);
  v125 = v93;
  if (v123)
  {
    v126 = v123;
    v127 = swift_getObjectType(v123, v124);
    v128 = swift_conformsToProtocol2(v127, &protocol descriptor for PodcastsOperation);
    v130 = v128 ? v128 : 0;
    v131 = v128 ? v126 : 0;
    if (v131)
    {
      v185 = swift_getObjectType(v131, v129);
      v132 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v132 + 24) = v130;
      swift_unknownObjectWeakInit(v132 + 16, v131);
      v133 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v133 + 16, v77);
      v134 = swift_allocObject(&unk_1004AF698, 32, 7);
      *(_QWORD *)(v134 + 16) = v133;
      *(_QWORD *)(v134 + 24) = v132;
      v135 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v130 + 72);
      swift_unknownObjectRetain(v117);
      v136 = v117;
      swift_retain();
      v137 = swift_retain();
      v135(sub_1000456D4, v134, v185, v130, v137);
      v73 = v183;
      swift_release(v132);
      v138 = v133;
      v125 = v93;
      swift_release(v138);
      v139 = v134;
      v77 = v189;
      swift_release(v139);
      v140 = (objc_class *)type metadata accessor for BaseOperation();
      v197.receiver = v189;
      v197.super_class = v140;
      objc_msgSendSuper2(&v197, "addDependency:", v126);

    }
  }
  v141 = v77;

  v142 = swift_allocObject(&unk_1004AF620, 24, 7);
  swift_unknownObjectWeakInit(v142 + 16, v193);
  v143 = (uint64_t (**)(uint64_t))&v141[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v144 = *(_QWORD *)&v141[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v145 = *(_QWORD *)&v141[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v143 = sub_100151C20;
  v143[1] = (uint64_t (*)(uint64_t))v142;
  sub_10002CA30(v144, v145);
  v146 = objc_opt_self(NSOperation);
  v147 = swift_dynamicCastObjCClass(v141, v146);
  if (v147)
  {
    v149 = v147;
    v150 = swift_getObjectType(v147, v148);
    v151 = swift_conformsToProtocol2(v150, &protocol descriptor for PodcastsOperation);
    if (v151)
      v153 = v151;
    else
      v153 = 0;
    if (v151)
      v154 = v149;
    else
      v154 = 0;
    if (v154)
    {
      v186 = swift_getObjectType(v154, v152);
      v155 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v155 + 24) = v153;
      swift_unknownObjectWeakInit(v155 + 16, v154);
      v190 = v117;
      v156 = v125;
      v157 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v157 + 16, v193);
      v158 = swift_allocObject(&unk_1004AF670, 32, 7);
      *(_QWORD *)(v158 + 16) = v157;
      *(_QWORD *)(v158 + 24) = v155;
      v159 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v153 + 72);
      swift_unknownObjectRetain(v141);
      v160 = v141;
      swift_retain();
      v161 = swift_retain();
      v159(sub_1000456D4, v158, v186, v153, v161);
      swift_release(v155);
      v162 = v157;
      v125 = v156;
      v117 = v190;
      swift_release(v162);
      swift_release(v158);
      v163 = (objc_class *)type metadata accessor for BaseOperation();
      v198.receiver = v193;
      v198.super_class = v163;
      objc_msgSendSuper2(&v198, "addDependency:", v149);

      v73 = v183;
    }
  }
  v164 = (char *)v193;

  v165 = swift_allocObject(&unk_1004AF648, 32, 7);
  *(_QWORD *)(v165 + 16) = a5;
  *(_QWORD *)(v165 + 24) = a6;
  v166 = (void (**)(uint64_t))&v164[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v167 = *(_QWORD *)&v164[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v168 = *(_QWORD *)&v164[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
  *v166 = sub_100151C58;
  v166[1] = (void (*)(uint64_t))v165;
  sub_10002CA20(a5, a6);
  sub_10002CA30(v167, v168);

  v169 = sub_10013E604();
  v170 = sub_10003F544((uint64_t *)&unk_100553780);
  v171 = swift_allocObject(v170, 80, 7);
  *(_OWORD *)(v171 + 16) = xmmword_1003CA1F0;
  *(_QWORD *)(v171 + 32) = v181;
  *(_QWORD *)(v171 + 40) = v73;
  *(_QWORD *)(v171 + 48) = v125;
  *(_QWORD *)(v171 + 56) = v117;
  *(_QWORD *)(v171 + 64) = v141;
  *(_QWORD *)(v171 + 72) = v164;
  v199 = v171;
  specialized Array._endMutation()(v171);
  v172 = v199;
  sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
  v173 = v181;
  v174 = v73;
  v175 = v125;
  v176 = v117;
  v177 = v141;
  v178 = v164;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v169, "addOperations:waitUntilFinished:", isa, 0, swift_bridgeObjectRelease(v172).n128_f64[0]);

}

uint64_t sub_10013F994(uint64_t a1, uint64_t (*a2)(_QWORD *, __n128), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v15;
  _QWORD v16[2];
  __int16 v17;

  v7 = swift_allocObject(&unk_1004AF7D8, 32, 7);
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = (_QWORD *)(a4 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  v9 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  if (v9)
  {
    v11 = v8[2];
    v10 = v8[3];
    v12 = v8[1];
    swift_retain();
    sub_100151B14(v9, v12, v11, v10);
    v13 = swift_unknownObjectRetain(v9);
    sub_100151B40(v13, v12, v11, v10);
    swift_retain();
    sub_100314528(v9, (void (*)(uint64_t, _QWORD, uint64_t))sub_1001520D4, v7);
    swift_unknownObjectRelease(v9);
    return swift_release_n(v7, 2);
  }
  else
  {
    swift_retain();
    v15 = swift_release(v7);
    v16[0] = 0;
    v16[1] = 0;
    v17 = 64;
    return a2(v16, v15);
  }
}

uint64_t sub_10013FA94(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD))
{
  return a4(a1, a2, a3);
}

void sub_10013FAB8(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10013FB10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  unsigned int v21;

  if (v3 == 2 && v1 == 1 && v2 == 0)
  {
    sub_10014F9CC(1, 0, 2);
    sub_10014F9CC(1, 0, 2);
    v14 = static os_log_type_t.default.getter();
    v15 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v16 = (void *)static OS_os_log.downloads.getter(v15);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v16, "Preflight check has been cancelled.", 35, 2, _swiftEmptyArrayStorage);

  }
  else
  {
    v6 = sub_10014F9CC(v1, v2, v3);
    v21 = static os_log_type_t.error.getter(v6);
    v7 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v20 = (void *)static OS_os_log.downloads.getter(v7);
    v8 = sub_10003F544(&qword_1005559A0);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_1003CA200;
    v10 = sub_10014FBF0();
    v11 = Error.localizedDescription.getter(&type metadata for PreflightError, v10);
    v13 = v12;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = sub_10003E198();
    *(_QWORD *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 40) = v13;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v20, "Download didn't pass preflight check, error: %{public}s", 55, 2, v9);

    swift_bridgeObjectRelease(v9);
    sub_10014E540(v1, v2, v3);
  }
  v17 = sub_10014FBF0();
  result = swift_allocError(&type metadata for PreflightError, v17, 0, 0);
  *(_QWORD *)v19 = v1;
  *(_QWORD *)(v19 + 8) = v2;
  *(_BYTE *)(v19 + 16) = v3;
  *(_QWORD *)v0 = result;
  *(_BYTE *)(v0 + 8) = 1;
  return result;
}

uint64_t sub_10013FE40@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  void *v28;
  unsigned int v29;

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  if (!v4)
    goto LABEL_4;
  v7 = (uint64_t (*)(uint64_t))v3[2];
  v6 = v3[3];
  v8 = v3[1];
  swift_retain_n(v6, 2);
  v9 = swift_unknownObjectRetain(v4);
  sub_100151B40(v9, v8, (uint64_t)v7, v6);
  v10 = v7(a1);
  v12 = v11;
  v14 = v13;
  v15 = ~(_BYTE)v13;
  swift_release(v6);
  if (v15)
  {
    v29 = static os_log_type_t.error.getter(v16);
    v17 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v28 = (void *)static OS_os_log.downloads.getter(v17);
    v18 = sub_10003F544(&qword_1005559A0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1003CA200;
    v20 = sub_10014FBF0();
    v21 = Error.localizedDescription.getter(&type metadata for PreflightError, v20);
    v22 = v10;
    v24 = v23;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_10003E198();
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v24;
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v28, "Download did pass take off check, error: %{public}s", 51, 2, v19);

    swift_bridgeObjectRelease(v19);
    sub_10014E540(v22, v12, v14);
    result = swift_allocError(&type metadata for PreflightError, v20, 0, 0);
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v12;
    *(_BYTE *)(v26 + 16) = v14;
    v27 = 1;
  }
  else
  {
LABEL_4:
    result = 0;
    v27 = 0;
  }
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v27;
  return result;
}

uint64_t sub_100140020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v13;

  v8 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v10 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(id *)(a5 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v10, sub_10014FD30, a5, v8);

  sub_10019358C((uint64_t)v10, a3, a4);
  return sub_10003F970((uint64_t)v10, type metadata accessor for DownloadJob);
}

void sub_100140100(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t (*)(uint64_t), _QWORD *, __n128);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __n128 v18;
  uint64_t v19;

  v8 = *(_QWORD *)(type metadata accessor for DownloadJob(0) - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin();
  v10 = sub_10003F544(&qword_100553408);
  __chkstk_darwin();
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(uint64_t (*)(uint64_t), _QWORD *, __n128))(a4
                                                                                 + OBJC_IVAR____TtC8Podcasts11JobPipeline_assetPrefetchBlock);
  if (v13)
  {
    v14 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Podcasts11JobPipeline_assetPrefetchBlock + 8);
    sub_10014FDF8(a1, (uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DownloadJob);
    v15 = *(unsigned __int8 *)(v8 + 80);
    v16 = (v15 + 40) & ~v15;
    v17 = (_QWORD *)swift_allocObject(&unk_1004AF7B0, v16 + v9, v15 | 7);
    v17[2] = a4;
    v17[3] = a2;
    v17[4] = a3;
    sub_10013BE30((uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v17 + v16, type metadata accessor for DownloadJob);
    sub_10002CA20((uint64_t)v13, v14);
    swift_retain();
    v18 = swift_retain();
    v13(sub_10015200C, v17, v18);
    sub_10002CA30((uint64_t)v13, v14);
    swift_release(v17);
  }
  else
  {
    sub_10014FDF8(a1, (uint64_t)v12, type metadata accessor for DownloadJob);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    a2(v12);
    sub_100007A28((uint64_t)v12, &qword_100553408);
  }
}

uint64_t sub_1001402AC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = sub_10003F544(&qword_100553408);
  __chkstk_darwin();
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (uint64_t *)((char *)&v16 - v10);
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    sub_10014E540(a1, 0, 1);
    v12 = sub_10014FBF0();
    v13 = swift_allocError(&type metadata for PreflightError, v12, 0, 0);
    *(_QWORD *)v14 = a1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 1;
    *v11 = v13;
    swift_storeEnumTagMultiPayload(v11, v8, 1);
    swift_errorRetain();
    a3(v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    sub_10014FDF8(a5, (uint64_t)&v16 - v10, type metadata accessor for DownloadJob);
    swift_storeEnumTagMultiPayload(v11, v8, 0);
    a3(v11);
  }
  return sub_100007A28((uint64_t)v11, &qword_100553408);
}

void sub_1001403F8(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  os_log_type_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  _BOOL4 v19;
  uint64_t *v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t (*v25)();
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t (*v43)();
  id v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t Strong;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t aBlock;
  _QWORD v76[2];
  void *v77;
  uint64_t (*v78)();
  uint64_t v79;
  uint64_t v80;

  v6 = v5;
  v66 = a4;
  v68 = a3;
  v70 = a5;
  v74 = type metadata accessor for DownloadJob(0);
  v72 = *(_QWORD *)(v74 - 8);
  v9 = *(_QWORD *)(v72 + 64);
  __chkstk_darwin();
  v71 = (uint64_t *)((char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v73 = (uint64_t)&v61 - v10;
  __chkstk_darwin();
  v12 = (char *)&v61 - v11;
  __chkstk_darwin();
  v14 = (char *)&v61 - v13;
  v15 = static os_log_type_t.default.getter();
  v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v17 = static OS_os_log.downloads.getter(v16);
  sub_10014FDF8(a1, (uint64_t)v14, type metadata accessor for DownloadJob);
  v69 = a1;
  sub_10014FDF8(a1, (uint64_t)v12, type metadata accessor for DownloadJob);
  v18 = v15;
  v19 = os_log_type_enabled(v17, v15);
  v20 = &qword_100552000;
  if (v19)
  {
    swift_retain_n(a2, 2);
    v21 = swift_slowAlloc(32, -1);
    v67 = swift_slowAlloc(96, -1);
    v80 = v67;
    *(_DWORD *)v21 = 136446722;
    v62 = v21 + 4;
    v22 = *(id *)(a2 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    v65 = v17;
    v23 = v22;
    v24 = sub_10003F544(&qword_100564DA0);
    OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_100152A34, a2, v24);
    v63 = v5;

    v64 = v18;
    v26 = v77;
    v25 = v78;
    sub_10003A834(&aBlock, (uint64_t)v77);
    v27 = (*((uint64_t (**)(void *, uint64_t (*)()))v25 + 7))(v26, v25);
    v29 = v28;
    sub_10003D380(&aBlock);
    aBlock = sub_10003D274(v27, v29, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v76, v62, v21 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v21 + 12) = 2080;
    v30 = (uint64_t *)&v14[*(int *)(v74 + 20)];
    v32 = *v30;
    v31 = v30[1];
    swift_bridgeObjectRetain(v31);
    aBlock = sub_10003D274(v32, v31, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v76, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease(v31);
    sub_10003F970((uint64_t)v14, type metadata accessor for DownloadJob);
    *(_WORD *)(v21 + 22) = 2080;
    v6 = v63;
    v33 = type metadata accessor for EpisodeMetadata(0);
    v34 = URL.absoluteString.getter(v33);
    v36 = v35;
    aBlock = sub_10003D274(v34, v35, &v80);
    v20 = &qword_100552000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v76, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease(v36);
    sub_10003F970((uint64_t)v12, type metadata accessor for DownloadJob);
    v37 = v65;
    _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v64, "Start download task %{public}s for episode %s at %s", (uint8_t *)v21, 0x20u);
    v38 = v67;
    swift_arrayDestroy(v67, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    sub_10003F970((uint64_t)v14, type metadata accessor for DownloadJob);
    sub_10003F970((uint64_t)v12, type metadata accessor for DownloadJob);
  }
  v39 = v20[500];
  v40 = *(id *)(a2 + v39);
  v41 = sub_10003F544(&qword_100564DA0);
  OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_100152A34, a2, v41);

  v42 = v77;
  v43 = v78;
  sub_10003A834(&aBlock, (uint64_t)v77);
  (*((void (**)(void *, uint64_t (*)()))v43 + 14))(v42, v43);
  sub_10003D380(&aBlock);
  v44 = *(id *)(a2 + v39);
  v45 = v71;
  v46 = v74;
  OS_dispatch_queue.sync<A>(execute:)(v71, sub_10014FD30, a2, v74);
  v67 = v6;

  v47 = v73;
  sub_10014FDF8((uint64_t)v45, v73, type metadata accessor for DownloadJob);
  v48 = v47 + *(int *)(v46 + 40);
  sub_10014FE3C(*(_QWORD *)v48, *(_QWORD *)(v48 + 8), *(_QWORD *)(v48 + 16), *(_QWORD *)(v48 + 24));
  *(_QWORD *)v48 = 0;
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v48 + 16) = 0;
  *(_QWORD *)(v48 + 24) = 2;
  *(_QWORD *)(v48 + 32) = 0;
  *(_QWORD *)(v48 + 40) = 0;
  *(_WORD *)(v48 + 48) = 0;
  sub_10003F970((uint64_t)v45, type metadata accessor for DownloadJob);
  v49 = *(void **)(a2 + v39);
  sub_10014FDF8(v47, (uint64_t)v45, type metadata accessor for DownloadJob);
  v50 = *(unsigned __int8 *)(v72 + 80);
  v51 = (v50 + 24) & ~v50;
  v52 = swift_allocObject(&unk_1004AF738, v51 + v9, v50 | 7);
  *(_QWORD *)(v52 + 16) = a2;
  sub_10013BE30((uint64_t)v45, v52 + v51, type metadata accessor for DownloadJob);
  v53 = swift_allocObject(&unk_1004AF760, 32, 7);
  *(_QWORD *)(v53 + 16) = sub_10014FE58;
  *(_QWORD *)(v53 + 24) = v52;
  v78 = sub_1001529CC;
  v79 = v53;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v76[0] = 1107296256;
  v76[1] = sub_100029B1C;
  v77 = &unk_1004AF778;
  v54 = _Block_copy(&aBlock);
  v55 = v79;
  swift_retain();
  v56 = v49;
  swift_retain();
  swift_release(v55);
  dispatch_sync(v56, v54);
  _Block_release(v54);

  sub_10003F970(v47, type metadata accessor for DownloadJob);
  LOBYTE(v44) = swift_isEscapingClosureAtFileLocation(v53, "", 81, 137, 30, 1);
  swift_release(v52);
  swift_release(v53);
  if ((v44 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    Strong = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC8Podcasts11JobPipeline_delegate);
    if (Strong)
    {
      v58 = Strong;
      sub_10032D934(a2);
      Strong = swift_unknownObjectRelease(v58);
    }
    if (v68)
      v68(Strong);
    v59 = v70;
    sub_10014FDF8(v69, v70, type metadata accessor for DownloadJob);
    v60 = sub_10003F544(&qword_100553408);
    swift_storeEnumTagMultiPayload(v59, v60, 0);
  }
}

void sub_100140A60(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[8];
  uint64_t v17[2];
  char v18;
  uint64_t v19;

  v19 = a1;
  swift_errorRetain();
  v4 = sub_10003F544((uint64_t *)&unk_10055A340);
  v5 = swift_dynamicCast(v17, &v19, v4, &type metadata for PreflightError, 6);
  if (!(_DWORD)v5)
  {
    v7 = static os_log_type_t.error.getter(v5);
    v8 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v9 = (void *)static OS_os_log.downloads.getter(v8);
    v10 = sub_10003F544(&qword_1005559A0);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1003CA200;
    swift_getErrorValue(a1, v16, v15);
    v12 = Error.localizedDescription.getter(v15[1], v15[2]);
    v14 = v13;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_10003E198();
    *(_QWORD *)(v11 + 32) = v12;
    *(_QWORD *)(v11 + 40) = v14;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v9, "Failed to start pipeline due to error: %{public}s", 49, 2, v11);

    swift_bridgeObjectRelease(v11);
    if (!a2)
      return;
    goto LABEL_5;
  }
  v6 = sub_10014F9F0(v17[0], v17[1], v18);
  if (a2)
LABEL_5:
    a2(v6);
}

uint64_t sub_100140BBC()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  v2 = static os_log_type_t.default.getter();
  v3 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v4 = static OS_os_log.downloads.getter(v3);
  if (os_log_type_enabled(v4, v2))
  {
    swift_retain_n(v1, 2);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v27 = v6;
    v7 = *(id *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    v8 = sub_10003F544(&qword_100564DA0);
    OS_dispatch_queue.sync<A>(execute:)(&v28, sub_100152A34, v1, v8);

    v10 = v30;
    v9 = v31;
    sub_10003A834(&v28, v30);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v10, v9);
    v13 = v12;
    sub_10003D380(&v28);
    v28 = sub_10003D274(v11, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v5 + 4, v5 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v4, v2, "Cancel download task %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v14 = (_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  if (v15)
  {
    v16 = v14[2];
    v17 = v14[3];
    v18 = v14[1];
    sub_100151B14(*(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck), v18, v16, v17);
    v19 = swift_unknownObjectRetain(v15);
    sub_100151B40(v19, v18, v16, v17);
    v20 = static os_log_type_t.default.getter();
    v21 = (void *)static OS_os_log.downloads.getter(v20);
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Cancel preflight validator task if running.", 43, 2, _swiftEmptyArrayStorage);

    objc_msgSend(*(id *)(v15 + 56), "cancel");
    swift_unknownObjectRelease(v15);
  }
  v22 = *(id *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  v23 = sub_10003F544(&qword_100564DA0);
  OS_dispatch_queue.sync<A>(execute:)(&v28, sub_100152A34, v1, v23);

  v24 = v30;
  v25 = v31;
  sub_10003A834(&v28, v30);
  (*(void (**)(uint64_t, uint64_t))(v25 + 120))(v24, v25);
  return sub_10003D380(&v28);
}

uint64_t sub_100140EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t (*v24)();
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  os_log_t v34;
  void *v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t (*v41)();
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t (*v49)();
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t v63;
  id v64;
  id v65;
  void *v66;
  uint64_t (*v67)();
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  const char *v76;
  uint64_t v77;
  os_log_type_t v78;
  id v79;
  id v80;
  void *v81;
  uint64_t (*v82)();
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  char *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t Strong;
  uint64_t v106;
  id v107;
  void *v108;
  uint64_t (*v109)();
  void *v110;
  id v111;
  char **v112;
  uint64_t v113;
  uint64_t v114;
  os_log_type_t v115;
  NSObject *v116;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  uint64_t (*v122)();
  void *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  os_log_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  void *v137;
  uint64_t (*v138)();
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  id v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  id v148;
  id v150;
  id v151;
  id v152;
  id v153;
  uint64_t v154;
  void *v155;
  void *v156;
  id v157;
  uint64_t (*v158)();
  uint64_t (*v159)();
  uint64_t v160;
  char v161;
  _QWORD *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  NSObject *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  os_log_t v174;
  os_log_t v175;
  void *v176;
  id v177;
  _QWORD *v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  id v183[5];
  uint64_t v184;
  _QWORD v185[3];
  uint64_t v186;
  uint64_t v187;
  id aBlock;
  uint64_t v189;
  uint64_t (*v190)(uint64_t);
  void *v191;
  uint64_t (*v192)();
  uint64_t v193;
  char v194;

  v1 = v0;
  v182 = type metadata accessor for DownloadJob(0);
  v181 = *(_QWORD *)(v182 - 8);
  v2 = *(_QWORD *)(v181 + 64);
  v3 = __chkstk_darwin(v182);
  v4 = (uint64_t *)((char *)&v171 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v171 - v5);
  v7 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v8 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  v9 = sub_10003F544(&qword_100564DA0);
  OS_dispatch_queue.sync<A>(execute:)(v185, sub_100152A34, v1, v9);

  v10 = v186;
  v11 = v187;
  sub_10003A834(v185, v186);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  switch(v12)
  {
    case 0:
      v13 = *(id *)(v1 + v7);
      OS_dispatch_queue.sync<A>(execute:)((id *)&aBlock, sub_100152A34, v1, v9);

      v14 = sub_100005EC8(0, (unint64_t *)&unk_1005533E0, AVAggregateAssetDownloadTask_ptr);
      if (swift_dynamicCast(v183, (id *)&aBlock, v9, v14, 6)
        || (v15 = *(id *)(v1 + v7),
            OS_dispatch_queue.sync<A>(execute:)((id *)&aBlock, sub_100152A34, v1, v9),
            v15,
            v16 = sub_100005EC8(0, (unint64_t *)&unk_100558610, AVAssetDownloadTask_ptr),
            swift_dynamicCast(v183, (id *)&aBlock, v9, v16, 6)))
      {

        v179 = 0;
        goto LABEL_5;
      }
      v180 = v7;
      v107 = *(id *)(v1 + v7);
      OS_dispatch_queue.sync<A>(execute:)((id *)&aBlock, sub_100152A34, v1, v9);

      v108 = v191;
      v109 = v192;
      sub_10003A834((id *)&aBlock, (uint64_t)v191);
      v110 = (void *)(*((uint64_t (**)(void *, uint64_t (*)()))v109 + 2))(v108, v109);
      sub_10003D380((id *)&aBlock);
      v111 = v110;
      v112 = &selRef_setEpisodeFetchLimit_;
      v113 = (uint64_t)objc_msgSend(v111, "completedUnitCount");
      v179 = v110;
      if (v113 < 1 || (v114 = (uint64_t)objc_msgSend(v111, "totalUnitCount"), v114 < 1))
      {

        v7 = v180;
LABEL_5:
        v18 = static os_log_type_t.default.getter(v17);
        sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
        v19 = static OS_os_log.downloads.getter();
        swift_retain_n(v1, 2);
        if (os_log_type_enabled(v19, v18))
        {
          swift_retain_n(v1, 2);
          v20 = swift_slowAlloc(22, -1);
          LODWORD(v177) = v18;
          v21 = v20;
          v176 = (void *)swift_slowAlloc(64, -1);
          v183[0] = v176;
          *(_DWORD *)v21 = 136446466;
          v173 = (uint64_t *)(v21 + 4);
          v22 = *(id *)(v1 + v7);
          v175 = v19;
          v23 = v22;
          OS_dispatch_queue.sync<A>(execute:)((id *)&aBlock, sub_100152A34, v1, v9);

          v180 = v7;
          v25 = v191;
          v24 = v192;
          sub_10003A834((id *)&aBlock, (uint64_t)v191);
          v26 = (*((uint64_t (**)(void *, uint64_t (*)()))v24 + 7))(v25, v24);
          v28 = v27;
          sub_10003D380((id *)&aBlock);
          aBlock = sub_10003D274(v26, v28, (uint64_t *)v183);
          v174 = (os_log_t)&v189;
          UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v173, v21 + 12);
          swift_release_n(v1, 2);
          swift_bridgeObjectRelease(v28);
          *(_WORD *)(v21 + 12) = 2082;
          v29 = *(id *)(v1 + v180);
          v30 = v182;
          OS_dispatch_queue.sync<A>(execute:)(v6, sub_10014FD30, v1, v182);

          v31 = (_QWORD *)((char *)v6 + *(int *)(v30 + 20));
          v32 = *v31;
          v33 = v31[1];
          swift_bridgeObjectRetain(v33);
          sub_10003F970((uint64_t)v6, type metadata accessor for DownloadJob);
          aBlock = sub_10003D274(v32, v33, (uint64_t *)v183);
          v7 = v180;
          UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, v174, v21 + 14, v21 + 22);
          swift_release_n(v1, 2);
          swift_bridgeObjectRelease(v33);
          v34 = v175;
          _os_log_impl((void *)&_mh_execute_header, v175, (os_log_type_t)v177, "Update task state to running, download progress is not determined %{public}s episode: %{public}s", (uint8_t *)v21, 0x16u);
          v35 = v176;
          swift_arrayDestroy(v176, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v35, -1, -1);
          swift_slowDealloc(v21, -1, -1);

        }
        else
        {
          swift_release_n(v1, 2);

          v30 = v182;
        }
        v94 = v181;
        v95 = *(id *)(v1 + v7);
        OS_dispatch_queue.sync<A>(execute:)(v4, sub_10014FD30, v1, v30);

        sub_10014FDF8((uint64_t)v4, (uint64_t)v6, type metadata accessor for DownloadJob);
        v96 = (char *)v6 + *(int *)(v30 + 40);
        sub_10014FE3C(*(_QWORD *)v96, *((_QWORD *)v96 + 1), *((_QWORD *)v96 + 2), *((_QWORD *)v96 + 3));
        *(_QWORD *)v96 = 0;
        *((_QWORD *)v96 + 1) = 0;
        *((_QWORD *)v96 + 2) = 0;
        *((_QWORD *)v96 + 3) = 2;
        *((_QWORD *)v96 + 4) = 0;
        *((_QWORD *)v96 + 5) = 0;
        *((_WORD *)v96 + 24) = 0;
        sub_10003F970((uint64_t)v4, type metadata accessor for DownloadJob);
        v97 = *(void **)(v1 + v7);
        sub_10014FDF8((uint64_t)v6, (uint64_t)v4, type metadata accessor for DownloadJob);
        v98 = *(unsigned __int8 *)(v94 + 80);
        v99 = (v98 + 24) & ~v98;
        v100 = swift_allocObject(&unk_1004AF468, v99 + v2, v98 | 7);
        *(_QWORD *)(v100 + 16) = v1;
        sub_10013BE30((uint64_t)v4, v100 + v99, type metadata accessor for DownloadJob);
        v101 = swift_allocObject(&unk_1004AF490, 32, 7);
        *(_QWORD *)(v101 + 16) = sub_10014FE58;
        *(_QWORD *)(v101 + 24) = v100;
        v192 = sub_1001529CC;
        v193 = v101;
        aBlock = (uint64_t)_NSConcreteStackBlock;
        v189 = 1107296256;
        v190 = sub_100029B1C;
        v191 = &unk_1004AF4A8;
        v102 = _Block_copy(&aBlock);
        v103 = v193;
        swift_retain(v1);
        v104 = v97;
        swift_retain(v101);
        swift_release(v103);
        dispatch_sync(v104, v102);
        _Block_release(v102);

        sub_10003F970((uint64_t)v6, type metadata accessor for DownloadJob);
        LOBYTE(v95) = swift_isEscapingClosureAtFileLocation(v101, "", 81, 137, 30, 1);
        swift_release(v100);
        swift_release(v101);
        if ((v95 & 1) == 0)
          goto LABEL_22;
LABEL_41:
        __break(1u);
        JUMPOUT(0x1001424E8);
      }
      v177 = v111;
      v115 = static os_log_type_t.default.getter(v114);
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v116 = static OS_os_log.downloads.getter();
      swift_retain_n(v1, 2);
      v117 = os_log_type_enabled(v116, v115);
      v178 = v6;
      if (v117)
      {
        swift_retain_n(v1, 2);
        v118 = swift_slowAlloc(22, -1);
        v176 = (void *)swift_slowAlloc(64, -1);
        v183[0] = v176;
        *(_DWORD *)v118 = 136446466;
        v172 = v118 + 4;
        LODWORD(v175) = v115;
        v119 = v180;
        v120 = *(id *)(v1 + v180);
        v174 = v116;
        v121 = v120;
        OS_dispatch_queue.sync<A>(execute:)((id *)&aBlock, sub_100152A34, v1, v9);

        v123 = v191;
        v122 = v192;
        sub_10003A834((id *)&aBlock, (uint64_t)v191);
        v124 = (*((uint64_t (**)(void *, uint64_t (*)()))v122 + 7))(v123, v122);
        v126 = v125;
        sub_10003D380((id *)&aBlock);
        aBlock = sub_10003D274(v124, v126, (uint64_t *)v183);
        v173 = &v189;
        UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v172, v118 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v126);
        *(_WORD *)(v118 + 12) = 2082;
        v172 = v118 + 14;
        v127 = *(id *)(v1 + v119);
        v128 = v182;
        OS_dispatch_queue.sync<A>(execute:)(v6, sub_10014FD30, v1, v182);

        v129 = (_QWORD *)((char *)v6 + *(int *)(v128 + 20));
        v130 = *v129;
        v131 = v129[1];
        swift_bridgeObjectRetain(v131);
        sub_10003F970((uint64_t)v6, type metadata accessor for DownloadJob);
        aBlock = sub_10003D274(v130, v131, (uint64_t *)v183);
        UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, v173, v172, v118 + 22);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v131);
        v132 = v174;
        _os_log_impl((void *)&_mh_execute_header, v174, (os_log_type_t)v175, "Update task state and set current progress %{public}s episode: %{public}s", (uint8_t *)v118, 0x16u);
        v133 = v176;
        swift_arrayDestroy(v176, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v133, -1, -1);
        v134 = v118;
        v112 = &selRef_setEpisodeFetchLimit_;
        swift_slowDealloc(v134, -1, -1);

      }
      else
      {
        swift_release_n(v1, 2);

        v128 = v182;
      }
      v150 = *(id *)(v1 + v180);
      OS_dispatch_queue.sync<A>(execute:)(v4, sub_10014FD30, v1, v128);

      v151 = v177;
      v152 = objc_msgSend(v177, "totalUnitCount");
      v153 = objc_msgSend(v151, v112[221]);
      v154 = sub_1001DB104();
      v156 = v155;
      v157 = objc_msgSend(v151, "fractionCompleted");
      v159 = v158;
      v160 = NSProgress.estimatedTimeRemaining.getter(v157);
      aBlock = (uint64_t)v152;
      v189 = (uint64_t)v153;
      v190 = (uint64_t (*)(uint64_t))v154;
      v191 = v156;
      v192 = v159;
      v193 = v160;
      v194 = v161 & 1;
      v162 = v178;
      sub_1001D7F50((uint64_t)&aBlock, 0, (uint64_t)v178);
      swift_bridgeObjectRelease(v156);
      sub_10003F970((uint64_t)v4, type metadata accessor for DownloadJob);
      v163 = *(void **)(v1 + v180);
      sub_10014FDF8((uint64_t)v162, (uint64_t)v4, type metadata accessor for DownloadJob);
      v164 = *(unsigned __int8 *)(v181 + 80);
      v165 = (v164 + 24) & ~v164;
      v166 = swift_allocObject(&unk_1004AF4E0, v165 + v2, v164 | 7);
      *(_QWORD *)(v166 + 16) = v1;
      sub_10013BE30((uint64_t)v4, v166 + v165, type metadata accessor for DownloadJob);
      v167 = swift_allocObject(&unk_1004AF508, 32, 7);
      *(_QWORD *)(v167 + 16) = sub_10014FE58;
      *(_QWORD *)(v167 + 24) = v166;
      v183[4] = sub_1001529CC;
      v184 = v167;
      v183[0] = _NSConcreteStackBlock;
      v183[1] = (id)1107296256;
      v183[2] = sub_100029B1C;
      v183[3] = &unk_1004AF520;
      v168 = _Block_copy(v183);
      v169 = v184;
      swift_retain(v1);
      v170 = v163;
      swift_retain(v167);
      swift_release(v169);
      dispatch_sync(v170, v168);
      _Block_release(v168);

      sub_10003F970((uint64_t)v162, type metadata accessor for DownloadJob);
      LOBYTE(v150) = swift_isEscapingClosureAtFileLocation(v167, "", 81, 137, 30, 1);

      swift_release(v166);
      swift_release(v167);
      if ((v150 & 1) != 0)
      {
        __break(1u);
        goto LABEL_41;
      }
LABEL_22:
      Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_delegate);
      if (Strong)
      {
        v106 = Strong;
        sub_10032D934(v1);
        swift_unknownObjectRelease(v106);
      }

      return sub_10003D380(v185);
    case 1:
      v45 = static os_log_type_t.default.getter(v12);
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v37 = static OS_os_log.downloads.getter();
      swift_retain_n(v1, 2);
      if (!os_log_type_enabled(v37, v45))
        goto LABEL_17;
      swift_retain_n(v1, 2);
      v46 = swift_slowAlloc(22, -1);
      v181 = swift_slowAlloc(64, -1);
      v183[0] = (id)v181;
      *(_DWORD *)v46 = 136446466;
      v47 = *(id *)(v1 + v7);
      LODWORD(v179) = v45;
      v48 = v47;
      OS_dispatch_queue.sync<A>(execute:)((id *)&aBlock, sub_100152A34, v1, v9);

      v50 = v191;
      v49 = v192;
      sub_10003A834((id *)&aBlock, (uint64_t)v191);
      v51 = (*((uint64_t (**)(void *, uint64_t (*)()))v49 + 7))(v50, v49);
      v53 = v52;
      sub_10003D380((id *)&aBlock);
      aBlock = sub_10003D274(v51, v53, (uint64_t *)v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v46 + 4, v46 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v53);
      *(_WORD *)(v46 + 12) = 2082;
      v54 = *(id *)(v1 + v7);
      v55 = v182;
      OS_dispatch_queue.sync<A>(execute:)(v6, sub_10014FD30, v1, v182);

      v56 = (_QWORD *)((char *)v6 + *(int *)(v55 + 20));
      v57 = *v56;
      v58 = v56[1];
      swift_bridgeObjectRetain(v58);
      sub_10003F970((uint64_t)v6, type metadata accessor for DownloadJob);
      aBlock = sub_10003D274(v57, v58, (uint64_t *)v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v46 + 14, v46 + 22);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v179, "Resuming suspended task %{public}s episode: %{public}s", (uint8_t *)v46, 0x16u);
      v59 = v181;
      swift_arrayDestroy(v181, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      v60 = v46;
      goto LABEL_35;
    case 2:
      v61 = v7;
      v62 = static os_log_type_t.default.getter(v12);
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v37 = static OS_os_log.downloads.getter();
      swift_retain_n(v1, 2);
      if (!os_log_type_enabled(v37, v62))
        goto LABEL_17;
      swift_retain_n(v1, 2);
      v63 = swift_slowAlloc(22, -1);
      v181 = swift_slowAlloc(64, -1);
      v183[0] = (id)v181;
      *(_DWORD *)v63 = 136446466;
      v177 = (id)(v63 + 4);
      v64 = *(id *)(v1 + v61);
      LODWORD(v179) = v62;
      v65 = v64;
      OS_dispatch_queue.sync<A>(execute:)((id *)&aBlock, sub_100152A34, v1, v9);

      v66 = v191;
      v67 = v192;
      sub_10003A834((id *)&aBlock, (uint64_t)v191);
      v68 = (*((uint64_t (**)(void *, uint64_t (*)()))v67 + 7))(v66, v67);
      v70 = v69;
      sub_10003D380((id *)&aBlock);
      aBlock = sub_10003D274(v68, v70, (uint64_t *)v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v177, v63 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v70);
      *(_WORD *)(v63 + 12) = 2082;
      v71 = *(id *)(v1 + v61);
      v72 = v182;
      OS_dispatch_queue.sync<A>(execute:)(v6, sub_10014FD30, v1, v182);

      v73 = (_QWORD *)((char *)v6 + *(int *)(v72 + 20));
      v74 = *v73;
      v75 = v73[1];
      swift_bridgeObjectRetain(v75);
      sub_10003F970((uint64_t)v6, type metadata accessor for DownloadJob);
      aBlock = sub_10003D274(v74, v75, (uint64_t *)v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v63 + 14, v63 + 22);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v75);
      v76 = "Attempt to resume task which is being canceled, doing nothing %{public}s episode: %{public}s";
      goto LABEL_16;
    case 3:
      v77 = v7;
      v78 = static os_log_type_t.error.getter(v12);
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v37 = static OS_os_log.downloads.getter();
      swift_retain_n(v1, 2);
      if (!os_log_type_enabled(v37, v78))
      {
LABEL_17:
        v92 = v1;
        v93 = 2;
        goto LABEL_19;
      }
      swift_retain_n(v1, 2);
      v63 = swift_slowAlloc(22, -1);
      v181 = swift_slowAlloc(64, -1);
      v183[0] = (id)v181;
      *(_DWORD *)v63 = 136446466;
      v177 = (id)(v63 + 4);
      v79 = *(id *)(v1 + v77);
      LODWORD(v179) = v78;
      v80 = v79;
      OS_dispatch_queue.sync<A>(execute:)((id *)&aBlock, sub_100152A34, v1, v9);

      v81 = v191;
      v82 = v192;
      sub_10003A834((id *)&aBlock, (uint64_t)v191);
      v83 = (*((uint64_t (**)(void *, uint64_t (*)()))v82 + 7))(v81, v82);
      v85 = v84;
      sub_10003D380((id *)&aBlock);
      aBlock = sub_10003D274(v83, v85, (uint64_t *)v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v177, v63 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v85);
      *(_WORD *)(v63 + 12) = 2082;
      v86 = *(id *)(v1 + v77);
      v87 = v182;
      OS_dispatch_queue.sync<A>(execute:)(v6, sub_10014FD30, v1, v182);

      v88 = (_QWORD *)((char *)v6 + *(int *)(v87 + 20));
      v89 = *v88;
      v90 = v88[1];
      swift_bridgeObjectRetain(v90);
      sub_10003F970((uint64_t)v6, type metadata accessor for DownloadJob);
      aBlock = sub_10003D274(v89, v90, (uint64_t *)v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v63 + 14, v63 + 22);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v90);
      v76 = "Attempt to resume task, which has been completed already %{public}s episode: %{public}s";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v179, v76, (uint8_t *)v63, 0x16u);
      v91 = v181;
      swift_arrayDestroy(v181, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1, -1);
      v60 = v63;
      goto LABEL_35;
    default:
      v36 = static os_log_type_t.default.getter(v12);
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v37 = static OS_os_log.downloads.getter();
      swift_retain_n(v1, 4);
      if (os_log_type_enabled(v37, (os_log_type_t)v36))
      {
        LODWORD(v181) = v36;
        swift_retain_n(v1, 2);
        v38 = swift_slowAlloc(32, -1);
        v179 = (id)swift_slowAlloc(96, -1);
        v183[0] = v179;
        *(_DWORD *)v38 = 136446722;
        v180 = v7;
        v39 = *(id *)(v1 + v7);
        OS_dispatch_queue.sync<A>(execute:)((id *)&aBlock, sub_100152A34, v1, v9);

        v40 = v191;
        v41 = v192;
        sub_10003A834((id *)&aBlock, (uint64_t)v191);
        v42 = (*((uint64_t (**)(void *, uint64_t (*)()))v41 + 1))(v40, v41);
        sub_10003D380((id *)&aBlock);
        v178 = v6;
        v43 = 0xE900000000000067;
        v44 = 0x6E696C65636E6163;
        switch(v42)
        {
          case 0:
            v43 = 0xE700000000000000;
            v44 = 0x676E696E6E7572;
            break;
          case 1:
            v44 = 0x65646E6570737573;
            goto LABEL_33;
          case 2:
            break;
          case 3:
            v44 = 0x6574656C706D6F63;
LABEL_33:
            v43 = 0xE900000000000064;
            break;
          default:
            v43 = 0xE700000000000000;
            v44 = 0x6E776F6E6B6E75;
            break;
        }
        aBlock = sub_10003D274(v44, v43, (uint64_t *)v183);
        UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v38 + 4, v38 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v43);
        *(_WORD *)(v38 + 12) = 2082;
        v135 = v180;
        v136 = *(id *)(v1 + v180);
        OS_dispatch_queue.sync<A>(execute:)((id *)&aBlock, sub_100152A34, v1, v9);

        v137 = v191;
        v138 = v192;
        sub_10003A834((id *)&aBlock, (uint64_t)v191);
        v139 = (*((uint64_t (**)(void *, uint64_t (*)()))v138 + 7))(v137, v138);
        v141 = v140;
        sub_10003D380((id *)&aBlock);
        aBlock = sub_10003D274(v139, v141, (uint64_t *)v183);
        UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v38 + 14, v38 + 22);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v141);
        *(_WORD *)(v38 + 22) = 2082;
        v142 = *(id *)(v1 + v135);
        v143 = v178;
        v144 = v182;
        OS_dispatch_queue.sync<A>(execute:)(v178, sub_10014FD30, v1, v182);

        v145 = (_QWORD *)((char *)v143 + *(int *)(v144 + 20));
        v146 = *v145;
        v147 = v145[1];
        swift_bridgeObjectRetain(v147);
        sub_10003F970((uint64_t)v143, type metadata accessor for DownloadJob);
        aBlock = sub_10003D274(v146, v147, (uint64_t *)v183);
        UnsafeMutableRawBufferPointer.copyMemory(from:)((id *)&aBlock, &v189, v38 + 24, v38 + 32);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v147);
        _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v181, "Not resuming task, which is in state: %{public}s task: %{public}s episode: %{public}s", (uint8_t *)v38, 0x20u);
        v148 = v179;
        swift_arrayDestroy(v179, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v148, -1, -1);
        v60 = v38;
LABEL_35:
        swift_slowDealloc(v60, -1, -1);
      }
      else
      {
        v92 = v1;
        v93 = 4;
LABEL_19:
        swift_release_n(v92, v93);
      }

      return sub_10003D380(v185);
  }
}

void sub_100142508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  v4 = sub_10003F544(&qword_100564DA0);
  OS_dispatch_queue.sync<A>(execute:)(&v23, sub_100152A34, v1, v4);

  v5 = v25;
  v6 = v26;
  sub_10003A834(&v23, v25);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  v8 = sub_10003D380(&v23);
  if (v7 == 1)
  {
    sub_100142AE0();
  }
  else if (v7)
  {
    v9 = static os_log_type_t.error.getter(v8);
    v10 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v11 = static OS_os_log.downloads.getter(v10);
    if (os_log_type_enabled(v11, v9))
    {
      swift_retain_n(v1, 2);
      v12 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(64, -1);
      v22[0] = v21;
      *(_DWORD *)v12 = 136446466;
      v13 = *(id *)(v1 + v2);
      OS_dispatch_queue.sync<A>(execute:)(&v23, sub_100152A34, v1, v4);

      v14 = v25;
      v15 = v26;
      sub_10003A834(&v23, v25);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 56))(v14, v15);
      v18 = v17;
      sub_10003D380(&v23);
      v23 = sub_10003D274(v16, v18, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v12 + 4, v12 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v12 + 12) = 2082;
      if (v7 == 2)
      {
        v20 = 0xE900000000000067;
        v19 = 0x6E696C65636E6163;
      }
      else if (v7 == 3)
      {
        v19 = 0x6574656C706D6F63;
        v20 = 0xE900000000000064;
      }
      else
      {
        v20 = 0xE700000000000000;
        v19 = 0x6E776F6E6B6E75;
      }
      v23 = sub_10003D274(v19, v20, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v11, v9, "Invalid state. Attempt to pause or resume task %{public}s) which is in state: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

  }
  else
  {
    sub_1001427F4();
  }
}

uint64_t sub_1001427F4()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = static os_log_type_t.default.getter();
  v3 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v4 = static OS_os_log.downloads.getter(v3);
  if (os_log_type_enabled(v4, v2))
  {
    swift_retain_n(v0, 2);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (void *)swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v25[0] = v6;
    v7 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    v8 = sub_10003F544(&qword_100564DA0);
    OS_dispatch_queue.sync<A>(execute:)(&v26, sub_100152A34, v1, v8);

    v10 = v28;
    v9 = v29;
    sub_10003A834(&v26, v28);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v10, v9);
    v13 = v12;
    sub_10003D380(&v26);
    v26 = sub_10003D274(v11, v13, (uint64_t *)v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v5 + 4, v5 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v4, v2, "Pause download task %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v14 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v15 = *(id *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  v16 = sub_10003F544(&qword_100564DA0);
  OS_dispatch_queue.sync<A>(execute:)(&v26, sub_100152A34, v1, v16);

  v17 = sub_100005EC8(0, &qword_100558610, AVAssetDownloadTask_ptr);
  if (swift_dynamicCast(v25, &v26, v16, v17, 6))
  {

    v18 = *(id *)(v1 + v14);
    OS_dispatch_queue.sync<A>(execute:)(&v26, sub_100152A34, v1, v16);

    v19 = v28;
    v20 = v29;
    sub_10003A834(&v26, v28);
    (*(void (**)(uint64_t, uint64_t))(v20 + 120))(v19, v20);
  }
  else
  {
    v21 = *(id *)(v1 + v14);
    OS_dispatch_queue.sync<A>(execute:)(&v26, sub_100152A34, v1, v16);

    v22 = v28;
    v23 = v29;
    sub_10003A834(&v26, v28);
    (*(void (**)(uint64_t, uint64_t))(v23 + 128))(v22, v23);
  }
  return sub_10003D380(&v26);
}

void sub_100142AE0()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = static os_log_type_t.default.getter();
  v3 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v4 = static OS_os_log.downloads.getter(v3);
  if (os_log_type_enabled(v4, v2))
  {
    swift_retain_n(v0, 2);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (void *)swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v21[0] = v6;
    v7 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    v8 = sub_10003F544(&qword_100564DA0);
    OS_dispatch_queue.sync<A>(execute:)(&v22, sub_100152A34, v1, v8);

    v10 = v24;
    v9 = v25;
    sub_10003A834(&v22, v24);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v10, v9);
    v13 = v12;
    sub_10003D380(&v22);
    v22 = sub_10003D274(v11, v13, (uint64_t *)v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v5 + 4, v5 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v4, v2, "Resume download task %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v14 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v15 = *(id *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  v16 = sub_10003F544(&qword_100564DA0);
  OS_dispatch_queue.sync<A>(execute:)(&v22, sub_100152A34, v1, v16);

  v17 = sub_100005EC8(0, &qword_100558610, AVAssetDownloadTask_ptr);
  if (swift_dynamicCast(v21, &v22, v16, v17, 6))
  {

  }
  else
  {
    v18 = *(id *)(v1 + v14);
    OS_dispatch_queue.sync<A>(execute:)(&v22, sub_100152A34, v1, v16);

    v19 = v24;
    v20 = v25;
    sub_10003A834(&v22, v24);
    (*(void (**)(uint64_t, uint64_t))(v20 + 112))(v19, v20);
    sub_10003D380(&v22);
  }
}

uint64_t sub_100142D90(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;

  v8 = v7;
  v62 = a4;
  v63 = a1;
  v58 = a3;
  v57 = a2;
  v12 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v12);
  v14 = (void **)((char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v55 - v20;
  v56 = static os_log_type_t.default.getter(v19);
  v22 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v23 = static OS_os_log.downloads.getter(v22);
  v24 = sub_10003F544(&qword_1005559A0);
  v25 = swift_allocObject(v24, 232, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1003CA210;
  v60 = a7;
  v61 = a5;
  v59 = a6;
  v55 = (void *)v23;
  if (!a5)
    goto LABEL_7;
  v26 = objc_msgSend(a5, "URL");
  if (v26)
  {
    v27 = v26;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v28 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v18, 0, 1, v28);
  }
  else
  {
    v28 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v18, 1, 1, v28);
  }
  sub_10003DC78((uint64_t)v18, (uint64_t)v21, (uint64_t *)&unk_100553DC0);
  type metadata accessor for URL(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v21, 1, v28);
  if ((_DWORD)v30 == 1)
  {
    sub_100007A28((uint64_t)v21, (uint64_t *)&unk_100553DC0);
LABEL_7:
    v31 = 0;
    v32 = 0;
    goto LABEL_9;
  }
  v31 = URL.absoluteString.getter(v30);
  v32 = v33;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v28);
LABEL_9:
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  v34 = sub_10003E198();
  v35 = v34;
  *(_QWORD *)(v25 + 64) = v34;
  if (v32)
    v36 = v31;
  else
    v36 = 0;
  v37 = 0xE000000000000000;
  if (v32)
    v37 = v32;
  *(_QWORD *)(v25 + 32) = v36;
  *(_QWORD *)(v25 + 40) = v37;
  v38 = URL.absoluteString.getter(v34);
  *(_QWORD *)(v25 + 96) = &type metadata for String;
  *(_QWORD *)(v25 + 104) = v35;
  *(_QWORD *)(v25 + 72) = v38;
  *(_QWORD *)(v25 + 80) = v39;
  *(_QWORD *)(v25 + 136) = &type metadata for Int64;
  *(_QWORD *)(v25 + 144) = &protocol witness table for Int64;
  *(_QWORD *)(v25 + 112) = v62;
  v40 = sub_1001431C0();
  *(_QWORD *)(v25 + 176) = &type metadata for UInt64;
  *(_QWORD *)(v25 + 184) = &protocol witness table for UInt64;
  if ((v41 & 1) != 0)
    v40 = 0;
  *(_QWORD *)(v25 + 152) = v40;
  v42 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v43 = *(id *)(v8 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v14, sub_10014FD30, v8, v12);

  v44 = (_QWORD *)((char *)v14 + *(int *)(v12 + 20));
  v46 = *v44;
  v45 = v44[1];
  swift_bridgeObjectRetain(v45);
  sub_10003F970((uint64_t)v14, type metadata accessor for DownloadJob);
  *(_QWORD *)(v25 + 216) = &type metadata for String;
  *(_QWORD *)(v25 + 224) = v35;
  *(_QWORD *)(v25 + 192) = v46;
  *(_QWORD *)(v25 + 200) = v45;
  v47 = v55;
  os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, v55, "Asset download completed from %@ to a temp location: %s, bytesReceived: %{iec-bytes}d, file size on disk: %{iec-bytes}d, episode uuid: %@", 137, 2, v25);

  swift_bridgeObjectRelease(v25);
  v48 = *(id *)(v8 + v42);
  OS_dispatch_queue.sync<A>(execute:)(v14, sub_10014FD30, v8, v12);

  v49 = v8 + OBJC_IVAR____TtC8Podcasts11JobPipeline_assetsFolder;
  v50 = swift_allocObject(&unk_1004AF3A0, 64, 7);
  v52 = v59;
  v51 = v60;
  *(_QWORD *)(v50 + 16) = v8;
  *(_QWORD *)(v50 + 24) = v52;
  v53 = v57;
  *(_QWORD *)(v50 + 32) = v51;
  *(_QWORD *)(v50 + 40) = v53;
  *(_BYTE *)(v50 + 48) = v58 & 1;
  *(_QWORD *)(v50 + 56) = v62;
  swift_retain(v8);
  sub_10002CA20(v52, v51);
  sub_100148918((uint64_t)v14, v49, v63, v61, (uint64_t)sub_1001519E8, v50);
  swift_release(v50);
  return sub_10003F970((uint64_t)v14, type metadata accessor for DownloadJob);
}

uint64_t sub_1001431C0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString *v11;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v26;
  __int128 v27;
  __int128 v28;

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter();
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)&v27 = 0;
  v4 = objc_msgSend(v0, "attributesOfItemAtPath:error:", v3, &v27);

  v5 = (void *)v27;
  if (v4)
  {
    type metadata accessor for FileAttributeKey(0);
    v7 = v6;
    v8 = sub_100026844(&qword_100552DA8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003C9A9C);
    v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, v7, (char *)&type metadata for Any + 8, v8);
    v10 = v5;

    if (*(_QWORD *)(v9 + 16))
    {
      v11 = NSFileSize;
      v12 = sub_1001CCFBC(v11);
      if ((v13 & 1) != 0)
      {
        sub_10003D344(*(_QWORD *)(v9 + 56) + 32 * v12, (uint64_t)&v27);
      }
      else
      {
        v27 = 0u;
        v28 = 0u;
      }

    }
    else
    {
      v27 = 0u;
      v28 = 0u;
    }
    swift_bridgeObjectRelease(v9);
    if (*((_QWORD *)&v28 + 1))
    {
      if (swift_dynamicCast(&v26, &v27, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6))return (uint64_t)v26;
      else
        return 0;
    }
    else
    {
      sub_100007A28((uint64_t)&v27, (uint64_t *)&unk_100552300);
      return 0;
    }
  }
  else
  {
    v14 = (id)v27;
    v15 = _convertNSErrorToError(_:)(v5);

    swift_willThrow();
    *(_QWORD *)&v27 = v15;
    swift_errorRetain(v15);
    v16 = sub_10003F544((uint64_t *)&unk_10055A340);
    v17 = sub_100005EC8(0, &qword_1005532D0, NSError_ptr);
    if ((swift_dynamicCast(&v26, &v27, v16, v17, 0) & 1) != 0)
    {
      v18 = swift_errorRelease(v15);
      v19 = v26;
      v20 = static os_log_type_t.error.getter(v18);
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v21 = (void *)static OS_os_log.downloads.getter();
      v22 = sub_10003F544(&qword_1005559A0);
      v23 = swift_allocObject(v22, 72, 7);
      *(_OWORD *)(v23 + 16) = xmmword_1003CA200;
      v24 = objc_msgSend(v19, "code");
      *(_QWORD *)(v23 + 56) = &type metadata for Int;
      *(_QWORD *)(v23 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v23 + 32) = v24;
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Can't get file size due to error: %{errno}d", 43, 2, v23);

      swift_bridgeObjectRelease(v23);
      swift_errorRelease(v27);
      return 0;
    }
    else
    {
      return swift_errorRelease(v27);
    }
  }
}

uint64_t sub_1001434E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, void (*a5)(uint64_t, id, uint64_t), int a6, uint64_t *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t EnumCaseMultiPayload;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *);
  uint64_t v36;
  uint64_t *v37;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t *, uint64_t);
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  char *v64;
  void (*v65)(uint64_t, id, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t *);
  uint64_t v70;
  _QWORD v71[3];
  char v72[16];

  v62 = a6;
  v65 = a5;
  v67 = a4;
  v68 = a2;
  v69 = a3;
  v63 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v63);
  v66 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v70 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v70 + 64);
  v12 = __chkstk_darwin(v10);
  v64 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v58 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v58 - v16;
  v60 = sub_10003F544(&qword_1005533D0);
  __chkstk_darwin(v60);
  v61 = (uint64_t *)((char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v19);
  v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10003F544(&qword_100553360);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100007A64(a1, (uint64_t)v24, &qword_100553360);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v22);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v26 = *v24;
    v27 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    v28 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v29 = (void *)static OS_os_log.downloads.getter(v28);
    v30 = sub_10003F544(&qword_1005559A0);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_1003CA200;
    swift_getErrorValue(v26, v72, v71);
    v32 = Error.localizedDescription.getter(v71[1], v71[2]);
    v34 = v33;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = sub_10003E198();
    *(_QWORD *)(v31 + 32) = v32;
    *(_QWORD *)(v31 + 40) = v34;
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v29, "Post download file validation failed, error: %{public}s", 55, 2, v31);

    swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v21, 1, 1, v10);
    swift_errorRetain(v26);
    sub_10014C4A8(v26, 0, 128, (uint64_t)v21);
    swift_errorRelease(v26);
    sub_100007A28((uint64_t)v21, (uint64_t *)&unk_100553DC0);
    v35 = v69;
    if (v69)
    {
      v36 = v60;
      v37 = v61;
      *v61 = v26;
      swift_storeEnumTagMultiPayload(v37, v36, 1);
      swift_errorRetain(v26);
      v35(v37);
      swift_errorRelease(v26);
      return sub_100007A28((uint64_t)v37, &qword_1005533D0);
    }
    else
    {
      return swift_errorRelease(v26);
    }
  }
  else
  {
    v62 &= 1u;
    v39 = (char *)v24 + *(int *)(sub_10003F544(&qword_100553368) + 48);
    v61 = a7;
    v40 = v70;
    v41 = *(void (**)(char *, uint64_t *, uint64_t))(v70 + 32);
    v59 = v17;
    v41(v17, v24, v10);
    v41(v15, (uint64_t *)v39, v10);
    v42 = v68;
    v43 = *(id *)(v68 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    OS_dispatch_queue.sync<A>(execute:)(v66, sub_10014FD30, v42, v63);

    v44 = swift_allocObject(&unk_1004AE220, 24, 7);
    swift_weakInit(v44 + 16, v42);
    v45 = v40;
    v46 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    v47 = v64;
    v46(v64, v15, v10);
    v48 = *(unsigned __int8 *)(v45 + 80);
    v49 = (v48 + 40) & ~v48;
    v50 = (char *)swift_allocObject(&unk_1004AF3C8, v49 + v11, v48 | 7);
    v51 = (uint64_t)v69;
    *((_QWORD *)v50 + 2) = v44;
    *((_QWORD *)v50 + 3) = v51;
    v52 = (uint64_t)v15;
    v53 = v10;
    v54 = v67;
    *((_QWORD *)v50 + 4) = v67;
    v41(&v50[v49], (uint64_t *)v47, v53);
    swift_retain(v44);
    sub_10002CA20(v51, v54);
    v55 = v66;
    v56 = (uint64_t)v59;
    sub_100144CC4(v66, v59, v52, v65, v62, (uint64_t)v61, (uint64_t)sub_100151A80, (uint64_t)v50);
    swift_release(v50);
    sub_10003F970((uint64_t)v55, type metadata accessor for DownloadJob);
    v57 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v57(v52, v53);
    v57(v56, v53);
    return swift_release(v44);
  }
}

uint64_t sub_1001439E0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  char isEscapingClosureAtFileLocation;
  uint64_t Strong;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  void (*v65)(uint64_t);
  _QWORD aBlock[5];
  uint64_t v67;
  char v68[32];

  v57 = a5;
  v64 = a4;
  v65 = a3;
  v7 = type metadata accessor for DownloadJob(0);
  v8 = *(_QWORD *)(v7 - 8);
  v59 = v7;
  v60 = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v61 = (uint64_t)&v57 - v12;
  v62 = sub_10003F544(&qword_1005533D0);
  __chkstk_darwin(v62);
  v63 = (uint64_t *)((char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for JobPipelineError(0);
  v17 = __chkstk_darwin(v58);
  v19 = (uint64_t *)((char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v21 = (char *)&v57 - v20;
  v22 = sub_10003F544(&qword_1005533B0);
  __chkstk_darwin(v22);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a2 + 16;
  sub_100007A64(a1, (uint64_t)v24, &qword_1005533B0);
  if (swift_getEnumCaseMultiPayload(v24, v22) != 1)
  {
    swift_beginAccess(v25, v68, 0, 0);
    result = swift_weakLoadStrong(v25);
    if (result)
    {
      v37 = result;
      sub_100143FA4();
      v38 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
      v39 = *(id *)(v37 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
      v40 = v59;
      OS_dispatch_queue.sync<A>(execute:)(v11, sub_10014FD30, v37, v59);

      v41 = v61;
      sub_10014FDF8((uint64_t)v11, v61, type metadata accessor for DownloadJob);
      v42 = v41 + *(int *)(v40 + 40);
      sub_10014FE3C(*(_QWORD *)v42, *(_QWORD *)(v42 + 8), *(_QWORD *)(v42 + 16), *(_QWORD *)(v42 + 24));
      *(_QWORD *)v42 = 0;
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v42 + 16) = 0;
      *(_QWORD *)(v42 + 24) = 3;
      *(_QWORD *)(v42 + 32) = 0;
      *(_QWORD *)(v42 + 40) = 0;
      *(_WORD *)(v42 + 48) = 0;
      sub_10003F970((uint64_t)v11, type metadata accessor for DownloadJob);
      v43 = *(void **)(v37 + v38);
      sub_10014FDF8(v41, (uint64_t)v11, type metadata accessor for DownloadJob);
      v44 = *(unsigned __int8 *)(v60 + 80);
      v45 = (v44 + 24) & ~v44;
      v46 = swift_allocObject(&unk_1004AF3F0, v45 + v9, v44 | 7);
      *(_QWORD *)(v46 + 16) = v37;
      sub_10013BE30((uint64_t)v11, v46 + v45, type metadata accessor for DownloadJob);
      v47 = swift_allocObject(&unk_1004AF418, 32, 7);
      *(_QWORD *)(v47 + 16) = sub_10014FE58;
      *(_QWORD *)(v47 + 24) = v46;
      aBlock[4] = sub_1001529CC;
      v67 = v47;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100029B1C;
      aBlock[3] = &unk_1004AF430;
      v48 = _Block_copy(aBlock);
      v49 = v67;
      v50 = v43;
      swift_retain(v47);
      swift_retain(v37);
      swift_release(v49);
      dispatch_sync(v50, v48);
      _Block_release(v48);

      sub_10003F970(v41, type metadata accessor for DownloadJob);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v47, "", 81, 137, 30, 1);
      swift_release(v46);
      result = swift_release(v47);
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
        return result;
      }
      Strong = swift_unknownObjectWeakLoadStrong(v37 + OBJC_IVAR____TtC8Podcasts11JobPipeline_delegate);
      if (!Strong)
      {
        result = swift_release(v37);
        v54 = v65;
        if (!v65)
          return result;
LABEL_11:
        v55 = type metadata accessor for URL(0);
        v56 = (uint64_t)v63;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v63, v57, v55);
        swift_storeEnumTagMultiPayload(v56, v62, 0);
        v54(v56);
        return sub_100007A28(v56, &qword_1005533D0);
      }
      v53 = Strong;
      sub_100334404(v37);
      swift_release(v37);
      result = swift_unknownObjectRelease(v53);
    }
    v54 = v65;
    if (!v65)
      return result;
    goto LABEL_11;
  }
  sub_10013BE30((uint64_t)v24, (uint64_t)v21, type metadata accessor for JobPipelineError);
  sub_10014FDF8((uint64_t)v21, (uint64_t)v19, type metadata accessor for JobPipelineError);
  v26 = *v19;
  v27 = sub_10003F544(&qword_1005533B8);
  sub_10003DC78((uint64_t)v19 + *(int *)(v27 + 48), (uint64_t)v16, (uint64_t *)&unk_100553DC0);
  swift_beginAccess(v25, aBlock, 0, 0);
  v28 = swift_weakLoadStrong(v25);
  if (v28)
  {
    v29 = v28;
    swift_errorRetain(v26);
    sub_10014C4A8(v26, 0, 128, (uint64_t)v16);
    swift_errorRelease(v26);
    swift_release(v29);
  }
  swift_errorRelease(v26);
  sub_100007A28((uint64_t)v16, (uint64_t *)&unk_100553DC0);
  v30 = v65;
  if (v65)
  {
    v31 = sub_100026844(&qword_1005533D8, type metadata accessor for JobPipelineError, (uint64_t)&unk_1003CA570);
    v32 = swift_allocError(v58, v31, 0, 0);
    sub_10014FDF8((uint64_t)v21, v33, type metadata accessor for JobPipelineError);
    v34 = v62;
    v35 = (uint64_t)v63;
    *v63 = v32;
    swift_storeEnumTagMultiPayload(v35, v34, 1);
    v30(v35);
    sub_100007A28(v35, &qword_1005533D0);
  }
  return sub_10003F970((uint64_t)v21, type metadata accessor for JobPipelineError);
}

void sub_100143FA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _BYTE v17[16];

  v1 = v0;
  v2 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v7, sub_10014FD30, v1, v5);

  v9 = (_QWORD *)((char *)v7 + *(int *)(v5 + 20));
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  sub_10003F970((uint64_t)v7, type metadata accessor for DownloadJob);
  sub_10014417C(v10, v11, 2);
  swift_bridgeObjectRelease(v11);
  v12 = v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_metadata;
  v13 = type metadata accessor for EpisodeMetadata(0);
  sub_100007A64(v12 + *(int *)(v13 + 60), (uint64_t)v4, &qword_1005522F0);
  v14 = type metadata accessor for Date(0);
  LODWORD(v12) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v4, 1, v14);
  sub_100007A28((uint64_t)v4, &qword_1005522F0);
  if ((_DWORD)v12 != 1)
  {
    v15 = *(void **)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_analyticsChannel);
    type metadata accessor for AnalyticsEvent(0);
    swift_unknownObjectRetain(v15);
    v16 = (void *)AnalyticsEvent.__allocating_init(cacheDeletedFilesRestored:failed:)(1, 0);
    objc_msgSend(v15, "sendEvent:", v16);
    swift_unknownObjectRelease(v15);

  }
}

uint64_t sub_10014417C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v30 = a1;
  v31 = a3;
  v32 = a2;
  v3 = type metadata accessor for BugReportFrequency(0);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BugReport.Domain(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BugReport.ErrorKind(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PodcastsSystem(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = os_feature_enabled_download_consistency_checks(v16);
  if ((_DWORD)result)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for PodcastsSystem.downloads(_:), v14);
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for BugReport.ErrorKind.duplicateDownloads(_:), v10);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for BugReport.Domain.podcasts(_:), v6);
    v20 = objc_allocWithZone((Class)type metadata accessor for BugReport(0));
    v21 = (void *)BugReport.init(domain:system:errorKind:forceSubmissionAttempt:)(v9, v18, v13, 0);
    sub_10000A520(v29[1] + OBJC_IVAR____TtC8Podcasts11JobPipeline_bugReporter, (uint64_t)v35);
    v22 = v36;
    v23 = v37;
    sub_10003A834(v35, v36);
    v25 = v33;
    v24 = v34;
    (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v5, enum case for BugReportFrequency.hourly(_:), v34);
    v26 = (_QWORD *)swift_allocObject(&unk_1004AF300, 40, 7);
    v26[2] = v30;
    v28 = v31;
    v27 = v32;
    v26[3] = v32;
    v26[4] = v28;
    swift_bridgeObjectRetain(v27);
    dispatch thunk of BugReporter.prepare(bugReport:maximumFrequency:checkBlock:)(v21, v5, sub_10015194C, v26, v22, v23);

    swift_release(v26);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v24);
    return sub_10003D380(v35);
  }
  return result;
}

void sub_1001443E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  id v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  id v15;
  _QWORD v16[5];
  _QWORD *v17;

  v10 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v11 = objc_msgSend(v10, "loggingContext");

  v12 = (_QWORD *)swift_allocObject(&unk_1004AF328, 64, 7);
  v12[2] = v11;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a1;
  v12[7] = a2;
  v16[4] = sub_10015198C;
  v17 = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100027AF8;
  v16[3] = &unk_1004AF340;
  v13 = _Block_copy(v16);
  v14 = v17;
  v15 = v11;
  swift_bridgeObjectRetain(a4);
  swift_retain(a2);
  swift_release(v14);
  objc_msgSend(v15, "performBlock:", v13);
  _Block_release(v13);

}

void sub_10014451C(void *a1, uint64_t a2, unint64_t a3, void *a4, void *a5, void *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  NSString v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint8_t *v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void *v50;
  id v51;
  id v52;
  _QWORD *v53;
  id v54;
  id v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  id v66;

  v62 = a4;
  v63 = a5;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v57 - v15;
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(a1, "episodeForUuid:", v17);

  if (v18)
  {
    v61 = a6;
    v20 = objc_msgSend(v18, "podcast");
    if (v20)
    {
      v21 = v20;
      v64 = v10;
      v22 = objc_msgSend(v20, "uuid");
      if (v22)
      {
        v23 = v22;
        v59 = v14;
        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v60 = v24;
        v25 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
        v26 = objc_msgSend((id)swift_getObjCClassFromMetadata(v25), "fetchRequest");
        v27 = (void *)objc_opt_self(MTEpisode);
        v28 = objc_msgSend(v27, "predicateForDownloadBehavior:", 2);
        v29 = objc_msgSend(v27, "predicateForDownloadBehavior:", 4);
        v30 = objc_msgSend(v28, "OR:", v29);

        v31 = objc_msgSend(v27, "predicateForDownloadedEpisodesOnPodcastUuid:", v23);
        v32 = objc_msgSend(v30, "NOT");
        v33 = objc_msgSend(v31, "AND:", v32);

        objc_msgSend(v26, "setPredicate:", v33);
        v66 = 0;
        v34 = v26;
        v35 = objc_msgSend(a1, "countForFetchRequest:error:", v26, &v66);
        if (v66)
        {
          v63 = v30;
          v36 = v66;
          v37 = swift_willThrow();
          v38 = v59;
          static Logger.downloads.getter(v37);
          v39 = swift_bridgeObjectRetain(v60);
          v40 = Logger.logObject.getter(v39);
          v41 = static os_log_type_t.error.getter(v40);
          if (os_log_type_enabled(v40, v41))
          {
            v62 = v34;
            v42 = swift_slowAlloc(12, -1);
            v61 = v36;
            v43 = (uint8_t *)v42;
            v44 = (void *)swift_slowAlloc(32, -1);
            v66 = v44;
            *(_DWORD *)v43 = 136446210;
            v45 = v60;
            swift_bridgeObjectRetain(v60);
            v65 = sub_10003D274(v58, v45, (uint64_t *)&v66);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v43 + 4, v43 + 12);
            swift_bridgeObjectRelease_n(v45, 3);
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to count downloaded episodes for podcast: %{public}s, unable to assess excessive downloads.", v43, 0xCu);
            swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v44, -1, -1);
            swift_slowDealloc(v43, -1, -1);

            (*(void (**)(char *, uint64_t))(v11 + 8))(v59, v64);
          }
          else
          {

            swift_bridgeObjectRelease_n(v60, 2);
            (*(void (**)(char *, uint64_t))(v11 + 8))(v38, v64);
          }
        }
        else
        {
          v51 = v35;
          swift_bridgeObjectRelease(v60);
          v52 = objc_msgSend(v21, "episodeLimitResolvedValue");
          v53 = (_QWORD *)swift_allocObject(&unk_1004AF378, 48, 7);
          v54 = v62;
          v53[2] = v51;
          v53[3] = v54;
          v53[4] = v63;
          v55 = v61;
          v53[5] = v61;
          v56 = swift_retain(v55);
          MTPodcastEpisodeLimit.countValue(in:completionHandler:)(a1, sub_1001519D0, v53, v52, v56);
          swift_release(v53);

        }
        return;
      }

      v10 = v64;
    }
    else
    {
      v21 = v18;
    }

  }
  static Logger.downloads.getter(v19);
  v46 = swift_bridgeObjectRetain_n(a3, 2);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.error.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v64 = v10;
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = (void *)swift_slowAlloc(32, -1);
    v66 = v50;
    *(_DWORD *)v49 = 136315138;
    swift_bridgeObjectRetain(a3);
    v65 = sub_10003D274(a2, a3, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unable to assess for excessive download, episode or podcast not found for episodeUUID: %s", v49, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v64);
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
}

unint64_t sub_100144B40(unint64_t result, char a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(void))
{
  unint64_t v6;
  uint64_t v9;
  uint64_t inited;
  id v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE v17[184];

  if ((a2 & 1) == 0)
  {
    v6 = result;
    if (is_mul_ok(a5, result))
    {
      if (a4 >= 1 && a5 * result < a4)
      {
        v9 = sub_10003F544(&qword_100559A90);
        inited = swift_initStackObject(v9, v17);
        *(_OWORD *)(inited + 16) = xmmword_1003CA220;
        v15 = 0xD000000000000017;
        v16 = 0x800000010042F2F0;
        AnyHashable.init<A>(_:)(&v15, &type metadata for String, &protocol witness table for String);
        v11 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", v6);
        v12 = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
        *(_QWORD *)(inited + 96) = v12;
        *(_QWORD *)(inited + 72) = v11;
        v15 = 0xD000000000000010;
        v16 = 0x800000010042F310;
        AnyHashable.init<A>(_:)(&v15, &type metadata for String, &protocol witness table for String);
        v13 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a4);
        *(_QWORD *)(inited + 168) = v12;
        *(_QWORD *)(inited + 144) = v13;
        v14 = sub_10013842C(inited);
        a6();
        return swift_bridgeObjectRelease(v14);
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_100144CC4(char *a1, void *a2, uint64_t a3, void (*a4)(uint64_t, id, uint64_t), int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  char *v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  void *v25;
  uint64_t v26;
  objc_class *FairPlayKeyOperation;
  _BYTE *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_class *v37;
  char *v38;
  char *v39;
  uint64_t (**v40)(uint64_t, uint64_t, uint64_t);
  objc_class *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  objc_class *v50;
  char *v51;
  char *v52;
  uint64_t (**v53)(uint64_t, uint64_t, uint64_t);
  objc_class *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, id, uint64_t);
  objc_class *v70;
  char *v71;
  char *v72;
  void (**v73)(uint64_t *, uint64_t, uint64_t, uint64_t);
  char *v74;
  id v75;
  char *v76;
  id v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  objc_class *v99;
  char *v100;
  char *v101;
  void (**v102)(uint64_t *, uint64_t, uint64_t, uint64_t);
  char *v103;
  id v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  objc_class *v109;
  _QWORD *v110;
  char *v111;
  void (**v112)(uint64_t@<X8>);
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t (**v116)(uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t ObjectType;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v133;
  __n128 v134;
  uint64_t v135;
  objc_class *v136;
  uint64_t v137;
  void *v138;
  uint64_t (**v139)(uint64_t);
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v157;
  __n128 v158;
  objc_class *v159;
  char *v160;
  uint64_t v161;
  void *v162;
  uint64_t (**v163)(uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void (*v179)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v180;
  __n128 v181;
  uint64_t v182;
  objc_class *v183;
  char *v184;
  uint64_t v185;
  void *v186;
  uint64_t (**v187)(uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v204;
  __n128 v205;
  objc_class *v206;
  _QWORD *v207;
  uint64_t v208;
  void *v209;
  uint64_t (**v210)(uint64_t);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  _QWORD *v227;
  __n128 v228;
  uint64_t v229;
  objc_class *v230;
  char *v231;
  uint64_t v232;
  void *v233;
  uint64_t (**v234)(uint64_t);
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void (*v250)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v251;
  __n128 v252;
  objc_class *v253;
  char *v254;
  uint64_t v255;
  void *v256;
  uint64_t (**v257)(uint64_t);
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void (*v273)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v274;
  __n128 v275;
  uint64_t v276;
  objc_class *v277;
  char *v278;
  uint64_t v279;
  void *v280;
  uint64_t (**v281)(uint64_t);
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void (*v297)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v298;
  __n128 v299;
  objc_class *v300;
  char *v301;
  uint64_t v302;
  id v303;
  uint64_t (**v304)(uint64_t);
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void (*v319)(uint64_t (*)(), uint64_t, id, uint64_t, __n128);
  char *v320;
  __n128 v321;
  objc_class *v322;
  char *v323;
  uint64_t v324;
  void *v325;
  uint64_t (**v326)(uint64_t);
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  void (*v341)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v342;
  char *v343;
  __n128 v344;
  uint64_t v345;
  objc_class *v346;
  char *v347;
  id v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t (**v354)(uint64_t);
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  _QWORD *v360;
  char *v361;
  char *v362;
  char *v363;
  void *v364;
  void *v365;
  id v366;
  id v367;
  uint64_t v368;
  id v369;
  id v370;
  char *v371;
  id v372;
  id v373;
  char *v374;
  Class isa;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  Class v380;
  uint64_t v381;
  id v382;
  id v383;
  char *v384;
  char *v385;
  id v386;
  id v387;
  uint64_t v388;
  id v389;
  char *v390;
  id v391;
  id v392;
  void (*v393)(uint64_t, id, uint64_t);
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  char *v401;
  _QWORD *v402;
  char *v403;
  char *v404;
  char *v405;
  char *v406;
  id v407;
  char *v408;
  objc_super v409;
  objc_super v410;
  objc_super v411;
  objc_super v412;
  objc_super v413;
  objc_super v414;
  objc_super v415;
  objc_super v416;
  objc_super v417;
  objc_super v418;
  objc_super v419;
  objc_super v420;
  __int128 v421;
  uint64_t v422;
  _QWORD v423[5];
  objc_super v424;
  objc_super v425;
  objc_super v426;
  objc_super v427;
  objc_super v428;
  objc_super v429;
  objc_super v430;

  v398 = a7;
  v399 = a8;
  v388 = a6;
  LODWORD(v394) = a5;
  v393 = a4;
  v404 = a1;
  v378 = type metadata accessor for DownloadJob(0);
  v395 = *(_QWORD *)(v378 - 8);
  v403 = *(char **)(v395 + 64);
  __chkstk_darwin(v378);
  v402 = (uint64_t *)((char *)&v377 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for URL(0);
  v406 = *(char **)(*(_QWORD *)(v11 - 8) + 64);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v377 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v377 - v15;
  v18 = *(char **)(v17 + 16);
  v19 = v17;
  v396 = v17;
  v389 = a2;
  ((void (*)(char *, void *, uint64_t))v18)((char *)&v377 - v15, a2, v11);
  v397 = a3;
  ((void (*)(char *, uint64_t, uint64_t))v18)(v14, a3, v11);
  v400 = (char *)sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v20 = static OS_os_log.downloads.getter(v400);
  v21 = (objc_class *)type metadata accessor for MoveFileOperation(0);
  v22 = (char *)objc_allocWithZone(v21);
  v23 = &v22[OBJC_IVAR____TtC8Podcasts17MoveFileOperation_input];
  *(_QWORD *)v23 = 0;
  v23[8] = 2;
  ((void (*)(char *, char *, uint64_t))v18)(&v22[OBJC_IVAR____TtC8Podcasts17MoveFileOperation_destination], v14, v11);
  ((void (*)(char *, char *, uint64_t))v18)(&v22[OBJC_IVAR____TtC8Podcasts17MoveFileOperation_source], v16, v11);
  *(_QWORD *)&v22[OBJC_IVAR____TtC8Podcasts17MoveFileOperation_log] = v20;
  v430.receiver = v22;
  v430.super_class = v21;
  v401 = (char *)objc_msgSendSuper2(&v430, "init");
  v24 = *(void (**)(char *, uint64_t))(v19 + 8);
  v24(v14, v11);
  v24(v16, v11);
  ((void (*)(char *, uint64_t, uint64_t))v18)(v16, a3, v11);
  v405 = v18;
  type metadata accessor for FairPlayRolloutController(0);
  v25 = (void *)static FairPlayRolloutController.shared.getter();
  LOBYTE(v19) = FairPlayRolloutController.isEnabled()();

  type metadata accessor for FairPlayKeyLoader(0);
  v26 = FairPlayKeyLoader.__allocating_init()();
  FairPlayKeyOperation = (objc_class *)type metadata accessor for FetchFairPlayKeyOperation(0);
  v28 = objc_allocWithZone(FairPlayKeyOperation);
  v29 = &v28[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input];
  *(_QWORD *)v29 = 0;
  v29[8] = 2;
  v30 = &v28[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation____lazy_storage___logPrefix];
  *v30 = 0;
  v30[1] = 0;
  v31 = &v28[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_episodeAdamID];
  *(_QWORD *)v31 = v393;
  v31[8] = v394 & 1;
  v407 = v16;
  ((void (*)(_BYTE *, char *, uint64_t))v18)(&v28[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_episodeLocation], v16, v11);
  *(_QWORD *)&v28[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_fairPlayKeyLoader] = v26;
  v28[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_iTunesCloudFairPlayOfflineEnabled] = v19 & 1;
  v429.receiver = v28;
  v429.super_class = FairPlayKeyOperation;
  v390 = (char *)objc_msgSendSuper2(&v429, "init");
  v24(v16, v11);
  v32 = v402;
  sub_10014FDF8((uint64_t)v404, (uint64_t)v402, type metadata accessor for DownloadJob);
  v33 = *(unsigned __int8 *)(v395 + 80);
  v34 = (v33 + 16) & ~v33;
  v403 += v34;
  v35 = v33 | 7;
  v36 = swift_allocObject(&unk_1004AED10, v403, v33 | 7);
  v392 = (id)v34;
  sub_10013BE30((uint64_t)v32, v36 + v34, type metadata accessor for DownloadJob);
  v37 = (objc_class *)sub_10003F544(&qword_100553390);
  v38 = (char *)objc_allocWithZone(v37);
  v39 = &v38[*(_QWORD *)((swift_isaMask & *(_QWORD *)v38) + 0x180)];
  *(_QWORD *)v39 = 0;
  v39[8] = 2;
  v40 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v38[*(_QWORD *)((swift_isaMask & *(_QWORD *)v38) + 0x188)];
  *v40 = sub_100150AD8;
  v40[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v36;
  v428.receiver = v38;
  v428.super_class = v37;
  v382 = objc_msgSendSuper2(&v428, "init");
  v41 = (objc_class *)sub_10003F544(&qword_100553398);
  v42 = objc_allocWithZone(v41);
  v43 = (char *)v42 + *(_QWORD *)((swift_isaMask & *v42) + 0x180);
  v44 = sub_10003F544((uint64_t *)&unk_100564EB0);
  swift_storeEnumTagMultiPayload(v43, v44, 2);
  v45 = (_QWORD *)((char *)v42 + *(_QWORD *)((swift_isaMask & *v42) + 0x188));
  *v45 = sub_100146D9C;
  v45[1] = 0;
  v427.receiver = v42;
  v427.super_class = v41;
  v385 = (char *)objc_msgSendSuper2(&v427, "init");
  v46 = (uint64_t)v404;
  sub_10014FDF8((uint64_t)v404, (uint64_t)v32, type metadata accessor for DownloadJob);
  v47 = swift_allocObject(&unk_1004AED38, v403, v35);
  v48 = v47 + v34;
  v49 = (uint64_t)v32;
  sub_10013BE30((uint64_t)v32, v48, type metadata accessor for DownloadJob);
  v50 = (objc_class *)sub_10003F544(&qword_1005533A0);
  v51 = (char *)objc_allocWithZone(v50);
  v52 = &v51[*(_QWORD *)((swift_isaMask & *(_QWORD *)v51) + 0x180)];
  *(_QWORD *)v52 = 0;
  v52[8] = 2;
  v53 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v51[*(_QWORD *)((swift_isaMask & *(_QWORD *)v51) + 0x188)];
  *v53 = sub_100150C68;
  v53[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v47;
  v426.receiver = v51;
  v426.super_class = v50;
  v383 = objc_msgSendSuper2(&v426, "init");
  v54 = (objc_class *)sub_10003F544(&qword_1005533A8);
  v55 = (char *)objc_allocWithZone(v54);
  v56 = &v55[*(_QWORD *)((swift_isaMask & *(_QWORD *)v55) + 0x180)];
  *(_QWORD *)v56 = 0;
  v56[8] = 2;
  v57 = &v55[*(_QWORD *)((swift_isaMask & *(_QWORD *)v55) + 0x188)];
  *(_QWORD *)v57 = sub_10014765C;
  *((_QWORD *)v57 + 1) = 0;
  v425.receiver = v55;
  v425.super_class = v54;
  v384 = (char *)objc_msgSendSuper2(&v425, "init");
  v58 = v408;
  v386 = sub_10014F514(v46, 1);
  v59 = *(_QWORD *)&v58[OBJC_IVAR____TtC8Podcasts11JobPipeline_episodeStorage];
  v391 = *(id *)&v58[OBJC_IVAR____TtC8Podcasts11JobPipeline_episodeStorage + 8];
  v60 = swift_unknownObjectRetain(v59);
  v387 = (id)static OS_os_log.downloads.getter(v60);
  v61 = v49;
  sub_10014FDF8(v46, v49, type metadata accessor for DownloadJob);
  v62 = v407;
  ((void (*)(id, uint64_t, uint64_t))v405)(v407, v397, v11);
  v63 = v396;
  v64 = *(unsigned __int8 *)(v396 + 80);
  v394 = ~v64;
  v395 = v64;
  v65 = (unint64_t)&v403[v64] & ~v64;
  v66 = v35 | v64;
  v67 = (unint64_t)&v406[v65 + 7] & 0xFFFFFFFFFFFFFFF8;
  v379 = v66;
  v68 = swift_allocObject(&unk_1004AED60, v67 + 8, v66);
  sub_10013BE30(v61, (uint64_t)v392 + v68, type metadata accessor for DownloadJob);
  v69 = *(void (**)(uint64_t, id, uint64_t))(v63 + 32);
  v396 = v11;
  v393 = v69;
  v69(v68 + v65, v62, v11);
  *(_QWORD *)(v68 + v67) = v388;
  v70 = (objc_class *)sub_10003F544(&qword_1005532E8);
  v71 = (char *)objc_allocWithZone(v70);
  v72 = &v71[*(_QWORD *)((swift_isaMask & *(_QWORD *)v71) + 0x198)];
  *(_QWORD *)v72 = 0;
  v72[8] = 2;
  v73 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))&v71[*(_QWORD *)((swift_isaMask & *(_QWORD *)v71)
                                                                                   + 0x1A8)];
  *v73 = sub_100150EAC;
  v73[1] = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v68;
  v74 = &v71[*(_QWORD *)((swift_isaMask & *(_QWORD *)v71) + 0x1A0)];
  v380 = v70;
  v381 = v59;
  v75 = v391;
  *(_QWORD *)v74 = v59;
  *((_QWORD *)v74 + 1) = v75;
  *(_QWORD *)&v71[*(_QWORD *)((swift_isaMask & *(_QWORD *)v71) + 0x1B0)] = v387;
  v76 = v408;
  v424.receiver = v71;
  v424.super_class = v70;
  v387 = objc_msgSendSuper2(&v424, "init");
  sub_100007A64((uint64_t)&v76[OBJC_IVAR____TtC8Podcasts11JobPipeline_mediaLibraryClient], (uint64_t)&v421, &qword_1005536B0);
  if (v422)
  {
    sub_10002099C(&v421, (uint64_t)v423);
    v77 = *(id *)&v76[OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue];
    v78 = v402;
    v79 = v378;
    OS_dispatch_queue.sync<A>(execute:)(v402, sub_10014FD30, v76, v378);

    v80 = (_QWORD *)((char *)v78 + *(int *)(v79 + 20));
    v81 = *v80;
    v82 = v80[1];
    swift_bridgeObjectRetain(v82);
    sub_10003F970((uint64_t)v78, type metadata accessor for DownloadJob);
    v83 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
    v84 = objc_msgSend((id)swift_getObjCClassFromMetadata(v83), "sharedInstance");
    v85 = objc_msgSend(v84, "activeDsid");

    v388 = (uint64_t)sub_100149760(v81, v82, v85, (uint64_t)v423);
    swift_bridgeObjectRelease(v82);

    sub_10003D380(v423);
  }
  else
  {
    v86 = sub_100007A28((uint64_t)&v421, &qword_1005536B0);
    v87 = (void *)static OS_os_log.default.getter(v86);
    v88 = objc_allocWithZone((Class)type metadata accessor for GroupOperation());
    v388 = sub_100366114((uint64_t)_swiftEmptyArrayStorage, 0, v87);
  }
  v89 = v381;
  v90 = swift_unknownObjectRetain(v381);
  v91 = static OS_os_log.downloads.getter(v90);
  v92 = v402;
  sub_10014FDF8((uint64_t)v404, (uint64_t)v402, type metadata accessor for DownloadJob);
  v93 = v407;
  v94 = v396;
  ((void (*)(id, id, uint64_t))v405)(v407, v389, v396);
  v95 = (unint64_t)(v403 + 7) & 0xFFFFFFFFFFFFFFF8;
  v96 = (v95 + v395 + 8) & v394;
  v97 = swift_allocObject(&unk_1004AED88, &v406[v96], v379);
  sub_10013BE30((uint64_t)v92, (uint64_t)v392 + v97, type metadata accessor for DownloadJob);
  v98 = v408;
  *(_QWORD *)(v97 + v95) = v408;
  v393(v97 + v96, v93, v94);
  v99 = v380;
  v100 = (char *)objc_allocWithZone(v380);
  v101 = &v100[*(_QWORD *)((swift_isaMask & *(_QWORD *)v100) + 0x198)];
  *(_QWORD *)v101 = 0;
  v101[8] = 2;
  v102 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))&v100[*(_QWORD *)((swift_isaMask & *(_QWORD *)v100)
                                                                                     + 0x1A8)];
  *v102 = sub_100151134;
  v102[1] = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v97;
  v103 = &v100[*(_QWORD *)((swift_isaMask & *(_QWORD *)v100) + 0x1A0)];
  v104 = v391;
  *(_QWORD *)v103 = v89;
  *((_QWORD *)v103 + 1) = v104;
  *(_QWORD *)&v100[*(_QWORD *)((swift_isaMask & *(_QWORD *)v100) + 0x1B0)] = v91;
  v420.receiver = v100;
  v420.super_class = v99;
  *(_QWORD *)&v105 = swift_retain(v98).n128_u64[0];
  v392 = objc_msgSendSuper2(&v420, "init", v105);
  v106 = swift_allocObject(&unk_1004AEDB0, 32, 7);
  v108 = v398;
  v107 = v399;
  *(_QWORD *)(v106 + 16) = v398;
  *(_QWORD *)(v106 + 24) = v107;
  v109 = (objc_class *)sub_10003F544((uint64_t *)&unk_10055BCB0);
  v110 = objc_allocWithZone(v109);
  v111 = (char *)v110 + *(_QWORD *)((swift_isaMask & *v110) + 0x180);
  *(_QWORD *)v111 = 0;
  v111[8] = 2;
  v112 = (void (**)(uint64_t@<X8>))((char *)v110 + *(_QWORD *)((swift_isaMask & *v110) + 0x188));
  *v112 = sub_1001511D8;
  v112[1] = (void (*)(uint64_t@<X8>))v106;
  sub_10002CA20(v108, v107);
  v419.receiver = v110;
  v419.super_class = v109;
  v389 = objc_msgSendSuper2(&v419, "init");
  v113 = swift_allocObject(&unk_1004AEDD8, 24, 7);
  v114 = v390;
  swift_unknownObjectWeakInit(v113 + 16, v390);
  v115 = v401;
  v116 = (uint64_t (**)(uint64_t))&v401[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v117 = *(_QWORD *)&v401[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v118 = *(_QWORD *)&v401[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v116 = sub_1001511F0;
  v116[1] = (uint64_t (*)(uint64_t))v113;
  sub_10002CA30(v117, v118);
  v119 = objc_opt_self(NSOperation);
  v120 = swift_dynamicCastObjCClass(v115, v119);
  if (v120)
  {
    v122 = v120;
    ObjectType = swift_getObjectType(v120, v121);
    v124 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
    v126 = v124 ? v124 : 0;
    v127 = v124 ? v122 : 0;
    if (v127)
    {
      v128 = swift_getObjectType(v127, v125);
      v129 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v129 + 24) = v126;
      swift_unknownObjectWeakInit(v129 + 16, v127);
      v130 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v130 + 16, v390);
      v131 = swift_allocObject(&unk_1004AF0F8, 32, 7);
      *(_QWORD *)(v131 + 16) = v130;
      *(_QWORD *)(v131 + 24) = v129;
      v132 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v126 + 72);
      v133 = (id)swift_unknownObjectRetain(v401);
      swift_retain(v130);
      v134 = swift_retain(v129);
      v132(sub_1000456D4, v131, v128, v126, v134);
      v135 = v129;
      v114 = v390;
      swift_release(v135);
      swift_release(v130);
      swift_release(v131);
      v136 = (objc_class *)type metadata accessor for BaseOperation();
      v409.receiver = v114;
      v409.super_class = v136;
      objc_msgSendSuper2(&v409, "addDependency:", v122);

    }
  }
  v137 = swift_allocObject(&unk_1004AEE00, 24, 7);
  v138 = v382;
  swift_unknownObjectWeakInit(v137 + 16, v382);
  v139 = (uint64_t (**)(uint64_t))&v114[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v140 = *(_QWORD *)&v114[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v141 = *(_QWORD *)&v114[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v139 = sub_10014FDA0;
  v139[1] = (uint64_t (*)(uint64_t))v137;
  v142 = v114;
  sub_10002CA30(v140, v141);
  v143 = objc_opt_self(NSOperation);
  v144 = swift_dynamicCastObjCClass(v142, v143);
  v390 = v142;
  if (v144)
  {
    v146 = v144;
    v147 = swift_getObjectType(v144, v145);
    v148 = swift_conformsToProtocol2(v147, &protocol descriptor for PodcastsOperation);
    v150 = v148 ? v148 : 0;
    v151 = v148 ? v146 : 0;
    if (v151)
    {
      v152 = swift_getObjectType(v151, v149);
      v153 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v153 + 24) = v150;
      swift_unknownObjectWeakInit(v153 + 16, v151);
      v154 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v154 + 16, v138);
      v155 = swift_allocObject(&unk_1004AF0D0, 32, 7);
      *(_QWORD *)(v155 + 16) = v154;
      *(_QWORD *)(v155 + 24) = v153;
      v156 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v150 + 72);
      swift_unknownObjectRetain(v142);
      v157 = v142;
      swift_retain(v154);
      v158 = swift_retain(v153);
      v156(sub_1000456D4, v155, v152, v150, v158);
      v138 = v382;
      swift_release(v153);
      swift_release(v154);
      swift_release(v155);
      v159 = (objc_class *)type metadata accessor for BaseOperation();
      v410.receiver = v138;
      v410.super_class = v159;
      objc_msgSendSuper2(&v410, "addDependency:", v146);

      v142 = v390;
    }
  }
  v160 = v138;

  v161 = swift_allocObject(&unk_1004AEE28, 24, 7);
  v162 = v385;
  swift_unknownObjectWeakInit(v161 + 16, v385);
  v163 = (uint64_t (**)(uint64_t))&v160[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v164 = *(_QWORD *)&v160[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v165 = *(_QWORD *)&v160[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v163 = sub_1001511F8;
  v163[1] = (uint64_t (*)(uint64_t))v161;
  sub_10002CA30(v164, v165);
  v166 = objc_opt_self(NSOperation);
  v167 = swift_dynamicCastObjCClass(v160, v166);
  v403 = v160;
  if (v167)
  {
    v169 = v167;
    v170 = swift_getObjectType(v167, v168);
    v171 = swift_conformsToProtocol2(v170, &protocol descriptor for PodcastsOperation);
    v173 = v171 ? v171 : 0;
    v174 = v171 ? v169 : 0;
    if (v174)
    {
      v175 = swift_getObjectType(v174, v172);
      v176 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v176 + 24) = v173;
      swift_unknownObjectWeakInit(v176 + 16, v174);
      v177 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v177 + 16, v162);
      v178 = swift_allocObject(&unk_1004AF0A8, 32, 7);
      *(_QWORD *)(v178 + 16) = v177;
      *(_QWORD *)(v178 + 24) = v176;
      v179 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v173 + 72);
      swift_unknownObjectRetain(v403);
      v180 = v403;
      swift_retain(v177);
      v181 = swift_retain(v176);
      v179(sub_1000456D4, v178, v175, v173, v181);
      v162 = v385;
      v182 = v176;
      v160 = v403;
      swift_release(v182);
      swift_release(v177);
      swift_release(v178);
      v183 = (objc_class *)type metadata accessor for BaseOperation();
      v411.receiver = v162;
      v411.super_class = v183;
      objc_msgSendSuper2(&v411, "addDependency:", v169);

    }
  }
  v184 = v162;

  v185 = swift_allocObject(&unk_1004AEE50, 24, 7);
  v186 = v383;
  swift_unknownObjectWeakInit(v185 + 16, v383);
  v187 = (uint64_t (**)(uint64_t))&v184[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v188 = *(_QWORD *)&v184[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v189 = *(_QWORD *)&v184[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v187 = sub_10014FDA0;
  v187[1] = (uint64_t (*)(uint64_t))v185;
  sub_10002CA30(v188, v189);
  v190 = objc_opt_self(NSOperation);
  v191 = swift_dynamicCastObjCClass(v184, v190);
  v385 = v184;
  if (v191)
  {
    v193 = v191;
    v194 = swift_getObjectType(v191, v192);
    v195 = swift_conformsToProtocol2(v194, &protocol descriptor for PodcastsOperation);
    v197 = v195 ? v195 : 0;
    v198 = v195 ? v193 : 0;
    if (v198)
    {
      v199 = swift_getObjectType(v198, v196);
      v200 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v200 + 24) = v197;
      swift_unknownObjectWeakInit(v200 + 16, v198);
      v201 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v201 + 16, v186);
      v202 = swift_allocObject(&unk_1004AF080, 32, 7);
      *(_QWORD *)(v202 + 16) = v201;
      *(_QWORD *)(v202 + 24) = v200;
      v203 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v197 + 72);
      swift_unknownObjectRetain(v184);
      v204 = v184;
      swift_retain(v201);
      v205 = swift_retain(v200);
      v203(sub_1000456D4, v202, v199, v197, v205);
      v186 = v383;
      swift_release(v200);
      swift_release(v201);
      swift_release(v202);
      v206 = (objc_class *)type metadata accessor for BaseOperation();
      v412.receiver = v186;
      v412.super_class = v206;
      objc_msgSendSuper2(&v412, "addDependency:", v193);

      v184 = v385;
    }
  }
  v207 = v186;

  v208 = swift_allocObject(&unk_1004AEE78, 24, 7);
  v209 = v384;
  swift_unknownObjectWeakInit(v208 + 16, v384);
  v210 = (uint64_t (**)(uint64_t))((char *)v207 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  v211 = *(_QWORD *)((char *)v207 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  v212 = *(_QWORD *)((char *)v207 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8);
  *v210 = sub_100151200;
  v210[1] = (uint64_t (*)(uint64_t))v208;
  sub_10002CA30(v211, v212);
  v213 = objc_opt_self(NSOperation);
  v214 = swift_dynamicCastObjCClass(v207, v213);
  v402 = v207;
  if (v214)
  {
    v216 = v214;
    v217 = swift_getObjectType(v214, v215);
    v218 = swift_conformsToProtocol2(v217, &protocol descriptor for PodcastsOperation);
    v220 = v218 ? v218 : 0;
    v221 = v218 ? v216 : 0;
    if (v221)
    {
      v222 = swift_getObjectType(v221, v219);
      v223 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v223 + 24) = v220;
      swift_unknownObjectWeakInit(v223 + 16, v221);
      v224 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v224 + 16, v209);
      v225 = swift_allocObject(&unk_1004AF058, 32, 7);
      *(_QWORD *)(v225 + 16) = v224;
      *(_QWORD *)(v225 + 24) = v223;
      v226 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v220 + 72);
      swift_unknownObjectRetain(v402);
      v227 = v402;
      swift_retain(v224);
      v228 = swift_retain(v223);
      v226(sub_1000456D4, v225, v222, v220, v228);
      v209 = v384;
      v229 = v223;
      v207 = v402;
      swift_release(v229);
      swift_release(v224);
      swift_release(v225);
      v230 = (objc_class *)type metadata accessor for BaseOperation();
      v413.receiver = v209;
      v413.super_class = v230;
      objc_msgSendSuper2(&v413, "addDependency:", v216);

    }
  }
  v231 = v209;

  v232 = swift_allocObject(&unk_1004AEEA0, 24, 7);
  v233 = v386;
  swift_unknownObjectWeakInit(v232 + 16, v386);
  v234 = (uint64_t (**)(uint64_t))&v231[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v235 = *(_QWORD *)&v231[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v236 = *(_QWORD *)&v231[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v234 = sub_100150100;
  v234[1] = (uint64_t (*)(uint64_t))v232;
  sub_10002CA30(v235, v236);
  v237 = objc_opt_self(NSOperation);
  v238 = swift_dynamicCastObjCClass(v231, v237);
  v384 = v231;
  if (v238)
  {
    v240 = v238;
    v241 = swift_getObjectType(v238, v239);
    v242 = swift_conformsToProtocol2(v241, &protocol descriptor for PodcastsOperation);
    v244 = v242 ? v242 : 0;
    v245 = v242 ? v240 : 0;
    if (v245)
    {
      v246 = swift_getObjectType(v245, v243);
      v247 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v247 + 24) = v244;
      swift_unknownObjectWeakInit(v247 + 16, v245);
      v248 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v248 + 16, v233);
      v249 = swift_allocObject(&unk_1004AF030, 32, 7);
      *(_QWORD *)(v249 + 16) = v248;
      *(_QWORD *)(v249 + 24) = v247;
      v250 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v244 + 72);
      swift_unknownObjectRetain(v231);
      v251 = v231;
      swift_retain(v248);
      v252 = swift_retain(v247);
      v250(sub_1000456D4, v249, v246, v244, v252);
      v233 = v386;
      swift_release(v247);
      swift_release(v248);
      swift_release(v249);
      v253 = (objc_class *)type metadata accessor for BaseOperation();
      v414.receiver = v233;
      v414.super_class = v253;
      objc_msgSendSuper2(&v414, "addDependency:", v240);

      v231 = v384;
    }
  }
  v254 = v233;

  v255 = swift_allocObject(&unk_1004AEEC8, 24, 7);
  v256 = v387;
  swift_unknownObjectWeakInit(v255 + 16, v387);
  v257 = (uint64_t (**)(uint64_t))&v254[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v258 = *(_QWORD *)&v254[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v259 = *(_QWORD *)&v254[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v257 = sub_100150100;
  v257[1] = (uint64_t (*)(uint64_t))v255;
  sub_10002CA30(v258, v259);
  v260 = objc_opt_self(NSOperation);
  v261 = swift_dynamicCastObjCClass(v254, v260);
  v400 = v254;
  if (v261)
  {
    v263 = v261;
    v264 = swift_getObjectType(v261, v262);
    v265 = swift_conformsToProtocol2(v264, &protocol descriptor for PodcastsOperation);
    v267 = v265 ? v265 : 0;
    v268 = v265 ? v263 : 0;
    if (v268)
    {
      v269 = swift_getObjectType(v268, v266);
      v270 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v270 + 24) = v267;
      swift_unknownObjectWeakInit(v270 + 16, v268);
      v271 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v271 + 16, v256);
      v272 = swift_allocObject(&unk_1004AF008, 32, 7);
      *(_QWORD *)(v272 + 16) = v271;
      *(_QWORD *)(v272 + 24) = v270;
      v273 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v267 + 72);
      swift_unknownObjectRetain(v400);
      v274 = v400;
      swift_retain(v271);
      v275 = swift_retain(v270);
      v276 = v269;
      v254 = v400;
      v273(sub_1000456D4, v272, v276, v267, v275);
      v256 = v387;
      swift_release(v270);
      swift_release(v271);
      swift_release(v272);
      v277 = (objc_class *)type metadata accessor for BaseOperation();
      v415.receiver = v256;
      v415.super_class = v277;
      objc_msgSendSuper2(&v415, "addDependency:", v263);

    }
  }
  v278 = v256;

  v279 = swift_allocObject(&unk_1004AEEF0, 24, 7);
  v280 = (void *)v388;
  swift_unknownObjectWeakInit(v279 + 16, v388);
  v281 = (uint64_t (**)(uint64_t))&v278[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v282 = *(_QWORD *)&v278[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v283 = *(_QWORD *)&v278[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v281 = sub_1001500F8;
  v281[1] = (uint64_t (*)(uint64_t))v279;
  sub_10002CA30(v282, v283);
  v284 = objc_opt_self(NSOperation);
  v285 = swift_dynamicCastObjCClass(v278, v284);
  v404 = v278;
  if (v285)
  {
    v287 = v285;
    v288 = swift_getObjectType(v285, v286);
    v289 = swift_conformsToProtocol2(v288, &protocol descriptor for PodcastsOperation);
    v291 = v289 ? v289 : 0;
    v292 = v289 ? v287 : 0;
    if (v292)
    {
      v293 = swift_getObjectType(v292, v290);
      v294 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v294 + 24) = v291;
      swift_unknownObjectWeakInit(v294 + 16, v292);
      v295 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v295 + 16, v280);
      v296 = swift_allocObject(&unk_1004AEFE0, 32, 7);
      *(_QWORD *)(v296 + 16) = v295;
      *(_QWORD *)(v296 + 24) = v294;
      v297 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v291 + 72);
      swift_unknownObjectRetain(v278);
      v298 = v278;
      swift_retain(v295);
      v299 = swift_retain(v294);
      v297(sub_1000456D4, v296, v293, v291, v299);
      v280 = (void *)v388;
      swift_release(v294);
      swift_release(v295);
      swift_release(v296);
      v300 = (objc_class *)type metadata accessor for BaseOperation();
      v416.receiver = v280;
      v416.super_class = v300;
      objc_msgSendSuper2(&v416, "addDependency:", v287);

      v278 = v404;
    }
  }
  v301 = v280;

  v302 = swift_allocObject(&unk_1004AEF18, 24, 7);
  v303 = v392;
  swift_unknownObjectWeakInit(v302 + 16, v392);
  v304 = (uint64_t (**)(uint64_t))&v301[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v305 = *(_QWORD *)&v301[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v306 = *(_QWORD *)&v301[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v304 = sub_100150100;
  v304[1] = (uint64_t (*)(uint64_t))v302;
  sub_10002CA30(v305, v306);
  v307 = objc_opt_self(NSOperation);
  v308 = swift_dynamicCastObjCClass(v301, v307);
  if (v308)
  {
    v310 = v308;
    v311 = swift_getObjectType(v308, v309);
    v312 = swift_conformsToProtocol2(v311, &protocol descriptor for PodcastsOperation);
    v314 = v312 ? v312 : 0;
    v315 = v312 ? v310 : 0;
    if (v315)
    {
      v391 = (id)swift_getObjectType(v315, v313);
      v316 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v316 + 24) = v314;
      swift_unknownObjectWeakInit(v316 + 16, v315);
      v317 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v317 + 16, v303);
      v318 = swift_allocObject(&unk_1004AEFB8, 32, 7);
      *(_QWORD *)(v318 + 16) = v317;
      *(_QWORD *)(v318 + 24) = v316;
      v319 = *(void (**)(uint64_t (*)(), uint64_t, id, uint64_t, __n128))(v314 + 72);
      swift_unknownObjectRetain(v301);
      v320 = v301;
      swift_retain(v317);
      v321 = swift_retain(v316);
      v319(sub_1000456D4, v318, v391, v314, v321);
      v303 = v392;
      swift_release(v316);
      swift_release(v317);
      swift_release(v318);
      v322 = (objc_class *)type metadata accessor for BaseOperation();
      v417.receiver = v303;
      v417.super_class = v322;
      objc_msgSendSuper2(&v417, "addDependency:", v310);

    }
  }
  v323 = (char *)v303;
  v392 = v301;

  v324 = swift_allocObject(&unk_1004AEF40, 24, 7);
  v325 = v389;
  swift_unknownObjectWeakInit(v324 + 16, v389);
  v326 = (uint64_t (**)(uint64_t))&v323[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v327 = *(_QWORD *)&v323[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v328 = *(_QWORD *)&v323[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v326 = sub_10014FDA0;
  v326[1] = (uint64_t (*)(uint64_t))v324;
  sub_10002CA30(v327, v328);
  v329 = objc_opt_self(NSOperation);
  v330 = swift_dynamicCastObjCClass(v323, v329);
  if (v330)
  {
    v332 = v330;
    v333 = swift_getObjectType(v330, v331);
    v334 = swift_conformsToProtocol2(v333, &protocol descriptor for PodcastsOperation);
    if (v334)
      v336 = v334;
    else
      v336 = 0;
    if (v334)
      v337 = v332;
    else
      v337 = 0;
    if (v337)
    {
      v388 = swift_getObjectType(v337, v335);
      v338 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v338 + 24) = v336;
      swift_unknownObjectWeakInit(v338 + 16, v337);
      v339 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v339 + 16, v325);
      v340 = swift_allocObject(&unk_1004AEF90, 32, 7);
      *(_QWORD *)(v340 + 16) = v339;
      *(_QWORD *)(v340 + 24) = v338;
      v341 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v336 + 72);
      swift_unknownObjectRetain(v323);
      v342 = v323;
      v343 = v323;
      swift_retain(v339);
      v344 = swift_retain(v338);
      v341(sub_1000456D4, v340, v388, v336, v344);
      swift_release(v338);
      swift_release(v339);
      v345 = v340;
      v325 = v389;
      swift_release(v345);
      v346 = (objc_class *)type metadata accessor for BaseOperation();
      v418.receiver = v325;
      v418.super_class = v346;
      objc_msgSendSuper2(&v418, "addDependency:", v332);

      v323 = v342;
    }
  }
  v391 = v323;
  v347 = v325;

  v348 = v407;
  v349 = v396;
  ((void (*)(id, uint64_t, uint64_t))v405)(v407, v397, v396);
  v350 = (v395 + 32) & v394;
  v351 = swift_allocObject(&unk_1004AEF68, &v406[v350], v395 | 7);
  v353 = v398;
  v352 = v399;
  *(_QWORD *)(v351 + 16) = v398;
  *(_QWORD *)(v351 + 24) = v352;
  v393(v351 + v350, v348, v349);
  v354 = (uint64_t (**)(uint64_t))&v347[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v355 = *(_QWORD *)&v347[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v356 = *(_QWORD *)&v347[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
  *v354 = sub_100151284;
  v354[1] = (uint64_t (*)(uint64_t))v351;
  sub_10002CA20(v353, v352);
  sub_10002CA30(v355, v356);

  v408 = (char *)sub_10013E604();
  v357 = sub_10003F544((uint64_t *)&unk_100553780);
  v358 = swift_allocObject(v357, 120, 7);
  *(_OWORD *)(v358 + 16) = xmmword_1003CA230;
  v359 = v401;
  v360 = v402;
  v361 = v390;
  *(_QWORD *)(v358 + 32) = v401;
  *(_QWORD *)(v358 + 40) = v361;
  v363 = v403;
  v362 = v404;
  v364 = v384;
  v365 = v385;
  *(_QWORD *)(v358 + 48) = v403;
  *(_QWORD *)(v358 + 56) = v365;
  *(_QWORD *)(v358 + 64) = v360;
  *(_QWORD *)(v358 + 72) = v364;
  v366 = v400;
  *(_QWORD *)(v358 + 80) = v400;
  *(_QWORD *)(v358 + 88) = v362;
  v367 = v391;
  *(_QWORD *)(v358 + 96) = v392;
  *(_QWORD *)(v358 + 104) = v367;
  *(_QWORD *)(v358 + 112) = v347;
  v423[0] = v358;
  specialized Array._endMutation()(v358);
  v368 = v423[0];
  v399 = sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
  v407 = v359;
  v406 = v361;
  v405 = v363;
  v403 = v365;
  v402 = v360;
  v369 = v364;
  v370 = v366;
  v371 = v404;
  v372 = v392;
  v373 = v391;
  v374 = v347;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v368);
  v376 = v408;
  objc_msgSend(v408, "addOperations:waitUntilFinished:", isa, 0);

}

void sub_100146908(uint64_t a1, void (*a2)(char *), void (*a3)(char *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (**v21)(char *);
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v7 = sub_10003F544((uint64_t *)&unk_100564EB0);
  __chkstk_darwin(v7);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DownloadJob(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static Podcasts.areTranscriptsEnabled.getter(v13) & 1) != 0)
  {
    v15 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
    v16 = objc_msgSend(v15, "privateQueueContext");

    sub_10014FDF8(a4, (uint64_t)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DownloadJob);
    v17 = *(unsigned __int8 *)(v11 + 80);
    v18 = (v17 + 24) & ~v17;
    v19 = (v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = swift_allocObject(&unk_1004AF2B0, v19 + 16, v17 | 7);
    *(_QWORD *)(v20 + 16) = v16;
    sub_10013BE30((uint64_t)v14, v20 + v18, type metadata accessor for DownloadJob);
    v21 = (void (**)(char *))(v20 + v19);
    *v21 = a2;
    v21[1] = a3;
    aBlock[4] = sub_1001518E0;
    v27 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100027AF8;
    aBlock[3] = &unk_1004AF2C8;
    v22 = _Block_copy(aBlock);
    v23 = v27;
    v24 = v16;
    swift_retain(a3);
    swift_release(v23);
    objc_msgSend(v24, "performBlock:", v22);
    _Block_release(v22);

  }
  else
  {
    v25 = type metadata accessor for TranscriptRequest(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v9, 1, 1, v25);
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    a2(v9);
    sub_100007A28((uint64_t)v9, (uint64_t *)&unk_100564EB0);
  }
}

uint64_t sub_100146B38(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  NSString v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *);

  v25 = a4;
  v26 = a3;
  v24 = sub_10003F544((uint64_t *)&unk_100564EB0);
  __chkstk_darwin(v24);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AssetLifetime(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NetworkTaskPriority(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544(&qword_1005533C8);
  __chkstk_darwin(v15);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DownloadJob(0);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(a1, "episodeForUuid:", v18);

  if (v19)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for NetworkTaskPriority.background(_:), v11);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for AssetLifetime.opportunistic(_:), v7);
    v20 = v19;
    MTEpisode.transcriptRequest(priority:lifetime:)(v14, v10);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    v21 = type metadata accessor for TranscriptRequest(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v17, 1, 1, v21);
  }
  sub_100007A64((uint64_t)v17, (uint64_t)v6, &qword_1005533C8);
  swift_storeEnumTagMultiPayload(v6, v24, 0);
  v26(v6);

  sub_100007A28((uint64_t)v6, (uint64_t *)&unk_100564EB0);
  return sub_100007A28((uint64_t)v17, &qword_1005533C8);
}

uint64_t sub_100146D9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v19 = a2;
  v3 = type metadata accessor for TimeBombedTranscriptProvider(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_1005533C8);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TranscriptRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007A64(a1, (uint64_t)v9, &qword_1005533C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    result = sub_100007A28((uint64_t)v9, &qword_1005533C8);
  }
  else
  {
    v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    static TimeBombedTranscriptProvider.background.getter(v15);
    v16 = TimeBombedTranscriptProvider.prefetch(request:)(v13);
    swift_release(v16);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v17 = v19;
  *v19 = 0;
  *((_BYTE *)v17 + 8) = 0;
  return result;
}

void sub_100146F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  id v19;
  _QWORD aBlock[5];
  _QWORD *v21;

  v7 = type metadata accessor for DownloadJob(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = swift_allocObject(&unk_1004AF238, 32, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = (void *)objc_opt_self(MTDB);
  v12 = objc_msgSend(v11, "sharedInstance", swift_retain(a3).n128_f64[0]);
  v13 = objc_msgSend(v12, "privateQueueContext");

  sub_10014FDF8(a4, (uint64_t)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DownloadJob);
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = (v14 + 40) & ~v14;
  v16 = (_QWORD *)swift_allocObject(&unk_1004AF260, v15 + v9, v14 | 7);
  v16[2] = sub_10003A874;
  v16[3] = v10;
  v16[4] = v13;
  sub_10013BE30((uint64_t)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v16 + v15, type metadata accessor for DownloadJob);
  aBlock[4] = sub_1001516FC;
  v21 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004AF278;
  v17 = _Block_copy(aBlock);
  v18 = v21;
  v19 = v13;
  swift_release(v18);
  objc_msgSend(v19, "performBlock:", v17);
  _Block_release(v17);

}

uint64_t sub_1001470E4(void (*a1)(uint64_t, _QWORD), uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  NSString v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(uint64_t, _QWORD);
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  char *v57;

  v5 = sub_10003F544(&qword_10055D840);
  v6 = __chkstk_darwin(v5);
  v54 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v57 = (char *)&v50 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - v10;
  v12 = type metadata accessor for ArtworkModel(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v55 = (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v50 = (uint64_t)&v50 - v17;
  v18 = __chkstk_darwin(v16);
  v53 = (uint64_t)&v50 - v19;
  v20 = __chkstk_darwin(v18);
  v52 = (uint64_t)&v50 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v50 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v50 - v25;
  type metadata accessor for DownloadJob(0);
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(a3, "episodeForUuid:", v27);

  if (!v28)
    return ((uint64_t (*)(_QWORD *, _QWORD))a1)(_swiftEmptyArrayStorage, 0);
  MTEpisode.artworkModel.getter();
  v51 = v13;
  v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v29 = v12;
  if (v56(v11, 1, v12) == 1)
  {
    sub_100007A28((uint64_t)v11, &qword_10055D840);
    v30 = _swiftEmptyArrayStorage;
    v31 = a1;
    v32 = (uint64_t)v57;
  }
  else
  {
    sub_10013BE30((uint64_t)v11, (uint64_t)v26, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    sub_10014FDF8((uint64_t)v26, (uint64_t)v24, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v30 = (_QWORD *)sub_10027ADEC(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v35 = v30[2];
    v34 = v30[3];
    v32 = (uint64_t)v57;
    if (v35 >= v34 >> 1)
      v30 = (_QWORD *)sub_10027ADEC(v34 > 1, v35 + 1, 1, (unint64_t)v30);
    v30[2] = v35 + 1;
    sub_10013BE30((uint64_t)v24, (uint64_t)v30+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v35, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    sub_10003F970((uint64_t)v26, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v31 = a1;
  }
  v36 = objc_msgSend(v28, "podcast");
  if (v36)
  {
    v37 = v36;
    MTEpisode.artworkModel.getter();
    if (v56((char *)v32, 1, v29) == 1)
    {
      v38 = sub_100007A28(v32, &qword_10055D840);
      v39 = v51;
    }
    else
    {
      v40 = v52;
      sub_10013BE30(v32, v52, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      sub_10014FDF8(v40, v53, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
      v39 = v51;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v30 = (_QWORD *)sub_10027ADEC(0, v30[2] + 1, 1, (unint64_t)v30);
      v43 = v30[2];
      v42 = v30[3];
      if (v43 >= v42 >> 1)
        v30 = (_QWORD *)sub_10027ADEC(v42 > 1, v43 + 1, 1, (unint64_t)v30);
      v30[2] = v43 + 1;
      sub_10013BE30(v53, (uint64_t)v30+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v43, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v38 = sub_10003F970(v52, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    }
    v44 = (uint64_t)v54;
    MTPodcast.uberBackgroundArtworkModel.getter(v38);
    if (v56((char *)v44, 1, v29) == 1)
    {

      sub_100007A28(v44, &qword_10055D840);
    }
    else
    {
      v45 = v44;
      v46 = v50;
      sub_10013BE30(v45, v50, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      sub_10014FDF8(v46, v55, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
        v30 = (_QWORD *)sub_10027ADEC(0, v30[2] + 1, 1, (unint64_t)v30);
      v48 = v30[2];
      v47 = v30[3];
      if (v48 >= v47 >> 1)
        v30 = (_QWORD *)sub_10027ADEC(v47 > 1, v48 + 1, 1, (unint64_t)v30);
      v30[2] = v48 + 1;
      sub_10013BE30(v55, (uint64_t)v30+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v48, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);

      sub_10003F970(v46, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    }
  }
  else
  {

  }
  v49 = swift_bridgeObjectRetain(v30);
  v31(v49, 0);
  return swift_bridgeObjectRelease_n(v30, 2);
}

uint64_t sub_10014765C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t result;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD v45[5];
  uint64_t v46;

  v38 = a2;
  v4 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ArtworkRequest(0);
  v41 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v34 - v11;
  v13 = type metadata accessor for ArtworkModel(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for LibraryImageProvider(0);
  v37 = *(_QWORD *)(v46 - 8);
  v17 = __chkstk_darwin(v46);
  v19 = *a1;
  v20 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static LibraryImageProvider.background.getter(v17);
  v21 = v19;
  v22 = *(_QWORD *)(v19 + 16);
  if (v22)
  {
    v35 = v21;
    v36 = v2;
    v23 = v21 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v40 = *(_QWORD *)(v14 + 72);
    swift_bridgeObjectRetain(v21);
    v44 = v20;
    v39 = v12;
    v24 = (uint64_t)v16;
    v25 = v7;
    v26 = v39;
    do
    {
      v27 = sub_10014FDF8(v23, v24, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v28 = ArtworkModel.preferredRequest.getter(v27);
      v29 = static Logger.artwork.getter(v28);
      v30 = static os_log_type_t.info.getter(v29);
      SignpostAndLogTrace(domain:level:)(v45, v6, v30);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v43);
      Traceable.traced(by:)(v45, v25, &protocol witness table for ArtworkRequest);
      sub_10003D380(v45);
      v31 = *(void (**)(char *, uint64_t))(v41 + 8);
      v31(v10, v25);
      ImageProvider.prefetch(artwork:)(v26, v46, &protocol witness table for LibraryImageProvider);
      v31(v26, v25);
      sub_10003F970(v24, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v23 += v40;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease(v35);
    v20 = v44;
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v20, v46);
  v33 = v38;
  *v38 = 0;
  *((_BYTE *)v33 + 8) = 0;
  return result;
}

void sub_1001478F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __n128 v17;
  double v18;
  uint64_t (*v19)(__n128);
  uint64_t v20;
  __n128 v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (**v31)(uint64_t, char);
  void *v32;
  char *v33;
  id v34;
  char *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[5];
  char *v42;

  v39 = a6;
  v40 = a7;
  v38 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v38 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v38);
  v35 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = swift_allocObject(&unk_1004AF1C0, 32, 7);
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  v15 = (uint64_t *)(a5 + *(int *)(type metadata accessor for DownloadJob(0) + 20));
  v16 = v15[1];
  v37 = *v15;
  v17 = swift_retain(a4);
  v18 = static Date.timeIntervalSinceReferenceDate.getter(v17);
  v19 = *(uint64_t (**)(__n128))(v13 + 16);
  v20 = *(_QWORD *)(v13 + 24);
  v21 = swift_retain(v20);
  v22 = (void *)v19(v21);
  v36 = v22;
  swift_release(v20);
  v23 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v39, v38);
  v24 = *(unsigned __int8 *)(v11 + 80);
  v25 = (v24 + 40) & ~v24;
  v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = (char *)swift_allocObject(&unk_1004AF1E8, v28 + 8, v24 | 7);
  v30 = v37;
  *((_QWORD *)v29 + 2) = v22;
  *((_QWORD *)v29 + 3) = v30;
  *((_QWORD *)v29 + 4) = v16;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v29[v25], v35, v23);
  *(double *)&v29[v26] = v18;
  v31 = (uint64_t (**)(uint64_t, char))&v29[v27];
  *v31 = sub_100150154;
  v31[1] = (uint64_t (*)(uint64_t, char))v14;
  *(_QWORD *)&v29[v28] = v40;
  aBlock[4] = sub_100151500;
  v42 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004AF200;
  v32 = _Block_copy(aBlock);
  v33 = v42;
  v34 = v36;
  swift_bridgeObjectRetain(v16);
  swift_retain(v14);
  swift_release(v33);
  objc_msgSend(v34, "performBlock:", v32);
  _Block_release(v32);
  swift_release(v14);

}

void sub_100147B18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)(uint64_t, char);
  uint64_t v27;
  uint64_t (*v28)(__n128);
  __n128 v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[5];
  _QWORD *v42;

  v38 = a6;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = swift_allocObject(&unk_1004AF120, 32, 7);
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  v18 = (uint64_t *)(a5 + *(int *)(type metadata accessor for DownloadJob(0) + 20));
  v20 = *v18;
  v19 = v18[1];
  v39 = v20;
  v40 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a7, v12);
  v21 = *(unsigned __int8 *)(v13 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v14 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1004AF148, v23 + 16, v21 | 7);
  v25 = v38;
  *(_QWORD *)(v24 + 16) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v24 + v22, v15, v12);
  v26 = (uint64_t (**)(uint64_t, char))(v24 + v23);
  *v26 = sub_100150154;
  v26[1] = (uint64_t (*)(uint64_t, char))v17;
  v28 = *(uint64_t (**)(__n128))(v16 + 16);
  v27 = *(_QWORD *)(v16 + 24);
  swift_retain(a4);
  swift_retain(v25);
  v29 = swift_retain(v27);
  v30 = (void *)v28(v29);
  swift_release(v27);
  v31 = (_QWORD *)swift_allocObject(&unk_1004AF170, 56, 7);
  v32 = v39;
  v33 = v40;
  v31[2] = v30;
  v31[3] = v32;
  v31[4] = v33;
  v31[5] = sub_100151380;
  v31[6] = v24;
  aBlock[4] = sub_100151410;
  v42 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004AF188;
  v34 = _Block_copy(aBlock);
  v35 = v42;
  v36 = v30;
  swift_bridgeObjectRetain(v33);
  swift_retain(v24);
  swift_release(v35);
  objc_msgSend(v36, "performBlock:", v34);
  _Block_release(v34);
  swift_release(v24);

}

uint64_t sub_100147D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD, _QWORD);
  uint64_t v40;
  uint64_t v41;

  v38 = a5;
  v39 = a4;
  v36 = a3;
  v37 = a2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_1005533C0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100007A64(a1, (uint64_t)v16, &qword_1005533C0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v14);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v37 = v6;
    v18 = *v16;
    static Logger.downloads.getter(EnumCaseMultiPayload);
    swift_errorRetain(v18);
    v19 = swift_errorRetain(v18);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = v7;
    if (os_log_type_enabled(v20, v21))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v40 = v18;
      v41 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_errorRetain(v18);
      v25 = String.init<A>(describing:)(&v40, &type metadata for EpisodeStorageError);
      v27 = v26;
      v40 = sub_10003D274(v25, v26, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease(v27);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to fetch job asset URL for iPod library check: %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      swift_errorRelease(v18);
    }
    else
    {
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      swift_errorRelease(v18);

    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v37);
  }
  else
  {
    v28 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v11 + 32))(v13, v16, v10);
    v29 = URL.path.getter(v28);
    v31 = v30;
    v32 = URL.path.getter(v29);
    v34 = v33;
    sub_100148468(v29, v31, v32, v33);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return v39(0, 0);
}

void sub_100148044(void (*a1)(char *)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;

  v4 = sub_10003F544(&qword_1005533B0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_log_type_t.default.getter(v5);
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v10 = (void *)static OS_os_log.downloads.getter(v9);
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v10, "Download completed successfully", 31, 2, _swiftEmptyArrayStorage);

  v11 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v11, "postNotificationName:object:", PFMediaDownloadDidCompleteNotification, 0);

  if (a1)
  {
    swift_storeEnumTagMultiPayload(v7, v4, 0);
    a1(v7);
    sub_100007A28((uint64_t)v7, &qword_1005533B0);
  }
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
}

uint64_t sub_1001481A0(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void (*v22)(_QWORD *);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  void (*v31)(_QWORD *);
  uint64_t v32;
  _QWORD v33[3];
  char v34[8];

  v30[0] = a4;
  v30[1] = a3;
  v31 = a2;
  v5 = sub_10003F544(&qword_1005533B0);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for MoveOperationError(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static os_log_type_t.error.getter(v9);
  v13 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v14 = (void *)static OS_os_log.downloads.getter(v13);
  v15 = sub_10003F544(&qword_1005559A0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1003CA200;
  swift_getErrorValue(a1, v34, v33);
  v17 = Error.localizedDescription.getter(v33[1], v33[2]);
  v19 = v18;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10003E198();
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v14, "Finalize job failed with error %{public}s", 41, 2, v16);

  swift_bridgeObjectRelease(v16);
  v32 = a1;
  swift_errorRetain(a1);
  v20 = sub_10003F544((uint64_t *)&unk_10055A340);
  result = swift_dynamicCast(v11, &v32, v20, v8, 6);
  if ((_DWORD)result)
  {
    result = sub_10003F970((uint64_t)v11, type metadata accessor for MoveOperationError);
    v22 = v31;
    if (!v31)
      return result;
    v23 = (char *)v7 + *(int *)(sub_10003F544(&qword_1005533B8) + 48);
    *v7 = a1;
    v24 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    swift_errorRetain(a1);
    v22(v7);
  }
  else
  {
    v25 = v30[0];
    v26 = v31;
    if (!v31)
      return result;
    v27 = (char *)v7 + *(int *)(sub_10003F544(&qword_1005533B8) + 48);
    *v7 = a1;
    v28 = type metadata accessor for URL(0);
    v29 = *(_QWORD *)(v28 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v27, v25, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v28);
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    swift_errorRetain(a1);
    v26(v7);
  }
  return sub_100007A28((uint64_t)v7, &qword_1005533B0);
}

uint64_t sub_100148468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  void *v24;
  void *v25;
  char *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  double v38;
  id v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];

  v55 = a3;
  v56 = a4;
  v6 = type metadata accessor for Date(0);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  __chkstk_darwin(v6);
  v48 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BugReportFrequency(0);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  __chkstk_darwin(v8);
  v51 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BugReport.Domain(0);
  v45 = *(_QWORD *)(v10 - 8);
  v46 = (_QWORD *)v10;
  __chkstk_darwin(v10);
  v47 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for BugReport.ErrorKind(0);
  v12 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PodcastsSystem(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1;
  v58[0] = a1;
  v58[1] = a2;
  v20 = a2;
  strcpy((char *)v61, "ipod-library");
  BYTE5(v61[1]) = 0;
  HIWORD(v61[1]) = -5120;
  v21 = sub_100150A4C();
  v22 = sub_100150A90();
  result = BidirectionalCollection<>.starts<A>(with:)(v61, &type metadata for String, &type metadata for String, v21, v22);
  if ((result & 1) != 0)
  {
    v24 = *(void **)(v54 + OBJC_IVAR____TtC8Podcasts11JobPipeline_analyticsChannel);
    type metadata accessor for AnalyticsEvent(0);
    swift_unknownObjectRetain(v24);
    v43 = v19;
    v25 = (void *)static AnalyticsEvent.downloadedFileHasiPodLibraryURL(discoveryPoint:path:source:)(0x64616F6C6E776F44, 0xE800000000000000, v19, a2, v55, v56);
    objc_msgSend(v24, "sendEvent:", v25);
    swift_unknownObjectRelease(v24);

    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for PodcastsSystem.downloads(_:), v15);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for BugReport.ErrorKind.downloadediPodLibraryFile(_:), v44);
    v26 = v47;
    (*(void (**)(char *, _QWORD, _QWORD *))(v45 + 104))(v47, enum case for BugReport.Domain.podcasts(_:), v46);
    v27 = objc_allocWithZone((Class)type metadata accessor for BugReport(0));
    v47 = (char *)BugReport.init(domain:system:errorKind:forceSubmissionAttempt:)(v26, v18, v14, 0);
    sub_10000A520(v54 + OBJC_IVAR____TtC8Podcasts11JobPipeline_bugReporter, (uint64_t)v58);
    v28 = v59;
    v54 = v60;
    v46 = sub_10003A834(v58, v59);
    v29 = v51;
    v30 = v52;
    v31 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v51, enum case for BugReportFrequency.daily(_:), v53);
    v32 = sub_10003F544(&qword_100559A90);
    inited = swift_initStackObject(v32, &v57);
    *(_OWORD *)(inited + 16) = xmmword_1003CA240;
    v61[0] = 0x6E696769724FLL;
    v61[1] = 0xE600000000000000;
    AnyHashable.init<A>(_:)(v61, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = v43;
    *(_QWORD *)(inited + 80) = v20;
    strcpy((char *)v61, "Destination");
    HIDWORD(v61[1]) = -352321536;
    swift_bridgeObjectRetain(v20);
    AnyHashable.init<A>(_:)(v61, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 168) = &type metadata for String;
    v34 = v56;
    *(_QWORD *)(inited + 144) = v55;
    *(_QWORD *)(inited + 152) = v34;
    v61[0] = 1701669204;
    v61[1] = 0xE400000000000000;
    swift_bridgeObjectRetain(v34);
    v35 = AnyHashable.init<A>(_:)(v61, &type metadata for String, &protocol witness table for String);
    v36 = v48;
    v37 = Date.init()(v35);
    v38 = Date.timeIntervalSince1970.getter(v37);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v50);
    v39 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v38);
    *(_QWORD *)(inited + 240) = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
    *(_QWORD *)(inited + 216) = v39;
    v40 = sub_10013842C(inited);
    v41 = v47;
    dispatch thunk of BugReporter.submit(bugReport:maximumFrequency:userInfo:)(v47, v29, v40, v28, v54);

    swift_bridgeObjectRelease(v40);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v31);
    return sub_10003D380(v58);
  }
  return result;
}

void sub_100148918(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  id v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, char *, uint64_t);
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  objc_class *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (**v63)@<X0>(char *@<X0>, uint64_t@<X8>);
  double v64;
  char *v65;
  uint64_t v66;
  id v67;
  uint64_t (**v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ObjectType;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v85;
  __n128 v86;
  objc_class *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (**v90)(uint64_t);
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  Class isa;
  id v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  Class v103;
  uint64_t v104;
  char *v105;
  id v106;
  id v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  __int128 v118;
  uint64_t v119;
  objc_super v120;
  uint64_t v121;
  objc_super v122;
  objc_super v123;

  v116 = a6;
  *(_QWORD *)&v118 = a5;
  v106 = a4;
  v111 = a3;
  v112 = a1;
  v113 = a2;
  v8 = type metadata accessor for DownloadJob(0);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v114 = *(_QWORD *)(v8 - 8);
  v115 = v9;
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  v110 = *(_QWORD *)(v12 - 8);
  v14 = v110;
  v15 = __chkstk_darwin(v12);
  v16 = (char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v104 - v17;
  v19 = a1 + *(int *)(v8 + 36);
  v20 = v19 + *(int *)(type metadata accessor for EpisodeMetadata(0) + 44);
  v117 = (char *)URL.pathExtension.getter();
  v108 = v21;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v22(v18, a3, v12);
  v22(v16, v20, v12);
  v23 = v119;
  v24 = *(void **)(v119 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  v25 = v106;
  v107 = v106;
  v26 = v24;
  OS_dispatch_queue.sync<A>(execute:)(v11, sub_10014FD30, v23, v8);

  v27 = *(int *)(v8 + 20);
  v28 = (uint64_t)v11;
  v109 = v11;
  v29 = (_QWORD *)((char *)v11 + v27);
  v31 = *v29;
  v30 = v29[1];
  swift_bridgeObjectRetain(v30);
  sub_10003F970(v28, type metadata accessor for DownloadJob);
  v32 = (objc_class *)type metadata accessor for ValidateOperation(0);
  v33 = (char *)objc_allocWithZone(v32);
  v34 = &v33[OBJC_IVAR____TtC8Podcasts17ValidateOperation_input];
  *(_QWORD *)v34 = 0;
  v34[8] = 2;
  v22(&v33[OBJC_IVAR____TtC8Podcasts17ValidateOperation_source], (uint64_t)v18, v12);
  v22(&v33[OBJC_IVAR____TtC8Podcasts17ValidateOperation_origin], (uint64_t)v16, v12);
  v35 = &v33[OBJC_IVAR____TtC8Podcasts17ValidateOperation_originalExtension];
  v36 = v108;
  *(_QWORD *)v35 = v117;
  *((_QWORD *)v35 + 1) = v36;
  *(_QWORD *)&v33[OBJC_IVAR____TtC8Podcasts17ValidateOperation_response] = v25;
  v37 = &v33[OBJC_IVAR____TtC8Podcasts17ValidateOperation_episodeUuid];
  *(_QWORD *)v37 = v31;
  *((_QWORD *)v37 + 1) = v30;
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v38 = v107;
  v39 = v33;
  *(_QWORD *)&v39[OBJC_IVAR____TtC8Podcasts17ValidateOperation_log] = static OS_os_log.default.getter();

  v123.receiver = v39;
  v123.super_class = v32;
  v117 = (char *)objc_msgSendSuper2(&v123, "init");

  v40 = v110;
  v41 = *(void (**)(char *, uint64_t))(v110 + 8);
  v105 = v16;
  v41(v16, v12);
  v41(v18, v12);
  v22(v18, v111, v12);
  v22(v16, v113, v12);
  v42 = (uint64_t)v109;
  sub_10014FDF8(v112, (uint64_t)v109, type metadata accessor for DownloadJob);
  v43 = *(unsigned __int8 *)(v40 + 80);
  v44 = (v43 + 16) & ~v43;
  v45 = (v13 + v43 + v44) & ~v43;
  v46 = (v13 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v47 = *(unsigned __int8 *)(v114 + 80);
  v48 = (v47 + v46 + 16) & ~v47;
  v49 = (v115 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = swift_allocObject(&unk_1004AEC70, v49 + 8, v43 | v47 | 7);
  v51 = v50 + v44;
  v52 = *(void (**)(uint64_t, char *, uint64_t))(v40 + 32);
  v52(v51, v18, v12);
  v52(v50 + v45, v105, v12);
  v53 = (_QWORD *)(v50 + v46);
  v54 = v118;
  v55 = v116;
  *v53 = v118;
  v53[1] = v55;
  sub_10013BE30(v42, v50 + v48, type metadata accessor for DownloadJob);
  v56 = v119;
  *(_QWORD *)(v50 + v49) = v119;
  v57 = v56;
  v58 = (objc_class *)sub_10003F544(&qword_100553358);
  v59 = objc_allocWithZone(v58);
  v60 = (char *)v59 + *(_QWORD *)((swift_isaMask & *v59) + 0x180);
  v61 = sub_10003F544(&qword_100564EA0);
  v62 = v55;
  swift_storeEnumTagMultiPayload(v60, v61, 2);
  v63 = (uint64_t (**)@<X0>(char *@<X0>, uint64_t@<X8>))((char *)v59
                                                                + *(_QWORD *)((swift_isaMask & *v59) + 0x188));
  *v63 = sub_100150934;
  v63[1] = (uint64_t (*)@<X0>(char *@<X0>, uint64_t@<X8>))v50;
  sub_10002CA20(v54, v55);
  v122.receiver = v59;
  v122.super_class = v58;
  *(_QWORD *)&v64 = swift_retain(v57).n128_u64[0];
  v65 = (char *)objc_msgSendSuper2(&v122, "init", v64);
  v66 = swift_allocObject(&unk_1004AEC98, 24, 7);
  swift_unknownObjectWeakInit(v66 + 16, v65);
  v67 = v117;
  v68 = (uint64_t (**)(uint64_t))&v117[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v69 = *(_QWORD *)&v117[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v70 = *(_QWORD *)&v117[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v68 = sub_1001509F0;
  v68[1] = (uint64_t (*)(uint64_t))v66;
  sub_10002CA30(v69, v70);
  v71 = objc_opt_self(NSOperation);
  v72 = v67;
  v73 = swift_dynamicCastObjCClass(v67, v71);
  if (v73)
  {
    v75 = v73;
    ObjectType = swift_getObjectType(v73, v74);
    v77 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
    if (v77)
      v79 = v77;
    else
      v79 = 0;
    if (v77)
      v80 = v75;
    else
      v80 = 0;
    if (v80)
    {
      v115 = swift_getObjectType(v80, v78);
      v81 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v81 + 24) = v79;
      swift_unknownObjectWeakInit(v81 + 16, v80);
      v82 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v82 + 16, v65);
      v83 = swift_allocObject(&unk_1004AECE8, 32, 7);
      *(_QWORD *)(v83 + 16) = v82;
      *(_QWORD *)(v83 + 24) = v81;
      v84 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v79 + 72);
      v85 = (id)swift_unknownObjectRetain(v72);
      swift_retain(v82);
      v86 = swift_retain(v81);
      v84(sub_1000456D4, v83, v115, v79, v86);
      swift_release(v81);
      swift_release(v82);
      swift_release(v83);
      v87 = (objc_class *)type metadata accessor for BaseOperation();
      v120.receiver = v65;
      v120.super_class = v87;
      objc_msgSendSuper2(&v120, "addDependency:", v75);

      v72 = v117;
    }
  }
  v88 = swift_allocObject(&unk_1004AECC0, 32, 7);
  v89 = v118;
  *(_QWORD *)(v88 + 16) = v118;
  *(_QWORD *)(v88 + 24) = v62;
  v90 = (uint64_t (**)(uint64_t))&v65[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v91 = *(_QWORD *)&v65[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v92 = *(_QWORD *)&v65[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
  *v90 = sub_1001509FC;
  v90[1] = (uint64_t (*)(uint64_t))v88;
  sub_10002CA20(v89, v62);
  sub_10002CA30(v91, v92);
  v93 = sub_10013E604();
  v94 = sub_10003F544((uint64_t *)&unk_100553780);
  v95 = swift_allocObject(v94, 40, 7);
  v118 = xmmword_1003CA250;
  *(_OWORD *)(v95 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v95 + 32) = v72;
  v121 = v95;
  specialized Array._endMutation()(v95);
  v96 = v121;
  sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
  v97 = v72;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v96);
  objc_msgSend(v93, "addOperations:waitUntilFinished:", isa, 1);

  v99 = sub_10013E604();
  v100 = swift_allocObject(v94, 40, 7);
  *(_OWORD *)(v100 + 16) = v118;
  *(_QWORD *)(v100 + 32) = v65;
  v121 = v100;
  specialized Array._endMutation()(v100);
  v101 = v121;
  v102 = v65;
  v103 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v101);
  objc_msgSend(v99, "addOperations:waitUntilFinished:", v103, 0);

}

uint64_t sub_100149090@<X0>(char *a1@<X0>, uint64_t a2@<X2>, void (*a3)(uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _BOOL8 v21;
  char *v22;
  uint64_t v23;
  uint64_t (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t);
  uint64_t v60;
  Swift::String v61;
  void *object;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  void (*v80)(uint64_t);
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;

  v80 = a3;
  v73 = a6;
  v74 = a5;
  v77 = a4;
  v78 = a2;
  v79 = a1;
  v83 = a7;
  v7 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v7);
  v9 = (_QWORD **)((char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_10003F544(&qword_100553360);
  __chkstk_darwin(v75);
  v76 = (uint64_t *)((char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10003F544(&qword_100553368);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v70 - v19;
  v21 = URL.isPackagedMedia()();
  if (v21)
  {
    v22 = &v20[*(int *)(v15 + 48)];
    v23 = type metadata accessor for ValidateOperation.Result(0);
    v24 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 16);
    v25 = v24(v20, &v79[*(int *)(v23 + 20)], v10);
    v26 = URL.lastPathComponent.getter(v25);
    v28 = v27;
    URL.appendingPathComponent(_:)(v26, v27);
    swift_bridgeObjectRelease(v28);
    v29 = v80;
    if (v80)
    {
      v30 = *(int *)(v15 + 48);
      v31 = (uint64_t)v76;
      v32 = (char *)v76 + v30;
      v24((char *)v76, v20, v10);
      v24(v32, v22, v10);
      swift_storeEnumTagMultiPayload(v31, v75, 0);
      v29(v31);
      sub_100007A28(v31, &qword_100553360);
    }
    result = sub_100007A28((uint64_t)v20, &qword_100553368);
    v34 = v83;
  }
  else
  {
    v70 = v9;
    v71 = v10;
    v35 = v79;
    v72 = v7;
    v36 = *(_QWORD *)v79;
    v37 = *((_QWORD *)v79 + 1);
    v38 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000) == 0)
      v38 = *(_QWORD *)v79 & 0xFFFFFFFFFFFFLL;
    if (v38)
    {
      v39 = &v18[*(int *)(v15 + 48)];
      v40 = (char *)v35 + *(int *)(type metadata accessor for ValidateOperation.Result(0) + 20);
      v41 = v71;
      v73 = *(char **)(v11 + 16);
      ((void (*)(char *, char *, uint64_t))v73)(v18, v40, v71);
      URL.appendingPathComponent(_:)(*(_QWORD *)(v74 + *(int *)(v72 + 20)), *(_QWORD *)(v74 + *(int *)(v72 + 20) + 8));
      v79 = v39;
      URL.appendingPathExtension(_:)(v36, v37);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v41);
      v42 = v80;
      if (v80)
      {
        v43 = *(int *)(v15 + 48);
        v44 = (uint64_t)v76;
        v45 = (char *)v76 + v43;
        v46 = (void (*)(char *, _QWORD *, uint64_t))v73;
        ((void (*)(uint64_t *, char *, uint64_t))v73)(v76, v18, v41);
        v46(v45, v79, v41);
        swift_storeEnumTagMultiPayload(v44, v75, 0);
        v42(v44);
        sub_100007A28(v44, &qword_100553360);
      }
      result = sub_100007A28((uint64_t)v18, &qword_100553368);
    }
    else
    {
      v47 = static os_log_type_t.error.getter(v21);
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v48 = (void *)static OS_os_log.downloads.getter();
      v49 = sub_10003F544(&qword_1005559A0);
      v50 = swift_allocObject(v49, 72, 7);
      *(_OWORD *)(v50 + 16) = xmmword_1003CA200;
      v51 = v73;
      v52 = *(id *)&v73[OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue];
      v53 = v70;
      v54 = v51;
      v55 = v72;
      OS_dispatch_queue.sync<A>(execute:)(v70, sub_10014FD30, v54, v72);

      v56 = (_QWORD *)((char *)v53 + *(int *)(v55 + 20));
      v58 = *v56;
      v57 = v56[1];
      swift_bridgeObjectRetain(v57);
      sub_10003F970((uint64_t)v53, type metadata accessor for DownloadJob);
      *(_QWORD *)(v50 + 56) = &type metadata for String;
      *(_QWORD *)(v50 + 64) = sub_10003E198();
      *(_QWORD *)(v50 + 32) = v58;
      *(_QWORD *)(v50 + 40) = v57;
      os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "No file extension in episode url, episode uuid: %{public}s. Downloaded file most likely will not be playable.", 109, 2, v50);

      result = swift_bridgeObjectRelease(v50);
      v59 = v80;
      if (v80)
      {
        v81 = 0;
        v82 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease(v82);
        v81 = 0xD000000000000021;
        v82 = 0x800000010042F270;
        type metadata accessor for EpisodeMetadata(0);
        v60 = sub_100026844(&qword_100553370, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v71, v60);
        object = v61._object;
        String.append(_:)(v61);
        swift_bridgeObjectRelease(object);
        v63 = v81;
        v64 = v82;
        v65 = sub_100150A08();
        v66 = swift_allocError(&type metadata for PostflightError, v65, 0, 0);
        *v67 = v63;
        v67[1] = v64;
        v68 = v75;
        v69 = (uint64_t)v76;
        *v76 = v66;
        swift_storeEnumTagMultiPayload(v69, v68, 1);
        v59(v69);
        result = sub_100007A28(v69, &qword_100553360);
      }
    }
    v34 = v83;
  }
  *(_QWORD *)v34 = 0;
  *(_BYTE *)(v34 + 8) = 0;
  return result;
}

uint64_t sub_1001495D8(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[3];
  _BYTE v17[8];

  v4 = sub_10003F544(&qword_100553360);
  v5 = __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = static os_log_type_t.error.getter(v5);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v9 = (void *)static OS_os_log.downloads.getter();
  v10 = sub_10003F544(&qword_1005559A0);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1003CA200;
  swift_getErrorValue(a1, v17, v16);
  v12 = Error.localizedDescription.getter(v16[1], v16[2]);
  v14 = v13;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_10003E198();
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Validation failed with error %{public}s", 39, 2, v11);

  result = swift_bridgeObjectRelease(v11);
  if (a2)
  {
    *v7 = a1;
    swift_storeEnumTagMultiPayload(v7, v4, 1);
    swift_errorRetain(a1);
    a2(v7);
    return sub_100007A28((uint64_t)v7, &qword_100553360);
  }
  return result;
}

id sub_100149760(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *, uint64_t, uint64_t, uint64_t);
  objc_class *v14;
  char *v15;
  char *v16;
  void (**v17)(uint64_t *, uint64_t, uint64_t, uint64_t);
  char *v18;
  id v19;
  uint64_t v20;
  objc_class *v21;
  char *v22;
  char *v23;
  uint64_t (**v24)(uint64_t *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  void (**v32)(uint64_t *, uint64_t, void (*)(uint64_t, char *, uint64_t), uint64_t);
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_class *v37;
  _QWORD *v38;
  void (**v39)(uint64_t *, uint64_t, uint64_t, uint64_t);
  _QWORD *v40;
  id v41;
  uint64_t v42;
  objc_class *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t (**v47)(uint64_t *, uint64_t, uint64_t);
  id v48;
  uint64_t v49;
  objc_class *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t (**v54)(uint64_t, void (*)(uint64_t *), uint64_t);
  id v55;
  uint64_t v56;
  uint64_t inited;
  uint64_t v58;
  char *v59;
  char *v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t (**v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ObjectType;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  void (*v82)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (**v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  void (*v105)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v106;
  __n128 v107;
  uint64_t v108;
  objc_class *v109;
  char *v110;
  uint64_t v111;
  uint64_t (**v112)(uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v129;
  __n128 v130;
  uint64_t v131;
  objc_class *v132;
  char *v133;
  uint64_t v134;
  uint64_t (**v135)(uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v151;
  __n128 v152;
  objc_class *v153;
  char *v154;
  uint64_t v155;
  void *v156;
  uint64_t (**v157)(uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v173;
  __n128 v174;
  uint64_t v175;
  objc_class *v176;
  char *v177;
  uint64_t (*v178)(uint64_t);
  uint64_t (**v179)(uint64_t);
  uint64_t v180;
  uint64_t v181;
  id v182;
  uint64_t v184;
  id v185;
  id v186;
  void *v187;
  void *v188;
  void *v189;
  id v191;
  uint64_t v192;
  id v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  id v200;
  id v201;
  void *v202;
  uint64_t v203;
  objc_super v204;
  objc_super v205;
  objc_super v206;
  objc_super v207;
  objc_super v208;
  char v209[80];
  objc_super v210;
  objc_super v211;
  objc_super v212;
  objc_super v213;
  objc_super v214;
  __int128 v215[2];
  objc_super v216;

  v10 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Podcasts11JobPipeline_episodeStorage);
  v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Podcasts11JobPipeline_episodeStorage + 8);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v11 = swift_unknownObjectRetain(v10);
  v12 = static OS_os_log.downloads.getter(v11);
  v13 = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))swift_allocObject(&unk_1004AE770, 40, 7);
  *((_QWORD *)v13 + 2) = a3;
  *((_QWORD *)v13 + 3) = a1;
  *((_QWORD *)v13 + 4) = a2;
  v14 = (objc_class *)sub_10003F544(&qword_1005532F0);
  v15 = (char *)objc_allocWithZone(v14);
  v16 = &v15[*(_QWORD *)((swift_isaMask & *(_QWORD *)v15) + 0x198)];
  *(_QWORD *)v16 = 0;
  v16[8] = 2;
  v17 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))&v15[*(_QWORD *)((swift_isaMask & *(_QWORD *)v15)
                                                                                   + 0x1A8)];
  *v17 = sub_100150194;
  v17[1] = v13;
  v18 = &v15[*(_QWORD *)((swift_isaMask & *(_QWORD *)v15) + 0x1A0)];
  *(_QWORD *)v18 = v10;
  *((_QWORD *)v18 + 1) = v9;
  *(_QWORD *)&v15[*(_QWORD *)((swift_isaMask & *(_QWORD *)v15) + 0x1B0)] = v12;
  v216.receiver = v15;
  v216.super_class = v14;
  v19 = a3;
  swift_bridgeObjectRetain(a2);
  v200 = objc_msgSendSuper2(&v216, "init");
  sub_10000A520(a4, (uint64_t)v215);
  v20 = swift_allocObject(&unk_1004AE798, 72, 7);
  v203 = a1;
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  sub_10002099C(v215, v20 + 32);
  v21 = (objc_class *)sub_10003F544(&qword_1005532F8);
  v22 = (char *)objc_allocWithZone(v21);
  v23 = &v22[*(_QWORD *)((swift_isaMask & *(_QWORD *)v22) + 0x180)];
  *(_QWORD *)v23 = 0;
  v23[8] = 2;
  v24 = (uint64_t (**)(uint64_t *, uint64_t, uint64_t))&v22[*(_QWORD *)((swift_isaMask & *(_QWORD *)v22) + 0x188)];
  *v24 = sub_1001501CC;
  v24[1] = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v20;
  v214.receiver = v22;
  v214.super_class = v21;
  swift_bridgeObjectRetain(a2);
  v193 = objc_msgSendSuper2(&v214, "init");
  v25 = swift_unknownObjectRetain(v10);
  v26 = static OS_os_log.downloads.getter(v25);
  v27 = swift_allocObject(&unk_1004AE7C0, 32, 7);
  *(_QWORD *)(v27 + 16) = a1;
  *(_QWORD *)(v27 + 24) = a2;
  v28 = (objc_class *)sub_10003F544(&qword_100553300);
  v29 = objc_allocWithZone(v28);
  v30 = (char *)v29 + *(_QWORD *)((swift_isaMask & *v29) + 0x198);
  v31 = sub_10003F544(&qword_100564E90);
  swift_storeEnumTagMultiPayload(v30, v31, 2);
  v32 = (void (**)(uint64_t *, uint64_t, void (*)(uint64_t, char *, uint64_t), uint64_t))((char *)v29 + *(_QWORD *)((swift_isaMask & *v29) + 0x1A8));
  *v32 = sub_1001501FC;
  v32[1] = (void (*)(uint64_t *, uint64_t, void (*)(uint64_t, char *, uint64_t), uint64_t))v27;
  v33 = (_QWORD *)((char *)v29 + *(_QWORD *)((swift_isaMask & *v29) + 0x1A0));
  *v33 = v10;
  v33[1] = v195;
  *(_QWORD *)((char *)v29 + *(_QWORD *)((swift_isaMask & *v29) + 0x1B0)) = v26;
  v213.receiver = v29;
  v213.super_class = v28;
  swift_bridgeObjectRetain(a2);
  v185 = objc_msgSendSuper2(&v213, "init");
  v34 = swift_unknownObjectRetain(v10);
  v35 = static OS_os_log.downloads.getter(v34);
  v36 = swift_allocObject(&unk_1004AE7E8, 32, 7);
  *(_QWORD *)(v36 + 16) = v203;
  *(_QWORD *)(v36 + 24) = a2;
  v37 = (objc_class *)sub_10003F544(&qword_100553308);
  v38 = objc_allocWithZone(v37);
  swift_storeEnumTagMultiPayload((char *)v38 + *(_QWORD *)((swift_isaMask & *v38) + 0x198), v31, 2);
  v39 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))((char *)v38
                                                                   + *(_QWORD *)((swift_isaMask & *v38) + 0x1A8));
  *v39 = sub_100150204;
  v39[1] = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v36;
  v40 = (_QWORD *)((char *)v38 + *(_QWORD *)((swift_isaMask & *v38) + 0x1A0));
  *v40 = v10;
  v40[1] = v195;
  *(_QWORD *)((char *)v38 + *(_QWORD *)((swift_isaMask & *v38) + 0x1B0)) = v35;
  v212.receiver = v38;
  v212.super_class = v37;
  v196 = a2;
  swift_bridgeObjectRetain(a2);
  v41 = objc_msgSendSuper2(&v212, "init");
  sub_10000A520(v197 + OBJC_IVAR____TtC8Podcasts11JobPipeline_artworkStorage, (uint64_t)v215);
  v42 = swift_allocObject(&unk_1004AE810, 56, 7);
  sub_10002099C(v215, v42 + 16);
  v43 = (objc_class *)sub_10003F544(&qword_100553310);
  v44 = objc_allocWithZone(v43);
  v45 = (char *)v44 + *(_QWORD *)((swift_isaMask & *v44) + 0x180);
  v46 = sub_10003F544(&qword_100553318);
  swift_storeEnumTagMultiPayload(v45, v46, 2);
  v47 = (uint64_t (**)(uint64_t *, uint64_t, uint64_t))((char *)v44
                                                             + *(_QWORD *)((swift_isaMask & *v44) + 0x188));
  *v47 = sub_100150230;
  v47[1] = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v42;
  v211.receiver = v44;
  v211.super_class = v43;
  v48 = objc_msgSendSuper2(&v211, "init");
  sub_10000A520(a4, (uint64_t)v215);
  v49 = swift_allocObject(&unk_1004AE838, 56, 7);
  sub_10002099C(v215, v49 + 16);
  v50 = (objc_class *)sub_10003F544(&qword_100553320);
  v51 = objc_allocWithZone(v50);
  v52 = (char *)v51 + *(_QWORD *)((swift_isaMask & *v51) + 0x180);
  v53 = sub_10003F544((uint64_t *)&unk_100564E80);
  swift_storeEnumTagMultiPayload(v52, v53, 2);
  v54 = (uint64_t (**)(uint64_t, void (*)(uint64_t *), uint64_t))((char *)v51
                                                                                  + *(_QWORD *)((swift_isaMask & *v51)
                                                                                              + 0x188));
  *v54 = sub_100150238;
  v54[1] = (uint64_t (*)(uint64_t, void (*)(uint64_t *), uint64_t))v49;
  v210.receiver = v51;
  v210.super_class = v50;
  v55 = objc_msgSendSuper2(&v210, "init");
  v56 = sub_10003F544((uint64_t *)&unk_100553780);
  inited = swift_initStackObject(v56, v209);
  *(_OWORD *)(inited + 16) = xmmword_1003CA1F0;
  *(_QWORD *)(inited + 32) = v200;
  *(_QWORD *)(inited + 40) = v193;
  *(_QWORD *)(inited + 48) = v185;
  *(_QWORD *)(inited + 56) = v41;
  *(_QWORD *)(inited + 64) = v48;
  *(_QWORD *)(inited + 72) = v55;
  *(_QWORD *)&v215[0] = inited;
  specialized Array._endMutation()(inited);
  v58 = *(_QWORD *)&v215[0];
  v59 = (char *)v200;
  v60 = (char *)v193;
  v61 = v185;
  v62 = v41;
  v191 = v48;
  v201 = v55;
  v63 = (void *)static OS_os_log.downloads.getter(v201);
  v64 = objc_allocWithZone((Class)type metadata accessor for GroupOperation());
  v194 = (void *)sub_100366114(v58, 1, v63);
  swift_bridgeObjectRelease(v58);
  v65 = swift_allocObject(&unk_1004AE860, 24, 7);
  swift_unknownObjectWeakInit(v65 + 16, v60);
  v66 = (uint64_t (**)(uint64_t))&v59[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v67 = *(_QWORD *)&v59[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v68 = *(_QWORD *)&v59[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v66 = sub_100150240;
  v66[1] = (uint64_t (*)(uint64_t))v65;
  sub_10002CA30(v67, v68);
  v69 = objc_opt_self(NSOperation);
  v202 = v59;
  v70 = swift_dynamicCastObjCClass(v59, v69);
  if (v70)
  {
    v72 = v70;
    ObjectType = swift_getObjectType(v70, v71);
    v74 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
    v76 = v74 ? v74 : 0;
    v77 = v74 ? v72 : 0;
    if (v77)
    {
      v198 = swift_getObjectType(v77, v75);
      v78 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v78 + 24) = v76;
      swift_unknownObjectWeakInit(v78 + 16, v77);
      v79 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v79 + 16, v60);
      v186 = v61;
      v80 = v62;
      v81 = swift_allocObject(&unk_1004AE9F0, 32, 7);
      *(_QWORD *)(v81 + 16) = v79;
      *(_QWORD *)(v81 + 24) = v78;
      v82 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v76 + 72);
      v83 = (id)swift_unknownObjectRetain(v202);
      swift_retain(v79);
      v84 = swift_retain(v78);
      v82(sub_1000456D4, v81, v198, v76, v84);
      swift_release(v78);
      swift_release(v79);
      v85 = v81;
      v62 = v80;
      v61 = v186;
      swift_release(v85);
      v204.receiver = v60;
      v204.super_class = (Class)type metadata accessor for BaseOperation();
      objc_msgSendSuper2(&v204, "addDependency:", v72);

    }
  }
  v86 = swift_allocObject(&unk_1004AE888, 24, 7);
  swift_unknownObjectWeakInit(v86 + 16, v61);
  v87 = (uint64_t (**)(uint64_t))&v60[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v88 = *(_QWORD *)&v60[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v89 = *(_QWORD *)&v60[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v87 = sub_100150248;
  v87[1] = (uint64_t (*)(uint64_t))v86;
  v90 = v60;
  sub_10002CA30(v88, v89);
  v91 = objc_opt_self(NSOperation);
  v92 = swift_dynamicCastObjCClass(v90, v91);
  v199 = v90;
  if (v92)
  {
    v94 = v92;
    v95 = swift_getObjectType(v92, v93);
    v96 = swift_conformsToProtocol2(v95, &protocol descriptor for PodcastsOperation);
    v98 = v96 ? v96 : 0;
    v99 = v96 ? v94 : 0;
    if (v99)
    {
      v100 = swift_getObjectType(v99, v97);
      v101 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v101 + 24) = v98;
      swift_unknownObjectWeakInit(v101 + 16, v99);
      v102 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v102 + 16, v61);
      v187 = v61;
      v103 = v62;
      v104 = swift_allocObject(&unk_1004AE9C8, 32, 7);
      *(_QWORD *)(v104 + 16) = v102;
      *(_QWORD *)(v104 + 24) = v101;
      v105 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v98 + 72);
      swift_unknownObjectRetain(v90);
      v106 = v90;
      swift_retain(v102);
      v107 = swift_retain(v101);
      v105(sub_1000456D4, v104, v100, v98, v107);
      swift_release(v101);
      swift_release(v102);
      v108 = v104;
      v62 = v103;
      v61 = v187;
      swift_release(v108);
      v109 = (objc_class *)type metadata accessor for BaseOperation();
      v205.receiver = v187;
      v205.super_class = v109;
      objc_msgSendSuper2(&v205, "addDependency:", v94);

      v90 = v199;
    }
  }
  v110 = (char *)v61;

  v111 = swift_allocObject(&unk_1004AE8B0, 24, 7);
  swift_unknownObjectWeakInit(v111 + 16, v62);
  v112 = (uint64_t (**)(uint64_t))&v110[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v113 = *(_QWORD *)&v110[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v114 = *(_QWORD *)&v110[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v112 = sub_100150248;
  v112[1] = (uint64_t (*)(uint64_t))v111;
  sub_10002CA30(v113, v114);
  v115 = objc_opt_self(NSOperation);
  v116 = swift_dynamicCastObjCClass(v110, v115);
  if (v116)
  {
    v118 = v116;
    v119 = swift_getObjectType(v116, v117);
    v120 = swift_conformsToProtocol2(v119, &protocol descriptor for PodcastsOperation);
    v122 = v120 ? v120 : 0;
    v123 = v120 ? v118 : 0;
    if (v123)
    {
      v124 = swift_getObjectType(v123, v121);
      v125 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v125 + 24) = v122;
      swift_unknownObjectWeakInit(v125 + 16, v123);
      v126 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v126 + 16, v62);
      v188 = v62;
      v127 = swift_allocObject(&unk_1004AE9A0, 32, 7);
      *(_QWORD *)(v127 + 16) = v126;
      *(_QWORD *)(v127 + 24) = v125;
      v128 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v122 + 72);
      swift_unknownObjectRetain(v110);
      v129 = v110;
      swift_retain(v126);
      v130 = swift_retain(v125);
      v128(sub_1000456D4, v127, v124, v122, v130);
      swift_release(v125);
      swift_release(v126);
      v131 = v127;
      v62 = v188;
      swift_release(v131);
      v132 = (objc_class *)type metadata accessor for BaseOperation();
      v206.receiver = v188;
      v206.super_class = v132;
      objc_msgSendSuper2(&v206, "addDependency:", v118);

    }
  }
  v133 = (char *)v62;
  v189 = v110;

  v134 = swift_allocObject(&unk_1004AE8D8, 24, 7);
  swift_unknownObjectWeakInit(v134 + 16, v191);
  v135 = (uint64_t (**)(uint64_t))&v133[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v136 = *(_QWORD *)&v133[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v137 = *(_QWORD *)&v133[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v135 = sub_100150250;
  v135[1] = (uint64_t (*)(uint64_t))v134;
  sub_10002CA30(v136, v137);
  v138 = objc_opt_self(NSOperation);
  v139 = swift_dynamicCastObjCClass(v133, v138);
  if (v139)
  {
    v141 = v139;
    v142 = swift_getObjectType(v139, v140);
    v143 = swift_conformsToProtocol2(v142, &protocol descriptor for PodcastsOperation);
    v145 = v143 ? v143 : 0;
    v146 = v143 ? v141 : 0;
    if (v146)
    {
      v184 = swift_getObjectType(v146, v144);
      v147 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v147 + 24) = v145;
      swift_unknownObjectWeakInit(v147 + 16, v146);
      v148 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v148 + 16, v191);
      v149 = swift_allocObject(&unk_1004AE978, 32, 7);
      *(_QWORD *)(v149 + 16) = v148;
      *(_QWORD *)(v149 + 24) = v147;
      v150 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v145 + 72);
      swift_unknownObjectRetain(v133);
      v151 = v133;
      swift_retain(v148);
      v152 = swift_retain(v147);
      v150(sub_1000456D4, v149, v184, v145, v152);
      swift_release(v147);
      swift_release(v148);
      swift_release(v149);
      v153 = (objc_class *)type metadata accessor for BaseOperation();
      v207.receiver = v191;
      v207.super_class = v153;
      objc_msgSendSuper2(&v207, "addDependency:", v141);

    }
  }
  v154 = (char *)v191;

  v155 = swift_allocObject(&unk_1004AE900, 24, 7);
  v156 = v201;
  swift_unknownObjectWeakInit(v155 + 16, v201);
  v157 = (uint64_t (**)(uint64_t))&v154[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v158 = *(_QWORD *)&v154[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v159 = *(_QWORD *)&v154[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v157 = sub_100150258;
  v157[1] = (uint64_t (*)(uint64_t))v155;
  sub_10002CA30(v158, v159);
  v160 = objc_opt_self(NSOperation);
  v161 = swift_dynamicCastObjCClass(v154, v160);
  if (v161)
  {
    v163 = v161;
    v164 = swift_getObjectType(v161, v162);
    v165 = swift_conformsToProtocol2(v164, &protocol descriptor for PodcastsOperation);
    if (v165)
      v167 = v165;
    else
      v167 = 0;
    if (v165)
      v168 = v163;
    else
      v168 = 0;
    if (v168)
    {
      v192 = swift_getObjectType(v168, v166);
      v169 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v169 + 24) = v167;
      swift_unknownObjectWeakInit(v169 + 16, v168);
      v170 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v170 + 16, v201);
      v171 = swift_allocObject(&unk_1004AE950, 32, 7);
      *(_QWORD *)(v171 + 16) = v170;
      *(_QWORD *)(v171 + 24) = v169;
      v172 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v167 + 72);
      swift_unknownObjectRetain(v154);
      v173 = v154;
      swift_retain(v170);
      v174 = swift_retain(v169);
      v172(sub_1000456D4, v171, v192, v167, v174);
      swift_release(v169);
      swift_release(v170);
      v175 = v171;
      v156 = v201;
      swift_release(v175);
      v176 = (objc_class *)type metadata accessor for BaseOperation();
      v208.receiver = v201;
      v208.super_class = v176;
      objc_msgSendSuper2(&v208, "addDependency:", v163);

    }
  }
  v177 = v156;

  v178 = (uint64_t (*)(uint64_t))swift_allocObject(&unk_1004AE928, 40, 7);
  *((_QWORD *)v178 + 2) = v203;
  *((_QWORD *)v178 + 3) = v196;
  *((_QWORD *)v178 + 4) = v194;
  v179 = (uint64_t (**)(uint64_t))&v177[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v180 = *(_QWORD *)&v177[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v181 = *(_QWORD *)&v177[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
  *v179 = sub_10015028C;
  v179[1] = v178;
  swift_bridgeObjectRetain(v196);
  v182 = v194;
  sub_10002CA30(v180, v181);

  return v182;
}

void sub_10014A5CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t (*v18)(__n128);
  __n128 v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  id v24;
  id v25;
  _QWORD v26[5];
  _QWORD *v27;

  v12 = *a1;
  v13 = swift_allocObject(&unk_1004AEBF8, 32, 7);
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  swift_retain(a4);
  if (!a5)
  {
    v15 = static os_log_type_t.default.getter(v14);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v16 = (void *)static OS_os_log.downloads.getter();
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Fetching Media Library item by episode uuids, no active dsid provided.", 70, 2, _swiftEmptyArrayStorage);

  }
  v18 = *(uint64_t (**)(__n128))(v12 + 16);
  v17 = *(_QWORD *)(v12 + 24);
  v19 = swift_retain(v17);
  v20 = (void *)v18(v19);
  swift_release(v17);
  v21 = (_QWORD *)swift_allocObject(&unk_1004AEC20, 64, 7);
  v21[2] = v20;
  v21[3] = a6;
  v21[4] = a7;
  v21[5] = a5;
  v21[6] = sub_100150154;
  v21[7] = v13;
  v26[4] = sub_100150718;
  v27 = v21;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 1107296256;
  v26[2] = sub_100027AF8;
  v26[3] = &unk_1004AEC38;
  v22 = _Block_copy(v26);
  v23 = v27;
  v24 = a5;
  swift_retain(v13);
  v25 = v20;
  swift_bridgeObjectRetain(a7);
  swift_release(v23);
  objc_msgSend(v25, "performBlock:", v22);
  _Block_release(v22);
  swift_release(v13);

}

uint64_t sub_10014A77C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  os_log_type_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v11 = *a1;
  v12 = static os_log_type_t.default.getter(a1);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v13 = static OS_os_log.downloads.getter();
  if (os_log_type_enabled(v13, v12))
  {
    swift_bridgeObjectRetain_n(a5, 2);
    v21 = a4;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v23 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain(a5);
    v22 = sub_10003D274(v21, a5, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a5, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v12, "Add episode to media library. EpisodeUUID %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }

  v16 = a6[3];
  v17 = a6[4];
  sub_10003A834(a6, v16);
  v18 = swift_allocObject(&unk_1004AEBD0, 32, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  v19 = swift_retain(a3);
  dispatch thunk of MediaLibraryClientProtocol.addEpisode(_:completion:)(v11, sub_1001506D4, v18, v16, v17, v19);
  return swift_release(v18);
}

uint64_t sub_10014A970(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v4 = sub_10003F544(&qword_100553350);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100564E90);
  __chkstk_darwin(v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007A64(a1, (uint64_t)v6, &qword_100553350);
  sub_10014AA58((uint64_t)v6, (uint64_t)v9);
  a2(v9);
  return sub_100007A28((uint64_t)v9, &qword_100564E90);
}

uint64_t sub_10014AA58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_10003F544(&qword_100564E90);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10003F544(&qword_100553350);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100007A64(a1, (uint64_t)v9, &qword_100553350);
  if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
  {
    v10 = *v9;
    v18 = v10;
    swift_errorRetain(v10);
    v11 = sub_10003F544((uint64_t *)&unk_10055A340);
    v12 = _getErrorEmbeddedNSError<A>(_:)(&v18, v11, &protocol self-conformance witness table for Error);
    if (v12)
    {
      v13 = v12;
      sub_100007A28(a1, &qword_100553350);
      swift_errorRelease(v18);
    }
    else
    {
      v13 = swift_allocError(v11, &protocol self-conformance witness table for Error, 0, 0);
      *v16 = v18;
      sub_100007A28(a1, &qword_100553350);
    }
    swift_errorRelease(v10);
    *v6 = v13;
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    return sub_10003DC78((uint64_t)v6, a2, &qword_100564E90);
  }
  else
  {
    sub_100007A28(a1, &qword_100553350);
    v14 = type metadata accessor for MediaLibraryPid(0);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a2, v9, v14);
    return swift_storeEnumTagMultiPayload(a2, v4, 0);
  }
}

void sub_10014AC38(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_log_type_t v18;
  NSObject *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  _BOOL4 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  os_log_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  unint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(__n128);
  __n128 v42;
  void *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  _QWORD *v50;
  id v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  void (*v59)(uint64_t, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t aBlock[5];
  _QWORD *v66;

  v63 = a6;
  v59 = a3;
  v60 = a4;
  v9 = type metadata accessor for MediaLibraryPid(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v62 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v58 = (char *)&v52 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v52 - v16;
  v55 = *a1;
  v18 = static os_log_type_t.default.getter(v15);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v19 = static OS_os_log.downloads.getter();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v61 = a2;
  v57 = v20;
  v20(v17, a2, v9);
  v21 = os_log_type_enabled(v19, v18);
  v56 = v10;
  v54 = a5;
  if (v21)
  {
    v22 = v63;
    swift_bridgeObjectRetain_n(v63, 2);
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(32, -1);
    v53 = v24;
    aBlock[0] = v24;
    *(_DWORD *)v23 = 134218242;
    v52 = v19;
    v25 = a5;
    v26 = v22;
    v27 = MediaLibraryPid.value.getter(v24);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    v64 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2080;
    swift_bridgeObjectRetain(v26);
    v64 = sub_10003D274(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease_n(v26, 3);
    v28 = v52;
    _os_log_impl((void *)&_mh_execute_header, v52, v18, "Update episode with media library persistent id %lld. EpisodeUUID %s.", (uint8_t *)v23, 0x16u);
    v29 = v53;
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {
    v30 = *(void (**)(char *, uint64_t))(v10 + 8);
    v31 = v63;
    swift_bridgeObjectRetain_n(v63, 2);
    v30(v17, v9);
    swift_bridgeObjectRelease_n(v31, 2);

  }
  v32 = v57;
  v33 = v58;
  v34 = v61;
  v57(v58, v61, v9);
  v35 = v56;
  v36 = *(unsigned __int8 *)(v56 + 80);
  v37 = (v36 + 32) & ~v36;
  v38 = swift_allocObject(&unk_1004AEB58, v37 + v11, v36 | 7);
  v53 = v11;
  v39 = v60;
  *(_QWORD *)(v38 + 16) = v59;
  *(_QWORD *)(v38 + 24) = v39;
  v59 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
  v59(v38 + v37, v33, v9);
  v41 = *(uint64_t (**)(__n128))(v55 + 16);
  v40 = *(_QWORD *)(v55 + 24);
  swift_retain(v39);
  v42 = swift_retain(v40);
  v43 = (void *)v41(v42);
  swift_release(v40);
  v44 = v62;
  v32(v62, v34, v9);
  v45 = (v36 + 56) & ~v36;
  v46 = (_QWORD *)swift_allocObject(&unk_1004AEB80, v45 + v53, v36 | 7);
  v47 = v54;
  v46[2] = v43;
  v46[3] = v47;
  v48 = v63;
  v46[4] = v63;
  v46[5] = sub_1001505C8;
  v46[6] = v38;
  v59((uint64_t)v46 + v45, v44, v9);
  aBlock[4] = (uint64_t)sub_10015069C;
  v66 = v46;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100027AF8;
  aBlock[3] = (uint64_t)&unk_1004AEB98;
  v49 = _Block_copy(aBlock);
  v50 = v66;
  swift_bridgeObjectRetain(v48);
  v51 = v43;
  swift_retain(v38);
  swift_release(v50);
  objc_msgSend(v51, "performBlock:", v49);
  _Block_release(v49);
  swift_release(v38);

}

uint64_t sub_10014B070(uint64_t a1, char a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v9 = sub_10003F544(&qword_100553348);
  __chkstk_darwin(v9);
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (uint64_t *)((char *)&v15 - v11);
  if ((a2 & 1) != 0)
  {
    *v12 = a1;
    swift_storeEnumTagMultiPayload((char *)&v15 - v11, v9, 1);
    swift_errorRetain(a1);
  }
  else
  {
    v13 = type metadata accessor for MediaLibraryPid(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, a5, v13);
    swift_storeEnumTagMultiPayload(v12, v9, 0);
  }
  a3(v12);
  return sub_100007A28((uint64_t)v12, &qword_100553348);
}

void sub_10014B160(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(__n128);
  __n128 v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v30 = a5;
  v31 = a6;
  v10 = type metadata accessor for MediaLibraryPid(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = *a1;
  v15 = static os_log_type_t.default.getter(v13);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v16 = (void *)static OS_os_log.downloads.getter();
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Fetch episode artowrk key.", 26, 2, _swiftEmptyArrayStorage);

  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
  v17 = *(unsigned __int8 *)(v11 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_1004AEAE0, v18 + v12, v17 | 7);
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v19 + v18, (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v21 = *(uint64_t (**)(__n128))(v14 + 16);
  v20 = *(_QWORD *)(v14 + 24);
  swift_retain(a4);
  v22 = swift_retain(v20);
  v23 = (void *)v21(v22);
  swift_release(v20);
  v24 = (_QWORD *)swift_allocObject(&unk_1004AEB08, 56, 7);
  v25 = v30;
  v26 = v31;
  v24[2] = v23;
  v24[3] = v25;
  v24[4] = v26;
  v24[5] = sub_1001504D8;
  v24[6] = v19;
  aBlock[4] = sub_100150534;
  v33 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004AEB20;
  v27 = _Block_copy(aBlock);
  v28 = v33;
  v29 = v23;
  swift_bridgeObjectRetain(v26);
  swift_retain(v19);
  swift_release(v28);
  objc_msgSend(v29, "performBlock:", v27);
  _Block_release(v27);
  swift_release(v19);

}

uint64_t sub_10014B37C(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v11 = sub_10003F544(&qword_100553340);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a3 & 1) != 0)
  {
    *v13 = a1;
    v14 = 1;
  }
  else
  {
    v15 = (char *)v13 + *(int *)(sub_10003F544(&qword_100552A70) + 48);
    *v13 = a1;
    v13[1] = a2;
    v16 = type metadata accessor for MediaLibraryPid(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, a6, v16);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v11, v14);
  sub_100150540(a1, a2, a3 & 1);
  a4(v13);
  return sub_100007A28((uint64_t)v13, &qword_100553340);
}

uint64_t sub_10014B48C(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), char *, uint64_t, uint64_t, __n128);
  __n128 v37;
  uint64_t v39;
  _QWORD *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48[2];

  v40 = a4;
  v45 = a3;
  v46 = a2;
  v6 = sub_10003F544(&qword_100552A70);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MediaLibraryPid(0);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v11 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v39 - v14;
  v16 = *(int *)(v6 + 48);
  v17 = &v8[v16];
  v18 = a1[1];
  v43 = *a1;
  v19 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v19(v17, (char *)a1 + v16, v9);
  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v44 = v11;
  v47 = v15;
  v20(v15, v17, v9);
  v21 = (void (*)(uint64_t, char *, uint64_t))v20;
  v41 = v20;
  sub_10000A520((uint64_t)a4, (uint64_t)v48);
  v19(v13, v15, v9);
  v22 = *(unsigned __int8 *)(v11 + 80);
  v23 = (v22 + 72) & ~v22;
  v42 = v22 | 7;
  v24 = swift_allocObject(&unk_1004AEA68, v23 + v10, v22 | 7);
  sub_10002099C(v48, v24 + 16);
  v25 = v45;
  *(_QWORD *)(v24 + 56) = v46;
  *(_QWORD *)(v24 + 64) = v25;
  v21(v24 + v23, v13, v9);
  swift_bridgeObjectRetain(v18);
  swift_retain(v25);
  v27 = static os_log_type_t.default.getter(v26);
  v28 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v29 = (void *)static OS_os_log.downloads.getter(v28);
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v29, "Fetch episode artwork url.", 26, 2, _swiftEmptyArrayStorage);

  v30 = v40[3];
  v31 = v40[4];
  v40 = sub_10003A834(v40, v30);
  v19(v13, v47, v9);
  v32 = (v22 + 64) & ~v22;
  v33 = (char *)swift_allocObject(&unk_1004AEA90, v32 + v10, v42);
  v34 = v43;
  *((_QWORD *)v33 + 2) = v43;
  *((_QWORD *)v33 + 3) = v18;
  *((_QWORD *)v33 + 4) = sub_10015034C;
  *((_QWORD *)v33 + 5) = v24;
  v35 = v45;
  *((_QWORD *)v33 + 6) = v46;
  *((_QWORD *)v33 + 7) = v35;
  v41(&v33[v32], v13, v9);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), char *, uint64_t, uint64_t, __n128))(v31 + 8);
  swift_bridgeObjectRetain(v18);
  swift_retain(v35);
  v37 = swift_retain(v24);
  LOBYTE(v48[0]) = 1;
  v36(v34, v18, 0x100000000, sub_100150404, v33, v30, v31, v37);
  swift_bridgeObjectRelease(v18);
  swift_release(v24);
  swift_release(v33);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v47, v9);
}

uint64_t sub_10014B780(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v18;
  _BYTE v20[16];

  v8 = type metadata accessor for MediaLibraryPid(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = a1[3];
  v13 = a1[4];
  sub_10003A834(a1, v12);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, a4, v8);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(&unk_1004AEAB8, v15 + v10, v14 | 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(v16 + v15, v11, v8);
  v17 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, __n128))(v13 + 16);
  v18 = swift_retain(a3);
  v20[12] = 1;
  v17(0x100000000, sub_100150494, v16, v12, v13, v18);
  return swift_release(v16);
}

uint64_t sub_10014B8AC(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *);

  v31 = a3;
  v32 = a2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544((uint64_t *)&unk_100564E80);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_100553330);
  __chkstk_darwin(v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007A64(a1, (uint64_t)v15, &qword_100553330);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v13);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v17 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v18 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v19 = (void *)static OS_os_log.downloads.getter(v18);
    v20 = sub_10003F544(&qword_1005559A0);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1003CA200;
    v22 = sub_10015044C();
    v23 = Error.localizedDescription.getter(&type metadata for ArtworkStorageError, v22);
    v25 = v24;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_10003E198();
    *(_QWORD *)(v21 + 32) = v23;
    *(_QWORD *)(v21 + 40) = v25;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v19, "Serious error. Could not fetch image placeholder from the storage, error: %{public}s", 84, 2, v21, v31);

    swift_bridgeObjectRelease(v21);
    v26 = &v12[*(int *)(sub_10003F544(&qword_100553328) + 48)];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
    v27 = type metadata accessor for MediaLibraryPid(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v26, a4, v27);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v32(v12);
    return sub_100007A28((uint64_t)v12, (uint64_t *)&unk_100564E80);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v15, v6);
    v29 = &v12[*(int *)(sub_10003F544(&qword_100553328) + 48)];
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    v30 = type metadata accessor for MediaLibraryPid(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v29, a4, v30);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v32(v12);
    sub_100007A28((uint64_t)v12, (uint64_t *)&unk_100564E80);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_10014BBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, void (*a6)(char *), uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *);
  uint64_t v38;
  uint64_t (*v39)(uint64_t);

  v35 = a8;
  v36 = a7;
  v37 = a6;
  v38 = a5;
  v39 = a4;
  v34 = a2;
  v10 = sub_10003F544((uint64_t *)&unk_100564E80);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544(&qword_100553330);
  __chkstk_darwin(v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007A64(a1, (uint64_t)v19, &qword_100553330);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v17);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v21 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v22 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v23 = (void *)static OS_os_log.downloads.getter(v22);
    v24 = sub_10003F544(&qword_1005559A0);
    v25 = swift_allocObject(v24, 112, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1003CA220;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    v26 = sub_10003E198();
    *(_QWORD *)(v25 + 64) = v26;
    *(_QWORD *)(v25 + 32) = v34;
    *(_QWORD *)(v25 + 40) = a3;
    v27 = sub_10015044C();
    swift_bridgeObjectRetain(a3);
    v28 = Error.localizedDescription.getter(&type metadata for ArtworkStorageError, v27);
    *(_QWORD *)(v25 + 96) = &type metadata for String;
    *(_QWORD *)(v25 + 104) = v26;
    *(_QWORD *)(v25 + 72) = v28;
    *(_QWORD *)(v25 + 80) = v29;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v23, "Falling back to placeholder image. Failed to fetch podcast image with key: %{public}s, error: %{public}s", 104, 2, v25);

    v30 = swift_bridgeObjectRelease(v25);
    return v39(v30);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    v32 = &v12[*(int *)(sub_10003F544(&qword_100553328) + 48)];
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v12, v16, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
    v33 = type metadata accessor for MediaLibraryPid(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v32, v35, v33);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v37(v12);
    sub_100007A28((uint64_t)v12, (uint64_t *)&unk_100564E80);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t sub_10014BE74(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD *v45;
  void (*v46)(uint64_t *);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  v45 = a4;
  v51 = a3;
  v49 = a1;
  v48 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v47 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100553328);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MediaLibraryPid(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v44 - v18;
  v20 = swift_allocObject(&unk_1004AEA18, 32, 7);
  v46 = a2;
  v50 = v20;
  v21 = v51;
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = v21;
  v22 = *(int *)(v7 + 48);
  v23 = &v9[v22];
  v24 = v49 + v22;
  sub_100007A64(v49, (uint64_t)v9, (uint64_t *)&unk_100553DC0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v23, v24, v10);
  v25 = (uint64_t)v9;
  v26 = v13;
  sub_10003DC78(v25, (uint64_t)v19, (uint64_t *)&unk_100553DC0);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v23, v10);
  sub_100007A64((uint64_t)v19, (uint64_t)v17, (uint64_t *)&unk_100553DC0);
  v27 = v48;
  if ((*(unsigned int (**)(char *, uint64_t))(v5 + 48))(v17, 1) == 1)
  {
    swift_retain(v51);
    swift_release(v50);
    v28 = sub_100007A28((uint64_t)v17, (uint64_t *)&unk_100553DC0);
    v29 = static os_log_type_t.error.getter(v28);
    v30 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v31 = (void *)static OS_os_log.downloads.getter(v30);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v31, "Media Library might be missing both artwork and placeholder for the episode.", 76, 2, _swiftEmptyArrayStorage);

    v52 = 0;
    v53 = 0;
    v46(&v52);
  }
  else
  {
    v44 = v5;
    v32 = v47;
    v33 = v17;
    v34 = v27;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v47, v33, v27);
    swift_retain(v51);
    v36 = static os_log_type_t.default.getter(v35);
    v37 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v38 = (void *)static OS_os_log.downloads.getter(v37);
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v38, "Update media library episode with artwork.", 42, 2, _swiftEmptyArrayStorage);

    v39 = v45[3];
    v40 = v45[4];
    sub_10003A834(v45, v39);
    v41 = swift_allocObject(&unk_1004AEA40, 32, 7);
    v42 = v50;
    *(_QWORD *)(v41 + 16) = sub_10003A86C;
    *(_QWORD *)(v41 + 24) = v42;
    dispatch thunk of MediaLibraryClientProtocol.addArtwork(withFileUrl:toEpisodeWithPersistentId:completion:)(v32, v26, sub_1001502AC, v41, v39, v40);
    swift_release(v41);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v34);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v26, v10);
  return sub_100007A28((uint64_t)v19, (uint64_t *)&unk_100553DC0);
}

uint64_t sub_10014C250(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;

  if ((a2 & 1) != 0)
  {
    v11 = a1;
    sub_1001502B8(a1, 1);
    v7 = sub_10003F544((uint64_t *)&unk_10055A340);
    v8 = _getErrorEmbeddedNSError<A>(_:)(&v11, v7, &protocol self-conformance witness table for Error);
    if (v8)
    {
      v4 = v8;
      sub_1001502C4(a1, 1);
    }
    else
    {
      v4 = swift_allocError(v7, &protocol self-conformance witness table for Error, 0, 0);
      *v9 = v11;
    }
    v5 = 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  a3(v4, v5);
  return sub_10003A858(v4, v5);
}

uint64_t sub_10014C324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unsigned int v21;
  _QWORD v22[3];
  _BYTE v23[8];

  v21 = static os_log_type_t.error.getter(a1);
  v8 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v9 = (void *)static OS_os_log.downloads.getter(v8);
  v10 = sub_10003F544(&qword_1005559A0);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1003CA220;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v12 = sub_10003E198();
  *(_QWORD *)(v11 + 64) = v12;
  *(_QWORD *)(v11 + 32) = a2;
  *(_QWORD *)(v11 + 40) = a3;
  swift_getErrorValue(a1, v23, v22);
  v13 = v22[1];
  v14 = v22[2];
  swift_bridgeObjectRetain(a3);
  v15 = Error.localizedDescription.getter(v13, v14);
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v12;
  *(_QWORD *)(v11 + 72) = v15;
  *(_QWORD *)(v11 + 80) = v16;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v9, "Failed to update media library for episode %@, error: %{public}s", 64, 2, v11);

  swift_bridgeObjectRelease(v11);
  v17 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  v18 = *(void **)(a4 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock);
  swift_errorRetain(a1);
  objc_msgSend(v18, "lock");
  v19 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Podcasts13BaseOperation__error);
  *(_QWORD *)(a4 + OBJC_IVAR____TtC8Podcasts13BaseOperation__error) = a1;
  swift_errorRetain(a1);
  swift_errorRelease(v19);
  objc_msgSend(*(id *)(a4 + v17), "unlock");
  return swift_errorRelease(a1);
}

void sub_10014C4A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  void *v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t inited;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  objc_class *v57;
  objc_class *v58;
  uint64_t v59;
  _BYTE *v60;
  char *v61;
  id v62;
  uint64_t (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  objc_class *v79;
  char *v80;
  char *v81;
  void (**v82)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  objc_class *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  void (**v97)(uint64_t@<X8>);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t (**v104)@<X0>(uint64_t@<X8>);
  uint64_t v105;
  char *v106;
  uint64_t (**v107)(uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t ObjectType;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v124;
  __n128 v125;
  objc_class *v126;
  uint64_t v127;
  void *v128;
  uint64_t (**v129)(uint64_t);
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v147;
  __n128 v148;
  objc_class *v149;
  char *v150;
  uint64_t v151;
  id v152;
  uint64_t (**v153)(uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v170;
  __n128 v171;
  uint64_t v172;
  objc_class *v173;
  char *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t (**v177)(uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(uint64_t (*)(), uint64_t, char *, uint64_t, __n128);
  char *v194;
  __n128 v195;
  uint64_t v196;
  objc_class *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t (**v200)(uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(uint64_t (*)(), uint64_t, _QWORD *, uint64_t, __n128);
  _QWORD *v216;
  __n128 v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  objc_class *v221;
  char *v222;
  uint64_t (**v223)(uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  void *v229;
  uint64_t v230;
  id v231;
  char *v232;
  id v233;
  char *v234;
  _QWORD *v235;
  char *v236;
  id v237;
  uint64_t v238;
  uint64_t v239;
  Class isa;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  char *v256;
  uint64_t v257;
  _QWORD *v258;
  __int128 v259;
  char *v260;
  uint64_t v261;
  char *v262;
  objc_super v263;
  char v264[40];
  objc_super v265;
  objc_super v266;
  objc_super v267;
  objc_super v268;
  objc_super v269;
  objc_super v270;
  objc_super v271;
  objc_super v272;
  objc_super v273;
  uint64_t v274;
  uint64_t v275;
  char v276;

  v260 = (char *)a4;
  v7 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v251 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v256 = (char *)&v243 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = v9;
  __chkstk_darwin(v8);
  v247 = (uint64_t)&v243 - v10;
  v249 = type metadata accessor for URL(0);
  v257 = *(_QWORD *)(v249 - 8);
  v11 = __chkstk_darwin(v249);
  v244 = (char *)&v243 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v248 = (char *)&v243 - v13;
  v246 = type metadata accessor for UUID(0);
  v245 = *(_QWORD *)(v246 - 8);
  __chkstk_darwin(v246);
  v15 = (char *)&v243 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v259 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v259);
  v258 = (const char **)((char *)&v243 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_10003F544(&qword_1005522F0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v243 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = static os_log_type_t.error.getter(v18);
  v250 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v22 = (void *)static OS_os_log.downloads.getter(v250);
  v23 = sub_10003F544(&qword_1005559A0);
  v24 = swift_allocObject(v23, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1003CA200;
  v253 = a1;
  v274 = a1;
  v275 = a2;
  v254 = a2;
  v255 = a3;
  v276 = a3;
  v25 = sub_10014FEE8();
  v26 = Error.localizedDescription.getter(&type metadata for PipelineError, v25);
  v28 = v27;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 64) = sub_10003E198();
  *(_QWORD *)(v24 + 32) = v26;
  *(_QWORD *)(v24 + 40) = v28;
  v29 = v21;
  v30 = v261;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v22, "Download failed with error: %s", v243);

  swift_bridgeObjectRelease(v24);
  v31 = v30 + OBJC_IVAR____TtC8Podcasts11JobPipeline_metadata;
  v32 = type metadata accessor for EpisodeMetadata(0);
  sub_100007A64(v31 + *(int *)(v32 + 60), (uint64_t)v20, &qword_1005522F0);
  v33 = type metadata accessor for Date(0);
  LODWORD(v31) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v20, 1, v33);
  sub_100007A28((uint64_t)v20, &qword_1005522F0);
  if ((_DWORD)v31 != 1)
  {
    v34 = *(void **)(v30 + OBJC_IVAR____TtC8Podcasts11JobPipeline_analyticsChannel);
    type metadata accessor for AnalyticsEvent(0);
    swift_unknownObjectRetain(v34);
    v35 = (void *)AnalyticsEvent.__allocating_init(cacheDeletedFilesRestored:failed:)(0, 1);
    objc_msgSend(v34, "sendEvent:", v35);
    swift_unknownObjectRelease(v34);

  }
  v36 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v37 = *(id *)(v30 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  v38 = v258;
  OS_dispatch_queue.sync<A>(execute:)(v258, sub_10014FD30, v30, v259);

  v39 = v245;
  v40 = v246;
  (*(void (**)(char *, _QWORD *, uint64_t))(v245 + 16))(v15, v38, v246);
  sub_10003F970((uint64_t)v38, type metadata accessor for DownloadJob);
  v262 = (char *)sub_10014F514((uint64_t)v15, 0);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v40);
  v41 = v247;
  sub_100007A64((uint64_t)v260, v247, (uint64_t *)&unk_100553DC0);
  v42 = v257;
  v43 = v249;
  v44 = &selRef_freeTranscriptSnippet;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v257 + 48))(v41, 1, v249) == 1)
  {
    v45 = sub_100007A28(v41, (uint64_t *)&unk_100553DC0);
    v46 = (void *)static OS_os_log.default.getter(v45);
    v47 = objc_allocWithZone((Class)type metadata accessor for GroupOperation());
    v257 = sub_100366114((uint64_t)_swiftEmptyArrayStorage, 0, v46);
  }
  else
  {
    v48 = v248;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v248, v41, v43);
    v49 = sub_10003F544((uint64_t *)&unk_100553780);
    inited = swift_initStackObject(v49, v264);
    v51 = v42;
    v52 = inited;
    *(_OWORD *)(inited + 16) = xmmword_1003CA250;
    v53 = *(uint64_t (**)(char *, char *, uint64_t))(v51 + 16);
    v54 = v244;
    v55 = v53(v244, v48, v43);
    v56 = static OS_os_log.downloads.getter(v55);
    v57 = (objc_class *)type metadata accessor for DeleteFileOperation(0);
    v247 = v36;
    v58 = v57;
    v59 = v30;
    v60 = objc_allocWithZone(v57);
    v61 = &v60[OBJC_IVAR____TtC8Podcasts19DeleteFileOperation_input];
    *(_QWORD *)v61 = 0;
    v61[8] = 2;
    *(_QWORD *)&v60[OBJC_IVAR____TtC8Podcasts19DeleteFileOperation_log] = v56;
    v53(&v60[OBJC_IVAR____TtC8Podcasts19DeleteFileOperation_file], v54, v43);
    v60[OBJC_IVAR____TtC8Podcasts19DeleteFileOperation_proceedOnFailure] = 1;
    v263.receiver = v60;
    v30 = v59;
    v44 = &selRef_freeTranscriptSnippet;
    v263.super_class = v58;
    v62 = objc_msgSendSuper2(&v263, "init");
    v63 = *(uint64_t (**)(char *, uint64_t))(v257 + 8);
    v64 = v63(v54, v43);
    *(_QWORD *)(v52 + 32) = v62;
    v274 = v52;
    v65 = specialized Array._endMutation()(v64);
    v66 = v274;
    v67 = (void *)static OS_os_log.downloads.getter(v65);
    v68 = objc_allocWithZone((Class)type metadata accessor for GroupOperation());
    v257 = sub_100366114(v66, 1, v67);
    swift_bridgeObjectRelease(v66);
    v63(v248, v43);
    v36 = v247;
  }
  v69 = *(id *)(v30 + v36);
  v70 = v258;
  v71 = v259;
  OS_dispatch_queue.sync<A>(execute:)(v258, sub_10014FD30, v30, v259);

  v72 = (_QWORD *)((char *)v70 + *(int *)(v71 + 20));
  v74 = *v72;
  v73 = v72[1];
  swift_bridgeObjectRetain(v73);
  sub_10003F970((uint64_t)v70, type metadata accessor for DownloadJob);
  v75 = OBJC_IVAR____TtC8Podcasts11JobPipeline_episodeStorage;
  v76 = swift_allocObject(&unk_1004AE4C8, 32, 7);
  *(_QWORD *)(v76 + 16) = v74;
  *(_QWORD *)(v76 + 24) = v73;
  v259 = *(_OWORD *)(v30 + v75);
  v77 = swift_unknownObjectRetain(v259);
  v78 = static OS_os_log.downloads.getter(v77);
  v79 = (objc_class *)sub_10003F544(&qword_1005532E8);
  v80 = (char *)objc_allocWithZone(v79);
  v81 = &v80[*(_QWORD *)((swift_isaMask & *(_QWORD *)v80) + 0x198)];
  *(_QWORD *)v81 = 0;
  v81[8] = 2;
  v82 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))&v80[*(_QWORD *)((swift_isaMask & *(_QWORD *)v80)
                                                                                   + 0x1A8)];
  *v82 = sub_10014FF2C;
  v82[1] = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v76;
  *(_OWORD *)&v80[*(_QWORD *)((swift_isaMask & *(_QWORD *)v80) + 0x1A0)] = v259;
  *(_QWORD *)&v80[*(_QWORD *)((swift_isaMask & *(_QWORD *)v80) + 0x1B0)] = v78;
  v273.receiver = v80;
  v273.super_class = v79;
  *(_QWORD *)&v259 = objc_msgSendSuper2(&v273, v44[205]);
  v83 = swift_allocObject(&unk_1004AE220, 24, 7);
  swift_weakInit(v83 + 16, v30);
  v84 = (uint64_t)v256;
  sub_100007A64((uint64_t)v260, (uint64_t)v256, (uint64_t *)&unk_100553DC0);
  v85 = *(unsigned __int8 *)(v251 + 80);
  v86 = (v85 + 16) & ~v85;
  v87 = (v252 + v86 + 7) & 0xFFFFFFFFFFFFFFF8;
  v88 = swift_allocObject(&unk_1004AE4F0, v87 + 8, v85 | 7);
  sub_10003DC78(v84, v88 + v86, (uint64_t *)&unk_100553DC0);
  *(_QWORD *)(v88 + v87) = v83;
  v89 = (objc_class *)sub_10003F544((uint64_t *)&unk_10055BCB0);
  v90 = (char *)objc_allocWithZone(v89);
  v91 = &v90[*(_QWORD *)((swift_isaMask & *(_QWORD *)v90) + 0x180)];
  *(_QWORD *)v91 = 0;
  v91[8] = 2;
  v92 = &v90[*(_QWORD *)((swift_isaMask & *(_QWORD *)v90) + 0x188)];
  *(_QWORD *)v92 = sub_10014FFE8;
  *((_QWORD *)v92 + 1) = v88;
  v272.receiver = v90;
  v272.super_class = v89;
  v93 = (char *)objc_msgSendSuper2(&v272, v44[205]);
  v94 = swift_allocObject(&unk_1004AE220, 24, 7);
  swift_weakInit(v94 + 16, v30);
  v95 = (char *)objc_allocWithZone(v89);
  v96 = &v95[*(_QWORD *)((swift_isaMask & *(_QWORD *)v95) + 0x180)];
  *(_QWORD *)v96 = 0;
  v96[8] = 2;
  v97 = (void (**)(uint64_t@<X8>))&v95[*(_QWORD *)((swift_isaMask & *(_QWORD *)v95) + 0x188)];
  *v97 = sub_10014FD80;
  v97[1] = (void (*)(uint64_t@<X8>))v94;
  v271.receiver = v95;
  v271.super_class = v89;
  v256 = (char *)objc_msgSendSuper2(&v271, v44[205]);
  v98 = swift_allocObject(&unk_1004AE220, 24, 7);
  swift_weakInit(v98 + 16, v30);
  v99 = swift_allocObject(&unk_1004AE518, 41, 7);
  v100 = v253;
  *(_QWORD *)(v99 + 16) = v98;
  *(_QWORD *)(v99 + 24) = v100;
  v101 = v254;
  *(_QWORD *)(v99 + 32) = v254;
  LOBYTE(v86) = v255;
  *(_BYTE *)(v99 + 40) = v255;
  v102 = objc_allocWithZone(v89);
  v103 = (char *)v102 + *(_QWORD *)((swift_isaMask & *v102) + 0x180);
  *(_QWORD *)v103 = 0;
  v103[8] = 2;
  v104 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v102 + *(_QWORD *)((swift_isaMask & *v102) + 0x188));
  *v104 = sub_1001500B0;
  v104[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v99;
  sub_1001500D0(v100, v101, v86);
  v270.receiver = v102;
  v270.super_class = v89;
  v258 = objc_msgSendSuper2(&v270, v44[205]);
  v105 = swift_allocObject(&unk_1004AE248, 24, 7);
  swift_unknownObjectWeakInit(v105 + 16, v93);
  v106 = v262;
  v107 = (uint64_t (**)(uint64_t))&v262[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v108 = *(_QWORD *)&v262[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v109 = *(_QWORD *)&v262[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v107 = sub_10014FDA0;
  v107[1] = (uint64_t (*)(uint64_t))v105;
  sub_10002CA30(v108, v109);
  v110 = objc_opt_self(NSOperation);
  v111 = swift_dynamicCastObjCClass(v106, v110);
  if (v111)
  {
    v113 = v111;
    ObjectType = swift_getObjectType(v111, v112);
    v115 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
    v117 = v115 ? v115 : 0;
    v118 = v115 ? v113 : 0;
    if (v118)
    {
      v119 = swift_getObjectType(v118, v116);
      v120 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v120 + 24) = v117;
      swift_unknownObjectWeakInit(v120 + 16, v118);
      v121 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v121 + 16, v93);
      v122 = swift_allocObject(&unk_1004AE658, 32, 7);
      *(_QWORD *)(v122 + 16) = v121;
      *(_QWORD *)(v122 + 24) = v120;
      v123 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v117 + 72);
      v124 = (id)swift_unknownObjectRetain(v262);
      swift_retain(v121);
      v125 = swift_retain(v120);
      v123(sub_1000456D4, v122, v119, v117, v125);
      swift_release(v120);
      swift_release(v121);
      swift_release(v122);
      v126 = (objc_class *)type metadata accessor for BaseOperation();
      v265.receiver = v93;
      v265.super_class = v126;
      objc_msgSendSuper2(&v265, "addDependency:", v113);

    }
  }
  v127 = swift_allocObject(&unk_1004AE540, 24, 7);
  v128 = (void *)v257;
  swift_unknownObjectWeakInit(v127 + 16, v257);
  v129 = (uint64_t (**)(uint64_t))&v93[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v130 = *(_QWORD *)&v93[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v131 = *(_QWORD *)&v93[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v129 = sub_1001500F8;
  v129[1] = (uint64_t (*)(uint64_t))v127;
  v132 = v93;
  sub_10002CA30(v130, v131);
  v133 = objc_opt_self(NSOperation);
  v134 = swift_dynamicCastObjCClass(v132, v133);
  v260 = v132;
  if (v134)
  {
    v136 = v134;
    v137 = swift_getObjectType(v134, v135);
    v138 = swift_conformsToProtocol2(v137, &protocol descriptor for PodcastsOperation);
    v140 = v138 ? v138 : 0;
    v141 = v138 ? v136 : 0;
    if (v141)
    {
      v142 = swift_getObjectType(v141, v139);
      v143 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v143 + 24) = v140;
      swift_unknownObjectWeakInit(v143 + 16, v141);
      v144 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v144 + 16, v128);
      v145 = swift_allocObject(&unk_1004AE630, 32, 7);
      *(_QWORD *)(v145 + 16) = v144;
      *(_QWORD *)(v145 + 24) = v143;
      v146 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v140 + 72);
      swift_unknownObjectRetain(v132);
      v147 = v132;
      swift_retain(v144);
      v148 = swift_retain(v143);
      v146(sub_1000456D4, v145, v142, v140, v148);
      v128 = (void *)v257;
      swift_release(v143);
      swift_release(v144);
      swift_release(v145);
      v149 = (objc_class *)type metadata accessor for BaseOperation();
      v266.receiver = v128;
      v266.super_class = v149;
      objc_msgSendSuper2(&v266, "addDependency:", v136);

      v132 = v260;
    }
  }
  v150 = v128;

  v151 = swift_allocObject(&unk_1004AE568, 24, 7);
  v152 = v256;
  swift_unknownObjectWeakInit(v151 + 16, v256);
  v153 = (uint64_t (**)(uint64_t))&v150[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v154 = *(_QWORD *)&v150[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v155 = *(_QWORD *)&v150[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v153 = sub_10014FDA0;
  v153[1] = (uint64_t (*)(uint64_t))v151;
  sub_10002CA30(v154, v155);
  v156 = objc_opt_self(NSOperation);
  v157 = swift_dynamicCastObjCClass(v150, v156);
  v257 = (uint64_t)v150;
  if (v157)
  {
    v159 = v157;
    v160 = swift_getObjectType(v157, v158);
    v161 = swift_conformsToProtocol2(v160, &protocol descriptor for PodcastsOperation);
    v163 = v161 ? v161 : 0;
    v164 = v161 ? v159 : 0;
    if (v164)
    {
      v165 = swift_getObjectType(v164, v162);
      v166 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v166 + 24) = v163;
      swift_unknownObjectWeakInit(v166 + 16, v164);
      v167 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v167 + 16, v152);
      v168 = swift_allocObject(&unk_1004AE608, 32, 7);
      *(_QWORD *)(v168 + 16) = v167;
      *(_QWORD *)(v168 + 24) = v166;
      v169 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v163 + 72);
      swift_unknownObjectRetain(v150);
      v170 = v150;
      swift_retain(v167);
      v171 = swift_retain(v166);
      v169(sub_1000456D4, v168, v165, v163, v171);
      v152 = v256;
      v172 = v166;
      v132 = v260;
      swift_release(v172);
      swift_release(v167);
      swift_release(v168);
      v173 = (objc_class *)type metadata accessor for BaseOperation();
      v267.receiver = v152;
      v267.super_class = v173;
      objc_msgSendSuper2(&v267, "addDependency:", v159);

      v150 = (char *)v257;
    }
  }
  v174 = (char *)v152;

  v175 = swift_allocObject(&unk_1004AE270, 24, 7);
  v176 = v258;
  swift_unknownObjectWeakInit(v175 + 16, v258);
  v177 = (uint64_t (**)(uint64_t))&v174[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v178 = *(_QWORD *)&v174[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v179 = *(_QWORD *)&v174[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v177 = sub_10014FDA0;
  v177[1] = (uint64_t (*)(uint64_t))v175;
  sub_10002CA30(v178, v179);
  v180 = objc_opt_self(NSOperation);
  v181 = swift_dynamicCastObjCClass(v174, v180);
  v183 = (void *)v259;
  if (v181)
  {
    v184 = v181;
    v185 = swift_getObjectType(v181, v182);
    v186 = swift_conformsToProtocol2(v185, &protocol descriptor for PodcastsOperation);
    v188 = v186 ? v186 : 0;
    v189 = v186 ? v184 : 0;
    if (v189)
    {
      v256 = (char *)swift_getObjectType(v189, v187);
      v190 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v190 + 24) = v188;
      swift_unknownObjectWeakInit(v190 + 16, v189);
      v191 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v191 + 16, v176);
      v192 = swift_allocObject(&unk_1004AE5E0, 32, 7);
      *(_QWORD *)(v192 + 16) = v191;
      *(_QWORD *)(v192 + 24) = v190;
      v193 = *(void (**)(uint64_t (*)(), uint64_t, char *, uint64_t, __n128))(v188 + 72);
      swift_unknownObjectRetain(v174);
      v194 = v174;
      swift_retain(v191);
      v195 = swift_retain(v190);
      v193(sub_1000456D4, v192, v256, v188, v195);
      v176 = v258;
      v196 = v190;
      v132 = v260;
      swift_release(v196);
      swift_release(v191);
      swift_release(v192);
      v197 = (objc_class *)type metadata accessor for BaseOperation();
      v268.receiver = v176;
      v268.super_class = v197;
      objc_msgSendSuper2(&v268, "addDependency:", v184);

      v183 = (void *)v259;
    }
  }
  v198 = v176;

  v199 = swift_allocObject(&unk_1004AE590, 24, 7);
  swift_unknownObjectWeakInit(v199 + 16, v183);
  v200 = (uint64_t (**)(uint64_t))((char *)v198 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  v201 = *(_QWORD *)((char *)v198 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  v202 = *(_QWORD *)((char *)v198 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8);
  *v200 = sub_100150100;
  v200[1] = (uint64_t (*)(uint64_t))v199;
  sub_10002CA30(v201, v202);
  v203 = objc_opt_self(NSOperation);
  v204 = swift_dynamicCastObjCClass(v198, v203);
  if (v204)
  {
    v206 = v204;
    v207 = swift_getObjectType(v204, v205);
    v208 = swift_conformsToProtocol2(v207, &protocol descriptor for PodcastsOperation);
    v210 = v208 ? v208 : 0;
    v211 = v208 ? v206 : 0;
    if (v211)
    {
      v258 = (_QWORD *)swift_getObjectType(v211, v209);
      v212 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v212 + 24) = v210;
      swift_unknownObjectWeakInit(v212 + 16, v211);
      v213 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v213 + 16, v183);
      v214 = swift_allocObject(&unk_1004AE5B8, 32, 7);
      *(_QWORD *)(v214 + 16) = v213;
      *(_QWORD *)(v214 + 24) = v212;
      v215 = *(void (**)(uint64_t (*)(), uint64_t, _QWORD *, uint64_t, __n128))(v210 + 72);
      swift_unknownObjectRetain(v198);
      v216 = v198;
      swift_retain(v213);
      v217 = swift_retain(v212);
      v215(sub_1000456D4, v214, v258, v210, v217);
      v218 = (void *)v259;
      v219 = v212;
      v132 = v260;
      swift_release(v219);
      swift_release(v213);
      v220 = v214;
      v183 = v218;
      swift_release(v220);
      v221 = (objc_class *)type metadata accessor for BaseOperation();
      v269.receiver = v218;
      v269.super_class = v221;
      objc_msgSendSuper2(&v269, "addDependency:", v206);

    }
  }
  v222 = v183;

  v223 = (uint64_t (**)(uint64_t))&v222[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v224 = *(_QWORD *)&v222[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v225 = *(_QWORD *)&v222[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
  *v223 = sub_10014DFCC;
  v223[1] = 0;
  sub_10002CA30(v224, v225);

  v226 = sub_10003F544((uint64_t *)&unk_100553780);
  v227 = swift_allocObject(v226, 80, 7);
  *(_OWORD *)(v227 + 16) = xmmword_1003CA1F0;
  v228 = v262;
  *(_QWORD *)(v227 + 32) = v262;
  *(_QWORD *)(v227 + 40) = v132;
  v229 = (void *)v257;
  *(_QWORD *)(v227 + 48) = v257;
  *(_QWORD *)(v227 + 56) = v222;
  *(_QWORD *)(v227 + 64) = v174;
  *(_QWORD *)(v227 + 72) = v198;
  v274 = v227;
  specialized Array._endMutation()(v227);
  v230 = v274;
  v231 = v228;
  v232 = v132;
  v233 = v229;
  v234 = v174;
  v235 = v198;
  v236 = v222;
  v237 = sub_10013E604();
  if ((unint64_t)v230 >> 62)
  {
    if (v230 < 0)
      v241 = v230;
    else
      v241 = v230 & 0xFFFFFFFFFFFFFF8;
    v242 = sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
    swift_bridgeObjectRetain(v230);
    v239 = _bridgeCocoaArray<A>(_:)(v241, v242);
    swift_bridgeObjectRelease(v230);
  }
  else
  {
    v238 = swift_bridgeObjectRetain(v230);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v238);
    sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
    v239 = v230;
  }
  swift_bridgeObjectRelease(v230);
  sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v239);
  objc_msgSend(v237, "addOperations:waitUntilFinished:", isa, 0);

}

void sub_10014D89C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(__n128);
  __n128 v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  id v19;
  _QWORD v20[5];
  _QWORD *v21;

  v10 = *a1;
  v11 = swift_allocObject(&unk_1004AE6F8, 32, 7);
  *(_QWORD *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = a4;
  v13 = *(uint64_t (**)(__n128))(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  swift_retain(a4);
  v14 = swift_retain(v12);
  v15 = (void *)v13(v14);
  swift_release(v12);
  v16 = (_QWORD *)swift_allocObject(&unk_1004AE720, 56, 7);
  v16[2] = v15;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = sub_100150154;
  v16[6] = v11;
  v20[4] = sub_10015015C;
  v21 = v16;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  v20[2] = sub_100027AF8;
  v20[3] = &unk_1004AE738;
  v17 = _Block_copy(v20);
  v18 = v21;
  v19 = v15;
  swift_bridgeObjectRetain(a6);
  swift_retain(v11);
  swift_release(v18);
  objc_msgSend(v19, "performBlock:", v17);
  _Block_release(v17);
  swift_release(v11);

}

void sub_10014D9E4(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  Swift::Bool v16;
  uint64_t Strong;
  uint64_t v18;
  void *v19;
  NSURL *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  id v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE v33[24];

  v32 = a3;
  v31 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007A64(a1, (uint64_t)v10, (uint64_t *)&unk_100553DC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100553DC0);
LABEL_11:
    v29 = v32;
    *v32 = 0;
    *((_BYTE *)v29 + 8) = 0;
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  type metadata accessor for FairPlayRolloutController(0);
  v15 = (void *)static FairPlayRolloutController.shared.getter();
  v16 = FairPlayRolloutController.isEnabled()();

  if (!v16)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    goto LABEL_11;
  }
  swift_beginAccess(a2 + 16, v33, 0, 0);
  Strong = swift_weakLoadStrong(a2 + 16);
  if (Strong)
  {
    v18 = Strong;
    v19 = *(void **)(Strong + OBJC_IVAR____TtC8Podcasts11JobPipeline_fairPlayInvalidationManager);
    swift_unknownObjectRetain(v19);
    swift_release(v18);
    URL._bridgeToObjectiveC()(v20);
    v22 = v21;
    objc_msgSend(v19, "markKeyForInvalidationAt:shouldRemove:", v21, 0);

    Strong = swift_unknownObjectRelease(v19);
  }
  v23 = static Logger.fairPlay.getter(Strong);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    swift_slowDealloc(v26, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v31);
  v27 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
  v28 = objc_msgSend((id)objc_opt_self(MPCloudController), "controllerWithUserIdentity:", v27);

  if (v28)
  {
    objc_msgSend(v28, "processPendingKeyInvalidations");

    goto LABEL_10;
  }
  __break(1u);
}

uint64_t sub_10014DCE0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;
  char v37[24];
  int v38;

  v38 = a4;
  v33 = a2;
  v34 = a3;
  v8 = type metadata accessor for DownloadJob(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - v13;
  a1 += 16;
  swift_beginAccess(a1, v37, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (!result)
  {
LABEL_7:
    *(_QWORD *)a5 = 0;
    *(_BYTE *)(a5 + 8) = 0;
    return result;
  }
  v16 = result;
  v31 = a5;
  v17 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v18 = *(id *)(result + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v12, sub_10014FD30, v16, v8);
  v32 = v5;

  sub_10014FDF8((uint64_t)v12, (uint64_t)v14, type metadata accessor for DownloadJob);
  v19 = &v14[*(int *)(v8 + 40)];
  sub_10014FE3C(*(_QWORD *)v19, *((_QWORD *)v19 + 1), *((_QWORD *)v19 + 2), *((_QWORD *)v19 + 3));
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 3) = 4;
  *((_QWORD *)v19 + 4) = 0;
  *((_QWORD *)v19 + 5) = 0;
  *((_WORD *)v19 + 24) = 0;
  sub_10003F970((uint64_t)v12, type metadata accessor for DownloadJob);
  v20 = *(void **)(v16 + v17);
  sub_10014FDF8((uint64_t)v14, (uint64_t)v12, type metadata accessor for DownloadJob);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = swift_allocObject(&unk_1004AE680, v22 + v10, v21 | 7);
  *(_QWORD *)(v23 + 16) = v16;
  sub_10013BE30((uint64_t)v12, v23 + v22, type metadata accessor for DownloadJob);
  v24 = swift_allocObject(&unk_1004AE6A8, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_10014FE58;
  *(_QWORD *)(v24 + 24) = v23;
  aBlock[4] = sub_1001529CC;
  v36 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004AE6C0;
  v25 = _Block_copy(aBlock);
  v26 = v36;
  v27 = v20;
  swift_retain(v24);
  swift_retain(v16);
  swift_release(v26);
  dispatch_sync(v27, v25);
  _Block_release(v25);

  sub_10003F970((uint64_t)v14, type metadata accessor for DownloadJob);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation(v24, "", 81, 137, 30, 1);
  swift_release(v23);
  result = swift_release(v24);
  if ((v18 & 1) == 0)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v16 + OBJC_IVAR____TtC8Podcasts11JobPipeline_delegate);
    if (Strong)
    {
      v29 = Strong;
      sub_100334AFC(v16, v33, v34, v38);
      swift_release(v16);
      result = swift_unknownObjectRelease(v29);
    }
    else
    {
      result = swift_release(v16);
    }
    a5 = v31;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_10014DFCC(uint64_t a1)
{
  return sub_10014F410(a1, "Unexpected error during pipline failure cleanup %{public}s", 58);
}

uint64_t sub_10014DFDC(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  id v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD aBlock[5];
  uint64_t v59;
  _QWORD v60[6];
  char v61;

  v5 = v4;
  v6 = a4;
  v55 = a4;
  v54 = a1;
  v9 = type metadata accessor for DownloadJob(0);
  v10 = *(_QWORD *)(v9 - 8);
  v56 = *(_QWORD *)(v10 + 64);
  v57 = v10;
  v11 = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin(v11);
  v16 = (uint64_t *)((char *)&v51 - v15);
  v53 = static os_log_type_t.debug.getter(v14);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v52 = static OS_os_log.downloads.getter();
  v17 = sub_10003F544(&qword_1005559A0);
  v18 = swift_allocObject(v17, 232, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1003CA210;
  *(_QWORD *)(v18 + 56) = &type metadata for Double;
  *(_QWORD *)(v18 + 64) = &protocol witness table for Double;
  *(double *)(v18 + 32) = (double)a3 / (double)a2;
  *(_QWORD *)(v18 + 96) = &type metadata for Int64;
  *(_QWORD *)(v18 + 104) = &protocol witness table for Int64;
  *(_QWORD *)(v18 + 72) = a3;
  *(_QWORD *)(v18 + 136) = &type metadata for Int64;
  *(_QWORD *)(v18 + 144) = &protocol witness table for Int64;
  *(_QWORD *)(v18 + 112) = a2;
  v19 = sub_10003E198();
  v20 = v19;
  v21 = 28526;
  if ((v6 & 1) != 0)
    v21 = 7562617;
  v22 = 0xE200000000000000;
  if ((v6 & 1) != 0)
    v22 = 0xE300000000000000;
  *(_QWORD *)(v18 + 176) = &type metadata for String;
  *(_QWORD *)(v18 + 184) = v19;
  *(_QWORD *)(v18 + 152) = v21;
  *(_QWORD *)(v18 + 160) = v22;
  v23 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v24 = *(id *)(v4 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v16, sub_10014FD30, v5, v9);

  v25 = (_QWORD *)((char *)v16 + *(int *)(v9 + 20));
  v27 = *v25;
  v26 = v25[1];
  swift_bridgeObjectRetain(v26);
  sub_10003F970((uint64_t)v16, type metadata accessor for DownloadJob);
  *(_QWORD *)(v18 + 216) = &type metadata for String;
  *(_QWORD *)(v18 + 224) = v20;
  *(_QWORD *)(v18 + 192) = v27;
  *(_QWORD *)(v18 + 200) = v26;
  v28 = (void *)v52;
  os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v52, "Download update: %.2lf percent complete, received %d total %d paused: %{public}s, episodeUuid: %{public}s", 105, 2, v18);

  swift_bridgeObjectRelease(v18);
  v29 = *(id *)(v5 + v23);
  OS_dispatch_queue.sync<A>(execute:)(v13, sub_10014FD30, v5, v9);

  v30 = v54;
  v31 = objc_msgSend(v54, "totalUnitCount");
  v32 = objc_msgSend(v30, "completedUnitCount");
  v33 = sub_1001DB104();
  v35 = v34;
  v36 = objc_msgSend(v30, "fractionCompleted");
  v38 = v37;
  v39 = NSProgress.estimatedTimeRemaining.getter(v36);
  v60[0] = v31;
  v60[1] = v32;
  v60[2] = v33;
  v60[3] = v35;
  v60[4] = v38;
  v60[5] = v39;
  v61 = v40 & 1;
  sub_1001D7F50((uint64_t)v60, v55, (uint64_t)v16);
  swift_bridgeObjectRelease(v35);
  sub_10003F970((uint64_t)v13, type metadata accessor for DownloadJob);
  v41 = *(void **)(v5 + v23);
  sub_10014FDF8((uint64_t)v16, (uint64_t)v13, type metadata accessor for DownloadJob);
  v42 = *(unsigned __int8 *)(v57 + 80);
  v43 = (v42 + 24) & ~v42;
  v44 = swift_allocObject(&unk_1004AE428, v43 + v56, v42 | 7);
  *(_QWORD *)(v44 + 16) = v5;
  sub_10013BE30((uint64_t)v13, v44 + v43, type metadata accessor for DownloadJob);
  v45 = swift_allocObject(&unk_1004AE450, 32, 7);
  *(_QWORD *)(v45 + 16) = sub_10014FE58;
  *(_QWORD *)(v45 + 24) = v44;
  aBlock[4] = sub_1001529CC;
  v59 = v45;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004AE468;
  v46 = _Block_copy(aBlock);
  v47 = v59;
  v48 = v41;
  swift_retain(v5);
  swift_retain(v45);
  swift_release(v47);
  dispatch_sync(v48, v46);
  _Block_release(v46);

  sub_10003F970((uint64_t)v16, type metadata accessor for DownloadJob);
  LOBYTE(v46) = swift_isEscapingClosureAtFileLocation(v45, "", 81, 137, 30, 1);
  swift_release(v44);
  result = swift_release(v45);
  if ((v46 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v50 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts11JobPipeline_throttler);
    swift_retain(v5);
    swift_retain(v50);
    sub_1002B015C((uint64_t)sub_10014FED8, v5);
    swift_release(v50);
    return swift_release(v5);
  }
  return result;
}

void sub_10014E448(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  uint64_t v6;

  v2 = sub_10013E604();
  v5[4] = sub_10014FEE0;
  v6 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100027AF8;
  v5[3] = &unk_1004AE490;
  v3 = _Block_copy(v5);
  v4 = v6;
  swift_retain(a1);
  swift_release(v4);
  objc_msgSend(v2, "addOperationWithBlock:", v3);
  _Block_release(v3);

}

uint64_t sub_10014E4F4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_delegate);
  if (result)
  {
    v3 = result;
    sub_10032D934(a1);
    return swift_unknownObjectRelease(v3);
  }
  return result;
}

void sub_10014E540(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  id v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t (*v25)();
  uint64_t Strong;
  uint64_t v27;
  _BYTE v28[12];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[3];
  void *v34;
  uint64_t (*v35)();
  uint64_t v36;

  v4 = v3;
  v29 = a3;
  v30 = a1;
  v31 = a2;
  v5 = type metadata accessor for DownloadJob(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin();
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v10 = &v28[-v9];
  v11 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v12 = *(id *)(v3 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v8, sub_10014FD30, v4, v5);
  v32 = 0;

  sub_10014FDF8((uint64_t)v8, (uint64_t)v10, type metadata accessor for DownloadJob);
  v13 = &v10[*(int *)(v5 + 40)];
  sub_10014FE3C(*(_QWORD *)v13, *((_QWORD *)v13 + 1), *((_QWORD *)v13 + 2), *((_QWORD *)v13 + 3));
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 4;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 5) = 0;
  *((_WORD *)v13 + 24) = 0;
  sub_10003F970((uint64_t)v8, type metadata accessor for DownloadJob);
  v14 = *(void **)(v4 + v11);
  sub_10014FDF8((uint64_t)v10, (uint64_t)v8, type metadata accessor for DownloadJob);
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = swift_allocObject(&unk_1004AE3B0, v16 + v7, v15 | 7);
  *(_QWORD *)(v17 + 16) = v4;
  sub_10013BE30((uint64_t)v8, v17 + v16, type metadata accessor for DownloadJob);
  v18 = swift_allocObject(&unk_1004AE3D8, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_10014FE58;
  *(_QWORD *)(v18 + 24) = v17;
  v35 = sub_1001529CC;
  v36 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  v34 = &unk_1004AE3F0;
  v19 = _Block_copy(aBlock);
  v20 = v36;
  v21 = v14;
  swift_retain();
  swift_retain();
  swift_release(v20);
  dispatch_sync(v21, v19);
  _Block_release(v19);

  sub_10003F970((uint64_t)v10, type metadata accessor for DownloadJob);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation(v18, "", 81, 137, 30, 1);
  swift_release(v17);
  swift_release(v18);
  if ((v19 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v22 = *(id *)(v4 + v11);
    v23 = sub_10003F544(&qword_100564DA0);
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100152A34, v4, v23);

    v24 = v34;
    v25 = v35;
    sub_10003A834(aBlock, (uint64_t)v34);
    (*((void (**)(void *, uint64_t (*)()))v25 + 15))(v24, v25);
    sub_10003D380(aBlock);
    Strong = swift_unknownObjectWeakLoadStrong(v4 + OBJC_IVAR____TtC8Podcasts11JobPipeline_delegate);
    if (Strong)
    {
      v27 = Strong;
      sub_100334AFC(v4, v30, v31, v29 | 0x40);
      swift_unknownObjectRelease(v27);
    }
  }
}

void sub_10014E840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  char *v14;
  objc_class *v15;
  char *v16;
  char *v17;
  char *v18;
  double v19;
  id v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void (**v24)(uint64_t@<X8>);
  char *v25;
  uint64_t v26;
  uint64_t (**v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v45;
  uint64_t v46;
  objc_class *v47;
  char *v48;
  uint64_t v49;
  uint64_t (**v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(void (*)(), uint64_t, char *, uint64_t, __n128);
  char *v69;
  __n128 v70;
  uint64_t v71;
  objc_class *v72;
  char *v73;
  uint64_t (**v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  Class isa;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  id v92;
  objc_super v93;
  objc_super v94;
  uint64_t v95;
  objc_super v96;
  objc_super v97;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DownloadJob(0);
  v7 = __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = static os_log_type_t.default.getter(v7);
  v11 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v12 = (void *)static OS_os_log.downloads.getter(v11);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v12, "Download has been cancelled", 27, 2, _swiftEmptyArrayStorage);

  v13 = *(id *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v9, sub_10014FD30, v1, v6);

  (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 16))(v5, v9, v2);
  sub_10003F970((uint64_t)v9, type metadata accessor for DownloadJob);
  v14 = (char *)sub_10014F514((uint64_t)v5, 0);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v15 = (objc_class *)sub_10003F544((uint64_t *)&unk_10055BCB0);
  v16 = (char *)objc_allocWithZone(v15);
  v17 = &v16[*(_QWORD *)((swift_isaMask & *(_QWORD *)v16) + 0x180)];
  *(_QWORD *)v17 = 0;
  v17[8] = 2;
  v18 = &v16[*(_QWORD *)((swift_isaMask & *(_QWORD *)v16) + 0x188)];
  *(_QWORD *)v18 = sub_10014FD44;
  *((_QWORD *)v18 + 1) = v1;
  v97.receiver = v16;
  v97.super_class = v15;
  *(_QWORD *)&v19 = swift_retain(v1).n128_u64[0];
  v20 = objc_msgSendSuper2(&v97, "init", v19);
  v21 = swift_allocObject(&unk_1004AE220, 24, 7);
  swift_weakInit(v21 + 16, v1);
  v22 = (char *)objc_allocWithZone(v15);
  v23 = &v22[*(_QWORD *)((swift_isaMask & *(_QWORD *)v22) + 0x180)];
  *(_QWORD *)v23 = 0;
  v23[8] = 2;
  v24 = (void (**)(uint64_t@<X8>))&v22[*(_QWORD *)((swift_isaMask & *(_QWORD *)v22) + 0x188)];
  *v24 = sub_10014FD80;
  v24[1] = (void (*)(uint64_t@<X8>))v21;
  v96.receiver = v22;
  v96.super_class = v15;
  v25 = (char *)objc_msgSendSuper2(&v96, "init");
  v26 = swift_allocObject(&unk_1004AE248, 24, 7);
  swift_unknownObjectWeakInit(v26 + 16, v25);
  v27 = (uint64_t (**)(uint64_t))&v14[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v28 = *(_QWORD *)&v14[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v29 = *(_QWORD *)&v14[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v27 = sub_10014FDA0;
  v27[1] = (uint64_t (*)(uint64_t))v26;
  sub_10002CA30(v28, v29);
  v30 = objc_opt_self(NSOperation);
  v31 = swift_dynamicCastObjCClass(v14, v30);
  if (v31)
  {
    v33 = v31;
    ObjectType = swift_getObjectType(v31, v32);
    v35 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
    v37 = v35 ? v35 : 0;
    v38 = v35 ? v33 : 0;
    if (v38)
    {
      v91 = swift_getObjectType(v38, v36);
      v39 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v39 + 24) = v37;
      swift_unknownObjectWeakInit(v39 + 16, v38);
      v40 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      v92 = v20;
      v41 = v40;
      swift_unknownObjectWeakInit(v40 + 16, v25);
      v42 = swift_allocObject(&unk_1004AE310, 32, 7);
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)(v42 + 24) = v39;
      v43 = v1;
      v44 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v37 + 72);
      swift_unknownObjectRetain(v14);
      v90 = v14;
      swift_retain(v41);
      v45 = swift_retain(v39);
      v44(sub_1000456D4, v42, v91, v37, v45);
      v1 = v43;
      swift_release(v39);
      v46 = v41;
      v20 = v92;
      swift_release(v46);
      swift_release(v42);
      v47 = (objc_class *)type metadata accessor for BaseOperation();
      v93.receiver = v25;
      v93.super_class = v47;
      objc_msgSendSuper2(&v93, "addDependency:", v33);
      v48 = v90;

    }
  }
  v49 = swift_allocObject(&unk_1004AE270, 24, 7);
  swift_unknownObjectWeakInit(v49 + 16, v20);
  v50 = (uint64_t (**)(uint64_t))&v25[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v51 = *(_QWORD *)&v25[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  v52 = *(_QWORD *)&v25[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
  *v50 = sub_10014FDA0;
  v50[1] = (uint64_t (*)(uint64_t))v49;
  v53 = v25;
  sub_10002CA30(v51, v52);
  v54 = objc_opt_self(NSOperation);
  v55 = swift_dynamicCastObjCClass(v53, v54);
  if (v55)
  {
    v57 = v55;
    v58 = swift_getObjectType(v55, v56);
    v59 = swift_conformsToProtocol2(v58, &protocol descriptor for PodcastsOperation);
    v61 = v59 ? v59 : 0;
    v62 = v59 ? v57 : 0;
    if (v62)
    {
      v90 = (char *)swift_getObjectType(v62, v60);
      v63 = swift_allocObject(&unk_1004AE298, 32, 7);
      *(_QWORD *)(v63 + 24) = v61;
      swift_unknownObjectWeakInit(v63 + 16, v62);
      v64 = swift_allocObject(&unk_1004AE2C0, 24, 7);
      swift_unknownObjectWeakInit(v64 + 16, v20);
      v65 = swift_allocObject(&unk_1004AE2E8, 32, 7);
      v91 = v1;
      v92 = v20;
      v66 = v65;
      *(_QWORD *)(v65 + 16) = v64;
      *(_QWORD *)(v65 + 24) = v63;
      v67 = v14;
      v68 = *(void (**)(void (*)(), uint64_t, char *, uint64_t, __n128))(v61 + 72);
      swift_unknownObjectRetain(v53);
      v69 = v53;
      swift_retain(v64);
      v70 = swift_retain(v63);
      v68(sub_1000450E8, v66, v90, v61, v70);
      v14 = v67;
      swift_release(v63);
      swift_release(v64);
      v71 = v66;
      v20 = v92;
      swift_release(v71);
      v72 = (objc_class *)type metadata accessor for BaseOperation();
      v94.receiver = v20;
      v94.super_class = v72;
      objc_msgSendSuper2(&v94, "addDependency:", v57);

    }
  }
  v73 = (char *)v20;

  v74 = (uint64_t (**)(uint64_t))&v73[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v75 = *(_QWORD *)&v73[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  v76 = *(_QWORD *)&v73[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
  *v74 = sub_10014F400;
  v74[1] = 0;
  sub_10002CA30(v75, v76);

  v77 = sub_10003F544((uint64_t *)&unk_100553780);
  v78 = swift_allocObject(v77, 56, 7);
  *(_OWORD *)(v78 + 16) = xmmword_1003CA260;
  *(_QWORD *)(v78 + 32) = v14;
  *(_QWORD *)(v78 + 40) = v53;
  *(_QWORD *)(v78 + 48) = v73;
  v95 = v78;
  specialized Array._endMutation()(v78);
  v79 = v95;
  v80 = v14;
  v81 = v53;
  v82 = v73;
  v83 = sub_10013E604();
  if ((unint64_t)v79 >> 62)
  {
    if (v79 < 0)
      v87 = v79;
    else
      v87 = v79 & 0xFFFFFFFFFFFFFF8;
    v88 = sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
    swift_bridgeObjectRetain(v79);
    v85 = _bridgeCocoaArray<A>(_:)(v87, v88);
    swift_bridgeObjectRelease(v79);
  }
  else
  {
    v84 = swift_bridgeObjectRetain(v79);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v84);
    sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
    v85 = v79;
  }
  swift_bridgeObjectRelease(v79);
  sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v85);
  objc_msgSend(v83, "addOperations:waitUntilFinished:", isa, 0);

}

uint64_t sub_10014EF70@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;
  _QWORD *v29;

  v29 = a2;
  v4 = type metadata accessor for DownloadJob(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - v9;
  v11 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  v12 = *(id *)(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)(v8, sub_10014FD30, a1, v4);
  v26 = v2;

  sub_10014FDF8((uint64_t)v8, (uint64_t)v10, type metadata accessor for DownloadJob);
  v13 = &v10[*(int *)(v4 + 40)];
  sub_10014FE3C(*(_QWORD *)v13, *((_QWORD *)v13 + 1), *((_QWORD *)v13 + 2), *((_QWORD *)v13 + 3));
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 3;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 5) = 0;
  *((_WORD *)v13 + 24) = 0;
  sub_10003F970((uint64_t)v8, type metadata accessor for DownloadJob);
  v14 = *(void **)(a1 + v11);
  sub_10014FDF8((uint64_t)v10, (uint64_t)v8, type metadata accessor for DownloadJob);
  v15 = *(unsigned __int8 *)(v5 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = swift_allocObject(&unk_1004AE338, v16 + v6, v15 | 7);
  *(_QWORD *)(v17 + 16) = a1;
  sub_10013BE30((uint64_t)v8, v17 + v16, type metadata accessor for DownloadJob);
  v18 = swift_allocObject(&unk_1004AE360, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_10014FE58;
  *(_QWORD *)(v18 + 24) = v17;
  aBlock[4] = sub_100029B3C;
  v28 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004AE378;
  v19 = _Block_copy(aBlock);
  v20 = v28;
  v21 = v14;
  swift_retain(a1);
  swift_retain(v18);
  swift_release(v20);
  dispatch_sync(v21, v19);
  _Block_release(v19);

  sub_10003F970((uint64_t)v10, type metadata accessor for DownloadJob);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v18, "", 81, 137, 30, 1);
  swift_release(v17);
  result = swift_release(v18);
  if ((v21 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    result = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_delegate);
    if (result)
    {
      v23 = result;
      sub_1003340AC(a1);
      result = swift_unknownObjectRelease(v23);
    }
    v24 = v29;
    *v29 = 0;
    *((_BYTE *)v24 + 8) = 0;
  }
  return result;
}

void sub_10014F214(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  Swift::Bool v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _BYTE v23[24];
  _BYTE v24[24];

  v6 = type metadata accessor for EpisodeMetadata(0);
  __chkstk_darwin(v6);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v9);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for FairPlayRolloutController(0);
  v12 = (void *)static FairPlayRolloutController.shared.getter();
  v13 = FairPlayRolloutController.isEnabled()();

  if (!v13)
  {
    v14 = a1 + 16;
    swift_beginAccess(v14, v24, 0, 0);
    Strong = swift_weakLoadStrong(v14);
    if (Strong)
    {
      v16 = Strong;
      v17 = *(id *)(Strong + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
      OS_dispatch_queue.sync<A>(execute:)(v11, a2, v16, v9);
      swift_release(v16);

      sub_10014FDF8((uint64_t)v11 + *(int *)(v9 + 36), (uint64_t)v8, type metadata accessor for EpisodeMetadata);
      sub_10003F970((uint64_t)v11, type metadata accessor for DownloadJob);
      v18 = *((_QWORD *)v8 + 4);
      v19 = v8[40];
      sub_10003F970((uint64_t)v8, type metadata accessor for EpisodeMetadata);
      if ((v19 & 1) == 0)
      {
        swift_beginAccess(v14, v23, 0, 0);
        v20 = swift_weakLoadStrong(v14);
        if (v20)
        {
          v21 = v20;
          v22 = *(id *)(v20 + OBJC_IVAR____TtC8Podcasts11JobPipeline_secureDownloadRenewalManager);
          swift_release(v21);
          dispatch thunk of SecureDownloadRenewalManager.requestSecureDeletion(of:completionHandler:)(v18, 0, 0);

        }
      }
    }
  }
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
}

uint64_t sub_10014F400(uint64_t a1)
{
  return sub_10014F410(a1, "Failed to cancel download properly due to error: %{public}s", 59);
}

uint64_t sub_10014F410(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  _BYTE v16[8];

  v6 = static os_log_type_t.error.getter(a1);
  v7 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v8 = (void *)static OS_os_log.downloads.getter(v7);
  v9 = sub_10003F544(&qword_1005559A0);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1003CA200;
  swift_getErrorValue(a1, v16, v15);
  v11 = Error.localizedDescription.getter(v15[1], v15[2]);
  v13 = v12;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_10003E198();
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v13;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v8, a2, a3, 2, v10);

  return swift_bridgeObjectRelease(v10);
}

id sub_10014F514(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  char *v18;
  void (**v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v21;
  objc_super v22;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC8Podcasts11JobPipeline_jobStorage;
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v21 = *(_OWORD *)(v2 + v9);
  v10 = swift_unknownObjectRetain(v21);
  v11 = static OS_os_log.downloads.getter(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = v13 + v7;
  v15 = swift_allocObject(&unk_1004AE1F8, v14 + 1, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15 + v13, v8, v5);
  *(_BYTE *)(v15 + v14) = a2;
  v16 = (objc_class *)sub_10003F544(&qword_1005532D8);
  v17 = (char *)objc_allocWithZone(v16);
  v18 = &v17[*(_QWORD *)((swift_isaMask & *(_QWORD *)v17) + 0x198)];
  *(_QWORD *)v18 = 0;
  v18[8] = 2;
  v19 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v17[*(_QWORD *)((swift_isaMask & *(_QWORD *)v17)
                                                                                 + 0x1A8)];
  *v19 = sub_10014FCCC;
  v19[1] = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15;
  *(_OWORD *)&v17[*(_QWORD *)((swift_isaMask & *(_QWORD *)v17) + 0x1A0)] = v21;
  *(_QWORD *)&v17[*(_QWORD *)((swift_isaMask & *(_QWORD *)v17) + 0x1B0)] = v11;
  v22.receiver = v17;
  v22.super_class = v16;
  return objc_msgSendSuper2(&v22, "init");
}

uint64_t sub_10014F6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10003F970(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_metadata, type metadata accessor for EpisodeMetadata);
  sub_100152110(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_delegate);
  sub_10003F970(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline__job, type metadata accessor for DownloadJob);
  sub_10003D380((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline__task));
  sub_10002CA30(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_assetPrefetchBlock), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_assetPrefetchBlock + 8));
  v1 = v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_assetsFolder;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_episodeStorage));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_jobStorage));
  sub_100007A28(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_mediaLibraryClient, &qword_1005536B0);
  sub_10003D380((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_dsidProvider));
  sub_10003D380((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_artworkStorage));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_fairPlayInvalidationManager));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_throttler));
  sub_100151B40(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_analyticsChannel));
  sub_10003D380((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_bugReporter));
  return v0;
}

uint64_t sub_10014F85C()
{
  uint64_t v0;

  sub_10014F6C4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10014F880()
{
  return type metadata accessor for JobPipeline(0);
}

uint64_t type metadata accessor for JobPipeline(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100552FE8, (uint64_t)&nominal type descriptor for JobPipeline);
}

uint64_t sub_10014F89C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[21];

  result = type metadata accessor for EpisodeMetadata(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    v6[1] = &unk_1003CA2B0;
    v6[2] = &unk_1003CA2C8;
    result = type metadata accessor for DownloadJob(319);
    if (v4 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(result - 8) + 64;
      v6[4] = &unk_1003CA2E0;
      v6[5] = &unk_1003CA2F8;
      result = type metadata accessor for URL(319);
      if (v5 <= 0x3F)
      {
        v6[6] = *(_QWORD *)(result - 8) + 64;
        v6[7] = &unk_1003CA310;
        v6[8] = &unk_1003CA310;
        v6[9] = &unk_1003CA328;
        v6[10] = &unk_1003CA2E0;
        v6[11] = &unk_1003CA2E0;
        v6[12] = &unk_1003CA340;
        v6[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v6[14] = (char *)&value witness table for Builtin.NativeObject + 64;
        v6[15] = &unk_1003CA358;
        v6[16] = &unk_1003CA358;
        v6[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v6[18] = &unk_1003CA370;
        v6[19] = &unk_1003CA340;
        v6[20] = &unk_1003CA2E0;
        return swift_updateClassMetadata2(a1, 256, 21, v6, a1 + 80);
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PreflightError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001527C4(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_10014F9CC);
}

uint64_t sub_10014F9CC(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return swift_errorRetain(result);
  return result;
}

uint64_t destroy for PreflightError(uint64_t a1)
{
  return sub_10014F9F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10014F9F0(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return swift_errorRelease(result);
  return result;
}

uint64_t *assignWithCopy for PreflightError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100152820(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_10014F9CC, (void (*)(uint64_t, uint64_t, uint64_t))sub_10014F9F0);
}

uint64_t *assignWithTake for PreflightError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10015288C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10014F9F0);
}

uint64_t getEnumTagSinglePayload for PreflightError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PreflightError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_10014FAB0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PreflightError()
{
  return &type metadata for PreflightError;
}

uint64_t storeEnumTagSinglePayload for JobPipeline.PipelineType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10014FB24 + 4 * byte_1003CA279[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014FB58 + 4 * byte_1003CA274[v4]))();
}

uint64_t sub_10014FB58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014FB60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014FB68);
  return result;
}

uint64_t sub_10014FB74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014FB7CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10014FB80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014FB88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JobPipeline.PipelineType()
{
  return &type metadata for JobPipeline.PipelineType;
}

unint64_t sub_10014FBA8()
{
  unint64_t result;

  result = qword_1005532C0;
  if (!qword_1005532C0)
  {
    result = swift_getWitnessTable(&unk_1003CA3F4, &type metadata for JobPipeline.PipelineType);
    atomic_store(result, (unint64_t *)&qword_1005532C0);
  }
  return result;
}

unint64_t sub_10014FBF0()
{
  unint64_t result;

  result = qword_1005532C8;
  if (!qword_1005532C8)
  {
    result = swift_getWitnessTable(&unk_1003CA464, &type metadata for PreflightError);
    atomic_store(result, (unint64_t *)&qword_1005532C8);
  }
  return result;
}

uint64_t sub_10014FC34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000A520(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline__task, a1);
}

uint64_t sub_10014FC68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_10014FCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  sub_100194720(v4 + v8, *(_BYTE *)(v4 + v8 + *(_QWORD *)(v7 + 64)), a3, a4);
}

uint64_t sub_10014FD30@<X0>(uint64_t a1@<X8>)
{
  return sub_100152050(a1);
}

uint64_t sub_10014FD44@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10014EF70(v1, a1);
}

uint64_t sub_10014FD5C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10014FD80(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10014F214(v1, (uint64_t)sub_10014FD30, a1);
}

uint64_t sub_10014FDA0(uint64_t a1)
{
  uint64_t v1;

  return sub_1003394B0(a1, v1);
}

uint64_t sub_10014FDA8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014FDCC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014FDF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10014FE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if ((unint64_t)(a4 - 1) >= 4)
    return swift_bridgeObjectRelease(a4);
  return result;
}

uint64_t sub_10014FE5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014FE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DownloadJob(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014FEB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014FEC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10014FED8()
{
  uint64_t v0;

  sub_10014E448(v0);
}

uint64_t sub_10014FEE0()
{
  uint64_t v0;

  return sub_10014E4F4(v0);
}

unint64_t sub_10014FEE8()
{
  unint64_t result;

  result = qword_1005532E0;
  if (!qword_1005532E0)
  {
    result = swift_getWitnessTable(&unk_1003CA5B0, &type metadata for PipelineError);
    atomic_store(result, (unint64_t *)&qword_1005532E0);
  }
  return result;
}

void sub_10014FF2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10014D89C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_10014FF34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(sub_10003F544((uint64_t *)&unk_100553DC0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v8, v2 | 7);
}

void sub_10014FFE8(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_10003F544((uint64_t *)&unk_100553DC0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10014D9E4(v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)), a1);
}

uint64_t sub_100150058()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100150088(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100150088(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  int v3;

  v3 = a3 >> 6;
  if (v3 == 2)
    return swift_errorRelease(result);
  if (v3 != 1)
  {
    if (a3 >> 6)
      return result;
    return swift_errorRelease(result);
  }
  return sub_10014F9F0(result, a2, a3 & 0x3F);
}

uint64_t sub_1001500B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10014DCE0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), a1);
}

uint64_t sub_1001500D0(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  int v3;

  v3 = a3 >> 6;
  if (v3 == 2)
    return swift_errorRetain(result);
  if (v3 != 1)
  {
    if (a3 >> 6)
      return result;
    return swift_errorRetain(result);
  }
  return sub_10014F9CC(result, a2, a3 & 0x3F);
}

uint64_t sub_1001500F8(uint64_t a1)
{
  uint64_t v1;

  return sub_100339640(a1, v1);
}

uint64_t sub_100150100(uint64_t a1)
{
  uint64_t v1;

  return sub_100339494(a1, v1);
}

uint64_t sub_100150120()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100150130()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10015015C()
{
  return sub_10002A264((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100372630);
}

uint64_t sub_100150168()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100150194(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10014A5CC(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t sub_1001501A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_10003D380((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001501CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_10014A77C(a1, a2, a3, v3[2], v3[3], v3 + 4);
}

uint64_t sub_1001501D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001501FC(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v4;

  sub_10014AC38(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

void sub_100150204(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10014B160(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_10015020C()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100150230(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10014B48C(a1, a2, a3, (_QWORD *)(v3 + 16));
}

uint64_t sub_100150238(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v3;

  return sub_10014BE74(a1, a2, a3, (_QWORD *)(v3 + 16));
}

uint64_t sub_100150240(uint64_t a1)
{
  uint64_t v1;

  return sub_100339878(a1, v1);
}

uint64_t sub_100150248(uint64_t a1)
{
  uint64_t v1;

  return sub_10033967C(a1, v1);
}

uint64_t sub_100150250(uint64_t a1)
{
  uint64_t v1;

  return sub_100339670(a1, v1);
}

uint64_t sub_100150258(uint64_t a1)
{
  uint64_t v1;

  return sub_100339664(a1, v1);
}

uint64_t sub_100150260()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10015028C(uint64_t a1)
{
  uint64_t *v1;

  return sub_10014C324(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1001502AC(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10014C250(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1001502B8(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_1001502C4(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_1001502D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MediaLibraryPid(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  sub_10003D380((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10015034C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MediaLibraryPid(0) - 8) + 80);
  return sub_10014B780(v0 + 2, v0[7], v0[8], (uint64_t)v0 + ((v1 + 72) & ~v1));
}

uint64_t sub_100150380()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MediaLibraryPid(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 3));
  swift_release(*((_QWORD *)v0 + 5));
  swift_release(*((_QWORD *)v0 + 7));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100150404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MediaLibraryPid(0) - 8) + 80);
  return sub_10014BBB8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(char *))(v1 + 48), *(_QWORD *)(v1 + 56), v1 + ((v3 + 64) & ~v3));
}

unint64_t sub_10015044C()
{
  unint64_t result;

  result = qword_100553338;
  if (!qword_100553338)
  {
    result = swift_getWitnessTable(&unk_1003D3454, &type metadata for ArtworkStorageError);
    atomic_store(result, (unint64_t *)&qword_100553338);
  }
  return result;
}

uint64_t sub_100150494(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MediaLibraryPid(0) - 8) + 80);
  return sub_10014B8AC(a1, *(void (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_1001504D8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;

  v6 = a3 & 1;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MediaLibraryPid(0) - 8) + 80);
  return sub_10014B37C(a1, a2, v6, *(void (**)(uint64_t *))(v3 + 16), *(_QWORD *)(v3 + 24), v3 + ((v7 + 32) & ~v7));
}

uint64_t sub_100150534()
{
  return sub_10002A264((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003731F4);
}

uint64_t sub_100150540(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100150554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MediaLibraryPid(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001505C8(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MediaLibraryPid(0) - 8) + 80);
  return sub_10014B070(a1, v4, *(void (**)(_QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v5 + 32) & ~v5));
}

uint64_t sub_100150618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MediaLibraryPid(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10015069C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MediaLibraryPid(0) - 8) + 80);
  sub_100371DD8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(_QWORD, uint64_t))(v0 + 40), *(_QWORD *)(v0 + 48), v0 + ((v1 + 56) & ~v1));
}

uint64_t sub_1001506D4(uint64_t a1)
{
  uint64_t v1;

  return sub_10014A970(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_1001506DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100150718()
{
  return sub_100151998((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100373128);
}

uint64_t sub_100150724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (int *)type metadata accessor for DownloadJob(0);
  v9 = *((_QWORD *)v8 - 1);
  v27 = *(unsigned __int8 *)(v9 + 80);
  v10 = (v27 + v7 + 16) & ~v27;
  v25 = *(_QWORD *)(v9 + 64);
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);
  v11(v0 + v6, v1);
  if (*(_QWORD *)(v0 + v7))
    swift_release(*(_QWORD *)(v0 + v7 + 8));
  v26 = (v27 + v7 + 16) & ~v27;
  v12 = v0 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v0 + v10, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v10 + v8[5] + 8));
  v14 = v0 + v10 + v8[6];
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v24(v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v8[8] + 8));
  v17 = (_QWORD *)(v12 + v8[9]);
  swift_bridgeObjectRelease(v17[1]);
  swift_bridgeObjectRelease(v17[3]);
  swift_bridgeObjectRelease(v17[9]);
  swift_bridgeObjectRelease(v17[11]);
  swift_bridgeObjectRelease(v17[13]);
  v18 = type metadata accessor for EpisodeMetadata(0);
  v11((uint64_t)v17 + *(int *)(v18 + 44), v1);
  v19 = (char *)v17 + *(int *)(v18 + 60);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
    v24((uint64_t)v19, v15);
  v20 = *(_QWORD *)(v12 + v8[10] + 24);
  if ((unint64_t)(v20 - 1) >= 4)
    swift_bridgeObjectRelease(v20);
  v21 = (v25 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = v21 + 8;
  swift_release(*(_QWORD *)(v0 + v21));
  return swift_deallocObject(v0, v22, v3 | v27 | 7);
}

uint64_t sub_100150934@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = (v7 + v6 + ((v6 + 16) & ~v6)) & ~v6;
  v9 = (v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(type metadata accessor for DownloadJob(0) - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + v9 + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  return sub_100149090(a1, v2 + v8, *(void (**)(uint64_t))(v2 + v9), *(_QWORD *)(v2 + v9 + 8), v2 + v11, *(char **)(v2 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_1001509F0(uint64_t a1)
{
  uint64_t v1;

  return sub_100339634(a1, v1);
}

uint64_t sub_1001509FC(uint64_t a1)
{
  uint64_t v1;

  return sub_1001495D8(a1, *(void (**)(_QWORD *))(v1 + 16));
}

unint64_t sub_100150A08()
{
  unint64_t result;

  result = qword_100553378;
  if (!qword_100553378)
  {
    result = swift_getWitnessTable(&unk_1003CA5F0, &type metadata for PostflightError);
    atomic_store(result, (unint64_t *)&qword_100553378);
  }
  return result;
}

unint64_t sub_100150A4C()
{
  unint64_t result;

  result = qword_100553380;
  if (!qword_100553380)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100553380);
  }
  return result;
}

unint64_t sub_100150A90()
{
  unint64_t result;

  result = qword_100553388;
  if (!qword_100553388)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100553388);
  }
  return result;
}

uint64_t sub_100150AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100150C74(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100146908);
}

uint64_t sub_100150AE8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = (int *)type metadata accessor for DownloadJob(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v18 = *(_QWORD *)(v2 + 64);
  v19 = v0;
  v5 = v0 + v4;
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  v7 = v0 + v4 + v1[6];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v11 = (_QWORD *)(v0 + v4 + v1[9]);
  swift_bridgeObjectRelease(v11[1]);
  swift_bridgeObjectRelease(v11[3]);
  swift_bridgeObjectRelease(v11[9]);
  swift_bridgeObjectRelease(v11[11]);
  swift_bridgeObjectRelease(v11[13]);
  v12 = type metadata accessor for EpisodeMetadata(0);
  v13 = (char *)v11 + *(int *)(v12 + 44);
  v14 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = (char *)v11 + *(int *)(v12 + 60);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8))
    v10((uint64_t)v15, v8);
  v16 = *(_QWORD *)(v5 + v1[10] + 24);
  if ((unint64_t)(v16 - 1) >= 4)
    swift_bridgeObjectRelease(v16);
  return swift_deallocObject(v19, v4 + v18, v3 | 7);
}

uint64_t sub_100150C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100150C74(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100146F2C);
}

uint64_t sub_100150C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;

  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DownloadJob(0) - 8) + 80);
  return a4(a1, a2, a3, v4 + ((v8 + 16) & ~v8));
}

uint64_t sub_100150CD8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (int *)type metadata accessor for DownloadJob(0);
  v2 = *((_QWORD *)v1 - 1);
  v23 = *(unsigned __int8 *)(v2 + 80);
  v21 = *(_QWORD *)(v2 + 64);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v20 = *(_QWORD *)(v4 + 64);
  v24 = v0;
  v22 = (v23 + 16) & ~v23;
  v6 = v0 + v22;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v22, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v22 + v1[5] + 8));
  v8 = v0 + v22 + v1[6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[8] + 8));
  v12 = (char *)(v6 + v1[9]);
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 9));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 11));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 13));
  v13 = type metadata accessor for EpisodeMetadata(0);
  v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(&v12[*(int *)(v13 + 44)], v3);
  v15 = &v12[*(int *)(v13 + 60)];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9))
    v11((uint64_t)v15, v9);
  v16 = *(_QWORD *)(v6 + v1[10] + 24);
  if ((unint64_t)(v16 - 1) >= 4)
    swift_bridgeObjectRelease(v16);
  v17 = (v22 + v21 + v5) & ~v5;
  v18 = ((v20 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v14((char *)(v24 + v17), v3);
  return swift_deallocObject(v24, v18, v23 | v5 | 7);
}

void sub_100150EAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v9 = *(_QWORD *)(type metadata accessor for DownloadJob(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  sub_1001478F0(a1, a2, a3, a4, v4 + v10, v4 + v13, *(_QWORD *)(v4 + ((*(_QWORD *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100150F50()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for DownloadJob(0);
  v2 = *((_QWORD *)v1 - 1);
  v22 = *(unsigned __int8 *)(v2 + 80);
  v20 = *(_QWORD *)(v2 + 64);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v19 = *(_QWORD *)(v4 + 64);
  v21 = (v22 + 16) & ~v22;
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v21, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v21 + v1[5] + 8));
  v7 = v0 + v21 + v1[6];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v18 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v18(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v21 + v1[8] + 8));
  v10 = (char *)(v0 + v21 + v1[9]);
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 9));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 11));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 13));
  v11 = type metadata accessor for EpisodeMetadata(0);
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(&v10[*(int *)(v11 + 44)], v3);
  v13 = &v10[*(int *)(v11 + 60)];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v18((uint64_t)v13, v8);
  v14 = *(_QWORD *)(v0 + v21 + v1[10] + 24);
  if ((unint64_t)(v14 - 1) >= 4)
    swift_bridgeObjectRelease(v14);
  v15 = (v20 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + v5 + 8) & ~v5;
  swift_release(*(_QWORD *)(v0 + v15));
  v12((char *)(v0 + v16), v3);
  return swift_deallocObject(v0, v16 + v19, v22 | v5 | 7);
}

void sub_100151134(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(type metadata accessor for DownloadJob(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  sub_100147B18(a1, a2, a3, a4, v4 + v10, *(_QWORD *)(v4 + v11), v4 + ((v11 + v12 + 8) & ~v12));
}

void sub_1001511D8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100148044(*(void (**)(char *))(v1 + 16), a1);
}

uint64_t sub_1001511F0(uint64_t a1)
{
  uint64_t v1;

  return sub_1003399E0(a1, v1);
}

uint64_t sub_1001511F8(uint64_t a1)
{
  uint64_t v1;

  return sub_1003399D4(a1, v1);
}

uint64_t sub_100151200(uint64_t a1)
{
  uint64_t v1;

  return sub_1003399B8(a1, v1);
}

uint64_t sub_100151208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  v5 = v3 | 7;
  v6 = (v3 + 32) & ~v3;
  v7 = v6 + v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);
  return swift_deallocObject(v0, v7, v5);
}

uint64_t sub_100151284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_1001481A0(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_1001512EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100151380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100147D3C(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(uint64_t (**)(_QWORD, _QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1001513DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100151410()
{
  return sub_10002A264((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003722C0);
}

uint64_t sub_10015141C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_100151454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_100151500()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10037185C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + v2, *(void (**)(_QWORD, uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)), *(double *)(v0 + v3));
}

uint64_t sub_100151564()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v1 = (int *)type metadata accessor for DownloadJob(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v17 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));

  v4 = v0 + ((v3 + 40) & ~v3);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[5] + 8));
  v6 = v4 + v1[6];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[8] + 8));
  v10 = (_QWORD *)(v4 + v1[9]);
  swift_bridgeObjectRelease(v10[1]);
  swift_bridgeObjectRelease(v10[3]);
  swift_bridgeObjectRelease(v10[9]);
  swift_bridgeObjectRelease(v10[11]);
  swift_bridgeObjectRelease(v10[13]);
  v11 = type metadata accessor for EpisodeMetadata(0);
  v12 = (char *)v10 + *(int *)(v11 + 44);
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = (char *)v10 + *(int *)(v11 + 60);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7))
    v9((uint64_t)v14, v7);
  v15 = *(_QWORD *)(v4 + v1[10] + 24);
  if ((unint64_t)(v15 - 1) >= 4)
    swift_bridgeObjectRelease(v15);
  return swift_deallocObject(v0, ((v3 + 40) & ~v3) + v17, v3 | 7);
}

uint64_t sub_1001516FC()
{
  uint64_t v0;

  type metadata accessor for DownloadJob(0);
  return sub_1001470E4(*(void (**)(uint64_t, _QWORD))(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100151730()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v1 = (int *)type metadata accessor for DownloadJob(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v19 = *(_QWORD *)(v2 + 64);

  v4 = v0 + ((v3 + 24) & ~v3);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[5] + 8));
  v6 = v4 + v1[6];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[8] + 8));
  v10 = (_QWORD *)(v4 + v1[9]);
  swift_bridgeObjectRelease(v10[1]);
  swift_bridgeObjectRelease(v10[3]);
  swift_bridgeObjectRelease(v10[9]);
  swift_bridgeObjectRelease(v10[11]);
  swift_bridgeObjectRelease(v10[13]);
  v11 = type metadata accessor for EpisodeMetadata(0);
  v12 = (char *)v10 + *(int *)(v11 + 44);
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = (char *)v10 + *(int *)(v11 + 60);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7))
    v9((uint64_t)v14, v7);
  v15 = *(_QWORD *)(v4 + v1[10] + 24);
  if ((unint64_t)(v15 - 1) >= 4)
    swift_bridgeObjectRelease(v15);
  v16 = (v19 + ((v3 + 24) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v16 + 16;
  swift_release(*(_QWORD *)(v0 + v16 + 8));
  return swift_deallocObject(v0, v17, v3 | 7);
}

uint64_t sub_1001518E0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for DownloadJob(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100146B38(*(void **)(v0 + 16), v0 + v2, *(void (**)(char *))v3, *(_QWORD *)(v3 + 8));
}

uint64_t sub_100151928()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10015194C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1001443E8(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100151958()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10015198C()
{
  return sub_100151998((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10014451C);
}

uint64_t sub_100151998(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1001519AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1001519D0(unint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100144B40(a1, a2 & 1, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(void (**)(void))(v3 + 32));
}

uint64_t sub_1001519E0()
{
  return sub_100151BBC(64);
}

uint64_t sub_1001519E8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001434E4(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(uint64_t, id, uint64_t))(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(uint64_t **)(v1 + 56));
}

uint64_t sub_1001519FC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_release(*((_QWORD *)v0 + 2));
  if (*((_QWORD *)v0 + 3))
    swift_release(*((_QWORD *)v0 + 4));
  v5 = v3 | 7;
  v6 = (v3 + 40) & ~v3;
  v7 = v6 + v4;
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v6], v1);
  return swift_deallocObject(v0, v7, v5);
}

uint64_t sub_100151A80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_1001439E0(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t type metadata accessor for JobPipelineError(uint64_t a1)
{
  return sub_10003EAF4(a1, (uint64_t *)&unk_100553488, (uint64_t)&nominal type descriptor for JobPipelineError);
}

uint64_t sub_100151ADC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100151AF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100151B04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100151B14(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_100151B40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_unknownObjectRelease(result);
    return swift_release(a4);
  }
  return result;
}

uint64_t sub_100151B6C(uint64_t a1, uint64_t (*a2)(_QWORD *, __n128), uint64_t a3)
{
  uint64_t v3;

  return sub_10013F994(a1, a2, a3, v3);
}

void sub_100151B74(uint64_t a1)
{
  sub_10013FAB8(a1);
}

uint64_t sub_100151B8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10013FE40(v1, a1);
}

uint64_t sub_100151BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100140020(a1, a2, a3, a4, v4);
}

void sub_100151BAC(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v3;

  sub_100140100(a1, a2, a3, v3);
}

uint64_t sub_100151BB4()
{
  return sub_100151BBC(40);
}

uint64_t sub_100151BBC(uint64_t a1)
{
  _QWORD *v1;

  swift_release(v1[2]);
  if (v1[3])
    swift_release(v1[4]);
  return swift_deallocObject(v1, a1, 7);
}

void sub_100151BFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1001403F8(a1, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_100151C18(uint64_t a1)
{
  uint64_t v1;

  return sub_1003394CC(a1, v1);
}

uint64_t sub_100151C20(uint64_t a1)
{
  uint64_t v1;

  return sub_1003392A4(a1, v1);
}

uint64_t sub_100151C2C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100151C58(uint64_t a1)
{
  uint64_t v1;

  sub_100140A60(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100151C74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100151CA4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v1 = (int *)type metadata accessor for DownloadJob(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v17 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v4 = v0 + ((v3 + 24) & ~v3);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[5] + 8));
  v6 = v4 + v1[6];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[8] + 8));
  v10 = (_QWORD *)(v4 + v1[9]);
  swift_bridgeObjectRelease(v10[1]);
  swift_bridgeObjectRelease(v10[3]);
  swift_bridgeObjectRelease(v10[9]);
  swift_bridgeObjectRelease(v10[11]);
  swift_bridgeObjectRelease(v10[13]);
  v11 = type metadata accessor for EpisodeMetadata(0);
  v12 = (char *)v10 + *(int *)(v11 + 44);
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = (char *)v10 + *(int *)(v11 + 60);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7))
    v9((uint64_t)v14, v7);
  v15 = *(_QWORD *)(v4 + v1[10] + 24);
  if ((unint64_t)(v15 - 1) >= 4)
    swift_bridgeObjectRelease(v15);
  return swift_deallocObject(v0, ((v3 + 24) & ~v3) + v17, v3 | 7);
}

uint64_t sub_100151E34()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DownloadJob(0) - 8) + 80);
  return sub_10013E578(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100151E64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100151E74()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v1 = (int *)type metadata accessor for DownloadJob(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v17 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v4 = v0 + ((v3 + 40) & ~v3);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[5] + 8));
  v6 = v4 + v1[6];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[8] + 8));
  v10 = (_QWORD *)(v4 + v1[9]);
  swift_bridgeObjectRelease(v10[1]);
  swift_bridgeObjectRelease(v10[3]);
  swift_bridgeObjectRelease(v10[9]);
  swift_bridgeObjectRelease(v10[11]);
  swift_bridgeObjectRelease(v10[13]);
  v11 = type metadata accessor for EpisodeMetadata(0);
  v12 = (char *)v10 + *(int *)(v11 + 44);
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = (char *)v10 + *(int *)(v11 + 60);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7))
    v9((uint64_t)v14, v7);
  v15 = *(_QWORD *)(v4 + v1[10] + 24);
  if ((unint64_t)(v15 - 1) >= 4)
    swift_bridgeObjectRelease(v15);
  return swift_deallocObject(v0, ((v3 + 40) & ~v3) + v17, v3 | 7);
}

uint64_t sub_10015200C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DownloadJob(0) - 8) + 80);
  return sub_1001402AC(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_100152050@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline__job;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10014FDF8(v3, a1, type metadata accessor for DownloadJob);
}

uint64_t sub_1001520B8(uint64_t result, uint64_t a2, char a3)
{
  if (a3 >> 6 == 2)
    return swift_errorRelease();
  if (!(a3 >> 6))
    return sub_10014F9F0(result, a2, a3);
  return result;
}

uint64_t sub_1001520D4(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  _QWORD v6[2];
  __int16 v7;

  v4 = *(uint64_t (**)(_QWORD *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v7 = a3;
  return v4(v6);
}

uint64_t sub_100152110(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

_QWORD *sub_100152134(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    v3 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    swift_errorRetain(*a2);
    *v3 = v5;
    v7 = *(int *)(sub_10003F544(&qword_1005533B8) + 48);
    v8 = (char *)v3 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_10003F544((uint64_t *)&unk_100553DC0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t sub_100152234(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_errorRelease(*a1);
  v2 = (char *)a1 + *(int *)(sub_10003F544(&qword_1005533B8) + 48);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

_QWORD *sub_1001522B8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  swift_errorRetain(*a2);
  *a1 = v4;
  v5 = *(int *)(sub_10003F544(&qword_1005533B8) + 48);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t *sub_10015238C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  v4 = *a2;
  swift_errorRetain(*a2);
  v5 = *a1;
  *a1 = v4;
  swift_errorRelease(v5);
  v6 = *(int *)(sub_10003F544(&qword_1005533B8) + 48);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_QWORD *sub_1001524B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(sub_10003F544(&qword_1005533B8) + 48);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t *sub_100152580(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;

  v4 = *a1;
  *a1 = *a2;
  swift_errorRelease(v4);
  v5 = *(int *)(sub_10003F544(&qword_1005533B8) + 48);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v6, v7, v8);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  return a1;
}

uint64_t sub_1001526A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_1005533B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001526E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10003F544(&qword_1005533B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a3, v6);
}

void sub_100152730(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _DWORD v4[8];

  sub_1000048DC(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, &unk_1003CA340, *(_QWORD *)(v2 - 8) + 64);
    swift_initEnumMetadataSingleCase(a1, 256, v4);
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = v4[5];
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PipelineError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001527C4(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_1001500D0);
}

uint64_t destroy for PipelineError(uint64_t a1)
{
  return sub_100150088(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1001527C4(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for PipelineError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100152820(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_1001500D0, (void (*)(uint64_t, uint64_t, uint64_t))sub_100150088);
}

uint64_t *sub_100152820(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for PipelineError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10015288C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100150088);
}

uint64_t *sub_10015288C(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_BYTE *)(a2 + 16);
  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PipelineError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3E && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 62);
  v3 = (*(_BYTE *)(a1 + 16) & 0x3C | (*(unsigned __int8 *)(a1 + 16) >> 6)) ^ 0x3F;
  if (v3 >= 0x3D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PipelineError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 62;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_100152974(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 6;
}

uint64_t sub_100152980(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_100152990(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 3 | (a2 << 6);
  return result;
}

ValueMetadata *type metadata accessor for PipelineError()
{
  return &type metadata for PipelineError;
}

ValueMetadata *type metadata accessor for PostflightError()
{
  return &type metadata for PostflightError;
}

uint64_t sub_100152A34@<X0>(uint64_t a1@<X8>)
{
  return sub_10014FC34(a1);
}

uint64_t sub_100152B74(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1003CA678, a2);
  v4 = swift_getKeyPath(&unk_1003CA6A0, v3);
  static Published.subscript.getter(&v6);
  swift_release(KeyPath);
  swift_release(v4);
  return v6;
}

uint64_t sub_100152BE4@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1003CA678, a1);
  v5 = swift_getKeyPath(&unk_1003CA6A0, v4);
  static Published.subscript.getter(&v7);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100152C60(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1003CA678, a2);
  v6 = swift_getKeyPath(&unk_1003CA6A0, v5);
  v8 = v2;
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

id sub_100152CCC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CarPlayMigrationBridge(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t PodcastsStateTransitionsExternalEffectsProtocol.unsafeUpdateFeed(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a1, 0, a2);
}

uint64_t PodcastsStateTransitionsExternalEffects.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t PodcastsStateTransitionsExternalEffects.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

void PodcastsStateTransitionsExternalEffects.unsafeUpdateFeed(for:shouldFetchPlayState:)(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t aBlock[5];
  uint64_t v61;
  id v62;
  uint64_t v63;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, "uuid");
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;
    v14 = objc_msgSend(a1, "managedObjectContext");
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v14, "saveInCurrentBlock");
      v16 = objc_msgSend(a1, "title");
      LODWORD(v59) = a2;
      v58 = v11;
      if (v16)
      {
        v17 = v16;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v20 = v19;

      }
      else
      {
        v18 = 0;
        v20 = 0;
      }
      v30 = objc_msgSend(a1, "storeCollectionId");
      v31 = objc_msgSend(a1, "feedURL");
      if (v31)
      {
        v32 = v31;
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v35 = v34;

      }
      else
      {
        v33 = 0;
        v35 = 0;
      }
      v36 = *(void **)(v2 + 24);
      v37 = swift_allocObject(&unk_1004AF9D0, 88, 7);
      *(_QWORD *)(v37 + 16) = v18;
      *(_QWORD *)(v37 + 24) = v20;
      *(_QWORD *)(v37 + 32) = v58;
      *(_QWORD *)(v37 + 40) = v13;
      *(_QWORD *)(v37 + 48) = v30;
      *(_QWORD *)(v37 + 56) = v33;
      *(_QWORD *)(v37 + 64) = v35;
      *(_BYTE *)(v37 + 72) = v59 & 1;
      *(_QWORD *)(v37 + 80) = v2;
      aBlock[4] = (uint64_t)sub_10015459C;
      v61 = v37;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100153D50;
      aBlock[3] = (uint64_t)&unk_1004AF9E8;
      v38 = _Block_copy(aBlock);
      v39 = v61;
      swift_retain(v2);
      swift_release(v39);
      objc_msgSend(v36, "updatePodcastWithUUID:userInitiated:forced:forceBootstrap:source:completion:", v10, 1, 1, 0, 21, v38);
      _Block_release(v38);

      return;
    }
    swift_bridgeObjectRelease(v13);

  }
  static Logger.podcastsStatesCoordination.getter(v9);
  v21 = a1;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter(v22);
  if (os_log_type_enabled(v22, (os_log_type_t)v23))
  {
    LODWORD(v58) = v23;
    v59 = v5;
    v24 = swift_slowAlloc(52, -1);
    v57 = swift_slowAlloc(128, -1);
    aBlock[0] = v57;
    *(_DWORD *)v24 = 136381699;
    v25 = objc_msgSend(v21, "title");
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

    }
    else
    {
      v29 = 0xEA00000000003E65;
      v27 = 0x6C746974206F6E3CLL;
    }
    v62 = (id)sub_10003D274(v27, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 4, v24 + 12);

    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v24 + 12) = 2080;
    v40 = objc_msgSend(v21, "uuid");
    if (v40)
    {
      v41 = v40;
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v44 = v43;

    }
    else
    {
      v44 = 0xE700000000000000;
      v42 = 0x3E7974706D653CLL;
    }
    v62 = (id)sub_10003D274(v42, v44, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 14, v24 + 22);

    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v24 + 22) = 2080;
    v62 = objc_msgSend(v21, "managedObjectContext");
    v45 = sub_10003F544(&qword_1005534F0);
    v46 = String.init<A>(describing:)(&v62, v45);
    v48 = v47;
    v62 = (id)sub_10003D274(v46, v47, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 24, v24 + 32);

    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v24 + 32) = 2049;
    v49 = objc_msgSend(v21, "storeCollectionId");

    v62 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 34, v24 + 42);

    *(_WORD *)(v24 + 42) = 2081;
    v50 = objc_msgSend(v21, "feedURL");
    if (v50)
    {
      v51 = v50;
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v54 = v53;

      v55 = v59;
    }
    else
    {
      v54 = 0xE700000000000000;
      v55 = v59;
      v52 = 0x3E7974706D653CLL;
    }
    v62 = (id)sub_10003D274(v52, v54, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 44, v24 + 52);

    swift_bridgeObjectRelease(v54);
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v58, "We cannot update feed for podcast without UUID and/or managedObjectContext. Podcast %{private}s, uuid: %s, MOC: %s, adamID: %{private}lld, feedURL: %{private}s.", (uint8_t *)v24, 0x34u);
    v56 = v57;
    swift_arrayDestroy(v57, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v55);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void sub_1001533B0(char a1, NSObject *a2, char *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint8_t *v59;
  void (*v60)(char *, uint64_t);
  os_log_t v61;
  uint64_t v62;
  uint64_t *v63;
  os_log_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  uint64_t v68;
  NSObject *v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  uint64_t v76;
  uint64_t inited;
  Swift::Int v78;
  Class isa;
  uint64_t v80;
  uint64_t v81;
  os_log_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94[80];

  v86 = a5;
  v87 = a7;
  v88 = a3;
  v16 = a10;
  v90 = type metadata accessor for Logger(0);
  v17 = __chkstk_darwin(v90);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v80 - v22;
  v24 = __chkstk_darwin(v21);
  v27 = (char *)&v80 - v26;
  v89 = v28;
  if ((a1 & 1) != 0)
  {
    v29 = a8;
    static Logger.podcastsStatesCoordination.getter(v24);
    v30 = static os_log_type_t.default.getter();
    swift_bridgeObjectRetain_n(a9, 2);
    swift_bridgeObjectRetain_n(a4, 2);
    v31 = swift_bridgeObjectRetain_n(a6, 2);
    v32 = Logger.logObject.getter(v31);
    if (os_log_type_enabled(v32, v30))
    {
      v33 = swift_slowAlloc(42, -1);
      v84 = v30;
      v34 = v33;
      v83 = swift_slowAlloc(96, -1);
      v92 = v83;
      *(_DWORD *)v34 = 136381443;
      if (a4)
        v35 = (uint64_t)v88;
      else
        v35 = 0x6C746974206F6E3CLL;
      v82 = v32;
      if (a4)
        v36 = a4;
      else
        v36 = 0xEA00000000003E65;
      v88 = v19;
      swift_bridgeObjectRetain(a4);
      v91 = sub_10003D274(v35, v36, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease_n(a4, 2);
      v37 = v36;
      v16 = a10;
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v34 + 12) = 2080;
      swift_bridgeObjectRetain(a6);
      v91 = sub_10003D274(v86, a6, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease_n(a6, 3);
      *(_WORD *)(v34 + 22) = 2049;
      v91 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v34 + 24, v34 + 32);
      *(_WORD *)(v34 + 32) = 2081;
      if (a9)
        v38 = v29;
      else
        v38 = 0x3E7974706D653CLL;
      if (a9)
        v39 = a9;
      else
        v39 = 0xE700000000000000;
      swift_bridgeObjectRetain(a9);
      v91 = sub_10003D274(v38, v39, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v34 + 34, v34 + 42);
      swift_bridgeObjectRelease_n(a9, 2);
      v40 = v39;
      v19 = v88;
      swift_bridgeObjectRelease(v40);
      v41 = v82;
      _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v84, "Feed update completed for Podcast %{private}s, uuid: %s, adamID: %{private}lld, feedURL: %{private}s.", (uint8_t *)v34, 0x2Au);
      v42 = v83;
      swift_arrayDestroy(v83, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a9, 2);
      swift_bridgeObjectRelease_n(a6, 2);
      swift_bridgeObjectRelease_n(a4, 2);
    }
    v52 = (void (*)(char *, uint64_t))v89[1];
    v52(v27, v90);
  }
  else
  {
    v82 = a2;
    v83 = v25;
    v84 = a10;
    v85 = a8;
    static Logger.podcastsStatesCoordination.getter(v24);
    swift_bridgeObjectRetain_n(a9, 2);
    swift_bridgeObjectRetain_n(a4, 2);
    v43 = swift_bridgeObjectRetain_n(a6, 2);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc(42, -1);
      v81 = swift_slowAlloc(96, -1);
      v92 = v81;
      *(_DWORD *)v46 = 136381443;
      if (a4)
        v47 = (uint64_t)v88;
      else
        v47 = 0x6C746974206F6E3CLL;
      if (a4)
        v48 = a4;
      else
        v48 = 0xEA00000000003E65;
      v88 = v19;
      swift_bridgeObjectRetain(a4);
      v91 = sub_10003D274(v47, v48, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease_n(a4, 2);
      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v46 + 12) = 2080;
      swift_bridgeObjectRetain(a6);
      v91 = sub_10003D274(v86, a6, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v46 + 14, v46 + 22);
      swift_bridgeObjectRelease_n(a6, 3);
      *(_WORD *)(v46 + 22) = 2049;
      v91 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v46 + 24, v46 + 32);
      *(_WORD *)(v46 + 32) = 2081;
      if (a9)
        v49 = v85;
      else
        v49 = 0x3E7974706D653CLL;
      if (a9)
        v50 = a9;
      else
        v50 = 0xE700000000000000;
      swift_bridgeObjectRetain(a9);
      v91 = sub_10003D274(v49, v50, &v92);
      v19 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v46 + 34, v46 + 42);
      swift_bridgeObjectRelease_n(a9, 2);
      swift_bridgeObjectRelease(v50);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unable to complete feed update for Podcast %{private}s, uuid: %s, adamID: %{private}lld, feedURL: %{private}s.", (uint8_t *)v46, 0x2Au);
      v51 = v81;
      swift_arrayDestroy(v81, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v46, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a9, 2);
      swift_bridgeObjectRelease_n(a6, 2);
      swift_bridgeObjectRelease_n(a4, 2);
    }
    v52 = (void (*)(char *, uint64_t))v89[1];
    v52(v23, v90);
    v16 = v84;
    v53 = v82;
    if (v82)
    {
      v54 = swift_errorRetain(v82);
      static Logger.podcastsStatesCoordination.getter(v54);
      v55 = swift_errorRetain(v53);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter(v56);
      v58 = os_log_type_enabled(v56, v57);
      v29 = v85;
      if (v58)
      {
        v88 = v19;
        v59 = (uint8_t *)swift_slowAlloc(12, -1);
        v89 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v59 = 138412290;
        v60 = v52;
        v61 = v53;
        v62 = _convertErrorToNSError(_:)(v53);
        v92 = v62;
        v19 = v88;
        v16 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v59 + 4, v59 + 12);
        v63 = v89;
        *v89 = v62;
        v64 = v61;
        v52 = v60;
        swift_errorRelease(v64);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Feed Update Error: %@", v59, 0xCu);
        v65 = sub_10003F544((uint64_t *)&unk_100556480);
        swift_arrayDestroy(v63, 1, v65);
        v29 = v85;
        swift_slowDealloc(v63, -1, -1);
        swift_slowDealloc(v59, -1, -1);

        swift_errorRelease(v64);
      }
      else
      {
        swift_errorRelease(v53);
        swift_errorRelease(v53);

      }
      v52((char *)v83, v90);
    }
    else
    {
      v29 = v85;
    }
  }
  if ((v16 & 1) != 0 && a9)
  {
    swift_bridgeObjectRetain(a9);
    static Logger.podcastsStatesCoordination.getter(v66);
    v67 = static os_log_type_t.default.getter();
    v68 = swift_bridgeObjectRetain_n(a9, 2);
    v69 = Logger.logObject.getter(v68);
    if (os_log_type_enabled(v69, v67))
    {
      v88 = v19;
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = v29;
      v72 = swift_slowAlloc(32, -1);
      v92 = v72;
      *(_DWORD *)v70 = 136380675;
      swift_bridgeObjectRetain(a9);
      v91 = sub_10003D274(v71, a9, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease_n(a9, 3);
      swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
      v73 = v72;
      v29 = v71;
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      v74 = v88;
    }
    else
    {

      swift_bridgeObjectRelease_n(a9, 2);
      v74 = v19;
    }
    v52(v74, v90);
    v75 = *(void **)(a11 + 32);
    v76 = sub_10003F544(&qword_1005535A8);
    inited = swift_initStackObject(v76, v94);
    *(_OWORD *)(inited + 16) = xmmword_1003CA200;
    v92 = v29;
    v93 = a9;
    AnyHashable.init<A>(_:)(&v92, &type metadata for String, &protocol witness table for String);
    v78 = sub_10013B2EC(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, &type metadata for AnyHashable);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v78);
    objc_msgSend(v75, "scheduleVeryHighPriorityEpisodeStateGetWithFeedUrls:", isa);

  }
}

void sub_100153D50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void PodcastsStateTransitionsExternalEffects.unsafeDelete(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "managedObjectContext");
  if (v7)
  {
    v8 = v7;
    v9 = *(void **)(v1 + 16);
    v36 = v8;
    objc_msgSend(v9, "_markAsHiddenPodcast:inContext:", a1);
    objc_msgSend(v36, "saveInCurrentBlock");

  }
  else
  {
    static Logger.podcastsStatesCoordination.getter(0);
    v10 = a1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, (os_log_type_t)v12))
    {
      LODWORD(v36) = v12;
      v13 = swift_slowAlloc(52, -1);
      v35 = swift_slowAlloc(128, -1);
      v38 = v35;
      *(_DWORD *)v13 = 136381699;
      v14 = objc_msgSend(v10, "title");
      if (v14)
      {
        v15 = v14;
        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v18 = v17;

      }
      else
      {
        v18 = 0xEA00000000003E65;
        v16 = 0x6C746974206F6E3CLL;
      }
      v37 = (id)sub_10003D274(v16, v18, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 4, v13 + 12);

      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v13 + 12) = 2080;
      v19 = objc_msgSend(v10, "uuid");
      if (v19)
      {
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v23 = v22;

      }
      else
      {
        v23 = 0xE700000000000000;
        v21 = 0x3E7974706D653CLL;
      }
      v37 = (id)sub_10003D274(v21, v23, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 14, v13 + 22);

      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v13 + 22) = 2080;
      v37 = objc_msgSend(v10, "managedObjectContext");
      v24 = sub_10003F544(&qword_1005534F0);
      v25 = String.init<A>(describing:)(&v37, v24);
      v27 = v26;
      v37 = (id)sub_10003D274(v25, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 24, v13 + 32);

      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v13 + 32) = 2049;
      v28 = objc_msgSend(v10, "storeCollectionId");

      v37 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 34, v13 + 42);

      *(_WORD *)(v13 + 42) = 2081;
      v29 = objc_msgSend(v10, "feedURL");
      if (v29)
      {
        v30 = v29;
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v33 = v32;

      }
      else
      {
        v33 = 0xE700000000000000;
        v31 = 0x3E7974706D653CLL;
      }
      v37 = (id)sub_10003D274(v31, v33, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v13 + 44, v13 + 52);

      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v36, "We cannot delete podcast without a valid managedObjectContext. Podcast %{private}s, uuid: %s, MOC: %s, adamID: %{private}lld, feedURL: %{private}s.", (uint8_t *)v13, 0x34u);
      v34 = v35;
      swift_arrayDestroy(v35, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

void sub_100154230(void *a1)
{
  PodcastsStateTransitionsExternalEffects.unsafeUpdateFeed(for:shouldFetchPlayState:)(a1, 0);
}

void sub_100154254(void *a1, int a2)
{
  PodcastsStateTransitionsExternalEffects.unsafeUpdateFeed(for:shouldFetchPlayState:)(a1, a2);
}

void sub_100154274(void *a1)
{
  PodcastsStateTransitionsExternalEffects.unsafeDelete(_:)(a1);
}

uint64_t sub_100154294(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1001542A4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1001542D8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v6 = a4();
  v8 = v7;
  v9 = sub_10003D274(v6, v7, a3);
  v10 = *a1;
  v11 = *a1 + 8;
  v13 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10, v11);
  result = swift_bridgeObjectRelease(v8);
  *a1 = v11;
  return result;
}

uint64_t sub_100154348(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544((uint64_t *)&unk_1005535B0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE **sub_100154494(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void *sub_1001544A4(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_100154538@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100154560()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

void sub_10015459C(char a1, NSObject *a2)
{
  uint64_t v2;

  sub_1001533B0(a1, a2, *(char **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_BYTE *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

_QWORD *sub_1001545DC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_100048628(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    v15 = v1 & 0xC000000000000001;
    v5 = v1;
    while (v2 != v4)
    {
      if (v15)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      }
      else
      {
        v6 = *(_QWORD *)(v1 + 8 * v4 + 32);
        v7 = swift_retain(v6);
      }
      v8 = Episode.uuid.getter(v7);
      v10 = v9;
      swift_release(v6);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_100048628(v11 > 1, v12 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      v1 = v5;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (v1 < 0)
      v14 = v1;
    else
      v14 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10015474C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_10017AF94(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, "longLongValue");

      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
        sub_10017AF94(v8 > 1, v9 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v7;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t LibraryDataProvider.libraryActionController.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];
  _BYTE v7[40];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v3 = v1 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___libraryActionController;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___libraryActionController, v11, 0, 0);
  sub_100007A64(v3, (uint64_t)&v8, &qword_1005535C8);
  if (!v9)
  {
    sub_100007A28((uint64_t)&v8, &qword_1005535C8);
    v4 = sub_100005FB0();
    v9 = type metadata accessor for LibraryActionController();
    v10 = sub_100026844(&qword_1005535D0, (uint64_t (*)(uint64_t))type metadata accessor for LibraryActionController, (uint64_t)&unk_1003D6AF0);
    *(_QWORD *)&v8 = v4;
    sub_10000A520((uint64_t)&v8, (uint64_t)v7);
    swift_beginAccess(v3, v6, 33, 0);
    sub_10016DE28((uint64_t)v7, v3, &qword_1005535C8);
    swift_endAccess(v6);
  }
  return sub_10002099C(&v8, a1);
}

uint64_t LibraryDataProvider.libraryActionController.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];
  _BYTE v5[40];

  sub_10002099C(a1, (uint64_t)v5);
  v2 = v1 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___libraryActionController;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___libraryActionController, v4, 33, 0);
  sub_10016DE28((uint64_t)v5, v2, &qword_1005535C8);
  return swift_endAccess(v4);
}

void (*LibraryDataProvider.libraryActionController.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  LibraryDataProvider.libraryActionController.getter((uint64_t)v3);
  return sub_100154A54;
}

void sub_100154A54(uint64_t *a1, char a2)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    sub_10000A520(*a1, (uint64_t)v3);
    sub_10002099C(v3, v4);
    v6 = v5 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___libraryActionController;
    swift_beginAccess(v5 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___libraryActionController, v2 + 15, 33, 0);
    sub_10016DE28(v4, v6, &qword_1005535C8);
    swift_endAccess(v2 + 15);
    sub_10003D380(v2);
  }
  else
  {
    v7 = v2[18];
    sub_10002099C((__int128 *)*a1, (uint64_t)v3);
    v8 = v7 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___libraryActionController;
    swift_beginAccess(v8, v4, 33, 0);
    sub_10016DE28((uint64_t)v3, v8, &qword_1005535C8);
    swift_endAccess(v4);
  }
  free(v2);
}

uint64_t LibraryDataProvider.purchaseController.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000A520(v1 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_purchaseController, a1);
}

uint64_t LibraryDataProvider.podcastStateController.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_podcastStateController));
}

uint64_t LibraryDataProvider.episodePlayStateController.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodePlayStateController));
}

uint64_t LibraryDataProvider.reviewController.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_reviewController));
}

uint64_t LibraryDataProvider.episodeDownloadStateController.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeDownloadStateController));
}

uint64_t LibraryDataProvider.episodeBookmarkStateController.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeBookmarkStateController));
}

uint64_t LibraryDataProvider.pendingPlaybackController.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000A520(v1 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_pendingPlaybackController, a1);
}

uint64_t LibraryDataProvider.hudPresenter.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_hudPresenter));
}

uint64_t LibraryDataProvider.playbackController.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_playbackController));
}

id LibraryDataProvider.__allocating_init(asPartOf:)(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v10;
  uint64_t v11;

  v2 = v1;
  v4 = sub_10003F544(&qword_10055E200);
  BaseObjectGraph.inject<A>(_:)(&v11, v4, v4);
  v5 = v11;
  v6 = sub_100005EC8(0, &qword_100553620, MTLegacyDownloadNotifier_ptr);
  BaseObjectGraph.inject<A>(_:)(&v10, v6, v6);
  v7 = v10;
  v8 = objc_allocWithZone(v2);
  return LibraryDataProvider.init(contextProvider:downloadsNotifier:objectGraph:)(v5, v7, a1);
}

id LibraryDataProvider.__allocating_init(contextProvider:downloadsNotifier:objectGraph:)(uint64_t a1, void *a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return LibraryDataProvider.init(contextProvider:downloadsNotifier:objectGraph:)(a1, a2, a3);
}

id LibraryDataProvider.init(contextProvider:downloadsNotifier:objectGraph:)(uint64_t a1, void *a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  objc_class *v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  void *v54;
  id result;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  uint64_t v81;
  id v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  char *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  char *v99;
  char *v100;
  id v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  id v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  char v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __n128 v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  void *v153;
  id v154;
  uint64_t v155;
  void *ObjCClassFromMetadata;
  id v157;
  id v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  char *v165;
  char *v166;
  uint64_t v167;
  id v168;
  void (*v169)(uint64_t, uint64_t);
  id v170;
  id v171;
  objc_class *ObjectType;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  objc_super v181;
  __int128 v182;
  ValueMetadata *v183;
  _UNKNOWN **v184;
  _QWORD v185[5];
  __int128 v186;
  ValueMetadata *v187;
  _UNKNOWN **v188;
  __int128 v189;
  ValueMetadata *v190;
  _UNKNOWN **v191;
  __int128 v192;
  void (*v193)(uint64_t, void *, void *);
  void *v194;
  _UNKNOWN **v195;
  uint64_t v196;
  _BYTE v197[32];
  uint64_t v198;

  v178 = a1;
  v179 = a3;
  v168 = a2;
  ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  v180 = type metadata accessor for URL(0);
  v176 = *(_QWORD *)(v180 - 8);
  v4 = __chkstk_darwin(v180);
  v175 = (char *)&v162 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v174 = (char *)&v162 - v6;
  v177 = type metadata accessor for Calendar.Identifier(0);
  v7 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v9 = (char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar(0);
  v173 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v162 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___actionController] = 0;
  v13 = &v3[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___libraryActionController];
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_QWORD *)v13 + 4) = 0;
  v14 = OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_podcastStateController;
  v15 = qword_100552028;
  v16 = v3;
  if (v15 != -1)
    swift_once(&qword_100552028, sub_10000D118);
  v17 = qword_100572E48;
  *(_QWORD *)&v3[v14] = qword_100572E48;
  v18 = (uint64_t *)&v16[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_reviewController];
  v19 = type metadata accessor for ReviewController();
  v20 = swift_allocObject(v19, 16, 7);
  v21 = sub_100026844(&qword_100552180, (uint64_t (*)(uint64_t))type metadata accessor for ReviewController, (uint64_t)&protocol conformance descriptor for ReviewController);
  *v18 = v20;
  v18[1] = v21;
  v22 = OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_hudPresenter;
  v23 = type metadata accessor for HUDPresenter();
  *(_QWORD *)&v16[v22] = swift_allocObject(v23, 16, 7);
  *(_QWORD *)&v16[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_jobStorageFactory] = 0;
  v16[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_isObservingLibrary] = 0;
  v24 = &v16[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___signpostID];
  v25 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = &v16[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_signpostName];
  *(_QWORD *)v26 = "LibraryDataProvider.startObservingEpisodesIfNeeded()";
  *((_QWORD *)v26 + 1) = 52;
  v26[16] = 2;
  v27 = v179;
  *(_QWORD *)&v16[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_objectGraph] = v179;
  v28 = v177;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Calendar.Identifier.gregorian(_:), v177);
  v29 = sub_100026844(&qword_100553660, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar, (uint64_t)&protocol conformance descriptor for Calendar);
  swift_retain(v17);
  v30 = swift_retain(v27);
  BaseObjectGraph.inject<A>(_:named:)(v10, v9, v10, v29, v30);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v28);
  (*(void (**)(char *, char *, uint64_t))(v173 + 32))(&v16[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_metricsCalendar], v12, v10);
  v31 = (objc_class *)type metadata accessor for UIPurchaseDelegate(0);
  v32 = objc_msgSend(objc_allocWithZone(v31), "init");
  type metadata accessor for PurchaseControllerWrapper(0);
  v33 = (void *)static PurchaseControllerWrapper.sharedInstance.getter();
  v34 = (void *)PurchaseControllerWrapper.purchaseController.getter();

  v35 = type metadata accessor for PlaybackController(0);
  BaseObjectGraph.inject<A>(_:)(&v192, v35, v35);
  v167 = OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_playbackController;
  *(_QWORD *)&v16[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_playbackController] = v192;
  v194 = v31;
  v195 = (_UNKNOWN **)sub_100026844(&qword_100553670, (uint64_t (*)(uint64_t))&type metadata accessor for UIPurchaseDelegate, (uint64_t)&protocol conformance descriptor for UIPurchaseDelegate);
  *(_QWORD *)&v192 = v32;
  v171 = v32;
  dispatch thunk of PurchaseController.uiDelegate.setter(&v192);
  v36 = &v16[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_purchaseController];
  *((_QWORD *)v36 + 3) = sub_10003F544(&qword_100553678);
  *((_QWORD *)v36 + 4) = sub_10002F9C8(&qword_100553680, &qword_100553678, (uint64_t)&protocol conformance descriptor for PurchaseController<A>);
  *(_QWORD *)v36 = v34;
  v37 = (void *)objc_opt_self(MTConstants);
  v170 = v34;
  v38 = objc_msgSend(v37, "managedAssetsDirectoryURL");
  v39 = (uint64_t)v174;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v38);

  v177 = (uint64_t)v16;
  v40 = &v16[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_assetsFolder];
  v41 = v176;
  v42 = v180;
  (*(void (**)(char *, uint64_t, uint64_t))(v176 + 32))(v40, v39, v180);
  v43 = objc_msgSend(v37, "documentsDirectory");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v43);

  v44 = v175;
  URL.appendingPathComponent(_:)(0xD000000000000013, 0x800000010042F9D0);
  v169 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v169(v39, v42);
  if (qword_100551FF0 != -1)
    swift_once(&qword_100551FF0, sub_10000C920);
  v45 = qword_100555810;
  v46 = qword_100551FF8;
  swift_bridgeObjectRetain(qword_100555810);
  if (v46 != -1)
    swift_once(&qword_100551FF8, sub_100007440);
  v47 = qword_100555818;
  v176 = *(_QWORD *)(v41 + 16);
  ((void (*)(uint64_t, char *, uint64_t))v176)(v39, v44, v42);
  v48 = type metadata accessor for CoreDataDownloadJobStorageFactory();
  swift_allocObject(v48, 32, 7);
  swift_bridgeObjectRetain_n(v47, 2);
  swift_bridgeObjectRetain(v45);
  v49 = sub_10001EF9C(v39, v45, v47);
  v50 = *(void **)(v49 + 24);
  v195 = (_UNKNOWN **)sub_100048EBC;
  v196 = 0;
  *(_QWORD *)&v192 = _NSConcreteStackBlock;
  *((_QWORD *)&v192 + 1) = 1107296256;
  v193 = sub_1000093E8;
  v194 = &unk_1004AFA30;
  v51 = _Block_copy(&v192);
  objc_msgSend(v50, "loadPersistentStoresWithCompletionHandler:", v51);
  _Block_release(v51);
  v52 = *(id *)(v49 + 24);
  swift_release(v49);
  v53 = type metadata accessor for CoreDataDownloadJobStorage();
  v173 = swift_allocObject(v53, 24, 7);
  *(_QWORD *)(v173 + 16) = v52;
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v47);
  v198 = 0;
  memset(v197, 0, sizeof(v197));
  v54 = (void *)objc_opt_self(ML3MusicLibrary);
  result = objc_msgSend(v54, "autoupdatingSharedLibraryPath");
  if (!result)
  {
    __break(1u);
    goto LABEL_21;
  }
  v56 = result;
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v59 = v58;

  result = objc_msgSend((id)objc_opt_self(MLMediaLibraryService), "sharedMediaLibraryService");
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v60 = result;
  v166 = v40;
  v194 = (void *)sub_100005EC8(0, &qword_100553690, MLMediaLibraryService_ptr);
  v195 = &off_1004C0A30;
  *(_QWORD *)&v192 = v60;
  v61 = sub_100005EC8(0, &qword_100553698, &off_1004A4470);
  v62 = objc_msgSend((id)swift_getObjCClassFromMetadata(v61), "sharedInstance");
  result = objc_msgSend(v54, "autoupdatingSharedLibrary");
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v63 = result;
  v183 = (ValueMetadata *)sub_100005EC8(0, &qword_1005536A0, ML3MusicLibrary_ptr);
  v184 = &off_1004C0A90;
  *(_QWORD *)&v182 = v63;
  v64 = type metadata accessor for MediaLibraryClient();
  v65 = swift_allocObject(v64, 176, 7);
  *(_OWORD *)(v65 + 88) = 0u;
  *(_OWORD *)(v65 + 104) = 0u;
  *(_QWORD *)(v65 + 120) = 0;
  *(_QWORD *)(v65 + 16) = v57;
  *(_QWORD *)(v65 + 24) = v59;
  sub_10002099C(&v192, v65 + 32);
  *(_QWORD *)(v65 + 72) = sub_100155F70;
  *(_QWORD *)(v65 + 80) = 0;
  sub_10002099C(&v182, v65 + 128);
  *(_QWORD *)(v65 + 168) = v62;
  v194 = (void *)v64;
  v195 = (_UNKNOWN **)sub_100026844(&qword_1005536A8, (uint64_t (*)(uint64_t))type metadata accessor for MediaLibraryClient, (uint64_t)&unk_1003CF9E0);
  *(_QWORD *)&v192 = v65;
  sub_100007A28((uint64_t)v197, &qword_1005536B0);
  sub_10003DC78((uint64_t)&v192, (uint64_t)v197, &qword_1005536B0);
  v66 = swift_allocObject(&unk_1004AFA68, 24, 7);
  v67 = v178;
  *(_QWORD *)(v66 + 16) = v178;
  v68 = (void *)objc_opt_self(PFAutoBugCaptureBugReporter);
  swift_unknownObjectRetain(v67);
  v69 = objc_msgSend(v68, "sharedInstance");
  v70 = sub_100005EC8(0, (unint64_t *)&qword_1005536B8, PFAutoBugCaptureBugReporter_ptr);
  v194 = (void *)v70;
  v195 = (_UNKNOWN **)&protocol witness table for PFAutoBugCaptureBugReporter;
  *(_QWORD *)&v192 = v69;
  v71 = type metadata accessor for CoreDataEpisodeStorage();
  v72 = swift_allocObject(v71, 72, 7);
  *(_QWORD *)(v72 + 16) = sub_100167A18;
  *(_QWORD *)(v72 + 24) = v66;
  sub_10002099C(&v192, v72 + 32);
  v73 = swift_allocObject(&unk_1004AFA90, 24, 7);
  *(_QWORD *)(v73 + 16) = v67;
  swift_unknownObjectRetain(v67);
  v74 = objc_msgSend(v68, "sharedInstance");
  v194 = (void *)v70;
  v195 = (_UNKNOWN **)&protocol witness table for PFAutoBugCaptureBugReporter;
  *(_QWORD *)&v192 = v74;
  v75 = swift_allocObject(v71, 72, 7);
  *(_QWORD *)(v75 + 16) = sub_100167A3C;
  *(_QWORD *)(v75 + 24) = v73;
  sub_10002099C(&v192, v75 + 32);
  v183 = &type metadata for PodcastsDownloader;
  v184 = &off_1004ADF88;
  LOBYTE(v182) = 0;
  v190 = &type metadata for PodcastsDownloader;
  v191 = &off_1004ADF88;
  LOBYTE(v189) = 3;
  v187 = &type metadata for PodcastsDownloader;
  v188 = &off_1004ADF88;
  LOBYTE(v186) = 1;
  v185[3] = &type metadata for PodcastsDownloader;
  v185[4] = &off_1004ADF88;
  LOBYTE(v185[0]) = 2;
  sub_1000385A4(&v182, &v189, &v186, v185, (uint64_t)&v192);
  v76 = type metadata accessor for DownloadRemovalObserver();
  swift_allocObject(v76, 24, 7);
  sub_10001B630();
  v78 = v77;
  sub_100007A64((uint64_t)v197, (uint64_t)&v189, &qword_1005536B0);
  v165 = (char *)objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
  v164 = objc_msgSend(objc_allocWithZone((Class)MTEpisodeDownloadsAlertsPresenter), "init");
  sub_100038690(&v192, &v182);
  result = objc_msgSend((id)objc_opt_self(MTReachability), "sharedInstance");
  if (!result)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v79 = result;
  v80 = v174;
  ((void (*)(char *, char *, uint64_t))v176)(v174, v166, v180);
  v81 = sub_100005EC8(0, &qword_1005536C0, MTImageStore_ptr);
  v82 = objc_msgSend((id)swift_getObjCClassFromMetadata(v81), "defaultStore");
  v187 = &type metadata for AccounStoreDsidProvider;
  v188 = &off_1004C3908;
  v83 = (char *)objc_allocWithZone((Class)type metadata accessor for EpisodeDownloadsManager(0));
  v84 = sub_100038DEC((uint64_t)&v186, (uint64_t)v187);
  v166 = (char *)&v162;
  __chkstk_darwin(v84);
  (*(void (**)(void))(v85 + 16))();
  swift_retain(v75);
  swift_retain(v72);
  v86 = v173;
  swift_retain(v173);
  swift_retain(v78);
  v176 = v78;
  v87 = v168;
  v88 = v168;
  v89 = v82;
  v161 = (uint64_t)v80;
  v90 = v165;
  v91 = v87;
  v92 = v164;
  v93 = sub_100167FF8(v75, v72, v86, v176, (uint64_t)&v189, v165, v91, (uint64_t)v164, &v182, (uint64_t)v79, v161, (uint64_t)v89, 1u, v83);
  v174 = (char *)v75;
  swift_release(v75);
  swift_release(v72);
  v94 = v86;
  v95 = v88;
  swift_release(v94);
  swift_release(v176);

  sub_10003D380(&v186);
  sub_100007A64((uint64_t)v197, (uint64_t)&v189, &qword_1005536B0);
  if (v190)
  {
    sub_10002099C(&v189, (uint64_t)&v182);
    sub_10000A520((uint64_t)&v182, (uint64_t)&v189);
    v96 = type metadata accessor for PostRestorePromptPresenter();
    v97 = swift_allocObject(v96, 16, 7);
    v98 = (void *)objc_opt_self(NSUserDefaults);
    v99 = v93;
    swift_retain(v72);
    v100 = v99;
    v101 = objc_msgSend(v98, "standardUserDefaults");
    sub_10000A520((uint64_t)&v189, (uint64_t)&v186);
    v102 = type metadata accessor for DownloadsRestoreRunner();
    v103 = (_QWORD *)swift_allocObject(v102, 96, 7);
    v103[11] = 0;
    sub_10002099C(&v186, (uint64_t)(v103 + 2));
    v103[7] = v100;
    v103[8] = v72;
    v103[9] = &off_1004C6598;
    v103[10] = v101;
    v104 = type metadata accessor for PodcastsDownloadsRestoreController();
    v105 = swift_allocObject(v104, 80, 7);
    v106 = sub_10000B2F4((uint64_t)v103, v97, v105);
    sub_10003D380(&v189);
    sub_10003D380(&v182);
    v107 = v177;
    v108 = (uint64_t *)(v177 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_downloadsRestoreController);
    *v108 = v106;
    v108[1] = (uint64_t)&off_1004BE078;
  }
  else
  {
    v109 = v93;
    sub_100007A28((uint64_t)&v189, &qword_1005536B0);
    v107 = v177;
    v110 = (_QWORD *)(v177 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_downloadsRestoreController);
    *v110 = 0;
    v110[1] = 0;
  }
  v111 = v178;
  v112 = v72;
  *(_QWORD *)(v107 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider) = v178;
  type metadata accessor for EpisodeStateRepository(0);
  v113 = swift_unknownObjectRetain(v111);
  v114 = static EpisodeStateRepository.shared.getter(v113);
  v115 = (char *)OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeStateRepository;
  *(_QWORD *)(v107 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeStateRepository) = v114;
  v116 = (char *)objc_allocWithZone((Class)type metadata accessor for EpisodeDownloadStateControllerProvider());
  v117 = v95;
  v118 = v93;
  swift_retain(v114);
  v119 = (char *)sub_10002F77C(v118, v117, v114, v116);
  v166 = v118;

  swift_release(v114);
  *(_QWORD *)(v107 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeDownloadStateControllerProvider) = v119;
  v120 = type metadata accessor for InterestObserverProvider(0);
  BaseObjectGraph.inject<A>(_:)(&v182, v120, v120);
  *(_QWORD *)(v107 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_interestsObserverProvider) = v182;
  v121 = *(_QWORD *)&v119[OBJC_IVAR____TtC8Podcasts38EpisodeDownloadStateControllerProvider_stateController];
  *(_QWORD *)(v107 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeDownloadStateController) = v121;
  v122 = sub_10003F544((uint64_t *)&unk_1005536F0);
  swift_allocObject(v122, *(unsigned int *)(v122 + 48), *(unsigned __int16 *)(v122 + 52));
  swift_retain(v114);
  v123 = swift_retain(v121);
  v124 = OnDemandLibraryEpisodeStateDataSource.init(episodeStateRepository:)(v123);
  v125 = static Podcasts.isBlueMoonEnabled()(v124);
  v163 = v112;
  v168 = v117;
  v165 = v115;
  if ((v125 & 1) != 0)
  {
    v183 = (ValueMetadata *)type metadata accessor for DummyLegacyPlayerController(0);
    v184 = (_UNKNOWN **)&protocol witness table for DummyLegacyPlayerController;
    sub_1000242A8(&v182);
    DummyLegacyPlayerController.init()();
  }
  else
  {
    v126 = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
    v183 = (ValueMetadata *)sub_100005EC8(0, (unint64_t *)&unk_10055B850, off_1004A44A0);
    v184 = (_UNKNOWN **)sub_10000A2C8(&qword_100553700, (unint64_t *)&unk_10055B850, off_1004A44A0, (uint64_t)&protocol conformance descriptor for MTPlayerController);
    *(_QWORD *)&v182 = v126;
  }
  v127 = v167;
  v128 = type metadata accessor for PendingPlaybackStore(0);
  swift_allocObject(v128, *(unsigned int *)(v128 + 48), *(unsigned __int16 *)(v128 + 52));
  v129 = PendingPlaybackStore.init()();
  v130 = *(_QWORD *)(v107 + v127);
  v190 = (ValueMetadata *)v122;
  v191 = (_UNKNOWN **)sub_10002F9C8(&qword_100553708, (uint64_t *)&unk_1005536F0, (uint64_t)&protocol conformance descriptor for <> OnDemandLibraryEpisodeStateDataSource<A>);
  v131 = v124;
  *(_QWORD *)&v189 = v124;
  sub_10000A520((uint64_t)&v182, (uint64_t)&v186);
  v132 = type metadata accessor for PendingPlaybackController(0);
  swift_allocObject(v132, *(unsigned int *)(v132 + 48), *(unsigned __int16 *)(v132 + 52));
  swift_retain(v129);
  swift_retain(v130);
  v133 = swift_retain(v124);
  v134 = PendingPlaybackController.init(pendingPlaybackStore:playbackController:playStateEstimationProvider:legacyPlayerController:)(v129, v130, &v189, &v186, v133);
  v135 = (uint64_t *)(v177 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_pendingPlaybackController);
  *(_QWORD *)(v177 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_pendingPlaybackController + 24) = v132;
  v135[4] = sub_100026844(&qword_100553710, (uint64_t (*)(uint64_t))&type metadata accessor for PendingPlaybackController, (uint64_t)&protocol conformance descriptor for PendingPlaybackController);
  *v135 = v134;
  v136 = v177;
  *(_QWORD *)&v189 = v124;
  v137 = sub_10002F9C8(&qword_100553718, (uint64_t *)&unk_1005536F0, (uint64_t)&protocol conformance descriptor for OnDemandLibraryEpisodeStateDataSource<A>);
  swift_retain(v130);
  v138 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()(v122, v137);
  v139 = sub_100026580(v130, v138, v129);
  v140 = defaultEpisodePlayTransitionRules.getter();
  v141 = sub_10003F544(&qword_100553720);
  swift_allocObject(v141, *(unsigned int *)(v141 + 48), *(unsigned __int16 *)(v141 + 52));
  v142 = EpisodeStateController.init(dataSources:transitionRules:)(v139, v140);
  swift_release(v130);
  swift_release(v138);
  *(_QWORD *)(v136 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodePlayStateController) = v142;
  v143 = *(_QWORD *)&v165[v136];
  swift_retain(v143);
  v145 = sub_10001ABC4(v144);
  swift_release(v143);
  *(_QWORD *)(v136 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeBookmarkStateController) = v145;

  v146 = sub_100005EC8(0, &qword_100553728, &off_1004A4328);
  v147 = objc_msgSend((id)swift_getObjCClassFromMetadata(v146), "sharedInstance");
  v148 = v166;
  objc_msgSend(v147, "setDownloadManager:", v166);

  if (qword_100552090 != -1)
    swift_once(&qword_100552090, sub_1000076EC);
  v149 = *(_QWORD *)(static FeedManager.shared + OBJC_IVAR___MTFeedManager_downloadManager);
  *(_QWORD *)(static FeedManager.shared + OBJC_IVAR___MTFeedManager_downloadManager) = v148;
  v150 = v148;
  swift_unknownObjectRelease(v149);
  sub_100012358();

  v151 = v150;
  v152 = v148;
  v153 = v170;
  dispatch thunk of PurchaseController.downloadManager.setter(v152);
  v181.receiver = (id)v136;
  v181.super_class = ObjectType;
  v154 = objc_msgSendSuper2(&v181, "init");
  v155 = sub_100005EC8(0, &qword_100553730, MTLegacyDownloadManagerProvider_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v155);
  v157 = v154;
  v158 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
  v159 = v168;
  objc_msgSend(v158, "setupWith:downloadsNotifier:", v151, v168);

  v160 = v176;
  objc_msgSend(*(id *)(v176 + 16), "start");
  sub_10000D210();
  sub_10001E624();

  swift_release(v174);
  swift_release(v163);
  swift_release(v173);
  swift_release(v160);
  swift_release(v129);
  swift_release(v131);
  swift_unknownObjectRelease(v178);

  swift_release(v179);
  sub_100016C4C(&v192);
  sub_100007A28((uint64_t)v197, &qword_1005536B0);
  v169((uint64_t)v175, v180);
  sub_10003D380(&v182);
  return v157;
}

uint64_t sub_100155F70@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "defaultMediaLibrary");
  result = sub_100005EC8(0, (unint64_t *)&unk_1005540D0, MPMediaLibrary_ptr);
  a1[3] = result;
  a1[4] = &off_1004C0A40;
  *a1 = v2;
  return result;
}

Swift::Void __swiftcall LibraryDataProvider.startObservingLibraryIfNeeded()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_isObservingLibrary;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_isObservingLibrary) & 1) == 0)
  {
    dispatch thunk of PodcastStateController.startObserving()();
    *(_BYTE *)(v0 + v1) = 1;
  }
}

id MTNotificationTestActionFactory.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id LibraryDataProvider.__deallocating_deinit(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)swift_getObjectType(v2, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t LibraryDataProvider.categoriesRecommendationsMetadataPublisher()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v0 = sub_10003F544(&qword_100553738);
  v20 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10003F544(&qword_100553740);
  v21 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_100553748);
  v22 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = InterestObserverProvider.favoritedInterestsCategoriesPublisher.getter(v7);
  v23 = v10;
  v11 = sub_10003F544(&qword_100553750);
  v12 = type metadata accessor for RecommendationsMetadata.Categories(0);
  v13 = sub_10002F9C8(&qword_100553758, &qword_100553750, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_10015B7F0, 0, v11, v12, v13);
  swift_release(v10);
  v14 = sub_10002F9C8(&qword_100553760, &qword_100553738, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v15 = sub_100026844(&qword_100553768, (uint64_t (*)(uint64_t))&type metadata accessor for RecommendationsMetadata.Categories, (uint64_t)&protocol conformance descriptor for RecommendationsMetadata.Categories);
  Publisher<>.removeDuplicates()(v0, v14, v15);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v2, v0);
  v16 = sub_10002F9C8(&qword_100553770, &qword_100553740, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  Publisher.first()(v3, v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  v17 = sub_10002F9C8(&qword_100553778, &qword_100553748, (uint64_t)&protocol conformance descriptor for Publishers.First<A>);
  v18 = Publisher.eraseToAnyPublisher()(v6, v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v6);
  return v18;
}

uint64_t LibraryDataProvider.channelsRecommendationsMetadataPublisher()()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTChannelEntityName);
  v4 = v3;
  v5 = objc_msgSend((id)objc_opt_self(MTChannel), "predicateForSubscribedChannel");
  v6 = sub_10003F544((uint64_t *)&unk_100553780);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1003CA250;
  static String._unconditionallyBridgeFromObjectiveC(_:)(kChannelName);
  v9 = v8;
  v10 = objc_allocWithZone((Class)NSSortDescriptor);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v12 = objc_msgSend(v10, "initWithKey:ascending:", v11, 1);

  *(_QWORD *)(v7 + 32) = v12;
  specialized Array._endMutation()(v13);
  v14 = v7;
  type metadata accessor for RecommendationsMetadataProvider(0);
  v15 = static RecommendationsMetadataProvider.metadataListLimit.getter();
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = type metadata accessor for RecommendationsMetadata.Channels(0);
  v19 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
  v20 = NSManagedObjectContext.fetchListAndPublish<A, B>(entityName:predicate:sortDescriptors:limit:receiveOn:transform:)(v2, v4, v5, v14, v15, v17, sub_10015B838, 0, v18, v19);

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v14);

  v21 = sub_10003F544(&qword_100553798);
  v22 = sub_10002F9C8(&qword_1005537A0, &qword_100553798, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v23 = Publisher.eraseToAnyPublisher()(v21, v22);
  swift_release(v20);
  return v23;
}

uint64_t LibraryDataProvider.episodesRecommendationsMetadataPublisher()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;

  v22 = type metadata accessor for EpisodeListSettings(0);
  v1 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v29 = 9;
  EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(&v24, 17, 3, 0, 0, 0);
  v4 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v7 = v6;
  v8 = (void *)EpisodeListSettings.predicate.getter();
  v9 = EpisodeListSettings.sort.getter();
  v10 = EpisodeSortType.descriptors.getter(v9);
  type metadata accessor for RecommendationsMetadataProvider(0);
  v11 = static RecommendationsMetadataProvider.metadataListLimit.getter();
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = type metadata accessor for RecommendationsMetadata.Episodes(0);
  v15 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
  v16 = NSManagedObjectContext.fetchListAndPublish<A, B>(entityName:predicate:sortDescriptors:limit:receiveOn:transform:)(v5, v7, v8, v10, v11, v13, sub_10015B84C, 0, v14, v15);

  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v10);

  v23 = v16;
  v17 = sub_10003F544(&qword_1005537A8);
  v18 = sub_10002F9C8((unint64_t *)&unk_1005537B0, &qword_1005537A8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v19 = Publisher.eraseToAnyPublisher()(v17, v18);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v22);
  return v19;
}

id LibraryDataProvider.showsRecommendationsMetadataPublisher()()
{
  uint64_t v0;
  uint64_t v1;
  id result;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  type metadata accessor for RecommendationsMetadataProvider(0);
  result = (id)static RecommendationsMetadataProvider.metadataListLimit.getter();
  if ((uint64_t)result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    v4 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
    v7 = v6;
    v8 = (void *)objc_opt_self(MTPodcast);
    v9 = objc_msgSend(v8, "predicateForNotHiddenNotImplicitlyFollowedPodcasts");
    result = objc_msgSend(v8, "sortDescriptorsForLastDatePlayed");
    if (result)
    {
      v10 = result;
      v11 = 2 * (_QWORD)v3;
      v12 = sub_100005EC8(0, (unint64_t *)&qword_1005547A0, NSSortDescriptor_ptr);
      v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v12);

      sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
      v15 = (void *)static OS_dispatch_queue.main.getter(v14);
      v16 = type metadata accessor for RecommendationsMetadata.Shows(0);
      v17 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
      v18 = NSManagedObjectContext.fetchListAndPublish<A, B>(entityName:predicate:sortDescriptors:limit:receiveOn:transform:)(v5, v7, v9, v13, v11, v15, sub_10015B860, 0, v16, v17);

      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v13);

      v19 = sub_10003F544(&qword_1005537C0);
      v20 = sub_10002F9C8(&qword_1005537C8, &qword_1005537C0, (uint64_t)&protocol conformance descriptor for Future<A, B>);
      v21 = Publisher.eraseToAnyPublisher()(v19, v20);
      swift_release(v18);
      return (id)v21;
    }
  }
  __break(1u);
  return result;
}

uint64_t LibraryDataProvider.fetchEpisode(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  sub_10003F544((uint64_t *)&unk_1005537D0);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v4 = static OS_os_log.libraryLoadingSignpost.getter();
  v5 = Promise.init(signpost:log:metadata:logResult:)("fetchEpisode(with:)", 19, 2, v4, 0, 0, 0);
  type metadata accessor for CoreDataFetcher(0);
  v6 = swift_retain(v5);
  static CoreDataFetcher.fetchEpisode(with:completion:)(a1, a2, sub_10016DF60, v5, v6);
  swift_release(v5);
  return v5;
}

uint64_t LibraryDataProvider.fetchEpisodeBlocking(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for CoreDataFetcher(0);
  v4 = sub_10003F544(&qword_1005537E0);
  static CoreDataFetcher.performAndWaitOnEpisode<A>(with:block:)(&v6, a1, a2, sub_10015B190, 0, v4);
  return v6;
}

uint64_t LibraryDataProvider.episodeUuid(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;

  sub_10003F544(&qword_1005537E8);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v2 = static OS_os_log.libraryLoadingSignpost.getter();
  v3 = Promise.init(signpost:log:metadata:logResult:)("episodeUuid(for:)", 17, 2, v2, 0, 0, 0);
  type metadata accessor for CoreDataFetcher(0);
  v4 = swift_retain(v3);
  static CoreDataFetcher.episodeUuid(for:completion:)(a1, sub_100168D84, v3, v4);
  swift_release(v3);
  return v3;
}

uint64_t sub_100156CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100156D70(a1, a2, a3, (uint64_t *)&unk_1005537F0, (uint64_t)sub_10015B198, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))&NSManagedObjectContext.episodes<A>(for:block:));
}

uint64_t LibraryDataProvider.fetchEpisodeLockups(with:)(uint64_t a1)
{
  return sub_100156E10(a1, (uint64_t *)&unk_1005537F0, (uint64_t)sub_10015B198, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))&NSManagedObjectContext.episodes<A>(for:block:));
}

uint64_t sub_100156D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100156D70(a1, a2, a3, (uint64_t *)&unk_100559EC0, (uint64_t)sub_10015B414, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))&NSManagedObjectContext.shows<A>(for:block:));
}

uint64_t LibraryDataProvider.fetchShowLockups(with:)(uint64_t a1)
{
  return sub_100156E10(a1, (uint64_t *)&unk_100559EC0, (uint64_t)sub_10015B414, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))&NSManagedObjectContext.shows<A>(for:block:));
}

uint64_t sub_100156D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100156D70(a1, a2, a3, &qword_100553800, (uint64_t)sub_10015B5E4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))&NSManagedObjectContext.channels<A>(for:block:));
}

uint64_t sub_100156D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v6;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v11 = objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "mainOrPrivateContext");
  v12 = sub_10003F544(a4);
  v13 = a6(a1, a5, 0, v12);

  return v13;
}

uint64_t LibraryDataProvider.fetchChannelLockups(with:)(uint64_t a1)
{
  return sub_100156E10(a1, &qword_100553800, (uint64_t)sub_10015B5E4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))&NSManagedObjectContext.channels<A>(for:block:));
}

uint64_t sub_100156E10(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v4;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v9 = objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "mainOrPrivateContext");
  v10 = sub_10003F544(a2);
  v11 = a4(a1, a3, 0, v10);

  return v11;
}

uint64_t sub_100156E94(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  return LibraryDataProvider.showsPaginatedPublisher(listType:sortBy:lockupStyle:pageSize:)(a1, a2 & 1, a3, a4, a5);
}

uint64_t LibraryDataProvider.showsPaginatedPublisher(listType:sortBy:lockupStyle:pageSize:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = a5;
  v9 = a2 & 1;
  v10 = type metadata accessor for ShowLockupStyle(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = sub_10003F544(&qword_100553808);
  v14 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  v41 = v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10015B8B8(a1, v9);
  v38 = v18;
  v39 = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v36 = v20;
  v37 = v19;
  v35 = sub_1002EF640(a1, v9);
  v21 = ShowsSortType.sortDescriptors.getter(a3);
  v22 = objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v24 = static OS_dispatch_queue.main.getter(v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v10);
  v25 = *(unsigned __int8 *)(v11 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_1004AFAB8, v26 + v12, v25 | 7);
  v28.n128_f64[0] = (*(double (**)(uint64_t, char *, uint64_t))(v11 + 32))(v27 + v26, (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v29 = type metadata accessor for LibraryShowLockup(0, v28);
  v30 = sub_100005EC8(0, (unint64_t *)&qword_100553810, MTPodcast_ptr);
  FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v39, v38, v37, v36, v35, v21, v42, v22, v24, sub_100168D94, v27, sub_10015BAB8, 0, v29, v30);
  v31 = sub_10002F9C8(&qword_100553818, &qword_100553808, (uint64_t)&protocol conformance descriptor for FetchedResultsListPublisher<A, B>);
  v32 = v40;
  v33 = PaginatedPublisher.eraseToAnyPaginatedPublisher()(v40, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v32);
  return v33;
}

uint64_t sub_1001570F0(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return LibraryDataProvider.unlimitedShowsPublisher<A>(listType:sortBy:transform:updateRequiredComparator:)(a1, a2 & 1, a3, a4, a5, a6, a7, a8);
}

uint64_t LibraryDataProvider.unlimitedShowsPublisher<A>(listType:sortBy:transform:updateRequiredComparator:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  __n128 v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t WitnessTable;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v43 = a7;
  v44 = a6;
  v45 = a5;
  v46 = a4;
  v11 = a2 & 1;
  v12 = sub_100005EC8(255, (unint64_t *)&qword_100553810, MTPodcast_ptr);
  v38 = a8;
  v13 = type metadata accessor for FetchedResultsListPublisher(0, a8, v12);
  v48 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v39 = (char *)&v35 - v14;
  v15 = type metadata accessor for Array(255, a8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for FetchedResultsListPublisher<A, B>, v13);
  v42 = type metadata accessor for Publishers.MapKeyPath(0, v13, v15, WitnessTable);
  v47 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v17 = (char *)&v35 - v16;
  v37 = sub_10015B8B8(a1, v11);
  v19 = v18;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v21 = v20;
  v22 = sub_1002EF640(a1, v11);
  v23 = ShowsSortType.sortDescriptors.getter(a3);
  v24 = objc_msgSend(*(id *)(v40 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v26 = (void *)static OS_dispatch_queue.main.getter(v25);
  v34 = v12;
  v27 = v38;
  v28 = v39;
  static FetchedResultsListPublisher.unsafeUnlimitedListPublisher(identifier:entityName:predicate:sortDescriptors:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v37, v19, v36, v21, v22, v23, v24, v26, v46, v45, v44, v43, v38, v34);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v21);

  swift_bridgeObjectRelease(v23);
  v49 = v27;
  KeyPath = swift_getKeyPath(&unk_1003CA7A8, &v49);
  Publisher.map<A>(_:)(KeyPath, v13, WitnessTable);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v13);
  v30 = v42;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.MapKeyPath<A, B>, v42);
  v32 = Publisher.eraseToAnyPublisher()(v30, v31);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v30);
  return v32;
}

uint64_t LibraryDataProvider.fetchStationsObserver(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD aBlock[5];
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for StationListOptions(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100553820);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v8 = static OS_os_log.libraryLoadingSignpost.getter();
  v9 = Promise.init(signpost:log:metadata:logResult:)("fetchStationsObserver(with:)", 28, 2, v8, 0, 0, 0);
  v10 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = (v6 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject(&unk_1004AFAE0, v13 + 8, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14 + v12, v7, v4);
  *(_QWORD *)(v14 + v13) = v9;
  aBlock[4] = sub_100168E38;
  v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004AFAF8;
  v15 = _Block_copy(aBlock);
  v16 = v19;
  swift_retain(v9);
  swift_release(v16);
  objc_msgSend(v10, "performBlock:", v15);
  _Block_release(v15);

  return v9;
}

uint64_t LibraryDataProvider.fetchChannelsObserver()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  sub_10003F544(&qword_100553828);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v1 = static OS_os_log.libraryLoadingSignpost.getter();
  v2 = Promise.init(signpost:log:metadata:logResult:)("fetchChannelsObserver()", 23, 2, v1, 0, 0, 0);
  v3 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v7[4] = sub_100168E78;
  v8 = v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100027AF8;
  v7[3] = &unk_1004AFB20;
  v4 = _Block_copy(v7);
  v5 = v8;
  swift_retain(v2);
  swift_release(v5);
  objc_msgSend(v3, "performBlock:", v4);
  _Block_release(v4);

  return v2;
}

uint64_t LibraryDataProvider.fetchChannelDetailBlocking(from:)@<X0>(NSURL *a1@<X8>)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v6;

  URL._bridgeToObjectiveC()(a1);
  v2 = v1;
  v3 = objc_msgSend(v1, "pf_cleanUrlToChannelStoreId");
  if (objc_msgSend((id)objc_opt_self(MTStoreIdentifier), "isNotEmpty:", v3))
  {
    type metadata accessor for CoreDataFetcher(0);
    v4 = sub_10003F544(&qword_100553830);
    static CoreDataFetcher.performAndWaitOnChannel<A>(for:block:)(&v6, v3, sub_10015BC04, 0, v4);

    return v6;
  }
  else
  {

    return 0;
  }
}

uint64_t sub_100157768(uint64_t a1, char a2)
{
  return LibraryDataProvider.channelSubscribedPublisher(channelAdamId:)(a1, a2 & 1);
}

uint64_t LibraryDataProvider.channelSubscribedPublisher(channelAdamId:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  Swift::String v19;
  void *object;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v4 = sub_10003F544(&qword_100553838);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_100553840);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100553848);
  v35 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0 || (result = AdamID.isEmpty.getter(a1), (result & 1) != 0))
  {
    LOBYTE(v37) = 0;
    Just.init(_:)(&v37, &type metadata for Bool);
    v16 = sub_10002F9C8((unint64_t *)&unk_100553850, &qword_100553838, (uint64_t)&protocol conformance descriptor for Just<A>);
    v17 = Publisher.eraseToAnyPublisher()(v4, v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v17;
  }
  if ((a1 & 0x8000000000000000) == 0)
  {
    v37 = 0;
    v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease(v38);
    v37 = 0xD00000000000001BLL;
    v38 = 0x800000010042FAD0;
    v36 = a1;
    v18 = sub_100030584();
    v19._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for UInt64, v18);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    v21 = v37;
    v33 = v38;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTChannelEntityName);
    v31 = v23;
    v32 = v22;
    v24 = objc_msgSend((id)objc_opt_self(MTChannel), "predicateForChannelWithStoreId:", a1);
    v25 = objc_msgSend(*(id *)(v34 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v27 = static OS_dispatch_queue.main.getter(v26);
    v28 = sub_100005EC8(0, &qword_100553860, MTChannel_ptr);
    FetchedResultsSingleItemPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v21, v33, v32, v31, v24, v25, v27, sub_10015BCF8, 0, sub_10015BD24, 0, &type metadata for Bool, v28);
    v29 = sub_10002F9C8(&qword_100553868, &qword_100553840, (uint64_t)&protocol conformance descriptor for FetchedResultsSingleItemPublisher<A, B>);
    Publisher.map<A>(_:)(sub_10015BD38, 0, v8, &type metadata for Bool, v29);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v30 = sub_10002F9C8(&qword_100553870, &qword_100553848, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v17 = Publisher.eraseToAnyPublisher()(v12, v30);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v12);
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t LibraryDataProvider.libraryChannelsPaginatedPublisher(sortBy:pageSize:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  v4 = sub_10003F544(&qword_100553878);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTChannelEntityName);
  v10 = v9;
  v11 = objc_msgSend((id)objc_opt_self(MTChannel), "predicateForLibraryChannel");
  v12 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext", swift_bridgeObjectRetain(a1).n128_f64[0]);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v14 = static OS_dispatch_queue.main.getter(v13);
  v15 = type metadata accessor for LegacyChannelLockup(0);
  v16 = sub_100005EC8(0, &qword_100553860, MTChannel_ptr);
  FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(0xD000000000000020, 0x800000010042FAF0, v8, v10, v11, a1, v21, v12, v14, sub_10015BD48, 0, sub_10015BAB8, 0, v15, v16);
  v17 = sub_10002F9C8(&qword_100553880, &qword_100553878, (uint64_t)&protocol conformance descriptor for FetchedResultsListPublisher<A, B>);
  v18 = PaginatedPublisher.eraseToAnyPaginatedPublisher()(v4, v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v18;
}

uint64_t sub_100157CB8(uint64_t a1, char a2)
{
  return LibraryDataProvider.fetchShowCountObserver(listType:)(a1, a2 & 1);
}

uint64_t LibraryDataProvider.fetchShowCountObserver(listType:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v12[5];
  uint64_t v13;

  sub_10003F544(&qword_100553888);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v5 = static OS_os_log.libraryLoadingSignpost.getter();
  v6 = Promise.init(signpost:log:metadata:logResult:)("fetchShowCountObserver(listType:)", 33, 2, v5, 0, 0, 0);
  v7 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v8 = swift_allocObject(&unk_1004AFB58, 40, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 24) = a2 & 1;
  *(_QWORD *)(v8 + 32) = v6;
  v12[4] = sub_100168EA4;
  v13 = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100027AF8;
  v12[3] = &unk_1004AFB70;
  v9 = _Block_copy(v12);
  v10 = v13;
  swift_retain(v6);
  swift_release(v10);
  objc_msgSend(v7, "performBlock:", v9);
  _Block_release(v9);

  return v6;
}

uint64_t LibraryDataProvider.fetchStationCountObserver()()
{
  return sub_100157E64((uint64_t)"fetchStationCountObserver()", 27, (uint64_t)sub_100168EB4, (uint64_t)&unk_1004AFB98);
}

uint64_t LibraryDataProvider.fetchDownloadCountObserver()()
{
  return sub_100157E64((uint64_t)"fetchDownloadCountObserver()", 28, (uint64_t)sub_100168EBC, (uint64_t)&unk_1004AFBC0);
}

uint64_t sub_100157E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[5];
  uint64_t v17;

  v9 = v4;
  sub_10003F544(&qword_100553888);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v10 = static OS_os_log.libraryLoadingSignpost.getter();
  v11 = Promise.init(signpost:log:metadata:logResult:)(a1, a2, 2, v10, 0, 0, 0);
  v12 = objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v16[4] = a3;
  v17 = v11;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100027AF8;
  v16[3] = a4;
  v13 = _Block_copy(v16);
  v14 = v17;
  swift_retain(v11);
  swift_release(v14);
  objc_msgSend(v12, "performBlock:", v13);
  _Block_release(v13);

  return v11;
}

uint64_t LibraryDataProvider.fetchDownloadCountObserver(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD v13[5];
  _QWORD *v14;

  v3 = v2;
  sub_10003F544(&qword_100553888);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v6 = static OS_os_log.libraryLoadingSignpost.getter();
  v7 = Promise.init(signpost:log:metadata:logResult:)("fetchDownloadCountObserver(for:)", 32, 2, v6, 0, 0, 0);
  v8 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v9 = (_QWORD *)swift_allocObject(&unk_1004AFBF8, 40, 7);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = v7;
  v13[4] = sub_100168EC8;
  v14 = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100027AF8;
  v13[3] = &unk_1004AFC10;
  v10 = _Block_copy(v13);
  v11 = v14;
  swift_bridgeObjectRetain(a2);
  swift_retain(v7);
  swift_release(v11);
  objc_msgSend(v8, "performBlock:", v10);
  _Block_release(v10);

  return v7;
}

uint64_t LibraryDataProvider.fetchEpisodeCountObserver(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = type metadata accessor for EpisodeListSettings(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F450(a1, sub_100168ED4);
  v6 = EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(a1, 17, 3, 0, 0, 0);
  v7 = (void *)EpisodeListSettings.predicate.getter(v6);
  v8 = EpisodeListType.importantKeys.getter();
  v9 = sub_10015C1B8(v7, v8);

  swift_bridgeObjectRelease(v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

uint64_t LibraryDataProvider.fetchEpisodeCountObserver(for:)(void *a1)
{
  return sub_10015C1B8(a1, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1001581F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100158234(a1, a2, a3, a4, &qword_100553890, (uint64_t)sub_10015C3EC);
}

uint64_t LibraryDataProvider.fetchSmartPlayEpisodeForPodcastBlocking(with:)(uint64_t a1, uint64_t a2)
{
  return sub_100158304(a1, a2, &qword_100553890, (uint64_t)sub_10015C3EC);
}

uint64_t sub_100158220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100158234(a1, a2, a3, a4, &qword_100553898, (uint64_t)sub_10015C460);
}

uint64_t sub_100158234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  void *v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v13;

  v8 = (void *)objc_opt_self(MTPodcast);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "predicateForPodcastUUID:", v9);

  type metadata accessor for CoreDataFetcher(0);
  v11 = sub_10003F544(a5);
  static CoreDataFetcher.performAndWaitOnPodcast<A>(with:block:)(&v13, v10, a6, 0, v11);

  return v13;
}

uint64_t LibraryDataProvider.fetchPodcastDetailBlocking(with:)(uint64_t a1, uint64_t a2)
{
  return sub_100158304(a1, a2, &qword_100553898, (uint64_t)sub_10015C460);
}

uint64_t sub_100158304(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v6 = (void *)objc_opt_self(MTPodcast);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "predicateForPodcastUUID:", v7);

  type metadata accessor for CoreDataFetcher(0);
  v9 = sub_10003F544(a3);
  static CoreDataFetcher.performAndWaitOnPodcast<A>(with:block:)(&v11, v8, a4, 0, v9);

  return v11;
}

uint64_t sub_1001583C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  v4 = swift_allocObject(&unk_1004AFE50, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = sub_10003F544(&qword_1005538A0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = swift_bridgeObjectRetain(a2);
  return Future.init(_:)(sub_10016DFD0, v4, v6);
}

uint64_t LibraryDataProvider.fetchShowEpisodeCountHeaderData(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  v4 = swift_allocObject(&unk_1004AFC48, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = sub_10003F544(&qword_1005538A0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = swift_bridgeObjectRetain(a2);
  return Future.init(_:)(sub_1001691E0, v4, v6);
}

uint64_t LibraryDataProvider.showDetailPublisher(uuid:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSString v28;
  id v29;
  id v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;

  v3 = v2;
  v6 = sub_10003F544(&qword_1005538A8);
  v7 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  v60 = v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544(&qword_1005538B0);
  v11 = *(_QWORD *)(v10 - 8);
  v61 = v10;
  v62 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10003F544(&qword_1005538B8);
  v65 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v57 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_10003F544((uint64_t *)&unk_1005538C0);
  v66 = *(_QWORD *)(v64 - 8);
  v15 = __chkstk_darwin(v64);
  v58 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (id)MTPodcastHidesPlayedEpisodesAppWideUserDefaults(v15);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(MTPodcastHidesPlayedEpisodesAppWideUserDefaultsKey);
  v20 = v19;
  v56 = NSUserDefaults.BOOLPublisher(forKey:)(v18);

  swift_bridgeObjectRelease(v20);
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(v68);
  v67 = 0xD000000000000015;
  v68 = 0x800000010042FBC0;
  v21._countAndFlagsBits = a1;
  v21._object = a2;
  String.append(_:)(v21);
  v22 = v67;
  v23 = v68;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v26 = v25;
  v27 = (void *)objc_opt_self(MTPodcast);
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend(v27, "predicateForPodcastUUID:", v28);

  v30 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v32 = static OS_dispatch_queue.main.getter(v31);
  v33 = type metadata accessor for PodcastDetail(0);
  v34 = sub_100005EC8(0, (unint64_t *)&qword_100553810, MTPodcast_ptr);
  FetchedResultsSingleItemPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v22, v23, v24, v26, v29, v30, v32, sub_10015CAB8, 0, MTWelcomeViewController.isAcknowledgementRequired.getter, 0, v33, v34);
  v35 = v56;
  v67 = v56;
  v36 = sub_10003F544((uint64_t *)&unk_100559760);
  v37 = sub_10002F9C8(&qword_1005538D0, &qword_1005538A8, (uint64_t)&protocol conformance descriptor for FetchedResultsSingleItemPublisher<A, B>);
  v38 = sub_10002F9C8(&qword_1005538D8, (uint64_t *)&unk_100559760, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v39 = v59;
  Publisher.combineLatest<A>(_:)(&v67, v59, v36, v37, v38);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v9, v39);
  KeyPath = swift_getKeyPath(&unk_1003CA7E8, v40);
  v42 = sub_10002F9C8(&qword_1005538E0, &qword_1005538B0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v43 = v57;
  v44 = v61;
  Publisher.map<A>(_:)(KeyPath, v61, v42);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v44);
  v45 = sub_10002F9C8(&qword_1005538E8, &qword_1005538B8, (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
  v46 = v58;
  v47 = v63;
  Publisher.tryMap<A>(_:)(sub_10015CB54, 0, v63, v33, v45);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v43, v47);
  v48 = sub_10002F9C8(&qword_1005538F0, (uint64_t *)&unk_1005538C0, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  v49 = v64;
  v50 = Publisher.bufferedMulticast()(v64, v48);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v46, v49);
  v67 = v50;
  v51 = sub_10003F544(&qword_1005538F8);
  v52 = sub_10002F9C8(&qword_100553900, &qword_1005538F8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v53 = Publisher.eraseToAnyPublisher()(v51, v52);
  swift_release(v50);
  swift_release(v35);
  return v53;
}

uint64_t LibraryDataProvider.allAvailableEpisodeUserFiltersPublisher(forShow:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSString v28;
  id v29;
  uint64_t v30;
  id v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  __n128 v62;
  uint64_t v63;
  char *v64;
  __n128 v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  void *v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  _QWORD v114[3];

  v102 = sub_10003F544(&qword_100553908);
  v104 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_10003F544(&qword_100553910);
  v105 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v101 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for FetchedResultsCountPublisher(0);
  v94 = *(void (**)(char *, uint64_t))(v108 - 8);
  __chkstk_darwin(v108);
  v8 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_10003F544(&qword_100553918);
  v110 = *(_QWORD *)(v98 - 8);
  v9 = __chkstk_darwin(v98);
  v99 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v97 = (char *)&v89 - v12;
  v13 = __chkstk_darwin(v11);
  v96 = (char *)&v89 - v14;
  v15 = __chkstk_darwin(v13);
  v95 = (char *)&v89 - v16;
  v17 = __chkstk_darwin(v15);
  v112 = (char *)&v89 - v18;
  __chkstk_darwin(v17);
  v113 = (char *)&v89 - v19;
  v20 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  strcpy((char *)v114, "hasBookmarks ");
  HIWORD(v114[1]) = -4864;
  v111 = a1;
  v21._countAndFlagsBits = a1;
  v21._object = a2;
  String.append(_:)(v21);
  v22 = v114[0];
  v23 = v114[1];
  v109 = (id)kMTEpisodeEntityName;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v26 = v25;
  v27 = (void *)objc_opt_self(MTEpisode);
  v106 = v27;
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend(v27, "predicateForBookmarkedEpisodesOnPodcastUuid:", v28);

  v30 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v31 = v20;
  v92 = v30;
  v33 = static OS_dispatch_queue.main.getter(v32);
  FetchedResultsCountPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:)(v22, v23, v24, v26, v29, v31, v33);
  v34 = sub_100026844(&qword_100553920, (uint64_t (*)(uint64_t))&type metadata accessor for FetchedResultsCountPublisher, (uint64_t)&protocol conformance descriptor for FetchedResultsCountPublisher);
  v35 = v108;
  v93 = v34;
  Publisher.map<A>(_:)(sub_10016DF64, 0, v108, &type metadata for Bool, v34);
  v36 = (void (*)(char *, uint64_t))*((_QWORD *)v94 + 1);
  v36(v8, v35);
  v37 = v36;
  v94 = v36;
  strcpy((char *)v114, "hasPlayed ");
  BYTE3(v114[1]) = 0;
  HIDWORD(v114[1]) = -369098752;
  v38._countAndFlagsBits = v111;
  v107 = a2;
  v38._object = a2;
  String.append(_:)(v38);
  v91 = v114[0];
  v90 = v114[1];
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
  v41 = v40;
  v42 = String._bridgeToObjectiveC()();
  v43 = v106;
  v44 = objc_msgSend(v106, "predicateForAllEpisodesOnPodcastUuid:", v42);

  v45 = objc_msgSend(v43, "predicateForVisuallyPlayed:", 1);
  v46 = objc_msgSend(v44, "AND:", v45);

  v47 = v31;
  v49 = static OS_dispatch_queue.main.getter(v48);
  FetchedResultsCountPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:)(v91, v90, v39, v41, v46, v47, v49);
  v50 = v108;
  Publisher.map<A>(_:)(sub_10015CB68, 0, v108, &type metadata for Bool, v34);
  v37(v8, v50);
  v114[0] = 0;
  v114[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v114[1]);
  strcpy((char *)v114, "hasSubscriber ");
  HIBYTE(v114[1]) = -18;
  v51._countAndFlagsBits = v111;
  v51._object = v107;
  String.append(_:)(v51);
  v52 = v114[0];
  v53 = v114[1];
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
  v56 = v55;
  v57 = String._bridgeToObjectiveC()();
  v58 = objc_msgSend(v106, "predicateForAllEpisodesOnPodcastUuid:", v57);

  v59 = (void *)EpisodeUserFilter.basePredicate.getter(5, 2);
  v60 = objc_msgSend(v58, "AND:", v59);

  v61 = v47;
  v109 = v61;
  v63 = static OS_dispatch_queue.main.getter(v62);
  FetchedResultsCountPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:)(v52, v53, v54, v56, v60, v61, v63);
  v64 = v95;
  Publisher.map<A>(_:)(sub_10016DF64, 0, v50, &type metadata for Bool, v93);
  v94(v8, v50);
  type metadata accessor for CoreDataFetcher(0);
  v66 = (void *)static OS_dispatch_queue.main.getter(v65);
  v67 = sub_10003F544(&qword_100553928);
  v68 = static CoreDataFetcher.performAndPublishOnPodcast<A>(with:queue:block:)(v111, v107, v66, sub_10015CB7C, 0, v67);

  v114[0] = v68;
  v69 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  v70 = v96;
  v71 = v98;
  v69(v96, v113, v98);
  v72 = v97;
  v69(v97, v112, v71);
  v73 = v99;
  v69(v99, v64, v71);
  swift_retain(v68);
  v74 = sub_10003F544(&qword_100553930);
  v75 = sub_10002F9C8(&qword_100553938, &qword_100553930, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v76 = sub_10002F9C8(&qword_100553940, &qword_100553918, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v77 = v100;
  v78 = v73;
  v79 = v71;
  Publishers.CombineLatest4.init(_:_:_:_:)(v114, v70, v72, v78, v74, v79, v79, v79, v75, v76, v76, v76);
  v80 = sub_10003F544(&qword_100553948);
  v81 = sub_10002F9C8(&qword_100553950, &qword_100553908, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest4<A, B, C, D>);
  v82 = v101;
  v83 = v102;
  Publisher.map<A>(_:)(sub_10015CC50, 0, v102, v80, v81);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v77, v83);
  v84 = sub_10002F9C8(&qword_100553958, &qword_100553910, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v85 = v103;
  v86 = Publisher.eraseToAnyPublisher()(v103, v84);

  swift_release(v68);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v82, v85);
  v87 = *(void (**)(char *, uint64_t))(v110 + 8);
  v87(v64, v79);
  v87(v112, v79);
  v87(v113, v79);
  return v86;
}

uint64_t LibraryDataProvider.episodeListPublisher(settings:pageSize:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  id v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD v57[9];
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;

  v4 = v3;
  v50 = a3;
  v51 = a2;
  v6 = sub_10003F544((uint64_t *)&unk_100553960);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v52 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EpisodeListSettings(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v45 - v15;
  v17 = os_feature_enabled_prototype_up_next(v14);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18 = v49(v16, a1, v9);
  v54 = v6;
  v53 = v7;
  if (v17)
  {
    EpisodeListSettings.listType.getter(v57, v18);
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 2;
    v64 = 0;
    v65 = 9;
    v19 = static EpisodeListType.== infix(_:_:)(v57, &v60);
    sub_10003F450((uint64_t)v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    v20 = v4;
    if ((v19 & 1) != 0)
      sub_1001AD698(2);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    v20 = v4;
  }
  v58 = 0;
  v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v21 = swift_bridgeObjectRelease(v59);
  v55 = 0xD000000000000015;
  v56 = 0x800000010042FBE0;
  v22 = EpisodeListSettings.listType.getter(&v58, v21);
  v23 = EpisodeListType.description.getter(v22);
  v25 = v24;
  sub_10003F450((uint64_t)&v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  v48 = v55;
  v47 = v56;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v46 = v28;
  v29 = EpisodeListSettings.predicate.getter(v27);
  v30 = EpisodeListSettings.sort.getter();
  v31 = EpisodeSortType.descriptors.getter(v30);
  v32 = objc_msgSend(*(id *)(v20 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v49(v13, a1, v9);
  v33 = *(unsigned __int8 *)(v10 + 80);
  v34 = (v33 + 16) & ~v33;
  v35 = swift_allocObject(&unk_1004AFC70, v34 + v11, v33 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v35 + v34, v13, v9);
  v36 = type metadata accessor for LibraryEpisodeLockup(0);
  v37 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v38 = v50;
  v44 = v35;
  v39 = v52;
  FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v48, v47, v27, v46, v29, v31, v51, v32, v38, sub_100169208, v44, sub_10015BAB8, 0, v36, v37);
  v40 = sub_10002F9C8(&qword_100553970, (uint64_t *)&unk_100553960, (uint64_t)&protocol conformance descriptor for FetchedResultsListPublisher<A, B>);
  v41 = v54;
  v42 = PaginatedPublisher.eraseToAnyPaginatedPublisher()(v54, v40);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v41);
  return v42;
}

uint64_t LibraryDataProvider.episodeListCountPublisher(settings:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v1 = type metadata accessor for FetchedResultsCountPublisher(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = 0;
  v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v5 = swift_bridgeObjectRelease(v27);
  v24 = 0xD00000000000001ALL;
  v25 = 0x800000010042FC20;
  v6 = EpisodeListSettings.listType.getter(&v26, v5);
  v7 = EpisodeListType.description.getter(v6);
  v9 = v8;
  sub_10003F450((uint64_t)&v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11 = v24;
  v12 = v25;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v15 = v14;
  v16 = EpisodeListSettings.predicate.getter(v13);
  v17 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v19 = static OS_dispatch_queue.main.getter(v18);
  FetchedResultsCountPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:)(v11, v12, v13, v15, v16, v17, v19);
  v20 = sub_100026844(&qword_100553920, (uint64_t (*)(uint64_t))&type metadata accessor for FetchedResultsCountPublisher, (uint64_t)&protocol conformance descriptor for FetchedResultsCountPublisher);
  v21 = Publisher.eraseToAnyPublisher()(v1, v20);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v21;
}

uint64_t LibraryDataProvider.seeAllEpisodesShelfPublisher(settings:pageSize:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  _QWORD *v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v5 = sub_10003F544(&qword_100553978);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider], "privateQueueContext");
  v22 = a1;
  v10 = (_QWORD *)swift_allocObject(&unk_1004AFC98, 40, 7);
  v10[2] = v2;
  v10[3] = a2;
  v10[4] = v9;
  v11 = v2;
  v12 = v9;
  v13 = sub_10003F544(&qword_100553980);
  v14 = sub_10003F544(&qword_100553988);
  v15 = sub_10002F9C8(&qword_100553990, &qword_100553980, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_100169610, v10, v13, v14, v15);
  swift_release(v10);
  v16 = sub_10002F9C8(&qword_100553998, &qword_100553978, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v17 = sub_10002F9C8(&qword_1005539A0, &qword_100553988, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v18 = Publisher<>.paginatedSwitchToLatest()(v5, v16, v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = v18;
  v19 = PaginatedPublisher.paginatedBufferedMulticast()(v14, v17);
  swift_release(v18);

  return v19;
}

uint64_t LibraryDataProvider.episodeListSettingsPublisher(listType:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  v34 = sub_10003F544(&qword_1005539A8);
  v36 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_10003F544(&qword_1005539B0);
  v37 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10015ED78(a1);
  LibraryDataProvider.libraryActionController.getter((uint64_t)v40);
  v7 = v41;
  v8 = v42;
  sub_10003A834(v40, v41);
  v9 = dispatch thunk of LibraryActionControllerProtocol.pubDateLimitPublisher(forListType:)(a1, v7, v8);
  sub_10003D380(v40);
  LibraryDataProvider.libraryActionController.getter((uint64_t)v40);
  v10 = v41;
  v11 = v42;
  sub_10003A834(v40, v41);
  v12 = dispatch thunk of LibraryActionControllerProtocol.hidesPlayedEpisodesPublisher(forListType:)(a1, v10, v11);
  v31 = v12;
  sub_10003D380(v40);
  v32 = v9;
  v33 = v6;
  v39 = v9;
  v40[0] = v6;
  v38 = v12;
  swift_retain(v6);
  swift_retain(v9);
  swift_retain(v12);
  v13 = sub_10003F544(&qword_1005539B8);
  v14 = sub_10003F544(&qword_1005539C0);
  v15 = sub_10003F544((uint64_t *)&unk_100559760);
  v16 = sub_10002F9C8(&qword_1005539C8, &qword_1005539B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v17 = sub_10002F9C8(&qword_1005539D0, &qword_1005539C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v18 = sub_10002F9C8(&qword_1005538D8, (uint64_t *)&unk_100559760, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest3.init(_:_:_:)(v40, &v39, &v38, v13, v14, v15, v16, v17, v18);
  v19 = swift_allocObject(&unk_1004AFCC0, 81, 7);
  sub_10016965C(a1, v19 + 16);
  v20 = swift_allocObject(&unk_1004AFCE8, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100169698;
  *(_QWORD *)(v20 + 24) = v19;
  sub_10003F450(a1, sub_100168ED4);
  v21 = type metadata accessor for EpisodeListSettings(0);
  v22 = sub_10002F9C8(&qword_1005539D8, &qword_1005539A8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  v23 = v34;
  Publisher.map<A>(_:)(sub_100169700, v20, v34, v21, v22);
  swift_release(v20);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v3, v23);
  v24 = sub_10002F9C8(&qword_1005539E0, &qword_1005539B0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v25 = v35;
  v26 = Publisher.bufferedMulticast()(v35, v24);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v25);
  v40[0] = v26;
  v27 = sub_10003F544(&qword_100553980);
  v28 = sub_10002F9C8(&qword_100553990, &qword_100553980, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v29 = Publisher.eraseToAnyPublisher()(v27, v28);
  swift_release(v26);
  swift_release(v33);
  swift_release(v32);
  swift_release(v31);
  return v29;
}

uint64_t LibraryDataProvider.episodeListShelfPublisher(episodeSettingsPublisher:pageSize:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v6 = sub_10003F544(&qword_1005539E8);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_1005539F0);
  v28 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v29 = a1;
  v13 = sub_10003F544(&qword_100553980);
  v14 = sub_10002F9C8(&qword_100553990, &qword_100553980, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v15 = sub_100026844(&qword_1005539F8, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodeListSettings, (uint64_t)&protocol conformance descriptor for EpisodeListSettings);
  Publisher<>.removeDuplicates()(v13, v14, v15);
  v16 = swift_allocObject(&unk_1004AFD10, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v3);
  v17 = (_QWORD *)swift_allocObject(&unk_1004AFD38, 40, 7);
  v17[2] = v16;
  v17[3] = a2;
  v17[4] = v12;
  v18 = v12;
  v19 = sub_10003F544(&qword_100553988);
  v20 = sub_10002F9C8(&qword_100553A00, &qword_1005539E8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  Publisher.compactMap<A>(_:)(sub_100169758, v17, v6, v19, v20);
  swift_release(v17);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  v21 = sub_10002F9C8(&qword_100553A08, &qword_1005539F0, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v22 = sub_10002F9C8(&qword_1005539A0, &qword_100553988, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v23 = Publisher<>.paginatedSwitchToLatest()(v9, v21, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
  v29 = v23;
  v24 = PaginatedPublisher.paginatedBufferedMulticast()(v19, v22);
  swift_release(v23);

  return v24;
}

uint64_t LibraryDataProvider.fetchStationDetail(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  sub_10003F544(&qword_100553A10);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v4 = static OS_os_log.libraryLoadingSignpost.getter();
  v5 = Promise.init(signpost:log:metadata:logResult:)("fetchStationDetail(with:)", 25, 2, v4, 0, 0, 0);
  type metadata accessor for CoreDataFetcher(0);
  v6 = swift_retain(v5);
  static CoreDataFetcher.fetchStation(with:completion:)(a1, a2, sub_100169764, v5, v6);
  swift_release(v5);
  return v5;
}

uint64_t LibraryDataProvider.fetchStationDetailObserver(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD v13[5];
  _QWORD *v14;

  v3 = v2;
  sub_10003F544(&qword_100553A18);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v6 = static OS_os_log.libraryLoadingSignpost.getter();
  v7 = Promise.init(signpost:log:metadata:logResult:)("fetchStationDetailObserver(with:)", 33, 2, v6, 0, 0, 0);
  v8 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v9 = (_QWORD *)swift_allocObject(&unk_1004AFD60, 40, 7);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = v7;
  v13[4] = sub_100169770;
  v14 = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100027AF8;
  v13[3] = &unk_1004AFD78;
  v10 = _Block_copy(v13);
  v11 = v14;
  swift_bridgeObjectRetain(a2);
  swift_retain(v7);
  swift_release(v11);
  objc_msgSend(v8, "performBlock:", v10);
  _Block_release(v10);

  return v7;
}

uint64_t LibraryDataProvider.stationDetailPublisher(uuid:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSString v17;
  id v18;
  id v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v3 = v2;
  v6 = sub_10003F544(&qword_100553A20);
  v33 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_100553A28);
  v34 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = 0;
  v36 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(v36);
  v35 = 0xD000000000000018;
  v36 = 0x800000010042FC90;
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  v31 = v36;
  v32 = v35;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPlaylistEntityName);
  v15 = v14;
  v16 = (void *)objc_opt_self(MTPlaylist);
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "predicateForVisiblePlaylistWithUUID:", v17);

  v19 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v21 = static OS_dispatch_queue.main.getter(v20);
  v22 = type metadata accessor for StationDetail(0);
  v23 = sub_100005EC8(0, (unint64_t *)&qword_100553A30, MTPlaylist_ptr);
  FetchedResultsSingleItemPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v32, v31, v13, v15, v18, v19, v21, sub_1001630E0, 0, MTWelcomeViewController.isAcknowledgementRequired.getter, 0, v22, v23);
  v24 = sub_10002F9C8(&qword_100553A38, &qword_100553A20, (uint64_t)&protocol conformance descriptor for FetchedResultsSingleItemPublisher<A, B>);
  Publisher.tryMap<A>(_:)(sub_10015CB54, 0, v6, v22, v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v6);
  v25 = sub_10002F9C8(&qword_100553A40, &qword_100553A28, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  v26 = Publisher.bufferedMulticast()(v9, v25);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
  v35 = v26;
  v27 = sub_10003F544(&qword_100553A48);
  v28 = sub_10002F9C8(&qword_100553A50, &qword_100553A48, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v29 = Publisher.eraseToAnyPublisher()(v27, v28);
  swift_release(v26);
  return v29;
}

uint64_t LibraryDataProvider.stationDetailEpisodesPublisher(stationPublisher:pageSize:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v3 = v2;
  v43 = a2;
  v5 = sub_10003F544(&qword_100553A58);
  v42 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_100553A60);
  v9 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  v45 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100553A68);
  v13 = *(_QWORD *)(v12 - 8);
  v46 = v12;
  v47 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544(&qword_100553A70);
  v17 = *(_QWORD *)(v16 - 8);
  v48 = v16;
  v49 = v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider], "privateQueueContext");
  v50 = a1;
  v21 = sub_10003F544(&qword_100553A78);
  v22 = type metadata accessor for LibraryDataProvider._Station(0);
  v23 = sub_10002F9C8(&qword_100553A80, &qword_100553A78, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_100163C98, 0, v21, v22, v23);
  v24 = sub_10002F9C8(&qword_100553A88, &qword_100553A58, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v25 = sub_100026844(&qword_100553A90, type metadata accessor for LibraryDataProvider._Station, (uint64_t)&unk_1003CAB04);
  Publisher<>.removeDuplicates()(v5, v24, v25);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v5);
  v26 = (_QWORD *)swift_allocObject(&unk_1004AFDB0, 40, 7);
  v27 = v43;
  v26[2] = v3;
  v26[3] = v27;
  v26[4] = v20;
  v28 = v3;
  v29 = v20;
  v30 = sub_10003F544(&qword_100553A98);
  v31 = sub_10002F9C8(&qword_100553AA0, &qword_100553A60, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v32 = v44;
  Publisher.compactMap<A>(_:)(sub_100169790, v26, v44, v30, v31);
  swift_release(v26);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v32);
  v33 = sub_10003F544(&qword_100553AA8);
  v34 = v46;
  Publishers.CompactMap.map<A>(_:)(sub_100163D44, 0, v46, v33);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v15, v34);
  v35 = sub_10002F9C8(&qword_100553AB0, &qword_100553A70, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v36 = sub_10002F9C8(&qword_100553AB8, &qword_100553AA8, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v37 = v48;
  v38 = Publisher<>.paginatedSwitchToLatest()(v48, v35, v36);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v19, v37);
  v50 = v38;
  v39 = PaginatedPublisher.paginatedBufferedMulticast()(v33, v36);
  swift_release(v38);

  return v39;
}

Swift::Bool __swiftcall LibraryDataProvider.hasFollowedShows()()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  _QWORD v9[5];
  _BOOL8 v10;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "mainOrPrivateContext");
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v3 = v2;
  v4 = objc_allocWithZone((Class)NSFetchRequest);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v6 = objc_msgSend(v4, "initWithEntityName:", v5);

  v7 = objc_msgSend((id)objc_opt_self(MTPodcast), "predicateForSubscribedAndNotHidden");
  objc_msgSend(v6, "setPredicate:", v7);

  objc_msgSend(v6, "setFetchLimit:", 1);
  v9[2] = v1;
  v9[3] = v6;
  NSManagedObjectContext.performAndWait<A>(_:)(&v10, sub_100169A7C, v9, &type metadata for Bool);

  return v10;
}

uint64_t LibraryDataProvider.addApplicationBackgroundDependencies(to:)()
{
  void *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v72[24];
  id v73;
  _UNKNOWN **v74;
  uint64_t v75;
  _UNKNOWN **v76;

  v1 = sub_10003F544((uint64_t *)&unk_100553AC0);
  v73 = v0;
  v74 = (_UNKNOWN **)sub_100026844(&qword_10055C6C0, type metadata accessor for LibraryDataProvider, (uint64_t)&protocol conformance descriptor for LibraryDataProvider);
  v2 = v0;
  v3 = BaseObjectGraph.satisfying<A>(_:with:)(v1, &v73, v1);

  v4 = sub_10003F544((uint64_t *)&unk_100553AD0);
  v5 = *(void **)&v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeBookmarkStateController];
  v73 = v5;
  swift_retain(v5);
  v6 = BaseObjectGraph.satisfying<A>(_:with:)(v4, &v73, v4);
  swift_release(v5);
  swift_release(v3);
  v7 = sub_10003F544((uint64_t *)&unk_100555130);
  v8 = *(void **)&v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeDownloadStateController];
  v73 = v8;
  swift_retain(v8);
  v9 = BaseObjectGraph.satisfying<A>(_:with:)(v7, &v73, v7);
  swift_release(v8);
  swift_release(v6);
  v10 = sub_10003F544(&qword_100553720);
  v11 = *(void **)&v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodePlayStateController];
  v73 = v11;
  swift_retain(v11);
  v12 = BaseObjectGraph.satisfying<A>(_:with:)(v10, &v73, v10);
  swift_release(v11);
  swift_release(v9);
  v13 = type metadata accessor for PodcastStateController(0);
  v14 = *(void **)&v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_podcastStateController];
  v73 = v14;
  swift_retain(v14);
  v15 = BaseObjectGraph.satisfying<A>(_:with:)(v13, &v73, v13);
  swift_release(v14);
  swift_release(v12);
  v16 = sub_10003F544(&qword_100553AE0);
  if (qword_1005520B8 != -1)
    swift_once(&qword_1005520B8, sub_10004AB18);
  swift_beginAccess(&static PodcastsStateCoordinator.shared, v72, 0, 0);
  v17 = (void *)static PodcastsStateCoordinator.shared;
  v18 = type metadata accessor for PodcastsStateCoordinator();
  v75 = v18;
  v76 = (_UNKNOWN **)sub_100026844(&qword_100553AE8, (uint64_t (*)(uint64_t))type metadata accessor for PodcastsStateCoordinator, (uint64_t)&protocol conformance descriptor for PodcastsStateCoordinator);
  v73 = v17;
  v19 = v17;
  v20 = BaseObjectGraph.satisfying<A>(_:with:)(v16, &v73, v16);
  swift_release(v15);
  sub_10003D380(&v73);
  v73 = (id)static PodcastsStateCoordinator.shared;
  v21 = (id)static PodcastsStateCoordinator.shared;
  v22 = BaseObjectGraph.satisfying<A>(_:with:)(v18, &v73, v18);

  swift_release(v20);
  v23 = sub_10003F544((uint64_t *)&unk_100553AF0);
  v24 = BaseObjectGraph.satisfying<A>(_:with:)(v23, &v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_purchaseController], v23);
  swift_release(v22);
  v25 = sub_10003F544((uint64_t *)&unk_10055C400);
  v26 = BaseObjectGraph.satisfying<A>(_:with:)(v25, &v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_pendingPlaybackController], v25);
  swift_release(v24);
  v27 = sub_10003F544((uint64_t *)&unk_100553B60);
  v73 = *(id *)&v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeDownloadStateControllerProvider];
  v28 = v73;
  v29 = BaseObjectGraph.satisfying<A>(_:with:)(v27, &v73, v27);

  swift_release(v26);
  v30 = sub_10003F544((uint64_t *)&unk_100565FC0);
  v31 = *(void **)&v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_hudPresenter];
  v73 = v31;
  v74 = &off_1004C4230;
  swift_retain(v31);
  v32 = BaseObjectGraph.satisfying<A>(_:with:)(v30, &v73, v30);
  swift_release(v31);
  swift_release(v29);
  v33 = sub_10003F544(&qword_100553B70);
  v34 = sub_100005EC8(0, &qword_100553B78, &off_1004A43D0);
  v35 = objc_msgSend((id)swift_getObjCClassFromMetadata(v34), "sharedInstance");
  v73 = v35;
  v74 = &off_1004BCA30;
  v36 = BaseObjectGraph.satisfying<A>(_:with:)(v33, &v73, v33);

  swift_release(v32);
  v37 = sub_10003F544((uint64_t *)&unk_100553B80);
  v38 = objc_msgSend(objc_allocWithZone((Class)MTAddPodcastOrStationController), "init");
  v73 = v38;
  v74 = &off_1004B4FA8;
  v39 = BaseObjectGraph.satisfying<A>(_:with:)(v37, &v73, v37);

  swift_release(v36);
  v40 = sub_10003F544((uint64_t *)&unk_100565FD0);
  v41 = sub_100005EC8(0, (unint64_t *)&unk_100553B90, &off_1004A44C8);
  v42 = objc_msgSend((id)swift_getObjCClassFromMetadata(v41), "sharedInstance");
  v73 = v42;
  v74 = &off_1004B81E0;
  v43 = BaseObjectGraph.satisfying<A>(_:with:)(v40, &v73, v40);

  swift_release(v39);
  v44 = sub_10003F544((uint64_t *)&unk_10055C410);
  v45 = type metadata accessor for RestrictionsController();
  v46 = (void *)swift_allocObject(v45, 16, 7);
  v75 = v45;
  v76 = &off_1004B0550;
  v73 = v46;
  v47 = BaseObjectGraph.satisfying<A>(_:with:)(v44, &v73, v44);
  swift_release(v43);
  sub_10003D380(&v73);
  v48 = sub_10003F544((uint64_t *)&unk_100553BA0);
  v49 = sub_100005EC8(0, &qword_100554590, &off_1004A4480);
  v50 = objc_msgSend((id)swift_getObjCClassFromMetadata(v49), "sharedInstance");
  v51 = sub_10000A2C8((unint64_t *)&qword_100553BB0, &qword_100554590, &off_1004A4480, (uint64_t)&protocol conformance descriptor for MTNotificationManager);
  v73 = v50;
  v74 = (_UNKNOWN **)v51;
  v52 = BaseObjectGraph.satisfying<A>(_:with:)(v48, &v73, v48);

  swift_release(v47);
  v53 = type metadata accessor for TranscriptReportConcernURLBuilder();
  v54 = (void *)swift_allocObject(v53, 16, 7);
  v73 = v54;
  v55 = BaseObjectGraph.satisfying<A>(_:with:)(v53, &v73, v53);
  swift_release(v54);
  swift_release(v52);
  v56 = sub_10003F544((uint64_t *)&unk_10055C420);
  v57 = BaseObjectGraph.satisfying<A>(_:with:)(v56, sub_1001677F8, 0, v56);
  swift_release(v55);
  v58 = sub_10003F544((uint64_t *)&unk_100553BC0);
  v59 = BaseObjectGraph.satisfying<A>(_:with:)(v58, sub_100167848, 0, v58);
  swift_release(v57);
  v60 = sub_10003F544((uint64_t *)&unk_10055C430);
  v61 = BaseObjectGraph.satisfying<A>(_:with:)(v60, sub_1001678C0, 0, v60);
  swift_release(v59);
  v62 = sub_10003F544((uint64_t *)&unk_100553BD0);
  v63 = sub_100005EC8(0, (unint64_t *)&unk_10055BCD0, &off_1004A4568);
  v64 = objc_msgSend((id)swift_getObjCClassFromMetadata(v63), "sharedInstance");
  v73 = v64;
  v74 = &off_1004C0040;
  v65 = BaseObjectGraph.satisfying<A>(_:with:)(v62, &v73, v62);

  swift_release(v61);
  v66 = type metadata accessor for LibraryActionController();
  v67 = BaseObjectGraph.satisfying<A>(_:with:)(v66, sub_100167954, 0, v66);
  swift_release(v65);
  v68 = sub_10003F544(&qword_100553BE0);
  v69 = BaseObjectGraph.satisfying<A>(_:with:)(v68, sub_100167984, 0, v68);
  swift_release(v67);
  v70 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_objectGraph];
  *(_QWORD *)&v2[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_objectGraph] = v69;
  swift_retain(v69);
  swift_release(v70);
  return v69;
}

id sub_10015B190@<X0>(id a1@<X0>, id *a2@<X8>)
{
  *a2 = a1;
  return a1;
}

uint64_t sub_10015B198@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t result;
  uint64_t i;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _OWORD v29[2];
  uint64_t v30;
  unint64_t v31;

  v4 = sub_10003F544((uint64_t *)&unk_100553DE0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = swift_bridgeObjectRetain(a1);
    if (v10)
      goto LABEL_3;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    v25 = _swiftEmptyArrayStorage;
LABEL_20:
    *a2 = v25;
    return result;
  }
  if (a1 < 0)
    v26 = a1;
  else
    v26 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v10 = _CocoaArrayWrapper.endIndex.getter(v26);
  if (!v10)
    goto LABEL_19;
LABEL_3:
  result = type metadata accessor for Episode(0, v11);
  if (v10 >= 1)
  {
    v28 = a2;
    for (i = 0; i != v10; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v14 = *(id *)(a1 + 8 * i + 32);
      v30 = 0;
      memset(v29, 0, sizeof(v29));
      v15 = v14;
      v16 = Episode.init(from:clickAction:wantsListenNowReason:)(v15, (uint64_t)v29, 0);
      if (v16)
      {
        v17 = v16;
        v18 = type metadata accessor for EpisodeListSettings(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v9, 1, 1, v18);
        v19 = type metadata accessor for SectionContext(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
        v20 = dispatch thunk of Episode.defaultLockup(for:sectionContext:)(v9, v6);
        swift_release(v17);
        sub_100007A28((uint64_t)v6, (uint64_t *)&unk_100553DE0);
        sub_100007A28((uint64_t)v9, &qword_10055B790);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        v23 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v22 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v23 >= v22 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v20);
        specialized Array._endMutation()(v24);
      }
      else
      {

      }
    }
    result = swift_bridgeObjectRelease(a1);
    v25 = (_QWORD *)v31;
    a2 = v28;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10015B414@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t result;
  uint64_t i;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _OWORD v22[4];
  char v23;

  v4 = type metadata accessor for ShowLockupStyle(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = swift_bridgeObjectRetain(a1);
    if (v7)
      goto LABEL_3;
LABEL_18:
    result = swift_bridgeObjectRelease(a1);
    v18 = _swiftEmptyArrayStorage;
LABEL_19:
    *a2 = v18;
    return result;
  }
  if (a1 < 0)
    v19 = a1;
  else
    v19 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  if (!v7)
    goto LABEL_18;
LABEL_3:
  result = type metadata accessor for LibraryShowLockup(0, v8);
  memset(v22, 0, sizeof(v22));
  v23 = -1;
  if (v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v12 = *(id *)(a1 + 8 * i + 32);
      v13 = v12;
      ShowLockupStyle.init(includesOfferButton:defaultSubtitle:unfollowedSubtitle:groupedEpisodesListType:)(1, 0, 16, v22);
      v14 = sub_1001913F8(v13, (uint64_t)v6);

      if (v14)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v17 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v16 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v17 >= v16 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
        specialized Array._endMutation()(v11);
      }
    }
    result = swift_bridgeObjectRelease(a1);
    v18 = (_QWORD *)v21;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_10015B5E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v4)
      goto LABEL_3;
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *a2 = _swiftEmptyArrayStorage;
    return result;
  }
  if (a1 < 0)
    v12 = a1;
  else
    v12 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v4 = _CocoaArrayWrapper.endIndex.getter(v12);
  if (!v4)
    goto LABEL_16;
LABEL_3:
  result = type metadata accessor for LegacyChannelLockup(0);
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v7 = *(id *)(a1 + 8 * i + 32);
      v8 = sub_100322244(v7, 1);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v10 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v10 >= v9 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized Array._endMutation()(v11);
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_10015B7F0()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_10003F544((uint64_t *)&unk_100554078);
  FRPOutput.content.getter(&v2, v0);
  return RecommendationsMetadata.Categories.init(from:)(v2);
}

uint64_t sub_10015B838(uint64_t a1)
{
  return sub_10015B874(a1, (uint64_t (*)(void))sub_10034E700, (uint64_t (*)(void *))&RecommendationsMetadata.Channels.init(from:));
}

uint64_t sub_10015B84C(uint64_t a1)
{
  return sub_10015B874(a1, (uint64_t (*)(void))sub_10034E70C, (uint64_t (*)(void *))&RecommendationsMetadata.Episodes.init(from:));
}

uint64_t sub_10015B860(uint64_t a1)
{
  return sub_10015B874(a1, (uint64_t (*)(void))sub_10034E718, (uint64_t (*)(void *))&RecommendationsMetadata.Shows.init(from:));
}

uint64_t sub_10015B874(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void *))
{
  void *v3;

  v3 = (void *)a2();
  if (!v3)
    v3 = &_swiftEmptyArrayStorage;
  return a3(v3);
}

uint64_t sub_10015B8B8(uint64_t a1, char a2)
{
  unint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;

  if ((a2 & 1) != 0)
    return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10015B968
                                                              + 4 * asc_1003CA780[a1]))(0x6465776F6C6C6F66, 0xE800000000000000);
  v2 = sub_100030584();
  v3._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for UInt64, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x286C656E6E616863;
}

uint64_t sub_10015B968()
{
  return 0x776F6C6C6F666E75;
}

uint64_t sub_10015B984()
{
  return 7105633;
}

uint64_t sub_10015B994()
{
  return 0x64616F6C6E776F64;
}

unint64_t sub_10015B9EC()
{
  return 0xD000000000000012;
}

uint64_t sub_10015BA0C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  uint64_t result;
  uint64_t v12;

  v6 = type metadata accessor for ShowLockupStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LibraryShowLockup(0, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  result = sub_1001913F8(a1, (uint64_t)v9);
  *a3 = result;
  return result;
}

_QWORD *sub_10015BABC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v4 = type metadata accessor for Array(255, *(_QWORD *)(a2 + a1 - 8));
  v5 = type metadata accessor for FRPOutput(0, v4);
  result = FRPOutput.content.getter(&v7, v5);
  *a3 = v7;
  return result;
}

uint64_t sub_10015BB10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  objc_class *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for StationListOptions(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  v6 = (objc_class *)type metadata accessor for StationListObserver(0);
  v7 = objc_allocWithZone(v6);
  v8 = (void *)sub_100327798((uint64_t)v4);
  v13 = (uint64_t)v8;
  v9 = sub_100026844(&qword_100554070, type metadata accessor for StationListObserver, (uint64_t)&unk_1003D5E20);
  v10 = Observer.eraseToAnyObserver()(v6, v9);

  v13 = v10;
  Promise.resolve(_:)(&v13);
  return swift_release(v10);
}

void sub_10015BC04(void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  id v4;

  v2 = a1;
  if (a1)
  {
    type metadata accessor for ChannelDetail(0);
    v4 = v2;
    v2 = (void *)sub_10031B730(v4);

  }
  *a2 = v2;
}

uint64_t sub_10015BC58()
{
  objc_class *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = (objc_class *)type metadata accessor for ChannelListObserver();
  v1 = objc_msgSend(objc_allocWithZone(v0), "init");
  v2 = sub_100026844(&qword_100554068, (uint64_t (*)(uint64_t))type metadata accessor for ChannelListObserver, (uint64_t)&unk_1003CAF30);
  v3 = Observer.eraseToAnyObserver()(v0, v2);

  v5 = v3;
  Promise.resolve(_:)(&v5);
  return swift_release(v3);
}

id sub_10015BCF8@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(a1, "subscriptionActive");
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_10015BD24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 ^ *a2) & 1;
}

_BYTE *sub_10015BD38@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result & 1;
  return result;
}

uint64_t sub_10015BD48@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  type metadata accessor for LegacyChannelLockup(0);
  result = sub_100322244(a1, 256);
  *a2 = result;
  return result;
}

uint64_t sub_10015BD8C(uint64_t a1, char a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = a2 & 1;
  v4 = type metadata accessor for ShowCountObserver();
  swift_allocObject(v4, 48, 7);
  sub_100272110(a1, v3);
  v6 = v5;
  v7 = sub_100026844(&qword_100554060, (uint64_t (*)(uint64_t))type metadata accessor for ShowCountObserver, (uint64_t)&unk_1003D0FF4);
  v8 = Observer.eraseToAnyObserver()(v4, v7);
  swift_release(v6);
  v10 = v8;
  Promise.resolve(_:)(&v10);
  return swift_release(v8);
}

uint64_t sub_10015BE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for StationCountObserver();
  swift_allocObject(v0, 48, 7);
  sub_100270674();
  v2 = v1;
  v3 = sub_100026844(&qword_100554058, (uint64_t (*)(uint64_t))type metadata accessor for StationCountObserver, (uint64_t)&unk_1003D0EA8);
  v4 = Observer.eraseToAnyObserver()(v0, v3);
  swift_release(v2);
  v6 = v4;
  Promise.resolve(_:)(&v6);
  return swift_release(v4);
}

uint64_t sub_10015BF00()
{
  uint64_t v0;
  uint64_t v1;
  void *ObjCClassFromMetadata;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for DownloadCountObserver();
  v1 = sub_100005EC8(0, &qword_100553730, MTLegacyDownloadManagerProvider_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v1);
  v3 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
  v4 = objc_msgSend(v3, "downloadManager");

  swift_getObjectType(v4, v5);
  v6 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
  v7 = objc_msgSend(v6, "downloadsNotifier");

  v8 = sub_10031C7E8((uint64_t)v4, v7, 0, 0);
  v9 = sub_100026844(&qword_100554050, (uint64_t (*)(uint64_t))type metadata accessor for DownloadCountObserver, (uint64_t)&unk_1003D5608);
  v10 = Observer.eraseToAnyObserver()(v0, v9);

  v12 = v10;
  Promise.resolve(_:)(&v12);
  return swift_release(v10);
}

uint64_t sub_10015C050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *ObjCClassFromMetadata;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for DownloadCountObserver();
  v5 = sub_100005EC8(0, &qword_100553730, MTLegacyDownloadManagerProvider_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v5);
  v7 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
  v8 = objc_msgSend(v7, "downloadManager");

  swift_getObjectType(v8, v9);
  v10 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
  v11 = objc_msgSend(v10, "downloadsNotifier");

  swift_bridgeObjectRetain(a2);
  v12 = sub_10031C7E8((uint64_t)v8, v11, a1, a2);
  v13 = sub_100026844(&qword_100554050, (uint64_t (*)(uint64_t))type metadata accessor for DownloadCountObserver, (uint64_t)&unk_1003D5608);
  v14 = Observer.eraseToAnyObserver()(v4, v13);

  v16 = v14;
  Promise.resolve(_:)(&v16);
  return swift_release(v14);
}

uint64_t sub_10015C1B8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  id v12;
  _QWORD v14[5];
  _QWORD *v15;

  v3 = v2;
  sub_10003F544(&qword_100553888);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v6 = static OS_os_log.libraryLoadingSignpost.getter();
  v7 = Promise.init(signpost:log:metadata:logResult:)("fetchEpisodeCountObserver(for:importantKeys:)", 45, 2, v6, 0, 0, 0);
  v8 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v9 = (_QWORD *)swift_allocObject(&unk_1004B0260, 40, 7);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = v7;
  v14[4] = sub_10016DDF8;
  v15 = v9;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100027AF8;
  v14[3] = &unk_1004B0278;
  v10 = _Block_copy(v14);
  v11 = v15;
  v12 = a1;
  swift_bridgeObjectRetain(a2);
  swift_retain(v7);
  swift_release(v11);
  objc_msgSend(v8, "performBlock:", v10);
  _Block_release(v10);

  return v7;
}

uint64_t sub_10015C318(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for EpisodeCountObserver();
  swift_allocObject(v4, 48, 7);
  v5 = a1;
  swift_bridgeObjectRetain(a2);
  sub_100281B40(v5, a2);
  v7 = v6;
  v8 = sub_100026844(&qword_100554048, (uint64_t (*)(uint64_t))type metadata accessor for EpisodeCountObserver, (uint64_t)&unk_1003D19D8);
  v9 = Observer.eraseToAnyObserver()(v4, v8);
  swift_release(v7);
  v11 = v9;
  Promise.resolve(_:)(&v11);
  return swift_release(v9);
}

id sub_10015C3EC@<X0>(id result@<X0>, _QWORD *a2@<X8>)
{
  __n128 v3;
  void *v4;
  _OWORD v5[2];
  uint64_t v6;

  if (result)
  {
    result = objc_msgSend(result, "smartPlayEpisode");
    if (result)
    {
      v4 = result;
      type metadata accessor for Episode(0, v3);
      v6 = 0;
      memset(v5, 0, sizeof(v5));
      result = (id)Episode.init(from:clickAction:wantsListenNowReason:)(v4, (uint64_t)v5, 1);
    }
  }
  *a2 = result;
  return result;
}

uint64_t sub_10015C464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  __n128 v9;

  type metadata accessor for CoreDataFetcher(0);
  v8 = (_QWORD *)swift_allocObject(&unk_1004B0238, 48, 7);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  swift_retain(a2);
  v9 = swift_bridgeObjectRetain(a4);
  static CoreDataFetcher.fetchPodcast(with:completion:)(a3, a4, sub_10016DD74, v8, v9);
  return swift_release(v8);
}

uint64_t sub_10015C4F8(void *a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Entity;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *);
  id v34;
  id v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *);
  uint64_t v84;

  v71 = a4;
  v72 = a5;
  v82 = a3;
  v83 = a2;
  v6 = type metadata accessor for ShowEpisodeCountHeaderData(0);
  v80 = *(_QWORD *)(v6 - 8);
  v81 = v6;
  __chkstk_darwin(v6);
  v79 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v8);
  v76 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FlowDestinationPageHeader(0);
  v73 = *(_QWORD *)(v10 - 8);
  v74 = v10;
  __chkstk_darwin(v10);
  v78 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FlowPresentationContext(0);
  v69 = *(_QWORD *)(v12 - 8);
  v70 = v12;
  __chkstk_darwin(v12);
  v75 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for FlowDestination(0);
  v14 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v16 = (uint64_t *)((char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v17);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ArtworkModel(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v77 = (uint64_t)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v84 = (uint64_t)&v64 - v24;
  Entity = type metadata accessor for FetchEntityError.ErrorDomain(0);
  v26 = *(_QWORD *)(Entity - 8);
  __chkstk_darwin(Entity);
  v28 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10003F544((uint64_t *)&unk_100554030);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v64 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v67 = v30;
    v33 = v83;
    v34 = a1;
    v35 = objc_msgSend(v34, "title");
    if (v35)
    {
      v36 = v35;
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v38 = v37;

    }
    else
    {
      v65 = 0;
      v38 = 0xE000000000000000;
    }
    v66 = v34;
    MTPodcast.artworkModel.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    {
      static ArtworkModel.placeholder.getter();
      sub_100007A28((uint64_t)v19, &qword_10055D840);
    }
    else
    {
      sub_10013BE30((uint64_t)v19, v84, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    }
    v41 = v75;
    v42 = v72;
    v44 = v69;
    v43 = v70;
    v45 = v68;
    *v16 = v71;
    v16[1] = v42;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for FlowDestination.podcastUUID(_:), v45);
    (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v41, enum case for FlowPresentationContext.infer(_:), v43);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v38);
    v47 = static Link.Presentation.textFollowsTintColor.getter(v46);
    v48 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
    v49 = Link.Presentation.init(rawValue:)(0);
    v50 = Link.Presentation.init(rawValue:)(v49);
    if (Link.Presentation.init(rawValue:)(v50 & v47) != v47)
      v49 = Link.Presentation.init(rawValue:)(v49 | v47);
    v51 = Link.Presentation.init(rawValue:)(v49);
    if (Link.Presentation.init(rawValue:)(v51 & v48) != v48)
      v49 = Link.Presentation.init(rawValue:)(v49 | v48);
    v52 = v76;
    v53 = v78;
    v54 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v73 + 104))(v78, enum case for FlowDestinationPageHeader.standard(_:), v74);
    static ActionMetrics.notInstrumented.getter(v54);
    v55 = type metadata accessor for FlowAction(0);
    swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
    v56 = v65;
    v57 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v16, 0, 0, v65, v38, v41, 0, v49, v53, v52);
    v58 = v84;
    v59 = v77;
    sub_10014FDF8(v84, v77, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v60 = swift_retain(v57);
    v61 = v79;
    ShowEpisodeCountHeaderData.init(title:artwork:action:)(v56, v38, v59, v57, v60);
    v63 = v80;
    v62 = v81;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v32, v61, v81);
    swift_storeEnumTagMultiPayload(v32, v67, 0);
    v33(v32);
    swift_release(v57);

    sub_100007A28((uint64_t)v32, (uint64_t *)&unk_100554030);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v62);
    return sub_10003F970(v58, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  }
  else
  {
    v39 = v30;
    (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v28, enum case for FetchEntityError.ErrorDomain.fetchShowEpisodeCountHeaderData(_:), Entity);
    FetchEntityError.init(domain:)(v28);
    swift_storeEnumTagMultiPayload(v32, v39, 1);
    v83(v32);
    return sub_100007A28((uint64_t)v32, (uint64_t *)&unk_100554030);
  }
}

uint64_t sub_10015CA60@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  void *v3;

  if (result)
  {
    v3 = (void *)result;
    type metadata accessor for PodcastDetail(0);
    result = sub_1001D0F44(v3, 0, 0, 0, 1u);
  }
  *a2 = result;
  return result;
}

uint64_t sub_10015CAB8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  id v5;
  unint64_t v6;
  char v7;
  unsigned int v8;

  if ((objc_msgSend(a1, "hidden") & 1) != 0)
  {
    result = 0;
  }
  else
  {
    v5 = objc_msgSend(a1, "smartPlayEpisode");
    v6 = sub_1001D2860(v5);
    v8 = v7 & 1;
    type metadata accessor for PodcastDetail(0);
    result = sub_1001D0F44(a1, 0, v5, v6, v8);
  }
  *a2 = result;
  return result;
}

void sub_10015CB54(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1001631F8(a1, a2);
}

_QWORD *sub_10015CB68@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result > 0;
  return result;
}

void sub_10015CB7C(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (!a1)
    goto LABEL_6;
  v3 = a1;
  if (!objc_msgSend(v3, "isSerialShowTypeInFeed"))
  {

LABEL_6:
    v8 = _swiftEmptyArrayStorage;
    goto LABEL_9;
  }
  v4 = objc_msgSend(v3, "seasonNumbers");
  if (v4)
  {
    v5 = v4;
    v6 = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
    v7 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
  }
  v8 = sub_10015474C((uint64_t)v7);
  swift_bridgeObjectRelease(v7);

LABEL_9:
  *a2 = v8;
}

uint64_t sub_10015CC50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = static EpisodeUserFilter.allAvailableFilters(seasonNumbers:hasBookmarkedEpisodes:hasPlayedEpisodes:hasSubscriberEpisodes:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9), *(unsigned __int8 *)(a1 + 10));
  *a2 = result;
  return result;
}

uint64_t sub_10015CC88@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  id v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  _QWORD v25[9];

  v6 = sub_10003F544((uint64_t *)&unk_100553DE0);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Episode(0, v12);
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v13 = a1;
  v14 = EpisodeListSettings.listType.getter(v25, v13);
  LOBYTE(a1) = EpisodeListType.wantsListenNowReason.getter(v14);
  sub_10003F450((uint64_t)v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  result = Episode.init(from:clickAction:wantsListenNowReason:)(v13, (uint64_t)v23, a1 & 1);
  if (result)
  {
    v16 = result;
    v17 = type metadata accessor for EpisodeListSettings(0);
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v11, a2, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v11, 0, 1, v17);
    v19 = enum case for SectionContext.season(_:);
    v20 = type metadata accessor for SectionContext(0);
    v21 = *(_QWORD *)(v20 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v8, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v8, 0, 1, v20);
    v22 = dispatch thunk of Episode.defaultLockup(for:sectionContext:)(v11, v8);
    swift_release(v16);
    sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DE0);
    result = sub_100007A28((uint64_t)v11, &qword_10055B790);
  }
  else
  {
    v22 = 0;
  }
  *a3 = v22;
  return result;
}

uint64_t sub_10015CE6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t countAndFlagsBits;
  void *v33;
  Swift::String v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  void *object;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  void *v64;
  __n128 v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];
  void *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[5];
  _QWORD v100[9];
  _QWORD v101[9];
  uint64_t v102;
  unint64_t v103;
  char v104[8];
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  char v108;
  Swift::String v109;
  Swift::String v110;

  v98 = a1;
  v95 = a2;
  v2 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v2);
  v94 = (char *)&v85[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v4);
  v93 = (char *)&v85[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v6);
  v92 = (char *)&v85[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v8);
  v90 = (char *)&v85[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v10);
  v88 = (char *)&v85[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v12);
  v87 = (char *)&v85[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v14);
  v16 = (char *)&v85[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v96 = *(_QWORD *)(v17 - 8);
  v97 = v17;
  v18 = __chkstk_darwin(v17);
  v91 = (char *)&v85[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v89 = (char *)&v85[-1] - v21;
  EpisodeListSettings.listType.getter(v100, v20);
  sub_10016965C((uint64_t)v100, (uint64_t)v104);
  if (v108 == 7)
  {
    v22 = v106;
    v23 = v107;
    swift_bridgeObjectRelease(v105);
    if (!v23)
    {
      v102 = 0x6E6F73616553;
      v103 = 0xE600000000000000;
      v101[0] = v22;
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      object = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(object);
      countAndFlagsBits = 0;
      v86 = 0;
      goto LABEL_10;
    }
    sub_1001691E8(v22, v23);
  }
  else
  {
    sub_10003F450((uint64_t)v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  }
  sub_10003F544(&qword_100553ED0);
  FRPSectionInfo.section.getter(&v102);
  v24 = v102;
  v25 = v103;
  v26 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((v25 & 1) != 0 || !v24)
  {
    v36._countAndFlagsBits = 0xD000000000000017;
    v110._object = (void *)0xE000000000000000;
    v36._object = (void *)0x8000000100430310;
    v37._countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    v110._countAndFlagsBits = 0;
    v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, (NSBundle)v26, v37, v110);
    countAndFlagsBits = v38._countAndFlagsBits;
    v86 = v38._object;

    HIWORD(v85[1]) = -4864;
    strcpy((char *)v85, "UnknownSeason");
    goto LABEL_11;
  }
  v109._object = (void *)0xE000000000000000;
  v27._object = (void *)0x8000000100430330;
  v27._countAndFlagsBits = 0xD000000000000014;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v109._countAndFlagsBits = 0;
  v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v26, v28, v109);

  v30 = sub_10003F544(&qword_1005559A0);
  v31 = swift_allocObject(v30, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v31 + 56) = &type metadata for Int64;
  *(_QWORD *)(v31 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v31 + 32) = v24;
  countAndFlagsBits = static String.localizedStringWithFormat(_:_:)(v29._countAndFlagsBits, v29._object, v31);
  v86 = v33;
  swift_bridgeObjectRelease(v29._object);
  swift_bridgeObjectRelease(v31);
  v102 = 0x6E6F73616553;
  v103 = 0xE600000000000000;
  v101[0] = v24;
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v35 = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v35);
LABEL_10:
  v85[0] = v102;
  v85[1] = v103;
LABEL_11:
  v41 = ShelfIDBuilder.init(named:)(0x7365646F73697065, 0xE800000000000000);
  v42 = EpisodeListSettings.listType.getter(v101, v41);
  v43 = EpisodeListType.description.getter(v42);
  v45 = v44;
  v46 = ShelfIDBuilder.addingAttribute(_:named:)(v43);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v45);
  sub_10003F450((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v47 = sub_10003F544(&qword_100553ED0);
  FRPSectionInfo.section.getter(&v102);
  if ((v103 & 1) != 0)
  {
    v48 = 0xE700000000000000;
    v49 = 0x6E776F6E6B6E75;
  }
  else
  {
    v99[0] = v102;
    v50 = sub_10016D798();
    v49 = BinaryInteger.description.getter(&type metadata for Int64, v50);
    v48 = v51;
  }
  v52 = ShelfIDBuilder.addingAttribute(_:named:)(v49);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v46);
  v53 = ShelfIDBuilder.build()();
  v84 = v53._countAndFlagsBits;
  v54 = swift_bridgeObjectRelease(v52);
  v55 = EpisodeListSettings.listType.getter(&v102, v54);
  v56 = EpisodeListType.shelfItemKind.getter(v55);
  sub_10003F450((uint64_t)&v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  LOBYTE(v99[0]) = 1;
  v57 = v89;
  ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(v56, 0, 0x10000000000, 1);
  v58 = type metadata accessor for ActionMenu(0);
  v59 = v87;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v87, 1, 1, v58);
  v60 = type metadata accessor for Header.PrimaryAction(0);
  v61 = v88;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v88, 1, 1, v60);
  v62 = type metadata accessor for ArtworkModel(0);
  v63 = v90;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v90, 1, 1, v62);
  v64 = v86;
  v65 = swift_bridgeObjectRetain(v86);
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(countAndFlagsBits, v64, 0, 0, 0, 0, 0, 0, v65, v59, v61, _swiftEmptyArrayStorage, v63);
  v66 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  v67 = v91;
  v90 = v16;
  v66(v91, v57, v97);
  v68 = FRPSectionInfo.items.getter(v47);
  v98 = sub_1001788C8(v68);
  swift_bridgeObjectRelease(v68);
  v69 = type metadata accessor for URL(0);
  v70 = v92;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v92, 1, 1, v69);
  memset(v99, 0, sizeof(v99));
  v71 = swift_bridgeObjectRetain(v53._object);
  v72 = ModernShelf.ItemPresentation.itemKind.getter(v71);
  v73 = ModernShelf.ItemKind.targetType.getter(v72);
  v75 = v74;
  v83 = countAndFlagsBits;
  v76 = v93;
  v77 = v85[1];
  v78 = v84;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(v85[0], v85[1], 0, 0, v84, v53._object, v73, v74, v83, v64);
  swift_bridgeObjectRelease(v77);
  swift_bridgeObjectRelease(v53._object);
  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRelease(v64);
  v79 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v76, 0, 1, v79);
  v80 = type metadata accessor for MetricsShelfName(0);
  v81 = v94;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v94, 1, 1, v80);
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v78, v53._object, v90, v67, v98, v70, 1, 0, v99, v76, v81);
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v57, v97);
}

