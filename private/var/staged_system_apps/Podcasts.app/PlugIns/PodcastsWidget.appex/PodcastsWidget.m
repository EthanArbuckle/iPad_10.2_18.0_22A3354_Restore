NSString *__cdecl sub_100002F28(id a1, NSSortDescriptor *a2)
{
  return -[NSSortDescriptor key](a2, "key");
}

void sub_1000035D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000035EC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  uint64_t v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTRecencyUtil upNextForPodcastUuid:excludeExplicit:ctx:](MTRecencyUtil, "upNextForPodcastUuid:excludeExplicit:ctx:", v2, 0, *(_QWORD *)(a1 + 40)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "episodeUuid"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextEpisodeUuid"));
  v6 = _MTLogCategoryDefault();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "episodeUuid"));
    objc_msgSend(v3, "modifiedDate");
    v16 = 138543874;
    v17 = v8;
    v18 = 2114;
    v19 = v9;
    v20 = 2050;
    v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "UpNext result from update cursor position for podcast %{public}@: episodeUuid: %{public}@ at %{public}f", (uint8_t *)&v16, 0x20u);

  }
  v11 = _MTLogCategoryDefault();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "episodeUuid"));
    v16 = 138543618;
    v17 = v5;
    v18 = 2114;
    v19 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "UpNext result updating podcast nextEpisodeUuid from %{public}@ to %{public}@", (uint8_t *)&v16, 0x16u);

  }
  if (v5 != v4 && (objc_msgSend(v5, "isEqualToString:", v4) & 1) == 0)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeForUuid:", v4));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "episodeForUuid:", v5));
    if (objc_msgSend(v15, "listenNowEpisode"))
    {
      objc_msgSend(v15, "setListenNowEpisode:", 0);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
    if (v14 && (objc_msgSend(v14, "listenNowEpisode") & 1) == 0)
    {
      objc_msgSend(v14, "setListenNowEpisode:", 1);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      objc_msgSend(v3, "modifiedDate");
      objc_msgSend(*(id *)(a1 + 32), "setModifiedDate:");
    }

  }
  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 40), "saveInCurrentBlock");

}

void sub_10000399C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000039B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000039C4(uint64_t a1)
{

}

void sub_1000039CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "podcastForFeedUrl:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100003D94(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100003DAC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", kMTEpisodeEntityName));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodesWithSeasonNumbersOnPodcastUuid:](MTEpisode, "predicateForEpisodesWithSeasonNumbersOnPodcastUuid:", v3));
  objc_msgSend(v2, "setPredicate:", v4);

  objc_msgSend(v2, "setFetchLimit:", 1);
  v5 = *(void **)(a1 + 40);
  v8 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v2, &v8));
  v7 = v8;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v6, "count") != 0;

  objc_msgSend(v7, "logAndThrow:", 0);
}

void sub_100003FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100003FD4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_fetchRequestForDistinctSeasons"));
  v3 = *(void **)(a1 + 40);
  v9 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v2, &v9));
  v5 = v9;
  objc_msgSend(v5, "logAndThrow:", 0);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", kEpisodeSeasonNumber));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_10000419C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000041B4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predicateForPodcast:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForEpisodeType:](MTEpisode, "predicateForEpisodeType:", 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode predicateForSeasonNumberWithNoEpisodeNumber:](MTEpisode, "predicateForSeasonNumberWithNoEpisodeNumber:", *(_QWORD *)(a1 + 64)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "AND:", v2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "AND:", v3));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MTEpisode sortDescriptorsForPubDateAscending:](MTEpisode, "sortDescriptorsForPubDateAscending:", 0));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:limit:", kMTEpisodeEntityName, v5, v6, 0, 1));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void type metadata accessor for MTEpisodePlayState(uint64_t a1)
{
  sub_100004678(a1, &qword_100081018, (uint64_t)&unk_10007DE98);
}

__n128 initializeBufferWithCopyOfBuffer for TwoViewPercentageLayout(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10000461C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000463C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100004678(a1, &qword_100081020, (uint64_t)&unk_10007DF10);
}

void sub_100004678(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

_QWORD *sub_1000046BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id *v49;
  int v50;
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char v162;
  char *__dst;
  void *__dsta;
  _QWORD *v166;
  _QWORD *v167;
  unsigned int (*v169)(char *, uint64_t, uint64_t);
  int *v170;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v10 = a2[6];
    v9 = a2[7];
    a1[6] = v10;
    a1[7] = v9;
    v12 = a2[8];
    v11 = a2[9];
    a1[8] = v12;
    a1[9] = v11;
    v13 = a2[10];
    a1[10] = v13;
    v170 = (int *)type metadata accessor for UpNextEntry.Episode(0);
    v14 = v170[10];
    __dst = (char *)a1 + v14;
    v166 = a1;
    v167 = a2;
    v15 = (char *)a2 + v14;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_retain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v169 = v18;
    if (v18(v15, 1, v16))
    {
      v19 = sub_100005150(&qword_100081028);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v22 = v170[11];
    v21 = v166;
    v23 = (_QWORD *)((char *)v166 + v22);
    v24 = (_QWORD *)((char *)v167 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v170[12];
    v27 = (_QWORD *)((char *)v166 + v26);
    v28 = (_QWORD *)((char *)v167 + v26);
    v29 = (int *)type metadata accessor for ArtworkModel(0);
    v30 = *((_QWORD *)v29 - 1);
    v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
    swift_bridgeObjectRetain(v25);
    if (v31(v28, 1, v29))
    {
      v32 = sub_100005150(&qword_100081030);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      __dsta = (void *)v16;
      v33 = v28[1];
      *v27 = *v28;
      v27[1] = v33;
      v34 = *((unsigned __int8 *)v28 + 32);
      swift_bridgeObjectRetain(v33);
      if (v34 == 255)
      {
        *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
        *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
      }
      else
      {
        v35 = v28[2];
        v36 = v28[3];
        sub_100005190(v35, v36, v34);
        v27[2] = v35;
        v27[3] = v36;
        *((_BYTE *)v27 + 32) = v34;
      }
      *(_OWORD *)(v27 + 5) = *(_OWORD *)(v28 + 5);
      v37 = (id *)(v28 + 7);
      v38 = *((unsigned __int8 *)v28 + 64);
      if (v38 == 255)
      {
        v27[7] = *v37;
        *((_BYTE *)v27 + 64) = *((_BYTE *)v28 + 64);
      }
      else
      {
        v39 = *v37;
        sub_1000051A8(*v37, *((_BYTE *)v28 + 64));
        v27[7] = v39;
        *((_BYTE *)v27 + 64) = v38;
      }
      v40 = (id *)(v28 + 9);
      v41 = *((unsigned __int8 *)v28 + 80);
      if (v41 == 255)
      {
        v27[9] = *v40;
        *((_BYTE *)v27 + 80) = *((_BYTE *)v28 + 80);
      }
      else
      {
        v42 = *v40;
        sub_1000051A8(*v40, *((_BYTE *)v28 + 80));
        v27[9] = v42;
        *((_BYTE *)v27 + 80) = v41;
      }
      v43 = (id *)(v28 + 11);
      v44 = *((unsigned __int8 *)v28 + 96);
      if (v44 == 255)
      {
        v27[11] = *v43;
        *((_BYTE *)v27 + 96) = *((_BYTE *)v28 + 96);
      }
      else
      {
        v45 = *v43;
        sub_1000051A8(*v43, *((_BYTE *)v28 + 96));
        v27[11] = v45;
        *((_BYTE *)v27 + 96) = v44;
      }
      v46 = (id *)(v28 + 13);
      v47 = *((unsigned __int8 *)v28 + 112);
      if (v47 == 255)
      {
        v27[13] = *v46;
        *((_BYTE *)v27 + 112) = *((_BYTE *)v28 + 112);
      }
      else
      {
        v48 = *v46;
        sub_1000051A8(*v46, *((_BYTE *)v28 + 112));
        v27[13] = v48;
        *((_BYTE *)v27 + 112) = v47;
      }
      v49 = (id *)(v28 + 15);
      v50 = *((unsigned __int8 *)v28 + 128);
      if (v50 == 255)
      {
        v27[15] = *v49;
        *((_BYTE *)v27 + 128) = *((_BYTE *)v28 + 128);
      }
      else
      {
        v51 = *v49;
        sub_1000051A8(*v49, *((_BYTE *)v28 + 128));
        v27[15] = v51;
        *((_BYTE *)v27 + 128) = v50;
      }
      v16 = (uint64_t)__dsta;
      *((_BYTE *)v27 + 129) = *((_BYTE *)v28 + 129);
      v52 = v29[11];
      v53 = (char *)v27 + v52;
      v54 = (char *)v28 + v52;
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      v56 = v29[12];
      v57 = (_QWORD *)((char *)v27 + v56);
      v58 = (_QWORD *)((char *)v28 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
      *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
      *((_BYTE *)v27 + v29[15]) = *((_BYTE *)v28 + v29[15]);
      v60 = v29[16];
      v61 = (_QWORD *)((char *)v27 + v60);
      v62 = (_QWORD *)((char *)v28 + v60);
      v63 = v62[1];
      *v61 = *v62;
      v61[1] = v63;
      v64 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      v64(v27, 0, 1, v29);
    }
    v65 = v170[13];
    v66 = (_QWORD *)((char *)v166 + v65);
    v67 = (_QWORD *)((char *)v167 + v65);
    if (v31((_QWORD *)((char *)v167 + v65), 1, v29))
    {
      v68 = sub_100005150(&qword_100081030);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = v16;
      v70 = v67[1];
      *v66 = *v67;
      v66[1] = v70;
      v71 = *((unsigned __int8 *)v67 + 32);
      swift_bridgeObjectRetain(v70);
      if (v71 == 255)
      {
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        *((_BYTE *)v66 + 32) = *((_BYTE *)v67 + 32);
      }
      else
      {
        v72 = v67[2];
        v73 = v67[3];
        sub_100005190(v72, v73, v71);
        v66[2] = v72;
        v66[3] = v73;
        *((_BYTE *)v66 + 32) = v71;
      }
      *(_OWORD *)(v66 + 5) = *(_OWORD *)(v67 + 5);
      v74 = (id *)(v67 + 7);
      v75 = *((unsigned __int8 *)v67 + 64);
      if (v75 == 255)
      {
        v66[7] = *v74;
        *((_BYTE *)v66 + 64) = *((_BYTE *)v67 + 64);
      }
      else
      {
        v76 = *v74;
        sub_1000051A8(*v74, *((_BYTE *)v67 + 64));
        v66[7] = v76;
        *((_BYTE *)v66 + 64) = v75;
      }
      v77 = (id *)(v67 + 9);
      v78 = *((unsigned __int8 *)v67 + 80);
      if (v78 == 255)
      {
        v66[9] = *v77;
        *((_BYTE *)v66 + 80) = *((_BYTE *)v67 + 80);
      }
      else
      {
        v79 = *v77;
        sub_1000051A8(*v77, *((_BYTE *)v67 + 80));
        v66[9] = v79;
        *((_BYTE *)v66 + 80) = v78;
      }
      v80 = (id *)(v67 + 11);
      v81 = *((unsigned __int8 *)v67 + 96);
      if (v81 == 255)
      {
        v66[11] = *v80;
        *((_BYTE *)v66 + 96) = *((_BYTE *)v67 + 96);
      }
      else
      {
        v82 = *v80;
        sub_1000051A8(*v80, *((_BYTE *)v67 + 96));
        v66[11] = v82;
        *((_BYTE *)v66 + 96) = v81;
      }
      v83 = (id *)(v67 + 13);
      v84 = *((unsigned __int8 *)v67 + 112);
      if (v84 == 255)
      {
        v66[13] = *v83;
        *((_BYTE *)v66 + 112) = *((_BYTE *)v67 + 112);
      }
      else
      {
        v85 = *v83;
        sub_1000051A8(*v83, *((_BYTE *)v67 + 112));
        v66[13] = v85;
        *((_BYTE *)v66 + 112) = v84;
      }
      v86 = (id *)(v67 + 15);
      v87 = *((unsigned __int8 *)v67 + 128);
      if (v87 == 255)
      {
        v66[15] = *v86;
        *((_BYTE *)v66 + 128) = *((_BYTE *)v67 + 128);
      }
      else
      {
        v88 = *v86;
        sub_1000051A8(*v86, *((_BYTE *)v67 + 128));
        v66[15] = v88;
        *((_BYTE *)v66 + 128) = v87;
      }
      v16 = v69;
      *((_BYTE *)v66 + 129) = *((_BYTE *)v67 + 129);
      v89 = v29[11];
      v90 = (char *)v66 + v89;
      v91 = (char *)v67 + v89;
      v92 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = v29[12];
      v94 = (_QWORD *)((char *)v66 + v93);
      v95 = (_QWORD *)((char *)v67 + v93);
      v96 = v95[1];
      *v94 = *v95;
      v94[1] = v96;
      *((_BYTE *)v66 + v29[13]) = *((_BYTE *)v67 + v29[13]);
      *((_BYTE *)v66 + v29[14]) = *((_BYTE *)v67 + v29[14]);
      *((_BYTE *)v66 + v29[15]) = *((_BYTE *)v67 + v29[15]);
      v97 = v29[16];
      v98 = (_QWORD *)((char *)v66 + v97);
      v99 = (_QWORD *)((char *)v67 + v97);
      v100 = v99[1];
      *v98 = *v99;
      v98[1] = v100;
      v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v100);
      v101(v66, 0, 1, v29);
    }
    v102 = v170[14];
    v103 = *(void **)((char *)v167 + v102);
    *(_QWORD *)((char *)v166 + v102) = v103;
    v104 = v170[15];
    v105 = (char *)v166 + v104;
    v106 = (char *)v167 + v104;
    v107 = type metadata accessor for URL(0);
    v108 = *(_QWORD *)(v107 - 8);
    v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
    v110 = v103;
    if (v109(v106, 1, v107))
    {
      v111 = sub_100005150(&qword_100081038);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    *((_BYTE *)v166 + v170[16]) = *((_BYTE *)v167 + v170[16]);
    v112 = v170[17];
    v113 = (char *)v166 + v112;
    v114 = (char *)v167 + v112;
    *(_QWORD *)v113 = *(_QWORD *)v114;
    v113[8] = v114[8];
    v115 = v170[18];
    v116 = (char *)v166 + v115;
    v117 = (char *)v167 + v115;
    *(_QWORD *)v116 = *(_QWORD *)v117;
    v116[8] = v117[8];
    v118 = v170[19];
    v119 = (char *)v166 + v118;
    v120 = (char *)v167 + v118;
    if (v169((char *)v167 + v118, 1, v16))
    {
      v121 = sub_100005150(&qword_100081028);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v119, v120, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v119, 0, 1, v16);
    }
    v122 = v170[20];
    v123 = (char *)v166 + v122;
    v124 = (char *)v167 + v122;
    if (v169((char *)v167 + v122, 1, v16))
    {
      v125 = sub_100005150(&qword_100081028);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v123, v124, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v123, 0, 1, v16);
    }
    v126 = v170[21];
    v127 = (_QWORD *)((char *)v166 + v126);
    v128 = (_QWORD *)((char *)v167 + v126);
    v129 = *v128;
    if (*v128)
    {
      v130 = v128[1];
      v131 = v128[2];
      *v127 = v129;
      v127[1] = v130;
      v127[2] = v131;
      swift_retain(v129);
      swift_retain(v130);
      swift_retain(v131);
    }
    else
    {
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v127[2] = v128[2];
    }
    v132 = v170[22];
    v133 = (char *)v166 + v132;
    v134 = (char *)v167 + v132;
    v135 = sub_100005150(&qword_100081040);
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_100005150(&qword_100081048);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v138(v133, v134, v16);
      v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    v140 = v139[5];
    v141 = &v133[v140];
    v142 = &v134[v140];
    v143 = type metadata accessor for PlaybackButton.State(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
    v144 = v139[6];
    v145 = &v133[v144];
    v146 = &v134[v144];
    v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
    {
      v149 = sub_100005150(&qword_100081050);
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
    }
    v150 = v139[7];
    v151 = &v133[v150];
    v152 = &v134[v150];
    v153 = *((_QWORD *)v152 + 1);
    *(_QWORD *)v151 = *(_QWORD *)v152;
    *((_QWORD *)v151 + 1) = v153;
    v154 = v139[8];
    v155 = &v133[v154];
    v156 = &v134[v154];
    v157 = *((_QWORD *)v156 + 1);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v157;
    v158 = *(int *)(a3 + 20);
    v159 = (char *)v166 + v158;
    v160 = (char *)v167 + v158;
    v161 = *(_QWORD *)v160;
    v162 = v160[8];
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v157);
    sub_1000051BC(v161, v162);
    *(_QWORD *)v159 = v161;
    v159[8] = v162;
  }
  return v21;
}

uint64_t sub_100005150(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100005190(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

id sub_1000051A8(id result, char a2)
{
  if (a2 == 1)
    return result;
  return result;
}

uint64_t sub_1000051BC(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t sub_1000051C8(_QWORD *a1, uint64_t a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  char *v9;
  int *v10;
  unsigned int (*v11)(char *, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  int *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_release(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  v4 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v5 = (char *)a1 + v4[10];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[11] + 8));
  v9 = (char *)a1 + v4[12];
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
    v12 = v9[32];
    if (v12 != 255)
      sub_100005624(*((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), v12);
    v13 = v9[64];
    if (v13 != 255)
      sub_10000563C(*((id *)v9 + 7), v13);
    v14 = v9[80];
    if (v14 != 255)
      sub_10000563C(*((id *)v9 + 9), v14);
    v15 = v9[96];
    if (v15 != 255)
      sub_10000563C(*((id *)v9 + 11), v15);
    v16 = v9[112];
    if (v16 != 255)
      sub_10000563C(*((id *)v9 + 13), v16);
    v17 = v9[128];
    if (v17 != 255)
      sub_10000563C(*((id *)v9 + 15), v17);
    v18 = &v9[v10[11]];
    v19 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[16] + 8]);
  }
  v20 = (char *)a1 + v4[13];
  if (!v11(v20, 1, v10))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v20 + 1));
    v21 = v20[32];
    if (v21 != 255)
      sub_100005624(*((_QWORD *)v20 + 2), *((_QWORD *)v20 + 3), v21);
    v22 = v20[64];
    if (v22 != 255)
      sub_10000563C(*((id *)v20 + 7), v22);
    v23 = v20[80];
    if (v23 != 255)
      sub_10000563C(*((id *)v20 + 9), v23);
    v24 = v20[96];
    if (v24 != 255)
      sub_10000563C(*((id *)v20 + 11), v24);
    v25 = v20[112];
    if (v25 != 255)
      sub_10000563C(*((id *)v20 + 13), v25);
    v26 = v20[128];
    if (v26 != 255)
      sub_10000563C(*((id *)v20 + 15), v26);
    v27 = &v20[v10[11]];
    v28 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
    swift_bridgeObjectRelease(*(_QWORD *)&v20[v10[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v20[v10[16] + 8]);
  }

  v29 = (char *)a1 + v4[15];
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
  v32 = (char *)a1 + v4[19];
  if (!v8(v32, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v32, v6);
  v33 = (char *)a1 + v4[20];
  if (!v8(v33, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v33, v6);
  v34 = (_QWORD *)((char *)a1 + v4[21]);
  if (*v34)
  {
    swift_release(*v34);
    swift_release(v34[1]);
    swift_release(v34[2]);
  }
  v35 = (char *)a1 + v4[22];
  v36 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
  {
    v37 = *(void (**)(char *, uint64_t))(v7 + 8);
    v37(v35, v6);
    v37(&v35[*(int *)(v36 + 36)], v6);
  }
  v38 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v39 = &v35[v38[5]];
  v40 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = &v35[v38[6]];
  v42 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v43 = *(_QWORD *)(v42 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
  swift_bridgeObjectRelease(*(_QWORD *)&v35[v38[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v35[v38[8] + 8]);
  return sub_100005650(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)), *((_BYTE *)a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100005624(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

void sub_10000563C(id a1, char a2)
{
  if (a2 == 1)

}

uint64_t sub_100005650(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_release();
  return result;
}

_QWORD *sub_10000565C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int *v27;
  uint64_t v28;
  unsigned int (*v29)(_QWORD *, uint64_t, int *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  int v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  id *v42;
  int v43;
  id v44;
  id *v45;
  int v46;
  id v47;
  id *v48;
  int v49;
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  void (*v63)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  char *__dst;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v168;
  int *v169;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v9 = a2[6];
  v8 = a2[7];
  a1[6] = v9;
  a1[7] = v8;
  v11 = a2[8];
  v10 = a2[9];
  a1[8] = v11;
  a1[9] = v10;
  v12 = a2[10];
  a1[10] = v12;
  v169 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v13 = v169[10];
  __dst = (char *)a1 + v13;
  v165 = a1;
  v168 = a2;
  v14 = (char *)a2 + v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v166 = v16;
  if (v17(v14, 1, v15))
  {
    v18 = sub_100005150(&qword_100081028);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = v169[11];
  v20 = (_QWORD *)((char *)v165 + v19);
  v21 = v168;
  v22 = (_QWORD *)((char *)v168 + v19);
  v23 = v22[1];
  *v20 = *v22;
  v20[1] = v23;
  v24 = v169[12];
  v25 = (_QWORD *)((char *)v165 + v24);
  v26 = (_QWORD *)((char *)v168 + v24);
  v27 = (int *)type metadata accessor for ArtworkModel(0);
  v28 = *((_QWORD *)v27 - 1);
  v29 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v28 + 48);
  swift_bridgeObjectRetain(v23);
  if (v29(v26, 1, v27))
  {
    v30 = sub_100005150(&qword_100081030);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v31 = v15;
    v32 = v26[1];
    *v25 = *v26;
    v25[1] = v32;
    v33 = *((unsigned __int8 *)v26 + 32);
    swift_bridgeObjectRetain(v32);
    if (v33 == 255)
    {
      *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
      *((_BYTE *)v25 + 32) = *((_BYTE *)v26 + 32);
    }
    else
    {
      v34 = v26[2];
      v35 = v26[3];
      sub_100005190(v34, v35, v33);
      v25[2] = v34;
      v25[3] = v35;
      *((_BYTE *)v25 + 32) = v33;
    }
    *(_OWORD *)(v25 + 5) = *(_OWORD *)(v26 + 5);
    v36 = (id *)(v26 + 7);
    v37 = *((unsigned __int8 *)v26 + 64);
    if (v37 == 255)
    {
      v25[7] = *v36;
      *((_BYTE *)v25 + 64) = *((_BYTE *)v26 + 64);
    }
    else
    {
      v38 = *v36;
      sub_1000051A8(*v36, *((_BYTE *)v26 + 64));
      v25[7] = v38;
      *((_BYTE *)v25 + 64) = v37;
    }
    v39 = (id *)(v26 + 9);
    v40 = *((unsigned __int8 *)v26 + 80);
    if (v40 == 255)
    {
      v25[9] = *v39;
      *((_BYTE *)v25 + 80) = *((_BYTE *)v26 + 80);
    }
    else
    {
      v41 = *v39;
      sub_1000051A8(*v39, *((_BYTE *)v26 + 80));
      v25[9] = v41;
      *((_BYTE *)v25 + 80) = v40;
    }
    v42 = (id *)(v26 + 11);
    v43 = *((unsigned __int8 *)v26 + 96);
    if (v43 == 255)
    {
      v25[11] = *v42;
      *((_BYTE *)v25 + 96) = *((_BYTE *)v26 + 96);
    }
    else
    {
      v44 = *v42;
      sub_1000051A8(*v42, *((_BYTE *)v26 + 96));
      v25[11] = v44;
      *((_BYTE *)v25 + 96) = v43;
    }
    v45 = (id *)(v26 + 13);
    v46 = *((unsigned __int8 *)v26 + 112);
    if (v46 == 255)
    {
      v25[13] = *v45;
      *((_BYTE *)v25 + 112) = *((_BYTE *)v26 + 112);
    }
    else
    {
      v47 = *v45;
      sub_1000051A8(*v45, *((_BYTE *)v26 + 112));
      v25[13] = v47;
      *((_BYTE *)v25 + 112) = v46;
    }
    v48 = (id *)(v26 + 15);
    v49 = *((unsigned __int8 *)v26 + 128);
    if (v49 == 255)
    {
      v25[15] = *v48;
      *((_BYTE *)v25 + 128) = *((_BYTE *)v26 + 128);
    }
    else
    {
      v50 = *v48;
      sub_1000051A8(*v48, *((_BYTE *)v26 + 128));
      v25[15] = v50;
      *((_BYTE *)v25 + 128) = v49;
    }
    v15 = v31;
    *((_BYTE *)v25 + 129) = *((_BYTE *)v26 + 129);
    v51 = v27[11];
    v52 = (char *)v25 + v51;
    v53 = (char *)v26 + v51;
    v54 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
    v55 = v27[12];
    v56 = (_QWORD *)((char *)v25 + v55);
    v57 = (_QWORD *)((char *)v26 + v55);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    *((_BYTE *)v25 + v27[13]) = *((_BYTE *)v26 + v27[13]);
    *((_BYTE *)v25 + v27[14]) = *((_BYTE *)v26 + v27[14]);
    *((_BYTE *)v25 + v27[15]) = *((_BYTE *)v26 + v27[15]);
    v59 = v27[16];
    v60 = (_QWORD *)((char *)v25 + v59);
    v61 = (_QWORD *)((char *)v26 + v59);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v28 + 56);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v62);
    v63(v25, 0, 1, v27);
    v21 = v168;
  }
  v64 = v169[13];
  v65 = (_QWORD *)((char *)v165 + v64);
  v66 = (_QWORD *)((char *)v21 + v64);
  if (v29((_QWORD *)((char *)v21 + v64), 1, v27))
  {
    v67 = sub_100005150(&qword_100081030);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    v68 = v169;
  }
  else
  {
    v69 = v15;
    v70 = v66[1];
    *v65 = *v66;
    v65[1] = v70;
    v71 = *((unsigned __int8 *)v66 + 32);
    swift_bridgeObjectRetain(v70);
    if (v71 == 255)
    {
      *((_OWORD *)v65 + 1) = *((_OWORD *)v66 + 1);
      *((_BYTE *)v65 + 32) = *((_BYTE *)v66 + 32);
    }
    else
    {
      v72 = v66[2];
      v73 = v66[3];
      sub_100005190(v72, v73, v71);
      v65[2] = v72;
      v65[3] = v73;
      *((_BYTE *)v65 + 32) = v71;
    }
    v68 = v169;
    *(_OWORD *)(v65 + 5) = *(_OWORD *)(v66 + 5);
    v74 = (id *)(v66 + 7);
    v75 = *((unsigned __int8 *)v66 + 64);
    if (v75 == 255)
    {
      v65[7] = *v74;
      *((_BYTE *)v65 + 64) = *((_BYTE *)v66 + 64);
    }
    else
    {
      v76 = *v74;
      sub_1000051A8(*v74, *((_BYTE *)v66 + 64));
      v65[7] = v76;
      *((_BYTE *)v65 + 64) = v75;
    }
    v77 = (id *)(v66 + 9);
    v78 = *((unsigned __int8 *)v66 + 80);
    if (v78 == 255)
    {
      v65[9] = *v77;
      *((_BYTE *)v65 + 80) = *((_BYTE *)v66 + 80);
    }
    else
    {
      v79 = *v77;
      sub_1000051A8(*v77, *((_BYTE *)v66 + 80));
      v65[9] = v79;
      *((_BYTE *)v65 + 80) = v78;
    }
    v80 = (id *)(v66 + 11);
    v81 = *((unsigned __int8 *)v66 + 96);
    if (v81 == 255)
    {
      v65[11] = *v80;
      *((_BYTE *)v65 + 96) = *((_BYTE *)v66 + 96);
    }
    else
    {
      v82 = *v80;
      sub_1000051A8(*v80, *((_BYTE *)v66 + 96));
      v65[11] = v82;
      *((_BYTE *)v65 + 96) = v81;
    }
    v83 = (id *)(v66 + 13);
    v84 = *((unsigned __int8 *)v66 + 112);
    if (v84 == 255)
    {
      v65[13] = *v83;
      *((_BYTE *)v65 + 112) = *((_BYTE *)v66 + 112);
    }
    else
    {
      v85 = *v83;
      sub_1000051A8(*v83, *((_BYTE *)v66 + 112));
      v65[13] = v85;
      *((_BYTE *)v65 + 112) = v84;
    }
    v86 = (id *)(v66 + 15);
    v87 = *((unsigned __int8 *)v66 + 128);
    if (v87 == 255)
    {
      v65[15] = *v86;
      *((_BYTE *)v65 + 128) = *((_BYTE *)v66 + 128);
    }
    else
    {
      v88 = *v86;
      sub_1000051A8(*v86, *((_BYTE *)v66 + 128));
      v65[15] = v88;
      *((_BYTE *)v65 + 128) = v87;
    }
    v15 = v69;
    *((_BYTE *)v65 + 129) = *((_BYTE *)v66 + 129);
    v89 = v27[11];
    v90 = (char *)v65 + v89;
    v91 = (char *)v66 + v89;
    v92 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
    v93 = v27[12];
    v94 = (_QWORD *)((char *)v65 + v93);
    v95 = (_QWORD *)((char *)v66 + v93);
    v96 = v95[1];
    *v94 = *v95;
    v94[1] = v96;
    *((_BYTE *)v65 + v27[13]) = *((_BYTE *)v66 + v27[13]);
    *((_BYTE *)v65 + v27[14]) = *((_BYTE *)v66 + v27[14]);
    *((_BYTE *)v65 + v27[15]) = *((_BYTE *)v66 + v27[15]);
    v97 = v27[16];
    v98 = (_QWORD *)((char *)v65 + v97);
    v99 = (_QWORD *)((char *)v66 + v97);
    v100 = v99[1];
    *v98 = *v99;
    v98[1] = v100;
    v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v28 + 56);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v100);
    v101(v65, 0, 1, v27);
    v21 = v168;
  }
  v102 = v68[14];
  v103 = *(void **)((char *)v21 + v102);
  *(_QWORD *)((char *)v165 + v102) = v103;
  v104 = v68[15];
  v105 = (char *)v165 + v104;
  v106 = (char *)v21 + v104;
  v107 = type metadata accessor for URL(0);
  v108 = *(_QWORD *)(v107 - 8);
  v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
  v110 = v103;
  if (v109(v106, 1, v107))
  {
    v111 = sub_100005150(&qword_100081038);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
  }
  *((_BYTE *)v165 + v68[16]) = *((_BYTE *)v21 + v68[16]);
  v112 = v68[17];
  v113 = (char *)v165 + v112;
  v114 = (uint64_t)v21 + v112;
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v113[8] = *(_BYTE *)(v114 + 8);
  v115 = v68[18];
  v116 = (char *)v165 + v115;
  v117 = (uint64_t)v21 + v115;
  *(_QWORD *)v116 = *(_QWORD *)v117;
  v116[8] = *(_BYTE *)(v117 + 8);
  v118 = v68[19];
  v119 = (char *)v165 + v118;
  v120 = (char *)v21 + v118;
  if (v17((char *)v21 + v118, 1, v15))
  {
    v121 = sub_100005150(&qword_100081028);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v119, v120, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v119, 0, 1, v15);
  }
  v122 = v68[20];
  v123 = (char *)v165 + v122;
  v124 = (char *)v21 + v122;
  if (v17((char *)v21 + v122, 1, v15))
  {
    v125 = sub_100005150(&qword_100081028);
    memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v123, v124, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v123, 0, 1, v15);
  }
  v126 = v68[21];
  v127 = (_QWORD *)((char *)v165 + v126);
  v128 = (_QWORD *)((char *)v21 + v126);
  v129 = *v128;
  if (*v128)
  {
    v130 = v128[1];
    v131 = v128[2];
    *v127 = v129;
    v127[1] = v130;
    v127[2] = v131;
    swift_retain(v129);
    swift_retain(v130);
    swift_retain(v131);
  }
  else
  {
    *(_OWORD *)v127 = *(_OWORD *)v128;
    v127[2] = v128[2];
  }
  v132 = v68[22];
  v133 = (char *)v165 + v132;
  v134 = (char *)v21 + v132;
  v135 = sub_100005150(&qword_100081040);
  v136 = *(_QWORD *)(v135 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
  {
    v137 = sub_100005150(&qword_100081048);
    memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
  }
  else
  {
    v138 = *(void (**)(char *, char *, uint64_t))(v166 + 16);
    v138(v133, v134, v15);
    v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
  }
  v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v140 = v139[5];
  v141 = &v133[v140];
  v142 = &v134[v140];
  v143 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
  v144 = v139[6];
  v145 = &v133[v144];
  v146 = &v134[v144];
  v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v148 = *(_QWORD *)(v147 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
  {
    v149 = sub_100005150(&qword_100081050);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
  }
  v150 = v139[7];
  v151 = &v133[v150];
  v152 = &v134[v150];
  v153 = *((_QWORD *)v152 + 1);
  *(_QWORD *)v151 = *(_QWORD *)v152;
  *((_QWORD *)v151 + 1) = v153;
  v154 = v139[8];
  v155 = &v133[v154];
  v156 = &v134[v154];
  v157 = *((_QWORD *)v156 + 1);
  *(_QWORD *)v155 = *(_QWORD *)v156;
  *((_QWORD *)v155 + 1) = v157;
  v158 = *(int *)(a3 + 20);
  v159 = (char *)v165 + v158;
  v160 = (uint64_t)v21 + v158;
  v161 = *(_QWORD *)v160;
  v162 = *(_BYTE *)(v160 + 8);
  swift_bridgeObjectRetain(v153);
  swift_bridgeObjectRetain(v157);
  sub_1000051BC(v161, v162);
  *(_QWORD *)v159 = v161;
  v159[8] = v162;
  return v165;
}

_QWORD *sub_1000060D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  __int128 v55;
  id *v56;
  int v57;
  id v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id v67;
  id *v68;
  int v69;
  id v70;
  id v71;
  id *v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  void **v93;
  void **v94;
  int v95;
  void *v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  void **v102;
  void **v103;
  int v104;
  void *v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  void **v111;
  void **v112;
  int v113;
  void *v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  void *v119;
  void **v120;
  void **v121;
  int v122;
  void *v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  void **v129;
  void **v130;
  int v131;
  void *v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  __int128 *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  __int128 v174;
  id *v175;
  int v176;
  id v177;
  id v178;
  id *v179;
  int v180;
  id v181;
  id v182;
  id *v183;
  int v184;
  id v185;
  id v186;
  id *v187;
  int v188;
  id v189;
  id v190;
  id *v191;
  int v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v208;
  uint64_t v209;
  char v210;
  __int128 v211;
  void **v212;
  void **v213;
  int v214;
  void *v215;
  void *v216;
  char v217;
  void *v218;
  char v219;
  void *v220;
  void **v221;
  void **v222;
  int v223;
  void *v224;
  void *v225;
  char v226;
  void *v227;
  char v228;
  void *v229;
  void **v230;
  void **v231;
  int v232;
  void *v233;
  void *v234;
  char v235;
  void *v236;
  char v237;
  void *v238;
  void **v239;
  void **v240;
  int v241;
  void *v242;
  void *v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  void **v248;
  void **v249;
  int v250;
  void *v251;
  void *v252;
  char v253;
  void *v254;
  char v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  id v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (*v280)(char *, uint64_t, uint64_t);
  int v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (*v321)(char *, uint64_t, uint64_t);
  int v322;
  int v323;
  void (*v324)(char *, char *, uint64_t);
  uint64_t v325;
  int *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t (*v336)(char *, uint64_t, uint64_t);
  int v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  char v354;
  void (*v356)(char *, char *, uint64_t);
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t (*v360)(char *, uint64_t, uint64_t);
  uint64_t v361;
  uint64_t v362;
  _QWORD *v363;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[9] = a2[9];
  v16 = a2[10];
  v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v19 = v18[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v360 = v24;
  v26 = v24(v21, 1, v22);
  v361 = v23;
  v362 = a3;
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100005150(&qword_100081028);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v28 = v18[11];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v18[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v359 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v359 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      v357 = v22;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v40 = *((_QWORD *)v35 + 1);
      *(_QWORD *)(v34 + 8) = v40;
      v41 = v35[32];
      swift_bridgeObjectRetain(v40);
      if (v41 == 255)
      {
        v55 = *((_OWORD *)v35 + 1);
        *(_BYTE *)(v34 + 32) = v35[32];
        *(_OWORD *)(v34 + 16) = v55;
      }
      else
      {
        v42 = *((_QWORD *)v35 + 2);
        v43 = *((_QWORD *)v35 + 3);
        sub_100005190(v42, v43, v41);
        *(_QWORD *)(v34 + 16) = v42;
        *(_QWORD *)(v34 + 24) = v43;
        *(_BYTE *)(v34 + 32) = v41;
      }
      *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
      *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
      v56 = (id *)(v35 + 56);
      v57 = v35[64];
      if (v57 == 255)
      {
        v59 = *v56;
        *(_BYTE *)(v34 + 64) = v35[64];
        *(_QWORD *)(v34 + 56) = v59;
      }
      else
      {
        v58 = *v56;
        sub_1000051A8(*v56, v35[64]);
        *(_QWORD *)(v34 + 56) = v58;
        *(_BYTE *)(v34 + 64) = v57;
      }
      v22 = v357;
      v60 = (id *)(v35 + 72);
      v61 = v35[80];
      if (v61 == 255)
      {
        v63 = *v60;
        *(_BYTE *)(v34 + 80) = v35[80];
        *(_QWORD *)(v34 + 72) = v63;
      }
      else
      {
        v62 = *v60;
        sub_1000051A8(*v60, v35[80]);
        *(_QWORD *)(v34 + 72) = v62;
        *(_BYTE *)(v34 + 80) = v61;
      }
      v64 = (id *)(v35 + 88);
      v65 = v35[96];
      if (v65 == 255)
      {
        v67 = *v64;
        *(_BYTE *)(v34 + 96) = v35[96];
        *(_QWORD *)(v34 + 88) = v67;
      }
      else
      {
        v66 = *v64;
        sub_1000051A8(*v64, v35[96]);
        *(_QWORD *)(v34 + 88) = v66;
        *(_BYTE *)(v34 + 96) = v65;
      }
      v68 = (id *)(v35 + 104);
      v69 = v35[112];
      if (v69 == 255)
      {
        v71 = *v68;
        *(_BYTE *)(v34 + 112) = v35[112];
        *(_QWORD *)(v34 + 104) = v71;
      }
      else
      {
        v70 = *v68;
        sub_1000051A8(*v68, v35[112]);
        *(_QWORD *)(v34 + 104) = v70;
        *(_BYTE *)(v34 + 112) = v69;
      }
      v72 = (id *)(v35 + 120);
      v73 = v35[128];
      if (v73 == 255)
      {
        v75 = *v72;
        *(_BYTE *)(v34 + 128) = v35[128];
        *(_QWORD *)(v34 + 120) = v75;
      }
      else
      {
        v74 = *v72;
        sub_1000051A8(*v72, v35[128]);
        *(_QWORD *)(v34 + 120) = v74;
        *(_BYTE *)(v34 + 128) = v73;
      }
      *(_BYTE *)(v34 + 129) = v35[129];
      v76 = v36[11];
      v77 = v34 + v76;
      v78 = &v35[v76];
      v79 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v80 = v36[12];
      v81 = (_QWORD *)(v34 + v80);
      v82 = &v35[v80];
      *v81 = *(_QWORD *)v82;
      v83 = *((_QWORD *)v82 + 1);
      v81[1] = v83;
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      v84 = v36[16];
      v85 = (_QWORD *)(v34 + v84);
      v86 = &v35[v84];
      *v85 = *(_QWORD *)v86;
      v87 = *((_QWORD *)v86 + 1);
      v85[1] = v87;
      v88 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v359 + 56);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v88(v34, 0, 1, v36);
      goto LABEL_75;
    }
LABEL_13:
    v44 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_75;
  }
  if (v39)
  {
    sub_1000077D8(v34);
    goto LABEL_13;
  }
  v358 = v22;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v45 = *((_QWORD *)v35 + 1);
  v46 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = (__int128 *)(v34 + 16);
  v48 = (__int128 *)(v35 + 16);
  v49 = v35[32];
  if (*(unsigned __int8 *)(v34 + 32) == 255)
  {
    if (v49 == 255)
    {
      v92 = *v48;
      *(_BYTE *)(v34 + 32) = v35[32];
      *v47 = v92;
    }
    else
    {
      v89 = *((_QWORD *)v35 + 2);
      v90 = *((_QWORD *)v35 + 3);
      sub_100005190(v89, v90, v35[32]);
      *(_QWORD *)(v34 + 16) = v89;
      *(_QWORD *)(v34 + 24) = v90;
      *(_BYTE *)(v34 + 32) = v49;
    }
  }
  else if (v49 == 255)
  {
    sub_100007770(v34 + 16);
    v91 = v35[32];
    *v47 = *v48;
    *(_BYTE *)(v34 + 32) = v91;
  }
  else
  {
    v51 = *((_QWORD *)v35 + 2);
    v50 = *((_QWORD *)v35 + 3);
    sub_100005190(v51, v50, v35[32]);
    v52 = *(_QWORD *)(v34 + 16);
    v53 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 16) = v51;
    *(_QWORD *)(v34 + 24) = v50;
    v54 = *(_BYTE *)(v34 + 32);
    *(_BYTE *)(v34 + 32) = v49;
    sub_100005624(v52, v53, v54);
  }
  *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
  *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
  v93 = (void **)(v34 + 56);
  v94 = (void **)(v35 + 56);
  v95 = v35[64];
  if (*(unsigned __int8 *)(v34 + 64) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(v34 + 64) = v35[64];
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_1000051A8(v99, v35[64]);
      *(_QWORD *)(v34 + 56) = v99;
      *(_BYTE *)(v34 + 64) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_1000077A4(v34 + 56);
    v100 = v35[64];
    *v93 = *v94;
    *(_BYTE *)(v34 + 64) = v100;
  }
  else
  {
    v96 = *v94;
    sub_1000051A8(v96, v35[64]);
    v97 = *(void **)(v34 + 56);
    *(_QWORD *)(v34 + 56) = v96;
    v98 = *(_BYTE *)(v34 + 64);
    *(_BYTE *)(v34 + 64) = v95;
    sub_10000563C(v97, v98);
  }
  v102 = (void **)(v34 + 72);
  v103 = (void **)(v35 + 72);
  v104 = v35[80];
  if (*(unsigned __int8 *)(v34 + 80) == 255)
  {
    if (v104 == 255)
    {
      v110 = *v103;
      *(_BYTE *)(v34 + 80) = v35[80];
      *v102 = v110;
    }
    else
    {
      v108 = *v103;
      sub_1000051A8(v108, v35[80]);
      *(_QWORD *)(v34 + 72) = v108;
      *(_BYTE *)(v34 + 80) = v104;
    }
  }
  else if (v104 == 255)
  {
    sub_1000077A4(v34 + 72);
    v109 = v35[80];
    *v102 = *v103;
    *(_BYTE *)(v34 + 80) = v109;
  }
  else
  {
    v105 = *v103;
    sub_1000051A8(v105, v35[80]);
    v106 = *(void **)(v34 + 72);
    *(_QWORD *)(v34 + 72) = v105;
    v107 = *(_BYTE *)(v34 + 80);
    *(_BYTE *)(v34 + 80) = v104;
    sub_10000563C(v106, v107);
  }
  v111 = (void **)(v34 + 88);
  v112 = (void **)(v35 + 88);
  v113 = v35[96];
  if (*(unsigned __int8 *)(v34 + 96) == 255)
  {
    if (v113 == 255)
    {
      v119 = *v112;
      *(_BYTE *)(v34 + 96) = v35[96];
      *v111 = v119;
    }
    else
    {
      v117 = *v112;
      sub_1000051A8(v117, v35[96]);
      *(_QWORD *)(v34 + 88) = v117;
      *(_BYTE *)(v34 + 96) = v113;
    }
  }
  else if (v113 == 255)
  {
    sub_1000077A4(v34 + 88);
    v118 = v35[96];
    *v111 = *v112;
    *(_BYTE *)(v34 + 96) = v118;
  }
  else
  {
    v114 = *v112;
    sub_1000051A8(v114, v35[96]);
    v115 = *(void **)(v34 + 88);
    *(_QWORD *)(v34 + 88) = v114;
    v116 = *(_BYTE *)(v34 + 96);
    *(_BYTE *)(v34 + 96) = v113;
    sub_10000563C(v115, v116);
  }
  v120 = (void **)(v34 + 104);
  v121 = (void **)(v35 + 104);
  v122 = v35[112];
  if (*(unsigned __int8 *)(v34 + 112) == 255)
  {
    if (v122 == 255)
    {
      v128 = *v121;
      *(_BYTE *)(v34 + 112) = v35[112];
      *v120 = v128;
    }
    else
    {
      v126 = *v121;
      sub_1000051A8(v126, v35[112]);
      *(_QWORD *)(v34 + 104) = v126;
      *(_BYTE *)(v34 + 112) = v122;
    }
  }
  else if (v122 == 255)
  {
    sub_1000077A4(v34 + 104);
    v127 = v35[112];
    *v120 = *v121;
    *(_BYTE *)(v34 + 112) = v127;
  }
  else
  {
    v123 = *v121;
    sub_1000051A8(v123, v35[112]);
    v124 = *(void **)(v34 + 104);
    *(_QWORD *)(v34 + 104) = v123;
    v125 = *(_BYTE *)(v34 + 112);
    *(_BYTE *)(v34 + 112) = v122;
    sub_10000563C(v124, v125);
  }
  v129 = (void **)(v34 + 120);
  v130 = (void **)(v35 + 120);
  v131 = v35[128];
  if (*(unsigned __int8 *)(v34 + 128) == 255)
  {
    if (v131 == 255)
    {
      v137 = *v130;
      *(_BYTE *)(v34 + 128) = v35[128];
      *v129 = v137;
    }
    else
    {
      v135 = *v130;
      sub_1000051A8(v135, v35[128]);
      *(_QWORD *)(v34 + 120) = v135;
      *(_BYTE *)(v34 + 128) = v131;
    }
  }
  else if (v131 == 255)
  {
    sub_1000077A4(v34 + 120);
    v136 = v35[128];
    *v129 = *v130;
    *(_BYTE *)(v34 + 128) = v136;
  }
  else
  {
    v132 = *v130;
    sub_1000051A8(v132, v35[128]);
    v133 = *(void **)(v34 + 120);
    *(_QWORD *)(v34 + 120) = v132;
    v134 = *(_BYTE *)(v34 + 128);
    *(_BYTE *)(v34 + 128) = v131;
    sub_10000563C(v133, v134);
  }
  v22 = v358;
  *(_BYTE *)(v34 + 129) = v35[129];
  v138 = v36[11];
  v139 = v34 + v138;
  v140 = &v35[v138];
  v141 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v36[12];
  v143 = (_QWORD *)(v34 + v142);
  v144 = &v35[v142];
  *v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = v143[1];
  v143[1] = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v147 = v36[16];
  v148 = (_QWORD *)(v34 + v147);
  v149 = &v35[v147];
  *v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = v148[1];
  v148[1] = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
LABEL_75:
  v152 = v18[13];
  v153 = (uint64_t)a1 + v152;
  v154 = (char *)a2 + v152;
  v155 = v37((uint64_t)a1 + v152, 1, v36);
  v156 = v37((uint64_t)v154, 1, v36);
  if (v155)
  {
    if (!v156)
    {
      v157 = v22;
      *(_QWORD *)v153 = *(_QWORD *)v154;
      v158 = *((_QWORD *)v154 + 1);
      *(_QWORD *)(v153 + 8) = v158;
      v159 = v154[32];
      swift_bridgeObjectRetain(v158);
      if (v159 == 255)
      {
        v174 = *((_OWORD *)v154 + 1);
        *(_BYTE *)(v153 + 32) = v154[32];
        *(_OWORD *)(v153 + 16) = v174;
      }
      else
      {
        v160 = *((_QWORD *)v154 + 2);
        v161 = *((_QWORD *)v154 + 3);
        sub_100005190(v160, v161, v159);
        *(_QWORD *)(v153 + 16) = v160;
        *(_QWORD *)(v153 + 24) = v161;
        *(_BYTE *)(v153 + 32) = v159;
      }
      *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
      *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
      v175 = (id *)(v154 + 56);
      v176 = v154[64];
      if (v176 == 255)
      {
        v178 = *v175;
        *(_BYTE *)(v153 + 64) = v154[64];
        *(_QWORD *)(v153 + 56) = v178;
      }
      else
      {
        v177 = *v175;
        sub_1000051A8(*v175, v154[64]);
        *(_QWORD *)(v153 + 56) = v177;
        *(_BYTE *)(v153 + 64) = v176;
      }
      v22 = v157;
      v179 = (id *)(v154 + 72);
      v180 = v154[80];
      if (v180 == 255)
      {
        v182 = *v179;
        *(_BYTE *)(v153 + 80) = v154[80];
        *(_QWORD *)(v153 + 72) = v182;
      }
      else
      {
        v181 = *v179;
        sub_1000051A8(*v179, v154[80]);
        *(_QWORD *)(v153 + 72) = v181;
        *(_BYTE *)(v153 + 80) = v180;
      }
      v183 = (id *)(v154 + 88);
      v184 = v154[96];
      if (v184 == 255)
      {
        v186 = *v183;
        *(_BYTE *)(v153 + 96) = v154[96];
        *(_QWORD *)(v153 + 88) = v186;
      }
      else
      {
        v185 = *v183;
        sub_1000051A8(*v183, v154[96]);
        *(_QWORD *)(v153 + 88) = v185;
        *(_BYTE *)(v153 + 96) = v184;
      }
      v187 = (id *)(v154 + 104);
      v188 = v154[112];
      if (v188 == 255)
      {
        v190 = *v187;
        *(_BYTE *)(v153 + 112) = v154[112];
        *(_QWORD *)(v153 + 104) = v190;
      }
      else
      {
        v189 = *v187;
        sub_1000051A8(*v187, v154[112]);
        *(_QWORD *)(v153 + 104) = v189;
        *(_BYTE *)(v153 + 112) = v188;
      }
      v191 = (id *)(v154 + 120);
      v192 = v154[128];
      if (v192 == 255)
      {
        v194 = *v191;
        *(_BYTE *)(v153 + 128) = v154[128];
        *(_QWORD *)(v153 + 120) = v194;
      }
      else
      {
        v193 = *v191;
        sub_1000051A8(*v191, v154[128]);
        *(_QWORD *)(v153 + 120) = v193;
        *(_BYTE *)(v153 + 128) = v192;
      }
      *(_BYTE *)(v153 + 129) = v154[129];
      v195 = v36[11];
      v196 = v153 + v195;
      v197 = &v154[v195];
      v198 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v198 - 8) + 16))(v196, v197, v198);
      v199 = v36[12];
      v200 = (_QWORD *)(v153 + v199);
      v201 = &v154[v199];
      *v200 = *(_QWORD *)v201;
      v202 = *((_QWORD *)v201 + 1);
      v200[1] = v202;
      *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
      *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
      *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
      v203 = v36[16];
      v204 = (_QWORD *)(v153 + v203);
      v205 = &v154[v203];
      *v204 = *(_QWORD *)v205;
      v206 = *((_QWORD *)v205 + 1);
      v204[1] = v206;
      v207 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v359 + 56);
      swift_bridgeObjectRetain(v202);
      swift_bridgeObjectRetain(v206);
      v207(v153, 0, 1, v36);
      goto LABEL_142;
    }
LABEL_81:
    v162 = sub_100005150(&qword_100081030);
    memcpy((void *)v153, v154, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_142;
  }
  if (v156)
  {
    sub_1000077D8(v153);
    goto LABEL_81;
  }
  v163 = v22;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  v164 = *((_QWORD *)v154 + 1);
  v165 = *(_QWORD *)(v153 + 8);
  *(_QWORD *)(v153 + 8) = v164;
  swift_bridgeObjectRetain(v164);
  swift_bridgeObjectRelease(v165);
  v166 = (__int128 *)(v153 + 16);
  v167 = (__int128 *)(v154 + 16);
  v168 = v154[32];
  if (*(unsigned __int8 *)(v153 + 32) == 255)
  {
    if (v168 == 255)
    {
      v211 = *v167;
      *(_BYTE *)(v153 + 32) = v154[32];
      *v166 = v211;
    }
    else
    {
      v208 = *((_QWORD *)v154 + 2);
      v209 = *((_QWORD *)v154 + 3);
      sub_100005190(v208, v209, v154[32]);
      *(_QWORD *)(v153 + 16) = v208;
      *(_QWORD *)(v153 + 24) = v209;
      *(_BYTE *)(v153 + 32) = v168;
    }
  }
  else if (v168 == 255)
  {
    sub_100007770(v153 + 16);
    v210 = v154[32];
    *v166 = *v167;
    *(_BYTE *)(v153 + 32) = v210;
  }
  else
  {
    v169 = *((_QWORD *)v154 + 2);
    v170 = *((_QWORD *)v154 + 3);
    sub_100005190(v169, v170, v154[32]);
    v171 = *(_QWORD *)(v153 + 16);
    v172 = *(_QWORD *)(v153 + 24);
    *(_QWORD *)(v153 + 16) = v169;
    *(_QWORD *)(v153 + 24) = v170;
    v173 = *(_BYTE *)(v153 + 32);
    *(_BYTE *)(v153 + 32) = v168;
    sub_100005624(v171, v172, v173);
  }
  *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
  *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
  v212 = (void **)(v153 + 56);
  v213 = (void **)(v154 + 56);
  v214 = v154[64];
  if (*(unsigned __int8 *)(v153 + 64) == 255)
  {
    if (v214 == 255)
    {
      v220 = *v213;
      *(_BYTE *)(v153 + 64) = v154[64];
      *v212 = v220;
    }
    else
    {
      v218 = *v213;
      sub_1000051A8(v218, v154[64]);
      *(_QWORD *)(v153 + 56) = v218;
      *(_BYTE *)(v153 + 64) = v214;
    }
  }
  else if (v214 == 255)
  {
    sub_1000077A4(v153 + 56);
    v219 = v154[64];
    *v212 = *v213;
    *(_BYTE *)(v153 + 64) = v219;
  }
  else
  {
    v215 = *v213;
    sub_1000051A8(v215, v154[64]);
    v216 = *(void **)(v153 + 56);
    *(_QWORD *)(v153 + 56) = v215;
    v217 = *(_BYTE *)(v153 + 64);
    *(_BYTE *)(v153 + 64) = v214;
    sub_10000563C(v216, v217);
  }
  v221 = (void **)(v153 + 72);
  v222 = (void **)(v154 + 72);
  v223 = v154[80];
  if (*(unsigned __int8 *)(v153 + 80) == 255)
  {
    if (v223 == 255)
    {
      v229 = *v222;
      *(_BYTE *)(v153 + 80) = v154[80];
      *v221 = v229;
    }
    else
    {
      v227 = *v222;
      sub_1000051A8(v227, v154[80]);
      *(_QWORD *)(v153 + 72) = v227;
      *(_BYTE *)(v153 + 80) = v223;
    }
  }
  else if (v223 == 255)
  {
    sub_1000077A4(v153 + 72);
    v228 = v154[80];
    *v221 = *v222;
    *(_BYTE *)(v153 + 80) = v228;
  }
  else
  {
    v224 = *v222;
    sub_1000051A8(v224, v154[80]);
    v225 = *(void **)(v153 + 72);
    *(_QWORD *)(v153 + 72) = v224;
    v226 = *(_BYTE *)(v153 + 80);
    *(_BYTE *)(v153 + 80) = v223;
    sub_10000563C(v225, v226);
  }
  v230 = (void **)(v153 + 88);
  v231 = (void **)(v154 + 88);
  v232 = v154[96];
  if (*(unsigned __int8 *)(v153 + 96) == 255)
  {
    if (v232 == 255)
    {
      v238 = *v231;
      *(_BYTE *)(v153 + 96) = v154[96];
      *v230 = v238;
    }
    else
    {
      v236 = *v231;
      sub_1000051A8(v236, v154[96]);
      *(_QWORD *)(v153 + 88) = v236;
      *(_BYTE *)(v153 + 96) = v232;
    }
  }
  else if (v232 == 255)
  {
    sub_1000077A4(v153 + 88);
    v237 = v154[96];
    *v230 = *v231;
    *(_BYTE *)(v153 + 96) = v237;
  }
  else
  {
    v233 = *v231;
    sub_1000051A8(v233, v154[96]);
    v234 = *(void **)(v153 + 88);
    *(_QWORD *)(v153 + 88) = v233;
    v235 = *(_BYTE *)(v153 + 96);
    *(_BYTE *)(v153 + 96) = v232;
    sub_10000563C(v234, v235);
  }
  v239 = (void **)(v153 + 104);
  v240 = (void **)(v154 + 104);
  v241 = v154[112];
  if (*(unsigned __int8 *)(v153 + 112) == 255)
  {
    if (v241 == 255)
    {
      v247 = *v240;
      *(_BYTE *)(v153 + 112) = v154[112];
      *v239 = v247;
    }
    else
    {
      v245 = *v240;
      sub_1000051A8(v245, v154[112]);
      *(_QWORD *)(v153 + 104) = v245;
      *(_BYTE *)(v153 + 112) = v241;
    }
  }
  else if (v241 == 255)
  {
    sub_1000077A4(v153 + 104);
    v246 = v154[112];
    *v239 = *v240;
    *(_BYTE *)(v153 + 112) = v246;
  }
  else
  {
    v242 = *v240;
    sub_1000051A8(v242, v154[112]);
    v243 = *(void **)(v153 + 104);
    *(_QWORD *)(v153 + 104) = v242;
    v244 = *(_BYTE *)(v153 + 112);
    *(_BYTE *)(v153 + 112) = v241;
    sub_10000563C(v243, v244);
  }
  v248 = (void **)(v153 + 120);
  v249 = (void **)(v154 + 120);
  v250 = v154[128];
  if (*(unsigned __int8 *)(v153 + 128) == 255)
  {
    if (v250 == 255)
    {
      v256 = *v249;
      *(_BYTE *)(v153 + 128) = v154[128];
      *v248 = v256;
    }
    else
    {
      v254 = *v249;
      sub_1000051A8(v254, v154[128]);
      *(_QWORD *)(v153 + 120) = v254;
      *(_BYTE *)(v153 + 128) = v250;
    }
  }
  else if (v250 == 255)
  {
    sub_1000077A4(v153 + 120);
    v255 = v154[128];
    *v248 = *v249;
    *(_BYTE *)(v153 + 128) = v255;
  }
  else
  {
    v251 = *v249;
    sub_1000051A8(v251, v154[128]);
    v252 = *(void **)(v153 + 120);
    *(_QWORD *)(v153 + 120) = v251;
    v253 = *(_BYTE *)(v153 + 128);
    *(_BYTE *)(v153 + 128) = v250;
    sub_10000563C(v252, v253);
  }
  v22 = v163;
  *(_BYTE *)(v153 + 129) = v154[129];
  v257 = v36[11];
  v258 = v153 + v257;
  v259 = &v154[v257];
  v260 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v260 - 8) + 24))(v258, v259, v260);
  v261 = v36[12];
  v262 = (_QWORD *)(v153 + v261);
  v263 = &v154[v261];
  *v262 = *(_QWORD *)v263;
  v264 = *((_QWORD *)v263 + 1);
  v265 = v262[1];
  v262[1] = v264;
  swift_bridgeObjectRetain(v264);
  swift_bridgeObjectRelease(v265);
  *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
  *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
  *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
  v266 = v36[16];
  v267 = (_QWORD *)(v153 + v266);
  v268 = &v154[v266];
  *v267 = *(_QWORD *)v268;
  v269 = *((_QWORD *)v268 + 1);
  v270 = v267[1];
  v267[1] = v269;
  swift_bridgeObjectRetain(v269);
  swift_bridgeObjectRelease(v270);
LABEL_142:
  v271 = v18[14];
  v272 = *(void **)((char *)a1 + v271);
  v273 = *(void **)((char *)a2 + v271);
  *(_QWORD *)((char *)a1 + v271) = v273;
  v274 = v273;

  v275 = v18[15];
  v276 = (char *)a1 + v275;
  v277 = (char *)a2 + v275;
  v278 = type metadata accessor for URL(0);
  v279 = *(_QWORD *)(v278 - 8);
  v280 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v279 + 48);
  LODWORD(v272) = v280(v276, 1, v278);
  v281 = v280(v277, 1, v278);
  if ((_DWORD)v272)
  {
    if (!v281)
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v281)
  {
    (*(void (**)(char *, uint64_t))(v279 + 8))(v276, v278);
LABEL_147:
    v282 = sub_100005150(&qword_100081038);
    memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
    goto LABEL_148;
  }
  (*(void (**)(char *, char *, uint64_t))(v279 + 24))(v276, v277, v278);
LABEL_148:
  *((_BYTE *)a1 + v18[16]) = *((_BYTE *)a2 + v18[16]);
  v283 = v18[17];
  v284 = (char *)a1 + v283;
  v285 = (char *)a2 + v283;
  v286 = *(_QWORD *)v285;
  v284[8] = v285[8];
  *(_QWORD *)v284 = v286;
  v287 = v18[18];
  v288 = (char *)a1 + v287;
  v289 = (char *)a2 + v287;
  v290 = *(_QWORD *)v289;
  v288[8] = v289[8];
  *(_QWORD *)v288 = v290;
  v291 = v18[19];
  v292 = (char *)a1 + v291;
  v293 = (char *)a2 + v291;
  v294 = v360((char *)a1 + v291, 1, v22);
  v295 = v360(v293, 1, v22);
  if (v294)
  {
    if (!v295)
    {
      (*(void (**)(char *, char *, uint64_t))(v361 + 16))(v292, v293, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v361 + 56))(v292, 0, 1, v22);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v295)
  {
    (*(void (**)(char *, uint64_t))(v361 + 8))(v292, v22);
LABEL_153:
    v296 = sub_100005150(&qword_100081028);
    memcpy(v292, v293, *(_QWORD *)(*(_QWORD *)(v296 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(char *, char *, uint64_t))(v361 + 24))(v292, v293, v22);
LABEL_154:
  v297 = v18[20];
  v298 = (char *)a1 + v297;
  v299 = (char *)a2 + v297;
  v300 = v360((char *)a1 + v297, 1, v22);
  v301 = v360(v299, 1, v22);
  if (v300)
  {
    if (!v301)
    {
      (*(void (**)(char *, char *, uint64_t))(v361 + 16))(v298, v299, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v361 + 56))(v298, 0, 1, v22);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v301)
  {
    (*(void (**)(char *, uint64_t))(v361 + 8))(v298, v22);
LABEL_159:
    v302 = sub_100005150(&qword_100081028);
    memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(char *, char *, uint64_t))(v361 + 24))(v298, v299, v22);
LABEL_160:
  v303 = v18[21];
  v304 = (_QWORD *)((char *)a1 + v303);
  v305 = (char *)a2 + v303;
  v306 = *(_QWORD *)((char *)a1 + v303);
  v307 = *(_QWORD *)((char *)a2 + v303);
  if (v306)
  {
    if (v307)
    {
      *v304 = v307;
      swift_retain(v307);
      swift_release(v306);
      v308 = *((_QWORD *)v305 + 1);
      v309 = v304[1];
      v304[1] = v308;
      swift_retain(v308);
      swift_release(v309);
      v310 = *((_QWORD *)v305 + 2);
      v311 = v304[2];
      v304[2] = v310;
      swift_retain(v310);
      swift_release(v311);
    }
    else
    {
      sub_100007814((_QWORD *)((char *)a1 + v303));
      v314 = *((_QWORD *)v305 + 2);
      *(_OWORD *)v304 = *(_OWORD *)v305;
      v304[2] = v314;
    }
  }
  else if (v307)
  {
    *v304 = v307;
    v312 = *((_QWORD *)v305 + 1);
    v304[1] = v312;
    v313 = *((_QWORD *)v305 + 2);
    v304[2] = v313;
    swift_retain(v307);
    swift_retain(v312);
    swift_retain(v313);
  }
  else
  {
    v315 = *(_OWORD *)v305;
    v304[2] = *((_QWORD *)v305 + 2);
    *(_OWORD *)v304 = v315;
  }
  v316 = v18[22];
  v317 = (char *)a1 + v316;
  v318 = (char *)a2 + v316;
  v319 = sub_100005150(&qword_100081040);
  v320 = *(_QWORD *)(v319 - 8);
  v321 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v320 + 48);
  v322 = v321(v317, 1, v319);
  v323 = v321(v318, 1, v319);
  v363 = a2;
  if (v322)
  {
    if (!v323)
    {
      v324 = *(void (**)(char *, char *, uint64_t))(v361 + 16);
      v324(v317, v318, v22);
      v324(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v317, 0, 1, v319);
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (v323)
  {
    sub_100007848((uint64_t)v317);
LABEL_175:
    v325 = sub_100005150(&qword_100081048);
    memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
    goto LABEL_176;
  }
  v356 = *(void (**)(char *, char *, uint64_t))(v361 + 24);
  v356(v317, v318, v22);
  v356(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
LABEL_176:
  v326 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v327 = v326[5];
  v328 = &v317[v327];
  v329 = &v318[v327];
  v330 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v330 - 8) + 24))(v328, v329, v330);
  v331 = v326[6];
  v332 = &v317[v331];
  v333 = &v318[v331];
  v334 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v335 = *(_QWORD *)(v334 - 8);
  v336 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v335 + 48);
  LODWORD(v328) = v336(v332, 1, v334);
  v337 = v336(v333, 1, v334);
  if (!(_DWORD)v328)
  {
    if (!v337)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 24))(v332, v333, v334);
      goto LABEL_182;
    }
    (*(void (**)(char *, uint64_t))(v335 + 8))(v332, v334);
    goto LABEL_181;
  }
  if (v337)
  {
LABEL_181:
    v338 = sub_100005150(&qword_100081050);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
    goto LABEL_182;
  }
  (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v332, v333, v334);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v332, 0, 1, v334);
LABEL_182:
  v339 = v326[7];
  v340 = &v317[v339];
  v341 = &v318[v339];
  *(_QWORD *)v340 = *(_QWORD *)v341;
  v342 = *((_QWORD *)v341 + 1);
  v343 = *((_QWORD *)v340 + 1);
  *((_QWORD *)v340 + 1) = v342;
  swift_bridgeObjectRetain(v342);
  swift_bridgeObjectRelease(v343);
  v344 = v326[8];
  v345 = &v317[v344];
  v346 = &v318[v344];
  *(_QWORD *)v345 = *(_QWORD *)v346;
  v347 = *((_QWORD *)v346 + 1);
  v348 = *((_QWORD *)v345 + 1);
  *((_QWORD *)v345 + 1) = v347;
  swift_bridgeObjectRetain(v347);
  swift_bridgeObjectRelease(v348);
  v349 = *(int *)(v362 + 20);
  v350 = (char *)a1 + v349;
  v351 = (char *)v363 + v349;
  v352 = *(_QWORD *)v351;
  LOBYTE(v348) = v351[8];
  sub_1000051BC(*(_QWORD *)v351, v348);
  v353 = *(_QWORD *)v350;
  v354 = v350[8];
  *(_QWORD *)v350 = v352;
  v350[8] = v348;
  sub_100005650(v353, v354);
  return a1;
}

uint64_t sub_100007770(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for LibraryEntity - 1) + 8))();
  return a1;
}

uint64_t sub_1000077A4(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Color - 1) + 8))();
  return a1;
}

uint64_t sub_1000077D8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100007814(_QWORD *a1)
{
  destroy for PlayPauseWidgetIntent(a1);
  return a1;
}

uint64_t sub_100007848(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_100081040);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100007888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(_OWORD *, uint64_t, int *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(const void *, uint64_t);
  uint64_t v90;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v8 = v7[10];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v89 = *(unsigned int (**)(const void *, uint64_t))(v12 + 48);
  v90 = v11;
  if (v89(v10, 1))
  {
    v13 = sub_100005150(&qword_100081028);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v90);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v90);
  }
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  v14 = v7[12];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = (int *)type metadata accessor for ArtworkModel(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
  v88 = v18;
  if (v19(v16, 1, v17))
  {
    v20 = sub_100005150(&qword_100081030);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v16[1];
    *v15 = *v16;
    v15[1] = v21;
    *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
    *(_OWORD *)((char *)v15 + 40) = *(_OWORD *)((char *)v16 + 40);
    *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
    *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
    *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
    *(_OWORD *)((char *)v15 + 104) = *(_OWORD *)((char *)v16 + 104);
    *(_OWORD *)((char *)v15 + 88) = *(_OWORD *)((char *)v16 + 88);
    *(_OWORD *)((char *)v15 + 72) = *(_OWORD *)((char *)v16 + 72);
    *((_BYTE *)v15 + 129) = *((_BYTE *)v16 + 129);
    v22 = v17[11];
    v86 = a3;
    v87 = v12;
    v23 = (char *)v15 + v22;
    v24 = (char *)v16 + v22;
    v25 = type metadata accessor for ArtworkCrop(0);
    v26 = v23;
    v27 = v24;
    a3 = v86;
    v12 = v87;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v26, v27, v25);
    *(_OWORD *)((char *)v15 + v17[12]) = *(_OWORD *)((char *)v16 + v17[12]);
    *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
    *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
    *((_BYTE *)v15 + v17[15]) = *((_BYTE *)v16 + v17[15]);
    *(_OWORD *)((char *)v15 + v17[16]) = *(_OWORD *)((char *)v16 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v28 = v7[13];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  if (v19((_OWORD *)(a2 + v28), 1, v17))
  {
    v31 = sub_100005150(&qword_100081030);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    *(_OWORD *)((char *)v29 + 40) = *(_OWORD *)((char *)v30 + 40);
    *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
    *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
    *(_OWORD *)((char *)v29 + 113) = *(_OWORD *)((char *)v30 + 113);
    *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v30 + 104);
    *(_OWORD *)((char *)v29 + 88) = *(_OWORD *)((char *)v30 + 88);
    *(_OWORD *)((char *)v29 + 72) = *(_OWORD *)((char *)v30 + 72);
    *((_BYTE *)v29 + 129) = *((_BYTE *)v30 + 129);
    v33 = v17[11];
    v34 = v12;
    v35 = (char *)v29 + v33;
    v36 = a3;
    v37 = (char *)v30 + v33;
    v38 = type metadata accessor for ArtworkCrop(0);
    v39 = v35;
    v12 = v34;
    v40 = v37;
    a3 = v36;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v39, v40, v38);
    *(_OWORD *)((char *)v29 + v17[12]) = *(_OWORD *)((char *)v30 + v17[12]);
    *((_BYTE *)v29 + v17[13]) = *((_BYTE *)v30 + v17[13]);
    *((_BYTE *)v29 + v17[14]) = *((_BYTE *)v30 + v17[14]);
    *((_BYTE *)v29 + v17[15]) = *((_BYTE *)v30 + v17[15]);
    *(_OWORD *)((char *)v29 + v17[16]) = *(_OWORD *)((char *)v30 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v88 + 56))(v29, 0, 1, v17);
  }
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v41 = v7[15];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = sub_100005150(&qword_100081038);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  *(_BYTE *)(a1 + v7[16]) = *(_BYTE *)(a2 + v7[16]);
  v47 = v7[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = v7[19];
  v54 = (void *)(a1 + v53);
  v55 = (const void *)(a2 + v53);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v89)(a2 + v53, 1, v90))
  {
    v56 = sub_100005150(&qword_100081028);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v54, v55, v90);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v54, 0, 1, v90);
  }
  v57 = v7[20];
  v58 = (void *)(a1 + v57);
  v59 = (const void *)(a2 + v57);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v89)(a2 + v57, 1, v90))
  {
    v60 = sub_100005150(&qword_100081028);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v58, v59, v90);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v58, 0, 1, v90);
  }
  v61 = v7[21];
  v62 = a1 + v61;
  v63 = a2 + v61;
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  v64 = v7[22];
  v65 = (char *)(a1 + v64);
  v66 = (char *)(a2 + v64);
  v67 = sub_100005150(&qword_100081040);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    v69 = sub_100005150(&qword_100081048);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v70 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v70(v65, v66, v90);
    v70(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v90);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v71 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v72 = v71[5];
  v73 = &v65[v72];
  v74 = &v66[v72];
  v75 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v71[6];
  v77 = &v65[v76];
  v78 = &v66[v76];
  v79 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_100005150(&qword_100081050);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  *(_OWORD *)&v65[v71[7]] = *(_OWORD *)&v66[v71[7]];
  *(_OWORD *)&v65[v71[8]] = *(_OWORD *)&v66[v71[8]];
  v82 = *(int *)(a3 + 20);
  v83 = a1 + v82;
  v84 = a2 + v82;
  *(_QWORD *)v83 = *(_QWORD *)v84;
  *(_BYTE *)(v83 + 8) = *(_BYTE *)(v84 + 8);
  return a1;
}

_QWORD *sub_100007F64(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  int v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(char *, char *, uint64_t);
  _QWORD *v152;
  int v153;
  int v154;
  void *v155;
  _QWORD *v156;
  int v157;
  int v158;
  void *v159;
  _QWORD *v160;
  int v161;
  int v162;
  void *v163;
  _QWORD *v164;
  int v165;
  int v166;
  void *v167;
  _QWORD *v168;
  int v169;
  int v170;
  void *v171;
  _QWORD *v172;
  int v173;
  int v174;
  void *v175;
  _QWORD *v176;
  int v177;
  int v178;
  void *v179;
  _QWORD *v180;
  int v181;
  int v182;
  void *v183;
  _QWORD *v184;
  int v185;
  int v186;
  void *v187;
  _QWORD *v188;
  int v189;
  int v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t (*v225)(char *, uint64_t, uint64_t);
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a1[6];
  a1[6] = a2[6];
  swift_release(v12);
  v13 = a2[8];
  v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = a2[10];
  v16 = a1[10];
  a1[9] = a2[9];
  a1[10] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v18 = v17[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  v225 = v23;
  v226 = a3;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100005150(&qword_100081028);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[11];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v17[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v224 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v224 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  v227 = v22;
  if (v38)
  {
    if (!v39)
    {
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_OWORD *)(v34 + 16) = v40;
      *(_BYTE *)(v34 + 32) = v35[32];
      *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
      *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
      *(_BYTE *)(v34 + 64) = v35[64];
      *(_OWORD *)(v34 + 113) = *(_OWORD *)(v35 + 113);
      *(_OWORD *)(v34 + 104) = *(_OWORD *)(v35 + 104);
      *(_OWORD *)(v34 + 88) = *(_OWORD *)(v35 + 88);
      *(_OWORD *)(v34 + 72) = *(_OWORD *)(v35 + 72);
      *(_BYTE *)(v34 + 129) = v35[129];
      v41 = v36[11];
      v42 = v34 + v41;
      v43 = &v35[v41];
      v44 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      *(_OWORD *)(v34 + v36[12]) = *(_OWORD *)&v35[v36[12]];
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      *(_OWORD *)(v34 + v36[16]) = *(_OWORD *)&v35[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v224 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    sub_1000077D8(v34);
LABEL_12:
    v45 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  v137 = *((_QWORD *)v35 + 1);
  v138 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v137;
  swift_bridgeObjectRelease(v138);
  v139 = v35 + 16;
  v140 = *(unsigned __int8 *)(v34 + 32);
  if (v140 != 255)
  {
    v141 = v35[32];
    if (v141 != 255)
    {
      v142 = *(_QWORD *)(v34 + 16);
      v143 = *(_QWORD *)(v34 + 24);
      *(_OWORD *)(v34 + 16) = *v139;
      *(_BYTE *)(v34 + 32) = v141;
      sub_100005624(v142, v143, v140);
      goto LABEL_69;
    }
    sub_100007770(v34 + 16);
  }
  *(_OWORD *)(v34 + 16) = *v139;
  *(_BYTE *)(v34 + 32) = v35[32];
LABEL_69:
  *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
  v152 = v35 + 56;
  v153 = *(unsigned __int8 *)(v34 + 64);
  if (v153 != 255)
  {
    v154 = v35[64];
    if (v154 != 255)
    {
      v155 = *(void **)(v34 + 56);
      *(_QWORD *)(v34 + 56) = *v152;
      *(_BYTE *)(v34 + 64) = v154;
      sub_10000563C(v155, v153);
      goto LABEL_79;
    }
    sub_1000077A4(v34 + 56);
  }
  *(_QWORD *)(v34 + 56) = *v152;
  *(_BYTE *)(v34 + 64) = v35[64];
LABEL_79:
  v160 = v35 + 72;
  v161 = *(unsigned __int8 *)(v34 + 80);
  if (v161 != 255)
  {
    v162 = v35[80];
    if (v162 != 255)
    {
      v163 = *(void **)(v34 + 72);
      *(_QWORD *)(v34 + 72) = *v160;
      *(_BYTE *)(v34 + 80) = v162;
      sub_10000563C(v163, v161);
      goto LABEL_89;
    }
    sub_1000077A4(v34 + 72);
  }
  *(_QWORD *)(v34 + 72) = *v160;
  *(_BYTE *)(v34 + 80) = v35[80];
LABEL_89:
  v168 = v35 + 88;
  v169 = *(unsigned __int8 *)(v34 + 96);
  if (v169 != 255)
  {
    v170 = v35[96];
    if (v170 != 255)
    {
      v171 = *(void **)(v34 + 88);
      *(_QWORD *)(v34 + 88) = *v168;
      *(_BYTE *)(v34 + 96) = v170;
      sub_10000563C(v171, v169);
      goto LABEL_99;
    }
    sub_1000077A4(v34 + 88);
  }
  *(_QWORD *)(v34 + 88) = *v168;
  *(_BYTE *)(v34 + 96) = v35[96];
LABEL_99:
  v176 = v35 + 104;
  v177 = *(unsigned __int8 *)(v34 + 112);
  if (v177 != 255)
  {
    v178 = v35[112];
    if (v178 != 255)
    {
      v179 = *(void **)(v34 + 104);
      *(_QWORD *)(v34 + 104) = *v176;
      *(_BYTE *)(v34 + 112) = v178;
      sub_10000563C(v179, v177);
      goto LABEL_109;
    }
    sub_1000077A4(v34 + 104);
  }
  *(_QWORD *)(v34 + 104) = *v176;
  *(_BYTE *)(v34 + 112) = v35[112];
LABEL_109:
  v184 = v35 + 120;
  v185 = *(unsigned __int8 *)(v34 + 128);
  if (v185 == 255)
  {
LABEL_118:
    *(_QWORD *)(v34 + 120) = *v184;
    *(_BYTE *)(v34 + 128) = v35[128];
    goto LABEL_119;
  }
  v186 = v35[128];
  if (v186 == 255)
  {
    sub_1000077A4(v34 + 120);
    goto LABEL_118;
  }
  v187 = *(void **)(v34 + 120);
  *(_QWORD *)(v34 + 120) = *v184;
  *(_BYTE *)(v34 + 128) = v186;
  sub_10000563C(v187, v185);
LABEL_119:
  *(_BYTE *)(v34 + 129) = v35[129];
  v192 = v36[11];
  v193 = v34 + v192;
  v194 = &v35[v192];
  v195 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 40))(v193, v194, v195);
  v196 = v36[12];
  v197 = (_QWORD *)(v34 + v196);
  v198 = &v35[v196];
  v200 = *(_QWORD *)v198;
  v199 = *((_QWORD *)v198 + 1);
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v202 = v36[16];
  v203 = (_QWORD *)(v34 + v202);
  v204 = &v35[v202];
  v206 = *(_QWORD *)v204;
  v205 = *((_QWORD *)v204 + 1);
  v207 = v203[1];
  *v203 = v206;
  v203[1] = v205;
  swift_bridgeObjectRelease(v207);
LABEL_13:
  v46 = v17[13];
  v47 = (uint64_t)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = v37((uint64_t)a1 + v46, 1, v36);
  v50 = v37((uint64_t)v48, 1, v36);
  if (v49)
  {
    if (!v50)
    {
      v51 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v51;
      *(_BYTE *)(v47 + 32) = v48[32];
      *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
      *(_QWORD *)(v47 + 56) = *((_QWORD *)v48 + 7);
      *(_BYTE *)(v47 + 64) = v48[64];
      *(_OWORD *)(v47 + 113) = *(_OWORD *)(v48 + 113);
      *(_OWORD *)(v47 + 104) = *(_OWORD *)(v48 + 104);
      *(_OWORD *)(v47 + 88) = *(_OWORD *)(v48 + 88);
      *(_OWORD *)(v47 + 72) = *(_OWORD *)(v48 + 72);
      *(_BYTE *)(v47 + 129) = v48[129];
      v52 = v36[11];
      v53 = v47 + v52;
      v54 = &v48[v52];
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
      *(_OWORD *)(v47 + v36[12]) = *(_OWORD *)&v48[v36[12]];
      *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
      *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
      *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
      *(_OWORD *)(v47 + v36[16]) = *(_OWORD *)&v48[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v224 + 56))(v47, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    sub_1000077D8(v47);
LABEL_18:
    v56 = sub_100005150(&qword_100081030);
    memcpy((void *)v47, v48, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_19;
  }
  v144 = *((_QWORD *)v48 + 1);
  v145 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v47 + 8) = v144;
  swift_bridgeObjectRelease(v145);
  v146 = v48 + 16;
  v147 = *(unsigned __int8 *)(v47 + 32);
  if (v147 != 255)
  {
    v148 = v48[32];
    if (v148 != 255)
    {
      v149 = *(_QWORD *)(v47 + 16);
      v150 = *(_QWORD *)(v47 + 24);
      *(_OWORD *)(v47 + 16) = *v146;
      *(_BYTE *)(v47 + 32) = v148;
      sub_100005624(v149, v150, v147);
      goto LABEL_74;
    }
    sub_100007770(v47 + 16);
  }
  *(_OWORD *)(v47 + 16) = *v146;
  *(_BYTE *)(v47 + 32) = v48[32];
LABEL_74:
  *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
  v156 = v48 + 56;
  v157 = *(unsigned __int8 *)(v47 + 64);
  if (v157 != 255)
  {
    v158 = v48[64];
    if (v158 != 255)
    {
      v159 = *(void **)(v47 + 56);
      *(_QWORD *)(v47 + 56) = *v156;
      *(_BYTE *)(v47 + 64) = v158;
      sub_10000563C(v159, v157);
      goto LABEL_84;
    }
    sub_1000077A4(v47 + 56);
  }
  *(_QWORD *)(v47 + 56) = *v156;
  *(_BYTE *)(v47 + 64) = v48[64];
LABEL_84:
  v164 = v48 + 72;
  v165 = *(unsigned __int8 *)(v47 + 80);
  if (v165 != 255)
  {
    v166 = v48[80];
    if (v166 != 255)
    {
      v167 = *(void **)(v47 + 72);
      *(_QWORD *)(v47 + 72) = *v164;
      *(_BYTE *)(v47 + 80) = v166;
      sub_10000563C(v167, v165);
      goto LABEL_94;
    }
    sub_1000077A4(v47 + 72);
  }
  *(_QWORD *)(v47 + 72) = *v164;
  *(_BYTE *)(v47 + 80) = v48[80];
LABEL_94:
  v172 = v48 + 88;
  v173 = *(unsigned __int8 *)(v47 + 96);
  if (v173 != 255)
  {
    v174 = v48[96];
    if (v174 != 255)
    {
      v175 = *(void **)(v47 + 88);
      *(_QWORD *)(v47 + 88) = *v172;
      *(_BYTE *)(v47 + 96) = v174;
      sub_10000563C(v175, v173);
      goto LABEL_104;
    }
    sub_1000077A4(v47 + 88);
  }
  *(_QWORD *)(v47 + 88) = *v172;
  *(_BYTE *)(v47 + 96) = v48[96];
LABEL_104:
  v180 = v48 + 104;
  v181 = *(unsigned __int8 *)(v47 + 112);
  if (v181 != 255)
  {
    v182 = v48[112];
    if (v182 != 255)
    {
      v183 = *(void **)(v47 + 104);
      *(_QWORD *)(v47 + 104) = *v180;
      *(_BYTE *)(v47 + 112) = v182;
      sub_10000563C(v183, v181);
      goto LABEL_114;
    }
    sub_1000077A4(v47 + 104);
  }
  *(_QWORD *)(v47 + 104) = *v180;
  *(_BYTE *)(v47 + 112) = v48[112];
LABEL_114:
  v188 = v48 + 120;
  v189 = *(unsigned __int8 *)(v47 + 128);
  if (v189 == 255)
  {
LABEL_121:
    *(_QWORD *)(v47 + 120) = *v188;
    *(_BYTE *)(v47 + 128) = v48[128];
    goto LABEL_122;
  }
  v190 = v48[128];
  if (v190 == 255)
  {
    sub_1000077A4(v47 + 120);
    goto LABEL_121;
  }
  v191 = *(void **)(v47 + 120);
  *(_QWORD *)(v47 + 120) = *v188;
  *(_BYTE *)(v47 + 128) = v190;
  sub_10000563C(v191, v189);
LABEL_122:
  *(_BYTE *)(v47 + 129) = v48[129];
  v208 = v36[11];
  v209 = v47 + v208;
  v210 = &v48[v208];
  v211 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v211 - 8) + 40))(v209, v210, v211);
  v212 = v36[12];
  v213 = (_QWORD *)(v47 + v212);
  v214 = &v48[v212];
  v216 = *(_QWORD *)v214;
  v215 = *((_QWORD *)v214 + 1);
  v217 = v213[1];
  *v213 = v216;
  v213[1] = v215;
  swift_bridgeObjectRelease(v217);
  *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
  *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
  *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
  v218 = v36[16];
  v219 = (_QWORD *)(v47 + v218);
  v220 = &v48[v218];
  v222 = *(_QWORD *)v220;
  v221 = *((_QWORD *)v220 + 1);
  v223 = v219[1];
  *v219 = v222;
  v219[1] = v221;
  swift_bridgeObjectRelease(v223);
LABEL_19:
  v57 = v17[14];
  v58 = *(void **)((char *)a1 + v57);
  *(_QWORD *)((char *)a1 + v57) = *(_QWORD *)((char *)a2 + v57);

  v59 = v17[15];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    v67 = v227;
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v67 = v227;
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
LABEL_24:
    v68 = sub_100005150(&qword_100081038);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v60, v61, v62);
LABEL_25:
  *((_BYTE *)a1 + v17[16]) = *((_BYTE *)a2 + v17[16]);
  v69 = v17[17];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  v72 = v17[18];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v17[19];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = v225((char *)a1 + v75, 1, v21);
  v79 = v225(v77, 1, v21);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v76, v77, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v76, 0, 1, v21);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v76, v21);
LABEL_30:
    v80 = sub_100005150(&qword_100081028);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v76, v77, v21);
LABEL_31:
  v81 = v17[20];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = v225((char *)a1 + v81, 1, v21);
  v85 = v225(v83, 1, v21);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v82, v83, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v82, 0, 1, v21);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v82, v21);
LABEL_36:
    v86 = sub_100005150(&qword_100081028);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v82, v83, v21);
LABEL_37:
  v87 = v17[21];
  v88 = (_QWORD *)((char *)a1 + v87);
  v89 = (_QWORD *)((char *)a2 + v87);
  v90 = *(_QWORD *)((char *)a1 + v87);
  if (v90)
  {
    if (*v89)
    {
      *v88 = *v89;
      swift_release(v90);
      v91 = v88[1];
      v88[1] = v89[1];
      swift_release(v91);
      v92 = v88[2];
      v88[2] = v89[2];
      swift_release(v92);
      goto LABEL_42;
    }
    sub_100007814(v88);
  }
  *(_OWORD *)v88 = *(_OWORD *)v89;
  v88[2] = v89[2];
LABEL_42:
  v93 = v17[22];
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  v96 = sub_100005150(&qword_100081040);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  v228 = a2;
  if (v99)
  {
    if (!v100)
    {
      v101 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v101(v94, v95, v21);
      v101(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v100)
  {
    sub_100007848((uint64_t)v94);
LABEL_47:
    v102 = sub_100005150(&qword_100081048);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_48;
  }
  v151 = *(void (**)(char *, char *, uint64_t))(v67 + 40);
  v151(v94, v95, v21);
  v151(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
LABEL_48:
  v103 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v104 = v103[5];
  v105 = &v94[v104];
  v106 = &v95[v104];
  v107 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 40))(v105, v106, v107);
  v108 = v103[6];
  v109 = &v94[v108];
  v110 = &v95[v108];
  v111 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  v114 = v113(v109, 1, v111);
  v115 = v113(v110, 1, v111);
  if (!v114)
  {
    v116 = v228;
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 40))(v109, v110, v111);
      goto LABEL_54;
    }
    (*(void (**)(char *, uint64_t))(v112 + 8))(v109, v111);
    goto LABEL_53;
  }
  v116 = v228;
  if (v115)
  {
LABEL_53:
    v117 = sub_100005150(&qword_100081050);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v109, v110, v111);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
LABEL_54:
  v118 = v103[7];
  v119 = &v94[v118];
  v120 = &v95[v118];
  v122 = *(_QWORD *)v120;
  v121 = *((_QWORD *)v120 + 1);
  v123 = *((_QWORD *)v119 + 1);
  *(_QWORD *)v119 = v122;
  *((_QWORD *)v119 + 1) = v121;
  swift_bridgeObjectRelease(v123);
  v124 = v103[8];
  v125 = &v94[v124];
  v126 = &v95[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  v130 = *(int *)(v226 + 20);
  v131 = (char *)a1 + v130;
  v132 = (_QWORD *)((char *)v116 + v130);
  v133 = *v132;
  LOBYTE(v132) = *((_BYTE *)v132 + 8);
  v134 = *(_QWORD *)v131;
  v135 = v131[8];
  *(_QWORD *)v131 = v133;
  v131[8] = (char)v132;
  sub_100005650(v134, v135);
  return a1;
}

uint64_t sub_100008E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100008E10);
}

uint64_t sub_100008E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UpNextEntry.Episode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_100008E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100008E98);
}

uint64_t sub_100008E98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UpNextEntry.Episode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for PlayButtonSmall(uint64_t a1)
{
  uint64_t result;

  result = qword_1000810B0;
  if (!qword_1000810B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlayButtonSmall);
  return result;
}

uint64_t sub_100008F50(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UpNextEntry.Episode(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\t";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100008FC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071A38, 1);
}

uint64_t sub_100008FD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD v65[3];

  v3 = type metadata accessor for PlaybackButton.State(0);
  v4 = *(_QWORD *)(v3 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005150(&qword_100081048);
  ((void (*)(void))__chkstk_darwin)();
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PlaybackButton(0);
  v10 = *(_QWORD *)(v9 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v63 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_1000810E8);
  v64 = *(_QWORD *)(v12 - 8);
  v13 = ((uint64_t (*)(void))__chkstk_darwin)();
  v61 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v62 = (uint64_t)&v56 - v15;
  v16 = type metadata accessor for UpNextEntry.Episode(0);
  v17 = (uint64_t *)(v1 + *(int *)(v16 + 84));
  v18 = *v17;
  if (!*v17)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(a1, 1, 1, v12);
  v57 = v10;
  v58 = v9;
  v60 = a1;
  v19 = v17[1];
  v20 = v17[2];
  v21 = *(int *)(v16 + 88);
  v56 = v1;
  v22 = v1 + v21;
  sub_100009398(v1 + v21, (uint64_t)v8);
  v23 = type metadata accessor for WidgetPredictedPlayState(0);
  v59 = v12;
  v24 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v22 + *(int *)(v23 + 20), v3);
  v65[0] = v18;
  v65[1] = v19;
  v65[2] = v20;
  v25 = (uint64_t *)(v22 + *(int *)(v24 + 28));
  v26 = *v25;
  v27 = v25[1];
  sub_1000093E0(v18, v19, v20);
  swift_bridgeObjectRetain(v27);
  swift_retain(v18);
  swift_retain(v19);
  v28 = swift_retain(v20);
  v29 = static Alignment.center.getter(v28);
  v31 = v30;
  v32 = sub_100009418();
  v33 = v63;
  v34 = PlaybackButton.init<A>(interval:state:intent:systemImage:alignment:)(v8, v6, v65, v26, v27, v29, v31, &type metadata for PlayPauseWidgetIntent, v32);
  v35 = static Edge.Set.trailing.getter(v34);
  v36 = v56 + *(int *)(type metadata accessor for PlayButtonSmall(0) + 20);
  v37 = *(_QWORD *)v36;
  LOBYTE(v31) = *(_BYTE *)(v36 + 8);
  sub_1000051BC(*(_QWORD *)v36, v31);
  LOBYTE(v29) = sub_100051C3C(v37, v31);
  v38 = sub_100005650(v37, v31);
  v39.n128_u64[0] = 0;
  if ((v29 & 1) != 0)
    v39.n128_f64[0] = -6.0;
  v40 = EdgeInsets.init(_all:)(v38, v39);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v48 = v57;
  v47 = v58;
  v49 = (uint64_t)v61;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v61, v33, v58);
  swift_release(v20);
  swift_release(v19);
  swift_release(v18);
  v50 = v59;
  v51 = v49 + *(int *)(v59 + 36);
  *(_BYTE *)v51 = v35;
  *(double *)(v51 + 8) = v40;
  *(_QWORD *)(v51 + 16) = v42;
  *(_QWORD *)(v51 + 24) = v44;
  *(_QWORD *)(v51 + 32) = v46;
  *(_BYTE *)(v51 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v47);
  v52 = v62;
  sub_10000945C(v49, v62);
  v53 = v52;
  v54 = v60;
  sub_10000945C(v53, v60);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v54, 0, 1, v50);
}

uint64_t sub_10000937C()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100009398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_100081048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000093E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    ((void (*)(void))swift_retain)();
    swift_retain(a2);
    return swift_retain(a3);
  }
  return result;
}

unint64_t sub_100009418()
{
  unint64_t result;

  result = qword_1000810F0;
  if (!qword_1000810F0)
  {
    result = swift_getWitnessTable(&unk_10006D480, &type metadata for PlayPauseWidgetIntent);
    atomic_store(result, (unint64_t *)&qword_1000810F0);
  }
  return result;
}

uint64_t sub_10000945C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_1000810E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000094A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000810F8;
  if (!qword_1000810F8)
  {
    v1 = sub_10000950C(&qword_100081100);
    sub_100009550();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000810F8);
  }
  return result;
}

uint64_t sub_10000950C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100009550()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081108;
  if (!qword_100081108)
  {
    v1 = sub_10000950C(&qword_1000810E8);
    sub_1000095BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081108);
  }
  return result;
}

unint64_t sub_1000095BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081110;
  if (!qword_100081110)
  {
    v1 = type metadata accessor for PlaybackButton(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PlaybackButton, v1);
    atomic_store(result, (unint64_t *)&qword_100081110);
  }
  return result;
}

_QWORD *sub_100009604(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id *v49;
  int v50;
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *__dst;
  void *__dsta;
  _QWORD *v161;
  _QWORD *v162;
  unsigned int (*v164)(char *, uint64_t, uint64_t);
  int *v165;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v10 = a2[6];
    v9 = a2[7];
    a1[6] = v10;
    a1[7] = v9;
    v12 = a2[8];
    v11 = a2[9];
    a1[8] = v12;
    a1[9] = v11;
    v13 = a2[10];
    a1[10] = v13;
    v165 = (int *)type metadata accessor for UpNextEntry.Episode(0);
    v14 = v165[10];
    __dst = (char *)a1 + v14;
    v161 = a1;
    v162 = a2;
    v15 = (char *)a2 + v14;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_retain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v164 = v18;
    if (v18(v15, 1, v16))
    {
      v19 = sub_100005150(&qword_100081028);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v22 = v165[11];
    v21 = v161;
    v23 = (_QWORD *)((char *)v161 + v22);
    v24 = (_QWORD *)((char *)v162 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v165[12];
    v27 = (_QWORD *)((char *)v161 + v26);
    v28 = (_QWORD *)((char *)v162 + v26);
    v29 = (int *)type metadata accessor for ArtworkModel(0);
    v30 = *((_QWORD *)v29 - 1);
    v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
    swift_bridgeObjectRetain(v25);
    if (v31(v28, 1, v29))
    {
      v32 = sub_100005150(&qword_100081030);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      __dsta = (void *)v16;
      v33 = v28[1];
      *v27 = *v28;
      v27[1] = v33;
      v34 = *((unsigned __int8 *)v28 + 32);
      swift_bridgeObjectRetain(v33);
      if (v34 == 255)
      {
        *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
        *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
      }
      else
      {
        v35 = v28[2];
        v36 = v28[3];
        sub_100005190(v35, v36, v34);
        v27[2] = v35;
        v27[3] = v36;
        *((_BYTE *)v27 + 32) = v34;
      }
      *(_OWORD *)(v27 + 5) = *(_OWORD *)(v28 + 5);
      v37 = (id *)(v28 + 7);
      v38 = *((unsigned __int8 *)v28 + 64);
      if (v38 == 255)
      {
        v27[7] = *v37;
        *((_BYTE *)v27 + 64) = *((_BYTE *)v28 + 64);
      }
      else
      {
        v39 = *v37;
        sub_1000051A8(*v37, *((_BYTE *)v28 + 64));
        v27[7] = v39;
        *((_BYTE *)v27 + 64) = v38;
      }
      v40 = (id *)(v28 + 9);
      v41 = *((unsigned __int8 *)v28 + 80);
      if (v41 == 255)
      {
        v27[9] = *v40;
        *((_BYTE *)v27 + 80) = *((_BYTE *)v28 + 80);
      }
      else
      {
        v42 = *v40;
        sub_1000051A8(*v40, *((_BYTE *)v28 + 80));
        v27[9] = v42;
        *((_BYTE *)v27 + 80) = v41;
      }
      v43 = (id *)(v28 + 11);
      v44 = *((unsigned __int8 *)v28 + 96);
      if (v44 == 255)
      {
        v27[11] = *v43;
        *((_BYTE *)v27 + 96) = *((_BYTE *)v28 + 96);
      }
      else
      {
        v45 = *v43;
        sub_1000051A8(*v43, *((_BYTE *)v28 + 96));
        v27[11] = v45;
        *((_BYTE *)v27 + 96) = v44;
      }
      v46 = (id *)(v28 + 13);
      v47 = *((unsigned __int8 *)v28 + 112);
      if (v47 == 255)
      {
        v27[13] = *v46;
        *((_BYTE *)v27 + 112) = *((_BYTE *)v28 + 112);
      }
      else
      {
        v48 = *v46;
        sub_1000051A8(*v46, *((_BYTE *)v28 + 112));
        v27[13] = v48;
        *((_BYTE *)v27 + 112) = v47;
      }
      v49 = (id *)(v28 + 15);
      v50 = *((unsigned __int8 *)v28 + 128);
      if (v50 == 255)
      {
        v27[15] = *v49;
        *((_BYTE *)v27 + 128) = *((_BYTE *)v28 + 128);
      }
      else
      {
        v51 = *v49;
        sub_1000051A8(*v49, *((_BYTE *)v28 + 128));
        v27[15] = v51;
        *((_BYTE *)v27 + 128) = v50;
      }
      v16 = (uint64_t)__dsta;
      *((_BYTE *)v27 + 129) = *((_BYTE *)v28 + 129);
      v52 = v29[11];
      v53 = (char *)v27 + v52;
      v54 = (char *)v28 + v52;
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      v56 = v29[12];
      v57 = (_QWORD *)((char *)v27 + v56);
      v58 = (_QWORD *)((char *)v28 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
      *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
      *((_BYTE *)v27 + v29[15]) = *((_BYTE *)v28 + v29[15]);
      v60 = v29[16];
      v61 = (_QWORD *)((char *)v27 + v60);
      v62 = (_QWORD *)((char *)v28 + v60);
      v63 = v62[1];
      *v61 = *v62;
      v61[1] = v63;
      v64 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      v64(v27, 0, 1, v29);
    }
    v65 = v165[13];
    v66 = (_QWORD *)((char *)v161 + v65);
    v67 = (_QWORD *)((char *)v162 + v65);
    if (v31((_QWORD *)((char *)v162 + v65), 1, v29))
    {
      v68 = sub_100005150(&qword_100081030);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = v16;
      v70 = v67[1];
      *v66 = *v67;
      v66[1] = v70;
      v71 = *((unsigned __int8 *)v67 + 32);
      swift_bridgeObjectRetain(v70);
      if (v71 == 255)
      {
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        *((_BYTE *)v66 + 32) = *((_BYTE *)v67 + 32);
      }
      else
      {
        v72 = v67[2];
        v73 = v67[3];
        sub_100005190(v72, v73, v71);
        v66[2] = v72;
        v66[3] = v73;
        *((_BYTE *)v66 + 32) = v71;
      }
      *(_OWORD *)(v66 + 5) = *(_OWORD *)(v67 + 5);
      v74 = (id *)(v67 + 7);
      v75 = *((unsigned __int8 *)v67 + 64);
      if (v75 == 255)
      {
        v66[7] = *v74;
        *((_BYTE *)v66 + 64) = *((_BYTE *)v67 + 64);
      }
      else
      {
        v76 = *v74;
        sub_1000051A8(*v74, *((_BYTE *)v67 + 64));
        v66[7] = v76;
        *((_BYTE *)v66 + 64) = v75;
      }
      v77 = (id *)(v67 + 9);
      v78 = *((unsigned __int8 *)v67 + 80);
      if (v78 == 255)
      {
        v66[9] = *v77;
        *((_BYTE *)v66 + 80) = *((_BYTE *)v67 + 80);
      }
      else
      {
        v79 = *v77;
        sub_1000051A8(*v77, *((_BYTE *)v67 + 80));
        v66[9] = v79;
        *((_BYTE *)v66 + 80) = v78;
      }
      v80 = (id *)(v67 + 11);
      v81 = *((unsigned __int8 *)v67 + 96);
      if (v81 == 255)
      {
        v66[11] = *v80;
        *((_BYTE *)v66 + 96) = *((_BYTE *)v67 + 96);
      }
      else
      {
        v82 = *v80;
        sub_1000051A8(*v80, *((_BYTE *)v67 + 96));
        v66[11] = v82;
        *((_BYTE *)v66 + 96) = v81;
      }
      v83 = (id *)(v67 + 13);
      v84 = *((unsigned __int8 *)v67 + 112);
      if (v84 == 255)
      {
        v66[13] = *v83;
        *((_BYTE *)v66 + 112) = *((_BYTE *)v67 + 112);
      }
      else
      {
        v85 = *v83;
        sub_1000051A8(*v83, *((_BYTE *)v67 + 112));
        v66[13] = v85;
        *((_BYTE *)v66 + 112) = v84;
      }
      v86 = (id *)(v67 + 15);
      v87 = *((unsigned __int8 *)v67 + 128);
      if (v87 == 255)
      {
        v66[15] = *v86;
        *((_BYTE *)v66 + 128) = *((_BYTE *)v67 + 128);
      }
      else
      {
        v88 = *v86;
        sub_1000051A8(*v86, *((_BYTE *)v67 + 128));
        v66[15] = v88;
        *((_BYTE *)v66 + 128) = v87;
      }
      v16 = v69;
      *((_BYTE *)v66 + 129) = *((_BYTE *)v67 + 129);
      v89 = v29[11];
      v90 = (char *)v66 + v89;
      v91 = (char *)v67 + v89;
      v92 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = v29[12];
      v94 = (_QWORD *)((char *)v66 + v93);
      v95 = (_QWORD *)((char *)v67 + v93);
      v96 = v95[1];
      *v94 = *v95;
      v94[1] = v96;
      *((_BYTE *)v66 + v29[13]) = *((_BYTE *)v67 + v29[13]);
      *((_BYTE *)v66 + v29[14]) = *((_BYTE *)v67 + v29[14]);
      *((_BYTE *)v66 + v29[15]) = *((_BYTE *)v67 + v29[15]);
      v97 = v29[16];
      v98 = (_QWORD *)((char *)v66 + v97);
      v99 = (_QWORD *)((char *)v67 + v97);
      v100 = v99[1];
      *v98 = *v99;
      v98[1] = v100;
      v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v100);
      v101(v66, 0, 1, v29);
    }
    v102 = v165[14];
    v103 = *(void **)((char *)v162 + v102);
    *(_QWORD *)((char *)v161 + v102) = v103;
    v104 = v165[15];
    v105 = (char *)v161 + v104;
    v106 = (char *)v162 + v104;
    v107 = type metadata accessor for URL(0);
    v108 = *(_QWORD *)(v107 - 8);
    v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
    v110 = v103;
    if (v109(v106, 1, v107))
    {
      v111 = sub_100005150(&qword_100081038);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    *((_BYTE *)v161 + v165[16]) = *((_BYTE *)v162 + v165[16]);
    v112 = v165[17];
    v113 = (char *)v161 + v112;
    v114 = (char *)v162 + v112;
    *(_QWORD *)v113 = *(_QWORD *)v114;
    v113[8] = v114[8];
    v115 = v165[18];
    v116 = (char *)v161 + v115;
    v117 = (char *)v162 + v115;
    *(_QWORD *)v116 = *(_QWORD *)v117;
    v116[8] = v117[8];
    v118 = v165[19];
    v119 = (char *)v161 + v118;
    v120 = (char *)v162 + v118;
    if (v164((char *)v162 + v118, 1, v16))
    {
      v121 = sub_100005150(&qword_100081028);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v119, v120, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v119, 0, 1, v16);
    }
    v122 = v165[20];
    v123 = (char *)v161 + v122;
    v124 = (char *)v162 + v122;
    if (v164((char *)v162 + v122, 1, v16))
    {
      v125 = sub_100005150(&qword_100081028);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v123, v124, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v123, 0, 1, v16);
    }
    v126 = v165[21];
    v127 = (_QWORD *)((char *)v161 + v126);
    v128 = (_QWORD *)((char *)v162 + v126);
    v129 = *v128;
    if (*v128)
    {
      v130 = v128[1];
      v131 = v128[2];
      *v127 = v129;
      v127[1] = v130;
      v127[2] = v131;
      swift_retain(v129);
      swift_retain(v130);
      swift_retain(v131);
    }
    else
    {
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v127[2] = v128[2];
    }
    v132 = v165[22];
    v133 = (char *)v161 + v132;
    v134 = (char *)v162 + v132;
    v135 = sub_100005150(&qword_100081040);
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_100005150(&qword_100081048);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v138(v133, v134, v16);
      v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    v140 = v139[5];
    v141 = &v133[v140];
    v142 = &v134[v140];
    v143 = type metadata accessor for PlaybackButton.State(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
    v144 = v139[6];
    v145 = &v133[v144];
    v146 = &v134[v144];
    v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
    {
      v149 = sub_100005150(&qword_100081050);
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
    }
    v150 = v139[7];
    v151 = &v133[v150];
    v152 = &v134[v150];
    v153 = *((_QWORD *)v152 + 1);
    *(_QWORD *)v151 = *(_QWORD *)v152;
    *((_QWORD *)v151 + 1) = v153;
    v154 = v139[8];
    v155 = &v133[v154];
    v156 = &v134[v154];
    v157 = *((_QWORD *)v156 + 1);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v157;
    *(_QWORD *)((char *)v161 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)v162 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v157);
  }
  return v21;
}

uint64_t sub_10000A07C(_QWORD *a1)
{
  int *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(char *, uint64_t, uint64_t);
  char *v7;
  int *v8;
  unsigned int (*v9)(char *, uint64_t, int *);
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  int *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_release(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  v2 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v3 = (char *)a1 + v2[10];
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (!v6(v3, 1, v4))
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v2[11] + 8));
  v7 = (char *)a1 + v2[12];
  v8 = (int *)type metadata accessor for ArtworkModel(0);
  v9 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48);
  if (!v9(v7, 1, v8))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v7 + 1));
    v10 = v7[32];
    if (v10 != 255)
      sub_100005624(*((_QWORD *)v7 + 2), *((_QWORD *)v7 + 3), v10);
    v11 = v7[64];
    if (v11 != 255)
      sub_10000563C(*((id *)v7 + 7), v11);
    v12 = v7[80];
    if (v12 != 255)
      sub_10000563C(*((id *)v7 + 9), v12);
    v13 = v7[96];
    if (v13 != 255)
      sub_10000563C(*((id *)v7 + 11), v13);
    v14 = v7[112];
    if (v14 != 255)
      sub_10000563C(*((id *)v7 + 13), v14);
    v15 = v7[128];
    if (v15 != 255)
      sub_10000563C(*((id *)v7 + 15), v15);
    v16 = &v7[v8[11]];
    v17 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    swift_bridgeObjectRelease(*(_QWORD *)&v7[v8[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v7[v8[16] + 8]);
  }
  v18 = (char *)a1 + v2[13];
  if (!v9(v18, 1, v8))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v18 + 1));
    v19 = v18[32];
    if (v19 != 255)
      sub_100005624(*((_QWORD *)v18 + 2), *((_QWORD *)v18 + 3), v19);
    v20 = v18[64];
    if (v20 != 255)
      sub_10000563C(*((id *)v18 + 7), v20);
    v21 = v18[80];
    if (v21 != 255)
      sub_10000563C(*((id *)v18 + 9), v21);
    v22 = v18[96];
    if (v22 != 255)
      sub_10000563C(*((id *)v18 + 11), v22);
    v23 = v18[112];
    if (v23 != 255)
      sub_10000563C(*((id *)v18 + 13), v23);
    v24 = v18[128];
    if (v24 != 255)
      sub_10000563C(*((id *)v18 + 15), v24);
    v25 = &v18[v8[11]];
    v26 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
    swift_bridgeObjectRelease(*(_QWORD *)&v18[v8[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v18[v8[16] + 8]);
  }

  v27 = (char *)a1 + v2[15];
  v28 = type metadata accessor for URL(0);
  v29 = *(_QWORD *)(v28 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
  v30 = (char *)a1 + v2[19];
  if (!v6(v30, 1, v4))
    (*(void (**)(char *, uint64_t))(v5 + 8))(v30, v4);
  v31 = (char *)a1 + v2[20];
  if (!v6(v31, 1, v4))
    (*(void (**)(char *, uint64_t))(v5 + 8))(v31, v4);
  v32 = (_QWORD *)((char *)a1 + v2[21]);
  if (*v32)
  {
    swift_release(*v32);
    swift_release(v32[1]);
    swift_release(v32[2]);
  }
  v33 = (char *)a1 + v2[22];
  v34 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v33, 1, v34))
  {
    v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v33, v4);
    v35(&v33[*(int *)(v34 + 36)], v4);
  }
  v36 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v37 = &v33[v36[5]];
  v38 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
  v39 = &v33[v36[6]];
  v40 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v41 = *(_QWORD *)(v40 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
  swift_bridgeObjectRelease(*(_QWORD *)&v33[v36[7] + 8]);
  return swift_bridgeObjectRelease(*(_QWORD *)&v33[v36[8] + 8]);
}

_QWORD *sub_10000A4C0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int *v27;
  uint64_t v28;
  unsigned int (*v29)(_QWORD *, uint64_t, int *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  int v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  id *v42;
  int v43;
  id v44;
  id *v45;
  int v46;
  id v47;
  id *v48;
  int v49;
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  void (*v63)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *__dst;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v163;
  int *v164;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v9 = a2[6];
  v8 = a2[7];
  a1[6] = v9;
  a1[7] = v8;
  v11 = a2[8];
  v10 = a2[9];
  a1[8] = v11;
  a1[9] = v10;
  v12 = a2[10];
  a1[10] = v12;
  v164 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v13 = v164[10];
  __dst = (char *)a1 + v13;
  v160 = a1;
  v163 = a2;
  v14 = (char *)a2 + v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v161 = v16;
  if (v17(v14, 1, v15))
  {
    v18 = sub_100005150(&qword_100081028);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = v164[11];
  v20 = (_QWORD *)((char *)v160 + v19);
  v21 = v163;
  v22 = (_QWORD *)((char *)v163 + v19);
  v23 = v22[1];
  *v20 = *v22;
  v20[1] = v23;
  v24 = v164[12];
  v25 = (_QWORD *)((char *)v160 + v24);
  v26 = (_QWORD *)((char *)v163 + v24);
  v27 = (int *)type metadata accessor for ArtworkModel(0);
  v28 = *((_QWORD *)v27 - 1);
  v29 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v28 + 48);
  swift_bridgeObjectRetain(v23);
  if (v29(v26, 1, v27))
  {
    v30 = sub_100005150(&qword_100081030);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v31 = v15;
    v32 = v26[1];
    *v25 = *v26;
    v25[1] = v32;
    v33 = *((unsigned __int8 *)v26 + 32);
    swift_bridgeObjectRetain(v32);
    if (v33 == 255)
    {
      *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
      *((_BYTE *)v25 + 32) = *((_BYTE *)v26 + 32);
    }
    else
    {
      v34 = v26[2];
      v35 = v26[3];
      sub_100005190(v34, v35, v33);
      v25[2] = v34;
      v25[3] = v35;
      *((_BYTE *)v25 + 32) = v33;
    }
    *(_OWORD *)(v25 + 5) = *(_OWORD *)(v26 + 5);
    v36 = (id *)(v26 + 7);
    v37 = *((unsigned __int8 *)v26 + 64);
    if (v37 == 255)
    {
      v25[7] = *v36;
      *((_BYTE *)v25 + 64) = *((_BYTE *)v26 + 64);
    }
    else
    {
      v38 = *v36;
      sub_1000051A8(*v36, *((_BYTE *)v26 + 64));
      v25[7] = v38;
      *((_BYTE *)v25 + 64) = v37;
    }
    v39 = (id *)(v26 + 9);
    v40 = *((unsigned __int8 *)v26 + 80);
    if (v40 == 255)
    {
      v25[9] = *v39;
      *((_BYTE *)v25 + 80) = *((_BYTE *)v26 + 80);
    }
    else
    {
      v41 = *v39;
      sub_1000051A8(*v39, *((_BYTE *)v26 + 80));
      v25[9] = v41;
      *((_BYTE *)v25 + 80) = v40;
    }
    v42 = (id *)(v26 + 11);
    v43 = *((unsigned __int8 *)v26 + 96);
    if (v43 == 255)
    {
      v25[11] = *v42;
      *((_BYTE *)v25 + 96) = *((_BYTE *)v26 + 96);
    }
    else
    {
      v44 = *v42;
      sub_1000051A8(*v42, *((_BYTE *)v26 + 96));
      v25[11] = v44;
      *((_BYTE *)v25 + 96) = v43;
    }
    v45 = (id *)(v26 + 13);
    v46 = *((unsigned __int8 *)v26 + 112);
    if (v46 == 255)
    {
      v25[13] = *v45;
      *((_BYTE *)v25 + 112) = *((_BYTE *)v26 + 112);
    }
    else
    {
      v47 = *v45;
      sub_1000051A8(*v45, *((_BYTE *)v26 + 112));
      v25[13] = v47;
      *((_BYTE *)v25 + 112) = v46;
    }
    v48 = (id *)(v26 + 15);
    v49 = *((unsigned __int8 *)v26 + 128);
    if (v49 == 255)
    {
      v25[15] = *v48;
      *((_BYTE *)v25 + 128) = *((_BYTE *)v26 + 128);
    }
    else
    {
      v50 = *v48;
      sub_1000051A8(*v48, *((_BYTE *)v26 + 128));
      v25[15] = v50;
      *((_BYTE *)v25 + 128) = v49;
    }
    v15 = v31;
    *((_BYTE *)v25 + 129) = *((_BYTE *)v26 + 129);
    v51 = v27[11];
    v52 = (char *)v25 + v51;
    v53 = (char *)v26 + v51;
    v54 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
    v55 = v27[12];
    v56 = (_QWORD *)((char *)v25 + v55);
    v57 = (_QWORD *)((char *)v26 + v55);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    *((_BYTE *)v25 + v27[13]) = *((_BYTE *)v26 + v27[13]);
    *((_BYTE *)v25 + v27[14]) = *((_BYTE *)v26 + v27[14]);
    *((_BYTE *)v25 + v27[15]) = *((_BYTE *)v26 + v27[15]);
    v59 = v27[16];
    v60 = (_QWORD *)((char *)v25 + v59);
    v61 = (_QWORD *)((char *)v26 + v59);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v28 + 56);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v62);
    v63(v25, 0, 1, v27);
    v21 = v163;
  }
  v64 = v164[13];
  v65 = (_QWORD *)((char *)v160 + v64);
  v66 = (_QWORD *)((char *)v21 + v64);
  if (v29((_QWORD *)((char *)v21 + v64), 1, v27))
  {
    v67 = sub_100005150(&qword_100081030);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    v68 = v164;
  }
  else
  {
    v69 = v15;
    v70 = v66[1];
    *v65 = *v66;
    v65[1] = v70;
    v71 = *((unsigned __int8 *)v66 + 32);
    swift_bridgeObjectRetain(v70);
    if (v71 == 255)
    {
      *((_OWORD *)v65 + 1) = *((_OWORD *)v66 + 1);
      *((_BYTE *)v65 + 32) = *((_BYTE *)v66 + 32);
    }
    else
    {
      v72 = v66[2];
      v73 = v66[3];
      sub_100005190(v72, v73, v71);
      v65[2] = v72;
      v65[3] = v73;
      *((_BYTE *)v65 + 32) = v71;
    }
    v68 = v164;
    *(_OWORD *)(v65 + 5) = *(_OWORD *)(v66 + 5);
    v74 = (id *)(v66 + 7);
    v75 = *((unsigned __int8 *)v66 + 64);
    if (v75 == 255)
    {
      v65[7] = *v74;
      *((_BYTE *)v65 + 64) = *((_BYTE *)v66 + 64);
    }
    else
    {
      v76 = *v74;
      sub_1000051A8(*v74, *((_BYTE *)v66 + 64));
      v65[7] = v76;
      *((_BYTE *)v65 + 64) = v75;
    }
    v77 = (id *)(v66 + 9);
    v78 = *((unsigned __int8 *)v66 + 80);
    if (v78 == 255)
    {
      v65[9] = *v77;
      *((_BYTE *)v65 + 80) = *((_BYTE *)v66 + 80);
    }
    else
    {
      v79 = *v77;
      sub_1000051A8(*v77, *((_BYTE *)v66 + 80));
      v65[9] = v79;
      *((_BYTE *)v65 + 80) = v78;
    }
    v80 = (id *)(v66 + 11);
    v81 = *((unsigned __int8 *)v66 + 96);
    if (v81 == 255)
    {
      v65[11] = *v80;
      *((_BYTE *)v65 + 96) = *((_BYTE *)v66 + 96);
    }
    else
    {
      v82 = *v80;
      sub_1000051A8(*v80, *((_BYTE *)v66 + 96));
      v65[11] = v82;
      *((_BYTE *)v65 + 96) = v81;
    }
    v83 = (id *)(v66 + 13);
    v84 = *((unsigned __int8 *)v66 + 112);
    if (v84 == 255)
    {
      v65[13] = *v83;
      *((_BYTE *)v65 + 112) = *((_BYTE *)v66 + 112);
    }
    else
    {
      v85 = *v83;
      sub_1000051A8(*v83, *((_BYTE *)v66 + 112));
      v65[13] = v85;
      *((_BYTE *)v65 + 112) = v84;
    }
    v86 = (id *)(v66 + 15);
    v87 = *((unsigned __int8 *)v66 + 128);
    if (v87 == 255)
    {
      v65[15] = *v86;
      *((_BYTE *)v65 + 128) = *((_BYTE *)v66 + 128);
    }
    else
    {
      v88 = *v86;
      sub_1000051A8(*v86, *((_BYTE *)v66 + 128));
      v65[15] = v88;
      *((_BYTE *)v65 + 128) = v87;
    }
    v15 = v69;
    *((_BYTE *)v65 + 129) = *((_BYTE *)v66 + 129);
    v89 = v27[11];
    v90 = (char *)v65 + v89;
    v91 = (char *)v66 + v89;
    v92 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
    v93 = v27[12];
    v94 = (_QWORD *)((char *)v65 + v93);
    v95 = (_QWORD *)((char *)v66 + v93);
    v96 = v95[1];
    *v94 = *v95;
    v94[1] = v96;
    *((_BYTE *)v65 + v27[13]) = *((_BYTE *)v66 + v27[13]);
    *((_BYTE *)v65 + v27[14]) = *((_BYTE *)v66 + v27[14]);
    *((_BYTE *)v65 + v27[15]) = *((_BYTE *)v66 + v27[15]);
    v97 = v27[16];
    v98 = (_QWORD *)((char *)v65 + v97);
    v99 = (_QWORD *)((char *)v66 + v97);
    v100 = v99[1];
    *v98 = *v99;
    v98[1] = v100;
    v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v28 + 56);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v100);
    v101(v65, 0, 1, v27);
    v21 = v163;
  }
  v102 = v68[14];
  v103 = *(void **)((char *)v21 + v102);
  *(_QWORD *)((char *)v160 + v102) = v103;
  v104 = v68[15];
  v105 = (char *)v160 + v104;
  v106 = (char *)v21 + v104;
  v107 = type metadata accessor for URL(0);
  v108 = *(_QWORD *)(v107 - 8);
  v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
  v110 = v103;
  if (v109(v106, 1, v107))
  {
    v111 = sub_100005150(&qword_100081038);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
  }
  *((_BYTE *)v160 + v68[16]) = *((_BYTE *)v21 + v68[16]);
  v112 = v68[17];
  v113 = (char *)v160 + v112;
  v114 = (uint64_t)v21 + v112;
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v113[8] = *(_BYTE *)(v114 + 8);
  v115 = v68[18];
  v116 = (char *)v160 + v115;
  v117 = (uint64_t)v21 + v115;
  *(_QWORD *)v116 = *(_QWORD *)v117;
  v116[8] = *(_BYTE *)(v117 + 8);
  v118 = v68[19];
  v119 = (char *)v160 + v118;
  v120 = (char *)v21 + v118;
  if (v17((char *)v21 + v118, 1, v15))
  {
    v121 = sub_100005150(&qword_100081028);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v119, v120, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v119, 0, 1, v15);
  }
  v122 = v68[20];
  v123 = (char *)v160 + v122;
  v124 = (char *)v21 + v122;
  if (v17((char *)v21 + v122, 1, v15))
  {
    v125 = sub_100005150(&qword_100081028);
    memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v123, v124, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v123, 0, 1, v15);
  }
  v126 = v68[21];
  v127 = (_QWORD *)((char *)v160 + v126);
  v128 = (_QWORD *)((char *)v21 + v126);
  v129 = *v128;
  if (*v128)
  {
    v130 = v128[1];
    v131 = v128[2];
    *v127 = v129;
    v127[1] = v130;
    v127[2] = v131;
    swift_retain(v129);
    swift_retain(v130);
    swift_retain(v131);
  }
  else
  {
    *(_OWORD *)v127 = *(_OWORD *)v128;
    v127[2] = v128[2];
  }
  v132 = v68[22];
  v133 = (char *)v160 + v132;
  v134 = (char *)v21 + v132;
  v135 = sub_100005150(&qword_100081040);
  v136 = *(_QWORD *)(v135 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
  {
    v137 = sub_100005150(&qword_100081048);
    memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
  }
  else
  {
    v138 = *(void (**)(char *, char *, uint64_t))(v161 + 16);
    v138(v133, v134, v15);
    v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
  }
  v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v140 = v139[5];
  v141 = &v133[v140];
  v142 = &v134[v140];
  v143 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
  v144 = v139[6];
  v145 = &v133[v144];
  v146 = &v134[v144];
  v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v148 = *(_QWORD *)(v147 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
  {
    v149 = sub_100005150(&qword_100081050);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
  }
  v150 = v139[7];
  v151 = &v133[v150];
  v152 = &v134[v150];
  v153 = *((_QWORD *)v152 + 1);
  *(_QWORD *)v151 = *(_QWORD *)v152;
  *((_QWORD *)v151 + 1) = v153;
  v154 = v139[8];
  v155 = &v133[v154];
  v156 = &v134[v154];
  v157 = *((_QWORD *)v156 + 1);
  *(_QWORD *)v155 = *(_QWORD *)v156;
  *((_QWORD *)v155 + 1) = v157;
  *(_QWORD *)((char *)v160 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)v21 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain(v153);
  swift_bridgeObjectRetain(v157);
  return v160;
}

_QWORD *sub_10000AF1C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  __int128 v55;
  id *v56;
  int v57;
  id v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id v67;
  id *v68;
  int v69;
  id v70;
  id v71;
  id *v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  void **v93;
  void **v94;
  int v95;
  void *v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  void **v102;
  void **v103;
  int v104;
  void *v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  void **v111;
  void **v112;
  int v113;
  void *v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  void *v119;
  void **v120;
  void **v121;
  int v122;
  void *v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  void **v129;
  void **v130;
  int v131;
  void *v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  __int128 *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  __int128 v174;
  id *v175;
  int v176;
  id v177;
  id v178;
  id *v179;
  int v180;
  id v181;
  id v182;
  id *v183;
  int v184;
  id v185;
  id v186;
  id *v187;
  int v188;
  id v189;
  id v190;
  id *v191;
  int v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v208;
  uint64_t v209;
  char v210;
  __int128 v211;
  void **v212;
  void **v213;
  int v214;
  void *v215;
  void *v216;
  char v217;
  void *v218;
  char v219;
  void *v220;
  void **v221;
  void **v222;
  int v223;
  void *v224;
  void *v225;
  char v226;
  void *v227;
  char v228;
  void *v229;
  void **v230;
  void **v231;
  int v232;
  void *v233;
  void *v234;
  char v235;
  void *v236;
  char v237;
  void *v238;
  void **v239;
  void **v240;
  int v241;
  void *v242;
  void *v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  void **v248;
  void **v249;
  int v250;
  void *v251;
  void *v252;
  char v253;
  void *v254;
  char v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  id v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (*v280)(char *, uint64_t, uint64_t);
  int v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (*v321)(char *, uint64_t, uint64_t);
  int v322;
  int v323;
  void (*v324)(char *, char *, uint64_t);
  uint64_t v325;
  int *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t (*v336)(char *, uint64_t, uint64_t);
  int v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  void (*v350)(char *, char *, uint64_t);
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t (*v354)(char *, uint64_t, uint64_t);
  uint64_t v355;
  uint64_t v356;
  _QWORD *v357;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[9] = a2[9];
  v16 = a2[10];
  v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v19 = v18[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v354 = v24;
  v26 = v24(v21, 1, v22);
  v355 = v23;
  v356 = a3;
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100005150(&qword_100081028);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v28 = v18[11];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v18[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v353 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v353 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      v351 = v22;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v40 = *((_QWORD *)v35 + 1);
      *(_QWORD *)(v34 + 8) = v40;
      v41 = v35[32];
      swift_bridgeObjectRetain(v40);
      if (v41 == 255)
      {
        v55 = *((_OWORD *)v35 + 1);
        *(_BYTE *)(v34 + 32) = v35[32];
        *(_OWORD *)(v34 + 16) = v55;
      }
      else
      {
        v42 = *((_QWORD *)v35 + 2);
        v43 = *((_QWORD *)v35 + 3);
        sub_100005190(v42, v43, v41);
        *(_QWORD *)(v34 + 16) = v42;
        *(_QWORD *)(v34 + 24) = v43;
        *(_BYTE *)(v34 + 32) = v41;
      }
      *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
      *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
      v56 = (id *)(v35 + 56);
      v57 = v35[64];
      if (v57 == 255)
      {
        v59 = *v56;
        *(_BYTE *)(v34 + 64) = v35[64];
        *(_QWORD *)(v34 + 56) = v59;
      }
      else
      {
        v58 = *v56;
        sub_1000051A8(*v56, v35[64]);
        *(_QWORD *)(v34 + 56) = v58;
        *(_BYTE *)(v34 + 64) = v57;
      }
      v22 = v351;
      v60 = (id *)(v35 + 72);
      v61 = v35[80];
      if (v61 == 255)
      {
        v63 = *v60;
        *(_BYTE *)(v34 + 80) = v35[80];
        *(_QWORD *)(v34 + 72) = v63;
      }
      else
      {
        v62 = *v60;
        sub_1000051A8(*v60, v35[80]);
        *(_QWORD *)(v34 + 72) = v62;
        *(_BYTE *)(v34 + 80) = v61;
      }
      v64 = (id *)(v35 + 88);
      v65 = v35[96];
      if (v65 == 255)
      {
        v67 = *v64;
        *(_BYTE *)(v34 + 96) = v35[96];
        *(_QWORD *)(v34 + 88) = v67;
      }
      else
      {
        v66 = *v64;
        sub_1000051A8(*v64, v35[96]);
        *(_QWORD *)(v34 + 88) = v66;
        *(_BYTE *)(v34 + 96) = v65;
      }
      v68 = (id *)(v35 + 104);
      v69 = v35[112];
      if (v69 == 255)
      {
        v71 = *v68;
        *(_BYTE *)(v34 + 112) = v35[112];
        *(_QWORD *)(v34 + 104) = v71;
      }
      else
      {
        v70 = *v68;
        sub_1000051A8(*v68, v35[112]);
        *(_QWORD *)(v34 + 104) = v70;
        *(_BYTE *)(v34 + 112) = v69;
      }
      v72 = (id *)(v35 + 120);
      v73 = v35[128];
      if (v73 == 255)
      {
        v75 = *v72;
        *(_BYTE *)(v34 + 128) = v35[128];
        *(_QWORD *)(v34 + 120) = v75;
      }
      else
      {
        v74 = *v72;
        sub_1000051A8(*v72, v35[128]);
        *(_QWORD *)(v34 + 120) = v74;
        *(_BYTE *)(v34 + 128) = v73;
      }
      *(_BYTE *)(v34 + 129) = v35[129];
      v76 = v36[11];
      v77 = v34 + v76;
      v78 = &v35[v76];
      v79 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v80 = v36[12];
      v81 = (_QWORD *)(v34 + v80);
      v82 = &v35[v80];
      *v81 = *(_QWORD *)v82;
      v83 = *((_QWORD *)v82 + 1);
      v81[1] = v83;
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      v84 = v36[16];
      v85 = (_QWORD *)(v34 + v84);
      v86 = &v35[v84];
      *v85 = *(_QWORD *)v86;
      v87 = *((_QWORD *)v86 + 1);
      v85[1] = v87;
      v88 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v353 + 56);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v88(v34, 0, 1, v36);
      goto LABEL_75;
    }
LABEL_13:
    v44 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_75;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_13;
  }
  v352 = v22;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v45 = *((_QWORD *)v35 + 1);
  v46 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = (__int128 *)(v34 + 16);
  v48 = (__int128 *)(v35 + 16);
  v49 = v35[32];
  if (*(unsigned __int8 *)(v34 + 32) == 255)
  {
    if (v49 == 255)
    {
      v92 = *v48;
      *(_BYTE *)(v34 + 32) = v35[32];
      *v47 = v92;
    }
    else
    {
      v89 = *((_QWORD *)v35 + 2);
      v90 = *((_QWORD *)v35 + 3);
      sub_100005190(v89, v90, v35[32]);
      *(_QWORD *)(v34 + 16) = v89;
      *(_QWORD *)(v34 + 24) = v90;
      *(_BYTE *)(v34 + 32) = v49;
    }
  }
  else if (v49 == 255)
  {
    sub_100007770(v34 + 16);
    v91 = v35[32];
    *v47 = *v48;
    *(_BYTE *)(v34 + 32) = v91;
  }
  else
  {
    v51 = *((_QWORD *)v35 + 2);
    v50 = *((_QWORD *)v35 + 3);
    sub_100005190(v51, v50, v35[32]);
    v52 = *(_QWORD *)(v34 + 16);
    v53 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 16) = v51;
    *(_QWORD *)(v34 + 24) = v50;
    v54 = *(_BYTE *)(v34 + 32);
    *(_BYTE *)(v34 + 32) = v49;
    sub_100005624(v52, v53, v54);
  }
  *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
  *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
  v93 = (void **)(v34 + 56);
  v94 = (void **)(v35 + 56);
  v95 = v35[64];
  if (*(unsigned __int8 *)(v34 + 64) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(v34 + 64) = v35[64];
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_1000051A8(v99, v35[64]);
      *(_QWORD *)(v34 + 56) = v99;
      *(_BYTE *)(v34 + 64) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_1000077A4(v34 + 56);
    v100 = v35[64];
    *v93 = *v94;
    *(_BYTE *)(v34 + 64) = v100;
  }
  else
  {
    v96 = *v94;
    sub_1000051A8(v96, v35[64]);
    v97 = *(void **)(v34 + 56);
    *(_QWORD *)(v34 + 56) = v96;
    v98 = *(_BYTE *)(v34 + 64);
    *(_BYTE *)(v34 + 64) = v95;
    sub_10000563C(v97, v98);
  }
  v102 = (void **)(v34 + 72);
  v103 = (void **)(v35 + 72);
  v104 = v35[80];
  if (*(unsigned __int8 *)(v34 + 80) == 255)
  {
    if (v104 == 255)
    {
      v110 = *v103;
      *(_BYTE *)(v34 + 80) = v35[80];
      *v102 = v110;
    }
    else
    {
      v108 = *v103;
      sub_1000051A8(v108, v35[80]);
      *(_QWORD *)(v34 + 72) = v108;
      *(_BYTE *)(v34 + 80) = v104;
    }
  }
  else if (v104 == 255)
  {
    sub_1000077A4(v34 + 72);
    v109 = v35[80];
    *v102 = *v103;
    *(_BYTE *)(v34 + 80) = v109;
  }
  else
  {
    v105 = *v103;
    sub_1000051A8(v105, v35[80]);
    v106 = *(void **)(v34 + 72);
    *(_QWORD *)(v34 + 72) = v105;
    v107 = *(_BYTE *)(v34 + 80);
    *(_BYTE *)(v34 + 80) = v104;
    sub_10000563C(v106, v107);
  }
  v111 = (void **)(v34 + 88);
  v112 = (void **)(v35 + 88);
  v113 = v35[96];
  if (*(unsigned __int8 *)(v34 + 96) == 255)
  {
    if (v113 == 255)
    {
      v119 = *v112;
      *(_BYTE *)(v34 + 96) = v35[96];
      *v111 = v119;
    }
    else
    {
      v117 = *v112;
      sub_1000051A8(v117, v35[96]);
      *(_QWORD *)(v34 + 88) = v117;
      *(_BYTE *)(v34 + 96) = v113;
    }
  }
  else if (v113 == 255)
  {
    sub_1000077A4(v34 + 88);
    v118 = v35[96];
    *v111 = *v112;
    *(_BYTE *)(v34 + 96) = v118;
  }
  else
  {
    v114 = *v112;
    sub_1000051A8(v114, v35[96]);
    v115 = *(void **)(v34 + 88);
    *(_QWORD *)(v34 + 88) = v114;
    v116 = *(_BYTE *)(v34 + 96);
    *(_BYTE *)(v34 + 96) = v113;
    sub_10000563C(v115, v116);
  }
  v120 = (void **)(v34 + 104);
  v121 = (void **)(v35 + 104);
  v122 = v35[112];
  if (*(unsigned __int8 *)(v34 + 112) == 255)
  {
    if (v122 == 255)
    {
      v128 = *v121;
      *(_BYTE *)(v34 + 112) = v35[112];
      *v120 = v128;
    }
    else
    {
      v126 = *v121;
      sub_1000051A8(v126, v35[112]);
      *(_QWORD *)(v34 + 104) = v126;
      *(_BYTE *)(v34 + 112) = v122;
    }
  }
  else if (v122 == 255)
  {
    sub_1000077A4(v34 + 104);
    v127 = v35[112];
    *v120 = *v121;
    *(_BYTE *)(v34 + 112) = v127;
  }
  else
  {
    v123 = *v121;
    sub_1000051A8(v123, v35[112]);
    v124 = *(void **)(v34 + 104);
    *(_QWORD *)(v34 + 104) = v123;
    v125 = *(_BYTE *)(v34 + 112);
    *(_BYTE *)(v34 + 112) = v122;
    sub_10000563C(v124, v125);
  }
  v129 = (void **)(v34 + 120);
  v130 = (void **)(v35 + 120);
  v131 = v35[128];
  if (*(unsigned __int8 *)(v34 + 128) == 255)
  {
    if (v131 == 255)
    {
      v137 = *v130;
      *(_BYTE *)(v34 + 128) = v35[128];
      *v129 = v137;
    }
    else
    {
      v135 = *v130;
      sub_1000051A8(v135, v35[128]);
      *(_QWORD *)(v34 + 120) = v135;
      *(_BYTE *)(v34 + 128) = v131;
    }
  }
  else if (v131 == 255)
  {
    sub_1000077A4(v34 + 120);
    v136 = v35[128];
    *v129 = *v130;
    *(_BYTE *)(v34 + 128) = v136;
  }
  else
  {
    v132 = *v130;
    sub_1000051A8(v132, v35[128]);
    v133 = *(void **)(v34 + 120);
    *(_QWORD *)(v34 + 120) = v132;
    v134 = *(_BYTE *)(v34 + 128);
    *(_BYTE *)(v34 + 128) = v131;
    sub_10000563C(v133, v134);
  }
  v22 = v352;
  *(_BYTE *)(v34 + 129) = v35[129];
  v138 = v36[11];
  v139 = v34 + v138;
  v140 = &v35[v138];
  v141 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v36[12];
  v143 = (_QWORD *)(v34 + v142);
  v144 = &v35[v142];
  *v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = v143[1];
  v143[1] = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v147 = v36[16];
  v148 = (_QWORD *)(v34 + v147);
  v149 = &v35[v147];
  *v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = v148[1];
  v148[1] = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
LABEL_75:
  v152 = v18[13];
  v153 = (uint64_t)a1 + v152;
  v154 = (char *)a2 + v152;
  v155 = v37((uint64_t)a1 + v152, 1, v36);
  v156 = v37((uint64_t)v154, 1, v36);
  if (v155)
  {
    if (!v156)
    {
      v157 = v22;
      *(_QWORD *)v153 = *(_QWORD *)v154;
      v158 = *((_QWORD *)v154 + 1);
      *(_QWORD *)(v153 + 8) = v158;
      v159 = v154[32];
      swift_bridgeObjectRetain(v158);
      if (v159 == 255)
      {
        v174 = *((_OWORD *)v154 + 1);
        *(_BYTE *)(v153 + 32) = v154[32];
        *(_OWORD *)(v153 + 16) = v174;
      }
      else
      {
        v160 = *((_QWORD *)v154 + 2);
        v161 = *((_QWORD *)v154 + 3);
        sub_100005190(v160, v161, v159);
        *(_QWORD *)(v153 + 16) = v160;
        *(_QWORD *)(v153 + 24) = v161;
        *(_BYTE *)(v153 + 32) = v159;
      }
      *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
      *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
      v175 = (id *)(v154 + 56);
      v176 = v154[64];
      if (v176 == 255)
      {
        v178 = *v175;
        *(_BYTE *)(v153 + 64) = v154[64];
        *(_QWORD *)(v153 + 56) = v178;
      }
      else
      {
        v177 = *v175;
        sub_1000051A8(*v175, v154[64]);
        *(_QWORD *)(v153 + 56) = v177;
        *(_BYTE *)(v153 + 64) = v176;
      }
      v22 = v157;
      v179 = (id *)(v154 + 72);
      v180 = v154[80];
      if (v180 == 255)
      {
        v182 = *v179;
        *(_BYTE *)(v153 + 80) = v154[80];
        *(_QWORD *)(v153 + 72) = v182;
      }
      else
      {
        v181 = *v179;
        sub_1000051A8(*v179, v154[80]);
        *(_QWORD *)(v153 + 72) = v181;
        *(_BYTE *)(v153 + 80) = v180;
      }
      v183 = (id *)(v154 + 88);
      v184 = v154[96];
      if (v184 == 255)
      {
        v186 = *v183;
        *(_BYTE *)(v153 + 96) = v154[96];
        *(_QWORD *)(v153 + 88) = v186;
      }
      else
      {
        v185 = *v183;
        sub_1000051A8(*v183, v154[96]);
        *(_QWORD *)(v153 + 88) = v185;
        *(_BYTE *)(v153 + 96) = v184;
      }
      v187 = (id *)(v154 + 104);
      v188 = v154[112];
      if (v188 == 255)
      {
        v190 = *v187;
        *(_BYTE *)(v153 + 112) = v154[112];
        *(_QWORD *)(v153 + 104) = v190;
      }
      else
      {
        v189 = *v187;
        sub_1000051A8(*v187, v154[112]);
        *(_QWORD *)(v153 + 104) = v189;
        *(_BYTE *)(v153 + 112) = v188;
      }
      v191 = (id *)(v154 + 120);
      v192 = v154[128];
      if (v192 == 255)
      {
        v194 = *v191;
        *(_BYTE *)(v153 + 128) = v154[128];
        *(_QWORD *)(v153 + 120) = v194;
      }
      else
      {
        v193 = *v191;
        sub_1000051A8(*v191, v154[128]);
        *(_QWORD *)(v153 + 120) = v193;
        *(_BYTE *)(v153 + 128) = v192;
      }
      *(_BYTE *)(v153 + 129) = v154[129];
      v195 = v36[11];
      v196 = v153 + v195;
      v197 = &v154[v195];
      v198 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v198 - 8) + 16))(v196, v197, v198);
      v199 = v36[12];
      v200 = (_QWORD *)(v153 + v199);
      v201 = &v154[v199];
      *v200 = *(_QWORD *)v201;
      v202 = *((_QWORD *)v201 + 1);
      v200[1] = v202;
      *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
      *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
      *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
      v203 = v36[16];
      v204 = (_QWORD *)(v153 + v203);
      v205 = &v154[v203];
      *v204 = *(_QWORD *)v205;
      v206 = *((_QWORD *)v205 + 1);
      v204[1] = v206;
      v207 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v353 + 56);
      swift_bridgeObjectRetain(v202);
      swift_bridgeObjectRetain(v206);
      v207(v153, 0, 1, v36);
      goto LABEL_142;
    }
LABEL_81:
    v162 = sub_100005150(&qword_100081030);
    memcpy((void *)v153, v154, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_142;
  }
  if (v156)
  {
    sub_10000EF80(v153, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_81;
  }
  v163 = v22;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  v164 = *((_QWORD *)v154 + 1);
  v165 = *(_QWORD *)(v153 + 8);
  *(_QWORD *)(v153 + 8) = v164;
  swift_bridgeObjectRetain(v164);
  swift_bridgeObjectRelease(v165);
  v166 = (__int128 *)(v153 + 16);
  v167 = (__int128 *)(v154 + 16);
  v168 = v154[32];
  if (*(unsigned __int8 *)(v153 + 32) == 255)
  {
    if (v168 == 255)
    {
      v211 = *v167;
      *(_BYTE *)(v153 + 32) = v154[32];
      *v166 = v211;
    }
    else
    {
      v208 = *((_QWORD *)v154 + 2);
      v209 = *((_QWORD *)v154 + 3);
      sub_100005190(v208, v209, v154[32]);
      *(_QWORD *)(v153 + 16) = v208;
      *(_QWORD *)(v153 + 24) = v209;
      *(_BYTE *)(v153 + 32) = v168;
    }
  }
  else if (v168 == 255)
  {
    sub_100007770(v153 + 16);
    v210 = v154[32];
    *v166 = *v167;
    *(_BYTE *)(v153 + 32) = v210;
  }
  else
  {
    v169 = *((_QWORD *)v154 + 2);
    v170 = *((_QWORD *)v154 + 3);
    sub_100005190(v169, v170, v154[32]);
    v171 = *(_QWORD *)(v153 + 16);
    v172 = *(_QWORD *)(v153 + 24);
    *(_QWORD *)(v153 + 16) = v169;
    *(_QWORD *)(v153 + 24) = v170;
    v173 = *(_BYTE *)(v153 + 32);
    *(_BYTE *)(v153 + 32) = v168;
    sub_100005624(v171, v172, v173);
  }
  *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
  *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
  v212 = (void **)(v153 + 56);
  v213 = (void **)(v154 + 56);
  v214 = v154[64];
  if (*(unsigned __int8 *)(v153 + 64) == 255)
  {
    if (v214 == 255)
    {
      v220 = *v213;
      *(_BYTE *)(v153 + 64) = v154[64];
      *v212 = v220;
    }
    else
    {
      v218 = *v213;
      sub_1000051A8(v218, v154[64]);
      *(_QWORD *)(v153 + 56) = v218;
      *(_BYTE *)(v153 + 64) = v214;
    }
  }
  else if (v214 == 255)
  {
    sub_1000077A4(v153 + 56);
    v219 = v154[64];
    *v212 = *v213;
    *(_BYTE *)(v153 + 64) = v219;
  }
  else
  {
    v215 = *v213;
    sub_1000051A8(v215, v154[64]);
    v216 = *(void **)(v153 + 56);
    *(_QWORD *)(v153 + 56) = v215;
    v217 = *(_BYTE *)(v153 + 64);
    *(_BYTE *)(v153 + 64) = v214;
    sub_10000563C(v216, v217);
  }
  v221 = (void **)(v153 + 72);
  v222 = (void **)(v154 + 72);
  v223 = v154[80];
  if (*(unsigned __int8 *)(v153 + 80) == 255)
  {
    if (v223 == 255)
    {
      v229 = *v222;
      *(_BYTE *)(v153 + 80) = v154[80];
      *v221 = v229;
    }
    else
    {
      v227 = *v222;
      sub_1000051A8(v227, v154[80]);
      *(_QWORD *)(v153 + 72) = v227;
      *(_BYTE *)(v153 + 80) = v223;
    }
  }
  else if (v223 == 255)
  {
    sub_1000077A4(v153 + 72);
    v228 = v154[80];
    *v221 = *v222;
    *(_BYTE *)(v153 + 80) = v228;
  }
  else
  {
    v224 = *v222;
    sub_1000051A8(v224, v154[80]);
    v225 = *(void **)(v153 + 72);
    *(_QWORD *)(v153 + 72) = v224;
    v226 = *(_BYTE *)(v153 + 80);
    *(_BYTE *)(v153 + 80) = v223;
    sub_10000563C(v225, v226);
  }
  v230 = (void **)(v153 + 88);
  v231 = (void **)(v154 + 88);
  v232 = v154[96];
  if (*(unsigned __int8 *)(v153 + 96) == 255)
  {
    if (v232 == 255)
    {
      v238 = *v231;
      *(_BYTE *)(v153 + 96) = v154[96];
      *v230 = v238;
    }
    else
    {
      v236 = *v231;
      sub_1000051A8(v236, v154[96]);
      *(_QWORD *)(v153 + 88) = v236;
      *(_BYTE *)(v153 + 96) = v232;
    }
  }
  else if (v232 == 255)
  {
    sub_1000077A4(v153 + 88);
    v237 = v154[96];
    *v230 = *v231;
    *(_BYTE *)(v153 + 96) = v237;
  }
  else
  {
    v233 = *v231;
    sub_1000051A8(v233, v154[96]);
    v234 = *(void **)(v153 + 88);
    *(_QWORD *)(v153 + 88) = v233;
    v235 = *(_BYTE *)(v153 + 96);
    *(_BYTE *)(v153 + 96) = v232;
    sub_10000563C(v234, v235);
  }
  v239 = (void **)(v153 + 104);
  v240 = (void **)(v154 + 104);
  v241 = v154[112];
  if (*(unsigned __int8 *)(v153 + 112) == 255)
  {
    if (v241 == 255)
    {
      v247 = *v240;
      *(_BYTE *)(v153 + 112) = v154[112];
      *v239 = v247;
    }
    else
    {
      v245 = *v240;
      sub_1000051A8(v245, v154[112]);
      *(_QWORD *)(v153 + 104) = v245;
      *(_BYTE *)(v153 + 112) = v241;
    }
  }
  else if (v241 == 255)
  {
    sub_1000077A4(v153 + 104);
    v246 = v154[112];
    *v239 = *v240;
    *(_BYTE *)(v153 + 112) = v246;
  }
  else
  {
    v242 = *v240;
    sub_1000051A8(v242, v154[112]);
    v243 = *(void **)(v153 + 104);
    *(_QWORD *)(v153 + 104) = v242;
    v244 = *(_BYTE *)(v153 + 112);
    *(_BYTE *)(v153 + 112) = v241;
    sub_10000563C(v243, v244);
  }
  v248 = (void **)(v153 + 120);
  v249 = (void **)(v154 + 120);
  v250 = v154[128];
  if (*(unsigned __int8 *)(v153 + 128) == 255)
  {
    if (v250 == 255)
    {
      v256 = *v249;
      *(_BYTE *)(v153 + 128) = v154[128];
      *v248 = v256;
    }
    else
    {
      v254 = *v249;
      sub_1000051A8(v254, v154[128]);
      *(_QWORD *)(v153 + 120) = v254;
      *(_BYTE *)(v153 + 128) = v250;
    }
  }
  else if (v250 == 255)
  {
    sub_1000077A4(v153 + 120);
    v255 = v154[128];
    *v248 = *v249;
    *(_BYTE *)(v153 + 128) = v255;
  }
  else
  {
    v251 = *v249;
    sub_1000051A8(v251, v154[128]);
    v252 = *(void **)(v153 + 120);
    *(_QWORD *)(v153 + 120) = v251;
    v253 = *(_BYTE *)(v153 + 128);
    *(_BYTE *)(v153 + 128) = v250;
    sub_10000563C(v252, v253);
  }
  v22 = v163;
  *(_BYTE *)(v153 + 129) = v154[129];
  v257 = v36[11];
  v258 = v153 + v257;
  v259 = &v154[v257];
  v260 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v260 - 8) + 24))(v258, v259, v260);
  v261 = v36[12];
  v262 = (_QWORD *)(v153 + v261);
  v263 = &v154[v261];
  *v262 = *(_QWORD *)v263;
  v264 = *((_QWORD *)v263 + 1);
  v265 = v262[1];
  v262[1] = v264;
  swift_bridgeObjectRetain(v264);
  swift_bridgeObjectRelease(v265);
  *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
  *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
  *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
  v266 = v36[16];
  v267 = (_QWORD *)(v153 + v266);
  v268 = &v154[v266];
  *v267 = *(_QWORD *)v268;
  v269 = *((_QWORD *)v268 + 1);
  v270 = v267[1];
  v267[1] = v269;
  swift_bridgeObjectRetain(v269);
  swift_bridgeObjectRelease(v270);
LABEL_142:
  v271 = v18[14];
  v272 = *(void **)((char *)a1 + v271);
  v273 = *(void **)((char *)a2 + v271);
  *(_QWORD *)((char *)a1 + v271) = v273;
  v274 = v273;

  v275 = v18[15];
  v276 = (char *)a1 + v275;
  v277 = (char *)a2 + v275;
  v278 = type metadata accessor for URL(0);
  v279 = *(_QWORD *)(v278 - 8);
  v280 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v279 + 48);
  LODWORD(v272) = v280(v276, 1, v278);
  v281 = v280(v277, 1, v278);
  if ((_DWORD)v272)
  {
    if (!v281)
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v281)
  {
    (*(void (**)(char *, uint64_t))(v279 + 8))(v276, v278);
LABEL_147:
    v282 = sub_100005150(&qword_100081038);
    memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
    goto LABEL_148;
  }
  (*(void (**)(char *, char *, uint64_t))(v279 + 24))(v276, v277, v278);
LABEL_148:
  *((_BYTE *)a1 + v18[16]) = *((_BYTE *)a2 + v18[16]);
  v283 = v18[17];
  v284 = (char *)a1 + v283;
  v285 = (char *)a2 + v283;
  v286 = *(_QWORD *)v285;
  v284[8] = v285[8];
  *(_QWORD *)v284 = v286;
  v287 = v18[18];
  v288 = (char *)a1 + v287;
  v289 = (char *)a2 + v287;
  v290 = *(_QWORD *)v289;
  v288[8] = v289[8];
  *(_QWORD *)v288 = v290;
  v291 = v18[19];
  v292 = (char *)a1 + v291;
  v293 = (char *)a2 + v291;
  v294 = v354((char *)a1 + v291, 1, v22);
  v295 = v354(v293, 1, v22);
  if (v294)
  {
    if (!v295)
    {
      (*(void (**)(char *, char *, uint64_t))(v355 + 16))(v292, v293, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v355 + 56))(v292, 0, 1, v22);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v295)
  {
    (*(void (**)(char *, uint64_t))(v355 + 8))(v292, v22);
LABEL_153:
    v296 = sub_100005150(&qword_100081028);
    memcpy(v292, v293, *(_QWORD *)(*(_QWORD *)(v296 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(char *, char *, uint64_t))(v355 + 24))(v292, v293, v22);
LABEL_154:
  v297 = v18[20];
  v298 = (char *)a1 + v297;
  v299 = (char *)a2 + v297;
  v300 = v354((char *)a1 + v297, 1, v22);
  v301 = v354(v299, 1, v22);
  if (v300)
  {
    if (!v301)
    {
      (*(void (**)(char *, char *, uint64_t))(v355 + 16))(v298, v299, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v355 + 56))(v298, 0, 1, v22);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v301)
  {
    (*(void (**)(char *, uint64_t))(v355 + 8))(v298, v22);
LABEL_159:
    v302 = sub_100005150(&qword_100081028);
    memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(char *, char *, uint64_t))(v355 + 24))(v298, v299, v22);
LABEL_160:
  v303 = v18[21];
  v304 = (_QWORD *)((char *)a1 + v303);
  v305 = (char *)a2 + v303;
  v306 = *(_QWORD *)((char *)a1 + v303);
  v307 = *(_QWORD *)((char *)a2 + v303);
  if (v306)
  {
    if (v307)
    {
      *v304 = v307;
      swift_retain(v307);
      swift_release(v306);
      v308 = *((_QWORD *)v305 + 1);
      v309 = v304[1];
      v304[1] = v308;
      swift_retain(v308);
      swift_release(v309);
      v310 = *((_QWORD *)v305 + 2);
      v311 = v304[2];
      v304[2] = v310;
      swift_retain(v310);
      swift_release(v311);
    }
    else
    {
      sub_100007814((_QWORD *)((char *)a1 + v303));
      v314 = *((_QWORD *)v305 + 2);
      *(_OWORD *)v304 = *(_OWORD *)v305;
      v304[2] = v314;
    }
  }
  else if (v307)
  {
    *v304 = v307;
    v312 = *((_QWORD *)v305 + 1);
    v304[1] = v312;
    v313 = *((_QWORD *)v305 + 2);
    v304[2] = v313;
    swift_retain(v307);
    swift_retain(v312);
    swift_retain(v313);
  }
  else
  {
    v315 = *(_OWORD *)v305;
    v304[2] = *((_QWORD *)v305 + 2);
    *(_OWORD *)v304 = v315;
  }
  v316 = v18[22];
  v317 = (char *)a1 + v316;
  v318 = (char *)a2 + v316;
  v319 = sub_100005150(&qword_100081040);
  v320 = *(_QWORD *)(v319 - 8);
  v321 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v320 + 48);
  v322 = v321(v317, 1, v319);
  v323 = v321(v318, 1, v319);
  v357 = a2;
  if (v322)
  {
    if (!v323)
    {
      v324 = *(void (**)(char *, char *, uint64_t))(v355 + 16);
      v324(v317, v318, v22);
      v324(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v317, 0, 1, v319);
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (v323)
  {
    sub_10000F008((uint64_t)v317, &qword_100081040);
LABEL_175:
    v325 = sub_100005150(&qword_100081048);
    memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
    goto LABEL_176;
  }
  v350 = *(void (**)(char *, char *, uint64_t))(v355 + 24);
  v350(v317, v318, v22);
  v350(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
LABEL_176:
  v326 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v327 = v326[5];
  v328 = &v317[v327];
  v329 = &v318[v327];
  v330 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v330 - 8) + 24))(v328, v329, v330);
  v331 = v326[6];
  v332 = &v317[v331];
  v333 = &v318[v331];
  v334 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v335 = *(_QWORD *)(v334 - 8);
  v336 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v335 + 48);
  LODWORD(v328) = v336(v332, 1, v334);
  v337 = v336(v333, 1, v334);
  if (!(_DWORD)v328)
  {
    if (!v337)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 24))(v332, v333, v334);
      goto LABEL_182;
    }
    (*(void (**)(char *, uint64_t))(v335 + 8))(v332, v334);
    goto LABEL_181;
  }
  if (v337)
  {
LABEL_181:
    v338 = sub_100005150(&qword_100081050);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
    goto LABEL_182;
  }
  (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v332, v333, v334);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v332, 0, 1, v334);
LABEL_182:
  v339 = v326[7];
  v340 = &v317[v339];
  v341 = &v318[v339];
  *(_QWORD *)v340 = *(_QWORD *)v341;
  v342 = *((_QWORD *)v341 + 1);
  v343 = *((_QWORD *)v340 + 1);
  *((_QWORD *)v340 + 1) = v342;
  swift_bridgeObjectRetain(v342);
  swift_bridgeObjectRelease(v343);
  v344 = v326[8];
  v345 = &v317[v344];
  v346 = &v318[v344];
  *(_QWORD *)v345 = *(_QWORD *)v346;
  v347 = *((_QWORD *)v346 + 1);
  v348 = *((_QWORD *)v345 + 1);
  *((_QWORD *)v345 + 1) = v347;
  swift_bridgeObjectRetain(v347);
  swift_bridgeObjectRelease(v348);
  *(_QWORD *)((char *)a1 + *(int *)(v356 + 20)) = *(_QWORD *)((char *)v357 + *(int *)(v356 + 20));
  return a1;
}

uint64_t sub_10000C5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(_OWORD *, uint64_t, int *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(const void *, uint64_t);
  uint64_t v87;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v8 = v7[10];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v86 = *(unsigned int (**)(const void *, uint64_t))(v12 + 48);
  v87 = v11;
  if (v86(v10, 1))
  {
    v13 = sub_100005150(&qword_100081028);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v87);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v87);
  }
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  v14 = v7[12];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = (int *)type metadata accessor for ArtworkModel(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
  v85 = v18;
  if (v19(v16, 1, v17))
  {
    v20 = sub_100005150(&qword_100081030);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v16[1];
    *v15 = *v16;
    v15[1] = v21;
    *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
    *(_OWORD *)((char *)v15 + 40) = *(_OWORD *)((char *)v16 + 40);
    *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
    *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
    *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
    *(_OWORD *)((char *)v15 + 104) = *(_OWORD *)((char *)v16 + 104);
    *(_OWORD *)((char *)v15 + 88) = *(_OWORD *)((char *)v16 + 88);
    *(_OWORD *)((char *)v15 + 72) = *(_OWORD *)((char *)v16 + 72);
    *((_BYTE *)v15 + 129) = *((_BYTE *)v16 + 129);
    v22 = v17[11];
    v83 = a3;
    v84 = v12;
    v23 = (char *)v15 + v22;
    v24 = (char *)v16 + v22;
    v25 = type metadata accessor for ArtworkCrop(0);
    v26 = v23;
    v27 = v24;
    a3 = v83;
    v12 = v84;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v26, v27, v25);
    *(_OWORD *)((char *)v15 + v17[12]) = *(_OWORD *)((char *)v16 + v17[12]);
    *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
    *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
    *((_BYTE *)v15 + v17[15]) = *((_BYTE *)v16 + v17[15]);
    *(_OWORD *)((char *)v15 + v17[16]) = *(_OWORD *)((char *)v16 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v28 = v7[13];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  if (v19((_OWORD *)(a2 + v28), 1, v17))
  {
    v31 = sub_100005150(&qword_100081030);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    *(_OWORD *)((char *)v29 + 40) = *(_OWORD *)((char *)v30 + 40);
    *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
    *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
    *(_OWORD *)((char *)v29 + 113) = *(_OWORD *)((char *)v30 + 113);
    *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v30 + 104);
    *(_OWORD *)((char *)v29 + 88) = *(_OWORD *)((char *)v30 + 88);
    *(_OWORD *)((char *)v29 + 72) = *(_OWORD *)((char *)v30 + 72);
    *((_BYTE *)v29 + 129) = *((_BYTE *)v30 + 129);
    v33 = v17[11];
    v34 = v12;
    v35 = (char *)v29 + v33;
    v36 = a3;
    v37 = (char *)v30 + v33;
    v38 = type metadata accessor for ArtworkCrop(0);
    v39 = v35;
    v12 = v34;
    v40 = v37;
    a3 = v36;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v39, v40, v38);
    *(_OWORD *)((char *)v29 + v17[12]) = *(_OWORD *)((char *)v30 + v17[12]);
    *((_BYTE *)v29 + v17[13]) = *((_BYTE *)v30 + v17[13]);
    *((_BYTE *)v29 + v17[14]) = *((_BYTE *)v30 + v17[14]);
    *((_BYTE *)v29 + v17[15]) = *((_BYTE *)v30 + v17[15]);
    *(_OWORD *)((char *)v29 + v17[16]) = *(_OWORD *)((char *)v30 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v85 + 56))(v29, 0, 1, v17);
  }
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v41 = v7[15];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = sub_100005150(&qword_100081038);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  *(_BYTE *)(a1 + v7[16]) = *(_BYTE *)(a2 + v7[16]);
  v47 = v7[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = v7[19];
  v54 = (void *)(a1 + v53);
  v55 = (const void *)(a2 + v53);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v86)(a2 + v53, 1, v87))
  {
    v56 = sub_100005150(&qword_100081028);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v54, v55, v87);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v54, 0, 1, v87);
  }
  v57 = v7[20];
  v58 = (void *)(a1 + v57);
  v59 = (const void *)(a2 + v57);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v86)(a2 + v57, 1, v87))
  {
    v60 = sub_100005150(&qword_100081028);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v58, v59, v87);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v58, 0, 1, v87);
  }
  v61 = v7[21];
  v62 = a1 + v61;
  v63 = a2 + v61;
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  v64 = v7[22];
  v65 = (char *)(a1 + v64);
  v66 = (char *)(a2 + v64);
  v67 = sub_100005150(&qword_100081040);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    v69 = sub_100005150(&qword_100081048);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v70 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v70(v65, v66, v87);
    v70(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v87);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v71 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v72 = v71[5];
  v73 = &v65[v72];
  v74 = &v66[v72];
  v75 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v71[6];
  v77 = &v65[v76];
  v78 = &v66[v76];
  v79 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_100005150(&qword_100081050);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  *(_OWORD *)&v65[v71[7]] = *(_OWORD *)&v66[v71[7]];
  *(_OWORD *)&v65[v71[8]] = *(_OWORD *)&v66[v71[8]];
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_10000CC74(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  int v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  _OWORD *v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t);
  _QWORD *v146;
  int v147;
  int v148;
  void *v149;
  _QWORD *v150;
  int v151;
  int v152;
  void *v153;
  _QWORD *v154;
  int v155;
  int v156;
  void *v157;
  _QWORD *v158;
  int v159;
  int v160;
  void *v161;
  _QWORD *v162;
  int v163;
  int v164;
  void *v165;
  _QWORD *v166;
  int v167;
  int v168;
  void *v169;
  _QWORD *v170;
  int v171;
  int v172;
  void *v173;
  _QWORD *v174;
  int v175;
  int v176;
  void *v177;
  _QWORD *v178;
  int v179;
  int v180;
  void *v181;
  _QWORD *v182;
  int v183;
  int v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t (*v219)(char *, uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a1[6];
  a1[6] = a2[6];
  swift_release(v12);
  v13 = a2[8];
  v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = a2[10];
  v16 = a1[10];
  a1[9] = a2[9];
  a1[10] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v18 = v17[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  v219 = v23;
  v220 = a3;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100005150(&qword_100081028);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[11];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v17[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v218 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v218 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  v221 = v22;
  if (v38)
  {
    if (!v39)
    {
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_OWORD *)(v34 + 16) = v40;
      *(_BYTE *)(v34 + 32) = v35[32];
      *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
      *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
      *(_BYTE *)(v34 + 64) = v35[64];
      *(_OWORD *)(v34 + 113) = *(_OWORD *)(v35 + 113);
      *(_OWORD *)(v34 + 104) = *(_OWORD *)(v35 + 104);
      *(_OWORD *)(v34 + 88) = *(_OWORD *)(v35 + 88);
      *(_OWORD *)(v34 + 72) = *(_OWORD *)(v35 + 72);
      *(_BYTE *)(v34 + 129) = v35[129];
      v41 = v36[11];
      v42 = v34 + v41;
      v43 = &v35[v41];
      v44 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      *(_OWORD *)(v34 + v36[12]) = *(_OWORD *)&v35[v36[12]];
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      *(_OWORD *)(v34 + v36[16]) = *(_OWORD *)&v35[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v218 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_12:
    v45 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  v131 = *((_QWORD *)v35 + 1);
  v132 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v131;
  swift_bridgeObjectRelease(v132);
  v133 = v35 + 16;
  v134 = *(unsigned __int8 *)(v34 + 32);
  if (v134 != 255)
  {
    v135 = v35[32];
    if (v135 != 255)
    {
      v136 = *(_QWORD *)(v34 + 16);
      v137 = *(_QWORD *)(v34 + 24);
      *(_OWORD *)(v34 + 16) = *v133;
      *(_BYTE *)(v34 + 32) = v135;
      sub_100005624(v136, v137, v134);
      goto LABEL_69;
    }
    sub_100007770(v34 + 16);
  }
  *(_OWORD *)(v34 + 16) = *v133;
  *(_BYTE *)(v34 + 32) = v35[32];
LABEL_69:
  *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
  v146 = v35 + 56;
  v147 = *(unsigned __int8 *)(v34 + 64);
  if (v147 != 255)
  {
    v148 = v35[64];
    if (v148 != 255)
    {
      v149 = *(void **)(v34 + 56);
      *(_QWORD *)(v34 + 56) = *v146;
      *(_BYTE *)(v34 + 64) = v148;
      sub_10000563C(v149, v147);
      goto LABEL_79;
    }
    sub_1000077A4(v34 + 56);
  }
  *(_QWORD *)(v34 + 56) = *v146;
  *(_BYTE *)(v34 + 64) = v35[64];
LABEL_79:
  v154 = v35 + 72;
  v155 = *(unsigned __int8 *)(v34 + 80);
  if (v155 != 255)
  {
    v156 = v35[80];
    if (v156 != 255)
    {
      v157 = *(void **)(v34 + 72);
      *(_QWORD *)(v34 + 72) = *v154;
      *(_BYTE *)(v34 + 80) = v156;
      sub_10000563C(v157, v155);
      goto LABEL_89;
    }
    sub_1000077A4(v34 + 72);
  }
  *(_QWORD *)(v34 + 72) = *v154;
  *(_BYTE *)(v34 + 80) = v35[80];
LABEL_89:
  v162 = v35 + 88;
  v163 = *(unsigned __int8 *)(v34 + 96);
  if (v163 != 255)
  {
    v164 = v35[96];
    if (v164 != 255)
    {
      v165 = *(void **)(v34 + 88);
      *(_QWORD *)(v34 + 88) = *v162;
      *(_BYTE *)(v34 + 96) = v164;
      sub_10000563C(v165, v163);
      goto LABEL_99;
    }
    sub_1000077A4(v34 + 88);
  }
  *(_QWORD *)(v34 + 88) = *v162;
  *(_BYTE *)(v34 + 96) = v35[96];
LABEL_99:
  v170 = v35 + 104;
  v171 = *(unsigned __int8 *)(v34 + 112);
  if (v171 != 255)
  {
    v172 = v35[112];
    if (v172 != 255)
    {
      v173 = *(void **)(v34 + 104);
      *(_QWORD *)(v34 + 104) = *v170;
      *(_BYTE *)(v34 + 112) = v172;
      sub_10000563C(v173, v171);
      goto LABEL_109;
    }
    sub_1000077A4(v34 + 104);
  }
  *(_QWORD *)(v34 + 104) = *v170;
  *(_BYTE *)(v34 + 112) = v35[112];
LABEL_109:
  v178 = v35 + 120;
  v179 = *(unsigned __int8 *)(v34 + 128);
  if (v179 == 255)
  {
LABEL_118:
    *(_QWORD *)(v34 + 120) = *v178;
    *(_BYTE *)(v34 + 128) = v35[128];
    goto LABEL_119;
  }
  v180 = v35[128];
  if (v180 == 255)
  {
    sub_1000077A4(v34 + 120);
    goto LABEL_118;
  }
  v181 = *(void **)(v34 + 120);
  *(_QWORD *)(v34 + 120) = *v178;
  *(_BYTE *)(v34 + 128) = v180;
  sub_10000563C(v181, v179);
LABEL_119:
  *(_BYTE *)(v34 + 129) = v35[129];
  v186 = v36[11];
  v187 = v34 + v186;
  v188 = &v35[v186];
  v189 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v189 - 8) + 40))(v187, v188, v189);
  v190 = v36[12];
  v191 = (_QWORD *)(v34 + v190);
  v192 = &v35[v190];
  v194 = *(_QWORD *)v192;
  v193 = *((_QWORD *)v192 + 1);
  v195 = v191[1];
  *v191 = v194;
  v191[1] = v193;
  swift_bridgeObjectRelease(v195);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v196 = v36[16];
  v197 = (_QWORD *)(v34 + v196);
  v198 = &v35[v196];
  v200 = *(_QWORD *)v198;
  v199 = *((_QWORD *)v198 + 1);
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
LABEL_13:
  v46 = v17[13];
  v47 = (uint64_t)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = v37((uint64_t)a1 + v46, 1, v36);
  v50 = v37((uint64_t)v48, 1, v36);
  if (v49)
  {
    if (!v50)
    {
      v51 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v51;
      *(_BYTE *)(v47 + 32) = v48[32];
      *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
      *(_QWORD *)(v47 + 56) = *((_QWORD *)v48 + 7);
      *(_BYTE *)(v47 + 64) = v48[64];
      *(_OWORD *)(v47 + 113) = *(_OWORD *)(v48 + 113);
      *(_OWORD *)(v47 + 104) = *(_OWORD *)(v48 + 104);
      *(_OWORD *)(v47 + 88) = *(_OWORD *)(v48 + 88);
      *(_OWORD *)(v47 + 72) = *(_OWORD *)(v48 + 72);
      *(_BYTE *)(v47 + 129) = v48[129];
      v52 = v36[11];
      v53 = v47 + v52;
      v54 = &v48[v52];
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
      *(_OWORD *)(v47 + v36[12]) = *(_OWORD *)&v48[v36[12]];
      *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
      *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
      *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
      *(_OWORD *)(v47 + v36[16]) = *(_OWORD *)&v48[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v218 + 56))(v47, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    sub_10000EF80(v47, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_18:
    v56 = sub_100005150(&qword_100081030);
    memcpy((void *)v47, v48, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_19;
  }
  v138 = *((_QWORD *)v48 + 1);
  v139 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v47 + 8) = v138;
  swift_bridgeObjectRelease(v139);
  v140 = v48 + 16;
  v141 = *(unsigned __int8 *)(v47 + 32);
  if (v141 != 255)
  {
    v142 = v48[32];
    if (v142 != 255)
    {
      v143 = *(_QWORD *)(v47 + 16);
      v144 = *(_QWORD *)(v47 + 24);
      *(_OWORD *)(v47 + 16) = *v140;
      *(_BYTE *)(v47 + 32) = v142;
      sub_100005624(v143, v144, v141);
      goto LABEL_74;
    }
    sub_100007770(v47 + 16);
  }
  *(_OWORD *)(v47 + 16) = *v140;
  *(_BYTE *)(v47 + 32) = v48[32];
LABEL_74:
  *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
  v150 = v48 + 56;
  v151 = *(unsigned __int8 *)(v47 + 64);
  if (v151 != 255)
  {
    v152 = v48[64];
    if (v152 != 255)
    {
      v153 = *(void **)(v47 + 56);
      *(_QWORD *)(v47 + 56) = *v150;
      *(_BYTE *)(v47 + 64) = v152;
      sub_10000563C(v153, v151);
      goto LABEL_84;
    }
    sub_1000077A4(v47 + 56);
  }
  *(_QWORD *)(v47 + 56) = *v150;
  *(_BYTE *)(v47 + 64) = v48[64];
LABEL_84:
  v158 = v48 + 72;
  v159 = *(unsigned __int8 *)(v47 + 80);
  if (v159 != 255)
  {
    v160 = v48[80];
    if (v160 != 255)
    {
      v161 = *(void **)(v47 + 72);
      *(_QWORD *)(v47 + 72) = *v158;
      *(_BYTE *)(v47 + 80) = v160;
      sub_10000563C(v161, v159);
      goto LABEL_94;
    }
    sub_1000077A4(v47 + 72);
  }
  *(_QWORD *)(v47 + 72) = *v158;
  *(_BYTE *)(v47 + 80) = v48[80];
LABEL_94:
  v166 = v48 + 88;
  v167 = *(unsigned __int8 *)(v47 + 96);
  if (v167 != 255)
  {
    v168 = v48[96];
    if (v168 != 255)
    {
      v169 = *(void **)(v47 + 88);
      *(_QWORD *)(v47 + 88) = *v166;
      *(_BYTE *)(v47 + 96) = v168;
      sub_10000563C(v169, v167);
      goto LABEL_104;
    }
    sub_1000077A4(v47 + 88);
  }
  *(_QWORD *)(v47 + 88) = *v166;
  *(_BYTE *)(v47 + 96) = v48[96];
LABEL_104:
  v174 = v48 + 104;
  v175 = *(unsigned __int8 *)(v47 + 112);
  if (v175 != 255)
  {
    v176 = v48[112];
    if (v176 != 255)
    {
      v177 = *(void **)(v47 + 104);
      *(_QWORD *)(v47 + 104) = *v174;
      *(_BYTE *)(v47 + 112) = v176;
      sub_10000563C(v177, v175);
      goto LABEL_114;
    }
    sub_1000077A4(v47 + 104);
  }
  *(_QWORD *)(v47 + 104) = *v174;
  *(_BYTE *)(v47 + 112) = v48[112];
LABEL_114:
  v182 = v48 + 120;
  v183 = *(unsigned __int8 *)(v47 + 128);
  if (v183 == 255)
  {
LABEL_121:
    *(_QWORD *)(v47 + 120) = *v182;
    *(_BYTE *)(v47 + 128) = v48[128];
    goto LABEL_122;
  }
  v184 = v48[128];
  if (v184 == 255)
  {
    sub_1000077A4(v47 + 120);
    goto LABEL_121;
  }
  v185 = *(void **)(v47 + 120);
  *(_QWORD *)(v47 + 120) = *v182;
  *(_BYTE *)(v47 + 128) = v184;
  sub_10000563C(v185, v183);
LABEL_122:
  *(_BYTE *)(v47 + 129) = v48[129];
  v202 = v36[11];
  v203 = v47 + v202;
  v204 = &v48[v202];
  v205 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v205 - 8) + 40))(v203, v204, v205);
  v206 = v36[12];
  v207 = (_QWORD *)(v47 + v206);
  v208 = &v48[v206];
  v210 = *(_QWORD *)v208;
  v209 = *((_QWORD *)v208 + 1);
  v211 = v207[1];
  *v207 = v210;
  v207[1] = v209;
  swift_bridgeObjectRelease(v211);
  *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
  *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
  *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
  v212 = v36[16];
  v213 = (_QWORD *)(v47 + v212);
  v214 = &v48[v212];
  v216 = *(_QWORD *)v214;
  v215 = *((_QWORD *)v214 + 1);
  v217 = v213[1];
  *v213 = v216;
  v213[1] = v215;
  swift_bridgeObjectRelease(v217);
LABEL_19:
  v57 = v17[14];
  v58 = *(void **)((char *)a1 + v57);
  *(_QWORD *)((char *)a1 + v57) = *(_QWORD *)((char *)a2 + v57);

  v59 = v17[15];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    v67 = v221;
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v67 = v221;
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
LABEL_24:
    v68 = sub_100005150(&qword_100081038);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v60, v61, v62);
LABEL_25:
  *((_BYTE *)a1 + v17[16]) = *((_BYTE *)a2 + v17[16]);
  v69 = v17[17];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  v72 = v17[18];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v17[19];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = v219((char *)a1 + v75, 1, v21);
  v79 = v219(v77, 1, v21);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v76, v77, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v76, 0, 1, v21);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v76, v21);
LABEL_30:
    v80 = sub_100005150(&qword_100081028);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v76, v77, v21);
LABEL_31:
  v81 = v17[20];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = v219((char *)a1 + v81, 1, v21);
  v85 = v219(v83, 1, v21);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v82, v83, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v82, 0, 1, v21);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v82, v21);
LABEL_36:
    v86 = sub_100005150(&qword_100081028);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v82, v83, v21);
LABEL_37:
  v87 = v17[21];
  v88 = (_QWORD *)((char *)a1 + v87);
  v89 = (_QWORD *)((char *)a2 + v87);
  v90 = *(_QWORD *)((char *)a1 + v87);
  if (v90)
  {
    if (*v89)
    {
      *v88 = *v89;
      swift_release(v90);
      v91 = v88[1];
      v88[1] = v89[1];
      swift_release(v91);
      v92 = v88[2];
      v88[2] = v89[2];
      swift_release(v92);
      goto LABEL_42;
    }
    sub_100007814(v88);
  }
  *(_OWORD *)v88 = *(_OWORD *)v89;
  v88[2] = v89[2];
LABEL_42:
  v93 = v17[22];
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  v96 = sub_100005150(&qword_100081040);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  v222 = a2;
  if (v99)
  {
    if (!v100)
    {
      v101 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v101(v94, v95, v21);
      v101(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v100)
  {
    sub_10000F008((uint64_t)v94, &qword_100081040);
LABEL_47:
    v102 = sub_100005150(&qword_100081048);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_48;
  }
  v145 = *(void (**)(char *, char *, uint64_t))(v67 + 40);
  v145(v94, v95, v21);
  v145(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
LABEL_48:
  v103 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v104 = v103[5];
  v105 = &v94[v104];
  v106 = &v95[v104];
  v107 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 40))(v105, v106, v107);
  v108 = v103[6];
  v109 = &v94[v108];
  v110 = &v95[v108];
  v111 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  v114 = v113(v109, 1, v111);
  v115 = v113(v110, 1, v111);
  if (!v114)
  {
    v116 = v222;
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 40))(v109, v110, v111);
      goto LABEL_54;
    }
    (*(void (**)(char *, uint64_t))(v112 + 8))(v109, v111);
    goto LABEL_53;
  }
  v116 = v222;
  if (v115)
  {
LABEL_53:
    v117 = sub_100005150(&qword_100081050);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v109, v110, v111);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
LABEL_54:
  v118 = v103[7];
  v119 = &v94[v118];
  v120 = &v95[v118];
  v122 = *(_QWORD *)v120;
  v121 = *((_QWORD *)v120 + 1);
  v123 = *((_QWORD *)v119 + 1);
  *(_QWORD *)v119 = v122;
  *((_QWORD *)v119 + 1) = v121;
  swift_bridgeObjectRelease(v123);
  v124 = v103[8];
  v125 = &v94[v124];
  v126 = &v95[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  *(_QWORD *)((char *)a1 + *(int *)(v220 + 20)) = *(_QWORD *)((char *)v116 + *(int *)(v220 + 20));
  return a1;
}

uint64_t sub_10000DB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000DB1C);
}

uint64_t sub_10000DB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UpNextEntry.Episode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10000DB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000DB64);
}

uint64_t sub_10000DB64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UpNextEntry.Episode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for WidgetArtworkView(uint64_t a1)
{
  uint64_t result;

  result = qword_100081170;
  if (!qword_100081170)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetArtworkView);
  return result;
}

uint64_t sub_10000DBE0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UpNextEntry.Episode(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10000DC54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071A88, 1);
}

uint64_t sub_10000DC64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v1 = type metadata accessor for ColorScheme(0);
  v28 = *(_QWORD *)(v1 - 8);
  v29 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BlendMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005150(&qword_100081258);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005150(&qword_100081248);
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray4Color");
  v18 = Color.init(uiColor:)(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for BlendMode.plusLighter(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  sub_10000EF3C((uint64_t)v6, (uint64_t)&v13[*(int *)(v11 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v13 = v18;
  *((_WORD *)v13 + 4) = 256;
  swift_retain(v18);
  sub_10000EF80((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release(v18);
  sub_10000EFC4((uint64_t)v13, (uint64_t)v16, &qword_100081258);
  *(_QWORD *)&v16[*(int *)(v14 + 36)] = 0x3FB47AE147AE147BLL;
  sub_10000F008((uint64_t)v13, &qword_100081258);
  KeyPath = swift_getKeyPath(&unk_10006D368);
  v21 = v28;
  v20 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v3, enum case for ColorScheme.light(_:), v29);
  v22 = sub_100005150(&qword_100081238);
  v23 = v30;
  v24 = (uint64_t *)(v30 + *(int *)(v22 + 36));
  v25 = sub_100005150(&qword_100081278);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)v24 + *(int *)(v25 + 28), v3, v20);
  *v24 = KeyPath;
  sub_10000EFC4((uint64_t)v16, v23, &qword_100081248);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v20);
  return sub_10000F008((uint64_t)v16, &qword_100081248);
}

uint64_t sub_10000DF50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v66 = a2;
  v3 = type metadata accessor for AccessibilityTraits(0);
  v64 = *(_QWORD *)(v3 - 8);
  v65 = v3;
  __chkstk_darwin(v3);
  v63 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005150(&qword_100081298);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Image.ResizingMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100005150(&qword_1000812A0);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100005150(&qword_100081220);
  v17 = __chkstk_darwin(v69);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v58 = (char *)&v57 - v21;
  __chkstk_darwin(v20);
  v62 = (uint64_t)&v57 - v22;
  v67 = sub_100005150(&qword_1000812A8);
  __chkstk_darwin(v67);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100005150(&qword_100081238);
  __chkstk_darwin(v68);
  v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(int *)(type metadata accessor for UpNextEntry.Episode(0) + 56);
  v60 = a1;
  v28 = *(void **)(a1 + v27);
  if (v28)
  {
    v57 = v28;
    v29 = Image.init(uiImage:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for Image.ResizingMode.stretch(_:), v11);
    v30 = Image.resizable(capInsets:resizingMode:)(v14, v29, 0.0, 0.0, 0.0, 0.0);
    swift_release(v29);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    static WidgetAccentedRenderingMode.fullColor.getter(v31);
    v32 = type metadata accessor for WidgetAccentedRenderingMode(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v10, 0, 1, v32);
    Image.widgetAccentedRenderingMode(_:)(v10, v30);
    swift_release(v30);
    sub_10000F008((uint64_t)v10, &qword_100081298);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v33);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v60 + 56));
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v34);
    v35 = LocalizedStringKey.init(stringInterpolation:)(v7);
    v36 = Text.init(_:tableName:bundle:comment:)(v35);
    v38 = v37;
    v40 = v39;
    v42 = v41 & 1;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v36, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    v44 = v61;
    View.accessibility(label:)(v36, v38, v42, v40, v61, OpaqueTypeConformance2);
    sub_10000EEE8(v36, v38, v42);
    swift_bridgeObjectRelease(v40);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v16, v44);
    v46 = v63;
    static AccessibilityTraits.isImage.getter(v45);
    v47 = (uint64_t)v58;
    v48 = v69;
    ModifiedContent<>.accessibility(removeTraits:)(v46, v69);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v46, v65);
    v49 = &qword_100081220;
    sub_10000F008((uint64_t)v19, &qword_100081220);
    v50 = v62;
    sub_10000EEF8(v47, v62, &qword_100081220);
    sub_10000EFC4(v50, (uint64_t)v24, &qword_100081220);
    swift_storeEnumTagMultiPayload(v24, v67, 0);
    v51 = sub_10000ECC0();
    v52 = sub_10000ED80();
    _ConditionalContent<>.init(storage:)(v24, v48, v68, v51, v52);

    v53 = v50;
  }
  else
  {
    sub_10000DC64((uint64_t)v26);
    v49 = &qword_100081238;
    sub_10000EFC4((uint64_t)v26, (uint64_t)v24, &qword_100081238);
    swift_storeEnumTagMultiPayload(v24, v67, 1);
    v54 = sub_10000ECC0();
    v55 = sub_10000ED80();
    _ConditionalContent<>.init(storage:)(v24, v69, v68, v54, v55);
    v53 = (uint64_t)v26;
  }
  return sub_10000F008(v53, v49);
}

uint64_t sub_10000E474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = a2;
  v55 = sub_100005150(&qword_100081290);
  __chkstk_darwin(v55);
  v56 = (uint64_t)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Color.RGBColorSpace(0);
  v50 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v51 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v53);
  v6 = (char **)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005150(&qword_100081200);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005150(&qword_1000811F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005150(&qword_1000811E0);
  v14 = __chkstk_darwin(v13);
  v48 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - v16;
  v54 = sub_100005150(&qword_1000811D0);
  v18 = __chkstk_darwin(v54);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v49 = (uint64_t)&v48 - v21;
  v22 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for UpNextEntry.Episode(0) + 56));
  sub_10000DF50(a1, (uint64_t)v9);
  sub_10000EFC4((uint64_t)v9, (uint64_t)v12, &qword_100081200);
  v23 = &v12[*(int *)(v10 + 36)];
  *(_QWORD *)v23 = 0;
  *((_WORD *)v23 + 4) = 1;
  v24 = (uint64_t)v9;
  v25 = v13;
  sub_10000F008(v24, &qword_100081200);
  v26 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for WidgetArtworkView(0) + 20));
  v27 = (char *)v6 + *(int *)(v53 + 20);
  v28 = enum case for RoundedCornerStyle.continuous(_:);
  v29 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v27, v28, v29);
  *v6 = v26;
  v6[1] = v26;
  v30 = *(int *)(v13 + 36);
  if (v22)
  {
    v31 = &v17[v30];
    sub_10000EF3C((uint64_t)v6, (uint64_t)&v17[v30], (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)&v31[*(int *)(sub_100005150(&qword_100081288) + 36)] = 256;
    sub_10000EFC4((uint64_t)v12, (uint64_t)v17, &qword_1000811F0);
    sub_10000EF80((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    sub_10000F008((uint64_t)v12, &qword_1000811F0);
    v32 = v51;
    (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v51, enum case for Color.RGBColorSpace.sRGB(_:), v52);
    v33 = Color.init(_:white:opacity:)(v32, 0.0, 0.1);
    sub_10000EFC4((uint64_t)v17, (uint64_t)v20, &qword_1000811E0);
    v34 = v54;
    v35 = (uint64_t *)&v20[*(int *)(v54 + 36)];
    *v35 = v33;
    v35[1] = 0x4024000000000000;
    v35[2] = 0;
    v35[3] = 0;
    sub_10000F008((uint64_t)v17, &qword_1000811E0);
    v36 = v49;
    sub_10000EEF8((uint64_t)v20, v49, &qword_1000811D0);
    v37 = v56;
    sub_10000EFC4(v36, v56, &qword_1000811D0);
    swift_storeEnumTagMultiPayload(v37, v55, 0);
    v38 = sub_10000EA9C();
    v39 = sub_10000EAC0();
    _ConditionalContent<>.init(storage:)(v37, v34, v25, v38, v39);
    v40 = v36;
    v41 = &qword_1000811D0;
  }
  else
  {
    v42 = (uint64_t)v48;
    v43 = &v48[v30];
    sub_10000EF3C((uint64_t)v6, (uint64_t)&v48[v30], (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)&v43[*(int *)(sub_100005150(&qword_100081288) + 36)] = 256;
    sub_10000EFC4((uint64_t)v12, v42, &qword_1000811F0);
    sub_10000EF80((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    sub_10000F008((uint64_t)v12, &qword_1000811F0);
    sub_10000EEF8(v42, (uint64_t)v17, &qword_1000811E0);
    v44 = v56;
    sub_10000EFC4((uint64_t)v17, v56, &qword_1000811E0);
    swift_storeEnumTagMultiPayload(v44, v55, 1);
    v45 = sub_10000EA9C();
    v46 = sub_10000EAC0();
    _ConditionalContent<>.init(storage:)(v44, v54, v25, v45, v46);
    v40 = (uint64_t)v17;
    v41 = &qword_1000811E0;
  }
  return sub_10000F008(v40, v41);
}

uint64_t sub_10000E978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v6;

  v1 = sub_100005150(&qword_1000811A8);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E474(v0, (uint64_t)v3);
  v4 = sub_10000EA18();
  View.unredacted()(v1, v4);
  return sub_10000F008((uint64_t)v3, &qword_1000811A8);
}

unint64_t sub_10000EA18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000811B0;
  if (!qword_1000811B0)
  {
    v1 = sub_10000950C(&qword_1000811A8);
    sub_10000EC50(&qword_1000811B8, &qword_1000811C0, (void (*)(void))sub_10000EA9C, (void (*)(void))sub_10000EAC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000811B0);
  }
  return result;
}

uint64_t sub_10000EA9C()
{
  return sub_10000EB64(&qword_1000811C8, &qword_1000811D0, (void (*)(void))sub_10000EAC0);
}

unint64_t sub_10000EAC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000811D8;
  if (!qword_1000811D8)
  {
    v1 = sub_10000950C(&qword_1000811E0);
    sub_10000EB64(&qword_1000811E8, &qword_1000811F0, (void (*)(void))sub_10000EBCC);
    sub_10000EEA8(&qword_100081280, &qword_100081288, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000811D8);
  }
  return result;
}

uint64_t sub_10000EB64(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000950C(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000EBCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000811F8;
  if (!qword_1000811F8)
  {
    v1 = sub_10000950C(&qword_100081200);
    sub_10000EC50(&qword_100081208, &qword_100081210, (void (*)(void))sub_10000ECC0, (void (*)(void))sub_10000ED80);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000811F8);
  }
  return result;
}

uint64_t sub_10000EC50(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000950C(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000ECC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081218;
  if (!qword_100081218)
  {
    v1 = sub_10000950C(&qword_100081220);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    sub_10000ED38();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081218);
  }
  return result;
}

unint64_t sub_10000ED38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081228;
  if (!qword_100081228)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_100081228);
  }
  return result;
}

unint64_t sub_10000ED80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081230;
  if (!qword_100081230)
  {
    v1 = sub_10000950C(&qword_100081238);
    sub_10000EB64(&qword_100081240, &qword_100081248, (void (*)(void))sub_10000EE24);
    sub_10000EEA8(&qword_100081270, &qword_100081278, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081230);
  }
  return result;
}

unint64_t sub_10000EE24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081250;
  if (!qword_100081250)
  {
    v1 = sub_10000950C(&qword_100081258);
    sub_10000EEA8(&qword_100081260, &qword_100081268, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081250);
  }
  return result;
}

uint64_t sub_10000EEA8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000950C(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000EEE8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10000EEF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005150(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000EF3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000EF80(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000EFC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005150(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000F008(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100005150(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000F044()
{
  _QWORD v1[2];

  v1[0] = sub_10000950C(&qword_1000811A8);
  v1[1] = sub_10000EA18();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for EpisodeListView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for EpisodeListView(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t initializeWithCopy for EpisodeListView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for EpisodeListView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 initializeWithTake for EpisodeListView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for EpisodeListView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  return a1;
}

uint64_t getEnumTagSinglePayload for EpisodeListView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EpisodeListView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EpisodeListView()
{
  return &type metadata for EpisodeListView;
}

uint64_t sub_10000F268(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071ACC, 1);
}

uint64_t sub_10000F278@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *v1;
  v4 = v1[1];
  result = sub_10000F364(v4, *v1);
  v9 = (v8 >> 1) - v7;
  if (__OFSUB__(v8 >> 1, v7))
  {
    __break(1u);
    goto LABEL_8;
  }
  v10 = v6;
  v11 = v4 - v9;
  if (__OFSUB__(v4, v9))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v12 = result;
  v13 = v7;
  v14 = v8;
  if (v11 < 1)
    v15 = (int64_t *)&_swiftEmptyArrayStorage;
  else
    v15 = sub_1000248FC(0, v11);
  v16 = v1[3];
  v17 = swift_bridgeObjectRetain(v3);
  *(_QWORD *)a1 = static HorizontalAlignment.center.getter(v17);
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = 0;
  v18 = sub_100005150(&qword_1000812B0);
  sub_10000F3D4(v12, v10, v13, v14, (uint64_t)v1, (uint64_t)v15, (char *)(a1 + *(int *)(v18 + 44)));
  swift_bridgeObjectRelease(v15);
  return swift_unknownObjectRelease(v12);
}

uint64_t sub_10000F364(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      type metadata accessor for UpNextEntry.Episode(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10000F3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  _QWORD v52[4];

  v51 = a7;
  v50 = sub_100005150(&qword_1000812B8);
  v48 = *(_QWORD *)(v50 - 8);
  v13 = __chkstk_darwin(v50);
  v49 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v46 - v15;
  v17 = sub_100005150(&qword_1000812C0);
  v47 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v46 - v21;
  v52[0] = a1;
  v52[1] = a2;
  v52[2] = a3;
  v52[3] = a4;
  v23 = swift_allocObject(&unk_10007E040, 56, 7);
  v24 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v23 + 16) = *(_OWORD *)a5;
  *(_OWORD *)(v23 + 32) = v24;
  *(_QWORD *)(v23 + 48) = *(_QWORD *)(a5 + 32);
  swift_unknownObjectRetain(a1, v25);
  sub_10000FB84((_QWORD *)a5);
  v26 = sub_100005150(&qword_1000812C8);
  v27 = type metadata accessor for EpisodeRowView(0);
  v28 = sub_10000EEA8(&qword_1000812D0, &qword_1000812C8, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
  v29 = sub_10000FBAC(&qword_1000812D8, type metadata accessor for EpisodeRowView, (uint64_t)&unk_10006DD30);
  v30 = sub_10000FBAC(&qword_1000812E0, type metadata accessor for UpNextEntry.Episode, (uint64_t)&unk_10006DAB8);
  v46 = v22;
  ForEach<>.init(_:content:)(v52, sub_10000FB7C, v23, v26, &type metadata for String, v27, v28, v29, v30);
  v52[0] = a6;
  KeyPath = swift_getKeyPath(&unk_10006D410);
  swift_bridgeObjectRetain(a6);
  v32 = sub_100005150(&qword_1000812E8);
  v33 = sub_10000EEA8(&qword_1000812F0, &qword_1000812E8, (uint64_t)&protocol conformance descriptor for [A]);
  v34 = v16;
  ForEach<>.init(_:id:content:)(v52, KeyPath, sub_10000FAFC, 0, v32, &type metadata for Color, v33, &protocol witness table for Int, &protocol witness table for Color);
  v35 = v47;
  v36 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v36(v20, v22, v17);
  v38 = v48;
  v37 = v49;
  v39 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v40 = v50;
  v39(v49, v34, v50);
  v41 = v51;
  v36(v51, v20, v17);
  v42 = sub_100005150(&qword_1000812F8);
  v39(&v41[*(int *)(v42 + 48)], v37, v40);
  v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v34, v40);
  v44 = *(void (**)(char *, uint64_t))(v35 + 8);
  v44(v46, v17);
  v43(v37, v40);
  return ((uint64_t (*)(char *, uint64_t))v44)(v20, v17);
}

uint64_t sub_10000F718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  _QWORD *v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  double v34;
  char *v35;
  uint64_t v36;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a3;
  v40 = sub_100005150(&qword_100081300);
  __chkstk_darwin(v40);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005150(&qword_100081308);
  v8 = __chkstk_darwin(v7);
  v39 = (_QWORD **)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v38 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v38 - v13;
  v15 = type metadata accessor for UpNextEntry.Episode(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v38 = (_QWORD **)((char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v20 = (char *)&v38 - v19;
  v21 = (int *)type metadata accessor for EpisodeRowView(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v20;
  sub_10000FBEC(a1, (uint64_t)v20);
  sub_10000FBEC(a1, (uint64_t)v14);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v25 = 1;
  v24(v14, 0, 1, v15);
  v42 = a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 16))
  {
    sub_10000FBEC(*(_QWORD *)a2 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), (uint64_t)v12);
    v25 = 0;
  }
  v24(v12, v25, 1, v15);
  v26 = (uint64_t)&v6[*(int *)(v40 + 48)];
  sub_10000FC30((uint64_t)v14, (uint64_t)v6);
  sub_10000FC30((uint64_t)v12, v26);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v27((uint64_t)v6, 1, v15) != 1)
  {
    v28 = v39;
    sub_10000FC30((uint64_t)v6, (uint64_t)v39);
    if (v27(v26, 1, v15) != 1)
    {
      v29 = v38;
      sub_10000FC78(v26, (uint64_t)v38, type metadata accessor for UpNextEntry.Episode);
      v30 = sub_100021918(v28, v29);
      sub_10000FCBC((uint64_t)v29);
      sub_10000F008((uint64_t)v12, &qword_100081308);
      sub_10000F008((uint64_t)v14, &qword_100081308);
      sub_10000FCBC((uint64_t)v28);
      sub_10000F008((uint64_t)v6, &qword_100081308);
      if ((v30 & 1) != 0)
        goto LABEL_10;
LABEL_11:
      v32 = 2;
      v31 = v42;
      goto LABEL_12;
    }
    sub_10000F008((uint64_t)v12, &qword_100081308);
    sub_10000F008((uint64_t)v14, &qword_100081308);
    sub_10000FCBC((uint64_t)v28);
LABEL_8:
    sub_10000F008((uint64_t)v6, &qword_100081300);
    goto LABEL_11;
  }
  sub_10000F008((uint64_t)v12, &qword_100081308);
  sub_10000F008((uint64_t)v14, &qword_100081308);
  if (v27(v26, 1, v15) != 1)
    goto LABEL_8;
  sub_10000F008((uint64_t)v6, &qword_100081308);
LABEL_10:
  v31 = v42;
  v32 = *(_BYTE *)(v42 + 16);
LABEL_12:
  v33 = *(_QWORD *)(v31 + 32);
  v34 = *(double *)(v31 + 24) * 0.5;
  sub_10000FC78((uint64_t)v41, (uint64_t)v23, type metadata accessor for UpNextEntry.Episode);
  *(_QWORD *)&v23[v21[5]] = v33;
  v23[v21[6]] = v32;
  v35 = &v23[v21[7]];
  v36 = type metadata accessor for EpisodeViewStyle(0);
  swift_storeEnumTagMultiPayload(v35, v36, 2);
  *(double *)&v23[v21[8]] = v34;
  return sub_10000FC78((uint64_t)v23, v43, type metadata accessor for EpisodeRowView);
}

uint64_t sub_10000FAFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Color.clear.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10000FB20@<X0>(uint64_t a1@<X8>)
{
  return sub_10000F278(a1);
}

uint64_t sub_10000FB58()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10000FB7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000F718(a1, v2 + 16, a2);
}

_QWORD *sub_10000FB84(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_10000FBAC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000FBEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UpNextEntry.Episode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000FC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_100081308);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000FC78(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000FCBC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UpNextEntry.Episode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000FCF8()
{
  return sub_10000EEA8(&qword_100081310, &qword_100081318, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

unint64_t sub_10000FD28()
{
  unint64_t result;

  result = qword_100081320;
  if (!qword_100081320)
  {
    result = swift_getWitnessTable(&unk_10006D458, &type metadata for PlayPauseWidgetIntent);
    atomic_store(result, (unint64_t *)&qword_100081320);
  }
  return result;
}

unint64_t sub_10000FD74()
{
  unint64_t result;

  result = qword_100081328;
  if (!qword_100081328)
  {
    result = swift_getWitnessTable(&unk_10006D510, &type metadata for PlayPauseWidgetIntent);
    atomic_store(result, (unint64_t *)&qword_100081328);
  }
  return result;
}

unint64_t sub_10000FDBC()
{
  unint64_t result;

  result = qword_100081330;
  if (!qword_100081330)
  {
    result = swift_getWitnessTable(&unk_10006D538, &type metadata for PlayPauseWidgetIntent);
    atomic_store(result, (unint64_t *)&qword_100081330);
  }
  return result;
}

uint64_t sub_10000FE00(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071B10, 1);
}

uint64_t sub_10000FE10(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100009418();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10000FE50()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100010838(v0, qword_100085720);
  sub_100010820(v0, (uint64_t)qword_100085720);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000011, 0x800000010006FBA0);
}

uint64_t sub_10000FEB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = a1;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000FF10, 0, 0);
}

uint64_t sub_10000FF10()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = static Logger.widget.getter();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "This should never be called, this should run in app", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 24);

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  static IntentResult.result<>()(v8);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000FFEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100080F60 != -1)
    swift_once(&qword_100080F60, sub_10000FE50);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_100010820(v2, (uint64_t)qword_100085720);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100010064()
{
  return 0;
}

uint64_t sub_100010074(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10008137C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000100C4;
  return sub_10000FEB0(a1);
}

uint64_t sub_1000100C4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001010C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_100010434();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_100010134(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100009418();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t sub_10001015C()
{
  return sub_1000103A4();
}

uint64_t destroy for PlayPauseWidgetIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[2]);
}

uint64_t *_s14PodcastsWidget21PlayPauseWidgetIntentVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for PlayPauseWidgetIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for PlayPauseWidgetIntent(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for PlayPauseWidgetIntent(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayPauseWidgetIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayPauseWidgetIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayPauseWidgetIntent()
{
  return &type metadata for PlayPauseWidgetIntent;
}

unint64_t sub_100010358()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081340;
  if (!qword_100081340)
  {
    v1 = sub_10000950C(&qword_100081348);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_100081340);
  }
  return result;
}

uint64_t sub_1000103A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v6;
  uint64_t v7;

  IntentParameter.wrappedValue.getter(&v6);
  v1 = v6;
  v0 = v7;
  IntentParameter.wrappedValue.getter(&v6);
  v2 = v7;
  if (v1 == v6 && v0 == v7)
  {
    v4 = 1;
    v2 = v0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v0);
  }
  swift_bridgeObjectRelease(v0);
  swift_bridgeObjectRelease(v2);
  return v4 & 1;
}

uint64_t sub_100010434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *);
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = v0;
  __chkstk_darwin(v0);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005150(&qword_100081350);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005150(&qword_100081358);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005150(&qword_100081360);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v40 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005150(&qword_100081368);
  LocalizedStringResource.init(stringLiteral:)(0, 0xE000000000000000);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v36(v13, 1, 1, v14);
  v35 = type metadata accessor for String.IntentInputOptions(0);
  v43 = 0;
  v44 = 0;
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v18 = v10;
  v38(v10, 1, 1, v35);
  v39 = type metadata accessor for IntentDialog(0);
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56);
  v19 = v7;
  v34(v7, 1, 1, v39);
  v42 = enum case for InputConnectionBehavior.default(_:);
  v41 = *(void (**)(char *))(v1 + 104);
  v32 = v4;
  v33 = v2;
  v20 = v2;
  v41(v4);
  v21 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v17, v13, &v43, v10, v7, v4);
  v37 = v21;
  sub_100005150(&qword_100081370);
  swift_retain(v21);
  LocalizedStringResource.init(stringLiteral:)(0, 0xE000000000000000);
  v22 = v36;
  v36(v13, 1, 1, v40);
  v43 = 0;
  v44 = 0;
  v23 = v35;
  v38(v18, 1, 1, v35);
  v24 = v7;
  v25 = v34;
  v34(v24, 1, 1, v39);
  v26 = v32;
  ((void (*)(char *, _QWORD, uint64_t))v41)(v32, v42, v20);
  v27 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v17, v13, &v43, v18, v19, v26);
  swift_retain(v27);
  LocalizedStringResource.init(stringLiteral:)(0, 0xE000000000000000);
  v22(v13, 1, 1, v40);
  v43 = 0;
  v44 = 0;
  v38(v18, 1, 1, v23);
  v25(v19, 1, 1, v39);
  ((void (*)(char *, _QWORD, uint64_t))v41)(v26, v42, v33);
  v28 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v17, v13, &v43, v18, v19, v26);
  v43 = 0;
  v44 = 0xE000000000000000;
  v29 = v37;
  swift_retain(v37);
  swift_retain(v27);
  swift_retain(v28);
  IntentParameter.wrappedValue.setter(&v43);
  swift_release(v28);
  swift_release_n(v27, 2);
  swift_release_n(v29, 2);
  return v29;
}

uint64_t sub_100010820(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_100010838(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100010878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *);
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v43 = a5;
  v44 = a6;
  v41 = a3;
  v42 = a4;
  v39 = a1;
  v40 = a2;
  v50 = type metadata accessor for InputConnectionBehavior(0);
  v6 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_100081350);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_100081358);
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005150(&qword_100081360);
  __chkstk_darwin(v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LocalizedStringResource(0);
  v19 = *(_QWORD *)(v18 - 8);
  v51 = v18;
  __chkstk_darwin(v18);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005150(&qword_100081368);
  LocalizedStringResource.init(stringLiteral:)(0, 0xE000000000000000);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v22(v17, 1, 1, v18);
  v45 = type metadata accessor for String.IntentInputOptions(0);
  v52 = 0;
  v53 = 0;
  v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v47(v14, 1, 1, v45);
  v38 = type metadata accessor for IntentDialog(0);
  v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
  v49(v11, 1, 1, v38);
  v48 = enum case for InputConnectionBehavior.default(_:);
  v46 = *(void (**)(char *))(v6 + 104);
  v23 = v8;
  v37 = v8;
  v24 = v8;
  v25 = v50;
  v46(v24);
  v26 = v11;
  v27 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v21, v17, &v52, v14, v11, v23);
  sub_100005150(&qword_100081370);
  swift_retain(v27);
  LocalizedStringResource.init(stringLiteral:)(0, 0xE000000000000000);
  v28 = v17;
  v22(v17, 1, 1, v51);
  v52 = 0;
  v53 = 0;
  v47(v14, 1, 1, v45);
  v29 = v11;
  v30 = v38;
  v49(v29, 1, 1, v38);
  v31 = v37;
  ((void (*)(char *, _QWORD, uint64_t))v46)(v37, v48, v25);
  v32 = v26;
  v33 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v21, v28, &v52, v14, v26, v31);
  swift_retain(v33);
  LocalizedStringResource.init(stringLiteral:)(0, 0xE000000000000000);
  v22(v28, 1, 1, v51);
  v52 = 0;
  v53 = 0;
  v47(v14, 1, 1, v45);
  v49(v32, 1, 1, v30);
  ((void (*)(char *, _QWORD, uint64_t))v46)(v31, v48, v50);
  v34 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v21, v28, &v52, v14, v32, v31);
  v52 = v39;
  v53 = v40;
  swift_retain(v27);
  swift_retain(v33);
  swift_retain(v34);
  IntentParameter.wrappedValue.setter(&v52);
  swift_release(v33);
  swift_release(v27);
  v52 = v41;
  v53 = v42;
  swift_retain(v27);
  swift_retain(v33);
  swift_retain(v34);
  IntentParameter.wrappedValue.setter(&v52);
  swift_release(v34);
  swift_release(v33);
  swift_release(v27);
  v52 = v43;
  v53 = v44;
  swift_retain(v27);
  swift_retain(v33);
  swift_retain(v34);
  IntentParameter.wrappedValue.setter(&v52);
  swift_release_n(v34, 2);
  swift_release_n(v33, 2);
  swift_release_n(v27, 2);
  return v27;
}

uint64_t sub_100010CFC(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a1;
  v37 = type metadata accessor for Text.DateStyle.UnitsConfiguration.Style(0, a2);
  v2 = *(_QWORD *)(v37 - 8);
  v3 = __chkstk_darwin(v37);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Text.DateStyle.UnitsConfiguration(0, v3);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ContentTransition(0);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Text.DateStyle(0, v9);
  __chkstk_darwin(v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = PlayButtonTimeFormatHelper.formatStyle.getter(v17);
  v21 = static PlayButtonTimeFormatHelper.FormatStyle.== infix(_:_:)(v20, 0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v39, v15);
  if ((v21 & 1) != 0)
  {
    static Text.DateStyle.timer.getter(v22);
  }
  else
  {
    v24 = PlayButtonTimeFormatHelper.formatStyle.getter(v23);
    v25 = PlayButtonTimeFormatHelper.FormatStyle.calendarUnits.getter(v24);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for Text.DateStyle.UnitsConfiguration.Style.short(_:), v37);
    Text.DateStyle.UnitsConfiguration.init(units:style:)(v25, v5);
    static Text.DateStyle.relative(unitConfiguration:)(v7);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v38);
  }
  v26 = Text.init(_:style:)(v19, v14);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  static ContentTransition.identity.getter(v26);
  v33 = Text.contentTransition(_:)(v11, v26, v28, v32, v30);
  sub_10000EEE8(v26, v28, v32);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v41);
  return v33;
}

uint64_t sub_100010F68()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v0 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0);
  v58 = *(_QWORD *)(v0 - 8);
  v59 = v0;
  v1 = __chkstk_darwin(v0);
  v57 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for FloatingPointRoundingRule(0, v1);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0, v4);
  v54 = *(_QWORD *)(v56 - 8);
  v7 = __chkstk_darwin(v56);
  v52 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0, v7);
  v50 = *(_QWORD *)(v9 - 8);
  v51 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for Duration.UnitsFormatStyle(0, v10);
  v53 = *(_QWORD *)(v55 - 8);
  v13 = __chkstk_darwin(v55);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0, v13);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Duration.TimeFormatStyle(0, v18);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = PlayButtonTimeFormatHelper.formatStyle.getter(v23);
  v27 = static PlayButtonTimeFormatHelper.FormatStyle.== infix(_:_:)(v26, 0);
  if ((v27 & 1) != 0)
  {
    v28 = PlayButtonTimeFormatHelper.timeLeft.getter(v27);
    v29 = static Duration.seconds(_:)(v28);
    v31 = v30;
    static Duration.TimeFormatStyle.Pattern.minuteSecond.getter();
    static FormatStyle<>.time(pattern:)(v20);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    v32 = sub_10000FBAC(&qword_100081388, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.TimeFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
    Duration.formatted<A>(_:)(&v60, v25, v29, v31, v21, v32);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  }
  else
  {
    v33 = PlayButtonTimeFormatHelper.timeLeft.getter(v27);
    v34 = static Duration.seconds(_:)(v33);
    v36 = v35;
    v38 = PlayButtonTimeFormatHelper.formatStyle.getter(v37);
    v39 = PlayButtonTimeFormatHelper.FormatStyle.formatStyleUnits.getter(v38);
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    v41 = v48;
    v40 = v49;
    (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v6, enum case for FloatingPointRoundingRule.down(_:), v49);
    v42 = v52;
    static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)(v6);
    v43 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v6, v40);
    v44 = v57;
    static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v43);
    static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)(v39, v12, 0, 1, v44, 0, 1, v42);
    swift_bridgeObjectRelease(v39);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v44, v59);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v56);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v51);
    v45 = sub_10000FBAC(&qword_100081380, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
    v46 = v55;
    Duration.formatted<A>(_:)(&v60, v15, v34, v36, v55, v45);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v15, v46);
  }
  return v60;
}

void sub_1000112F4(char a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;

  v2 = type metadata accessor for Locale(0);
  v3 = __chkstk_darwin(v2);
  v4 = type metadata accessor for String.LocalizationValue(0, v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_100011390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v4;

  v2 = ((uint64_t (*)(uint64_t, unint64_t))String.LocalizationValue.init(stringLiteral:))(858995251, 0xE400000000000000);
  ((void (*)(uint64_t))static Locale.current.getter)(v2);
  v4 = 2;
  return ((uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, const char *, uint64_t, __int16))String.init(localized:defaultValue:table:bundle:locale:comment:))("H:MM", 4, 2, v1, 0, 0, 0, v0, "This should be the widest string in the language for this time format (under 4 minutes)", 87, v4);
}

uint64_t sub_100011574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  unsigned int (*v34)(_BYTE *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v37;
  double v38;
  uint64_t v39;
  void (*v40)(_BYTE *, uint64_t);
  void (*v41)(_BYTE *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD);
  _BYTE *v45;
  _QWORD *v46;
  void (*v47)(_QWORD);
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int (*v59)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v60;
  void (*v61)(_BYTE *, uint64_t);
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  char v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  _BYTE v80[12];
  unsigned int v81;
  void (*v82)(_BYTE *, _QWORD, uint64_t);
  unsigned int v83;
  void (*v84)(_BYTE *, _QWORD, uint64_t);
  unsigned int v85;
  void (*v86)(_BYTE *, _QWORD, uint64_t);
  unsigned int (*v87)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  _QWORD *v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;

  v105 = a1;
  v101 = type metadata accessor for Calendar.SearchDirection(0);
  v95 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v100 = &v80[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v99 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v94 = *(_QWORD **)(v99 - 8);
  __chkstk_darwin(v99);
  v96 = &v80[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v102 = type metadata accessor for Calendar.MatchingPolicy(0);
  v7 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v9 = &v80[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Calendar(0);
  v97 = *(_QWORD *)(v10 - 8);
  v98 = v10;
  __chkstk_darwin(v10);
  v104 = &v80[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100005150(&qword_100081028);
  v13 = __chkstk_darwin(v12);
  v93 = &v80[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v13);
  v17 = &v80[-v16];
  __chkstk_darwin(v15);
  v19 = &v80[-v18];
  v20 = type metadata accessor for Date(0);
  v106 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = __chkstk_darwin(&v80[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  v23 = __chkstk_darwin(v22);
  v24 = __chkstk_darwin(v23);
  v25 = __chkstk_darwin(v24);
  v27 = &v80[-v26];
  v28 = __chkstk_darwin(v25);
  v33 = &v80[-v32];
  if (!*(_QWORD *)(a2 + 16))
    return TimelineEntryRelevance.init(score:duration:)(v28, 0.0, 0.0);
  v89 = v28;
  v90 = v31;
  v91 = v30;
  v92 = v29;
  v103 = a3;
  sub_100017510(a2, (uint64_t)v19);
  v34 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v106 + 48);
  if (v34(v19, 1, v20) == 1)
  {
    sub_100011D00((uint64_t)v19);
    v35 = v105;
  }
  else
  {
    v37 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v106 + 32))(v33, v19, v20);
    Date.addingTimeInterval(_:)(v37, 300.0);
    v35 = v105;
    if ((static Date.> infix(_:_:)(v27, v105) & 1) != 0)
    {
      v38 = Date.timeIntervalSince(_:)(v27);
      TimelineEntryRelevance.init(score:duration:)(v39, 3.0, v38);
      v40 = *(void (**)(_BYTE *, uint64_t))(v106 + 8);
      v40(v27, v20);
      return ((uint64_t (*)(_BYTE *, uint64_t))v40)(v33, v20);
    }
    v88 = v17;
    v41 = *(void (**)(_BYTE *, uint64_t))(v106 + 8);
    v41(v27, v20);
    v41(v33, v20);
    v17 = v88;
  }
  v42 = v101;
  v43 = sub_100011D40(v35, a2);
  if ((v43 & 1) == 0)
    return TimelineEntryRelevance.init(score:duration:)(v43, 1.0, 0.0);
  static Calendar.current.getter(v43);
  v44 = *(void (**)(_QWORD))(v7 + 104);
  v85 = enum case for Calendar.MatchingPolicy.nextTime(_:);
  v86 = (void (*)(_BYTE *, _QWORD, uint64_t))v44;
  v44(v9);
  v88 = (_BYTE *)v7;
  v45 = v9;
  v46 = v94;
  v47 = (void (*)(_QWORD))v94[13];
  v48 = v42;
  v49 = v96;
  v83 = enum case for Calendar.RepeatedTimePolicy.first(_:);
  v50 = v99;
  v84 = (void (*)(_BYTE *, _QWORD, uint64_t))v47;
  v47(v96);
  v87 = v34;
  v51 = v95;
  v52 = *(void (**)(_QWORD))(v95 + 104);
  v101 = v20;
  v53 = v100;
  v81 = enum case for Calendar.SearchDirection.forward(_:);
  v82 = (void (*)(_BYTE *, _QWORD, uint64_t))v52;
  v52(v100);
  Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)(7, 0, 0, v35, v45, v49, v53);
  v54 = v48;
  v55 = v53;
  v56 = v101;
  v95 = *(_QWORD *)(v51 + 8);
  ((void (*)(_BYTE *, uint64_t))v95)(v55, v48);
  v57 = (_QWORD *)v46[1];
  v58 = v102;
  v59 = v87;
  v60 = v45;
  v94 = v57;
  ((void (*)(_BYTE *, uint64_t))v57)(v49, v50);
  v61 = (void (*)(_BYTE *, uint64_t))*((_QWORD *)v88 + 1);
  v61(v60, v58);
  if (v59(v17, 1, v56) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v104, v98);
LABEL_13:
    v43 = sub_100011D00((uint64_t)v17);
    return TimelineEntryRelevance.init(score:duration:)(v43, 1.0, 0.0);
  }
  v88 = *(_BYTE **)(v106 + 32);
  ((void (*)(uint64_t, _BYTE *, uint64_t))v88)(v92, v17, v56);
  v86(v60, v85, v58);
  v62 = v99;
  v84(v49, v83, v99);
  v63 = v100;
  v82(v100, v81, v54);
  v17 = v93;
  v64 = v104;
  Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)(19, 0, 0, v105, v60, v49, v63);
  v65 = v63;
  v66 = v101;
  ((void (*)(_BYTE *, uint64_t))v95)(v65, v54);
  ((void (*)(_BYTE *, uint64_t))v94)(v49, v62);
  v61(v60, v58);
  if (v59(v17, 1, v66) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v92, v66);
    (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v64, v98);
    goto LABEL_13;
  }
  v67 = v91;
  ((void (*)(uint64_t, _BYTE *, uint64_t))v88)(v91, v17, v66);
  v68 = sub_100012230();
  v69 = v105;
  v70 = dispatch thunk of static Comparable.< infix(_:_:)(v105, v92, v66, v68);
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 16);
  v72 = v90;
  v71(v90, v69, v66);
  v73 = v89;
  v71(v89, v67, v66);
  if ((v70 & 1) != 0)
  {
    v74 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
    v74(v73, v66);
    v74(v72, v66);
LABEL_20:
    v74(v91, v66);
    v74(v92, v66);
    v43 = (*(uint64_t (**)(_BYTE *, uint64_t))(v97 + 8))(v104, v98);
    return TimelineEntryRelevance.init(score:duration:)(v43, 1.0, 0.0);
  }
  v75 = static Date.< infix(_:_:)(v72, v73);
  v74 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
  v74(v73, v66);
  v74(v72, v66);
  if ((v75 & 1) == 0)
    goto LABEL_20;
  v76 = v91;
  v78 = Date.timeIntervalSince(_:)(v105);
  v79 = 10800.0;
  if (v78 <= 10800.0)
    v79 = v78;
  TimelineEntryRelevance.init(score:duration:)(v77, 2.0, v79);
  v74(v76, v66);
  v74(v92, v66);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v97 + 8))(v104, v98);
}

uint64_t sub_100011D00(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_100081028);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100011D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  v4 = type metadata accessor for Calendar.Component(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v63 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v61 = *(_QWORD *)(v7 - 8);
  v62 = v7;
  __chkstk_darwin(v7);
  v60 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for UpNextEntry.Episode(0);
  v9 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_100081028);
  v13 = __chkstk_darwin(v12);
  v59 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v53 - v16;
  __chkstk_darwin(v15);
  v64 = (char *)&v53 - v18;
  v67 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v67 - 8);
  v20 = __chkstk_darwin(v67);
  v55 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v68 = (char *)&v53 - v23;
  v24 = __chkstk_darwin(v22);
  v66 = (char *)&v53 - v25;
  v26 = __chkstk_darwin(v24);
  v65 = (char *)&v53 - v27;
  v28 = *(_QWORD *)(a2 + 16);
  if (v28)
  {
    v56 = v5;
    v57 = a1;
    v58 = v4;
    v29 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v30 = *(_QWORD *)(v9 + 72);
    v54 = a2;
    swift_bridgeObjectRetain(a2);
    v31 = &_swiftEmptyArrayStorage;
    v32 = v67;
    do
    {
      sub_10000FBEC(v29, (uint64_t)v11);
      sub_100012278((uint64_t)&v11[*(int *)(v69 + 40)], (uint64_t)v17);
      sub_10000FCBC((uint64_t)v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v32) == 1)
      {
        sub_100011D00((uint64_t)v17);
      }
      else
      {
        v33 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
        v34 = v66;
        v33(v66, v17, v32);
        v33(v68, v34, v32);
        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
          v31 = (_QWORD *)sub_1000625EC(0, v31[2] + 1, 1, (unint64_t)v31);
        v36 = v31[2];
        v35 = v31[3];
        if (v36 >= v35 >> 1)
          v31 = (_QWORD *)sub_1000625EC(v35 > 1, v36 + 1, 1, (unint64_t)v31);
        v31[2] = v36 + 1;
        v37 = (unint64_t)v31
            + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
            + *(_QWORD *)(v19 + 72) * v36;
        v32 = v67;
        v33((char *)v37, v68, v67);
      }
      v29 += v30;
      --v28;
    }
    while (v28);
    v26 = swift_bridgeObjectRelease(v54);
    a1 = v57;
    v4 = v58;
    v5 = v56;
  }
  else
  {
    v31 = &_swiftEmptyArrayStorage;
  }
  __chkstk_darwin(v26);
  *(&v53 - 2) = a1;
  v38 = sub_1000122EC((uint64_t (*)(char *))sub_1000122C0, (uint64_t)(&v53 - 4), (uint64_t)v31);
  v39 = v64;
  sub_1000125B0(v38, v64);
  swift_bridgeObjectRelease(v38);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v41 = v67;
  v42 = v40(v39, 1, v67);
  v43 = v65;
  if (v42 == 1)
  {
    v44 = (uint64_t)v39;
  }
  else
  {
    v69 = *(_QWORD *)(v19 + 32);
    v45 = ((uint64_t (*)(char *, char *, uint64_t))v69)(v65, v39, v41);
    v46 = v60;
    static Calendar.current.getter(v45);
    v47 = v63;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v63, enum case for Calendar.Component.day(_:), v4);
    v48 = v59;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v47, -1, a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v47, v4);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v62);
    if (v40(v48, 1, v41) != 1)
    {
      v50 = v55;
      ((void (*)(char *, char *, uint64_t))v69)(v55, v48, v41);
      v49 = static Date.> infix(_:_:)(v43, v50);
      v51 = *(void (**)(char *, uint64_t))(v19 + 8);
      v51(v50, v41);
      v51(v43, v41);
      return v49 & 1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v43, v41);
    v44 = (uint64_t)v48;
  }
  sub_100011D00(v44);
  v49 = 0;
  return v49 & 1;
}

unint64_t sub_100012230()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081390;
  if (!qword_100081390)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100081390);
  }
  return result;
}

uint64_t sub_100012278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_100081028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000122C0(uint64_t a1)
{
  uint64_t v1;

  return static Date.< infix(_:_:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1000122EC(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  char *v35;
  _QWORD *v36;

  v4 = v3;
  v33 = a1;
  v34 = a2;
  v6 = sub_100005150(&qword_100081028);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v31 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v11);
  v35 = (char *)&v26 - v14;
  v36 = &_swiftEmptyArrayStorage;
  v32 = *(_QWORD *)(a3 + 16);
  if (v32)
  {
    v15 = 0;
    v30 = a3;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17 = *(_QWORD *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v29(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        goto LABEL_17;
      v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19 = v35;
      v18(v35, v8, v9);
      v20 = v33(v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
        swift_bridgeObjectRelease(v30);
        return swift_release(v36);
      }
      if ((v20 & 1) != 0)
      {
        v18(v31, v35, v9);
        v21 = v36;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
        v28 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100030F04(0, v21[2] + 1, 1);
          v21 = v36;
        }
        v24 = v21[2];
        v23 = v21[3];
        v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          v27 = v24 + 1;
          sub_100030F04(v23 > 1, v24 + 1, 1);
          v25 = v27;
          v21 = v36;
        }
        v21[2] = v25;
        result = ((uint64_t (*)(char *, char *, uint64_t))v18)((char *)v21 + v16 + v24 * v17, v31, v9);
        v36 = v21;
        v4 = v28;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v35, v9);
      }
      a3 = v30;
      if (v32 == ++v15)
      {
        v29(v8, 1, 1, v9);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_17:
    swift_bridgeObjectRelease(a3);
    sub_100011D00((uint64_t)v8);
    return (uint64_t)v36;
  }
  return result;
}

uint64_t sub_1000125B0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);

  v4 = sub_100005150(&qword_100081028);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v30 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v30 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v18(v9, 1, 1, v10);
    goto LABEL_7;
  }
  v31 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v33 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v33(v9, a1 + v31, v10);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v18(v9, 0, 1, v10);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v35(v9, 1, v10) == 1)
  {
LABEL_7:
    sub_100011D00((uint64_t)v9);
    v23 = a2;
    v24 = 1;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v23, v24, 1, v10);
  }
  v30 = a2;
  v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v19(v16, v9, v10);
  v32 = a1;
  swift_bridgeObjectRetain(a1);
  v20 = v17 - 1;
  v21 = v33;
  if (v20)
  {
    v34 = *(_QWORD *)(v11 + 72);
    v26 = v32 + v34 + v31;
    while (1)
    {
      v21(v7, v26, v10);
      v18(v7, 0, 1, v10);
      if (v35(v7, 1, v10) == 1)
        break;
      v19(v14, v7, v10);
      v27 = sub_100012230();
      v28 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v14, v10, v27);
      v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      if ((v28 & 1) != 0)
      {
        v29(v16, v10);
        v19(v16, v14, v10);
      }
      else
      {
        v29(v14, v10);
      }
      v26 += v34;
      if (!--v20)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v18(v7, 1, 1, v10);
  }
  swift_bridgeObjectRelease(v32);
  sub_100011D00((uint64_t)v7);
  v22 = v30;
  v19(v30, v16, v10);
  v23 = v22;
  v24 = 0;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v23, v24, 1, v10);
}

ValueMetadata *type metadata accessor for PodcastsWidgetInfo()
{
  return &type metadata for PodcastsWidgetInfo;
}

void sub_100012888()
{
  qword_100085738 = 0x7478654E7055;
  unk_100085740 = 0xE600000000000000;
}

void sub_1000128A8()
{
  qword_100085748 = 0x7478654E207055;
  unk_100085750 = 0xE700000000000000;
}

ValueMetadata *type metadata accessor for HSpacer()
{
  return &type metadata for HSpacer;
}

uint64_t sub_1000128DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071B70, 1);
}

double sub_1000128EC@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  double result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  v3 = *v1;
  v4 = static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)(&v11, v3, 0, 0, 1, v4, v5);
  v6 = v11;
  v7 = v12;
  v8 = v13;
  v9 = v14;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  result = *(double *)&v15;
  *(_OWORD *)(a1 + 48) = v15;
  return result;
}

unint64_t sub_100012978()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081398;
  if (!qword_100081398)
  {
    v1 = sub_10000950C(&qword_1000813A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081398);
  }
  return result;
}

uint64_t sub_1000129DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "dataForKey:", v4);

  if (v5)
  {
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v9 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v10 = sub_100016958(v6, v8);
    v11 = JSONDecoder.init()(v10);
    v12 = type metadata accessor for WidgetNowPlayingInfo(0);
    v13 = sub_10000FBAC(&qword_1000814C8, type metadata accessor for WidgetNowPlayingInfo, (uint64_t)&protocol conformance descriptor for WidgetNowPlayingInfo);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v12, v6, v8, v12, v13);
    swift_release(v11);
    sub_10001699C(v6, v8);
    return sub_10001699C(v6, v8);
  }
  else
  {
    v15 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
    v16 = a1 + v15[6];
    v17 = type metadata accessor for Date(0);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
    v18(v16, 1, 1, v17);
    v18(a1 + v15[7], 1, 1, v17);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(a1 + v15[10], 1, 1, v17);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v19 = a1 + v15[8];
    *(_QWORD *)v19 = 0;
    *(_BYTE *)(v19 + 8) = 1;
    v20 = a1 + v15[9];
    *(_QWORD *)v20 = 0;
    *(_BYTE *)(v20 + 8) = 1;
  }
  return result;
}

void WidgetNowPlayingInfo.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  uint64_t v25;
  Swift::UInt64 v26;
  Swift::UInt64 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005150(&qword_100081028);
  v9 = __chkstk_darwin(v8);
  v31 = (uint64_t)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v30 - v14;
  v16 = v1[1];
  if (v16)
  {
    v17 = *v1;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(a1, v17, v16);
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*((_BYTE *)v1 + 16));
  v18 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
  sub_100012278((uint64_t)v1 + v18[6], (uint64_t)v15);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v19(v15, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, v4);
    Hasher._combine(_:)(1u);
    v20 = sub_10000FBAC(&qword_1000813A8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v20);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_100012278((uint64_t)v1 + v18[7], (uint64_t)v13);
  if (v19(v13, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v13, v4);
    Hasher._combine(_:)(1u);
    v21 = sub_10000FBAC(&qword_1000813A8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v22 = (uint64_t)v1 + v18[8];
  if (*(_BYTE *)(v22 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v23 = *(_QWORD *)v22;
    Hasher._combine(_:)(1u);
    if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v24 = v23;
    else
      v24 = 0;
    Hasher._combine(_:)(v24);
  }
  v25 = (uint64_t)v1 + v18[9];
  if (*(_BYTE *)(v25 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v26 = *(_QWORD *)v25;
    Hasher._combine(_:)(1u);
    if ((v26 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v27 = v26;
    else
      v27 = 0;
    Hasher._combine(_:)(v27);
  }
  v28 = v31;
  sub_100012278((uint64_t)v2 + v18[10], v31);
  if (v19((char *)v28, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v28, v4);
    Hasher._combine(_:)(1u);
    v29 = sub_10000FBAC(&qword_1000813A8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v29);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t type metadata accessor for WidgetNowPlayingInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_100081438;
  if (!qword_100081438)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetNowPlayingInfo);
  return result;
}

uint64_t sub_1000131B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000131E8 + 4 * byte_10006D650[a1]))(0xD000000000000012, 0x800000010006FE70);
}

uint64_t sub_1000131E8()
{
  return 0x6E6979616C507369;
}

BOOL sub_100013274(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100013288()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000132CC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000132F4(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100013334()
{
  unsigned __int8 *v0;

  return sub_1000131B0(*v0);
}

uint64_t sub_10001333C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100016630(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100013360()
{
  return 0;
}

void sub_10001336C(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100013378(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015428();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000133A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015428();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WidgetNowPlayingInfo.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v3 = v1;
  v5 = sub_100005150(&qword_1000813B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100015404(a1, v9);
  v11 = sub_100015428();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetNowPlayingInfo.CodingKeys, &type metadata for WidgetNowPlayingInfo.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v35 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v35, v5);
  if (!v2)
  {
    v14 = *((unsigned __int8 *)v3 + 16);
    v34 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v34, v5);
    v15 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
    v16 = (uint64_t)v3 + v15[6];
    v33 = 2;
    v17 = type metadata accessor for Date(0);
    v18 = sub_10000FBAC(&qword_1000813C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v33, v5, v17, v18);
    v19 = (uint64_t)v3 + v15[7];
    v32 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v32, v5, v17, v18);
    v20 = (uint64_t *)((char *)v3 + v15[8]);
    v21 = *v20;
    v22 = *((unsigned __int8 *)v20 + 8);
    v31 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v31, v5);
    v23 = (uint64_t *)((char *)v3 + v15[9]);
    v24 = *v23;
    v25 = *((unsigned __int8 *)v23 + 8);
    v30 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v30, v5);
    v26 = (uint64_t)v3 + v15[10];
    v29 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v29, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int WidgetNowPlayingInfo.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  WidgetNowPlayingInfo.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t WidgetNowPlayingInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v39 = a2;
  v3 = sub_100005150(&qword_100081028);
  v4 = __chkstk_darwin(v3);
  v40 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v37 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v37 - v9;
  v41 = sub_100005150(&qword_1000813C8);
  v11 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  v43 = a1;
  sub_100015404(a1, v18);
  v19 = sub_100015428();
  v42 = v13;
  v20 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetNowPlayingInfo.CodingKeys, &type metadata for WidgetNowPlayingInfo.CodingKeys, v19, v18, v17);
  if (v20)
    return sub_1000168F8(v43);
  v21 = v10;
  v51 = 0;
  v22 = v41;
  *(_QWORD *)v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v41);
  *((_QWORD *)v16 + 1) = v23;
  v50 = 1;
  v16[16] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v22) & 1;
  v24 = type metadata accessor for Date(0);
  v44 = v16;
  v25 = v24;
  v49 = 2;
  v26 = (uint64_t)v21;
  v27 = sub_10000FBAC(&qword_1000813D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, &v49, v22, v25, v27);
  sub_10001546C(v26, (uint64_t)&v44[v14[6]]);
  v48 = 3;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, &v48, v22, v25, v27);
  v37 = v25;
  v38 = v27;
  v28 = (uint64_t)v44;
  sub_10001546C((uint64_t)v8, (uint64_t)&v44[v14[7]]);
  v47 = 4;
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v22);
  v30 = v28 + v14[8];
  *(_QWORD *)v30 = v29;
  *(_BYTE *)(v30 + 8) = v31 & 1;
  v46 = 5;
  v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v22);
  v33 = v28 + v14[9];
  *(_QWORD *)v33 = v32;
  *(_BYTE *)(v33 + 8) = v34 & 1;
  v45 = 6;
  v35 = (uint64_t)v40;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, &v45, v22, v37, v38);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v22);
  sub_10001546C(v35, v28 + v14[10]);
  sub_1000154B4(v28, v39);
  sub_1000168F8(v43);
  return sub_1000154F8(v28);
}

uint64_t sub_100013AA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetNowPlayingInfo.init(from:)(a1, a2);
}

uint64_t sub_100013AB4(_QWORD *a1)
{
  return WidgetNowPlayingInfo.encode(to:)(a1);
}

Swift::Int sub_100013ACC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  WidgetNowPlayingInfo.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

Swift::Void __swiftcall WidgetNowPlayingInfo.logInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  os_log_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  os_log_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v1 = type metadata accessor for Date.ISO8601FormatStyle(0);
  v66 = *(_QWORD *)(v1 - 8);
  v67 = v1;
  __chkstk_darwin(v1);
  v65 = (uint64_t)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005150(&qword_100081028);
  v4 = __chkstk_darwin(v3);
  v64 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v70 = (uint64_t)&v58 - v6;
  v7 = type metadata accessor for WidgetNowPlayingInfo(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v73 = (uint64_t)&v58 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v58 - v14;
  __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v58 - v16);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v0 + *(int *)(v7 + 36);
  if ((*(_BYTE *)(v23 + 8) & 1) != 0)
  {
    v24 = 0xE300000000000000;
    v69 = 7104878;
  }
  else
  {
    v20 = Double.description.getter(v20, *(double *)v23);
    v69 = v20;
    v24 = v25;
  }
  v26 = v0 + *(int *)(v7 + 32);
  v27 = *(_BYTE *)(v26 + 8);
  v71 = v7;
  if ((v27 & 1) != 0)
  {
    v28 = 0xE300000000000000;
    v68 = 7104878;
  }
  else
  {
    v20 = Double.description.getter(v20, *(double *)v26);
    v68 = v20;
    v28 = v29;
  }
  static Logger.widget.getter(v20);
  sub_1000154B4(v0, (uint64_t)v17);
  sub_1000154B4(v0, (uint64_t)v15);
  v30 = v73;
  sub_1000154B4(v0, v73);
  sub_1000154B4(v0, (uint64_t)v10);
  swift_bridgeObjectRetain(v24);
  v31 = swift_bridgeObjectRetain(v28);
  v32 = Logger.logObject.getter(v31);
  v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, (os_log_type_t)v63))
  {
    v62 = v32;
    v72 = v10;
    v33 = swift_slowAlloc(58, -1);
    v58 = swift_slowAlloc(160, -1);
    v75 = v58;
    *(_DWORD *)v33 = 136447490;
    v34 = v17[1];
    v35 = v71;
    v60 = v19;
    v61 = v18;
    v59 = v22;
    if (v34)
    {
      v36 = *v17;
      v37 = v34;
    }
    else
    {
      v37 = 0xE300000000000000;
      v36 = 7104878;
    }
    swift_bridgeObjectRetain(v34);
    v74 = sub_1000144C4(v36, v37, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease(v37);
    sub_1000154F8((uint64_t)v17);
    *(_WORD *)(v33 + 12) = 1024;
    v38 = v15[16];
    sub_1000154F8((uint64_t)v15);
    LODWORD(v74) = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4, v33 + 14, v33 + 18);
    *(_WORD *)(v33 + 18) = 2082;
    swift_bridgeObjectRetain(v24);
    v74 = sub_1000144C4(v69, v24, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v33 + 20, v33 + 28);
    swift_bridgeObjectRelease_n(v24, 3);
    *(_WORD *)(v33 + 28) = 2082;
    swift_bridgeObjectRetain(v28);
    v74 = sub_1000144C4(v68, v28, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v33 + 30, v33 + 38);
    swift_bridgeObjectRelease_n(v28, 3);
    *(_WORD *)(v33 + 38) = 2082;
    v39 = v70;
    sub_100012278(v73 + *(int *)(v35 + 24), v70);
    v40 = type metadata accessor for Date(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
    if (v42(v39, 1, v40) == 1)
    {
      sub_10000F008(v39, &qword_100081028);
      v43 = 0xE300000000000000;
      v44 = 7104878;
    }
    else
    {
      v45 = v65;
      sub_10001417C(v65);
      v44 = Date.ISO8601Format(_:)(v45);
      v43 = v46;
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v45, v67);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    }
    v47 = v61;
    v48 = (uint64_t)v64;
    v74 = sub_1000144C4(v44, v43, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v33 + 40, v33 + 48);
    swift_bridgeObjectRelease(v43);
    sub_1000154F8(v73);
    *(_WORD *)(v33 + 48) = 2082;
    sub_100012278((uint64_t)&v72[*(int *)(v35 + 28)], v48);
    if (v42(v48, 1, v40) == 1)
    {
      sub_10000F008(v48, &qword_100081028);
      v49 = 0xE300000000000000;
      v51 = v59;
      v50 = v60;
      v52 = 7104878;
    }
    else
    {
      v53 = v65;
      sub_10001417C(v65);
      v52 = Date.ISO8601Format(_:)(v53);
      v49 = v54;
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v53, v67);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v48, v40);
      v51 = v59;
      v50 = v60;
    }
    v55 = v63;
    v56 = v58;
    v74 = sub_1000144C4(v52, v49, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v33 + 50, v33 + 58);
    swift_bridgeObjectRelease(v49);
    sub_1000154F8((uint64_t)v72);
    v57 = v62;
    _os_log_impl((void *)&_mh_execute_header, v62, v55, "WidgetNowPlayingInfo: %{public}s, isPlaying: %{BOOL}d, duration %{public}s, timeRemaining %{public}s, start %{public}s, end %{public}s", (uint8_t *)v33, 0x3Au);
    swift_arrayDestroy(v56, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v47);
  }
  else
  {
    sub_1000154F8((uint64_t)v15);
    sub_1000154F8((uint64_t)v17);
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease_n(v24, 2);
    sub_1000154F8(v30);
    sub_1000154F8((uint64_t)v10);

    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  }
}

uint64_t sub_10001417C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t);
  uint64_t v23;
  uint64_t result;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a1;
  v1 = sub_100005150(&qword_1000814A8);
  __chkstk_darwin(v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for TimeZone(0);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v28 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator(0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v19 + 104))(v18, enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:));
  v20 = v12;
  v21 = v30;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:), v20);
  v22 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v23 = v32;
  v22(v11, enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:), v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:), v31);
  TimeZone.init(secondsFromGMT:)(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v3, 1, v23);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v26 = v28;
    v25(v28, v3, v23);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)(v18, v15, v11, v7, 0, v26);
  }
  return result;
}

uint64_t sub_1000143F0(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100014400(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_100014434(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100014454(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v6 = a4();
  v8 = v7;
  v9 = sub_1000144C4(v6, v7, a3);
  v10 = *a1;
  v11 = *a1 + 8;
  v13 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10, v11);
  result = swift_bridgeObjectRelease(v8);
  *a1 = v11;
  return result;
}

uint64_t sub_1000144C4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100014594(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100016918((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100016918((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_1000168F8(v12);
  return v7;
}

uint64_t sub_100014594(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10001474C(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_10001474C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000147E0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1000149B8(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000149B8(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000147E0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100014954(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100014954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100005150(&qword_1000814B0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000149B8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005150(&qword_1000814B0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE **sub_100014B04(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

BOOL _s14PodcastsWidget0B14NowPlayingInfoV23__derived_struct_equalsySbAC_ACtFZ_0(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  _BOOL8 result;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  void (*v59)(_BYTE *, _BYTE *);
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  void (*v76)(_BYTE *, _BYTE *);
  uint64_t v77;
  double *v78;
  char v79;
  double *v80;
  int v81;
  uint64_t v82;
  double *v83;
  char v84;
  double *v85;
  int v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  unsigned int (*v93)(uint64_t, uint64_t, _BYTE *);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  char v99;
  void (*v100)(_BYTE *, _BYTE *);
  _BYTE v101[4];
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;

  v4 = type metadata accessor for Date(0);
  v115 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v113 = &v101[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v114 = sub_100005150(&qword_1000814B8);
  v6 = __chkstk_darwin(v114);
  v112 = &v101[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v6);
  v10 = &v101[-v9];
  __chkstk_darwin(v8);
  v12 = &v101[-v11];
  v13 = sub_100005150(&qword_100081028);
  v14 = __chkstk_darwin(v13);
  v15 = __chkstk_darwin(v14);
  v16 = __chkstk_darwin(v15);
  v17 = __chkstk_darwin(v16);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  v21 = &v101[-v20];
  v22 = __chkstk_darwin(v19);
  v23 = __chkstk_darwin(v22);
  v25 = &v101[-v24];
  __chkstk_darwin(v23);
  v33 = &v101[-v29];
  v34 = *((_QWORD *)a1 + 1);
  v35 = *(_QWORD *)(a2 + 8);
  if (!v34)
  {
    if (v35)
      return 0;
    goto LABEL_8;
  }
  if (!v35)
    return 0;
  v36 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v34 == v35)
    goto LABEL_8;
  v110 = v21;
  v111 = (_BYTE *)v26;
  v108 = a1;
  v109 = v10;
  v37 = a2;
  v38 = v31;
  v39 = v32;
  v40 = v27;
  v41 = v28;
  v42 = &v101[-v29];
  v43 = v4;
  v44 = v30;
  v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v34);
  v30 = v44;
  v4 = v43;
  v33 = v42;
  v28 = v41;
  v27 = v40;
  v32 = v39;
  v21 = v110;
  v26 = (uint64_t)v111;
  v31 = v38;
  a2 = v37;
  a1 = v108;
  v10 = v109;
  v46 = v45;
  result = 0;
  if ((v46 & 1) != 0)
  {
LABEL_8:
    if (*((unsigned __int8 *)a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      return 0;
    v111 = (_BYTE *)v26;
    v106 = v28;
    v107 = v27;
    v104 = v31;
    v105 = v32;
    v103 = v30;
    v48 = type metadata accessor for WidgetNowPlayingInfo(0);
    sub_100012278((uint64_t)a1 + *(int *)(v48 + 24), (uint64_t)v33);
    v108 = (int *)v48;
    sub_100012278(a2 + *(int *)(v48 + 24), (uint64_t)v25);
    v49 = (uint64_t)&v12[*(int *)(v114 + 48)];
    sub_100012278((uint64_t)v33, (uint64_t)v12);
    sub_100012278((uint64_t)v25, v49);
    v50 = *(_BYTE **)(v115 + 48);
    v109 = (_BYTE *)v4;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v50)(v12, 1, v4) == 1)
    {
      v110 = v21;
      sub_10000F008((uint64_t)v25, &qword_100081028);
      sub_10000F008((uint64_t)v33, &qword_100081028);
      v51 = v49;
      v52 = v109;
      if (((unsigned int (*)(uint64_t, uint64_t, _BYTE *))v50)(v51, 1, v109) == 1)
      {
        v53 = v50;
        sub_10000F008((uint64_t)v12, &qword_100081028);
        v54 = v52;
        v21 = v110;
        goto LABEL_16;
      }
    }
    else
    {
      sub_100012278((uint64_t)v12, (uint64_t)v111);
      v110 = v50;
      if (((unsigned int (*)(uint64_t, uint64_t, _BYTE *))v50)(v49, 1, v109) != 1)
      {
        v56 = v113;
        v57 = v109;
        (*(void (**)(_BYTE *, uint64_t, _BYTE *))(v115 + 32))(v113, v49, v109);
        v58 = sub_10000FBAC(&qword_1000814C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v102 = dispatch thunk of static Equatable.== infix(_:_:)(v111, v56, v57, v58);
        v59 = *(void (**)(_BYTE *, _BYTE *))(v115 + 8);
        v59(v56, v57);
        sub_10000F008((uint64_t)v25, &qword_100081028);
        sub_10000F008((uint64_t)v33, &qword_100081028);
        v59(v111, v57);
        v60 = (uint64_t)v12;
        v54 = v57;
        sub_10000F008(v60, &qword_100081028);
        v53 = v110;
        if ((v102 & 1) == 0)
          return 0;
LABEL_16:
        v61 = v108;
        sub_100012278((uint64_t)a1 + v108[7], (uint64_t)v21);
        v62 = v107;
        sub_100012278(a2 + v61[7], v107);
        v63 = (uint64_t)&v10[*(int *)(v114 + 48)];
        sub_100012278((uint64_t)v21, (uint64_t)v10);
        sub_100012278(v62, v63);
        if (((unsigned int (*)(_BYTE *, uint64_t, _BYTE *))v53)(v10, 1, v54) == 1)
        {
          v64 = a1;
          v65 = (uint64_t)v21;
          v66 = v106;
          sub_10000F008(v62, &qword_100081028);
          sub_10000F008(v65, &qword_100081028);
          if (((unsigned int (*)(uint64_t, uint64_t, _BYTE *))v53)(v63, 1, v54) == 1)
          {
            v110 = v53;
            v67 = v54;
            sub_10000F008((uint64_t)v10, &qword_100081028);
            v68 = v66;
LABEL_25:
            v77 = v108[8];
            v78 = (double *)((char *)v64 + v77);
            v79 = *((_BYTE *)v64 + v77 + 8);
            v80 = (double *)(a2 + v77);
            v81 = *(unsigned __int8 *)(a2 + v77 + 8);
            if ((v79 & 1) != 0)
            {
              if (!v81)
                return 0;
            }
            else
            {
              if (*v78 != *v80)
                LOBYTE(v81) = 1;
              if ((v81 & 1) != 0)
                return 0;
            }
            v82 = v108[9];
            v83 = (double *)((char *)v64 + v82);
            v84 = *((_BYTE *)v64 + v82 + 8);
            v85 = (double *)(a2 + v82);
            v86 = *(unsigned __int8 *)(a2 + v82 + 8);
            if ((v84 & 1) != 0)
            {
              if (!v86)
                return 0;
            }
            else
            {
              if (*v83 != *v85)
                LOBYTE(v86) = 1;
              if ((v86 & 1) != 0)
                return 0;
            }
            v87 = v108;
            v88 = v68;
            sub_100012278((uint64_t)v64 + v108[10], v68);
            v89 = v104;
            sub_100012278(a2 + v87[10], v104);
            v12 = v112;
            v90 = v88;
            v91 = (uint64_t)&v112[*(int *)(v114 + 48)];
            sub_100012278(v90, (uint64_t)v112);
            sub_100012278(v89, v91);
            v92 = v67;
            v93 = (unsigned int (*)(uint64_t, uint64_t, _BYTE *))v110;
            if (((unsigned int (*)(_BYTE *, uint64_t, _BYTE *))v110)(v12, 1, v67) == 1)
            {
              sub_10000F008(v89, &qword_100081028);
              sub_10000F008(v90, &qword_100081028);
              if (v93(v91, 1, v67) == 1)
              {
                sub_10000F008((uint64_t)v12, &qword_100081028);
                return 1;
              }
              goto LABEL_14;
            }
            v94 = v89;
            v95 = v103;
            sub_100012278((uint64_t)v12, v103);
            if (v93(v91, 1, v92) == 1)
            {
              sub_10000F008(v89, &qword_100081028);
              sub_10000F008(v90, &qword_100081028);
              (*(void (**)(uint64_t, _BYTE *))(v115 + 8))(v95, v92);
              goto LABEL_14;
            }
            v96 = v115;
            v97 = v113;
            (*(void (**)(_BYTE *, uint64_t, _BYTE *))(v115 + 32))(v113, v91, v92);
            v98 = sub_10000FBAC(&qword_1000814C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v99 = dispatch thunk of static Equatable.== infix(_:_:)(v95, v97, v92, v98);
            v100 = *(void (**)(_BYTE *, _BYTE *))(v96 + 8);
            v100(v97, v92);
            sub_10000F008(v94, &qword_100081028);
            sub_10000F008(v90, &qword_100081028);
            v100((_BYTE *)v95, v92);
            sub_10000F008((uint64_t)v12, &qword_100081028);
            return (v99 & 1) != 0;
          }
        }
        else
        {
          v69 = v105;
          sub_100012278((uint64_t)v10, v105);
          if (((unsigned int (*)(uint64_t, uint64_t, _BYTE *))v53)(v63, 1, v54) != 1)
          {
            v110 = v53;
            v64 = a1;
            v70 = (uint64_t)v21;
            v71 = v115;
            v72 = v113;
            (*(void (**)(_BYTE *, uint64_t, _BYTE *))(v115 + 32))(v113, v63, v54);
            v73 = sub_10000FBAC(&qword_1000814C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v74 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v72, v54, v73);
            v75 = (uint64_t)v10;
            v76 = *(void (**)(_BYTE *, _BYTE *))(v71 + 8);
            v76(v72, v54);
            sub_10000F008(v107, &qword_100081028);
            sub_10000F008(v70, &qword_100081028);
            v67 = v54;
            v76((_BYTE *)v69, v54);
            sub_10000F008(v75, &qword_100081028);
            v68 = v106;
            if ((v74 & 1) == 0)
              return 0;
            goto LABEL_25;
          }
          sub_10000F008(v107, &qword_100081028);
          sub_10000F008((uint64_t)v21, &qword_100081028);
          (*(void (**)(uint64_t, _BYTE *))(v115 + 8))(v69, v54);
        }
        v55 = (uint64_t)v10;
        goto LABEL_22;
      }
      sub_10000F008((uint64_t)v25, &qword_100081028);
      sub_10000F008((uint64_t)v33, &qword_100081028);
      (*(void (**)(_BYTE *, _BYTE *))(v115 + 8))(v111, v109);
    }
LABEL_14:
    v55 = (uint64_t)v12;
LABEL_22:
    sub_10000F008(v55, &qword_1000814B8);
    return 0;
  }
  return result;
}

_QWORD *sub_100015404(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100015428()
{
  unint64_t result;

  result = qword_1000813B8;
  if (!qword_1000813B8)
  {
    result = swift_getWitnessTable(&unk_10006D854, &type metadata for WidgetNowPlayingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000813B8);
  }
  return result;
}

uint64_t sub_10001546C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_100081028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000154B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetNowPlayingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000154F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetNowPlayingInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100015534()
{
  return sub_10000FBAC(&qword_1000813D8, type metadata accessor for WidgetNowPlayingInfo, (uint64_t)&protocol conformance descriptor for WidgetNowPlayingInfo);
}

_QWORD *initializeBufferWithCopyOfBuffer for WidgetNowPlayingInfo(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a3[6];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11))
    {
      v14 = sub_100005150(&qword_100081028);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[7];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1, v11))
    {
      v19 = sub_100005150(&qword_100081028);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    }
    v20 = a3[8];
    v21 = a3[9];
    v22 = (char *)v4 + v20;
    v23 = (uint64_t)a2 + v20;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = *(_BYTE *)(v23 + 8);
    v24 = (char *)v4 + v21;
    v25 = (uint64_t)a2 + v21;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = *(_BYTE *)(v25 + 8);
    v26 = a3[10];
    v27 = (char *)v4 + v26;
    v28 = (char *)a2 + v26;
    if (v13(v28, 1, v11))
    {
      v29 = sub_100005150(&qword_100081028);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v27, v28, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v27, 0, 1, v11);
    }
  }
  return v4;
}

uint64_t destroy for WidgetNowPlayingInfo(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + a2[7];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  v9 = a1 + a2[10];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v9, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  return result;
}

uint64_t initializeWithCopy for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10))
  {
    v13 = sub_100005150(&qword_100081028);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[7];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    v17 = sub_100005150(&qword_100081028);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[8];
  v19 = a3[9];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = a1 + v19;
  v23 = a2 + v19;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a3[10];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  if (v12(v26, 1, v10))
  {
    v27 = sub_100005150(&qword_100081028);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v25, v26, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v25, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithCopy for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  int v34;
  int v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100005150(&qword_100081028);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = a3[7];
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = v13((void *)(a1 + v17), 1, v11);
  v21 = v13(v19, 1, v11);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v18, v19, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v18, v11);
LABEL_12:
    v22 = sub_100005150(&qword_100081028);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v18, v19, v11);
LABEL_13:
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  *(_QWORD *)v24 = v26;
  v27 = a3[9];
  v28 = a1 + v27;
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  *(_BYTE *)(v28 + 8) = *((_BYTE *)v29 + 8);
  *(_QWORD *)v28 = v30;
  v31 = a3[10];
  v32 = (void *)(a1 + v31);
  v33 = (void *)(a2 + v31);
  v34 = v13((void *)(a1 + v31), 1, v11);
  v35 = v13(v33, 1, v11);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v32, v33, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v32, v11);
    goto LABEL_18;
  }
  if (v35)
  {
LABEL_18:
    v36 = sub_100005150(&qword_100081028);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v32, v33, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v32, 0, 1, v11);
  return a1;
}

uint64_t initializeWithTake for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100005150(&qword_100081028);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    v16 = sub_100005150(&qword_100081028);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[8];
  v18 = a3[9];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a3[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v11(v25, 1, v9))
  {
    v26 = sub_100005150(&qword_100081028);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  int v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100005150(&qword_100081028);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[7];
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = v13((void *)(a1 + v17), 1, v11);
  v21 = v13(v19, 1, v11);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v18, v19, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v18, v11);
LABEL_12:
    v22 = sub_100005150(&qword_100081028);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v18, v19, v11);
LABEL_13:
  v23 = a3[8];
  v24 = a3[9];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[10];
  v30 = (void *)(a1 + v29);
  v31 = (void *)(a2 + v29);
  v32 = v13((void *)(a1 + v29), 1, v11);
  v33 = v13(v31, 1, v11);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v30, v31, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v30, v11);
    goto LABEL_18;
  }
  if (v33)
  {
LABEL_18:
    v34 = sub_100005150(&qword_100081028);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v30, v31, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000161EC);
}

uint64_t sub_1000161EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100005150(&qword_100081028);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100016284);
}

uint64_t sub_100016284(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_100005150(&qword_100081028);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1000162FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v4[0] = &unk_10006D748;
  v4[1] = &unk_10006D760;
  sub_100016388(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_10006D778;
    v8 = &unk_10006D778;
    v9 = v5;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_100016388(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100081448)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100081448);
  }
}

_BYTE *initializeBufferWithCopyOfBuffer for WidgetEmptyMessage(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetNowPlayingInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetNowPlayingInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000164C4 + 4 * byte_10006D65C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000164F8 + 4 * byte_10006D657[v4]))();
}

uint64_t sub_1000164F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100016500(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100016508);
  return result;
}

uint64_t sub_100016514(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001651CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100016520(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100016528(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100016534(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100016540(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WidgetNowPlayingInfo.CodingKeys()
{
  return &type metadata for WidgetNowPlayingInfo.CodingKeys;
}

unint64_t sub_10001655C()
{
  unint64_t result;

  result = qword_100081490;
  if (!qword_100081490)
  {
    result = swift_getWitnessTable(&unk_10006D82C, &type metadata for WidgetNowPlayingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081490);
  }
  return result;
}

unint64_t sub_1000165A4()
{
  unint64_t result;

  result = qword_100081498;
  if (!qword_100081498)
  {
    result = swift_getWitnessTable(&unk_10006D79C, &type metadata for WidgetNowPlayingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081498);
  }
  return result;
}

unint64_t sub_1000165EC()
{
  unint64_t result;

  result = qword_1000814A0;
  if (!qword_1000814A0)
  {
    result = swift_getWitnessTable(&unk_10006D7C4, &type metadata for WidgetNowPlayingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000814A0);
  }
  return result;
}

uint64_t sub_100016630(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000010006FE70;
    if (a2 == 0x800000010006FE70)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010006FE70) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6E6979616C507369 && a2 == 0xE900000000000067
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6979616C507369, 0xE900000000000067) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0xD000000000000012)
  {
    v6 = 0x800000010006FE90;
    if (a2 == 0x800000010006FE90)
      goto LABEL_14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010006FE90) & 1) != 0)
  {
    v6 = a2;
LABEL_14:
    swift_bridgeObjectRelease(v6);
    return 2;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x800000010006FEB0)
  {
    v7 = 0x800000010006FEB0;
LABEL_20:
    swift_bridgeObjectRelease(v7);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000010006FEB0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x616D6552656D6974 && a2 == 0xED0000676E696E69
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x616D6552656D6974, 0xED0000676E696E69) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564, 0xE800000000000000) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010006FED0)
  {
    swift_bridgeObjectRelease(0x800000010006FED0);
    return 6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010006FED0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1000168F8(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100016918(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100016958(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001699C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t *sub_1000169E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100005150(&qword_1000814D8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = v16[8];
    sub_1000051BC(*(_QWORD *)v16, v18);
    *(_QWORD *)v15 = v17;
    v15[8] = v18;
  }
  return a1;
}

uint64_t sub_100016AD4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100005150(&qword_1000814D8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  return sub_100005650(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)), *((_BYTE *)a1 + *(int *)(a2 + 20) + 8));
}

uint64_t *sub_100016B4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;

  v6 = sub_100005150(&qword_1000814D8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_1000051BC(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  return a1;
}

uint64_t *sub_100016C14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  if (a1 != a2)
  {
    sub_10000F008((uint64_t)a1, &qword_1000814D8);
    v6 = sub_100005150(&qword_1000814D8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_1000051BC(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_100005650(v17, v18);
  return a1;
}

char *sub_100016D00(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v6 = sub_100005150(&qword_1000814D8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v9[8] = v10[8];
  return a1;
}

char *sub_100016DB8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a1 != a2)
  {
    sub_10000F008((uint64_t)a1, &qword_1000814D8);
    v6 = sub_100005150(&qword_1000814D8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_100005650(v12, v13);
  return a1;
}

uint64_t sub_100016E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100016EA0);
}

uint64_t sub_100016EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_100005150(&qword_1000814E0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_100016F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100016F2C);
}

uint64_t sub_100016F2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100005150(&qword_1000814E0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for PlayButtonStyling(uint64_t a1)
{
  uint64_t result;

  result = qword_100081540;
  if (!qword_100081540)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlayButtonStyling);
  return result;
}

void sub_100016FE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100017058(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\t";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_100017058(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100081550)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100081550);
  }
}

uint64_t sub_1000170AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071C0C, 1);
}

uint64_t sub_1000170BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for BlendMode(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005150(&qword_100081598);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = v0 + *(int *)(type metadata accessor for PlayButtonStyling(0) + 20);
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  sub_1000051BC(*(_QWORD *)v8, v10);
  v11 = sub_100051C3C(v9, v10);
  v12 = sub_100005650(v9, v10);
  if ((v11 & 1) != 0)
  {
    v13 = static Color.white.getter(v12);
    v14 = Color.opacity(_:)(0.08);
    swift_release(v13);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for BlendMode.plusLighter(_:), v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)v7 + *(int *)(v5 + 36), v4, v1);
    *v7 = v14;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v15 = (void *)sub_10000EEA8(&qword_1000815A0, &qword_100081598, (uint64_t)&protocol conformance descriptor for _BlendModeShapeStyle<A>);
    v16 = v7;
    v17 = (void *)v5;
  }
  else
  {
    v18 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray6Color");
    v21 = Color.init(_:)(v18);
    v17 = &type metadata for Color;
    v15 = &protocol witness table for Color;
    v16 = &v21;
  }
  return AnyShapeStyle.init<A>(_:)(v16, v17, v15);
}

uint64_t sub_100017288()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_1000172A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;

  v4 = sub_100005150(&qword_100081580);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static HierarchicalShapeStyle.primary.getter(v5);
  v8 = AnyShapeStyle.init<A>(_:)(&v13, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v9 = sub_100005150(&qword_100081588);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, a1, v9);
  *(_QWORD *)&v7[*(int *)(v4 + 36)] = v8;
  v10 = sub_1000170BC();
  sub_1000173A4((uint64_t)v7, a2);
  *(_QWORD *)(a2 + *(int *)(sub_100005150(&qword_100081590) + 36)) = v10;
  return sub_10000F008((uint64_t)v7, &qword_100081580);
}

uint64_t sub_1000173A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_100081580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000173F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000815A8;
  if (!qword_1000815A8)
  {
    v1 = sub_10000950C(&qword_100081590);
    sub_100017474();
    sub_10000EEA8(&qword_1000815D0, &qword_1000815D8, (uint64_t)&protocol conformance descriptor for _EnvironmentBackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000815A8);
  }
  return result;
}

unint64_t sub_100017474()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000815B0;
  if (!qword_1000815B0)
  {
    v1 = sub_10000950C(&qword_100081580);
    sub_10000EEA8(&qword_1000815B8, &qword_100081588, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000EEA8(&qword_1000815C0, &qword_1000815C8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000815B0);
  }
  return result;
}

uint64_t sub_100017510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;

  v3 = sub_100017600(a1);
  v11 = v3;
  swift_bridgeObjectRetain(v3);
  sub_10001FFD4(&v11);
  swift_bridgeObjectRelease(v3);
  v4 = v11;
  v5 = *((_QWORD *)v11 + 2);
  if (v5)
  {
    v6 = v5 - 1;
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a2, &v4[((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v6], v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  else
  {
    v9 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  }
  return swift_release(v4);
}

char *sub_100017600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v3 = sub_100005150(&qword_100081028);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v28 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v27 = (char *)&v22 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (char *)&_swiftEmptyArrayStorage;
  v24 = v1;
  v12 = type metadata accessor for UpNextEntry.Episode(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v23 = a1;
  swift_bridgeObjectRetain(a1);
  v16 = (char *)&_swiftEmptyArrayStorage;
  v25 = v15;
  v26 = v12;
  do
  {
    sub_10000EFC4(v14 + *(int *)(v12 + 80), (uint64_t)v5, &qword_100081028);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_10000F008((uint64_t)v5, &qword_100081028);
    }
    else
    {
      v17 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v18 = v27;
      v17(v27, v5, v6);
      v17(v28, v18, v6);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (char *)sub_1000625EC(0, *((_QWORD *)v16 + 2) + 1, 1, (unint64_t)v16);
      v20 = *((_QWORD *)v16 + 2);
      v19 = *((_QWORD *)v16 + 3);
      if (v20 >= v19 >> 1)
        v16 = (char *)sub_1000625EC(v19 > 1, v20 + 1, 1, (unint64_t)v16);
      *((_QWORD *)v16 + 2) = v20 + 1;
      v17(&v16[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v20], v28, v6);
      v15 = v25;
      v12 = v26;
    }
    v14 += v15;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease(v23);
  return v16;
}

uint64_t sub_100017854(void (*a1)(unint64_t *), uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void (*v20)(unint64_t *);
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;

  v5 = v4;
  v20 = a1;
  v21 = a2;
  v8 = type metadata accessor for UpNextEntry.Episode(0);
  v19 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a4 - a3;
  if (a4 >= a3)
  {
    if ((uint64_t)(a4 - a3) < 0)
      goto LABEL_27;
LABEL_5:
    v13 = v12 + 1;
    if (!__OFADD__(v12, 1))
    {
      v14 = (unint64_t *)&_swiftEmptyArrayStorage;
      if (v12 == -1)
        return (uint64_t)v14;
      v23 = (unint64_t *)&_swiftEmptyArrayStorage;
      result = sub_100030F30(0, v13 & ~(v13 >> 63), 0);
      if (v13 < 0)
        goto LABEL_25;
      v15 = 0;
      v14 = v23;
      while (v13)
      {
        if (v15)
          goto LABEL_28;
        v22 = a3;
        v20(&v22);
        if (v5)
        {
          swift_release(v14);
          return (uint64_t)v14;
        }
        v5 = 0;
        v23 = v14;
        v17 = v14[2];
        v16 = v14[3];
        if (v17 >= v16 >> 1)
        {
          sub_100030F30(v16 > 1, v17 + 1, 1);
          v14 = v23;
        }
        v14[2] = v17 + 1;
        result = sub_10000FC78((uint64_t)v11, (uint64_t)v14+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v17, type metadata accessor for UpNextEntry.Episode);
        v15 = a3 == a4;
        if (a3 == a4)
        {
          a3 = 0;
        }
        else if (__CFADD__(a3++, 1))
        {
          goto LABEL_23;
        }
        if (!--v13)
          return (uint64_t)v14;
      }
      __break(1u);
LABEL_23:
      __break(1u);
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if ((uint64_t)(a3 - a4) >= 0)
  {
    v12 = a4 - a3;
    goto LABEL_5;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_100017A14(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Entry;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  _QWORD *v21;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  Entry = type metadata accessor for UpNextEntry(0);
  v7 = *(_QWORD *)(Entry - 8);
  __chkstk_darwin(Entry);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v21 = _swiftEmptyArrayStorage;
    sub_100030F78(0, v10, 0);
    v11 = v21;
    v12 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
    v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v18 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = v11[2];
      v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_100030F78(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      v11[2] = v15 + 1;
      sub_10000FC78((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, type metadata accessor for UpNextEntry);
      v13 += v18;
      if (!--v10)
        return v11;
    }
    swift_release(v11);
  }
  return v11;
}

_QWORD *sub_100017B88(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  _QWORD *v21;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v6 = type metadata accessor for UpNextEntry.Episode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v21 = _swiftEmptyArrayStorage;
    sub_100030F30(0, v10, 0);
    v11 = v21;
    v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v12 = a3 + v18;
    v13 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      v19(v12);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = v11[2];
      v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_100030F30(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      v11[2] = v15 + 1;
      sub_10000FC78((uint64_t)v9, (uint64_t)v11 + v18 + v15 * v13, type metadata accessor for UpNextEntry.Episode);
      v12 += v13;
      if (!--v10)
        return v11;
    }
    swift_release(v11);
  }
  return v11;
}

uint64_t sub_100017CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];
  _BYTE *v21;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100005150(&qword_100081028);
  __chkstk_darwin(v8);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100005150(&qword_100081840);
  __chkstk_darwin(v11);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for WidgetFamily(0);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v16(v13, 0, 1, v14);
  v21 = v13;
  v17 = sub_100017854((void (*)(unint64_t *))sub_10002303C, (uint64_t)v20, 1uLL, 6uLL);
  sub_10000F008((uint64_t)v13, &qword_100081840);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  v18 = v16(v13, 1, 1, v14);
  Date.init()(v18);
  return sub_10001F36C(2u, v17, 0, (uint64_t)v10, (uint64_t)v7, v13, a2);
}

uint64_t sub_100017E98(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  char v70;
  void (*v71)(char *, uint64_t);
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t Entry;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *);
  char *v113;
  char *v114;
  _QWORD *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;

  v111 = a3;
  v112 = a2;
  v4 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v4);
  v108 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005150(&qword_100081860);
  v109 = *(_QWORD *)(v6 - 8);
  v110 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Entry = type metadata accessor for UpNextEntry(0);
  v9 = *(_QWORD *)(Entry - 8);
  __chkstk_darwin(Entry);
  v103 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v119 - 8);
  v12 = __chkstk_darwin(v119);
  v104 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v116 = (char *)&v100 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v100 - v17;
  v19 = __chkstk_darwin(v16);
  v114 = (char *)&v100 - v20;
  v21 = __chkstk_darwin(v19);
  v120 = (char *)&v100 - v22;
  __chkstk_darwin(v21);
  v117 = (char *)&v100 - v23;
  v24 = sub_100005150(&qword_100081028);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v105 = (char *)&v100 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v118 = (char *)&v100 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v100 - v31;
  __chkstk_darwin(v30);
  v34 = (char *)&v100 - v33;
  v122 = *(_QWORD **)(a1 + 24);
  v35 = sub_100005150(&qword_100081868);
  v36 = sub_100022F24();
  v37 = Collection.isNotEmpty.getter(v35, v36);
  if ((v37 & 1) != 0)
  {
    v121 = v11;
    v102 = v9;
    v113 = v18;
    v101 = v8;
    v106 = a1;
    v38 = sub_100018828(a1);
    v39 = v38[2];
    if (v39)
    {
      v40 = *(unsigned __int8 *)(v25 + 80);
      v115 = v38;
      v41 = (uint64_t)v38 + ((v40 + 32) & ~v40);
      v42 = *(_QWORD *)(v25 + 72);
      v43 = _swiftEmptyArrayStorage;
      v44 = v119;
      v45 = v121;
      do
      {
        sub_10000EFC4(v41, (uint64_t)v34, &qword_100081028);
        sub_10000EEF8((uint64_t)v34, (uint64_t)v32, &qword_100081028);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v32, 1, v44) == 1)
        {
          sub_10000F008((uint64_t)v32, &qword_100081028);
        }
        else
        {
          v46 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
          v47 = v117;
          v46(v117, v32, v44);
          v46(v120, v47, v44);
          if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
            v43 = (_QWORD *)sub_1000625EC(0, v43[2] + 1, 1, (unint64_t)v43);
          v49 = v43[2];
          v48 = v43[3];
          v50 = (uint64_t)v43;
          v45 = v121;
          if (v49 >= v48 >> 1)
            v50 = sub_1000625EC(v48 > 1, v49 + 1, 1, (unint64_t)v43);
          *(_QWORD *)(v50 + 16) = v49 + 1;
          v43 = (_QWORD *)v50;
          v51 = v50
              + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))
              + *(_QWORD *)(v45 + 72) * v49;
          v44 = v119;
          v46((char *)v51, v120, v119);
        }
        v41 += v42;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease(v115);
      v61 = (uint64_t)v118;
    }
    else
    {
      swift_bridgeObjectRelease(v38);
      v43 = _swiftEmptyArrayStorage;
      v61 = (uint64_t)v118;
      v44 = v119;
      v45 = v121;
    }
    v122 = _swiftEmptyArrayStorage;
    v62 = v113;
    v63 = v114;
    v117 = (char *)v43[2];
    if (v117)
    {
      v64 = 0;
      v115 = v43;
      while ((unint64_t)v64 < v43[2])
      {
        v65 = v121;
        v66 = (*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
        v67 = *(_QWORD *)(v121 + 72);
        (*(void (**)(uint64_t, char *, uint64_t))(v121 + 16))(v61, (char *)v43 + v66 + v67 * (_QWORD)v64, v44);
        v120 = *(char **)(v65 + 56);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v120)(v61, 0, 1, v44);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v61, 1, v44) == 1)
          goto LABEL_29;
        v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 32);
        v69 = v68(v63, v61, v44);
        Date.init()(v69);
        v70 = static Date.> infix(_:_:)(v63, v62);
        v71 = *(void (**)(char *, uint64_t))(v65 + 8);
        v71(v62, v44);
        if ((v70 & 1) != 0)
        {
          v68(v116, (uint64_t)v63, v44);
          v72 = v122;
          if ((swift_isUniquelyReferenced_nonNull_native(v122) & 1) == 0)
          {
            sub_100030F04(0, v72[2] + 1, 1);
            v72 = v122;
          }
          v74 = v72[2];
          v73 = v72[3];
          v61 = (uint64_t)v118;
          if (v74 >= v73 >> 1)
          {
            sub_100030F04(v73 > 1, v74 + 1, 1);
            v72 = v122;
          }
          v72[2] = v74 + 1;
          v75 = (unint64_t)v72 + v66 + v74 * v67;
          v44 = v119;
          v68((char *)v75, (uint64_t)v116, v119);
          v122 = v72;
          v62 = v113;
          v63 = v114;
        }
        else
        {
          v71(v63, v44);
          v61 = (uint64_t)v118;
        }
        ++v64;
        v43 = v115;
        if (v117 == v64)
          goto LABEL_28;
      }
      __break(1u);
      result = swift_release(v122);
      __break(1u);
    }
    else
    {
      v120 = *(char **)(v45 + 56);
LABEL_28:
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v120)(v61, 1, 1, v44);
LABEL_29:
      swift_bridgeObjectRelease(v43);
      sub_10000F008(v61, &qword_100081028);
      v76 = v122;
      swift_retain(v122);
      sub_10001FFD4(&v122);
      v77 = v101;
      v78 = v108;
      v79 = (uint64_t)v105;
      v80 = swift_release(v76);
      v81 = (uint64_t)v122;
      __chkstk_darwin(v80);
      *(&v100 - 2) = v106;
      v82 = sub_100017A14((void (*)(uint64_t))sub_100022F70, (uint64_t)(&v100 - 4), v81);
      swift_release(v81);
      v83 = v82[2];
      if (v83)
      {
        v84 = Entry;
        v85 = v121;
        v86 = v119;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v121 + 16))(v79, (unint64_t)v82+ ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80))+ *(_QWORD *)(v102 + 72) * (v83 - 1)+ *(int *)(Entry + 40), v119);
        v87 = 0;
        v88 = v113;
        v89 = v104;
        v90 = (uint64_t)v103;
      }
      else
      {
        v87 = 1;
        v86 = v119;
        v84 = Entry;
        v88 = v113;
        v89 = v104;
        v90 = (uint64_t)v103;
        v85 = v121;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v120)(v79, v87, 1, v86);
      sub_10000EF3C(v106, v90, type metadata accessor for UpNextEntry);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v79, 1, v86) == 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v89, v90 + *(int *)(v84 + 40), v86);
        sub_10000EF80(v90, type metadata accessor for UpNextEntry);
        v91 = sub_10000F008(v79, &qword_100081028);
      }
      else
      {
        sub_10000EF80(v90, type metadata accessor for UpNextEntry);
        v91 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 32))(v89, v79, v86);
      }
      Date.addingTimeInterval(_:)(v91, 3600.0);
      v92 = sub_100005150(&qword_100081878);
      v93 = *(unsigned __int8 *)(v102 + 80);
      v94 = v88;
      v95 = (v93 + 32) & ~v93;
      v96 = swift_allocObject(v92, v95 + *(_QWORD *)(v102 + 72), v93 | 7);
      *(_OWORD *)(v96 + 16) = xmmword_10006D950;
      sub_10000EF3C(v106, v96 + v95, type metadata accessor for UpNextEntry);
      v122 = (_QWORD *)v96;
      sub_100021790((uint64_t)v82);
      v97 = v122;
      static TimelineReloadPolicy.after(_:)(v94);
      v98 = sub_10000FBAC(qword_100081828, type metadata accessor for UpNextEntry, (uint64_t)&unk_10006DB28);
      Timeline.init(entries:policy:)(v97, v78, v84, v98);
      v112(v77);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v77, v110);
      v99 = *(void (**)(char *, uint64_t))(v85 + 8);
      v99(v94, v86);
      return ((uint64_t (*)(char *, uint64_t))v99)(v89, v86);
    }
  }
  else
  {
    Date.init(timeIntervalSinceNow:)(v37, 86400.0);
    v52 = sub_100005150(&qword_100081878);
    v53 = *(unsigned __int8 *)(v9 + 80);
    v54 = (v53 + 32) & ~v53;
    v55 = swift_allocObject(v52, v54 + *(_QWORD *)(v9 + 72), v53 | 7);
    v56 = a1;
    v57 = v55;
    *(_OWORD *)(v55 + 16) = xmmword_10006D950;
    sub_10000EF3C(v56, v55 + v54, type metadata accessor for UpNextEntry);
    v58 = v108;
    static TimelineReloadPolicy.after(_:)(v18);
    v59 = sub_10000FBAC(qword_100081828, type metadata accessor for UpNextEntry, (uint64_t)&unk_10006DB28);
    Timeline.init(entries:policy:)(v57, v58, Entry, v59);
    v112(v8);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v8, v110);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v18, v119);
  }
  return result;
}

_QWORD *sub_100018828(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t Entry;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(char *, uint64_t);
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v40 = type metadata accessor for Calendar(0);
  v2 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005150(&qword_100081028);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v39 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v39 - v17;
  sub_100017510(*(_QWORD *)(a1 + 24), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000F008((uint64_t)v8, &qword_100081028);
LABEL_6:
    Entry = type metadata accessor for UpNextEntry(0);
    v29 = Date.addingTimeInterval(_:)(Entry, 28800.0);
    v30 = static Calendar.current.getter(v29);
    Date.init()(v30);
    v31 = sub_100018BA0((uint64_t)v13, (uint64_t)v16);
    v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v13, v9);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v40);
    v33 = sub_100018F58((uint64_t)v31);
    swift_bridgeObjectRelease(v31);
    v34 = sub_100005150(&qword_100081880);
    v35 = *(unsigned __int8 *)(v6 + 80);
    v36 = (v35 + 32) & ~v35;
    v37 = swift_allocObject(v34, v36 + *(_QWORD *)(v6 + 72), v35 | 7);
    *(_OWORD *)(v37 + 16) = xmmword_10006D950;
    sub_10000EFC4(a1 + *(int *)(Entry + 36), v37 + v36, &qword_100081028);
    v41 = v33;
    sub_1000214B0(v37);
    v27 = v41;
    v32(v16, v9);
    return v27;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v8, v9);
  v19 = a1 + *(int *)(type metadata accessor for UpNextEntry(0) + 40);
  v20 = static Date.> infix(_:_:)(v18, v19);
  if ((v20 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
    goto LABEL_6;
  }
  static Calendar.current.getter(v20);
  v21 = sub_100018BA0(v19, (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v40);
  v22 = sub_100005150(&qword_100081888);
  v23 = *(unsigned __int8 *)(v10 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(v22, v24 + *(_QWORD *)(v10 + 72), v23 | 7);
  *(_OWORD *)(v25 + 16) = xmmword_10006D950;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v25 + v24, v18, v9);
  v41 = v21;
  sub_100021628(v25);
  v26 = (uint64_t)v41;
  v27 = sub_100018F58((uint64_t)v41);
  swift_bridgeObjectRelease(v26);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
  return v27;
}

_QWORD *sub_100018BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60[16];
  uint64_t v61;
  _QWORD **v62;
  _QWORD *v63;

  v56 = a2;
  v59 = a1;
  v2 = type metadata accessor for Calendar.SearchDirection(0);
  v57 = *(_QWORD *)(v2 - 8);
  v58 = v2;
  __chkstk_darwin(v2);
  v55 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar.MatchingPolicy(0);
  v48 = *(_QWORD *)(v7 - 8);
  v8 = v48;
  __chkstk_darwin(v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005150(&qword_1000814A8);
  __chkstk_darwin(v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005150(&qword_100081890);
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DateComponents(0);
  v51 = *(_QWORD *)(v17 - 8);
  v52 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Calendar(0);
  v21 = *(_QWORD *)(v20 - 8);
  v49 = v20;
  v50 = v21;
  v22 = v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = _swiftEmptyArrayStorage;
  static Calendar.current.getter(v23);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v16, 1, 1, v20);
  v26 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v13, 1, 1, v26);
  v47 = 1;
  v46 = 1;
  v45 = 1;
  v44 = 1;
  v43 = 1;
  v42 = 1;
  v41 = 1;
  v40 = 1;
  v39 = 0;
  v38 = 1;
  v37 = 1;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v16, v13, 0, 1, 0, 1, 0, 1, 0, v37, 0, v38, 0, v39, 0, v40, 0, v41, 0,
    v42,
    0,
    v43,
    0,
    v44,
    0,
    v45,
    0,
    v46,
    0,
    v47);
  v27 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v28 = v10;
  v29 = v7;
  v27(v10, enum case for Calendar.MatchingPolicy.nextTime(_:), v7);
  v61 = v56;
  v62 = &v63;
  v30 = v53;
  v31 = v54;
  v32 = v6;
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v6, enum case for Calendar.RepeatedTimePolicy.first(_:), v54);
  v34 = v57;
  v33 = v58;
  v35 = v55;
  (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v55, enum case for Calendar.SearchDirection.forward(_:), v58);
  Calendar.enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(v59, v19, v28, v32, v35, sub_100022FF8, v60);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v33);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v31);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v52);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v25, v49);
  return v63;
}

_QWORD *sub_100018F58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005150(&qword_100081028);
  v6 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v19 = _swiftEmptyArrayStorage;
    sub_100030F5C(0, v9, 0);
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v17 = *(_QWORD *)(v3 + 72);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v12(v5, v11, v2);
      swift_dynamicCast(v8, v5, v2, v18, 7);
      v10 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      {
        sub_100030F5C(0, v10[2] + 1, 1);
        v10 = v19;
      }
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_100030F5C(v13 > 1, v14 + 1, 1);
        v10 = v19;
      }
      v10[2] = v14 + 1;
      sub_10000EEF8((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, &qword_100081028);
      v11 += v17;
      --v9;
    }
    while (v9);
  }
  return v10;
}

uint64_t sub_10001911C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t Entry;
  void *v23;
  char v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;

  v30 = a2;
  v4 = sub_100005150(&qword_100081840);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005150(&qword_100081028);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v28 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v28 - v18;
  v20 = *(_QWORD *)(v2 + 24);
  v31 = a1;
  v33 = a1;
  swift_bridgeObjectRetain(v20);
  v21 = sub_100017B88((void (*)(uint64_t))sub_100022F98, (uint64_t)v32, v20);
  swift_bridgeObjectRelease(v20);
  Entry = type metadata accessor for UpNextEntry(0);
  v23 = *(void **)(v2 + *(int *)(Entry + 32));
  if (v23)
  {
    sub_10000EFC4(v2 + *(int *)(Entry + 36), (uint64_t)v12, &qword_100081028);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      sub_10000F008((uint64_t)v12, &qword_100081028);
LABEL_6:
      v23 = 0;
      goto LABEL_7;
    }
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v12, v13);
    v29 = v23;
    v24 = static Date.> infix(_:_:)(v19, v31);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    if ((v24 & 1) == 0)
    {

      goto LABEL_6;
    }
  }
LABEL_7:
  v25 = *(_BYTE *)(v2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v10, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v31, v13);
  v26 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v6, 1, 1, v26);
  return sub_10001F36C(v25, (uint64_t)v21, v23, (uint64_t)v10, (uint64_t)v17, v6, v30);
}

uint64_t sub_10001939C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TimelineProviderContext.family.getter(v4);
  sub_100017CE0((uint64_t)v6, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_100019430(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  swift_retain(a3);
  sub_100031D80(a1, a2, a3);
  return swift_release(a3);
}

uint64_t sub_100019478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000100C4;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_1000194E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100023050;
  return TimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_100019550()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for UpNextEntry.Episode.CaptionGenerator()
{
  return objc_opt_self(_TtCVV14PodcastsWidget11UpNextEntry7EpisodeP33_58AE4412B7A0DB87F655285A4FB0C74716CaptionGenerator);
}

BOOL sub_100019594(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for UpNextEntryProvider()
{
  return &type metadata for UpNextEntryProvider;
}

char *sub_1000195B8(uint64_t a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = (char *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (char *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[3];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a3[7];
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[8];
    v15 = a3[9];
    v16 = *(void **)((char *)a2 + v14);
    *(_QWORD *)&v4[v14] = v16;
    v17 = &v4[v15];
    v18 = (char *)a2 + v15;
    v19 = type metadata accessor for Date(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    v22 = v16;
    if (v21(v18, 1, v19))
    {
      v23 = sub_100005150(&qword_100081028);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(&v4[a3[10]], (uint64_t)a2 + a3[10], v19);
    }
    else
    {
      v25 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
      v25(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      v25(&v4[a3[10]], (char *)a2 + a3[10], v19);
    }
    v26 = a3[11];
    v27 = &v4[v26];
    v28 = (char *)a2 + v26;
    v29 = type metadata accessor for TimelineEntryRelevance(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = sub_100005150(&qword_100081680);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
  }
  return v4;
}

uint64_t sub_1000197B0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[7];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  v6 = a1 + a2[9];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  if (!v9)
    v10(v6, v7);
  v10(a1 + a2[10], v7);
  v11 = a1 + a2[11];
  v12 = type metadata accessor for TimelineEntryRelevance(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  return result;
}

uint64_t sub_1000198C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  id v21;
  uint64_t v22;
  void (*v23)(void *, const void *, uint64_t);
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[8];
  v14 = a3[9];
  v15 = *(void **)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v15;
  v16 = (void *)(a1 + v14);
  v17 = (const void *)(a2 + v14);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v15;
  if (v20(v17, 1, v18))
  {
    v22 = sub_100005150(&qword_100081028);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a1 + a3[10], a2 + a3[10], v18);
  }
  else
  {
    v23 = *(void (**)(void *, const void *, uint64_t))(v19 + 16);
    v23(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    v23((void *)(a1 + a3[10]), (const void *)(a2 + a3[10]), v18);
  }
  v24 = a3[11];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = type metadata accessor for TimelineEntryRelevance(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_100005150(&qword_100081680);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  return a1;
}

uint64_t sub_100019A8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[8];
  v15 = *(void **)(a1 + v14);
  v16 = *(void **)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v16;
  v17 = v16;

  v18 = a3[9];
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100005150(&qword_100081028);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 24))(a1 + a3[10], a2 + a3[10], v21);
  v27 = a3[11];
  v28 = (void *)(a1 + v27);
  v29 = (void *)(a2 + v27);
  v30 = type metadata accessor for TimelineEntryRelevance(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 24))(v28, v29, v30);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v31 + 8))(v28, v30);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    v35 = sub_100005150(&qword_100081680);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v31 + 16))(v28, v29, v30);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  return a1;
}

uint64_t sub_100019D00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void *, const void *, uint64_t);
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100005150(&qword_100081028);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(a1 + a3[10], a2 + a3[10], v13);
  }
  else
  {
    v16 = *(void (**)(void *, const void *, uint64_t))(v14 + 32);
    v16(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    v16((void *)(a1 + a3[10]), (const void *)(a2 + a3[10]), v13);
  }
  v17 = a3[11];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = type metadata accessor for TimelineEntryRelevance(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100005150(&qword_100081680);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_100019EAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[8];
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);

  v15 = a3[9];
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    v23 = sub_100005150(&qword_100081028);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 40))(a1 + a3[10], a2 + a3[10], v18);
  v24 = a3[11];
  v25 = (void *)(a1 + v24);
  v26 = (void *)(a2 + v24);
  v27 = type metadata accessor for TimelineEntryRelevance(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v25, v26, v27);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v32 = sub_100005150(&qword_100081680);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t sub_10001A104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001A110);
}

uint64_t sub_10001A110(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[7];
    }
    else
    {
      v12 = sub_100005150(&qword_100081028);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v13 = type metadata accessor for Date(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[10];
        }
        else
        {
          v10 = sub_100005150(&qword_100081680);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[11];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10001A200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001A20C);
}

uint64_t sub_10001A20C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[7];
    }
    else
    {
      v12 = sub_100005150(&qword_100081028);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v13 = type metadata accessor for Date(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[10];
        }
        else
        {
          v10 = sub_100005150(&qword_100081680);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[11];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for UpNextEntry(uint64_t a1)
{
  return sub_10001EA54(a1, (uint64_t *)&unk_1000816E0, (uint64_t)&nominal type descriptor for UpNextEntry);
}

void sub_10001A30C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  v10[0] = &unk_10006D9E8;
  v10[1] = &unk_10006DA00;
  v10[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v10[3] = *(_QWORD *)(v2 - 8) + 64;
    v10[4] = &unk_10006DA18;
    sub_10001EBCC(319, (unint64_t *)&qword_100081448, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v10[5] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for Date(319);
      if (v7 <= 0x3F)
      {
        v10[6] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001EBCC(319, (unint64_t *)&unk_1000816F0, (uint64_t (*)(uint64_t))&type metadata accessor for TimelineEntryRelevance);
        if (v9 <= 0x3F)
        {
          v10[7] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *sub_10001A414(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id *v49;
  int v50;
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  id *v73;
  int v74;
  id v75;
  id *v76;
  int v77;
  id v78;
  id *v79;
  int v80;
  id v81;
  id *v82;
  int v83;
  id v84;
  id *v85;
  int v86;
  id v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  void (*v100)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v101;
  uint64_t v102;
  void *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(char *, uint64_t, uint64_t);
  id v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(char *, char *, uint64_t);
  int *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *__dst;
  uint64_t v161;
  uint64_t v162;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    v20 = (_QWORD *)(v19 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v19);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v9 = a2[6];
    v8 = a2[7];
    a1[6] = v9;
    a1[7] = v8;
    v11 = a2[8];
    v10 = a2[9];
    a1[8] = v11;
    a1[9] = v10;
    v12 = a2[10];
    v13 = a3[10];
    __dst = (char *)a1 + v13;
    v14 = (char *)a2 + v13;
    a1[10] = v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_retain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    v161 = v16;
    v162 = v15;
    if (v17(v14, 1, v15))
    {
      v18 = sub_100005150(&qword_100081028);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v21 = a3;
    v22 = a3[11];
    v23 = a3[12];
    v20 = a1;
    v24 = (_QWORD *)((char *)a1 + v22);
    v25 = (_QWORD *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (_QWORD *)((char *)a1 + v23);
    v28 = (_QWORD *)((char *)a2 + v23);
    v29 = (int *)type metadata accessor for ArtworkModel(0);
    v30 = *((_QWORD *)v29 - 1);
    v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
    swift_bridgeObjectRetain(v26);
    if (v31(v28, 1, v29))
    {
      v32 = sub_100005150(&qword_100081030);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v33 = v28[1];
      *v27 = *v28;
      v27[1] = v33;
      v34 = *((unsigned __int8 *)v28 + 32);
      swift_bridgeObjectRetain(v33);
      if (v34 == 255)
      {
        *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
        *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
      }
      else
      {
        v35 = v28[2];
        v36 = v28[3];
        sub_100005190(v35, v36, v34);
        v27[2] = v35;
        v27[3] = v36;
        *((_BYTE *)v27 + 32) = v34;
      }
      *(_OWORD *)(v27 + 5) = *(_OWORD *)(v28 + 5);
      v37 = (id *)(v28 + 7);
      v38 = *((unsigned __int8 *)v28 + 64);
      if (v38 == 255)
      {
        v27[7] = *v37;
        *((_BYTE *)v27 + 64) = *((_BYTE *)v28 + 64);
      }
      else
      {
        v39 = *v37;
        sub_1000051A8(*v37, *((_BYTE *)v28 + 64));
        v27[7] = v39;
        *((_BYTE *)v27 + 64) = v38;
      }
      v40 = (id *)(v28 + 9);
      v41 = *((unsigned __int8 *)v28 + 80);
      if (v41 == 255)
      {
        v27[9] = *v40;
        *((_BYTE *)v27 + 80) = *((_BYTE *)v28 + 80);
      }
      else
      {
        v42 = *v40;
        sub_1000051A8(*v40, *((_BYTE *)v28 + 80));
        v27[9] = v42;
        *((_BYTE *)v27 + 80) = v41;
      }
      v43 = (id *)(v28 + 11);
      v44 = *((unsigned __int8 *)v28 + 96);
      if (v44 == 255)
      {
        v27[11] = *v43;
        *((_BYTE *)v27 + 96) = *((_BYTE *)v28 + 96);
      }
      else
      {
        v45 = *v43;
        sub_1000051A8(*v43, *((_BYTE *)v28 + 96));
        v27[11] = v45;
        *((_BYTE *)v27 + 96) = v44;
      }
      v46 = (id *)(v28 + 13);
      v47 = *((unsigned __int8 *)v28 + 112);
      if (v47 == 255)
      {
        v27[13] = *v46;
        *((_BYTE *)v27 + 112) = *((_BYTE *)v28 + 112);
      }
      else
      {
        v48 = *v46;
        sub_1000051A8(*v46, *((_BYTE *)v28 + 112));
        v27[13] = v48;
        *((_BYTE *)v27 + 112) = v47;
      }
      v49 = (id *)(v28 + 15);
      v50 = *((unsigned __int8 *)v28 + 128);
      if (v50 == 255)
      {
        v27[15] = *v49;
        *((_BYTE *)v27 + 128) = *((_BYTE *)v28 + 128);
      }
      else
      {
        v51 = *v49;
        sub_1000051A8(*v49, *((_BYTE *)v28 + 128));
        v27[15] = v51;
        *((_BYTE *)v27 + 128) = v50;
      }
      v21 = a3;
      *((_BYTE *)v27 + 129) = *((_BYTE *)v28 + 129);
      v52 = v29[11];
      v53 = (char *)v27 + v52;
      v54 = (char *)v28 + v52;
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      v56 = v29[12];
      v57 = (_QWORD *)((char *)v27 + v56);
      v58 = (_QWORD *)((char *)v28 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
      *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
      *((_BYTE *)v27 + v29[15]) = *((_BYTE *)v28 + v29[15]);
      v60 = v29[16];
      v61 = (_QWORD *)((char *)v27 + v60);
      v62 = (_QWORD *)((char *)v28 + v60);
      v63 = v62[1];
      *v61 = *v62;
      v61[1] = v63;
      v64 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      v64(v27, 0, 1, v29);
    }
    v65 = v21[13];
    v66 = (_QWORD *)((char *)a1 + v65);
    v67 = (_QWORD *)((char *)a2 + v65);
    if (v31((_QWORD *)((char *)a2 + v65), 1, v29))
    {
      v68 = sub_100005150(&qword_100081030);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = v67[1];
      *v66 = *v67;
      v66[1] = v69;
      v70 = *((unsigned __int8 *)v67 + 32);
      swift_bridgeObjectRetain(v69);
      if (v70 == 255)
      {
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        *((_BYTE *)v66 + 32) = *((_BYTE *)v67 + 32);
      }
      else
      {
        v71 = v67[2];
        v72 = v67[3];
        sub_100005190(v71, v72, v70);
        v66[2] = v71;
        v66[3] = v72;
        *((_BYTE *)v66 + 32) = v70;
      }
      *(_OWORD *)(v66 + 5) = *(_OWORD *)(v67 + 5);
      v73 = (id *)(v67 + 7);
      v74 = *((unsigned __int8 *)v67 + 64);
      if (v74 == 255)
      {
        v66[7] = *v73;
        *((_BYTE *)v66 + 64) = *((_BYTE *)v67 + 64);
      }
      else
      {
        v75 = *v73;
        sub_1000051A8(*v73, *((_BYTE *)v67 + 64));
        v66[7] = v75;
        *((_BYTE *)v66 + 64) = v74;
      }
      v76 = (id *)(v67 + 9);
      v77 = *((unsigned __int8 *)v67 + 80);
      if (v77 == 255)
      {
        v66[9] = *v76;
        *((_BYTE *)v66 + 80) = *((_BYTE *)v67 + 80);
      }
      else
      {
        v78 = *v76;
        sub_1000051A8(*v76, *((_BYTE *)v67 + 80));
        v66[9] = v78;
        *((_BYTE *)v66 + 80) = v77;
      }
      v79 = (id *)(v67 + 11);
      v80 = *((unsigned __int8 *)v67 + 96);
      if (v80 == 255)
      {
        v66[11] = *v79;
        *((_BYTE *)v66 + 96) = *((_BYTE *)v67 + 96);
      }
      else
      {
        v81 = *v79;
        sub_1000051A8(*v79, *((_BYTE *)v67 + 96));
        v66[11] = v81;
        *((_BYTE *)v66 + 96) = v80;
      }
      v82 = (id *)(v67 + 13);
      v83 = *((unsigned __int8 *)v67 + 112);
      if (v83 == 255)
      {
        v66[13] = *v82;
        *((_BYTE *)v66 + 112) = *((_BYTE *)v67 + 112);
      }
      else
      {
        v84 = *v82;
        sub_1000051A8(*v82, *((_BYTE *)v67 + 112));
        v66[13] = v84;
        *((_BYTE *)v66 + 112) = v83;
      }
      v85 = (id *)(v67 + 15);
      v86 = *((unsigned __int8 *)v67 + 128);
      if (v86 == 255)
      {
        v66[15] = *v85;
        *((_BYTE *)v66 + 128) = *((_BYTE *)v67 + 128);
      }
      else
      {
        v87 = *v85;
        sub_1000051A8(*v85, *((_BYTE *)v67 + 128));
        v66[15] = v87;
        *((_BYTE *)v66 + 128) = v86;
      }
      v21 = a3;
      *((_BYTE *)v66 + 129) = *((_BYTE *)v67 + 129);
      v88 = v29[11];
      v89 = (char *)v66 + v88;
      v90 = (char *)v67 + v88;
      v91 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v89, v90, v91);
      v92 = v29[12];
      v93 = (_QWORD *)((char *)v66 + v92);
      v94 = (_QWORD *)((char *)v67 + v92);
      v95 = v94[1];
      *v93 = *v94;
      v93[1] = v95;
      *((_BYTE *)v66 + v29[13]) = *((_BYTE *)v67 + v29[13]);
      *((_BYTE *)v66 + v29[14]) = *((_BYTE *)v67 + v29[14]);
      *((_BYTE *)v66 + v29[15]) = *((_BYTE *)v67 + v29[15]);
      v96 = v29[16];
      v97 = (_QWORD *)((char *)v66 + v96);
      v98 = (_QWORD *)((char *)v67 + v96);
      v99 = v98[1];
      *v97 = *v98;
      v97[1] = v99;
      v100 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v95);
      swift_bridgeObjectRetain(v99);
      v100(v66, 0, 1, v29);
    }
    v101 = v21[14];
    v102 = v21[15];
    v103 = *(void **)((char *)a2 + v101);
    *(_QWORD *)((char *)a1 + v101) = v103;
    v104 = (char *)a1 + v102;
    v105 = (char *)a2 + v102;
    v106 = type metadata accessor for URL(0);
    v107 = *(_QWORD *)(v106 - 8);
    v108 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
    v109 = v103;
    if (v108(v105, 1, v106))
    {
      v110 = sub_100005150(&qword_100081038);
      memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v104, v105, v106);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v104, 0, 1, v106);
    }
    v111 = a3[17];
    *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    v112 = (char *)a1 + v111;
    v113 = (char *)a2 + v111;
    *(_QWORD *)v112 = *(_QWORD *)v113;
    v112[8] = v113[8];
    v114 = a3[18];
    v115 = a3[19];
    v116 = (char *)a1 + v114;
    v117 = (char *)a2 + v114;
    *(_QWORD *)v116 = *(_QWORD *)v117;
    v116[8] = v117[8];
    v118 = (char *)a1 + v115;
    v119 = (char *)a2 + v115;
    if (v17((char *)a2 + v115, 1, v162))
    {
      v120 = sub_100005150(&qword_100081028);
      memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v118, v119, v162);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v118, 0, 1, v162);
    }
    v121 = a3[20];
    v122 = (char *)a1 + v121;
    v123 = (char *)a2 + v121;
    if (v17((char *)a2 + v121, 1, v162))
    {
      v124 = sub_100005150(&qword_100081028);
      memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v122, v123, v162);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v122, 0, 1, v162);
    }
    v125 = a3[21];
    v126 = (_QWORD *)((char *)a1 + v125);
    v127 = (_QWORD *)((char *)a2 + v125);
    v128 = *v127;
    if (*v127)
    {
      v129 = v127[1];
      v130 = v127[2];
      *v126 = v128;
      v126[1] = v129;
      v126[2] = v130;
      swift_retain(v128);
      swift_retain(v129);
      swift_retain(v130);
    }
    else
    {
      *(_OWORD *)v126 = *(_OWORD *)v127;
      v126[2] = v127[2];
    }
    v131 = a3[22];
    v132 = (char *)a1 + v131;
    v133 = (char *)a2 + v131;
    v134 = sub_100005150(&qword_100081040);
    v135 = *(_QWORD *)(v134 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
    {
      v136 = sub_100005150(&qword_100081048);
      memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
    }
    else
    {
      v137 = *(void (**)(char *, char *, uint64_t))(v161 + 16);
      v137(v132, v133, v162);
      v137(&v132[*(int *)(v134 + 36)], &v133[*(int *)(v134 + 36)], v162);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v132, 0, 1, v134);
    }
    v138 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    v139 = v138[5];
    v140 = &v132[v139];
    v141 = &v133[v139];
    v142 = type metadata accessor for PlaybackButton.State(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 16))(v140, v141, v142);
    v143 = v138[6];
    v144 = &v132[v143];
    v145 = &v133[v143];
    v146 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    v147 = *(_QWORD *)(v146 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
    {
      v148 = sub_100005150(&qword_100081050);
      memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v144, v145, v146);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
    }
    v149 = v138[7];
    v150 = &v132[v149];
    v151 = &v133[v149];
    v152 = *((_QWORD *)v151 + 1);
    *(_QWORD *)v150 = *(_QWORD *)v151;
    *((_QWORD *)v150 + 1) = v152;
    v153 = v138[8];
    v154 = &v132[v153];
    v155 = &v133[v153];
    v156 = *((_QWORD *)v155 + 1);
    *(_QWORD *)v154 = *(_QWORD *)v155;
    *((_QWORD *)v154 + 1) = v156;
    swift_bridgeObjectRetain(v152);
    swift_bridgeObjectRetain(v156);
  }
  return v20;
}

uint64_t sub_10001AE54(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  char *v8;
  int *v9;
  unsigned int (*v10)(char *, uint64_t, int *);
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  int *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_release(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  v4 = (char *)a1 + a2[10];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[11] + 8));
  v8 = (char *)a1 + a2[12];
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48);
  if (!v10(v8, 1, v9))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
    v11 = v8[32];
    if (v11 != 255)
      sub_100005624(*((_QWORD *)v8 + 2), *((_QWORD *)v8 + 3), v11);
    v12 = v8[64];
    if (v12 != 255)
      sub_10000563C(*((id *)v8 + 7), v12);
    v13 = v8[80];
    if (v13 != 255)
      sub_10000563C(*((id *)v8 + 9), v13);
    v14 = v8[96];
    if (v14 != 255)
      sub_10000563C(*((id *)v8 + 11), v14);
    v15 = v8[112];
    if (v15 != 255)
      sub_10000563C(*((id *)v8 + 13), v15);
    v16 = v8[128];
    if (v16 != 255)
      sub_10000563C(*((id *)v8 + 15), v16);
    v17 = &v8[v9[11]];
    v18 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_bridgeObjectRelease(*(_QWORD *)&v8[v9[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v8[v9[16] + 8]);
  }
  v19 = (char *)a1 + a2[13];
  if (!v10(v19, 1, v9))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v19 + 1));
    v20 = v19[32];
    if (v20 != 255)
      sub_100005624(*((_QWORD *)v19 + 2), *((_QWORD *)v19 + 3), v20);
    v21 = v19[64];
    if (v21 != 255)
      sub_10000563C(*((id *)v19 + 7), v21);
    v22 = v19[80];
    if (v22 != 255)
      sub_10000563C(*((id *)v19 + 9), v22);
    v23 = v19[96];
    if (v23 != 255)
      sub_10000563C(*((id *)v19 + 11), v23);
    v24 = v19[112];
    if (v24 != 255)
      sub_10000563C(*((id *)v19 + 13), v24);
    v25 = v19[128];
    if (v25 != 255)
      sub_10000563C(*((id *)v19 + 15), v25);
    v26 = &v19[v9[11]];
    v27 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
    swift_bridgeObjectRelease(*(_QWORD *)&v19[v9[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v19[v9[16] + 8]);
  }

  v28 = (char *)a1 + a2[15];
  v29 = type metadata accessor for URL(0);
  v30 = *(_QWORD *)(v29 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v29);
  v31 = (char *)a1 + a2[19];
  if (!v7(v31, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v31, v5);
  v32 = (char *)a1 + a2[20];
  if (!v7(v32, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v32, v5);
  v33 = (_QWORD *)((char *)a1 + a2[21]);
  if (*v33)
  {
    swift_release(*v33);
    swift_release(v33[1]);
    swift_release(v33[2]);
  }
  v34 = (char *)a1 + a2[22];
  v35 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v34, 1, v35))
  {
    v36 = *(void (**)(char *, uint64_t))(v6 + 8);
    v36(v34, v5);
    v36(&v34[*(int *)(v35 + 36)], v5);
  }
  v37 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v38 = &v34[v37[5]];
  v39 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
  v40 = &v34[v37[6]];
  v41 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v42 = *(_QWORD *)(v41 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
  swift_bridgeObjectRelease(*(_QWORD *)&v34[v37[7] + 8]);
  return swift_bridgeObjectRelease(*(_QWORD *)&v34[v37[8] + 8]);
}

_QWORD *sub_10001B290(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  unsigned int (*v30)(_QWORD *, uint64_t, int *);
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  int v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  id *v42;
  int v43;
  id v44;
  id *v45;
  int v46;
  id v47;
  id *v48;
  int v49;
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  void (*v63)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  id *v72;
  int v73;
  id v74;
  id *v75;
  int v76;
  id v77;
  id *v78;
  int v79;
  id v80;
  id *v81;
  int v82;
  id v83;
  id *v84;
  int v85;
  id v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  void (*v99)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v100;
  uint64_t v101;
  void *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int (*v107)(char *, uint64_t, uint64_t);
  id v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  int *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *__dst;
  uint64_t v159;
  uint64_t v160;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v8 = a2[6];
  v7 = a2[7];
  a1[6] = v8;
  a1[7] = v7;
  v10 = a2[8];
  v9 = a2[9];
  a1[8] = v10;
  a1[9] = v9;
  v11 = a2[10];
  v12 = a3[10];
  __dst = (char *)a1 + v12;
  v13 = (char *)a2 + v12;
  a1[10] = v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v4;
  v18 = v14;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v159 = v15;
  v160 = v18;
  if (v16(v13, 1, v18))
  {
    v19 = sub_100005150(&qword_100081028);
    memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v18);
  }
  v20 = a3;
  v21 = a3[11];
  v22 = a3[12];
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = (_QWORD *)((char *)a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = (_QWORD *)((char *)a1 + v22);
  v27 = (_QWORD *)((char *)a2 + v22);
  v28 = (int *)type metadata accessor for ArtworkModel(0);
  v29 = *((_QWORD *)v28 - 1);
  v30 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v29 + 48);
  swift_bridgeObjectRetain(v25);
  if (v30(v27, 1, v28))
  {
    v31 = sub_100005150(&qword_100081030);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v27[1];
    *v26 = *v27;
    v26[1] = v32;
    v33 = *((unsigned __int8 *)v27 + 32);
    swift_bridgeObjectRetain(v32);
    if (v33 == 255)
    {
      *((_OWORD *)v26 + 1) = *((_OWORD *)v27 + 1);
      *((_BYTE *)v26 + 32) = *((_BYTE *)v27 + 32);
    }
    else
    {
      v34 = v27[2];
      v35 = v27[3];
      sub_100005190(v34, v35, v33);
      v26[2] = v34;
      v26[3] = v35;
      *((_BYTE *)v26 + 32) = v33;
    }
    *(_OWORD *)(v26 + 5) = *(_OWORD *)(v27 + 5);
    v36 = (id *)(v27 + 7);
    v37 = *((unsigned __int8 *)v27 + 64);
    if (v37 == 255)
    {
      v26[7] = *v36;
      *((_BYTE *)v26 + 64) = *((_BYTE *)v27 + 64);
    }
    else
    {
      v38 = *v36;
      sub_1000051A8(*v36, *((_BYTE *)v27 + 64));
      v26[7] = v38;
      *((_BYTE *)v26 + 64) = v37;
    }
    v39 = (id *)(v27 + 9);
    v40 = *((unsigned __int8 *)v27 + 80);
    if (v40 == 255)
    {
      v26[9] = *v39;
      *((_BYTE *)v26 + 80) = *((_BYTE *)v27 + 80);
    }
    else
    {
      v41 = *v39;
      sub_1000051A8(*v39, *((_BYTE *)v27 + 80));
      v26[9] = v41;
      *((_BYTE *)v26 + 80) = v40;
    }
    v42 = (id *)(v27 + 11);
    v43 = *((unsigned __int8 *)v27 + 96);
    if (v43 == 255)
    {
      v26[11] = *v42;
      *((_BYTE *)v26 + 96) = *((_BYTE *)v27 + 96);
    }
    else
    {
      v44 = *v42;
      sub_1000051A8(*v42, *((_BYTE *)v27 + 96));
      v26[11] = v44;
      *((_BYTE *)v26 + 96) = v43;
    }
    v45 = (id *)(v27 + 13);
    v46 = *((unsigned __int8 *)v27 + 112);
    if (v46 == 255)
    {
      v26[13] = *v45;
      *((_BYTE *)v26 + 112) = *((_BYTE *)v27 + 112);
    }
    else
    {
      v47 = *v45;
      sub_1000051A8(*v45, *((_BYTE *)v27 + 112));
      v26[13] = v47;
      *((_BYTE *)v26 + 112) = v46;
    }
    v48 = (id *)(v27 + 15);
    v49 = *((unsigned __int8 *)v27 + 128);
    if (v49 == 255)
    {
      v26[15] = *v48;
      *((_BYTE *)v26 + 128) = *((_BYTE *)v27 + 128);
    }
    else
    {
      v50 = *v48;
      sub_1000051A8(*v48, *((_BYTE *)v27 + 128));
      v26[15] = v50;
      *((_BYTE *)v26 + 128) = v49;
    }
    v20 = a3;
    *((_BYTE *)v26 + 129) = *((_BYTE *)v27 + 129);
    v51 = v28[11];
    v52 = (char *)v26 + v51;
    v53 = (char *)v27 + v51;
    v54 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
    v55 = v28[12];
    v56 = (_QWORD *)((char *)v26 + v55);
    v57 = (_QWORD *)((char *)v27 + v55);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    *((_BYTE *)v26 + v28[13]) = *((_BYTE *)v27 + v28[13]);
    *((_BYTE *)v26 + v28[14]) = *((_BYTE *)v27 + v28[14]);
    *((_BYTE *)v26 + v28[15]) = *((_BYTE *)v27 + v28[15]);
    v59 = v28[16];
    v60 = (_QWORD *)((char *)v26 + v59);
    v61 = (_QWORD *)((char *)v27 + v59);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v29 + 56);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v62);
    v63(v26, 0, 1, v28);
  }
  v64 = v20[13];
  v65 = (_QWORD *)((char *)a1 + v64);
  v66 = (_QWORD *)((char *)a2 + v64);
  if (v30((_QWORD *)((char *)a2 + v64), 1, v28))
  {
    v67 = sub_100005150(&qword_100081030);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    v68 = v66[1];
    *v65 = *v66;
    v65[1] = v68;
    v69 = *((unsigned __int8 *)v66 + 32);
    swift_bridgeObjectRetain(v68);
    if (v69 == 255)
    {
      *((_OWORD *)v65 + 1) = *((_OWORD *)v66 + 1);
      *((_BYTE *)v65 + 32) = *((_BYTE *)v66 + 32);
    }
    else
    {
      v70 = v66[2];
      v71 = v66[3];
      sub_100005190(v70, v71, v69);
      v65[2] = v70;
      v65[3] = v71;
      *((_BYTE *)v65 + 32) = v69;
    }
    *(_OWORD *)(v65 + 5) = *(_OWORD *)(v66 + 5);
    v72 = (id *)(v66 + 7);
    v73 = *((unsigned __int8 *)v66 + 64);
    if (v73 == 255)
    {
      v65[7] = *v72;
      *((_BYTE *)v65 + 64) = *((_BYTE *)v66 + 64);
    }
    else
    {
      v74 = *v72;
      sub_1000051A8(*v72, *((_BYTE *)v66 + 64));
      v65[7] = v74;
      *((_BYTE *)v65 + 64) = v73;
    }
    v75 = (id *)(v66 + 9);
    v76 = *((unsigned __int8 *)v66 + 80);
    if (v76 == 255)
    {
      v65[9] = *v75;
      *((_BYTE *)v65 + 80) = *((_BYTE *)v66 + 80);
    }
    else
    {
      v77 = *v75;
      sub_1000051A8(*v75, *((_BYTE *)v66 + 80));
      v65[9] = v77;
      *((_BYTE *)v65 + 80) = v76;
    }
    v78 = (id *)(v66 + 11);
    v79 = *((unsigned __int8 *)v66 + 96);
    if (v79 == 255)
    {
      v65[11] = *v78;
      *((_BYTE *)v65 + 96) = *((_BYTE *)v66 + 96);
    }
    else
    {
      v80 = *v78;
      sub_1000051A8(*v78, *((_BYTE *)v66 + 96));
      v65[11] = v80;
      *((_BYTE *)v65 + 96) = v79;
    }
    v81 = (id *)(v66 + 13);
    v82 = *((unsigned __int8 *)v66 + 112);
    if (v82 == 255)
    {
      v65[13] = *v81;
      *((_BYTE *)v65 + 112) = *((_BYTE *)v66 + 112);
    }
    else
    {
      v83 = *v81;
      sub_1000051A8(*v81, *((_BYTE *)v66 + 112));
      v65[13] = v83;
      *((_BYTE *)v65 + 112) = v82;
    }
    v84 = (id *)(v66 + 15);
    v85 = *((unsigned __int8 *)v66 + 128);
    if (v85 == 255)
    {
      v65[15] = *v84;
      *((_BYTE *)v65 + 128) = *((_BYTE *)v66 + 128);
    }
    else
    {
      v86 = *v84;
      sub_1000051A8(*v84, *((_BYTE *)v66 + 128));
      v65[15] = v86;
      *((_BYTE *)v65 + 128) = v85;
    }
    v20 = a3;
    *((_BYTE *)v65 + 129) = *((_BYTE *)v66 + 129);
    v87 = v28[11];
    v88 = (char *)v65 + v87;
    v89 = (char *)v66 + v87;
    v90 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v88, v89, v90);
    v91 = v28[12];
    v92 = (_QWORD *)((char *)v65 + v91);
    v93 = (_QWORD *)((char *)v66 + v91);
    v94 = v93[1];
    *v92 = *v93;
    v92[1] = v94;
    *((_BYTE *)v65 + v28[13]) = *((_BYTE *)v66 + v28[13]);
    *((_BYTE *)v65 + v28[14]) = *((_BYTE *)v66 + v28[14]);
    *((_BYTE *)v65 + v28[15]) = *((_BYTE *)v66 + v28[15]);
    v95 = v28[16];
    v96 = (_QWORD *)((char *)v65 + v95);
    v97 = (_QWORD *)((char *)v66 + v95);
    v98 = v97[1];
    *v96 = *v97;
    v96[1] = v98;
    v99 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v29 + 56);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v98);
    v99(v65, 0, 1, v28);
  }
  v100 = v20[14];
  v101 = v20[15];
  v102 = *(void **)((char *)a2 + v100);
  *(_QWORD *)((char *)a1 + v100) = v102;
  v103 = (char *)a1 + v101;
  v104 = (char *)a2 + v101;
  v105 = type metadata accessor for URL(0);
  v106 = *(_QWORD *)(v105 - 8);
  v107 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48);
  v108 = v102;
  if (v107(v104, 1, v105))
  {
    v109 = sub_100005150(&qword_100081038);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v103, v104, v105);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
  }
  v110 = a3[17];
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  v111 = (char *)a1 + v110;
  v112 = (char *)a2 + v110;
  *(_QWORD *)v111 = *(_QWORD *)v112;
  v111[8] = v112[8];
  v113 = a3[18];
  v114 = a3[19];
  v115 = (char *)a1 + v113;
  v116 = (char *)a2 + v113;
  *(_QWORD *)v115 = *(_QWORD *)v116;
  v115[8] = v116[8];
  v117 = (char *)a1 + v114;
  v118 = (char *)a2 + v114;
  if (v16((char *)a2 + v114, 1, v160))
  {
    v119 = sub_100005150(&qword_100081028);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v117, v118, v160);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v117, 0, 1, v160);
  }
  v120 = a3[20];
  v121 = (char *)a1 + v120;
  v122 = (char *)a2 + v120;
  if (v16((char *)a2 + v120, 1, v160))
  {
    v123 = sub_100005150(&qword_100081028);
    memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v121, v122, v160);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v121, 0, 1, v160);
  }
  v124 = a3[21];
  v125 = (_QWORD *)((char *)a1 + v124);
  v126 = (_QWORD *)((char *)a2 + v124);
  v127 = *v126;
  if (*v126)
  {
    v128 = v126[1];
    v129 = v126[2];
    *v125 = v127;
    v125[1] = v128;
    v125[2] = v129;
    swift_retain(v127);
    swift_retain(v128);
    swift_retain(v129);
  }
  else
  {
    *(_OWORD *)v125 = *(_OWORD *)v126;
    v125[2] = v126[2];
  }
  v130 = a3[22];
  v131 = (char *)a1 + v130;
  v132 = (char *)a2 + v130;
  v133 = sub_100005150(&qword_100081040);
  v134 = *(_QWORD *)(v133 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
  {
    v135 = sub_100005150(&qword_100081048);
    memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
  }
  else
  {
    v136 = *(void (**)(char *, char *, uint64_t))(v159 + 16);
    v136(v131, v132, v160);
    v136(&v131[*(int *)(v133 + 36)], &v132[*(int *)(v133 + 36)], v160);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v131, 0, 1, v133);
  }
  v137 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v138 = v137[5];
  v139 = &v131[v138];
  v140 = &v132[v138];
  v141 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v139, v140, v141);
  v142 = v137[6];
  v143 = &v131[v142];
  v144 = &v132[v142];
  v145 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v146 = *(_QWORD *)(v145 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
  {
    v147 = sub_100005150(&qword_100081050);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v143, v144, v145);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
  }
  v148 = v137[7];
  v149 = &v131[v148];
  v150 = &v132[v148];
  v151 = *((_QWORD *)v150 + 1);
  *(_QWORD *)v149 = *(_QWORD *)v150;
  *((_QWORD *)v149 + 1) = v151;
  v152 = v137[8];
  v153 = &v131[v152];
  v154 = &v132[v152];
  v155 = *((_QWORD *)v154 + 1);
  *(_QWORD *)v153 = *(_QWORD *)v154;
  *((_QWORD *)v153 + 1) = v155;
  swift_bridgeObjectRetain(v151);
  swift_bridgeObjectRetain(v155);
  return a1;
}

_QWORD *sub_10001BCA0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  __int128 v55;
  id *v56;
  int v57;
  id v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id v67;
  id *v68;
  int v69;
  id v70;
  id v71;
  id *v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  id *v93;
  id *v94;
  int v95;
  id v96;
  void *v97;
  char v98;
  id v99;
  char v100;
  id v101;
  id *v102;
  id *v103;
  int v104;
  id v105;
  void *v106;
  char v107;
  id v108;
  char v109;
  id v110;
  id *v111;
  id *v112;
  int v113;
  id v114;
  void *v115;
  char v116;
  id v117;
  char v118;
  id v119;
  id *v120;
  id *v121;
  int v122;
  id v123;
  void *v124;
  char v125;
  id v126;
  char v127;
  id v128;
  id *v129;
  id *v130;
  int v131;
  id v132;
  void *v133;
  char v134;
  id v135;
  char v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __int128 *v165;
  __int128 *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 v172;
  __int128 v173;
  id *v174;
  int v175;
  id v176;
  id v177;
  id *v178;
  int v179;
  id v180;
  id v181;
  id *v182;
  int v183;
  id v184;
  id v185;
  id *v186;
  int v187;
  id v188;
  id v189;
  id *v190;
  int v191;
  id v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  void (*v206)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v207;
  uint64_t v208;
  char v209;
  __int128 v210;
  id *v211;
  id *v212;
  int v213;
  id v214;
  void *v215;
  char v216;
  id v217;
  char v218;
  id v219;
  id *v220;
  id *v221;
  int v222;
  id v223;
  void *v224;
  char v225;
  id v226;
  char v227;
  id v228;
  id *v229;
  id *v230;
  int v231;
  id v232;
  void *v233;
  char v234;
  id v235;
  char v236;
  id v237;
  id *v238;
  id *v239;
  int v240;
  id v241;
  void *v242;
  char v243;
  id v244;
  char v245;
  id v246;
  id *v247;
  id *v248;
  int v249;
  id v250;
  void *v251;
  char v252;
  id v253;
  char v254;
  id v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  void *v272;
  id v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t (*v279)(char *, uint64_t, uint64_t);
  int v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (*v321)(char *, uint64_t, uint64_t);
  int v322;
  int v323;
  void (*v324)(char *, char *, uint64_t);
  uint64_t v325;
  int *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t (*v336)(char *, uint64_t, uint64_t);
  int v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  void (*v351)(char *, char *, uint64_t);
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t (*v358)(char *, uint64_t, uint64_t);
  uint64_t v359;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[9] = a2[9];
  v16 = a2[10];
  v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v358 = v23;
  v25 = v23(v20, 1, v21);
  v359 = v22;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100005150(&qword_100081028);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
LABEL_7:
  v27 = a3[11];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[12];
  v33 = (uint64_t)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = (int *)type metadata accessor for ArtworkModel(0);
  v36 = *((_QWORD *)v35 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37((uint64_t)v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      v352 = v21;
      v355 = v36;
      *(_QWORD *)v33 = *(_QWORD *)v34;
      v40 = *((_QWORD *)v34 + 1);
      *(_QWORD *)(v33 + 8) = v40;
      v41 = v34[32];
      swift_bridgeObjectRetain(v40);
      if (v41 == 255)
      {
        v55 = *((_OWORD *)v34 + 1);
        *(_BYTE *)(v33 + 32) = v34[32];
        *(_OWORD *)(v33 + 16) = v55;
      }
      else
      {
        v42 = *((_QWORD *)v34 + 2);
        v43 = *((_QWORD *)v34 + 3);
        sub_100005190(v42, v43, v41);
        *(_QWORD *)(v33 + 16) = v42;
        *(_QWORD *)(v33 + 24) = v43;
        *(_BYTE *)(v33 + 32) = v41;
      }
      *(_QWORD *)(v33 + 40) = *((_QWORD *)v34 + 5);
      *(_QWORD *)(v33 + 48) = *((_QWORD *)v34 + 6);
      v56 = (id *)(v34 + 56);
      v57 = v34[64];
      if (v57 == 255)
      {
        v59 = *v56;
        *(_BYTE *)(v33 + 64) = v34[64];
        *(_QWORD *)(v33 + 56) = v59;
      }
      else
      {
        v58 = *v56;
        sub_1000051A8(*v56, v34[64]);
        *(_QWORD *)(v33 + 56) = v58;
        *(_BYTE *)(v33 + 64) = v57;
      }
      v21 = v352;
      v60 = (id *)(v34 + 72);
      v61 = v34[80];
      if (v61 == 255)
      {
        v63 = *v60;
        *(_BYTE *)(v33 + 80) = v34[80];
        *(_QWORD *)(v33 + 72) = v63;
      }
      else
      {
        v62 = *v60;
        sub_1000051A8(*v60, v34[80]);
        *(_QWORD *)(v33 + 72) = v62;
        *(_BYTE *)(v33 + 80) = v61;
      }
      v64 = (id *)(v34 + 88);
      v65 = v34[96];
      if (v65 == 255)
      {
        v67 = *v64;
        *(_BYTE *)(v33 + 96) = v34[96];
        *(_QWORD *)(v33 + 88) = v67;
      }
      else
      {
        v66 = *v64;
        sub_1000051A8(*v64, v34[96]);
        *(_QWORD *)(v33 + 88) = v66;
        *(_BYTE *)(v33 + 96) = v65;
      }
      v68 = (id *)(v34 + 104);
      v69 = v34[112];
      if (v69 == 255)
      {
        v71 = *v68;
        *(_BYTE *)(v33 + 112) = v34[112];
        *(_QWORD *)(v33 + 104) = v71;
      }
      else
      {
        v70 = *v68;
        sub_1000051A8(*v68, v34[112]);
        *(_QWORD *)(v33 + 104) = v70;
        *(_BYTE *)(v33 + 112) = v69;
      }
      v72 = (id *)(v34 + 120);
      v73 = v34[128];
      if (v73 == 255)
      {
        v75 = *v72;
        *(_BYTE *)(v33 + 128) = v34[128];
        *(_QWORD *)(v33 + 120) = v75;
      }
      else
      {
        v74 = *v72;
        sub_1000051A8(*v72, v34[128]);
        *(_QWORD *)(v33 + 120) = v74;
        *(_BYTE *)(v33 + 128) = v73;
      }
      *(_BYTE *)(v33 + 129) = v34[129];
      v76 = v35[11];
      v77 = v33 + v76;
      v78 = &v34[v76];
      v79 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v80 = v35[12];
      v81 = (_QWORD *)(v33 + v80);
      v82 = &v34[v80];
      *v81 = *(_QWORD *)v82;
      v83 = *((_QWORD *)v82 + 1);
      v81[1] = v83;
      *(_BYTE *)(v33 + v35[13]) = v34[v35[13]];
      *(_BYTE *)(v33 + v35[14]) = v34[v35[14]];
      *(_BYTE *)(v33 + v35[15]) = v34[v35[15]];
      v84 = v35[16];
      v85 = (_QWORD *)(v33 + v84);
      v86 = &v34[v84];
      *v85 = *(_QWORD *)v86;
      v87 = *((_QWORD *)v86 + 1);
      v85[1] = v87;
      v36 = v355;
      v88 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v355 + 56);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v88(v33, 0, 1, v35);
      goto LABEL_75;
    }
LABEL_13:
    v44 = sub_100005150(&qword_100081030);
    memcpy((void *)v33, v34, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_75;
  }
  if (v39)
  {
    sub_10000EF80(v33, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_13;
  }
  v353 = v21;
  v356 = v36;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v45 = *((_QWORD *)v34 + 1);
  v46 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v33 + 8) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = (__int128 *)(v33 + 16);
  v48 = (__int128 *)(v34 + 16);
  v49 = v34[32];
  if (*(unsigned __int8 *)(v33 + 32) == 255)
  {
    if (v49 == 255)
    {
      v92 = *v48;
      *(_BYTE *)(v33 + 32) = v34[32];
      *v47 = v92;
    }
    else
    {
      v89 = *((_QWORD *)v34 + 2);
      v90 = *((_QWORD *)v34 + 3);
      sub_100005190(v89, v90, v34[32]);
      *(_QWORD *)(v33 + 16) = v89;
      *(_QWORD *)(v33 + 24) = v90;
      *(_BYTE *)(v33 + 32) = v49;
    }
  }
  else if (v49 == 255)
  {
    sub_100007770(v33 + 16);
    v91 = v34[32];
    *v47 = *v48;
    *(_BYTE *)(v33 + 32) = v91;
  }
  else
  {
    v50 = *((_QWORD *)v34 + 2);
    v51 = *((_QWORD *)v34 + 3);
    sub_100005190(v50, v51, v34[32]);
    v52 = *(_QWORD *)(v33 + 16);
    v53 = *(_QWORD *)(v33 + 24);
    *(_QWORD *)(v33 + 16) = v50;
    *(_QWORD *)(v33 + 24) = v51;
    v54 = *(_BYTE *)(v33 + 32);
    *(_BYTE *)(v33 + 32) = v49;
    sub_100005624(v52, v53, v54);
  }
  *(_QWORD *)(v33 + 40) = *((_QWORD *)v34 + 5);
  *(_QWORD *)(v33 + 48) = *((_QWORD *)v34 + 6);
  v93 = (id *)(v33 + 56);
  v94 = (id *)(v34 + 56);
  v95 = v34[64];
  if (*(unsigned __int8 *)(v33 + 64) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(v33 + 64) = v34[64];
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_1000051A8(*v94, v34[64]);
      *(_QWORD *)(v33 + 56) = v99;
      *(_BYTE *)(v33 + 64) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_1000077A4(v33 + 56);
    v100 = v34[64];
    *v93 = *v94;
    *(_BYTE *)(v33 + 64) = v100;
  }
  else
  {
    v96 = *v94;
    sub_1000051A8(*v94, v34[64]);
    v97 = *(void **)(v33 + 56);
    *(_QWORD *)(v33 + 56) = v96;
    v98 = *(_BYTE *)(v33 + 64);
    *(_BYTE *)(v33 + 64) = v95;
    sub_10000563C(v97, v98);
  }
  v102 = (id *)(v33 + 72);
  v103 = (id *)(v34 + 72);
  v104 = v34[80];
  if (*(unsigned __int8 *)(v33 + 80) == 255)
  {
    if (v104 == 255)
    {
      v110 = *v103;
      *(_BYTE *)(v33 + 80) = v34[80];
      *v102 = v110;
    }
    else
    {
      v108 = *v103;
      sub_1000051A8(*v103, v34[80]);
      *(_QWORD *)(v33 + 72) = v108;
      *(_BYTE *)(v33 + 80) = v104;
    }
  }
  else if (v104 == 255)
  {
    sub_1000077A4(v33 + 72);
    v109 = v34[80];
    *v102 = *v103;
    *(_BYTE *)(v33 + 80) = v109;
  }
  else
  {
    v105 = *v103;
    sub_1000051A8(*v103, v34[80]);
    v106 = *(void **)(v33 + 72);
    *(_QWORD *)(v33 + 72) = v105;
    v107 = *(_BYTE *)(v33 + 80);
    *(_BYTE *)(v33 + 80) = v104;
    sub_10000563C(v106, v107);
  }
  v111 = (id *)(v33 + 88);
  v112 = (id *)(v34 + 88);
  v113 = v34[96];
  if (*(unsigned __int8 *)(v33 + 96) == 255)
  {
    if (v113 == 255)
    {
      v119 = *v112;
      *(_BYTE *)(v33 + 96) = v34[96];
      *v111 = v119;
    }
    else
    {
      v117 = *v112;
      sub_1000051A8(*v112, v34[96]);
      *(_QWORD *)(v33 + 88) = v117;
      *(_BYTE *)(v33 + 96) = v113;
    }
  }
  else if (v113 == 255)
  {
    sub_1000077A4(v33 + 88);
    v118 = v34[96];
    *v111 = *v112;
    *(_BYTE *)(v33 + 96) = v118;
  }
  else
  {
    v114 = *v112;
    sub_1000051A8(*v112, v34[96]);
    v115 = *(void **)(v33 + 88);
    *(_QWORD *)(v33 + 88) = v114;
    v116 = *(_BYTE *)(v33 + 96);
    *(_BYTE *)(v33 + 96) = v113;
    sub_10000563C(v115, v116);
  }
  v120 = (id *)(v33 + 104);
  v121 = (id *)(v34 + 104);
  v122 = v34[112];
  if (*(unsigned __int8 *)(v33 + 112) == 255)
  {
    if (v122 == 255)
    {
      v128 = *v121;
      *(_BYTE *)(v33 + 112) = v34[112];
      *v120 = v128;
    }
    else
    {
      v126 = *v121;
      sub_1000051A8(*v121, v34[112]);
      *(_QWORD *)(v33 + 104) = v126;
      *(_BYTE *)(v33 + 112) = v122;
    }
  }
  else if (v122 == 255)
  {
    sub_1000077A4(v33 + 104);
    v127 = v34[112];
    *v120 = *v121;
    *(_BYTE *)(v33 + 112) = v127;
  }
  else
  {
    v123 = *v121;
    sub_1000051A8(*v121, v34[112]);
    v124 = *(void **)(v33 + 104);
    *(_QWORD *)(v33 + 104) = v123;
    v125 = *(_BYTE *)(v33 + 112);
    *(_BYTE *)(v33 + 112) = v122;
    sub_10000563C(v124, v125);
  }
  v129 = (id *)(v33 + 120);
  v130 = (id *)(v34 + 120);
  v131 = v34[128];
  if (*(unsigned __int8 *)(v33 + 128) == 255)
  {
    if (v131 == 255)
    {
      v137 = *v130;
      *(_BYTE *)(v33 + 128) = v34[128];
      *v129 = v137;
    }
    else
    {
      v135 = *v130;
      sub_1000051A8(*v130, v34[128]);
      *(_QWORD *)(v33 + 120) = v135;
      *(_BYTE *)(v33 + 128) = v131;
    }
  }
  else if (v131 == 255)
  {
    sub_1000077A4(v33 + 120);
    v136 = v34[128];
    *v129 = *v130;
    *(_BYTE *)(v33 + 128) = v136;
  }
  else
  {
    v132 = *v130;
    sub_1000051A8(*v130, v34[128]);
    v133 = *(void **)(v33 + 120);
    *(_QWORD *)(v33 + 120) = v132;
    v134 = *(_BYTE *)(v33 + 128);
    *(_BYTE *)(v33 + 128) = v131;
    sub_10000563C(v133, v134);
  }
  *(_BYTE *)(v33 + 129) = v34[129];
  v138 = v35[11];
  v139 = v33 + v138;
  v140 = &v34[v138];
  v141 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v35[12];
  v143 = (_QWORD *)(v33 + v142);
  v144 = &v34[v142];
  *v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = v143[1];
  v143[1] = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  *(_BYTE *)(v33 + v35[13]) = v34[v35[13]];
  *(_BYTE *)(v33 + v35[14]) = v34[v35[14]];
  *(_BYTE *)(v33 + v35[15]) = v34[v35[15]];
  v147 = v35[16];
  v148 = (_QWORD *)(v33 + v147);
  v149 = &v34[v147];
  *v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = v148[1];
  v148[1] = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
  v21 = v353;
  v36 = v356;
LABEL_75:
  v152 = a3[13];
  v153 = (uint64_t)a1 + v152;
  v154 = (char *)a2 + v152;
  v155 = v37((uint64_t)a1 + v152, 1, v35);
  v156 = v37((uint64_t)v154, 1, v35);
  if (v155)
  {
    if (!v156)
    {
      v357 = v36;
      v157 = v21;
      *(_QWORD *)v153 = *(_QWORD *)v154;
      v158 = *((_QWORD *)v154 + 1);
      *(_QWORD *)(v153 + 8) = v158;
      v159 = v154[32];
      swift_bridgeObjectRetain(v158);
      if (v159 == 255)
      {
        v173 = *((_OWORD *)v154 + 1);
        *(_BYTE *)(v153 + 32) = v154[32];
        *(_OWORD *)(v153 + 16) = v173;
      }
      else
      {
        v160 = *((_QWORD *)v154 + 2);
        v161 = *((_QWORD *)v154 + 3);
        sub_100005190(v160, v161, v159);
        *(_QWORD *)(v153 + 16) = v160;
        *(_QWORD *)(v153 + 24) = v161;
        *(_BYTE *)(v153 + 32) = v159;
      }
      *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
      *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
      v174 = (id *)(v154 + 56);
      v175 = v154[64];
      if (v175 == 255)
      {
        v177 = *v174;
        *(_BYTE *)(v153 + 64) = v154[64];
        *(_QWORD *)(v153 + 56) = v177;
      }
      else
      {
        v176 = *v174;
        sub_1000051A8(*v174, v154[64]);
        *(_QWORD *)(v153 + 56) = v176;
        *(_BYTE *)(v153 + 64) = v175;
      }
      v21 = v157;
      v178 = (id *)(v154 + 72);
      v179 = v154[80];
      if (v179 == 255)
      {
        v181 = *v178;
        *(_BYTE *)(v153 + 80) = v154[80];
        *(_QWORD *)(v153 + 72) = v181;
      }
      else
      {
        v180 = *v178;
        sub_1000051A8(*v178, v154[80]);
        *(_QWORD *)(v153 + 72) = v180;
        *(_BYTE *)(v153 + 80) = v179;
      }
      v182 = (id *)(v154 + 88);
      v183 = v154[96];
      if (v183 == 255)
      {
        v185 = *v182;
        *(_BYTE *)(v153 + 96) = v154[96];
        *(_QWORD *)(v153 + 88) = v185;
      }
      else
      {
        v184 = *v182;
        sub_1000051A8(*v182, v154[96]);
        *(_QWORD *)(v153 + 88) = v184;
        *(_BYTE *)(v153 + 96) = v183;
      }
      v186 = (id *)(v154 + 104);
      v187 = v154[112];
      if (v187 == 255)
      {
        v189 = *v186;
        *(_BYTE *)(v153 + 112) = v154[112];
        *(_QWORD *)(v153 + 104) = v189;
      }
      else
      {
        v188 = *v186;
        sub_1000051A8(*v186, v154[112]);
        *(_QWORD *)(v153 + 104) = v188;
        *(_BYTE *)(v153 + 112) = v187;
      }
      v190 = (id *)(v154 + 120);
      v191 = v154[128];
      if (v191 == 255)
      {
        v193 = *v190;
        *(_BYTE *)(v153 + 128) = v154[128];
        *(_QWORD *)(v153 + 120) = v193;
      }
      else
      {
        v192 = *v190;
        sub_1000051A8(*v190, v154[128]);
        *(_QWORD *)(v153 + 120) = v192;
        *(_BYTE *)(v153 + 128) = v191;
      }
      *(_BYTE *)(v153 + 129) = v154[129];
      v194 = v35[11];
      v195 = v153 + v194;
      v196 = &v154[v194];
      v197 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v197 - 8) + 16))(v195, v196, v197);
      v198 = v35[12];
      v199 = (_QWORD *)(v153 + v198);
      v200 = &v154[v198];
      *v199 = *(_QWORD *)v200;
      v201 = *((_QWORD *)v200 + 1);
      v199[1] = v201;
      *(_BYTE *)(v153 + v35[13]) = v154[v35[13]];
      *(_BYTE *)(v153 + v35[14]) = v154[v35[14]];
      *(_BYTE *)(v153 + v35[15]) = v154[v35[15]];
      v202 = v35[16];
      v203 = (_QWORD *)(v153 + v202);
      v204 = &v154[v202];
      *v203 = *(_QWORD *)v204;
      v205 = *((_QWORD *)v204 + 1);
      v203[1] = v205;
      v206 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v357 + 56);
      swift_bridgeObjectRetain(v201);
      swift_bridgeObjectRetain(v205);
      v206(v153, 0, 1, v35);
      goto LABEL_142;
    }
LABEL_81:
    v162 = sub_100005150(&qword_100081030);
    memcpy((void *)v153, v154, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_142;
  }
  if (v156)
  {
    sub_10000EF80(v153, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_81;
  }
  *(_QWORD *)v153 = *(_QWORD *)v154;
  v163 = *((_QWORD *)v154 + 1);
  v164 = *(_QWORD *)(v153 + 8);
  *(_QWORD *)(v153 + 8) = v163;
  swift_bridgeObjectRetain(v163);
  swift_bridgeObjectRelease(v164);
  v165 = (__int128 *)(v153 + 16);
  v166 = (__int128 *)(v154 + 16);
  v167 = v154[32];
  v354 = v21;
  if (*(unsigned __int8 *)(v153 + 32) == 255)
  {
    if (v167 == 255)
    {
      v210 = *v166;
      *(_BYTE *)(v153 + 32) = v154[32];
      *v165 = v210;
    }
    else
    {
      v207 = *((_QWORD *)v154 + 2);
      v208 = *((_QWORD *)v154 + 3);
      sub_100005190(v207, v208, v167);
      *(_QWORD *)(v153 + 16) = v207;
      *(_QWORD *)(v153 + 24) = v208;
      *(_BYTE *)(v153 + 32) = v167;
    }
  }
  else if (v167 == 255)
  {
    sub_100007770(v153 + 16);
    v209 = v154[32];
    *v165 = *v166;
    *(_BYTE *)(v153 + 32) = v209;
  }
  else
  {
    v168 = *((_QWORD *)v154 + 2);
    v169 = *((_QWORD *)v154 + 3);
    sub_100005190(v168, v169, v167);
    v170 = *(_QWORD *)(v153 + 16);
    v171 = *(_QWORD *)(v153 + 24);
    *(_QWORD *)(v153 + 16) = v168;
    *(_QWORD *)(v153 + 24) = v169;
    v172 = *(_BYTE *)(v153 + 32);
    *(_BYTE *)(v153 + 32) = v167;
    sub_100005624(v170, v171, v172);
  }
  *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
  *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
  v211 = (id *)(v153 + 56);
  v212 = (id *)(v154 + 56);
  v213 = v154[64];
  if (*(unsigned __int8 *)(v153 + 64) == 255)
  {
    v21 = v354;
    if (v213 == 255)
    {
      v219 = *v212;
      *(_BYTE *)(v153 + 64) = v154[64];
      *v211 = v219;
    }
    else
    {
      v217 = *v212;
      sub_1000051A8(*v212, v154[64]);
      *(_QWORD *)(v153 + 56) = v217;
      *(_BYTE *)(v153 + 64) = v213;
    }
  }
  else
  {
    v21 = v354;
    if (v213 == 255)
    {
      sub_1000077A4(v153 + 56);
      v218 = v154[64];
      *v211 = *v212;
      *(_BYTE *)(v153 + 64) = v218;
    }
    else
    {
      v214 = *v212;
      sub_1000051A8(*v212, v154[64]);
      v215 = *(void **)(v153 + 56);
      *(_QWORD *)(v153 + 56) = v214;
      v216 = *(_BYTE *)(v153 + 64);
      *(_BYTE *)(v153 + 64) = v213;
      sub_10000563C(v215, v216);
    }
  }
  v220 = (id *)(v153 + 72);
  v221 = (id *)(v154 + 72);
  v222 = v154[80];
  if (*(unsigned __int8 *)(v153 + 80) == 255)
  {
    if (v222 == 255)
    {
      v228 = *v221;
      *(_BYTE *)(v153 + 80) = v154[80];
      *v220 = v228;
    }
    else
    {
      v226 = *v221;
      sub_1000051A8(*v221, v154[80]);
      *(_QWORD *)(v153 + 72) = v226;
      *(_BYTE *)(v153 + 80) = v222;
    }
  }
  else if (v222 == 255)
  {
    sub_1000077A4(v153 + 72);
    v227 = v154[80];
    *v220 = *v221;
    *(_BYTE *)(v153 + 80) = v227;
  }
  else
  {
    v223 = *v221;
    sub_1000051A8(*v221, v154[80]);
    v224 = *(void **)(v153 + 72);
    *(_QWORD *)(v153 + 72) = v223;
    v225 = *(_BYTE *)(v153 + 80);
    *(_BYTE *)(v153 + 80) = v222;
    sub_10000563C(v224, v225);
  }
  v229 = (id *)(v153 + 88);
  v230 = (id *)(v154 + 88);
  v231 = v154[96];
  if (*(unsigned __int8 *)(v153 + 96) == 255)
  {
    if (v231 == 255)
    {
      v237 = *v230;
      *(_BYTE *)(v153 + 96) = v154[96];
      *v229 = v237;
    }
    else
    {
      v235 = *v230;
      sub_1000051A8(*v230, v154[96]);
      *(_QWORD *)(v153 + 88) = v235;
      *(_BYTE *)(v153 + 96) = v231;
    }
  }
  else if (v231 == 255)
  {
    sub_1000077A4(v153 + 88);
    v236 = v154[96];
    *v229 = *v230;
    *(_BYTE *)(v153 + 96) = v236;
  }
  else
  {
    v232 = *v230;
    sub_1000051A8(*v230, v154[96]);
    v233 = *(void **)(v153 + 88);
    *(_QWORD *)(v153 + 88) = v232;
    v234 = *(_BYTE *)(v153 + 96);
    *(_BYTE *)(v153 + 96) = v231;
    sub_10000563C(v233, v234);
  }
  v238 = (id *)(v153 + 104);
  v239 = (id *)(v154 + 104);
  v240 = v154[112];
  if (*(unsigned __int8 *)(v153 + 112) == 255)
  {
    if (v240 == 255)
    {
      v246 = *v239;
      *(_BYTE *)(v153 + 112) = v154[112];
      *v238 = v246;
    }
    else
    {
      v244 = *v239;
      sub_1000051A8(*v239, v154[112]);
      *(_QWORD *)(v153 + 104) = v244;
      *(_BYTE *)(v153 + 112) = v240;
    }
  }
  else if (v240 == 255)
  {
    sub_1000077A4(v153 + 104);
    v245 = v154[112];
    *v238 = *v239;
    *(_BYTE *)(v153 + 112) = v245;
  }
  else
  {
    v241 = *v239;
    sub_1000051A8(*v239, v154[112]);
    v242 = *(void **)(v153 + 104);
    *(_QWORD *)(v153 + 104) = v241;
    v243 = *(_BYTE *)(v153 + 112);
    *(_BYTE *)(v153 + 112) = v240;
    sub_10000563C(v242, v243);
  }
  v247 = (id *)(v153 + 120);
  v248 = (id *)(v154 + 120);
  v249 = v154[128];
  if (*(unsigned __int8 *)(v153 + 128) == 255)
  {
    if (v249 == 255)
    {
      v255 = *v248;
      *(_BYTE *)(v153 + 128) = v154[128];
      *v247 = v255;
    }
    else
    {
      v253 = *v248;
      sub_1000051A8(*v248, v154[128]);
      *(_QWORD *)(v153 + 120) = v253;
      *(_BYTE *)(v153 + 128) = v249;
    }
  }
  else if (v249 == 255)
  {
    sub_1000077A4(v153 + 120);
    v254 = v154[128];
    *v247 = *v248;
    *(_BYTE *)(v153 + 128) = v254;
  }
  else
  {
    v250 = *v248;
    sub_1000051A8(*v248, v154[128]);
    v251 = *(void **)(v153 + 120);
    *(_QWORD *)(v153 + 120) = v250;
    v252 = *(_BYTE *)(v153 + 128);
    *(_BYTE *)(v153 + 128) = v249;
    sub_10000563C(v251, v252);
  }
  *(_BYTE *)(v153 + 129) = v154[129];
  v256 = v35[11];
  v257 = v153 + v256;
  v258 = &v154[v256];
  v259 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v259 - 8) + 24))(v257, v258, v259);
  v260 = v35[12];
  v261 = (_QWORD *)(v153 + v260);
  v262 = &v154[v260];
  *v261 = *(_QWORD *)v262;
  v263 = *((_QWORD *)v262 + 1);
  v264 = v261[1];
  v261[1] = v263;
  swift_bridgeObjectRetain(v263);
  swift_bridgeObjectRelease(v264);
  *(_BYTE *)(v153 + v35[13]) = v154[v35[13]];
  *(_BYTE *)(v153 + v35[14]) = v154[v35[14]];
  *(_BYTE *)(v153 + v35[15]) = v154[v35[15]];
  v265 = v35[16];
  v266 = (_QWORD *)(v153 + v265);
  v267 = &v154[v265];
  *v266 = *(_QWORD *)v267;
  v268 = *((_QWORD *)v267 + 1);
  v269 = v266[1];
  v266[1] = v268;
  swift_bridgeObjectRetain(v268);
  swift_bridgeObjectRelease(v269);
LABEL_142:
  v270 = a3[14];
  v271 = *(void **)((char *)a1 + v270);
  v272 = *(void **)((char *)a2 + v270);
  *(_QWORD *)((char *)a1 + v270) = v272;
  v273 = v272;

  v274 = a3[15];
  v275 = (char *)a1 + v274;
  v276 = (char *)a2 + v274;
  v277 = type metadata accessor for URL(0);
  v278 = *(_QWORD *)(v277 - 8);
  v279 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v278 + 48);
  v280 = v279(v275, 1, v277);
  v281 = v279(v276, 1, v277);
  if (v280)
  {
    if (!v281)
    {
      (*(void (**)(char *, char *, uint64_t))(v278 + 16))(v275, v276, v277);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v278 + 56))(v275, 0, 1, v277);
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v281)
  {
    (*(void (**)(char *, uint64_t))(v278 + 8))(v275, v277);
LABEL_147:
    v282 = sub_100005150(&qword_100081038);
    memcpy(v275, v276, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
    goto LABEL_148;
  }
  (*(void (**)(char *, char *, uint64_t))(v278 + 24))(v275, v276, v277);
LABEL_148:
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  v283 = a3[17];
  v284 = (char *)a1 + v283;
  v285 = (char *)a2 + v283;
  v286 = *(_QWORD *)v285;
  v284[8] = v285[8];
  *(_QWORD *)v284 = v286;
  v287 = a3[18];
  v288 = (char *)a1 + v287;
  v289 = (char *)a2 + v287;
  v290 = *(_QWORD *)v289;
  v288[8] = v289[8];
  *(_QWORD *)v288 = v290;
  v291 = a3[19];
  v292 = (char *)a1 + v291;
  v293 = (char *)a2 + v291;
  v294 = v358((char *)a1 + v291, 1, v21);
  v295 = v358(v293, 1, v21);
  if (v294)
  {
    if (!v295)
    {
      (*(void (**)(char *, char *, uint64_t))(v359 + 16))(v292, v293, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v359 + 56))(v292, 0, 1, v21);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v295)
  {
    (*(void (**)(char *, uint64_t))(v359 + 8))(v292, v21);
LABEL_153:
    v296 = sub_100005150(&qword_100081028);
    memcpy(v292, v293, *(_QWORD *)(*(_QWORD *)(v296 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(char *, char *, uint64_t))(v359 + 24))(v292, v293, v21);
LABEL_154:
  v297 = a3[20];
  v298 = (char *)a1 + v297;
  v299 = (char *)a2 + v297;
  v300 = v358((char *)a1 + v297, 1, v21);
  v301 = v358(v299, 1, v21);
  if (v300)
  {
    if (!v301)
    {
      (*(void (**)(char *, char *, uint64_t))(v359 + 16))(v298, v299, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v359 + 56))(v298, 0, 1, v21);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v301)
  {
    (*(void (**)(char *, uint64_t))(v359 + 8))(v298, v21);
LABEL_159:
    v302 = sub_100005150(&qword_100081028);
    memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(char *, char *, uint64_t))(v359 + 24))(v298, v299, v21);
LABEL_160:
  v303 = a3[21];
  v304 = (_QWORD *)((char *)a1 + v303);
  v305 = (char *)a2 + v303;
  v306 = *(_QWORD *)((char *)a1 + v303);
  v307 = *(_QWORD *)((char *)a2 + v303);
  if (v306)
  {
    if (v307)
    {
      *v304 = v307;
      swift_retain(v307);
      swift_release(v306);
      v308 = *((_QWORD *)v305 + 1);
      v309 = v304[1];
      v304[1] = v308;
      swift_retain(v308);
      swift_release(v309);
      v310 = *((_QWORD *)v305 + 2);
      v311 = v304[2];
      v304[2] = v310;
      swift_retain(v310);
      swift_release(v311);
    }
    else
    {
      sub_100007814((_QWORD *)((char *)a1 + v303));
      v314 = *((_QWORD *)v305 + 2);
      *(_OWORD *)v304 = *(_OWORD *)v305;
      v304[2] = v314;
    }
  }
  else if (v307)
  {
    *v304 = v307;
    v312 = *((_QWORD *)v305 + 1);
    v304[1] = v312;
    v313 = *((_QWORD *)v305 + 2);
    v304[2] = v313;
    swift_retain(v307);
    swift_retain(v312);
    swift_retain(v313);
  }
  else
  {
    v315 = *(_OWORD *)v305;
    v304[2] = *((_QWORD *)v305 + 2);
    *(_OWORD *)v304 = v315;
  }
  v316 = a3[22];
  v317 = (char *)a1 + v316;
  v318 = (char *)a2 + v316;
  v319 = sub_100005150(&qword_100081040);
  v320 = *(_QWORD *)(v319 - 8);
  v321 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v320 + 48);
  v322 = v321(v317, 1, v319);
  v323 = v321(v318, 1, v319);
  if (v322)
  {
    if (!v323)
    {
      v324 = *(void (**)(char *, char *, uint64_t))(v359 + 16);
      v324(v317, v318, v21);
      v324(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v317, 0, 1, v319);
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (v323)
  {
    sub_10000F008((uint64_t)v317, &qword_100081040);
LABEL_175:
    v325 = sub_100005150(&qword_100081048);
    memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
    goto LABEL_176;
  }
  v351 = *(void (**)(char *, char *, uint64_t))(v359 + 24);
  v351(v317, v318, v21);
  v351(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v21);
LABEL_176:
  v326 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v327 = v326[5];
  v328 = &v317[v327];
  v329 = &v318[v327];
  v330 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v330 - 8) + 24))(v328, v329, v330);
  v331 = v326[6];
  v332 = &v317[v331];
  v333 = &v318[v331];
  v334 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v335 = *(_QWORD *)(v334 - 8);
  v336 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v335 + 48);
  v337 = v336(v332, 1, v334);
  v338 = v336(v333, 1, v334);
  if (!v337)
  {
    if (!v338)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 24))(v332, v333, v334);
      goto LABEL_182;
    }
    (*(void (**)(char *, uint64_t))(v335 + 8))(v332, v334);
    goto LABEL_181;
  }
  if (v338)
  {
LABEL_181:
    v339 = sub_100005150(&qword_100081050);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v339 - 8) + 64));
    goto LABEL_182;
  }
  (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v332, v333, v334);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v332, 0, 1, v334);
LABEL_182:
  v340 = v326[7];
  v341 = &v317[v340];
  v342 = &v318[v340];
  *(_QWORD *)v341 = *(_QWORD *)v342;
  v343 = *((_QWORD *)v342 + 1);
  v344 = *((_QWORD *)v341 + 1);
  *((_QWORD *)v341 + 1) = v343;
  swift_bridgeObjectRetain(v343);
  swift_bridgeObjectRelease(v344);
  v345 = v326[8];
  v346 = &v317[v345];
  v347 = &v318[v345];
  *(_QWORD *)v346 = *(_QWORD *)v347;
  v348 = *((_QWORD *)v347 + 1);
  v349 = *((_QWORD *)v346 + 1);
  *((_QWORD *)v346 + 1) = v348;
  swift_bridgeObjectRetain(v348);
  swift_bridgeObjectRelease(v349);
  return a1;
}

uint64_t sub_10001D310(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  int *v16;
  uint64_t v17;
  unsigned int (*v18)(_OWORD *, uint64_t, int *);
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(const void *, uint64_t, uint64_t);

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[10];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v85 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v85(v9, 1, v10))
  {
    v12 = sub_100005150(&qword_100081028);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = (int *)type metadata accessor for ArtworkModel(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v17 + 48);
  if (v18(v15, 1, v16))
  {
    v19 = sub_100005150(&qword_100081030);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = v15[1];
    *v14 = *v15;
    v14[1] = v20;
    *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
    *(_OWORD *)((char *)v14 + 40) = *(_OWORD *)((char *)v15 + 40);
    *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
    *((_BYTE *)v14 + 64) = *((_BYTE *)v15 + 64);
    *(_OWORD *)((char *)v14 + 113) = *(_OWORD *)((char *)v15 + 113);
    *(_OWORD *)((char *)v14 + 104) = *(_OWORD *)((char *)v15 + 104);
    *(_OWORD *)((char *)v14 + 88) = *(_OWORD *)((char *)v15 + 88);
    *(_OWORD *)((char *)v14 + 72) = *(_OWORD *)((char *)v15 + 72);
    *((_BYTE *)v14 + 129) = *((_BYTE *)v15 + 129);
    v21 = v16[11];
    v82 = v10;
    v83 = v17;
    v22 = (char *)v14 + v21;
    v23 = v11;
    v24 = (char *)v15 + v21;
    v25 = type metadata accessor for ArtworkCrop(0);
    v26 = v22;
    v27 = v24;
    v11 = v23;
    v10 = v82;
    v17 = v83;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v26, v27, v25);
    *(_OWORD *)((char *)v14 + v16[12]) = *(_OWORD *)((char *)v15 + v16[12]);
    *((_BYTE *)v14 + v16[13]) = *((_BYTE *)v15 + v16[13]);
    *((_BYTE *)v14 + v16[14]) = *((_BYTE *)v15 + v16[14]);
    *((_BYTE *)v14 + v16[15]) = *((_BYTE *)v15 + v16[15]);
    *(_OWORD *)((char *)v14 + v16[16]) = *(_OWORD *)((char *)v15 + v16[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v83 + 56))(v14, 0, 1, v16);
  }
  v28 = a3[13];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  if (v18((_OWORD *)(a2 + v28), 1, v16))
  {
    v31 = sub_100005150(&qword_100081030);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    *(_OWORD *)((char *)v29 + 40) = *(_OWORD *)((char *)v30 + 40);
    *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
    *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
    *(_OWORD *)((char *)v29 + 113) = *(_OWORD *)((char *)v30 + 113);
    *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v30 + 104);
    *(_OWORD *)((char *)v29 + 88) = *(_OWORD *)((char *)v30 + 88);
    *(_OWORD *)((char *)v29 + 72) = *(_OWORD *)((char *)v30 + 72);
    *((_BYTE *)v29 + 129) = *((_BYTE *)v30 + 129);
    v33 = v16[11];
    v84 = v17;
    v34 = (char *)v29 + v33;
    v35 = v10;
    v36 = v11;
    v37 = (char *)v30 + v33;
    v38 = type metadata accessor for ArtworkCrop(0);
    v39 = v37;
    v11 = v36;
    v10 = v35;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v34, v39, v38);
    *(_OWORD *)((char *)v29 + v16[12]) = *(_OWORD *)((char *)v30 + v16[12]);
    *((_BYTE *)v29 + v16[13]) = *((_BYTE *)v30 + v16[13]);
    *((_BYTE *)v29 + v16[14]) = *((_BYTE *)v30 + v16[14]);
    *((_BYTE *)v29 + v16[15]) = *((_BYTE *)v30 + v16[15]);
    *(_OWORD *)((char *)v29 + v16[16]) = *(_OWORD *)((char *)v30 + v16[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v84 + 56))(v29, 0, 1, v16);
  }
  v40 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  v41 = (void *)(a1 + v40);
  v42 = (const void *)(a2 + v40);
  v43 = type metadata accessor for URL(0);
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    v45 = sub_100005150(&qword_100081038);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v44 + 32))(v41, v42, v43);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  v46 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  v47 = a1 + v46;
  v48 = a2 + v46;
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
  v49 = a3[18];
  v50 = a3[19];
  v51 = a1 + v49;
  v52 = a2 + v49;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = (void *)(a1 + v50);
  v54 = (const void *)(a2 + v50);
  if (v85((const void *)(a2 + v50), 1, v10))
  {
    v55 = sub_100005150(&qword_100081028);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v53, v54, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v53, 0, 1, v10);
  }
  v56 = a3[20];
  v57 = (void *)(a1 + v56);
  v58 = (const void *)(a2 + v56);
  if (v85((const void *)(a2 + v56), 1, v10))
  {
    v59 = sub_100005150(&qword_100081028);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v57, v58, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v57, 0, 1, v10);
  }
  v60 = a3[21];
  v61 = a3[22];
  v62 = a1 + v60;
  v63 = a2 + v60;
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  v64 = (char *)(a1 + v61);
  v65 = (char *)(a2 + v61);
  v66 = sub_100005150(&qword_100081040);
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    v68 = sub_100005150(&qword_100081048);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    v69 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v69(v64, v65, v10);
    v69(&v64[*(int *)(v66 + 36)], &v65[*(int *)(v66 + 36)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  v70 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v71 = v70[5];
  v72 = &v64[v71];
  v73 = &v65[v71];
  v74 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
  v75 = v70[6];
  v76 = &v64[v75];
  v77 = &v65[v75];
  v78 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v79 = *(_QWORD *)(v78 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
  {
    v80 = sub_100005150(&qword_100081050);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v76, v77, v78);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
  }
  *(_OWORD *)&v64[v70[7]] = *(_OWORD *)&v65[v70[7]];
  *(_OWORD *)&v64[v70[8]] = *(_OWORD *)&v65[v70[8]];
  return a1;
}

_QWORD *sub_10001D9B0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(char *, uint64_t, uint64_t);
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(char *, uint64_t, uint64_t);
  int v106;
  int v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  int *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t);
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(char *, char *, uint64_t);
  _QWORD *v152;
  int v153;
  int v154;
  void *v155;
  _QWORD *v156;
  int v157;
  int v158;
  void *v159;
  _QWORD *v160;
  int v161;
  int v162;
  void *v163;
  _QWORD *v164;
  int v165;
  int v166;
  void *v167;
  _QWORD *v168;
  int v169;
  int v170;
  void *v171;
  _QWORD *v172;
  int v173;
  int v174;
  void *v175;
  _QWORD *v176;
  int v177;
  int v178;
  void *v179;
  _QWORD *v180;
  int v181;
  int v182;
  void *v183;
  _QWORD *v184;
  int v185;
  int v186;
  void *v187;
  _QWORD *v188;
  int v189;
  int v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t (*v224)(uint64_t, uint64_t, int *);
  uint64_t v225;
  uint64_t (*v226)(char *, uint64_t, uint64_t);
  uint64_t v227;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a1[6];
  a1[6] = a2[6];
  swift_release(v12);
  v13 = a2[8];
  v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = a2[10];
  v16 = a1[10];
  a1[9] = a2[9];
  a1[10] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = a3[10];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v226 = v22;
  v24 = v22(v19, 1, v20);
  v227 = v21;
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
LABEL_6:
    v25 = sub_100005150(&qword_100081028);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v18, v19, v20);
LABEL_7:
  v26 = a3[11];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  v31 = v27[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease(v31);
  v32 = a3[12];
  v33 = (uint64_t)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = (int *)type metadata accessor for ArtworkModel(0);
  v36 = *((_QWORD *)v35 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37((uint64_t)v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      v40 = *((_OWORD *)v34 + 1);
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *(_OWORD *)(v33 + 16) = v40;
      *(_BYTE *)(v33 + 32) = v34[32];
      *(_OWORD *)(v33 + 40) = *(_OWORD *)(v34 + 40);
      *(_QWORD *)(v33 + 56) = *((_QWORD *)v34 + 7);
      *(_BYTE *)(v33 + 64) = v34[64];
      *(_OWORD *)(v33 + 113) = *(_OWORD *)(v34 + 113);
      *(_OWORD *)(v33 + 104) = *(_OWORD *)(v34 + 104);
      *(_OWORD *)(v33 + 88) = *(_OWORD *)(v34 + 88);
      *(_OWORD *)(v33 + 72) = *(_OWORD *)(v34 + 72);
      *(_BYTE *)(v33 + 129) = v34[129];
      v41 = v35[11];
      v42 = v33 + v41;
      v224 = v37;
      v43 = a3;
      v44 = v20;
      v45 = v36;
      v46 = &v34[v41];
      v47 = type metadata accessor for ArtworkCrop(0);
      v48 = v46;
      v36 = v45;
      v20 = v44;
      a3 = v43;
      v37 = v224;
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v42, v48, v47);
      *(_OWORD *)(v33 + v35[12]) = *(_OWORD *)&v34[v35[12]];
      *(_BYTE *)(v33 + v35[13]) = v34[v35[13]];
      *(_BYTE *)(v33 + v35[14]) = v34[v35[14]];
      *(_BYTE *)(v33 + v35[15]) = v34[v35[15]];
      *(_OWORD *)(v33 + v35[16]) = *(_OWORD *)&v34[v35[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    sub_10000EF80(v33, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_12:
    v49 = sub_100005150(&qword_100081030);
    memcpy((void *)v33, v34, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_13;
  }
  v225 = v36;
  v137 = *((_QWORD *)v34 + 1);
  v138 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_QWORD *)(v33 + 8) = v137;
  swift_bridgeObjectRelease(v138);
  v139 = v34 + 16;
  v140 = *(unsigned __int8 *)(v33 + 32);
  if (v140 != 255)
  {
    v141 = v34[32];
    if (v141 != 255)
    {
      v142 = *(_QWORD *)(v33 + 16);
      v143 = *(_QWORD *)(v33 + 24);
      *(_OWORD *)(v33 + 16) = *v139;
      *(_BYTE *)(v33 + 32) = v141;
      sub_100005624(v142, v143, v140);
      goto LABEL_69;
    }
    sub_100007770(v33 + 16);
  }
  *(_OWORD *)(v33 + 16) = *v139;
  *(_BYTE *)(v33 + 32) = v34[32];
LABEL_69:
  *(_OWORD *)(v33 + 40) = *(_OWORD *)(v34 + 40);
  v152 = v34 + 56;
  v153 = *(unsigned __int8 *)(v33 + 64);
  if (v153 != 255)
  {
    v154 = v34[64];
    if (v154 != 255)
    {
      v155 = *(void **)(v33 + 56);
      *(_QWORD *)(v33 + 56) = *v152;
      *(_BYTE *)(v33 + 64) = v154;
      sub_10000563C(v155, v153);
      goto LABEL_79;
    }
    sub_1000077A4(v33 + 56);
  }
  *(_QWORD *)(v33 + 56) = *v152;
  *(_BYTE *)(v33 + 64) = v34[64];
LABEL_79:
  v160 = v34 + 72;
  v161 = *(unsigned __int8 *)(v33 + 80);
  if (v161 != 255)
  {
    v162 = v34[80];
    if (v162 != 255)
    {
      v163 = *(void **)(v33 + 72);
      *(_QWORD *)(v33 + 72) = *v160;
      *(_BYTE *)(v33 + 80) = v162;
      sub_10000563C(v163, v161);
      goto LABEL_89;
    }
    sub_1000077A4(v33 + 72);
  }
  *(_QWORD *)(v33 + 72) = *v160;
  *(_BYTE *)(v33 + 80) = v34[80];
LABEL_89:
  v168 = v34 + 88;
  v169 = *(unsigned __int8 *)(v33 + 96);
  if (v169 != 255)
  {
    v170 = v34[96];
    if (v170 != 255)
    {
      v171 = *(void **)(v33 + 88);
      *(_QWORD *)(v33 + 88) = *v168;
      *(_BYTE *)(v33 + 96) = v170;
      sub_10000563C(v171, v169);
      goto LABEL_99;
    }
    sub_1000077A4(v33 + 88);
  }
  *(_QWORD *)(v33 + 88) = *v168;
  *(_BYTE *)(v33 + 96) = v34[96];
LABEL_99:
  v176 = v34 + 104;
  v177 = *(unsigned __int8 *)(v33 + 112);
  if (v177 != 255)
  {
    v178 = v34[112];
    if (v178 != 255)
    {
      v179 = *(void **)(v33 + 104);
      *(_QWORD *)(v33 + 104) = *v176;
      *(_BYTE *)(v33 + 112) = v178;
      sub_10000563C(v179, v177);
      goto LABEL_109;
    }
    sub_1000077A4(v33 + 104);
  }
  *(_QWORD *)(v33 + 104) = *v176;
  *(_BYTE *)(v33 + 112) = v34[112];
LABEL_109:
  v184 = v34 + 120;
  v185 = *(unsigned __int8 *)(v33 + 128);
  if (v185 == 255)
  {
LABEL_118:
    *(_QWORD *)(v33 + 120) = *v184;
    *(_BYTE *)(v33 + 128) = v34[128];
    goto LABEL_119;
  }
  v186 = v34[128];
  if (v186 == 255)
  {
    sub_1000077A4(v33 + 120);
    goto LABEL_118;
  }
  v187 = *(void **)(v33 + 120);
  *(_QWORD *)(v33 + 120) = *v184;
  *(_BYTE *)(v33 + 128) = v186;
  sub_10000563C(v187, v185);
LABEL_119:
  *(_BYTE *)(v33 + 129) = v34[129];
  v192 = v35[11];
  v193 = v33 + v192;
  v194 = &v34[v192];
  v195 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 40))(v193, v194, v195);
  v196 = v35[12];
  v197 = (_QWORD *)(v33 + v196);
  v198 = &v34[v196];
  v200 = *(_QWORD *)v198;
  v199 = *((_QWORD *)v198 + 1);
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
  *(_BYTE *)(v33 + v35[13]) = v34[v35[13]];
  *(_BYTE *)(v33 + v35[14]) = v34[v35[14]];
  *(_BYTE *)(v33 + v35[15]) = v34[v35[15]];
  v202 = v35[16];
  v203 = (_QWORD *)(v33 + v202);
  v204 = &v34[v202];
  v206 = *(_QWORD *)v204;
  v205 = *((_QWORD *)v204 + 1);
  v207 = v203[1];
  *v203 = v206;
  v203[1] = v205;
  swift_bridgeObjectRelease(v207);
  v36 = v225;
LABEL_13:
  v50 = a3[13];
  v51 = (uint64_t)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = v37((uint64_t)a1 + v50, 1, v35);
  v54 = v37((uint64_t)v52, 1, v35);
  if (v53)
  {
    if (!v54)
    {
      v55 = *((_OWORD *)v52 + 1);
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *(_OWORD *)(v51 + 16) = v55;
      *(_BYTE *)(v51 + 32) = v52[32];
      *(_OWORD *)(v51 + 40) = *(_OWORD *)(v52 + 40);
      *(_QWORD *)(v51 + 56) = *((_QWORD *)v52 + 7);
      *(_BYTE *)(v51 + 64) = v52[64];
      *(_OWORD *)(v51 + 113) = *(_OWORD *)(v52 + 113);
      *(_OWORD *)(v51 + 104) = *(_OWORD *)(v52 + 104);
      *(_OWORD *)(v51 + 88) = *(_OWORD *)(v52 + 88);
      *(_OWORD *)(v51 + 72) = *(_OWORD *)(v52 + 72);
      *(_BYTE *)(v51 + 129) = v52[129];
      v56 = v35[11];
      v57 = v51 + v56;
      v58 = v20;
      v59 = v36;
      v60 = &v52[v56];
      v61 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v57, v60, v61);
      *(_OWORD *)(v51 + v35[12]) = *(_OWORD *)&v52[v35[12]];
      *(_BYTE *)(v51 + v35[13]) = v52[v35[13]];
      *(_BYTE *)(v51 + v35[14]) = v52[v35[14]];
      *(_BYTE *)(v51 + v35[15]) = v52[v35[15]];
      *(_OWORD *)(v51 + v35[16]) = *(_OWORD *)&v52[v35[16]];
      v62 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v59 + 56);
      v20 = v58;
      v62(v51, 0, 1, v35);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v54)
  {
    sub_10000EF80(v51, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_18:
    v63 = sub_100005150(&qword_100081030);
    memcpy((void *)v51, v52, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  v144 = *((_QWORD *)v52 + 1);
  v145 = *(_QWORD *)(v51 + 8);
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_QWORD *)(v51 + 8) = v144;
  swift_bridgeObjectRelease(v145);
  v146 = v52 + 16;
  v147 = *(unsigned __int8 *)(v51 + 32);
  if (v147 != 255)
  {
    v148 = v52[32];
    if (v148 != 255)
    {
      v149 = *(_QWORD *)(v51 + 16);
      v150 = *(_QWORD *)(v51 + 24);
      *(_OWORD *)(v51 + 16) = *v146;
      *(_BYTE *)(v51 + 32) = v148;
      sub_100005624(v149, v150, v147);
      goto LABEL_74;
    }
    sub_100007770(v51 + 16);
  }
  *(_OWORD *)(v51 + 16) = *v146;
  *(_BYTE *)(v51 + 32) = v52[32];
LABEL_74:
  *(_OWORD *)(v51 + 40) = *(_OWORD *)(v52 + 40);
  v156 = v52 + 56;
  v157 = *(unsigned __int8 *)(v51 + 64);
  if (v157 != 255)
  {
    v158 = v52[64];
    if (v158 != 255)
    {
      v159 = *(void **)(v51 + 56);
      *(_QWORD *)(v51 + 56) = *v156;
      *(_BYTE *)(v51 + 64) = v158;
      sub_10000563C(v159, v157);
      goto LABEL_84;
    }
    sub_1000077A4(v51 + 56);
  }
  *(_QWORD *)(v51 + 56) = *v156;
  *(_BYTE *)(v51 + 64) = v52[64];
LABEL_84:
  v164 = v52 + 72;
  v165 = *(unsigned __int8 *)(v51 + 80);
  if (v165 != 255)
  {
    v166 = v52[80];
    if (v166 != 255)
    {
      v167 = *(void **)(v51 + 72);
      *(_QWORD *)(v51 + 72) = *v164;
      *(_BYTE *)(v51 + 80) = v166;
      sub_10000563C(v167, v165);
      goto LABEL_94;
    }
    sub_1000077A4(v51 + 72);
  }
  *(_QWORD *)(v51 + 72) = *v164;
  *(_BYTE *)(v51 + 80) = v52[80];
LABEL_94:
  v172 = v52 + 88;
  v173 = *(unsigned __int8 *)(v51 + 96);
  if (v173 != 255)
  {
    v174 = v52[96];
    if (v174 != 255)
    {
      v175 = *(void **)(v51 + 88);
      *(_QWORD *)(v51 + 88) = *v172;
      *(_BYTE *)(v51 + 96) = v174;
      sub_10000563C(v175, v173);
      goto LABEL_104;
    }
    sub_1000077A4(v51 + 88);
  }
  *(_QWORD *)(v51 + 88) = *v172;
  *(_BYTE *)(v51 + 96) = v52[96];
LABEL_104:
  v180 = v52 + 104;
  v181 = *(unsigned __int8 *)(v51 + 112);
  if (v181 != 255)
  {
    v182 = v52[112];
    if (v182 != 255)
    {
      v183 = *(void **)(v51 + 104);
      *(_QWORD *)(v51 + 104) = *v180;
      *(_BYTE *)(v51 + 112) = v182;
      sub_10000563C(v183, v181);
      goto LABEL_114;
    }
    sub_1000077A4(v51 + 104);
  }
  *(_QWORD *)(v51 + 104) = *v180;
  *(_BYTE *)(v51 + 112) = v52[112];
LABEL_114:
  v188 = v52 + 120;
  v189 = *(unsigned __int8 *)(v51 + 128);
  if (v189 == 255)
  {
LABEL_121:
    *(_QWORD *)(v51 + 120) = *v188;
    *(_BYTE *)(v51 + 128) = v52[128];
    goto LABEL_122;
  }
  v190 = v52[128];
  if (v190 == 255)
  {
    sub_1000077A4(v51 + 120);
    goto LABEL_121;
  }
  v191 = *(void **)(v51 + 120);
  *(_QWORD *)(v51 + 120) = *v188;
  *(_BYTE *)(v51 + 128) = v190;
  sub_10000563C(v191, v189);
LABEL_122:
  *(_BYTE *)(v51 + 129) = v52[129];
  v208 = v35[11];
  v209 = v51 + v208;
  v210 = &v52[v208];
  v211 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v211 - 8) + 40))(v209, v210, v211);
  v212 = v35[12];
  v213 = (_QWORD *)(v51 + v212);
  v214 = &v52[v212];
  v216 = *(_QWORD *)v214;
  v215 = *((_QWORD *)v214 + 1);
  v217 = v213[1];
  *v213 = v216;
  v213[1] = v215;
  swift_bridgeObjectRelease(v217);
  *(_BYTE *)(v51 + v35[13]) = v52[v35[13]];
  *(_BYTE *)(v51 + v35[14]) = v52[v35[14]];
  *(_BYTE *)(v51 + v35[15]) = v52[v35[15]];
  v218 = v35[16];
  v219 = (_QWORD *)(v51 + v218);
  v220 = &v52[v218];
  v222 = *(_QWORD *)v220;
  v221 = *((_QWORD *)v220 + 1);
  v223 = v219[1];
  *v219 = v222;
  v219[1] = v221;
  swift_bridgeObjectRelease(v223);
LABEL_19:
  v64 = a3[14];
  v65 = *(void **)((char *)a1 + v64);
  *(_QWORD *)((char *)a1 + v64) = *(_QWORD *)((char *)a2 + v64);

  v66 = a3[15];
  v67 = (char *)a1 + v66;
  v68 = (char *)a2 + v66;
  v69 = type metadata accessor for URL(0);
  v70 = *(_QWORD *)(v69 - 8);
  v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48);
  v72 = v71(v67, 1, v69);
  v73 = v71(v68, 1, v69);
  if (v72)
  {
    v74 = v227;
    if (!v73)
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v74 = v227;
  if (v73)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v69);
LABEL_24:
    v75 = sub_100005150(&qword_100081038);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v70 + 40))(v67, v68, v69);
LABEL_25:
  v76 = a3[17];
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  v77 = (char *)a1 + v76;
  v78 = (char *)a2 + v76;
  *(_QWORD *)v77 = *(_QWORD *)v78;
  v77[8] = v78[8];
  v79 = a3[18];
  v80 = a3[19];
  v81 = (char *)a1 + v79;
  v82 = (char *)a2 + v79;
  *(_QWORD *)v81 = *(_QWORD *)v82;
  v81[8] = v82[8];
  v83 = (char *)a1 + v80;
  v84 = (char *)a2 + v80;
  v85 = v226((char *)a1 + v80, 1, v20);
  v86 = v226(v84, 1, v20);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v83, v84, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v83, 0, 1, v20);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v83, v20);
LABEL_30:
    v87 = sub_100005150(&qword_100081028);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 40))(v83, v84, v20);
LABEL_31:
  v88 = a3[20];
  v89 = (char *)a1 + v88;
  v90 = (char *)a2 + v88;
  v91 = v226((char *)a1 + v88, 1, v20);
  v92 = v226(v90, 1, v20);
  if (v91)
  {
    if (!v92)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v89, v90, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v89, 0, 1, v20);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v92)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v89, v20);
LABEL_36:
    v93 = sub_100005150(&qword_100081028);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 40))(v89, v90, v20);
LABEL_37:
  v94 = a3[21];
  v95 = (_QWORD *)((char *)a1 + v94);
  v96 = (_QWORD *)((char *)a2 + v94);
  v97 = *(_QWORD *)((char *)a1 + v94);
  if (v97)
  {
    if (*v96)
    {
      *v95 = *v96;
      swift_release(v97);
      v98 = v95[1];
      v95[1] = v96[1];
      swift_release(v98);
      v99 = v95[2];
      v95[2] = v96[2];
      swift_release(v99);
      goto LABEL_42;
    }
    sub_100007814(v95);
  }
  *(_OWORD *)v95 = *(_OWORD *)v96;
  v95[2] = v96[2];
LABEL_42:
  v100 = a3[22];
  v101 = (char *)a1 + v100;
  v102 = (char *)a2 + v100;
  v103 = sub_100005150(&qword_100081040);
  v104 = *(_QWORD *)(v103 - 8);
  v105 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v104 + 48);
  v106 = v105(v101, 1, v103);
  v107 = v105(v102, 1, v103);
  if (v106)
  {
    if (!v107)
    {
      v108 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
      v108(v101, v102, v20);
      v108(&v101[*(int *)(v103 + 36)], &v102[*(int *)(v103 + 36)], v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v107)
  {
    sub_10000F008((uint64_t)v101, &qword_100081040);
LABEL_47:
    v109 = sub_100005150(&qword_100081048);
    memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_48;
  }
  v151 = *(void (**)(char *, char *, uint64_t))(v74 + 40);
  v151(v101, v102, v20);
  v151(&v101[*(int *)(v103 + 36)], &v102[*(int *)(v103 + 36)], v20);
LABEL_48:
  v110 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v111 = v110[5];
  v112 = &v101[v111];
  v113 = &v102[v111];
  v114 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 40))(v112, v113, v114);
  v115 = v110[6];
  v116 = &v101[v115];
  v117 = &v102[v115];
  v118 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v119 = *(_QWORD *)(v118 - 8);
  v120 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48);
  v121 = v120(v116, 1, v118);
  v122 = v120(v117, 1, v118);
  if (!v121)
  {
    if (!v122)
    {
      (*(void (**)(char *, char *, uint64_t))(v119 + 40))(v116, v117, v118);
      goto LABEL_54;
    }
    (*(void (**)(char *, uint64_t))(v119 + 8))(v116, v118);
    goto LABEL_53;
  }
  if (v122)
  {
LABEL_53:
    v123 = sub_100005150(&qword_100081050);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v116, v117, v118);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
LABEL_54:
  v124 = v110[7];
  v125 = &v101[v124];
  v126 = &v102[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  v130 = v110[8];
  v131 = &v101[v130];
  v132 = &v102[v130];
  v134 = *(_QWORD *)v132;
  v133 = *((_QWORD *)v132 + 1);
  v135 = *((_QWORD *)v131 + 1);
  *(_QWORD *)v131 = v134;
  *((_QWORD *)v131 + 1) = v133;
  swift_bridgeObjectRelease(v135);
  return a1;
}

uint64_t sub_10001E844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001E850);
}

uint64_t sub_10001E850(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100005150(&qword_100081028);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[10];
    }
    else
    {
      v12 = sub_100005150(&qword_100081030);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[12];
      }
      else
      {
        v13 = sub_100005150(&qword_100081038);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[15];
        }
        else
        {
          v10 = type metadata accessor for WidgetPredictedPlayState(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[22];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10001E944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001E950);
}

uint64_t sub_10001E950(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100005150(&qword_100081028);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[10];
    }
    else
    {
      v12 = sub_100005150(&qword_100081030);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[12];
      }
      else
      {
        v13 = sub_100005150(&qword_100081038);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[15];
        }
        else
        {
          v10 = type metadata accessor for WidgetPredictedPlayState(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[22];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for UpNextEntry.Episode(uint64_t a1)
{
  return sub_10001EA54(a1, (uint64_t *)&unk_100081790, (uint64_t)&nominal type descriptor for UpNextEntry.Episode);
}

uint64_t sub_10001EA54(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

void sub_10001EA88(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[8];
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  v11[0] = &unk_10006D9E8;
  v11[1] = &unk_10006D9E8;
  v11[2] = &unk_10006D9E8;
  v11[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v11[4] = &unk_10006D9E8;
  v11[5] = &unk_10006D9E8;
  sub_10001EBCC(319, (unint64_t *)&qword_100081448, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v11[6] = v4;
    v11[7] = &unk_10006DA30;
    sub_10001EBCC(319, &qword_1000817A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
    if (v6 <= 0x3F)
    {
      v12 = *(_QWORD *)(v5 - 8) + 64;
      v13 = v12;
      v14 = &unk_10006DA18;
      sub_10001EBCC(319, (unint64_t *)&qword_1000817A8, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      if (v8 <= 0x3F)
      {
        v15 = *(_QWORD *)(v7 - 8) + 64;
        v16 = &unk_10006DA48;
        v17 = &unk_10006DA60;
        v18 = &unk_10006DA60;
        v19 = v4;
        v20 = v4;
        v21 = &unk_10006DA78;
        v9 = type metadata accessor for WidgetPredictedPlayState(319);
        if (v10 <= 0x3F)
        {
          v22 = *(_QWORD *)(v9 - 8) + 64;
          swift_initStructMetadata(a1, 256, 19, v11, a1 + 16);
        }
      }
    }
  }
}

void sub_10001EBCC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10001EC18@<X0>(uint64_t a1@<X0>, double a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,unsigned __int8 a21,double a22,unsigned __int8 a23,double a24,unsigned __int8 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void (*a30)(char *, uint64_t),uint64_t a31)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(void);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  double v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)@<X0>(uint64_t *@<X8>);
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  double v81;
  char v82;
  double v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  double v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  void *v106;
  int v107;
  uint64_t v108;
  int v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v134 = a8;
  v132 = a7;
  v114 = a6;
  v113 = a5;
  v123 = a4;
  v121 = a3;
  v131 = a2;
  v111 = a1;
  v129 = a28;
  v133 = a27;
  v127 = a22;
  v135 = a26;
  v136 = a20;
  v137 = a16;
  v138 = a15;
  v139 = a14;
  v32 = type metadata accessor for WidgetPredictedPlayState(0);
  __chkstk_darwin(v32);
  v130 = (uint64_t)&v99 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v99 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = UUID.init()(v36);
  v40 = UUID.uuidString.getter(v39);
  v42 = v41;
  v110 = *(void (**)(char *, uint64_t))(v35 + 8);
  v110(v38, v34);
  *a9 = v40;
  a9[1] = v42;
  v43 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v44 = (char *)a9 + v43[10];
  v45 = type metadata accessor for Date(0);
  v46 = *(_QWORD *)(v45 - 8);
  v124 = v44;
  v125 = v46;
  v47 = *(void (**)(void))(v46 + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v47)(v44, 1, 1, v45);
  v48 = (uint64_t *)((char *)a9 + v43[11]);
  *v48 = 0;
  v48[1] = 0;
  v49 = (uint64_t)a9 + v43[12];
  v50 = type metadata accessor for ArtworkModel(0);
  v51 = *(void (**)(void))(*(_QWORD *)(v50 - 8) + 56);
  v122 = v49;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v51)(v49, 1, 1, v50);
  v119 = (uint64_t)a9 + v43[13];
  v51();
  v117 = v43[14];
  *(uint64_t *)((char *)a9 + v117) = 0;
  v52 = (uint64_t)a9 + v43[15];
  v53 = type metadata accessor for URL(0);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56);
  v120 = v52;
  v55 = v52;
  v56 = v131;
  v54(v55, 1, 1, v53);
  v116 = v43[16];
  *((_BYTE *)a9 + v116) = 0;
  v57 = (char *)a9 + v43[17];
  *(_QWORD *)v57 = 0;
  v57[8] = 1;
  v58 = (char *)a9 + v43[18];
  *(_QWORD *)v58 = 0;
  v58[8] = 1;
  v118 = (uint64_t)a9 + v43[19];
  v47();
  v115 = (uint64_t)a9 + v43[20];
  v126 = v45;
  v59 = ((uint64_t (*)(void))v47)();
  v128 = v43;
  v60 = (uint64_t *)((char *)a9 + v43[21]);
  *v60 = 0;
  v60[1] = 0;
  v112 = v60;
  v60[2] = 0;
  if (v56 == 0.0)
  {
    v62 = UUID.init()(v59);
    v61 = UUID.uuidString.getter(v62);
    v56 = v63;
    v110(v38, v34);
  }
  else
  {
    v61 = v111;
  }
  v111 = a31;
  v110 = a30;
  v108 = a29;
  v109 = a25;
  v131 = a24;
  v105 = a23;
  v107 = a21;
  v106 = a19;
  v104 = a18;
  v103 = a17;
  v102 = a13;
  v101 = a12;
  v100 = a11;
  v99 = a10;
  swift_bridgeObjectRelease(a9[1]);
  *a9 = v61;
  *((double *)a9 + 1) = v56;
  v64 = v121;
  v65 = v123;
  a9[2] = v121;
  a9[3] = v65;
  v66 = v114;
  a9[4] = v113;
  a9[5] = (uint64_t)v66;
  v67 = v134;
  v68 = v132;
  if (v132)
  {
    v69 = swift_allocObject(&unk_10007E460, 32, 7);
    *(_QWORD *)(v69 + 16) = v68;
    *(_QWORD *)(v69 + 24) = v67;
    v70 = v67;
    v71 = sub_100022EE0;
  }
  else
  {
    v114 = v48;
    v69 = swift_allocObject(&unk_10007E410, 32, 7);
    *(_QWORD *)(v69 + 16) = v64;
    *(_QWORD *)(v69 + 24) = v65;
    v48 = v114;
    swift_bridgeObjectRetain(v65);
    v70 = v67;
    v71 = sub_100022DE4;
  }
  v72 = v105;
  LODWORD(v123) = v105 & 1;
  v73 = swift_allocObject(&unk_10007E438, 32, 7);
  *(_QWORD *)(v73 + 16) = v71;
  *(_QWORD *)(v73 + 24) = v69;
  v74 = type metadata accessor for UpNextEntry.Episode.CaptionGenerator();
  v75 = swift_allocObject(v74, 32, 7);
  *(_QWORD *)(v75 + 16) = sub_100022E14;
  *(_QWORD *)(v75 + 24) = v73;
  v76 = v99;
  a9[6] = v75;
  a9[7] = v76;
  v77 = v101;
  a9[8] = v100;
  a9[9] = v77;
  a9[10] = v102;
  sub_100022E44(v68, v70);
  sub_100022E54(v137, (uint64_t)v124, &qword_100081028);
  swift_bridgeObjectRelease(v48[1]);
  v78 = v104;
  *v48 = v103;
  v48[1] = v78;
  sub_100022E54(v139, v122, &qword_100081030);
  sub_100022E54(v138, v119, &qword_100081030);
  v79 = *(void **)((char *)a9 + v117);
  v80 = v106;
  *(uint64_t *)((char *)a9 + v117) = (uint64_t)v106;
  v124 = v80;

  sub_100022E54(v136, v120, &qword_100081038);
  LODWORD(v122) = v107 & 1;
  *((_BYTE *)a9 + v116) = v107 & 1;
  v81 = v127;
  v82 = v72 & 1 | (v127 <= 0.0);
  if (v82)
    v83 = 0.0;
  else
    v83 = v127;
  *(double *)v57 = v83;
  v57[8] = v82;
  v84 = v109 & 1;
  *(double *)v58 = v131;
  v58[8] = v84;
  sub_100022E54(v135, v118, &qword_100081028);
  sub_100022E54(v133, v115, &qword_100081028);
  v85 = v112;
  v86 = *v112;
  v87 = v112[1];
  v88 = v112[2];
  v89 = v108;
  v90 = v110;
  v91 = v111;
  sub_1000093E0(v108, (uint64_t)v110, v111);
  sub_100022E98(v86, v87, v88);
  *v85 = v89;
  v85[1] = (uint64_t)v90;
  v85[2] = v91;
  v92 = v130;
  v93 = v81;
  v94 = v84;
  v95 = v135;
  v96 = v133;
  v97 = v129;
  sub_10002C4B0(v122, v93, v123, v131, v94, v135, v133, v129, v130);
  sub_100022E98(v89, (uint64_t)v90, v91);

  sub_100022ED0(v132, v134);
  (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v97, v126);
  sub_10000F008(v96, &qword_100081028);
  sub_10000F008(v95, &qword_100081028);
  sub_10000F008(v136, &qword_100081038);
  sub_10000F008(v137, &qword_100081028);
  sub_10000F008(v138, &qword_100081030);
  sub_10000F008(v139, &qword_100081030);
  return sub_10000FC78(v92, (uint64_t)a9 + v128[22], type metadata accessor for WidgetPredictedPlayState);
}

uint64_t sub_10001F324@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

void *sub_10001F334()
{
  return &protocol witness table for String;
}

uint64_t sub_10001F340()
{
  return sub_10000FBAC(&qword_100081820, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_10001F36C@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  int *Entry;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  Swift::String v34;

  v32 = a6;
  v12 = a1;
  v13 = sub_100005150(&qword_100081680);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v34._object = (void *)0xE000000000000000;
  v17._object = (void *)0x80000001000701C0;
  v17._countAndFlagsBits = 0xD000000000000015;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v34._countAndFlagsBits = 0;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v34);

  *(Swift::String *)a7 = v19;
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  UUID.init()(Entry);
  *(_QWORD *)(a7 + Entry[8]) = a3;
  v21 = a7 + Entry[9];
  v33 = a4;
  sub_10000EFC4(a4, v21, &qword_100081028);
  v22 = a7 + Entry[10];
  v23 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, a5, v23);
  if (v12 != 2)
  {
    v27 = v12 & 1;
LABEL_6:
    v25 = a3;
    v28 = swift_bridgeObjectRelease(a2);
    *(_BYTE *)(a7 + 16) = v27;
    __chkstk_darwin(v28);
    v26 = (uint64_t)v32;
    v34._object = v32;
    v29 = sub_100017854((void (*)(unint64_t *))sub_100022F08, (uint64_t)(&v32 - 4), 1uLL, 6uLL);
    *(_QWORD *)(a7 + 24) = v29;
    TimelineEntryRelevance.init(score:duration:)(v29, 0.0, 0.0);
    goto LABEL_7;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    v27 = 0;
    goto LABEL_6;
  }
  *(_BYTE *)(a7 + 16) = 2;
  *(_QWORD *)(a7 + 24) = a2;
  v25 = a3;
  swift_bridgeObjectRetain(a2);
  sub_100011574(a5, a2, (uint64_t)v15);
  swift_bridgeObjectRelease(a2);
  v26 = (uint64_t)v32;
LABEL_7:

  sub_10000F008(v26, &qword_100081840);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a5, v23);
  sub_10000F008(v33, &qword_100081028);
  v30 = type metadata accessor for TimelineEntryRelevance(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v15, 0, 1, v30);
  return sub_10000EEF8((uint64_t)v15, a7 + Entry[11], &qword_100081680);
}

uint64_t sub_10001F614@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  Swift::Int v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *object;
  uint64_t countAndFlagsBits;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t *v68;

  v55 = a1;
  v68 = a2;
  v61 = type metadata accessor for Date(0);
  v64 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v67 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005150(&qword_100081038);
  __chkstk_darwin(v3);
  v66 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005150(&qword_100081028);
  v6 = __chkstk_darwin(v5);
  v65 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v62 = (char *)&v55 - v9;
  __chkstk_darwin(v8);
  v63 = (char *)&v55 - v10;
  v11 = sub_100005150(&qword_100081030);
  v12 = __chkstk_darwin(v11);
  v60 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v55 - v14;
  v16 = type metadata accessor for WidgetFamily(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005150(&qword_100081850);
  __chkstk_darwin(v20);
  v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100005150(&qword_100081840);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v55 - v27;
  v29._countAndFlagsBits = 109;
  v29._object = (void *)0xE100000000000000;
  v30 = String.init(repeating:count:)(v29, 18);
  object = v30._object;
  countAndFlagsBits = v30._countAndFlagsBits;
  v31._countAndFlagsBits = 109;
  v31._object = (void *)0xE100000000000000;
  v32 = String.init(repeating:count:)(v31, 10);
  v56 = v32._object;
  v57 = v32._countAndFlagsBits;
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v28, enum case for WidgetFamily.systemExtraLarge(_:), v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v28, 0, 1, v16);
  v33 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_10000EFC4(v55, (uint64_t)v22, &qword_100081840);
  sub_10000EFC4((uint64_t)v28, v33, &qword_100081840);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v34((uint64_t)v22, 1, v16) != 1)
  {
    sub_10000EFC4((uint64_t)v22, (uint64_t)v26, &qword_100081840);
    if (v34(v33, 1, v16) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v19, v33, v16);
      v35 = sub_10000FBAC(&qword_100081858, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)(v26, v19, v16, v35);
      v37 = *(void (**)(char *, uint64_t))(v17 + 8);
      v37(v19, v16);
      sub_10000F008((uint64_t)v28, &qword_100081840);
      v37(v26, v16);
      sub_10000F008((uint64_t)v22, &qword_100081840);
      if ((v36 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v38 = 70;
      goto LABEL_10;
    }
    sub_10000F008((uint64_t)v28, &qword_100081840);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v26, v16);
LABEL_6:
    sub_10000F008((uint64_t)v22, &qword_100081850);
    goto LABEL_9;
  }
  sub_10000F008((uint64_t)v28, &qword_100081840);
  if (v34(v33, 1, v16) != 1)
    goto LABEL_6;
  sub_10000F008((uint64_t)v22, &qword_100081840);
LABEL_8:
  v38 = 60;
LABEL_10:
  v39._countAndFlagsBits = 109;
  v39._object = (void *)0xE100000000000000;
  v40 = String.init(repeating:count:)(v39, v38);
  v55 = v40._countAndFlagsBits;
  v41 = type metadata accessor for ArtworkModel(0);
  v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
  v43 = (uint64_t)v15;
  v42(v15, 1, 1, v41);
  v44 = (uint64_t)v60;
  v42(v60, 1, 1, v41);
  v45 = (uint64_t)v63;
  v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56);
  v47 = v61;
  v46(v63, 1, 1, v61);
  v48 = type metadata accessor for URL(0);
  v49 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v66, 1, 1, v48);
  v50 = (uint64_t)v62;
  v46(v62, 1, 1, v47);
  v51 = (uint64_t)v65;
  v52 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v46)(v65, 1, 1, v47);
  v53 = (uint64_t)v67;
  static Date.now.getter(v52);
  return sub_10001EC18(0, 0.0, countAndFlagsBits, (uint64_t)object, v57, v56, 0, 0, v68, 0, 0xE000000000000000, v55, (uint64_t)v40._object, v43, v44, v45, 0, 0, 0,
           v49,
           0,
           0.0,
           1u,
           0.0,
           1u,
           v50,
           v51,
           v53,
           0,
           0,
           0);
}

uint64_t sub_10001FBA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v17;

  v6 = type metadata accessor for WidgetPredictedPlayState(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EF3C(a1, (uint64_t)a3, type metadata accessor for UpNextEntry.Episode);
  v9 = a3[6];
  v11 = *(uint64_t (**)(uint64_t))(v9 + 16);
  v10 = *(_QWORD *)(v9 + 24);
  swift_retain(v10);
  v12 = v11(a2);
  v14 = v13;
  swift_release(v10);
  swift_bridgeObjectRelease(a3[3]);
  a3[2] = v12;
  a3[3] = v14;
  v15 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  sub_10002C4B0(*((_BYTE *)a3 + v15[16]), *(double *)((char *)a3 + v15[17]), *((_BYTE *)a3 + v15[17] + 8), *(double *)((char *)a3 + v15[18]), *((unsigned __int8 *)a3 + v15[18] + 8), (uint64_t)a3 + v15[19], (uint64_t)a3 + v15[20], a2, (uint64_t)v8);
  return sub_100022FB4((uint64_t)v8, (uint64_t)a3 + v15[22]);
}

uint64_t sub_10001FCC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10001FD00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000EFC4(v2 + *(int *)(a1 + 44), a2, &qword_100081680);
}

uint64_t sub_10001FD28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10001FD68()
{
  return sub_10000FBAC(qword_100081828, type metadata accessor for UpNextEntry, (uint64_t)&unk_10006DB28);
}

uint64_t sub_10001FD94(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v9 = sub_100005150(&qword_100081028);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v26 - v17;
  sub_10000EFC4(a1, (uint64_t)v11, &qword_100081028);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    result = sub_10000F008((uint64_t)v11, &qword_100081028);
    *a3 = 1;
  }
  else
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v20(v18, v11, v12);
    v21 = sub_10000FBAC((unint64_t *)&qword_100081390, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    if ((dispatch thunk of static Comparable.< infix(_:_:)(v18, a4, v12, v21) & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
      v22 = *a5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a5);
      *a5 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v22 = sub_1000625EC(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
        *a5 = v22;
      }
      v25 = *(_QWORD *)(v22 + 16);
      v24 = *(_QWORD *)(v22 + 24);
      if (v25 >= v24 >> 1)
      {
        v22 = sub_1000625EC(v24 > 1, v25 + 1, 1, v22);
        *a5 = v22;
      }
      *(_QWORD *)(v22 + 16) = v25 + 1;
      v20((char *)(v22+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v25), v16, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    }
    else
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
      *a3 = 1;
    }
  }
  return result;
}

Swift::Int sub_10001FFD4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  Swift::Int result;
  char *v6[2];

  v2 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_100021904(v3);
  v4 = (char *)v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_100020054(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_100020054(char **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  char *v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char **v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  Swift::Int v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  char *v141;
  char *v142;
  uint64_t v143;
  char **v144;
  char *v145;
  Swift::Int v146;
  uint64_t v147;
  uint64_t v148;

  v3 = type metadata accessor for Date(0);
  v148 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v134 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v145 = (char *)&v130 - v7;
  v8 = __chkstk_darwin(v6);
  v142 = (char *)&v130 - v9;
  __chkstk_darwin(v8);
  v141 = (char *)&v130 - v10;
  v11 = (Swift::Int)a1[1];
  result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0)
      goto LABEL_141;
    if (v11)
      return sub_100020ACC(0, v11, 1, a1);
    return result;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_149;
  v144 = a1;
  v131 = result;
  v137 = v1;
  if (v11 < 2)
  {
    v17 = (char *)&_swiftEmptyArrayStorage;
    v136 = (unint64_t)&_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80));
    v130 = &_swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      v19 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
LABEL_107:
      if (v19 >= 2)
      {
        v122 = *v144;
        do
        {
          v123 = v19 - 2;
          if (v19 < 2)
            goto LABEL_136;
          if (!v122)
            goto LABEL_148;
          v124 = *(_QWORD *)&v17[16 * v123 + 32];
          v125 = *(_QWORD *)&v17[16 * v19 + 24];
          v126 = v137;
          sub_100020D44((unint64_t)&v122[*(_QWORD *)(v148 + 72) * v124], (unint64_t)&v122[*(_QWORD *)(v148 + 72) * *(_QWORD *)&v17[16 * v19 + 16]], (unint64_t)&v122[*(_QWORD *)(v148 + 72) * v125], v136);
          v137 = v126;
          if (v126)
            break;
          if (v125 < v124)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
            v17 = sub_10002149C((uint64_t)v17);
          if (v123 >= *((_QWORD *)v17 + 2))
            goto LABEL_138;
          v127 = &v17[16 * v123 + 32];
          *(_QWORD *)v127 = v124;
          *((_QWORD *)v127 + 1) = v125;
          v128 = *((_QWORD *)v17 + 2);
          if (v19 > v128)
            goto LABEL_139;
          memmove(&v17[16 * v19 + 16], &v17[16 * v19 + 32], 16 * (v128 - v19));
          *((_QWORD *)v17 + 2) = v128 - 1;
          v19 = v128 - 1;
        }
        while (v128 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease(v17);
      v129 = v130;
      v130[2] = 0;
      return swift_bridgeObjectRelease(v129);
    }
  }
  else
  {
    v14 = v13 >> 1;
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, v3);
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(unsigned __int8 *)(v148 + 80);
    v130 = (_QWORD *)v15;
    v136 = v15 + ((v16 + 32) & ~v16);
  }
  v18 = 0;
  v17 = (char *)&_swiftEmptyArrayStorage;
  while (1)
  {
    v20 = v18;
    v21 = v18 + 1;
    v135 = v18;
    if (v18 + 1 >= v11)
    {
      v32 = v18 + 1;
      v41 = v137;
      goto LABEL_58;
    }
    v22 = *v144;
    v146 = v11;
    v23 = v148;
    v24 = *(_QWORD *)(v148 + 72);
    v25 = *(void (**)(_QWORD, _QWORD, _QWORD))(v148 + 16);
    v26 = v141;
    v25(v141, &v22[v24 * v21], v3);
    v27 = &v22[v24 * v20];
    v28 = v142;
    v25(v142, v27, v3);
    v143 = sub_10000FBAC((unint64_t *)&qword_100081390, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    LODWORD(v140) = dispatch thunk of static Comparable.< infix(_:_:)(v26, v28, v3, v143);
    v29 = *(void (**)(_QWORD, _QWORD))(v23 + 8);
    v30 = v28;
    v20 = v135;
    v29(v30, v3);
    v29(v26, v3);
    v31 = v22;
    v32 = v20 + 2;
    v138 = v31;
    v147 = v24;
    if (v20 + 2 >= v146)
    {
      v41 = v137;
      v40 = v146;
      v39 = v24;
      if ((v140 & 1) == 0)
        break;
    }
    else
    {
      v132 = v17;
      v139 = v24 * v21;
      v33 = v31;
      v34 = v24 * v32;
      do
      {
        v35 = v32;
        v36 = v141;
        v25(v141, &v33[v34], v3);
        v37 = v142;
        v25(v142, &v33[v139], v3);
        v38 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v37, v3, v143);
        v29(v37, v3);
        v29(v36, v3);
        if (((v140 ^ v38) & 1) != 0)
        {
          v41 = v137;
          v17 = v132;
          v32 = v35;
          v20 = v135;
          v40 = v146;
          v39 = v147;
          if ((v140 & 1) == 0)
            goto LABEL_38;
          goto LABEL_26;
        }
        v32 = v35 + 1;
        v39 = v147;
        v33 += v147;
      }
      while (v146 != v35 + 1);
      v40 = v146;
      v32 = v146;
      v41 = v137;
      v17 = v132;
      v20 = v135;
      if ((v140 & 1) == 0)
        break;
    }
LABEL_26:
    if (v32 < v20)
      goto LABEL_142;
    if (v20 >= v32)
      break;
    v132 = v17;
    v42 = 0;
    v43 = v39 * (v32 - 1);
    v44 = v32 * v39;
    v45 = v20;
    v46 = v20 * v39;
    v47 = v144;
    v143 = v32;
    do
    {
      if (v45 != v32 + v42 - 1)
      {
        if (!v138)
          goto LABEL_147;
        v48 = v41;
        v49 = &v138[v46];
        v50 = &v138[v43];
        v140 = *(char **)(v148 + 32);
        ((void (*)(char *, char *, uint64_t))v140)(v134, &v138[v46], v3);
        if (v46 < v43 || v49 >= &v138[v44])
        {
          swift_arrayInitWithTakeFrontToBack(v49, v50);
        }
        else if (v46 != v43)
        {
          swift_arrayInitWithTakeBackToFront(v49, v50);
        }
        ((void (*)(char *, char *, uint64_t))v140)(v50, v134, v3);
        v41 = v48;
        v32 = v143;
        v47 = v144;
        v39 = v147;
      }
      ++v45;
      --v42;
      v43 -= v39;
      v44 -= v39;
      v46 += v39;
    }
    while (v45 < v32 + v42);
    v17 = v132;
    v20 = v135;
    v40 = v146;
    if (v32 < v146)
      goto LABEL_41;
LABEL_58:
    if (v32 < v20)
      goto LABEL_135;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v137 = v41;
    v143 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v17 = sub_100021298(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
    v71 = *((_QWORD *)v17 + 2);
    v70 = *((_QWORD *)v17 + 3);
    v19 = v71 + 1;
    if (v71 >= v70 >> 1)
      v17 = sub_100021298((char *)(v70 > 1), v71 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v19;
    v72 = v17 + 32;
    v73 = &v17[16 * v71 + 32];
    v74 = v143;
    *(_QWORD *)v73 = v20;
    *((_QWORD *)v73 + 1) = v74;
    if (v71)
    {
      while (1)
      {
        v75 = v19 - 1;
        if (v19 >= 4)
        {
          v80 = &v72[16 * v19];
          v81 = *((_QWORD *)v80 - 8);
          v82 = *((_QWORD *)v80 - 7);
          v86 = __OFSUB__(v82, v81);
          v83 = v82 - v81;
          if (v86)
            goto LABEL_124;
          v85 = *((_QWORD *)v80 - 6);
          v84 = *((_QWORD *)v80 - 5);
          v86 = __OFSUB__(v84, v85);
          v78 = v84 - v85;
          v79 = v86;
          if (v86)
            goto LABEL_125;
          v87 = v19 - 2;
          v88 = &v72[16 * v19 - 32];
          v90 = *(_QWORD *)v88;
          v89 = *((_QWORD *)v88 + 1);
          v86 = __OFSUB__(v89, v90);
          v91 = v89 - v90;
          if (v86)
            goto LABEL_127;
          v86 = __OFADD__(v78, v91);
          v92 = v78 + v91;
          if (v86)
            goto LABEL_130;
          if (v92 >= v83)
          {
            v110 = &v72[16 * v75];
            v112 = *(_QWORD *)v110;
            v111 = *((_QWORD *)v110 + 1);
            v86 = __OFSUB__(v111, v112);
            v113 = v111 - v112;
            if (v86)
              goto LABEL_134;
            v103 = v78 < v113;
            goto LABEL_95;
          }
        }
        else
        {
          if (v19 != 3)
          {
            v104 = *((_QWORD *)v17 + 4);
            v105 = *((_QWORD *)v17 + 5);
            v86 = __OFSUB__(v105, v104);
            v97 = v105 - v104;
            v98 = v86;
            goto LABEL_89;
          }
          v77 = *((_QWORD *)v17 + 4);
          v76 = *((_QWORD *)v17 + 5);
          v86 = __OFSUB__(v76, v77);
          v78 = v76 - v77;
          v79 = v86;
        }
        if ((v79 & 1) != 0)
          goto LABEL_126;
        v87 = v19 - 2;
        v93 = &v72[16 * v19 - 32];
        v95 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        v96 = __OFSUB__(v94, v95);
        v97 = v94 - v95;
        v98 = v96;
        if (v96)
          goto LABEL_129;
        v99 = &v72[16 * v75];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v86 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v86)
          goto LABEL_132;
        if (__OFADD__(v97, v102))
          goto LABEL_133;
        if (v97 + v102 >= v78)
        {
          v103 = v78 < v102;
LABEL_95:
          if (v103)
            v75 = v87;
          goto LABEL_97;
        }
LABEL_89:
        if ((v98 & 1) != 0)
          goto LABEL_128;
        v106 = &v72[16 * v75];
        v108 = *(_QWORD *)v106;
        v107 = *((_QWORD *)v106 + 1);
        v86 = __OFSUB__(v107, v108);
        v109 = v107 - v108;
        if (v86)
          goto LABEL_131;
        if (v109 < v97)
          goto LABEL_14;
LABEL_97:
        v114 = v75 - 1;
        if (v75 - 1 >= v19)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!*v144)
          goto LABEL_146;
        v115 = v17;
        v116 = &v72[16 * v114];
        v117 = *(_QWORD *)v116;
        v118 = &v72[16 * v75];
        v119 = *((_QWORD *)v118 + 1);
        v120 = v137;
        sub_100020D44((unint64_t)&(*v144)[*(_QWORD *)(v148 + 72) * *(_QWORD *)v116], (unint64_t)&(*v144)[*(_QWORD *)(v148 + 72) * *(_QWORD *)v118], (unint64_t)&(*v144)[*(_QWORD *)(v148 + 72) * v119], v136);
        v137 = v120;
        if (v120)
        {
          v17 = v115;
          goto LABEL_118;
        }
        if (v119 < v117)
          goto LABEL_121;
        if (v75 > *((_QWORD *)v115 + 2))
          goto LABEL_122;
        *(_QWORD *)v116 = v117;
        *(_QWORD *)&v72[16 * v114 + 8] = v119;
        v121 = *((_QWORD *)v115 + 2);
        if (v75 >= v121)
          goto LABEL_123;
        v17 = v115;
        v19 = v121 - 1;
        memmove(&v72[16 * v75], v118 + 16, 16 * (v121 - 1 - v75));
        *((_QWORD *)v115 + 2) = v121 - 1;
        if (v121 <= 2)
          goto LABEL_14;
      }
    }
    v19 = 1;
LABEL_14:
    v11 = (Swift::Int)v144[1];
    v18 = v143;
    if (v143 >= v11)
      goto LABEL_107;
  }
LABEL_38:
  v47 = v144;
  if (v32 >= v40)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v32, v20))
    goto LABEL_140;
  if (v32 - v20 >= v131)
    goto LABEL_58;
  if (__OFADD__(v20, v131))
    goto LABEL_143;
  if (v20 + v131 >= v40)
    v51 = v40;
  else
    v51 = v20 + v131;
  if (v51 >= v20)
  {
    if (v32 != v51)
    {
      v132 = v17;
      v133 = v51;
      v52 = *(_QWORD *)(v148 + 72);
      v53 = *(char **)(v148 + 16);
      v137 = v41;
      v138 = v53;
      v54 = v52 * (v32 - 1);
      v139 = v52;
      v147 = v32 * v52;
      do
      {
        v56 = 0;
        v143 = v32;
        v140 = (char *)v54;
        while (1)
        {
          v146 = v20;
          v57 = *v47;
          v58 = v141;
          v59 = v47;
          v60 = (void (*)(_QWORD, _QWORD, _QWORD))v138;
          ((void (*)(char *, char *, uint64_t))v138)(v141, &(*v47)[v147 + v56], v3);
          v61 = &v57[v54 + v56];
          v62 = v142;
          v60(v142, v61, v3);
          v63 = sub_10000FBAC((unint64_t *)&qword_100081390, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          LOBYTE(v57) = dispatch thunk of static Comparable.< infix(_:_:)(v58, v62, v3, v63);
          v64 = *(void (**)(_QWORD, _QWORD))(v148 + 8);
          v64(v62, v3);
          v64(v58, v3);
          if ((v57 & 1) == 0)
            break;
          v65 = *v59;
          if (!*v59)
            goto LABEL_145;
          v66 = &v65[v147 + v56];
          v54 = (uint64_t)v140;
          v67 = &v140[(_QWORD)v65 + v56];
          v68 = *(void (**)(_QWORD, _QWORD, _QWORD))(v148 + 32);
          v68(v145, v66, v3);
          swift_arrayInitWithTakeFrontToBack(v66, v67);
          v68(v67, v145, v3);
          v56 -= v139;
          v20 = v146 + 1;
          v55 = v143;
          v47 = v144;
          if (v143 == v146 + 1)
            goto LABEL_51;
        }
        v55 = v143;
        v47 = v59;
        v54 = (uint64_t)v140;
LABEL_51:
        v32 = v55 + 1;
        v54 += v139;
        v147 += v139;
        v20 = v135;
      }
      while (v32 != v133);
      v32 = v133;
      v41 = v137;
      v17 = v132;
    }
    goto LABEL_58;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100020ACC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v30 = a1;
  v7 = type metadata accessor for Date(0);
  v38 = *(_QWORD **)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v37 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v34 = (char *)&v28 - v11;
  result = __chkstk_darwin(v10);
  v33 = (char *)&v28 - v13;
  v36 = a3;
  v29 = a2;
  if (a3 != a2)
  {
    v14 = v38[9];
    v31 = (void (*)(char *, uint64_t, uint64_t))v38[2];
    v32 = a4;
    v40 = v14 * (v36 - 1);
    v35 = v14;
    v39 = v14 * v36;
LABEL_5:
    v15 = 0;
    v16 = v30;
    while (1)
    {
      v17 = *a4;
      v18 = v33;
      v19 = v31;
      v31(v33, v39 + v15 + *a4, v7);
      v20 = v34;
      v19(v34, v40 + v15 + v17, v7);
      v21 = sub_10000FBAC((unint64_t *)&qword_100081390, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      LOBYTE(v17) = dispatch thunk of static Comparable.< infix(_:_:)(v18, v20, v7, v21);
      v22 = (void (*)(char *, uint64_t))v38[1];
      v23 = v20;
      a4 = v32;
      v22(v23, v7);
      result = ((uint64_t (*)(char *, uint64_t))v22)(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v40 += v35;
        v39 += v35;
        if (++v36 == v29)
          return result;
        goto LABEL_5;
      }
      v24 = *a4;
      if (!*a4)
        break;
      v25 = v24 + v39 + v15;
      v26 = v24 + v40 + v15;
      v27 = (void (*)(char *, uint64_t, uint64_t))v38[4];
      v27(v37, v25, v7);
      swift_arrayInitWithTakeFrontToBack(v25, v26);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v26, v37, v7);
      v15 -= v35;
      if (v36 == ++v16)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100020D44(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD **)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v51 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v50 = (char *)&v45 - v12;
  v52 = v9[9];
  if (!v52)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v52 == -1)
    goto LABEL_62;
  v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v52 == -1)
    goto LABEL_63;
  v14 = (uint64_t)(a2 - a1) / v52;
  v55 = a1;
  v54 = a4;
  v15 = v13 / v52;
  if (v14 >= v13 / v52)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v17 = v15 * v52;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v29 = a4 + v17;
      v53 = a4 + v17;
      v55 = a2;
      if (v17 >= 1 && a1 < a2)
      {
        v31 = -v52;
        v46 = (void (*)(char *, unint64_t, uint64_t))v9[2];
        v47 = v9;
        v48 = a4;
        v49 = a1;
        do
        {
          v52 = a3 + v31;
          v32 = v50;
          v33 = v46;
          v46(v50, v29 + v31, v8);
          v34 = a2 + v31;
          v35 = v31;
          v36 = v51;
          v33(v51, v34, v8);
          v37 = sub_10000FBAC((unint64_t *)&qword_100081390, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          LOBYTE(v33) = dispatch thunk of static Comparable.< infix(_:_:)(v32, v36, v8, v37);
          v38 = (void (*)(char *, uint64_t))v9[1];
          v38(v36, v8);
          v38(v32, v8);
          if ((v33 & 1) != 0)
          {
            v31 = v35;
            v39 = v52;
            if (a3 < a2 || v52 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v52, v34);
              v9 = v47;
              v40 = v48;
              v41 = v49;
            }
            else
            {
              v9 = v47;
              v40 = v48;
              v41 = v49;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(v52, v34);
            }
            v55 += v31;
          }
          else
          {
            v42 = v53;
            v43 = v53 + v35;
            v53 += v35;
            v31 = v35;
            v39 = v52;
            if (a3 < v42 || v52 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack(v52, v43);
              v34 = a2;
              v9 = v47;
              v40 = v48;
              v41 = v49;
            }
            else
            {
              v9 = v47;
              v40 = v48;
              v41 = v49;
              if (a3 != v42)
                swift_arrayInitWithTakeBackToFront(v52, v43);
              v34 = a2;
            }
          }
          v29 = v53;
          if (v53 <= v40)
            break;
          a2 = v34;
          a3 = v39;
        }
        while (v34 > v41);
      }
      goto LABEL_60;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v14 * v52;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v49 = a4 + v16;
    v53 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v19 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        v20 = a3;
        v21 = v50;
        v19(v50, a2, v8);
        v22 = v51;
        v19(v51, a4, v8);
        v23 = sub_10000FBAC((unint64_t *)&qword_100081390, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v24 = dispatch thunk of static Comparable.< infix(_:_:)(v21, v22, v8, v23);
        v25 = (void (*)(char *, uint64_t))v9[1];
        v25(v22, v8);
        v25(v21, v8);
        v26 = v55;
        if ((v24 & 1) != 0)
        {
          v27 = a2 + v52;
          if (v55 < a2 || v55 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v55, a2);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v55 == a2)
              v26 = a2;
            else
              swift_arrayInitWithTakeBackToFront(v55, a2);
          }
        }
        else
        {
          v28 = v54 + v52;
          if (v55 < v54 || v55 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v55, v54);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v55 != v54)
              swift_arrayInitWithTakeBackToFront(v55, v54);
          }
          v54 = v28;
          v27 = a2;
        }
        v55 = v26 + v52;
        a4 = v54;
        if (v54 >= v49)
          break;
        a2 = v27;
      }
      while (v27 < a3);
    }
LABEL_60:
    sub_100021390(&v55, &v54, (uint64_t *)&v53);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100021298(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005150(&qword_100081848);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_100021390(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

char *sub_10002149C(uint64_t a1)
{
  return sub_100021298(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000214B0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;
  char v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_100062600(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = sub_100005150(&qword_100081028);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100021628(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_1000625EC(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for Date(0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v25 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100021790(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Entry;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;
  char v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_100062810(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  Entry = type metadata accessor for UpNextEntry(0);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(Entry - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100021904(_QWORD *a1)
{
  return sub_100030FC0(0, a1[2], 0, a1);
}

uint64_t sub_100021918(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  void (*v87)(_BYTE *, uint64_t);
  int *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  unsigned int (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  _BYTE *v102;
  char v103;
  int *v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  _BYTE *v113;
  unsigned int v114;
  _BYTE *v115;
  _BYTE *v116;
  char v117;
  int *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  id v122;
  id v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  char v131;
  void (*v132)(_BYTE *, uint64_t);
  uint64_t v133;
  double *v134;
  char v135;
  double *v136;
  int v137;
  uint64_t v138;
  double *v139;
  char v140;
  double *v141;
  int v142;
  int *v143;
  _BYTE *v144;
  _BYTE *v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  char v153;
  void (*v154)(_BYTE *, uint64_t);
  int *v155;
  _BYTE *v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  char v165;
  void (*v166)(_BYTE *, uint64_t);
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  char v180;
  _BYTE v181[12];
  int v182;
  _BYTE *v183;
  int *v184;
  uint64_t v185;
  unsigned int (*v186)(uint64_t, uint64_t, uint64_t);
  uint64_t v187;
  _BYTE *v188;
  _BYTE *v189;
  _BYTE *v190;
  _BYTE *v191;
  _BYTE *v192;
  _BYTE *v193;
  _BYTE *v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  _BYTE *v200;
  _BYTE *v201;
  _BYTE *v202;
  _BYTE *v203;
  _BYTE *v204;
  _BYTE *v205;
  _BYTE *v206;
  _BYTE *v207;
  _BYTE *v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE *v213;
  _BYTE *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v197 = v4;
  v198 = v5;
  __chkstk_darwin(v4);
  v195 = &v181[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v196 = sub_100005150(&qword_100081898);
  __chkstk_darwin(v196);
  v199 = &v181[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100005150(&qword_100081038);
  v9 = __chkstk_darwin(v8);
  v204 = &v181[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v9);
  v205 = &v181[-v12];
  __chkstk_darwin(v11);
  v203 = &v181[-v13];
  v211 = type metadata accessor for ArtworkModel(0);
  v209 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v201 = &v181[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v212 = sub_100005150(&qword_1000818A0);
  v15 = __chkstk_darwin(v212);
  v202 = &v181[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v210 = &v181[-v17];
  v18 = sub_100005150(&qword_100081030);
  v19 = __chkstk_darwin(v18);
  v200 = &v181[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = __chkstk_darwin(v19);
  v207 = &v181[-v22];
  v23 = __chkstk_darwin(v21);
  v208 = &v181[-v24];
  v25 = __chkstk_darwin(v23);
  v206 = &v181[-v26];
  v27 = __chkstk_darwin(v25);
  v29 = &v181[-v28];
  __chkstk_darwin(v27);
  v213 = &v181[-v30];
  v31 = type metadata accessor for Date(0);
  v215 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v214 = &v181[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = sub_100005150(&qword_1000814B8);
  v34 = __chkstk_darwin(v33);
  v36 = &v181[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = __chkstk_darwin(v34);
  v194 = &v181[-v38];
  __chkstk_darwin(v37);
  v40 = &v181[-v39];
  v41 = sub_100005150(&qword_100081028);
  v42 = __chkstk_darwin(v41);
  v188 = &v181[-((v43 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v44 = __chkstk_darwin(v42);
  v189 = &v181[-v45];
  v46 = __chkstk_darwin(v44);
  v190 = &v181[-v47];
  v48 = __chkstk_darwin(v46);
  v191 = &v181[-v49];
  v50 = __chkstk_darwin(v48);
  v192 = &v181[-v51];
  v52 = __chkstk_darwin(v50);
  v193 = &v181[-v53];
  v54 = __chkstk_darwin(v52);
  v56 = &v181[-v55];
  v57 = __chkstk_darwin(v54);
  v59 = &v181[-v58];
  __chkstk_darwin(v57);
  v61 = &v181[-v60];
  v62 = a1[1];
  if (*a1 != *a2 || v62 != a2[1])
  {
    v63 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v62);
    v64 = 0;
    if ((v63 & 1) == 0)
      return v64 & 1;
  }
  v65 = a1[2];
  v66 = a1[3];
  if (v65 != a2[2] || v66 != a2[3])
  {
    v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v66);
    v64 = 0;
    if ((v67 & 1) == 0)
      return v64 & 1;
  }
  v68 = a1[4];
  v69 = a1[5];
  if (v68 != a2[4] || v69 != a2[5])
  {
    v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v69);
    v64 = 0;
    if ((v70 & 1) == 0)
      return v64 & 1;
  }
  if (a1[6] != a2[6])
  {
LABEL_11:
    v64 = 0;
    return v64 & 1;
  }
  v72 = a1[7];
  v73 = a1[8];
  if (v72 != a2[7] || v73 != a2[8])
  {
    v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v73);
    v64 = 0;
    if ((v74 & 1) == 0)
      return v64 & 1;
  }
  v75 = a1[9];
  v76 = a1[10];
  if (v75 != a2[9] || v76 != a2[10])
  {
    v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76);
    v64 = 0;
    if ((v77 & 1) == 0)
      return v64 & 1;
  }
  v183 = v36;
  v78 = type metadata accessor for UpNextEntry.Episode(0);
  v185 = v33;
  v79 = (int *)v78;
  v80 = (uint64_t)a1 + *(int *)(v78 + 40);
  v187 = v31;
  sub_10000EFC4(v80, (uint64_t)v61, &qword_100081028);
  v184 = v79;
  sub_10000EFC4((uint64_t)a2 + v79[10], (uint64_t)v59, &qword_100081028);
  v81 = (uint64_t)&v40[*(int *)(v185 + 48)];
  sub_10000EFC4((uint64_t)v61, (uint64_t)v40, &qword_100081028);
  v82 = v187;
  sub_10000EFC4((uint64_t)v59, v81, &qword_100081028);
  v186 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v215 + 48);
  if (v186((uint64_t)v40, 1, v82) != 1)
  {
    sub_10000EFC4((uint64_t)v40, (uint64_t)v56, &qword_100081028);
    if (v186(v81, 1, v82) != 1)
    {
      v85 = v214;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v215 + 32))(v214, v81, v82);
      v86 = sub_10000FBAC(&qword_1000814C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v182 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v85, v82, v86);
      v87 = *(void (**)(_BYTE *, uint64_t))(v215 + 8);
      v87(v85, v82);
      sub_10000F008((uint64_t)v59, &qword_100081028);
      sub_10000F008((uint64_t)v61, &qword_100081028);
      v87(v56, v187);
      sub_10000F008((uint64_t)v40, &qword_100081028);
      if ((v182 & 1) == 0)
        goto LABEL_11;
      goto LABEL_28;
    }
    sub_10000F008((uint64_t)v59, &qword_100081028);
    sub_10000F008((uint64_t)v61, &qword_100081028);
    (*(void (**)(_BYTE *, uint64_t))(v215 + 8))(v56, v82);
LABEL_24:
    v83 = &qword_1000814B8;
    goto LABEL_25;
  }
  sub_10000F008((uint64_t)v59, &qword_100081028);
  sub_10000F008((uint64_t)v61, &qword_100081028);
  if (v186(v81, 1, v187) != 1)
    goto LABEL_24;
  sub_10000F008((uint64_t)v40, &qword_100081028);
LABEL_28:
  v88 = v184;
  v89 = v184[11];
  v90 = (_QWORD *)((char *)a1 + v89);
  v91 = *(_QWORD *)((char *)a1 + v89 + 8);
  v92 = (_QWORD *)((char *)a2 + v89);
  v93 = v92[1];
  if (!v91)
  {
    if (v93)
      goto LABEL_11;
    goto LABEL_35;
  }
  if (!v93)
    goto LABEL_11;
  if (*v90 == *v92 && v91 == v93
    || (v94 = _stringCompareWithSmolCheck(_:_:expecting:)(*v90, v91), v64 = 0, (v94 & 1) != 0))
  {
LABEL_35:
    v95 = v213;
    sub_10000EFC4((uint64_t)a1 + v88[12], (uint64_t)v213, &qword_100081030);
    sub_10000EFC4((uint64_t)a2 + v88[12], (uint64_t)v29, &qword_100081030);
    v96 = v210;
    v97 = (uint64_t)&v210[*(int *)(v212 + 48)];
    sub_10000EFC4((uint64_t)v95, (uint64_t)v210, &qword_100081030);
    sub_10000EFC4((uint64_t)v29, v97, &qword_100081030);
    v98 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
    v99 = v211;
    if (v98((uint64_t)v96, 1, v211) == 1)
    {
      sub_10000F008((uint64_t)v29, &qword_100081030);
      sub_10000F008((uint64_t)v95, &qword_100081030);
      if (v98(v97, 1, v99) == 1)
      {
        sub_10000F008((uint64_t)v96, &qword_100081030);
        goto LABEL_42;
      }
    }
    else
    {
      v100 = v206;
      sub_10000EFC4((uint64_t)v96, (uint64_t)v206, &qword_100081030);
      if (v98(v97, 1, v99) != 1)
      {
        v101 = (uint64_t)v96;
        v102 = v201;
        sub_10000FC78(v97, (uint64_t)v201, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
        v103 = static ArtworkModel.== infix(_:_:)(v100, v102);
        sub_10000EF80((uint64_t)v102, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
        sub_10000F008((uint64_t)v29, &qword_100081030);
        sub_10000F008((uint64_t)v213, &qword_100081030);
        sub_10000EF80((uint64_t)v100, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
        sub_10000F008(v101, &qword_100081030);
        if ((v103 & 1) == 0)
          goto LABEL_11;
LABEL_42:
        v104 = v184;
        v105 = v208;
        sub_10000EFC4((uint64_t)a1 + v184[13], (uint64_t)v208, &qword_100081030);
        v106 = v207;
        sub_10000EFC4((uint64_t)a2 + v104[13], (uint64_t)v207, &qword_100081030);
        v107 = v202;
        v108 = (uint64_t)&v202[*(int *)(v212 + 48)];
        sub_10000EFC4((uint64_t)v105, (uint64_t)v202, &qword_100081030);
        sub_10000EFC4((uint64_t)v106, v108, &qword_100081030);
        if (v98((uint64_t)v107, 1, v99) == 1)
        {
          sub_10000F008((uint64_t)v106, &qword_100081030);
          sub_10000F008((uint64_t)v105, &qword_100081030);
          v109 = v98(v108, 1, v99);
          v111 = (uint64_t)v203;
          v110 = (uint64_t)v204;
          v112 = v205;
          if (v109 == 1)
          {
            sub_10000F008((uint64_t)v107, &qword_100081030);
LABEL_49:
            v118 = v184;
            v119 = v184[14];
            v120 = *(void **)((char *)a1 + v119);
            v121 = *(void **)((char *)a2 + v119);
            if (v120)
            {
              v40 = v199;
              if (!v121)
                goto LABEL_11;
              sub_100023000();
              v122 = v121;
              v123 = v120;
              v124 = static NSObject.== infix(_:_:)();

              if ((v124 & 1) == 0)
                goto LABEL_11;
            }
            else
            {
              v40 = v199;
              if (v121)
                goto LABEL_11;
            }
            sub_10000EFC4((uint64_t)a1 + v118[15], v111, &qword_100081038);
            sub_10000EFC4((uint64_t)a2 + v118[15], (uint64_t)v112, &qword_100081038);
            v125 = (uint64_t)&v40[*(int *)(v196 + 48)];
            sub_10000EFC4(v111, (uint64_t)v40, &qword_100081038);
            sub_10000EFC4((uint64_t)v112, v125, &qword_100081038);
            v126 = v197;
            v127 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v198 + 48);
            if (v127((uint64_t)v40, 1, v197) == 1)
            {
              sub_10000F008((uint64_t)v112, &qword_100081038);
              sub_10000F008(v111, &qword_100081038);
              if (v127(v125, 1, v126) == 1)
              {
                sub_10000F008((uint64_t)v40, &qword_100081038);
                goto LABEL_61;
              }
            }
            else
            {
              sub_10000EFC4((uint64_t)v40, v110, &qword_100081038);
              if (v127(v125, 1, v126) != 1)
              {
                v128 = v198;
                v129 = v195;
                (*(void (**)(_BYTE *, uint64_t, uint64_t))(v198 + 32))(v195, v125, v126);
                v130 = sub_10000FBAC(&qword_1000818A8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
                v131 = dispatch thunk of static Equatable.== infix(_:_:)(v110, v129, v126, v130);
                v132 = *(void (**)(_BYTE *, uint64_t))(v128 + 8);
                v132(v129, v126);
                sub_10000F008((uint64_t)v205, &qword_100081038);
                sub_10000F008(v111, &qword_100081038);
                v132((_BYTE *)v110, v126);
                sub_10000F008((uint64_t)v40, &qword_100081038);
                if ((v131 & 1) == 0)
                  goto LABEL_11;
LABEL_61:
                if (*((unsigned __int8 *)a1 + v118[16]) != *((unsigned __int8 *)a2 + v118[16]))
                  goto LABEL_11;
                v133 = v118[17];
                v134 = (double *)((char *)a1 + v133);
                v135 = *((_BYTE *)a1 + v133 + 8);
                v136 = (double *)((char *)a2 + v133);
                v137 = *((unsigned __int8 *)a2 + v133 + 8);
                if ((v135 & 1) != 0)
                {
                  if (!v137)
                    goto LABEL_11;
                }
                else
                {
                  if (*v134 != *v136)
                    LOBYTE(v137) = 1;
                  if ((v137 & 1) != 0)
                    goto LABEL_11;
                }
                v138 = v118[18];
                v139 = (double *)((char *)a1 + v138);
                v140 = *((_BYTE *)a1 + v138 + 8);
                v141 = (double *)((char *)a2 + v138);
                v142 = *((unsigned __int8 *)a2 + v138 + 8);
                if ((v140 & 1) != 0)
                {
                  if (!v142)
                    goto LABEL_11;
                }
                else
                {
                  if (*v139 != *v141)
                    LOBYTE(v142) = 1;
                  if ((v142 & 1) != 0)
                    goto LABEL_11;
                }
                v143 = v184;
                v144 = v193;
                sub_10000EFC4((uint64_t)a1 + v184[19], (uint64_t)v193, &qword_100081028);
                v145 = v192;
                sub_10000EFC4((uint64_t)a2 + v143[19], (uint64_t)v192, &qword_100081028);
                v146 = v194;
                v147 = (uint64_t)&v194[*(int *)(v185 + 48)];
                sub_10000EFC4((uint64_t)v144, (uint64_t)v194, &qword_100081028);
                sub_10000EFC4((uint64_t)v145, v147, &qword_100081028);
                if (v186((uint64_t)v146, 1, v187) == 1)
                {
                  sub_10000F008((uint64_t)v192, &qword_100081028);
                  sub_10000F008((uint64_t)v193, &qword_100081028);
                  if (v186(v147, 1, v187) == 1)
                  {
                    sub_10000F008((uint64_t)v194, &qword_100081028);
LABEL_81:
                    v155 = v184;
                    v156 = v190;
                    sub_10000EFC4((uint64_t)a1 + v184[20], (uint64_t)v190, &qword_100081028);
                    v157 = v189;
                    sub_10000EFC4((uint64_t)a2 + v155[20], (uint64_t)v189, &qword_100081028);
                    v158 = (uint64_t)v183;
                    v159 = (uint64_t)&v183[*(int *)(v185 + 48)];
                    sub_10000EFC4((uint64_t)v156, (uint64_t)v183, &qword_100081028);
                    sub_10000EFC4((uint64_t)v157, v159, &qword_100081028);
                    if (v186(v158, 1, v187) == 1)
                    {
                      sub_10000F008((uint64_t)v189, &qword_100081028);
                      sub_10000F008((uint64_t)v190, &qword_100081028);
                      if (v186(v159, 1, v187) == 1)
                      {
                        sub_10000F008((uint64_t)v183, &qword_100081028);
                        goto LABEL_88;
                      }
                    }
                    else
                    {
                      sub_10000EFC4((uint64_t)v183, (uint64_t)v188, &qword_100081028);
                      if (v186(v159, 1, v187) != 1)
                      {
                        v161 = v214;
                        v160 = v215;
                        v162 = v187;
                        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v215 + 32))(v214, v159, v187);
                        v163 = sub_10000FBAC(&qword_1000814C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                        v164 = v188;
                        v165 = dispatch thunk of static Equatable.== infix(_:_:)(v188, v161, v162, v163);
                        v166 = *(void (**)(_BYTE *, uint64_t))(v160 + 8);
                        v166(v161, v162);
                        sub_10000F008((uint64_t)v189, &qword_100081028);
                        sub_10000F008((uint64_t)v190, &qword_100081028);
                        v166(v164, v162);
                        sub_10000F008((uint64_t)v183, &qword_100081028);
                        if ((v165 & 1) == 0)
                          goto LABEL_11;
LABEL_88:
                        v167 = v184[21];
                        v168 = (char *)a1 + v167;
                        v169 = *(_QWORD *)((char *)a1 + v167);
                        v170 = (_QWORD *)((char *)a2 + v167);
                        v171 = *v170;
                        if (v169)
                        {
                          if (!v171)
                            goto LABEL_11;
                          v172 = *((_QWORD *)v168 + 1);
                          v173 = *((_QWORD *)v168 + 2);
                          v174 = v170[1];
                          v175 = v170[2];
                          sub_1000093E0(v169, v172, v173);
                          sub_1000093E0(v169, v172, v173);
                          v215 = v174;
                          sub_1000093E0(v171, v174, v175);
                          IntentParameter.wrappedValue.getter(&v216);
                          v176 = v216;
                          v177 = v217;
                          IntentParameter.wrappedValue.getter(&v216);
                          v178 = v217;
                          if (v176 == v216 && v177 == v217)
                          {
                            swift_release(v173);
                            swift_release(v172);
                            swift_release(v169);
                            swift_release(v175);
                            swift_release(v215);
                            swift_release(v171);
                            swift_bridgeObjectRelease_n(v177, 2);
                            sub_100022E98(v169, v172, v173);
                            v179 = v184;
                          }
                          else
                          {
                            v180 = _stringCompareWithSmolCheck(_:_:expecting:)(v176, v177);
                            swift_release(v173);
                            swift_release(v172);
                            swift_release(v169);
                            swift_release(v175);
                            swift_release(v215);
                            swift_release(v171);
                            swift_bridgeObjectRelease(v177);
                            swift_bridgeObjectRelease(v178);
                            sub_100022E98(v169, v172, v173);
                            v64 = 0;
                            v179 = v184;
                            if ((v180 & 1) == 0)
                              return v64 & 1;
                          }
                        }
                        else
                        {
                          v179 = v184;
                          if (v171)
                            goto LABEL_11;
                        }
                        v64 = sub_10002D2DC((char *)a1 + v179[22], (char *)a2 + v179[22]);
                        return v64 & 1;
                      }
                      sub_10000F008((uint64_t)v189, &qword_100081028);
                      sub_10000F008((uint64_t)v190, &qword_100081028);
                      (*(void (**)(_BYTE *, uint64_t))(v215 + 8))(v188, v187);
                    }
                    v83 = &qword_1000814B8;
                    v84 = v183;
LABEL_26:
                    sub_10000F008((uint64_t)v84, v83);
                    goto LABEL_11;
                  }
                }
                else
                {
                  sub_10000EFC4((uint64_t)v194, (uint64_t)v191, &qword_100081028);
                  if (v186(v147, 1, v187) != 1)
                  {
                    v149 = v214;
                    v148 = v215;
                    v150 = v187;
                    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v215 + 32))(v214, v147, v187);
                    v151 = sub_10000FBAC(&qword_1000814C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                    v152 = v191;
                    v153 = dispatch thunk of static Equatable.== infix(_:_:)(v191, v149, v150, v151);
                    v154 = *(void (**)(_BYTE *, uint64_t))(v148 + 8);
                    v154(v149, v150);
                    sub_10000F008((uint64_t)v192, &qword_100081028);
                    sub_10000F008((uint64_t)v193, &qword_100081028);
                    v154(v152, v150);
                    sub_10000F008((uint64_t)v194, &qword_100081028);
                    if ((v153 & 1) == 0)
                      goto LABEL_11;
                    goto LABEL_81;
                  }
                  sub_10000F008((uint64_t)v192, &qword_100081028);
                  sub_10000F008((uint64_t)v193, &qword_100081028);
                  (*(void (**)(_BYTE *, uint64_t))(v215 + 8))(v191, v187);
                }
                v83 = &qword_1000814B8;
                v84 = v194;
                goto LABEL_26;
              }
              sub_10000F008((uint64_t)v112, &qword_100081038);
              sub_10000F008(v111, &qword_100081038);
              (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v110, v126);
            }
            v83 = &qword_100081898;
LABEL_25:
            v84 = v40;
            goto LABEL_26;
          }
        }
        else
        {
          v113 = v200;
          sub_10000EFC4((uint64_t)v107, (uint64_t)v200, &qword_100081030);
          v114 = v98(v108, 1, v99);
          v111 = (uint64_t)v203;
          v115 = v204;
          v112 = v205;
          if (v114 != 1)
          {
            v116 = v201;
            sub_10000FC78(v108, (uint64_t)v201, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
            v117 = static ArtworkModel.== infix(_:_:)(v113, v116);
            sub_10000EF80((uint64_t)v116, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
            sub_10000F008((uint64_t)v207, &qword_100081030);
            sub_10000F008((uint64_t)v208, &qword_100081030);
            v110 = (uint64_t)v115;
            sub_10000EF80((uint64_t)v113, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
            sub_10000F008((uint64_t)v107, &qword_100081030);
            if ((v117 & 1) == 0)
              goto LABEL_11;
            goto LABEL_49;
          }
          sub_10000F008((uint64_t)v207, &qword_100081030);
          sub_10000F008((uint64_t)v208, &qword_100081030);
          sub_10000EF80((uint64_t)v113, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
        }
        v83 = &qword_1000818A0;
        v84 = v107;
        goto LABEL_26;
      }
      sub_10000F008((uint64_t)v29, &qword_100081030);
      sub_10000F008((uint64_t)v213, &qword_100081030);
      sub_10000EF80((uint64_t)v100, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    }
    v83 = &qword_1000818A0;
    v84 = v96;
    goto LABEL_26;
  }
  return v64 & 1;
}

uint64_t sub_100022DC0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100022DE4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100022DF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100022E14()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t sub_100022E44(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100022E54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005150(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_100022E98(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_release(result);
    swift_release(a2);
    return swift_release(a3);
  }
  return result;
}

uint64_t sub_100022ED0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100022EE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100022F08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10001F614(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100022F24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081870;
  if (!qword_100081870)
  {
    v1 = sub_10000950C(&qword_100081868);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100081870);
  }
  return result;
}

uint64_t sub_100022F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001911C(a1, a2);
}

uint64_t sub_100022F98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10001FBA4(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100022FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetPredictedPlayState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022FF8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  return sub_10001FD94(a1, a2, a3, *(_QWORD *)(v3 + 16), *(unint64_t **)(v3 + 24));
}

unint64_t sub_100023000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000818B0;
  if (!qword_1000818B0)
  {
    v1 = objc_opt_self(UIImage);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000818B0);
  }
  return result;
}

uint64_t sub_10002303C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100022F08(a1);
}

char *sub_100023058(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int *Entry;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = (char *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (char *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[3];
    *(_QWORD *)(a1 + 24) = v8;
    Entry = (int *)type metadata accessor for UpNextEntry(0);
    v10 = Entry[7];
    v11 = &v4[v10];
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for UUID(0);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v14(v11, v12, v13);
    v15 = Entry[8];
    v16 = *(void **)((char *)a2 + v15);
    *(_QWORD *)&v4[v15] = v16;
    v17 = Entry[9];
    v18 = &v4[v17];
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for Date(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    v23 = v16;
    if (v22(v19, 1, v20))
    {
      v24 = sub_100005150(&qword_100081028);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(&v4[Entry[10]], (uint64_t)a2 + Entry[10], v20);
    }
    else
    {
      v26 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v26(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      v26(&v4[Entry[10]], (char *)a2 + Entry[10], v20);
    }
    v27 = Entry[11];
    v28 = &v4[v27];
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for TimelineEntryRelevance(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_100005150(&qword_100081680);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    *(_QWORD *)&v4[*(int *)(a3 + 20)] = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return v4;
}

uint64_t sub_10002326C(uint64_t a1)
{
  int *Entry;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v3 = a1 + Entry[7];
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  v5 = a1 + Entry[9];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (!v8)
    v9(v5, v6);
  v9(a1 + Entry[10], v6);
  v10 = a1 + Entry[11];
  v11 = type metadata accessor for TimelineEntryRelevance(0);
  v12 = *(_QWORD *)(v11 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  return result;
}

uint64_t sub_100023384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *Entry;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  void (*v24)(void *, const void *, uint64_t);
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v9 = Entry[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v13(v10, v11, v12);
  v14 = Entry[8];
  v15 = *(void **)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  v16 = Entry[9];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v15;
  if (v21(v18, 1, v19))
  {
    v23 = sub_100005150(&qword_100081028);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1 + Entry[10], a2 + Entry[10], v19);
  }
  else
  {
    v24 = *(void (**)(void *, const void *, uint64_t))(v20 + 16);
    v24(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    v24((void *)(a1 + Entry[10]), (const void *)(a2 + Entry[10]), v19);
  }
  v25 = Entry[11];
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  v28 = type metadata accessor for TimelineEntryRelevance(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = sub_100005150(&qword_100081680);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10002356C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *Entry;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v11 = Entry[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = Entry[8];
  v16 = *(void **)(a1 + v15);
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = v17;

  v19 = Entry[9];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100005150(&qword_100081028);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 24))(a1 + Entry[10], a2 + Entry[10], v22);
  v28 = Entry[11];
  v29 = (void *)(a1 + v28);
  v30 = (void *)(a2 + v28);
  v31 = type metadata accessor for TimelineEntryRelevance(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 24))(v29, v30, v31);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v36 = sub_100005150(&qword_100081680);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v32 + 16))(v29, v30, v31);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
LABEL_13:
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000237F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *Entry;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void *, const void *, uint64_t);
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v7 = Entry[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + Entry[8]) = *(_QWORD *)(a2 + Entry[8]);
  v11 = Entry[9];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100005150(&qword_100081028);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(a1 + Entry[10], a2 + Entry[10], v14);
  }
  else
  {
    v17 = *(void (**)(void *, const void *, uint64_t))(v15 + 32);
    v17(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    v17((void *)(a1 + Entry[10]), (const void *)(a2 + Entry[10]), v14);
  }
  v18 = Entry[11];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = type metadata accessor for TimelineEntryRelevance(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_100005150(&qword_100081680);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000239C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *Entry;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v10 = Entry[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = Entry[8];
  v15 = *(void **)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);

  v16 = Entry[9];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    v24 = sub_100005150(&qword_100081028);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))(a1 + Entry[10], a2 + Entry[10], v19);
  v25 = Entry[11];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = type metadata accessor for TimelineEntryRelevance(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 40))(v26, v27, v28);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v26, v28);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v33 = sub_100005150(&qword_100081680);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v29 + 32))(v26, v27, v28);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_13:
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100023C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100023C44);
}

uint64_t sub_100023C44(uint64_t a1, uint64_t a2)
{
  uint64_t Entry;

  Entry = type metadata accessor for UpNextEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Entry - 8) + 48))(a1, a2, Entry);
}

uint64_t sub_100023C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100023C8C);
}

uint64_t sub_100023C8C(uint64_t a1, uint64_t a2)
{
  uint64_t Entry;

  Entry = type metadata accessor for UpNextEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Entry - 8) + 56))(a1, a2, a2, Entry);
}

uint64_t type metadata accessor for EpisodeListWidgetLarge(uint64_t a1)
{
  uint64_t result;

  result = qword_100081910;
  if (!qword_100081910)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeListWidgetLarge);
  return result;
}

uint64_t sub_100023D08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UpNextEntry(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100023D7C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071D0C, 1);
}

uint64_t sub_100023D8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v47 = a2;
  v3 = type metadata accessor for Color.RGBColorSpace(0);
  *(_QWORD *)&v45 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005150(&qword_100081950);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100005150(&qword_100081958);
  v9 = __chkstk_darwin(v46);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v45 - v12;
  v14 = type metadata accessor for EpisodeListWidgetLargeHeader(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v15);
  v20 = (char *)&v45 - v19;
  v21 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v21 + 16))
  {
    v22 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UpNextEntry.Episode(0) - 8) + 80);
    sub_10000EF3C(v21 + ((v22 + 32) & ~v22), (uint64_t)v20, type metadata accessor for UpNextEntry.Episode);
    v23 = *(_BYTE *)(a1 + 16);
    v24 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for EpisodeListWidgetLarge(0) + 20));
    v20[*(int *)(v14 + 20)] = v23;
    v25 = &v20[*(int *)(v14 + 24)];
    *(_QWORD *)v25 = v24;
    *((_QWORD *)v25 + 1) = v24;
    *((_QWORD *)v25 + 2) = 0x4028000000000000;
    *((_QWORD *)v25 + 3) = v24;
    *(_QWORD *)v8 = static HorizontalAlignment.leading.getter();
    *((_QWORD *)v8 + 1) = 0;
    v8[16] = 1;
    v26 = sub_100005150(&qword_100081960);
    sub_100024168((_QWORD *)a1, &v8[*(int *)(v26 + 44)]);
    v27 = sub_100005150(&qword_100081968);
    v28 = swift_allocObject(v27, 48, 7);
    *(_OWORD *)(v28 + 16) = xmmword_10006DBB0;
    v29 = enum case for Color.RGBColorSpace.sRGB(_:);
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 104);
    v30(v5, enum case for Color.RGBColorSpace.sRGB(_:), v3);
    *(_QWORD *)(v28 + 32) = Color.init(_:white:opacity:)(v5, 0.0, 0.14);
    v30(v5, v29, v3);
    v31 = Color.init(_:white:opacity:)(v5, 0.0, 0.0);
    *(_QWORD *)(v28 + 40) = v31;
    v48 = v28;
    specialized Array._endMutation()(v31);
    v32 = Gradient.init(colors:)(v48);
    v33 = static UnitPoint.top.getter();
    v35 = v34;
    v36 = static UnitPoint.bottom.getter();
    LinearGradient.init(gradient:startPoint:endPoint:)(&v48, v32, v33, v35, v36, v37);
    v38 = v48;
    v45 = v49;
    v39 = v50;
    v40 = v51;
    KeyPath = swift_getKeyPath(&unk_10006DC58);
    sub_10000EFC4((uint64_t)v8, (uint64_t)v11, &qword_100081950);
    v42 = &v11[*(int *)(v46 + 36)];
    *(_QWORD *)v42 = v38;
    *(_OWORD *)(v42 + 8) = v45;
    *((_QWORD *)v42 + 3) = v39;
    *((_QWORD *)v42 + 4) = v40;
    *((_QWORD *)v42 + 5) = KeyPath;
    v42[48] = 0;
    sub_10000F008((uint64_t)v8, &qword_100081950);
    sub_10000EEF8((uint64_t)v11, (uint64_t)v13, &qword_100081958);
    sub_10000EF3C((uint64_t)v20, (uint64_t)v17, type metadata accessor for EpisodeListWidgetLargeHeader);
    sub_10000EFC4((uint64_t)v13, (uint64_t)v11, &qword_100081958);
    v43 = v47;
    sub_10000EF3C((uint64_t)v17, v47, type metadata accessor for EpisodeListWidgetLargeHeader);
    v44 = sub_100005150(&qword_100081970);
    sub_10000EFC4((uint64_t)v11, v43 + *(int *)(v44 + 48), &qword_100081958);
    sub_10000F008((uint64_t)v13, &qword_100081958);
    sub_10002487C((uint64_t)v20);
    sub_10000F008((uint64_t)v11, &qword_100081958);
    return sub_10002487C((uint64_t)v17);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100024168@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  __n128 v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  int *v76;
  char *v77;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];

  v80 = a2;
  v88 = sub_100005150(&qword_100081978);
  __chkstk_darwin(v88);
  v86 = (uint64_t *)((char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100005150(&qword_100081980);
  __chkstk_darwin(v4);
  v83 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100005150(&qword_100081988);
  __chkstk_darwin(v85);
  v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100005150(&qword_100081990);
  __chkstk_darwin(v89);
  v87 = (uint64_t)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100005150(&qword_100081998);
  __chkstk_darwin(v92);
  v90 = (uint64_t)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005150(&qword_1000819A0);
  v94 = *(_QWORD *)(v10 - 8);
  v95 = v10;
  __chkstk_darwin(v10);
  v91 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100005150(&qword_1000819A8);
  v12 = __chkstk_darwin(v93);
  v82 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v81 = (char *)&v80 - v14;
  v84 = a1;
  v15 = a1[1];
  v96[0] = *a1;
  v96[1] = v15;
  v16 = sub_1000248B8();
  swift_bridgeObjectRetain(v15);
  v17 = Text.init<A>(_:)(v96, &type metadata for String, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = static Font.caption2.getter();
  v25 = Font.bold()();
  swift_release(v24);
  v26 = Text.font(_:)(v25, v17, v19, v23, v21);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  swift_release(v25);
  LOBYTE(v25) = v30 & 1;
  sub_10000EEE8(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  v33 = enum case for Text.Case.uppercase(_:);
  v34 = type metadata accessor for Text.Case(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (uint64_t)v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 104))(v83, v33, v34);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v34);
  KeyPath = swift_getKeyPath(&unk_10006DC80);
  v38 = v86;
  sub_10000EFC4(v36, (uint64_t)v86 + *(int *)(v88 + 28), &qword_100081980);
  *v38 = KeyPath;
  sub_10000EFC4((uint64_t)v38, (uint64_t)&v7[*(int *)(v85 + 36)], &qword_100081978);
  *(_QWORD *)v7 = v26;
  *((_QWORD *)v7 + 1) = v28;
  v7[16] = v25;
  *((_QWORD *)v7 + 3) = v32;
  sub_100024C4C(v26, v28, v25);
  swift_bridgeObjectRetain(v32);
  sub_10000F008((uint64_t)v38, &qword_100081978);
  sub_10000F008(v36, &qword_100081980);
  v39 = v28;
  v40 = (uint64_t)v82;
  sub_10000EEE8(v26, v39, v25);
  v41 = v32;
  v42 = (uint64_t)v81;
  swift_bridgeObjectRelease(v41);
  v43 = swift_getKeyPath(&unk_10006DCB0);
  v44 = v87;
  sub_10000EFC4((uint64_t)v7, v87, &qword_100081988);
  v45 = v44 + *(int *)(v89 + 36);
  *(_QWORD *)v45 = v43;
  *(_QWORD *)(v45 + 8) = 1;
  *(_BYTE *)(v45 + 16) = 0;
  v46 = sub_10000F008((uint64_t)v7, &qword_100081988);
  LOBYTE(v43) = static Edge.Set.horizontal.getter(v46);
  v47 = type metadata accessor for EpisodeListWidgetLarge(0);
  v48 = v84;
  v49 = *(_QWORD *)((char *)v84 + *(int *)(v47 + 20));
  v50.n128_u64[0] = v49;
  v51 = EdgeInsets.init(_all:)(v47, v50);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  v58 = v90;
  sub_10000EFC4(v44, v90, &qword_100081990);
  v59 = v92;
  v60 = v58 + *(int *)(v92 + 36);
  *(_BYTE *)v60 = v43;
  *(double *)(v60 + 8) = v51;
  *(_QWORD *)(v60 + 16) = v53;
  *(_QWORD *)(v60 + 24) = v55;
  *(_QWORD *)(v60 + 32) = v57;
  *(_BYTE *)(v60 + 40) = 0;
  sub_10000F008(v44, &qword_100081990);
  v61 = sub_100024C64();
  v62 = v91;
  View.unredacted()(v59, v61);
  sub_10000F008(v58, &qword_100081998);
  v63 = swift_getKeyPath(&unk_10006DC58);
  v65 = v94;
  v64 = v95;
  (*(void (**)(uint64_t, char *, uint64_t))(v94 + 16))(v40, v62, v95);
  v66 = v40 + *(int *)(v93 + 36);
  *(_QWORD *)v66 = v63;
  *(_BYTE *)(v66 + 8) = 0;
  (*(void (**)(char *, uint64_t))(v65 + 8))(v62, v64);
  sub_10000EEF8(v40, v42, &qword_1000819A8);
  v67 = v48[3];
  v68 = *(_QWORD *)(v67 + 16);
  if (!v68)
  {
    __break(1u);
LABEL_9:
    swift_bridgeObjectRelease(v67);
    v79 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UpNextEntry.Episode(0) - 8) + 80);
    v74 = sub_1000249C0(v67, v67 + ((v79 + 32) & ~v79), 1, (2 * v68) | 1);
    goto LABEL_7;
  }
  v69 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v70 = swift_bridgeObjectRetain(v67);
  v71 = swift_unknownObjectRetain_n(v70, 2);
  v72 = (_QWORD *)swift_dynamicCastClass(v71, v69);
  if (!v72)
  {
    swift_bridgeObjectRelease(v67);
    v72 = _swiftEmptyArrayStorage;
  }
  v73 = v72[2];
  swift_release(v72);
  if (v73 != v68 - 1)
    goto LABEL_9;
  v74 = (_QWORD *)swift_dynamicCastClass(v67, v69);
  if (!v74)
  {
    swift_bridgeObjectRelease(v67);
    v74 = _swiftEmptyArrayStorage;
  }
LABEL_7:
  swift_bridgeObjectRelease(v67);
  sub_10000EFC4(v42, v40, &qword_1000819A8);
  v75 = v80;
  *v80 = 0x4026000000000000;
  v76 = (int *)sub_100005150(&qword_1000819E8);
  sub_10000EFC4(v40, (uint64_t)v75 + v76[12], &qword_1000819A8);
  *(_QWORD *)((char *)v75 + v76[16]) = 0x4020000000000000;
  v77 = (char *)v75 + v76[20];
  *(_QWORD *)v77 = v74;
  *((_QWORD *)v77 + 1) = 3;
  v77[16] = 2;
  *((_QWORD *)v77 + 3) = 0x4028000000000000;
  *((_QWORD *)v77 + 4) = v49;
  *(_QWORD *)((char *)v75 + v76[24]) = v49;
  swift_bridgeObjectRetain(v74);
  sub_10000F008(v42, &qword_1000819A8);
  swift_bridgeObjectRelease(v74);
  return sub_10000F008(v40, &qword_1000819A8);
}

uint64_t sub_10002482C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0x3FD8000000000000;
  v3 = sub_100005150(&qword_100081948);
  return sub_100023D8C(v1, a1 + *(int *)(v3 + 44));
}

uint64_t sub_10002487C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EpisodeListWidgetLargeHeader(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000248B8()
{
  unint64_t result;

  result = qword_1000819B0;
  if (!qword_1000819B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000819B0);
  }
  return result;
}

int64_t *sub_1000248FC(int64_t *result, int64_t a2)
{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  int64_t *v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (int64_t *)&_swiftEmptyArrayStorage;
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v6 = (int64_t *)&_swiftEmptyArrayStorage;
    }
    else
    {
      v5 = sub_100005150(&qword_100081A20);
      v6 = (int64_t *)swift_allocObject(v5, 8 * v2 + 32, 7);
      v7 = j__malloc_size(v6);
      v8 = v7 - 32;
      if (v7 < 32)
        v8 = v7 - 25;
      v6[2] = v2;
      v6[3] = 2 * (v8 >> 3);
    }
    result = sub_100024E78(v9, v6 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v6;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000249C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_100005150(&qword_1000819F0);
    v9 = *(_QWORD *)(type metadata accessor for UpNextEntry.Episode(0) - 8);
    v10 = *(_QWORD *)(v9 + 72);
    v11 = *(unsigned __int8 *)(v9 + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = (_QWORD *)swift_allocObject(v8, v12 + v10 * v5, v11 | 7);
    v14 = j__malloc_size(v13);
    if (!v10)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v14 - v12 == 0x8000000000000000 && v10 == -1)
      goto LABEL_23;
    v13[2] = v5;
    v13[3] = 2 * ((uint64_t)(v14 - v12) / v10);
    if (v4 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
  v13 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_10:
  if (v5 < 0)
  {
LABEL_24:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_25;
  }
  v16 = *(_QWORD *)(type metadata accessor for UpNextEntry.Episode(0) - 8);
  v17 = (char *)v13 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v18 = *(_QWORD *)(v16 + 72);
  v19 = a2 + v18 * a3;
  v20 = v18 * v5;
  v21 = &v17[v20];
  v22 = v19 + v20;
  if (v19 >= (unint64_t)v21 || (unint64_t)v17 >= v22)
  {
    swift_arrayInitWithCopy(v17);
    return v13;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100024B88()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_100024BA8()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_100024BC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100005150(&qword_100081980);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EFC4(a1, (uint64_t)v4, &qword_100081980);
  return EnvironmentValues.textCase.setter(v4);
}

uint64_t sub_100024C4C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

unint64_t sub_100024C64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000819B8;
  if (!qword_1000819B8)
  {
    v1 = sub_10000950C(&qword_100081998);
    sub_100024CD0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000819B8);
  }
  return result;
}

unint64_t sub_100024CD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000819C0;
  if (!qword_1000819C0)
  {
    v1 = sub_10000950C(&qword_100081990);
    sub_100024D54();
    sub_10000EEA8(&qword_1000819D8, &qword_1000819E0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000819C0);
  }
  return result;
}

unint64_t sub_100024D54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000819C8;
  if (!qword_1000819C8)
  {
    v1 = sub_10000950C(&qword_100081988);
    sub_10000EEA8(&qword_1000819D0, &qword_100081978, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000819C8);
  }
  return result;
}

unint64_t sub_100024DDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000819F8;
  if (!qword_1000819F8)
  {
    v1 = sub_10000950C(&qword_100081948);
    sub_10000EEA8(&qword_100081A00, &qword_100081A08, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_10000EEA8(&qword_100081A10, &qword_100081A18, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000819F8);
  }
  return result;
}

int64_t *sub_100024E78(int64_t *result, int64_t *a2, uint64_t a3, int64_t a4, int64_t a5)
{
  int64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  int64_t *v17;
  int64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  v6 = a5 - a4;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    if (a3 == 1)
      goto LABEL_7;
    if (v5 == a5)
    {
      a3 = 1;
      v5 = a5;
      goto LABEL_7;
    }
    v7 = v6 - 2;
    if (v6 - 2 >= (unint64_t)(a3 - 2))
      v7 = a3 - 2;
    if (v7 >= ~a4 + a5)
      v7 = ~a4 + a5;
    v8 = v7 + 1;
    if (v8 >= 5)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v13 = v5 + v8 - v11;
      v10 = &a2[v8 - v11];
      v9 = v12 + 2;
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_10006DBC0);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 2;
      v10 = a2;
    }
    v17 = v10 + 1;
    while (v5 < a5)
    {
      v18 = v5 + 1;
      *v17 = v5;
      if (a3 == v9)
      {
        ++v5;
        goto LABEL_7;
      }
      ++v9;
      ++v17;
      ++v5;
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100024FB8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id *v49;
  int v50;
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  int EnumCaseMultiPayload;
  uint64_t v164;
  uint64_t v165;
  char *__dst;
  void *__dsta;
  _QWORD *v169;
  _QWORD *v170;
  unsigned int (*v172)(char *, uint64_t, uint64_t);
  int *v173;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v10 = a2[6];
    v9 = a2[7];
    a1[6] = v10;
    a1[7] = v9;
    v12 = a2[8];
    v11 = a2[9];
    a1[8] = v12;
    a1[9] = v11;
    v13 = a2[10];
    a1[10] = v13;
    v173 = (int *)type metadata accessor for UpNextEntry.Episode(0);
    v14 = v173[10];
    __dst = (char *)a1 + v14;
    v169 = a1;
    v170 = a2;
    v15 = (char *)a2 + v14;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_retain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v172 = v18;
    if (v18(v15, 1, v16))
    {
      v19 = sub_100005150(&qword_100081028);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v22 = v173[11];
    v21 = v169;
    v23 = (_QWORD *)((char *)v169 + v22);
    v24 = (_QWORD *)((char *)v170 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v173[12];
    v27 = (_QWORD *)((char *)v169 + v26);
    v28 = (_QWORD *)((char *)v170 + v26);
    v29 = (int *)type metadata accessor for ArtworkModel(0);
    v30 = *((_QWORD *)v29 - 1);
    v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
    swift_bridgeObjectRetain(v25);
    if (v31(v28, 1, v29))
    {
      v32 = sub_100005150(&qword_100081030);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      __dsta = (void *)v16;
      v33 = v28[1];
      *v27 = *v28;
      v27[1] = v33;
      v34 = *((unsigned __int8 *)v28 + 32);
      swift_bridgeObjectRetain(v33);
      if (v34 == 255)
      {
        *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
        *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
      }
      else
      {
        v35 = v28[2];
        v36 = v28[3];
        sub_100005190(v35, v36, v34);
        v27[2] = v35;
        v27[3] = v36;
        *((_BYTE *)v27 + 32) = v34;
      }
      *(_OWORD *)(v27 + 5) = *(_OWORD *)(v28 + 5);
      v37 = (id *)(v28 + 7);
      v38 = *((unsigned __int8 *)v28 + 64);
      if (v38 == 255)
      {
        v27[7] = *v37;
        *((_BYTE *)v27 + 64) = *((_BYTE *)v28 + 64);
      }
      else
      {
        v39 = *v37;
        sub_1000051A8(*v37, *((_BYTE *)v28 + 64));
        v27[7] = v39;
        *((_BYTE *)v27 + 64) = v38;
      }
      v40 = (id *)(v28 + 9);
      v41 = *((unsigned __int8 *)v28 + 80);
      if (v41 == 255)
      {
        v27[9] = *v40;
        *((_BYTE *)v27 + 80) = *((_BYTE *)v28 + 80);
      }
      else
      {
        v42 = *v40;
        sub_1000051A8(*v40, *((_BYTE *)v28 + 80));
        v27[9] = v42;
        *((_BYTE *)v27 + 80) = v41;
      }
      v43 = (id *)(v28 + 11);
      v44 = *((unsigned __int8 *)v28 + 96);
      if (v44 == 255)
      {
        v27[11] = *v43;
        *((_BYTE *)v27 + 96) = *((_BYTE *)v28 + 96);
      }
      else
      {
        v45 = *v43;
        sub_1000051A8(*v43, *((_BYTE *)v28 + 96));
        v27[11] = v45;
        *((_BYTE *)v27 + 96) = v44;
      }
      v46 = (id *)(v28 + 13);
      v47 = *((unsigned __int8 *)v28 + 112);
      if (v47 == 255)
      {
        v27[13] = *v46;
        *((_BYTE *)v27 + 112) = *((_BYTE *)v28 + 112);
      }
      else
      {
        v48 = *v46;
        sub_1000051A8(*v46, *((_BYTE *)v28 + 112));
        v27[13] = v48;
        *((_BYTE *)v27 + 112) = v47;
      }
      v49 = (id *)(v28 + 15);
      v50 = *((unsigned __int8 *)v28 + 128);
      if (v50 == 255)
      {
        v27[15] = *v49;
        *((_BYTE *)v27 + 128) = *((_BYTE *)v28 + 128);
      }
      else
      {
        v51 = *v49;
        sub_1000051A8(*v49, *((_BYTE *)v28 + 128));
        v27[15] = v51;
        *((_BYTE *)v27 + 128) = v50;
      }
      v16 = (uint64_t)__dsta;
      *((_BYTE *)v27 + 129) = *((_BYTE *)v28 + 129);
      v52 = v29[11];
      v53 = (char *)v27 + v52;
      v54 = (char *)v28 + v52;
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      v56 = v29[12];
      v57 = (_QWORD *)((char *)v27 + v56);
      v58 = (_QWORD *)((char *)v28 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
      *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
      *((_BYTE *)v27 + v29[15]) = *((_BYTE *)v28 + v29[15]);
      v60 = v29[16];
      v61 = (_QWORD *)((char *)v27 + v60);
      v62 = (_QWORD *)((char *)v28 + v60);
      v63 = v62[1];
      *v61 = *v62;
      v61[1] = v63;
      v64 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      v64(v27, 0, 1, v29);
    }
    v65 = v173[13];
    v66 = (_QWORD *)((char *)v169 + v65);
    v67 = (_QWORD *)((char *)v170 + v65);
    if (v31((_QWORD *)((char *)v170 + v65), 1, v29))
    {
      v68 = sub_100005150(&qword_100081030);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = v16;
      v70 = v67[1];
      *v66 = *v67;
      v66[1] = v70;
      v71 = *((unsigned __int8 *)v67 + 32);
      swift_bridgeObjectRetain(v70);
      if (v71 == 255)
      {
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        *((_BYTE *)v66 + 32) = *((_BYTE *)v67 + 32);
      }
      else
      {
        v72 = v67[2];
        v73 = v67[3];
        sub_100005190(v72, v73, v71);
        v66[2] = v72;
        v66[3] = v73;
        *((_BYTE *)v66 + 32) = v71;
      }
      *(_OWORD *)(v66 + 5) = *(_OWORD *)(v67 + 5);
      v74 = (id *)(v67 + 7);
      v75 = *((unsigned __int8 *)v67 + 64);
      if (v75 == 255)
      {
        v66[7] = *v74;
        *((_BYTE *)v66 + 64) = *((_BYTE *)v67 + 64);
      }
      else
      {
        v76 = *v74;
        sub_1000051A8(*v74, *((_BYTE *)v67 + 64));
        v66[7] = v76;
        *((_BYTE *)v66 + 64) = v75;
      }
      v77 = (id *)(v67 + 9);
      v78 = *((unsigned __int8 *)v67 + 80);
      if (v78 == 255)
      {
        v66[9] = *v77;
        *((_BYTE *)v66 + 80) = *((_BYTE *)v67 + 80);
      }
      else
      {
        v79 = *v77;
        sub_1000051A8(*v77, *((_BYTE *)v67 + 80));
        v66[9] = v79;
        *((_BYTE *)v66 + 80) = v78;
      }
      v80 = (id *)(v67 + 11);
      v81 = *((unsigned __int8 *)v67 + 96);
      if (v81 == 255)
      {
        v66[11] = *v80;
        *((_BYTE *)v66 + 96) = *((_BYTE *)v67 + 96);
      }
      else
      {
        v82 = *v80;
        sub_1000051A8(*v80, *((_BYTE *)v67 + 96));
        v66[11] = v82;
        *((_BYTE *)v66 + 96) = v81;
      }
      v83 = (id *)(v67 + 13);
      v84 = *((unsigned __int8 *)v67 + 112);
      if (v84 == 255)
      {
        v66[13] = *v83;
        *((_BYTE *)v66 + 112) = *((_BYTE *)v67 + 112);
      }
      else
      {
        v85 = *v83;
        sub_1000051A8(*v83, *((_BYTE *)v67 + 112));
        v66[13] = v85;
        *((_BYTE *)v66 + 112) = v84;
      }
      v86 = (id *)(v67 + 15);
      v87 = *((unsigned __int8 *)v67 + 128);
      if (v87 == 255)
      {
        v66[15] = *v86;
        *((_BYTE *)v66 + 128) = *((_BYTE *)v67 + 128);
      }
      else
      {
        v88 = *v86;
        sub_1000051A8(*v86, *((_BYTE *)v67 + 128));
        v66[15] = v88;
        *((_BYTE *)v66 + 128) = v87;
      }
      v16 = v69;
      *((_BYTE *)v66 + 129) = *((_BYTE *)v67 + 129);
      v89 = v29[11];
      v90 = (char *)v66 + v89;
      v91 = (char *)v67 + v89;
      v92 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = v29[12];
      v94 = (_QWORD *)((char *)v66 + v93);
      v95 = (_QWORD *)((char *)v67 + v93);
      v96 = v95[1];
      *v94 = *v95;
      v94[1] = v96;
      *((_BYTE *)v66 + v29[13]) = *((_BYTE *)v67 + v29[13]);
      *((_BYTE *)v66 + v29[14]) = *((_BYTE *)v67 + v29[14]);
      *((_BYTE *)v66 + v29[15]) = *((_BYTE *)v67 + v29[15]);
      v97 = v29[16];
      v98 = (_QWORD *)((char *)v66 + v97);
      v99 = (_QWORD *)((char *)v67 + v97);
      v100 = v99[1];
      *v98 = *v99;
      v98[1] = v100;
      v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v100);
      v101(v66, 0, 1, v29);
    }
    v102 = v173[14];
    v103 = *(void **)((char *)v170 + v102);
    *(_QWORD *)((char *)v169 + v102) = v103;
    v104 = v173[15];
    v105 = (char *)v169 + v104;
    v106 = (char *)v170 + v104;
    v107 = type metadata accessor for URL(0);
    v108 = *(_QWORD *)(v107 - 8);
    v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
    v110 = v103;
    if (v109(v106, 1, v107))
    {
      v111 = sub_100005150(&qword_100081038);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    *((_BYTE *)v169 + v173[16]) = *((_BYTE *)v170 + v173[16]);
    v112 = v173[17];
    v113 = (char *)v169 + v112;
    v114 = (char *)v170 + v112;
    *(_QWORD *)v113 = *(_QWORD *)v114;
    v113[8] = v114[8];
    v115 = v173[18];
    v116 = (char *)v169 + v115;
    v117 = (char *)v170 + v115;
    *(_QWORD *)v116 = *(_QWORD *)v117;
    v116[8] = v117[8];
    v118 = v173[19];
    v119 = (char *)v169 + v118;
    v120 = (char *)v170 + v118;
    if (v172((char *)v170 + v118, 1, v16))
    {
      v121 = sub_100005150(&qword_100081028);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v119, v120, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v119, 0, 1, v16);
    }
    v122 = v173[20];
    v123 = (char *)v169 + v122;
    v124 = (char *)v170 + v122;
    if (v172((char *)v170 + v122, 1, v16))
    {
      v125 = sub_100005150(&qword_100081028);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v123, v124, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v123, 0, 1, v16);
    }
    v126 = v173[21];
    v127 = (_QWORD *)((char *)v169 + v126);
    v128 = (_QWORD *)((char *)v170 + v126);
    v129 = *v128;
    if (*v128)
    {
      v130 = v128[1];
      v131 = v128[2];
      *v127 = v129;
      v127[1] = v130;
      v127[2] = v131;
      swift_retain(v129);
      swift_retain(v130);
      swift_retain(v131);
    }
    else
    {
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v127[2] = v128[2];
    }
    v132 = v173[22];
    v133 = (char *)v169 + v132;
    v134 = (char *)v170 + v132;
    v135 = sub_100005150(&qword_100081040);
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_100005150(&qword_100081048);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v138(v133, v134, v16);
      v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    v140 = v139[5];
    v141 = &v133[v140];
    v142 = &v134[v140];
    v143 = type metadata accessor for PlaybackButton.State(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
    v144 = v139[6];
    v145 = &v133[v144];
    v146 = &v134[v144];
    v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
    {
      v149 = sub_100005150(&qword_100081050);
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
    }
    v150 = v139[7];
    v151 = &v133[v150];
    v152 = &v134[v150];
    v153 = *((_QWORD *)v152 + 1);
    *(_QWORD *)v151 = *(_QWORD *)v152;
    *((_QWORD *)v151 + 1) = v153;
    v154 = v139[8];
    v155 = &v133[v154];
    v156 = &v134[v154];
    v157 = *((_QWORD *)v156 + 1);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v157;
    v158 = a3[6];
    *(_QWORD *)((char *)v169 + a3[5]) = *(_QWORD *)((char *)v170 + a3[5]);
    *((_BYTE *)v169 + v158) = *((_BYTE *)v170 + v158);
    v159 = a3[7];
    v160 = (char *)v169 + v159;
    v161 = (char *)v170 + v159;
    v162 = type metadata accessor for EpisodeViewStyle(0);
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v157);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v161, v162);
    if (EnumCaseMultiPayload == 1)
    {
      v165 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 16))(v160, v161, v165);
      swift_storeEnumTagMultiPayload(v160, v162, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    }
    else
    {
      v164 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 16))(v160, v161, v164);
      swift_storeEnumTagMultiPayload(v160, v162, 0);
    }
    *(_QWORD *)((char *)v169 + a3[8]) = *(_QWORD *)((char *)v170 + a3[8]);
  }
  return v21;
}

uint64_t sub_100025AF4(_QWORD *a1, uint64_t a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  char *v9;
  int *v10;
  unsigned int (*v11)(char *, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  int *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_release(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  v4 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v5 = (char *)a1 + v4[10];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[11] + 8));
  v9 = (char *)a1 + v4[12];
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
    v12 = v9[32];
    if (v12 != 255)
      sub_100005624(*((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), v12);
    v13 = v9[64];
    if (v13 != 255)
      sub_10000563C(*((id *)v9 + 7), v13);
    v14 = v9[80];
    if (v14 != 255)
      sub_10000563C(*((id *)v9 + 9), v14);
    v15 = v9[96];
    if (v15 != 255)
      sub_10000563C(*((id *)v9 + 11), v15);
    v16 = v9[112];
    if (v16 != 255)
      sub_10000563C(*((id *)v9 + 13), v16);
    v17 = v9[128];
    if (v17 != 255)
      sub_10000563C(*((id *)v9 + 15), v17);
    v18 = &v9[v10[11]];
    v19 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[16] + 8]);
  }
  v20 = (char *)a1 + v4[13];
  if (!v11(v20, 1, v10))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v20 + 1));
    v21 = v20[32];
    if (v21 != 255)
      sub_100005624(*((_QWORD *)v20 + 2), *((_QWORD *)v20 + 3), v21);
    v22 = v20[64];
    if (v22 != 255)
      sub_10000563C(*((id *)v20 + 7), v22);
    v23 = v20[80];
    if (v23 != 255)
      sub_10000563C(*((id *)v20 + 9), v23);
    v24 = v20[96];
    if (v24 != 255)
      sub_10000563C(*((id *)v20 + 11), v24);
    v25 = v20[112];
    if (v25 != 255)
      sub_10000563C(*((id *)v20 + 13), v25);
    v26 = v20[128];
    if (v26 != 255)
      sub_10000563C(*((id *)v20 + 15), v26);
    v27 = &v20[v10[11]];
    v28 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
    swift_bridgeObjectRelease(*(_QWORD *)&v20[v10[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v20[v10[16] + 8]);
  }

  v29 = (char *)a1 + v4[15];
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
  v32 = (char *)a1 + v4[19];
  if (!v8(v32, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v32, v6);
  v33 = (char *)a1 + v4[20];
  if (!v8(v33, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v33, v6);
  v34 = (_QWORD *)((char *)a1 + v4[21]);
  if (*v34)
  {
    swift_release(*v34);
    swift_release(v34[1]);
    swift_release(v34[2]);
  }
  v35 = (char *)a1 + v4[22];
  v36 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
  {
    v37 = *(void (**)(char *, uint64_t))(v7 + 8);
    v37(v35, v6);
    v37(&v35[*(int *)(v36 + 36)], v6);
  }
  v38 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v39 = &v35[v38[5]];
  v40 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = &v35[v38[6]];
  v42 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v43 = *(_QWORD *)(v42 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
  swift_bridgeObjectRelease(*(_QWORD *)&v35[v38[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v35[v38[8] + 8]);
  v44 = (char *)a1 + *(int *)(a2 + 28);
  v45 = type metadata accessor for EpisodeViewStyle(0);
  result = swift_getEnumCaseMultiPayload(v44, v45);
  if (result <= 1)
  {
    v47 = type metadata accessor for WidgetFamily(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v44, v47);
  }
  return result;
}

_QWORD *sub_100025F98(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(_QWORD *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  id *v34;
  int v35;
  id v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  id *v71;
  int v72;
  id v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void (*v98)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v99;
  void *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(char *, uint64_t, uint64_t);
  id v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  int EnumCaseMultiPayload;
  uint64_t v161;
  uint64_t v162;
  char *__dst;
  void *__dsta;
  _QWORD *v166;
  _QWORD *v167;
  int *v169;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v9 = a2[6];
  v8 = a2[7];
  a1[6] = v9;
  a1[7] = v8;
  v11 = a2[8];
  v10 = a2[9];
  a1[8] = v11;
  a1[9] = v10;
  v12 = a2[10];
  a1[10] = v12;
  v169 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v13 = v169[10];
  __dst = (char *)a1 + v13;
  v166 = a1;
  v167 = a2;
  v14 = (char *)a2 + v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  if (v17(v14, 1, v15))
  {
    v18 = sub_100005150(&qword_100081028);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = v169[11];
  v20 = (_QWORD *)((char *)v166 + v19);
  v21 = (_QWORD *)((char *)v167 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v169[12];
  v24 = (_QWORD *)((char *)v166 + v23);
  v25 = (_QWORD *)((char *)v167 + v23);
  v26 = (int *)type metadata accessor for ArtworkModel(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48);
  swift_bridgeObjectRetain(v22);
  if (v28(v25, 1, v26))
  {
    v29 = sub_100005150(&qword_100081030);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    __dsta = (void *)v15;
    v30 = v25[1];
    *v24 = *v25;
    v24[1] = v30;
    v31 = *((unsigned __int8 *)v25 + 32);
    swift_bridgeObjectRetain(v30);
    if (v31 == 255)
    {
      *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
      *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
    }
    else
    {
      v32 = v25[2];
      v33 = v25[3];
      sub_100005190(v32, v33, v31);
      v24[2] = v32;
      v24[3] = v33;
      *((_BYTE *)v24 + 32) = v31;
    }
    *(_OWORD *)(v24 + 5) = *(_OWORD *)(v25 + 5);
    v34 = (id *)(v25 + 7);
    v35 = *((unsigned __int8 *)v25 + 64);
    if (v35 == 255)
    {
      v24[7] = *v34;
      *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
    }
    else
    {
      v36 = *v34;
      sub_1000051A8(*v34, *((_BYTE *)v25 + 64));
      v24[7] = v36;
      *((_BYTE *)v24 + 64) = v35;
    }
    v37 = (id *)(v25 + 9);
    v38 = *((unsigned __int8 *)v25 + 80);
    if (v38 == 255)
    {
      v24[9] = *v37;
      *((_BYTE *)v24 + 80) = *((_BYTE *)v25 + 80);
    }
    else
    {
      v39 = *v37;
      sub_1000051A8(*v37, *((_BYTE *)v25 + 80));
      v24[9] = v39;
      *((_BYTE *)v24 + 80) = v38;
    }
    v40 = (id *)(v25 + 11);
    v41 = *((unsigned __int8 *)v25 + 96);
    if (v41 == 255)
    {
      v24[11] = *v40;
      *((_BYTE *)v24 + 96) = *((_BYTE *)v25 + 96);
    }
    else
    {
      v42 = *v40;
      sub_1000051A8(*v40, *((_BYTE *)v25 + 96));
      v24[11] = v42;
      *((_BYTE *)v24 + 96) = v41;
    }
    v43 = (id *)(v25 + 13);
    v44 = *((unsigned __int8 *)v25 + 112);
    if (v44 == 255)
    {
      v24[13] = *v43;
      *((_BYTE *)v24 + 112) = *((_BYTE *)v25 + 112);
    }
    else
    {
      v45 = *v43;
      sub_1000051A8(*v43, *((_BYTE *)v25 + 112));
      v24[13] = v45;
      *((_BYTE *)v24 + 112) = v44;
    }
    v46 = (id *)(v25 + 15);
    v47 = *((unsigned __int8 *)v25 + 128);
    if (v47 == 255)
    {
      v24[15] = *v46;
      *((_BYTE *)v24 + 128) = *((_BYTE *)v25 + 128);
    }
    else
    {
      v48 = *v46;
      sub_1000051A8(*v46, *((_BYTE *)v25 + 128));
      v24[15] = v48;
      *((_BYTE *)v24 + 128) = v47;
    }
    v15 = (uint64_t)__dsta;
    *((_BYTE *)v24 + 129) = *((_BYTE *)v25 + 129);
    v49 = v26[11];
    v50 = (char *)v24 + v49;
    v51 = (char *)v25 + v49;
    v52 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
    v53 = v26[12];
    v54 = (_QWORD *)((char *)v24 + v53);
    v55 = (_QWORD *)((char *)v25 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    *((_BYTE *)v24 + v26[13]) = *((_BYTE *)v25 + v26[13]);
    *((_BYTE *)v24 + v26[14]) = *((_BYTE *)v25 + v26[14]);
    *((_BYTE *)v24 + v26[15]) = *((_BYTE *)v25 + v26[15]);
    v57 = v26[16];
    v58 = (_QWORD *)((char *)v24 + v57);
    v59 = (_QWORD *)((char *)v25 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v60);
    v61(v24, 0, 1, v26);
  }
  v62 = v169[13];
  v63 = (_QWORD *)((char *)v166 + v62);
  v64 = (_QWORD *)((char *)v167 + v62);
  if (v28((_QWORD *)((char *)v167 + v62), 1, v26))
  {
    v65 = sub_100005150(&qword_100081030);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    v66 = v15;
    v67 = v64[1];
    *v63 = *v64;
    v63[1] = v67;
    v68 = *((unsigned __int8 *)v64 + 32);
    swift_bridgeObjectRetain(v67);
    if (v68 == 255)
    {
      *((_OWORD *)v63 + 1) = *((_OWORD *)v64 + 1);
      *((_BYTE *)v63 + 32) = *((_BYTE *)v64 + 32);
    }
    else
    {
      v69 = v64[2];
      v70 = v64[3];
      sub_100005190(v69, v70, v68);
      v63[2] = v69;
      v63[3] = v70;
      *((_BYTE *)v63 + 32) = v68;
    }
    *(_OWORD *)(v63 + 5) = *(_OWORD *)(v64 + 5);
    v71 = (id *)(v64 + 7);
    v72 = *((unsigned __int8 *)v64 + 64);
    if (v72 == 255)
    {
      v63[7] = *v71;
      *((_BYTE *)v63 + 64) = *((_BYTE *)v64 + 64);
    }
    else
    {
      v73 = *v71;
      sub_1000051A8(*v71, *((_BYTE *)v64 + 64));
      v63[7] = v73;
      *((_BYTE *)v63 + 64) = v72;
    }
    v74 = (id *)(v64 + 9);
    v75 = *((unsigned __int8 *)v64 + 80);
    if (v75 == 255)
    {
      v63[9] = *v74;
      *((_BYTE *)v63 + 80) = *((_BYTE *)v64 + 80);
    }
    else
    {
      v76 = *v74;
      sub_1000051A8(*v74, *((_BYTE *)v64 + 80));
      v63[9] = v76;
      *((_BYTE *)v63 + 80) = v75;
    }
    v77 = (id *)(v64 + 11);
    v78 = *((unsigned __int8 *)v64 + 96);
    if (v78 == 255)
    {
      v63[11] = *v77;
      *((_BYTE *)v63 + 96) = *((_BYTE *)v64 + 96);
    }
    else
    {
      v79 = *v77;
      sub_1000051A8(*v77, *((_BYTE *)v64 + 96));
      v63[11] = v79;
      *((_BYTE *)v63 + 96) = v78;
    }
    v80 = (id *)(v64 + 13);
    v81 = *((unsigned __int8 *)v64 + 112);
    if (v81 == 255)
    {
      v63[13] = *v80;
      *((_BYTE *)v63 + 112) = *((_BYTE *)v64 + 112);
    }
    else
    {
      v82 = *v80;
      sub_1000051A8(*v80, *((_BYTE *)v64 + 112));
      v63[13] = v82;
      *((_BYTE *)v63 + 112) = v81;
    }
    v83 = (id *)(v64 + 15);
    v84 = *((unsigned __int8 *)v64 + 128);
    if (v84 == 255)
    {
      v63[15] = *v83;
      *((_BYTE *)v63 + 128) = *((_BYTE *)v64 + 128);
    }
    else
    {
      v85 = *v83;
      sub_1000051A8(*v83, *((_BYTE *)v64 + 128));
      v63[15] = v85;
      *((_BYTE *)v63 + 128) = v84;
    }
    v15 = v66;
    *((_BYTE *)v63 + 129) = *((_BYTE *)v64 + 129);
    v86 = v26[11];
    v87 = (char *)v63 + v86;
    v88 = (char *)v64 + v86;
    v89 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
    v90 = v26[12];
    v91 = (_QWORD *)((char *)v63 + v90);
    v92 = (_QWORD *)((char *)v64 + v90);
    v93 = v92[1];
    *v91 = *v92;
    v91[1] = v93;
    *((_BYTE *)v63 + v26[13]) = *((_BYTE *)v64 + v26[13]);
    *((_BYTE *)v63 + v26[14]) = *((_BYTE *)v64 + v26[14]);
    *((_BYTE *)v63 + v26[15]) = *((_BYTE *)v64 + v26[15]);
    v94 = v26[16];
    v95 = (_QWORD *)((char *)v63 + v94);
    v96 = (_QWORD *)((char *)v64 + v94);
    v97 = v96[1];
    *v95 = *v96;
    v95[1] = v97;
    v98 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v97);
    v98(v63, 0, 1, v26);
  }
  v99 = v169[14];
  v100 = *(void **)((char *)v167 + v99);
  *(_QWORD *)((char *)v166 + v99) = v100;
  v101 = v169[15];
  v102 = (char *)v166 + v101;
  v103 = (char *)v167 + v101;
  v104 = type metadata accessor for URL(0);
  v105 = *(_QWORD *)(v104 - 8);
  v106 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v107 = v100;
  if (v106(v103, 1, v104))
  {
    v108 = sub_100005150(&qword_100081038);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v102, v103, v104);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
  }
  *((_BYTE *)v166 + v169[16]) = *((_BYTE *)v167 + v169[16]);
  v109 = v169[17];
  v110 = (char *)v166 + v109;
  v111 = (char *)v167 + v109;
  *(_QWORD *)v110 = *(_QWORD *)v111;
  v110[8] = v111[8];
  v112 = v169[18];
  v113 = (char *)v166 + v112;
  v114 = (char *)v167 + v112;
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v113[8] = v114[8];
  v115 = v169[19];
  v116 = (char *)v166 + v115;
  v117 = (char *)v167 + v115;
  if (v17((char *)v167 + v115, 1, v15))
  {
    v118 = sub_100005150(&qword_100081028);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v116, v117, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v116, 0, 1, v15);
  }
  v119 = v169[20];
  v120 = (char *)v166 + v119;
  v121 = (char *)v167 + v119;
  if (v17((char *)v167 + v119, 1, v15))
  {
    v122 = sub_100005150(&qword_100081028);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v120, v121, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v120, 0, 1, v15);
  }
  v123 = v169[21];
  v124 = (_QWORD *)((char *)v166 + v123);
  v125 = (_QWORD *)((char *)v167 + v123);
  v126 = *v125;
  if (*v125)
  {
    v127 = v125[1];
    v128 = v125[2];
    *v124 = v126;
    v124[1] = v127;
    v124[2] = v128;
    swift_retain(v126);
    swift_retain(v127);
    swift_retain(v128);
  }
  else
  {
    *(_OWORD *)v124 = *(_OWORD *)v125;
    v124[2] = v125[2];
  }
  v129 = v169[22];
  v130 = (char *)v166 + v129;
  v131 = (char *)v167 + v129;
  v132 = sub_100005150(&qword_100081040);
  v133 = *(_QWORD *)(v132 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
  {
    v134 = sub_100005150(&qword_100081048);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
  }
  else
  {
    v135 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v135(v130, v131, v15);
    v135(&v130[*(int *)(v132 + 36)], &v131[*(int *)(v132 + 36)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
  }
  v136 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v137 = v136[5];
  v138 = &v130[v137];
  v139 = &v131[v137];
  v140 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
  v141 = v136[6];
  v142 = &v130[v141];
  v143 = &v131[v141];
  v144 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v145 = *(_QWORD *)(v144 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
  {
    v146 = sub_100005150(&qword_100081050);
    memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v142, v143, v144);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
  }
  v147 = v136[7];
  v148 = &v130[v147];
  v149 = &v131[v147];
  v150 = *((_QWORD *)v149 + 1);
  *(_QWORD *)v148 = *(_QWORD *)v149;
  *((_QWORD *)v148 + 1) = v150;
  v151 = v136[8];
  v152 = &v130[v151];
  v153 = &v131[v151];
  v154 = *((_QWORD *)v153 + 1);
  *(_QWORD *)v152 = *(_QWORD *)v153;
  *((_QWORD *)v152 + 1) = v154;
  v155 = a3[6];
  *(_QWORD *)((char *)v166 + a3[5]) = *(_QWORD *)((char *)v167 + a3[5]);
  *((_BYTE *)v166 + v155) = *((_BYTE *)v167 + v155);
  v156 = a3[7];
  v157 = (char *)v166 + v156;
  v158 = (char *)v167 + v156;
  v159 = type metadata accessor for EpisodeViewStyle(0);
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRetain(v154);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v158, v159);
  if (EnumCaseMultiPayload == 1)
  {
    v162 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 16))(v157, v158, v162);
    swift_storeEnumTagMultiPayload(v157, v159, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
  }
  else
  {
    v161 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 16))(v157, v158, v161);
    swift_storeEnumTagMultiPayload(v157, v159, 0);
  }
  *(_QWORD *)((char *)v166 + a3[8]) = *(_QWORD *)((char *)v167 + a3[8]);
  return v166;
}

_QWORD *sub_100026AA8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  __int128 v55;
  id *v56;
  int v57;
  id v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id v67;
  id *v68;
  int v69;
  id v70;
  id v71;
  id *v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  void **v93;
  void **v94;
  int v95;
  void *v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  void **v102;
  void **v103;
  int v104;
  void *v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  void **v111;
  void **v112;
  int v113;
  void *v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  void *v119;
  void **v120;
  void **v121;
  int v122;
  void *v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  void **v129;
  void **v130;
  int v131;
  void *v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  __int128 *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  __int128 v174;
  id *v175;
  int v176;
  id v177;
  id v178;
  id *v179;
  int v180;
  id v181;
  id v182;
  id *v183;
  int v184;
  id v185;
  id v186;
  id *v187;
  int v188;
  id v189;
  id v190;
  id *v191;
  int v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v208;
  uint64_t v209;
  char v210;
  __int128 v211;
  void **v212;
  void **v213;
  int v214;
  void *v215;
  void *v216;
  char v217;
  void *v218;
  char v219;
  void *v220;
  void **v221;
  void **v222;
  int v223;
  void *v224;
  void *v225;
  char v226;
  void *v227;
  char v228;
  void *v229;
  void **v230;
  void **v231;
  int v232;
  void *v233;
  void *v234;
  char v235;
  void *v236;
  char v237;
  void *v238;
  void **v239;
  void **v240;
  int v241;
  void *v242;
  void *v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  void **v248;
  void **v249;
  int v250;
  void *v251;
  void *v252;
  char v253;
  void *v254;
  char v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  id v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (*v280)(char *, uint64_t, uint64_t);
  int v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (*v321)(char *, uint64_t, uint64_t);
  int v322;
  int v323;
  void (*v324)(char *, char *, uint64_t);
  uint64_t v325;
  int *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t (*v336)(char *, uint64_t, uint64_t);
  int v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  char *v351;
  uint64_t v352;
  int EnumCaseMultiPayload;
  uint64_t v354;
  uint64_t v355;
  void (*v357)(char *, char *, uint64_t);
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t (*v361)(char *, uint64_t, uint64_t);
  uint64_t v362;
  int *v363;
  _QWORD *v364;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[9] = a2[9];
  v16 = a2[10];
  v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v19 = v18[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v361 = v24;
  v26 = v24(v21, 1, v22);
  v362 = v23;
  v363 = a3;
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100005150(&qword_100081028);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v28 = v18[11];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v18[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v360 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v360 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      v358 = v22;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v40 = *((_QWORD *)v35 + 1);
      *(_QWORD *)(v34 + 8) = v40;
      v41 = v35[32];
      swift_bridgeObjectRetain(v40);
      if (v41 == 255)
      {
        v55 = *((_OWORD *)v35 + 1);
        *(_BYTE *)(v34 + 32) = v35[32];
        *(_OWORD *)(v34 + 16) = v55;
      }
      else
      {
        v42 = *((_QWORD *)v35 + 2);
        v43 = *((_QWORD *)v35 + 3);
        sub_100005190(v42, v43, v41);
        *(_QWORD *)(v34 + 16) = v42;
        *(_QWORD *)(v34 + 24) = v43;
        *(_BYTE *)(v34 + 32) = v41;
      }
      *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
      *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
      v56 = (id *)(v35 + 56);
      v57 = v35[64];
      if (v57 == 255)
      {
        v59 = *v56;
        *(_BYTE *)(v34 + 64) = v35[64];
        *(_QWORD *)(v34 + 56) = v59;
      }
      else
      {
        v58 = *v56;
        sub_1000051A8(*v56, v35[64]);
        *(_QWORD *)(v34 + 56) = v58;
        *(_BYTE *)(v34 + 64) = v57;
      }
      v22 = v358;
      v60 = (id *)(v35 + 72);
      v61 = v35[80];
      if (v61 == 255)
      {
        v63 = *v60;
        *(_BYTE *)(v34 + 80) = v35[80];
        *(_QWORD *)(v34 + 72) = v63;
      }
      else
      {
        v62 = *v60;
        sub_1000051A8(*v60, v35[80]);
        *(_QWORD *)(v34 + 72) = v62;
        *(_BYTE *)(v34 + 80) = v61;
      }
      v64 = (id *)(v35 + 88);
      v65 = v35[96];
      if (v65 == 255)
      {
        v67 = *v64;
        *(_BYTE *)(v34 + 96) = v35[96];
        *(_QWORD *)(v34 + 88) = v67;
      }
      else
      {
        v66 = *v64;
        sub_1000051A8(*v64, v35[96]);
        *(_QWORD *)(v34 + 88) = v66;
        *(_BYTE *)(v34 + 96) = v65;
      }
      v68 = (id *)(v35 + 104);
      v69 = v35[112];
      if (v69 == 255)
      {
        v71 = *v68;
        *(_BYTE *)(v34 + 112) = v35[112];
        *(_QWORD *)(v34 + 104) = v71;
      }
      else
      {
        v70 = *v68;
        sub_1000051A8(*v68, v35[112]);
        *(_QWORD *)(v34 + 104) = v70;
        *(_BYTE *)(v34 + 112) = v69;
      }
      v72 = (id *)(v35 + 120);
      v73 = v35[128];
      if (v73 == 255)
      {
        v75 = *v72;
        *(_BYTE *)(v34 + 128) = v35[128];
        *(_QWORD *)(v34 + 120) = v75;
      }
      else
      {
        v74 = *v72;
        sub_1000051A8(*v72, v35[128]);
        *(_QWORD *)(v34 + 120) = v74;
        *(_BYTE *)(v34 + 128) = v73;
      }
      *(_BYTE *)(v34 + 129) = v35[129];
      v76 = v36[11];
      v77 = v34 + v76;
      v78 = &v35[v76];
      v79 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v80 = v36[12];
      v81 = (_QWORD *)(v34 + v80);
      v82 = &v35[v80];
      *v81 = *(_QWORD *)v82;
      v83 = *((_QWORD *)v82 + 1);
      v81[1] = v83;
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      v84 = v36[16];
      v85 = (_QWORD *)(v34 + v84);
      v86 = &v35[v84];
      *v85 = *(_QWORD *)v86;
      v87 = *((_QWORD *)v86 + 1);
      v85[1] = v87;
      v88 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v360 + 56);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v88(v34, 0, 1, v36);
      goto LABEL_75;
    }
LABEL_13:
    v44 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_75;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_13;
  }
  v359 = v22;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v45 = *((_QWORD *)v35 + 1);
  v46 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = (__int128 *)(v34 + 16);
  v48 = (__int128 *)(v35 + 16);
  v49 = v35[32];
  if (*(unsigned __int8 *)(v34 + 32) == 255)
  {
    if (v49 == 255)
    {
      v92 = *v48;
      *(_BYTE *)(v34 + 32) = v35[32];
      *v47 = v92;
    }
    else
    {
      v89 = *((_QWORD *)v35 + 2);
      v90 = *((_QWORD *)v35 + 3);
      sub_100005190(v89, v90, v35[32]);
      *(_QWORD *)(v34 + 16) = v89;
      *(_QWORD *)(v34 + 24) = v90;
      *(_BYTE *)(v34 + 32) = v49;
    }
  }
  else if (v49 == 255)
  {
    sub_100007770(v34 + 16);
    v91 = v35[32];
    *v47 = *v48;
    *(_BYTE *)(v34 + 32) = v91;
  }
  else
  {
    v51 = *((_QWORD *)v35 + 2);
    v50 = *((_QWORD *)v35 + 3);
    sub_100005190(v51, v50, v35[32]);
    v52 = *(_QWORD *)(v34 + 16);
    v53 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 16) = v51;
    *(_QWORD *)(v34 + 24) = v50;
    v54 = *(_BYTE *)(v34 + 32);
    *(_BYTE *)(v34 + 32) = v49;
    sub_100005624(v52, v53, v54);
  }
  *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
  *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
  v93 = (void **)(v34 + 56);
  v94 = (void **)(v35 + 56);
  v95 = v35[64];
  if (*(unsigned __int8 *)(v34 + 64) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(v34 + 64) = v35[64];
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_1000051A8(v99, v35[64]);
      *(_QWORD *)(v34 + 56) = v99;
      *(_BYTE *)(v34 + 64) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_1000077A4(v34 + 56);
    v100 = v35[64];
    *v93 = *v94;
    *(_BYTE *)(v34 + 64) = v100;
  }
  else
  {
    v96 = *v94;
    sub_1000051A8(v96, v35[64]);
    v97 = *(void **)(v34 + 56);
    *(_QWORD *)(v34 + 56) = v96;
    v98 = *(_BYTE *)(v34 + 64);
    *(_BYTE *)(v34 + 64) = v95;
    sub_10000563C(v97, v98);
  }
  v102 = (void **)(v34 + 72);
  v103 = (void **)(v35 + 72);
  v104 = v35[80];
  if (*(unsigned __int8 *)(v34 + 80) == 255)
  {
    if (v104 == 255)
    {
      v110 = *v103;
      *(_BYTE *)(v34 + 80) = v35[80];
      *v102 = v110;
    }
    else
    {
      v108 = *v103;
      sub_1000051A8(v108, v35[80]);
      *(_QWORD *)(v34 + 72) = v108;
      *(_BYTE *)(v34 + 80) = v104;
    }
  }
  else if (v104 == 255)
  {
    sub_1000077A4(v34 + 72);
    v109 = v35[80];
    *v102 = *v103;
    *(_BYTE *)(v34 + 80) = v109;
  }
  else
  {
    v105 = *v103;
    sub_1000051A8(v105, v35[80]);
    v106 = *(void **)(v34 + 72);
    *(_QWORD *)(v34 + 72) = v105;
    v107 = *(_BYTE *)(v34 + 80);
    *(_BYTE *)(v34 + 80) = v104;
    sub_10000563C(v106, v107);
  }
  v111 = (void **)(v34 + 88);
  v112 = (void **)(v35 + 88);
  v113 = v35[96];
  if (*(unsigned __int8 *)(v34 + 96) == 255)
  {
    if (v113 == 255)
    {
      v119 = *v112;
      *(_BYTE *)(v34 + 96) = v35[96];
      *v111 = v119;
    }
    else
    {
      v117 = *v112;
      sub_1000051A8(v117, v35[96]);
      *(_QWORD *)(v34 + 88) = v117;
      *(_BYTE *)(v34 + 96) = v113;
    }
  }
  else if (v113 == 255)
  {
    sub_1000077A4(v34 + 88);
    v118 = v35[96];
    *v111 = *v112;
    *(_BYTE *)(v34 + 96) = v118;
  }
  else
  {
    v114 = *v112;
    sub_1000051A8(v114, v35[96]);
    v115 = *(void **)(v34 + 88);
    *(_QWORD *)(v34 + 88) = v114;
    v116 = *(_BYTE *)(v34 + 96);
    *(_BYTE *)(v34 + 96) = v113;
    sub_10000563C(v115, v116);
  }
  v120 = (void **)(v34 + 104);
  v121 = (void **)(v35 + 104);
  v122 = v35[112];
  if (*(unsigned __int8 *)(v34 + 112) == 255)
  {
    if (v122 == 255)
    {
      v128 = *v121;
      *(_BYTE *)(v34 + 112) = v35[112];
      *v120 = v128;
    }
    else
    {
      v126 = *v121;
      sub_1000051A8(v126, v35[112]);
      *(_QWORD *)(v34 + 104) = v126;
      *(_BYTE *)(v34 + 112) = v122;
    }
  }
  else if (v122 == 255)
  {
    sub_1000077A4(v34 + 104);
    v127 = v35[112];
    *v120 = *v121;
    *(_BYTE *)(v34 + 112) = v127;
  }
  else
  {
    v123 = *v121;
    sub_1000051A8(v123, v35[112]);
    v124 = *(void **)(v34 + 104);
    *(_QWORD *)(v34 + 104) = v123;
    v125 = *(_BYTE *)(v34 + 112);
    *(_BYTE *)(v34 + 112) = v122;
    sub_10000563C(v124, v125);
  }
  v129 = (void **)(v34 + 120);
  v130 = (void **)(v35 + 120);
  v131 = v35[128];
  if (*(unsigned __int8 *)(v34 + 128) == 255)
  {
    if (v131 == 255)
    {
      v137 = *v130;
      *(_BYTE *)(v34 + 128) = v35[128];
      *v129 = v137;
    }
    else
    {
      v135 = *v130;
      sub_1000051A8(v135, v35[128]);
      *(_QWORD *)(v34 + 120) = v135;
      *(_BYTE *)(v34 + 128) = v131;
    }
  }
  else if (v131 == 255)
  {
    sub_1000077A4(v34 + 120);
    v136 = v35[128];
    *v129 = *v130;
    *(_BYTE *)(v34 + 128) = v136;
  }
  else
  {
    v132 = *v130;
    sub_1000051A8(v132, v35[128]);
    v133 = *(void **)(v34 + 120);
    *(_QWORD *)(v34 + 120) = v132;
    v134 = *(_BYTE *)(v34 + 128);
    *(_BYTE *)(v34 + 128) = v131;
    sub_10000563C(v133, v134);
  }
  v22 = v359;
  *(_BYTE *)(v34 + 129) = v35[129];
  v138 = v36[11];
  v139 = v34 + v138;
  v140 = &v35[v138];
  v141 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v36[12];
  v143 = (_QWORD *)(v34 + v142);
  v144 = &v35[v142];
  *v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = v143[1];
  v143[1] = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v147 = v36[16];
  v148 = (_QWORD *)(v34 + v147);
  v149 = &v35[v147];
  *v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = v148[1];
  v148[1] = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
LABEL_75:
  v152 = v18[13];
  v153 = (uint64_t)a1 + v152;
  v154 = (char *)a2 + v152;
  v155 = v37((uint64_t)a1 + v152, 1, v36);
  v156 = v37((uint64_t)v154, 1, v36);
  if (v155)
  {
    if (!v156)
    {
      v157 = v22;
      *(_QWORD *)v153 = *(_QWORD *)v154;
      v158 = *((_QWORD *)v154 + 1);
      *(_QWORD *)(v153 + 8) = v158;
      v159 = v154[32];
      swift_bridgeObjectRetain(v158);
      if (v159 == 255)
      {
        v174 = *((_OWORD *)v154 + 1);
        *(_BYTE *)(v153 + 32) = v154[32];
        *(_OWORD *)(v153 + 16) = v174;
      }
      else
      {
        v160 = *((_QWORD *)v154 + 2);
        v161 = *((_QWORD *)v154 + 3);
        sub_100005190(v160, v161, v159);
        *(_QWORD *)(v153 + 16) = v160;
        *(_QWORD *)(v153 + 24) = v161;
        *(_BYTE *)(v153 + 32) = v159;
      }
      *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
      *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
      v175 = (id *)(v154 + 56);
      v176 = v154[64];
      if (v176 == 255)
      {
        v178 = *v175;
        *(_BYTE *)(v153 + 64) = v154[64];
        *(_QWORD *)(v153 + 56) = v178;
      }
      else
      {
        v177 = *v175;
        sub_1000051A8(*v175, v154[64]);
        *(_QWORD *)(v153 + 56) = v177;
        *(_BYTE *)(v153 + 64) = v176;
      }
      v22 = v157;
      v179 = (id *)(v154 + 72);
      v180 = v154[80];
      if (v180 == 255)
      {
        v182 = *v179;
        *(_BYTE *)(v153 + 80) = v154[80];
        *(_QWORD *)(v153 + 72) = v182;
      }
      else
      {
        v181 = *v179;
        sub_1000051A8(*v179, v154[80]);
        *(_QWORD *)(v153 + 72) = v181;
        *(_BYTE *)(v153 + 80) = v180;
      }
      v183 = (id *)(v154 + 88);
      v184 = v154[96];
      if (v184 == 255)
      {
        v186 = *v183;
        *(_BYTE *)(v153 + 96) = v154[96];
        *(_QWORD *)(v153 + 88) = v186;
      }
      else
      {
        v185 = *v183;
        sub_1000051A8(*v183, v154[96]);
        *(_QWORD *)(v153 + 88) = v185;
        *(_BYTE *)(v153 + 96) = v184;
      }
      v187 = (id *)(v154 + 104);
      v188 = v154[112];
      if (v188 == 255)
      {
        v190 = *v187;
        *(_BYTE *)(v153 + 112) = v154[112];
        *(_QWORD *)(v153 + 104) = v190;
      }
      else
      {
        v189 = *v187;
        sub_1000051A8(*v187, v154[112]);
        *(_QWORD *)(v153 + 104) = v189;
        *(_BYTE *)(v153 + 112) = v188;
      }
      v191 = (id *)(v154 + 120);
      v192 = v154[128];
      if (v192 == 255)
      {
        v194 = *v191;
        *(_BYTE *)(v153 + 128) = v154[128];
        *(_QWORD *)(v153 + 120) = v194;
      }
      else
      {
        v193 = *v191;
        sub_1000051A8(*v191, v154[128]);
        *(_QWORD *)(v153 + 120) = v193;
        *(_BYTE *)(v153 + 128) = v192;
      }
      *(_BYTE *)(v153 + 129) = v154[129];
      v195 = v36[11];
      v196 = v153 + v195;
      v197 = &v154[v195];
      v198 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v198 - 8) + 16))(v196, v197, v198);
      v199 = v36[12];
      v200 = (_QWORD *)(v153 + v199);
      v201 = &v154[v199];
      *v200 = *(_QWORD *)v201;
      v202 = *((_QWORD *)v201 + 1);
      v200[1] = v202;
      *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
      *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
      *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
      v203 = v36[16];
      v204 = (_QWORD *)(v153 + v203);
      v205 = &v154[v203];
      *v204 = *(_QWORD *)v205;
      v206 = *((_QWORD *)v205 + 1);
      v204[1] = v206;
      v207 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v360 + 56);
      swift_bridgeObjectRetain(v202);
      swift_bridgeObjectRetain(v206);
      v207(v153, 0, 1, v36);
      goto LABEL_142;
    }
LABEL_81:
    v162 = sub_100005150(&qword_100081030);
    memcpy((void *)v153, v154, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_142;
  }
  if (v156)
  {
    sub_10000EF80(v153, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_81;
  }
  v163 = v22;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  v164 = *((_QWORD *)v154 + 1);
  v165 = *(_QWORD *)(v153 + 8);
  *(_QWORD *)(v153 + 8) = v164;
  swift_bridgeObjectRetain(v164);
  swift_bridgeObjectRelease(v165);
  v166 = (__int128 *)(v153 + 16);
  v167 = (__int128 *)(v154 + 16);
  v168 = v154[32];
  if (*(unsigned __int8 *)(v153 + 32) == 255)
  {
    if (v168 == 255)
    {
      v211 = *v167;
      *(_BYTE *)(v153 + 32) = v154[32];
      *v166 = v211;
    }
    else
    {
      v208 = *((_QWORD *)v154 + 2);
      v209 = *((_QWORD *)v154 + 3);
      sub_100005190(v208, v209, v154[32]);
      *(_QWORD *)(v153 + 16) = v208;
      *(_QWORD *)(v153 + 24) = v209;
      *(_BYTE *)(v153 + 32) = v168;
    }
  }
  else if (v168 == 255)
  {
    sub_100007770(v153 + 16);
    v210 = v154[32];
    *v166 = *v167;
    *(_BYTE *)(v153 + 32) = v210;
  }
  else
  {
    v169 = *((_QWORD *)v154 + 2);
    v170 = *((_QWORD *)v154 + 3);
    sub_100005190(v169, v170, v154[32]);
    v171 = *(_QWORD *)(v153 + 16);
    v172 = *(_QWORD *)(v153 + 24);
    *(_QWORD *)(v153 + 16) = v169;
    *(_QWORD *)(v153 + 24) = v170;
    v173 = *(_BYTE *)(v153 + 32);
    *(_BYTE *)(v153 + 32) = v168;
    sub_100005624(v171, v172, v173);
  }
  *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
  *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
  v212 = (void **)(v153 + 56);
  v213 = (void **)(v154 + 56);
  v214 = v154[64];
  if (*(unsigned __int8 *)(v153 + 64) == 255)
  {
    if (v214 == 255)
    {
      v220 = *v213;
      *(_BYTE *)(v153 + 64) = v154[64];
      *v212 = v220;
    }
    else
    {
      v218 = *v213;
      sub_1000051A8(v218, v154[64]);
      *(_QWORD *)(v153 + 56) = v218;
      *(_BYTE *)(v153 + 64) = v214;
    }
  }
  else if (v214 == 255)
  {
    sub_1000077A4(v153 + 56);
    v219 = v154[64];
    *v212 = *v213;
    *(_BYTE *)(v153 + 64) = v219;
  }
  else
  {
    v215 = *v213;
    sub_1000051A8(v215, v154[64]);
    v216 = *(void **)(v153 + 56);
    *(_QWORD *)(v153 + 56) = v215;
    v217 = *(_BYTE *)(v153 + 64);
    *(_BYTE *)(v153 + 64) = v214;
    sub_10000563C(v216, v217);
  }
  v221 = (void **)(v153 + 72);
  v222 = (void **)(v154 + 72);
  v223 = v154[80];
  if (*(unsigned __int8 *)(v153 + 80) == 255)
  {
    if (v223 == 255)
    {
      v229 = *v222;
      *(_BYTE *)(v153 + 80) = v154[80];
      *v221 = v229;
    }
    else
    {
      v227 = *v222;
      sub_1000051A8(v227, v154[80]);
      *(_QWORD *)(v153 + 72) = v227;
      *(_BYTE *)(v153 + 80) = v223;
    }
  }
  else if (v223 == 255)
  {
    sub_1000077A4(v153 + 72);
    v228 = v154[80];
    *v221 = *v222;
    *(_BYTE *)(v153 + 80) = v228;
  }
  else
  {
    v224 = *v222;
    sub_1000051A8(v224, v154[80]);
    v225 = *(void **)(v153 + 72);
    *(_QWORD *)(v153 + 72) = v224;
    v226 = *(_BYTE *)(v153 + 80);
    *(_BYTE *)(v153 + 80) = v223;
    sub_10000563C(v225, v226);
  }
  v230 = (void **)(v153 + 88);
  v231 = (void **)(v154 + 88);
  v232 = v154[96];
  if (*(unsigned __int8 *)(v153 + 96) == 255)
  {
    if (v232 == 255)
    {
      v238 = *v231;
      *(_BYTE *)(v153 + 96) = v154[96];
      *v230 = v238;
    }
    else
    {
      v236 = *v231;
      sub_1000051A8(v236, v154[96]);
      *(_QWORD *)(v153 + 88) = v236;
      *(_BYTE *)(v153 + 96) = v232;
    }
  }
  else if (v232 == 255)
  {
    sub_1000077A4(v153 + 88);
    v237 = v154[96];
    *v230 = *v231;
    *(_BYTE *)(v153 + 96) = v237;
  }
  else
  {
    v233 = *v231;
    sub_1000051A8(v233, v154[96]);
    v234 = *(void **)(v153 + 88);
    *(_QWORD *)(v153 + 88) = v233;
    v235 = *(_BYTE *)(v153 + 96);
    *(_BYTE *)(v153 + 96) = v232;
    sub_10000563C(v234, v235);
  }
  v239 = (void **)(v153 + 104);
  v240 = (void **)(v154 + 104);
  v241 = v154[112];
  if (*(unsigned __int8 *)(v153 + 112) == 255)
  {
    if (v241 == 255)
    {
      v247 = *v240;
      *(_BYTE *)(v153 + 112) = v154[112];
      *v239 = v247;
    }
    else
    {
      v245 = *v240;
      sub_1000051A8(v245, v154[112]);
      *(_QWORD *)(v153 + 104) = v245;
      *(_BYTE *)(v153 + 112) = v241;
    }
  }
  else if (v241 == 255)
  {
    sub_1000077A4(v153 + 104);
    v246 = v154[112];
    *v239 = *v240;
    *(_BYTE *)(v153 + 112) = v246;
  }
  else
  {
    v242 = *v240;
    sub_1000051A8(v242, v154[112]);
    v243 = *(void **)(v153 + 104);
    *(_QWORD *)(v153 + 104) = v242;
    v244 = *(_BYTE *)(v153 + 112);
    *(_BYTE *)(v153 + 112) = v241;
    sub_10000563C(v243, v244);
  }
  v248 = (void **)(v153 + 120);
  v249 = (void **)(v154 + 120);
  v250 = v154[128];
  if (*(unsigned __int8 *)(v153 + 128) == 255)
  {
    if (v250 == 255)
    {
      v256 = *v249;
      *(_BYTE *)(v153 + 128) = v154[128];
      *v248 = v256;
    }
    else
    {
      v254 = *v249;
      sub_1000051A8(v254, v154[128]);
      *(_QWORD *)(v153 + 120) = v254;
      *(_BYTE *)(v153 + 128) = v250;
    }
  }
  else if (v250 == 255)
  {
    sub_1000077A4(v153 + 120);
    v255 = v154[128];
    *v248 = *v249;
    *(_BYTE *)(v153 + 128) = v255;
  }
  else
  {
    v251 = *v249;
    sub_1000051A8(v251, v154[128]);
    v252 = *(void **)(v153 + 120);
    *(_QWORD *)(v153 + 120) = v251;
    v253 = *(_BYTE *)(v153 + 128);
    *(_BYTE *)(v153 + 128) = v250;
    sub_10000563C(v252, v253);
  }
  v22 = v163;
  *(_BYTE *)(v153 + 129) = v154[129];
  v257 = v36[11];
  v258 = v153 + v257;
  v259 = &v154[v257];
  v260 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v260 - 8) + 24))(v258, v259, v260);
  v261 = v36[12];
  v262 = (_QWORD *)(v153 + v261);
  v263 = &v154[v261];
  *v262 = *(_QWORD *)v263;
  v264 = *((_QWORD *)v263 + 1);
  v265 = v262[1];
  v262[1] = v264;
  swift_bridgeObjectRetain(v264);
  swift_bridgeObjectRelease(v265);
  *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
  *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
  *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
  v266 = v36[16];
  v267 = (_QWORD *)(v153 + v266);
  v268 = &v154[v266];
  *v267 = *(_QWORD *)v268;
  v269 = *((_QWORD *)v268 + 1);
  v270 = v267[1];
  v267[1] = v269;
  swift_bridgeObjectRetain(v269);
  swift_bridgeObjectRelease(v270);
LABEL_142:
  v271 = v18[14];
  v272 = *(void **)((char *)a1 + v271);
  v273 = *(void **)((char *)a2 + v271);
  *(_QWORD *)((char *)a1 + v271) = v273;
  v274 = v273;

  v275 = v18[15];
  v276 = (char *)a1 + v275;
  v277 = (char *)a2 + v275;
  v278 = type metadata accessor for URL(0);
  v279 = *(_QWORD *)(v278 - 8);
  v280 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v279 + 48);
  LODWORD(v272) = v280(v276, 1, v278);
  v281 = v280(v277, 1, v278);
  if ((_DWORD)v272)
  {
    if (!v281)
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v281)
  {
    (*(void (**)(char *, uint64_t))(v279 + 8))(v276, v278);
LABEL_147:
    v282 = sub_100005150(&qword_100081038);
    memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
    goto LABEL_148;
  }
  (*(void (**)(char *, char *, uint64_t))(v279 + 24))(v276, v277, v278);
LABEL_148:
  *((_BYTE *)a1 + v18[16]) = *((_BYTE *)a2 + v18[16]);
  v283 = v18[17];
  v284 = (char *)a1 + v283;
  v285 = (char *)a2 + v283;
  v286 = *(_QWORD *)v285;
  v284[8] = v285[8];
  *(_QWORD *)v284 = v286;
  v287 = v18[18];
  v288 = (char *)a1 + v287;
  v289 = (char *)a2 + v287;
  v290 = *(_QWORD *)v289;
  v288[8] = v289[8];
  *(_QWORD *)v288 = v290;
  v291 = v18[19];
  v292 = (char *)a1 + v291;
  v293 = (char *)a2 + v291;
  v294 = v361((char *)a1 + v291, 1, v22);
  v295 = v361(v293, 1, v22);
  if (v294)
  {
    if (!v295)
    {
      (*(void (**)(char *, char *, uint64_t))(v362 + 16))(v292, v293, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v292, 0, 1, v22);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v295)
  {
    (*(void (**)(char *, uint64_t))(v362 + 8))(v292, v22);
LABEL_153:
    v296 = sub_100005150(&qword_100081028);
    memcpy(v292, v293, *(_QWORD *)(*(_QWORD *)(v296 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(char *, char *, uint64_t))(v362 + 24))(v292, v293, v22);
LABEL_154:
  v297 = v18[20];
  v298 = (char *)a1 + v297;
  v299 = (char *)a2 + v297;
  v300 = v361((char *)a1 + v297, 1, v22);
  v301 = v361(v299, 1, v22);
  if (v300)
  {
    if (!v301)
    {
      (*(void (**)(char *, char *, uint64_t))(v362 + 16))(v298, v299, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v298, 0, 1, v22);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v301)
  {
    (*(void (**)(char *, uint64_t))(v362 + 8))(v298, v22);
LABEL_159:
    v302 = sub_100005150(&qword_100081028);
    memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(char *, char *, uint64_t))(v362 + 24))(v298, v299, v22);
LABEL_160:
  v303 = v18[21];
  v304 = (_QWORD *)((char *)a1 + v303);
  v305 = (char *)a2 + v303;
  v306 = *(_QWORD *)((char *)a1 + v303);
  v307 = *(_QWORD *)((char *)a2 + v303);
  if (v306)
  {
    if (v307)
    {
      *v304 = v307;
      swift_retain(v307);
      swift_release(v306);
      v308 = *((_QWORD *)v305 + 1);
      v309 = v304[1];
      v304[1] = v308;
      swift_retain(v308);
      swift_release(v309);
      v310 = *((_QWORD *)v305 + 2);
      v311 = v304[2];
      v304[2] = v310;
      swift_retain(v310);
      swift_release(v311);
    }
    else
    {
      sub_100007814((_QWORD *)((char *)a1 + v303));
      v314 = *((_QWORD *)v305 + 2);
      *(_OWORD *)v304 = *(_OWORD *)v305;
      v304[2] = v314;
    }
  }
  else if (v307)
  {
    *v304 = v307;
    v312 = *((_QWORD *)v305 + 1);
    v304[1] = v312;
    v313 = *((_QWORD *)v305 + 2);
    v304[2] = v313;
    swift_retain(v307);
    swift_retain(v312);
    swift_retain(v313);
  }
  else
  {
    v315 = *(_OWORD *)v305;
    v304[2] = *((_QWORD *)v305 + 2);
    *(_OWORD *)v304 = v315;
  }
  v316 = v18[22];
  v317 = (char *)a1 + v316;
  v318 = (char *)a2 + v316;
  v319 = sub_100005150(&qword_100081040);
  v320 = *(_QWORD *)(v319 - 8);
  v321 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v320 + 48);
  v322 = v321(v317, 1, v319);
  v323 = v321(v318, 1, v319);
  v364 = a2;
  if (v322)
  {
    if (!v323)
    {
      v324 = *(void (**)(char *, char *, uint64_t))(v362 + 16);
      v324(v317, v318, v22);
      v324(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v317, 0, 1, v319);
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (v323)
  {
    sub_10000F008((uint64_t)v317, &qword_100081040);
LABEL_175:
    v325 = sub_100005150(&qword_100081048);
    memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
    goto LABEL_176;
  }
  v357 = *(void (**)(char *, char *, uint64_t))(v362 + 24);
  v357(v317, v318, v22);
  v357(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
LABEL_176:
  v326 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v327 = v326[5];
  v328 = &v317[v327];
  v329 = &v318[v327];
  v330 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v330 - 8) + 24))(v328, v329, v330);
  v331 = v326[6];
  v332 = &v317[v331];
  v333 = &v318[v331];
  v334 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v335 = *(_QWORD *)(v334 - 8);
  v336 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v335 + 48);
  LODWORD(v328) = v336(v332, 1, v334);
  v337 = v336(v333, 1, v334);
  if ((_DWORD)v328)
  {
    if (!v337)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v332, v333, v334);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v332, 0, 1, v334);
      goto LABEL_182;
    }
    goto LABEL_181;
  }
  if (v337)
  {
    (*(void (**)(char *, uint64_t))(v335 + 8))(v332, v334);
LABEL_181:
    v338 = sub_100005150(&qword_100081050);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
    goto LABEL_182;
  }
  (*(void (**)(char *, char *, uint64_t))(v335 + 24))(v332, v333, v334);
LABEL_182:
  v339 = v326[7];
  v340 = &v317[v339];
  v341 = &v318[v339];
  *(_QWORD *)v340 = *(_QWORD *)v341;
  v342 = *((_QWORD *)v341 + 1);
  v343 = *((_QWORD *)v340 + 1);
  *((_QWORD *)v340 + 1) = v342;
  swift_bridgeObjectRetain(v342);
  swift_bridgeObjectRelease(v343);
  v344 = v326[8];
  v345 = &v317[v344];
  v346 = &v318[v344];
  *(_QWORD *)v345 = *(_QWORD *)v346;
  v347 = *((_QWORD *)v346 + 1);
  v348 = *((_QWORD *)v345 + 1);
  *((_QWORD *)v345 + 1) = v347;
  swift_bridgeObjectRetain(v347);
  swift_bridgeObjectRelease(v348);
  *(_QWORD *)((char *)a1 + v363[5]) = *(_QWORD *)((char *)v364 + v363[5]);
  *((_BYTE *)a1 + v363[6]) = *((_BYTE *)v364 + v363[6]);
  if (a1 != v364)
  {
    v349 = v363[7];
    v350 = (char *)a1 + v349;
    v351 = (char *)v364 + v349;
    sub_10000EF80((uint64_t)a1 + v349, type metadata accessor for EpisodeViewStyle);
    v352 = type metadata accessor for EpisodeViewStyle(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v351, v352);
    if (EnumCaseMultiPayload == 1)
    {
      v355 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v355 - 8) + 16))(v350, v351, v355);
      swift_storeEnumTagMultiPayload(v350, v352, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v350, v351, *(_QWORD *)(*(_QWORD *)(v352 - 8) + 64));
    }
    else
    {
      v354 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v354 - 8) + 16))(v350, v351, v354);
      swift_storeEnumTagMultiPayload(v350, v352, 0);
    }
  }
  *(_QWORD *)((char *)a1 + v363[8]) = *(_QWORD *)((char *)v364 + v363[8]);
  return a1;
}

uint64_t sub_100028210(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(_OWORD *, uint64_t, int *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const void *v85;
  uint64_t v86;
  int EnumCaseMultiPayload;
  uint64_t v88;
  uint64_t v89;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int (*v94)(const void *, uint64_t);
  uint64_t v95;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v8 = v7[10];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v94 = *(unsigned int (**)(const void *, uint64_t))(v12 + 48);
  v95 = v11;
  if (v94(v10, 1))
  {
    v13 = sub_100005150(&qword_100081028);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v95);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v95);
  }
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  v14 = v7[12];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = (int *)type metadata accessor for ArtworkModel(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
  v93 = v18;
  if (v19(v16, 1, v17))
  {
    v20 = sub_100005150(&qword_100081030);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v16[1];
    *v15 = *v16;
    v15[1] = v21;
    *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
    *(_OWORD *)((char *)v15 + 40) = *(_OWORD *)((char *)v16 + 40);
    *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
    *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
    *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
    *(_OWORD *)((char *)v15 + 104) = *(_OWORD *)((char *)v16 + 104);
    *(_OWORD *)((char *)v15 + 88) = *(_OWORD *)((char *)v16 + 88);
    *(_OWORD *)((char *)v15 + 72) = *(_OWORD *)((char *)v16 + 72);
    *((_BYTE *)v15 + 129) = *((_BYTE *)v16 + 129);
    v22 = v17[11];
    v91 = a3;
    v92 = v12;
    v23 = (char *)v15 + v22;
    v24 = (char *)v16 + v22;
    v25 = type metadata accessor for ArtworkCrop(0);
    v26 = v23;
    v27 = v24;
    a3 = v91;
    v12 = v92;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v26, v27, v25);
    *(_OWORD *)((char *)v15 + v17[12]) = *(_OWORD *)((char *)v16 + v17[12]);
    *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
    *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
    *((_BYTE *)v15 + v17[15]) = *((_BYTE *)v16 + v17[15]);
    *(_OWORD *)((char *)v15 + v17[16]) = *(_OWORD *)((char *)v16 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v28 = v7[13];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  if (v19((_OWORD *)(a2 + v28), 1, v17))
  {
    v31 = sub_100005150(&qword_100081030);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    *(_OWORD *)((char *)v29 + 40) = *(_OWORD *)((char *)v30 + 40);
    *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
    *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
    *(_OWORD *)((char *)v29 + 113) = *(_OWORD *)((char *)v30 + 113);
    *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v30 + 104);
    *(_OWORD *)((char *)v29 + 88) = *(_OWORD *)((char *)v30 + 88);
    *(_OWORD *)((char *)v29 + 72) = *(_OWORD *)((char *)v30 + 72);
    *((_BYTE *)v29 + 129) = *((_BYTE *)v30 + 129);
    v33 = v17[11];
    v34 = v12;
    v35 = (char *)v29 + v33;
    v36 = a3;
    v37 = (char *)v30 + v33;
    v38 = type metadata accessor for ArtworkCrop(0);
    v39 = v35;
    v12 = v34;
    v40 = v37;
    a3 = v36;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v39, v40, v38);
    *(_OWORD *)((char *)v29 + v17[12]) = *(_OWORD *)((char *)v30 + v17[12]);
    *((_BYTE *)v29 + v17[13]) = *((_BYTE *)v30 + v17[13]);
    *((_BYTE *)v29 + v17[14]) = *((_BYTE *)v30 + v17[14]);
    *((_BYTE *)v29 + v17[15]) = *((_BYTE *)v30 + v17[15]);
    *(_OWORD *)((char *)v29 + v17[16]) = *(_OWORD *)((char *)v30 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v93 + 56))(v29, 0, 1, v17);
  }
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v41 = v7[15];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = sub_100005150(&qword_100081038);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  *(_BYTE *)(a1 + v7[16]) = *(_BYTE *)(a2 + v7[16]);
  v47 = v7[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = v7[19];
  v54 = (void *)(a1 + v53);
  v55 = (const void *)(a2 + v53);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v94)(a2 + v53, 1, v95))
  {
    v56 = sub_100005150(&qword_100081028);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v54, v55, v95);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v54, 0, 1, v95);
  }
  v57 = v7[20];
  v58 = (void *)(a1 + v57);
  v59 = (const void *)(a2 + v57);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v94)(a2 + v57, 1, v95))
  {
    v60 = sub_100005150(&qword_100081028);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v58, v59, v95);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v58, 0, 1, v95);
  }
  v61 = v7[21];
  v62 = a1 + v61;
  v63 = a2 + v61;
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  v64 = v7[22];
  v65 = (char *)(a1 + v64);
  v66 = (char *)(a2 + v64);
  v67 = sub_100005150(&qword_100081040);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    v69 = sub_100005150(&qword_100081048);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v70 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v70(v65, v66, v95);
    v70(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v95);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v71 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v72 = v71[5];
  v73 = &v65[v72];
  v74 = &v66[v72];
  v75 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v71[6];
  v77 = &v65[v76];
  v78 = &v66[v76];
  v79 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_100005150(&qword_100081050);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  *(_OWORD *)&v65[v71[7]] = *(_OWORD *)&v66[v71[7]];
  *(_OWORD *)&v65[v71[8]] = *(_OWORD *)&v66[v71[8]];
  v82 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v82) = *(_BYTE *)(a2 + v82);
  v83 = a3[7];
  v84 = (void *)(a1 + v83);
  v85 = (const void *)(a2 + v83);
  v86 = type metadata accessor for EpisodeViewStyle(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v85, v86);
  if (EnumCaseMultiPayload == 1)
  {
    v89 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v84, v85, v89);
    swift_storeEnumTagMultiPayload(v84, v86, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
  }
  else
  {
    v88 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v84, v85, v88);
    swift_storeEnumTagMultiPayload(v84, v86, 0);
  }
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

_QWORD *sub_10002899C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  int v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  int EnumCaseMultiPayload;
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  _OWORD *v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _OWORD *v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  _QWORD *v154;
  int v155;
  int v156;
  void *v157;
  _QWORD *v158;
  int v159;
  int v160;
  void *v161;
  _QWORD *v162;
  int v163;
  int v164;
  void *v165;
  _QWORD *v166;
  int v167;
  int v168;
  void *v169;
  _QWORD *v170;
  int v171;
  int v172;
  void *v173;
  _QWORD *v174;
  int v175;
  int v176;
  void *v177;
  _QWORD *v178;
  int v179;
  int v180;
  void *v181;
  _QWORD *v182;
  int v183;
  int v184;
  void *v185;
  _QWORD *v186;
  int v187;
  int v188;
  void *v189;
  _QWORD *v190;
  int v191;
  int v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t (*v227)(char *, uint64_t, uint64_t);
  int *v228;
  uint64_t v229;
  _QWORD *v230;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a1[6];
  a1[6] = a2[6];
  swift_release(v12);
  v13 = a2[8];
  v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = a2[10];
  v16 = a1[10];
  a1[9] = a2[9];
  a1[10] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v18 = v17[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  v227 = v23;
  v228 = a3;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100005150(&qword_100081028);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[11];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v17[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v226 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v226 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  v229 = v22;
  if (v38)
  {
    if (!v39)
    {
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_OWORD *)(v34 + 16) = v40;
      *(_BYTE *)(v34 + 32) = v35[32];
      *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
      *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
      *(_BYTE *)(v34 + 64) = v35[64];
      *(_OWORD *)(v34 + 113) = *(_OWORD *)(v35 + 113);
      *(_OWORD *)(v34 + 104) = *(_OWORD *)(v35 + 104);
      *(_OWORD *)(v34 + 88) = *(_OWORD *)(v35 + 88);
      *(_OWORD *)(v34 + 72) = *(_OWORD *)(v35 + 72);
      *(_BYTE *)(v34 + 129) = v35[129];
      v41 = v36[11];
      v42 = v34 + v41;
      v43 = &v35[v41];
      v44 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      *(_OWORD *)(v34 + v36[12]) = *(_OWORD *)&v35[v36[12]];
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      *(_OWORD *)(v34 + v36[16]) = *(_OWORD *)&v35[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v226 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_12:
    v45 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  v139 = *((_QWORD *)v35 + 1);
  v140 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v139;
  swift_bridgeObjectRelease(v140);
  v141 = v35 + 16;
  v142 = *(unsigned __int8 *)(v34 + 32);
  if (v142 != 255)
  {
    v143 = v35[32];
    if (v143 != 255)
    {
      v144 = *(_QWORD *)(v34 + 16);
      v145 = *(_QWORD *)(v34 + 24);
      *(_OWORD *)(v34 + 16) = *v141;
      *(_BYTE *)(v34 + 32) = v143;
      sub_100005624(v144, v145, v142);
      goto LABEL_75;
    }
    sub_100007770(v34 + 16);
  }
  *(_OWORD *)(v34 + 16) = *v141;
  *(_BYTE *)(v34 + 32) = v35[32];
LABEL_75:
  *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
  v154 = v35 + 56;
  v155 = *(unsigned __int8 *)(v34 + 64);
  if (v155 != 255)
  {
    v156 = v35[64];
    if (v156 != 255)
    {
      v157 = *(void **)(v34 + 56);
      *(_QWORD *)(v34 + 56) = *v154;
      *(_BYTE *)(v34 + 64) = v156;
      sub_10000563C(v157, v155);
      goto LABEL_85;
    }
    sub_1000077A4(v34 + 56);
  }
  *(_QWORD *)(v34 + 56) = *v154;
  *(_BYTE *)(v34 + 64) = v35[64];
LABEL_85:
  v162 = v35 + 72;
  v163 = *(unsigned __int8 *)(v34 + 80);
  if (v163 != 255)
  {
    v164 = v35[80];
    if (v164 != 255)
    {
      v165 = *(void **)(v34 + 72);
      *(_QWORD *)(v34 + 72) = *v162;
      *(_BYTE *)(v34 + 80) = v164;
      sub_10000563C(v165, v163);
      goto LABEL_95;
    }
    sub_1000077A4(v34 + 72);
  }
  *(_QWORD *)(v34 + 72) = *v162;
  *(_BYTE *)(v34 + 80) = v35[80];
LABEL_95:
  v170 = v35 + 88;
  v171 = *(unsigned __int8 *)(v34 + 96);
  if (v171 != 255)
  {
    v172 = v35[96];
    if (v172 != 255)
    {
      v173 = *(void **)(v34 + 88);
      *(_QWORD *)(v34 + 88) = *v170;
      *(_BYTE *)(v34 + 96) = v172;
      sub_10000563C(v173, v171);
      goto LABEL_105;
    }
    sub_1000077A4(v34 + 88);
  }
  *(_QWORD *)(v34 + 88) = *v170;
  *(_BYTE *)(v34 + 96) = v35[96];
LABEL_105:
  v178 = v35 + 104;
  v179 = *(unsigned __int8 *)(v34 + 112);
  if (v179 != 255)
  {
    v180 = v35[112];
    if (v180 != 255)
    {
      v181 = *(void **)(v34 + 104);
      *(_QWORD *)(v34 + 104) = *v178;
      *(_BYTE *)(v34 + 112) = v180;
      sub_10000563C(v181, v179);
      goto LABEL_115;
    }
    sub_1000077A4(v34 + 104);
  }
  *(_QWORD *)(v34 + 104) = *v178;
  *(_BYTE *)(v34 + 112) = v35[112];
LABEL_115:
  v186 = v35 + 120;
  v187 = *(unsigned __int8 *)(v34 + 128);
  if (v187 == 255)
  {
LABEL_124:
    *(_QWORD *)(v34 + 120) = *v186;
    *(_BYTE *)(v34 + 128) = v35[128];
    goto LABEL_125;
  }
  v188 = v35[128];
  if (v188 == 255)
  {
    sub_1000077A4(v34 + 120);
    goto LABEL_124;
  }
  v189 = *(void **)(v34 + 120);
  *(_QWORD *)(v34 + 120) = *v186;
  *(_BYTE *)(v34 + 128) = v188;
  sub_10000563C(v189, v187);
LABEL_125:
  *(_BYTE *)(v34 + 129) = v35[129];
  v194 = v36[11];
  v195 = v34 + v194;
  v196 = &v35[v194];
  v197 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v197 - 8) + 40))(v195, v196, v197);
  v198 = v36[12];
  v199 = (_QWORD *)(v34 + v198);
  v200 = &v35[v198];
  v202 = *(_QWORD *)v200;
  v201 = *((_QWORD *)v200 + 1);
  v203 = v199[1];
  *v199 = v202;
  v199[1] = v201;
  swift_bridgeObjectRelease(v203);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v204 = v36[16];
  v205 = (_QWORD *)(v34 + v204);
  v206 = &v35[v204];
  v208 = *(_QWORD *)v206;
  v207 = *((_QWORD *)v206 + 1);
  v209 = v205[1];
  *v205 = v208;
  v205[1] = v207;
  swift_bridgeObjectRelease(v209);
LABEL_13:
  v46 = v17[13];
  v47 = (uint64_t)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = v37((uint64_t)a1 + v46, 1, v36);
  v50 = v37((uint64_t)v48, 1, v36);
  if (v49)
  {
    if (!v50)
    {
      v51 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v51;
      *(_BYTE *)(v47 + 32) = v48[32];
      *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
      *(_QWORD *)(v47 + 56) = *((_QWORD *)v48 + 7);
      *(_BYTE *)(v47 + 64) = v48[64];
      *(_OWORD *)(v47 + 113) = *(_OWORD *)(v48 + 113);
      *(_OWORD *)(v47 + 104) = *(_OWORD *)(v48 + 104);
      *(_OWORD *)(v47 + 88) = *(_OWORD *)(v48 + 88);
      *(_OWORD *)(v47 + 72) = *(_OWORD *)(v48 + 72);
      *(_BYTE *)(v47 + 129) = v48[129];
      v52 = v36[11];
      v53 = v47 + v52;
      v54 = &v48[v52];
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
      *(_OWORD *)(v47 + v36[12]) = *(_OWORD *)&v48[v36[12]];
      *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
      *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
      *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
      *(_OWORD *)(v47 + v36[16]) = *(_OWORD *)&v48[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v226 + 56))(v47, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    sub_10000EF80(v47, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_18:
    v56 = sub_100005150(&qword_100081030);
    memcpy((void *)v47, v48, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_19;
  }
  v146 = *((_QWORD *)v48 + 1);
  v147 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v47 + 8) = v146;
  swift_bridgeObjectRelease(v147);
  v148 = v48 + 16;
  v149 = *(unsigned __int8 *)(v47 + 32);
  if (v149 != 255)
  {
    v150 = v48[32];
    if (v150 != 255)
    {
      v151 = *(_QWORD *)(v47 + 16);
      v152 = *(_QWORD *)(v47 + 24);
      *(_OWORD *)(v47 + 16) = *v148;
      *(_BYTE *)(v47 + 32) = v150;
      sub_100005624(v151, v152, v149);
      goto LABEL_80;
    }
    sub_100007770(v47 + 16);
  }
  *(_OWORD *)(v47 + 16) = *v148;
  *(_BYTE *)(v47 + 32) = v48[32];
LABEL_80:
  *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
  v158 = v48 + 56;
  v159 = *(unsigned __int8 *)(v47 + 64);
  if (v159 != 255)
  {
    v160 = v48[64];
    if (v160 != 255)
    {
      v161 = *(void **)(v47 + 56);
      *(_QWORD *)(v47 + 56) = *v158;
      *(_BYTE *)(v47 + 64) = v160;
      sub_10000563C(v161, v159);
      goto LABEL_90;
    }
    sub_1000077A4(v47 + 56);
  }
  *(_QWORD *)(v47 + 56) = *v158;
  *(_BYTE *)(v47 + 64) = v48[64];
LABEL_90:
  v166 = v48 + 72;
  v167 = *(unsigned __int8 *)(v47 + 80);
  if (v167 != 255)
  {
    v168 = v48[80];
    if (v168 != 255)
    {
      v169 = *(void **)(v47 + 72);
      *(_QWORD *)(v47 + 72) = *v166;
      *(_BYTE *)(v47 + 80) = v168;
      sub_10000563C(v169, v167);
      goto LABEL_100;
    }
    sub_1000077A4(v47 + 72);
  }
  *(_QWORD *)(v47 + 72) = *v166;
  *(_BYTE *)(v47 + 80) = v48[80];
LABEL_100:
  v174 = v48 + 88;
  v175 = *(unsigned __int8 *)(v47 + 96);
  if (v175 != 255)
  {
    v176 = v48[96];
    if (v176 != 255)
    {
      v177 = *(void **)(v47 + 88);
      *(_QWORD *)(v47 + 88) = *v174;
      *(_BYTE *)(v47 + 96) = v176;
      sub_10000563C(v177, v175);
      goto LABEL_110;
    }
    sub_1000077A4(v47 + 88);
  }
  *(_QWORD *)(v47 + 88) = *v174;
  *(_BYTE *)(v47 + 96) = v48[96];
LABEL_110:
  v182 = v48 + 104;
  v183 = *(unsigned __int8 *)(v47 + 112);
  if (v183 != 255)
  {
    v184 = v48[112];
    if (v184 != 255)
    {
      v185 = *(void **)(v47 + 104);
      *(_QWORD *)(v47 + 104) = *v182;
      *(_BYTE *)(v47 + 112) = v184;
      sub_10000563C(v185, v183);
      goto LABEL_120;
    }
    sub_1000077A4(v47 + 104);
  }
  *(_QWORD *)(v47 + 104) = *v182;
  *(_BYTE *)(v47 + 112) = v48[112];
LABEL_120:
  v190 = v48 + 120;
  v191 = *(unsigned __int8 *)(v47 + 128);
  if (v191 == 255)
  {
LABEL_127:
    *(_QWORD *)(v47 + 120) = *v190;
    *(_BYTE *)(v47 + 128) = v48[128];
    goto LABEL_128;
  }
  v192 = v48[128];
  if (v192 == 255)
  {
    sub_1000077A4(v47 + 120);
    goto LABEL_127;
  }
  v193 = *(void **)(v47 + 120);
  *(_QWORD *)(v47 + 120) = *v190;
  *(_BYTE *)(v47 + 128) = v192;
  sub_10000563C(v193, v191);
LABEL_128:
  *(_BYTE *)(v47 + 129) = v48[129];
  v210 = v36[11];
  v211 = v47 + v210;
  v212 = &v48[v210];
  v213 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v213 - 8) + 40))(v211, v212, v213);
  v214 = v36[12];
  v215 = (_QWORD *)(v47 + v214);
  v216 = &v48[v214];
  v218 = *(_QWORD *)v216;
  v217 = *((_QWORD *)v216 + 1);
  v219 = v215[1];
  *v215 = v218;
  v215[1] = v217;
  swift_bridgeObjectRelease(v219);
  *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
  *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
  *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
  v220 = v36[16];
  v221 = (_QWORD *)(v47 + v220);
  v222 = &v48[v220];
  v224 = *(_QWORD *)v222;
  v223 = *((_QWORD *)v222 + 1);
  v225 = v221[1];
  *v221 = v224;
  v221[1] = v223;
  swift_bridgeObjectRelease(v225);
LABEL_19:
  v57 = v17[14];
  v58 = *(void **)((char *)a1 + v57);
  *(_QWORD *)((char *)a1 + v57) = *(_QWORD *)((char *)a2 + v57);

  v59 = v17[15];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    v67 = v229;
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v67 = v229;
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
LABEL_24:
    v68 = sub_100005150(&qword_100081038);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v60, v61, v62);
LABEL_25:
  *((_BYTE *)a1 + v17[16]) = *((_BYTE *)a2 + v17[16]);
  v69 = v17[17];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  v72 = v17[18];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v17[19];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = v227((char *)a1 + v75, 1, v21);
  v79 = v227(v77, 1, v21);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v76, v77, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v76, 0, 1, v21);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v76, v21);
LABEL_30:
    v80 = sub_100005150(&qword_100081028);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v76, v77, v21);
LABEL_31:
  v81 = v17[20];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = v227((char *)a1 + v81, 1, v21);
  v85 = v227(v83, 1, v21);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v82, v83, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v82, 0, 1, v21);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v82, v21);
LABEL_36:
    v86 = sub_100005150(&qword_100081028);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v82, v83, v21);
LABEL_37:
  v87 = v17[21];
  v88 = (_QWORD *)((char *)a1 + v87);
  v89 = (_QWORD *)((char *)a2 + v87);
  v90 = *(_QWORD *)((char *)a1 + v87);
  if (v90)
  {
    if (*v89)
    {
      *v88 = *v89;
      swift_release(v90);
      v91 = v88[1];
      v88[1] = v89[1];
      swift_release(v91);
      v92 = v88[2];
      v88[2] = v89[2];
      swift_release(v92);
      goto LABEL_42;
    }
    sub_100007814(v88);
  }
  *(_OWORD *)v88 = *(_OWORD *)v89;
  v88[2] = v89[2];
LABEL_42:
  v93 = v17[22];
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  v96 = sub_100005150(&qword_100081040);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  v230 = a2;
  if (v99)
  {
    if (!v100)
    {
      v101 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v101(v94, v95, v21);
      v101(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v100)
  {
    sub_10000F008((uint64_t)v94, &qword_100081040);
LABEL_47:
    v102 = sub_100005150(&qword_100081048);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_48;
  }
  v153 = *(void (**)(char *, char *, uint64_t))(v67 + 40);
  v153(v94, v95, v21);
  v153(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
LABEL_48:
  v103 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v104 = v103[5];
  v105 = &v94[v104];
  v106 = &v95[v104];
  v107 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 40))(v105, v106, v107);
  v108 = v103[6];
  v109 = &v94[v108];
  v110 = &v95[v108];
  v111 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  v114 = v113(v109, 1, v111);
  v115 = v113(v110, 1, v111);
  if (v114)
  {
    v116 = v230;
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v109, v110, v111);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  v116 = v230;
  if (v115)
  {
    (*(void (**)(char *, uint64_t))(v112 + 8))(v109, v111);
LABEL_53:
    v117 = sub_100005150(&qword_100081050);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 40))(v109, v110, v111);
LABEL_54:
  v118 = v103[7];
  v119 = &v94[v118];
  v120 = &v95[v118];
  v122 = *(_QWORD *)v120;
  v121 = *((_QWORD *)v120 + 1);
  v123 = *((_QWORD *)v119 + 1);
  *(_QWORD *)v119 = v122;
  *((_QWORD *)v119 + 1) = v121;
  swift_bridgeObjectRelease(v123);
  v124 = v103[8];
  v125 = &v94[v124];
  v126 = &v95[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  v130 = v228[6];
  *(_QWORD *)((char *)a1 + v228[5]) = *(_QWORD *)((char *)v116 + v228[5]);
  *((_BYTE *)a1 + v130) = *((_BYTE *)v116 + v130);
  if (a1 != v116)
  {
    v131 = v228[7];
    v132 = (char *)a1 + v131;
    v133 = (char *)v116 + v131;
    sub_10000EF80((uint64_t)a1 + v131, type metadata accessor for EpisodeViewStyle);
    v134 = type metadata accessor for EpisodeViewStyle(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v133, v134);
    if (EnumCaseMultiPayload == 1)
    {
      v137 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v132, v133, v137);
      swift_storeEnumTagMultiPayload(v132, v134, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    }
    else
    {
      v136 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 32))(v132, v133, v136);
      swift_storeEnumTagMultiPayload(v132, v134, 0);
    }
  }
  *(_QWORD *)((char *)a1 + v228[8]) = *(_QWORD *)((char *)v116 + v228[8]);
  return a1;
}

uint64_t sub_100029910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002991C);
}

uint64_t sub_10002991C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v6 = type metadata accessor for UpNextEntry.Episode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 253)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 2u)
      v9 = 2;
    else
      v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    v10 = v9 - 2;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 2u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = type metadata accessor for EpisodeViewStyle(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v11);
  }
}

uint64_t sub_1000299C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000299D4);
}

uint64_t sub_1000299D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UpNextEntry.Episode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 253)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
      return result;
    }
    v10 = type metadata accessor for EpisodeViewStyle(0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for EpisodeRowView(uint64_t a1)
{
  uint64_t result;

  result = qword_100081A80;
  if (!qword_100081A80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeRowView);
  return result;
}

uint64_t sub_100029AB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for UpNextEntry.Episode(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[2] = &unk_10006DD18;
    result = type metadata accessor for EpisodeViewStyle(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100029B4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071D5C, 1);
}

uint64_t sub_100029B5C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v30 = a1;
  v2 = type metadata accessor for EpisodeRowView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005150(&qword_100081038);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_100081AC8);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_100081AD0);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100005150(&qword_100081AD8);
  __chkstk_darwin(v29);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for UpNextEntry.Episode(0);
  sub_10000EFC4((uint64_t)v1 + *(int *)(v28 + 60), (uint64_t)v8, &qword_100081038);
  v17 = *(_QWORD *)((char *)v1 + *(int *)(v2 + 32));
  sub_10000EF3C((uint64_t)v1, (uint64_t)v5, type metadata accessor for EpisodeRowView);
  v18 = *(unsigned __int8 *)(v3 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_10007E558, v19 + v4, v18 | 7);
  sub_10000FC78((uint64_t)v5, v20 + v19, type metadata accessor for EpisodeRowView);
  sub_10000EEF8((uint64_t)v8, (uint64_t)v11, &qword_100081038);
  *(_QWORD *)&v11[*(int *)(v9 + 36)] = v17;
  v21 = (uint64_t (**)())&v11[*(int *)(v9 + 40)];
  *v21 = sub_10002B360;
  v21[1] = (uint64_t (*)())v20;
  sub_10000EFC4((uint64_t)v11, (uint64_t)v14, &qword_100081AC8);
  sub_10000F008((uint64_t)v11, &qword_100081AC8);
  v23 = *v1;
  v22 = v1[1];
  sub_10000EFC4((uint64_t)v14, (uint64_t)v16, &qword_100081AD0);
  v24 = &v16[*(int *)(v29 + 52)];
  *(_QWORD *)v24 = v23;
  *((_QWORD *)v24 + 1) = v22;
  swift_bridgeObjectRetain(v22);
  sub_10000F008((uint64_t)v14, &qword_100081AD0);
  v25 = *(_QWORD *)((char *)v1 + *(int *)(v28 + 84)) != 0;
  v31 = v1;
  sub_10003A28C(v25, (void (*)(uint64_t))sub_10002B39C, v30);
  return sub_10000F008((uint64_t)v16, &qword_100081AD8);
}

uint64_t sub_100029E14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __n128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;

  v2 = type metadata accessor for AccessibilityChildBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005150(&qword_100081AE8);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_100081AF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v10);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v13 = sub_100005150(&qword_100081AF8);
  v14 = sub_100029FE4(a1, (uint64_t)&v8[*(int *)(v13 + 44)]);
  v15 = static Edge.Set.horizontal.getter(v14);
  v16 = type metadata accessor for EpisodeRowView(0);
  v17.n128_u64[0] = *(_QWORD *)(a1 + *(int *)(v16 + 20));
  v18 = EdgeInsets.init(_all:)(v16, v17);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  sub_10000EFC4((uint64_t)v8, (uint64_t)v12, &qword_100081AE8);
  v25 = &v12[*(int *)(v9 + 36)];
  *v25 = v15;
  *((double *)v25 + 1) = v18;
  *((_QWORD *)v25 + 2) = v20;
  *((_QWORD *)v25 + 3) = v22;
  *((_QWORD *)v25 + 4) = v24;
  v25[40] = 0;
  v26 = sub_10000F008((uint64_t)v8, &qword_100081AE8);
  static AccessibilityChildBehavior.combine.getter(v26);
  v27 = sub_10002B3A4();
  View.accessibilityElement(children:)(v5, v9, v27);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_10000F008((uint64_t)v12, &qword_100081AF0);
}

uint64_t sub_100029FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __n128 v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;

  v108 = a2;
  v105 = type metadata accessor for PlayButtonSmall(0);
  __chkstk_darwin(v105);
  v104 = (uint64_t)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005150(&qword_100081B10);
  v5 = __chkstk_darwin(v4);
  v107 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v106 = (uint64_t)&v87 - v7;
  v101 = type metadata accessor for WidgetEmptyText(0);
  __chkstk_darwin(v101);
  v91 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100005150(&qword_100081B18);
  __chkstk_darwin(v98);
  v100 = (uint64_t)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005150(&qword_100081B20);
  __chkstk_darwin(v10);
  v88 = (uint64_t *)((char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v99 = sub_100005150(&qword_100081B28);
  v12 = __chkstk_darwin(v99);
  v89 = (uint64_t)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v90 = (uint64_t)&v87 - v14;
  v15 = sub_100005150(&qword_100081B30);
  v16 = __chkstk_darwin(v15);
  v103 = (uint64_t)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v109 = (uint64_t)&v87 - v18;
  v19 = type metadata accessor for EpisodeViewStyle(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UpNextEntry.Episode(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for WidgetArtworkView(0);
  v26 = __chkstk_darwin(v25);
  v102 = (uint64_t)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v87 - v29;
  __chkstk_darwin(v28);
  v32 = (char *)&v87 - v31;
  sub_10000EF3C(a1, (uint64_t)v24, type metadata accessor for UpNextEntry.Episode);
  v33 = type metadata accessor for EpisodeRowView(0);
  v34 = a1 + *(int *)(v33 + 28);
  sub_10000EF3C(v34, (uint64_t)v21, type metadata accessor for EpisodeViewStyle);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
    v35 = 8.0;
  else
    v35 = 6.0;
  sub_10000EF80((uint64_t)v21, type metadata accessor for EpisodeViewStyle);
  sub_10000FC78((uint64_t)v24, (uint64_t)v30, type metadata accessor for UpNextEntry.Episode);
  *(double *)&v30[*(int *)(v25 + 20)] = v35;
  v36 = (uint64_t)v32;
  v37 = sub_10000FC78((uint64_t)v30, (uint64_t)v32, type metadata accessor for WidgetArtworkView);
  v38 = static Alignment.center.getter(v37);
  v40 = _FrameLayout.init(width:height:alignment:)(&v110, 0x4028000000000000, 0, 0, 1, v38, v39);
  v97 = v110;
  v96 = v111;
  v95 = v112;
  v94 = v113;
  v93 = v114;
  v92 = v115;
  v41 = *(int *)(v33 + 24);
  v42 = a1;
  v43 = *(unsigned __int8 *)(a1 + v41);
  if (v43 == 2)
  {
    v44 = static HorizontalAlignment.leading.getter(v40);
    v45 = (uint64_t)v88;
    *v88 = v44;
    *(_QWORD *)(v45 + 8) = 0x4000000000000000;
    *(_BYTE *)(v45 + 16) = 0;
    v46 = sub_100005150(&qword_100081B38);
    v47 = sub_10002A828(a1, (uint64_t *)(v45 + *(int *)(v46 + 44)));
    v48 = static Edge.Set.vertical.getter(v47);
    v49 = v48;
    v50.n128_u64[0] = -2.0;
    v51 = EdgeInsets.init(_all:)(v48, v50);
    v53 = v52;
    v55 = v54;
    v57 = v56;
    v58 = v89;
    sub_10000EFC4(v45, v89, &qword_100081B20);
    v59 = v99;
    v60 = v58 + *(int *)(v99 + 36);
    *(_BYTE *)v60 = v49;
    *(double *)(v60 + 8) = v51;
    *(_QWORD *)(v60 + 16) = v53;
    *(_QWORD *)(v60 + 24) = v55;
    *(_QWORD *)(v60 + 32) = v57;
    *(_BYTE *)(v60 + 40) = 0;
    sub_10000F008(v45, &qword_100081B20);
    v61 = v90;
    sub_10000EEF8(v58, v90, &qword_100081B28);
    v62 = v100;
    sub_10000EFC4(v61, v100, &qword_100081B28);
    swift_storeEnumTagMultiPayload(v62, v98, 1);
    v63 = sub_10000FBAC((unint64_t *)&qword_100081B40, type metadata accessor for WidgetEmptyText, (uint64_t)&unk_10006E828);
    v64 = sub_10002B428();
    _ConditionalContent<>.init(storage:)(v62, v101, v59, v63, v64);
    sub_10000F008(v61, &qword_100081B28);
  }
  else
  {
    v65 = v43 & 1;
    v66 = v101;
    v67 = v91;
    sub_10000EF3C(v34, (uint64_t)&v91[*(int *)(v101 + 20)], type metadata accessor for EpisodeViewStyle);
    *v67 = v65;
    v68 = v100;
    sub_10000EF3C((uint64_t)v67, v100, type metadata accessor for WidgetEmptyText);
    swift_storeEnumTagMultiPayload(v68, v98, 0);
    v69 = sub_10000FBAC((unint64_t *)&qword_100081B40, type metadata accessor for WidgetEmptyText, (uint64_t)&unk_10006E828);
    v70 = sub_10002B428();
    _ConditionalContent<>.init(storage:)(v68, v66, v99, v69, v70);
    sub_10000EF80((uint64_t)v67, type metadata accessor for WidgetEmptyText);
  }
  v71 = v104;
  sub_10000EF3C(v42, v104, type metadata accessor for UpNextEntry.Episode);
  v72 = v105;
  v73 = v71 + *(int *)(v105 + 20);
  *(_QWORD *)v73 = swift_getKeyPath(&unk_10006DD80);
  *(_BYTE *)(v73 + 8) = 0;
  v74 = sub_10000FBAC(&qword_100081B58, type metadata accessor for PlayButtonSmall, (uint64_t)&unk_10006D298);
  v75 = (uint64_t)v107;
  View.accessibilityHidden(_:)(1, v72, v74);
  sub_10000EF80(v71, type metadata accessor for PlayButtonSmall);
  v76 = v106;
  sub_10000EEF8(v75, v106, &qword_100081B10);
  v77 = v36;
  v78 = v102;
  sub_10000EF3C(v36, v102, type metadata accessor for WidgetArtworkView);
  v79 = v109;
  v80 = v103;
  sub_10000EFC4(v109, v103, &qword_100081B30);
  sub_10000EFC4(v76, v75, &qword_100081B10);
  v81 = v108;
  sub_10000EF3C(v78, v108, type metadata accessor for WidgetArtworkView);
  v82 = (int *)sub_100005150(&qword_100081B60);
  v83 = v81 + v82[12];
  *(_QWORD *)v83 = 0;
  *(_BYTE *)(v83 + 8) = 1;
  *(_QWORD *)(v83 + 16) = v97;
  *(_BYTE *)(v83 + 24) = v96;
  *(_QWORD *)(v83 + 32) = v95;
  *(_BYTE *)(v83 + 40) = v94;
  v84 = v92;
  *(_QWORD *)(v83 + 48) = v93;
  *(_QWORD *)(v83 + 56) = v84;
  sub_10000EFC4(v80, v81 + v82[16], &qword_100081B30);
  v85 = v81 + v82[20];
  *(_QWORD *)v85 = 0x4028000000000000;
  *(_BYTE *)(v85 + 8) = 0;
  sub_10000EFC4(v75, v81 + v82[24], &qword_100081B10);
  sub_10000F008(v76, &qword_100081B10);
  sub_10000F008(v79, &qword_100081B30);
  sub_10000EF80(v77, type metadata accessor for WidgetArtworkView);
  sub_10000F008(v75, &qword_100081B10);
  sub_10000F008(v80, &qword_100081B30);
  return sub_10000EF80(v78, type metadata accessor for WidgetArtworkView);
}

uint64_t sub_10002A828@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  _QWORD v71[3];

  v70 = a2;
  v3 = type metadata accessor for BlendMode(0);
  v68 = *(_QWORD *)(v3 - 8);
  v69 = v3;
  __chkstk_darwin(v3);
  v67 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Color.RGBColorSpace(0);
  v64 = *(_QWORD *)(v5 - 8);
  v65 = v5;
  __chkstk_darwin(v5);
  v62 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100005150(&qword_100081B68);
  __chkstk_darwin(v66);
  v63 = (uint64_t)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for EpisodeCaptionView(0);
  __chkstk_darwin(v57);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100005150(&qword_100081B70);
  __chkstk_darwin(v58);
  v56 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100005150(&qword_100081B78);
  v11 = __chkstk_darwin(v60);
  v59 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v61 = (uint64_t)&v53 - v13;
  v14 = type metadata accessor for Font.Leading(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = a1;
  v18 = *(_QWORD *)(a1 + 80);
  v71[0] = *(_QWORD *)(a1 + 72);
  v71[1] = v18;
  v19 = sub_1000248B8();
  swift_bridgeObjectRetain(v18);
  v20 = Text.init<A>(_:)(v71, &type metadata for String, v19);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = static Font.footnote.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for Font.Leading.tight(_:), v14);
  v28 = Font.leading(_:)(v17, v27);
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v29 = Text.font(_:)(v28, v20, v22, v26, v24);
  v54 = v30;
  v55 = v31;
  LOBYTE(v14) = v32;
  swift_release(v28);
  LOBYTE(v14) = v14 & 1;
  sub_10000EEE8(v20, v22, v26);
  swift_bridgeObjectRelease(v24);
  v33 = sub_10000EF3C(v53, (uint64_t)v9, type metadata accessor for UpNextEntry.Episode);
  v34 = v57;
  v9[*(int *)(v57 + 20)] = 0;
  v9[*(int *)(v34 + 24)] = 1;
  v9[*(int *)(v34 + 28)] = 1;
  v35 = static Font.caption2.getter(v33);
  KeyPath = swift_getKeyPath(&unk_10006DDA8);
  v37 = v56;
  sub_10000EF3C((uint64_t)v9, v56, type metadata accessor for EpisodeCaptionView);
  v38 = (uint64_t *)(v37 + *(int *)(v58 + 36));
  *v38 = KeyPath;
  v38[1] = v35;
  sub_10000EF80((uint64_t)v9, type metadata accessor for EpisodeCaptionView);
  v39 = v62;
  (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v62, enum case for Color.RGBColorSpace.sRGB(_:), v65);
  v40 = Color.init(_:red:green:blue:opacity:)(v39, 0.921568627, 0.921568627, 0.960784314, 0.4);
  v41 = v63;
  sub_10000EFC4(v37, v63, &qword_100081B70);
  v42 = v67;
  *(_QWORD *)(v41 + *(int *)(v66 + 36)) = v40;
  v44 = v68;
  v43 = v69;
  (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v42, enum case for BlendMode.plusLighter(_:), v69);
  v45 = (uint64_t)v59;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(&v59[*(int *)(v60 + 36)], v42, v43);
  sub_10000EFC4(v41, v45, &qword_100081B68);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v43);
  sub_10000F008(v41, &qword_100081B68);
  sub_10000F008(v37, &qword_100081B70);
  v46 = v61;
  sub_10000EEF8(v45, v61, &qword_100081B78);
  sub_10000EFC4(v46, v45, &qword_100081B78);
  v47 = v70;
  v49 = v54;
  v48 = v55;
  *v70 = v29;
  v47[1] = v49;
  *((_BYTE *)v47 + 16) = v14;
  v47[3] = v48;
  v50 = v47;
  v51 = sub_100005150(&qword_100081B80);
  sub_10000EFC4(v45, (uint64_t)v50 + *(int *)(v51 + 48), &qword_100081B78);
  sub_100024C4C(v29, v49, v14);
  swift_bridgeObjectRetain(v48);
  sub_10000F008(v46, &qword_100081B78);
  sub_10000F008(v45, &qword_100081B78);
  sub_10000EEE8(v29, v49, v14);
  return swift_bridgeObjectRelease(v48);
}

uint64_t sub_10002AD30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[3];
  _QWORD v17[2];

  v3 = type metadata accessor for UpNextEntry.Episode(0);
  v4 = a2 + *(int *)(v3 + 88);
  result = type metadata accessor for WidgetPredictedPlayState(0);
  v6 = (_QWORD *)(v4 + *(int *)(result + 32));
  v7 = v6[1];
  v17[0] = *v6;
  v17[1] = v7;
  v8 = (uint64_t *)(a2 + *(int *)(v3 + 84));
  v9 = *v8;
  if (*v8)
  {
    v10 = v8[1];
    v11 = v8[2];
    v16[0] = *v8;
    v16[1] = v10;
    v16[2] = v11;
    swift_bridgeObjectRetain(v7);
    sub_1000093E0(v9, v10, v11);
    v12 = sub_100005150(&qword_100081AD8);
    v13 = sub_10000EEA8(&qword_100081AE0, &qword_100081AD8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    v14 = sub_1000248B8();
    v15 = sub_100009418();
    View.accessibilityAction<A, B>(named:intent:)(v17, v16, v12, &type metadata for String, &type metadata for PlayPauseWidgetIntent, v13, v14, v15);
    swift_bridgeObjectRelease(v7);
    swift_release(v11);
    swift_release(v10);
    return swift_release(v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002AE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  int *v13;
  unsigned int (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = v0;
  v2 = type metadata accessor for EpisodeRowView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v56 = v2;
  v57 = *(_QWORD *)(v3 + 64);
  v6 = v1 + v5;
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v5 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v5 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v5 + 40));
  swift_release(*(_QWORD *)(v1 + v5 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v5 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v5 + 80));
  v7 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v8 = v1 + v5 + v7[10];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v55 = v10;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[11] + 8));
  v12 = v6 + v7[12];
  v13 = (int *)type metadata accessor for ArtworkModel(0);
  v14 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48);
  if (!v14(v12, 1, v13))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
    v15 = *(unsigned __int8 *)(v12 + 32);
    if (v15 != 255)
      sub_100005624(*(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), v15);
    v16 = *(unsigned __int8 *)(v12 + 64);
    if (v16 != 255)
      sub_10000563C(*(id *)(v12 + 56), v16);
    v17 = *(unsigned __int8 *)(v12 + 80);
    if (v17 != 255)
      sub_10000563C(*(id *)(v12 + 72), v17);
    v54 = (v4 + 16) & ~v4;
    v18 = *(unsigned __int8 *)(v12 + 96);
    if (v18 != 255)
      sub_10000563C(*(id *)(v12 + 88), v18);
    v19 = v4;
    v20 = *(unsigned __int8 *)(v12 + 112);
    if (v20 != 255)
      sub_10000563C(*(id *)(v12 + 104), v20);
    v21 = v1;
    v22 = *(unsigned __int8 *)(v12 + 128);
    if (v22 != 255)
      sub_10000563C(*(id *)(v12 + 120), v22);
    v23 = v12 + v13[11];
    v24 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[16] + 8));
    v1 = v21;
    v4 = v19;
    v5 = v54;
  }
  v25 = v6 + v7[13];
  if (!v14(v25, 1, v13))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + 8));
    v26 = *(unsigned __int8 *)(v25 + 32);
    if (v26 != 255)
      sub_100005624(*(_QWORD *)(v25 + 16), *(_QWORD *)(v25 + 24), v26);
    v27 = *(unsigned __int8 *)(v25 + 64);
    if (v27 != 255)
      sub_10000563C(*(id *)(v25 + 56), v27);
    v28 = *(unsigned __int8 *)(v25 + 80);
    if (v28 != 255)
      sub_10000563C(*(id *)(v25 + 72), v28);
    v29 = *(unsigned __int8 *)(v25 + 96);
    if (v29 != 255)
      sub_10000563C(*(id *)(v25 + 88), v29);
    v30 = *(unsigned __int8 *)(v25 + 112);
    if (v30 != 255)
      sub_10000563C(*(id *)(v25 + 104), v30);
    v31 = v1;
    v32 = *(unsigned __int8 *)(v25 + 128);
    if (v32 != 255)
      sub_10000563C(*(id *)(v25 + 120), v32);
    v33 = v25 + v13[11];
    v34 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v13[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + v13[16] + 8));
    v1 = v31;
  }

  v35 = v6 + v7[15];
  v36 = type metadata accessor for URL(0);
  v37 = *(_QWORD *)(v36 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
  v38 = v6 + v7[19];
  if (!v11(v38, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v38, v9);
  v39 = v6 + v7[20];
  if (!v11(v39, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v39, v9);
  v40 = (_QWORD *)(v6 + v7[21]);
  if (*v40)
  {
    swift_release(*v40);
    swift_release(v40[1]);
    swift_release(v40[2]);
  }
  v41 = v6 + v7[22];
  v42 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v41, 1, v42))
  {
    v43 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v43(v41, v9);
    v43(v41 + *(int *)(v42 + 36), v9);
  }
  v44 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v45 = v41 + v44[5];
  v46 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v45, v46);
  v47 = v41 + v44[6];
  v48 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v49 = *(_QWORD *)(v48 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  swift_bridgeObjectRelease(*(_QWORD *)(v41 + v44[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v41 + v44[8] + 8));
  v50 = v6 + *(int *)(v56 + 28);
  v51 = type metadata accessor for EpisodeViewStyle(0);
  if (swift_getEnumCaseMultiPayload(v50, v51) <= 1)
  {
    v52 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v50, v52);
  }
  return swift_deallocObject(v1, v5 + v57, v4 | 7);
}

uint64_t sub_10002B360()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EpisodeRowView(0) - 8) + 80);
  return sub_100029E14(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10002B39C(uint64_t a1)
{
  uint64_t v1;

  return sub_10002AD30(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_10002B3A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081B00;
  if (!qword_100081B00)
  {
    v1 = sub_10000950C(&qword_100081AF0);
    sub_10000EEA8(&qword_100081B08, &qword_100081AE8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081B00);
  }
  return result;
}

unint64_t sub_10002B428()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081B48;
  if (!qword_100081B48)
  {
    v1 = sub_10000950C(&qword_100081B28);
    sub_10000EEA8(&qword_100081B50, &qword_100081B20, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081B48);
  }
  return result;
}

unint64_t sub_10002B4BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081B88;
  if (!qword_100081B88)
  {
    v1 = sub_10000950C(&qword_100081B90);
    sub_10002B540();
    sub_10000EEA8(&qword_100081AE0, &qword_100081AD8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081B88);
  }
  return result;
}

unint64_t sub_10002B540()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081B98;
  if (!qword_100081B98)
  {
    v1 = sub_10000950C(&qword_100081BA0);
    sub_10000EEA8(&qword_100081AE0, &qword_100081AD8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_10000FBAC((unint64_t *)&qword_100081228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081B98);
  }
  return result;
}

uint64_t *sub_10002B5DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = sub_100005150(&qword_100081040);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100005150(&qword_100081048);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for Date(0);
      v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v12(a1, a2, v11);
      v12((uint64_t *)((char *)a1 + *(int *)(v7 + 36)), (uint64_t *)((char *)a2 + *(int *)(v7 + 36)), v11);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v13 = a3[5];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for PlaybackButton.State(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[6];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_100005150(&qword_100081050);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = a3[7];
    v24 = a3[8];
    v25 = (uint64_t *)((char *)a1 + v23);
    v26 = (uint64_t *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = (uint64_t *)((char *)a1 + v24);
    v29 = (uint64_t *)((char *)a2 + v24);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v30);
  }
  return a1;
}

uint64_t sub_10002B7C8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v6(a1, v5);
    v6(a1 + *(int *)(v4 + 36), v5);
  }
  v7 = a1 + a2[5];
  v8 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[6];
  v10 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

char *sub_10002B8D4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = sub_100005150(&qword_100081040);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100005150(&qword_100081048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v10(a1, a2, v9);
    v10(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100005150(&qword_100081050);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[7];
  v22 = a3[8];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = v25;
  v26 = &a1[v22];
  v27 = &a2[v22];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v28);
  return a1;
}

char *sub_10002BA94(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);

  v6 = sub_100005150(&qword_100081040);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for Date(0);
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v12(a1, a2, v11);
      v12(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_10000F008((uint64_t)a1, &qword_100081040);
LABEL_6:
    v13 = sub_100005150(&qword_100081048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  v38 = type metadata accessor for Date(0);
  v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 24);
  v39(a1, a2, v38);
  v39(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v38);
LABEL_7:
  v14 = a3[5];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = a3[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v26 = sub_100005150(&qword_100081050);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_13:
  v27 = a3[7];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v31 = *((_QWORD *)v28 + 1);
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[8];
  v33 = &a1[v32];
  v34 = &a2[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  v36 = *((_QWORD *)v33 + 1);
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  return a1;
}

char *sub_10002BD30(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_100005150(&qword_100081040);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100005150(&qword_100081048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    v10(a1, a2, v9);
    v10(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100005150(&qword_100081050);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
  return a1;
}

char *sub_10002BED4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);

  v6 = sub_100005150(&qword_100081040);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for Date(0);
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
      v12(a1, a2, v11);
      v12(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_10000F008((uint64_t)a1, &qword_100081040);
LABEL_6:
    v13 = sub_100005150(&qword_100081048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  v40 = type metadata accessor for Date(0);
  v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 40);
  v41(a1, a2, v40);
  v41(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v40);
LABEL_7:
  v14 = a3[5];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = a3[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v26 = sub_100005150(&qword_100081050);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_13:
  v27 = a3[7];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v31 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v32 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease(v32);
  v33 = a3[8];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  v38 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease(v38);
  return a1;
}

uint64_t sub_10002C150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002C15C);
}

uint64_t sub_10002C15C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = sub_100005150(&qword_100081048);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for PlaybackButton.State(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100005150(&qword_100081050);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_10002C234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002C240);
}

uint64_t sub_10002C240(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_100005150(&qword_100081048);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for PlaybackButton.State(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_100005150(&qword_100081050);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for WidgetPredictedPlayState(uint64_t a1)
{
  uint64_t result;

  result = qword_100081C00;
  if (!qword_100081C00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetPredictedPlayState);
  return result;
}

void sub_10002C350(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_10002C404(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for PlaybackButton.State(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10002C45C(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = &unk_10006DE20;
        v8[4] = &unk_10006DE38;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

void sub_10002C404(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100081C10)
  {
    v2 = sub_10000950C(&qword_100081040);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100081C10);
  }
}

void sub_10002C45C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100081C18)
  {
    v2 = type metadata accessor for PlayButtonTimeFormatHelper(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100081C18);
  }
}

void sub_10002C4B0(char a1@<W0>, double a2@<X1>, char a3@<W2>, double a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  double v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  double v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  uint64_t v81;
  id v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  uint64_t countAndFlagsBits;
  void *object;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  _QWORD *v96;
  uint64_t *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  void (*v105)(char *, char *, uint64_t);
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  double v116;
  uint64_t v117;
  id v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  void (*v133)(char *, char *, uint64_t);
  uint64_t v134;
  void (*v135)(char *, uint64_t);
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  id v142;
  Swift::String v143;
  Swift::String v144;
  Swift::String v145;
  uint64_t v146;
  int *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  double v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  Swift::String v171;
  Swift::String v172;
  Swift::String v173;
  Swift::String v174;

  v156 = a8;
  v157 = a7;
  v160 = a6;
  v159 = a5;
  v158 = a4;
  v170 = a9;
  v12 = sub_100005150(&qword_100081050);
  v13 = __chkstk_darwin(v12);
  v154 = (char *)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v153 = (char *)&v148 - v15;
  v16 = type metadata accessor for PlaybackButton.State(0);
  v168 = *(_QWORD *)(v16 - 8);
  v169 = v16;
  v17 = __chkstk_darwin(v16);
  v155 = (char *)&v148 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v152 = (char *)&v148 - v19;
  v163 = sub_100005150(&qword_100081C58);
  v20 = __chkstk_darwin(v163);
  v165 = (char *)&v148 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v162 = (char *)&v148 - v22;
  v23 = sub_100005150(&qword_100081040);
  v166 = *(_QWORD *)(v23 - 8);
  v167 = v23;
  __chkstk_darwin(v23);
  v164 = (char *)&v148 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100005150(&qword_100081048);
  v26 = __chkstk_darwin(v25);
  v161 = (uint64_t)&v148 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v148 - v28;
  v30 = sub_100005150(&qword_100081028);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v148 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v148 - v34;
  v36 = type metadata accessor for Date(0);
  v37 = *(_QWORD **)(v36 - 8);
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v148 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v38);
  v43 = (char *)&v148 - v42;
  v44 = __chkstk_darwin(v41);
  v45 = __chkstk_darwin(v44);
  if ((a3 & 1) != 0)
    goto LABEL_16;
  v48 = a2;
  if (a2 <= 0.0)
    goto LABEL_16;
  v151 = a2;
  if ((a1 & 1) == 0)
  {
    if ((v159 & 1) != 0 || (v50 = v158, v158 >= a2))
    {
      v69 = static Date.now.getter(v45);
      Date.init(timeIntervalSinceNow:)(v69, a2);
      v70 = sub_10000FBAC((unint64_t *)&qword_100081390, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      if ((dispatch thunk of static Comparable.<= infix(_:_:)(v43, v40, v36, v70) & 1) != 0)
      {
        v71 = v162;
        v72 = v163;
        v73 = &v162[*(int *)(v163 + 48)];
        v74 = (void (*)(char *, char *, uint64_t))v37[4];
        v74(v162, v43, v36);
        v74(v73, v40, v36);
        v75 = v165;
        v76 = &v165[*(int *)(v72 + 48)];
        v77 = (void (*)(char *, char *, uint64_t))v37[2];
        v77(v165, v71, v36);
        v77(v76, v73, v36);
        v78 = (uint64_t)v164;
        v74(v164, v75, v36);
        v79 = (void (*)(char *, uint64_t))v37[1];
        v79(v76, v36);
        v80 = &v75[*(int *)(v72 + 48)];
        v74(v75, v71, v36);
        v74(v80, v73, v36);
        v81 = v167;
        v74((char *)(v78 + *(int *)(v167 + 36)), v80, v36);
        v79(v75, v36);
        v64 = v161;
        sub_10000EEF8(v78, v161, &qword_100081040);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v166 + 56))(v64, 0, 1, v81);
        v65 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
        v66 = v170;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v168 + 104))(v170 + v65[5], enum case for PlaybackButton.State.unplayed(_:), v169);
        PlayButtonTimeFormatHelper.init(timeLeft:duration:)(*(_QWORD *)&v151, 0, *(_QWORD *)&v151, 0);
        v68 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        goto LABEL_12;
      }
      __break(1u);
    }
    else
    {
      v51 = static Date.now.getter(v45);
      Date.init(timeIntervalSinceNow:)(v51, a2);
      v52 = sub_10000FBAC((unint64_t *)&qword_100081390, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      if ((dispatch thunk of static Comparable.<= infix(_:_:)(v43, v40, v36, v52) & 1) != 0)
      {
        v53 = v162;
        v54 = v163;
        v55 = &v162[*(int *)(v163 + 48)];
        v56 = (void (*)(char *, char *, uint64_t))v37[4];
        v56(v162, v43, v36);
        v56(v55, v40, v36);
        v57 = v165;
        v58 = &v165[*(int *)(v54 + 48)];
        v59 = (void (*)(char *, char *, uint64_t))v37[2];
        v59(v165, v53, v36);
        v59(v58, v55, v36);
        v60 = (uint64_t)v164;
        v56(v164, v57, v36);
        v61 = (void (*)(char *, uint64_t))v37[1];
        v61(v58, v36);
        v62 = &v57[*(int *)(v54 + 48)];
        v56(v57, v53, v36);
        v56(v62, v55, v36);
        v63 = v167;
        v56((char *)(v60 + *(int *)(v167 + 36)), v62, v36);
        v61(v57, v36);
        v64 = v161;
        sub_10000EEF8(v60, v161, &qword_100081040);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v166 + 56))(v64, 0, 1, v63);
        v65 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
        v66 = v170;
        v67 = v170 + v65[5];
        Date.init(timeIntervalSinceNow:)(v65, v48 - v50);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v168 + 104))(v67, enum case for PlaybackButton.State.paused(_:), v169);
        PlayButtonTimeFormatHelper.init(timeLeft:duration:)(*(_QWORD *)&v158, 0, *(_QWORD *)&v151, 0);
        v68 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
LABEL_12:
        v82 = v68;
        v171._object = (void *)0xE000000000000000;
        v83._object = (void *)0x80000001000702B0;
        v83._countAndFlagsBits = 0xD000000000000013;
        v84._countAndFlagsBits = 0;
        v84._object = (void *)0xE000000000000000;
        v171._countAndFlagsBits = 0;
        v85 = NSLocalizedString(_:tableName:bundle:value:comment:)(v83, (Swift::String_optional)0, (NSBundle)v82, v84, v171);
        countAndFlagsBits = v85._countAndFlagsBits;
        object = v85._object;

        sub_10000EEF8(v64, v66, &qword_100081048);
LABEL_17:
        v96 = (_QWORD *)(v66 + v65[7]);
        *v96 = 0;
        v96[1] = 0;
        v97 = (uint64_t *)(v66 + v65[8]);
        *v97 = countAndFlagsBits;
LABEL_18:
        v97[1] = (uint64_t)object;
        return;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v149 = v47;
  v150 = (char *)&v148 - v46;
  sub_10000EFC4(v160, (uint64_t)v35, &qword_100081028);
  v49 = (unsigned int (*)(char *, uint64_t, uint64_t))v37[6];
  if (v49(v35, 1, v36) == 1)
  {
    v33 = v35;
LABEL_15:
    sub_10000F008((uint64_t)v33, &qword_100081028);
LABEL_16:
    v66 = v170;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v166 + 56))(v170, 1, 1, v167);
    v65 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v168 + 104))(v66 + v65[5], enum case for PlaybackButton.State.unplayed(_:), v169);
    v90 = v66 + v65[6];
    v91 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v90, 1, 1, v91);
    v92 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v172._object = (void *)0xE000000000000000;
    v93._object = (void *)0x80000001000702B0;
    v93._countAndFlagsBits = 0xD000000000000013;
    v94._countAndFlagsBits = 0;
    v94._object = (void *)0xE000000000000000;
    v172._countAndFlagsBits = 0;
    v95 = NSLocalizedString(_:tableName:bundle:value:comment:)(v93, (Swift::String_optional)0, (NSBundle)v92, v94, v172);
    countAndFlagsBits = v95._countAndFlagsBits;
    object = v95._object;

    goto LABEL_17;
  }
  v88 = (void (*)(char *, char *, uint64_t))v37[4];
  v89 = v150;
  v88(v150, v35, v36);
  sub_10000EFC4(v157, (uint64_t)v33, &qword_100081028);
  if (v49(v33, 1, v36) == 1)
  {
    ((void (*)(char *, uint64_t))v37[1])(v89, v36);
    goto LABEL_15;
  }
  v98 = v149;
  v88(v149, v33, v36);
  v99 = sub_10000FBAC((unint64_t *)&qword_100081390, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v100 = dispatch thunk of static Comparable.< infix(_:_:)(v156, v98, v36, v99);
  if ((v100 & 1) != 0)
  {
    v101 = v150;
    if ((dispatch thunk of static Comparable.<= infix(_:_:)(v150, v98, v36, v99) & 1) != 0)
    {
      v103 = v162;
      v102 = v163;
      v104 = &v162[*(int *)(v163 + 48)];
      v105 = (void (*)(char *, char *, uint64_t))v37[2];
      v105(v162, v101, v36);
      v105(v104, v98, v36);
      v106 = v165;
      v107 = &v165[*(int *)(v102 + 48)];
      v105(v165, v103, v36);
      v105(v107, v104, v36);
      v108 = (uint64_t)v164;
      v88(v164, v106, v36);
      v109 = (void (*)(char *, uint64_t))v37[1];
      v109(v107, v36);
      v110 = &v106[*(int *)(v102 + 48)];
      v88(v106, v103, v36);
      v88(v110, v104, v36);
      v111 = v167;
      v88((char *)(v108 + *(int *)(v167 + 36)), v110, v36);
      v109(v106, v36);
      v112 = v161;
      sub_10000EEF8(v108, v161, &qword_100081040);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v166 + 56))(v112, 0, 1, v111);
      v114 = v168;
      v113 = v169;
      (*(void (**)(char *, _QWORD, uint64_t))(v168 + 104))(v155, enum case for PlaybackButton.State.playing(_:), v169);
      v115 = v149;
      v116 = Date.timeIntervalSince(_:)(v156);
      v117 = (uint64_t)v154;
      PlayButtonTimeFormatHelper.init(timeLeft:duration:)(*(_QWORD *)&v116, 0, *(_QWORD *)&v151, 0);
      v118 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v119._countAndFlagsBits = 0xD000000000000014;
      v173._object = (void *)0xE000000000000000;
      v119._object = (void *)0x80000001000702F0;
      v120._countAndFlagsBits = 0;
      v120._object = (void *)0xE000000000000000;
      v173._countAndFlagsBits = 0;
      v121 = NSLocalizedString(_:tableName:bundle:value:comment:)(v119, (Swift::String_optional)0, (NSBundle)v118, v120, v173);
      object = v121._object;

      v109(v115, v36);
      v109(v150, v36);
      v122 = v112;
      v123 = v170;
      sub_10000EEF8(v122, v170, &qword_100081048);
      v124 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
      (*(void (**)(uint64_t, char *, uint64_t))(v114 + 32))(v123 + v124[5], v155, v113);
      sub_10000EEF8(v117, v123 + v124[6], &qword_100081050);
      v125 = (_QWORD *)(v123 + v124[7]);
      *v125 = 0;
      v125[1] = 0;
      v97 = (uint64_t *)(v123 + v124[8]);
      *v97 = v121._countAndFlagsBits;
      goto LABEL_18;
    }
    goto LABEL_26;
  }
  v126 = static Date.now.getter(v100);
  Date.init(timeIntervalSinceNow:)(v126, v48);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v43, v40, v36, v99) & 1) != 0)
  {
    v127 = v162;
    v128 = v163;
    v129 = &v162[*(int *)(v163 + 48)];
    v88(v162, v43, v36);
    v130 = v129;
    v88(v129, v40, v36);
    v131 = v165;
    v132 = &v165[*(int *)(v128 + 48)];
    v133 = (void (*)(char *, char *, uint64_t))v37[2];
    v133(v165, v127, v36);
    v133(v132, v130, v36);
    v134 = (uint64_t)v164;
    v88(v164, v131, v36);
    v135 = (void (*)(char *, uint64_t))v37[1];
    v135(v132, v36);
    v136 = &v131[*(int *)(v128 + 48)];
    v88(v131, v127, v36);
    v88(v136, v130, v36);
    v137 = v167;
    v88((char *)(v134 + *(int *)(v167 + 36)), v136, v36);
    v135(v131, v36);
    sub_10000EEF8(v134, (uint64_t)v29, &qword_100081040);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v29, 0, 1, v137);
    v139 = v168;
    v138 = v169;
    v140 = v152;
    (*(void (**)(char *, _QWORD, uint64_t))(v168 + 104))(v152, enum case for PlaybackButton.State.unplayed(_:), v169);
    v141 = (uint64_t)v153;
    PlayButtonTimeFormatHelper.init(timeLeft:duration:)(*(_QWORD *)&v151, 0, *(_QWORD *)&v151, 0);
    v142 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v143._countAndFlagsBits = 0xD000000000000015;
    v174._object = (void *)0xE000000000000000;
    v143._object = (void *)0x80000001000702D0;
    v144._countAndFlagsBits = 0;
    v144._object = (void *)0xE000000000000000;
    v174._countAndFlagsBits = 0;
    v145 = NSLocalizedString(_:tableName:bundle:value:comment:)(v143, (Swift::String_optional)0, (NSBundle)v142, v144, v174);
    v167 = v145._countAndFlagsBits;
    object = v145._object;

    v135(v149, v36);
    v135(v150, v36);
    v146 = v170;
    sub_10000EEF8((uint64_t)v29, v170, &qword_100081048);
    v147 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    (*(void (**)(uint64_t, char *, uint64_t))(v139 + 32))(v146 + v147[5], v140, v138);
    sub_10000EEF8(v141, v146 + v147[6], &qword_100081050);
    *(_OWORD *)(v146 + v147[7]) = xmmword_10006DDE0;
    v97 = (uint64_t *)(v146 + v147[8]);
    *v97 = v167;
    goto LABEL_18;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_10002D2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v55;
  uint64_t v56;
  char v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v81 = a1;
  v82 = a2;
  v77 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v75 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v72 = (char *)&v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100005150(&qword_100081C60);
  __chkstk_darwin(v74);
  v76 = (uint64_t)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005150(&qword_100081050);
  v5 = __chkstk_darwin(v4);
  v73 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v79 = (uint64_t)&v69 - v8;
  __chkstk_darwin(v7);
  v78 = (uint64_t)&v69 - v9;
  v10 = sub_100005150(&qword_100081040);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v69 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v69 - v18;
  v20 = sub_100005150(&qword_100081C68);
  __chkstk_darwin(v20);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100005150(&qword_100081048);
  v24 = __chkstk_darwin(v23);
  v80 = (uint64_t)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v69 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v69 - v29;
  sub_10000EFC4(v81, (uint64_t)&v69 - v29, &qword_100081048);
  sub_10000EFC4(v82, (uint64_t)v28, &qword_100081048);
  v31 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_10000EFC4((uint64_t)v30, (uint64_t)v22, &qword_100081048);
  sub_10000EFC4((uint64_t)v28, v31, &qword_100081048);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v32((uint64_t)v22, 1, v10) == 1)
  {
    sub_10000F008((uint64_t)v28, &qword_100081048);
    sub_10000F008((uint64_t)v30, &qword_100081048);
    if (v32(v31, 1, v10) == 1)
    {
      sub_10000F008((uint64_t)v22, &qword_100081048);
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  v71 = v14;
  v33 = v80;
  sub_10000EFC4((uint64_t)v22, v80, &qword_100081048);
  if (v32(v31, 1, v10) == 1)
  {
    sub_10000F008((uint64_t)v28, &qword_100081048);
    sub_10000F008((uint64_t)v30, &qword_100081048);
    sub_10000F008(v33, &qword_100081040);
LABEL_6:
    v34 = &qword_100081C68;
    v35 = (uint64_t)v22;
LABEL_17:
    sub_10000F008(v35, v34);
    goto LABEL_18;
  }
  sub_10000EEF8(v31, (uint64_t)v19, &qword_100081040);
  v36 = type metadata accessor for Date(0);
  v70 = sub_10000FBAC(&qword_1000814C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v37 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v19, v36, v70);
  v38 = v33;
  v39 = v37;
  sub_10000EFC4(v38, (uint64_t)v17, &qword_100081040);
  v40 = (uint64_t)v71;
  sub_10000EFC4((uint64_t)v19, (uint64_t)v71, &qword_100081040);
  if ((v39 & 1) == 0)
  {
    sub_10000F008(v40, &qword_100081040);
    sub_10000F008((uint64_t)v17, &qword_100081040);
    sub_10000F008((uint64_t)v19, &qword_100081040);
    sub_10000F008((uint64_t)v28, &qword_100081048);
    sub_10000F008((uint64_t)v30, &qword_100081048);
    sub_10000F008(v80, &qword_100081040);
    v35 = (uint64_t)v22;
    v34 = &qword_100081048;
    goto LABEL_17;
  }
  v41 = dispatch thunk of static Equatable.== infix(_:_:)(&v17[*(int *)(v10 + 36)], v40 + *(int *)(v10 + 36), v36, v70);
  sub_10000F008(v40, &qword_100081040);
  sub_10000F008((uint64_t)v17, &qword_100081040);
  sub_10000F008((uint64_t)v19, &qword_100081040);
  sub_10000F008((uint64_t)v28, &qword_100081048);
  sub_10000F008((uint64_t)v30, &qword_100081048);
  sub_10000F008(v80, &qword_100081040);
  sub_10000F008((uint64_t)v22, &qword_100081048);
  if ((v41 & 1) == 0)
    goto LABEL_18;
LABEL_9:
  v42 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v44 = v81;
  v43 = v82;
  if ((static PlaybackButton.State.== infix(_:_:)(v81 + v42[5], v82 + v42[5]) & 1) == 0)
    goto LABEL_18;
  v45 = v78;
  sub_10000EFC4(v44 + v42[6], v78, &qword_100081050);
  v46 = v79;
  sub_10000EFC4(v43 + v42[6], v79, &qword_100081050);
  v47 = v76;
  v48 = v76 + *(int *)(v74 + 48);
  sub_10000EFC4(v45, v76, &qword_100081050);
  sub_10000EFC4(v46, v48, &qword_100081050);
  v49 = v75;
  v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  v51 = v77;
  if (v50(v47, 1, v77) == 1)
  {
    sub_10000F008(v46, &qword_100081050);
    sub_10000F008(v45, &qword_100081050);
    if (v50(v48, 1, v51) == 1)
    {
      sub_10000F008(v47, &qword_100081050);
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  v52 = v73;
  sub_10000EFC4(v47, v73, &qword_100081050);
  if (v50(v48, 1, v51) == 1)
  {
    sub_10000F008(v79, &qword_100081050);
    sub_10000F008(v45, &qword_100081050);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v52, v51);
LABEL_16:
    v34 = &qword_100081C60;
    v35 = v47;
    goto LABEL_17;
  }
  v55 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v72, v48, v51);
  v56 = sub_10000FBAC(&qword_100081C70, (uint64_t (*)(uint64_t))&type metadata accessor for PlayButtonTimeFormatHelper, (uint64_t)&protocol conformance descriptor for PlayButtonTimeFormatHelper);
  v57 = dispatch thunk of static Equatable.== infix(_:_:)(v52, v55, v51, v56);
  v58 = *(void (**)(char *, uint64_t))(v49 + 8);
  v58(v55, v51);
  sub_10000F008(v79, &qword_100081050);
  sub_10000F008(v78, &qword_100081050);
  v58((char *)v52, v51);
  sub_10000F008(v47, &qword_100081050);
  if ((v57 & 1) == 0)
    goto LABEL_18;
LABEL_21:
  v59 = v42[7];
  v60 = (_QWORD *)(v44 + v59);
  v61 = *(_QWORD *)(v44 + v59 + 8);
  v62 = (_QWORD *)(v43 + v59);
  v63 = v62[1];
  if (!v61)
  {
    if (!v63)
    {
LABEL_28:
      v65 = v42[8];
      v66 = *(_QWORD *)(v44 + v65);
      v67 = *(_QWORD *)(v44 + v65 + 8);
      v68 = (_QWORD *)(v43 + v65);
      if (v66 == *v68 && v67 == v68[1])
        v53 = 1;
      else
        v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67);
      return v53 & 1;
    }
LABEL_18:
    v53 = 0;
    return v53 & 1;
  }
  if (!v63)
    goto LABEL_18;
  if (*v60 == *v62 && v61 == v63)
    goto LABEL_28;
  v64 = _stringCompareWithSmolCheck(_:_:expecting:)(*v60, v61);
  v53 = 0;
  if ((v64 & 1) != 0)
    goto LABEL_28;
  return v53 & 1;
}

_QWORD *sub_10002DA80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;

  result = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = type metadata accessor for UpNextEntry.Episode(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      v9 = *(void **)(v6 + *(int *)(v4 + 56));
      if (v9)
      {
        v10 = v9;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v12 >= v11 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
        specialized Array._endMutation()(v8);
      }
      v6 += v7;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10002DB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  _QWORD *v14;
  _QWORD aBlock[5];
  uint64_t v16;
  _QWORD *v17;

  v17 = _swiftEmptyArrayStorage;
  v6 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v7 = objc_msgSend(v6, "mainOrPrivateContext");

  v8 = (_QWORD *)swift_allocObject(&unk_10007E710, 56, 7);
  v8[2] = a1;
  v8[3] = v7;
  v8[4] = &v17;
  v8[5] = a2;
  v8[6] = a3;
  v9 = swift_allocObject(&unk_10007E738, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100033AD4;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_100033AF4;
  v16 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002E178;
  aBlock[3] = &unk_10007E750;
  v10 = _Block_copy(aBlock);
  v11 = v16;
  v12 = v7;
  swift_retain(v9);
  swift_release(v11);
  objc_msgSend(v12, "performBlockAndWait:", v10);

  _Block_release(v10);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v9, "", 93, 20, 32, 1);
  result = swift_release(v9);
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v14 = v17;
    swift_release(v8);
    return (uint64_t)v14;
  }
  return result;
}

uint64_t sub_10002DD1C(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  void *v12;
  id v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  id v29;
  id v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;

  v6 = kMTEpisodeEntityName;
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v8 = v7;
  v9 = objc_allocWithZone((Class)NSFetchRequest);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v11 = objc_msgSend(v9, "initWithEntityName:", v10);

  v12 = (void *)objc_opt_self(MTEpisode);
  v13 = objc_msgSend(v12, "predicateForListenNow");
  objc_msgSend(v11, "setPredicate:", v13);

  isa = (Class)objc_msgSend(v12, "sortDescriptorsForListenNow");
  if (!isa)
  {
    v15 = sub_100033B2C(0, &qword_100081D80, NSSortDescriptor_ptr);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v15);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v16);
  }
  objc_msgSend(v11, "setSortDescriptors:", isa);

  objc_msgSend(v11, "setFetchLimit:", a1);
  v17 = sub_100033B2C(0, &qword_100081D88, MTEpisode_ptr);
  v18 = NSManagedObjectContext.fetch<A>(_:)(v11, v17);
  v19 = v18;
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v23 = v18;
    else
      v23 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v24 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v19);
    if (v24)
      goto LABEL_5;
  }
  else if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease(v19);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v26 = v25;
  v27 = objc_allocWithZone((Class)NSFetchRequest);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  v29 = objc_msgSend(v27, "initWithEntityName:", v28);

  v30 = objc_msgSend(v12, "predicateForListenNowLatestEpisodes");
  objc_msgSend(v29, "setPredicate:", v30);

  v31 = (Class)objc_msgSend(v12, "sortDescriptorsForListenNowLatestEpisodes");
  if (!v31)
  {
    v32 = sub_100033B2C(0, &qword_100081D80, NSSortDescriptor_ptr);
    v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v32);
    v31 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v33);
  }
  objc_msgSend(v29, "setSortDescriptors:", v31);

  objc_msgSend(v29, "setFetchLimit:", a1);
  v19 = NSManagedObjectContext.fetch<A>(_:)(v29, v17);

LABEL_5:
  v20 = sub_100031BC0(v19, a4, a5);
  swift_bridgeObjectRelease(v19);

  v21 = *a3;
  *a3 = v20;
  return swift_bridgeObjectRelease(v21);
}

uint64_t sub_10002E178(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10002E198@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  id v13;
  uint64_t v15;

  v6 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetNowPlayingInfo(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000EF3C(a2, (uint64_t)v11, v12);
  v13 = a1;
  TimelineProviderContext.family.getter(v13);
  return sub_10002E274(v13, v11, (uint64_t)v8, a3);
}

uint64_t sub_10002E274@<X0>(void *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(void);
  uint64_t v49;
  unint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _BYTE *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  double v89;
  id v90;
  void *v91;
  id v92;
  void *v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  __objc2_category *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  id v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(char *, uint64_t);
  uint64_t v149;
  id v150;
  uint64_t v151;
  void *v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  void *v158;
  id v159;
  uint64_t countAndFlagsBits;
  void (**object)(uint64_t, uint64_t);
  Swift::String v162;
  Swift::String v163;
  Swift::String v164;
  void (*v165)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v166;
  id v167;
  uint64_t v168;
  _QWORD *v169;
  Swift::String v170;
  Swift::String v171;
  Swift::String v172;
  uint64_t v173;
  void (*v174)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v175;
  void *v176;
  id v177;
  uint64_t v178;
  id v179;
  void *v180;
  uint64_t v181;
  BOOL v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int8 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t result;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  double v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE *v231;
  void (*v232)(char *, uint64_t);
  uint64_t v233;
  _QWORD *v234;
  char *v235;
  uint64_t v236;
  void (**v237)(uint64_t, uint64_t);
  void (*v238)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t *v243;
  char *v244;
  uint64_t v245;
  char *v246;
  _QWORD *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  char *v252;
  _QWORD *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char v262[8];
  id v263;
  uint64_t v264;
  void *v265;
  unsigned __int8 v266;
  Swift::String v267;
  Swift::String v268;

  v258 = a3;
  v243 = a4;
  v6 = sub_100005150(&qword_100081030);
  v7 = __chkstk_darwin(v6);
  v257 = (uint64_t)&v222 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v256 = (uint64_t)&v222 - v9;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v254 = (char *)&v222 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = type metadata accessor for URLComponents(0);
  v223 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin(v224);
  v250 = (char *)&v222 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005150(&qword_100081038);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v222 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v255 = (uint64_t)&v222 - v18;
  v19 = type metadata accessor for WidgetFamily(0);
  v259 = *(_QWORD *)(v19 - 8);
  v260 = v19;
  __chkstk_darwin(v19);
  v229 = (uint64_t)&v222 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100005150(&qword_100081DA0);
  __chkstk_darwin(v21);
  v23 = (void (*)(char *, uint64_t))((char *)&v222 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v230 = type metadata accessor for PodcastsURLEpisodeParameters(0);
  v24 = __chkstk_darwin(v230);
  v26 = (char *)&v222 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v253 = (uint64_t *)((char *)&v222 - v27);
  v28 = sub_100005150(&qword_100081DA8);
  __chkstk_darwin(v28);
  v235 = (char *)&v222 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = COERCE_DOUBLE(type metadata accessor for EyebrowBuilder.Style(0));
  v227 = *(_QWORD *)(*(_QWORD *)&v228 - 8);
  __chkstk_darwin(*(_QWORD *)&v228);
  v234 = (uint64_t *)((char *)&v222 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v226 = (_QWORD *)type metadata accessor for EyebrowBuilder.ListContext(0);
  v225 = *(v226 - 1);
  __chkstk_darwin(v226);
  v231 = (char *)&v222 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = type metadata accessor for EyebrowBuilderSourceCopy(0);
  v249 = *(_QWORD *)(v261 - 8);
  v32 = *(_QWORD *)(v249 + 64);
  v33 = __chkstk_darwin(v261);
  v248 = (char *)&v222 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v33);
  v36 = (char *)&v222 - v35;
  __chkstk_darwin(v34);
  v252 = (char *)&v222 - v37;
  v38 = sub_100005150(&qword_100081028);
  v39 = __chkstk_darwin(v38);
  v240 = (uint64_t)&v222 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v39);
  v239 = (uint64_t)&v222 - v42;
  v43 = __chkstk_darwin(v41);
  v251 = (uint64_t)&v222 - v44;
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v222 - v46;
  __chkstk_darwin(v45);
  v266 = 0;
  v237 = (void (**)(uint64_t, uint64_t))v11;
  v48 = *(void (**)(void))(v11 + 56);
  v245 = (uint64_t)&v222 - v49;
  v48();
  v246 = v47;
  v238 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v48;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v48)(v47, 1, 1, v10);
  v50 = (unint64_t)objc_msgSend(a1, "playState");
  objc_msgSend(a1, "duration");
  if (v50 >= 3)
  {
    type metadata accessor for MTEpisodePlayState(0);
    v263 = (id)v50;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v221, &v263, v221, &type metadata for Int64);
    __break(1u);
    return result;
  }
  v52 = v51;
  v241 = v10;
  v242 = v17;
  objc_msgSend(a1, *(SEL *)off_10007E818[v50]);
  v54 = v53;
  v55 = *a2;
  v56 = a2[1];
  v247 = a2;
  swift_bridgeObjectRetain(v56);
  v57 = objc_msgSend(a1, "uuid");
  v244 = v26;
  v232 = v23;
  if (!v57)
  {
    if (!v56)
      goto LABEL_15;
    goto LABEL_9;
  }
  v58 = v57;
  v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
  v61 = v60;

  if (!v56)
  {
    if (!v61)
      goto LABEL_15;
    v62 = v61;
    goto LABEL_12;
  }
  if (!v61)
  {
LABEL_9:
    v62 = v56;
LABEL_12:
    swift_bridgeObjectRelease(v62);
    goto LABEL_13;
  }
  if (v55 == v59 && v56 == v61)
  {
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v61);
    goto LABEL_15;
  }
  v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v61);
  if ((v64 & 1) == 0)
  {
LABEL_13:
    v63 = 0;
LABEL_16:
    v70 = v261;
    goto LABEL_17;
  }
LABEL_15:
  v65 = (uint64_t)v246;
  sub_10000F008((uint64_t)v246, &qword_100081028);
  v66 = v245;
  sub_10000F008(v245, &qword_100081028);
  v67 = (uint64_t)v247;
  v63 = *((unsigned __int8 *)v247 + 16);
  v266 = *((_BYTE *)v247 + 16);
  v68 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
  sub_10000EFC4(v67 + v68[6], v66, &qword_100081028);
  sub_10000EFC4(v67 + v68[7], v65, &qword_100081028);
  v69 = v67 + v68[9];
  if ((*(_BYTE *)(v69 + 8) & 1) != 0)
    goto LABEL_16;
  v104 = v67 + v68[8];
  v70 = v261;
  if ((*(_BYTE *)(v104 + 8) & 1) == 0)
  {
    v54 = *(double *)v104;
    v52 = *(double *)v69;
  }
LABEL_17:
  v264 = sub_100033B2C(0, &qword_100081D88, MTEpisode_ptr);
  v265 = (void *)sub_100033B64(&qword_100081DB0, &qword_100081D88, MTEpisode_ptr, (uint64_t)&protocol conformance descriptor for MTEpisode);
  v263 = a1;
  v71 = a1;
  v72 = v252;
  EyebrowBuilderSourceCopy.init(source:)(&v263);
  v73 = v249;
  v74 = *(void (**)(char *, char *, uint64_t))(v249 + 16);
  v74(v36, v72, v70);
  v74(v248, v36, v70);
  v75 = *(unsigned __int8 *)(v73 + 80);
  v76 = (v75 + 16) & ~v75;
  v77 = v76 + v32;
  v78 = swift_allocObject(&unk_10007E788, v76 + v32 + 1, v75 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v78 + v76, v36, v70);
  v236 = v78;
  LODWORD(v233) = v63;
  *(_BYTE *)(v78 + v77) = v63;
  v264 = v70;
  v265 = &protocol witness table for EyebrowBuilderSourceCopy;
  v79 = (char *)sub_100033288(&v263);
  v74(v79, v72, v70);
  swift_beginAccess(&v266, v262, 0, 0);
  v80 = v231;
  *v231 = v266;
  (*(void (**)(_BYTE *, _QWORD, _QWORD *))(v225 + 104))(v80, enum case for EyebrowBuilder.ListContext.widget(_:), v226);
  v81 = v234;
  (*(void (**)(_QWORD *, _QWORD, double))(v227 + 104))(v234, enum case for EyebrowBuilder.Style.short(_:), COERCE_DOUBLE(*(_QWORD *)&v228));
  v82 = type metadata accessor for AbbreviatedTimeIntervalFormatter.Configuration(0);
  v83 = v235;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v235, 1, 1, v82);
  v84 = type metadata accessor for EyebrowBuilder(0);
  swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
  v85 = EyebrowBuilder.init(episode:context:style:uppercase:explicitSymbol:abbreviatedPubDateConfig:showsSubscriptionBadge:hostingViewHasLimitedSpace:)(&v263, v80, v81, 0, 0, 0, v83, 0, 0);
  v86 = EyebrowBuilder.caption.getter();
  v88 = v87;
  if ((uint64_t)objc_msgSend(v71, "storeTrackId") < 1)
  {
    v228 = -3.24180904e178;
    v227 = 0x6C61636F6CLL;
  }
  else
  {
    v263 = objc_msgSend(v71, "storeTrackId");
    v227 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v228 = v89;
  }
  v90 = objc_msgSend(v71, "podcast");
  v91 = v90;
  if (v90)
  {
    v92 = objc_msgSend(v90, "uuid");

    if (v92)
    {
      v226 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v91 = v93;

    }
    else
    {
      v226 = 0;
      v91 = 0;
    }
  }
  else
  {
    v226 = 0;
  }
  v94 = objc_msgSend(v71, "uuid");
  if (v94)
  {
    v95 = v94;
    v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v98 = v97;

  }
  else
  {
    v96 = 0;
    v98 = 0;
  }
  v99 = v259;
  v100 = v229;
  v101 = v260;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v259 + 16))(v229, v258, v260);
  v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 88))(v100, v101);
  v235 = (char *)v85;
  v234 = v88;
  v231 = (_BYTE *)v86;
  if (v102 == enum case for WidgetFamily.systemSmall(_:))
  {
    v103 = 0;
LABEL_38:
    v105 = v250;
    goto LABEL_39;
  }
  if (v102 == enum case for WidgetFamily.systemMedium(_:))
  {
    v103 = 1;
    goto LABEL_38;
  }
  if (v102 == enum case for WidgetFamily.systemLarge(_:))
  {
    v103 = 2;
    goto LABEL_38;
  }
  if (v102 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v103 = 3;
    goto LABEL_38;
  }
  if (!&enum case for WidgetFamily.accessoryCorner(_:))
  {
    v105 = v250;
    if (v102 == enum case for WidgetFamily.accessoryCircular(_:))
    {
      v103 = -1;
      goto LABEL_39;
    }
    goto LABEL_99;
  }
  v103 = -1;
  if (v102 == enum case for WidgetFamily.accessoryCorner(_:))
    goto LABEL_38;
  v105 = v250;
  if (v102 != enum case for WidgetFamily.accessoryCircular(_:))
  {
LABEL_99:
    v103 = -1;
    if (v102 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v102 != enum case for WidgetFamily.accessoryInline(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v259 + 8))(v100, v260);
    }
  }
LABEL_39:
  v250 = v71;
  if (qword_100080F68 != -1)
    swift_once(&qword_100080F68, sub_100012888);
  v106 = qword_100085738;
  v107 = unk_100085740;
  v108 = qword_100080F70;
  swift_bridgeObjectRetain(unk_100085740);
  if (v108 != -1)
    swift_once(&qword_100080F70, sub_1000128A8);
  v109 = qword_100085748;
  v110 = unk_100085750;
  swift_bridgeObjectRetain(unk_100085750);
  v111 = v232;
  MetricsWidgetContext.init(widgetID:name:size:subjectID:)(v106, v107, v109, v110, v103, v227, *(_QWORD *)&v228);
  v112 = type metadata accessor for MetricsWidgetContext(0);
  (*(void (**)(void (*)(char *, uint64_t), _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v111, 0, 1, v112);
  v113 = v253;
  *v253 = v226;
  v113[1] = v91;
  v113[2] = v96;
  v113[3] = v98;
  v113[4] = 0;
  *((_BYTE *)v113 + 40) = 1;
  v113[6] = 0;
  *((_BYTE *)v113 + 56) = 1;
  *(_WORD *)((char *)v113 + 57) = 256;
  sub_100033C50((uint64_t)v111, (uint64_t)v113 + *(int *)(v230 + 40));
  v114 = (uint64_t)v244;
  sub_10000EF3C((uint64_t)v113, (uint64_t)v244, type metadata accessor for PodcastsURLEpisodeParameters);
  v115 = type metadata accessor for PodcastsURLShowCommand(0);
  v116 = swift_allocObject(v115, *(unsigned int *)(v115 + 48), *(unsigned __int16 *)(v115 + 52));
  sub_10000FC78(v114, v116 + OBJC_IVAR____TtC14PodcastsWidget25PodcastsURLEpisodeCommand_episodeParameters, type metadata accessor for PodcastsURLEpisodeParameters);
  type metadata accessor for PodcastsURLScheme();
  v117 = type metadata accessor for PodcastsURLNowPlayingCommand();
  v118 = swift_dynamicCastClass(v116, v117);
  v244 = (char *)v116;
  if (v118)
  {
    v119 = swift_retain(v116);
    URLComponents.init()(v119);
    v120 = v241;
    v121 = v250;
    v122 = &OBJC_CATEGORY_MTPodcastPlaylistSettings___DB;
    if (qword_100080F90 != -1)
      swift_once(&qword_100080F90, sub_1000617B0);
    v123 = qword_100085760;
    v124 = *(_QWORD *)algn_100085768;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
    URLComponents.scheme.setter(v123, v124);
    if (qword_100080F98 != -1)
      swift_once(&qword_100080F98, sub_1000617D4);
    v125 = &qword_100082BC8;
LABEL_55:
    v131 = *v125;
    v132 = v125[1];
    swift_bridgeObjectRetain(v132);
    v133 = URLComponents.host.setter(v131, v132);
    URLComponents.url.getter(v133);
    (*(void (**)(char *, uint64_t))(v223 + 8))(v105, v224);
    v134 = v116;
    goto LABEL_56;
  }
  v126 = type metadata accessor for PodcastsURLBrowseCommand();
  v127 = swift_dynamicCastClass(v116, v126);
  v120 = v241;
  v121 = v250;
  v122 = &OBJC_CATEGORY_MTPodcastPlaylistSettings___DB;
  if (v127)
  {
    v128 = swift_retain(v116);
    URLComponents.init()(v128);
    if (qword_100080F90 != -1)
      swift_once(&qword_100080F90, sub_1000617B0);
    v129 = qword_100085760;
    v130 = *(_QWORD *)algn_100085768;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
    URLComponents.scheme.setter(v129, v130);
    if (qword_100080FA0 != -1)
      swift_once(&qword_100080FA0, sub_1000617FC);
    v125 = &qword_100082BD8;
    goto LABEL_55;
  }
  v196 = type metadata accessor for PodcastsURLOpenCommand(0);
  v197 = swift_dynamicCastClass(v116, v196);
  v198 = v116;
  if (v197)
  {
    v199 = v197;
    swift_retain(v198);
    sub_1000619F4(v199, v255);
    v134 = v198;
  }
  else
  {
    v200 = swift_dynamicCastClass(v116, v115);
    if (v200)
    {
      v201 = v200;
      v202 = swift_retain(v116);
      URLComponents.init()(v202);
      if (qword_100080F90 != -1)
        swift_once(&qword_100080F90, sub_1000617B0);
      v203 = qword_100085760;
      v204 = *(_QWORD *)algn_100085768;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
      URLComponents.scheme.setter(v203, v204);
      if (qword_100080FB0 != -1)
        swift_once(&qword_100080FB0, sub_100061838);
      v205 = &qword_100082BF8;
    }
    else
    {
      v206 = type metadata accessor for PodcastsURLPlayCommand(0);
      v207 = swift_dynamicCastClass(v116, v206);
      if (v207)
      {
        v201 = v207;
        v208 = swift_retain(v116);
        URLComponents.init()(v208);
        if (qword_100080F90 != -1)
          swift_once(&qword_100080F90, sub_1000617B0);
        v209 = qword_100085760;
        v210 = *(_QWORD *)algn_100085768;
        swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
        URLComponents.scheme.setter(v209, v210);
        if (qword_100080FB8 != -1)
          swift_once(&qword_100080FB8, sub_100061854);
        v205 = &qword_100082C08;
      }
      else
      {
        v211 = type metadata accessor for PodcastsURLShowAndPlayCommand(0);
        v212 = swift_dynamicCastClass(v116, v211);
        if (!v212)
        {
          v220 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v220 - 8) + 56))(v255, 1, 1, v220);
          goto LABEL_57;
        }
        v201 = v212;
        v213 = swift_retain(v116);
        URLComponents.init()(v213);
        if (qword_100080F90 != -1)
          swift_once(&qword_100080F90, sub_1000617B0);
        v214 = qword_100085760;
        v215 = *(_QWORD *)algn_100085768;
        swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
        URLComponents.scheme.setter(v214, v215);
        if (qword_100080FC0 != -1)
          swift_once(&qword_100080FC0, sub_100061870);
        v205 = &qword_100082C18;
      }
    }
    v216 = *v205;
    v217 = v205[1];
    swift_bridgeObjectRetain(v217);
    URLComponents.host.setter(v216, v217);
    v218 = sub_100062C64((uint64_t *)(v201 + OBJC_IVAR____TtC14PodcastsWidget25PodcastsURLEpisodeCommand_episodeParameters));
    v219 = URLComponents.queryItems.setter(v218);
    URLComponents.url.getter(v219);
    (*(void (**)(char *, uint64_t))(v223 + 8))(v105, v224);
    v134 = (uint64_t)v244;
  }
LABEL_56:
  swift_release(v134);
LABEL_57:
  v135 = objc_msgSend(v121, "uuid");
  if (v135)
  {
    v136 = v135;
    v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
    v139 = v138;

    v263 = objc_msgSend(v121, "storeTrackId");
    v140 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v142 = v141;
    v143 = objc_msgSend(v121, (SEL)v122[50]._class);
    v144 = v143;
    if (v143)
    {
      v145 = objc_msgSend(v143, "channel");

      if (v145)
      {
        v144 = objc_msgSend(v145, "storeId");

      }
      else
      {
        v144 = 0;
      }
    }
    v263 = v144;
    v146 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v241 = sub_100010878(v137, v139, v140, v142, v146, v147);
    v232 = v148;
    v230 = v149;
  }
  else
  {
    v241 = 0;
    v232 = 0;
    v230 = 0;
  }
  v150 = objc_msgSend(v121, "uuid");
  v151 = v261;
  if (v150)
  {
    v152 = v150;
    v229 = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
    v228 = v153;

  }
  else
  {
    v229 = 0;
    v228 = 0.0;
  }
  v154 = (uint64_t)v254;
  static Date.now.getter(v150);
  v155 = (uint64_t)v248;
  v233 = sub_100030BE0(v154, (uint64_t)v248, v233);
  v227 = v156;
  v237[1](v154, v120);
  v249 = *(_QWORD *)(v249 + 8);
  ((void (*)(uint64_t, uint64_t))v249)(v155, v151);
  v157 = objc_msgSend(v121, (SEL)v122[50]._class);
  if (v157
    && (v158 = v157, v159 = objc_msgSend(v157, "title"), v158, v159))
  {
    countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
  }
  else
  {
    v159 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v267._object = (void *)0xE000000000000000;
    v162._countAndFlagsBits = 0x44454C5449544E55;
    v162._object = (void *)0xED0000574F48535FLL;
    v163._countAndFlagsBits = 0;
    v163._object = (void *)0xE000000000000000;
    v267._countAndFlagsBits = 0;
    v164 = NSLocalizedString(_:tableName:bundle:value:comment:)(v162, (Swift::String_optional)0, (NSBundle)v159, v163, v267);
    object = (void (**)(uint64_t, uint64_t))v164._object;
    countAndFlagsBits = v164._countAndFlagsBits;
  }
  v248 = (char *)countAndFlagsBits;
  v237 = object;
  v165 = v238;

  v166 = objc_msgSend(v121, "bestTitle");
  if (v166)
  {
    v167 = v166;
    v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(v166);
  }
  else
  {
    v167 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v268._object = (void *)0xE000000000000000;
    v170._object = (void *)0x8000000100070420;
    v170._countAndFlagsBits = 0xD000000000000010;
    v171._countAndFlagsBits = 0;
    v171._object = (void *)0xE000000000000000;
    v268._countAndFlagsBits = 0;
    v172 = NSLocalizedString(_:tableName:bundle:value:comment:)(v170, (Swift::String_optional)0, (NSBundle)v167, v171, v268);
    v169 = (_QWORD *)v172._object;
    v168 = v172._countAndFlagsBits;
  }
  v238 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v168;
  v226 = v169;

  v173 = type metadata accessor for ArtworkModel(0);
  v174 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 56);
  v174(v256, 1, 1, v173);
  v175 = objc_msgSend(v121, (SEL)v122[50]._class);
  if (v175)
  {
    v176 = v175;
    MTPodcast.artworkModel.getter();

  }
  else
  {
    v174(v257, 1, 1, v173);
  }
  v177 = objc_msgSend(v121, "pubDate");
  v178 = v251;
  Date.init(timeIntervalSinceReferenceDate:)(v177);
  v165(v178, 0, 1, v120);
  v179 = objc_msgSend(v121, "bestSummary");
  if (v179)
  {
    v180 = v179;
    v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(v179);
    v224 = v181;

  }
  else
  {
    v225 = 0;
    v224 = 0;
  }
  v182 = v234 == 0;
  v183 = (_QWORD *)0xE000000000000000;
  if (v234)
    v183 = v234;
  v234 = v183;
  if (v182)
    v184 = 0;
  else
    v184 = (uint64_t)v231;
  v185 = v255;
  v186 = (uint64_t)v242;
  sub_10000EFC4(v255, (uint64_t)v242, &qword_100081038);
  v187 = v266;
  v188 = v245;
  v189 = v239;
  sub_10000EFC4(v245, v239, &qword_100081028);
  v190 = (uint64_t)v246;
  v191 = v240;
  v192 = sub_10000EFC4((uint64_t)v246, v240, &qword_100081028);
  v193 = (uint64_t)v254;
  static Date.now.getter(v192);
  v194 = v236;
  swift_retain(v236);
  sub_10001EC18(v229, v228, v233, v227, v184, v234, (uint64_t)sub_100033C08, v194, v243, (uint64_t)v248, (uint64_t)v237, (uint64_t)v238, (uint64_t)v226, v256, v257, v251, v225, v224, 0,
    v186,
    v187,
    v52,
    0,
    v54,
    0,
    v189,
    v191,
    v193,
    v241,
    v232,
    v230);
  swift_release(v194);
  swift_release(v244);

  swift_release(v235);
  (*(void (**)(uint64_t, uint64_t))(v259 + 8))(v258, v260);
  sub_10000EF80((uint64_t)v247, type metadata accessor for WidgetNowPlayingInfo);
  sub_10000F008(v185, &qword_100081038);
  sub_10000EF80((uint64_t)v253, type metadata accessor for PodcastsURLEpisodeParameters);
  ((void (*)(char *, uint64_t))v249)(v252, v261);
  sub_10000F008(v190, &qword_100081028);
  return sub_10000F008(v188, &qword_100081028);
}

uint64_t sub_10002FA3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a3;
  v9 = type metadata accessor for UpNextEntry.Episode(0);
  v50 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v50 + 64);
  __chkstk_darwin(v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetImageProvider(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005150(&qword_100081D48);
  v17 = *(_QWORD *)(v16 - 8);
  v51 = v16;
  v52 = v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005150(&qword_100081D50);
  v21 = *(_QWORD *)(v20 - 8);
  v53 = v20;
  v54 = v21;
  __chkstk_darwin(v20);
  v48 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v9;
  v23 = *(int *)(v9 + 48);
  v24 = *(int *)(v9 + 52);
  v25 = a1;
  v56 = sub_100031504(a1 + v23, a1 + v24, a2, a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  v26 = *(unsigned __int8 *)(v13 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = (v14 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_10007E670, v28 + 16, v26 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v29 + v27, v15, v12);
  v30 = (double *)(v29 + v28);
  *v30 = a4;
  v30[1] = a5;
  v31 = sub_100005150(&qword_100081D20);
  v32 = sub_10000EEA8(&qword_100081D28, &qword_100081D20, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.catch<A>(_:)(sub_100033350, v29, v31, v31, v32, v32);
  swift_release(v29);
  swift_release(v56);
  sub_10000EF3C(v25, (uint64_t)v11, type metadata accessor for UpNextEntry.Episode);
  v33 = *(unsigned __int8 *)(v50 + 80);
  v34 = (v33 + 16) & ~v33;
  v35 = v34 + v10;
  v36 = v33 | 7;
  v37 = swift_allocObject(&unk_10007E698, v35, v33 | 7);
  sub_10000FC78((uint64_t)v11, v37 + v34, type metadata accessor for UpNextEntry.Episode);
  v38 = sub_10000EEA8(&qword_100081D58, &qword_100081D48, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v39 = v48;
  v40 = v51;
  Publisher.map<A>(_:)(sub_1000333B8, v37, v51, v49, v38);
  swift_release(v37);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v19, v40);
  sub_10000EF3C(v25, (uint64_t)v11, type metadata accessor for UpNextEntry.Episode);
  v41 = swift_allocObject(&unk_10007E6C0, v35, v36);
  sub_10000FC78((uint64_t)v11, v41 + v34, type metadata accessor for UpNextEntry.Episode);
  v42 = sub_100005150(&qword_100081D60);
  v43 = sub_10000EEA8(&qword_100081D68, &qword_100081D50, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v44 = sub_10000EEA8(&qword_100081D70, &qword_100081D60, (uint64_t)&protocol conformance descriptor for Just<A>);
  v45 = v53;
  Publisher.catch<A>(_:)(sub_10003384C, v41, v53, v42, v43, v44);
  swift_release(v41);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v39, v45);
}

uint64_t sub_10002FDFC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  static Logger.artwork.getter(v10);
  swift_errorRetain(v13);
  v14 = swift_errorRetain(v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v29 = a2;
    v17 = swift_slowAlloc(12, -1);
    v28 = v9;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v30 = v13;
    v31 = v19;
    *(_DWORD *)v18 = 136315138;
    swift_errorRetain(v13);
    v20 = sub_100005150(&qword_100081D78);
    v21 = String.init<A>(describing:)(&v30, v20);
    v27 = v8;
    v23 = v22;
    v30 = sub_1000144C4(v21, v22, &v31);
    a2 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v23);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to load artwork. Attempting to load placeholder: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v27);
  }
  else
  {
    swift_errorRelease(v13);
    swift_errorRelease(v13);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  v24 = type metadata accessor for WidgetImageProvider(0);
  result = ImageProvider.placeholder(for:)(v24, &protocol witness table for WidgetImageProvider, a3, a4);
  *a2 = result;
  return result;
}

void sub_100030038(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = *a1;
  sub_10000EF3C(a2, a3, type metadata accessor for UpNextEntry.Episode);
  v5 = *(int *)(type metadata accessor for UpNextEntry.Episode(0) + 56);
  v6 = *(void **)(a3 + v5);
  v7 = v4;

  *(_QWORD *)(a3 + v5) = v4;
}

uint64_t sub_100030090@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a3;
  v5 = type metadata accessor for UpNextEntry.Episode(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  static Logger.artwork.getter(v10);
  swift_errorRetain(v13);
  v14 = swift_errorRetain(v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v31 = v8;
    v17 = swift_slowAlloc(12, -1);
    v32 = v5;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v34 = v13;
    v35 = v19;
    v30 = v9;
    *(_DWORD *)v18 = 136315138;
    v29 = v18 + 4;
    swift_errorRetain(v13);
    v20 = sub_100005150(&qword_100081D78);
    v21 = String.init<A>(describing:)(&v34, v20);
    v22 = a2;
    v24 = v23;
    v34 = sub_1000144C4(v21, v23, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v29, v18 + 12);
    v25 = v24;
    a2 = v22;
    swift_bridgeObjectRelease(v25);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Critical failure: unable to recover with image placeholder. returning episode without artwork. %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    v26 = v18;
    v5 = v32;
    swift_slowDealloc(v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  }
  else
  {
    swift_errorRelease(v13);
    swift_errorRelease(v13);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  sub_10000EF3C(a2, (uint64_t)v7, type metadata accessor for UpNextEntry.Episode);
  return Just.init(_:)(v7, v5);
}

uint64_t sub_1000302F8@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v8 = type metadata accessor for Date(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005150(&qword_100081840);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005150(&qword_100081028);
  __chkstk_darwin(v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v18 = *a2;
  v19 = type metadata accessor for WidgetNowPlayingInfo(0);
  sub_10000EFC4(a3 + *(int *)(v19 + 40), (uint64_t)v16, &qword_100081028);
  v20 = v18;
  v21 = swift_bridgeObjectRetain(v17);
  TimelineProviderContext.family.getter(v21);
  v22 = type metadata accessor for WidgetFamily(0);
  v23 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v13, 0, 1, v22);
  Date.init()(v23);
  return sub_10001F36C(2u, v17, v18, (uint64_t)v16, (uint64_t)v10, v13, a4);
}

uint64_t sub_100030474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  __int128 v46;
  _QWORD v47[2];
  _QWORD *v48;

  v43 = a5;
  v44 = a4;
  v8 = type metadata accessor for UpNextEntry.Episode(0);
  v42 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100033B2C(0, &qword_100081CA8, OS_os_log_ptr);
  v11 = (void *)static OS_os_log.widget.getter();
  v12 = sub_100005150(&qword_100081CB0);
  v13 = swift_allocObject(v12, 112, 7);
  v46 = xmmword_10006DBB0;
  *(_OWORD *)(v13 + 16) = xmmword_10006DBB0;
  v45 = a1;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = swift_bridgeObjectRetain(v14);
  v16 = (uint64_t)sub_10002DA80(v15);
  swift_bridgeObjectRelease(v14);
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v37 = v16;
    else
      v37 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v17 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(v13 + 56) = &type metadata for Int;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 32) = v17;
  *(_QWORD *)(v13 + 96) = &type metadata for String;
  v18 = sub_10003323C();
  *(_QWORD *)(v13 + 104) = v18;
  *(_QWORD *)(v13 + 72) = a2;
  *(_QWORD *)(v13 + 80) = a3;
  v19 = swift_bridgeObjectRetain(a3);
  v20 = static os_log_type_t.default.getter(v19);
  os_log(_:dso:log:type:_:)("Loaded %i episode artworks %{public}@", 37, 2, &_mh_execute_header, v11, v20, v13);

  swift_bridgeObjectRelease(v13);
  if (objc_msgSend((id)objc_opt_self(PFClientUtil), "isRunningOnInternalOS"))
  {
    v21 = (void *)static OS_os_log.widget.getter();
    v22 = swift_allocObject(v12, 112, 7);
    v23 = (_QWORD *)v22;
    *(_OWORD *)(v22 + 16) = v46;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = v18;
    *(_QWORD *)(v22 + 32) = a2;
    *(_QWORD *)(v22 + 40) = a3;
    v24 = *(_QWORD *)(v45 + 24);
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v40 = (_QWORD *)v22;
      v41 = v21;
      v48 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(a3);
      swift_bridgeObjectRetain(v24);
      sub_100030FA4(0, v25, 0);
      v26 = *(unsigned __int8 *)(v42 + 80);
      v39 = v24;
      v27 = v24 + ((v26 + 32) & ~v26);
      *(_QWORD *)&v46 = *(_QWORD *)(v42 + 72);
      do
      {
        sub_10000EF3C(v27, (uint64_t)v10, type metadata accessor for UpNextEntry.Episode);
        sub_100030830(v10, v47);
        sub_10000EF80((uint64_t)v10, type metadata accessor for UpNextEntry.Episode);
        v29 = v47[0];
        v28 = v47[1];
        v30 = v48;
        if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
        {
          sub_100030FA4(0, v30[2] + 1, 1);
          v30 = v48;
        }
        v32 = v30[2];
        v31 = v30[3];
        if (v32 >= v31 >> 1)
        {
          sub_100030FA4(v31 > 1, v32 + 1, 1);
          v30 = v48;
        }
        v30[2] = v32 + 1;
        v33 = &v30[2 * v32];
        v33[4] = v29;
        v33[5] = v28;
        v27 += v46;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease(v39);
      v23 = v40;
      v21 = v41;
    }
    else
    {
      swift_bridgeObjectRetain(a3);
      v30 = _swiftEmptyArrayStorage;
    }
    v23[12] = sub_100005150(&qword_100081D30);
    v34 = sub_10000EEA8(&qword_100081D38, &qword_100081D30, (uint64_t)&protocol conformance descriptor for [A]);
    v23[13] = v34;
    v23[9] = v30;
    v35 = static os_log_type_t.default.getter(v34);
    os_log(_:dso:log:type:_:)("Loaded episodes %{public}@: %{public}@", 38, 2, &_mh_execute_header, v21, v35, v23);

    swift_bridgeObjectRelease(v23);
  }
  return v44(v45);
}

uint64_t sub_100030830@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v13 = *a1;
  v14 = a1[1];
  swift_bridgeObjectRetain(v14);
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5 = a1[2];
  v6 = (void *)a1[3];
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 2108704;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  v9 = a1[9];
  v10 = (void *)a1[10];
  swift_bridgeObjectRetain(v10);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  result = swift_bridgeObjectRelease(v10);
  *a2 = v13;
  a2[1] = v14;
  return result;
}

uint64_t sub_1000308F0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v46 = a2;
  v47 = a3;
  v48 = type metadata accessor for ArtworkRequest(0);
  v10 = *(_QWORD *)(v48 - 8);
  v11 = __chkstk_darwin(v48);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  v16 = type metadata accessor for Logger(0);
  v45 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  static Logger.artwork.getter(v17);
  swift_errorRetain(v20);
  v21 = swift_errorRetain(v20);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v43 = v10;
    v24 = swift_slowAlloc(12, -1);
    v44 = a4;
    v25 = (uint8_t *)v24;
    v26 = swift_slowAlloc(32, -1);
    v42 = v16;
    v27 = v26;
    v49 = v20;
    v50 = v26;
    *(_DWORD *)v25 = 136315138;
    v41 = v25 + 4;
    swift_errorRetain(v20);
    v28 = sub_100005150(&qword_100081D78);
    v29 = String.init<A>(describing:)(&v49, v28);
    v31 = v30;
    v49 = sub_1000144C4(v29, v30, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v41, v25 + 12);
    v32 = v31;
    v10 = v43;
    swift_bridgeObjectRelease(v32);
    swift_errorRelease(v20);
    swift_errorRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to load episode artwork, attempting show artwork: %s", v25, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v33 = v25;
    a4 = v44;
    swift_slowDealloc(v33, -1, -1);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v42);
  }
  else
  {
    swift_errorRelease(v20);
    swift_errorRelease(v20);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v16);
  }
  v34 = v46[3];
  v35 = v46[4];
  sub_100015404(v46, v34);
  ArtworkModel.preferredRequest.getter();
  ArtworkRequest.resized(to:displayScale:)(0, 1, a5, a6);
  v36 = *(void (**)(char *, uint64_t))(v10 + 8);
  v37 = v13;
  v38 = v48;
  v36(v37, v48);
  v39 = dispatch thunk of ImageProvider.load(artwork:)(v15, v34, v35);
  result = ((uint64_t (*)(char *, uint64_t))v36)(v15, v38);
  *a4 = v39;
  return result;
}

uint64_t sub_100030BE0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];

  v39 = a3;
  v38 = a2;
  v40 = a1;
  v3 = type metadata accessor for EyebrowBuilder.Style(0);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  __chkstk_darwin(v3);
  v41 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005150(&qword_100081DB8);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v37 - v13;
  v15 = sub_100005150(&qword_100081DA8);
  __chkstk_darwin(v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for EyebrowBuilder.ListContext(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for EyebrowBuilderSourceCopy(0);
  v44[3] = v22;
  v44[4] = &protocol witness table for EyebrowBuilderSourceCopy;
  v23 = sub_100033288(v44);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v23, v38, v22);
  *v21 = v39;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for EyebrowBuilder.ListContext.widget(_:), v18);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v25 = v40;
  v24(v14, v40, v8);
  v24(v12, v25, v8);
  v26 = enum case for TimeSpan.hoursAgo(_:);
  v27 = type metadata accessor for TimeSpan(0);
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 104))(v7, v26, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v7, 0, 1, v27);
  AbbreviatedTimeIntervalFormatter.Configuration.init(relativeTo:currentYearReferenceDate:allowedSpan:)(v14, v12, v7);
  v29 = type metadata accessor for AbbreviatedTimeIntervalFormatter.Configuration(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v17, 0, 1, v29);
  v30 = v41;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, enum case for EyebrowBuilder.Style.default(_:), v43);
  v31 = type metadata accessor for EyebrowBuilder(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = EyebrowBuilder.init(episode:context:style:uppercase:explicitSymbol:abbreviatedPubDateConfig:showsSubscriptionBadge:hostingViewHasLimitedSpace:)(v44, v21, v30, 0, 0, 0, v17, 0, 0);
  v33 = EyebrowBuilder.caption.getter();
  v35 = v34;
  swift_release(v32);
  if (v35)
    return v33;
  else
    return 0;
}

void sub_100030EF0()
{
  qword_100085758 = (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_100030F04(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000311BC(a1, a2, a3, (_QWORD *)*v3, &qword_100081888, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
  *v3 = result;
  return result;
}

uint64_t sub_100030F30(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000311BC(a1, a2, a3, (_QWORD *)*v3, &qword_1000819F0, type metadata accessor for UpNextEntry.Episode);
  *v3 = result;
  return result;
}

uint64_t sub_100030F5C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100030FD4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100030F78(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000311BC(a1, a2, a3, (_QWORD *)*v3, &qword_100081878, type metadata accessor for UpNextEntry);
  *v3 = result;
  return result;
}

uint64_t sub_100030FA4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10003139C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100030FC0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000311BC(a1, a2, a3, a4, &qword_100081888, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

uint64_t sub_100030FD4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005150(&qword_100081880);
  v11 = *(_QWORD *)(sub_100005150(&qword_100081028) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = *(_QWORD *)(sub_100005150(&qword_100081028) - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20, v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v22 = *(_QWORD *)(v18 + 72) * v8;
  v23 = &v20[v22];
  v24 = (unint64_t)&v21[v22];
  if (v21 >= v23 || (unint64_t)v20 >= v24)
  {
    swift_arrayInitWithCopy(v20);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000311BC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100005150(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23, v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003139C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005150(&qword_100081D40);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100031504(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  void (*v29)(_QWORD *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90[2];
  uint64_t v91;
  _QWORD v92[6];

  v88 = a1;
  v89 = a2;
  v81 = type metadata accessor for Logger(0);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v79 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for ArtworkRequest(0);
  v83 = *(_QWORD *)(v85 - 8);
  v9 = __chkstk_darwin(v85);
  v82 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v84 = (char *)&v74 - v11;
  v77 = sub_100005150(&qword_100081D48);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v75 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ArtworkModel(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v74 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v74 - v21;
  __chkstk_darwin(v20);
  v78 = (uint64_t)&v74 - v23;
  v24 = sub_100005150(&qword_1000818A0);
  __chkstk_darwin(v24);
  v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for WidgetImageProvider(0);
  v92[3] = v27;
  v92[4] = &protocol witness table for WidgetImageProvider;
  v28 = sub_100033288(v92);
  v29 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
  v86 = v27;
  v87 = v28;
  v29(v28, a3, v27);
  v30 = (uint64_t)&v26[*(int *)(v24 + 48)];
  sub_10000EFC4(v88, (uint64_t)v26, &qword_100081030);
  sub_10000EFC4(v89, v30, &qword_100081030);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v27) = v31(v26, 1, v13);
  v32 = v31((char *)v30, 1, v13);
  if ((_DWORD)v27 != 1)
  {
    v34 = v79;
    v35 = v80;
    v36 = v81;
    if (v32 == 1)
    {
      v37 = sub_10000FC78((uint64_t)v26, (uint64_t)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v38 = v34;
      v39 = static Logger.artwork.getter(v37);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unexpectedly found episode artwork without show artwork. No Fallback path available.", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }

      v43 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, v36);
      v44 = v82;
      ArtworkModel.preferredRequest.getter(v43);
      v45 = v84;
      ArtworkRequest.resized(to:displayScale:)(0, 1, a4, a5);
      v46 = *(void (**)(char *, uint64_t))(v83 + 8);
      v47 = v85;
      v46(v44, v85);
      v33 = dispatch thunk of ImageProvider.load(artwork:)(v45, v86, &protocol witness table for WidgetImageProvider);
      v46(v45, v47);
      v48 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    }
    else
    {
      v55 = v78;
      sub_10000FC78((uint64_t)v26, v78, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v56 = (uint64_t)v22;
      v57 = sub_10000FC78(v30, (uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v58 = v82;
      ArtworkModel.preferredRequest.getter(v57);
      v59 = v84;
      ArtworkRequest.resized(to:displayScale:)(0, 1, a4, a5);
      v60 = *(void (**)(char *, uint64_t))(v83 + 8);
      v61 = v85;
      v60(v58, v85);
      v62 = dispatch thunk of ImageProvider.load(artwork:)(v59, v86, &protocol witness table for WidgetImageProvider);
      v60(v59, v61);
      v91 = v62;
      sub_1000338B4((uint64_t)v92, (uint64_t)v90);
      sub_10000EF3C(v56, (uint64_t)v19, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v63 = *(unsigned __int8 *)(v14 + 80);
      v64 = (v63 + 56) & ~v63;
      v65 = (v15 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
      v66 = swift_allocObject(&unk_10007E6E8, v65 + 16, v63 | 7);
      sub_100033A30(v90, v66 + 16);
      sub_10000FC78((uint64_t)v19, v66 + v64, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v67 = (double *)(v66 + v65);
      *v67 = a4;
      v67[1] = a5;
      v68 = sub_100005150(&qword_100081D20);
      v69 = sub_10000EEA8(&qword_100081D28, &qword_100081D20, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v70 = v75;
      Publisher.catch<A>(_:)(sub_100033A48, v66, v68, v68, v69, v69);
      swift_release(v66);
      swift_release(v91);
      v71 = sub_10000EEA8(&qword_100081D58, &qword_100081D48, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
      v72 = v77;
      v33 = Publisher.eraseToAnyPublisher()(v77, v71);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v70, v72);
      sub_10000EF80(v56, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v48 = (char *)v55;
    }
    goto LABEL_10;
  }
  if (v32 != 1)
  {
    v49 = v78;
    v50 = sub_10000FC78(v30, v78, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v51 = v82;
    ArtworkModel.preferredRequest.getter(v50);
    v52 = v84;
    ArtworkRequest.resized(to:displayScale:)(0, 1, a4, a5);
    v53 = *(void (**)(char *, uint64_t))(v83 + 8);
    v54 = v85;
    v53(v51, v85);
    v33 = dispatch thunk of ImageProvider.load(artwork:)(v52, v86, &protocol witness table for WidgetImageProvider);
    v53(v52, v54);
    v48 = (char *)v49;
LABEL_10:
    sub_10000EF80((uint64_t)v48, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_11;
  }
  v33 = dispatch thunk of ImageProvider.placeholder(for:)(v86, &protocol witness table for WidgetImageProvider, a4, a5);
LABEL_11:
  sub_1000168F8(v92);
  return v33;
}

uint64_t sub_100031BC0(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  _QWORD *v24;

  v4 = v3;
  v22 = a2;
  v23 = a3;
  v6 = type metadata accessor for UpNextEntry.Episode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v11 = _swiftEmptyArrayStorage;
    if (!v10)
      return (uint64_t)v11;
    v24 = _swiftEmptyArrayStorage;
    result = sub_100030F30(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0)
      break;
    v13 = 0;
    v11 = v24;
    v20 = v4;
    v21 = a1 & 0xC000000000000001;
    v14 = a1;
    while (v10 != v13)
    {
      if (v21)
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
      else
        v15 = *(id *)(a1 + 8 * v13 + 32);
      v16 = v15;
      v22();

      v24 = v11;
      v18 = v11[2];
      v17 = v11[3];
      v4 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        sub_100030F30(v17 > 1, v18 + 1, 1);
        v11 = v24;
      }
      ++v13;
      v11[2] = v4;
      sub_10000FC78((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18, type metadata accessor for UpNextEntry.Episode);
      a1 = v14;
      if (v10 == v13)
        return (uint64_t)v11;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_100031D80(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  void *object;
  Swift::String v61;
  uint64_t v62;
  void (*v63)(char *);
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  uint64_t v75;
  void (*v76)(char *);
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  double v100;
  char *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  _QWORD *v163;
  void (*v164)(char *);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, uint64_t);
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  char *v203;
  void (*v204)(char *, uint64_t);
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  void (*v212)(char *);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t Entry;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;

  v6 = sub_100005150(&qword_100081030);
  __chkstk_darwin(v6);
  v193 = (uint64_t)&v184 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for ArtworkRequest(0);
  v188 = *(_QWORD *)(v190 - 8);
  v8 = __chkstk_darwin(v190);
  v185 = (char *)&v184 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v187 = (char *)&v184 - v11;
  v12 = __chkstk_darwin(v10);
  v186 = (char *)&v184 - v13;
  __chkstk_darwin(v12);
  v189 = (char *)&v184 - v14;
  v228 = type metadata accessor for TimelineProviderContext(0);
  v226 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v224 = v15;
  v225 = (char *)&v184 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_100005150(&qword_100081C78);
  v219 = *(_QWORD *)(v220 - 8);
  __chkstk_darwin(v220);
  v217 = (char *)&v184 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = sub_100005150(&qword_100081C80);
  v221 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v218 = (char *)&v184 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005150(&qword_100081C88);
  v229 = *(_QWORD *)(v18 - 8);
  v230 = v18;
  __chkstk_darwin(v18);
  v227 = (char *)&v184 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005150(&qword_100081C90);
  v232 = *(_QWORD *)(v20 - 8);
  v233 = v20;
  __chkstk_darwin(v20);
  v231 = (char *)&v184 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100005150(&qword_100081C98);
  v200 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v199 = (char *)&v184 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for UpNextEntry.Episode(0);
  v194 = *(_QWORD *)(v192 - 8);
  v23 = __chkstk_darwin(v192);
  v208 = (char *)&v184 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v191 = (uint64_t)&v184 - v25;
  v237 = type metadata accessor for WidgetImageProvider(0);
  v241 = *(_QWORD *)(v237 - 8);
  v26 = __chkstk_darwin(v237);
  v211 = (char *)&v184 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = v27;
  __chkstk_darwin(v26);
  v240 = (char *)&v184 - v28;
  v29 = type metadata accessor for Date(0);
  v234 = *(_QWORD *)(v29 - 8);
  v235 = v29;
  v30 = __chkstk_darwin(v29);
  v197 = (char *)&v184 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v236 = (char *)&v184 - v32;
  v33 = sub_100005150(&qword_100081840);
  __chkstk_darwin(v33);
  v207 = (char *)&v184 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100005150(&qword_100081028);
  v36 = __chkstk_darwin(v35);
  v196 = (uint64_t)&v184 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v206 = (char *)&v184 - v38;
  Entry = type metadata accessor for UpNextEntry(0);
  __chkstk_darwin(Entry);
  v205 = (uint64_t)&v184 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for WidgetNowPlayingInfo(0);
  v210 = *(_QWORD *)(v195 - 8);
  v40 = __chkstk_darwin(v195);
  v215 = (uint64_t)&v184 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v198 = (uint64_t)&v184 - v43;
  v214 = v44;
  __chkstk_darwin(v42);
  v46 = (char *)&v184 - v45;
  v47 = type metadata accessor for WidgetFamily(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = __chkstk_darwin(v47);
  v203 = (char *)&v184 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __chkstk_darwin(v49);
  v53 = (char *)&v184 - v52;
  __chkstk_darwin(v51);
  v55 = (char *)&v184 - v54;
  v56 = swift_allocObject(&unk_10007E5D0, 32, 7);
  v212 = a2;
  *(_QWORD *)(v56 + 16) = a2;
  *(_QWORD *)(v56 + 24) = a3;
  v239 = v56;
  v243 = 40;
  v244 = 0xE100000000000000;
  v213 = a3;
  v57 = swift_retain(a3);
  v242 = a1;
  TimelineProviderContext.family.getter(v57);
  v58 = sub_10000FBAC(&qword_100081CA0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v47, v58);
  object = v59._object;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(object);
  v238 = v48;
  v204 = *(void (**)(char *, uint64_t))(v48 + 8);
  v204(v55, v47);
  v61._countAndFlagsBits = 41;
  v61._object = (void *)0xE100000000000000;
  String.append(_:)(v61);
  v62 = v243;
  v63 = (void (*)(char *))v244;
  sub_100033B2C(0, &qword_100081CA8, OS_os_log_ptr);
  v64 = (void *)static OS_os_log.widget.getter();
  v65 = sub_100005150(&qword_100081CB0);
  v66 = swift_allocObject(v65, 72, 7);
  v202 = xmmword_10006D950;
  *(_OWORD *)(v66 + 16) = xmmword_10006D950;
  *(_QWORD *)(v66 + 56) = &type metadata for String;
  v67 = sub_10003323C();
  *(_QWORD *)(v66 + 64) = v67;
  *(_QWORD *)(v66 + 32) = v62;
  *(_QWORD *)(v66 + 40) = v63;
  v68 = swift_bridgeObjectRetain(v63);
  v69 = static os_log_type_t.default.getter(v68);
  os_log(_:dso:log:type:_:)("Start loading episodes %{public}@", 33, 2, &_mh_execute_header, v64, v69, v66);

  swift_bridgeObjectRelease(v66);
  if (!objc_msgSend((id)objc_opt_self(MTDB), "canExtensionOpenDatabase"))
  {
    v78 = (void *)static OS_os_log.widget.getter();
    v79 = static os_log_type_t.error.getter();
    v80 = swift_allocObject(v65, 72, 7);
    *(_OWORD *)(v80 + 16) = v202;
    *(_QWORD *)(v80 + 56) = &type metadata for String;
    *(_QWORD *)(v80 + 64) = v67;
    *(_QWORD *)(v80 + 32) = v62;
    *(_QWORD *)(v80 + 40) = v63;
    os_log(_:dso:log:type:_:)("Can't open the DB %{public}@", 28, 2, &_mh_execute_header, v78, v79, v80);

    swift_bridgeObjectRelease(v80);
    v81 = (uint64_t)v206;
    v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v234 + 56))(v206, 1, 1, v235);
    v83 = v207;
    TimelineProviderContext.family.getter(v82);
    v84 = (*(uint64_t (**)(void *, _QWORD, uint64_t, uint64_t))(v238 + 56))(v83, 0, 1, v47);
    v85 = (uint64_t)v236;
    Date.init()(v84);
    v86 = v205;
    sub_10001F36C(1u, (uint64_t)_swiftEmptyArrayStorage, 0, v81, v85, v83, v205);
    sub_100017E98(v86, v212, v213);
    sub_10000EF80(v86, type metadata accessor for UpNextEntry);
    v87 = v239;
    return swift_release(v87);
  }
  v206 = (char *)v65;
  v207 = (char *)v67;
  v212 = v63;
  v213 = v62;
  sub_1000129DC((uint64_t)v46);
  v222 = v46;
  WidgetNowPlayingInfo.logInfo()();
  v70 = v242;
  TimelineProviderContext.family.getter(v71);
  v72 = v238;
  v73 = v203;
  (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v203, v53, v47);
  v74 = (*(uint64_t (**)(char *, uint64_t))(v72 + 88))(v73, v47);
  if (v74 == enum case for WidgetFamily.systemSmall(_:))
  {
    v75 = 1;
    v76 = v212;
    v77 = ((uint64_t (*)(char *, uint64_t))v204)(v53, v47);
    goto LABEL_16;
  }
  v76 = v212;
  v88 = (uint64_t (*)(char *, uint64_t))v204;
  if (v74 == enum case for WidgetFamily.systemMedium(_:))
  {
    v75 = 2;
  }
  else if (v74 == enum case for WidgetFamily.systemLarge(_:))
  {
    v75 = 4;
  }
  else
  {
    if (v74 != enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v89 = v73;
      v75 = 1;
      if (v74 == enum case for WidgetFamily.accessoryCircular(_:)
        || v74 == enum case for WidgetFamily.accessoryRectangular(_:)
        || v74 == enum case for WidgetFamily.accessoryInline(_:))
      {
        goto LABEL_15;
      }
      v204(v89, v47);
    }
    v75 = 6;
  }
LABEL_15:
  v77 = v88(v53, v47);
LABEL_16:
  __chkstk_darwin(v77);
  v90 = (uint64_t)v222;
  *(&v184 - 2) = (uint64_t)v222;
  *(&v184 - 1) = v70;
  v91 = sub_10002DB84(v75, (uint64_t)sub_100033280, (uint64_t)(&v184 - 4));
  v92 = (void *)static OS_os_log.widget.getter();
  v93 = swift_allocObject(v206, 112, 7);
  *(_OWORD *)(v93 + 16) = xmmword_10006DBB0;
  v94 = *(_QWORD *)(v91 + 16);
  *(_QWORD *)(v93 + 56) = &type metadata for Int;
  *(_QWORD *)(v93 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v93 + 32) = v94;
  v95 = v207;
  *(_QWORD *)(v93 + 96) = &type metadata for String;
  *(_QWORD *)(v93 + 104) = v95;
  *(_QWORD *)(v93 + 72) = v213;
  *(_QWORD *)(v93 + 80) = v76;
  v96 = swift_bridgeObjectRetain(v76);
  v97 = static os_log_type_t.default.getter(v96);
  os_log(_:dso:log:type:_:)("Loaded %i episodes %{public}@", 29, 2, &_mh_execute_header, v92, v97, v93);

  v98 = swift_bridgeObjectRelease(v93);
  v99 = kMTWidgetArtworkWidth;
  v100 = kMTWidgetArtworkHeight;
  v101 = v240;
  WidgetImageProvider.init()(v98);
  v102 = type metadata accessor for Podcasts(0);
  v245 = v102;
  v246 = sub_10000FBAC(&qword_100081CC0, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v103 = sub_100033288(&v243);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v102 - 8) + 104))(v103, enum case for Podcasts.widgetNowPlayingArtwork(_:), v102);
  LOBYTE(v102) = isFeatureEnabled(_:)(&v243);
  sub_1000168F8(&v243);
  v104 = v241;
  v105 = v208;
  if ((v102 & 1) != 0)
  {
    v106 = *(unsigned __int8 *)(v90 + 16);
    v107 = v198;
    sub_10000EF3C(v90, v198, type metadata accessor for WidgetNowPlayingInfo);
    if (v106 == 1)
    {
      sub_10000EF80(v107, type metadata accessor for WidgetNowPlayingInfo);
    }
    else
    {
      v108 = v196;
      sub_10000EFC4(v107 + *(int *)(v195 + 40), v196, &qword_100081028);
      v110 = v234;
      v109 = v235;
      v111 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v234 + 48))(v108, 1, v235);
      v112 = v197;
      if ((_DWORD)v111 == 1)
      {
        Date.init()(v111);
        v113 = sub_10000F008(v108, &qword_100081028);
      }
      else
      {
        v113 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v110 + 32))(v197, v108, v109);
      }
      v114 = v236;
      Date.init()(v113);
      v115 = static Date.> infix(_:_:)(v112, v114);
      v116 = *(void (**)(char *, uint64_t))(v110 + 8);
      v116(v114, v109);
      v116(v112, v109);
      sub_10000EF80(v198, type metadata accessor for WidgetNowPlayingInfo);
      if ((v115 & 1) == 0)
        goto LABEL_36;
    }
    v117 = *(_QWORD *)(v91 + 16);
    if (v117)
    {
      v118 = v91 + ((*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80));
      v119 = *(_QWORD *)(v194 + 72);
      swift_bridgeObjectRetain(v91);
      while (1)
      {
        sub_10000EF3C(v118, (uint64_t)v105, type metadata accessor for UpNextEntry.Episode);
        v120 = *(_QWORD *)(v90 + 8);
        if (v120)
        {
          v121 = v105[1];
          v122 = *v105 == *(_QWORD *)v90 && v120 == v121;
          if (v122 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v105, v121) & 1) != 0)
            break;
        }
        sub_10000EF80((uint64_t)v105, type metadata accessor for UpNextEntry.Episode);
        v118 += v119;
        if (!--v117)
        {
          swift_bridgeObjectRelease(v91);
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease(v91);
      v123 = v191;
      sub_10000FC78((uint64_t)v105, v191, type metadata accessor for UpNextEntry.Episode);
      v124 = v193;
      sub_10000EFC4(v123 + *(int *)(v192 + 52), v193, &qword_100081030);
      sub_10000EF80(v123, type metadata accessor for UpNextEntry.Episode);
      v125 = type metadata accessor for ArtworkModel(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 48))(v124, 1, v125) == 1)
      {
        sub_10000F008(v124, &qword_100081030);
LABEL_35:
        v104 = v241;
        goto LABEL_36;
      }
      v170 = v185;
      ArtworkModel.preferredRequest.getter();
      sub_10000EF80(v124, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v171 = v187;
      ArtworkRequest.resized(to:displayScale:)(0, 1, v99, v100);
      v172 = v188;
      v173 = *(void (**)(char *, uint64_t))(v188 + 8);
      v174 = v190;
      v173(v170, v190);
      v175 = v186;
      ArtworkRequest.replacingEffects(_:)(&off_10007DD18);
      v173(v171, v174);
      v176 = v189;
      (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v189, v175, v174);
      v177 = WidgetImageProvider.load(artwork:)(v176);
      v243 = v177;
      v178 = sub_100005150(&qword_100081D20);
      v179 = sub_10000EEA8(&qword_100081D28, &qword_100081D20, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v180 = Publisher.makeOptional.getter(v178, v179);
      swift_release(v177);
      v243 = v180;
      v181 = sub_100005150(&qword_100081D00);
      v182 = sub_10000EEA8(&qword_100081D10, &qword_100081D00, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v130 = Publisher.eraseToAnyPublisher()(v181, v182);
      swift_release(v180);
      v183 = v176;
      v101 = v240;
      v173(v183, v174);
      v104 = v241;
      goto LABEL_37;
    }
  }
LABEL_36:
  v243 = 0;
  v126 = sub_100005150(&qword_100081CC8);
  v127 = v199;
  Just.init(_:)(&v243, v126);
  v128 = sub_10000EEA8(&qword_100081CD0, &qword_100081C98, (uint64_t)&protocol conformance descriptor for Just<A>);
  v129 = v201;
  v130 = Publisher.eraseToAnyPublisher()(v201, v128);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v127, v129);
LABEL_37:
  v131 = v237;
  v243 = v91;
  v132 = sub_100005150(&qword_100081868);
  v133 = sub_10000EEA8(&qword_100081CD8, &qword_100081868, (uint64_t)&protocol conformance descriptor for [A]);
  v134 = v217;
  Publishers.Sequence.init(sequence:)(&v243, v132, &type metadata for Never, v133, &protocol witness table for Never);
  v135 = v211;
  (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v211, v101, v131);
  v136 = *(unsigned __int8 *)(v104 + 80);
  v137 = (v136 + 32) & ~v136;
  v138 = swift_allocObject(&unk_10007E5F8, v137 + v209, v136 | 7);
  *(double *)(v138 + 16) = v99;
  *(double *)(v138 + 24) = v100;
  v139 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v104 + 32))(v138 + v137, v135, v131);
  v140 = static Subscribers.Demand.unlimited.getter(v139);
  v141 = sub_100005150(&qword_100081CE0);
  v142 = sub_10000EEA8(&qword_100081CE8, &qword_100081C78, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  v143 = sub_10000EEA8(&qword_100081CF0, &qword_100081CE0, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v144 = v218;
  v145 = v220;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v140, sub_1000332C8, v138, v220, v141, v142, v143);
  swift_release(v138);
  (*(void (**)(char *, uint64_t))(v219 + 8))(v134, v145);
  v146 = sub_10000EEA8(&qword_100081CF8, &qword_100081C80, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v147 = v227;
  v148 = v223;
  Publisher.collect()(v223, v146);
  (*(void (**)(char *, uint64_t))(v221 + 8))(v144, v148);
  v243 = v130;
  v149 = v215;
  sub_10000EF3C(v90, v215, type metadata accessor for WidgetNowPlayingInfo);
  v150 = v226;
  v151 = v225;
  v152 = v228;
  (*(void (**)(char *, uint64_t, uint64_t))(v226 + 16))(v225, v242, v228);
  v153 = *(unsigned __int8 *)(v210 + 80);
  v154 = (v153 + 16) & ~v153;
  v155 = *(unsigned __int8 *)(v150 + 80);
  v156 = (v214 + v155 + v154) & ~v155;
  v157 = swift_allocObject(&unk_10007E620, v156 + v224, v153 | v155 | 7);
  sub_10000FC78(v149, v157 + v154, type metadata accessor for WidgetNowPlayingInfo);
  (*(void (**)(uint64_t, char *, uint64_t))(v150 + 32))(v157 + v156, v151, v152);
  swift_retain(v130);
  v158 = sub_100005150(&qword_100081D00);
  v159 = sub_10000EEA8(&qword_100081D08, &qword_100081C88, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  v160 = sub_10000EEA8(&qword_100081D10, &qword_100081D00, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v162 = v230;
  v161 = v231;
  Publisher.combineLatest<A, B>(_:_:)(&v243, sub_1000332D0, v157, v230, v158, Entry, v159, v160);
  swift_release(v157);
  swift_release(v243);
  (*(void (**)(char *, uint64_t))(v229 + 8))(v147, v162);
  v163 = (_QWORD *)swift_allocObject(&unk_10007E648, 48, 7);
  v164 = v212;
  v163[2] = v213;
  v163[3] = v164;
  v165 = v239;
  v163[4] = sub_100033234;
  v163[5] = v165;
  v166 = sub_10000EEA8(&qword_100081D18, &qword_100081C90, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  swift_retain(v165);
  v167 = v233;
  v168 = Publisher<>.sink(receiveValue:)(sub_1000332D8, v163, v233, v166);
  swift_release(v163);
  (*(void (**)(char *, uint64_t))(v232 + 8))(v161, v167);
  if (qword_100080F78 != -1)
    swift_once(&qword_100080F78, sub_100030EF0);
  swift_beginAccess(&qword_100085758, &v243, 33, 0);
  AnyCancellable.store(in:)(&qword_100085758);
  swift_endAccess(&v243);
  swift_release(v130);
  swift_release(v168);
  (*(void (**)(char *, uint64_t))(v241 + 8))(v240, v237);
  sub_10000EF80((uint64_t)v222, type metadata accessor for WidgetNowPlayingInfo);
  v87 = v165;
  return swift_release(v87);
}

uint64_t sub_100033210()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033234(uint64_t a1)
{
  uint64_t v1;

  return sub_100017E98(a1, *(void (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_10003323C()
{
  unint64_t result;

  result = qword_100081CB8;
  if (!qword_100081CB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100081CB8);
  }
  return result;
}

uint64_t sub_100033280@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10002E198(a1, *(_QWORD *)(v2 + 16), a2);
}

_QWORD *sub_100033288(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_1000332D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100030474(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000332E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for WidgetImageProvider(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100033350@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double *v6;

  v5 = type metadata accessor for WidgetImageProvider(0);
  v6 = (double *)(v2
                + ((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)
                  + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
                  + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_10002FDFC(a1, a2, *v6, v6[1]);
}

uint64_t sub_1000333B8(uint64_t a1)
{
  return sub_100033858(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100030038);
}

uint64_t sub_1000333C8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  int *v10;
  unsigned int (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v45 = *(_QWORD *)(v2 + 64);
  v46 = (v3 + 16) & ~v3;
  v47 = v0;
  v4 = v0 + v46;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v46 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v46 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v46 + 40));
  swift_release(*(_QWORD *)(v0 + v46 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v46 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v46 + 80));
  v5 = v0 + v46 + v1[10];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[11] + 8));
  v9 = v4 + v1[12];
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
    v12 = *(unsigned __int8 *)(v9 + 32);
    if (v12 != 255)
      sub_100005624(*(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), v12);
    v13 = *(unsigned __int8 *)(v9 + 64);
    if (v13 != 255)
      sub_10000563C(*(id *)(v9 + 56), v13);
    v14 = *(unsigned __int8 *)(v9 + 80);
    if (v14 != 255)
      sub_10000563C(*(id *)(v9 + 72), v14);
    v15 = *(unsigned __int8 *)(v9 + 96);
    if (v15 != 255)
      sub_10000563C(*(id *)(v9 + 88), v15);
    v16 = *(unsigned __int8 *)(v9 + 112);
    if (v16 != 255)
      sub_10000563C(*(id *)(v9 + 104), v16);
    v17 = *(unsigned __int8 *)(v9 + 128);
    if (v17 != 255)
      sub_10000563C(*(id *)(v9 + 120), v17);
    v18 = v9 + v10[11];
    v19 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[16] + 8));
  }
  v20 = v4 + v1[13];
  if (!v11(v20, 1, v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + 8));
    v21 = *(unsigned __int8 *)(v20 + 32);
    if (v21 != 255)
      sub_100005624(*(_QWORD *)(v20 + 16), *(_QWORD *)(v20 + 24), v21);
    v22 = *(unsigned __int8 *)(v20 + 64);
    if (v22 != 255)
      sub_10000563C(*(id *)(v20 + 56), v22);
    v23 = *(unsigned __int8 *)(v20 + 80);
    if (v23 != 255)
      sub_10000563C(*(id *)(v20 + 72), v23);
    v24 = *(unsigned __int8 *)(v20 + 96);
    if (v24 != 255)
      sub_10000563C(*(id *)(v20 + 88), v24);
    v25 = *(unsigned __int8 *)(v20 + 112);
    if (v25 != 255)
      sub_10000563C(*(id *)(v20 + 104), v25);
    v26 = *(unsigned __int8 *)(v20 + 128);
    if (v26 != 255)
      sub_10000563C(*(id *)(v20 + 120), v26);
    v27 = v20 + v10[11];
    v28 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + v10[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + v10[16] + 8));
  }

  v29 = v4 + v1[15];
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
  v32 = v4 + v1[19];
  if (!v8(v32, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v32, v6);
  v33 = v4 + v1[20];
  if (!v8(v33, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v33, v6);
  v34 = (_QWORD *)(v4 + v1[21]);
  if (*v34)
  {
    swift_release(*v34);
    swift_release(v34[1]);
    swift_release(v34[2]);
  }
  v35 = v4 + v1[22];
  v36 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
  {
    v37 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v37(v35, v6);
    v37(v35 + *(int *)(v36 + 36), v6);
  }
  v38 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v39 = v35 + v38[5];
  v40 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = v35 + v38[6];
  v42 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v43 = *(_QWORD *)(v42 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
  swift_bridgeObjectRelease(*(_QWORD *)(v35 + v38[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v35 + v38[8] + 8));
  return swift_deallocObject(v47, v46 + v45, v3 | 7);
}

uint64_t sub_10003384C(uint64_t a1)
{
  return sub_100033858(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100030090);
}

uint64_t sub_100033858(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UpNextEntry.Episode(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_1000338B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000338F8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for ArtworkModel(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_1000168F8((_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = *(unsigned __int8 *)(v0 + v4 + 32);
  if (v7 != 255)
    sub_100005624(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v7);
  v8 = *(unsigned __int8 *)(v6 + 64);
  if (v8 != 255)
    sub_10000563C(*(id *)(v6 + 56), v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  if (v9 != 255)
    sub_10000563C(*(id *)(v6 + 72), v9);
  v10 = *(unsigned __int8 *)(v6 + 96);
  if (v10 != 255)
    sub_10000563C(*(id *)(v6 + 88), v10);
  v11 = *(unsigned __int8 *)(v6 + 112);
  if (v11 != 255)
    sub_10000563C(*(id *)(v6 + 104), v11);
  v12 = *(unsigned __int8 *)(v6 + 128);
  if (v12 != 255)
    sub_10000563C(*(id *)(v6 + 120), v12);
  v13 = ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v14 = v6 + v1[11];
  v15 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[16] + 8));
  return swift_deallocObject(v0, v13, v3 | 7);
}

uint64_t sub_100033A30(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100033A48@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  double *v7;

  v5 = *(_QWORD *)(type metadata accessor for ArtworkModel(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (double *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1000308F0(a1, (_QWORD *)(v2 + 16), v2 + v6, a2, *v7, v7[1]);
}

uint64_t sub_100033AB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100033AD4()
{
  uint64_t v0;

  return sub_10002DD1C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32), *(void (**)(void))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100033AE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033AF4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100033B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100033B24(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100033B2C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100033B64(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100033B2C(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100033BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for EyebrowBuilderSourceCopy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100033C08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for EyebrowBuilderSourceCopy(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100030BE0(a1, v1 + v4, *(unsigned __int8 *)(v1 + v4 + *(_QWORD *)(v3 + 64)));
}

uint64_t sub_100033C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_100081DA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033C98(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  Swift::String v55;
  void *object;
  Swift::String v57;
  uint64_t v58;
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  uint64_t v83;
  char *v84;
  uint64_t (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  _QWORD *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v171;
  char *v172;
  uint64_t v173;
  void (*v174)(char *, uint64_t);
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  char *v203;
  void (*v204)(char *, uint64_t);
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t Entry;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  void (*v237)(uint64_t);
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;

  v236 = a3;
  v237 = a2;
  v4 = sub_100005150(&qword_100081840);
  __chkstk_darwin(v4);
  v234 = (char *)&v184 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Entry = type metadata accessor for UpNextEntry(0);
  __chkstk_darwin(Entry);
  v212 = (uint64_t)&v184 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = type metadata accessor for TimelineProviderContext(0);
  v221 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v219 = v7;
  v220 = (char *)&v184 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_100005150(&qword_100081C78);
  v215 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v213 = (char *)&v184 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_100005150(&qword_100081C80);
  v217 = *(_QWORD *)(v218 - 8);
  __chkstk_darwin(v218);
  v214 = (char *)&v184 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_100005150(&qword_100081C88);
  v224 = *(_QWORD *)(v225 - 8);
  __chkstk_darwin(v225);
  v222 = (char *)&v184 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005150(&qword_100081C90);
  v227 = *(_QWORD *)(v11 - 8);
  v228 = v11;
  __chkstk_darwin(v11);
  v226 = (char *)&v184 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100005150(&qword_100081C98);
  v200 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v199 = (char *)&v184 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005150(&qword_100081030);
  __chkstk_darwin(v14);
  v193 = (uint64_t)&v184 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for ArtworkRequest(0);
  v188 = *(_QWORD *)(v190 - 8);
  v16 = __chkstk_darwin(v190);
  v185 = (char *)&v184 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v187 = (char *)&v184 - v19;
  v20 = __chkstk_darwin(v18);
  v186 = (char *)&v184 - v21;
  __chkstk_darwin(v20);
  v189 = (char *)&v184 - v22;
  v192 = type metadata accessor for UpNextEntry.Episode(0);
  v194 = *(_QWORD *)(v192 - 8);
  v23 = __chkstk_darwin(v192);
  v205 = (char *)&v184 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v191 = (uint64_t)&v184 - v25;
  v26 = sub_100005150(&qword_100081028);
  v27 = __chkstk_darwin(v26);
  v211 = (char *)&v184 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v196 = (uint64_t)&v184 - v29;
  v30 = type metadata accessor for Date(0);
  v230 = *(_QWORD *)(v30 - 8);
  v231 = v30;
  v31 = __chkstk_darwin(v30);
  v232 = (char *)&v184 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v197 = (char *)&v184 - v33;
  v238 = type metadata accessor for WidgetImageProvider(0);
  v235 = *(_QWORD *)(v238 - 8);
  v34 = __chkstk_darwin(v238);
  v207 = (char *)&v184 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = v35;
  __chkstk_darwin(v34);
  v240 = (char *)&v184 - v36;
  v195 = type metadata accessor for WidgetNowPlayingInfo(0);
  v208 = *(_QWORD *)(v195 - 8);
  v37 = __chkstk_darwin(v195);
  v210 = (uint64_t)&v184 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v198 = (uint64_t)&v184 - v40;
  v209 = v41;
  __chkstk_darwin(v39);
  v43 = (char *)&v184 - v42;
  v44 = type metadata accessor for WidgetFamily(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = __chkstk_darwin(v44);
  v203 = (char *)&v184 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __chkstk_darwin(v46);
  v50 = (char *)&v184 - v49;
  v51 = __chkstk_darwin(v48);
  v53 = (char *)&v184 - v52;
  v241 = 40;
  v242 = 0xE100000000000000;
  v239 = a1;
  TimelineProviderContext.family.getter(v51);
  v54 = sub_10000FBAC(&qword_100081CA0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v44, v54);
  object = v55._object;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(object);
  v233 = v45;
  v204 = *(void (**)(char *, uint64_t))(v45 + 8);
  v204(v53, v44);
  v57._countAndFlagsBits = 41;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  v58 = v241;
  v59 = (char *)v242;
  sub_100033B2C(0, &qword_100081CA8, OS_os_log_ptr);
  v60 = (void *)static OS_os_log.widget.getter();
  v61 = sub_100005150(&qword_100081CB0);
  v62 = swift_allocObject(v61, 72, 7);
  v202 = xmmword_10006D950;
  *(_OWORD *)(v62 + 16) = xmmword_10006D950;
  *(_QWORD *)(v62 + 56) = &type metadata for String;
  v63 = sub_10003323C();
  *(_QWORD *)(v62 + 64) = v63;
  *(_QWORD *)(v62 + 32) = v58;
  *(_QWORD *)(v62 + 40) = v59;
  v64 = swift_bridgeObjectRetain(v59);
  v65 = static os_log_type_t.default.getter(v64);
  os_log(_:dso:log:type:_:)("Start loading episodes %{public}@", 33, 2, &_mh_execute_header, v60, v65, v62);

  swift_bridgeObjectRelease(v62);
  if (!objc_msgSend((id)objc_opt_self(MTDB), "canExtensionOpenDatabase"))
  {
    v73 = (void *)static OS_os_log.widget.getter();
    v74 = static os_log_type_t.error.getter();
    v75 = swift_allocObject(v61, 72, 7);
    *(_OWORD *)(v75 + 16) = v202;
    *(_QWORD *)(v75 + 56) = &type metadata for String;
    *(_QWORD *)(v75 + 64) = v63;
    *(_QWORD *)(v75 + 32) = v58;
    *(_QWORD *)(v75 + 40) = v59;
    os_log(_:dso:log:type:_:)("Can't open the DB %{public}@", 28, 2, &_mh_execute_header, v73, v74, v75);

    swift_bridgeObjectRelease(v75);
    v76 = (uint64_t)v211;
    v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v230 + 56))(v211, 1, 1, v231);
    v78 = v234;
    TimelineProviderContext.family.getter(v77);
    v79 = (*(uint64_t (**)(void *, _QWORD, uint64_t, uint64_t))(v233 + 56))(v78, 0, 1, v44);
    v80 = (uint64_t)v232;
    Date.init()(v79);
    v81 = v212;
    sub_10001F36C(1u, (uint64_t)_swiftEmptyArrayStorage, 0, v76, v80, v78, v212);
    v237(v81);
    v82 = type metadata accessor for UpNextEntry;
    v83 = v81;
    return sub_10000EF80(v83, v82);
  }
  *(_QWORD *)&v202 = v63;
  v211 = v59;
  v212 = v58;
  sub_1000129DC((uint64_t)v43);
  v234 = v43;
  WidgetNowPlayingInfo.logInfo()();
  v66 = v239;
  TimelineProviderContext.family.getter(v67);
  v68 = v233;
  v69 = v203;
  (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v203, v50, v44);
  v70 = (*(uint64_t (**)(char *, uint64_t))(v68 + 88))(v69, v44);
  if (v70 == enum case for WidgetFamily.systemSmall(_:))
  {
    v71 = 1;
    v72 = v212;
LABEL_7:
    v85 = (uint64_t (*)(char *, uint64_t))v204;
    goto LABEL_8;
  }
  v84 = v69;
  v72 = v212;
  if (v70 == enum case for WidgetFamily.systemMedium(_:))
  {
    v71 = 2;
    goto LABEL_7;
  }
  v85 = (uint64_t (*)(char *, uint64_t))v204;
  if (v70 == enum case for WidgetFamily.systemLarge(_:))
  {
    v71 = 4;
    goto LABEL_8;
  }
  if (v70 == enum case for WidgetFamily.systemExtraLarge(_:))
    goto LABEL_20;
  v71 = 1;
  if (v70 != enum case for WidgetFamily.accessoryCircular(_:)
    && v70 != enum case for WidgetFamily.accessoryRectangular(_:)
    && v70 != enum case for WidgetFamily.accessoryInline(_:))
  {
    v204(v84, v44);
LABEL_20:
    v71 = 6;
  }
LABEL_8:
  v86 = v85(v50, v44);
  __chkstk_darwin(v86);
  v87 = (uint64_t)v234;
  *(&v184 - 2) = (uint64_t)v234;
  *(&v184 - 1) = v66;
  v88 = sub_10002DB84(v71, (uint64_t)sub_100035390, (uint64_t)(&v184 - 4));
  v89 = (void *)static OS_os_log.widget.getter();
  v90 = swift_allocObject(v61, 112, 7);
  *(_OWORD *)(v90 + 16) = xmmword_10006DBB0;
  v91 = *(_QWORD *)(v88 + 16);
  *(_QWORD *)(v90 + 56) = &type metadata for Int;
  *(_QWORD *)(v90 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v90 + 32) = v91;
  v92 = v202;
  *(_QWORD *)(v90 + 96) = &type metadata for String;
  *(_QWORD *)(v90 + 104) = v92;
  *(_QWORD *)(v90 + 72) = v72;
  v93 = v211;
  *(_QWORD *)(v90 + 80) = v211;
  v94 = swift_bridgeObjectRetain(v93);
  v95 = static os_log_type_t.default.getter(v94);
  os_log(_:dso:log:type:_:)("Loaded %i episodes %{public}@", 29, 2, &_mh_execute_header, v89, v95, v90);

  v96 = swift_bridgeObjectRelease(v90);
  v97 = kMTWidgetArtworkWidth;
  v98 = kMTWidgetArtworkHeight;
  WidgetImageProvider.init()(v96);
  v99 = type metadata accessor for Podcasts(0);
  v243 = v99;
  v244 = sub_10000FBAC(&qword_100081CC0, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v100 = sub_100033288(&v241);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v99 - 8) + 104))(v100, enum case for Podcasts.widgetNowPlayingArtwork(_:), v99);
  LOBYTE(v99) = isFeatureEnabled(_:)(&v241);
  sub_1000168F8(&v241);
  v101 = v238;
  v102 = v235;
  v103 = v205;
  if ((v99 & 1) != 0)
  {
    v104 = *(unsigned __int8 *)(v87 + 16);
    v105 = v198;
    sub_10000EF3C(v87, v198, type metadata accessor for WidgetNowPlayingInfo);
    if (v104 == 1)
    {
      sub_10000EF80(v105, type metadata accessor for WidgetNowPlayingInfo);
    }
    else
    {
      v106 = v88;
      v107 = v196;
      sub_10000EFC4(v105 + *(int *)(v195 + 40), v196, &qword_100081028);
      v108 = v230;
      v109 = v231;
      v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v230 + 48))(v107, 1, v231);
      v111 = v197;
      if ((_DWORD)v110 == 1)
      {
        Date.init()(v110);
        v112 = sub_10000F008(v107, &qword_100081028);
      }
      else
      {
        v112 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 32))(v197, v107, v109);
      }
      v113 = v232;
      Date.init()(v112);
      v114 = static Date.> infix(_:_:)(v111, v113);
      v115 = *(void (**)(char *, uint64_t))(v108 + 8);
      v115(v113, v109);
      v115(v111, v109);
      sub_10000EF80(v198, type metadata accessor for WidgetNowPlayingInfo);
      v101 = v238;
      v88 = v106;
      if ((v114 & 1) == 0)
        goto LABEL_36;
    }
    v116 = *(_QWORD *)(v88 + 16);
    if (v116)
    {
      v117 = v88;
      v118 = v101;
      v119 = v117 + ((*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80));
      v120 = *(_QWORD *)(v194 + 72);
      v121 = v117;
      swift_bridgeObjectRetain(v117);
      while (1)
      {
        sub_10000EF3C(v119, (uint64_t)v103, type metadata accessor for UpNextEntry.Episode);
        v122 = *(_QWORD *)(v87 + 8);
        if (v122)
        {
          v123 = v103[1];
          v124 = *v103 == *(_QWORD *)v87 && v122 == v123;
          if (v124 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v103, v123) & 1) != 0)
            break;
        }
        sub_10000EF80((uint64_t)v103, type metadata accessor for UpNextEntry.Episode);
        v119 += v120;
        if (!--v116)
        {
          swift_bridgeObjectRelease(v121);
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease(v121);
      v125 = v191;
      sub_10000FC78((uint64_t)v103, v191, type metadata accessor for UpNextEntry.Episode);
      v126 = v193;
      sub_10000EFC4(v125 + *(int *)(v192 + 52), v193, &qword_100081030);
      sub_10000EF80(v125, type metadata accessor for UpNextEntry.Episode);
      v127 = type metadata accessor for ArtworkModel(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 48))(v126, 1, v127) == 1)
      {
        sub_10000F008(v126, &qword_100081030);
LABEL_35:
        v101 = v118;
        v88 = v121;
        goto LABEL_36;
      }
      v171 = v185;
      ArtworkModel.preferredRequest.getter();
      sub_10000EF80(v126, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v172 = v187;
      ArtworkRequest.resized(to:displayScale:)(0, 1, v97, v98);
      v173 = v188;
      v174 = *(void (**)(char *, uint64_t))(v188 + 8);
      v175 = v190;
      v174(v171, v190);
      v176 = v186;
      ArtworkRequest.replacingEffects(_:)(&off_10007DD40);
      v174(v172, v175);
      v177 = v189;
      (*(void (**)(char *, char *, uint64_t))(v173 + 32))(v189, v176, v175);
      v178 = WidgetImageProvider.load(artwork:)(v177);
      v241 = v178;
      v179 = sub_100005150(&qword_100081D20);
      v180 = sub_10000EEA8(&qword_100081D28, &qword_100081D20, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v181 = Publisher.makeOptional.getter(v179, v180);
      swift_release(v178);
      v241 = v181;
      v182 = sub_100005150(&qword_100081D00);
      v183 = sub_10000EEA8(&qword_100081D10, &qword_100081D00, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v233 = Publisher.eraseToAnyPublisher()(v182, v183);
      swift_release(v181);
      v174(v177, v175);
      v101 = v118;
      v88 = v121;
      goto LABEL_37;
    }
  }
LABEL_36:
  v241 = 0;
  v128 = sub_100005150(&qword_100081CC8);
  v129 = v199;
  Just.init(_:)(&v241, v128);
  v130 = sub_10000EEA8(&qword_100081CD0, &qword_100081C98, (uint64_t)&protocol conformance descriptor for Just<A>);
  v131 = v201;
  v233 = Publisher.eraseToAnyPublisher()(v201, v130);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v129, v131);
LABEL_37:
  v241 = v88;
  v132 = sub_100005150(&qword_100081868);
  v133 = sub_10000EEA8(&qword_100081CD8, &qword_100081868, (uint64_t)&protocol conformance descriptor for [A]);
  v134 = v213;
  Publishers.Sequence.init(sequence:)(&v241, v132, &type metadata for Never, v133, &protocol witness table for Never);
  v135 = v207;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v207, v240, v101);
  v136 = *(unsigned __int8 *)(v102 + 80);
  v137 = (v136 + 32) & ~v136;
  v138 = swift_allocObject(&unk_10007E7B0, v137 + v206, v136 | 7);
  *(double *)(v138 + 16) = v97;
  *(double *)(v138 + 24) = v98;
  v139 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v102 + 32))(v138 + v137, v135, v101);
  v140 = static Subscribers.Demand.unlimited.getter(v139);
  v141 = sub_100005150(&qword_100081CE0);
  v142 = sub_10000EEA8(&qword_100081CE8, &qword_100081C78, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  v143 = sub_10000EEA8(&qword_100081CF0, &qword_100081CE0, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v144 = v214;
  v145 = v216;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v140, sub_1000332C8, v138, v216, v141, v142, v143);
  swift_release(v138);
  (*(void (**)(char *, uint64_t))(v215 + 8))(v134, v145);
  v146 = sub_10000EEA8(&qword_100081CF8, &qword_100081C80, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v147 = v222;
  v148 = v218;
  Publisher.collect()(v218, v146);
  (*(void (**)(char *, uint64_t))(v217 + 8))(v144, v148);
  v149 = v233;
  v241 = v233;
  v150 = v210;
  sub_10000EF3C((uint64_t)v234, v210, type metadata accessor for WidgetNowPlayingInfo);
  v151 = v221;
  v152 = v220;
  v153 = v223;
  (*(void (**)(char *, uint64_t, uint64_t))(v221 + 16))(v220, v239, v223);
  v154 = *(unsigned __int8 *)(v208 + 80);
  v155 = (v154 + 16) & ~v154;
  v156 = *(unsigned __int8 *)(v151 + 80);
  v157 = (v209 + v156 + v155) & ~v156;
  v158 = swift_allocObject(&unk_10007E7D8, v157 + v219, v154 | v156 | 7);
  sub_10000FC78(v150, v158 + v155, type metadata accessor for WidgetNowPlayingInfo);
  (*(void (**)(uint64_t, char *, uint64_t))(v151 + 32))(v158 + v157, v152, v153);
  swift_retain(v149);
  v159 = sub_100005150(&qword_100081D00);
  v160 = sub_10000EEA8(&qword_100081D08, &qword_100081C88, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  v161 = sub_10000EEA8(&qword_100081D10, &qword_100081D00, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v162 = v226;
  v163 = v225;
  Publisher.combineLatest<A, B>(_:_:)(&v241, sub_1000332D0, v158, v225, v159, Entry, v160, v161);
  swift_release(v158);
  swift_release(v241);
  (*(void (**)(char *, uint64_t))(v224 + 8))(v147, v163);
  v164 = (_QWORD *)swift_allocObject(&unk_10007E800, 48, 7);
  v165 = v211;
  v164[2] = v212;
  v164[3] = v165;
  v166 = v236;
  v164[4] = v237;
  v164[5] = v166;
  v167 = sub_10000EEA8(&qword_100081D18, &qword_100081C90, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  swift_retain(v166);
  v168 = v228;
  v169 = Publisher<>.sink(receiveValue:)(sub_10003538C, v164, v228, v167);
  swift_release(v164);
  (*(void (**)(char *, uint64_t))(v227 + 8))(v162, v168);
  if (qword_100080F78 != -1)
    swift_once(&qword_100080F78, sub_100030EF0);
  swift_beginAccess(&qword_100085758, &v241, 33, 0);
  AnyCancellable.store(in:)(&qword_100085758);
  swift_endAccess(&v241);
  swift_release(v149);
  swift_release(v169);
  (*(void (**)(char *, uint64_t))(v235 + 8))(v240, v238);
  v82 = type metadata accessor for WidgetNowPlayingInfo;
  v83 = (uint64_t)v234;
  return sub_10000EF80(v83, v82);
}

uint64_t sub_1000350C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for WidgetImageProvider(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100035128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WidgetImageProvider(0) - 8) + 80);
  return sub_10002FA3C(a1, v2 + ((v5 + 32) & ~v5), a2, *(double *)(v2 + 16), *(double *)(v2 + 24));
}

uint64_t sub_10003517C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v17 = *(_QWORD *)(v2 + 64);
  v18 = type metadata accessor for TimelineProviderContext(0);
  v4 = *(_QWORD *)(v18 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v16 = *(_QWORD *)(v4 + 64);
  v6 = v0 + ((v3 + 16) & ~v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
  v7 = v6 + v1[6];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = v6 + v1[7];
  if (!v10(v11, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  v12 = v6 + v1[10];
  if (!v10(v12, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  v13 = (((v3 + 16) & ~v3) + v17 + v5) & ~v5;
  v14 = v13 + v16;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v13, v18);
  return swift_deallocObject(v0, v14, v3 | v5 | 7);
}

uint64_t sub_1000352DC@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = type metadata accessor for WidgetNowPlayingInfo(0);
  v8 = (*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  type metadata accessor for TimelineProviderContext(0);
  return sub_1000302F8(a1, a2, v3 + v8, a3);
}

uint64_t sub_100035360()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

_QWORD *sub_100035394(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id *v49;
  int v50;
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *__dst;
  void *__dsta;
  _QWORD *v183;
  _QWORD *v184;
  unsigned int (*v186)(char *, uint64_t, uint64_t);
  int *v187;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v10 = a2[6];
    v9 = a2[7];
    a1[6] = v10;
    a1[7] = v9;
    v12 = a2[8];
    v11 = a2[9];
    a1[8] = v12;
    a1[9] = v11;
    v13 = a2[10];
    a1[10] = v13;
    v187 = (int *)type metadata accessor for UpNextEntry.Episode(0);
    v14 = v187[10];
    __dst = (char *)a1 + v14;
    v183 = a1;
    v184 = a2;
    v15 = (char *)a2 + v14;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v17 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_retain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v186 = (unsigned int (*)(char *, uint64_t, uint64_t))v18;
    if (v18(v15, 1, v16))
    {
      v19 = sub_100005150(&qword_100081028);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v22 = v187[11];
    v21 = v183;
    v23 = (_QWORD *)((char *)v183 + v22);
    v24 = (_QWORD *)((char *)v184 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v187[12];
    v27 = (_QWORD *)((char *)v183 + v26);
    v28 = (_QWORD *)((char *)v184 + v26);
    v29 = (int *)type metadata accessor for ArtworkModel(0);
    v30 = *((_QWORD *)v29 - 1);
    v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
    swift_bridgeObjectRetain(v25);
    if (v31(v28, 1, v29))
    {
      v32 = sub_100005150(&qword_100081030);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      __dsta = (void *)v16;
      v33 = v28[1];
      *v27 = *v28;
      v27[1] = v33;
      v34 = *((unsigned __int8 *)v28 + 32);
      swift_bridgeObjectRetain(v33);
      if (v34 == 255)
      {
        *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
        *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
      }
      else
      {
        v35 = v28[2];
        v36 = v28[3];
        sub_100005190(v35, v36, v34);
        v27[2] = v35;
        v27[3] = v36;
        *((_BYTE *)v27 + 32) = v34;
      }
      *(_OWORD *)(v27 + 5) = *(_OWORD *)(v28 + 5);
      v37 = (id *)(v28 + 7);
      v38 = *((unsigned __int8 *)v28 + 64);
      if (v38 == 255)
      {
        v27[7] = *v37;
        *((_BYTE *)v27 + 64) = *((_BYTE *)v28 + 64);
      }
      else
      {
        v39 = *v37;
        sub_1000051A8(*v37, *((_BYTE *)v28 + 64));
        v27[7] = v39;
        *((_BYTE *)v27 + 64) = v38;
      }
      v40 = (id *)(v28 + 9);
      v41 = *((unsigned __int8 *)v28 + 80);
      if (v41 == 255)
      {
        v27[9] = *v40;
        *((_BYTE *)v27 + 80) = *((_BYTE *)v28 + 80);
      }
      else
      {
        v42 = *v40;
        sub_1000051A8(*v40, *((_BYTE *)v28 + 80));
        v27[9] = v42;
        *((_BYTE *)v27 + 80) = v41;
      }
      v43 = (id *)(v28 + 11);
      v44 = *((unsigned __int8 *)v28 + 96);
      if (v44 == 255)
      {
        v27[11] = *v43;
        *((_BYTE *)v27 + 96) = *((_BYTE *)v28 + 96);
      }
      else
      {
        v45 = *v43;
        sub_1000051A8(*v43, *((_BYTE *)v28 + 96));
        v27[11] = v45;
        *((_BYTE *)v27 + 96) = v44;
      }
      v46 = (id *)(v28 + 13);
      v47 = *((unsigned __int8 *)v28 + 112);
      if (v47 == 255)
      {
        v27[13] = *v46;
        *((_BYTE *)v27 + 112) = *((_BYTE *)v28 + 112);
      }
      else
      {
        v48 = *v46;
        sub_1000051A8(*v46, *((_BYTE *)v28 + 112));
        v27[13] = v48;
        *((_BYTE *)v27 + 112) = v47;
      }
      v49 = (id *)(v28 + 15);
      v50 = *((unsigned __int8 *)v28 + 128);
      if (v50 == 255)
      {
        v27[15] = *v49;
        *((_BYTE *)v27 + 128) = *((_BYTE *)v28 + 128);
      }
      else
      {
        v51 = *v49;
        sub_1000051A8(*v49, *((_BYTE *)v28 + 128));
        v27[15] = v51;
        *((_BYTE *)v27 + 128) = v50;
      }
      v16 = (uint64_t)__dsta;
      *((_BYTE *)v27 + 129) = *((_BYTE *)v28 + 129);
      v52 = v29[11];
      v53 = (char *)v27 + v52;
      v54 = (char *)v28 + v52;
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      v56 = v29[12];
      v57 = (_QWORD *)((char *)v27 + v56);
      v58 = (_QWORD *)((char *)v28 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
      *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
      *((_BYTE *)v27 + v29[15]) = *((_BYTE *)v28 + v29[15]);
      v60 = v29[16];
      v61 = (_QWORD *)((char *)v27 + v60);
      v62 = (_QWORD *)((char *)v28 + v60);
      v63 = v62[1];
      *v61 = *v62;
      v61[1] = v63;
      v64 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      v64(v27, 0, 1, v29);
    }
    v65 = v187[13];
    v66 = (_QWORD *)((char *)v183 + v65);
    v67 = (_QWORD *)((char *)v184 + v65);
    if (v31((_QWORD *)((char *)v184 + v65), 1, v29))
    {
      v68 = sub_100005150(&qword_100081030);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = v16;
      v70 = v67[1];
      *v66 = *v67;
      v66[1] = v70;
      v71 = *((unsigned __int8 *)v67 + 32);
      swift_bridgeObjectRetain(v70);
      if (v71 == 255)
      {
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        *((_BYTE *)v66 + 32) = *((_BYTE *)v67 + 32);
      }
      else
      {
        v72 = v67[2];
        v73 = v67[3];
        sub_100005190(v72, v73, v71);
        v66[2] = v72;
        v66[3] = v73;
        *((_BYTE *)v66 + 32) = v71;
      }
      *(_OWORD *)(v66 + 5) = *(_OWORD *)(v67 + 5);
      v74 = (id *)(v67 + 7);
      v75 = *((unsigned __int8 *)v67 + 64);
      if (v75 == 255)
      {
        v66[7] = *v74;
        *((_BYTE *)v66 + 64) = *((_BYTE *)v67 + 64);
      }
      else
      {
        v76 = *v74;
        sub_1000051A8(*v74, *((_BYTE *)v67 + 64));
        v66[7] = v76;
        *((_BYTE *)v66 + 64) = v75;
      }
      v77 = (id *)(v67 + 9);
      v78 = *((unsigned __int8 *)v67 + 80);
      if (v78 == 255)
      {
        v66[9] = *v77;
        *((_BYTE *)v66 + 80) = *((_BYTE *)v67 + 80);
      }
      else
      {
        v79 = *v77;
        sub_1000051A8(*v77, *((_BYTE *)v67 + 80));
        v66[9] = v79;
        *((_BYTE *)v66 + 80) = v78;
      }
      v80 = (id *)(v67 + 11);
      v81 = *((unsigned __int8 *)v67 + 96);
      if (v81 == 255)
      {
        v66[11] = *v80;
        *((_BYTE *)v66 + 96) = *((_BYTE *)v67 + 96);
      }
      else
      {
        v82 = *v80;
        sub_1000051A8(*v80, *((_BYTE *)v67 + 96));
        v66[11] = v82;
        *((_BYTE *)v66 + 96) = v81;
      }
      v83 = (id *)(v67 + 13);
      v84 = *((unsigned __int8 *)v67 + 112);
      if (v84 == 255)
      {
        v66[13] = *v83;
        *((_BYTE *)v66 + 112) = *((_BYTE *)v67 + 112);
      }
      else
      {
        v85 = *v83;
        sub_1000051A8(*v83, *((_BYTE *)v67 + 112));
        v66[13] = v85;
        *((_BYTE *)v66 + 112) = v84;
      }
      v86 = (id *)(v67 + 15);
      v87 = *((unsigned __int8 *)v67 + 128);
      if (v87 == 255)
      {
        v66[15] = *v86;
        *((_BYTE *)v66 + 128) = *((_BYTE *)v67 + 128);
      }
      else
      {
        v88 = *v86;
        sub_1000051A8(*v86, *((_BYTE *)v67 + 128));
        v66[15] = v88;
        *((_BYTE *)v66 + 128) = v87;
      }
      v16 = v69;
      *((_BYTE *)v66 + 129) = *((_BYTE *)v67 + 129);
      v89 = v29[11];
      v90 = (char *)v66 + v89;
      v91 = (char *)v67 + v89;
      v92 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = v29[12];
      v94 = (_QWORD *)((char *)v66 + v93);
      v95 = (_QWORD *)((char *)v67 + v93);
      v96 = v95[1];
      *v94 = *v95;
      v94[1] = v96;
      *((_BYTE *)v66 + v29[13]) = *((_BYTE *)v67 + v29[13]);
      *((_BYTE *)v66 + v29[14]) = *((_BYTE *)v67 + v29[14]);
      *((_BYTE *)v66 + v29[15]) = *((_BYTE *)v67 + v29[15]);
      v97 = v29[16];
      v98 = (_QWORD *)((char *)v66 + v97);
      v99 = (_QWORD *)((char *)v67 + v97);
      v100 = v99[1];
      *v98 = *v99;
      v98[1] = v100;
      v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v100);
      v101(v66, 0, 1, v29);
    }
    v102 = v187[14];
    v103 = *(void **)((char *)v184 + v102);
    *(_QWORD *)((char *)v183 + v102) = v103;
    v104 = v187[15];
    v105 = (char *)v183 + v104;
    v106 = (char *)v184 + v104;
    v107 = type metadata accessor for URL(0);
    v108 = *(_QWORD *)(v107 - 8);
    v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
    v110 = v103;
    if (v109(v106, 1, v107))
    {
      v111 = sub_100005150(&qword_100081038);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    *((_BYTE *)v183 + v187[16]) = *((_BYTE *)v184 + v187[16]);
    v112 = v187[17];
    v113 = (char *)v183 + v112;
    v114 = (char *)v184 + v112;
    *(_QWORD *)v113 = *(_QWORD *)v114;
    v113[8] = v114[8];
    v115 = v187[18];
    v116 = (char *)v183 + v115;
    v117 = (char *)v184 + v115;
    *(_QWORD *)v116 = *(_QWORD *)v117;
    v116[8] = v117[8];
    v118 = v187[19];
    v119 = (char *)v183 + v118;
    v120 = (char *)v184 + v118;
    if (v186((char *)v184 + v118, 1, v16))
    {
      v121 = sub_100005150(&qword_100081028);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v119, v120, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v119, 0, 1, v16);
    }
    v122 = v187[20];
    v123 = (char *)v183 + v122;
    v124 = (char *)v184 + v122;
    if (v186((char *)v184 + v122, 1, v16))
    {
      v125 = sub_100005150(&qword_100081028);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v123, v124, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v123, 0, 1, v16);
    }
    v126 = v187[21];
    v127 = (_QWORD *)((char *)v183 + v126);
    v128 = (_QWORD *)((char *)v184 + v126);
    v129 = *v128;
    if (*v128)
    {
      v130 = v128[1];
      v131 = v128[2];
      *v127 = v129;
      v127[1] = v130;
      v127[2] = v131;
      swift_retain(v129);
      swift_retain(v130);
      swift_retain(v131);
    }
    else
    {
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v127[2] = v128[2];
    }
    v132 = v187[22];
    v133 = (char *)v183 + v132;
    v134 = (char *)v184 + v132;
    v135 = sub_100005150(&qword_100081040);
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_100005150(&qword_100081048);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v138(v133, v134, v16);
      v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    v140 = v139[5];
    v141 = &v133[v140];
    v142 = &v134[v140];
    v143 = type metadata accessor for PlaybackButton.State(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
    v144 = v139[6];
    v145 = &v133[v144];
    v146 = &v134[v144];
    v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
    {
      v149 = sub_100005150(&qword_100081050);
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
    }
    v150 = v139[7];
    v151 = &v133[v150];
    v152 = &v134[v150];
    v153 = *((_QWORD *)v152 + 1);
    *(_QWORD *)v151 = *(_QWORD *)v152;
    *((_QWORD *)v151 + 1) = v153;
    v154 = v139[8];
    v155 = &v133[v154];
    v156 = &v134[v154];
    v157 = *((_QWORD *)v156 + 1);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v157;
    v158 = a3[6];
    *(_QWORD *)((char *)v183 + a3[5]) = *(_QWORD *)((char *)v184 + a3[5]);
    *((_BYTE *)v183 + v158) = *((_BYTE *)v184 + v158);
    v159 = a3[7];
    v160 = (_QWORD *)((char *)v183 + v159);
    v161 = (_QWORD *)((char *)v184 + v159);
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v157);
    v162 = sub_100005150(&qword_100081DC8);
    if (swift_getEnumCaseMultiPayload(v161, v162) == 1)
    {
      v163 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v163 - 8) + 16))(v160, v161, v163);
      v164 = 1;
    }
    else
    {
      v165 = *v161;
      *v160 = *v161;
      swift_retain(v165);
      v164 = 0;
    }
    swift_storeEnumTagMultiPayload(v160, v162, v164);
    v166 = a3[8];
    v167 = (char *)v183 + v166;
    v168 = (char *)v184 + v166;
    v169 = *(_QWORD *)v168;
    v170 = v168[8];
    sub_1000051BC(*(_QWORD *)v168, v170);
    *(_QWORD *)v167 = v169;
    v167[8] = v170;
    v171 = a3[9];
    v172 = (_QWORD *)((char *)v183 + v171);
    v173 = (_QWORD *)((char *)v184 + v171);
    v174 = sub_100005150(&qword_100081DD0);
    if (swift_getEnumCaseMultiPayload(v173, v174) == 1)
    {
      v175 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(v172, v173, v175);
      v176 = v172;
      v177 = v174;
      v178 = 1;
    }
    else
    {
      v179 = *v173;
      *v172 = *v173;
      swift_retain(v179);
      v176 = v172;
      v177 = v174;
      v178 = 0;
    }
    swift_storeEnumTagMultiPayload(v176, v177, v178);
  }
  return v21;
}

uint64_t sub_100035F2C(_QWORD *a1, int *a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  char *v9;
  int *v10;
  unsigned int (*v11)(char *, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  int *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_release(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  v4 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v5 = (char *)a1 + v4[10];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[11] + 8));
  v9 = (char *)a1 + v4[12];
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
    v12 = v9[32];
    if (v12 != 255)
      sub_100005624(*((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), v12);
    v13 = v9[64];
    if (v13 != 255)
      sub_10000563C(*((id *)v9 + 7), v13);
    v14 = v9[80];
    if (v14 != 255)
      sub_10000563C(*((id *)v9 + 9), v14);
    v15 = v9[96];
    if (v15 != 255)
      sub_10000563C(*((id *)v9 + 11), v15);
    v16 = v9[112];
    if (v16 != 255)
      sub_10000563C(*((id *)v9 + 13), v16);
    v17 = v9[128];
    if (v17 != 255)
      sub_10000563C(*((id *)v9 + 15), v17);
    v18 = &v9[v10[11]];
    v19 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[16] + 8]);
  }
  v20 = (char *)a1 + v4[13];
  if (!v11(v20, 1, v10))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v20 + 1));
    v21 = v20[32];
    if (v21 != 255)
      sub_100005624(*((_QWORD *)v20 + 2), *((_QWORD *)v20 + 3), v21);
    v22 = v20[64];
    if (v22 != 255)
      sub_10000563C(*((id *)v20 + 7), v22);
    v23 = v20[80];
    if (v23 != 255)
      sub_10000563C(*((id *)v20 + 9), v23);
    v24 = v20[96];
    if (v24 != 255)
      sub_10000563C(*((id *)v20 + 11), v24);
    v25 = v20[112];
    if (v25 != 255)
      sub_10000563C(*((id *)v20 + 13), v25);
    v26 = v20[128];
    if (v26 != 255)
      sub_10000563C(*((id *)v20 + 15), v26);
    v27 = &v20[v10[11]];
    v28 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
    swift_bridgeObjectRelease(*(_QWORD *)&v20[v10[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v20[v10[16] + 8]);
  }

  v29 = (char *)a1 + v4[15];
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
  v32 = (char *)a1 + v4[19];
  if (!v8(v32, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v32, v6);
  v33 = (char *)a1 + v4[20];
  if (!v8(v33, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v33, v6);
  v34 = (_QWORD *)((char *)a1 + v4[21]);
  if (*v34)
  {
    swift_release(*v34);
    swift_release(v34[1]);
    swift_release(v34[2]);
  }
  v35 = (char *)a1 + v4[22];
  v36 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
  {
    v37 = *(void (**)(char *, uint64_t))(v7 + 8);
    v37(v35, v6);
    v37(&v35[*(int *)(v36 + 36)], v6);
  }
  v38 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v39 = &v35[v38[5]];
  v40 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = &v35[v38[6]];
  v42 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v43 = *(_QWORD *)(v42 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
  swift_bridgeObjectRelease(*(_QWORD *)&v35[v38[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v35[v38[8] + 8]);
  v44 = (_QWORD *)((char *)a1 + a2[7]);
  v45 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v44, v45) == 1)
  {
    v46 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v44, v46);
  }
  else
  {
    swift_release(*v44);
  }
  sub_100005650(*(_QWORD *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  v47 = (_QWORD *)((char *)a1 + a2[9]);
  v48 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v47, v48) != 1)
    return swift_release(*v47);
  v49 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v47, v49);
}

_QWORD *sub_10003643C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(_QWORD *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  id *v34;
  int v35;
  id v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  id *v71;
  int v72;
  id v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void (*v98)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v99;
  void *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(char *, uint64_t, uint64_t);
  id v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *__dst;
  void *__dsta;
  _QWORD *v178;
  _QWORD *v179;
  int *v181;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v9 = a2[6];
  v8 = a2[7];
  a1[6] = v9;
  a1[7] = v8;
  v11 = a2[8];
  v10 = a2[9];
  a1[8] = v11;
  a1[9] = v10;
  v12 = a2[10];
  a1[10] = v12;
  v181 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v13 = v181[10];
  v178 = a2;
  v179 = a1;
  __dst = (char *)a1 + v13;
  v14 = (char *)a2 + v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  if (v17(v14, 1, v15))
  {
    v18 = sub_100005150(&qword_100081028);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = v181[11];
  v20 = (_QWORD *)((char *)v179 + v19);
  v21 = (_QWORD *)((char *)v178 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v181[12];
  v24 = (_QWORD *)((char *)v179 + v23);
  v25 = (_QWORD *)((char *)v178 + v23);
  v26 = (int *)type metadata accessor for ArtworkModel(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48);
  swift_bridgeObjectRetain(v22);
  if (v28(v25, 1, v26))
  {
    v29 = sub_100005150(&qword_100081030);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    __dsta = (void *)v15;
    v30 = v25[1];
    *v24 = *v25;
    v24[1] = v30;
    v31 = *((unsigned __int8 *)v25 + 32);
    swift_bridgeObjectRetain(v30);
    if (v31 == 255)
    {
      *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
      *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
    }
    else
    {
      v32 = v25[2];
      v33 = v25[3];
      sub_100005190(v32, v33, v31);
      v24[2] = v32;
      v24[3] = v33;
      *((_BYTE *)v24 + 32) = v31;
    }
    *(_OWORD *)(v24 + 5) = *(_OWORD *)(v25 + 5);
    v34 = (id *)(v25 + 7);
    v35 = *((unsigned __int8 *)v25 + 64);
    if (v35 == 255)
    {
      v24[7] = *v34;
      *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
    }
    else
    {
      v36 = *v34;
      sub_1000051A8(*v34, *((_BYTE *)v25 + 64));
      v24[7] = v36;
      *((_BYTE *)v24 + 64) = v35;
    }
    v37 = (id *)(v25 + 9);
    v38 = *((unsigned __int8 *)v25 + 80);
    if (v38 == 255)
    {
      v24[9] = *v37;
      *((_BYTE *)v24 + 80) = *((_BYTE *)v25 + 80);
    }
    else
    {
      v39 = *v37;
      sub_1000051A8(*v37, *((_BYTE *)v25 + 80));
      v24[9] = v39;
      *((_BYTE *)v24 + 80) = v38;
    }
    v40 = (id *)(v25 + 11);
    v41 = *((unsigned __int8 *)v25 + 96);
    if (v41 == 255)
    {
      v24[11] = *v40;
      *((_BYTE *)v24 + 96) = *((_BYTE *)v25 + 96);
    }
    else
    {
      v42 = *v40;
      sub_1000051A8(*v40, *((_BYTE *)v25 + 96));
      v24[11] = v42;
      *((_BYTE *)v24 + 96) = v41;
    }
    v43 = (id *)(v25 + 13);
    v44 = *((unsigned __int8 *)v25 + 112);
    if (v44 == 255)
    {
      v24[13] = *v43;
      *((_BYTE *)v24 + 112) = *((_BYTE *)v25 + 112);
    }
    else
    {
      v45 = *v43;
      sub_1000051A8(*v43, *((_BYTE *)v25 + 112));
      v24[13] = v45;
      *((_BYTE *)v24 + 112) = v44;
    }
    v46 = (id *)(v25 + 15);
    v47 = *((unsigned __int8 *)v25 + 128);
    if (v47 == 255)
    {
      v24[15] = *v46;
      *((_BYTE *)v24 + 128) = *((_BYTE *)v25 + 128);
    }
    else
    {
      v48 = *v46;
      sub_1000051A8(*v46, *((_BYTE *)v25 + 128));
      v24[15] = v48;
      *((_BYTE *)v24 + 128) = v47;
    }
    v15 = (uint64_t)__dsta;
    *((_BYTE *)v24 + 129) = *((_BYTE *)v25 + 129);
    v49 = v26[11];
    v50 = (char *)v24 + v49;
    v51 = (char *)v25 + v49;
    v52 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
    v53 = v26[12];
    v54 = (_QWORD *)((char *)v24 + v53);
    v55 = (_QWORD *)((char *)v25 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    *((_BYTE *)v24 + v26[13]) = *((_BYTE *)v25 + v26[13]);
    *((_BYTE *)v24 + v26[14]) = *((_BYTE *)v25 + v26[14]);
    *((_BYTE *)v24 + v26[15]) = *((_BYTE *)v25 + v26[15]);
    v57 = v26[16];
    v58 = (_QWORD *)((char *)v24 + v57);
    v59 = (_QWORD *)((char *)v25 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v60);
    v61(v24, 0, 1, v26);
  }
  v62 = v181[13];
  v63 = (_QWORD *)((char *)v179 + v62);
  v64 = (_QWORD *)((char *)v178 + v62);
  if (v28((_QWORD *)((char *)v178 + v62), 1, v26))
  {
    v65 = sub_100005150(&qword_100081030);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    v66 = v15;
    v67 = v64[1];
    *v63 = *v64;
    v63[1] = v67;
    v68 = *((unsigned __int8 *)v64 + 32);
    swift_bridgeObjectRetain(v67);
    if (v68 == 255)
    {
      *((_OWORD *)v63 + 1) = *((_OWORD *)v64 + 1);
      *((_BYTE *)v63 + 32) = *((_BYTE *)v64 + 32);
    }
    else
    {
      v69 = v64[2];
      v70 = v64[3];
      sub_100005190(v69, v70, v68);
      v63[2] = v69;
      v63[3] = v70;
      *((_BYTE *)v63 + 32) = v68;
    }
    *(_OWORD *)(v63 + 5) = *(_OWORD *)(v64 + 5);
    v71 = (id *)(v64 + 7);
    v72 = *((unsigned __int8 *)v64 + 64);
    if (v72 == 255)
    {
      v63[7] = *v71;
      *((_BYTE *)v63 + 64) = *((_BYTE *)v64 + 64);
    }
    else
    {
      v73 = *v71;
      sub_1000051A8(*v71, *((_BYTE *)v64 + 64));
      v63[7] = v73;
      *((_BYTE *)v63 + 64) = v72;
    }
    v74 = (id *)(v64 + 9);
    v75 = *((unsigned __int8 *)v64 + 80);
    if (v75 == 255)
    {
      v63[9] = *v74;
      *((_BYTE *)v63 + 80) = *((_BYTE *)v64 + 80);
    }
    else
    {
      v76 = *v74;
      sub_1000051A8(*v74, *((_BYTE *)v64 + 80));
      v63[9] = v76;
      *((_BYTE *)v63 + 80) = v75;
    }
    v77 = (id *)(v64 + 11);
    v78 = *((unsigned __int8 *)v64 + 96);
    if (v78 == 255)
    {
      v63[11] = *v77;
      *((_BYTE *)v63 + 96) = *((_BYTE *)v64 + 96);
    }
    else
    {
      v79 = *v77;
      sub_1000051A8(*v77, *((_BYTE *)v64 + 96));
      v63[11] = v79;
      *((_BYTE *)v63 + 96) = v78;
    }
    v80 = (id *)(v64 + 13);
    v81 = *((unsigned __int8 *)v64 + 112);
    if (v81 == 255)
    {
      v63[13] = *v80;
      *((_BYTE *)v63 + 112) = *((_BYTE *)v64 + 112);
    }
    else
    {
      v82 = *v80;
      sub_1000051A8(*v80, *((_BYTE *)v64 + 112));
      v63[13] = v82;
      *((_BYTE *)v63 + 112) = v81;
    }
    v83 = (id *)(v64 + 15);
    v84 = *((unsigned __int8 *)v64 + 128);
    if (v84 == 255)
    {
      v63[15] = *v83;
      *((_BYTE *)v63 + 128) = *((_BYTE *)v64 + 128);
    }
    else
    {
      v85 = *v83;
      sub_1000051A8(*v83, *((_BYTE *)v64 + 128));
      v63[15] = v85;
      *((_BYTE *)v63 + 128) = v84;
    }
    v15 = v66;
    *((_BYTE *)v63 + 129) = *((_BYTE *)v64 + 129);
    v86 = v26[11];
    v87 = (char *)v63 + v86;
    v88 = (char *)v64 + v86;
    v89 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
    v90 = v26[12];
    v91 = (_QWORD *)((char *)v63 + v90);
    v92 = (_QWORD *)((char *)v64 + v90);
    v93 = v92[1];
    *v91 = *v92;
    v91[1] = v93;
    *((_BYTE *)v63 + v26[13]) = *((_BYTE *)v64 + v26[13]);
    *((_BYTE *)v63 + v26[14]) = *((_BYTE *)v64 + v26[14]);
    *((_BYTE *)v63 + v26[15]) = *((_BYTE *)v64 + v26[15]);
    v94 = v26[16];
    v95 = (_QWORD *)((char *)v63 + v94);
    v96 = (_QWORD *)((char *)v64 + v94);
    v97 = v96[1];
    *v95 = *v96;
    v95[1] = v97;
    v98 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v97);
    v98(v63, 0, 1, v26);
  }
  v99 = v181[14];
  v100 = *(void **)((char *)v178 + v99);
  *(_QWORD *)((char *)v179 + v99) = v100;
  v101 = v181[15];
  v102 = (char *)v179 + v101;
  v103 = (char *)v178 + v101;
  v104 = type metadata accessor for URL(0);
  v105 = *(_QWORD *)(v104 - 8);
  v106 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v107 = v100;
  if (v106(v103, 1, v104))
  {
    v108 = sub_100005150(&qword_100081038);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v102, v103, v104);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
  }
  *((_BYTE *)v179 + v181[16]) = *((_BYTE *)v178 + v181[16]);
  v109 = v181[17];
  v110 = (char *)v179 + v109;
  v111 = (char *)v178 + v109;
  *(_QWORD *)v110 = *(_QWORD *)v111;
  v110[8] = v111[8];
  v112 = v181[18];
  v113 = (char *)v179 + v112;
  v114 = (char *)v178 + v112;
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v113[8] = v114[8];
  v115 = v181[19];
  v116 = (char *)v179 + v115;
  v117 = (char *)v178 + v115;
  if (v17((char *)v178 + v115, 1, v15))
  {
    v118 = sub_100005150(&qword_100081028);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v116, v117, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v116, 0, 1, v15);
  }
  v119 = v181[20];
  v120 = (char *)v179 + v119;
  v121 = (char *)v178 + v119;
  if (v17((char *)v178 + v119, 1, v15))
  {
    v122 = sub_100005150(&qword_100081028);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v120, v121, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v120, 0, 1, v15);
  }
  v123 = v181[21];
  v124 = (_QWORD *)((char *)v179 + v123);
  v125 = (_QWORD *)((char *)v178 + v123);
  v126 = *v125;
  if (*v125)
  {
    v127 = v125[1];
    v128 = v125[2];
    *v124 = v126;
    v124[1] = v127;
    v124[2] = v128;
    swift_retain(v126);
    swift_retain(v127);
    swift_retain(v128);
  }
  else
  {
    *(_OWORD *)v124 = *(_OWORD *)v125;
    v124[2] = v125[2];
  }
  v129 = v181[22];
  v130 = (char *)v179 + v129;
  v131 = (char *)v178 + v129;
  v132 = sub_100005150(&qword_100081040);
  v133 = *(_QWORD *)(v132 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
  {
    v134 = sub_100005150(&qword_100081048);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
  }
  else
  {
    v135 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v135(v130, v131, v15);
    v135(&v130[*(int *)(v132 + 36)], &v131[*(int *)(v132 + 36)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
  }
  v136 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v137 = v136[5];
  v138 = &v130[v137];
  v139 = &v131[v137];
  v140 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
  v141 = v136[6];
  v142 = &v130[v141];
  v143 = &v131[v141];
  v144 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v145 = *(_QWORD *)(v144 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
  {
    v146 = sub_100005150(&qword_100081050);
    memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v142, v143, v144);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
  }
  v147 = v136[7];
  v148 = &v130[v147];
  v149 = &v131[v147];
  v150 = *((_QWORD *)v149 + 1);
  *(_QWORD *)v148 = *(_QWORD *)v149;
  *((_QWORD *)v148 + 1) = v150;
  v151 = v136[8];
  v152 = &v130[v151];
  v153 = &v131[v151];
  v154 = *((_QWORD *)v153 + 1);
  *(_QWORD *)v152 = *(_QWORD *)v153;
  *((_QWORD *)v152 + 1) = v154;
  v155 = a3[6];
  *(_QWORD *)((char *)v179 + a3[5]) = *(_QWORD *)((char *)v178 + a3[5]);
  *((_BYTE *)v179 + v155) = *((_BYTE *)v178 + v155);
  v156 = a3[7];
  v157 = (_QWORD *)((char *)v179 + v156);
  v158 = (_QWORD *)((char *)v178 + v156);
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRetain(v154);
  v159 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v158, v159) == 1)
  {
    v160 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v160 - 8) + 16))(v157, v158, v160);
    v161 = 1;
  }
  else
  {
    v162 = *v158;
    *v157 = *v158;
    swift_retain(v162);
    v161 = 0;
  }
  swift_storeEnumTagMultiPayload(v157, v159, v161);
  v163 = a3[8];
  v164 = (char *)v179 + v163;
  v165 = (char *)v178 + v163;
  v166 = *(_QWORD *)v165;
  v167 = v165[8];
  sub_1000051BC(*(_QWORD *)v165, v167);
  *(_QWORD *)v164 = v166;
  v164[8] = v167;
  v168 = a3[9];
  v169 = (_QWORD *)((char *)v179 + v168);
  v170 = (_QWORD *)((char *)v178 + v168);
  v171 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v170, v171) == 1)
  {
    v172 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v172 - 8) + 16))(v169, v170, v172);
    v173 = 1;
  }
  else
  {
    v174 = *v170;
    *v169 = *v170;
    swift_retain(v174);
    v173 = 0;
  }
  swift_storeEnumTagMultiPayload(v169, v171, v173);
  return v179;
}

_QWORD *sub_100036FA0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  __int128 v55;
  id *v56;
  int v57;
  id v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id v67;
  id *v68;
  int v69;
  id v70;
  id v71;
  id *v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  void **v93;
  void **v94;
  int v95;
  void *v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  void **v102;
  void **v103;
  int v104;
  void *v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  void **v111;
  void **v112;
  int v113;
  void *v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  void *v119;
  void **v120;
  void **v121;
  int v122;
  void *v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  void **v129;
  void **v130;
  int v131;
  void *v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  __int128 *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  __int128 v174;
  id *v175;
  int v176;
  id v177;
  id v178;
  id *v179;
  int v180;
  id v181;
  id v182;
  id *v183;
  int v184;
  id v185;
  id v186;
  id *v187;
  int v188;
  id v189;
  id v190;
  id *v191;
  int v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v208;
  uint64_t v209;
  char v210;
  __int128 v211;
  void **v212;
  void **v213;
  int v214;
  void *v215;
  void *v216;
  char v217;
  void *v218;
  char v219;
  void *v220;
  void **v221;
  void **v222;
  int v223;
  void *v224;
  void *v225;
  char v226;
  void *v227;
  char v228;
  void *v229;
  void **v230;
  void **v231;
  int v232;
  void *v233;
  void *v234;
  char v235;
  void *v236;
  char v237;
  void *v238;
  void **v239;
  void **v240;
  int v241;
  void *v242;
  void *v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  void **v248;
  void **v249;
  int v250;
  void *v251;
  void *v252;
  char v253;
  void *v254;
  char v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  id v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (*v280)(char *, uint64_t, uint64_t);
  int v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (*v321)(char *, uint64_t, uint64_t);
  int v322;
  int v323;
  void (*v324)(char *, char *, uint64_t);
  uint64_t v325;
  int *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t (*v336)(char *, uint64_t, uint64_t);
  int v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  char *v358;
  uint64_t v359;
  char v360;
  uint64_t v361;
  char v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void (*v371)(char *, char *, uint64_t);
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t (*v375)(char *, uint64_t, uint64_t);
  uint64_t v376;
  int *v377;
  _QWORD *v378;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[9] = a2[9];
  v16 = a2[10];
  v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v19 = v18[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v375 = v24;
  v26 = v24(v21, 1, v22);
  v376 = v23;
  v377 = a3;
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100005150(&qword_100081028);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v28 = v18[11];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v18[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v374 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v374 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  v378 = a2;
  if (v38)
  {
    if (!v39)
    {
      v372 = v22;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v40 = *((_QWORD *)v35 + 1);
      *(_QWORD *)(v34 + 8) = v40;
      v41 = v35[32];
      swift_bridgeObjectRetain(v40);
      if (v41 == 255)
      {
        v55 = *((_OWORD *)v35 + 1);
        *(_BYTE *)(v34 + 32) = v35[32];
        *(_OWORD *)(v34 + 16) = v55;
      }
      else
      {
        v42 = *((_QWORD *)v35 + 2);
        v43 = *((_QWORD *)v35 + 3);
        sub_100005190(v42, v43, v41);
        *(_QWORD *)(v34 + 16) = v42;
        *(_QWORD *)(v34 + 24) = v43;
        *(_BYTE *)(v34 + 32) = v41;
      }
      *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
      *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
      v56 = (id *)(v35 + 56);
      v57 = v35[64];
      if (v57 == 255)
      {
        v59 = *v56;
        *(_BYTE *)(v34 + 64) = v35[64];
        *(_QWORD *)(v34 + 56) = v59;
      }
      else
      {
        v58 = *v56;
        sub_1000051A8(*v56, v35[64]);
        *(_QWORD *)(v34 + 56) = v58;
        *(_BYTE *)(v34 + 64) = v57;
      }
      v22 = v372;
      v60 = (id *)(v35 + 72);
      v61 = v35[80];
      if (v61 == 255)
      {
        v63 = *v60;
        *(_BYTE *)(v34 + 80) = v35[80];
        *(_QWORD *)(v34 + 72) = v63;
      }
      else
      {
        v62 = *v60;
        sub_1000051A8(*v60, v35[80]);
        *(_QWORD *)(v34 + 72) = v62;
        *(_BYTE *)(v34 + 80) = v61;
      }
      v64 = (id *)(v35 + 88);
      v65 = v35[96];
      if (v65 == 255)
      {
        v67 = *v64;
        *(_BYTE *)(v34 + 96) = v35[96];
        *(_QWORD *)(v34 + 88) = v67;
      }
      else
      {
        v66 = *v64;
        sub_1000051A8(*v64, v35[96]);
        *(_QWORD *)(v34 + 88) = v66;
        *(_BYTE *)(v34 + 96) = v65;
      }
      v68 = (id *)(v35 + 104);
      v69 = v35[112];
      if (v69 == 255)
      {
        v71 = *v68;
        *(_BYTE *)(v34 + 112) = v35[112];
        *(_QWORD *)(v34 + 104) = v71;
      }
      else
      {
        v70 = *v68;
        sub_1000051A8(*v68, v35[112]);
        *(_QWORD *)(v34 + 104) = v70;
        *(_BYTE *)(v34 + 112) = v69;
      }
      v72 = (id *)(v35 + 120);
      v73 = v35[128];
      if (v73 == 255)
      {
        v75 = *v72;
        *(_BYTE *)(v34 + 128) = v35[128];
        *(_QWORD *)(v34 + 120) = v75;
      }
      else
      {
        v74 = *v72;
        sub_1000051A8(*v72, v35[128]);
        *(_QWORD *)(v34 + 120) = v74;
        *(_BYTE *)(v34 + 128) = v73;
      }
      *(_BYTE *)(v34 + 129) = v35[129];
      v76 = v36[11];
      v77 = v34 + v76;
      v78 = &v35[v76];
      v79 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v80 = v36[12];
      v81 = (_QWORD *)(v34 + v80);
      v82 = &v35[v80];
      *v81 = *(_QWORD *)v82;
      v83 = *((_QWORD *)v82 + 1);
      v81[1] = v83;
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      v84 = v36[16];
      v85 = (_QWORD *)(v34 + v84);
      v86 = &v35[v84];
      *v85 = *(_QWORD *)v86;
      v87 = *((_QWORD *)v86 + 1);
      v85[1] = v87;
      v88 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v374 + 56);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v88(v34, 0, 1, v36);
      goto LABEL_75;
    }
LABEL_13:
    v44 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_75;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_13;
  }
  v373 = v22;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v45 = *((_QWORD *)v35 + 1);
  v46 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = (__int128 *)(v34 + 16);
  v48 = (__int128 *)(v35 + 16);
  v49 = v35[32];
  if (*(unsigned __int8 *)(v34 + 32) == 255)
  {
    if (v49 == 255)
    {
      v92 = *v48;
      *(_BYTE *)(v34 + 32) = v35[32];
      *v47 = v92;
    }
    else
    {
      v89 = *((_QWORD *)v35 + 2);
      v90 = *((_QWORD *)v35 + 3);
      sub_100005190(v89, v90, v35[32]);
      *(_QWORD *)(v34 + 16) = v89;
      *(_QWORD *)(v34 + 24) = v90;
      *(_BYTE *)(v34 + 32) = v49;
    }
  }
  else if (v49 == 255)
  {
    sub_100007770(v34 + 16);
    v91 = v35[32];
    *v47 = *v48;
    *(_BYTE *)(v34 + 32) = v91;
  }
  else
  {
    v51 = *((_QWORD *)v35 + 2);
    v50 = *((_QWORD *)v35 + 3);
    sub_100005190(v51, v50, v35[32]);
    v52 = *(_QWORD *)(v34 + 16);
    v53 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 16) = v51;
    *(_QWORD *)(v34 + 24) = v50;
    v54 = *(_BYTE *)(v34 + 32);
    *(_BYTE *)(v34 + 32) = v49;
    sub_100005624(v52, v53, v54);
  }
  *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
  *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
  v93 = (void **)(v34 + 56);
  v94 = (void **)(v35 + 56);
  v95 = v35[64];
  if (*(unsigned __int8 *)(v34 + 64) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(v34 + 64) = v35[64];
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_1000051A8(v99, v35[64]);
      *(_QWORD *)(v34 + 56) = v99;
      *(_BYTE *)(v34 + 64) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_1000077A4(v34 + 56);
    v100 = v35[64];
    *v93 = *v94;
    *(_BYTE *)(v34 + 64) = v100;
  }
  else
  {
    v96 = *v94;
    sub_1000051A8(v96, v35[64]);
    v97 = *(void **)(v34 + 56);
    *(_QWORD *)(v34 + 56) = v96;
    v98 = *(_BYTE *)(v34 + 64);
    *(_BYTE *)(v34 + 64) = v95;
    sub_10000563C(v97, v98);
  }
  v102 = (void **)(v34 + 72);
  v103 = (void **)(v35 + 72);
  v104 = v35[80];
  if (*(unsigned __int8 *)(v34 + 80) == 255)
  {
    if (v104 == 255)
    {
      v110 = *v103;
      *(_BYTE *)(v34 + 80) = v35[80];
      *v102 = v110;
    }
    else
    {
      v108 = *v103;
      sub_1000051A8(v108, v35[80]);
      *(_QWORD *)(v34 + 72) = v108;
      *(_BYTE *)(v34 + 80) = v104;
    }
  }
  else if (v104 == 255)
  {
    sub_1000077A4(v34 + 72);
    v109 = v35[80];
    *v102 = *v103;
    *(_BYTE *)(v34 + 80) = v109;
  }
  else
  {
    v105 = *v103;
    sub_1000051A8(v105, v35[80]);
    v106 = *(void **)(v34 + 72);
    *(_QWORD *)(v34 + 72) = v105;
    v107 = *(_BYTE *)(v34 + 80);
    *(_BYTE *)(v34 + 80) = v104;
    sub_10000563C(v106, v107);
  }
  v111 = (void **)(v34 + 88);
  v112 = (void **)(v35 + 88);
  v113 = v35[96];
  if (*(unsigned __int8 *)(v34 + 96) == 255)
  {
    if (v113 == 255)
    {
      v119 = *v112;
      *(_BYTE *)(v34 + 96) = v35[96];
      *v111 = v119;
    }
    else
    {
      v117 = *v112;
      sub_1000051A8(v117, v35[96]);
      *(_QWORD *)(v34 + 88) = v117;
      *(_BYTE *)(v34 + 96) = v113;
    }
  }
  else if (v113 == 255)
  {
    sub_1000077A4(v34 + 88);
    v118 = v35[96];
    *v111 = *v112;
    *(_BYTE *)(v34 + 96) = v118;
  }
  else
  {
    v114 = *v112;
    sub_1000051A8(v114, v35[96]);
    v115 = *(void **)(v34 + 88);
    *(_QWORD *)(v34 + 88) = v114;
    v116 = *(_BYTE *)(v34 + 96);
    *(_BYTE *)(v34 + 96) = v113;
    sub_10000563C(v115, v116);
  }
  v120 = (void **)(v34 + 104);
  v121 = (void **)(v35 + 104);
  v122 = v35[112];
  if (*(unsigned __int8 *)(v34 + 112) == 255)
  {
    if (v122 == 255)
    {
      v128 = *v121;
      *(_BYTE *)(v34 + 112) = v35[112];
      *v120 = v128;
    }
    else
    {
      v126 = *v121;
      sub_1000051A8(v126, v35[112]);
      *(_QWORD *)(v34 + 104) = v126;
      *(_BYTE *)(v34 + 112) = v122;
    }
  }
  else if (v122 == 255)
  {
    sub_1000077A4(v34 + 104);
    v127 = v35[112];
    *v120 = *v121;
    *(_BYTE *)(v34 + 112) = v127;
  }
  else
  {
    v123 = *v121;
    sub_1000051A8(v123, v35[112]);
    v124 = *(void **)(v34 + 104);
    *(_QWORD *)(v34 + 104) = v123;
    v125 = *(_BYTE *)(v34 + 112);
    *(_BYTE *)(v34 + 112) = v122;
    sub_10000563C(v124, v125);
  }
  v129 = (void **)(v34 + 120);
  v130 = (void **)(v35 + 120);
  v131 = v35[128];
  if (*(unsigned __int8 *)(v34 + 128) == 255)
  {
    if (v131 == 255)
    {
      v137 = *v130;
      *(_BYTE *)(v34 + 128) = v35[128];
      *v129 = v137;
    }
    else
    {
      v135 = *v130;
      sub_1000051A8(v135, v35[128]);
      *(_QWORD *)(v34 + 120) = v135;
      *(_BYTE *)(v34 + 128) = v131;
    }
  }
  else if (v131 == 255)
  {
    sub_1000077A4(v34 + 120);
    v136 = v35[128];
    *v129 = *v130;
    *(_BYTE *)(v34 + 128) = v136;
  }
  else
  {
    v132 = *v130;
    sub_1000051A8(v132, v35[128]);
    v133 = *(void **)(v34 + 120);
    *(_QWORD *)(v34 + 120) = v132;
    v134 = *(_BYTE *)(v34 + 128);
    *(_BYTE *)(v34 + 128) = v131;
    sub_10000563C(v133, v134);
  }
  v22 = v373;
  *(_BYTE *)(v34 + 129) = v35[129];
  v138 = v36[11];
  v139 = v34 + v138;
  v140 = &v35[v138];
  v141 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v36[12];
  v143 = (_QWORD *)(v34 + v142);
  v144 = &v35[v142];
  *v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = v143[1];
  v143[1] = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v147 = v36[16];
  v148 = (_QWORD *)(v34 + v147);
  v149 = &v35[v147];
  *v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = v148[1];
  v148[1] = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
LABEL_75:
  v152 = v18[13];
  v153 = (uint64_t)a1 + v152;
  v154 = (char *)a2 + v152;
  v155 = v37((uint64_t)a1 + v152, 1, v36);
  v156 = v37((uint64_t)v154, 1, v36);
  if (v155)
  {
    if (!v156)
    {
      v157 = v22;
      *(_QWORD *)v153 = *(_QWORD *)v154;
      v158 = *((_QWORD *)v154 + 1);
      *(_QWORD *)(v153 + 8) = v158;
      v159 = v154[32];
      swift_bridgeObjectRetain(v158);
      if (v159 == 255)
      {
        v174 = *((_OWORD *)v154 + 1);
        *(_BYTE *)(v153 + 32) = v154[32];
        *(_OWORD *)(v153 + 16) = v174;
      }
      else
      {
        v160 = *((_QWORD *)v154 + 2);
        v161 = *((_QWORD *)v154 + 3);
        sub_100005190(v160, v161, v159);
        *(_QWORD *)(v153 + 16) = v160;
        *(_QWORD *)(v153 + 24) = v161;
        *(_BYTE *)(v153 + 32) = v159;
      }
      *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
      *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
      v175 = (id *)(v154 + 56);
      v176 = v154[64];
      if (v176 == 255)
      {
        v178 = *v175;
        *(_BYTE *)(v153 + 64) = v154[64];
        *(_QWORD *)(v153 + 56) = v178;
      }
      else
      {
        v177 = *v175;
        sub_1000051A8(*v175, v154[64]);
        *(_QWORD *)(v153 + 56) = v177;
        *(_BYTE *)(v153 + 64) = v176;
      }
      v22 = v157;
      v179 = (id *)(v154 + 72);
      v180 = v154[80];
      if (v180 == 255)
      {
        v182 = *v179;
        *(_BYTE *)(v153 + 80) = v154[80];
        *(_QWORD *)(v153 + 72) = v182;
      }
      else
      {
        v181 = *v179;
        sub_1000051A8(*v179, v154[80]);
        *(_QWORD *)(v153 + 72) = v181;
        *(_BYTE *)(v153 + 80) = v180;
      }
      v183 = (id *)(v154 + 88);
      v184 = v154[96];
      if (v184 == 255)
      {
        v186 = *v183;
        *(_BYTE *)(v153 + 96) = v154[96];
        *(_QWORD *)(v153 + 88) = v186;
      }
      else
      {
        v185 = *v183;
        sub_1000051A8(*v183, v154[96]);
        *(_QWORD *)(v153 + 88) = v185;
        *(_BYTE *)(v153 + 96) = v184;
      }
      v187 = (id *)(v154 + 104);
      v188 = v154[112];
      if (v188 == 255)
      {
        v190 = *v187;
        *(_BYTE *)(v153 + 112) = v154[112];
        *(_QWORD *)(v153 + 104) = v190;
      }
      else
      {
        v189 = *v187;
        sub_1000051A8(*v187, v154[112]);
        *(_QWORD *)(v153 + 104) = v189;
        *(_BYTE *)(v153 + 112) = v188;
      }
      v191 = (id *)(v154 + 120);
      v192 = v154[128];
      if (v192 == 255)
      {
        v194 = *v191;
        *(_BYTE *)(v153 + 128) = v154[128];
        *(_QWORD *)(v153 + 120) = v194;
      }
      else
      {
        v193 = *v191;
        sub_1000051A8(*v191, v154[128]);
        *(_QWORD *)(v153 + 120) = v193;
        *(_BYTE *)(v153 + 128) = v192;
      }
      *(_BYTE *)(v153 + 129) = v154[129];
      v195 = v36[11];
      v196 = v153 + v195;
      v197 = &v154[v195];
      v198 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v198 - 8) + 16))(v196, v197, v198);
      v199 = v36[12];
      v200 = (_QWORD *)(v153 + v199);
      v201 = &v154[v199];
      *v200 = *(_QWORD *)v201;
      v202 = *((_QWORD *)v201 + 1);
      v200[1] = v202;
      *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
      *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
      *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
      v203 = v36[16];
      v204 = (_QWORD *)(v153 + v203);
      v205 = &v154[v203];
      *v204 = *(_QWORD *)v205;
      v206 = *((_QWORD *)v205 + 1);
      v204[1] = v206;
      v207 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v374 + 56);
      swift_bridgeObjectRetain(v202);
      swift_bridgeObjectRetain(v206);
      v207(v153, 0, 1, v36);
      goto LABEL_142;
    }
LABEL_81:
    v162 = sub_100005150(&qword_100081030);
    memcpy((void *)v153, v154, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_142;
  }
  if (v156)
  {
    sub_10000EF80(v153, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_81;
  }
  v163 = v22;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  v164 = *((_QWORD *)v154 + 1);
  v165 = *(_QWORD *)(v153 + 8);
  *(_QWORD *)(v153 + 8) = v164;
  swift_bridgeObjectRetain(v164);
  swift_bridgeObjectRelease(v165);
  v166 = (__int128 *)(v153 + 16);
  v167 = (__int128 *)(v154 + 16);
  v168 = v154[32];
  if (*(unsigned __int8 *)(v153 + 32) == 255)
  {
    if (v168 == 255)
    {
      v211 = *v167;
      *(_BYTE *)(v153 + 32) = v154[32];
      *v166 = v211;
    }
    else
    {
      v208 = *((_QWORD *)v154 + 2);
      v209 = *((_QWORD *)v154 + 3);
      sub_100005190(v208, v209, v154[32]);
      *(_QWORD *)(v153 + 16) = v208;
      *(_QWORD *)(v153 + 24) = v209;
      *(_BYTE *)(v153 + 32) = v168;
    }
  }
  else if (v168 == 255)
  {
    sub_100007770(v153 + 16);
    v210 = v154[32];
    *v166 = *v167;
    *(_BYTE *)(v153 + 32) = v210;
  }
  else
  {
    v169 = *((_QWORD *)v154 + 2);
    v170 = *((_QWORD *)v154 + 3);
    sub_100005190(v169, v170, v154[32]);
    v171 = *(_QWORD *)(v153 + 16);
    v172 = *(_QWORD *)(v153 + 24);
    *(_QWORD *)(v153 + 16) = v169;
    *(_QWORD *)(v153 + 24) = v170;
    v173 = *(_BYTE *)(v153 + 32);
    *(_BYTE *)(v153 + 32) = v168;
    sub_100005624(v171, v172, v173);
  }
  *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
  *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
  v212 = (void **)(v153 + 56);
  v213 = (void **)(v154 + 56);
  v214 = v154[64];
  if (*(unsigned __int8 *)(v153 + 64) == 255)
  {
    if (v214 == 255)
    {
      v220 = *v213;
      *(_BYTE *)(v153 + 64) = v154[64];
      *v212 = v220;
    }
    else
    {
      v218 = *v213;
      sub_1000051A8(v218, v154[64]);
      *(_QWORD *)(v153 + 56) = v218;
      *(_BYTE *)(v153 + 64) = v214;
    }
  }
  else if (v214 == 255)
  {
    sub_1000077A4(v153 + 56);
    v219 = v154[64];
    *v212 = *v213;
    *(_BYTE *)(v153 + 64) = v219;
  }
  else
  {
    v215 = *v213;
    sub_1000051A8(v215, v154[64]);
    v216 = *(void **)(v153 + 56);
    *(_QWORD *)(v153 + 56) = v215;
    v217 = *(_BYTE *)(v153 + 64);
    *(_BYTE *)(v153 + 64) = v214;
    sub_10000563C(v216, v217);
  }
  v221 = (void **)(v153 + 72);
  v222 = (void **)(v154 + 72);
  v223 = v154[80];
  if (*(unsigned __int8 *)(v153 + 80) == 255)
  {
    if (v223 == 255)
    {
      v229 = *v222;
      *(_BYTE *)(v153 + 80) = v154[80];
      *v221 = v229;
    }
    else
    {
      v227 = *v222;
      sub_1000051A8(v227, v154[80]);
      *(_QWORD *)(v153 + 72) = v227;
      *(_BYTE *)(v153 + 80) = v223;
    }
  }
  else if (v223 == 255)
  {
    sub_1000077A4(v153 + 72);
    v228 = v154[80];
    *v221 = *v222;
    *(_BYTE *)(v153 + 80) = v228;
  }
  else
  {
    v224 = *v222;
    sub_1000051A8(v224, v154[80]);
    v225 = *(void **)(v153 + 72);
    *(_QWORD *)(v153 + 72) = v224;
    v226 = *(_BYTE *)(v153 + 80);
    *(_BYTE *)(v153 + 80) = v223;
    sub_10000563C(v225, v226);
  }
  v230 = (void **)(v153 + 88);
  v231 = (void **)(v154 + 88);
  v232 = v154[96];
  if (*(unsigned __int8 *)(v153 + 96) == 255)
  {
    if (v232 == 255)
    {
      v238 = *v231;
      *(_BYTE *)(v153 + 96) = v154[96];
      *v230 = v238;
    }
    else
    {
      v236 = *v231;
      sub_1000051A8(v236, v154[96]);
      *(_QWORD *)(v153 + 88) = v236;
      *(_BYTE *)(v153 + 96) = v232;
    }
  }
  else if (v232 == 255)
  {
    sub_1000077A4(v153 + 88);
    v237 = v154[96];
    *v230 = *v231;
    *(_BYTE *)(v153 + 96) = v237;
  }
  else
  {
    v233 = *v231;
    sub_1000051A8(v233, v154[96]);
    v234 = *(void **)(v153 + 88);
    *(_QWORD *)(v153 + 88) = v233;
    v235 = *(_BYTE *)(v153 + 96);
    *(_BYTE *)(v153 + 96) = v232;
    sub_10000563C(v234, v235);
  }
  v239 = (void **)(v153 + 104);
  v240 = (void **)(v154 + 104);
  v241 = v154[112];
  if (*(unsigned __int8 *)(v153 + 112) == 255)
  {
    if (v241 == 255)
    {
      v247 = *v240;
      *(_BYTE *)(v153 + 112) = v154[112];
      *v239 = v247;
    }
    else
    {
      v245 = *v240;
      sub_1000051A8(v245, v154[112]);
      *(_QWORD *)(v153 + 104) = v245;
      *(_BYTE *)(v153 + 112) = v241;
    }
  }
  else if (v241 == 255)
  {
    sub_1000077A4(v153 + 104);
    v246 = v154[112];
    *v239 = *v240;
    *(_BYTE *)(v153 + 112) = v246;
  }
  else
  {
    v242 = *v240;
    sub_1000051A8(v242, v154[112]);
    v243 = *(void **)(v153 + 104);
    *(_QWORD *)(v153 + 104) = v242;
    v244 = *(_BYTE *)(v153 + 112);
    *(_BYTE *)(v153 + 112) = v241;
    sub_10000563C(v243, v244);
  }
  v248 = (void **)(v153 + 120);
  v249 = (void **)(v154 + 120);
  v250 = v154[128];
  if (*(unsigned __int8 *)(v153 + 128) == 255)
  {
    if (v250 == 255)
    {
      v256 = *v249;
      *(_BYTE *)(v153 + 128) = v154[128];
      *v248 = v256;
    }
    else
    {
      v254 = *v249;
      sub_1000051A8(v254, v154[128]);
      *(_QWORD *)(v153 + 120) = v254;
      *(_BYTE *)(v153 + 128) = v250;
    }
  }
  else if (v250 == 255)
  {
    sub_1000077A4(v153 + 120);
    v255 = v154[128];
    *v248 = *v249;
    *(_BYTE *)(v153 + 128) = v255;
  }
  else
  {
    v251 = *v249;
    sub_1000051A8(v251, v154[128]);
    v252 = *(void **)(v153 + 120);
    *(_QWORD *)(v153 + 120) = v251;
    v253 = *(_BYTE *)(v153 + 128);
    *(_BYTE *)(v153 + 128) = v250;
    sub_10000563C(v252, v253);
  }
  v22 = v163;
  *(_BYTE *)(v153 + 129) = v154[129];
  v257 = v36[11];
  v258 = v153 + v257;
  v259 = &v154[v257];
  v260 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v260 - 8) + 24))(v258, v259, v260);
  v261 = v36[12];
  v262 = (_QWORD *)(v153 + v261);
  v263 = &v154[v261];
  *v262 = *(_QWORD *)v263;
  v264 = *((_QWORD *)v263 + 1);
  v265 = v262[1];
  v262[1] = v264;
  swift_bridgeObjectRetain(v264);
  swift_bridgeObjectRelease(v265);
  *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
  *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
  *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
  v266 = v36[16];
  v267 = (_QWORD *)(v153 + v266);
  v268 = &v154[v266];
  *v267 = *(_QWORD *)v268;
  v269 = *((_QWORD *)v268 + 1);
  v270 = v267[1];
  v267[1] = v269;
  swift_bridgeObjectRetain(v269);
  swift_bridgeObjectRelease(v270);
LABEL_142:
  v271 = v18[14];
  v272 = *(void **)((char *)a1 + v271);
  v273 = *(void **)((char *)a2 + v271);
  *(_QWORD *)((char *)a1 + v271) = v273;
  v274 = v273;

  v275 = v18[15];
  v276 = (char *)a1 + v275;
  v277 = (char *)a2 + v275;
  v278 = type metadata accessor for URL(0);
  v279 = *(_QWORD *)(v278 - 8);
  v280 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v279 + 48);
  LODWORD(v272) = v280(v276, 1, v278);
  v281 = v280(v277, 1, v278);
  if ((_DWORD)v272)
  {
    if (!v281)
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v281)
  {
    (*(void (**)(char *, uint64_t))(v279 + 8))(v276, v278);
LABEL_147:
    v282 = sub_100005150(&qword_100081038);
    memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
    goto LABEL_148;
  }
  (*(void (**)(char *, char *, uint64_t))(v279 + 24))(v276, v277, v278);
LABEL_148:
  *((_BYTE *)a1 + v18[16]) = *((_BYTE *)a2 + v18[16]);
  v283 = v18[17];
  v284 = (char *)a1 + v283;
  v285 = (char *)a2 + v283;
  v286 = *(_QWORD *)v285;
  v284[8] = v285[8];
  *(_QWORD *)v284 = v286;
  v287 = v18[18];
  v288 = (char *)a1 + v287;
  v289 = (char *)a2 + v287;
  v290 = *(_QWORD *)v289;
  v288[8] = v289[8];
  *(_QWORD *)v288 = v290;
  v291 = v18[19];
  v292 = (char *)a1 + v291;
  v293 = (char *)a2 + v291;
  v294 = v375((char *)a1 + v291, 1, v22);
  v295 = v375(v293, 1, v22);
  if (v294)
  {
    if (!v295)
    {
      (*(void (**)(char *, char *, uint64_t))(v376 + 16))(v292, v293, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v376 + 56))(v292, 0, 1, v22);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v295)
  {
    (*(void (**)(char *, uint64_t))(v376 + 8))(v292, v22);
LABEL_153:
    v296 = sub_100005150(&qword_100081028);
    memcpy(v292, v293, *(_QWORD *)(*(_QWORD *)(v296 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(char *, char *, uint64_t))(v376 + 24))(v292, v293, v22);
LABEL_154:
  v297 = v18[20];
  v298 = (char *)a1 + v297;
  v299 = (char *)a2 + v297;
  v300 = v375((char *)a1 + v297, 1, v22);
  v301 = v375(v299, 1, v22);
  if (v300)
  {
    if (!v301)
    {
      (*(void (**)(char *, char *, uint64_t))(v376 + 16))(v298, v299, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v376 + 56))(v298, 0, 1, v22);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v301)
  {
    (*(void (**)(char *, uint64_t))(v376 + 8))(v298, v22);
LABEL_159:
    v302 = sub_100005150(&qword_100081028);
    memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(char *, char *, uint64_t))(v376 + 24))(v298, v299, v22);
LABEL_160:
  v303 = v18[21];
  v304 = (_QWORD *)((char *)a1 + v303);
  v305 = (char *)a2 + v303;
  v306 = *(_QWORD *)((char *)a1 + v303);
  v307 = *(_QWORD *)((char *)a2 + v303);
  if (v306)
  {
    if (v307)
    {
      *v304 = v307;
      swift_retain(v307);
      swift_release(v306);
      v308 = *((_QWORD *)v305 + 1);
      v309 = v304[1];
      v304[1] = v308;
      swift_retain(v308);
      swift_release(v309);
      v310 = *((_QWORD *)v305 + 2);
      v311 = v304[2];
      v304[2] = v310;
      swift_retain(v310);
      swift_release(v311);
    }
    else
    {
      sub_100007814((_QWORD *)((char *)a1 + v303));
      v314 = *((_QWORD *)v305 + 2);
      *(_OWORD *)v304 = *(_OWORD *)v305;
      v304[2] = v314;
    }
  }
  else if (v307)
  {
    *v304 = v307;
    v312 = *((_QWORD *)v305 + 1);
    v304[1] = v312;
    v313 = *((_QWORD *)v305 + 2);
    v304[2] = v313;
    swift_retain(v307);
    swift_retain(v312);
    swift_retain(v313);
  }
  else
  {
    v315 = *(_OWORD *)v305;
    v304[2] = *((_QWORD *)v305 + 2);
    *(_OWORD *)v304 = v315;
  }
  v316 = v18[22];
  v317 = (char *)a1 + v316;
  v318 = (char *)a2 + v316;
  v319 = sub_100005150(&qword_100081040);
  v320 = *(_QWORD *)(v319 - 8);
  v321 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v320 + 48);
  v322 = v321(v317, 1, v319);
  v323 = v321(v318, 1, v319);
  if (v322)
  {
    if (!v323)
    {
      v324 = *(void (**)(char *, char *, uint64_t))(v376 + 16);
      v324(v317, v318, v22);
      v324(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v317, 0, 1, v319);
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (v323)
  {
    sub_10000F008((uint64_t)v317, &qword_100081040);
LABEL_175:
    v325 = sub_100005150(&qword_100081048);
    memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
    goto LABEL_176;
  }
  v371 = *(void (**)(char *, char *, uint64_t))(v376 + 24);
  v371(v317, v318, v22);
  v371(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
LABEL_176:
  v326 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v327 = v326[5];
  v328 = &v317[v327];
  v329 = &v318[v327];
  v330 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v330 - 8) + 24))(v328, v329, v330);
  v331 = v326[6];
  v332 = &v317[v331];
  v333 = &v318[v331];
  v334 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v335 = *(_QWORD *)(v334 - 8);
  v336 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v335 + 48);
  LODWORD(v328) = v336(v332, 1, v334);
  v337 = v336(v333, 1, v334);
  if ((_DWORD)v328)
  {
    if (!v337)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v332, v333, v334);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v332, 0, 1, v334);
      goto LABEL_182;
    }
    goto LABEL_181;
  }
  if (v337)
  {
    (*(void (**)(char *, uint64_t))(v335 + 8))(v332, v334);
LABEL_181:
    v338 = sub_100005150(&qword_100081050);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
    goto LABEL_182;
  }
  (*(void (**)(char *, char *, uint64_t))(v335 + 24))(v332, v333, v334);
LABEL_182:
  v339 = v326[7];
  v340 = &v317[v339];
  v341 = &v318[v339];
  *(_QWORD *)v340 = *(_QWORD *)v341;
  v342 = *((_QWORD *)v341 + 1);
  v343 = *((_QWORD *)v340 + 1);
  *((_QWORD *)v340 + 1) = v342;
  swift_bridgeObjectRetain(v342);
  swift_bridgeObjectRelease(v343);
  v344 = v326[8];
  v345 = &v317[v344];
  v346 = &v318[v344];
  *(_QWORD *)v345 = *(_QWORD *)v346;
  v347 = *((_QWORD *)v346 + 1);
  v348 = *((_QWORD *)v345 + 1);
  *((_QWORD *)v345 + 1) = v347;
  swift_bridgeObjectRetain(v347);
  swift_bridgeObjectRelease(v348);
  *(_QWORD *)((char *)a1 + v377[5]) = *(_QWORD *)((char *)v378 + v377[5]);
  *((_BYTE *)a1 + v377[6]) = *((_BYTE *)v378 + v377[6]);
  if (a1 != v378)
  {
    v349 = v377[7];
    v350 = (_QWORD *)((char *)a1 + v349);
    v351 = (_QWORD *)((char *)v378 + v349);
    sub_10000F008((uint64_t)a1 + v349, &qword_100081DC8);
    v352 = sub_100005150(&qword_100081DC8);
    if (swift_getEnumCaseMultiPayload(v351, v352) == 1)
    {
      v353 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v353 - 8) + 16))(v350, v351, v353);
      v354 = 1;
    }
    else
    {
      v355 = *v351;
      *v350 = *v351;
      swift_retain(v355);
      v354 = 0;
    }
    swift_storeEnumTagMultiPayload(v350, v352, v354);
  }
  v356 = v377[8];
  v357 = (char *)a1 + v356;
  v358 = (char *)v378 + v356;
  v359 = *(_QWORD *)v358;
  v360 = v358[8];
  sub_1000051BC(*(_QWORD *)v358, v360);
  v361 = *(_QWORD *)v357;
  v362 = v357[8];
  *(_QWORD *)v357 = v359;
  v357[8] = v360;
  sub_100005650(v361, v362);
  if (a1 != v378)
  {
    v363 = v377[9];
    v364 = (_QWORD *)((char *)a1 + v363);
    v365 = (_QWORD *)((char *)v378 + v363);
    sub_10000F008((uint64_t)a1 + v363, &qword_100081DD0);
    v366 = sub_100005150(&qword_100081DD0);
    if (swift_getEnumCaseMultiPayload(v365, v366) == 1)
    {
      v367 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v367 - 8) + 16))(v364, v365, v367);
      v368 = 1;
    }
    else
    {
      v369 = *v365;
      *v364 = *v365;
      swift_retain(v369);
      v368 = 0;
    }
    swift_storeEnumTagMultiPayload(v364, v366, v368);
  }
  return a1;
}

uint64_t sub_100038794(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(_OWORD *, uint64_t, int *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(const void *, uint64_t);
  uint64_t v101;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v8 = v7[10];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v100 = *(unsigned int (**)(const void *, uint64_t))(v12 + 48);
  v101 = v11;
  if (v100(v10, 1))
  {
    v13 = sub_100005150(&qword_100081028);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v101);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v101);
  }
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  v14 = v7[12];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = (int *)type metadata accessor for ArtworkModel(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
  v99 = v18;
  if (v19(v16, 1, v17))
  {
    v20 = sub_100005150(&qword_100081030);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v16[1];
    *v15 = *v16;
    v15[1] = v21;
    *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
    *(_OWORD *)((char *)v15 + 40) = *(_OWORD *)((char *)v16 + 40);
    *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
    *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
    *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
    *(_OWORD *)((char *)v15 + 104) = *(_OWORD *)((char *)v16 + 104);
    *(_OWORD *)((char *)v15 + 88) = *(_OWORD *)((char *)v16 + 88);
    *(_OWORD *)((char *)v15 + 72) = *(_OWORD *)((char *)v16 + 72);
    *((_BYTE *)v15 + 129) = *((_BYTE *)v16 + 129);
    v22 = v17[11];
    v97 = a3;
    v98 = v12;
    v23 = (char *)v15 + v22;
    v24 = (char *)v16 + v22;
    v25 = type metadata accessor for ArtworkCrop(0);
    v26 = v23;
    v27 = v24;
    a3 = v97;
    v12 = v98;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v26, v27, v25);
    *(_OWORD *)((char *)v15 + v17[12]) = *(_OWORD *)((char *)v16 + v17[12]);
    *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
    *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
    *((_BYTE *)v15 + v17[15]) = *((_BYTE *)v16 + v17[15]);
    *(_OWORD *)((char *)v15 + v17[16]) = *(_OWORD *)((char *)v16 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v28 = v7[13];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  if (v19((_OWORD *)(a2 + v28), 1, v17))
  {
    v31 = sub_100005150(&qword_100081030);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    *(_OWORD *)((char *)v29 + 40) = *(_OWORD *)((char *)v30 + 40);
    *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
    *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
    *(_OWORD *)((char *)v29 + 113) = *(_OWORD *)((char *)v30 + 113);
    *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v30 + 104);
    *(_OWORD *)((char *)v29 + 88) = *(_OWORD *)((char *)v30 + 88);
    *(_OWORD *)((char *)v29 + 72) = *(_OWORD *)((char *)v30 + 72);
    *((_BYTE *)v29 + 129) = *((_BYTE *)v30 + 129);
    v33 = v17[11];
    v34 = v12;
    v35 = (char *)v29 + v33;
    v36 = a3;
    v37 = (char *)v30 + v33;
    v38 = type metadata accessor for ArtworkCrop(0);
    v39 = v35;
    v12 = v34;
    v40 = v37;
    a3 = v36;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v39, v40, v38);
    *(_OWORD *)((char *)v29 + v17[12]) = *(_OWORD *)((char *)v30 + v17[12]);
    *((_BYTE *)v29 + v17[13]) = *((_BYTE *)v30 + v17[13]);
    *((_BYTE *)v29 + v17[14]) = *((_BYTE *)v30 + v17[14]);
    *((_BYTE *)v29 + v17[15]) = *((_BYTE *)v30 + v17[15]);
    *(_OWORD *)((char *)v29 + v17[16]) = *(_OWORD *)((char *)v30 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v99 + 56))(v29, 0, 1, v17);
  }
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v41 = v7[15];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = sub_100005150(&qword_100081038);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  *(_BYTE *)(a1 + v7[16]) = *(_BYTE *)(a2 + v7[16]);
  v47 = v7[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = v7[19];
  v54 = (void *)(a1 + v53);
  v55 = (const void *)(a2 + v53);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v100)(a2 + v53, 1, v101))
  {
    v56 = sub_100005150(&qword_100081028);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v54, v55, v101);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v54, 0, 1, v101);
  }
  v57 = v7[20];
  v58 = (void *)(a1 + v57);
  v59 = (const void *)(a2 + v57);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v100)(a2 + v57, 1, v101))
  {
    v60 = sub_100005150(&qword_100081028);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v58, v59, v101);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v58, 0, 1, v101);
  }
  v61 = v7[21];
  v62 = a1 + v61;
  v63 = a2 + v61;
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  v64 = v7[22];
  v65 = (char *)(a1 + v64);
  v66 = (char *)(a2 + v64);
  v67 = sub_100005150(&qword_100081040);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    v69 = sub_100005150(&qword_100081048);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v70 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v70(v65, v66, v101);
    v70(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v101);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v71 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v72 = v71[5];
  v73 = &v65[v72];
  v74 = &v66[v72];
  v75 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v71[6];
  v77 = &v65[v76];
  v78 = &v66[v76];
  v79 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_100005150(&qword_100081050);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  *(_OWORD *)&v65[v71[7]] = *(_OWORD *)&v66[v71[7]];
  *(_OWORD *)&v65[v71[8]] = *(_OWORD *)&v66[v71[8]];
  v82 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v82) = *(_BYTE *)(a2 + v82);
  v83 = a3[7];
  v84 = (void *)(a1 + v83);
  v85 = (const void *)(a2 + v83);
  v86 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v85, v86) == 1)
  {
    v87 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v87 - 8) + 32))(v84, v85, v87);
    swift_storeEnumTagMultiPayload(v84, v86, 1);
  }
  else
  {
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
  }
  v88 = a3[8];
  v89 = a3[9];
  v90 = a1 + v88;
  v91 = a2 + v88;
  *(_QWORD *)v90 = *(_QWORD *)v91;
  *(_BYTE *)(v90 + 8) = *(_BYTE *)(v91 + 8);
  v92 = (void *)(a1 + v89);
  v93 = (const void *)(a2 + v89);
  v94 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v93, v94) == 1)
  {
    v95 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v92, v93, v95);
    swift_storeEnumTagMultiPayload(v92, v94, 1);
  }
  else
  {
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_100038F70(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  int v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  uint64_t v149;
  _OWORD *v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _OWORD *v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(char *, char *, uint64_t);
  _QWORD *v163;
  int v164;
  int v165;
  void *v166;
  _QWORD *v167;
  int v168;
  int v169;
  void *v170;
  _QWORD *v171;
  int v172;
  int v173;
  void *v174;
  _QWORD *v175;
  int v176;
  int v177;
  void *v178;
  _QWORD *v179;
  int v180;
  int v181;
  void *v182;
  _QWORD *v183;
  int v184;
  int v185;
  void *v186;
  _QWORD *v187;
  int v188;
  int v189;
  void *v190;
  _QWORD *v191;
  int v192;
  int v193;
  void *v194;
  _QWORD *v195;
  int v196;
  int v197;
  void *v198;
  _QWORD *v199;
  int v200;
  int v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t (*v236)(char *, uint64_t, uint64_t);
  int *v237;
  uint64_t v238;
  _QWORD *v239;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a1[6];
  a1[6] = a2[6];
  swift_release(v12);
  v13 = a2[8];
  v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = a2[10];
  v16 = a1[10];
  a1[9] = a2[9];
  a1[10] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v18 = v17[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  v236 = v23;
  v237 = a3;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100005150(&qword_100081028);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[11];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v17[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v235 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v235 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  v238 = v22;
  if (v38)
  {
    if (!v39)
    {
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_OWORD *)(v34 + 16) = v40;
      *(_BYTE *)(v34 + 32) = v35[32];
      *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
      *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
      *(_BYTE *)(v34 + 64) = v35[64];
      *(_OWORD *)(v34 + 113) = *(_OWORD *)(v35 + 113);
      *(_OWORD *)(v34 + 104) = *(_OWORD *)(v35 + 104);
      *(_OWORD *)(v34 + 88) = *(_OWORD *)(v35 + 88);
      *(_OWORD *)(v34 + 72) = *(_OWORD *)(v35 + 72);
      *(_BYTE *)(v34 + 129) = v35[129];
      v41 = v36[11];
      v42 = v34 + v41;
      v43 = &v35[v41];
      v44 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      *(_OWORD *)(v34 + v36[12]) = *(_OWORD *)&v35[v36[12]];
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      *(_OWORD *)(v34 + v36[16]) = *(_OWORD *)&v35[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v235 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_12:
    v45 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  v148 = *((_QWORD *)v35 + 1);
  v149 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v148;
  swift_bridgeObjectRelease(v149);
  v150 = v35 + 16;
  v151 = *(unsigned __int8 *)(v34 + 32);
  if (v151 != 255)
  {
    v152 = v35[32];
    if (v152 != 255)
    {
      v153 = *(_QWORD *)(v34 + 16);
      v154 = *(_QWORD *)(v34 + 24);
      *(_OWORD *)(v34 + 16) = *v150;
      *(_BYTE *)(v34 + 32) = v152;
      sub_100005624(v153, v154, v151);
      goto LABEL_77;
    }
    sub_100007770(v34 + 16);
  }
  *(_OWORD *)(v34 + 16) = *v150;
  *(_BYTE *)(v34 + 32) = v35[32];
LABEL_77:
  *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
  v163 = v35 + 56;
  v164 = *(unsigned __int8 *)(v34 + 64);
  if (v164 != 255)
  {
    v165 = v35[64];
    if (v165 != 255)
    {
      v166 = *(void **)(v34 + 56);
      *(_QWORD *)(v34 + 56) = *v163;
      *(_BYTE *)(v34 + 64) = v165;
      sub_10000563C(v166, v164);
      goto LABEL_87;
    }
    sub_1000077A4(v34 + 56);
  }
  *(_QWORD *)(v34 + 56) = *v163;
  *(_BYTE *)(v34 + 64) = v35[64];
LABEL_87:
  v171 = v35 + 72;
  v172 = *(unsigned __int8 *)(v34 + 80);
  if (v172 != 255)
  {
    v173 = v35[80];
    if (v173 != 255)
    {
      v174 = *(void **)(v34 + 72);
      *(_QWORD *)(v34 + 72) = *v171;
      *(_BYTE *)(v34 + 80) = v173;
      sub_10000563C(v174, v172);
      goto LABEL_97;
    }
    sub_1000077A4(v34 + 72);
  }
  *(_QWORD *)(v34 + 72) = *v171;
  *(_BYTE *)(v34 + 80) = v35[80];
LABEL_97:
  v179 = v35 + 88;
  v180 = *(unsigned __int8 *)(v34 + 96);
  if (v180 != 255)
  {
    v181 = v35[96];
    if (v181 != 255)
    {
      v182 = *(void **)(v34 + 88);
      *(_QWORD *)(v34 + 88) = *v179;
      *(_BYTE *)(v34 + 96) = v181;
      sub_10000563C(v182, v180);
      goto LABEL_107;
    }
    sub_1000077A4(v34 + 88);
  }
  *(_QWORD *)(v34 + 88) = *v179;
  *(_BYTE *)(v34 + 96) = v35[96];
LABEL_107:
  v187 = v35 + 104;
  v188 = *(unsigned __int8 *)(v34 + 112);
  if (v188 != 255)
  {
    v189 = v35[112];
    if (v189 != 255)
    {
      v190 = *(void **)(v34 + 104);
      *(_QWORD *)(v34 + 104) = *v187;
      *(_BYTE *)(v34 + 112) = v189;
      sub_10000563C(v190, v188);
      goto LABEL_117;
    }
    sub_1000077A4(v34 + 104);
  }
  *(_QWORD *)(v34 + 104) = *v187;
  *(_BYTE *)(v34 + 112) = v35[112];
LABEL_117:
  v195 = v35 + 120;
  v196 = *(unsigned __int8 *)(v34 + 128);
  if (v196 == 255)
  {
LABEL_126:
    *(_QWORD *)(v34 + 120) = *v195;
    *(_BYTE *)(v34 + 128) = v35[128];
    goto LABEL_127;
  }
  v197 = v35[128];
  if (v197 == 255)
  {
    sub_1000077A4(v34 + 120);
    goto LABEL_126;
  }
  v198 = *(void **)(v34 + 120);
  *(_QWORD *)(v34 + 120) = *v195;
  *(_BYTE *)(v34 + 128) = v197;
  sub_10000563C(v198, v196);
LABEL_127:
  *(_BYTE *)(v34 + 129) = v35[129];
  v203 = v36[11];
  v204 = v34 + v203;
  v205 = &v35[v203];
  v206 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 40))(v204, v205, v206);
  v207 = v36[12];
  v208 = (_QWORD *)(v34 + v207);
  v209 = &v35[v207];
  v211 = *(_QWORD *)v209;
  v210 = *((_QWORD *)v209 + 1);
  v212 = v208[1];
  *v208 = v211;
  v208[1] = v210;
  swift_bridgeObjectRelease(v212);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v213 = v36[16];
  v214 = (_QWORD *)(v34 + v213);
  v215 = &v35[v213];
  v217 = *(_QWORD *)v215;
  v216 = *((_QWORD *)v215 + 1);
  v218 = v214[1];
  *v214 = v217;
  v214[1] = v216;
  swift_bridgeObjectRelease(v218);
LABEL_13:
  v46 = v17[13];
  v47 = (uint64_t)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = v37((uint64_t)a1 + v46, 1, v36);
  v50 = v37((uint64_t)v48, 1, v36);
  if (v49)
  {
    if (!v50)
    {
      v51 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v51;
      *(_BYTE *)(v47 + 32) = v48[32];
      *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
      *(_QWORD *)(v47 + 56) = *((_QWORD *)v48 + 7);
      *(_BYTE *)(v47 + 64) = v48[64];
      *(_OWORD *)(v47 + 113) = *(_OWORD *)(v48 + 113);
      *(_OWORD *)(v47 + 104) = *(_OWORD *)(v48 + 104);
      *(_OWORD *)(v47 + 88) = *(_OWORD *)(v48 + 88);
      *(_OWORD *)(v47 + 72) = *(_OWORD *)(v48 + 72);
      *(_BYTE *)(v47 + 129) = v48[129];
      v52 = v36[11];
      v53 = v47 + v52;
      v54 = &v48[v52];
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
      *(_OWORD *)(v47 + v36[12]) = *(_OWORD *)&v48[v36[12]];
      *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
      *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
      *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
      *(_OWORD *)(v47 + v36[16]) = *(_OWORD *)&v48[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v235 + 56))(v47, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    sub_10000EF80(v47, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_18:
    v56 = sub_100005150(&qword_100081030);
    memcpy((void *)v47, v48, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_19;
  }
  v155 = *((_QWORD *)v48 + 1);
  v156 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v47 + 8) = v155;
  swift_bridgeObjectRelease(v156);
  v157 = v48 + 16;
  v158 = *(unsigned __int8 *)(v47 + 32);
  if (v158 != 255)
  {
    v159 = v48[32];
    if (v159 != 255)
    {
      v160 = *(_QWORD *)(v47 + 16);
      v161 = *(_QWORD *)(v47 + 24);
      *(_OWORD *)(v47 + 16) = *v157;
      *(_BYTE *)(v47 + 32) = v159;
      sub_100005624(v160, v161, v158);
      goto LABEL_82;
    }
    sub_100007770(v47 + 16);
  }
  *(_OWORD *)(v47 + 16) = *v157;
  *(_BYTE *)(v47 + 32) = v48[32];
LABEL_82:
  *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
  v167 = v48 + 56;
  v168 = *(unsigned __int8 *)(v47 + 64);
  if (v168 != 255)
  {
    v169 = v48[64];
    if (v169 != 255)
    {
      v170 = *(void **)(v47 + 56);
      *(_QWORD *)(v47 + 56) = *v167;
      *(_BYTE *)(v47 + 64) = v169;
      sub_10000563C(v170, v168);
      goto LABEL_92;
    }
    sub_1000077A4(v47 + 56);
  }
  *(_QWORD *)(v47 + 56) = *v167;
  *(_BYTE *)(v47 + 64) = v48[64];
LABEL_92:
  v175 = v48 + 72;
  v176 = *(unsigned __int8 *)(v47 + 80);
  if (v176 != 255)
  {
    v177 = v48[80];
    if (v177 != 255)
    {
      v178 = *(void **)(v47 + 72);
      *(_QWORD *)(v47 + 72) = *v175;
      *(_BYTE *)(v47 + 80) = v177;
      sub_10000563C(v178, v176);
      goto LABEL_102;
    }
    sub_1000077A4(v47 + 72);
  }
  *(_QWORD *)(v47 + 72) = *v175;
  *(_BYTE *)(v47 + 80) = v48[80];
LABEL_102:
  v183 = v48 + 88;
  v184 = *(unsigned __int8 *)(v47 + 96);
  if (v184 != 255)
  {
    v185 = v48[96];
    if (v185 != 255)
    {
      v186 = *(void **)(v47 + 88);
      *(_QWORD *)(v47 + 88) = *v183;
      *(_BYTE *)(v47 + 96) = v185;
      sub_10000563C(v186, v184);
      goto LABEL_112;
    }
    sub_1000077A4(v47 + 88);
  }
  *(_QWORD *)(v47 + 88) = *v183;
  *(_BYTE *)(v47 + 96) = v48[96];
LABEL_112:
  v191 = v48 + 104;
  v192 = *(unsigned __int8 *)(v47 + 112);
  if (v192 != 255)
  {
    v193 = v48[112];
    if (v193 != 255)
    {
      v194 = *(void **)(v47 + 104);
      *(_QWORD *)(v47 + 104) = *v191;
      *(_BYTE *)(v47 + 112) = v193;
      sub_10000563C(v194, v192);
      goto LABEL_122;
    }
    sub_1000077A4(v47 + 104);
  }
  *(_QWORD *)(v47 + 104) = *v191;
  *(_BYTE *)(v47 + 112) = v48[112];
LABEL_122:
  v199 = v48 + 120;
  v200 = *(unsigned __int8 *)(v47 + 128);
  if (v200 == 255)
  {
LABEL_129:
    *(_QWORD *)(v47 + 120) = *v199;
    *(_BYTE *)(v47 + 128) = v48[128];
    goto LABEL_130;
  }
  v201 = v48[128];
  if (v201 == 255)
  {
    sub_1000077A4(v47 + 120);
    goto LABEL_129;
  }
  v202 = *(void **)(v47 + 120);
  *(_QWORD *)(v47 + 120) = *v199;
  *(_BYTE *)(v47 + 128) = v201;
  sub_10000563C(v202, v200);
LABEL_130:
  *(_BYTE *)(v47 + 129) = v48[129];
  v219 = v36[11];
  v220 = v47 + v219;
  v221 = &v48[v219];
  v222 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v222 - 8) + 40))(v220, v221, v222);
  v223 = v36[12];
  v224 = (_QWORD *)(v47 + v223);
  v225 = &v48[v223];
  v227 = *(_QWORD *)v225;
  v226 = *((_QWORD *)v225 + 1);
  v228 = v224[1];
  *v224 = v227;
  v224[1] = v226;
  swift_bridgeObjectRelease(v228);
  *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
  *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
  *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
  v229 = v36[16];
  v230 = (_QWORD *)(v47 + v229);
  v231 = &v48[v229];
  v233 = *(_QWORD *)v231;
  v232 = *((_QWORD *)v231 + 1);
  v234 = v230[1];
  *v230 = v233;
  v230[1] = v232;
  swift_bridgeObjectRelease(v234);
LABEL_19:
  v57 = v17[14];
  v58 = *(void **)((char *)a1 + v57);
  *(_QWORD *)((char *)a1 + v57) = *(_QWORD *)((char *)a2 + v57);

  v59 = v17[15];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    v67 = v238;
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v67 = v238;
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
LABEL_24:
    v68 = sub_100005150(&qword_100081038);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v60, v61, v62);
LABEL_25:
  *((_BYTE *)a1 + v17[16]) = *((_BYTE *)a2 + v17[16]);
  v69 = v17[17];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  v72 = v17[18];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v17[19];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = v236((char *)a1 + v75, 1, v21);
  v79 = v236(v77, 1, v21);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v76, v77, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v76, 0, 1, v21);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v76, v21);
LABEL_30:
    v80 = sub_100005150(&qword_100081028);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v76, v77, v21);
LABEL_31:
  v81 = v17[20];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = v236((char *)a1 + v81, 1, v21);
  v85 = v236(v83, 1, v21);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v82, v83, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v82, 0, 1, v21);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v82, v21);
LABEL_36:
    v86 = sub_100005150(&qword_100081028);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v82, v83, v21);
LABEL_37:
  v87 = v17[21];
  v88 = (_QWORD *)((char *)a1 + v87);
  v89 = (_QWORD *)((char *)a2 + v87);
  v90 = *(_QWORD *)((char *)a1 + v87);
  if (v90)
  {
    if (*v89)
    {
      *v88 = *v89;
      swift_release(v90);
      v91 = v88[1];
      v88[1] = v89[1];
      swift_release(v91);
      v92 = v88[2];
      v88[2] = v89[2];
      swift_release(v92);
      goto LABEL_42;
    }
    sub_100007814(v88);
  }
  *(_OWORD *)v88 = *(_OWORD *)v89;
  v88[2] = v89[2];
LABEL_42:
  v93 = v17[22];
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  v96 = sub_100005150(&qword_100081040);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  v239 = a2;
  if (v99)
  {
    if (!v100)
    {
      v101 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v101(v94, v95, v21);
      v101(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v100)
  {
    sub_10000F008((uint64_t)v94, &qword_100081040);
LABEL_47:
    v102 = sub_100005150(&qword_100081048);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_48;
  }
  v162 = *(void (**)(char *, char *, uint64_t))(v67 + 40);
  v162(v94, v95, v21);
  v162(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
LABEL_48:
  v103 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v104 = v103[5];
  v105 = &v94[v104];
  v106 = &v95[v104];
  v107 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 40))(v105, v106, v107);
  v108 = v103[6];
  v109 = &v94[v108];
  v110 = &v95[v108];
  v111 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  v114 = v113(v109, 1, v111);
  v115 = v113(v110, 1, v111);
  if (v114)
  {
    v116 = v239;
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v109, v110, v111);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  v116 = v239;
  if (v115)
  {
    (*(void (**)(char *, uint64_t))(v112 + 8))(v109, v111);
LABEL_53:
    v117 = sub_100005150(&qword_100081050);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 40))(v109, v110, v111);
LABEL_54:
  v118 = v103[7];
  v119 = &v94[v118];
  v120 = &v95[v118];
  v122 = *(_QWORD *)v120;
  v121 = *((_QWORD *)v120 + 1);
  v123 = *((_QWORD *)v119 + 1);
  *(_QWORD *)v119 = v122;
  *((_QWORD *)v119 + 1) = v121;
  swift_bridgeObjectRelease(v123);
  v124 = v103[8];
  v125 = &v94[v124];
  v126 = &v95[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  v130 = v237[6];
  *(_QWORD *)((char *)a1 + v237[5]) = *(_QWORD *)((char *)v116 + v237[5]);
  *((_BYTE *)a1 + v130) = *((_BYTE *)v116 + v130);
  if (a1 != v116)
  {
    v131 = v237[7];
    v132 = (char *)a1 + v131;
    v133 = (char *)v116 + v131;
    sub_10000F008((uint64_t)a1 + v131, &qword_100081DC8);
    v134 = sub_100005150(&qword_100081DC8);
    if (swift_getEnumCaseMultiPayload(v133, v134) == 1)
    {
      v135 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 32))(v132, v133, v135);
      swift_storeEnumTagMultiPayload(v132, v134, 1);
    }
    else
    {
      memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    }
  }
  v136 = v237[8];
  v137 = (char *)a1 + v136;
  v138 = (char *)v116 + v136;
  v139 = *(_QWORD *)v138;
  LOBYTE(v138) = v138[8];
  v140 = *(_QWORD *)v137;
  v141 = v137[8];
  *(_QWORD *)v137 = v139;
  v137[8] = (char)v138;
  sub_100005650(v140, v141);
  if (a1 != v116)
  {
    v142 = v237[9];
    v143 = (char *)a1 + v142;
    v144 = (char *)v116 + v142;
    sub_10000F008((uint64_t)a1 + v142, &qword_100081DD0);
    v145 = sub_100005150(&qword_100081DD0);
    if (swift_getEnumCaseMultiPayload(v144, v145) == 1)
    {
      v146 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v146 - 8) + 32))(v143, v144, v146);
      swift_storeEnumTagMultiPayload(v143, v145, 1);
    }
    else
    {
      memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100039F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100039F68);
}

uint64_t sub_100039F68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = type metadata accessor for UpNextEntry.Episode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_100005150(&qword_100081DD8);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v11 = sub_100005150(&qword_100081DE0);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[8] + 8);
  if (v13 > 1)
    return (v13 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10003A038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003A044);
}

uint64_t sub_10003A044(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UpNextEntry.Episode(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_100005150(&qword_100081DD8);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[7];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[8] + 8) = -(char)a2;
        return result;
      }
      v10 = sub_100005150(&qword_100081DE0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for EpisodeListWidgetSingle(uint64_t a1)
{
  uint64_t result;

  result = qword_100081E40;
  if (!qword_100081E40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeListWidgetSingle);
  return result;
}

void sub_10003A150(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v2 = type metadata accessor for UpNextEntry.Episode(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[2] = &unk_10006DEC8;
    sub_10003A230(319, &qword_100081E50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      v8[4] = &unk_10006DEE0;
      sub_10003A230(319, (unint64_t *)&unk_100081E58, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

void sub_10003A230(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10003A27C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071DD4, 1);
}

uint64_t sub_10003A28C@<X0>(char a1@<W0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v4 = v3;
  v23[1] = a3;
  v7 = sub_100005150(&qword_100081AD8);
  __chkstk_darwin(v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005150(&qword_100082048);
  __chkstk_darwin(v10);
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005150(&qword_100081BA0);
  __chkstk_darwin(v13);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    a2(v4);
    sub_10000EFC4((uint64_t)v15, (uint64_t)v12, &qword_100081BA0);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v16 = sub_10003D7C0((unint64_t *)&qword_100081B98, &qword_100081BA0, &qword_100081AE0, &qword_100081AD8);
    v17 = sub_10000EEA8(&qword_100081AE0, &qword_100081AD8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    _ConditionalContent<>.init(storage:)(v12, v13, v7, v16, v17);
    v18 = (uint64_t)v15;
    v19 = &qword_100081BA0;
  }
  else
  {
    sub_10000EFC4(v4, (uint64_t)v9, &qword_100081AD8);
    sub_10000EFC4((uint64_t)v9, (uint64_t)v12, &qword_100081AD8);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v20 = sub_10003D7C0((unint64_t *)&qword_100081B98, &qword_100081BA0, &qword_100081AE0, &qword_100081AD8);
    v21 = sub_10000EEA8(&qword_100081AE0, &qword_100081AD8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    _ConditionalContent<>.init(storage:)(v12, v13, v7, v20, v21);
    v18 = (uint64_t)v9;
    v19 = &qword_100081AD8;
  }
  return sub_10000F008(v18, v19);
}

uint64_t sub_10003A4D4@<X0>(char a1@<W0>, void (*a2)(uint64_t, __n128)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v4 = v3;
  v24[1] = a3;
  v7 = sub_100005150(&qword_100081EA8);
  __chkstk_darwin(v7);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005150(&qword_100081EB8);
  __chkstk_darwin(v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005150(&qword_100081EC0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    a2(v4, v14);
    sub_10000EFC4((uint64_t)v16, (uint64_t)v12, &qword_100081EC0);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v17 = sub_10003D7C0(&qword_100081EC8, &qword_100081EC0, &qword_100081ED0, &qword_100081EA8);
    v18 = sub_10000EEA8(&qword_100081ED0, &qword_100081EA8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    _ConditionalContent<>.init(storage:)(v12, v13, v7, v17, v18);
    v19 = (uint64_t)v16;
    v20 = &qword_100081EC0;
  }
  else
  {
    sub_10000EFC4(v4, (uint64_t)v9, &qword_100081EA8);
    sub_10000EFC4((uint64_t)v9, (uint64_t)v12, &qword_100081EA8);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v21 = sub_10003D7C0(&qword_100081EC8, &qword_100081EC0, &qword_100081ED0, &qword_100081EA8);
    v22 = sub_10000EEA8(&qword_100081ED0, &qword_100081EA8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    _ConditionalContent<>.init(storage:)(v12, v13, v7, v21, v22);
    v19 = (uint64_t)v9;
    v20 = &qword_100081EA8;
  }
  return sub_10000F008(v19, v20);
}

uint64_t sub_10003A71C@<X0>(char a1@<W0>, void (*a2)(uint64_t, __n128)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v4 = v3;
  v24[1] = a3;
  v7 = sub_100005150(&qword_100082020);
  __chkstk_darwin(v7);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005150(&qword_100082028);
  __chkstk_darwin(v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005150(&qword_100082030);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    a2(v4, v14);
    sub_10000EFC4((uint64_t)v16, (uint64_t)v12, &qword_100082030);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v17 = sub_10003D7C0((unint64_t *)&qword_100082038, &qword_100082030, &qword_100082040, &qword_100082020);
    v18 = sub_10000EEA8(&qword_100082040, &qword_100082020, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    _ConditionalContent<>.init(storage:)(v12, v13, v7, v17, v18);
    v19 = (uint64_t)v16;
    v20 = &qword_100082030;
  }
  else
  {
    sub_10000EFC4(v4, (uint64_t)v9, &qword_100082020);
    sub_10000EFC4((uint64_t)v9, (uint64_t)v12, &qword_100082020);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v21 = sub_10003D7C0((unint64_t *)&qword_100082038, &qword_100082030, &qword_100082040, &qword_100082020);
    v22 = sub_10000EEA8(&qword_100082040, &qword_100082020, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    _ConditionalContent<>.init(storage:)(v12, v13, v7, v21, v22);
    v19 = (uint64_t)v9;
    v20 = &qword_100082020;
  }
  return sub_10000F008(v19, v20);
}

uint64_t sub_10003A964@<X0>(char a1@<W0>, void (*a2)(uint64_t, __n128)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v4 = v3;
  v24[1] = a3;
  v7 = sub_100005150(&qword_100081FE8);
  __chkstk_darwin(v7);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005150(&qword_100081FF0);
  __chkstk_darwin(v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005150(&qword_100081FF8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    a2(v4, v14);
    sub_10000EFC4((uint64_t)v16, (uint64_t)v12, &qword_100081FF8);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v17 = sub_10003D7C0(&qword_100082000, &qword_100081FF8, &qword_100082008, &qword_100081FE8);
    v18 = sub_10000EEA8(&qword_100082008, &qword_100081FE8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    _ConditionalContent<>.init(storage:)(v12, v13, v7, v17, v18);
    v19 = (uint64_t)v16;
    v20 = &qword_100081FF8;
  }
  else
  {
    sub_10000EFC4(v4, (uint64_t)v9, &qword_100081FE8);
    sub_10000EFC4((uint64_t)v9, (uint64_t)v12, &qword_100081FE8);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v21 = sub_10003D7C0(&qword_100082000, &qword_100081FF8, &qword_100082008, &qword_100081FE8);
    v22 = sub_10000EEA8(&qword_100082008, &qword_100081FE8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    _ConditionalContent<>.init(storage:)(v12, v13, v7, v21, v22);
    v19 = (uint64_t)v9;
    v20 = &qword_100081FE8;
  }
  return sub_10000F008(v19, v20);
}

void sub_10003ABAC()
{
  qword_100081DC0 = 0x4059000000000000;
}

double sub_10003ABBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  double result;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - v5;
  type metadata accessor for EpisodeListWidgetSingle(0);
  sub_100051DF4(v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for WidgetFamily.systemLarge(_:), v0);
  v7 = sub_10000FBAC((unint64_t *)&qword_100081FB8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v13, v0, v7);
  dispatch thunk of RawRepresentable.rawValue.getter(&v12, v0, v7);
  v9 = v12;
  v8 = v13;
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v3, v0);
  v10(v6, v0);
  result = 0.0;
  if (v8 == v9)
  {
    if (qword_100080F80 != -1)
      swift_once(&qword_100080F80, sub_10003ABAC);
    return *(double *)&qword_100081DC0;
  }
  return result;
}

uint64_t sub_10003AD1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char v16;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for EpisodeListWidgetSingle(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - v10;
  sub_100051DF4((uint64_t *)((char *)&v18 - v10));
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for WidgetFamily.systemSmall(_:), v5);
  v12 = sub_10000FBAC((unint64_t *)&qword_100081FB8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v19, v5, v12);
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, v5, v12);
  v14 = v18;
  v13 = v19;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, v5);
  v15(v11, v5);
  sub_10000EF3C(v1, (uint64_t)v4, type metadata accessor for EpisodeListWidgetSingle);
  if (v13 == v14)
  {
    v16 = sub_10003AEE8();
    sub_10000EF80((uint64_t)v4, type metadata accessor for EpisodeListWidgetSingle);
    if ((v16 & 1) != 0)
      return 2;
  }
  else
  {
    sub_10000EF80((uint64_t)v4, type metadata accessor for EpisodeListWidgetSingle);
  }
  return 0;
}

uint64_t sub_10003AEE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  char *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for EpisodeListWidgetSingle(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetRenderingMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - v10;
  v12 = sub_100051EF4((uint64_t *)((char *)&v20 - v10));
  static WidgetRenderingMode.vibrant.getter(v12);
  v13 = static WidgetRenderingMode.== infix(_:_:)(v11, v8);
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  v14(v11, v5);
  sub_10000EF3C(v1, (uint64_t)v4, type metadata accessor for EpisodeListWidgetSingle);
  if ((v13 & 1) != 0)
  {
    v15 = &v4[*(int *)(v2 + 32)];
    v16 = *(_QWORD *)v15;
    v17 = v15[8];
    sub_1000051BC(*(_QWORD *)v15, v17);
    v18 = sub_100051C3C(v16, v17);
    sub_100005650(v16, v17);
  }
  else
  {
    v18 = 1;
  }
  sub_10000EF80((uint64_t)v4, type metadata accessor for EpisodeListWidgetSingle);
  return v18 & 1;
}

id sub_10003B068()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  id result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v1 = sub_100005150(&qword_100081050);
  __chkstk_darwin(v1);
  v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005150(&qword_100081D40);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10006DE90;
  v6 = v0[8];
  *(_QWORD *)(v5 + 32) = v0[7];
  *(_QWORD *)(v5 + 40) = v6;
  v7 = v0[3];
  *(_QWORD *)(v5 + 48) = v0[2];
  *(_QWORD *)(v5 + 56) = v7;
  v8 = v0[10];
  *(_QWORD *)(v5 + 64) = v0[9];
  *(_QWORD *)(v5 + 72) = v8;
  v9 = (char *)v0 + *(int *)(type metadata accessor for UpNextEntry.Episode(0) + 88);
  v10 = type metadata accessor for WidgetPredictedPlayState(0);
  v11 = &v9[*(int *)(v10 + 32)];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)(v5 + 80) = *(_QWORD *)v11;
  *(_QWORD *)(v5 + 88) = v12;
  sub_10000EFC4((uint64_t)&v9[*(int *)(v10 + 24)], (uint64_t)v3, &qword_100081050);
  v13 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v14 = *(_QWORD *)(v13 - 8);
  LODWORD(v9) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v3, 1, v13);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v15 = swift_bridgeObjectRetain(v12);
  if ((_DWORD)v9 == 1)
  {
    sub_10000F008((uint64_t)v3, &qword_100081050);
    v16 = 0.0;
  }
  else
  {
    v16 = PlayButtonTimeFormatHelper.timeLeft.getter(v15);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v3, v13);
  }
  result = (id)AXDurationStringForDurationWithSeconds(1, v16);
  if (result)
  {
    v18 = result;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v21 = v20;

    *(_QWORD *)(v5 + 96) = v19;
    *(_QWORD *)(v5 + 104) = v21;
    v25[1] = v5;
    v22 = sub_100005150(&qword_100081D30);
    v23 = sub_10000EEA8(&qword_100081F00, &qword_100081D30, (uint64_t)&protocol conformance descriptor for [A]);
    v24 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v22, v23);
    swift_bridgeObjectRelease(v5);
    return (id)v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003B280@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v2 = v1;
  v36 = a1;
  v3 = type metadata accessor for EpisodeListWidgetSingle(0);
  v33 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v33 + 64);
  __chkstk_darwin(v3);
  v5 = sub_100005150(&qword_100081038);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005150(&qword_100081E98);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005150(&qword_100081EA0);
  v34 = *(_QWORD *)(v11 - 8);
  v35 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100005150(&qword_100081EA8);
  __chkstk_darwin(v32);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for UpNextEntry.Episode(0);
  v16 = (uint64_t)v2 + *(int *)(v31 + 60);
  sub_10000EFC4(v16, (uint64_t)v7, &qword_100081038);
  v17 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EF3C((uint64_t)v2, (uint64_t)v17, type metadata accessor for EpisodeListWidgetSingle);
  v18 = *(unsigned __int8 *)(v33 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_10007E840, v19 + v4, v18 | 7);
  sub_10000FC78((uint64_t)v17, v20 + v19, type metadata accessor for EpisodeListWidgetSingle);
  sub_10000EEF8((uint64_t)v7, (uint64_t)v10, &qword_100081038);
  *(_QWORD *)&v10[*(int *)(v8 + 36)] = 0;
  v21 = (uint64_t (**)())&v10[*(int *)(v8 + 40)];
  *v21 = sub_10003D588;
  v21[1] = (uint64_t (*)())v20;
  v22 = sub_10000EEA8(&qword_100081EB0, &qword_100081E98, (uint64_t)&unk_10006EED8);
  View.widgetURL(_:)(v16, v8, v22);
  sub_10000F008((uint64_t)v10, &qword_100081E98);
  v24 = *v2;
  v23 = v2[1];
  v26 = v34;
  v25 = v35;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v15, v13, v35);
  v27 = &v15[*(int *)(v32 + 52)];
  *(_QWORD *)v27 = v24;
  *((_QWORD *)v27 + 1) = v23;
  v28 = *(void (**)(char *, uint64_t))(v26 + 8);
  swift_bridgeObjectRetain(v23);
  v28(v13, v25);
  v29 = *(_QWORD *)((char *)v2 + *(int *)(v31 + 84)) != 0;
  v37 = v2;
  sub_10003A4D4(v29, (void (*)(uint64_t, __n128))sub_10003D5C4, v36);
  return sub_10000F008((uint64_t)v15, &qword_100081EA8);
}

uint64_t sub_10003B55C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  __n128 v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v28[2];

  v2 = sub_100005150(&qword_100081ED8);
  __chkstk_darwin(v2);
  v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005150(&qword_100081EE0);
  __chkstk_darwin(v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v4 = static HorizontalAlignment.leading.getter(v8);
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v9 = sub_100005150(&qword_100081EE8);
  sub_10003B708(a1, (uint64_t)&v4[*(int *)(v9 + 44)]);
  v10 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for EpisodeListWidgetSingle(0) + 20));
  v11 = static Edge.Set.all.getter();
  v12 = v11;
  v13.n128_u64[0] = v10;
  v14 = EdgeInsets.init(_all:)(v11, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  sub_10000EFC4((uint64_t)v4, (uint64_t)v7, &qword_100081ED8);
  v21 = &v7[*(int *)(v5 + 36)];
  *v21 = v12;
  *((double *)v21 + 1) = v14;
  *((_QWORD *)v21 + 2) = v16;
  *((_QWORD *)v21 + 3) = v18;
  *((_QWORD *)v21 + 4) = v20;
  v21[40] = 0;
  sub_10000F008((uint64_t)v4, &qword_100081ED8);
  v22 = sub_10003B068();
  v24 = v23;
  v28[0] = v22;
  v28[1] = v23;
  v25 = sub_10003D5CC();
  v26 = sub_1000248B8();
  View.accessibilityLabel<A>(_:)(v28, v5, &type metadata for String, v25, v26);
  swift_bridgeObjectRelease(v24);
  return sub_10000F008((uint64_t)v7, &qword_100081EE0);
}

uint64_t sub_10003B708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v34;
  char v35;
  uint64_t v36;
  _OWORD v37[7];

  v4 = sub_100005150(&qword_100081F08);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - v8;
  v10 = sub_100005150(&qword_100081F10);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005150(&qword_100081F18);
  __chkstk_darwin(v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v36 - v17;
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v36 - v21;
  *(_QWORD *)v12 = static VerticalAlignment.top.getter(v20);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v23 = sub_100005150(&qword_100081F20);
  sub_10003CAE4(a1, (uint64_t)&v12[*(int *)(v23 + 44)]);
  v24 = sub_10003ABBC();
  v26 = static Alignment.center.getter(v25);
  v35 = 1;
  v34 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v37, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v24, 0, 0, v34, 0, v35, v26, v27);
  sub_10000EFC4((uint64_t)v12, (uint64_t)v18, &qword_100081F10);
  v28 = &v18[*(int *)(v13 + 36)];
  v29 = v37[5];
  *((_OWORD *)v28 + 4) = v37[4];
  *((_OWORD *)v28 + 5) = v29;
  *((_OWORD *)v28 + 6) = v37[6];
  v30 = v37[1];
  *(_OWORD *)v28 = v37[0];
  *((_OWORD *)v28 + 1) = v30;
  v31 = v37[3];
  *((_OWORD *)v28 + 2) = v37[2];
  *((_OWORD *)v28 + 3) = v31;
  sub_10000F008((uint64_t)v12, &qword_100081F10);
  sub_10000EEF8((uint64_t)v18, (uint64_t)v22, &qword_100081F18);
  sub_10003BA30(a1, (uint64_t)v9);
  sub_10000EFC4((uint64_t)v22, (uint64_t)v15, &qword_100081F18);
  sub_10000EFC4((uint64_t)v9, (uint64_t)v6, &qword_100081F08);
  sub_10000EFC4((uint64_t)v15, a2, &qword_100081F18);
  v32 = sub_100005150(&qword_100081F28);
  sub_10000EFC4((uint64_t)v6, a2 + *(int *)(v32 + 48), &qword_100081F08);
  sub_10000F008((uint64_t)v9, &qword_100081F08);
  sub_10000F008((uint64_t)v22, &qword_100081F18);
  sub_10000F008((uint64_t)v6, &qword_100081F08);
  return sub_10000F008((uint64_t)v15, &qword_100081F18);
}

uint64_t sub_10003BA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a2;
  v37 = sub_100005150(&qword_100081F30);
  __chkstk_darwin(v37);
  v4 = (uint64_t *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for WidgetEmptyText(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - v9;
  v11 = sub_100005150(&qword_100081F38);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100005150(&qword_100081F40);
  __chkstk_darwin(v36);
  v15 = (uint64_t *)((char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100005150(&qword_100081F48);
  __chkstk_darwin(v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v35 - v20;
  v22 = type metadata accessor for EpisodeListWidgetSingle(0);
  v23 = *(unsigned __int8 *)(a1 + *(int *)(v22 + 24));
  if (v23 == 2)
  {
    sub_10003BDF4((uint64_t)v21);
    sub_10000EFC4((uint64_t)v21, (uint64_t)v18, &qword_100081F48);
    *v15 = 0x4010000000000000;
    v24 = sub_100005150(&qword_100081F50);
    sub_10000EFC4((uint64_t)v18, (uint64_t)v15 + *(int *)(v24 + 48), &qword_100081F48);
    sub_10000F008((uint64_t)v18, &qword_100081F48);
    sub_10000EFC4((uint64_t)v15, (uint64_t)v13, &qword_100081F40);
    swift_storeEnumTagMultiPayload(v13, v11, 1);
    v25 = sub_10000EEA8(&qword_100081F58, &qword_100081F30, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v26 = sub_10000EEA8(&qword_100081F60, &qword_100081F40, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v13, v37, v36, v25, v26);
    sub_10000F008((uint64_t)v15, &qword_100081F40);
    return sub_10000F008((uint64_t)v21, &qword_100081F48);
  }
  else
  {
    v28 = v23 & 1;
    v29 = *(_QWORD *)(a1 + *(int *)(v22 + 20));
    v30 = &v10[*(int *)(v5 + 20)];
    sub_100051DF4(v30);
    v31 = type metadata accessor for EpisodeViewStyle(0);
    swift_storeEnumTagMultiPayload(v30, v31, 0);
    *v10 = v28;
    sub_10000EF3C((uint64_t)v10, (uint64_t)v7, type metadata accessor for WidgetEmptyText);
    *v4 = v29;
    v32 = sub_100005150(&qword_100081F68);
    sub_10000EF3C((uint64_t)v7, (uint64_t)v4 + *(int *)(v32 + 48), type metadata accessor for WidgetEmptyText);
    sub_10000EF80((uint64_t)v7, type metadata accessor for WidgetEmptyText);
    sub_10000EFC4((uint64_t)v4, (uint64_t)v13, &qword_100081F30);
    swift_storeEnumTagMultiPayload(v13, v11, 0);
    v33 = sub_10000EEA8(&qword_100081F58, &qword_100081F30, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v34 = sub_10000EEA8(&qword_100081F60, &qword_100081F40, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v13, v37, v36, v33, v34);
    sub_10000F008((uint64_t)v4, &qword_100081F30);
    return sub_10000EF80((uint64_t)v10, type metadata accessor for WidgetEmptyText);
  }
}

uint64_t sub_10003BDF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t KeyPath;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v147 = a1;
  v144 = type metadata accessor for PlayButtonLarge(0);
  __chkstk_darwin(v144);
  v145 = (uint64_t)&v118 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100005150(&qword_100081F70);
  __chkstk_darwin(v143);
  v148 = (uint64_t)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v146 = (uint64_t)&v118 - v5;
  v6 = type metadata accessor for Font.Leading(0);
  v141 = *(_QWORD *)(v6 - 8);
  v142 = v6;
  __chkstk_darwin(v6);
  v140 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for EpisodeCaptionView(0);
  __chkstk_darwin(v8);
  v136 = (uint64_t)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100005150(&qword_100081B70);
  __chkstk_darwin(v138);
  v137 = (uint64_t)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100005150(&qword_100081F78);
  __chkstk_darwin(v139);
  v152 = (uint64_t)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v149 = (uint64_t)&v118 - v13;
  v14 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v14);
  v134 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for BlendMode(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for Color.RGBColorSpace(0);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v128 = (char *)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100005150(&qword_100081F80);
  __chkstk_darwin(v129);
  v19 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100005150(&qword_100081F88);
  __chkstk_darwin(v130);
  v21 = (char *)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005150(&qword_100081F90);
  __chkstk_darwin(v22);
  v24 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v118 - v26;
  v28 = sub_100005150(&qword_100081F98);
  __chkstk_darwin(v28);
  v30 = (char *)&v118 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v151 = (uint64_t)&v118 - v32;
  v33 = sub_10003AEE8();
  v150 = v30;
  if ((v33 & 1) != 0)
  {
    v34 = sub_100005150(&qword_100081FA8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v151, 1, 1, v34);
  }
  else
  {
    v35 = *(_QWORD *)(v1 + 56);
    v135 = v1;
    v125 = v8;
    v36 = *(_QWORD *)(v1 + 64);
    v153 = v35;
    v154 = v36;
    v37 = sub_1000248B8();
    swift_bridgeObjectRetain(v36);
    v38 = Text.init<A>(_:)(&v153, &type metadata for String, v37);
    v122 = v24;
    v39 = v38;
    v124 = v27;
    v123 = v22;
    v41 = v40;
    v121 = v21;
    v43 = v42;
    v45 = v44 & 1;
    v46 = static Font.caption2.getter(v38);
    v47 = Font.bold()();
    swift_release(v46);
    v119 = Text.font(_:)(v47, v39, v41, v45, v43);
    v118 = v48;
    LOBYTE(v46) = v49;
    v120 = v50;
    swift_release(v47);
    sub_10000EEE8(v39, v41, v45);
    swift_bridgeObjectRelease(v43);
    v51 = v128;
    (*(void (**)(char *, _QWORD, uint64_t))(v126 + 104))(v128, enum case for Color.RGBColorSpace.sRGB(_:), v127);
    v52 = Color.init(_:red:green:blue:opacity:)(v51, 0.921568627, 0.921568627, 0.960784314, 0.4);
    v53 = v132;
    v54 = v131;
    v55 = v133;
    (*(void (**)(char *, _QWORD, uint64_t))(v132 + 104))(v131, enum case for BlendMode.plusLighter(_:), v133);
    v56 = (uint64_t)v134;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v134, v54, v55);
    sub_10000EF3C(v56, (uint64_t)&v19[*(int *)(v129 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    v57 = v119;
    v58 = v118;
    *(_QWORD *)v19 = v119;
    *((_QWORD *)v19 + 1) = v58;
    LOBYTE(v41) = v46 & 1;
    v19[16] = v46 & 1;
    v59 = v120;
    *((_QWORD *)v19 + 3) = v120;
    *((_QWORD *)v19 + 4) = v52;
    v60 = v57;
    sub_100024C4C(v57, v58, v41);
    swift_bridgeObjectRetain(v59);
    swift_retain(v52);
    sub_10000EF80(v56, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
    swift_release(v52);
    sub_10000EEE8(v60, v58, v41);
    swift_bridgeObjectRelease(v59);
    KeyPath = swift_getKeyPath(&unk_10006DF48);
    v62 = (uint64_t)v121;
    sub_10000EFC4((uint64_t)v19, (uint64_t)v121, &qword_100081F80);
    v63 = v62 + *(int *)(v130 + 36);
    *(_QWORD *)v63 = KeyPath;
    *(_QWORD *)(v63 + 8) = 0;
    *(_BYTE *)(v63 + 16) = 1;
    sub_10000F008((uint64_t)v19, &qword_100081F80);
    v64 = (uint64_t)v122;
    sub_10000EFC4(v62, (uint64_t)v122, &qword_100081F88);
    *(_QWORD *)(v64 + *(int *)(v123 + 36)) = 0xBFF0000000000000;
    sub_10000F008(v62, &qword_100081F88);
    v65 = (uint64_t)v124;
    sub_10000EEF8(v64, (uint64_t)v124, &qword_100081F90);
    sub_10000EFC4(v65, v64, &qword_100081F90);
    v66 = v150;
    *v150 = 0;
    *((_BYTE *)v66 + 8) = 0;
    v67 = sub_100005150(&qword_100081FA0);
    sub_10000EFC4(v64, (uint64_t)v66 + *(int *)(v67 + 48), &qword_100081F90);
    sub_10000F008(v65, &qword_100081F90);
    v68 = v64;
    v8 = v125;
    v1 = v135;
    sub_10000F008(v68, &qword_100081F90);
    v69 = sub_100005150(&qword_100081FA8);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v66, 0, 1, v69);
    sub_10000EEF8((uint64_t)v66, v151, &qword_100081F98);
  }
  v70 = v136;
  sub_10000EF3C(v1, v136, type metadata accessor for UpNextEntry.Episode);
  v71 = sub_10003AEE8();
  *(_BYTE *)(v70 + v8[5]) = v71 & 1;
  *(_BYTE *)(v70 + v8[6]) = 0;
  *(_BYTE *)(v70 + v8[7]) = 1;
  v72 = v1;
  v73 = static Font.caption2.getter(v71);
  v74 = Font.bold()();
  swift_release(v73);
  v75 = swift_getKeyPath(&unk_10006DF78);
  v76 = v137;
  sub_10000EF3C(v70, v137, type metadata accessor for EpisodeCaptionView);
  v77 = (uint64_t *)(v76 + *(int *)(v138 + 36));
  *v77 = v75;
  v77[1] = v74;
  sub_10000EF80(v70, type metadata accessor for EpisodeCaptionView);
  v78 = swift_getKeyPath(&unk_10006DFA8);
  v79 = v152;
  sub_10000EFC4(v76, v152, &qword_100081B70);
  v80 = v79 + *(int *)(v139 + 36);
  *(_QWORD *)v80 = v78;
  *(_BYTE *)(v80 + 8) = 0;
  sub_10000F008(v76, &qword_100081B70);
  sub_10000EEF8(v79, v149, &qword_100081F78);
  v81 = *(_QWORD *)(v72 + 80);
  v153 = *(_QWORD *)(v72 + 72);
  v154 = v81;
  v82 = sub_1000248B8();
  swift_bridgeObjectRetain(v81);
  v83 = Text.init<A>(_:)(&v153, &type metadata for String, v82);
  v85 = v84;
  v87 = v86;
  v89 = v88 & 1;
  v90 = static Font.footnote.getter();
  v92 = v140;
  v91 = v141;
  v93 = v142;
  (*(void (**)(char *, _QWORD, uint64_t))(v141 + 104))(v140, enum case for Font.Leading.tight(_:), v142);
  v94 = Font.leading(_:)(v92, v90);
  swift_release(v90);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v93);
  v95 = Text.font(_:)(v94, v83, v85, v89, v87);
  v140 = v96;
  v141 = v95;
  LOBYTE(v91) = v97;
  v142 = v98;
  swift_release(v94);
  LOBYTE(v92) = v91 & 1;
  sub_10000EEE8(v83, v85, v89);
  swift_bridgeObjectRelease(v87);
  v139 = sub_10003AD1C();
  LODWORD(v138) = v99;
  v137 = swift_getKeyPath(&unk_10006DF48);
  v100 = v145;
  v101 = sub_10000EF3C(v72, v145, type metadata accessor for UpNextEntry.Episode);
  v102 = static Alignment.leading.getter(v101);
  v103 = (uint64_t *)(v100 + *(int *)(v144 + 20));
  *v103 = v102;
  v103[1] = v104;
  v105 = v148;
  sub_10000EF3C(v100, v148, type metadata accessor for PlayButtonLarge);
  *(_QWORD *)(v105 + *(int *)(v143 + 36)) = 0x3FF0000000000000;
  sub_10000EF80(v100, type metadata accessor for PlayButtonLarge);
  v106 = v146;
  sub_10000EEF8(v105, v146, &qword_100081F70);
  v107 = v150;
  sub_10000EFC4(v151, (uint64_t)v150, &qword_100081F98);
  v108 = v149;
  v109 = v152;
  sub_10000EFC4(v149, v152, &qword_100081F78);
  sub_10000EFC4(v106, v105, &qword_100081F70);
  v110 = v147;
  sub_10000EFC4((uint64_t)v107, v147, &qword_100081F98);
  v111 = (int *)sub_100005150(&qword_100081FB0);
  sub_10000EFC4(v109, v110 + v111[12], &qword_100081F78);
  v112 = v110 + v111[16];
  v113 = (uint64_t)v140;
  v114 = v141;
  *(_QWORD *)v112 = v141;
  *(_QWORD *)(v112 + 8) = v113;
  *(_BYTE *)(v112 + 16) = (_BYTE)v92;
  v115 = v142;
  v116 = v137;
  *(_QWORD *)(v112 + 24) = v142;
  *(_QWORD *)(v112 + 32) = v116;
  *(_QWORD *)(v112 + 40) = v139;
  *(_BYTE *)(v112 + 48) = v138 & 1;
  *(_QWORD *)(v110 + v111[20]) = 0x4014000000000000;
  sub_10000EFC4(v105, v110 + v111[24], &qword_100081F70);
  sub_100024C4C(v114, v113, (char)v92);
  swift_bridgeObjectRetain(v115);
  swift_retain(v116);
  sub_10000F008(v106, &qword_100081F70);
  sub_10000F008(v108, &qword_100081F78);
  sub_10000F008(v151, &qword_100081F98);
  sub_10000F008(v105, &qword_100081F70);
  sub_10000EEE8(v114, v113, (char)v92);
  swift_release(v116);
  swift_bridgeObjectRelease(v115);
  sub_10000F008(v152, &qword_100081F78);
  return sub_10000F008((uint64_t)v150, &qword_100081F98);
}

uint64_t sub_10003C9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[3];
  _QWORD v17[2];

  v3 = type metadata accessor for UpNextEntry.Episode(0);
  v4 = a2 + *(int *)(v3 + 88);
  result = type metadata accessor for WidgetPredictedPlayState(0);
  v6 = (_QWORD *)(v4 + *(int *)(result + 32));
  v7 = v6[1];
  v17[0] = *v6;
  v17[1] = v7;
  v8 = (uint64_t *)(a2 + *(int *)(v3 + 84));
  v9 = *v8;
  if (*v8)
  {
    v10 = v8[1];
    v11 = v8[2];
    v16[0] = *v8;
    v16[1] = v10;
    v16[2] = v11;
    swift_bridgeObjectRetain(v7);
    sub_1000093E0(v9, v10, v11);
    v12 = sub_100005150(&qword_100081EA8);
    v13 = sub_10000EEA8(&qword_100081ED0, &qword_100081EA8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    v14 = sub_1000248B8();
    v15 = sub_100009418();
    View.accessibilityAction<A, B>(named:intent:)(v17, v16, v12, &type metadata for String, &type metadata for PlayPauseWidgetIntent, v13, v14, v15);
    swift_bridgeObjectRelease(v7);
    swift_release(v11);
    swift_release(v10);
    return swift_release(v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003CAE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v52 = a2;
  v50 = type metadata accessor for Logo(0);
  __chkstk_darwin(v50);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v51 = (uint64_t)&v46 - v6;
  v7 = type metadata accessor for EpisodeViewStyle(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v46 - v11);
  v13 = type metadata accessor for UpNextEntry.Episode(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for WidgetArtworkView(0);
  __chkstk_darwin(v47);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100005150(&qword_100081FC0);
  __chkstk_darwin(v46);
  v48 = (uint64_t)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v46 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v46 - v23;
  v25 = sub_100005150(&qword_100081FC8);
  __chkstk_darwin(v25);
  v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v49 = (uint64_t)&v46 - v29;
  v53 = a1;
  if ((sub_10003AEE8() & 1) != 0)
  {
    sub_10000EF3C(v53, (uint64_t)v15, type metadata accessor for UpNextEntry.Episode);
    type metadata accessor for EpisodeListWidgetSingle(0);
    sub_100051DF4(v12);
    swift_storeEnumTagMultiPayload(v12, v7, 0);
    sub_10000EF3C((uint64_t)v12, (uint64_t)v9, type metadata accessor for EpisodeViewStyle);
    if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
      v30 = 8.0;
    else
      v30 = 6.0;
    sub_10000EF80((uint64_t)v9, type metadata accessor for EpisodeViewStyle);
    sub_10000EF80((uint64_t)v12, type metadata accessor for EpisodeViewStyle);
    sub_10000FC78((uint64_t)v15, (uint64_t)v17, type metadata accessor for UpNextEntry.Episode);
    *(double *)&v17[*(int *)(v47 + 20)] = v30;
    sub_10000EF3C((uint64_t)v17, (uint64_t)v21, type metadata accessor for WidgetArtworkView);
    *(_QWORD *)&v21[*(int *)(v46 + 36)] = 0xBFF0000000000000;
    sub_10000EF80((uint64_t)v17, type metadata accessor for WidgetArtworkView);
    sub_10000EEF8((uint64_t)v21, (uint64_t)v24, &qword_100081FC0);
    v31 = v48;
    sub_10000EFC4((uint64_t)v24, v48, &qword_100081FC0);
    sub_10000EFC4(v31, (uint64_t)v27, &qword_100081FC0);
    v32 = &v27[*(int *)(sub_100005150(&qword_100081FE0) + 48)];
    *(_QWORD *)v32 = 0;
    v32[8] = 1;
    sub_10000F008((uint64_t)v24, &qword_100081FC0);
    sub_10000F008(v31, &qword_100081FC0);
    v33 = sub_100005150(&qword_100081FD0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v27, 0, 1, v33);
    v34 = v49;
    sub_10000EEF8((uint64_t)v27, v49, &qword_100081FC8);
  }
  else
  {
    v35 = sub_100005150(&qword_100081FD0);
    v34 = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v49, 1, 1, v35);
  }
  *(_QWORD *)v4 = swift_getKeyPath(&unk_10006DFD0);
  v4[8] = 0;
  v36 = v50;
  v37 = &v4[*(int *)(v50 + 20)];
  *(_QWORD *)v37 = swift_getKeyPath(&unk_10006DFF8);
  v38 = sub_100005150(&qword_100081DD0);
  swift_storeEnumTagMultiPayload(v37, v38, 0);
  v39 = &v4[*(int *)(v36 + 24)];
  *(_QWORD *)v39 = swift_getKeyPath(&unk_10006E028);
  v40 = sub_100005150(&qword_100081DC8);
  swift_storeEnumTagMultiPayload(v39, v40, 0);
  v41 = v51;
  sub_10000FC78((uint64_t)v4, v51, type metadata accessor for Logo);
  LOBYTE(v39) = sub_10003AEE8();
  sub_10000EFC4(v34, (uint64_t)v27, &qword_100081FC8);
  sub_10000EF3C(v41, (uint64_t)v4, type metadata accessor for Logo);
  v42 = v52;
  sub_10000EFC4((uint64_t)v27, v52, &qword_100081FC8);
  v43 = sub_100005150(&qword_100081FD8);
  sub_10000EF3C((uint64_t)v4, v42 + *(int *)(v43 + 48), type metadata accessor for Logo);
  v44 = v42 + *(int *)(v43 + 64);
  *(_QWORD *)v44 = 0;
  *(_BYTE *)(v44 + 8) = (v39 & 1) == 0;
  *(_BYTE *)(v44 + 9) = v39 & 1;
  sub_10000EF80(v41, type metadata accessor for Logo);
  sub_10000F008(v34, &qword_100081FC8);
  sub_10000EF80((uint64_t)v4, type metadata accessor for Logo);
  return sub_10000F008((uint64_t)v27, &qword_100081FC8);
}

uint64_t sub_10003D04C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  int *v10;
  unsigned int (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = (int *)type metadata accessor for EpisodeListWidgetSingle(0);
  v2 = *((_QWORD *)v1 - 1);
  v53 = *(unsigned __int8 *)(v2 + 80);
  v54 = v0;
  v51 = *(_QWORD *)(v2 + 64);
  v52 = (v53 + 16) & ~v53;
  v3 = v0 + v52;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v52 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v52 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v52 + 40));
  swift_release(*(_QWORD *)(v0 + v52 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v52 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v52 + 80));
  v4 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v5 = v0 + v52 + v4[10];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + v4[11] + 8));
  v9 = v3 + v4[12];
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
    v12 = *(unsigned __int8 *)(v9 + 32);
    if (v12 != 255)
      sub_100005624(*(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), v12);
    v13 = *(unsigned __int8 *)(v9 + 64);
    if (v13 != 255)
      sub_10000563C(*(id *)(v9 + 56), v13);
    v14 = *(unsigned __int8 *)(v9 + 80);
    if (v14 != 255)
      sub_10000563C(*(id *)(v9 + 72), v14);
    v15 = *(unsigned __int8 *)(v9 + 96);
    if (v15 != 255)
      sub_10000563C(*(id *)(v9 + 88), v15);
    v16 = *(unsigned __int8 *)(v9 + 112);
    if (v16 != 255)
      sub_10000563C(*(id *)(v9 + 104), v16);
    v17 = *(unsigned __int8 *)(v9 + 128);
    if (v17 != 255)
      sub_10000563C(*(id *)(v9 + 120), v17);
    v18 = v9 + v10[11];
    v19 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[16] + 8));
  }
  v20 = v3 + v4[13];
  if (!v11(v20, 1, v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + 8));
    v21 = *(unsigned __int8 *)(v20 + 32);
    if (v21 != 255)
      sub_100005624(*(_QWORD *)(v20 + 16), *(_QWORD *)(v20 + 24), v21);
    v22 = *(unsigned __int8 *)(v20 + 64);
    if (v22 != 255)
      sub_10000563C(*(id *)(v20 + 56), v22);
    v23 = *(unsigned __int8 *)(v20 + 80);
    if (v23 != 255)
      sub_10000563C(*(id *)(v20 + 72), v23);
    v24 = *(unsigned __int8 *)(v20 + 96);
    if (v24 != 255)
      sub_10000563C(*(id *)(v20 + 88), v24);
    v25 = *(unsigned __int8 *)(v20 + 112);
    if (v25 != 255)
      sub_10000563C(*(id *)(v20 + 104), v25);
    v26 = *(unsigned __int8 *)(v20 + 128);
    if (v26 != 255)
      sub_10000563C(*(id *)(v20 + 120), v26);
    v27 = v20 + v10[11];
    v28 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + v10[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + v10[16] + 8));
  }

  v29 = v3 + v4[15];
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
  v32 = v3 + v4[19];
  if (!v8(v32, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v32, v6);
  v33 = v3 + v4[20];
  if (!v8(v33, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v33, v6);
  v34 = (_QWORD *)(v3 + v4[21]);
  if (*v34)
  {
    swift_release(*v34);
    swift_release(v34[1]);
    swift_release(v34[2]);
  }
  v35 = v3 + v4[22];
  v36 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
  {
    v37 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v37(v35, v6);
    v37(v35 + *(int *)(v36 + 36), v6);
  }
  v38 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v39 = v35 + v38[5];
  v40 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = v35 + v38[6];
  v42 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v43 = *(_QWORD *)(v42 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
  swift_bridgeObjectRelease(*(_QWORD *)(v35 + v38[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v35 + v38[8] + 8));
  v44 = (_QWORD *)(v3 + v1[7]);
  v45 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v44, v45) == 1)
  {
    v46 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v44, v46);
  }
  else
  {
    swift_release(*v44);
  }
  sub_100005650(*(_QWORD *)(v3 + v1[8]), *(_BYTE *)(v3 + v1[8] + 8));
  v47 = (_QWORD *)(v3 + v1[9]);
  v48 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v47, v48) == 1)
  {
    v49 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v47, v49);
  }
  else
  {
    swift_release(*v47);
  }
  return swift_deallocObject(v54, v52 + v51, v53 | 7);
}

uint64_t sub_10003D588()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EpisodeListWidgetSingle(0) - 8) + 80);
  return sub_10003B55C(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10003D5C4(uint64_t a1)
{
  uint64_t v1;

  return sub_10003C9A8(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_10003D5CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081EF0;
  if (!qword_100081EF0)
  {
    v1 = sub_10000950C(&qword_100081EE0);
    sub_10000EEA8(&qword_100081EF8, &qword_100081ED8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081EF0);
  }
  return result;
}

uint64_t sub_10003D650@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10003D680@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10003D6B0(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10003D6DC(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10003D708@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003D730@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003D758(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10003D780(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10003D7C0(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000950C(a2);
    sub_10000EEA8(a3, a4, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_10000FBAC((unint64_t *)&qword_100081228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003D85C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082010;
  if (!qword_100082010)
  {
    v1 = sub_10000950C(&qword_100082018);
    sub_10003D7C0(&qword_100081EC8, &qword_100081EC0, &qword_100081ED0, &qword_100081EA8);
    sub_10000EEA8(&qword_100081ED0, &qword_100081EA8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082010);
  }
  return result;
}

uint64_t sub_10003D908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t View.restrictingSize<A>(alignment:toViewSize:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(__n128)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a6;
  v23 = a7;
  v24 = a4;
  v11 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SizeRestrictingModifier(0, v15, v16, v14);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v23 - v20;
  a3(v19);
  *(_QWORD *)v21 = a1;
  *((_QWORD *)v21 + 1) = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v21[*(int *)(v17 + 36)], v13, a5);
  View.modifier<A>(_:)(v21, v24, v17, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

uint64_t type metadata accessor for SizeRestrictingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003E510(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SizeRestrictingModifier);
}

uint64_t sub_10003DA38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v8;

  *a6 = a1;
  a6[1] = a2;
  v8 = (char *)a6 + *(int *)(type metadata accessor for SizeRestrictingModifier(0, a4, a5, a4) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v8, a3, a4);
}

uint64_t SizeRestrictingModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v4 = v3;
  v32 = a1;
  v34 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for ModifiedContent(0, v6, &type metadata for _HiddenModifier);
  v33 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - v8;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SizeRestrictingModifier<A>, a2);
  v11 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v11);
  v30 = type metadata accessor for _OverlayModifier(255, v11, v29);
  v12 = type metadata accessor for ModifiedContent(0, v7, v30);
  v31 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v29 - v17;
  v19 = *(_QWORD *)(a2 + 24);
  View.hidden()(v6, v19, v16);
  v20 = *v3;
  v21 = v4[1];
  v36 = v6;
  v37 = v19;
  v38 = v32;
  v22 = sub_10003DDAC();
  v41 = v19;
  v42 = v22;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  View.overlay<A>(alignment:content:)(v20, v21, sub_10003DDA0, v35, v7, v11, v23, v29);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v7);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v30);
  v39 = v23;
  v40 = v24;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v25 = v31;
  v26 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v26(v18, v14, v12);
  v27 = *(void (**)(char *, uint64_t))(v25 + 8);
  v27(v14, v12);
  v26(v34, v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v27)(v18, v12);
}

uint64_t sub_10003DCD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v15;

  v7 = type metadata accessor for SizeRestrictingModifier(255, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SizeRestrictingModifier<A>, v7);
  v9 = type metadata accessor for _ViewModifier_Content(0, v7, WitnessTable);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v15 - v11;
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v9);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v13(a5, (uint64_t)v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10003DDA0@<X0>(uint64_t a1@<X3>, char *a2@<X8>)
{
  uint64_t *v2;

  return sub_10003DCD0(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_10003DDAC()
{
  unint64_t result;

  result = qword_100082050[0];
  if (!qword_100082050[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _HiddenModifier, &type metadata for _HiddenModifier);
    atomic_store(result, qword_100082050);
  }
  return result;
}

uint64_t sub_10003DDF0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of SizeRestrictingModifier.body(content:)>>, 1);
}

uint64_t sub_10003DE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_10003DE30(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10006E0E8;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10003DEA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain(v8);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 16) & ~v5, ((unint64_t)a2 + v5 + 16) & ~v5);
  }
  return v3;
}

uint64_t sub_10003DF48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_OWORD *sub_10003DF68(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_10003DFB8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_OWORD *sub_10003E010(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_OWORD *sub_10003E060(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_10003E0B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 16) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10003E170 + 4 * byte_10006E060[(v8 - 1)]))();
}

void sub_10003E1D0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = &dword_100000004;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_10003E39C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = type metadata accessor for SizeRestrictingModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  swift_getWitnessTable(&protocol conformance descriptor for SizeRestrictingModifier<A>, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
}

uint64_t sub_10003E414(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _HiddenModifier);
  v5 = type metadata accessor for SizeRestrictingModifier(255, v1, v2, v4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SizeRestrictingModifier<A>, v5);
  v7 = type metadata accessor for _ViewModifier_Content(255, v5, WitnessTable);
  v8 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v7);
  v9 = type metadata accessor for _OverlayModifier(255, v7, v8);
  v10 = type metadata accessor for ModifiedContent(255, v3, v9);
  sub_10003DDAC();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
  swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v9);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
}

uint64_t sub_10003E510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

_QWORD *sub_10003E540(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id *v49;
  int v50;
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  _OWORD *v159;
  _OWORD *v160;
  __int128 v161;
  char *__dst;
  void *__dsta;
  _QWORD *v165;
  _QWORD *v166;
  unsigned int (*v168)(char *, uint64_t, uint64_t);
  int *v169;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v10 = a2[6];
    v9 = a2[7];
    a1[6] = v10;
    a1[7] = v9;
    v12 = a2[8];
    v11 = a2[9];
    a1[8] = v12;
    a1[9] = v11;
    v13 = a2[10];
    a1[10] = v13;
    v169 = (int *)type metadata accessor for UpNextEntry.Episode(0);
    v14 = v169[10];
    __dst = (char *)a1 + v14;
    v165 = a1;
    v166 = a2;
    v15 = (char *)a2 + v14;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_retain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v168 = v18;
    if (v18(v15, 1, v16))
    {
      v19 = sub_100005150(&qword_100081028);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v22 = v169[11];
    v21 = v165;
    v23 = (_QWORD *)((char *)v165 + v22);
    v24 = (_QWORD *)((char *)v166 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v169[12];
    v27 = (_QWORD *)((char *)v165 + v26);
    v28 = (_QWORD *)((char *)v166 + v26);
    v29 = (int *)type metadata accessor for ArtworkModel(0);
    v30 = *((_QWORD *)v29 - 1);
    v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
    swift_bridgeObjectRetain(v25);
    if (v31(v28, 1, v29))
    {
      v32 = sub_100005150(&qword_100081030);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      __dsta = (void *)v16;
      v33 = v28[1];
      *v27 = *v28;
      v27[1] = v33;
      v34 = *((unsigned __int8 *)v28 + 32);
      swift_bridgeObjectRetain(v33);
      if (v34 == 255)
      {
        *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
        *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
      }
      else
      {
        v35 = v28[2];
        v36 = v28[3];
        sub_100005190(v35, v36, v34);
        v27[2] = v35;
        v27[3] = v36;
        *((_BYTE *)v27 + 32) = v34;
      }
      *(_OWORD *)(v27 + 5) = *(_OWORD *)(v28 + 5);
      v37 = (id *)(v28 + 7);
      v38 = *((unsigned __int8 *)v28 + 64);
      if (v38 == 255)
      {
        v27[7] = *v37;
        *((_BYTE *)v27 + 64) = *((_BYTE *)v28 + 64);
      }
      else
      {
        v39 = *v37;
        sub_1000051A8(*v37, *((_BYTE *)v28 + 64));
        v27[7] = v39;
        *((_BYTE *)v27 + 64) = v38;
      }
      v40 = (id *)(v28 + 9);
      v41 = *((unsigned __int8 *)v28 + 80);
      if (v41 == 255)
      {
        v27[9] = *v40;
        *((_BYTE *)v27 + 80) = *((_BYTE *)v28 + 80);
      }
      else
      {
        v42 = *v40;
        sub_1000051A8(*v40, *((_BYTE *)v28 + 80));
        v27[9] = v42;
        *((_BYTE *)v27 + 80) = v41;
      }
      v43 = (id *)(v28 + 11);
      v44 = *((unsigned __int8 *)v28 + 96);
      if (v44 == 255)
      {
        v27[11] = *v43;
        *((_BYTE *)v27 + 96) = *((_BYTE *)v28 + 96);
      }
      else
      {
        v45 = *v43;
        sub_1000051A8(*v43, *((_BYTE *)v28 + 96));
        v27[11] = v45;
        *((_BYTE *)v27 + 96) = v44;
      }
      v46 = (id *)(v28 + 13);
      v47 = *((unsigned __int8 *)v28 + 112);
      if (v47 == 255)
      {
        v27[13] = *v46;
        *((_BYTE *)v27 + 112) = *((_BYTE *)v28 + 112);
      }
      else
      {
        v48 = *v46;
        sub_1000051A8(*v46, *((_BYTE *)v28 + 112));
        v27[13] = v48;
        *((_BYTE *)v27 + 112) = v47;
      }
      v49 = (id *)(v28 + 15);
      v50 = *((unsigned __int8 *)v28 + 128);
      if (v50 == 255)
      {
        v27[15] = *v49;
        *((_BYTE *)v27 + 128) = *((_BYTE *)v28 + 128);
      }
      else
      {
        v51 = *v49;
        sub_1000051A8(*v49, *((_BYTE *)v28 + 128));
        v27[15] = v51;
        *((_BYTE *)v27 + 128) = v50;
      }
      v16 = (uint64_t)__dsta;
      *((_BYTE *)v27 + 129) = *((_BYTE *)v28 + 129);
      v52 = v29[11];
      v53 = (char *)v27 + v52;
      v54 = (char *)v28 + v52;
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      v56 = v29[12];
      v57 = (_QWORD *)((char *)v27 + v56);
      v58 = (_QWORD *)((char *)v28 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
      *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
      *((_BYTE *)v27 + v29[15]) = *((_BYTE *)v28 + v29[15]);
      v60 = v29[16];
      v61 = (_QWORD *)((char *)v27 + v60);
      v62 = (_QWORD *)((char *)v28 + v60);
      v63 = v62[1];
      *v61 = *v62;
      v61[1] = v63;
      v64 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      v64(v27, 0, 1, v29);
    }
    v65 = v169[13];
    v66 = (_QWORD *)((char *)v165 + v65);
    v67 = (_QWORD *)((char *)v166 + v65);
    if (v31((_QWORD *)((char *)v166 + v65), 1, v29))
    {
      v68 = sub_100005150(&qword_100081030);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = v16;
      v70 = v67[1];
      *v66 = *v67;
      v66[1] = v70;
      v71 = *((unsigned __int8 *)v67 + 32);
      swift_bridgeObjectRetain(v70);
      if (v71 == 255)
      {
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        *((_BYTE *)v66 + 32) = *((_BYTE *)v67 + 32);
      }
      else
      {
        v72 = v67[2];
        v73 = v67[3];
        sub_100005190(v72, v73, v71);
        v66[2] = v72;
        v66[3] = v73;
        *((_BYTE *)v66 + 32) = v71;
      }
      *(_OWORD *)(v66 + 5) = *(_OWORD *)(v67 + 5);
      v74 = (id *)(v67 + 7);
      v75 = *((unsigned __int8 *)v67 + 64);
      if (v75 == 255)
      {
        v66[7] = *v74;
        *((_BYTE *)v66 + 64) = *((_BYTE *)v67 + 64);
      }
      else
      {
        v76 = *v74;
        sub_1000051A8(*v74, *((_BYTE *)v67 + 64));
        v66[7] = v76;
        *((_BYTE *)v66 + 64) = v75;
      }
      v77 = (id *)(v67 + 9);
      v78 = *((unsigned __int8 *)v67 + 80);
      if (v78 == 255)
      {
        v66[9] = *v77;
        *((_BYTE *)v66 + 80) = *((_BYTE *)v67 + 80);
      }
      else
      {
        v79 = *v77;
        sub_1000051A8(*v77, *((_BYTE *)v67 + 80));
        v66[9] = v79;
        *((_BYTE *)v66 + 80) = v78;
      }
      v80 = (id *)(v67 + 11);
      v81 = *((unsigned __int8 *)v67 + 96);
      if (v81 == 255)
      {
        v66[11] = *v80;
        *((_BYTE *)v66 + 96) = *((_BYTE *)v67 + 96);
      }
      else
      {
        v82 = *v80;
        sub_1000051A8(*v80, *((_BYTE *)v67 + 96));
        v66[11] = v82;
        *((_BYTE *)v66 + 96) = v81;
      }
      v83 = (id *)(v67 + 13);
      v84 = *((unsigned __int8 *)v67 + 112);
      if (v84 == 255)
      {
        v66[13] = *v83;
        *((_BYTE *)v66 + 112) = *((_BYTE *)v67 + 112);
      }
      else
      {
        v85 = *v83;
        sub_1000051A8(*v83, *((_BYTE *)v67 + 112));
        v66[13] = v85;
        *((_BYTE *)v66 + 112) = v84;
      }
      v86 = (id *)(v67 + 15);
      v87 = *((unsigned __int8 *)v67 + 128);
      if (v87 == 255)
      {
        v66[15] = *v86;
        *((_BYTE *)v66 + 128) = *((_BYTE *)v67 + 128);
      }
      else
      {
        v88 = *v86;
        sub_1000051A8(*v86, *((_BYTE *)v67 + 128));
        v66[15] = v88;
        *((_BYTE *)v66 + 128) = v87;
      }
      v16 = v69;
      *((_BYTE *)v66 + 129) = *((_BYTE *)v67 + 129);
      v89 = v29[11];
      v90 = (char *)v66 + v89;
      v91 = (char *)v67 + v89;
      v92 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = v29[12];
      v94 = (_QWORD *)((char *)v66 + v93);
      v95 = (_QWORD *)((char *)v67 + v93);
      v96 = v95[1];
      *v94 = *v95;
      v94[1] = v96;
      *((_BYTE *)v66 + v29[13]) = *((_BYTE *)v67 + v29[13]);
      *((_BYTE *)v66 + v29[14]) = *((_BYTE *)v67 + v29[14]);
      *((_BYTE *)v66 + v29[15]) = *((_BYTE *)v67 + v29[15]);
      v97 = v29[16];
      v98 = (_QWORD *)((char *)v66 + v97);
      v99 = (_QWORD *)((char *)v67 + v97);
      v100 = v99[1];
      *v98 = *v99;
      v98[1] = v100;
      v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v100);
      v101(v66, 0, 1, v29);
    }
    v102 = v169[14];
    v103 = *(void **)((char *)v166 + v102);
    *(_QWORD *)((char *)v165 + v102) = v103;
    v104 = v169[15];
    v105 = (char *)v165 + v104;
    v106 = (char *)v166 + v104;
    v107 = type metadata accessor for URL(0);
    v108 = *(_QWORD *)(v107 - 8);
    v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
    v110 = v103;
    if (v109(v106, 1, v107))
    {
      v111 = sub_100005150(&qword_100081038);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    *((_BYTE *)v165 + v169[16]) = *((_BYTE *)v166 + v169[16]);
    v112 = v169[17];
    v113 = (char *)v165 + v112;
    v114 = (char *)v166 + v112;
    *(_QWORD *)v113 = *(_QWORD *)v114;
    v113[8] = v114[8];
    v115 = v169[18];
    v116 = (char *)v165 + v115;
    v117 = (char *)v166 + v115;
    *(_QWORD *)v116 = *(_QWORD *)v117;
    v116[8] = v117[8];
    v118 = v169[19];
    v119 = (char *)v165 + v118;
    v120 = (char *)v166 + v118;
    if (v168((char *)v166 + v118, 1, v16))
    {
      v121 = sub_100005150(&qword_100081028);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v119, v120, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v119, 0, 1, v16);
    }
    v122 = v169[20];
    v123 = (char *)v165 + v122;
    v124 = (char *)v166 + v122;
    if (v168((char *)v166 + v122, 1, v16))
    {
      v125 = sub_100005150(&qword_100081028);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v123, v124, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v123, 0, 1, v16);
    }
    v126 = v169[21];
    v127 = (_QWORD *)((char *)v165 + v126);
    v128 = (_QWORD *)((char *)v166 + v126);
    v129 = *v128;
    if (*v128)
    {
      v130 = v128[1];
      v131 = v128[2];
      *v127 = v129;
      v127[1] = v130;
      v127[2] = v131;
      swift_retain(v129);
      swift_retain(v130);
      swift_retain(v131);
    }
    else
    {
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v127[2] = v128[2];
    }
    v132 = v169[22];
    v133 = (char *)v165 + v132;
    v134 = (char *)v166 + v132;
    v135 = sub_100005150(&qword_100081040);
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_100005150(&qword_100081048);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v138(v133, v134, v16);
      v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    v140 = v139[5];
    v141 = &v133[v140];
    v142 = &v134[v140];
    v143 = type metadata accessor for PlaybackButton.State(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
    v144 = v139[6];
    v145 = &v133[v144];
    v146 = &v134[v144];
    v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
    {
      v149 = sub_100005150(&qword_100081050);
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
    }
    v150 = v139[7];
    v151 = &v133[v150];
    v152 = &v134[v150];
    v153 = *((_QWORD *)v152 + 1);
    *(_QWORD *)v151 = *(_QWORD *)v152;
    *((_QWORD *)v151 + 1) = v153;
    v154 = v139[8];
    v155 = &v133[v154];
    v156 = &v134[v154];
    v157 = *((_QWORD *)v156 + 1);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v157;
    v158 = *(int *)(a3 + 24);
    *((_BYTE *)v165 + *(int *)(a3 + 20)) = *((_BYTE *)v166 + *(int *)(a3 + 20));
    v159 = (_OWORD *)((char *)v165 + v158);
    v160 = (_OWORD *)((char *)v166 + v158);
    v161 = v160[1];
    *v159 = *v160;
    v159[1] = v161;
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v157);
  }
  return v21;
}

_QWORD *sub_10003EFC8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(_QWORD *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  id *v34;
  int v35;
  id v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  id *v71;
  int v72;
  id v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void (*v98)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v99;
  void *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(char *, uint64_t, uint64_t);
  id v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD *v156;
  _OWORD *v157;
  __int128 v158;
  char *__dst;
  void *__dsta;
  _QWORD *v162;
  _QWORD *v163;
  int *v165;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v9 = a2[6];
  v8 = a2[7];
  a1[6] = v9;
  a1[7] = v8;
  v11 = a2[8];
  v10 = a2[9];
  a1[8] = v11;
  a1[9] = v10;
  v12 = a2[10];
  a1[10] = v12;
  v165 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v13 = v165[10];
  __dst = (char *)a1 + v13;
  v162 = a1;
  v163 = a2;
  v14 = (char *)a2 + v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  if (v17(v14, 1, v15))
  {
    v18 = sub_100005150(&qword_100081028);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = v165[11];
  v20 = (_QWORD *)((char *)v162 + v19);
  v21 = (_QWORD *)((char *)v163 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v165[12];
  v24 = (_QWORD *)((char *)v162 + v23);
  v25 = (_QWORD *)((char *)v163 + v23);
  v26 = (int *)type metadata accessor for ArtworkModel(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48);
  swift_bridgeObjectRetain(v22);
  if (v28(v25, 1, v26))
  {
    v29 = sub_100005150(&qword_100081030);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    __dsta = (void *)v15;
    v30 = v25[1];
    *v24 = *v25;
    v24[1] = v30;
    v31 = *((unsigned __int8 *)v25 + 32);
    swift_bridgeObjectRetain(v30);
    if (v31 == 255)
    {
      *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
      *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
    }
    else
    {
      v32 = v25[2];
      v33 = v25[3];
      sub_100005190(v32, v33, v31);
      v24[2] = v32;
      v24[3] = v33;
      *((_BYTE *)v24 + 32) = v31;
    }
    *(_OWORD *)(v24 + 5) = *(_OWORD *)(v25 + 5);
    v34 = (id *)(v25 + 7);
    v35 = *((unsigned __int8 *)v25 + 64);
    if (v35 == 255)
    {
      v24[7] = *v34;
      *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
    }
    else
    {
      v36 = *v34;
      sub_1000051A8(*v34, *((_BYTE *)v25 + 64));
      v24[7] = v36;
      *((_BYTE *)v24 + 64) = v35;
    }
    v37 = (id *)(v25 + 9);
    v38 = *((unsigned __int8 *)v25 + 80);
    if (v38 == 255)
    {
      v24[9] = *v37;
      *((_BYTE *)v24 + 80) = *((_BYTE *)v25 + 80);
    }
    else
    {
      v39 = *v37;
      sub_1000051A8(*v37, *((_BYTE *)v25 + 80));
      v24[9] = v39;
      *((_BYTE *)v24 + 80) = v38;
    }
    v40 = (id *)(v25 + 11);
    v41 = *((unsigned __int8 *)v25 + 96);
    if (v41 == 255)
    {
      v24[11] = *v40;
      *((_BYTE *)v24 + 96) = *((_BYTE *)v25 + 96);
    }
    else
    {
      v42 = *v40;
      sub_1000051A8(*v40, *((_BYTE *)v25 + 96));
      v24[11] = v42;
      *((_BYTE *)v24 + 96) = v41;
    }
    v43 = (id *)(v25 + 13);
    v44 = *((unsigned __int8 *)v25 + 112);
    if (v44 == 255)
    {
      v24[13] = *v43;
      *((_BYTE *)v24 + 112) = *((_BYTE *)v25 + 112);
    }
    else
    {
      v45 = *v43;
      sub_1000051A8(*v43, *((_BYTE *)v25 + 112));
      v24[13] = v45;
      *((_BYTE *)v24 + 112) = v44;
    }
    v46 = (id *)(v25 + 15);
    v47 = *((unsigned __int8 *)v25 + 128);
    if (v47 == 255)
    {
      v24[15] = *v46;
      *((_BYTE *)v24 + 128) = *((_BYTE *)v25 + 128);
    }
    else
    {
      v48 = *v46;
      sub_1000051A8(*v46, *((_BYTE *)v25 + 128));
      v24[15] = v48;
      *((_BYTE *)v24 + 128) = v47;
    }
    v15 = (uint64_t)__dsta;
    *((_BYTE *)v24 + 129) = *((_BYTE *)v25 + 129);
    v49 = v26[11];
    v50 = (char *)v24 + v49;
    v51 = (char *)v25 + v49;
    v52 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
    v53 = v26[12];
    v54 = (_QWORD *)((char *)v24 + v53);
    v55 = (_QWORD *)((char *)v25 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    *((_BYTE *)v24 + v26[13]) = *((_BYTE *)v25 + v26[13]);
    *((_BYTE *)v24 + v26[14]) = *((_BYTE *)v25 + v26[14]);
    *((_BYTE *)v24 + v26[15]) = *((_BYTE *)v25 + v26[15]);
    v57 = v26[16];
    v58 = (_QWORD *)((char *)v24 + v57);
    v59 = (_QWORD *)((char *)v25 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v60);
    v61(v24, 0, 1, v26);
  }
  v62 = v165[13];
  v63 = (_QWORD *)((char *)v162 + v62);
  v64 = (_QWORD *)((char *)v163 + v62);
  if (v28((_QWORD *)((char *)v163 + v62), 1, v26))
  {
    v65 = sub_100005150(&qword_100081030);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    v66 = v15;
    v67 = v64[1];
    *v63 = *v64;
    v63[1] = v67;
    v68 = *((unsigned __int8 *)v64 + 32);
    swift_bridgeObjectRetain(v67);
    if (v68 == 255)
    {
      *((_OWORD *)v63 + 1) = *((_OWORD *)v64 + 1);
      *((_BYTE *)v63 + 32) = *((_BYTE *)v64 + 32);
    }
    else
    {
      v69 = v64[2];
      v70 = v64[3];
      sub_100005190(v69, v70, v68);
      v63[2] = v69;
      v63[3] = v70;
      *((_BYTE *)v63 + 32) = v68;
    }
    *(_OWORD *)(v63 + 5) = *(_OWORD *)(v64 + 5);
    v71 = (id *)(v64 + 7);
    v72 = *((unsigned __int8 *)v64 + 64);
    if (v72 == 255)
    {
      v63[7] = *v71;
      *((_BYTE *)v63 + 64) = *((_BYTE *)v64 + 64);
    }
    else
    {
      v73 = *v71;
      sub_1000051A8(*v71, *((_BYTE *)v64 + 64));
      v63[7] = v73;
      *((_BYTE *)v63 + 64) = v72;
    }
    v74 = (id *)(v64 + 9);
    v75 = *((unsigned __int8 *)v64 + 80);
    if (v75 == 255)
    {
      v63[9] = *v74;
      *((_BYTE *)v63 + 80) = *((_BYTE *)v64 + 80);
    }
    else
    {
      v76 = *v74;
      sub_1000051A8(*v74, *((_BYTE *)v64 + 80));
      v63[9] = v76;
      *((_BYTE *)v63 + 80) = v75;
    }
    v77 = (id *)(v64 + 11);
    v78 = *((unsigned __int8 *)v64 + 96);
    if (v78 == 255)
    {
      v63[11] = *v77;
      *((_BYTE *)v63 + 96) = *((_BYTE *)v64 + 96);
    }
    else
    {
      v79 = *v77;
      sub_1000051A8(*v77, *((_BYTE *)v64 + 96));
      v63[11] = v79;
      *((_BYTE *)v63 + 96) = v78;
    }
    v80 = (id *)(v64 + 13);
    v81 = *((unsigned __int8 *)v64 + 112);
    if (v81 == 255)
    {
      v63[13] = *v80;
      *((_BYTE *)v63 + 112) = *((_BYTE *)v64 + 112);
    }
    else
    {
      v82 = *v80;
      sub_1000051A8(*v80, *((_BYTE *)v64 + 112));
      v63[13] = v82;
      *((_BYTE *)v63 + 112) = v81;
    }
    v83 = (id *)(v64 + 15);
    v84 = *((unsigned __int8 *)v64 + 128);
    if (v84 == 255)
    {
      v63[15] = *v83;
      *((_BYTE *)v63 + 128) = *((_BYTE *)v64 + 128);
    }
    else
    {
      v85 = *v83;
      sub_1000051A8(*v83, *((_BYTE *)v64 + 128));
      v63[15] = v85;
      *((_BYTE *)v63 + 128) = v84;
    }
    v15 = v66;
    *((_BYTE *)v63 + 129) = *((_BYTE *)v64 + 129);
    v86 = v26[11];
    v87 = (char *)v63 + v86;
    v88 = (char *)v64 + v86;
    v89 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
    v90 = v26[12];
    v91 = (_QWORD *)((char *)v63 + v90);
    v92 = (_QWORD *)((char *)v64 + v90);
    v93 = v92[1];
    *v91 = *v92;
    v91[1] = v93;
    *((_BYTE *)v63 + v26[13]) = *((_BYTE *)v64 + v26[13]);
    *((_BYTE *)v63 + v26[14]) = *((_BYTE *)v64 + v26[14]);
    *((_BYTE *)v63 + v26[15]) = *((_BYTE *)v64 + v26[15]);
    v94 = v26[16];
    v95 = (_QWORD *)((char *)v63 + v94);
    v96 = (_QWORD *)((char *)v64 + v94);
    v97 = v96[1];
    *v95 = *v96;
    v95[1] = v97;
    v98 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v97);
    v98(v63, 0, 1, v26);
  }
  v99 = v165[14];
  v100 = *(void **)((char *)v163 + v99);
  *(_QWORD *)((char *)v162 + v99) = v100;
  v101 = v165[15];
  v102 = (char *)v162 + v101;
  v103 = (char *)v163 + v101;
  v104 = type metadata accessor for URL(0);
  v105 = *(_QWORD *)(v104 - 8);
  v106 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v107 = v100;
  if (v106(v103, 1, v104))
  {
    v108 = sub_100005150(&qword_100081038);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v102, v103, v104);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
  }
  *((_BYTE *)v162 + v165[16]) = *((_BYTE *)v163 + v165[16]);
  v109 = v165[17];
  v110 = (char *)v162 + v109;
  v111 = (char *)v163 + v109;
  *(_QWORD *)v110 = *(_QWORD *)v111;
  v110[8] = v111[8];
  v112 = v165[18];
  v113 = (char *)v162 + v112;
  v114 = (char *)v163 + v112;
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v113[8] = v114[8];
  v115 = v165[19];
  v116 = (char *)v162 + v115;
  v117 = (char *)v163 + v115;
  if (v17((char *)v163 + v115, 1, v15))
  {
    v118 = sub_100005150(&qword_100081028);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v116, v117, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v116, 0, 1, v15);
  }
  v119 = v165[20];
  v120 = (char *)v162 + v119;
  v121 = (char *)v163 + v119;
  if (v17((char *)v163 + v119, 1, v15))
  {
    v122 = sub_100005150(&qword_100081028);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v120, v121, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v120, 0, 1, v15);
  }
  v123 = v165[21];
  v124 = (_QWORD *)((char *)v162 + v123);
  v125 = (_QWORD *)((char *)v163 + v123);
  v126 = *v125;
  if (*v125)
  {
    v127 = v125[1];
    v128 = v125[2];
    *v124 = v126;
    v124[1] = v127;
    v124[2] = v128;
    swift_retain(v126);
    swift_retain(v127);
    swift_retain(v128);
  }
  else
  {
    *(_OWORD *)v124 = *(_OWORD *)v125;
    v124[2] = v125[2];
  }
  v129 = v165[22];
  v130 = (char *)v162 + v129;
  v131 = (char *)v163 + v129;
  v132 = sub_100005150(&qword_100081040);
  v133 = *(_QWORD *)(v132 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
  {
    v134 = sub_100005150(&qword_100081048);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
  }
  else
  {
    v135 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v135(v130, v131, v15);
    v135(&v130[*(int *)(v132 + 36)], &v131[*(int *)(v132 + 36)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
  }
  v136 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v137 = v136[5];
  v138 = &v130[v137];
  v139 = &v131[v137];
  v140 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
  v141 = v136[6];
  v142 = &v130[v141];
  v143 = &v131[v141];
  v144 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v145 = *(_QWORD *)(v144 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
  {
    v146 = sub_100005150(&qword_100081050);
    memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v142, v143, v144);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
  }
  v147 = v136[7];
  v148 = &v130[v147];
  v149 = &v131[v147];
  v150 = *((_QWORD *)v149 + 1);
  *(_QWORD *)v148 = *(_QWORD *)v149;
  *((_QWORD *)v148 + 1) = v150;
  v151 = v136[8];
  v152 = &v130[v151];
  v153 = &v131[v151];
  v154 = *((_QWORD *)v153 + 1);
  *(_QWORD *)v152 = *(_QWORD *)v153;
  *((_QWORD *)v152 + 1) = v154;
  v155 = *(int *)(a3 + 24);
  *((_BYTE *)v162 + *(int *)(a3 + 20)) = *((_BYTE *)v163 + *(int *)(a3 + 20));
  v156 = (_OWORD *)((char *)v162 + v155);
  v157 = (_OWORD *)((char *)v163 + v155);
  v158 = v157[1];
  *v156 = *v157;
  v156[1] = v158;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRetain(v154);
  return v162;
}

_QWORD *sub_10003FA24(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  __int128 v55;
  id *v56;
  int v57;
  id v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id v67;
  id *v68;
  int v69;
  id v70;
  id v71;
  id *v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  void **v93;
  void **v94;
  int v95;
  void *v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  void **v102;
  void **v103;
  int v104;
  void *v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  void **v111;
  void **v112;
  int v113;
  void *v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  void *v119;
  void **v120;
  void **v121;
  int v122;
  void *v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  void **v129;
  void **v130;
  int v131;
  void *v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  __int128 *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  __int128 v174;
  id *v175;
  int v176;
  id v177;
  id v178;
  id *v179;
  int v180;
  id v181;
  id v182;
  id *v183;
  int v184;
  id v185;
  id v186;
  id *v187;
  int v188;
  id v189;
  id v190;
  id *v191;
  int v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v208;
  uint64_t v209;
  char v210;
  __int128 v211;
  void **v212;
  void **v213;
  int v214;
  void *v215;
  void *v216;
  char v217;
  void *v218;
  char v219;
  void *v220;
  void **v221;
  void **v222;
  int v223;
  void *v224;
  void *v225;
  char v226;
  void *v227;
  char v228;
  void *v229;
  void **v230;
  void **v231;
  int v232;
  void *v233;
  void *v234;
  char v235;
  void *v236;
  char v237;
  void *v238;
  void **v239;
  void **v240;
  int v241;
  void *v242;
  void *v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  void **v248;
  void **v249;
  int v250;
  void *v251;
  void *v252;
  char v253;
  void *v254;
  char v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  id v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (*v280)(char *, uint64_t, uint64_t);
  int v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (*v321)(char *, uint64_t, uint64_t);
  int v322;
  int v323;
  void (*v324)(char *, char *, uint64_t);
  uint64_t v325;
  int *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t (*v336)(char *, uint64_t, uint64_t);
  int v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  void (*v353)(char *, char *, uint64_t);
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t (*v357)(char *, uint64_t, uint64_t);
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[9] = a2[9];
  v16 = a2[10];
  v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v19 = v18[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v357 = v24;
  v26 = v24(v21, 1, v22);
  v358 = v23;
  v359 = a3;
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100005150(&qword_100081028);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v28 = v18[11];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v18[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v356 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v356 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      v354 = v22;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v40 = *((_QWORD *)v35 + 1);
      *(_QWORD *)(v34 + 8) = v40;
      v41 = v35[32];
      swift_bridgeObjectRetain(v40);
      if (v41 == 255)
      {
        v55 = *((_OWORD *)v35 + 1);
        *(_BYTE *)(v34 + 32) = v35[32];
        *(_OWORD *)(v34 + 16) = v55;
      }
      else
      {
        v42 = *((_QWORD *)v35 + 2);
        v43 = *((_QWORD *)v35 + 3);
        sub_100005190(v42, v43, v41);
        *(_QWORD *)(v34 + 16) = v42;
        *(_QWORD *)(v34 + 24) = v43;
        *(_BYTE *)(v34 + 32) = v41;
      }
      *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
      *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
      v56 = (id *)(v35 + 56);
      v57 = v35[64];
      if (v57 == 255)
      {
        v59 = *v56;
        *(_BYTE *)(v34 + 64) = v35[64];
        *(_QWORD *)(v34 + 56) = v59;
      }
      else
      {
        v58 = *v56;
        sub_1000051A8(*v56, v35[64]);
        *(_QWORD *)(v34 + 56) = v58;
        *(_BYTE *)(v34 + 64) = v57;
      }
      v22 = v354;
      v60 = (id *)(v35 + 72);
      v61 = v35[80];
      if (v61 == 255)
      {
        v63 = *v60;
        *(_BYTE *)(v34 + 80) = v35[80];
        *(_QWORD *)(v34 + 72) = v63;
      }
      else
      {
        v62 = *v60;
        sub_1000051A8(*v60, v35[80]);
        *(_QWORD *)(v34 + 72) = v62;
        *(_BYTE *)(v34 + 80) = v61;
      }
      v64 = (id *)(v35 + 88);
      v65 = v35[96];
      if (v65 == 255)
      {
        v67 = *v64;
        *(_BYTE *)(v34 + 96) = v35[96];
        *(_QWORD *)(v34 + 88) = v67;
      }
      else
      {
        v66 = *v64;
        sub_1000051A8(*v64, v35[96]);
        *(_QWORD *)(v34 + 88) = v66;
        *(_BYTE *)(v34 + 96) = v65;
      }
      v68 = (id *)(v35 + 104);
      v69 = v35[112];
      if (v69 == 255)
      {
        v71 = *v68;
        *(_BYTE *)(v34 + 112) = v35[112];
        *(_QWORD *)(v34 + 104) = v71;
      }
      else
      {
        v70 = *v68;
        sub_1000051A8(*v68, v35[112]);
        *(_QWORD *)(v34 + 104) = v70;
        *(_BYTE *)(v34 + 112) = v69;
      }
      v72 = (id *)(v35 + 120);
      v73 = v35[128];
      if (v73 == 255)
      {
        v75 = *v72;
        *(_BYTE *)(v34 + 128) = v35[128];
        *(_QWORD *)(v34 + 120) = v75;
      }
      else
      {
        v74 = *v72;
        sub_1000051A8(*v72, v35[128]);
        *(_QWORD *)(v34 + 120) = v74;
        *(_BYTE *)(v34 + 128) = v73;
      }
      *(_BYTE *)(v34 + 129) = v35[129];
      v76 = v36[11];
      v77 = v34 + v76;
      v78 = &v35[v76];
      v79 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v80 = v36[12];
      v81 = (_QWORD *)(v34 + v80);
      v82 = &v35[v80];
      *v81 = *(_QWORD *)v82;
      v83 = *((_QWORD *)v82 + 1);
      v81[1] = v83;
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      v84 = v36[16];
      v85 = (_QWORD *)(v34 + v84);
      v86 = &v35[v84];
      *v85 = *(_QWORD *)v86;
      v87 = *((_QWORD *)v86 + 1);
      v85[1] = v87;
      v88 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v356 + 56);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v88(v34, 0, 1, v36);
      goto LABEL_75;
    }
LABEL_13:
    v44 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_75;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_13;
  }
  v355 = v22;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v45 = *((_QWORD *)v35 + 1);
  v46 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = (__int128 *)(v34 + 16);
  v48 = (__int128 *)(v35 + 16);
  v49 = v35[32];
  if (*(unsigned __int8 *)(v34 + 32) == 255)
  {
    if (v49 == 255)
    {
      v92 = *v48;
      *(_BYTE *)(v34 + 32) = v35[32];
      *v47 = v92;
    }
    else
    {
      v89 = *((_QWORD *)v35 + 2);
      v90 = *((_QWORD *)v35 + 3);
      sub_100005190(v89, v90, v35[32]);
      *(_QWORD *)(v34 + 16) = v89;
      *(_QWORD *)(v34 + 24) = v90;
      *(_BYTE *)(v34 + 32) = v49;
    }
  }
  else if (v49 == 255)
  {
    sub_100007770(v34 + 16);
    v91 = v35[32];
    *v47 = *v48;
    *(_BYTE *)(v34 + 32) = v91;
  }
  else
  {
    v51 = *((_QWORD *)v35 + 2);
    v50 = *((_QWORD *)v35 + 3);
    sub_100005190(v51, v50, v35[32]);
    v52 = *(_QWORD *)(v34 + 16);
    v53 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 16) = v51;
    *(_QWORD *)(v34 + 24) = v50;
    v54 = *(_BYTE *)(v34 + 32);
    *(_BYTE *)(v34 + 32) = v49;
    sub_100005624(v52, v53, v54);
  }
  *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
  *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
  v93 = (void **)(v34 + 56);
  v94 = (void **)(v35 + 56);
  v95 = v35[64];
  if (*(unsigned __int8 *)(v34 + 64) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(v34 + 64) = v35[64];
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_1000051A8(v99, v35[64]);
      *(_QWORD *)(v34 + 56) = v99;
      *(_BYTE *)(v34 + 64) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_1000077A4(v34 + 56);
    v100 = v35[64];
    *v93 = *v94;
    *(_BYTE *)(v34 + 64) = v100;
  }
  else
  {
    v96 = *v94;
    sub_1000051A8(v96, v35[64]);
    v97 = *(void **)(v34 + 56);
    *(_QWORD *)(v34 + 56) = v96;
    v98 = *(_BYTE *)(v34 + 64);
    *(_BYTE *)(v34 + 64) = v95;
    sub_10000563C(v97, v98);
  }
  v102 = (void **)(v34 + 72);
  v103 = (void **)(v35 + 72);
  v104 = v35[80];
  if (*(unsigned __int8 *)(v34 + 80) == 255)
  {
    if (v104 == 255)
    {
      v110 = *v103;
      *(_BYTE *)(v34 + 80) = v35[80];
      *v102 = v110;
    }
    else
    {
      v108 = *v103;
      sub_1000051A8(v108, v35[80]);
      *(_QWORD *)(v34 + 72) = v108;
      *(_BYTE *)(v34 + 80) = v104;
    }
  }
  else if (v104 == 255)
  {
    sub_1000077A4(v34 + 72);
    v109 = v35[80];
    *v102 = *v103;
    *(_BYTE *)(v34 + 80) = v109;
  }
  else
  {
    v105 = *v103;
    sub_1000051A8(v105, v35[80]);
    v106 = *(void **)(v34 + 72);
    *(_QWORD *)(v34 + 72) = v105;
    v107 = *(_BYTE *)(v34 + 80);
    *(_BYTE *)(v34 + 80) = v104;
    sub_10000563C(v106, v107);
  }
  v111 = (void **)(v34 + 88);
  v112 = (void **)(v35 + 88);
  v113 = v35[96];
  if (*(unsigned __int8 *)(v34 + 96) == 255)
  {
    if (v113 == 255)
    {
      v119 = *v112;
      *(_BYTE *)(v34 + 96) = v35[96];
      *v111 = v119;
    }
    else
    {
      v117 = *v112;
      sub_1000051A8(v117, v35[96]);
      *(_QWORD *)(v34 + 88) = v117;
      *(_BYTE *)(v34 + 96) = v113;
    }
  }
  else if (v113 == 255)
  {
    sub_1000077A4(v34 + 88);
    v118 = v35[96];
    *v111 = *v112;
    *(_BYTE *)(v34 + 96) = v118;
  }
  else
  {
    v114 = *v112;
    sub_1000051A8(v114, v35[96]);
    v115 = *(void **)(v34 + 88);
    *(_QWORD *)(v34 + 88) = v114;
    v116 = *(_BYTE *)(v34 + 96);
    *(_BYTE *)(v34 + 96) = v113;
    sub_10000563C(v115, v116);
  }
  v120 = (void **)(v34 + 104);
  v121 = (void **)(v35 + 104);
  v122 = v35[112];
  if (*(unsigned __int8 *)(v34 + 112) == 255)
  {
    if (v122 == 255)
    {
      v128 = *v121;
      *(_BYTE *)(v34 + 112) = v35[112];
      *v120 = v128;
    }
    else
    {
      v126 = *v121;
      sub_1000051A8(v126, v35[112]);
      *(_QWORD *)(v34 + 104) = v126;
      *(_BYTE *)(v34 + 112) = v122;
    }
  }
  else if (v122 == 255)
  {
    sub_1000077A4(v34 + 104);
    v127 = v35[112];
    *v120 = *v121;
    *(_BYTE *)(v34 + 112) = v127;
  }
  else
  {
    v123 = *v121;
    sub_1000051A8(v123, v35[112]);
    v124 = *(void **)(v34 + 104);
    *(_QWORD *)(v34 + 104) = v123;
    v125 = *(_BYTE *)(v34 + 112);
    *(_BYTE *)(v34 + 112) = v122;
    sub_10000563C(v124, v125);
  }
  v129 = (void **)(v34 + 120);
  v130 = (void **)(v35 + 120);
  v131 = v35[128];
  if (*(unsigned __int8 *)(v34 + 128) == 255)
  {
    if (v131 == 255)
    {
      v137 = *v130;
      *(_BYTE *)(v34 + 128) = v35[128];
      *v129 = v137;
    }
    else
    {
      v135 = *v130;
      sub_1000051A8(v135, v35[128]);
      *(_QWORD *)(v34 + 120) = v135;
      *(_BYTE *)(v34 + 128) = v131;
    }
  }
  else if (v131 == 255)
  {
    sub_1000077A4(v34 + 120);
    v136 = v35[128];
    *v129 = *v130;
    *(_BYTE *)(v34 + 128) = v136;
  }
  else
  {
    v132 = *v130;
    sub_1000051A8(v132, v35[128]);
    v133 = *(void **)(v34 + 120);
    *(_QWORD *)(v34 + 120) = v132;
    v134 = *(_BYTE *)(v34 + 128);
    *(_BYTE *)(v34 + 128) = v131;
    sub_10000563C(v133, v134);
  }
  v22 = v355;
  *(_BYTE *)(v34 + 129) = v35[129];
  v138 = v36[11];
  v139 = v34 + v138;
  v140 = &v35[v138];
  v141 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v36[12];
  v143 = (_QWORD *)(v34 + v142);
  v144 = &v35[v142];
  *v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = v143[1];
  v143[1] = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v147 = v36[16];
  v148 = (_QWORD *)(v34 + v147);
  v149 = &v35[v147];
  *v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = v148[1];
  v148[1] = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
LABEL_75:
  v152 = v18[13];
  v153 = (uint64_t)a1 + v152;
  v154 = (char *)a2 + v152;
  v155 = v37((uint64_t)a1 + v152, 1, v36);
  v156 = v37((uint64_t)v154, 1, v36);
  if (v155)
  {
    if (!v156)
    {
      v157 = v22;
      *(_QWORD *)v153 = *(_QWORD *)v154;
      v158 = *((_QWORD *)v154 + 1);
      *(_QWORD *)(v153 + 8) = v158;
      v159 = v154[32];
      swift_bridgeObjectRetain(v158);
      if (v159 == 255)
      {
        v174 = *((_OWORD *)v154 + 1);
        *(_BYTE *)(v153 + 32) = v154[32];
        *(_OWORD *)(v153 + 16) = v174;
      }
      else
      {
        v160 = *((_QWORD *)v154 + 2);
        v161 = *((_QWORD *)v154 + 3);
        sub_100005190(v160, v161, v159);
        *(_QWORD *)(v153 + 16) = v160;
        *(_QWORD *)(v153 + 24) = v161;
        *(_BYTE *)(v153 + 32) = v159;
      }
      *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
      *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
      v175 = (id *)(v154 + 56);
      v176 = v154[64];
      if (v176 == 255)
      {
        v178 = *v175;
        *(_BYTE *)(v153 + 64) = v154[64];
        *(_QWORD *)(v153 + 56) = v178;
      }
      else
      {
        v177 = *v175;
        sub_1000051A8(*v175, v154[64]);
        *(_QWORD *)(v153 + 56) = v177;
        *(_BYTE *)(v153 + 64) = v176;
      }
      v22 = v157;
      v179 = (id *)(v154 + 72);
      v180 = v154[80];
      if (v180 == 255)
      {
        v182 = *v179;
        *(_BYTE *)(v153 + 80) = v154[80];
        *(_QWORD *)(v153 + 72) = v182;
      }
      else
      {
        v181 = *v179;
        sub_1000051A8(*v179, v154[80]);
        *(_QWORD *)(v153 + 72) = v181;
        *(_BYTE *)(v153 + 80) = v180;
      }
      v183 = (id *)(v154 + 88);
      v184 = v154[96];
      if (v184 == 255)
      {
        v186 = *v183;
        *(_BYTE *)(v153 + 96) = v154[96];
        *(_QWORD *)(v153 + 88) = v186;
      }
      else
      {
        v185 = *v183;
        sub_1000051A8(*v183, v154[96]);
        *(_QWORD *)(v153 + 88) = v185;
        *(_BYTE *)(v153 + 96) = v184;
      }
      v187 = (id *)(v154 + 104);
      v188 = v154[112];
      if (v188 == 255)
      {
        v190 = *v187;
        *(_BYTE *)(v153 + 112) = v154[112];
        *(_QWORD *)(v153 + 104) = v190;
      }
      else
      {
        v189 = *v187;
        sub_1000051A8(*v187, v154[112]);
        *(_QWORD *)(v153 + 104) = v189;
        *(_BYTE *)(v153 + 112) = v188;
      }
      v191 = (id *)(v154 + 120);
      v192 = v154[128];
      if (v192 == 255)
      {
        v194 = *v191;
        *(_BYTE *)(v153 + 128) = v154[128];
        *(_QWORD *)(v153 + 120) = v194;
      }
      else
      {
        v193 = *v191;
        sub_1000051A8(*v191, v154[128]);
        *(_QWORD *)(v153 + 120) = v193;
        *(_BYTE *)(v153 + 128) = v192;
      }
      *(_BYTE *)(v153 + 129) = v154[129];
      v195 = v36[11];
      v196 = v153 + v195;
      v197 = &v154[v195];
      v198 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v198 - 8) + 16))(v196, v197, v198);
      v199 = v36[12];
      v200 = (_QWORD *)(v153 + v199);
      v201 = &v154[v199];
      *v200 = *(_QWORD *)v201;
      v202 = *((_QWORD *)v201 + 1);
      v200[1] = v202;
      *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
      *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
      *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
      v203 = v36[16];
      v204 = (_QWORD *)(v153 + v203);
      v205 = &v154[v203];
      *v204 = *(_QWORD *)v205;
      v206 = *((_QWORD *)v205 + 1);
      v204[1] = v206;
      v207 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v356 + 56);
      swift_bridgeObjectRetain(v202);
      swift_bridgeObjectRetain(v206);
      v207(v153, 0, 1, v36);
      goto LABEL_142;
    }
LABEL_81:
    v162 = sub_100005150(&qword_100081030);
    memcpy((void *)v153, v154, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_142;
  }
  if (v156)
  {
    sub_10000EF80(v153, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_81;
  }
  v163 = v22;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  v164 = *((_QWORD *)v154 + 1);
  v165 = *(_QWORD *)(v153 + 8);
  *(_QWORD *)(v153 + 8) = v164;
  swift_bridgeObjectRetain(v164);
  swift_bridgeObjectRelease(v165);
  v166 = (__int128 *)(v153 + 16);
  v167 = (__int128 *)(v154 + 16);
  v168 = v154[32];
  if (*(unsigned __int8 *)(v153 + 32) == 255)
  {
    if (v168 == 255)
    {
      v211 = *v167;
      *(_BYTE *)(v153 + 32) = v154[32];
      *v166 = v211;
    }
    else
    {
      v208 = *((_QWORD *)v154 + 2);
      v209 = *((_QWORD *)v154 + 3);
      sub_100005190(v208, v209, v154[32]);
      *(_QWORD *)(v153 + 16) = v208;
      *(_QWORD *)(v153 + 24) = v209;
      *(_BYTE *)(v153 + 32) = v168;
    }
  }
  else if (v168 == 255)
  {
    sub_100007770(v153 + 16);
    v210 = v154[32];
    *v166 = *v167;
    *(_BYTE *)(v153 + 32) = v210;
  }
  else
  {
    v169 = *((_QWORD *)v154 + 2);
    v170 = *((_QWORD *)v154 + 3);
    sub_100005190(v169, v170, v154[32]);
    v171 = *(_QWORD *)(v153 + 16);
    v172 = *(_QWORD *)(v153 + 24);
    *(_QWORD *)(v153 + 16) = v169;
    *(_QWORD *)(v153 + 24) = v170;
    v173 = *(_BYTE *)(v153 + 32);
    *(_BYTE *)(v153 + 32) = v168;
    sub_100005624(v171, v172, v173);
  }
  *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
  *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
  v212 = (void **)(v153 + 56);
  v213 = (void **)(v154 + 56);
  v214 = v154[64];
  if (*(unsigned __int8 *)(v153 + 64) == 255)
  {
    if (v214 == 255)
    {
      v220 = *v213;
      *(_BYTE *)(v153 + 64) = v154[64];
      *v212 = v220;
    }
    else
    {
      v218 = *v213;
      sub_1000051A8(v218, v154[64]);
      *(_QWORD *)(v153 + 56) = v218;
      *(_BYTE *)(v153 + 64) = v214;
    }
  }
  else if (v214 == 255)
  {
    sub_1000077A4(v153 + 56);
    v219 = v154[64];
    *v212 = *v213;
    *(_BYTE *)(v153 + 64) = v219;
  }
  else
  {
    v215 = *v213;
    sub_1000051A8(v215, v154[64]);
    v216 = *(void **)(v153 + 56);
    *(_QWORD *)(v153 + 56) = v215;
    v217 = *(_BYTE *)(v153 + 64);
    *(_BYTE *)(v153 + 64) = v214;
    sub_10000563C(v216, v217);
  }
  v221 = (void **)(v153 + 72);
  v222 = (void **)(v154 + 72);
  v223 = v154[80];
  if (*(unsigned __int8 *)(v153 + 80) == 255)
  {
    if (v223 == 255)
    {
      v229 = *v222;
      *(_BYTE *)(v153 + 80) = v154[80];
      *v221 = v229;
    }
    else
    {
      v227 = *v222;
      sub_1000051A8(v227, v154[80]);
      *(_QWORD *)(v153 + 72) = v227;
      *(_BYTE *)(v153 + 80) = v223;
    }
  }
  else if (v223 == 255)
  {
    sub_1000077A4(v153 + 72);
    v228 = v154[80];
    *v221 = *v222;
    *(_BYTE *)(v153 + 80) = v228;
  }
  else
  {
    v224 = *v222;
    sub_1000051A8(v224, v154[80]);
    v225 = *(void **)(v153 + 72);
    *(_QWORD *)(v153 + 72) = v224;
    v226 = *(_BYTE *)(v153 + 80);
    *(_BYTE *)(v153 + 80) = v223;
    sub_10000563C(v225, v226);
  }
  v230 = (void **)(v153 + 88);
  v231 = (void **)(v154 + 88);
  v232 = v154[96];
  if (*(unsigned __int8 *)(v153 + 96) == 255)
  {
    if (v232 == 255)
    {
      v238 = *v231;
      *(_BYTE *)(v153 + 96) = v154[96];
      *v230 = v238;
    }
    else
    {
      v236 = *v231;
      sub_1000051A8(v236, v154[96]);
      *(_QWORD *)(v153 + 88) = v236;
      *(_BYTE *)(v153 + 96) = v232;
    }
  }
  else if (v232 == 255)
  {
    sub_1000077A4(v153 + 88);
    v237 = v154[96];
    *v230 = *v231;
    *(_BYTE *)(v153 + 96) = v237;
  }
  else
  {
    v233 = *v231;
    sub_1000051A8(v233, v154[96]);
    v234 = *(void **)(v153 + 88);
    *(_QWORD *)(v153 + 88) = v233;
    v235 = *(_BYTE *)(v153 + 96);
    *(_BYTE *)(v153 + 96) = v232;
    sub_10000563C(v234, v235);
  }
  v239 = (void **)(v153 + 104);
  v240 = (void **)(v154 + 104);
  v241 = v154[112];
  if (*(unsigned __int8 *)(v153 + 112) == 255)
  {
    if (v241 == 255)
    {
      v247 = *v240;
      *(_BYTE *)(v153 + 112) = v154[112];
      *v239 = v247;
    }
    else
    {
      v245 = *v240;
      sub_1000051A8(v245, v154[112]);
      *(_QWORD *)(v153 + 104) = v245;
      *(_BYTE *)(v153 + 112) = v241;
    }
  }
  else if (v241 == 255)
  {
    sub_1000077A4(v153 + 104);
    v246 = v154[112];
    *v239 = *v240;
    *(_BYTE *)(v153 + 112) = v246;
  }
  else
  {
    v242 = *v240;
    sub_1000051A8(v242, v154[112]);
    v243 = *(void **)(v153 + 104);
    *(_QWORD *)(v153 + 104) = v242;
    v244 = *(_BYTE *)(v153 + 112);
    *(_BYTE *)(v153 + 112) = v241;
    sub_10000563C(v243, v244);
  }
  v248 = (void **)(v153 + 120);
  v249 = (void **)(v154 + 120);
  v250 = v154[128];
  if (*(unsigned __int8 *)(v153 + 128) == 255)
  {
    if (v250 == 255)
    {
      v256 = *v249;
      *(_BYTE *)(v153 + 128) = v154[128];
      *v248 = v256;
    }
    else
    {
      v254 = *v249;
      sub_1000051A8(v254, v154[128]);
      *(_QWORD *)(v153 + 120) = v254;
      *(_BYTE *)(v153 + 128) = v250;
    }
  }
  else if (v250 == 255)
  {
    sub_1000077A4(v153 + 120);
    v255 = v154[128];
    *v248 = *v249;
    *(_BYTE *)(v153 + 128) = v255;
  }
  else
  {
    v251 = *v249;
    sub_1000051A8(v251, v154[128]);
    v252 = *(void **)(v153 + 120);
    *(_QWORD *)(v153 + 120) = v251;
    v253 = *(_BYTE *)(v153 + 128);
    *(_BYTE *)(v153 + 128) = v250;
    sub_10000563C(v252, v253);
  }
  v22 = v163;
  *(_BYTE *)(v153 + 129) = v154[129];
  v257 = v36[11];
  v258 = v153 + v257;
  v259 = &v154[v257];
  v260 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v260 - 8) + 24))(v258, v259, v260);
  v261 = v36[12];
  v262 = (_QWORD *)(v153 + v261);
  v263 = &v154[v261];
  *v262 = *(_QWORD *)v263;
  v264 = *((_QWORD *)v263 + 1);
  v265 = v262[1];
  v262[1] = v264;
  swift_bridgeObjectRetain(v264);
  swift_bridgeObjectRelease(v265);
  *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
  *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
  *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
  v266 = v36[16];
  v267 = (_QWORD *)(v153 + v266);
  v268 = &v154[v266];
  *v267 = *(_QWORD *)v268;
  v269 = *((_QWORD *)v268 + 1);
  v270 = v267[1];
  v267[1] = v269;
  swift_bridgeObjectRetain(v269);
  swift_bridgeObjectRelease(v270);
LABEL_142:
  v271 = v18[14];
  v272 = *(void **)((char *)a1 + v271);
  v273 = *(void **)((char *)a2 + v271);
  *(_QWORD *)((char *)a1 + v271) = v273;
  v274 = v273;

  v275 = v18[15];
  v276 = (char *)a1 + v275;
  v277 = (char *)a2 + v275;
  v278 = type metadata accessor for URL(0);
  v279 = *(_QWORD *)(v278 - 8);
  v280 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v279 + 48);
  LODWORD(v272) = v280(v276, 1, v278);
  v281 = v280(v277, 1, v278);
  if ((_DWORD)v272)
  {
    if (!v281)
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v281)
  {
    (*(void (**)(char *, uint64_t))(v279 + 8))(v276, v278);
LABEL_147:
    v282 = sub_100005150(&qword_100081038);
    memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
    goto LABEL_148;
  }
  (*(void (**)(char *, char *, uint64_t))(v279 + 24))(v276, v277, v278);
LABEL_148:
  *((_BYTE *)a1 + v18[16]) = *((_BYTE *)a2 + v18[16]);
  v283 = v18[17];
  v284 = (char *)a1 + v283;
  v285 = (char *)a2 + v283;
  v286 = *(_QWORD *)v285;
  v284[8] = v285[8];
  *(_QWORD *)v284 = v286;
  v287 = v18[18];
  v288 = (char *)a1 + v287;
  v289 = (char *)a2 + v287;
  v290 = *(_QWORD *)v289;
  v288[8] = v289[8];
  *(_QWORD *)v288 = v290;
  v291 = v18[19];
  v292 = (char *)a1 + v291;
  v293 = (char *)a2 + v291;
  v294 = v357((char *)a1 + v291, 1, v22);
  v295 = v357(v293, 1, v22);
  if (v294)
  {
    if (!v295)
    {
      (*(void (**)(char *, char *, uint64_t))(v358 + 16))(v292, v293, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v358 + 56))(v292, 0, 1, v22);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v295)
  {
    (*(void (**)(char *, uint64_t))(v358 + 8))(v292, v22);
LABEL_153:
    v296 = sub_100005150(&qword_100081028);
    memcpy(v292, v293, *(_QWORD *)(*(_QWORD *)(v296 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(char *, char *, uint64_t))(v358 + 24))(v292, v293, v22);
LABEL_154:
  v297 = v18[20];
  v298 = (char *)a1 + v297;
  v299 = (char *)a2 + v297;
  v300 = v357((char *)a1 + v297, 1, v22);
  v301 = v357(v299, 1, v22);
  if (v300)
  {
    if (!v301)
    {
      (*(void (**)(char *, char *, uint64_t))(v358 + 16))(v298, v299, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v358 + 56))(v298, 0, 1, v22);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v301)
  {
    (*(void (**)(char *, uint64_t))(v358 + 8))(v298, v22);
LABEL_159:
    v302 = sub_100005150(&qword_100081028);
    memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(char *, char *, uint64_t))(v358 + 24))(v298, v299, v22);
LABEL_160:
  v303 = v18[21];
  v304 = (_QWORD *)((char *)a1 + v303);
  v305 = (char *)a2 + v303;
  v306 = *(_QWORD *)((char *)a1 + v303);
  v307 = *(_QWORD *)((char *)a2 + v303);
  if (v306)
  {
    if (v307)
    {
      *v304 = v307;
      swift_retain(v307);
      swift_release(v306);
      v308 = *((_QWORD *)v305 + 1);
      v309 = v304[1];
      v304[1] = v308;
      swift_retain(v308);
      swift_release(v309);
      v310 = *((_QWORD *)v305 + 2);
      v311 = v304[2];
      v304[2] = v310;
      swift_retain(v310);
      swift_release(v311);
    }
    else
    {
      sub_100007814((_QWORD *)((char *)a1 + v303));
      v314 = *((_QWORD *)v305 + 2);
      *(_OWORD *)v304 = *(_OWORD *)v305;
      v304[2] = v314;
    }
  }
  else if (v307)
  {
    *v304 = v307;
    v312 = *((_QWORD *)v305 + 1);
    v304[1] = v312;
    v313 = *((_QWORD *)v305 + 2);
    v304[2] = v313;
    swift_retain(v307);
    swift_retain(v312);
    swift_retain(v313);
  }
  else
  {
    v315 = *(_OWORD *)v305;
    v304[2] = *((_QWORD *)v305 + 2);
    *(_OWORD *)v304 = v315;
  }
  v316 = v18[22];
  v317 = (char *)a1 + v316;
  v318 = (char *)a2 + v316;
  v319 = sub_100005150(&qword_100081040);
  v320 = *(_QWORD *)(v319 - 8);
  v321 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v320 + 48);
  v322 = v321(v317, 1, v319);
  v323 = v321(v318, 1, v319);
  v360 = a2;
  if (v322)
  {
    if (!v323)
    {
      v324 = *(void (**)(char *, char *, uint64_t))(v358 + 16);
      v324(v317, v318, v22);
      v324(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v317, 0, 1, v319);
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (v323)
  {
    sub_10000F008((uint64_t)v317, &qword_100081040);
LABEL_175:
    v325 = sub_100005150(&qword_100081048);
    memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
    goto LABEL_176;
  }
  v353 = *(void (**)(char *, char *, uint64_t))(v358 + 24);
  v353(v317, v318, v22);
  v353(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
LABEL_176:
  v326 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v327 = v326[5];
  v328 = &v317[v327];
  v329 = &v318[v327];
  v330 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v330 - 8) + 24))(v328, v329, v330);
  v331 = v326[6];
  v332 = &v317[v331];
  v333 = &v318[v331];
  v334 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v335 = *(_QWORD *)(v334 - 8);
  v336 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v335 + 48);
  LODWORD(v328) = v336(v332, 1, v334);
  v337 = v336(v333, 1, v334);
  if (!(_DWORD)v328)
  {
    if (!v337)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 24))(v332, v333, v334);
      goto LABEL_182;
    }
    (*(void (**)(char *, uint64_t))(v335 + 8))(v332, v334);
    goto LABEL_181;
  }
  if (v337)
  {
LABEL_181:
    v338 = sub_100005150(&qword_100081050);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
    goto LABEL_182;
  }
  (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v332, v333, v334);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v332, 0, 1, v334);
LABEL_182:
  v339 = v326[7];
  v340 = &v317[v339];
  v341 = &v318[v339];
  *(_QWORD *)v340 = *(_QWORD *)v341;
  v342 = *((_QWORD *)v341 + 1);
  v343 = *((_QWORD *)v340 + 1);
  *((_QWORD *)v340 + 1) = v342;
  swift_bridgeObjectRetain(v342);
  swift_bridgeObjectRelease(v343);
  v344 = v326[8];
  v345 = &v317[v344];
  v346 = &v318[v344];
  *(_QWORD *)v345 = *(_QWORD *)v346;
  v347 = *((_QWORD *)v346 + 1);
  v348 = *((_QWORD *)v345 + 1);
  *((_QWORD *)v345 + 1) = v347;
  swift_bridgeObjectRetain(v347);
  swift_bridgeObjectRelease(v348);
  *((_BYTE *)a1 + *(int *)(v359 + 20)) = *((_BYTE *)v360 + *(int *)(v359 + 20));
  v349 = *(int *)(v359 + 24);
  v350 = (_QWORD *)((char *)a1 + v349);
  v351 = (_QWORD *)((char *)v360 + v349);
  *v350 = *v351;
  v350[1] = v351[1];
  v350[2] = v351[2];
  v350[3] = v351[3];
  return a1;
}

uint64_t sub_1000410DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(_OWORD *, uint64_t, int *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  __int128 v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(const void *, uint64_t);
  uint64_t v91;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v8 = v7[10];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v90 = *(unsigned int (**)(const void *, uint64_t))(v12 + 48);
  v91 = v11;
  if (v90(v10, 1))
  {
    v13 = sub_100005150(&qword_100081028);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v91);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v91);
  }
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  v14 = v7[12];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = (int *)type metadata accessor for ArtworkModel(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
  v89 = v18;
  if (v19(v16, 1, v17))
  {
    v20 = sub_100005150(&qword_100081030);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v16[1];
    *v15 = *v16;
    v15[1] = v21;
    *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
    *(_OWORD *)((char *)v15 + 40) = *(_OWORD *)((char *)v16 + 40);
    *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
    *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
    *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
    *(_OWORD *)((char *)v15 + 104) = *(_OWORD *)((char *)v16 + 104);
    *(_OWORD *)((char *)v15 + 88) = *(_OWORD *)((char *)v16 + 88);
    *(_OWORD *)((char *)v15 + 72) = *(_OWORD *)((char *)v16 + 72);
    *((_BYTE *)v15 + 129) = *((_BYTE *)v16 + 129);
    v22 = v17[11];
    v87 = a3;
    v88 = v12;
    v23 = (char *)v15 + v22;
    v24 = (char *)v16 + v22;
    v25 = type metadata accessor for ArtworkCrop(0);
    v26 = v23;
    v27 = v24;
    a3 = v87;
    v12 = v88;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v26, v27, v25);
    *(_OWORD *)((char *)v15 + v17[12]) = *(_OWORD *)((char *)v16 + v17[12]);
    *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
    *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
    *((_BYTE *)v15 + v17[15]) = *((_BYTE *)v16 + v17[15]);
    *(_OWORD *)((char *)v15 + v17[16]) = *(_OWORD *)((char *)v16 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v28 = v7[13];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  if (v19((_OWORD *)(a2 + v28), 1, v17))
  {
    v31 = sub_100005150(&qword_100081030);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    *(_OWORD *)((char *)v29 + 40) = *(_OWORD *)((char *)v30 + 40);
    *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
    *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
    *(_OWORD *)((char *)v29 + 113) = *(_OWORD *)((char *)v30 + 113);
    *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v30 + 104);
    *(_OWORD *)((char *)v29 + 88) = *(_OWORD *)((char *)v30 + 88);
    *(_OWORD *)((char *)v29 + 72) = *(_OWORD *)((char *)v30 + 72);
    *((_BYTE *)v29 + 129) = *((_BYTE *)v30 + 129);
    v33 = v17[11];
    v34 = v12;
    v35 = (char *)v29 + v33;
    v36 = a3;
    v37 = (char *)v30 + v33;
    v38 = type metadata accessor for ArtworkCrop(0);
    v39 = v35;
    v12 = v34;
    v40 = v37;
    a3 = v36;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v39, v40, v38);
    *(_OWORD *)((char *)v29 + v17[12]) = *(_OWORD *)((char *)v30 + v17[12]);
    *((_BYTE *)v29 + v17[13]) = *((_BYTE *)v30 + v17[13]);
    *((_BYTE *)v29 + v17[14]) = *((_BYTE *)v30 + v17[14]);
    *((_BYTE *)v29 + v17[15]) = *((_BYTE *)v30 + v17[15]);
    *(_OWORD *)((char *)v29 + v17[16]) = *(_OWORD *)((char *)v30 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v89 + 56))(v29, 0, 1, v17);
  }
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v41 = v7[15];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = sub_100005150(&qword_100081038);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  *(_BYTE *)(a1 + v7[16]) = *(_BYTE *)(a2 + v7[16]);
  v47 = v7[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = v7[19];
  v54 = (void *)(a1 + v53);
  v55 = (const void *)(a2 + v53);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v90)(a2 + v53, 1, v91))
  {
    v56 = sub_100005150(&qword_100081028);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v54, v55, v91);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v54, 0, 1, v91);
  }
  v57 = v7[20];
  v58 = (void *)(a1 + v57);
  v59 = (const void *)(a2 + v57);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v90)(a2 + v57, 1, v91))
  {
    v60 = sub_100005150(&qword_100081028);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v58, v59, v91);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v58, 0, 1, v91);
  }
  v61 = v7[21];
  v62 = a1 + v61;
  v63 = a2 + v61;
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  v64 = v7[22];
  v65 = (char *)(a1 + v64);
  v66 = (char *)(a2 + v64);
  v67 = sub_100005150(&qword_100081040);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    v69 = sub_100005150(&qword_100081048);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v70 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v70(v65, v66, v91);
    v70(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v91);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v71 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v72 = v71[5];
  v73 = &v65[v72];
  v74 = &v66[v72];
  v75 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v71[6];
  v77 = &v65[v76];
  v78 = &v66[v76];
  v79 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_100005150(&qword_100081050);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  *(_OWORD *)&v65[v71[7]] = *(_OWORD *)&v66[v71[7]];
  *(_OWORD *)&v65[v71[8]] = *(_OWORD *)&v66[v71[8]];
  v82 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v83 = (_OWORD *)(a1 + v82);
  v84 = (_OWORD *)(a2 + v82);
  v85 = v84[1];
  *v83 = *v84;
  v83[1] = v85;
  return a1;
}

_QWORD *sub_1000417B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  int v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  _OWORD *v132;
  __int128 v133;
  uint64_t v135;
  uint64_t v136;
  _OWORD *v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(char *, char *, uint64_t);
  _QWORD *v150;
  int v151;
  int v152;
  void *v153;
  _QWORD *v154;
  int v155;
  int v156;
  void *v157;
  _QWORD *v158;
  int v159;
  int v160;
  void *v161;
  _QWORD *v162;
  int v163;
  int v164;
  void *v165;
  _QWORD *v166;
  int v167;
  int v168;
  void *v169;
  _QWORD *v170;
  int v171;
  int v172;
  void *v173;
  _QWORD *v174;
  int v175;
  int v176;
  void *v177;
  _QWORD *v178;
  int v179;
  int v180;
  void *v181;
  _QWORD *v182;
  int v183;
  int v184;
  void *v185;
  _QWORD *v186;
  int v187;
  int v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)(char *, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a1[6];
  a1[6] = a2[6];
  swift_release(v12);
  v13 = a2[8];
  v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = a2[10];
  v16 = a1[10];
  a1[9] = a2[9];
  a1[10] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v18 = v17[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  v223 = v23;
  v224 = a3;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100005150(&qword_100081028);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[11];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v17[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v222 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v222 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  v225 = v22;
  if (v38)
  {
    if (!v39)
    {
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_OWORD *)(v34 + 16) = v40;
      *(_BYTE *)(v34 + 32) = v35[32];
      *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
      *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
      *(_BYTE *)(v34 + 64) = v35[64];
      *(_OWORD *)(v34 + 113) = *(_OWORD *)(v35 + 113);
      *(_OWORD *)(v34 + 104) = *(_OWORD *)(v35 + 104);
      *(_OWORD *)(v34 + 88) = *(_OWORD *)(v35 + 88);
      *(_OWORD *)(v34 + 72) = *(_OWORD *)(v35 + 72);
      *(_BYTE *)(v34 + 129) = v35[129];
      v41 = v36[11];
      v42 = v34 + v41;
      v43 = &v35[v41];
      v44 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      *(_OWORD *)(v34 + v36[12]) = *(_OWORD *)&v35[v36[12]];
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      *(_OWORD *)(v34 + v36[16]) = *(_OWORD *)&v35[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v222 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_12:
    v45 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  v135 = *((_QWORD *)v35 + 1);
  v136 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v135;
  swift_bridgeObjectRelease(v136);
  v137 = v35 + 16;
  v138 = *(unsigned __int8 *)(v34 + 32);
  if (v138 != 255)
  {
    v139 = v35[32];
    if (v139 != 255)
    {
      v140 = *(_QWORD *)(v34 + 16);
      v141 = *(_QWORD *)(v34 + 24);
      *(_OWORD *)(v34 + 16) = *v137;
      *(_BYTE *)(v34 + 32) = v139;
      sub_100005624(v140, v141, v138);
      goto LABEL_69;
    }
    sub_100007770(v34 + 16);
  }
  *(_OWORD *)(v34 + 16) = *v137;
  *(_BYTE *)(v34 + 32) = v35[32];
LABEL_69:
  *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
  v150 = v35 + 56;
  v151 = *(unsigned __int8 *)(v34 + 64);
  if (v151 != 255)
  {
    v152 = v35[64];
    if (v152 != 255)
    {
      v153 = *(void **)(v34 + 56);
      *(_QWORD *)(v34 + 56) = *v150;
      *(_BYTE *)(v34 + 64) = v152;
      sub_10000563C(v153, v151);
      goto LABEL_79;
    }
    sub_1000077A4(v34 + 56);
  }
  *(_QWORD *)(v34 + 56) = *v150;
  *(_BYTE *)(v34 + 64) = v35[64];
LABEL_79:
  v158 = v35 + 72;
  v159 = *(unsigned __int8 *)(v34 + 80);
  if (v159 != 255)
  {
    v160 = v35[80];
    if (v160 != 255)
    {
      v161 = *(void **)(v34 + 72);
      *(_QWORD *)(v34 + 72) = *v158;
      *(_BYTE *)(v34 + 80) = v160;
      sub_10000563C(v161, v159);
      goto LABEL_89;
    }
    sub_1000077A4(v34 + 72);
  }
  *(_QWORD *)(v34 + 72) = *v158;
  *(_BYTE *)(v34 + 80) = v35[80];
LABEL_89:
  v166 = v35 + 88;
  v167 = *(unsigned __int8 *)(v34 + 96);
  if (v167 != 255)
  {
    v168 = v35[96];
    if (v168 != 255)
    {
      v169 = *(void **)(v34 + 88);
      *(_QWORD *)(v34 + 88) = *v166;
      *(_BYTE *)(v34 + 96) = v168;
      sub_10000563C(v169, v167);
      goto LABEL_99;
    }
    sub_1000077A4(v34 + 88);
  }
  *(_QWORD *)(v34 + 88) = *v166;
  *(_BYTE *)(v34 + 96) = v35[96];
LABEL_99:
  v174 = v35 + 104;
  v175 = *(unsigned __int8 *)(v34 + 112);
  if (v175 != 255)
  {
    v176 = v35[112];
    if (v176 != 255)
    {
      v177 = *(void **)(v34 + 104);
      *(_QWORD *)(v34 + 104) = *v174;
      *(_BYTE *)(v34 + 112) = v176;
      sub_10000563C(v177, v175);
      goto LABEL_109;
    }
    sub_1000077A4(v34 + 104);
  }
  *(_QWORD *)(v34 + 104) = *v174;
  *(_BYTE *)(v34 + 112) = v35[112];
LABEL_109:
  v182 = v35 + 120;
  v183 = *(unsigned __int8 *)(v34 + 128);
  if (v183 == 255)
  {
LABEL_118:
    *(_QWORD *)(v34 + 120) = *v182;
    *(_BYTE *)(v34 + 128) = v35[128];
    goto LABEL_119;
  }
  v184 = v35[128];
  if (v184 == 255)
  {
    sub_1000077A4(v34 + 120);
    goto LABEL_118;
  }
  v185 = *(void **)(v34 + 120);
  *(_QWORD *)(v34 + 120) = *v182;
  *(_BYTE *)(v34 + 128) = v184;
  sub_10000563C(v185, v183);
LABEL_119:
  *(_BYTE *)(v34 + 129) = v35[129];
  v190 = v36[11];
  v191 = v34 + v190;
  v192 = &v35[v190];
  v193 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v193 - 8) + 40))(v191, v192, v193);
  v194 = v36[12];
  v195 = (_QWORD *)(v34 + v194);
  v196 = &v35[v194];
  v198 = *(_QWORD *)v196;
  v197 = *((_QWORD *)v196 + 1);
  v199 = v195[1];
  *v195 = v198;
  v195[1] = v197;
  swift_bridgeObjectRelease(v199);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v200 = v36[16];
  v201 = (_QWORD *)(v34 + v200);
  v202 = &v35[v200];
  v204 = *(_QWORD *)v202;
  v203 = *((_QWORD *)v202 + 1);
  v205 = v201[1];
  *v201 = v204;
  v201[1] = v203;
  swift_bridgeObjectRelease(v205);
LABEL_13:
  v46 = v17[13];
  v47 = (uint64_t)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = v37((uint64_t)a1 + v46, 1, v36);
  v50 = v37((uint64_t)v48, 1, v36);
  if (v49)
  {
    if (!v50)
    {
      v51 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v51;
      *(_BYTE *)(v47 + 32) = v48[32];
      *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
      *(_QWORD *)(v47 + 56) = *((_QWORD *)v48 + 7);
      *(_BYTE *)(v47 + 64) = v48[64];
      *(_OWORD *)(v47 + 113) = *(_OWORD *)(v48 + 113);
      *(_OWORD *)(v47 + 104) = *(_OWORD *)(v48 + 104);
      *(_OWORD *)(v47 + 88) = *(_OWORD *)(v48 + 88);
      *(_OWORD *)(v47 + 72) = *(_OWORD *)(v48 + 72);
      *(_BYTE *)(v47 + 129) = v48[129];
      v52 = v36[11];
      v53 = v47 + v52;
      v54 = &v48[v52];
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
      *(_OWORD *)(v47 + v36[12]) = *(_OWORD *)&v48[v36[12]];
      *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
      *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
      *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
      *(_OWORD *)(v47 + v36[16]) = *(_OWORD *)&v48[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v222 + 56))(v47, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    sub_10000EF80(v47, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_18:
    v56 = sub_100005150(&qword_100081030);
    memcpy((void *)v47, v48, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_19;
  }
  v142 = *((_QWORD *)v48 + 1);
  v143 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v47 + 8) = v142;
  swift_bridgeObjectRelease(v143);
  v144 = v48 + 16;
  v145 = *(unsigned __int8 *)(v47 + 32);
  if (v145 != 255)
  {
    v146 = v48[32];
    if (v146 != 255)
    {
      v147 = *(_QWORD *)(v47 + 16);
      v148 = *(_QWORD *)(v47 + 24);
      *(_OWORD *)(v47 + 16) = *v144;
      *(_BYTE *)(v47 + 32) = v146;
      sub_100005624(v147, v148, v145);
      goto LABEL_74;
    }
    sub_100007770(v47 + 16);
  }
  *(_OWORD *)(v47 + 16) = *v144;
  *(_BYTE *)(v47 + 32) = v48[32];
LABEL_74:
  *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
  v154 = v48 + 56;
  v155 = *(unsigned __int8 *)(v47 + 64);
  if (v155 != 255)
  {
    v156 = v48[64];
    if (v156 != 255)
    {
      v157 = *(void **)(v47 + 56);
      *(_QWORD *)(v47 + 56) = *v154;
      *(_BYTE *)(v47 + 64) = v156;
      sub_10000563C(v157, v155);
      goto LABEL_84;
    }
    sub_1000077A4(v47 + 56);
  }
  *(_QWORD *)(v47 + 56) = *v154;
  *(_BYTE *)(v47 + 64) = v48[64];
LABEL_84:
  v162 = v48 + 72;
  v163 = *(unsigned __int8 *)(v47 + 80);
  if (v163 != 255)
  {
    v164 = v48[80];
    if (v164 != 255)
    {
      v165 = *(void **)(v47 + 72);
      *(_QWORD *)(v47 + 72) = *v162;
      *(_BYTE *)(v47 + 80) = v164;
      sub_10000563C(v165, v163);
      goto LABEL_94;
    }
    sub_1000077A4(v47 + 72);
  }
  *(_QWORD *)(v47 + 72) = *v162;
  *(_BYTE *)(v47 + 80) = v48[80];
LABEL_94:
  v170 = v48 + 88;
  v171 = *(unsigned __int8 *)(v47 + 96);
  if (v171 != 255)
  {
    v172 = v48[96];
    if (v172 != 255)
    {
      v173 = *(void **)(v47 + 88);
      *(_QWORD *)(v47 + 88) = *v170;
      *(_BYTE *)(v47 + 96) = v172;
      sub_10000563C(v173, v171);
      goto LABEL_104;
    }
    sub_1000077A4(v47 + 88);
  }
  *(_QWORD *)(v47 + 88) = *v170;
  *(_BYTE *)(v47 + 96) = v48[96];
LABEL_104:
  v178 = v48 + 104;
  v179 = *(unsigned __int8 *)(v47 + 112);
  if (v179 != 255)
  {
    v180 = v48[112];
    if (v180 != 255)
    {
      v181 = *(void **)(v47 + 104);
      *(_QWORD *)(v47 + 104) = *v178;
      *(_BYTE *)(v47 + 112) = v180;
      sub_10000563C(v181, v179);
      goto LABEL_114;
    }
    sub_1000077A4(v47 + 104);
  }
  *(_QWORD *)(v47 + 104) = *v178;
  *(_BYTE *)(v47 + 112) = v48[112];
LABEL_114:
  v186 = v48 + 120;
  v187 = *(unsigned __int8 *)(v47 + 128);
  if (v187 == 255)
  {
LABEL_121:
    *(_QWORD *)(v47 + 120) = *v186;
    *(_BYTE *)(v47 + 128) = v48[128];
    goto LABEL_122;
  }
  v188 = v48[128];
  if (v188 == 255)
  {
    sub_1000077A4(v47 + 120);
    goto LABEL_121;
  }
  v189 = *(void **)(v47 + 120);
  *(_QWORD *)(v47 + 120) = *v186;
  *(_BYTE *)(v47 + 128) = v188;
  sub_10000563C(v189, v187);
LABEL_122:
  *(_BYTE *)(v47 + 129) = v48[129];
  v206 = v36[11];
  v207 = v47 + v206;
  v208 = &v48[v206];
  v209 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v209 - 8) + 40))(v207, v208, v209);
  v210 = v36[12];
  v211 = (_QWORD *)(v47 + v210);
  v212 = &v48[v210];
  v214 = *(_QWORD *)v212;
  v213 = *((_QWORD *)v212 + 1);
  v215 = v211[1];
  *v211 = v214;
  v211[1] = v213;
  swift_bridgeObjectRelease(v215);
  *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
  *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
  *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
  v216 = v36[16];
  v217 = (_QWORD *)(v47 + v216);
  v218 = &v48[v216];
  v220 = *(_QWORD *)v218;
  v219 = *((_QWORD *)v218 + 1);
  v221 = v217[1];
  *v217 = v220;
  v217[1] = v219;
  swift_bridgeObjectRelease(v221);
LABEL_19:
  v57 = v17[14];
  v58 = *(void **)((char *)a1 + v57);
  *(_QWORD *)((char *)a1 + v57) = *(_QWORD *)((char *)a2 + v57);

  v59 = v17[15];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    v67 = v225;
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v67 = v225;
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
LABEL_24:
    v68 = sub_100005150(&qword_100081038);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v60, v61, v62);
LABEL_25:
  *((_BYTE *)a1 + v17[16]) = *((_BYTE *)a2 + v17[16]);
  v69 = v17[17];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  v72 = v17[18];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v17[19];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = v223((char *)a1 + v75, 1, v21);
  v79 = v223(v77, 1, v21);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v76, v77, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v76, 0, 1, v21);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v76, v21);
LABEL_30:
    v80 = sub_100005150(&qword_100081028);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v76, v77, v21);
LABEL_31:
  v81 = v17[20];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = v223((char *)a1 + v81, 1, v21);
  v85 = v223(v83, 1, v21);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v82, v83, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v82, 0, 1, v21);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v82, v21);
LABEL_36:
    v86 = sub_100005150(&qword_100081028);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v82, v83, v21);
LABEL_37:
  v87 = v17[21];
  v88 = (_QWORD *)((char *)a1 + v87);
  v89 = (_QWORD *)((char *)a2 + v87);
  v90 = *(_QWORD *)((char *)a1 + v87);
  if (v90)
  {
    if (*v89)
    {
      *v88 = *v89;
      swift_release(v90);
      v91 = v88[1];
      v88[1] = v89[1];
      swift_release(v91);
      v92 = v88[2];
      v88[2] = v89[2];
      swift_release(v92);
      goto LABEL_42;
    }
    sub_100007814(v88);
  }
  *(_OWORD *)v88 = *(_OWORD *)v89;
  v88[2] = v89[2];
LABEL_42:
  v93 = v17[22];
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  v96 = sub_100005150(&qword_100081040);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  v226 = a2;
  if (v99)
  {
    if (!v100)
    {
      v101 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v101(v94, v95, v21);
      v101(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v100)
  {
    sub_10000F008((uint64_t)v94, &qword_100081040);
LABEL_47:
    v102 = sub_100005150(&qword_100081048);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_48;
  }
  v149 = *(void (**)(char *, char *, uint64_t))(v67 + 40);
  v149(v94, v95, v21);
  v149(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
LABEL_48:
  v103 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v104 = v103[5];
  v105 = &v94[v104];
  v106 = &v95[v104];
  v107 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 40))(v105, v106, v107);
  v108 = v103[6];
  v109 = &v94[v108];
  v110 = &v95[v108];
  v111 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  v114 = v113(v109, 1, v111);
  v115 = v113(v110, 1, v111);
  if (!v114)
  {
    v116 = v226;
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 40))(v109, v110, v111);
      goto LABEL_54;
    }
    (*(void (**)(char *, uint64_t))(v112 + 8))(v109, v111);
    goto LABEL_53;
  }
  v116 = v226;
  if (v115)
  {
LABEL_53:
    v117 = sub_100005150(&qword_100081050);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v109, v110, v111);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
LABEL_54:
  v118 = v103[7];
  v119 = &v94[v118];
  v120 = &v95[v118];
  v122 = *(_QWORD *)v120;
  v121 = *((_QWORD *)v120 + 1);
  v123 = *((_QWORD *)v119 + 1);
  *(_QWORD *)v119 = v122;
  *((_QWORD *)v119 + 1) = v121;
  swift_bridgeObjectRelease(v123);
  v124 = v103[8];
  v125 = &v94[v124];
  v126 = &v95[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  v130 = *(int *)(v224 + 24);
  *((_BYTE *)a1 + *(int *)(v224 + 20)) = *((_BYTE *)v116 + *(int *)(v224 + 20));
  v131 = (_OWORD *)((char *)a1 + v130);
  v132 = (_OWORD *)((char *)v116 + v130);
  v133 = v132[1];
  *v131 = *v132;
  v131[1] = v133;
  return a1;
}

uint64_t sub_100042664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100042670);
}

uint64_t sub_100042670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UpNextEntry.Episode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 2u)
    v9 = 2;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 2;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 2u)
    return v10;
  else
    return 0;
}

uint64_t sub_1000426F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100042700);
}

uint64_t sub_100042700(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UpNextEntry.Episode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t type metadata accessor for EpisodeListWidgetLargeHeader(uint64_t a1)
{
  uint64_t result;

  result = qword_100082130;
  if (!qword_100082130)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeListWidgetLargeHeader);
  return result;
}

uint64_t sub_1000427B4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UpNextEntry.Episode(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10006E140;
    v4[2] = &unk_10006E158;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100042830(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071F44, 1);
}

uint64_t sub_100042840@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)();
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v25 = a1;
  v2 = type metadata accessor for EpisodeListWidgetLargeHeader(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005150(&qword_100081038);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_100082170);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100005150(&qword_100082020);
  __chkstk_darwin(v24);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UpNextEntry.Episode(0);
  sub_10000EFC4((uint64_t)v1 + *(int *)(v14 + 60), (uint64_t)v8, &qword_100081038);
  sub_10000EF3C((uint64_t)v1, (uint64_t)v5, type metadata accessor for EpisodeListWidgetLargeHeader);
  v15 = *(unsigned __int8 *)(v3 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_10007E958, v16 + v4, v15 | 7);
  sub_10000FC78((uint64_t)v5, v17 + v16, type metadata accessor for EpisodeListWidgetLargeHeader);
  sub_10000EEF8((uint64_t)v8, (uint64_t)v11, &qword_100081038);
  *(_QWORD *)&v11[*(int *)(v9 + 36)] = 0;
  v18 = (uint64_t (**)())&v11[*(int *)(v9 + 40)];
  *v18 = sub_100044500;
  v18[1] = (uint64_t (*)())v17;
  v20 = *v1;
  v19 = v1[1];
  sub_10000EFC4((uint64_t)v11, (uint64_t)v13, &qword_100082170);
  v21 = &v13[*(int *)(v24 + 52)];
  *(_QWORD *)v21 = v20;
  *((_QWORD *)v21 + 1) = v19;
  swift_bridgeObjectRetain(v19);
  sub_10000F008((uint64_t)v11, &qword_100082170);
  v22 = *(_QWORD *)((char *)v1 + *(int *)(v14 + 84)) != 0;
  v26 = v1;
  sub_10003A71C(v22, (void (*)(uint64_t, __n128))sub_10004453C, v25);
  return sub_10000F008((uint64_t)v13, &qword_100082020);
}

uint64_t sub_100042A84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v21;
  _QWORD v22[2];

  v2 = sub_100005150(&qword_100082178);
  __chkstk_darwin(v2);
  v4 = (char *)&v22[-2] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005150(&qword_100082180);
  __chkstk_darwin(v5);
  v7 = (char *)&v22[-2] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v4 = static VerticalAlignment.center.getter(v8);
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 0;
  v9 = sub_100005150(&qword_100082188);
  sub_100042C1C(a1, (uint64_t)&v4[*(int *)(v9 + 44)]);
  v10 = a1 + *(int *)(type metadata accessor for EpisodeListWidgetLargeHeader(0) + 24);
  v21 = *(_OWORD *)v10;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  v13 = static Edge.Set.all.getter();
  sub_10000EFC4((uint64_t)v4, (uint64_t)v7, &qword_100082178);
  v14 = &v7[*(int *)(v5 + 36)];
  *v14 = v13;
  *(_OWORD *)(v14 + 8) = v21;
  *((_QWORD *)v14 + 3) = v11;
  *((_QWORD *)v14 + 4) = v12;
  v14[40] = 0;
  sub_10000F008((uint64_t)v4, &qword_100082178);
  v15 = sub_10003B068();
  v17 = v16;
  v22[0] = v15;
  v22[1] = v16;
  v18 = sub_100044544();
  v19 = sub_1000248B8();
  View.accessibilityLabel<A>(_:)(v22, v5, &type metadata for String, v18, v19);
  swift_bridgeObjectRelease(v17);
  return sub_10000F008((uint64_t)v7, &qword_100082180);
}

uint64_t sub_100042C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = a2;
  v54 = sub_100005150(&qword_1000821A0);
  __chkstk_darwin(v54);
  v48 = (uint64_t *)((char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = sub_100005150(&qword_1000821A8);
  __chkstk_darwin(v49);
  v52 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100005150(&qword_1000821B0);
  __chkstk_darwin(v51);
  v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005150(&qword_1000821B8);
  __chkstk_darwin(v7);
  v55 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v53 = (char *)&v47 - v10;
  v11 = type metadata accessor for EpisodeViewStyle(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v47 - v15;
  v17 = type metadata accessor for UpNextEntry.Episode(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for WidgetArtworkView(0);
  __chkstk_darwin(v20);
  v50 = (uint64_t)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v47 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v47 - v26;
  sub_10000EF3C(a1, (uint64_t)v19, type metadata accessor for UpNextEntry.Episode);
  v28 = enum case for WidgetFamily.systemLarge(_:);
  v29 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v16, v28, v29);
  swift_storeEnumTagMultiPayload(v16, v11, 1);
  sub_10000EF3C((uint64_t)v16, (uint64_t)v13, type metadata accessor for EpisodeViewStyle);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 1)
    v30 = 8.0;
  else
    v30 = 6.0;
  sub_10000EF80((uint64_t)v13, type metadata accessor for EpisodeViewStyle);
  sub_10000EF80((uint64_t)v16, type metadata accessor for EpisodeViewStyle);
  sub_10000FC78((uint64_t)v19, (uint64_t)v24, type metadata accessor for UpNextEntry.Episode);
  *(double *)&v24[*(int *)(v20 + 20)] = v30;
  sub_10000FC78((uint64_t)v24, (uint64_t)v27, type metadata accessor for WidgetArtworkView);
  v31 = type metadata accessor for EpisodeListWidgetLargeHeader(0);
  v32 = *(unsigned __int8 *)(a1 + *(int *)(v31 + 20));
  if (v32 == 2)
  {
    *v6 = static HorizontalAlignment.leading.getter(v31);
    v6[1] = 0;
    *((_BYTE *)v6 + 16) = 0;
    v33 = sub_100005150(&qword_1000821C0);
    sub_10004367C(a1, (uint64_t)v6 + *(int *)(v33 + 44));
    v34 = &qword_1000821B0;
    v35 = v52;
    sub_10000EFC4((uint64_t)v6, v52, &qword_1000821B0);
    swift_storeEnumTagMultiPayload(v35, v49, 1);
  }
  else
  {
    v37 = v32 & 1;
    v38 = static HorizontalAlignment.center.getter(v31);
    v6 = v48;
    *v48 = v38;
    v6[1] = 0;
    *((_BYTE *)v6 + 16) = 1;
    v39 = sub_100005150(&qword_1000821E0);
    sub_100043298(v37, (uint64_t)v6 + *(int *)(v39 + 44));
    v34 = &qword_1000821A0;
    v35 = v52;
    sub_10000EFC4((uint64_t)v6, v52, &qword_1000821A0);
    swift_storeEnumTagMultiPayload(v35, v49, 0);
  }
  v36 = sub_10000EEA8(&qword_1000821C8, &qword_1000821A0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v40 = sub_10000EEA8(&qword_1000821D0, &qword_1000821B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v41 = (uint64_t)v53;
  _ConditionalContent<>.init(storage:)(v35, v54, v51, v36, v40);
  sub_10000F008((uint64_t)v6, v34);
  v42 = v50;
  sub_10000EF3C((uint64_t)v27, v50, type metadata accessor for WidgetArtworkView);
  v43 = v55;
  sub_10000EFC4(v41, v55, &qword_1000821B8);
  v44 = v56;
  sub_10000EF3C(v42, v56, type metadata accessor for WidgetArtworkView);
  v45 = sub_100005150(&qword_1000821D8);
  *(_QWORD *)(v44 + *(int *)(v45 + 48)) = 0x402E000000000000;
  sub_10000EFC4(v43, v44 + *(int *)(v45 + 64), &qword_1000821B8);
  sub_10000F008(v41, &qword_1000821B8);
  sub_10000EF80((uint64_t)v27, type metadata accessor for WidgetArtworkView);
  sub_10000F008(v43, &qword_1000821B8);
  return sub_10000EF80(v42, type metadata accessor for WidgetArtworkView);
}

uint64_t sub_10004315C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[3];
  _QWORD v17[2];

  v3 = type metadata accessor for UpNextEntry.Episode(0);
  v4 = a2 + *(int *)(v3 + 88);
  result = type metadata accessor for WidgetPredictedPlayState(0);
  v6 = (_QWORD *)(v4 + *(int *)(result + 32));
  v7 = v6[1];
  v17[0] = *v6;
  v17[1] = v7;
  v8 = (uint64_t *)(a2 + *(int *)(v3 + 84));
  v9 = *v8;
  if (*v8)
  {
    v10 = v8[1];
    v11 = v8[2];
    v16[0] = *v8;
    v16[1] = v10;
    v16[2] = v11;
    swift_bridgeObjectRetain(v7);
    sub_1000093E0(v9, v10, v11);
    v12 = sub_100005150(&qword_100082020);
    v13 = sub_10000EEA8(&qword_100082040, &qword_100082020, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    v14 = sub_1000248B8();
    v15 = sub_100009418();
    View.accessibilityAction<A, B>(named:intent:)(v17, v16, v12, &type metadata for String, &type metadata for PlayPauseWidgetIntent, v13, v14, v15);
    swift_bridgeObjectRelease(v7);
    swift_release(v11);
    swift_release(v10);
    return swift_release(v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100043298@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v41[4];
  int v42;
  uint64_t v43;

  v43 = a2;
  v42 = a1 & 1;
  v2 = type metadata accessor for WidgetEmptyText(0);
  __chkstk_darwin(v2);
  v4 = &v41[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_100005150(&qword_1000821E8);
  __chkstk_darwin(v5);
  v7 = &v41[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v10 = &v41[-v9];
  v11 = type metadata accessor for Logo(0);
  __chkstk_darwin(v11);
  v13 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v16 = &v41[-v15];
  v17 = sub_100005150(&qword_1000821F0);
  __chkstk_darwin(v17);
  v19 = &v41[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v22 = &v41[-v21];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_10006E1C0);
  v13[8] = 0;
  v23 = &v13[*(int *)(v11 + 20)];
  *v23 = swift_getKeyPath(&unk_10006E1E8);
  v24 = sub_100005150(&qword_100081DD0);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = &v13[*(int *)(v11 + 24)];
  *v25 = swift_getKeyPath(&unk_10006E218);
  v26 = sub_100005150(&qword_100081DC8);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  v27 = sub_10000FC78((uint64_t)v13, (uint64_t)v16, type metadata accessor for Logo);
  v28 = static Alignment.trailing.getter(v27);
  sub_100066314(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v19, 0.0, 1, 0.0, 1, v28, v29);
  sub_10000EF80((uint64_t)v16, type metadata accessor for Logo);
  sub_10000EEF8((uint64_t)v19, (uint64_t)v22, &qword_1000821F0);
  v30 = &v4[*(int *)(v2 + 20)];
  v31 = enum case for WidgetFamily.systemLarge(_:);
  v32 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v30, v31, v32);
  v33 = type metadata accessor for EpisodeViewStyle(0);
  v34 = swift_storeEnumTagMultiPayload(v30, v33, 1);
  *v4 = v42;
  v35 = static Alignment.leading.getter(v34);
  sub_10006636C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v7, 0.0, 1, 0.0, 1, v35, v36);
  sub_10000EF80((uint64_t)v4, type metadata accessor for WidgetEmptyText);
  sub_10000EEF8((uint64_t)v7, (uint64_t)v10, &qword_1000821E8);
  sub_10000EFC4((uint64_t)v22, (uint64_t)v19, &qword_1000821F0);
  sub_10000EFC4((uint64_t)v10, (uint64_t)v7, &qword_1000821E8);
  v37 = v43;
  sub_10000EFC4((uint64_t)v19, v43, &qword_1000821F0);
  v38 = sub_100005150(&qword_1000821F8);
  v39 = v37 + *(int *)(v38 + 48);
  *(_QWORD *)v39 = 0;
  *(_BYTE *)(v39 + 8) = 1;
  sub_10000EFC4((uint64_t)v7, v37 + *(int *)(v38 + 64), &qword_1000821E8);
  sub_10000F008((uint64_t)v10, &qword_1000821E8);
  sub_10000F008((uint64_t)v22, &qword_1000821F0);
  sub_10000F008((uint64_t)v7, &qword_1000821E8);
  return sub_10000F008((uint64_t)v19, &qword_1000821F0);
}

uint64_t sub_10004367C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];

  v51 = a2;
  v49 = type metadata accessor for PlayButtonLarge(0);
  __chkstk_darwin(v49);
  v50 = (uint64_t)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v48 = (uint64_t)&v46 - v5;
  v6 = type metadata accessor for Font.Leading(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005150(&qword_100082200);
  __chkstk_darwin(v10);
  v52 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - v13;
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v15);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v16 = sub_100005150(&qword_100082208);
  sub_1000439CC(a1, (uint64_t)&v14[*(int *)(v16 + 44)]);
  v47 = a1;
  v17 = *(_QWORD *)(a1 + 80);
  v53[0] = *(_QWORD *)(a1 + 72);
  v53[1] = v17;
  v18 = sub_1000248B8();
  swift_bridgeObjectRetain(v17);
  v19 = Text.init<A>(_:)(v53, &type metadata for String, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v26 = static Font.subheadline.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Font.Leading.tight(_:), v6);
  v27 = Font.leading(_:)(v9, v26);
  swift_release(v26);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v28 = Text.font(_:)(v27, v19, v21, v25, v23);
  v30 = v29;
  LOBYTE(v7) = v31;
  v33 = v32;
  swift_release(v27);
  LOBYTE(v27) = v7 & 1;
  sub_10000EEE8(v19, v21, v25);
  swift_bridgeObjectRelease(v23);
  v34 = v48;
  v35 = sub_10000EF3C(v47, v48, type metadata accessor for UpNextEntry.Episode);
  v36 = static Alignment.leading.getter(v35);
  v37 = (uint64_t *)(v34 + *(int *)(v49 + 20));
  *v37 = v36;
  v37[1] = v38;
  v39 = v52;
  sub_10000EFC4((uint64_t)v14, v52, &qword_100082200);
  v40 = v50;
  sub_10000EF3C(v34, v50, type metadata accessor for PlayButtonLarge);
  v41 = v39;
  v42 = v51;
  sub_10000EFC4(v41, v51, &qword_100082200);
  v43 = (int *)sub_100005150(&qword_100082210);
  v44 = v42 + v43[12];
  *(_QWORD *)v44 = v28;
  *(_QWORD *)(v44 + 8) = v30;
  *(_BYTE *)(v44 + 16) = v27;
  *(_QWORD *)(v44 + 24) = v33;
  *(_QWORD *)(v44 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(v42 + v43[16]) = 0x4010000000000000;
  sub_10000EF3C(v40, v42 + v43[20], type metadata accessor for PlayButtonLarge);
  sub_100024C4C(v28, v30, v27);
  swift_bridgeObjectRetain(v33);
  sub_10000EF80(v34, type metadata accessor for PlayButtonLarge);
  sub_10000F008((uint64_t)v14, &qword_100082200);
  sub_10000EF80(v40, type metadata accessor for PlayButtonLarge);
  sub_10000EEE8(v28, v30, v27);
  swift_bridgeObjectRelease(v33);
  return sub_10000F008(v52, &qword_100082200);
}

uint64_t sub_1000439CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  v4 = type metadata accessor for Logo(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - v8;
  v10 = sub_100005150(&qword_1000821F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - v14;
  v16 = sub_100005150(&qword_100082218);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v34 - v20;
  *(_QWORD *)v21 = static HorizontalAlignment.center.getter(v22);
  *((_QWORD *)v21 + 1) = 0;
  v21[16] = 1;
  v23 = sub_100005150(&qword_100082220);
  sub_100043CD4(a1, &v21[*(int *)(v23 + 44)]);
  *(_QWORD *)v6 = swift_getKeyPath(&unk_10006E1C0);
  v6[8] = 0;
  v24 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v24 = swift_getKeyPath(&unk_10006E1E8);
  v25 = sub_100005150(&qword_100081DD0);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  v26 = &v6[*(int *)(v4 + 24)];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_10006E218);
  v27 = sub_100005150(&qword_100081DC8);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = sub_10000FC78((uint64_t)v6, (uint64_t)v9, type metadata accessor for Logo);
  v29 = static Alignment.top.getter(v28);
  sub_100066314(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v12, 0.0, 1, INFINITY, 0, v29, v30);
  sub_10000EF80((uint64_t)v9, type metadata accessor for Logo);
  sub_10000EEF8((uint64_t)v12, (uint64_t)v15, &qword_1000821F0);
  sub_10000EFC4((uint64_t)v21, (uint64_t)v18, &qword_100082218);
  sub_10000EFC4((uint64_t)v15, (uint64_t)v12, &qword_1000821F0);
  sub_10000EFC4((uint64_t)v18, a2, &qword_100082218);
  v31 = sub_100005150(&qword_100082228);
  v32 = a2 + *(int *)(v31 + 48);
  *(_QWORD *)v32 = 0;
  *(_BYTE *)(v32 + 8) = 1;
  sub_10000EFC4((uint64_t)v12, a2 + *(int *)(v31 + 64), &qword_1000821F0);
  sub_10000F008((uint64_t)v15, &qword_1000821F0);
  sub_10000F008((uint64_t)v21, &qword_100082218);
  sub_10000F008((uint64_t)v12, &qword_1000821F0);
  return sub_10000F008((uint64_t)v18, &qword_100082218);
}

uint64_t sub_100043CD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v39 = a2;
  v3 = sub_100005150(&qword_100081980);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for EpisodeCaptionView(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_100081B70);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100005150(&qword_100082230);
  __chkstk_darwin(v37);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100005150(&qword_100082238);
  __chkstk_darwin(v38);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v36 - v17;
  v19 = sub_10000EF3C(a1, (uint64_t)v8, type metadata accessor for UpNextEntry.Episode);
  v8[v6[5]] = 1;
  v8[v6[6]] = 0;
  v8[v6[7]] = 0;
  v20 = static Font.caption2.getter(v19);
  v21 = Font.bold()();
  swift_release(v20);
  KeyPath = swift_getKeyPath(&unk_10006E248);
  sub_10000EF3C((uint64_t)v8, (uint64_t)v11, type metadata accessor for EpisodeCaptionView);
  v23 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *v23 = KeyPath;
  v23[1] = v21;
  sub_10000EF80((uint64_t)v8, type metadata accessor for EpisodeCaptionView);
  v24 = enum case for Text.Case.uppercase(_:);
  v25 = type metadata accessor for Text.Case(0);
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v5, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v5, 0, 1, v25);
  v27 = swift_getKeyPath(&unk_10006E278);
  v28 = (uint64_t *)&v13[*(int *)(v37 + 36)];
  v29 = sub_100005150(&qword_100081978);
  sub_10000EFC4((uint64_t)v5, (uint64_t)v28 + *(int *)(v29 + 28), &qword_100081980);
  *v28 = v27;
  sub_10000EFC4((uint64_t)v11, (uint64_t)v13, &qword_100081B70);
  sub_10000F008((uint64_t)v5, &qword_100081980);
  sub_10000F008((uint64_t)v11, &qword_100081B70);
  v30 = swift_getKeyPath(&unk_10006E2A8);
  sub_10000EFC4((uint64_t)v13, (uint64_t)v15, &qword_100082230);
  v31 = &v15[*(int *)(v38 + 36)];
  *(_QWORD *)v31 = v30;
  v31[8] = 0;
  sub_10000F008((uint64_t)v13, &qword_100082230);
  sub_10000EEF8((uint64_t)v15, (uint64_t)v18, &qword_100082238);
  sub_10000EFC4((uint64_t)v18, (uint64_t)v15, &qword_100082238);
  v32 = v39;
  *v39 = 0;
  *((_BYTE *)v32 + 8) = 1;
  v33 = v32;
  v34 = sub_100005150(&qword_100082240);
  sub_10000EFC4((uint64_t)v15, (uint64_t)v33 + *(int *)(v34 + 48), &qword_100082238);
  *(_QWORD *)((char *)v33 + *(int *)(v34 + 64)) = 0x4010000000000000;
  sub_10000F008((uint64_t)v18, &qword_100082238);
  return sub_10000F008((uint64_t)v15, &qword_100082238);
}

uint64_t sub_100044074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  int *v10;
  unsigned int (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)(type metadata accessor for EpisodeListWidgetLargeHeader(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v45 = *(_QWORD *)(v1 + 64);
  v46 = (v2 + 16) & ~v2;
  v47 = v0;
  v3 = v0 + v46;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v46 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v46 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v46 + 40));
  swift_release(*(_QWORD *)(v0 + v46 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v46 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v46 + 80));
  v4 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v5 = v0 + v46 + v4[10];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + v4[11] + 8));
  v9 = v3 + v4[12];
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
    v12 = *(unsigned __int8 *)(v9 + 32);
    if (v12 != 255)
      sub_100005624(*(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), v12);
    v13 = *(unsigned __int8 *)(v9 + 64);
    if (v13 != 255)
      sub_10000563C(*(id *)(v9 + 56), v13);
    v14 = *(unsigned __int8 *)(v9 + 80);
    if (v14 != 255)
      sub_10000563C(*(id *)(v9 + 72), v14);
    v15 = *(unsigned __int8 *)(v9 + 96);
    if (v15 != 255)
      sub_10000563C(*(id *)(v9 + 88), v15);
    v16 = *(unsigned __int8 *)(v9 + 112);
    if (v16 != 255)
      sub_10000563C(*(id *)(v9 + 104), v16);
    v17 = *(unsigned __int8 *)(v9 + 128);
    if (v17 != 255)
      sub_10000563C(*(id *)(v9 + 120), v17);
    v18 = v9 + v10[11];
    v19 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[16] + 8));
  }
  v20 = v3 + v4[13];
  if (!v11(v20, 1, v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + 8));
    v21 = *(unsigned __int8 *)(v20 + 32);
    if (v21 != 255)
      sub_100005624(*(_QWORD *)(v20 + 16), *(_QWORD *)(v20 + 24), v21);
    v22 = *(unsigned __int8 *)(v20 + 64);
    if (v22 != 255)
      sub_10000563C(*(id *)(v20 + 56), v22);
    v23 = *(unsigned __int8 *)(v20 + 80);
    if (v23 != 255)
      sub_10000563C(*(id *)(v20 + 72), v23);
    v24 = *(unsigned __int8 *)(v20 + 96);
    if (v24 != 255)
      sub_10000563C(*(id *)(v20 + 88), v24);
    v25 = *(unsigned __int8 *)(v20 + 112);
    if (v25 != 255)
      sub_10000563C(*(id *)(v20 + 104), v25);
    v26 = *(unsigned __int8 *)(v20 + 128);
    if (v26 != 255)
      sub_10000563C(*(id *)(v20 + 120), v26);
    v27 = v20 + v10[11];
    v28 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + v10[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + v10[16] + 8));
  }

  v29 = v3 + v4[15];
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
  v32 = v3 + v4[19];
  if (!v8(v32, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v32, v6);
  v33 = v3 + v4[20];
  if (!v8(v33, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v33, v6);
  v34 = (_QWORD *)(v3 + v4[21]);
  if (*v34)
  {
    swift_release(*v34);
    swift_release(v34[1]);
    swift_release(v34[2]);
  }
  v35 = v3 + v4[22];
  v36 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
  {
    v37 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v37(v35, v6);
    v37(v35 + *(int *)(v36 + 36), v6);
  }
  v38 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v39 = v35 + v38[5];
  v40 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = v35 + v38[6];
  v42 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v43 = *(_QWORD *)(v42 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
  swift_bridgeObjectRelease(*(_QWORD *)(v35 + v38[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v35 + v38[8] + 8));
  return swift_deallocObject(v47, v46 + v45, v2 | 7);
}

uint64_t sub_100044500()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EpisodeListWidgetLargeHeader(0) - 8) + 80);
  return sub_100042A84(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10004453C(uint64_t a1)
{
  uint64_t v1;

  return sub_10004315C(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_100044544()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082190;
  if (!qword_100082190)
  {
    v1 = sub_10000950C(&qword_100082180);
    sub_10000EEA8(&qword_100082198, &qword_100082178, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082190);
  }
  return result;
}

unint64_t sub_1000445F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082248;
  if (!qword_100082248)
  {
    v1 = sub_10000950C(&qword_100082250);
    sub_100044678();
    sub_10000EEA8(&qword_100082040, &qword_100082020, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082248);
  }
  return result;
}

unint64_t sub_100044678()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082038;
  if (!qword_100082038)
  {
    v1 = sub_10000950C(&qword_100082030);
    sub_10000EEA8(&qword_100082040, &qword_100082020, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_10000ED38();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082038);
  }
  return result;
}

_QWORD *sub_1000446FC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id *v49;
  int v50;
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *__dst;
  void *__dsta;
  _QWORD *v162;
  _QWORD *v163;
  unsigned int (*v165)(char *, uint64_t, uint64_t);
  int *v166;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v10 = a2[6];
    v9 = a2[7];
    a1[6] = v10;
    a1[7] = v9;
    v12 = a2[8];
    v11 = a2[9];
    a1[8] = v12;
    a1[9] = v11;
    v13 = a2[10];
    a1[10] = v13;
    v166 = (int *)type metadata accessor for UpNextEntry.Episode(0);
    v14 = v166[10];
    __dst = (char *)a1 + v14;
    v162 = a1;
    v163 = a2;
    v15 = (char *)a2 + v14;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_retain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v165 = v18;
    if (v18(v15, 1, v16))
    {
      v19 = sub_100005150(&qword_100081028);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v22 = v166[11];
    v21 = v162;
    v23 = (_QWORD *)((char *)v162 + v22);
    v24 = (_QWORD *)((char *)v163 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v166[12];
    v27 = (_QWORD *)((char *)v162 + v26);
    v28 = (_QWORD *)((char *)v163 + v26);
    v29 = (int *)type metadata accessor for ArtworkModel(0);
    v30 = *((_QWORD *)v29 - 1);
    v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
    swift_bridgeObjectRetain(v25);
    if (v31(v28, 1, v29))
    {
      v32 = sub_100005150(&qword_100081030);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      __dsta = (void *)v16;
      v33 = v28[1];
      *v27 = *v28;
      v27[1] = v33;
      v34 = *((unsigned __int8 *)v28 + 32);
      swift_bridgeObjectRetain(v33);
      if (v34 == 255)
      {
        *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
        *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
      }
      else
      {
        v35 = v28[2];
        v36 = v28[3];
        sub_100005190(v35, v36, v34);
        v27[2] = v35;
        v27[3] = v36;
        *((_BYTE *)v27 + 32) = v34;
      }
      *(_OWORD *)(v27 + 5) = *(_OWORD *)(v28 + 5);
      v37 = (id *)(v28 + 7);
      v38 = *((unsigned __int8 *)v28 + 64);
      if (v38 == 255)
      {
        v27[7] = *v37;
        *((_BYTE *)v27 + 64) = *((_BYTE *)v28 + 64);
      }
      else
      {
        v39 = *v37;
        sub_1000051A8(*v37, *((_BYTE *)v28 + 64));
        v27[7] = v39;
        *((_BYTE *)v27 + 64) = v38;
      }
      v40 = (id *)(v28 + 9);
      v41 = *((unsigned __int8 *)v28 + 80);
      if (v41 == 255)
      {
        v27[9] = *v40;
        *((_BYTE *)v27 + 80) = *((_BYTE *)v28 + 80);
      }
      else
      {
        v42 = *v40;
        sub_1000051A8(*v40, *((_BYTE *)v28 + 80));
        v27[9] = v42;
        *((_BYTE *)v27 + 80) = v41;
      }
      v43 = (id *)(v28 + 11);
      v44 = *((unsigned __int8 *)v28 + 96);
      if (v44 == 255)
      {
        v27[11] = *v43;
        *((_BYTE *)v27 + 96) = *((_BYTE *)v28 + 96);
      }
      else
      {
        v45 = *v43;
        sub_1000051A8(*v43, *((_BYTE *)v28 + 96));
        v27[11] = v45;
        *((_BYTE *)v27 + 96) = v44;
      }
      v46 = (id *)(v28 + 13);
      v47 = *((unsigned __int8 *)v28 + 112);
      if (v47 == 255)
      {
        v27[13] = *v46;
        *((_BYTE *)v27 + 112) = *((_BYTE *)v28 + 112);
      }
      else
      {
        v48 = *v46;
        sub_1000051A8(*v46, *((_BYTE *)v28 + 112));
        v27[13] = v48;
        *((_BYTE *)v27 + 112) = v47;
      }
      v49 = (id *)(v28 + 15);
      v50 = *((unsigned __int8 *)v28 + 128);
      if (v50 == 255)
      {
        v27[15] = *v49;
        *((_BYTE *)v27 + 128) = *((_BYTE *)v28 + 128);
      }
      else
      {
        v51 = *v49;
        sub_1000051A8(*v49, *((_BYTE *)v28 + 128));
        v27[15] = v51;
        *((_BYTE *)v27 + 128) = v50;
      }
      v16 = (uint64_t)__dsta;
      *((_BYTE *)v27 + 129) = *((_BYTE *)v28 + 129);
      v52 = v29[11];
      v53 = (char *)v27 + v52;
      v54 = (char *)v28 + v52;
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      v56 = v29[12];
      v57 = (_QWORD *)((char *)v27 + v56);
      v58 = (_QWORD *)((char *)v28 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
      *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
      *((_BYTE *)v27 + v29[15]) = *((_BYTE *)v28 + v29[15]);
      v60 = v29[16];
      v61 = (_QWORD *)((char *)v27 + v60);
      v62 = (_QWORD *)((char *)v28 + v60);
      v63 = v62[1];
      *v61 = *v62;
      v61[1] = v63;
      v64 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      v64(v27, 0, 1, v29);
    }
    v65 = v166[13];
    v66 = (_QWORD *)((char *)v162 + v65);
    v67 = (_QWORD *)((char *)v163 + v65);
    if (v31((_QWORD *)((char *)v163 + v65), 1, v29))
    {
      v68 = sub_100005150(&qword_100081030);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = v16;
      v70 = v67[1];
      *v66 = *v67;
      v66[1] = v70;
      v71 = *((unsigned __int8 *)v67 + 32);
      swift_bridgeObjectRetain(v70);
      if (v71 == 255)
      {
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        *((_BYTE *)v66 + 32) = *((_BYTE *)v67 + 32);
      }
      else
      {
        v72 = v67[2];
        v73 = v67[3];
        sub_100005190(v72, v73, v71);
        v66[2] = v72;
        v66[3] = v73;
        *((_BYTE *)v66 + 32) = v71;
      }
      *(_OWORD *)(v66 + 5) = *(_OWORD *)(v67 + 5);
      v74 = (id *)(v67 + 7);
      v75 = *((unsigned __int8 *)v67 + 64);
      if (v75 == 255)
      {
        v66[7] = *v74;
        *((_BYTE *)v66 + 64) = *((_BYTE *)v67 + 64);
      }
      else
      {
        v76 = *v74;
        sub_1000051A8(*v74, *((_BYTE *)v67 + 64));
        v66[7] = v76;
        *((_BYTE *)v66 + 64) = v75;
      }
      v77 = (id *)(v67 + 9);
      v78 = *((unsigned __int8 *)v67 + 80);
      if (v78 == 255)
      {
        v66[9] = *v77;
        *((_BYTE *)v66 + 80) = *((_BYTE *)v67 + 80);
      }
      else
      {
        v79 = *v77;
        sub_1000051A8(*v77, *((_BYTE *)v67 + 80));
        v66[9] = v79;
        *((_BYTE *)v66 + 80) = v78;
      }
      v80 = (id *)(v67 + 11);
      v81 = *((unsigned __int8 *)v67 + 96);
      if (v81 == 255)
      {
        v66[11] = *v80;
        *((_BYTE *)v66 + 96) = *((_BYTE *)v67 + 96);
      }
      else
      {
        v82 = *v80;
        sub_1000051A8(*v80, *((_BYTE *)v67 + 96));
        v66[11] = v82;
        *((_BYTE *)v66 + 96) = v81;
      }
      v83 = (id *)(v67 + 13);
      v84 = *((unsigned __int8 *)v67 + 112);
      if (v84 == 255)
      {
        v66[13] = *v83;
        *((_BYTE *)v66 + 112) = *((_BYTE *)v67 + 112);
      }
      else
      {
        v85 = *v83;
        sub_1000051A8(*v83, *((_BYTE *)v67 + 112));
        v66[13] = v85;
        *((_BYTE *)v66 + 112) = v84;
      }
      v86 = (id *)(v67 + 15);
      v87 = *((unsigned __int8 *)v67 + 128);
      if (v87 == 255)
      {
        v66[15] = *v86;
        *((_BYTE *)v66 + 128) = *((_BYTE *)v67 + 128);
      }
      else
      {
        v88 = *v86;
        sub_1000051A8(*v86, *((_BYTE *)v67 + 128));
        v66[15] = v88;
        *((_BYTE *)v66 + 128) = v87;
      }
      v16 = v69;
      *((_BYTE *)v66 + 129) = *((_BYTE *)v67 + 129);
      v89 = v29[11];
      v90 = (char *)v66 + v89;
      v91 = (char *)v67 + v89;
      v92 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = v29[12];
      v94 = (_QWORD *)((char *)v66 + v93);
      v95 = (_QWORD *)((char *)v67 + v93);
      v96 = v95[1];
      *v94 = *v95;
      v94[1] = v96;
      *((_BYTE *)v66 + v29[13]) = *((_BYTE *)v67 + v29[13]);
      *((_BYTE *)v66 + v29[14]) = *((_BYTE *)v67 + v29[14]);
      *((_BYTE *)v66 + v29[15]) = *((_BYTE *)v67 + v29[15]);
      v97 = v29[16];
      v98 = (_QWORD *)((char *)v66 + v97);
      v99 = (_QWORD *)((char *)v67 + v97);
      v100 = v99[1];
      *v98 = *v99;
      v98[1] = v100;
      v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v100);
      v101(v66, 0, 1, v29);
    }
    v102 = v166[14];
    v103 = *(void **)((char *)v163 + v102);
    *(_QWORD *)((char *)v162 + v102) = v103;
    v104 = v166[15];
    v105 = (char *)v162 + v104;
    v106 = (char *)v163 + v104;
    v107 = type metadata accessor for URL(0);
    v108 = *(_QWORD *)(v107 - 8);
    v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
    v110 = v103;
    if (v109(v106, 1, v107))
    {
      v111 = sub_100005150(&qword_100081038);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    *((_BYTE *)v162 + v166[16]) = *((_BYTE *)v163 + v166[16]);
    v112 = v166[17];
    v113 = (char *)v162 + v112;
    v114 = (char *)v163 + v112;
    *(_QWORD *)v113 = *(_QWORD *)v114;
    v113[8] = v114[8];
    v115 = v166[18];
    v116 = (char *)v162 + v115;
    v117 = (char *)v163 + v115;
    *(_QWORD *)v116 = *(_QWORD *)v117;
    v116[8] = v117[8];
    v118 = v166[19];
    v119 = (char *)v162 + v118;
    v120 = (char *)v163 + v118;
    if (v165((char *)v163 + v118, 1, v16))
    {
      v121 = sub_100005150(&qword_100081028);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v119, v120, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v119, 0, 1, v16);
    }
    v122 = v166[20];
    v123 = (char *)v162 + v122;
    v124 = (char *)v163 + v122;
    if (v165((char *)v163 + v122, 1, v16))
    {
      v125 = sub_100005150(&qword_100081028);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v123, v124, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v123, 0, 1, v16);
    }
    v126 = v166[21];
    v127 = (_QWORD *)((char *)v162 + v126);
    v128 = (_QWORD *)((char *)v163 + v126);
    v129 = *v128;
    if (*v128)
    {
      v130 = v128[1];
      v131 = v128[2];
      *v127 = v129;
      v127[1] = v130;
      v127[2] = v131;
      swift_retain(v129);
      swift_retain(v130);
      swift_retain(v131);
    }
    else
    {
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v127[2] = v128[2];
    }
    v132 = v166[22];
    v133 = (char *)v162 + v132;
    v134 = (char *)v163 + v132;
    v135 = sub_100005150(&qword_100081040);
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_100005150(&qword_100081048);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v138(v133, v134, v16);
      v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    v140 = v139[5];
    v141 = &v133[v140];
    v142 = &v134[v140];
    v143 = type metadata accessor for PlaybackButton.State(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
    v144 = v139[6];
    v145 = &v133[v144];
    v146 = &v134[v144];
    v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
    {
      v149 = sub_100005150(&qword_100081050);
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
    }
    v150 = v139[7];
    v151 = &v133[v150];
    v152 = &v134[v150];
    v153 = *((_QWORD *)v152 + 1);
    *(_QWORD *)v151 = *(_QWORD *)v152;
    *((_QWORD *)v151 + 1) = v153;
    v154 = v139[8];
    v155 = &v133[v154];
    v156 = &v134[v154];
    v157 = *((_QWORD *)v156 + 1);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v157;
    v158 = a3[6];
    *((_BYTE *)v162 + a3[5]) = *((_BYTE *)v163 + a3[5]);
    *((_BYTE *)v162 + v158) = *((_BYTE *)v163 + v158);
    *((_BYTE *)v162 + a3[7]) = *((_BYTE *)v163 + a3[7]);
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v157);
  }
  return v21;
}

_QWORD *sub_100045188(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(_QWORD *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  id *v34;
  int v35;
  id v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  id *v71;
  int v72;
  id v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void (*v98)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v99;
  void *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(char *, uint64_t, uint64_t);
  id v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *__dst;
  void *__dsta;
  _QWORD *v159;
  _QWORD *v160;
  int *v162;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v9 = a2[6];
  v8 = a2[7];
  a1[6] = v9;
  a1[7] = v8;
  v11 = a2[8];
  v10 = a2[9];
  a1[8] = v11;
  a1[9] = v10;
  v12 = a2[10];
  a1[10] = v12;
  v162 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v13 = v162[10];
  __dst = (char *)a1 + v13;
  v159 = a1;
  v160 = a2;
  v14 = (char *)a2 + v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  if (v17(v14, 1, v15))
  {
    v18 = sub_100005150(&qword_100081028);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = v162[11];
  v20 = (_QWORD *)((char *)v159 + v19);
  v21 = (_QWORD *)((char *)v160 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v162[12];
  v24 = (_QWORD *)((char *)v159 + v23);
  v25 = (_QWORD *)((char *)v160 + v23);
  v26 = (int *)type metadata accessor for ArtworkModel(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48);
  swift_bridgeObjectRetain(v22);
  if (v28(v25, 1, v26))
  {
    v29 = sub_100005150(&qword_100081030);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    __dsta = (void *)v15;
    v30 = v25[1];
    *v24 = *v25;
    v24[1] = v30;
    v31 = *((unsigned __int8 *)v25 + 32);
    swift_bridgeObjectRetain(v30);
    if (v31 == 255)
    {
      *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
      *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
    }
    else
    {
      v32 = v25[2];
      v33 = v25[3];
      sub_100005190(v32, v33, v31);
      v24[2] = v32;
      v24[3] = v33;
      *((_BYTE *)v24 + 32) = v31;
    }
    *(_OWORD *)(v24 + 5) = *(_OWORD *)(v25 + 5);
    v34 = (id *)(v25 + 7);
    v35 = *((unsigned __int8 *)v25 + 64);
    if (v35 == 255)
    {
      v24[7] = *v34;
      *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
    }
    else
    {
      v36 = *v34;
      sub_1000051A8(*v34, *((_BYTE *)v25 + 64));
      v24[7] = v36;
      *((_BYTE *)v24 + 64) = v35;
    }
    v37 = (id *)(v25 + 9);
    v38 = *((unsigned __int8 *)v25 + 80);
    if (v38 == 255)
    {
      v24[9] = *v37;
      *((_BYTE *)v24 + 80) = *((_BYTE *)v25 + 80);
    }
    else
    {
      v39 = *v37;
      sub_1000051A8(*v37, *((_BYTE *)v25 + 80));
      v24[9] = v39;
      *((_BYTE *)v24 + 80) = v38;
    }
    v40 = (id *)(v25 + 11);
    v41 = *((unsigned __int8 *)v25 + 96);
    if (v41 == 255)
    {
      v24[11] = *v40;
      *((_BYTE *)v24 + 96) = *((_BYTE *)v25 + 96);
    }
    else
    {
      v42 = *v40;
      sub_1000051A8(*v40, *((_BYTE *)v25 + 96));
      v24[11] = v42;
      *((_BYTE *)v24 + 96) = v41;
    }
    v43 = (id *)(v25 + 13);
    v44 = *((unsigned __int8 *)v25 + 112);
    if (v44 == 255)
    {
      v24[13] = *v43;
      *((_BYTE *)v24 + 112) = *((_BYTE *)v25 + 112);
    }
    else
    {
      v45 = *v43;
      sub_1000051A8(*v43, *((_BYTE *)v25 + 112));
      v24[13] = v45;
      *((_BYTE *)v24 + 112) = v44;
    }
    v46 = (id *)(v25 + 15);
    v47 = *((unsigned __int8 *)v25 + 128);
    if (v47 == 255)
    {
      v24[15] = *v46;
      *((_BYTE *)v24 + 128) = *((_BYTE *)v25 + 128);
    }
    else
    {
      v48 = *v46;
      sub_1000051A8(*v46, *((_BYTE *)v25 + 128));
      v24[15] = v48;
      *((_BYTE *)v24 + 128) = v47;
    }
    v15 = (uint64_t)__dsta;
    *((_BYTE *)v24 + 129) = *((_BYTE *)v25 + 129);
    v49 = v26[11];
    v50 = (char *)v24 + v49;
    v51 = (char *)v25 + v49;
    v52 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
    v53 = v26[12];
    v54 = (_QWORD *)((char *)v24 + v53);
    v55 = (_QWORD *)((char *)v25 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    *((_BYTE *)v24 + v26[13]) = *((_BYTE *)v25 + v26[13]);
    *((_BYTE *)v24 + v26[14]) = *((_BYTE *)v25 + v26[14]);
    *((_BYTE *)v24 + v26[15]) = *((_BYTE *)v25 + v26[15]);
    v57 = v26[16];
    v58 = (_QWORD *)((char *)v24 + v57);
    v59 = (_QWORD *)((char *)v25 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v60);
    v61(v24, 0, 1, v26);
  }
  v62 = v162[13];
  v63 = (_QWORD *)((char *)v159 + v62);
  v64 = (_QWORD *)((char *)v160 + v62);
  if (v28((_QWORD *)((char *)v160 + v62), 1, v26))
  {
    v65 = sub_100005150(&qword_100081030);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    v66 = v15;
    v67 = v64[1];
    *v63 = *v64;
    v63[1] = v67;
    v68 = *((unsigned __int8 *)v64 + 32);
    swift_bridgeObjectRetain(v67);
    if (v68 == 255)
    {
      *((_OWORD *)v63 + 1) = *((_OWORD *)v64 + 1);
      *((_BYTE *)v63 + 32) = *((_BYTE *)v64 + 32);
    }
    else
    {
      v69 = v64[2];
      v70 = v64[3];
      sub_100005190(v69, v70, v68);
      v63[2] = v69;
      v63[3] = v70;
      *((_BYTE *)v63 + 32) = v68;
    }
    *(_OWORD *)(v63 + 5) = *(_OWORD *)(v64 + 5);
    v71 = (id *)(v64 + 7);
    v72 = *((unsigned __int8 *)v64 + 64);
    if (v72 == 255)
    {
      v63[7] = *v71;
      *((_BYTE *)v63 + 64) = *((_BYTE *)v64 + 64);
    }
    else
    {
      v73 = *v71;
      sub_1000051A8(*v71, *((_BYTE *)v64 + 64));
      v63[7] = v73;
      *((_BYTE *)v63 + 64) = v72;
    }
    v74 = (id *)(v64 + 9);
    v75 = *((unsigned __int8 *)v64 + 80);
    if (v75 == 255)
    {
      v63[9] = *v74;
      *((_BYTE *)v63 + 80) = *((_BYTE *)v64 + 80);
    }
    else
    {
      v76 = *v74;
      sub_1000051A8(*v74, *((_BYTE *)v64 + 80));
      v63[9] = v76;
      *((_BYTE *)v63 + 80) = v75;
    }
    v77 = (id *)(v64 + 11);
    v78 = *((unsigned __int8 *)v64 + 96);
    if (v78 == 255)
    {
      v63[11] = *v77;
      *((_BYTE *)v63 + 96) = *((_BYTE *)v64 + 96);
    }
    else
    {
      v79 = *v77;
      sub_1000051A8(*v77, *((_BYTE *)v64 + 96));
      v63[11] = v79;
      *((_BYTE *)v63 + 96) = v78;
    }
    v80 = (id *)(v64 + 13);
    v81 = *((unsigned __int8 *)v64 + 112);
    if (v81 == 255)
    {
      v63[13] = *v80;
      *((_BYTE *)v63 + 112) = *((_BYTE *)v64 + 112);
    }
    else
    {
      v82 = *v80;
      sub_1000051A8(*v80, *((_BYTE *)v64 + 112));
      v63[13] = v82;
      *((_BYTE *)v63 + 112) = v81;
    }
    v83 = (id *)(v64 + 15);
    v84 = *((unsigned __int8 *)v64 + 128);
    if (v84 == 255)
    {
      v63[15] = *v83;
      *((_BYTE *)v63 + 128) = *((_BYTE *)v64 + 128);
    }
    else
    {
      v85 = *v83;
      sub_1000051A8(*v83, *((_BYTE *)v64 + 128));
      v63[15] = v85;
      *((_BYTE *)v63 + 128) = v84;
    }
    v15 = v66;
    *((_BYTE *)v63 + 129) = *((_BYTE *)v64 + 129);
    v86 = v26[11];
    v87 = (char *)v63 + v86;
    v88 = (char *)v64 + v86;
    v89 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
    v90 = v26[12];
    v91 = (_QWORD *)((char *)v63 + v90);
    v92 = (_QWORD *)((char *)v64 + v90);
    v93 = v92[1];
    *v91 = *v92;
    v91[1] = v93;
    *((_BYTE *)v63 + v26[13]) = *((_BYTE *)v64 + v26[13]);
    *((_BYTE *)v63 + v26[14]) = *((_BYTE *)v64 + v26[14]);
    *((_BYTE *)v63 + v26[15]) = *((_BYTE *)v64 + v26[15]);
    v94 = v26[16];
    v95 = (_QWORD *)((char *)v63 + v94);
    v96 = (_QWORD *)((char *)v64 + v94);
    v97 = v96[1];
    *v95 = *v96;
    v95[1] = v97;
    v98 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v97);
    v98(v63, 0, 1, v26);
  }
  v99 = v162[14];
  v100 = *(void **)((char *)v160 + v99);
  *(_QWORD *)((char *)v159 + v99) = v100;
  v101 = v162[15];
  v102 = (char *)v159 + v101;
  v103 = (char *)v160 + v101;
  v104 = type metadata accessor for URL(0);
  v105 = *(_QWORD *)(v104 - 8);
  v106 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v107 = v100;
  if (v106(v103, 1, v104))
  {
    v108 = sub_100005150(&qword_100081038);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v102, v103, v104);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
  }
  *((_BYTE *)v159 + v162[16]) = *((_BYTE *)v160 + v162[16]);
  v109 = v162[17];
  v110 = (char *)v159 + v109;
  v111 = (char *)v160 + v109;
  *(_QWORD *)v110 = *(_QWORD *)v111;
  v110[8] = v111[8];
  v112 = v162[18];
  v113 = (char *)v159 + v112;
  v114 = (char *)v160 + v112;
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v113[8] = v114[8];
  v115 = v162[19];
  v116 = (char *)v159 + v115;
  v117 = (char *)v160 + v115;
  if (v17((char *)v160 + v115, 1, v15))
  {
    v118 = sub_100005150(&qword_100081028);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v116, v117, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v116, 0, 1, v15);
  }
  v119 = v162[20];
  v120 = (char *)v159 + v119;
  v121 = (char *)v160 + v119;
  if (v17((char *)v160 + v119, 1, v15))
  {
    v122 = sub_100005150(&qword_100081028);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v120, v121, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v120, 0, 1, v15);
  }
  v123 = v162[21];
  v124 = (_QWORD *)((char *)v159 + v123);
  v125 = (_QWORD *)((char *)v160 + v123);
  v126 = *v125;
  if (*v125)
  {
    v127 = v125[1];
    v128 = v125[2];
    *v124 = v126;
    v124[1] = v127;
    v124[2] = v128;
    swift_retain(v126);
    swift_retain(v127);
    swift_retain(v128);
  }
  else
  {
    *(_OWORD *)v124 = *(_OWORD *)v125;
    v124[2] = v125[2];
  }
  v129 = v162[22];
  v130 = (char *)v159 + v129;
  v131 = (char *)v160 + v129;
  v132 = sub_100005150(&qword_100081040);
  v133 = *(_QWORD *)(v132 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
  {
    v134 = sub_100005150(&qword_100081048);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
  }
  else
  {
    v135 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v135(v130, v131, v15);
    v135(&v130[*(int *)(v132 + 36)], &v131[*(int *)(v132 + 36)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
  }
  v136 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v137 = v136[5];
  v138 = &v130[v137];
  v139 = &v131[v137];
  v140 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
  v141 = v136[6];
  v142 = &v130[v141];
  v143 = &v131[v141];
  v144 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v145 = *(_QWORD *)(v144 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
  {
    v146 = sub_100005150(&qword_100081050);
    memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v142, v143, v144);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
  }
  v147 = v136[7];
  v148 = &v130[v147];
  v149 = &v131[v147];
  v150 = *((_QWORD *)v149 + 1);
  *(_QWORD *)v148 = *(_QWORD *)v149;
  *((_QWORD *)v148 + 1) = v150;
  v151 = v136[8];
  v152 = &v130[v151];
  v153 = &v131[v151];
  v154 = *((_QWORD *)v153 + 1);
  *(_QWORD *)v152 = *(_QWORD *)v153;
  *((_QWORD *)v152 + 1) = v154;
  v155 = a3[6];
  *((_BYTE *)v159 + a3[5]) = *((_BYTE *)v160 + a3[5]);
  *((_BYTE *)v159 + v155) = *((_BYTE *)v160 + v155);
  *((_BYTE *)v159 + a3[7]) = *((_BYTE *)v160 + a3[7]);
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRetain(v154);
  return v159;
}

_QWORD *sub_100045BE8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  __int128 v55;
  id *v56;
  int v57;
  id v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id v67;
  id *v68;
  int v69;
  id v70;
  id v71;
  id *v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  void **v93;
  void **v94;
  int v95;
  void *v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  void **v102;
  void **v103;
  int v104;
  void *v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  void **v111;
  void **v112;
  int v113;
  void *v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  void *v119;
  void **v120;
  void **v121;
  int v122;
  void *v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  void **v129;
  void **v130;
  int v131;
  void *v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  __int128 *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  __int128 v174;
  id *v175;
  int v176;
  id v177;
  id v178;
  id *v179;
  int v180;
  id v181;
  id v182;
  id *v183;
  int v184;
  id v185;
  id v186;
  id *v187;
  int v188;
  id v189;
  id v190;
  id *v191;
  int v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v208;
  uint64_t v209;
  char v210;
  __int128 v211;
  void **v212;
  void **v213;
  int v214;
  void *v215;
  void *v216;
  char v217;
  void *v218;
  char v219;
  void *v220;
  void **v221;
  void **v222;
  int v223;
  void *v224;
  void *v225;
  char v226;
  void *v227;
  char v228;
  void *v229;
  void **v230;
  void **v231;
  int v232;
  void *v233;
  void *v234;
  char v235;
  void *v236;
  char v237;
  void *v238;
  void **v239;
  void **v240;
  int v241;
  void *v242;
  void *v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  void **v248;
  void **v249;
  int v250;
  void *v251;
  void *v252;
  char v253;
  void *v254;
  char v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  id v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (*v280)(char *, uint64_t, uint64_t);
  int v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (*v321)(char *, uint64_t, uint64_t);
  int v322;
  int v323;
  void (*v324)(char *, char *, uint64_t);
  uint64_t v325;
  int *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t (*v336)(char *, uint64_t, uint64_t);
  int v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  void (*v350)(char *, char *, uint64_t);
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t (*v354)(char *, uint64_t, uint64_t);
  uint64_t v355;
  int *v356;
  _QWORD *v357;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[9] = a2[9];
  v16 = a2[10];
  v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v19 = v18[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v354 = v24;
  v26 = v24(v21, 1, v22);
  v355 = v23;
  v356 = a3;
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100005150(&qword_100081028);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v28 = v18[11];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v18[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v353 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v353 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      v351 = v22;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v40 = *((_QWORD *)v35 + 1);
      *(_QWORD *)(v34 + 8) = v40;
      v41 = v35[32];
      swift_bridgeObjectRetain(v40);
      if (v41 == 255)
      {
        v55 = *((_OWORD *)v35 + 1);
        *(_BYTE *)(v34 + 32) = v35[32];
        *(_OWORD *)(v34 + 16) = v55;
      }
      else
      {
        v42 = *((_QWORD *)v35 + 2);
        v43 = *((_QWORD *)v35 + 3);
        sub_100005190(v42, v43, v41);
        *(_QWORD *)(v34 + 16) = v42;
        *(_QWORD *)(v34 + 24) = v43;
        *(_BYTE *)(v34 + 32) = v41;
      }
      *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
      *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
      v56 = (id *)(v35 + 56);
      v57 = v35[64];
      if (v57 == 255)
      {
        v59 = *v56;
        *(_BYTE *)(v34 + 64) = v35[64];
        *(_QWORD *)(v34 + 56) = v59;
      }
      else
      {
        v58 = *v56;
        sub_1000051A8(*v56, v35[64]);
        *(_QWORD *)(v34 + 56) = v58;
        *(_BYTE *)(v34 + 64) = v57;
      }
      v22 = v351;
      v60 = (id *)(v35 + 72);
      v61 = v35[80];
      if (v61 == 255)
      {
        v63 = *v60;
        *(_BYTE *)(v34 + 80) = v35[80];
        *(_QWORD *)(v34 + 72) = v63;
      }
      else
      {
        v62 = *v60;
        sub_1000051A8(*v60, v35[80]);
        *(_QWORD *)(v34 + 72) = v62;
        *(_BYTE *)(v34 + 80) = v61;
      }
      v64 = (id *)(v35 + 88);
      v65 = v35[96];
      if (v65 == 255)
      {
        v67 = *v64;
        *(_BYTE *)(v34 + 96) = v35[96];
        *(_QWORD *)(v34 + 88) = v67;
      }
      else
      {
        v66 = *v64;
        sub_1000051A8(*v64, v35[96]);
        *(_QWORD *)(v34 + 88) = v66;
        *(_BYTE *)(v34 + 96) = v65;
      }
      v68 = (id *)(v35 + 104);
      v69 = v35[112];
      if (v69 == 255)
      {
        v71 = *v68;
        *(_BYTE *)(v34 + 112) = v35[112];
        *(_QWORD *)(v34 + 104) = v71;
      }
      else
      {
        v70 = *v68;
        sub_1000051A8(*v68, v35[112]);
        *(_QWORD *)(v34 + 104) = v70;
        *(_BYTE *)(v34 + 112) = v69;
      }
      v72 = (id *)(v35 + 120);
      v73 = v35[128];
      if (v73 == 255)
      {
        v75 = *v72;
        *(_BYTE *)(v34 + 128) = v35[128];
        *(_QWORD *)(v34 + 120) = v75;
      }
      else
      {
        v74 = *v72;
        sub_1000051A8(*v72, v35[128]);
        *(_QWORD *)(v34 + 120) = v74;
        *(_BYTE *)(v34 + 128) = v73;
      }
      *(_BYTE *)(v34 + 129) = v35[129];
      v76 = v36[11];
      v77 = v34 + v76;
      v78 = &v35[v76];
      v79 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v80 = v36[12];
      v81 = (_QWORD *)(v34 + v80);
      v82 = &v35[v80];
      *v81 = *(_QWORD *)v82;
      v83 = *((_QWORD *)v82 + 1);
      v81[1] = v83;
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      v84 = v36[16];
      v85 = (_QWORD *)(v34 + v84);
      v86 = &v35[v84];
      *v85 = *(_QWORD *)v86;
      v87 = *((_QWORD *)v86 + 1);
      v85[1] = v87;
      v88 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v353 + 56);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v88(v34, 0, 1, v36);
      goto LABEL_75;
    }
LABEL_13:
    v44 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_75;
  }
  if (v39)
  {
    sub_1000077D8(v34);
    goto LABEL_13;
  }
  v352 = v22;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v45 = *((_QWORD *)v35 + 1);
  v46 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = (__int128 *)(v34 + 16);
  v48 = (__int128 *)(v35 + 16);
  v49 = v35[32];
  if (*(unsigned __int8 *)(v34 + 32) == 255)
  {
    if (v49 == 255)
    {
      v92 = *v48;
      *(_BYTE *)(v34 + 32) = v35[32];
      *v47 = v92;
    }
    else
    {
      v89 = *((_QWORD *)v35 + 2);
      v90 = *((_QWORD *)v35 + 3);
      sub_100005190(v89, v90, v35[32]);
      *(_QWORD *)(v34 + 16) = v89;
      *(_QWORD *)(v34 + 24) = v90;
      *(_BYTE *)(v34 + 32) = v49;
    }
  }
  else if (v49 == 255)
  {
    sub_100007770(v34 + 16);
    v91 = v35[32];
    *v47 = *v48;
    *(_BYTE *)(v34 + 32) = v91;
  }
  else
  {
    v51 = *((_QWORD *)v35 + 2);
    v50 = *((_QWORD *)v35 + 3);
    sub_100005190(v51, v50, v35[32]);
    v52 = *(_QWORD *)(v34 + 16);
    v53 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 16) = v51;
    *(_QWORD *)(v34 + 24) = v50;
    v54 = *(_BYTE *)(v34 + 32);
    *(_BYTE *)(v34 + 32) = v49;
    sub_100005624(v52, v53, v54);
  }
  *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
  *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
  v93 = (void **)(v34 + 56);
  v94 = (void **)(v35 + 56);
  v95 = v35[64];
  if (*(unsigned __int8 *)(v34 + 64) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(v34 + 64) = v35[64];
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_1000051A8(v99, v35[64]);
      *(_QWORD *)(v34 + 56) = v99;
      *(_BYTE *)(v34 + 64) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_1000077A4(v34 + 56);
    v100 = v35[64];
    *v93 = *v94;
    *(_BYTE *)(v34 + 64) = v100;
  }
  else
  {
    v96 = *v94;
    sub_1000051A8(v96, v35[64]);
    v97 = *(void **)(v34 + 56);
    *(_QWORD *)(v34 + 56) = v96;
    v98 = *(_BYTE *)(v34 + 64);
    *(_BYTE *)(v34 + 64) = v95;
    sub_10000563C(v97, v98);
  }
  v102 = (void **)(v34 + 72);
  v103 = (void **)(v35 + 72);
  v104 = v35[80];
  if (*(unsigned __int8 *)(v34 + 80) == 255)
  {
    if (v104 == 255)
    {
      v110 = *v103;
      *(_BYTE *)(v34 + 80) = v35[80];
      *v102 = v110;
    }
    else
    {
      v108 = *v103;
      sub_1000051A8(v108, v35[80]);
      *(_QWORD *)(v34 + 72) = v108;
      *(_BYTE *)(v34 + 80) = v104;
    }
  }
  else if (v104 == 255)
  {
    sub_1000077A4(v34 + 72);
    v109 = v35[80];
    *v102 = *v103;
    *(_BYTE *)(v34 + 80) = v109;
  }
  else
  {
    v105 = *v103;
    sub_1000051A8(v105, v35[80]);
    v106 = *(void **)(v34 + 72);
    *(_QWORD *)(v34 + 72) = v105;
    v107 = *(_BYTE *)(v34 + 80);
    *(_BYTE *)(v34 + 80) = v104;
    sub_10000563C(v106, v107);
  }
  v111 = (void **)(v34 + 88);
  v112 = (void **)(v35 + 88);
  v113 = v35[96];
  if (*(unsigned __int8 *)(v34 + 96) == 255)
  {
    if (v113 == 255)
    {
      v119 = *v112;
      *(_BYTE *)(v34 + 96) = v35[96];
      *v111 = v119;
    }
    else
    {
      v117 = *v112;
      sub_1000051A8(v117, v35[96]);
      *(_QWORD *)(v34 + 88) = v117;
      *(_BYTE *)(v34 + 96) = v113;
    }
  }
  else if (v113 == 255)
  {
    sub_1000077A4(v34 + 88);
    v118 = v35[96];
    *v111 = *v112;
    *(_BYTE *)(v34 + 96) = v118;
  }
  else
  {
    v114 = *v112;
    sub_1000051A8(v114, v35[96]);
    v115 = *(void **)(v34 + 88);
    *(_QWORD *)(v34 + 88) = v114;
    v116 = *(_BYTE *)(v34 + 96);
    *(_BYTE *)(v34 + 96) = v113;
    sub_10000563C(v115, v116);
  }
  v120 = (void **)(v34 + 104);
  v121 = (void **)(v35 + 104);
  v122 = v35[112];
  if (*(unsigned __int8 *)(v34 + 112) == 255)
  {
    if (v122 == 255)
    {
      v128 = *v121;
      *(_BYTE *)(v34 + 112) = v35[112];
      *v120 = v128;
    }
    else
    {
      v126 = *v121;
      sub_1000051A8(v126, v35[112]);
      *(_QWORD *)(v34 + 104) = v126;
      *(_BYTE *)(v34 + 112) = v122;
    }
  }
  else if (v122 == 255)
  {
    sub_1000077A4(v34 + 104);
    v127 = v35[112];
    *v120 = *v121;
    *(_BYTE *)(v34 + 112) = v127;
  }
  else
  {
    v123 = *v121;
    sub_1000051A8(v123, v35[112]);
    v124 = *(void **)(v34 + 104);
    *(_QWORD *)(v34 + 104) = v123;
    v125 = *(_BYTE *)(v34 + 112);
    *(_BYTE *)(v34 + 112) = v122;
    sub_10000563C(v124, v125);
  }
  v129 = (void **)(v34 + 120);
  v130 = (void **)(v35 + 120);
  v131 = v35[128];
  if (*(unsigned __int8 *)(v34 + 128) == 255)
  {
    if (v131 == 255)
    {
      v137 = *v130;
      *(_BYTE *)(v34 + 128) = v35[128];
      *v129 = v137;
    }
    else
    {
      v135 = *v130;
      sub_1000051A8(v135, v35[128]);
      *(_QWORD *)(v34 + 120) = v135;
      *(_BYTE *)(v34 + 128) = v131;
    }
  }
  else if (v131 == 255)
  {
    sub_1000077A4(v34 + 120);
    v136 = v35[128];
    *v129 = *v130;
    *(_BYTE *)(v34 + 128) = v136;
  }
  else
  {
    v132 = *v130;
    sub_1000051A8(v132, v35[128]);
    v133 = *(void **)(v34 + 120);
    *(_QWORD *)(v34 + 120) = v132;
    v134 = *(_BYTE *)(v34 + 128);
    *(_BYTE *)(v34 + 128) = v131;
    sub_10000563C(v133, v134);
  }
  v22 = v352;
  *(_BYTE *)(v34 + 129) = v35[129];
  v138 = v36[11];
  v139 = v34 + v138;
  v140 = &v35[v138];
  v141 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v36[12];
  v143 = (_QWORD *)(v34 + v142);
  v144 = &v35[v142];
  *v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = v143[1];
  v143[1] = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v147 = v36[16];
  v148 = (_QWORD *)(v34 + v147);
  v149 = &v35[v147];
  *v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = v148[1];
  v148[1] = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
LABEL_75:
  v152 = v18[13];
  v153 = (uint64_t)a1 + v152;
  v154 = (char *)a2 + v152;
  v155 = v37((uint64_t)a1 + v152, 1, v36);
  v156 = v37((uint64_t)v154, 1, v36);
  if (v155)
  {
    if (!v156)
    {
      v157 = v22;
      *(_QWORD *)v153 = *(_QWORD *)v154;
      v158 = *((_QWORD *)v154 + 1);
      *(_QWORD *)(v153 + 8) = v158;
      v159 = v154[32];
      swift_bridgeObjectRetain(v158);
      if (v159 == 255)
      {
        v174 = *((_OWORD *)v154 + 1);
        *(_BYTE *)(v153 + 32) = v154[32];
        *(_OWORD *)(v153 + 16) = v174;
      }
      else
      {
        v160 = *((_QWORD *)v154 + 2);
        v161 = *((_QWORD *)v154 + 3);
        sub_100005190(v160, v161, v159);
        *(_QWORD *)(v153 + 16) = v160;
        *(_QWORD *)(v153 + 24) = v161;
        *(_BYTE *)(v153 + 32) = v159;
      }
      *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
      *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
      v175 = (id *)(v154 + 56);
      v176 = v154[64];
      if (v176 == 255)
      {
        v178 = *v175;
        *(_BYTE *)(v153 + 64) = v154[64];
        *(_QWORD *)(v153 + 56) = v178;
      }
      else
      {
        v177 = *v175;
        sub_1000051A8(*v175, v154[64]);
        *(_QWORD *)(v153 + 56) = v177;
        *(_BYTE *)(v153 + 64) = v176;
      }
      v22 = v157;
      v179 = (id *)(v154 + 72);
      v180 = v154[80];
      if (v180 == 255)
      {
        v182 = *v179;
        *(_BYTE *)(v153 + 80) = v154[80];
        *(_QWORD *)(v153 + 72) = v182;
      }
      else
      {
        v181 = *v179;
        sub_1000051A8(*v179, v154[80]);
        *(_QWORD *)(v153 + 72) = v181;
        *(_BYTE *)(v153 + 80) = v180;
      }
      v183 = (id *)(v154 + 88);
      v184 = v154[96];
      if (v184 == 255)
      {
        v186 = *v183;
        *(_BYTE *)(v153 + 96) = v154[96];
        *(_QWORD *)(v153 + 88) = v186;
      }
      else
      {
        v185 = *v183;
        sub_1000051A8(*v183, v154[96]);
        *(_QWORD *)(v153 + 88) = v185;
        *(_BYTE *)(v153 + 96) = v184;
      }
      v187 = (id *)(v154 + 104);
      v188 = v154[112];
      if (v188 == 255)
      {
        v190 = *v187;
        *(_BYTE *)(v153 + 112) = v154[112];
        *(_QWORD *)(v153 + 104) = v190;
      }
      else
      {
        v189 = *v187;
        sub_1000051A8(*v187, v154[112]);
        *(_QWORD *)(v153 + 104) = v189;
        *(_BYTE *)(v153 + 112) = v188;
      }
      v191 = (id *)(v154 + 120);
      v192 = v154[128];
      if (v192 == 255)
      {
        v194 = *v191;
        *(_BYTE *)(v153 + 128) = v154[128];
        *(_QWORD *)(v153 + 120) = v194;
      }
      else
      {
        v193 = *v191;
        sub_1000051A8(*v191, v154[128]);
        *(_QWORD *)(v153 + 120) = v193;
        *(_BYTE *)(v153 + 128) = v192;
      }
      *(_BYTE *)(v153 + 129) = v154[129];
      v195 = v36[11];
      v196 = v153 + v195;
      v197 = &v154[v195];
      v198 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v198 - 8) + 16))(v196, v197, v198);
      v199 = v36[12];
      v200 = (_QWORD *)(v153 + v199);
      v201 = &v154[v199];
      *v200 = *(_QWORD *)v201;
      v202 = *((_QWORD *)v201 + 1);
      v200[1] = v202;
      *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
      *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
      *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
      v203 = v36[16];
      v204 = (_QWORD *)(v153 + v203);
      v205 = &v154[v203];
      *v204 = *(_QWORD *)v205;
      v206 = *((_QWORD *)v205 + 1);
      v204[1] = v206;
      v207 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v353 + 56);
      swift_bridgeObjectRetain(v202);
      swift_bridgeObjectRetain(v206);
      v207(v153, 0, 1, v36);
      goto LABEL_142;
    }
LABEL_81:
    v162 = sub_100005150(&qword_100081030);
    memcpy((void *)v153, v154, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_142;
  }
  if (v156)
  {
    sub_1000077D8(v153);
    goto LABEL_81;
  }
  v163 = v22;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  v164 = *((_QWORD *)v154 + 1);
  v165 = *(_QWORD *)(v153 + 8);
  *(_QWORD *)(v153 + 8) = v164;
  swift_bridgeObjectRetain(v164);
  swift_bridgeObjectRelease(v165);
  v166 = (__int128 *)(v153 + 16);
  v167 = (__int128 *)(v154 + 16);
  v168 = v154[32];
  if (*(unsigned __int8 *)(v153 + 32) == 255)
  {
    if (v168 == 255)
    {
      v211 = *v167;
      *(_BYTE *)(v153 + 32) = v154[32];
      *v166 = v211;
    }
    else
    {
      v208 = *((_QWORD *)v154 + 2);
      v209 = *((_QWORD *)v154 + 3);
      sub_100005190(v208, v209, v154[32]);
      *(_QWORD *)(v153 + 16) = v208;
      *(_QWORD *)(v153 + 24) = v209;
      *(_BYTE *)(v153 + 32) = v168;
    }
  }
  else if (v168 == 255)
  {
    sub_100007770(v153 + 16);
    v210 = v154[32];
    *v166 = *v167;
    *(_BYTE *)(v153 + 32) = v210;
  }
  else
  {
    v169 = *((_QWORD *)v154 + 2);
    v170 = *((_QWORD *)v154 + 3);
    sub_100005190(v169, v170, v154[32]);
    v171 = *(_QWORD *)(v153 + 16);
    v172 = *(_QWORD *)(v153 + 24);
    *(_QWORD *)(v153 + 16) = v169;
    *(_QWORD *)(v153 + 24) = v170;
    v173 = *(_BYTE *)(v153 + 32);
    *(_BYTE *)(v153 + 32) = v168;
    sub_100005624(v171, v172, v173);
  }
  *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
  *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
  v212 = (void **)(v153 + 56);
  v213 = (void **)(v154 + 56);
  v214 = v154[64];
  if (*(unsigned __int8 *)(v153 + 64) == 255)
  {
    if (v214 == 255)
    {
      v220 = *v213;
      *(_BYTE *)(v153 + 64) = v154[64];
      *v212 = v220;
    }
    else
    {
      v218 = *v213;
      sub_1000051A8(v218, v154[64]);
      *(_QWORD *)(v153 + 56) = v218;
      *(_BYTE *)(v153 + 64) = v214;
    }
  }
  else if (v214 == 255)
  {
    sub_1000077A4(v153 + 56);
    v219 = v154[64];
    *v212 = *v213;
    *(_BYTE *)(v153 + 64) = v219;
  }
  else
  {
    v215 = *v213;
    sub_1000051A8(v215, v154[64]);
    v216 = *(void **)(v153 + 56);
    *(_QWORD *)(v153 + 56) = v215;
    v217 = *(_BYTE *)(v153 + 64);
    *(_BYTE *)(v153 + 64) = v214;
    sub_10000563C(v216, v217);
  }
  v221 = (void **)(v153 + 72);
  v222 = (void **)(v154 + 72);
  v223 = v154[80];
  if (*(unsigned __int8 *)(v153 + 80) == 255)
  {
    if (v223 == 255)
    {
      v229 = *v222;
      *(_BYTE *)(v153 + 80) = v154[80];
      *v221 = v229;
    }
    else
    {
      v227 = *v222;
      sub_1000051A8(v227, v154[80]);
      *(_QWORD *)(v153 + 72) = v227;
      *(_BYTE *)(v153 + 80) = v223;
    }
  }
  else if (v223 == 255)
  {
    sub_1000077A4(v153 + 72);
    v228 = v154[80];
    *v221 = *v222;
    *(_BYTE *)(v153 + 80) = v228;
  }
  else
  {
    v224 = *v222;
    sub_1000051A8(v224, v154[80]);
    v225 = *(void **)(v153 + 72);
    *(_QWORD *)(v153 + 72) = v224;
    v226 = *(_BYTE *)(v153 + 80);
    *(_BYTE *)(v153 + 80) = v223;
    sub_10000563C(v225, v226);
  }
  v230 = (void **)(v153 + 88);
  v231 = (void **)(v154 + 88);
  v232 = v154[96];
  if (*(unsigned __int8 *)(v153 + 96) == 255)
  {
    if (v232 == 255)
    {
      v238 = *v231;
      *(_BYTE *)(v153 + 96) = v154[96];
      *v230 = v238;
    }
    else
    {
      v236 = *v231;
      sub_1000051A8(v236, v154[96]);
      *(_QWORD *)(v153 + 88) = v236;
      *(_BYTE *)(v153 + 96) = v232;
    }
  }
  else if (v232 == 255)
  {
    sub_1000077A4(v153 + 88);
    v237 = v154[96];
    *v230 = *v231;
    *(_BYTE *)(v153 + 96) = v237;
  }
  else
  {
    v233 = *v231;
    sub_1000051A8(v233, v154[96]);
    v234 = *(void **)(v153 + 88);
    *(_QWORD *)(v153 + 88) = v233;
    v235 = *(_BYTE *)(v153 + 96);
    *(_BYTE *)(v153 + 96) = v232;
    sub_10000563C(v234, v235);
  }
  v239 = (void **)(v153 + 104);
  v240 = (void **)(v154 + 104);
  v241 = v154[112];
  if (*(unsigned __int8 *)(v153 + 112) == 255)
  {
    if (v241 == 255)
    {
      v247 = *v240;
      *(_BYTE *)(v153 + 112) = v154[112];
      *v239 = v247;
    }
    else
    {
      v245 = *v240;
      sub_1000051A8(v245, v154[112]);
      *(_QWORD *)(v153 + 104) = v245;
      *(_BYTE *)(v153 + 112) = v241;
    }
  }
  else if (v241 == 255)
  {
    sub_1000077A4(v153 + 104);
    v246 = v154[112];
    *v239 = *v240;
    *(_BYTE *)(v153 + 112) = v246;
  }
  else
  {
    v242 = *v240;
    sub_1000051A8(v242, v154[112]);
    v243 = *(void **)(v153 + 104);
    *(_QWORD *)(v153 + 104) = v242;
    v244 = *(_BYTE *)(v153 + 112);
    *(_BYTE *)(v153 + 112) = v241;
    sub_10000563C(v243, v244);
  }
  v248 = (void **)(v153 + 120);
  v249 = (void **)(v154 + 120);
  v250 = v154[128];
  if (*(unsigned __int8 *)(v153 + 128) == 255)
  {
    if (v250 == 255)
    {
      v256 = *v249;
      *(_BYTE *)(v153 + 128) = v154[128];
      *v248 = v256;
    }
    else
    {
      v254 = *v249;
      sub_1000051A8(v254, v154[128]);
      *(_QWORD *)(v153 + 120) = v254;
      *(_BYTE *)(v153 + 128) = v250;
    }
  }
  else if (v250 == 255)
  {
    sub_1000077A4(v153 + 120);
    v255 = v154[128];
    *v248 = *v249;
    *(_BYTE *)(v153 + 128) = v255;
  }
  else
  {
    v251 = *v249;
    sub_1000051A8(v251, v154[128]);
    v252 = *(void **)(v153 + 120);
    *(_QWORD *)(v153 + 120) = v251;
    v253 = *(_BYTE *)(v153 + 128);
    *(_BYTE *)(v153 + 128) = v250;
    sub_10000563C(v252, v253);
  }
  v22 = v163;
  *(_BYTE *)(v153 + 129) = v154[129];
  v257 = v36[11];
  v258 = v153 + v257;
  v259 = &v154[v257];
  v260 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v260 - 8) + 24))(v258, v259, v260);
  v261 = v36[12];
  v262 = (_QWORD *)(v153 + v261);
  v263 = &v154[v261];
  *v262 = *(_QWORD *)v263;
  v264 = *((_QWORD *)v263 + 1);
  v265 = v262[1];
  v262[1] = v264;
  swift_bridgeObjectRetain(v264);
  swift_bridgeObjectRelease(v265);
  *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
  *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
  *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
  v266 = v36[16];
  v267 = (_QWORD *)(v153 + v266);
  v268 = &v154[v266];
  *v267 = *(_QWORD *)v268;
  v269 = *((_QWORD *)v268 + 1);
  v270 = v267[1];
  v267[1] = v269;
  swift_bridgeObjectRetain(v269);
  swift_bridgeObjectRelease(v270);
LABEL_142:
  v271 = v18[14];
  v272 = *(void **)((char *)a1 + v271);
  v273 = *(void **)((char *)a2 + v271);
  *(_QWORD *)((char *)a1 + v271) = v273;
  v274 = v273;

  v275 = v18[15];
  v276 = (char *)a1 + v275;
  v277 = (char *)a2 + v275;
  v278 = type metadata accessor for URL(0);
  v279 = *(_QWORD *)(v278 - 8);
  v280 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v279 + 48);
  LODWORD(v272) = v280(v276, 1, v278);
  v281 = v280(v277, 1, v278);
  if ((_DWORD)v272)
  {
    if (!v281)
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v281)
  {
    (*(void (**)(char *, uint64_t))(v279 + 8))(v276, v278);
LABEL_147:
    v282 = sub_100005150(&qword_100081038);
    memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
    goto LABEL_148;
  }
  (*(void (**)(char *, char *, uint64_t))(v279 + 24))(v276, v277, v278);
LABEL_148:
  *((_BYTE *)a1 + v18[16]) = *((_BYTE *)a2 + v18[16]);
  v283 = v18[17];
  v284 = (char *)a1 + v283;
  v285 = (char *)a2 + v283;
  v286 = *(_QWORD *)v285;
  v284[8] = v285[8];
  *(_QWORD *)v284 = v286;
  v287 = v18[18];
  v288 = (char *)a1 + v287;
  v289 = (char *)a2 + v287;
  v290 = *(_QWORD *)v289;
  v288[8] = v289[8];
  *(_QWORD *)v288 = v290;
  v291 = v18[19];
  v292 = (char *)a1 + v291;
  v293 = (char *)a2 + v291;
  v294 = v354((char *)a1 + v291, 1, v22);
  v295 = v354(v293, 1, v22);
  if (v294)
  {
    if (!v295)
    {
      (*(void (**)(char *, char *, uint64_t))(v355 + 16))(v292, v293, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v355 + 56))(v292, 0, 1, v22);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v295)
  {
    (*(void (**)(char *, uint64_t))(v355 + 8))(v292, v22);
LABEL_153:
    v296 = sub_100005150(&qword_100081028);
    memcpy(v292, v293, *(_QWORD *)(*(_QWORD *)(v296 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(char *, char *, uint64_t))(v355 + 24))(v292, v293, v22);
LABEL_154:
  v297 = v18[20];
  v298 = (char *)a1 + v297;
  v299 = (char *)a2 + v297;
  v300 = v354((char *)a1 + v297, 1, v22);
  v301 = v354(v299, 1, v22);
  if (v300)
  {
    if (!v301)
    {
      (*(void (**)(char *, char *, uint64_t))(v355 + 16))(v298, v299, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v355 + 56))(v298, 0, 1, v22);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v301)
  {
    (*(void (**)(char *, uint64_t))(v355 + 8))(v298, v22);
LABEL_159:
    v302 = sub_100005150(&qword_100081028);
    memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(char *, char *, uint64_t))(v355 + 24))(v298, v299, v22);
LABEL_160:
  v303 = v18[21];
  v304 = (_QWORD *)((char *)a1 + v303);
  v305 = (char *)a2 + v303;
  v306 = *(_QWORD *)((char *)a1 + v303);
  v307 = *(_QWORD *)((char *)a2 + v303);
  if (v306)
  {
    if (v307)
    {
      *v304 = v307;
      swift_retain(v307);
      swift_release(v306);
      v308 = *((_QWORD *)v305 + 1);
      v309 = v304[1];
      v304[1] = v308;
      swift_retain(v308);
      swift_release(v309);
      v310 = *((_QWORD *)v305 + 2);
      v311 = v304[2];
      v304[2] = v310;
      swift_retain(v310);
      swift_release(v311);
    }
    else
    {
      sub_100007814((_QWORD *)((char *)a1 + v303));
      v314 = *((_QWORD *)v305 + 2);
      *(_OWORD *)v304 = *(_OWORD *)v305;
      v304[2] = v314;
    }
  }
  else if (v307)
  {
    *v304 = v307;
    v312 = *((_QWORD *)v305 + 1);
    v304[1] = v312;
    v313 = *((_QWORD *)v305 + 2);
    v304[2] = v313;
    swift_retain(v307);
    swift_retain(v312);
    swift_retain(v313);
  }
  else
  {
    v315 = *(_OWORD *)v305;
    v304[2] = *((_QWORD *)v305 + 2);
    *(_OWORD *)v304 = v315;
  }
  v316 = v18[22];
  v317 = (char *)a1 + v316;
  v318 = (char *)a2 + v316;
  v319 = sub_100005150(&qword_100081040);
  v320 = *(_QWORD *)(v319 - 8);
  v321 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v320 + 48);
  v322 = v321(v317, 1, v319);
  v323 = v321(v318, 1, v319);
  v357 = a2;
  if (v322)
  {
    if (!v323)
    {
      v324 = *(void (**)(char *, char *, uint64_t))(v355 + 16);
      v324(v317, v318, v22);
      v324(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v317, 0, 1, v319);
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (v323)
  {
    sub_10000F008((uint64_t)v317, &qword_100081040);
LABEL_175:
    v325 = sub_100005150(&qword_100081048);
    memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
    goto LABEL_176;
  }
  v350 = *(void (**)(char *, char *, uint64_t))(v355 + 24);
  v350(v317, v318, v22);
  v350(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
LABEL_176:
  v326 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v327 = v326[5];
  v328 = &v317[v327];
  v329 = &v318[v327];
  v330 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v330 - 8) + 24))(v328, v329, v330);
  v331 = v326[6];
  v332 = &v317[v331];
  v333 = &v318[v331];
  v334 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v335 = *(_QWORD *)(v334 - 8);
  v336 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v335 + 48);
  LODWORD(v328) = v336(v332, 1, v334);
  v337 = v336(v333, 1, v334);
  if (!(_DWORD)v328)
  {
    if (!v337)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 24))(v332, v333, v334);
      goto LABEL_182;
    }
    (*(void (**)(char *, uint64_t))(v335 + 8))(v332, v334);
    goto LABEL_181;
  }
  if (v337)
  {
LABEL_181:
    v338 = sub_100005150(&qword_100081050);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
    goto LABEL_182;
  }
  (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v332, v333, v334);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v332, 0, 1, v334);
LABEL_182:
  v339 = v326[7];
  v340 = &v317[v339];
  v341 = &v318[v339];
  *(_QWORD *)v340 = *(_QWORD *)v341;
  v342 = *((_QWORD *)v341 + 1);
  v343 = *((_QWORD *)v340 + 1);
  *((_QWORD *)v340 + 1) = v342;
  swift_bridgeObjectRetain(v342);
  swift_bridgeObjectRelease(v343);
  v344 = v326[8];
  v345 = &v317[v344];
  v346 = &v318[v344];
  *(_QWORD *)v345 = *(_QWORD *)v346;
  v347 = *((_QWORD *)v346 + 1);
  v348 = *((_QWORD *)v345 + 1);
  *((_QWORD *)v345 + 1) = v347;
  swift_bridgeObjectRetain(v347);
  swift_bridgeObjectRelease(v348);
  *((_BYTE *)a1 + v356[5]) = *((_BYTE *)v357 + v356[5]);
  *((_BYTE *)a1 + v356[6]) = *((_BYTE *)v357 + v356[6]);
  *((_BYTE *)a1 + v356[7]) = *((_BYTE *)v357 + v356[7]);
  return a1;
}

uint64_t sub_10004727C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(_OWORD *, uint64_t, int *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(const void *, uint64_t);
  uint64_t v88;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v8 = v7[10];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v87 = *(unsigned int (**)(const void *, uint64_t))(v12 + 48);
  v88 = v11;
  if (v87(v10, 1))
  {
    v13 = sub_100005150(&qword_100081028);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v88);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v88);
  }
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  v14 = v7[12];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = (int *)type metadata accessor for ArtworkModel(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
  v86 = v18;
  if (v19(v16, 1, v17))
  {
    v20 = sub_100005150(&qword_100081030);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v16[1];
    *v15 = *v16;
    v15[1] = v21;
    *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
    *(_OWORD *)((char *)v15 + 40) = *(_OWORD *)((char *)v16 + 40);
    *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
    *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
    *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
    *(_OWORD *)((char *)v15 + 104) = *(_OWORD *)((char *)v16 + 104);
    *(_OWORD *)((char *)v15 + 88) = *(_OWORD *)((char *)v16 + 88);
    *(_OWORD *)((char *)v15 + 72) = *(_OWORD *)((char *)v16 + 72);
    *((_BYTE *)v15 + 129) = *((_BYTE *)v16 + 129);
    v22 = v17[11];
    v84 = a3;
    v85 = v12;
    v23 = (char *)v15 + v22;
    v24 = (char *)v16 + v22;
    v25 = type metadata accessor for ArtworkCrop(0);
    v26 = v23;
    v27 = v24;
    a3 = v84;
    v12 = v85;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v26, v27, v25);
    *(_OWORD *)((char *)v15 + v17[12]) = *(_OWORD *)((char *)v16 + v17[12]);
    *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
    *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
    *((_BYTE *)v15 + v17[15]) = *((_BYTE *)v16 + v17[15]);
    *(_OWORD *)((char *)v15 + v17[16]) = *(_OWORD *)((char *)v16 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v28 = v7[13];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  if (v19((_OWORD *)(a2 + v28), 1, v17))
  {
    v31 = sub_100005150(&qword_100081030);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    *(_OWORD *)((char *)v29 + 40) = *(_OWORD *)((char *)v30 + 40);
    *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
    *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
    *(_OWORD *)((char *)v29 + 113) = *(_OWORD *)((char *)v30 + 113);
    *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v30 + 104);
    *(_OWORD *)((char *)v29 + 88) = *(_OWORD *)((char *)v30 + 88);
    *(_OWORD *)((char *)v29 + 72) = *(_OWORD *)((char *)v30 + 72);
    *((_BYTE *)v29 + 129) = *((_BYTE *)v30 + 129);
    v33 = v17[11];
    v34 = v12;
    v35 = (char *)v29 + v33;
    v36 = a3;
    v37 = (char *)v30 + v33;
    v38 = type metadata accessor for ArtworkCrop(0);
    v39 = v35;
    v12 = v34;
    v40 = v37;
    a3 = v36;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v39, v40, v38);
    *(_OWORD *)((char *)v29 + v17[12]) = *(_OWORD *)((char *)v30 + v17[12]);
    *((_BYTE *)v29 + v17[13]) = *((_BYTE *)v30 + v17[13]);
    *((_BYTE *)v29 + v17[14]) = *((_BYTE *)v30 + v17[14]);
    *((_BYTE *)v29 + v17[15]) = *((_BYTE *)v30 + v17[15]);
    *(_OWORD *)((char *)v29 + v17[16]) = *(_OWORD *)((char *)v30 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v86 + 56))(v29, 0, 1, v17);
  }
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v41 = v7[15];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = sub_100005150(&qword_100081038);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  *(_BYTE *)(a1 + v7[16]) = *(_BYTE *)(a2 + v7[16]);
  v47 = v7[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = v7[19];
  v54 = (void *)(a1 + v53);
  v55 = (const void *)(a2 + v53);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v87)(a2 + v53, 1, v88))
  {
    v56 = sub_100005150(&qword_100081028);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v54, v55, v88);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v54, 0, 1, v88);
  }
  v57 = v7[20];
  v58 = (void *)(a1 + v57);
  v59 = (const void *)(a2 + v57);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v87)(a2 + v57, 1, v88))
  {
    v60 = sub_100005150(&qword_100081028);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v58, v59, v88);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v58, 0, 1, v88);
  }
  v61 = v7[21];
  v62 = a1 + v61;
  v63 = a2 + v61;
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  v64 = v7[22];
  v65 = (char *)(a1 + v64);
  v66 = (char *)(a2 + v64);
  v67 = sub_100005150(&qword_100081040);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    v69 = sub_100005150(&qword_100081048);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v70 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v70(v65, v66, v88);
    v70(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v88);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v71 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v72 = v71[5];
  v73 = &v65[v72];
  v74 = &v66[v72];
  v75 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v71[6];
  v77 = &v65[v76];
  v78 = &v66[v76];
  v79 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_100005150(&qword_100081050);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  *(_OWORD *)&v65[v71[7]] = *(_OWORD *)&v66[v71[7]];
  *(_OWORD *)&v65[v71[8]] = *(_OWORD *)&v66[v71[8]];
  v82 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v82) = *(_BYTE *)(a2 + v82);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

_QWORD *sub_10004795C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  int v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _OWORD *v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, char *, uint64_t);
  _QWORD *v147;
  int v148;
  int v149;
  void *v150;
  _QWORD *v151;
  int v152;
  int v153;
  void *v154;
  _QWORD *v155;
  int v156;
  int v157;
  void *v158;
  _QWORD *v159;
  int v160;
  int v161;
  void *v162;
  _QWORD *v163;
  int v164;
  int v165;
  void *v166;
  _QWORD *v167;
  int v168;
  int v169;
  void *v170;
  _QWORD *v171;
  int v172;
  int v173;
  void *v174;
  _QWORD *v175;
  int v176;
  int v177;
  void *v178;
  _QWORD *v179;
  int v180;
  int v181;
  void *v182;
  _QWORD *v183;
  int v184;
  int v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t (*v220)(char *, uint64_t, uint64_t);
  int *v221;
  uint64_t v222;
  _QWORD *v223;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a1[6];
  a1[6] = a2[6];
  swift_release(v12);
  v13 = a2[8];
  v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = a2[10];
  v16 = a1[10];
  a1[9] = a2[9];
  a1[10] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v18 = v17[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  v220 = v23;
  v221 = a3;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100005150(&qword_100081028);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[11];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v17[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v219 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v219 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  v222 = v22;
  if (v38)
  {
    if (!v39)
    {
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_OWORD *)(v34 + 16) = v40;
      *(_BYTE *)(v34 + 32) = v35[32];
      *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
      *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
      *(_BYTE *)(v34 + 64) = v35[64];
      *(_OWORD *)(v34 + 113) = *(_OWORD *)(v35 + 113);
      *(_OWORD *)(v34 + 104) = *(_OWORD *)(v35 + 104);
      *(_OWORD *)(v34 + 88) = *(_OWORD *)(v35 + 88);
      *(_OWORD *)(v34 + 72) = *(_OWORD *)(v35 + 72);
      *(_BYTE *)(v34 + 129) = v35[129];
      v41 = v36[11];
      v42 = v34 + v41;
      v43 = &v35[v41];
      v44 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      *(_OWORD *)(v34 + v36[12]) = *(_OWORD *)&v35[v36[12]];
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      *(_OWORD *)(v34 + v36[16]) = *(_OWORD *)&v35[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v219 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    sub_1000077D8(v34);
LABEL_12:
    v45 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  v132 = *((_QWORD *)v35 + 1);
  v133 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v132;
  swift_bridgeObjectRelease(v133);
  v134 = v35 + 16;
  v135 = *(unsigned __int8 *)(v34 + 32);
  if (v135 != 255)
  {
    v136 = v35[32];
    if (v136 != 255)
    {
      v137 = *(_QWORD *)(v34 + 16);
      v138 = *(_QWORD *)(v34 + 24);
      *(_OWORD *)(v34 + 16) = *v134;
      *(_BYTE *)(v34 + 32) = v136;
      sub_100005624(v137, v138, v135);
      goto LABEL_69;
    }
    sub_100007770(v34 + 16);
  }
  *(_OWORD *)(v34 + 16) = *v134;
  *(_BYTE *)(v34 + 32) = v35[32];
LABEL_69:
  *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
  v147 = v35 + 56;
  v148 = *(unsigned __int8 *)(v34 + 64);
  if (v148 != 255)
  {
    v149 = v35[64];
    if (v149 != 255)
    {
      v150 = *(void **)(v34 + 56);
      *(_QWORD *)(v34 + 56) = *v147;
      *(_BYTE *)(v34 + 64) = v149;
      sub_10000563C(v150, v148);
      goto LABEL_79;
    }
    sub_1000077A4(v34 + 56);
  }
  *(_QWORD *)(v34 + 56) = *v147;
  *(_BYTE *)(v34 + 64) = v35[64];
LABEL_79:
  v155 = v35 + 72;
  v156 = *(unsigned __int8 *)(v34 + 80);
  if (v156 != 255)
  {
    v157 = v35[80];
    if (v157 != 255)
    {
      v158 = *(void **)(v34 + 72);
      *(_QWORD *)(v34 + 72) = *v155;
      *(_BYTE *)(v34 + 80) = v157;
      sub_10000563C(v158, v156);
      goto LABEL_89;
    }
    sub_1000077A4(v34 + 72);
  }
  *(_QWORD *)(v34 + 72) = *v155;
  *(_BYTE *)(v34 + 80) = v35[80];
LABEL_89:
  v163 = v35 + 88;
  v164 = *(unsigned __int8 *)(v34 + 96);
  if (v164 != 255)
  {
    v165 = v35[96];
    if (v165 != 255)
    {
      v166 = *(void **)(v34 + 88);
      *(_QWORD *)(v34 + 88) = *v163;
      *(_BYTE *)(v34 + 96) = v165;
      sub_10000563C(v166, v164);
      goto LABEL_99;
    }
    sub_1000077A4(v34 + 88);
  }
  *(_QWORD *)(v34 + 88) = *v163;
  *(_BYTE *)(v34 + 96) = v35[96];
LABEL_99:
  v171 = v35 + 104;
  v172 = *(unsigned __int8 *)(v34 + 112);
  if (v172 != 255)
  {
    v173 = v35[112];
    if (v173 != 255)
    {
      v174 = *(void **)(v34 + 104);
      *(_QWORD *)(v34 + 104) = *v171;
      *(_BYTE *)(v34 + 112) = v173;
      sub_10000563C(v174, v172);
      goto LABEL_109;
    }
    sub_1000077A4(v34 + 104);
  }
  *(_QWORD *)(v34 + 104) = *v171;
  *(_BYTE *)(v34 + 112) = v35[112];
LABEL_109:
  v179 = v35 + 120;
  v180 = *(unsigned __int8 *)(v34 + 128);
  if (v180 == 255)
  {
LABEL_118:
    *(_QWORD *)(v34 + 120) = *v179;
    *(_BYTE *)(v34 + 128) = v35[128];
    goto LABEL_119;
  }
  v181 = v35[128];
  if (v181 == 255)
  {
    sub_1000077A4(v34 + 120);
    goto LABEL_118;
  }
  v182 = *(void **)(v34 + 120);
  *(_QWORD *)(v34 + 120) = *v179;
  *(_BYTE *)(v34 + 128) = v181;
  sub_10000563C(v182, v180);
LABEL_119:
  *(_BYTE *)(v34 + 129) = v35[129];
  v187 = v36[11];
  v188 = v34 + v187;
  v189 = &v35[v187];
  v190 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v190 - 8) + 40))(v188, v189, v190);
  v191 = v36[12];
  v192 = (_QWORD *)(v34 + v191);
  v193 = &v35[v191];
  v195 = *(_QWORD *)v193;
  v194 = *((_QWORD *)v193 + 1);
  v196 = v192[1];
  *v192 = v195;
  v192[1] = v194;
  swift_bridgeObjectRelease(v196);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v197 = v36[16];
  v198 = (_QWORD *)(v34 + v197);
  v199 = &v35[v197];
  v201 = *(_QWORD *)v199;
  v200 = *((_QWORD *)v199 + 1);
  v202 = v198[1];
  *v198 = v201;
  v198[1] = v200;
  swift_bridgeObjectRelease(v202);
LABEL_13:
  v46 = v17[13];
  v47 = (uint64_t)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = v37((uint64_t)a1 + v46, 1, v36);
  v50 = v37((uint64_t)v48, 1, v36);
  if (v49)
  {
    if (!v50)
    {
      v51 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v51;
      *(_BYTE *)(v47 + 32) = v48[32];
      *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
      *(_QWORD *)(v47 + 56) = *((_QWORD *)v48 + 7);
      *(_BYTE *)(v47 + 64) = v48[64];
      *(_OWORD *)(v47 + 113) = *(_OWORD *)(v48 + 113);
      *(_OWORD *)(v47 + 104) = *(_OWORD *)(v48 + 104);
      *(_OWORD *)(v47 + 88) = *(_OWORD *)(v48 + 88);
      *(_OWORD *)(v47 + 72) = *(_OWORD *)(v48 + 72);
      *(_BYTE *)(v47 + 129) = v48[129];
      v52 = v36[11];
      v53 = v47 + v52;
      v54 = &v48[v52];
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
      *(_OWORD *)(v47 + v36[12]) = *(_OWORD *)&v48[v36[12]];
      *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
      *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
      *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
      *(_OWORD *)(v47 + v36[16]) = *(_OWORD *)&v48[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v219 + 56))(v47, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    sub_1000077D8(v47);
LABEL_18:
    v56 = sub_100005150(&qword_100081030);
    memcpy((void *)v47, v48, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_19;
  }
  v139 = *((_QWORD *)v48 + 1);
  v140 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v47 + 8) = v139;
  swift_bridgeObjectRelease(v140);
  v141 = v48 + 16;
  v142 = *(unsigned __int8 *)(v47 + 32);
  if (v142 != 255)
  {
    v143 = v48[32];
    if (v143 != 255)
    {
      v144 = *(_QWORD *)(v47 + 16);
      v145 = *(_QWORD *)(v47 + 24);
      *(_OWORD *)(v47 + 16) = *v141;
      *(_BYTE *)(v47 + 32) = v143;
      sub_100005624(v144, v145, v142);
      goto LABEL_74;
    }
    sub_100007770(v47 + 16);
  }
  *(_OWORD *)(v47 + 16) = *v141;
  *(_BYTE *)(v47 + 32) = v48[32];
LABEL_74:
  *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
  v151 = v48 + 56;
  v152 = *(unsigned __int8 *)(v47 + 64);
  if (v152 != 255)
  {
    v153 = v48[64];
    if (v153 != 255)
    {
      v154 = *(void **)(v47 + 56);
      *(_QWORD *)(v47 + 56) = *v151;
      *(_BYTE *)(v47 + 64) = v153;
      sub_10000563C(v154, v152);
      goto LABEL_84;
    }
    sub_1000077A4(v47 + 56);
  }
  *(_QWORD *)(v47 + 56) = *v151;
  *(_BYTE *)(v47 + 64) = v48[64];
LABEL_84:
  v159 = v48 + 72;
  v160 = *(unsigned __int8 *)(v47 + 80);
  if (v160 != 255)
  {
    v161 = v48[80];
    if (v161 != 255)
    {
      v162 = *(void **)(v47 + 72);
      *(_QWORD *)(v47 + 72) = *v159;
      *(_BYTE *)(v47 + 80) = v161;
      sub_10000563C(v162, v160);
      goto LABEL_94;
    }
    sub_1000077A4(v47 + 72);
  }
  *(_QWORD *)(v47 + 72) = *v159;
  *(_BYTE *)(v47 + 80) = v48[80];
LABEL_94:
  v167 = v48 + 88;
  v168 = *(unsigned __int8 *)(v47 + 96);
  if (v168 != 255)
  {
    v169 = v48[96];
    if (v169 != 255)
    {
      v170 = *(void **)(v47 + 88);
      *(_QWORD *)(v47 + 88) = *v167;
      *(_BYTE *)(v47 + 96) = v169;
      sub_10000563C(v170, v168);
      goto LABEL_104;
    }
    sub_1000077A4(v47 + 88);
  }
  *(_QWORD *)(v47 + 88) = *v167;
  *(_BYTE *)(v47 + 96) = v48[96];
LABEL_104:
  v175 = v48 + 104;
  v176 = *(unsigned __int8 *)(v47 + 112);
  if (v176 != 255)
  {
    v177 = v48[112];
    if (v177 != 255)
    {
      v178 = *(void **)(v47 + 104);
      *(_QWORD *)(v47 + 104) = *v175;
      *(_BYTE *)(v47 + 112) = v177;
      sub_10000563C(v178, v176);
      goto LABEL_114;
    }
    sub_1000077A4(v47 + 104);
  }
  *(_QWORD *)(v47 + 104) = *v175;
  *(_BYTE *)(v47 + 112) = v48[112];
LABEL_114:
  v183 = v48 + 120;
  v184 = *(unsigned __int8 *)(v47 + 128);
  if (v184 == 255)
  {
LABEL_121:
    *(_QWORD *)(v47 + 120) = *v183;
    *(_BYTE *)(v47 + 128) = v48[128];
    goto LABEL_122;
  }
  v185 = v48[128];
  if (v185 == 255)
  {
    sub_1000077A4(v47 + 120);
    goto LABEL_121;
  }
  v186 = *(void **)(v47 + 120);
  *(_QWORD *)(v47 + 120) = *v183;
  *(_BYTE *)(v47 + 128) = v185;
  sub_10000563C(v186, v184);
LABEL_122:
  *(_BYTE *)(v47 + 129) = v48[129];
  v203 = v36[11];
  v204 = v47 + v203;
  v205 = &v48[v203];
  v206 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 40))(v204, v205, v206);
  v207 = v36[12];
  v208 = (_QWORD *)(v47 + v207);
  v209 = &v48[v207];
  v211 = *(_QWORD *)v209;
  v210 = *((_QWORD *)v209 + 1);
  v212 = v208[1];
  *v208 = v211;
  v208[1] = v210;
  swift_bridgeObjectRelease(v212);
  *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
  *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
  *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
  v213 = v36[16];
  v214 = (_QWORD *)(v47 + v213);
  v215 = &v48[v213];
  v217 = *(_QWORD *)v215;
  v216 = *((_QWORD *)v215 + 1);
  v218 = v214[1];
  *v214 = v217;
  v214[1] = v216;
  swift_bridgeObjectRelease(v218);
LABEL_19:
  v57 = v17[14];
  v58 = *(void **)((char *)a1 + v57);
  *(_QWORD *)((char *)a1 + v57) = *(_QWORD *)((char *)a2 + v57);

  v59 = v17[15];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    v67 = v222;
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v67 = v222;
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
LABEL_24:
    v68 = sub_100005150(&qword_100081038);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v60, v61, v62);
LABEL_25:
  *((_BYTE *)a1 + v17[16]) = *((_BYTE *)a2 + v17[16]);
  v69 = v17[17];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  v72 = v17[18];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v17[19];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = v220((char *)a1 + v75, 1, v21);
  v79 = v220(v77, 1, v21);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v76, v77, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v76, 0, 1, v21);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v76, v21);
LABEL_30:
    v80 = sub_100005150(&qword_100081028);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v76, v77, v21);
LABEL_31:
  v81 = v17[20];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = v220((char *)a1 + v81, 1, v21);
  v85 = v220(v83, 1, v21);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v82, v83, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v82, 0, 1, v21);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v82, v21);
LABEL_36:
    v86 = sub_100005150(&qword_100081028);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v82, v83, v21);
LABEL_37:
  v87 = v17[21];
  v88 = (_QWORD *)((char *)a1 + v87);
  v89 = (_QWORD *)((char *)a2 + v87);
  v90 = *(_QWORD *)((char *)a1 + v87);
  if (v90)
  {
    if (*v89)
    {
      *v88 = *v89;
      swift_release(v90);
      v91 = v88[1];
      v88[1] = v89[1];
      swift_release(v91);
      v92 = v88[2];
      v88[2] = v89[2];
      swift_release(v92);
      goto LABEL_42;
    }
    sub_100007814(v88);
  }
  *(_OWORD *)v88 = *(_OWORD *)v89;
  v88[2] = v89[2];
LABEL_42:
  v93 = v17[22];
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  v96 = sub_100005150(&qword_100081040);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  v223 = a2;
  if (v99)
  {
    if (!v100)
    {
      v101 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v101(v94, v95, v21);
      v101(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v100)
  {
    sub_10000F008((uint64_t)v94, &qword_100081040);
LABEL_47:
    v102 = sub_100005150(&qword_100081048);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_48;
  }
  v146 = *(void (**)(char *, char *, uint64_t))(v67 + 40);
  v146(v94, v95, v21);
  v146(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
LABEL_48:
  v103 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v104 = v103[5];
  v105 = &v94[v104];
  v106 = &v95[v104];
  v107 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 40))(v105, v106, v107);
  v108 = v103[6];
  v109 = &v94[v108];
  v110 = &v95[v108];
  v111 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  v114 = v113(v109, 1, v111);
  v115 = v113(v110, 1, v111);
  if (!v114)
  {
    v116 = v223;
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 40))(v109, v110, v111);
      goto LABEL_54;
    }
    (*(void (**)(char *, uint64_t))(v112 + 8))(v109, v111);
    goto LABEL_53;
  }
  v116 = v223;
  if (v115)
  {
LABEL_53:
    v117 = sub_100005150(&qword_100081050);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v109, v110, v111);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
LABEL_54:
  v118 = v103[7];
  v119 = &v94[v118];
  v120 = &v95[v118];
  v122 = *(_QWORD *)v120;
  v121 = *((_QWORD *)v120 + 1);
  v123 = *((_QWORD *)v119 + 1);
  *(_QWORD *)v119 = v122;
  *((_QWORD *)v119 + 1) = v121;
  swift_bridgeObjectRelease(v123);
  v124 = v103[8];
  v125 = &v94[v124];
  v126 = &v95[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  v130 = v221[6];
  *((_BYTE *)a1 + v221[5]) = *((_BYTE *)v116 + v221[5]);
  *((_BYTE *)a1 + v130) = *((_BYTE *)v116 + v130);
  *((_BYTE *)a1 + v221[7]) = *((_BYTE *)v116 + v221[7]);
  return a1;
}

uint64_t sub_1000487FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100048808);
}

uint64_t sub_100048808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UpNextEntry.Episode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_100048894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000488A0);
}

uint64_t sub_1000488A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UpNextEntry.Episode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for EpisodeCaptionView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000822B0;
  if (!qword_1000822B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeCaptionView);
  return result;
}

uint64_t sub_100048954(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UpNextEntry.Episode(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10006E2F8;
    v4[2] = &unk_10006E2F8;
    v4[3] = &unk_10006E2F8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000489C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100071F94, 1);
}

uint64_t sub_1000489D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];

  v2 = v1;
  v49 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v46 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ContentTransition(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_1000822F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_1000822F8);
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005150(&qword_100082300);
  __chkstk_darwin(v15);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005150(&qword_100082308);
  v19 = *(_QWORD *)(v18 - 8);
  v44 = v18;
  v45 = v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v11 = static Axis.Set.horizontal.getter(v20);
  v23 = sub_100005150(&qword_100082310);
  v24 = sub_100048D38(v2, (uint64_t)&v11[*(int *)(v23 + 44)]);
  static ContentTransition.interpolate.getter(v24);
  KeyPath = swift_getKeyPath(&unk_10006E360);
  v26 = (uint64_t *)&v14[*(int *)(v12 + 36)];
  v27 = sub_100005150(&qword_100082318);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v26 + *(int *)(v27 + 28), v8, v5);
  *v26 = KeyPath;
  sub_10000EFC4((uint64_t)v11, (uint64_t)v14, &qword_1000822F0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10000F008((uint64_t)v11, &qword_1000822F0);
  v28 = swift_getKeyPath(&unk_10006E390);
  sub_10000EFC4((uint64_t)v14, (uint64_t)v17, &qword_1000822F8);
  v29 = &v17[*(int *)(v15 + 36)];
  *(_QWORD *)v29 = v28;
  *((_QWORD *)v29 + 1) = 1;
  v29[16] = 0;
  v30 = sub_10000F008((uint64_t)v14, &qword_1000822F8);
  v31 = v46;
  static AccessibilityChildBehavior.combine.getter(v30);
  v32 = sub_10004BBFC();
  View.accessibilityElement(children:)(v31, v15, v32);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v48);
  sub_10000F008((uint64_t)v17, &qword_100082300);
  v33 = sub_100049D6C();
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  v50[0] = v15;
  v50[1] = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v41 = v44;
  View.accessibilityLabel(_:)(v33, v35, v39, v37, v44, OpaqueTypeConformance2);
  sub_10000EEE8((uint64_t)v33, v35, v39);
  swift_bridgeObjectRelease(v37);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v22, v41);
}

uint64_t sub_100048D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  _BYTE *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v100[4];
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v114 = a2;
  v3 = sub_100005150(&qword_100082348);
  __chkstk_darwin(v3);
  v116 = &v100[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v7 = &v100[-v6];
  v8 = type metadata accessor for EpisodeCaptionView(0);
  if (*(_BYTE *)(a1 + *(int *)(v8 + 24)) == 1)
  {
    sub_10004939C((uint64_t)v7);
    v9 = sub_100005150(&qword_100082350);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 0, 1, v9);
  }
  else
  {
    v10 = sub_100005150(&qword_100082350);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  }
  v12 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v106 = *(unsigned __int8 *)(a1 + *(int *)(v8 + 20));
  v115 = v7;
  v108 = a1;
  v112 = v8;
  if (v106 == 1)
  {
    v121 = v12;
    v122 = v11;
    v13 = sub_1000248B8();
    v14 = StringProtocol.localizedUppercase.getter(&type metadata for String, v13);
  }
  else
  {
    swift_bridgeObjectRetain(v11);
    v14 = v12;
    v15 = v11;
  }
  v121 = v14;
  v122 = v15;
  v16 = sub_1000248B8();
  v17 = Text.init<A>(_:)(&v121, &type metadata for String, v16);
  v111 = v18;
  v20 = v19;
  LODWORD(v110) = v21 & 1;
  v107 = v12;
  v121 = v12;
  v122 = v11;
  v22 = swift_bridgeObjectRetain(v11);
  v23 = static String.eyebrowSeparatorSymbol.getter(v22);
  v25 = v24;
  v119 = v23;
  v120 = v24;
  v117 = 44;
  v118 = 0xE100000000000000;
  v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v119, &v117, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
  v28 = v27;
  v113 = v11;
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v25);
  v121 = v26;
  v122 = v28;
  v29 = Text.init<A>(_:)(&v121, &type metadata for String, v16);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v36 = v111;
  LOBYTE(v28) = v110;
  v103 = Text.accessibilityLabel(_:)();
  v102 = v37;
  v104 = v38;
  v101 = v39;
  v40 = v39 & 1;
  sub_10000EEE8(v29, v31, v35);
  swift_bridgeObjectRelease(v33);
  sub_10000EEE8(v17, v36, v28);
  swift_bridgeObjectRelease(v20);
  v41 = v108;
  v105 = *(unsigned __int8 *)(v108 + *(int *)(v112 + 28));
  v42 = v103;
  v43 = v102;
  if (v105 == 1)
  {
    v44 = v104;
    v45 = Text.collapsible()(v103, v102, v40, v104);
    v110 = v46;
    v111 = v45;
    v109 = v47;
    LODWORD(v40) = v48 & 1;
  }
  else
  {
    sub_100024C4C(v103, v102, v40);
    v44 = v104;
    swift_bridgeObjectRetain(v104);
    v110 = v44;
    v111 = v42;
    v109 = v43;
  }
  sub_10000EEE8(v42, v43, v101 & 1);
  swift_bridgeObjectRelease(v44);
  v50 = *(_QWORD *)(v41 + 32);
  v49 = *(_QWORD *)(v41 + 40);
  v51 = v113;
  v52 = v107;
  LODWORD(v112) = v40;
  if (v106)
  {
    v121 = v50;
    v122 = v49;
    v50 = StringProtocol.localizedUppercase.getter(&type metadata for String, v16);
    v54 = v53;
  }
  else
  {
    v54 = swift_bridgeObjectRetain(v49);
  }
  v121 = v50;
  v122 = v54;
  v55 = Text.init<A>(_:)(&v121, &type metadata for String, v16);
  v57 = v56;
  v59 = v58;
  v61 = v60 & 1;
  v121 = v52;
  v122 = v51;
  v62 = swift_bridgeObjectRetain(v51);
  v63 = static String.eyebrowSeparatorSymbol.getter(v62);
  v65 = v64;
  v119 = v63;
  v120 = v64;
  v117 = 44;
  v118 = 0xE100000000000000;
  v66 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v119, &v117, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
  v68 = v67;
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v65);
  v121 = v66;
  v122 = v68;
  v69 = Text.init<A>(_:)(&v121, &type metadata for String, v16);
  v71 = v70;
  v73 = v72;
  v75 = v74 & 1;
  v107 = Text.accessibilityLabel(_:)();
  v77 = v76;
  v108 = v78;
  v106 = v79;
  v80 = v79 & 1;
  sub_10000EEE8(v69, v71, v75);
  swift_bridgeObjectRelease(v73);
  sub_10000EEE8(v55, v57, v61);
  swift_bridgeObjectRelease(v59);
  v81 = v107;
  if (v105)
  {
    v82 = v108;
    v113 = Text.collapsible()(v107, v77, v80, v108);
    v84 = v83;
    v86 = v85;
    LOBYTE(v80) = v87 & 1;
  }
  else
  {
    sub_100024C4C(v107, v77, v80);
    v82 = v108;
    swift_bridgeObjectRetain(v108);
    v113 = v81;
    v84 = v77;
    v86 = v82;
  }
  sub_10000EEE8(v81, v77, v106 & 1);
  swift_bridgeObjectRelease(v82);
  v89 = (uint64_t)v115;
  v88 = v116;
  sub_10000EFC4((uint64_t)v115, (uint64_t)v116, &qword_100082348);
  v90 = v112;
  LOBYTE(v121) = v112;
  v91 = v114;
  sub_10000EFC4((uint64_t)v88, v114, &qword_100082348);
  v92 = sub_100005150(&qword_100082358);
  v93 = v91 + *(int *)(v92 + 48);
  v94 = v110;
  v95 = v111;
  v96 = v109;
  *(_QWORD *)v93 = v111;
  *(_QWORD *)(v93 + 8) = v96;
  *(_BYTE *)(v93 + 16) = v90;
  *(_QWORD *)(v93 + 24) = v94;
  v97 = v91 + *(int *)(v92 + 64);
  v98 = v113;
  *(_QWORD *)v97 = v113;
  *(_QWORD *)(v97 + 8) = v84;
  *(_BYTE *)(v97 + 16) = v80;
  *(_QWORD *)(v97 + 24) = v86;
  sub_100024C4C(v95, v96, v90);
  swift_bridgeObjectRetain(v94);
  sub_100024C4C(v98, v84, v80);
  swift_bridgeObjectRetain(v86);
  sub_10000F008(v89, &qword_100082348);
  sub_10000EEE8(v98, v84, v80);
  swift_bridgeObjectRelease(v86);
  sub_10000EEE8(v95, v96, v121);
  swift_bridgeObjectRelease(v94);
  return sub_10000F008((uint64_t)v88, &qword_100082348);
}

uint64_t sub_10004939C@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD v107[2];
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[2];
  _QWORD v133[2];
  uint64_t v134;
  uint64_t v135;

  v129 = a1;
  v131 = sub_100005150(&qword_100082360);
  __chkstk_darwin(v131);
  v128 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100005150(&qword_100082368);
  __chkstk_darwin(v123);
  v117 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100005150(&qword_100082370);
  __chkstk_darwin(v127);
  v121 = (uint64_t)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005150(&qword_100081048);
  __chkstk_darwin(v5);
  v126 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005150(&qword_100081028);
  __chkstk_darwin(v7);
  v116 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for Date(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v115 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100005150(&qword_100082378);
  __chkstk_darwin(v122);
  v118 = (uint64_t)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PlaybackButton.State(0);
  v124 = *(_QWORD *)(v11 - 8);
  v125 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100005150(&qword_100082380);
  __chkstk_darwin(v130);
  v15 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005150(&qword_100081050);
  __chkstk_darwin(v16);
  v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (uint64_t)&v1[*(int *)(type metadata accessor for UpNextEntry.Episode(0) + 88)];
  v24 = type metadata accessor for WidgetPredictedPlayState(0);
  sub_10000EFC4(v23 + *(int *)(v24 + 24), (uint64_t)v18, &qword_100081050);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
  {
    v30 = (uint64_t)v126;
    v112 = v15;
    v31 = v127;
    v113 = v20;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    v32 = v23 + *(int *)(v24 + 20);
    v34 = v124;
    v33 = v125;
    (*(void (**)(char *, _QWORD, uint64_t))(v124 + 104))(v13, enum case for PlaybackButton.State.playing(_:), v125);
    LOBYTE(v32) = static PlaybackButton.State.== infix(_:_:)(v32, v13);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v33);
    if ((v32 & 1) == 0)
    {
      __chkstk_darwin(*((_QWORD *)v1 + 2));
      v108 = v22;
      v109 = v1;
      v82 = (uint64_t)v117;
      sub_10004AC20(v83, v84, (void (*)(uint64_t *__return_ptr, uint64_t))sub_10004C060, (uint64_t)v107);
      v85 = v121;
      sub_10000EFC4(v82, v121, &qword_100082368);
      swift_storeEnumTagMultiPayload(v85, v31, 1);
      v86 = sub_10004BD88();
      v87 = sub_10004BFDC();
      v88 = (uint64_t)v112;
      _ConditionalContent<>.init(storage:)(v85, v122, v123, v86, v87);
      sub_10000F008(v82, &qword_100082368);
      v40 = (uint64_t)v128;
      v41 = v130;
      v42 = v131;
LABEL_17:
      sub_10000EFC4(v88, v40, &qword_100082380);
      swift_storeEnumTagMultiPayload(v40, v42, 0);
      v106 = sub_10004BD1C();
      _ConditionalContent<>.init(storage:)(v40, v41, &type metadata for Text, v106, &protocol witness table for Text);
      sub_10000F008(v88, &qword_100082380);
      return (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v22, v19);
    }
    v35 = v30;
    sub_10000EFC4(v23, v30, &qword_100081048);
    v36 = sub_100005150(&qword_100081040);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v30, 1, v36);
    v111 = v19;
    if (v37 == 1)
    {
      sub_10000F008(v30, &qword_100081048);
      v38 = v116;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v119 + 56))(v116, 1, 1, v120);
      v39 = (uint64_t)v38;
      v40 = (uint64_t)v128;
      v41 = v130;
      v42 = v131;
      v43 = v121;
    }
    else
    {
      v92 = v30 + *(int *)(v36 + 36);
      v93 = v119;
      v94 = v116;
      v95 = v120;
      (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v116, v92, v120);
      sub_10000F008(v35, &qword_100081040);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v94, 0, 1, v95);
      v96 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 48))(v94, 1, v95);
      v39 = (uint64_t)v94;
      v40 = (uint64_t)v128;
      v41 = v130;
      v42 = v131;
      v43 = v121;
      if (v96 != 1)
      {
        v99 = v115;
        (*(void (**)(void))(v93 + 32))();
        __chkstk_darwin(*((_QWORD *)v1 + 2));
        v107[0] = v99;
        v107[1] = v22;
        v108 = v1;
        v98 = v118;
        sub_10004A9E4(v100, v101, (void (*)(uint64_t))sub_10004C068, (uint64_t)(&v110 - 6), v118);
        v102 = sub_100005150(&qword_1000823A0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v98, 0, 1, v102);
        v103 = v99;
        v31 = v127;
        (*(void (**)(char *, uint64_t))(v119 + 8))(v103, v120);
        goto LABEL_16;
      }
    }
    sub_10000F008(v39, &qword_100081028);
    v97 = sub_100005150(&qword_1000823A0);
    v98 = v118;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v118, 1, 1, v97);
LABEL_16:
    sub_10000EFC4(v98, v43, &qword_100082378);
    swift_storeEnumTagMultiPayload(v43, v31, 0);
    v104 = sub_10004BD88();
    v105 = sub_10004BFDC();
    v88 = (uint64_t)v112;
    _ConditionalContent<>.init(storage:)(v43, v122, v123, v104, v105);
    sub_10000F008(v98, &qword_100082378);
    v19 = v111;
    goto LABEL_17;
  }
  sub_10000F008((uint64_t)v18, &qword_100081050);
  v26 = *((_QWORD *)v1 + 2);
  v25 = *((_QWORD *)v1 + 3);
  v27 = type metadata accessor for EpisodeCaptionView(0);
  v28 = v1[*(int *)(v27 + 20)] == 1;
  v114 = v1;
  v127 = v27;
  if (v28)
  {
    v134 = v26;
    v135 = v25;
    v29 = sub_1000248B8();
    v44 = StringProtocol.localizedUppercase.getter(&type metadata for String, v29);
  }
  else
  {
    swift_bridgeObjectRetain(v25);
    v44 = v26;
    v45 = v25;
  }
  v134 = v44;
  v135 = v45;
  v46 = sub_1000248B8();
  v47 = Text.init<A>(_:)(&v134, &type metadata for String, v46);
  v125 = v49;
  v126 = v48;
  LODWORD(v124) = v50 & 1;
  v134 = v26;
  v135 = v25;
  v51 = swift_bridgeObjectRetain(v25);
  v52 = static String.eyebrowSeparatorSymbol.getter(v51);
  v54 = v53;
  v133[0] = v52;
  v133[1] = v53;
  v132[0] = 44;
  v132[1] = 0xE100000000000000;
  v55 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v133, v132, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v46, v46, v46);
  v57 = v56;
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v54);
  v134 = v55;
  v135 = v57;
  v58 = Text.init<A>(_:)(&v134, &type metadata for String, v46);
  v60 = v59;
  v62 = v61;
  v64 = v63 & 1;
  v65 = v47;
  v67 = v125;
  v66 = (uint64_t)v126;
  v68 = v124;
  v122 = Text.accessibilityLabel(_:)();
  v123 = v69;
  v71 = v70;
  LODWORD(v121) = v72;
  v73 = v72 & 1;
  sub_10000EEE8(v58, v60, v64);
  swift_bridgeObjectRelease(v62);
  sub_10000EEE8(v65, v66, v68);
  swift_bridgeObjectRelease(v67);
  if (v114[*(int *)(v127 + 28)] == 1)
  {
    v75 = v122;
    v74 = v123;
    v76 = Text.collapsible()(v122, v71, v73, v123);
    v78 = v77;
    v80 = v79;
    LOBYTE(v73) = v81 & 1;
  }
  else
  {
    v75 = v122;
    sub_100024C4C(v122, v71, v73);
    v74 = v123;
    swift_bridgeObjectRetain(v123);
    v76 = v75;
    v78 = v71;
    v80 = v74;
  }
  v89 = v128;
  sub_10000EEE8(v75, v71, v121 & 1);
  swift_bridgeObjectRelease(v74);
  *(_QWORD *)v89 = v76;
  *((_QWORD *)v89 + 1) = v78;
  v89[16] = v73;
  *((_QWORD *)v89 + 3) = v80;
  swift_storeEnumTagMultiPayload(v89, v131, 1);
  v90 = sub_10004BD1C();
  return _ConditionalContent<>.init(storage:)(v89, v130, &type metadata for Text, v90, &protocol witness table for Text);
}

id sub_100049D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  id result;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = type metadata accessor for PlaybackButton.State(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - v6;
  v8 = sub_100005150(&qword_100081050);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + *(int *)(type metadata accessor for EpisodeCaptionView(0) + 24)) != 1)
    goto LABEL_4;
  v15 = v0 + *(int *)(type metadata accessor for UpNextEntry.Episode(0) + 88);
  v50 = type metadata accessor for WidgetPredictedPlayState(0);
  sub_10000EFC4(v15 + *(int *)(v50 + 24), (uint64_t)v10, &qword_100081050);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10000F008((uint64_t)v10, &qword_100081050);
LABEL_4:
    v16 = *(_QWORD *)(v0 + 24);
    v51 = *(_QWORD *)(v0 + 16);
    v52 = v16;
    v17 = sub_1000248B8();
    swift_bridgeObjectRetain(v16);
    return (id)Text.init<A>(_:)(&v51, &type metadata for String, v17);
  }
  v48 = v15;
  v49 = v2;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  v19 = sub_100005150(&qword_100081D40);
  v20 = swift_allocObject(v19, 64, 7);
  *(_OWORD *)(v20 + 16) = xmmword_10006DBB0;
  v21 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v20 + 32) = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v20 + 40) = v21;
  v22 = swift_bridgeObjectRetain(v21);
  v23 = PlayButtonTimeFormatHelper.timeLeft.getter(v22);
  result = (id)AXDurationStringForDurationWithSeconds(0, v23);
  v47 = v14;
  if (result)
  {
    v25 = result;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v28 = v27;

    *(_QWORD *)(v20 + 48) = v26;
    *(_QWORD *)(v20 + 56) = v28;
    v51 = v20;
    v29 = sub_100005150(&qword_100081D30);
    v30 = sub_10000EEA8(&qword_100081F00, &qword_100081D30, (uint64_t)&protocol conformance descriptor for [A]);
    v31 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v29, v30);
    v33 = v32;
    swift_bridgeObjectRelease(v20);
    v51 = v31;
    v52 = v33;
    v34 = sub_1000248B8();
    v35 = Text.init<A>(_:)(&v51, &type metadata for String, v34);
    v37 = v36;
    v46 = v38;
    v40 = v39 & 1;
    v41 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v7, v48 + *(int *)(v50 + 20), v1);
    (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v4, enum case for PlaybackButton.State.unplayed(_:), v1);
    v42 = sub_10000FBAC(&qword_100082340, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackButton.State, (uint64_t)&protocol conformance descriptor for PlaybackButton.State);
    LOBYTE(v31) = dispatch thunk of static Equatable.== infix(_:_:)(v7, v4, v1, v42);
    v43 = *(void (**)(char *, uint64_t))(v41 + 8);
    v43(v4, v1);
    v43(v7, v1);
    v44 = v46;
    v18 = sub_10004A8AC((v31 & 1) == 0, v35, v37, v40, v46);
    sub_10000EEE8(v35, v37, v40);
    swift_bridgeObjectRelease(v44);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v47, v11);
    return (id)v18;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004A12C@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  int v74;
  uint64_t v75;
  __n128 v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char *v97;
  Swift::String v98;
  Swift::String v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  char *v117;
  uint64_t KeyPath;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t);
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t *v139;
  _OWORD *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;

  v134 = a3;
  v135 = a1;
  v140 = a4;
  v138 = sub_100005150(&qword_100082318);
  __chkstk_darwin(v138);
  v139 = (uint64_t *)((char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v6);
  v137 = (char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v128 - v9;
  v143 = type metadata accessor for ContentTransition(0);
  v141 = *(_QWORD *)(v143 - 8);
  v11 = __chkstk_darwin(v143);
  v142 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Text.DateStyle.UnitsConfiguration.Style(0, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Text.DateStyle.UnitsConfiguration(0, v15);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v128 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Text.DateStyle(0, v20);
  __chkstk_darwin(v23);
  v25 = (char *)&v128 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Date(0);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v128 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31.n128_f64[0] = (*(double (**)(char *, void (*)(char *, uint64_t), __n128))(v30 + 16))(v29, v135, v27);
  v32 = PlayButtonTimeFormatHelper.formatStyle.getter(v31);
  v33 = static PlayButtonTimeFormatHelper.FormatStyle.== infix(_:_:)(v32, 0);
  v136 = a2;
  if ((v33 & 1) != 0)
  {
    static Text.DateStyle.timer.getter();
  }
  else
  {
    v35 = PlayButtonTimeFormatHelper.formatStyle.getter(v34);
    v36 = PlayButtonTimeFormatHelper.FormatStyle.calendarUnits.getter(v35);
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for Text.DateStyle.UnitsConfiguration.Style.short(_:), v13);
    Text.DateStyle.UnitsConfiguration.init(units:style:)(v36, v17);
    static Text.DateStyle.relative(unitConfiguration:)(v22);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  }
  v37 = Text.init(_:style:)(v29, v25);
  v39 = v38;
  v41 = v40;
  v43 = v42 & 1;
  v44 = v142;
  ((void (*)(void))static ContentTransition.identity.getter)();
  v45 = Text.contentTransition(_:)(v44, v37, v39, v43, v41);
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  sub_10000EEE8(v37, v39, v43);
  swift_bridgeObjectRelease(v41);
  v135 = *(void (**)(char *, uint64_t))(v141 + 8);
  v135(v44, v143);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1);
  v52._countAndFlagsBits = 0;
  v52._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v52);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v45, v47, v51, v49);
  v53._countAndFlagsBits = 0x7466656C20;
  v53._object = (void *)0xE500000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v53);
  v54 = LocalizedStringKey.init(stringInterpolation:)(v10);
  v55 = Text.init(_:tableName:bundle:comment:)(v54);
  v57 = v56;
  v59 = v58;
  v61 = v60 & 1;
  sub_10000EEE8(v45, v47, v51);
  swift_bridgeObjectRelease(v49);
  v62 = type metadata accessor for EpisodeCaptionView(0);
  v63 = *(unsigned __int8 *)(v134 + *(int *)(v62 + 28));
  if (v63 == 1)
  {
    v64 = Text.collapsible()(v55, v57, v61, v59);
    v65 = v57;
    v66 = v64;
    v68 = v67;
    v70 = v69;
    v71 = v61;
    v72 = v59;
    v74 = v73 & 1;
    sub_10000EEE8(v55, v65, v71);
    v62 = swift_bridgeObjectRelease(v72);
    v134 = v66;
    v133 = v68;
    v132 = v74;
    v59 = v70;
  }
  else
  {
    v132 = v61;
    v133 = v57;
    v134 = v55;
  }
  v75 = static Edge.Set.trailing.getter(v62);
  v131 = v75;
  v76.n128_u64[0] = -2.0;
  v77 = EdgeInsets.init(_all:)(v75, v76);
  v79 = v78;
  v81 = v80;
  v83 = v82;
  v130 = static Alignment.leading.getter(v84);
  v129 = v85;
  v86 = PlayButtonTimeFormatHelper.widgetCountDownHelper.getter();
  sub_1000112F4(v86);
  *(_QWORD *)&v144 = v87;
  *((_QWORD *)&v144 + 1) = v88;
  v89 = sub_1000248B8();
  v90 = Text.init<A>(_:)(&v144, &type metadata for String, v89);
  v92 = v91;
  v94 = v93;
  v96 = v95 & 1;
  v97 = v137;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1);
  v98._countAndFlagsBits = 0;
  v98._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v98);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v90, v92, v96, v94);
  v99._countAndFlagsBits = 0x7466656C20;
  v99._object = (void *)0xE500000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v99);
  v100 = LocalizedStringKey.init(stringInterpolation:)(v97);
  v101 = Text.init(_:tableName:bundle:comment:)(v100);
  v103 = v102;
  v105 = v104;
  v107 = v106 & 1;
  sub_10000EEE8(v90, v92, v96);
  v108 = swift_bridgeObjectRelease(v94);
  if (v63)
  {
    v109 = Text.collapsible()(v101, v103, v107, v105);
    v111 = v110;
    v113 = v112;
    v114 = v59;
    v116 = v115 & 1;
    sub_10000EEE8(v101, v103, v107);
    v108 = swift_bridgeObjectRelease(v105);
    v101 = v109;
    v103 = v111;
    LOBYTE(v107) = v116;
    v59 = v114;
    v105 = v113;
  }
  *(_QWORD *)&v144 = v134;
  *((_QWORD *)&v144 + 1) = v133;
  LOBYTE(v145) = v132;
  *((_QWORD *)&v145 + 1) = v59;
  LOBYTE(v146) = v131;
  *((double *)&v146 + 1) = v77;
  *(_QWORD *)&v147 = v79;
  *((_QWORD *)&v147 + 1) = v81;
  *(_QWORD *)&v148 = v83;
  BYTE8(v148) = 0;
  *(_QWORD *)&v149 = v130;
  *((_QWORD *)&v149 + 1) = v129;
  *(_QWORD *)&v150 = v101;
  *((_QWORD *)&v150 + 1) = v103;
  LOBYTE(v151) = v107;
  *((_QWORD *)&v151 + 1) = v105;
  v117 = v142;
  static ContentTransition.identity.getter(v108);
  KeyPath = swift_getKeyPath(&unk_10006E360);
  v119 = v139;
  v120 = v143;
  (*(void (**)(char *, char *, uint64_t))(v141 + 16))((char *)v139 + *(int *)(v138 + 28), v117, v143);
  *v119 = KeyPath;
  v121 = sub_100005150(&qword_1000823B0);
  v122 = v140;
  sub_10000EFC4((uint64_t)v119, (uint64_t)v140 + *(int *)(v121 + 36), &qword_100082318);
  v123 = v149;
  v122[4] = v148;
  v122[5] = v123;
  v124 = v151;
  v122[6] = v150;
  v122[7] = v124;
  v125 = v145;
  *v122 = v144;
  v122[1] = v125;
  v126 = v147;
  v122[2] = v146;
  v122[3] = v126;
  sub_10004C0BC((uint64_t)&v144);
  sub_10000F008((uint64_t)v119, &qword_100082318);
  v135(v117, v120);
  return sub_10004C12C((uint64_t)&v144);
}

uint64_t sub_10004A8AC(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v17;

  v9 = a4 & 1;
  v10 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1);
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v13);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(a2, a3, v9, a5);
    v14._countAndFlagsBits = 0x7466656C20;
    v14._object = (void *)0xE500000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
    v15 = LocalizedStringKey.init(stringInterpolation:)(v12);
    return Text.init(_:tableName:bundle:comment:)(v15);
  }
  else
  {
    sub_100024C4C(a2, a3, v9);
    swift_bridgeObjectRetain(a5);
  }
  return a2;
}

uint64_t sub_10004A9E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29[2];

  v29[1] = a5;
  v9 = sub_100005150(&qword_1000823F0);
  __chkstk_darwin(v9);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_100082410);
  __chkstk_darwin(v12);
  v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005150(&qword_1000823B0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v20 = a1 & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
    *(_QWORD *)v11 = static VerticalAlignment.center.getter(v16);
    *((_QWORD *)v11 + 1) = 0;
    v11[16] = 0;
    v21 = sub_100005150(&qword_100082418);
    sub_10004B560(v29[0], a1, a2, a3, a4, (uint64_t *)&v11[*(int *)(v21 + 44)]);
    v22 = &qword_1000823F0;
    sub_10000EFC4((uint64_t)v11, (uint64_t)v14, &qword_1000823F0);
    swift_storeEnumTagMultiPayload(v14, v12, 1);
    v23 = sub_10004BE70();
    v24 = sub_10000EEA8(&qword_1000823E8, &qword_1000823F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v14, v15, v9, v23, v24);
    v25 = (uint64_t)v11;
  }
  else
  {
    ((void (*)(__n128))a3)(v17);
    v22 = &qword_1000823B0;
    sub_10000EFC4((uint64_t)v19, (uint64_t)v14, &qword_1000823B0);
    swift_storeEnumTagMultiPayload(v14, v12, 0);
    v26 = sub_10004BE70();
    v27 = sub_10000EEA8(&qword_1000823E8, &qword_1000823F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v14, v15, v9, v26, v27);
    v25 = (uint64_t)v19;
  }
  return sub_10000F008(v25, v22);
}

uint64_t sub_10004AC20(uint64_t a1, unint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v9 = sub_100005150(&qword_100082408);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_100082430);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v17 = a1 & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    *(_QWORD *)v11 = static VerticalAlignment.center.getter(v13);
    *((_QWORD *)v11 + 1) = 0;
    v11[16] = 0;
    v18 = sub_100005150(&qword_100082438);
    sub_10004B05C(v4, a1, a2, a3, a4, (uint64_t *)&v11[*(int *)(v18 + 44)]);
    sub_10000EFC4((uint64_t)v11, (uint64_t)v16, &qword_100082408);
    swift_storeEnumTagMultiPayload(v16, v12, 1);
    v19 = sub_10000EEA8(&qword_100082400, &qword_100082408, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v16, &type metadata for Text, v9, &protocol witness table for Text, v19);
    return sub_10000F008((uint64_t)v11, &qword_100082408);
  }
  else
  {
    ((void (*)(__int128 *__return_ptr, __n128))a3)(&v24, v14);
    v21 = v25;
    v22 = v26;
    *(_OWORD *)v16 = v24;
    v16[16] = v21;
    *((_QWORD *)v16 + 3) = v22;
    swift_storeEnumTagMultiPayload(v16, v12, 0);
    v23 = sub_10000EEA8(&qword_100082400, &qword_100082408, (uint64_t)&protocol conformance descriptor for HStack<A>);
    return _ConditionalContent<>.init(storage:)(v16, &type metadata for Text, v9, &protocol witness table for Text, v23);
  }
}

uint64_t sub_10004AE20@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t result;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD v41[2];

  v40 = a2;
  v3 = type metadata accessor for PlaybackButton.State(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - v8;
  v41[0] = sub_100010F68();
  v41[1] = v10;
  v11 = sub_1000248B8();
  v12 = Text.init<A>(_:)(v41, &type metadata for String, v11);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = a1 + *(int *)(type metadata accessor for UpNextEntry.Episode(0) + 88);
  v20 = type metadata accessor for WidgetPredictedPlayState(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v19 + *(int *)(v20 + 20), v3);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for PlaybackButton.State.unplayed(_:), v3);
  v21 = sub_10000FBAC(&qword_100082340, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackButton.State, (uint64_t)&protocol conformance descriptor for PlaybackButton.State);
  LOBYTE(v19) = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v3, v21);
  v22 = *(void (**)(char *, uint64_t))(v4 + 8);
  v22(v6, v3);
  v22(v9, v3);
  v23 = sub_10004A8AC((v19 & 1) == 0, v12, v14, v18, v16);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v30 = v26 & 1;
  sub_10000EEE8(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for EpisodeCaptionView(0) + 28)) == 1)
  {
    v31 = Text.collapsible()(v23, v25, v30, v29);
    v33 = v32;
    v35 = v34;
    LOBYTE(v30) = v36 & 1;
  }
  else
  {
    sub_100024C4C(v23, v25, v30);
    swift_bridgeObjectRetain(v29);
    v31 = v23;
    v33 = v25;
    v35 = v29;
  }
  sub_10000EEE8(v23, v25, v27 & 1);
  result = swift_bridgeObjectRelease(v29);
  v38 = v40;
  *v40 = v31;
  v38[1] = v33;
  *((_BYTE *)v38 + 16) = v30;
  v38[3] = v35;
  return result;
}

uint64_t sub_10004B05C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t *__return_ptr, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(uint64_t *__return_ptr, uint64_t);
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  _QWORD v106[2];
  _QWORD v107[3];

  v95 = a5;
  v96 = a4;
  v98 = a6;
  v9 = sub_100005150(&qword_100082420);
  __chkstk_darwin(v9);
  v99 = (uint64_t)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v94 = (char *)&v87 - v12;
  __chkstk_darwin(v13);
  v97 = (uint64_t)&v87 - v14;
  v101 = type metadata accessor for EpisodeCaptionView(0);
  if (*(_BYTE *)(a1 + *(int *)(v101 + 20)) == 1)
  {
    v102 = a2;
    v103 = a3;
    v15 = sub_1000248B8();
    a2 = StringProtocol.localizedUppercase.getter(&type metadata for String, v15);
    a3 = v16;
  }
  else
  {
    swift_bridgeObjectRetain(a3);
  }
  v102 = a2;
  v103 = a3;
  v17 = sub_1000248B8();
  v18 = Text.init<A>(_:)(&v102, &type metadata for String, v17);
  v100 = v19;
  v21 = v20;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 24);
  LODWORD(v93) = v24 & 1;
  v102 = v22;
  v103 = v23;
  v25 = swift_bridgeObjectRetain(v23);
  v26 = static String.eyebrowSeparatorSymbol.getter(v25);
  v28 = v27;
  v107[0] = v26;
  v107[1] = v27;
  v106[0] = 44;
  v106[1] = 0xE100000000000000;
  v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v107, v106, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v17, v17, v17);
  v88 = a1;
  v31 = v30;
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v28);
  v102 = v29;
  v103 = v31;
  v92 = v17;
  v32 = Text.init<A>(_:)(&v102, &type metadata for String, v17);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v39 = v18;
  v40 = v100;
  v41 = v93;
  v42 = Text.accessibilityLabel(_:)();
  v90 = v43;
  v91 = v44;
  v89 = v45;
  v46 = v45 & 1;
  sub_10000EEE8(v32, v34, v38);
  swift_bridgeObjectRelease(v36);
  sub_10000EEE8(v39, v40, v41);
  swift_bridgeObjectRelease(v21);
  v47 = *(unsigned __int8 *)(v88 + *(int *)(v101 + 28));
  v48 = v90;
  if (v47 == 1)
  {
    v49 = v91;
    v93 = Text.collapsible()(v42, v90, v46, v91);
    v100 = v50;
    v101 = v51;
    v53 = v52 & 1;
  }
  else
  {
    sub_100024C4C(v42, v90, v46);
    v49 = v91;
    swift_bridgeObjectRetain(v91);
    v93 = v42;
    v100 = v48;
    v101 = v49;
    v53 = v46;
  }
  sub_10000EEE8(v42, v48, v89 & 1);
  v54 = swift_bridgeObjectRelease(v49);
  v102 = static String.eyebrowSeparatorSymbol.getter(v54);
  v103 = v55;
  v56 = Text.init<A>(_:)(&v102, &type metadata for String, v92);
  v60 = v56;
  v61 = v57;
  v62 = v58;
  v63 = v59;
  v64 = v58 & 1;
  if (v47)
  {
    v65 = Text.collapsible()(v56, v57, v58 & 1, v59);
    v67 = v66;
    v69 = v68;
    v64 = v70 & 1;
  }
  else
  {
    sub_100024C4C(v56, v57, v58 & 1);
    swift_bridgeObjectRetain(v63);
    v65 = v60;
    v67 = v61;
    v69 = v63;
  }
  sub_10000EEE8(v60, v61, v62 & 1);
  swift_bridgeObjectRelease(v63);
  v102 = v65;
  v103 = v67;
  v104 = v64;
  v105 = v69;
  v71 = (uint64_t)v94;
  View.accessibilityHidden(_:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_10000EEE8(v65, v67, v64);
  swift_bridgeObjectRelease(v69);
  v72 = v97;
  v73 = sub_10004C074(v71, v97);
  v96(&v102, v73);
  v74 = v102;
  v75 = v103;
  v76 = v104;
  v77 = v105;
  v78 = v99;
  sub_10000EFC4(v72, v99, &qword_100082420);
  v79 = v98;
  v80 = v93;
  v81 = v100;
  *v98 = v93;
  v79[1] = v81;
  *((_BYTE *)v79 + 16) = v53;
  v79[3] = v101;
  v82 = sub_100005150(&qword_100082440);
  sub_10000EFC4(v78, (uint64_t)v79 + *(int *)(v82 + 48), &qword_100082420);
  v83 = (char *)v79 + *(int *)(v82 + 64);
  *(_QWORD *)v83 = v74;
  *((_QWORD *)v83 + 1) = v75;
  v83[16] = v76;
  *((_QWORD *)v83 + 3) = v77;
  v84 = v100;
  sub_100024C4C(v80, v100, v53);
  v85 = v101;
  swift_bridgeObjectRetain(v101);
  sub_100024C4C(v74, v75, v76);
  swift_bridgeObjectRetain(v77);
  sub_10000F008(v72, &qword_100082420);
  sub_10000EEE8(v74, v75, v76);
  swift_bridgeObjectRelease(v77);
  sub_10000F008(v78, &qword_100082420);
  sub_10000EEE8(v80, v84, v53);
  return swift_bridgeObjectRelease(v85);
}

uint64_t sub_10004B560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void (*v98)(uint64_t);
  uint64_t v99;
  uint64_t *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  _QWORD v108[2];
  _QWORD v109[3];

  v97 = a5;
  v98 = a4;
  v100 = a6;
  v9 = sub_100005150(&qword_1000823B0);
  __chkstk_darwin(v9);
  v103 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v101 = (char *)&v85 - v12;
  v13 = sub_100005150(&qword_100082420);
  __chkstk_darwin(v13);
  v102 = (uint64_t)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v96 = (char *)&v85 - v16;
  __chkstk_darwin(v17);
  v99 = (uint64_t)&v85 - v18;
  v95 = type metadata accessor for EpisodeCaptionView(0);
  if (*(_BYTE *)(a1 + *(int *)(v95 + 20)) == 1)
  {
    v104 = a2;
    v105 = a3;
    v19 = sub_1000248B8();
    a2 = StringProtocol.localizedUppercase.getter(&type metadata for String, v19);
    a3 = v20;
  }
  else
  {
    swift_bridgeObjectRetain(a3);
  }
  v104 = a2;
  v105 = a3;
  v21 = sub_1000248B8();
  v93 = Text.init<A>(_:)(&v104, &type metadata for String, v21);
  v88 = v22;
  v94 = v23;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v87 = v26 & 1;
  v104 = v24;
  v105 = v25;
  v27 = swift_bridgeObjectRetain(v25);
  v28 = static String.eyebrowSeparatorSymbol.getter(v27);
  v30 = v29;
  v109[0] = v28;
  v109[1] = v29;
  v108[0] = 44;
  v108[1] = 0xE100000000000000;
  v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v109, v108, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v21, v21, v21);
  v33 = v32;
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v30);
  v104 = v31;
  v105 = v33;
  v92 = v21;
  v34 = Text.init<A>(_:)(&v104, &type metadata for String, v21);
  v86 = a1;
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  v41 = v93;
  v42 = v88;
  v43 = v87;
  v44 = v94;
  v45 = Text.accessibilityLabel(_:)();
  v90 = v46;
  v91 = v47;
  v89 = v48;
  v49 = v48 & 1;
  sub_10000EEE8(v34, v36, v40);
  swift_bridgeObjectRelease(v38);
  sub_10000EEE8(v41, v42, v43);
  swift_bridgeObjectRelease(v44);
  v50 = *(unsigned __int8 *)(v86 + *(int *)(v95 + 28));
  v51 = v90;
  if (v50 == 1)
  {
    v52 = v91;
    v95 = Text.collapsible()(v45, v90, v49, v91);
    v93 = v53;
    v94 = v54;
    LOBYTE(v49) = v55 & 1;
  }
  else
  {
    sub_100024C4C(v45, v90, v49);
    v52 = v91;
    swift_bridgeObjectRetain(v91);
    v95 = v45;
    v93 = v51;
    v94 = v52;
  }
  sub_10000EEE8(v45, v51, v89 & 1);
  v56 = swift_bridgeObjectRelease(v52);
  v104 = static String.eyebrowSeparatorSymbol.getter(v56);
  v105 = v57;
  v58 = Text.init<A>(_:)(&v104, &type metadata for String, v92);
  v62 = v58;
  v63 = v59;
  v64 = v60;
  v65 = v61;
  v66 = v60 & 1;
  if (v50)
  {
    v67 = Text.collapsible()(v58, v59, v60 & 1, v61);
    v69 = v68;
    v71 = v70;
    v66 = v72 & 1;
  }
  else
  {
    sub_100024C4C(v58, v59, v60 & 1);
    swift_bridgeObjectRetain(v65);
    v67 = v62;
    v69 = v63;
    v71 = v65;
  }
  sub_10000EEE8(v62, v63, v64 & 1);
  swift_bridgeObjectRelease(v65);
  v104 = v67;
  v105 = v69;
  v106 = v66;
  v107 = v71;
  v73 = (uint64_t)v96;
  View.accessibilityHidden(_:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_10000EEE8(v67, v69, v66);
  swift_bridgeObjectRelease(v71);
  v74 = v99;
  v75 = sub_10004C074(v73, v99);
  v76 = (uint64_t)v101;
  v98(v75);
  LOBYTE(v104) = v49;
  v77 = v102;
  sub_10000EFC4(v74, v102, &qword_100082420);
  v78 = v103;
  sub_10000EFC4(v76, v103, &qword_1000823B0);
  v79 = v100;
  v80 = v95;
  v81 = v93;
  *v100 = v95;
  v79[1] = v81;
  *((_BYTE *)v79 + 16) = v49;
  v82 = v94;
  v79[3] = v94;
  v83 = sub_100005150(&qword_100082428);
  sub_10000EFC4(v77, (uint64_t)v79 + *(int *)(v83 + 48), &qword_100082420);
  sub_10000EFC4(v78, (uint64_t)v79 + *(int *)(v83 + 64), &qword_1000823B0);
  sub_100024C4C(v80, v81, v49);
  swift_bridgeObjectRetain(v82);
  sub_100024C4C(v80, v81, v49);
  swift_bridgeObjectRetain(v82);
  sub_10000F008(v76, &qword_1000823B0);
  sub_10000F008(v74, &qword_100082420);
  sub_10000EEE8(v80, v81, v49);
  swift_bridgeObjectRelease(v82);
  sub_10000F008(v78, &qword_1000823B0);
  sub_10000F008(v77, &qword_100082420);
  sub_10000EEE8(v80, v81, v104);
  return swift_bridgeObjectRelease(v82);
}

uint64_t sub_10004BB34()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_10004BB54()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_10004BB74(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ContentTransition(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.contentTransition.setter(v3);
}

unint64_t sub_10004BBFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082320;
  if (!qword_100082320)
  {
    v1 = sub_10000950C(&qword_100082300);
    sub_10004BC80();
    sub_10000EEA8(&qword_1000819D8, &qword_1000819E0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082320);
  }
  return result;
}

unint64_t sub_10004BC80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082328;
  if (!qword_100082328)
  {
    v1 = sub_10000950C(&qword_1000822F8);
    sub_10000EEA8(&qword_100082330, &qword_1000822F0, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    sub_10000EEA8(&qword_100082338, &qword_100082318, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082328);
  }
  return result;
}

unint64_t sub_10004BD1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082388;
  if (!qword_100082388)
  {
    v1 = sub_10000950C(&qword_100082380);
    sub_10004BD88();
    sub_10004BFDC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082388);
  }
  return result;
}

unint64_t sub_10004BD88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082390;
  if (!qword_100082390)
  {
    v1 = sub_10000950C(&qword_100082378);
    sub_10004BDEC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100082390);
  }
  return result;
}

unint64_t sub_10004BDEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082398;
  if (!qword_100082398)
  {
    v1 = sub_10000950C(&qword_1000823A0);
    sub_10004BE70();
    sub_10000EEA8(&qword_1000823E8, &qword_1000823F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082398);
  }
  return result;
}

unint64_t sub_10004BE70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000823A8;
  if (!qword_1000823A8)
  {
    v1 = sub_10000950C(&qword_1000823B0);
    sub_10004BEF4();
    sub_10000EEA8(&qword_100082338, &qword_100082318, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000823A8);
  }
  return result;
}

unint64_t sub_10004BEF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000823B8;
  if (!qword_1000823B8)
  {
    v1 = sub_10000950C(&qword_1000823C0);
    sub_10004BF78();
    sub_10000EEA8(&qword_1000823D8, &qword_1000823E0, (uint64_t)&protocol conformance descriptor for SizeRestrictingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000823B8);
  }
  return result;
}

unint64_t sub_10004BF78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000823C8;
  if (!qword_1000823C8)
  {
    v1 = sub_10000950C(&qword_1000823D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000823C8);
  }
  return result;
}

unint64_t sub_10004BFDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000823F8;
  if (!qword_1000823F8)
  {
    v1 = sub_10000950C(&qword_100082368);
    sub_10000EEA8(&qword_100082400, &qword_100082408, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000823F8);
  }
  return result;
}

uint64_t sub_10004C060@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10004AE20(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10004C068@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10004A12C(*(void (**)(char *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_10004C074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_100082420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004C0BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_BYTE *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  sub_100024C4C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  sub_100024C4C(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_10004C12C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_BYTE *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  sub_10000EEE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  sub_10000EEE8(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

unint64_t sub_10004C1A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100082448;
  if (!qword_100082448)
  {
    v1 = sub_10000950C(&qword_100082450);
    v2[0] = sub_10000950C(&qword_100082300);
    v2[1] = sub_10004BBFC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000FBAC((unint64_t *)&qword_100081228, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082448);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TwoViewPercentageLayout(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TwoViewPercentageLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TwoViewPercentageLayout()
{
  return &type metadata for TwoViewPercentageLayout;
}

unint64_t sub_10004C2E4()
{
  unint64_t result;

  result = qword_100082458;
  if (!qword_100082458)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_100082458);
  }
  return result;
}

uint64_t sub_10004C328@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t v12;

  v2 = type metadata accessor for LayoutSubviews(0);
  v3 = sub_10004CA78();
  dispatch thunk of Collection.startIndex.getter(&v12, v2, v3);
  dispatch thunk of Collection.endIndex.getter(v11, v2, v3);
  if (v12 == v11[0])
  {
    v4 = type metadata accessor for LayoutSubview(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
  }
  else
  {
    v6 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v11, &v12, v2, v3);
    v8 = v7;
    v9 = type metadata accessor for LayoutSubview(0);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, v8, v9);
    v6(v11, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
  }
}

uint64_t sub_10004C428(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, char a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  double v34;
  double v35;
  int v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  double v49;
  double v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v65 = a5;
  v19 = a12 & 1;
  v20 = sub_100005150(&qword_100082468);
  __chkstk_darwin(v20);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v63 - v24;
  v26 = type metadata accessor for LayoutSubview(0);
  v66 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v28 = (char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v64 = (char *)&v63 - v30;
  __chkstk_darwin(v31);
  v33 = (char *)&v63 - v32;
  v34 = fmin(a10, 1.0);
  if (v34 > 0.0)
    v35 = v34;
  else
    v35 = 0.0;
  v36 = Axis.rawValue.getter(v19);
  if (v36 == Axis.rawValue.getter(1))
  {
    if ((a4 & 1) != 0)
      v37 = 10.0;
    else
      v37 = *(double *)&a3;
    sub_10004C328((uint64_t)v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v25, 1, v26) == 1)
    {
      v38 = (uint64_t)v25;
      return sub_10004CA38(v38);
    }
    v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v66 + 32))(v33, v25, v26);
    v42 = v35 * v37;
    v43 = static UnitPoint.topLeading.getter(v41);
    LOBYTE(v68) = a2 & 1;
    LOBYTE(v67) = 0;
    LayoutSubview.place(at:anchor:proposal:)(a1, a2 & 1, *(_QWORD *)&v42, 0, a6, a7, v43, v44);
    v45 = type metadata accessor for LayoutSubviews(0);
    v46 = sub_10004CA78();
    dispatch thunk of Collection.startIndex.getter(&v68, v45, v46);
    dispatch thunk of Collection.endIndex.getter(&v67, v45, v46);
    if (dispatch thunk of Collection.distance(from:to:)(&v68, &v67, v45, v46) >= 2)
    {
      v47 = v64;
      v48 = LayoutSubviews.subscript.getter(1);
      v49 = static UnitPoint.topLeading.getter(v48);
      LOBYTE(v68) = a2 & 1;
      LOBYTE(v67) = 0;
      ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double))LayoutSubview.place(at:anchor:proposal:))(a1, a2 & 1, v37 - v42, 0, a6, v42 + a7, v49, v50);
      v51 = *(void (**)(char *, uint64_t))(v66 + 8);
      v51(v47, v26);
      v52 = v33;
      return ((uint64_t (*)(char *, uint64_t))v51)(v52, v26);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v33, v26);
  }
  else
  {
    if ((a2 & 1) != 0)
      v39 = 10.0;
    else
      v39 = *(double *)&a1;
    sub_10004C328((uint64_t)v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v22, 1, v26) == 1)
    {
      v38 = (uint64_t)v22;
      return sub_10004CA38(v38);
    }
    v53 = (*(uint64_t (**)(char *, char *, uint64_t))(v66 + 32))(v28, v22, v26);
    v54 = v35 * v39;
    v55 = static UnitPoint.topLeading.getter(v53);
    LOBYTE(v68) = 0;
    LOBYTE(v67) = a4 & 1;
    LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v54, 0, a3, a4 & 1, a6, a7, v55, v56);
    v57 = type metadata accessor for LayoutSubviews(0);
    v58 = sub_10004CA78();
    dispatch thunk of Collection.startIndex.getter(&v68, v57, v58);
    dispatch thunk of Collection.endIndex.getter(&v67, v57, v58);
    if (dispatch thunk of Collection.distance(from:to:)(&v68, &v67, v57, v58) >= 2)
    {
      v59 = v64;
      v60 = LayoutSubviews.subscript.getter(1);
      v61 = static UnitPoint.topLeading.getter(v60);
      LOBYTE(v68) = 0;
      LOBYTE(v67) = a4 & 1;
      ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double))LayoutSubview.place(at:anchor:proposal:))(v39 - v54, 0, a3, a4 & 1, v54 + a6, a7, v61, v62);
      v51 = *(void (**)(char *, uint64_t))(v66 + 8);
      v51(v59, v26);
      v52 = v28;
      return ((uint64_t (*)(char *, uint64_t))v51)(v52, v26);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v28, v26);
  }
}

double sub_10004C890(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 10.0;
  return result;
}

uint64_t sub_10004C8B0(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;

  return sub_10004C428(a1, a2 & 1, a3, a4 & 1, a5, a7, a8, a9, a10, *(double *)(v10 + 8), a6, *(_BYTE *)v10);
}

uint64_t sub_10004C8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10004C928(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_10004C8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10004C928(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_10004C928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void (*sub_10004C964(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_10004C9C0;
}

void sub_10004C9C0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

unint64_t sub_10004C9F4()
{
  unint64_t result;

  result = qword_100082460;
  if (!qword_100082460)
  {
    result = swift_getWitnessTable(&unk_10006E3E8, &type metadata for TwoViewPercentageLayout);
    atomic_store(result, (unint64_t *)&qword_100082460);
  }
  return result;
}

uint64_t sub_10004CA38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_100082468);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10004CA78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082470;
  if (!qword_100082470)
  {
    v1 = type metadata accessor for LayoutSubviews(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LayoutSubviews, v1);
    atomic_store(result, (unint64_t *)&qword_100082470);
  }
  return result;
}

double MTEpisode.timeRemainingOpt.getter()
{
  void *v0;
  double result;

  objc_msgSend(v0, "timeRemaining");
  return result;
}

uint64_t MTEpisode.channelName.getter()
{
  return sub_10004CB00((SEL *)&selRef_name);
}

uint64_t MTEpisode.subscriptionName.getter()
{
  return sub_10004CB00((SEL *)&selRef_subscriptionName);
}

uint64_t sub_10004CB00(SEL *a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = objc_msgSend(v1, "podcast");
  if (!v3)
    return 0;
  v4 = v3;
  v5 = objc_msgSend(v3, "channel");

  if (!v5)
    return 0;
  v6 = objc_msgSend(v5, *a1);

  if (!v6)
    return 0;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

double MTEpisode.durationOpt.getter()
{
  void *v0;
  double result;

  objc_msgSend(v0, "duration");
  return result;
}

id MTEpisode.isExplicit.getter()
{
  void *v0;

  return objc_msgSend(v0, "explicit");
}

uint64_t MTEpisode.mediaType.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "isVideo") & 1) != 0)
    return 1;
  if (objc_msgSend(v0, "isExternalType"))
    return 2;
  return 0;
}

uint64_t MTEpisode.episodeTypeResolvedValue.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "isTrailer") & 1) != 0)
    return 2;
  else
    return objc_msgSend(v0, "isBonus") ^ 1;
}

void MTEpisode.episodeTypeResolvedValue.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  NSString v11;

  v3 = ((uint64_t (*)(void))EpisodeType.rawValue.getter)();
  v5 = v4;
  if (v3 == EpisodeType.rawValue.getter(1) && v5 == v6)
  {
    swift_bridgeObjectRelease(v5);
    v11 = 0;
LABEL_9:
    swift_bridgeObjectRelease(v5);
    objc_msgSend(v1, "setEpisodeType:", v11);
    goto LABEL_10;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) == 0)
  {
    EpisodeType.rawValue.getter(a1);
    v5 = v10;
    v11 = String._bridgeToObjectiveC()();
    goto LABEL_9;
  }
  v11 = 0;
  objc_msgSend(v1, "setEpisodeType:", 0);
LABEL_10:

}

void (*MTEpisode.episodeTypeResolvedValue.modify(_QWORD *a1))(uint64_t a1)
{
  void *v1;
  char *v2;
  char v3;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  if ((objc_msgSend(v1, "isTrailer") & 1) != 0)
    v3 = 2;
  else
    v3 = objc_msgSend(v1, "isBonus") ^ 1;
  *v2 = v3;
  return sub_10004CDC0;
}

void sub_10004CDC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v11;
  uint64_t v12;
  NSString v13;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = EpisodeType.rawValue.getter(v2);
  v5 = v4;
  v6 = EpisodeType.rawValue.getter(1);
  v8 = v7;
  if (v3 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease(v5);
    v13 = 0;
LABEL_12:
    swift_bridgeObjectRelease(v5);
    objc_msgSend(*(id *)a1, "setEpisodeType:", v13);
    goto LABEL_13;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v5);
  if ((v11 & 1) == 0)
  {
    EpisodeType.rawValue.getter(v2);
    v5 = v12;
    v13 = String._bridgeToObjectiveC()();
    goto LABEL_12;
  }
  v13 = 0;
  objc_msgSend(*(id *)a1, "setEpisodeType:", 0);
LABEL_13:

}

id MTEpisode.showTypeIsSerial.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, "podcast");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "isSerialShowTypeInFeed");

  return v3;
}

uint64_t MTEpisode.releaseDate.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  double v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  objc_msgSend(v1, "pubDate");
  if (v3 <= 0.0)
  {
    v4 = type metadata accessor for Date(0);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 1;
  }
  else
  {
    Date.init(timeIntervalSinceReferenceDate:)(objc_msgSend(v1, "pubDate"));
    v4 = type metadata accessor for Date(0);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 0;
  }
  return v5(v6, v7, 1, v4);
}

void MTEpisode.listenNowReason.getter(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t);
  unsigned int *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(v2, "listenNowEpisode")
    || (v8 = objc_msgSend(v2, "podcast")) == 0)
  {
    v11 = type metadata accessor for EpisodeListenNowReason(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v13 = a1;
    v14 = 1;
LABEL_11:
    v12(v13, v14, 1, v11);
    return;
  }
  v9 = v8;
  if (objc_msgSend(v2, "isVisuallyPlayed"))
  {

    v10 = (unsigned int *)&enum case for EpisodeListenNowReason.playAgain(_:);
LABEL_10:
    v15 = *v10;
    v16 = type metadata accessor for EpisodeListenNowReason(0);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104))(a1, v15, v16);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v13 = a1;
    v14 = 0;
    v11 = v16;
    goto LABEL_11;
  }
  if ((objc_msgSend(v2, "isPartiallyPlayed") & 1) != 0
    || (objc_msgSend(v2, "isPartiallyPlayedBackCatalogItem") & 1) != 0
    || objc_msgSend(v2, "isPlayheadPartiallyPlayed"))
  {

    v10 = (unsigned int *)&enum case for EpisodeListenNowReason.resume(_:);
    goto LABEL_10;
  }
  v18 = Date.init()();
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((objc_msgSend(v9, "subscribed") & 1) == 0)
  {
    if (objc_msgSend(v2, "isBookmarked"))
    {
      objc_msgSend(v2, "lastBookmarkedDate");
      v21 = v20;
      objc_msgSend(v9, "lastDatePlayed");
      if (v22 < v21)
        goto LABEL_22;
    }
  }
  objc_msgSend(v9, "lastDatePlayed");
  if (v23 > 0.0)
  {
    if (objc_msgSend(v2, "episodeLevel"))
    {

    }
    else
    {
      objc_msgSend(v2, "pubDate");
      v33 = v32;

      if (v19 < v33 + 5184000.0)
      {
        v34 = (unsigned int *)&enum case for EpisodeListenNowReason.new(_:);
LABEL_27:
        v35 = *v34;
        v36 = type metadata accessor for EpisodeListenNowReason(0);
        v37 = *(_QWORD *)(v36 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 104))(a1, v35, v36);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(a1, 0, 1, v36);
        return;
      }
    }
    v34 = (unsigned int *)&enum case for EpisodeListenNowReason.next(_:);
    goto LABEL_27;
  }
  if (objc_msgSend(v9, "subscribed"))
  {
    objc_msgSend(v9, "addedDate");
    v25 = v24;

    v26 = type metadata accessor for EpisodeListenNowReason(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104);
    if (v19 >= v25 + 5184000.0)
      v29 = (unsigned int *)&enum case for EpisodeListenNowReason.followed(_:);
    else
      v29 = (unsigned int *)&enum case for EpisodeListenNowReason.recentlyFollowed(_:);
LABEL_30:
    v28(a1, *v29, v26);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(a1, 0, 1, v26);
    return;
  }
  if (objc_msgSend(v2, "isBookmarked"))
  {
LABEL_22:
    objc_msgSend(v2, "lastBookmarkedDate");
    v31 = v30;

    v26 = type metadata accessor for EpisodeListenNowReason(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104);
    if (v19 >= v31 + 5184000.0)
      v29 = (unsigned int *)&enum case for EpisodeListenNowReason.saved(_:);
    else
      v29 = (unsigned int *)&enum case for EpisodeListenNowReason.recentlySaved(_:);
    goto LABEL_30;
  }
  v38 = type metadata accessor for EpisodeListenNowReason(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a1, 1, 1, v38);

}

id MTEpisode.seasonNumberOpt.getter()
{
  return sub_10004D394((SEL *)&selRef_seasonNumber);
}

id MTEpisode.episodeNumberOpt.getter()
{
  return sub_10004D394((SEL *)&selRef_episodeNumber);
}

id sub_10004D394(SEL *a1)
{
  void *v1;

  if ((uint64_t)objc_msgSend(v1, *a1) < 1)
    return 0;
  else
    return objc_msgSend(v1, *a1);
}

uint64_t sub_10004D3EC()
{
  return MTEpisode.channelName.getter();
}

uint64_t sub_10004D40C()
{
  return MTEpisode.subscriptionName.getter();
}

id sub_10004D42C()
{
  id *v0;

  return objc_msgSend(*v0, "entitlementState");
}

id sub_10004D43C()
{
  id *v0;

  return objc_msgSend(*v0, "hasFreeVersion");
}

void sub_10004D45C(uint64_t a1@<X8>)
{
  MTEpisode.listenNowReason.getter(a1);
}

uint64_t sub_10004D47C()
{
  id *v0;
  id v1;

  v1 = *v0;
  if ((objc_msgSend(*v0, "isTrailer") & 1) != 0)
    return 2;
  else
    return objc_msgSend(v1, "isBonus") ^ 1;
}

uint64_t sub_10004D4C8()
{
  id *v0;
  id v1;

  v1 = *v0;
  if ((objc_msgSend(*v0, "isVideo") & 1) != 0)
    return 1;
  if (objc_msgSend(v1, "isExternalType"))
    return 2;
  return 0;
}

id sub_10004D51C()
{
  id *v0;

  return objc_msgSend(*v0, "explicit");
}

id sub_10004D53C()
{
  id *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(*v0, "podcast");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "isSerialShowTypeInFeed");

  return v3;
}

double sub_10004D594()
{
  id *v0;
  double result;

  objc_msgSend(*v0, "duration");
  return result;
}

id sub_10004D5BC(uint64_t a1, uint64_t a2)
{
  return sub_10004D5D4(a1, a2, (SEL *)&selRef_seasonNumber);
}

id sub_10004D5C8(uint64_t a1, uint64_t a2)
{
  return sub_10004D5D4(a1, a2, (SEL *)&selRef_episodeNumber);
}

id sub_10004D5D4(uint64_t a1, uint64_t a2, SEL *a3)
{
  void **v3;
  void *v5;

  v5 = *v3;
  if ((uint64_t)objc_msgSend(v5, *a3) < 1)
    return 0;
  else
    return objc_msgSend(v5, *a3);
}

uint64_t sub_10004D630@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  void *v3;
  double v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  objc_msgSend(v3, "pubDate");
  if (v4 <= 0.0)
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  else
  {
    Date.init(timeIntervalSinceReferenceDate:)(objc_msgSend(v3, "pubDate"));
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  return v6(v7, v8, 1, v5);
}

double sub_10004D6C4()
{
  id *v0;
  double result;

  objc_msgSend(*v0, "timeRemaining");
  return result;
}

char *sub_10004D6EC(uint64_t a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int *Entry;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v4 = (char *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (char *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[3];
    *(_QWORD *)(a1 + 24) = v8;
    Entry = (int *)type metadata accessor for UpNextEntry(0);
    v10 = Entry[7];
    v11 = &v4[v10];
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for UUID(0);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v14(v11, v12, v13);
    v15 = Entry[8];
    v16 = *(void **)((char *)a2 + v15);
    *(_QWORD *)&v4[v15] = v16;
    v17 = Entry[9];
    v18 = &v4[v17];
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for Date(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    v23 = v16;
    if (v22(v19, 1, v20))
    {
      v24 = sub_100005150(&qword_100081028);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(&v4[Entry[10]], (uint64_t)a2 + Entry[10], v20);
    }
    else
    {
      v26 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v26(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      v26(&v4[Entry[10]], (char *)a2 + Entry[10], v20);
    }
    v27 = Entry[11];
    v28 = &v4[v27];
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for TimelineEntryRelevance(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_100005150(&qword_100081680);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v33 = a3[5];
    v34 = &v4[v33];
    v35 = (uint64_t *)((char *)a2 + v33);
    v36 = sub_100005150(&qword_100081DC8);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v37 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
      v38 = 1;
    }
    else
    {
      v39 = *v35;
      *(_QWORD *)v34 = *v35;
      swift_retain(v39);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v36, v38);
    v40 = a3[6];
    v41 = &v4[v40];
    v42 = (uint64_t *)((char *)a2 + v40);
    v43 = sub_100005150(&qword_100082478);
    if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
    {
      v44 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v41, v42, v44);
      v45 = 1;
    }
    else
    {
      v46 = *v42;
      *(_QWORD *)v41 = *v42;
      swift_retain(v46);
      v45 = 0;
    }
    swift_storeEnumTagMultiPayload(v41, v43, v45);
    v47 = a3[7];
    v48 = &v4[v47];
    v49 = (uint64_t *)((char *)a2 + v47);
    v50 = sub_100005150(&qword_100082480);
    if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
    {
      v51 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v49, v51);
      v52 = 1;
    }
    else
    {
      v53 = *v49;
      *(_QWORD *)v48 = *v49;
      swift_retain(v53);
      v52 = 0;
    }
    swift_storeEnumTagMultiPayload(v48, v50, v52);
    v54 = a3[8];
    v55 = &v4[v54];
    v56 = (uint64_t)a2 + v54;
    v57 = *(_QWORD *)v56;
    v58 = *(_BYTE *)(v56 + 8);
    sub_1000051BC(*(_QWORD *)v56, v58);
    *(_QWORD *)v55 = v57;
    v55[8] = v58;
    v59 = a3[9];
    v60 = &v4[v59];
    v61 = (uint64_t *)((char *)a2 + v59);
    v62 = sub_100005150(&qword_100081DD0);
    if (swift_getEnumCaseMultiPayload(v61, v62) == 1)
    {
      v63 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v60, v61, v63);
      v64 = 1;
    }
    else
    {
      v65 = *v61;
      *(_QWORD *)v60 = *v61;
      swift_retain(v65);
      v64 = 0;
    }
    swift_storeEnumTagMultiPayload(v60, v62, v64);
    v66 = a3[10];
    v67 = &v4[v66];
    v68 = (uint64_t *)((char *)a2 + v66);
    v69 = sub_100005150(&qword_1000814D8);
    if (swift_getEnumCaseMultiPayload(v68, v69) == 1)
    {
      v70 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v67, v68, v70);
      v71 = v67;
      v72 = v69;
      v73 = 1;
    }
    else
    {
      v74 = *v68;
      *(_QWORD *)v67 = *v68;
      swift_retain(v74);
      v71 = v67;
      v72 = v69;
      v73 = 0;
    }
    swift_storeEnumTagMultiPayload(v71, v72, v73);
  }
  return v4;
}

uint64_t sub_10004DB68(uint64_t a1, int *a2)
{
  int *Entry;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v5 = a1 + Entry[7];
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

  v7 = a1 + Entry[9];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  if (!v10)
    v11(v7, v8);
  v11(a1 + Entry[10], v8);
  v12 = a1 + Entry[11];
  v13 = type metadata accessor for TimelineEntryRelevance(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  v15 = (_QWORD *)(a1 + a2[5]);
  v16 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  v18 = (_QWORD *)(a1 + a2[6]);
  v19 = sub_100005150(&qword_100082478);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  v21 = (_QWORD *)(a1 + a2[7]);
  v22 = sub_100005150(&qword_100082480);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  }
  else
  {
    swift_release(*v21);
  }
  sub_100005650(*(_QWORD *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
  v24 = (_QWORD *)(a1 + a2[9]);
  v25 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
  }
  else
  {
    swift_release(*v24);
  }
  v27 = (_QWORD *)(a1 + a2[10]);
  v28 = sub_100005150(&qword_1000814D8);
  if (swift_getEnumCaseMultiPayload(v27, v28) != 1)
    return swift_release(*v27);
  v29 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v27, v29);
}

uint64_t sub_10004DE20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *Entry;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  void (*v24)(void *, const void *, uint64_t);
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v9 = Entry[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v13(v10, v11, v12);
  v14 = Entry[8];
  v15 = *(void **)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  v16 = Entry[9];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v15;
  if (v21(v18, 1, v19))
  {
    v23 = sub_100005150(&qword_100081028);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1 + Entry[10], a2 + Entry[10], v19);
  }
  else
  {
    v24 = *(void (**)(void *, const void *, uint64_t))(v20 + 16);
    v24(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    v24((void *)(a1 + Entry[10]), (const void *)(a2 + Entry[10]), v19);
  }
  v25 = Entry[11];
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  v28 = type metadata accessor for TimelineEntryRelevance(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = sub_100005150(&qword_100081680);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v31 = a3[5];
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v34 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
  {
    v35 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
    v36 = 1;
  }
  else
  {
    v37 = *v33;
    *v32 = *v33;
    swift_retain(v37);
    v36 = 0;
  }
  swift_storeEnumTagMultiPayload(v32, v34, v36);
  v38 = a3[6];
  v39 = (uint64_t *)(a1 + v38);
  v40 = (uint64_t *)(a2 + v38);
  v41 = sub_100005150(&qword_100082478);
  if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
  {
    v42 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v39, v40, v42);
    v43 = 1;
  }
  else
  {
    v44 = *v40;
    *v39 = *v40;
    swift_retain(v44);
    v43 = 0;
  }
  swift_storeEnumTagMultiPayload(v39, v41, v43);
  v45 = a3[7];
  v46 = (uint64_t *)(a1 + v45);
  v47 = (uint64_t *)(a2 + v45);
  v48 = sub_100005150(&qword_100082480);
  if (swift_getEnumCaseMultiPayload(v47, v48) == 1)
  {
    v49 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v46, v47, v49);
    v50 = 1;
  }
  else
  {
    v51 = *v47;
    *v46 = *v47;
    swift_retain(v51);
    v50 = 0;
  }
  swift_storeEnumTagMultiPayload(v46, v48, v50);
  v52 = a3[8];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = *(_QWORD *)v54;
  v56 = *(_BYTE *)(v54 + 8);
  sub_1000051BC(*(_QWORD *)v54, v56);
  *(_QWORD *)v53 = v55;
  *(_BYTE *)(v53 + 8) = v56;
  v57 = a3[9];
  v58 = (uint64_t *)(a1 + v57);
  v59 = (uint64_t *)(a2 + v57);
  v60 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v59, v60) == 1)
  {
    v61 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v58, v59, v61);
    v62 = 1;
  }
  else
  {
    v63 = *v59;
    *v58 = *v59;
    swift_retain(v63);
    v62 = 0;
  }
  swift_storeEnumTagMultiPayload(v58, v60, v62);
  v64 = a3[10];
  v65 = (uint64_t *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  v67 = sub_100005150(&qword_1000814D8);
  if (swift_getEnumCaseMultiPayload(v66, v67) == 1)
  {
    v68 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v65, v66, v68);
    v69 = 1;
  }
  else
  {
    v70 = *v66;
    *v65 = *v66;
    swift_retain(v70);
    v69 = 0;
  }
  swift_storeEnumTagMultiPayload(v65, v67, v69);
  return a1;
}

uint64_t sub_10004E268(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *Entry;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v11 = Entry[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = Entry[8];
  v16 = *(void **)(a1 + v15);
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = v17;

  v19 = Entry[9];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100005150(&qword_100081028);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 24))(a1 + Entry[10], a2 + Entry[10], v22);
  v28 = Entry[11];
  v29 = (void *)(a1 + v28);
  v30 = (void *)(a2 + v28);
  v31 = type metadata accessor for TimelineEntryRelevance(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      if (a1 == a2)
        goto LABEL_24;
      goto LABEL_14;
    }
  }
  else
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 24))(v29, v30, v31);
      if (a1 == a2)
        goto LABEL_24;
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
  }
  v36 = sub_100005150(&qword_100081680);
  memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  if (a1 == a2)
    goto LABEL_24;
LABEL_14:
  v37 = a3[5];
  v38 = (uint64_t *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  sub_10000F008(a1 + v37, &qword_100081DC8);
  v40 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
  {
    v41 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
    v42 = 1;
  }
  else
  {
    v43 = *v39;
    *v38 = *v39;
    swift_retain(v43);
    v42 = 0;
  }
  swift_storeEnumTagMultiPayload(v38, v40, v42);
  v44 = a3[6];
  v45 = (uint64_t *)(a1 + v44);
  v46 = (uint64_t *)(a2 + v44);
  sub_10000F008(a1 + v44, &qword_100082478);
  v47 = sub_100005150(&qword_100082478);
  if (swift_getEnumCaseMultiPayload(v46, v47) == 1)
  {
    v48 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v45, v46, v48);
    v49 = 1;
  }
  else
  {
    v50 = *v46;
    *v45 = *v46;
    swift_retain(v50);
    v49 = 0;
  }
  swift_storeEnumTagMultiPayload(v45, v47, v49);
  v51 = a3[7];
  v52 = (uint64_t *)(a1 + v51);
  v53 = (uint64_t *)(a2 + v51);
  sub_10000F008(a1 + v51, &qword_100082480);
  v54 = sub_100005150(&qword_100082480);
  if (swift_getEnumCaseMultiPayload(v53, v54) == 1)
  {
    v55 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v52, v53, v55);
    v56 = 1;
  }
  else
  {
    v57 = *v53;
    *v52 = *v53;
    swift_retain(v57);
    v56 = 0;
  }
  swift_storeEnumTagMultiPayload(v52, v54, v56);
LABEL_24:
  v58 = a3[8];
  v59 = a1 + v58;
  v60 = a2 + v58;
  v61 = *(_QWORD *)v60;
  v62 = *(_BYTE *)(v60 + 8);
  sub_1000051BC(*(_QWORD *)v60, v62);
  v63 = *(_QWORD *)v59;
  v64 = *(_BYTE *)(v59 + 8);
  *(_QWORD *)v59 = v61;
  *(_BYTE *)(v59 + 8) = v62;
  sub_100005650(v63, v64);
  if (a1 != a2)
  {
    v65 = a3[9];
    v66 = (uint64_t *)(a1 + v65);
    v67 = (uint64_t *)(a2 + v65);
    sub_10000F008(a1 + v65, &qword_100081DD0);
    v68 = sub_100005150(&qword_100081DD0);
    if (swift_getEnumCaseMultiPayload(v67, v68) == 1)
    {
      v69 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v66, v67, v69);
      v70 = 1;
    }
    else
    {
      v71 = *v67;
      *v66 = *v67;
      swift_retain(v71);
      v70 = 0;
    }
    swift_storeEnumTagMultiPayload(v66, v68, v70);
    v72 = a3[10];
    v73 = (uint64_t *)(a1 + v72);
    v74 = (uint64_t *)(a2 + v72);
    sub_10000F008(a1 + v72, &qword_1000814D8);
    v75 = sub_100005150(&qword_1000814D8);
    if (swift_getEnumCaseMultiPayload(v74, v75) == 1)
    {
      v76 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v73, v74, v76);
      v77 = 1;
    }
    else
    {
      v78 = *v74;
      *v73 = *v74;
      swift_retain(v78);
      v77 = 0;
    }
    swift_storeEnumTagMultiPayload(v73, v75, v77);
  }
  return a1;
}

uint64_t sub_10004E7D0(uint64_t a1, uint64_t a2, int *a3)
{
  int *Entry;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void *, const void *, uint64_t);
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v7 = Entry[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + Entry[8]) = *(_QWORD *)(a2 + Entry[8]);
  v11 = Entry[9];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100005150(&qword_100081028);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(a1 + Entry[10], a2 + Entry[10], v14);
  }
  else
  {
    v17 = *(void (**)(void *, const void *, uint64_t))(v15 + 32);
    v17(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    v17((void *)(a1 + Entry[10]), (const void *)(a2 + Entry[10]), v14);
  }
  v18 = Entry[11];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = type metadata accessor for TimelineEntryRelevance(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_100005150(&qword_100081680);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[5];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
    swift_storeEnumTagMultiPayload(v25, v27, 1);
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  v29 = a3[6];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = sub_100005150(&qword_100082478);
  if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
  {
    v33 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v30, v31, v33);
    swift_storeEnumTagMultiPayload(v30, v32, 1);
  }
  else
  {
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  v34 = a3[7];
  v35 = (void *)(a1 + v34);
  v36 = (const void *)(a2 + v34);
  v37 = sub_100005150(&qword_100082480);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v38 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v35, v36, v38);
    swift_storeEnumTagMultiPayload(v35, v37, 1);
  }
  else
  {
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  v39 = a3[8];
  v40 = a3[9];
  v41 = a1 + v39;
  v42 = a2 + v39;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
  v43 = (void *)(a1 + v40);
  v44 = (const void *)(a2 + v40);
  v45 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v44, v45) == 1)
  {
    v46 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v43, v44, v46);
    swift_storeEnumTagMultiPayload(v43, v45, 1);
  }
  else
  {
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  v47 = a3[10];
  v48 = (void *)(a1 + v47);
  v49 = (const void *)(a2 + v47);
  v50 = sub_100005150(&qword_1000814D8);
  if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
  {
    v51 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v48, v49, v51);
    swift_storeEnumTagMultiPayload(v48, v50, 1);
  }
  else
  {
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10004EC04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *Entry;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v10 = Entry[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = Entry[8];
  v15 = *(void **)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);

  v16 = Entry[9];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    v24 = sub_100005150(&qword_100081028);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))(a1 + Entry[10], a2 + Entry[10], v19);
  v25 = Entry[11];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = type metadata accessor for TimelineEntryRelevance(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      if (a1 == a2)
        goto LABEL_23;
      goto LABEL_14;
    }
  }
  else
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 40))(v26, v27, v28);
      if (a1 == a2)
        goto LABEL_23;
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v26, v28);
  }
  v33 = sub_100005150(&qword_100081680);
  memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  if (a1 == a2)
    goto LABEL_23;
LABEL_14:
  v34 = a3[5];
  v35 = (void *)(a1 + v34);
  v36 = (const void *)(a2 + v34);
  sub_10000F008(a1 + v34, &qword_100081DC8);
  v37 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v38 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v35, v36, v38);
    swift_storeEnumTagMultiPayload(v35, v37, 1);
  }
  else
  {
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  v39 = a3[6];
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  sub_10000F008(a1 + v39, &qword_100082478);
  v42 = sub_100005150(&qword_100082478);
  if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
  {
    v43 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v40, v41, v43);
    swift_storeEnumTagMultiPayload(v40, v42, 1);
  }
  else
  {
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  v44 = a3[7];
  v45 = (void *)(a1 + v44);
  v46 = (const void *)(a2 + v44);
  sub_10000F008(a1 + v44, &qword_100082480);
  v47 = sub_100005150(&qword_100082480);
  if (swift_getEnumCaseMultiPayload(v46, v47) == 1)
  {
    v48 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v45, v46, v48);
    swift_storeEnumTagMultiPayload(v45, v47, 1);
  }
  else
  {
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
LABEL_23:
  v49 = a3[8];
  v50 = a1 + v49;
  v51 = (uint64_t *)(a2 + v49);
  v52 = *v51;
  LOBYTE(v51) = *((_BYTE *)v51 + 8);
  v53 = *(_QWORD *)v50;
  v54 = *(_BYTE *)(v50 + 8);
  *(_QWORD *)v50 = v52;
  *(_BYTE *)(v50 + 8) = (_BYTE)v51;
  sub_100005650(v53, v54);
  if (a1 != a2)
  {
    v55 = a3[9];
    v56 = (void *)(a1 + v55);
    v57 = (const void *)(a2 + v55);
    sub_10000F008(a1 + v55, &qword_100081DD0);
    v58 = sub_100005150(&qword_100081DD0);
    if (swift_getEnumCaseMultiPayload(v57, v58) == 1)
    {
      v59 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v56, v57, v59);
      swift_storeEnumTagMultiPayload(v56, v58, 1);
    }
    else
    {
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    v60 = a3[10];
    v61 = (void *)(a1 + v60);
    v62 = (const void *)(a2 + v60);
    sub_10000F008(a1 + v60, &qword_1000814D8);
    v63 = sub_100005150(&qword_1000814D8);
    if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
    {
      v64 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v61, v62, v64);
      swift_storeEnumTagMultiPayload(v61, v63, 1);
    }
    else
    {
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10004F158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004F164);
}

uint64_t sub_10004F164(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t Entry;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  Entry = type metadata accessor for UpNextEntry(0);
  v7 = *(_QWORD *)(Entry - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, Entry);
  v9 = sub_100005150(&qword_100081DD8);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = sub_100005150(&qword_100082488);
  v10 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v13;
    v12 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v14 = sub_100005150(&qword_100082490);
  v10 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v14;
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v16 = sub_100005150(&qword_100081DE0);
    v10 = *(_QWORD *)(v16 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v16;
      v12 = a3[9];
    }
    else
    {
      v11 = sub_100005150(&qword_1000814E0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = a3[10];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v15 = *(unsigned __int8 *)(a1 + a3[8] + 8);
  if (v15 > 1)
    return (v15 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10004F2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004F2B8);
}

uint64_t sub_10004F2B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t Entry;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  Entry = type metadata accessor for UpNextEntry(0);
  v9 = *(_QWORD *)(Entry - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = Entry;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_100005150(&qword_100081DD8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_100005150(&qword_100082488);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        result = sub_100005150(&qword_100082490);
        v14 = *(_QWORD *)(result - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = result;
          v15 = a4[7];
        }
        else
        {
          if (a3 == 254)
          {
            *(_BYTE *)(a1 + a4[8] + 8) = -(char)a2;
            return result;
          }
          v18 = sub_100005150(&qword_100081DE0);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[9];
          }
          else
          {
            v10 = sub_100005150(&qword_1000814E0);
            v14 = *(_QWORD *)(v10 - 8);
            v15 = a4[10];
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for EpisodeListWidgetMain(uint64_t a1)
{
  uint64_t result;

  result = qword_1000824F0;
  if (!qword_1000824F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeListWidgetMain);
  return result;
}

void sub_10004F43C(uint64_t a1)
{
  uint64_t Entry;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[7];

  Entry = type metadata accessor for UpNextEntry(319);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(Entry - 8) + 64;
    sub_10003A230(319, &qword_100081E50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10003A230(319, &qword_100082500, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_10003A230(319, (unint64_t *)&unk_100082508, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(v8 - 8) + 64;
          v14[4] = "\t";
          sub_10003A230(319, (unint64_t *)&unk_100081E58, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
          if (v11 <= 0x3F)
          {
            v14[5] = *(_QWORD *)(v10 - 8) + 64;
            sub_10003A230(319, (unint64_t *)&qword_100081550, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
            if (v13 <= 0x3F)
            {
              v14[6] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 7, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10004F588(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100072000, 1);
}

double sub_10004F598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  double result;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for EpisodeListWidgetMain(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetRenderingMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - v10;
  v13 = sub_100051F20(&qword_100081DD0, v12, 0xD000000000000013, 0x8000000100070640, (uint64_t *)((char *)&v26 - v10));
  static WidgetRenderingMode.vibrant.getter(v13);
  v14 = static WidgetRenderingMode.== infix(_:_:)(v11, v8);
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, v5);
  v15(v11, v5);
  sub_10000EF3C(v1, (uint64_t)v4, type metadata accessor for EpisodeListWidgetMain);
  if ((v14 & 1) != 0)
  {
    v16 = &v4[*(int *)(v2 + 32)];
    v17 = *(_QWORD *)v16;
    v18 = v16[8];
    sub_1000051BC(*(_QWORD *)v16, v18);
    v19 = sub_100051C3C(v17, v18);
    sub_100005650(v17, v18);
    v20 = v19 ^ 1;
  }
  else
  {
    v20 = 0;
  }
  sub_10000EF80((uint64_t)v4, type metadata accessor for EpisodeListWidgetMain);
  v21 = v1 + *(int *)(v2 + 32);
  v22 = *(_QWORD *)v21;
  v23 = *(_BYTE *)(v21 + 8);
  sub_1000051BC(*(_QWORD *)v21, v23);
  v24 = sub_100051C3C(v22, v23);
  sub_100005650(v22, v23);
  result = 7.0;
  if ((v24 & 1) != 0)
    result = 16.0;
  if ((v20 & 1) != 0)
    return 0.0;
  return result;
}

uint64_t sub_10004F794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  char v39;
  uint64_t v40;
  _QWORD v42[2];
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v46 = type metadata accessor for DynamicTypeSize(0);
  v1 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v3 = (_QWORD *)((char *)v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for WidgetFamily(0);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  __chkstk_darwin(v4);
  v49 = (_QWORD *)((char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v42 - v7);
  v9 = type metadata accessor for EpisodeListWidgetMain(0);
  __chkstk_darwin(v9);
  v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)v42 - v13;
  v15 = type metadata accessor for Logger(0);
  v47 = *(_QWORD *)(v15 - 8);
  v48 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.widget.getter(v18);
  sub_10000EF3C(v0, (uint64_t)v14, type metadata accessor for EpisodeListWidgetMain);
  v50 = v0;
  v19 = sub_10000EF3C(v0, (uint64_t)v11, type metadata accessor for EpisodeListWidgetMain);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    v23 = swift_slowAlloc(22, -1);
    v45 = v1;
    v24 = v23;
    v44 = swift_slowAlloc(64, -1);
    v54 = v44;
    *(_DWORD *)v24 = 136446466;
    v42[0] = v24 + 4;
    v42[1] = v9;
    v43 = v22;
    sub_100051F20(&qword_100081DC8, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v8);
    v25 = sub_10000FBAC(&qword_100081CA0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v26 = v52;
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v52, v25);
    v29 = v28;
    (*(void (**)(_QWORD *, uint64_t))(v51 + 8))(v8, v26);
    v53 = sub_1000144C4(v27, v29, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v42[0], v24 + 12);
    swift_bridgeObjectRelease(v29);
    sub_10000EF80((uint64_t)v14, type metadata accessor for EpisodeListWidgetMain);
    *(_WORD *)(v24 + 12) = 2082;
    sub_100051F20(&qword_100082480, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, v3);
    v30 = String.init<A>(describing:)(v3, v46);
    v32 = v31;
    v53 = sub_1000144C4(v30, v31, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease(v32);
    sub_10000EF80((uint64_t)v11, type metadata accessor for EpisodeListWidgetMain);
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v43, "Creating UpNextView with widgetFamily.%{public}s, DynamicTypeSize.%{public}s", (uint8_t *)v24, 0x16u);
    v33 = v44;
    swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v34 = v24;
    v1 = v45;
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    sub_10000EF80((uint64_t)v14, type metadata accessor for EpisodeListWidgetMain);
    sub_10000EF80((uint64_t)v11, type metadata accessor for EpisodeListWidgetMain);
  }

  (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v48);
  v35 = v51;
  v36 = v52;
  v37 = v49;
  sub_100051F20(&qword_100081DC8, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v49);
  v38 = (*(uint64_t (**)(_QWORD *, uint64_t))(v35 + 88))(v37, v36);
  if (v38 == enum case for WidgetFamily.systemSmall(_:))
  {
    v39 = 1;
    return v39 & 1;
  }
  if (v38 == enum case for WidgetFamily.systemMedium(_:))
  {
LABEL_14:
    v39 = 0;
    return v39 & 1;
  }
  if (v38 == enum case for WidgetFamily.systemLarge(_:))
  {
    v40 = sub_100051F20(&qword_100082480, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, v3);
    v39 = DynamicTypeSize.isAccessibilitySize.getter(v40);
    (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v3, v46);
    return v39 & 1;
  }
  v39 = 0;
  if (v38 != enum case for WidgetFamily.systemExtraLarge(_:)
    && v38 != enum case for WidgetFamily.accessoryCircular(_:)
    && v38 != enum case for WidgetFamily.accessoryRectangular(_:)
    && v38 != enum case for WidgetFamily.accessoryInline(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v35 + 8))(v37, v36);
    goto LABEL_14;
  }
  return v39 & 1;
}

__n128 sub_10004FCF4@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  double v22;
  double v23;
  char *v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  __n128 result;
  __n128 v35;
  _OWORD *v36;
  _OWORD *v37;
  __n128 v38[2];
  uint64_t v39;

  v2 = v1;
  v37 = a1;
  v3 = type metadata accessor for Color.RGBColorSpace(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v7);
  v9 = (_OWORD **)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for WidgetRenderingMode(0);
  __chkstk_darwin(v10);
  v12 = (_OWORD **)((char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = v1 + *(int *)(type metadata accessor for EpisodeListWidgetMain(0) + 32);
  v14 = *(_QWORD *)v13;
  v15 = *(_BYTE *)(v13 + 8);
  sub_1000051BC(*(_QWORD *)v13, v15);
  v16 = sub_100051C3C(v14, v15);
  sub_100005650(v14, v15);
  sub_100051F20(&qword_100081DD0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100070640, v12);
  v17 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for UpNextEntry(0) + 32)) != 0;
  sub_100051F20(&qword_1000814D8, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, v9);
  LODWORD(v9) = sub_100069ADC(v16 & 1, v12, v17, (uint64_t)v9);
  v18 = sub_100005150(&qword_100081968);
  v19 = swift_allocObject(v18, 48, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10006DBB0;
  v20 = enum case for Color.RGBColorSpace.sRGB(_:);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v21(v6, enum case for Color.RGBColorSpace.sRGB(_:), v3);
  if ((_DWORD)v9 == 2)
  {
    *(_QWORD *)(v19 + 32) = Color.init(_:red:green:blue:opacity:)(v6, 0.133333333, 0.133333333, 0.133333333, 1.0);
    v21(v6, v20, v3);
    v22 = 0.0784313725;
    v23 = 1.0;
    v24 = v6;
    v25 = 0.0784313725;
    v26 = 0.0784313725;
  }
  else
  {
    *(_QWORD *)(v19 + 32) = Color.init(_:red:green:blue:opacity:)(v6, 0.839215686, 0.431372549, 0.992156863, 1.0);
    v21(v6, v20, v3);
    v22 = 0.51372549;
    v25 = 0.168627451;
    v26 = 0.756862745;
    v23 = 1.0;
    v24 = v6;
  }
  v27 = Color.init(_:red:green:blue:opacity:)(v24, v22, v25, v26, v23);
  *(_QWORD *)(v19 + 40) = v27;
  v38[0].n128_u64[0] = v19;
  specialized Array._endMutation()(v27);
  v28 = Gradient.init(colors:)(v38[0].n128_u64[0]);
  v29 = static UnitPoint.top.getter();
  v31 = v30;
  v32 = static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(v38, v28, v29, v31, v32, v33);
  result = v38[0];
  v35 = v38[1];
  v36 = v37;
  *v37 = v38[0];
  v36[1] = v35;
  *((_QWORD *)v36 + 4) = v39;
  return result;
}

uint64_t sub_10005002C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void (*v54)(char *, _QWORD, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t OpaqueTypeConformance2;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  _BYTE *v73;
  _BOOL4 v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char v108[16];
  uint64_t v109;
  _QWORD v110[4];

  v92 = a1;
  v2 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v2);
  v91 = (uint64_t *)((char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for WidgetRenderingMode(0);
  __chkstk_darwin(v4);
  v90 = (uint64_t *)((char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v89 = type metadata accessor for RedactionReasons(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (uint64_t *)((char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v102 = type metadata accessor for WidgetFamily(0);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v103 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100005150(&qword_100082550);
  __chkstk_darwin(v106);
  v105 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for EpisodeListWidgetMain(0);
  v99 = *(char **)(v101 - 8);
  v107 = *((_QWORD *)v99 + 8);
  v9 = __chkstk_darwin(v101);
  v98 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ContainerBackgroundPlacement(0, v9);
  v94 = *(_QWORD *)(v11 - 8);
  v95 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100005150(&qword_100082558);
  __chkstk_darwin(v93);
  v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005150(&qword_100082560);
  v96 = *(_QWORD *)(v16 - 8);
  v97 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005150(&qword_100082568);
  __chkstk_darwin(v19);
  v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100005150(&qword_100082570);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v104 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100005150(&qword_100082578);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v84 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100005150(&qword_100082580);
  __chkstk_darwin(v82);
  v83 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000508F8((uint64_t)v15);
  v26 = static ContainerBackgroundPlacement.widget.getter(v25);
  v109 = v1;
  v27 = v1;
  v28 = static Alignment.center.getter(v26);
  v30 = v29;
  v31 = sub_100005150(&qword_100082588);
  v32 = sub_1000516BC();
  v33 = sub_100051860();
  v34 = v30;
  v35 = v100;
  v36 = v32;
  v37 = v27;
  View.containerBackground<A>(for:alignment:content:)(v13, v28, v34, sub_1000516B4, v108, v93, v31, v36, v33);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v13, v95);
  sub_10000F008((uint64_t)v15, &qword_100082558);
  KeyPath = swift_getKeyPath(&unk_10006E630);
  v39 = v98;
  sub_10000EF3C(v27, v98, type metadata accessor for EpisodeListWidgetMain);
  v40 = v99[80];
  v41 = (v40 + 16) & ~v40;
  v42 = swift_allocObject(&unk_10007EBB0, v41 + v107, v40 | 7);
  v43 = v42 + v41;
  v44 = v102;
  sub_10000FC78(v39, v43, type metadata accessor for EpisodeListWidgetMain);
  v46 = v96;
  v45 = v97;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v21, v18, v97);
  v107 = v19;
  v47 = *(int *)(v19 + 36);
  v48 = v103;
  v99 = v21;
  v49 = (uint64_t *)&v21[v47];
  *v49 = KeyPath;
  v49[1] = (uint64_t)sub_100051C00;
  v49[2] = v42;
  v50 = v18;
  v51 = v101;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v50, v45);
  sub_100051F20(&qword_100081DC8, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v48);
  v52 = (*(uint64_t (**)(_QWORD *, uint64_t))(v35 + 88))(v48, v44);
  LODWORD(v21) = enum case for WidgetFamily.systemSmall(_:);
  v53 = type metadata accessor for DynamicTypeSize(0);
  v54 = *(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v53 - 8) + 104);
  if (v52 == (_DWORD)v21 || v52 == enum case for WidgetFamily.systemMedium(_:))
  {
    v55 = (uint64_t)v105;
    v54(v105, enum case for DynamicTypeSize.xxxLarge(_:), v53);
  }
  else
  {
    v55 = (uint64_t)v105;
    v54(v105, enum case for DynamicTypeSize.accessibility5(_:), v53);
    (*(void (**)(_QWORD *, uint64_t))(v35 + 8))(v48, v44);
  }
  v56 = sub_10000FBAC(&qword_1000825E8, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v55, v55, v53, v56);
  v58 = v106;
  v59 = v104;
  if ((result & 1) != 0)
  {
    v60 = sub_100051E24();
    v61 = sub_10000EEA8(&qword_100082608, &qword_100082550, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v62 = (uint64_t)v99;
    View.dynamicTypeSize<A>(_:)(v55, v107, v58, v60, v61);
    sub_10000F008(v55, &qword_100082550);
    v63 = sub_10000F008(v62, &qword_100082568);
    v64 = v87;
    if (*(_BYTE *)(v37 + 16) == 2)
      sub_100051F20(&qword_100082478, (uint64_t (*)(_QWORD))&type metadata accessor for RedactionReasons, 0xD000000000000010, 0x8000000100070660, v87);
    else
      static RedactionReasons.placeholder.getter(v63);
    v110[0] = v107;
    v110[1] = v58;
    v110[2] = v60;
    v110[3] = v61;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v110, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v66 = v84;
    v67 = v81;
    View.redacted(reason:)(v64, v81, OpaqueTypeConformance2);
    (*(void (**)(_QWORD *, uint64_t))(v88 + 8))(v64, v89);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v67);
    v68 = swift_getKeyPath(&unk_10006E660);
    v69 = v37 + *(int *)(v51 + 32);
    v70 = *(_QWORD *)v69;
    v71 = *(_BYTE *)(v69 + 8);
    sub_1000051BC(*(_QWORD *)v69, v71);
    v72 = sub_100051C3C(v70, v71);
    sub_100005650(v70, v71);
    v73 = v90;
    sub_100051F20(&qword_100081DD0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100070640, v90);
    v74 = *(_QWORD *)(v37 + *(int *)(type metadata accessor for UpNextEntry(0) + 32)) != 0;
    v75 = v91;
    sub_100051F20(&qword_1000814D8, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, v91);
    LOBYTE(v70) = sub_100069ADC(v72 & 1, v73, v74, (uint64_t)v75);
    v76 = v85;
    v77 = (uint64_t)v83;
    v78 = v86;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v83, v66, v86);
    v79 = v77 + *(int *)(v82 + 36);
    *(_QWORD *)v79 = v68;
    *(_BYTE *)(v79 + 8) = v70;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v66, v78);
    return sub_10000EEF8(v77, v92, &qword_100082580);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000508F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void (*v74)(char *, _QWORD, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];

  v2 = v1;
  v91 = a1;
  v82 = type metadata accessor for EpisodeListWidgetMedium(0);
  __chkstk_darwin(v82);
  v77 = (uint64_t)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100005150(&qword_100082620);
  __chkstk_darwin(v79);
  v81 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100005150(&qword_1000825C0);
  __chkstk_darwin(v90);
  v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for EpisodeListWidgetXL(0);
  __chkstk_darwin(v80);
  v76 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for EpisodeListWidgetLarge(0);
  __chkstk_darwin(v86);
  v78 = (uint64_t)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v73 - v14;
  v87 = sub_100005150(&qword_100082628);
  __chkstk_darwin(v87);
  v89 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100005150(&qword_100082630);
  __chkstk_darwin(v83);
  v84 = (uint64_t)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100005150(&qword_1000825A0);
  __chkstk_darwin(v88);
  v85 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for EpisodeListWidgetSingle(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v73 - v23;
  result = sub_10004F794();
  if ((result & 1) == 0)
  {
    v75 = v6;
    type metadata accessor for EpisodeListWidgetMain(0);
    sub_100051F20(&qword_100081DC8, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v15);
    v74 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
    v74(v12, enum case for WidgetFamily.systemLarge(_:), v9);
    v42 = sub_10000FBAC((unint64_t *)&qword_100081FB8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(v93, v9, v42);
    dispatch thunk of RawRepresentable.rawValue.getter(&v92, v9, v42);
    v43 = v92;
    v44 = v93[0];
    v45 = *(void (**)(char *, uint64_t))(v10 + 8);
    v45(v12, v9);
    v45(v15, v9);
    if (v44 == v43)
    {
      v46 = v78;
      sub_10000EF3C(v2, v78, type metadata accessor for UpNextEntry);
      v47 = sub_10004F598();
      v48 = v86;
      *(double *)(v46 + *(int *)(v86 + 20)) = v47;
      v33 = type metadata accessor for EpisodeListWidgetLarge;
      v49 = v84;
      sub_10000EF3C(v46, v84, type metadata accessor for EpisodeListWidgetLarge);
      swift_storeEnumTagMultiPayload(v49, v83, 1);
      v50 = sub_10000FBAC(&qword_1000825A8, type metadata accessor for EpisodeListWidgetSingle, (uint64_t)&unk_10006DEF8);
      v51 = sub_10000FBAC(&qword_1000825B0, type metadata accessor for EpisodeListWidgetLarge, (uint64_t)&unk_10006DC08);
      v52 = (uint64_t)v85;
      _ConditionalContent<>.init(storage:)(v49, v19, v48, v50, v51);
      v53 = &qword_1000825A0;
      v54 = v89;
      sub_10000EFC4(v52, v89, &qword_1000825A0);
      v55 = v54;
      v56 = v87;
      v57 = 0;
    }
    else
    {
      sub_100051F20(&qword_100081DC8, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v15);
      v74(v12, enum case for WidgetFamily.systemExtraLarge(_:), v9);
      dispatch thunk of RawRepresentable.rawValue.getter(v93, v9, v42);
      dispatch thunk of RawRepresentable.rawValue.getter(&v92, v9, v42);
      v59 = v92;
      v58 = v93[0];
      v45(v12, v9);
      v45(v15, v9);
      if (v58 == v59)
      {
        v46 = v76;
        sub_10000EF3C(v2, v76, type metadata accessor for UpNextEntry);
        v60 = sub_10004F598();
        v62 = v80;
        v61 = (uint64_t)v81;
        *(double *)(v46 + *(int *)(v80 + 20)) = v60;
        v33 = type metadata accessor for EpisodeListWidgetXL;
        sub_10000EF3C(v46, v61, type metadata accessor for EpisodeListWidgetXL);
        swift_storeEnumTagMultiPayload(v61, v79, 0);
        v63 = sub_10000FBAC(&qword_1000825C8, type metadata accessor for EpisodeListWidgetXL, (uint64_t)&unk_10006F044);
        v64 = sub_10000FBAC(&qword_1000825D0, type metadata accessor for EpisodeListWidgetMedium, (uint64_t)&unk_10006F4A8);
        v52 = (uint64_t)v75;
        v65 = v61;
        v66 = v62;
        v67 = v82;
      }
      else
      {
        v46 = v77;
        sub_10000EF3C(v2, v77, type metadata accessor for UpNextEntry);
        v68 = sub_10004F598();
        v70 = (uint64_t)v81;
        v69 = v82;
        *(double *)(v46 + *(int *)(v82 + 20)) = v68;
        v33 = type metadata accessor for EpisodeListWidgetMedium;
        sub_10000EF3C(v46, v70, type metadata accessor for EpisodeListWidgetMedium);
        swift_storeEnumTagMultiPayload(v70, v79, 1);
        v63 = sub_10000FBAC(&qword_1000825C8, type metadata accessor for EpisodeListWidgetXL, (uint64_t)&unk_10006F044);
        v64 = sub_10000FBAC(&qword_1000825D0, type metadata accessor for EpisodeListWidgetMedium, (uint64_t)&unk_10006F4A8);
        v52 = (uint64_t)v75;
        v65 = v70;
        v66 = v80;
        v67 = v69;
      }
      _ConditionalContent<>.init(storage:)(v65, v66, v67, v63, v64);
      v53 = &qword_1000825C0;
      v54 = v89;
      sub_10000EFC4(v52, v89, &qword_1000825C0);
      v55 = v54;
      v56 = v87;
      v57 = 1;
    }
    swift_storeEnumTagMultiPayload(v55, v56, v57);
    v71 = sub_100051728();
    v72 = sub_1000517C4();
    _ConditionalContent<>.init(storage:)(v54, v88, v90, v71, v72);
    sub_10000F008(v52, v53);
    v41 = v46;
    return sub_10000EF80(v41, v33);
  }
  v26 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v26 + 16))
  {
    v27 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UpNextEntry.Episode(0) - 8) + 80);
    sub_10000EF3C(v26 + ((v27 + 32) & ~v27), (uint64_t)v21, type metadata accessor for UpNextEntry.Episode);
    *(double *)&v21[v19[5]] = sub_10004F598();
    v21[v19[6]] = *(_BYTE *)(v1 + 16);
    v28 = &v21[v19[7]];
    *(_QWORD *)v28 = swift_getKeyPath(&unk_10006E688);
    v29 = sub_100005150(&qword_100081DC8);
    swift_storeEnumTagMultiPayload(v28, v29, 0);
    v30 = &v21[v19[8]];
    *(_QWORD *)v30 = swift_getKeyPath(&unk_10006E6B8);
    v30[8] = 0;
    v31 = &v21[v19[9]];
    *(_QWORD *)v31 = swift_getKeyPath(&unk_10006E6E0);
    v32 = sub_100005150(&qword_100081DD0);
    swift_storeEnumTagMultiPayload(v31, v32, 0);
    v33 = type metadata accessor for EpisodeListWidgetSingle;
    sub_10000FC78((uint64_t)v21, (uint64_t)v24, type metadata accessor for EpisodeListWidgetSingle);
    v34 = v84;
    sub_10000EF3C((uint64_t)v24, v84, type metadata accessor for EpisodeListWidgetSingle);
    swift_storeEnumTagMultiPayload(v34, v83, 0);
    v35 = sub_10000FBAC(&qword_1000825A8, type metadata accessor for EpisodeListWidgetSingle, (uint64_t)&unk_10006DEF8);
    v36 = sub_10000FBAC(&qword_1000825B0, type metadata accessor for EpisodeListWidgetLarge, (uint64_t)&unk_10006DC08);
    v37 = (uint64_t)v85;
    _ConditionalContent<>.init(storage:)(v34, v19, v86, v35, v36);
    v38 = v89;
    sub_10000EFC4(v37, v89, &qword_1000825A0);
    swift_storeEnumTagMultiPayload(v38, v87, 0);
    v39 = sub_100051728();
    v40 = sub_1000517C4();
    _ConditionalContent<>.init(storage:)(v38, v88, v90, v39, v40);
    sub_10000F008(v37, &qword_1000825A0);
    v41 = (uint64_t)v24;
    return sub_10000EF80(v41, v33);
  }
  __break(1u);
  return result;
}

double sub_1000511B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double result;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  _BYTE v22[40];
  char v23;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(a1 + *(int *)(type metadata accessor for UpNextEntry(0) + 32));
  if (v8)
  {
    v9 = v8;
    v10 = Image.init(uiImage:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v11 = Image.resizable(capInsets:resizingMode:)(v7, v10, 0.0, 0.0, 0.0, 0.0);
    swift_release(v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v18 = v11;
    v19 = 0u;
    v20 = 0u;
    v21 = 0;
    v12 = sub_1000518CC();
    swift_retain(v11);
    _ConditionalContent<>.init(storage:)(&v18, &type metadata for Image, &type metadata for LinearGradient, &protocol witness table for Image, v12);
    swift_release(v11);

  }
  else
  {
    sub_10004FCF4(v22);
    v18 = *(_QWORD *)v22;
    v19 = *(_OWORD *)&v22[8];
    v20 = *(_OWORD *)&v22[24];
    v21 = 1;
    v13 = sub_1000518CC();
    _ConditionalContent<>.init(storage:)(&v18, &type metadata for Image, &type metadata for LinearGradient, &protocol witness table for Image, v13);
  }
  result = *(double *)v22;
  v15 = *(_OWORD *)&v22[16];
  v16 = *(_QWORD *)&v22[32];
  v17 = v23;
  *(_OWORD *)a2 = *(_OWORD *)v22;
  *(_OWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 32) = v16;
  *(_BYTE *)(a2 + 40) = v17;
  return result;
}

uint64_t sub_100051374(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a1;
  v3 = sub_100005150(&qword_100082618);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v25 = (uint64_t)&v24 - v7;
  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for WidgetRenderingMode(0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = a2 + *(int *)(type metadata accessor for EpisodeListWidgetMain(0) + 32);
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  sub_1000051BC(*(_QWORD *)v15, v17);
  v18 = sub_100051C3C(v16, v17);
  sub_100005650(v16, v17);
  sub_100051F20(&qword_100081DD0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100070640, v14);
  v19 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for UpNextEntry(0) + 32)) != 0;
  sub_100051F20(&qword_1000814D8, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, v11);
  if (sub_100069ADC(v18 & 1, v14, v19, (uint64_t)v11) > 2u)
  {
    v20 = 1;
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v5, enum case for ColorScheme.dark(_:), v8);
    v20 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v20, 1, v8);
  v21 = v25;
  sub_10000EEF8((uint64_t)v5, v25, &qword_100082618);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v21, 1, v8) == 1)
    return sub_10000F008(v21, &qword_100082618);
  v23 = v24;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v24, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v23, v21, v8);
}

_QWORD *sub_10005161C@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000523AC();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for PodcastsWidgetColorScheme, &type metadata for PodcastsWidgetColorScheme, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_100051668(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000523AC();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PodcastsWidgetColorScheme, &type metadata for PodcastsWidgetColorScheme, v1);
}

double sub_1000516B4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000511B8(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000516BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082590;
  if (!qword_100082590)
  {
    v1 = sub_10000950C(&qword_100082558);
    sub_100051728();
    sub_1000517C4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082590);
  }
  return result;
}

unint64_t sub_100051728()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082598;
  if (!qword_100082598)
  {
    v1 = sub_10000950C(&qword_1000825A0);
    sub_10000FBAC(&qword_1000825A8, type metadata accessor for EpisodeListWidgetSingle, (uint64_t)&unk_10006DEF8);
    sub_10000FBAC(&qword_1000825B0, type metadata accessor for EpisodeListWidgetLarge, (uint64_t)&unk_10006DC08);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082598);
  }
  return result;
}

unint64_t sub_1000517C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000825B8;
  if (!qword_1000825B8)
  {
    v1 = sub_10000950C(&qword_1000825C0);
    sub_10000FBAC(&qword_1000825C8, type metadata accessor for EpisodeListWidgetXL, (uint64_t)&unk_10006F044);
    sub_10000FBAC(&qword_1000825D0, type metadata accessor for EpisodeListWidgetMedium, (uint64_t)&unk_10006F4A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000825B8);
  }
  return result;
}

unint64_t sub_100051860()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000825D8;
  if (!qword_1000825D8)
  {
    v1 = sub_10000950C(&qword_100082588);
    sub_1000518CC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000825D8);
  }
  return result;
}

unint64_t sub_1000518CC()
{
  unint64_t result;

  result = qword_1000825E0;
  if (!qword_1000825E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinearGradient, &type metadata for LinearGradient);
    atomic_store(result, (unint64_t *)&qword_1000825E0);
  }
  return result;
}

uint64_t sub_100051918()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *Entry;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v1 = (int *)type metadata accessor for EpisodeListWidgetMain(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v8 = v0 + v4 + Entry[7];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);

  v10 = v0 + v4 + Entry[9];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  if (!v13)
    v14(v10, v11);
  v14(v6 + Entry[10], v11);
  v15 = v6 + Entry[11];
  v16 = type metadata accessor for TimelineEntryRelevance(0);
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  v18 = (_QWORD *)(v6 + v1[5]);
  v19 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  v21 = (_QWORD *)(v6 + v1[6]);
  v22 = sub_100005150(&qword_100082478);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  }
  else
  {
    swift_release(*v21);
  }
  v24 = (_QWORD *)(v6 + v1[7]);
  v25 = sub_100005150(&qword_100082480);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
  }
  else
  {
    swift_release(*v24);
  }
  sub_100005650(*(_QWORD *)(v6 + v1[8]), *(_BYTE *)(v6 + v1[8] + 8));
  v27 = (_QWORD *)(v6 + v1[9]);
  v28 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v29 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v27, v29);
  }
  else
  {
    swift_release(*v27);
  }
  v30 = (_QWORD *)(v6 + v1[10]);
  v31 = sub_100005150(&qword_1000814D8);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v30, v32);
  }
  else
  {
    swift_release(*v30);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100051C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EpisodeListWidgetMain(0) - 8) + 80);
  return sub_100051374(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_100051C3C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1000144C4(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_100005650(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_100051DF4@<X0>(_QWORD *a1@<X8>)
{
  return sub_100051F20(&qword_100081DC8, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

unint64_t sub_100051E24()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000825F0;
  if (!qword_1000825F0)
  {
    v1 = sub_10000950C(&qword_100082568);
    v2[0] = sub_10000950C(&qword_100082558);
    v2[1] = sub_10000950C(&qword_100082588);
    v2[2] = sub_1000516BC();
    v2[3] = sub_100051860();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    sub_10000EEA8(&qword_1000825F8, &qword_100082600, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000825F0);
  }
  return result;
}

uint64_t sub_100051EF4@<X0>(_QWORD *a1@<X8>)
{
  return sub_100051F20(&qword_100081DD0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100070640, a1);
}

uint64_t sub_100051F20@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005150(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000EFC4(v9, (uint64_t)v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v19 = a2(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a5, v17, v19);
  }
  else
  {
    v21 = *v17;
    v22 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
    v23 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v23, v22))
    {
      v29 = a4;
      v24 = swift_slowAlloc(12, -1);
      v30 = a5;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v33 = v26;
      *(_DWORD *)v25 = 136315138;
      v32 = sub_1000144C4(v31, v29, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v25 + 4, v25 + 12);
      _os_log_impl((void *)&_mh_execute_header, v23, v22, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v27 = v25;
      a5 = v30;
      swift_slowDealloc(v27, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(a5, v14, v21);
    swift_release(v21);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

_QWORD *sub_100052158@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000523AC();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for PodcastsWidgetColorScheme, &type metadata for PodcastsWidgetColorScheme, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1000521A4(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000523AC();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PodcastsWidgetColorScheme, &type metadata for PodcastsWidgetColorScheme, v1);
}

uint64_t sub_1000521EC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    v8 = swift_retain(a1);
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v16 = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = sub_1000144C4(0xD000000000000023, 0x8000000100070680, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v16, v7, a1);
    sub_100005650(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v16;
  }
  return a1;
}

unint64_t sub_1000523AC()
{
  unint64_t result;

  result = qword_100082610;
  if (!qword_100082610)
  {
    result = swift_getWitnessTable(&unk_10006F444, &type metadata for PodcastsWidgetColorScheme);
    atomic_store(result, (unint64_t *)&qword_100082610);
  }
  return result;
}

unint64_t sub_100052404()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  result = qword_100082638;
  if (!qword_100082638)
  {
    v1 = sub_10000950C(&qword_100082580);
    v2 = sub_10000950C(&qword_100082570);
    v4 = sub_10000950C(&qword_100082568);
    v5 = sub_10000950C(&qword_100082550);
    v6 = sub_100051E24();
    v7 = sub_10000EEA8(&qword_100082608, &qword_100082550, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    sub_10000EEA8(&qword_100082640, &qword_100082648, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082638);
  }
  return result;
}

uint64_t *sub_10005251C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100052608(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result <= 1)
  {
    v4 = type metadata accessor for WidgetFamily(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *sub_100052654(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_100052718(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1000527EC((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1000527EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EpisodeViewStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for EpisodeViewStyle(uint64_t a1)
{
  uint64_t result;

  result = qword_1000826C0;
  if (!qword_1000826C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeViewStyle);
  return result;
}

void *sub_100052864(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_100052928(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1000527EC((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1000529FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100052A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100052A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100052A28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for WidgetFamily(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_100052A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Font.Leading(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EpisodeViewStyle(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - v10;
  sub_100052C34(v1, (uint64_t)&v19 - v10);
  if (swift_getEnumCaseMultiPayload(v11, v6) == 1)
  {
    sub_100052C34((uint64_t)v11, (uint64_t)v8);
    v12 = type metadata accessor for WidgetFamily(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v13 + 88))(v8, v12) == enum case for WidgetFamily.systemLarge(_:))
    {
      v14 = static Font.callout.getter();
    }
    else
    {
      v17 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v8, v12);
      v14 = static Font.body.getter(v17);
    }
    v16 = v14;
  }
  else
  {
    v15 = static Font.subheadline.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Font.Leading.tight(_:), v2);
    v16 = Font.leading(_:)(v5, v15);
    swift_release(v15);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  sub_1000527EC((uint64_t)v11);
  return v16;
}

uint64_t sub_100052C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EpisodeViewStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100052C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  unint64_t v23;
  _BOOL8 v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for WidgetFamily(0);
  v31 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - v8;
  v10 = type metadata accessor for EpisodeViewStyle(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - v14;
  v16 = sub_100005150(&qword_1000826F8);
  __chkstk_darwin(v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v18[*(int *)(v19 + 48)];
  sub_100052C34(a1, (uint64_t)v18);
  sub_100052C34(a2, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v10);
  if (!EnumCaseMultiPayload)
  {
    sub_100052C34((uint64_t)v18, (uint64_t)v15);
    if (!swift_getEnumCaseMultiPayload(v20, v10))
    {
      v26 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v9, v20, v4);
      v27 = sub_100052F98();
      dispatch thunk of RawRepresentable.rawValue.getter(&v33, v4, v27);
      dispatch thunk of RawRepresentable.rawValue.getter(&v32, v4, v27);
      v24 = v33 == v32;
      v28 = *(void (**)(char *, uint64_t))(v26 + 8);
      v28(v9, v4);
      v28(v15, v4);
      goto LABEL_12;
    }
    v12 = v15;
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_100052C34((uint64_t)v18, (uint64_t)v12);
    if (swift_getEnumCaseMultiPayload(v20, v10) == 1)
    {
      v22 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v6, v20, v4);
      v23 = sub_100052F98();
      dispatch thunk of RawRepresentable.rawValue.getter(&v33, v4, v23);
      dispatch thunk of RawRepresentable.rawValue.getter(&v32, v4, v23);
      v24 = v33 == v32;
      v25 = *(void (**)(char *, uint64_t))(v22 + 8);
      v25(v6, v4);
      v25(v12, v4);
LABEL_12:
      sub_1000527EC((uint64_t)v18);
      return v24;
    }
LABEL_7:
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v4);
LABEL_10:
    sub_100052F58((uint64_t)v18);
    return 0;
  }
  if (swift_getEnumCaseMultiPayload(v20, v10) != 2)
    goto LABEL_10;
  sub_1000527EC((uint64_t)v18);
  return 1;
}

uint64_t sub_100052F58(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_1000826F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100052F98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081FB8;
  if (!qword_100081FB8)
  {
    v1 = type metadata accessor for WidgetFamily(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetFamily, v1);
    atomic_store(result, (unint64_t *)&qword_100081FB8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetEmptyMessage(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetEmptyMessage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000530BC + 4 * byte_10006E765[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000530F0 + 4 * byte_10006E760[v4]))();
}

uint64_t sub_1000530F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000530F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100053100);
  return result;
}

uint64_t sub_10005310C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100053114);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100053118(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053120(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10005312C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetEmptyMessage()
{
  return &type metadata for WidgetEmptyMessage;
}

unint64_t sub_10005314C()
{
  unint64_t result;

  result = qword_100082700;
  if (!qword_100082700)
  {
    result = swift_getWitnessTable(&unk_10006E7D4, &type metadata for WidgetEmptyMessage);
    atomic_store(result, (unint64_t *)&qword_100082700);
  }
  return result;
}

BOOL sub_100053190(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t *sub_1000531A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for EpisodeViewStyle(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v8);
    if (EnumCaseMultiPayload == 1)
    {
      v12 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v6, v7, v12);
      swift_storeEnumTagMultiPayload(v6, v8, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v10 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6, v7, v10);
      swift_storeEnumTagMultiPayload(v6, v8, 0);
    }
  }
  return v3;
}

uint64_t sub_1000532B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for EpisodeViewStyle(0);
  result = swift_getEnumCaseMultiPayload(v2, v3);
  if (result <= 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
  }
  return result;
}

_BYTE *sub_100053310(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for EpisodeViewStyle(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v10 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, v6, v10);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v5, v6, v9);
    swift_storeEnumTagMultiPayload(v5, v7, 0);
  }
  return a1;
}

_BYTE *sub_1000533EC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 20);
    v5 = &a1[v4];
    v6 = &a2[v4];
    sub_1000527EC((uint64_t)&a1[v4]);
    v7 = type metadata accessor for EpisodeViewStyle(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, v6, v10);
      swift_storeEnumTagMultiPayload(v5, v7, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v9 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v5, v6, v9);
      swift_storeEnumTagMultiPayload(v5, v7, 0);
    }
  }
  return a1;
}

_BYTE *sub_1000534D8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for EpisodeViewStyle(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v10 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v5, v6, v10);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v5, v6, v9);
    swift_storeEnumTagMultiPayload(v5, v7, 0);
  }
  return a1;
}

_BYTE *sub_1000535B4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 20);
    v5 = &a1[v4];
    v6 = &a2[v4];
    sub_1000527EC((uint64_t)&a1[v4]);
    v7 = type metadata accessor for EpisodeViewStyle(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v5, v6, v10);
      swift_storeEnumTagMultiPayload(v5, v7, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v9 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v5, v6, v9);
      swift_storeEnumTagMultiPayload(v5, v7, 0);
    }
  }
  return a1;
}

uint64_t sub_1000536A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000536AC);
}

uint64_t sub_1000536AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    if (v4 >= 2)
      return v4 - 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for EpisodeViewStyle(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100053720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005372C);
}

_BYTE *sub_10005372C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for EpisodeViewStyle(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for WidgetEmptyText(uint64_t a1)
{
  uint64_t result;

  result = qword_100082760;
  if (!qword_100082760)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetEmptyText);
  return result;
}

uint64_t sub_1000537D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10006E810;
  result = type metadata accessor for EpisodeViewStyle(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10005384C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100072094, 1);
}

uint64_t sub_10005385C@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;

  v60 = a1;
  v2 = type metadata accessor for BlendMode(0);
  v58 = *(_QWORD *)(v2 - 8);
  v59 = v2;
  __chkstk_darwin(v2);
  v57 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Color.RGBColorSpace(0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v53 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100005150(&qword_100082798);
  __chkstk_darwin(v55);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100005150(&qword_1000827A0);
  __chkstk_darwin(v56);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_1000827A8);
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100005150(&qword_1000827B0);
  __chkstk_darwin(v44);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100005150(&qword_1000827B8);
  __chkstk_darwin(v45);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100005150(&qword_1000827C0);
  v49 = *(_QWORD *)(v51 - 8);
  v16 = __chkstk_darwin(v51);
  v48 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v1;
  if (*v1 == 1)
  {
    v18 = 0xD000000000000022;
    v19 = 0x80000001000706D0;
  }
  else
  {
    v19 = 0x80000001000706B0;
    v18 = 0xD000000000000014;
  }
  v20 = LocalizedStringKey.init(stringLiteral:)(v18, v19, v16);
  v21 = Text.init(_:tableName:bundle:comment:)(v20);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v61 = v21;
  v62 = v22;
  v63 = v26 & 1;
  v64 = v24;
  View.hyphenationFactor(_:)(&type metadata for Text, &protocol witness table for Text, 0.2);
  sub_10000EEE8(v21, v23, v27);
  swift_bridgeObjectRelease(v25);
  type metadata accessor for WidgetEmptyText(0);
  v28 = sub_100052A8C();
  KeyPath = swift_getKeyPath(&unk_10006E878);
  v31 = v46;
  v30 = v47;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v13, v11, v47);
  v32 = (uint64_t *)&v13[*(int *)(v44 + 36)];
  *v32 = KeyPath;
  v32[1] = v28;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
  v33 = swift_getKeyPath(&unk_10006E8A8);
  sub_10000EFC4((uint64_t)v13, (uint64_t)v15, &qword_1000827B0);
  v34 = (uint64_t *)&v15[*(int *)(v45 + 36)];
  *v34 = v33;
  v34[1] = 0x3FE0000000000000;
  sub_10000F008((uint64_t)v13, &qword_1000827B0);
  v35 = v53;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v53, enum case for Color.RGBColorSpace.sRGB(_:), v54);
  v36 = Color.init(_:red:green:blue:opacity:)(v35, 0.921568627, 0.921568627, 0.960784314, 0.4);
  sub_10000EFC4((uint64_t)v15, (uint64_t)v6, &qword_1000827B8);
  *(_QWORD *)&v6[*(int *)(v55 + 36)] = v36;
  v38 = v57;
  v37 = v58;
  v39 = v59;
  (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v57, enum case for BlendMode.plusLighter(_:), v59);
  v40 = v56;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(&v8[*(int *)(v56 + 36)], v38, v39);
  sub_10000EFC4((uint64_t)v6, (uint64_t)v8, &qword_100082798);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
  sub_10000F008((uint64_t)v6, &qword_100082798);
  sub_10000F008((uint64_t)v15, &qword_1000827B8);
  v41 = sub_100053DEC();
  v42 = v48;
  View.unredacted()(v40, v41);
  sub_10000F008((uint64_t)v8, &qword_1000827A0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v60, v42, v51);
}

void sub_100053D54(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

void sub_100053D7C(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_100053DA4(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_100053DC8(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

unint64_t sub_100053DEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000827C8;
  if (!qword_1000827C8)
  {
    v1 = sub_10000950C(&qword_1000827A0);
    sub_100053E58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000827C8);
  }
  return result;
}

unint64_t sub_100053E58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000827D0;
  if (!qword_1000827D0)
  {
    v1 = sub_10000950C(&qword_100082798);
    sub_100053EDC();
    sub_10000EEA8(&qword_100082808, &qword_100082810, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000827D0);
  }
  return result;
}

unint64_t sub_100053EDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000827D8;
  if (!qword_1000827D8)
  {
    v1 = sub_10000950C(&qword_1000827B8);
    sub_100053F60();
    sub_10000EEA8(&qword_1000827F8, &qword_100082800, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000827D8);
  }
  return result;
}

unint64_t sub_100053F60()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000827E0;
  if (!qword_1000827E0)
  {
    v1 = sub_10000950C(&qword_1000827B0);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hyphenationFactor(_:)>>, 1);
    sub_10000EEA8(&qword_1000827E8, &qword_1000827F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000827E0);
  }
  return result;
}

uint64_t sub_100054008()
{
  _QWORD v1[2];

  v1[0] = sub_10000950C(&qword_1000827A0);
  v1[1] = sub_100053DEC();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
}

_QWORD *sub_100054054(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id *v49;
  int v50;
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *__dst;
  void *__dsta;
  _QWORD *v161;
  _QWORD *v162;
  unsigned int (*v164)(char *, uint64_t, uint64_t);
  int *v165;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v10 = a2[6];
    v9 = a2[7];
    a1[6] = v10;
    a1[7] = v9;
    v12 = a2[8];
    v11 = a2[9];
    a1[8] = v12;
    a1[9] = v11;
    v13 = a2[10];
    a1[10] = v13;
    v165 = (int *)type metadata accessor for UpNextEntry.Episode(0);
    v14 = v165[10];
    __dst = (char *)a1 + v14;
    v161 = a1;
    v162 = a2;
    v15 = (char *)a2 + v14;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_retain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v164 = v18;
    if (v18(v15, 1, v16))
    {
      v19 = sub_100005150(&qword_100081028);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v22 = v165[11];
    v21 = v161;
    v23 = (_QWORD *)((char *)v161 + v22);
    v24 = (_QWORD *)((char *)v162 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v165[12];
    v27 = (_QWORD *)((char *)v161 + v26);
    v28 = (_QWORD *)((char *)v162 + v26);
    v29 = (int *)type metadata accessor for ArtworkModel(0);
    v30 = *((_QWORD *)v29 - 1);
    v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
    swift_bridgeObjectRetain(v25);
    if (v31(v28, 1, v29))
    {
      v32 = sub_100005150(&qword_100081030);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      __dsta = (void *)v16;
      v33 = v28[1];
      *v27 = *v28;
      v27[1] = v33;
      v34 = *((unsigned __int8 *)v28 + 32);
      swift_bridgeObjectRetain(v33);
      if (v34 == 255)
      {
        *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
        *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
      }
      else
      {
        v35 = v28[2];
        v36 = v28[3];
        sub_100005190(v35, v36, v34);
        v27[2] = v35;
        v27[3] = v36;
        *((_BYTE *)v27 + 32) = v34;
      }
      *(_OWORD *)(v27 + 5) = *(_OWORD *)(v28 + 5);
      v37 = (id *)(v28 + 7);
      v38 = *((unsigned __int8 *)v28 + 64);
      if (v38 == 255)
      {
        v27[7] = *v37;
        *((_BYTE *)v27 + 64) = *((_BYTE *)v28 + 64);
      }
      else
      {
        v39 = *v37;
        sub_1000051A8(*v37, *((_BYTE *)v28 + 64));
        v27[7] = v39;
        *((_BYTE *)v27 + 64) = v38;
      }
      v40 = (id *)(v28 + 9);
      v41 = *((unsigned __int8 *)v28 + 80);
      if (v41 == 255)
      {
        v27[9] = *v40;
        *((_BYTE *)v27 + 80) = *((_BYTE *)v28 + 80);
      }
      else
      {
        v42 = *v40;
        sub_1000051A8(*v40, *((_BYTE *)v28 + 80));
        v27[9] = v42;
        *((_BYTE *)v27 + 80) = v41;
      }
      v43 = (id *)(v28 + 11);
      v44 = *((unsigned __int8 *)v28 + 96);
      if (v44 == 255)
      {
        v27[11] = *v43;
        *((_BYTE *)v27 + 96) = *((_BYTE *)v28 + 96);
      }
      else
      {
        v45 = *v43;
        sub_1000051A8(*v43, *((_BYTE *)v28 + 96));
        v27[11] = v45;
        *((_BYTE *)v27 + 96) = v44;
      }
      v46 = (id *)(v28 + 13);
      v47 = *((unsigned __int8 *)v28 + 112);
      if (v47 == 255)
      {
        v27[13] = *v46;
        *((_BYTE *)v27 + 112) = *((_BYTE *)v28 + 112);
      }
      else
      {
        v48 = *v46;
        sub_1000051A8(*v46, *((_BYTE *)v28 + 112));
        v27[13] = v48;
        *((_BYTE *)v27 + 112) = v47;
      }
      v49 = (id *)(v28 + 15);
      v50 = *((unsigned __int8 *)v28 + 128);
      if (v50 == 255)
      {
        v27[15] = *v49;
        *((_BYTE *)v27 + 128) = *((_BYTE *)v28 + 128);
      }
      else
      {
        v51 = *v49;
        sub_1000051A8(*v49, *((_BYTE *)v28 + 128));
        v27[15] = v51;
        *((_BYTE *)v27 + 128) = v50;
      }
      v16 = (uint64_t)__dsta;
      *((_BYTE *)v27 + 129) = *((_BYTE *)v28 + 129);
      v52 = v29[11];
      v53 = (char *)v27 + v52;
      v54 = (char *)v28 + v52;
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      v56 = v29[12];
      v57 = (_QWORD *)((char *)v27 + v56);
      v58 = (_QWORD *)((char *)v28 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
      *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
      *((_BYTE *)v27 + v29[15]) = *((_BYTE *)v28 + v29[15]);
      v60 = v29[16];
      v61 = (_QWORD *)((char *)v27 + v60);
      v62 = (_QWORD *)((char *)v28 + v60);
      v63 = v62[1];
      *v61 = *v62;
      v61[1] = v63;
      v64 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      v64(v27, 0, 1, v29);
    }
    v65 = v165[13];
    v66 = (_QWORD *)((char *)v161 + v65);
    v67 = (_QWORD *)((char *)v162 + v65);
    if (v31((_QWORD *)((char *)v162 + v65), 1, v29))
    {
      v68 = sub_100005150(&qword_100081030);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = v16;
      v70 = v67[1];
      *v66 = *v67;
      v66[1] = v70;
      v71 = *((unsigned __int8 *)v67 + 32);
      swift_bridgeObjectRetain(v70);
      if (v71 == 255)
      {
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        *((_BYTE *)v66 + 32) = *((_BYTE *)v67 + 32);
      }
      else
      {
        v72 = v67[2];
        v73 = v67[3];
        sub_100005190(v72, v73, v71);
        v66[2] = v72;
        v66[3] = v73;
        *((_BYTE *)v66 + 32) = v71;
      }
      *(_OWORD *)(v66 + 5) = *(_OWORD *)(v67 + 5);
      v74 = (id *)(v67 + 7);
      v75 = *((unsigned __int8 *)v67 + 64);
      if (v75 == 255)
      {
        v66[7] = *v74;
        *((_BYTE *)v66 + 64) = *((_BYTE *)v67 + 64);
      }
      else
      {
        v76 = *v74;
        sub_1000051A8(*v74, *((_BYTE *)v67 + 64));
        v66[7] = v76;
        *((_BYTE *)v66 + 64) = v75;
      }
      v77 = (id *)(v67 + 9);
      v78 = *((unsigned __int8 *)v67 + 80);
      if (v78 == 255)
      {
        v66[9] = *v77;
        *((_BYTE *)v66 + 80) = *((_BYTE *)v67 + 80);
      }
      else
      {
        v79 = *v77;
        sub_1000051A8(*v77, *((_BYTE *)v67 + 80));
        v66[9] = v79;
        *((_BYTE *)v66 + 80) = v78;
      }
      v80 = (id *)(v67 + 11);
      v81 = *((unsigned __int8 *)v67 + 96);
      if (v81 == 255)
      {
        v66[11] = *v80;
        *((_BYTE *)v66 + 96) = *((_BYTE *)v67 + 96);
      }
      else
      {
        v82 = *v80;
        sub_1000051A8(*v80, *((_BYTE *)v67 + 96));
        v66[11] = v82;
        *((_BYTE *)v66 + 96) = v81;
      }
      v83 = (id *)(v67 + 13);
      v84 = *((unsigned __int8 *)v67 + 112);
      if (v84 == 255)
      {
        v66[13] = *v83;
        *((_BYTE *)v66 + 112) = *((_BYTE *)v67 + 112);
      }
      else
      {
        v85 = *v83;
        sub_1000051A8(*v83, *((_BYTE *)v67 + 112));
        v66[13] = v85;
        *((_BYTE *)v66 + 112) = v84;
      }
      v86 = (id *)(v67 + 15);
      v87 = *((unsigned __int8 *)v67 + 128);
      if (v87 == 255)
      {
        v66[15] = *v86;
        *((_BYTE *)v66 + 128) = *((_BYTE *)v67 + 128);
      }
      else
      {
        v88 = *v86;
        sub_1000051A8(*v86, *((_BYTE *)v67 + 128));
        v66[15] = v88;
        *((_BYTE *)v66 + 128) = v87;
      }
      v16 = v69;
      *((_BYTE *)v66 + 129) = *((_BYTE *)v67 + 129);
      v89 = v29[11];
      v90 = (char *)v66 + v89;
      v91 = (char *)v67 + v89;
      v92 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = v29[12];
      v94 = (_QWORD *)((char *)v66 + v93);
      v95 = (_QWORD *)((char *)v67 + v93);
      v96 = v95[1];
      *v94 = *v95;
      v94[1] = v96;
      *((_BYTE *)v66 + v29[13]) = *((_BYTE *)v67 + v29[13]);
      *((_BYTE *)v66 + v29[14]) = *((_BYTE *)v67 + v29[14]);
      *((_BYTE *)v66 + v29[15]) = *((_BYTE *)v67 + v29[15]);
      v97 = v29[16];
      v98 = (_QWORD *)((char *)v66 + v97);
      v99 = (_QWORD *)((char *)v67 + v97);
      v100 = v99[1];
      *v98 = *v99;
      v98[1] = v100;
      v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v100);
      v101(v66, 0, 1, v29);
    }
    v102 = v165[14];
    v103 = *(void **)((char *)v162 + v102);
    *(_QWORD *)((char *)v161 + v102) = v103;
    v104 = v165[15];
    v105 = (char *)v161 + v104;
    v106 = (char *)v162 + v104;
    v107 = type metadata accessor for URL(0);
    v108 = *(_QWORD *)(v107 - 8);
    v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
    v110 = v103;
    if (v109(v106, 1, v107))
    {
      v111 = sub_100005150(&qword_100081038);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    *((_BYTE *)v161 + v165[16]) = *((_BYTE *)v162 + v165[16]);
    v112 = v165[17];
    v113 = (char *)v161 + v112;
    v114 = (char *)v162 + v112;
    *(_QWORD *)v113 = *(_QWORD *)v114;
    v113[8] = v114[8];
    v115 = v165[18];
    v116 = (char *)v161 + v115;
    v117 = (char *)v162 + v115;
    *(_QWORD *)v116 = *(_QWORD *)v117;
    v116[8] = v117[8];
    v118 = v165[19];
    v119 = (char *)v161 + v118;
    v120 = (char *)v162 + v118;
    if (v164((char *)v162 + v118, 1, v16))
    {
      v121 = sub_100005150(&qword_100081028);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v119, v120, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v119, 0, 1, v16);
    }
    v122 = v165[20];
    v123 = (char *)v161 + v122;
    v124 = (char *)v162 + v122;
    if (v164((char *)v162 + v122, 1, v16))
    {
      v125 = sub_100005150(&qword_100081028);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v123, v124, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v123, 0, 1, v16);
    }
    v126 = v165[21];
    v127 = (_QWORD *)((char *)v161 + v126);
    v128 = (_QWORD *)((char *)v162 + v126);
    v129 = *v128;
    if (*v128)
    {
      v130 = v128[1];
      v131 = v128[2];
      *v127 = v129;
      v127[1] = v130;
      v127[2] = v131;
      swift_retain(v129);
      swift_retain(v130);
      swift_retain(v131);
    }
    else
    {
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v127[2] = v128[2];
    }
    v132 = v165[22];
    v133 = (char *)v161 + v132;
    v134 = (char *)v162 + v132;
    v135 = sub_100005150(&qword_100081040);
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_100005150(&qword_100081048);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v138(v133, v134, v16);
      v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    v140 = v139[5];
    v141 = &v133[v140];
    v142 = &v134[v140];
    v143 = type metadata accessor for PlaybackButton.State(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
    v144 = v139[6];
    v145 = &v133[v144];
    v146 = &v134[v144];
    v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
    {
      v149 = sub_100005150(&qword_100081050);
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
    }
    v150 = v139[7];
    v151 = &v133[v150];
    v152 = &v134[v150];
    v153 = *((_QWORD *)v152 + 1);
    *(_QWORD *)v151 = *(_QWORD *)v152;
    *((_QWORD *)v151 + 1) = v153;
    v154 = v139[8];
    v155 = &v133[v154];
    v156 = &v134[v154];
    v157 = *((_QWORD *)v156 + 1);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v157;
    *(_OWORD *)((char *)v161 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)v162 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v157);
  }
  return v21;
}

_QWORD *sub_100054AD0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int *v27;
  uint64_t v28;
  unsigned int (*v29)(_QWORD *, uint64_t, int *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  int v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  id *v42;
  int v43;
  id v44;
  id *v45;
  int v46;
  id v47;
  id *v48;
  int v49;
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  void (*v63)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *__dst;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v163;
  int *v164;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v9 = a2[6];
  v8 = a2[7];
  a1[6] = v9;
  a1[7] = v8;
  v11 = a2[8];
  v10 = a2[9];
  a1[8] = v11;
  a1[9] = v10;
  v12 = a2[10];
  a1[10] = v12;
  v164 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v13 = v164[10];
  __dst = (char *)a1 + v13;
  v160 = a1;
  v163 = a2;
  v14 = (char *)a2 + v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v161 = v16;
  if (v17(v14, 1, v15))
  {
    v18 = sub_100005150(&qword_100081028);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = v164[11];
  v20 = (_QWORD *)((char *)v160 + v19);
  v21 = v163;
  v22 = (_QWORD *)((char *)v163 + v19);
  v23 = v22[1];
  *v20 = *v22;
  v20[1] = v23;
  v24 = v164[12];
  v25 = (_QWORD *)((char *)v160 + v24);
  v26 = (_QWORD *)((char *)v163 + v24);
  v27 = (int *)type metadata accessor for ArtworkModel(0);
  v28 = *((_QWORD *)v27 - 1);
  v29 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v28 + 48);
  swift_bridgeObjectRetain(v23);
  if (v29(v26, 1, v27))
  {
    v30 = sub_100005150(&qword_100081030);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v31 = v15;
    v32 = v26[1];
    *v25 = *v26;
    v25[1] = v32;
    v33 = *((unsigned __int8 *)v26 + 32);
    swift_bridgeObjectRetain(v32);
    if (v33 == 255)
    {
      *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
      *((_BYTE *)v25 + 32) = *((_BYTE *)v26 + 32);
    }
    else
    {
      v34 = v26[2];
      v35 = v26[3];
      sub_100005190(v34, v35, v33);
      v25[2] = v34;
      v25[3] = v35;
      *((_BYTE *)v25 + 32) = v33;
    }
    *(_OWORD *)(v25 + 5) = *(_OWORD *)(v26 + 5);
    v36 = (id *)(v26 + 7);
    v37 = *((unsigned __int8 *)v26 + 64);
    if (v37 == 255)
    {
      v25[7] = *v36;
      *((_BYTE *)v25 + 64) = *((_BYTE *)v26 + 64);
    }
    else
    {
      v38 = *v36;
      sub_1000051A8(*v36, *((_BYTE *)v26 + 64));
      v25[7] = v38;
      *((_BYTE *)v25 + 64) = v37;
    }
    v39 = (id *)(v26 + 9);
    v40 = *((unsigned __int8 *)v26 + 80);
    if (v40 == 255)
    {
      v25[9] = *v39;
      *((_BYTE *)v25 + 80) = *((_BYTE *)v26 + 80);
    }
    else
    {
      v41 = *v39;
      sub_1000051A8(*v39, *((_BYTE *)v26 + 80));
      v25[9] = v41;
      *((_BYTE *)v25 + 80) = v40;
    }
    v42 = (id *)(v26 + 11);
    v43 = *((unsigned __int8 *)v26 + 96);
    if (v43 == 255)
    {
      v25[11] = *v42;
      *((_BYTE *)v25 + 96) = *((_BYTE *)v26 + 96);
    }
    else
    {
      v44 = *v42;
      sub_1000051A8(*v42, *((_BYTE *)v26 + 96));
      v25[11] = v44;
      *((_BYTE *)v25 + 96) = v43;
    }
    v45 = (id *)(v26 + 13);
    v46 = *((unsigned __int8 *)v26 + 112);
    if (v46 == 255)
    {
      v25[13] = *v45;
      *((_BYTE *)v25 + 112) = *((_BYTE *)v26 + 112);
    }
    else
    {
      v47 = *v45;
      sub_1000051A8(*v45, *((_BYTE *)v26 + 112));
      v25[13] = v47;
      *((_BYTE *)v25 + 112) = v46;
    }
    v48 = (id *)(v26 + 15);
    v49 = *((unsigned __int8 *)v26 + 128);
    if (v49 == 255)
    {
      v25[15] = *v48;
      *((_BYTE *)v25 + 128) = *((_BYTE *)v26 + 128);
    }
    else
    {
      v50 = *v48;
      sub_1000051A8(*v48, *((_BYTE *)v26 + 128));
      v25[15] = v50;
      *((_BYTE *)v25 + 128) = v49;
    }
    v15 = v31;
    *((_BYTE *)v25 + 129) = *((_BYTE *)v26 + 129);
    v51 = v27[11];
    v52 = (char *)v25 + v51;
    v53 = (char *)v26 + v51;
    v54 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
    v55 = v27[12];
    v56 = (_QWORD *)((char *)v25 + v55);
    v57 = (_QWORD *)((char *)v26 + v55);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    *((_BYTE *)v25 + v27[13]) = *((_BYTE *)v26 + v27[13]);
    *((_BYTE *)v25 + v27[14]) = *((_BYTE *)v26 + v27[14]);
    *((_BYTE *)v25 + v27[15]) = *((_BYTE *)v26 + v27[15]);
    v59 = v27[16];
    v60 = (_QWORD *)((char *)v25 + v59);
    v61 = (_QWORD *)((char *)v26 + v59);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v28 + 56);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v62);
    v63(v25, 0, 1, v27);
    v21 = v163;
  }
  v64 = v164[13];
  v65 = (_QWORD *)((char *)v160 + v64);
  v66 = (_QWORD *)((char *)v21 + v64);
  if (v29((_QWORD *)((char *)v21 + v64), 1, v27))
  {
    v67 = sub_100005150(&qword_100081030);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    v68 = v164;
  }
  else
  {
    v69 = v15;
    v70 = v66[1];
    *v65 = *v66;
    v65[1] = v70;
    v71 = *((unsigned __int8 *)v66 + 32);
    swift_bridgeObjectRetain(v70);
    if (v71 == 255)
    {
      *((_OWORD *)v65 + 1) = *((_OWORD *)v66 + 1);
      *((_BYTE *)v65 + 32) = *((_BYTE *)v66 + 32);
    }
    else
    {
      v72 = v66[2];
      v73 = v66[3];
      sub_100005190(v72, v73, v71);
      v65[2] = v72;
      v65[3] = v73;
      *((_BYTE *)v65 + 32) = v71;
    }
    v68 = v164;
    *(_OWORD *)(v65 + 5) = *(_OWORD *)(v66 + 5);
    v74 = (id *)(v66 + 7);
    v75 = *((unsigned __int8 *)v66 + 64);
    if (v75 == 255)
    {
      v65[7] = *v74;
      *((_BYTE *)v65 + 64) = *((_BYTE *)v66 + 64);
    }
    else
    {
      v76 = *v74;
      sub_1000051A8(*v74, *((_BYTE *)v66 + 64));
      v65[7] = v76;
      *((_BYTE *)v65 + 64) = v75;
    }
    v77 = (id *)(v66 + 9);
    v78 = *((unsigned __int8 *)v66 + 80);
    if (v78 == 255)
    {
      v65[9] = *v77;
      *((_BYTE *)v65 + 80) = *((_BYTE *)v66 + 80);
    }
    else
    {
      v79 = *v77;
      sub_1000051A8(*v77, *((_BYTE *)v66 + 80));
      v65[9] = v79;
      *((_BYTE *)v65 + 80) = v78;
    }
    v80 = (id *)(v66 + 11);
    v81 = *((unsigned __int8 *)v66 + 96);
    if (v81 == 255)
    {
      v65[11] = *v80;
      *((_BYTE *)v65 + 96) = *((_BYTE *)v66 + 96);
    }
    else
    {
      v82 = *v80;
      sub_1000051A8(*v80, *((_BYTE *)v66 + 96));
      v65[11] = v82;
      *((_BYTE *)v65 + 96) = v81;
    }
    v83 = (id *)(v66 + 13);
    v84 = *((unsigned __int8 *)v66 + 112);
    if (v84 == 255)
    {
      v65[13] = *v83;
      *((_BYTE *)v65 + 112) = *((_BYTE *)v66 + 112);
    }
    else
    {
      v85 = *v83;
      sub_1000051A8(*v83, *((_BYTE *)v66 + 112));
      v65[13] = v85;
      *((_BYTE *)v65 + 112) = v84;
    }
    v86 = (id *)(v66 + 15);
    v87 = *((unsigned __int8 *)v66 + 128);
    if (v87 == 255)
    {
      v65[15] = *v86;
      *((_BYTE *)v65 + 128) = *((_BYTE *)v66 + 128);
    }
    else
    {
      v88 = *v86;
      sub_1000051A8(*v86, *((_BYTE *)v66 + 128));
      v65[15] = v88;
      *((_BYTE *)v65 + 128) = v87;
    }
    v15 = v69;
    *((_BYTE *)v65 + 129) = *((_BYTE *)v66 + 129);
    v89 = v27[11];
    v90 = (char *)v65 + v89;
    v91 = (char *)v66 + v89;
    v92 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
    v93 = v27[12];
    v94 = (_QWORD *)((char *)v65 + v93);
    v95 = (_QWORD *)((char *)v66 + v93);
    v96 = v95[1];
    *v94 = *v95;
    v94[1] = v96;
    *((_BYTE *)v65 + v27[13]) = *((_BYTE *)v66 + v27[13]);
    *((_BYTE *)v65 + v27[14]) = *((_BYTE *)v66 + v27[14]);
    *((_BYTE *)v65 + v27[15]) = *((_BYTE *)v66 + v27[15]);
    v97 = v27[16];
    v98 = (_QWORD *)((char *)v65 + v97);
    v99 = (_QWORD *)((char *)v66 + v97);
    v100 = v99[1];
    *v98 = *v99;
    v98[1] = v100;
    v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v28 + 56);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v100);
    v101(v65, 0, 1, v27);
    v21 = v163;
  }
  v102 = v68[14];
  v103 = *(void **)((char *)v21 + v102);
  *(_QWORD *)((char *)v160 + v102) = v103;
  v104 = v68[15];
  v105 = (char *)v160 + v104;
  v106 = (char *)v21 + v104;
  v107 = type metadata accessor for URL(0);
  v108 = *(_QWORD *)(v107 - 8);
  v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
  v110 = v103;
  if (v109(v106, 1, v107))
  {
    v111 = sub_100005150(&qword_100081038);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
  }
  *((_BYTE *)v160 + v68[16]) = *((_BYTE *)v21 + v68[16]);
  v112 = v68[17];
  v113 = (char *)v160 + v112;
  v114 = (uint64_t)v21 + v112;
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v113[8] = *(_BYTE *)(v114 + 8);
  v115 = v68[18];
  v116 = (char *)v160 + v115;
  v117 = (uint64_t)v21 + v115;
  *(_QWORD *)v116 = *(_QWORD *)v117;
  v116[8] = *(_BYTE *)(v117 + 8);
  v118 = v68[19];
  v119 = (char *)v160 + v118;
  v120 = (char *)v21 + v118;
  if (v17((char *)v21 + v118, 1, v15))
  {
    v121 = sub_100005150(&qword_100081028);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v119, v120, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v119, 0, 1, v15);
  }
  v122 = v68[20];
  v123 = (char *)v160 + v122;
  v124 = (char *)v21 + v122;
  if (v17((char *)v21 + v122, 1, v15))
  {
    v125 = sub_100005150(&qword_100081028);
    memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v123, v124, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v123, 0, 1, v15);
  }
  v126 = v68[21];
  v127 = (_QWORD *)((char *)v160 + v126);
  v128 = (_QWORD *)((char *)v21 + v126);
  v129 = *v128;
  if (*v128)
  {
    v130 = v128[1];
    v131 = v128[2];
    *v127 = v129;
    v127[1] = v130;
    v127[2] = v131;
    swift_retain(v129);
    swift_retain(v130);
    swift_retain(v131);
  }
  else
  {
    *(_OWORD *)v127 = *(_OWORD *)v128;
    v127[2] = v128[2];
  }
  v132 = v68[22];
  v133 = (char *)v160 + v132;
  v134 = (char *)v21 + v132;
  v135 = sub_100005150(&qword_100081040);
  v136 = *(_QWORD *)(v135 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
  {
    v137 = sub_100005150(&qword_100081048);
    memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
  }
  else
  {
    v138 = *(void (**)(char *, char *, uint64_t))(v161 + 16);
    v138(v133, v134, v15);
    v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
  }
  v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v140 = v139[5];
  v141 = &v133[v140];
  v142 = &v134[v140];
  v143 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
  v144 = v139[6];
  v145 = &v133[v144];
  v146 = &v134[v144];
  v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v148 = *(_QWORD *)(v147 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
  {
    v149 = sub_100005150(&qword_100081050);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
  }
  v150 = v139[7];
  v151 = &v133[v150];
  v152 = &v134[v150];
  v153 = *((_QWORD *)v152 + 1);
  *(_QWORD *)v151 = *(_QWORD *)v152;
  *((_QWORD *)v151 + 1) = v153;
  v154 = v139[8];
  v155 = &v133[v154];
  v156 = &v134[v154];
  v157 = *((_QWORD *)v156 + 1);
  *(_QWORD *)v155 = *(_QWORD *)v156;
  *((_QWORD *)v155 + 1) = v157;
  *(_OWORD *)((char *)v160 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)v21 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain(v153);
  swift_bridgeObjectRetain(v157);
  return v160;
}

_QWORD *sub_10005552C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  __int128 v55;
  id *v56;
  int v57;
  id v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id v67;
  id *v68;
  int v69;
  id v70;
  id v71;
  id *v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  void **v93;
  void **v94;
  int v95;
  void *v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  void **v102;
  void **v103;
  int v104;
  void *v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  void **v111;
  void **v112;
  int v113;
  void *v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  void *v119;
  void **v120;
  void **v121;
  int v122;
  void *v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  void **v129;
  void **v130;
  int v131;
  void *v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  __int128 *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  __int128 v174;
  id *v175;
  int v176;
  id v177;
  id v178;
  id *v179;
  int v180;
  id v181;
  id v182;
  id *v183;
  int v184;
  id v185;
  id v186;
  id *v187;
  int v188;
  id v189;
  id v190;
  id *v191;
  int v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v208;
  uint64_t v209;
  char v210;
  __int128 v211;
  void **v212;
  void **v213;
  int v214;
  void *v215;
  void *v216;
  char v217;
  void *v218;
  char v219;
  void *v220;
  void **v221;
  void **v222;
  int v223;
  void *v224;
  void *v225;
  char v226;
  void *v227;
  char v228;
  void *v229;
  void **v230;
  void **v231;
  int v232;
  void *v233;
  void *v234;
  char v235;
  void *v236;
  char v237;
  void *v238;
  void **v239;
  void **v240;
  int v241;
  void *v242;
  void *v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  void **v248;
  void **v249;
  int v250;
  void *v251;
  void *v252;
  char v253;
  void *v254;
  char v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  id v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (*v280)(char *, uint64_t, uint64_t);
  int v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (*v321)(char *, uint64_t, uint64_t);
  int v322;
  int v323;
  void (*v324)(char *, char *, uint64_t);
  uint64_t v325;
  int *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t (*v336)(char *, uint64_t, uint64_t);
  int v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  void (*v353)(char *, char *, uint64_t);
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t (*v357)(char *, uint64_t, uint64_t);
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[9] = a2[9];
  v16 = a2[10];
  v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v19 = v18[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v357 = v24;
  v26 = v24(v21, 1, v22);
  v358 = v23;
  v359 = a3;
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100005150(&qword_100081028);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v28 = v18[11];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v18[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v356 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v356 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      v354 = v22;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v40 = *((_QWORD *)v35 + 1);
      *(_QWORD *)(v34 + 8) = v40;
      v41 = v35[32];
      swift_bridgeObjectRetain(v40);
      if (v41 == 255)
      {
        v55 = *((_OWORD *)v35 + 1);
        *(_BYTE *)(v34 + 32) = v35[32];
        *(_OWORD *)(v34 + 16) = v55;
      }
      else
      {
        v42 = *((_QWORD *)v35 + 2);
        v43 = *((_QWORD *)v35 + 3);
        sub_100005190(v42, v43, v41);
        *(_QWORD *)(v34 + 16) = v42;
        *(_QWORD *)(v34 + 24) = v43;
        *(_BYTE *)(v34 + 32) = v41;
      }
      *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
      *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
      v56 = (id *)(v35 + 56);
      v57 = v35[64];
      if (v57 == 255)
      {
        v59 = *v56;
        *(_BYTE *)(v34 + 64) = v35[64];
        *(_QWORD *)(v34 + 56) = v59;
      }
      else
      {
        v58 = *v56;
        sub_1000051A8(*v56, v35[64]);
        *(_QWORD *)(v34 + 56) = v58;
        *(_BYTE *)(v34 + 64) = v57;
      }
      v22 = v354;
      v60 = (id *)(v35 + 72);
      v61 = v35[80];
      if (v61 == 255)
      {
        v63 = *v60;
        *(_BYTE *)(v34 + 80) = v35[80];
        *(_QWORD *)(v34 + 72) = v63;
      }
      else
      {
        v62 = *v60;
        sub_1000051A8(*v60, v35[80]);
        *(_QWORD *)(v34 + 72) = v62;
        *(_BYTE *)(v34 + 80) = v61;
      }
      v64 = (id *)(v35 + 88);
      v65 = v35[96];
      if (v65 == 255)
      {
        v67 = *v64;
        *(_BYTE *)(v34 + 96) = v35[96];
        *(_QWORD *)(v34 + 88) = v67;
      }
      else
      {
        v66 = *v64;
        sub_1000051A8(*v64, v35[96]);
        *(_QWORD *)(v34 + 88) = v66;
        *(_BYTE *)(v34 + 96) = v65;
      }
      v68 = (id *)(v35 + 104);
      v69 = v35[112];
      if (v69 == 255)
      {
        v71 = *v68;
        *(_BYTE *)(v34 + 112) = v35[112];
        *(_QWORD *)(v34 + 104) = v71;
      }
      else
      {
        v70 = *v68;
        sub_1000051A8(*v68, v35[112]);
        *(_QWORD *)(v34 + 104) = v70;
        *(_BYTE *)(v34 + 112) = v69;
      }
      v72 = (id *)(v35 + 120);
      v73 = v35[128];
      if (v73 == 255)
      {
        v75 = *v72;
        *(_BYTE *)(v34 + 128) = v35[128];
        *(_QWORD *)(v34 + 120) = v75;
      }
      else
      {
        v74 = *v72;
        sub_1000051A8(*v72, v35[128]);
        *(_QWORD *)(v34 + 120) = v74;
        *(_BYTE *)(v34 + 128) = v73;
      }
      *(_BYTE *)(v34 + 129) = v35[129];
      v76 = v36[11];
      v77 = v34 + v76;
      v78 = &v35[v76];
      v79 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v80 = v36[12];
      v81 = (_QWORD *)(v34 + v80);
      v82 = &v35[v80];
      *v81 = *(_QWORD *)v82;
      v83 = *((_QWORD *)v82 + 1);
      v81[1] = v83;
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      v84 = v36[16];
      v85 = (_QWORD *)(v34 + v84);
      v86 = &v35[v84];
      *v85 = *(_QWORD *)v86;
      v87 = *((_QWORD *)v86 + 1);
      v85[1] = v87;
      v88 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v356 + 56);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v88(v34, 0, 1, v36);
      goto LABEL_75;
    }
LABEL_13:
    v44 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_75;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_13;
  }
  v355 = v22;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v45 = *((_QWORD *)v35 + 1);
  v46 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = (__int128 *)(v34 + 16);
  v48 = (__int128 *)(v35 + 16);
  v49 = v35[32];
  if (*(unsigned __int8 *)(v34 + 32) == 255)
  {
    if (v49 == 255)
    {
      v92 = *v48;
      *(_BYTE *)(v34 + 32) = v35[32];
      *v47 = v92;
    }
    else
    {
      v89 = *((_QWORD *)v35 + 2);
      v90 = *((_QWORD *)v35 + 3);
      sub_100005190(v89, v90, v35[32]);
      *(_QWORD *)(v34 + 16) = v89;
      *(_QWORD *)(v34 + 24) = v90;
      *(_BYTE *)(v34 + 32) = v49;
    }
  }
  else if (v49 == 255)
  {
    sub_100007770(v34 + 16);
    v91 = v35[32];
    *v47 = *v48;
    *(_BYTE *)(v34 + 32) = v91;
  }
  else
  {
    v51 = *((_QWORD *)v35 + 2);
    v50 = *((_QWORD *)v35 + 3);
    sub_100005190(v51, v50, v35[32]);
    v52 = *(_QWORD *)(v34 + 16);
    v53 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 16) = v51;
    *(_QWORD *)(v34 + 24) = v50;
    v54 = *(_BYTE *)(v34 + 32);
    *(_BYTE *)(v34 + 32) = v49;
    sub_100005624(v52, v53, v54);
  }
  *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
  *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
  v93 = (void **)(v34 + 56);
  v94 = (void **)(v35 + 56);
  v95 = v35[64];
  if (*(unsigned __int8 *)(v34 + 64) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(v34 + 64) = v35[64];
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_1000051A8(v99, v35[64]);
      *(_QWORD *)(v34 + 56) = v99;
      *(_BYTE *)(v34 + 64) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_1000077A4(v34 + 56);
    v100 = v35[64];
    *v93 = *v94;
    *(_BYTE *)(v34 + 64) = v100;
  }
  else
  {
    v96 = *v94;
    sub_1000051A8(v96, v35[64]);
    v97 = *(void **)(v34 + 56);
    *(_QWORD *)(v34 + 56) = v96;
    v98 = *(_BYTE *)(v34 + 64);
    *(_BYTE *)(v34 + 64) = v95;
    sub_10000563C(v97, v98);
  }
  v102 = (void **)(v34 + 72);
  v103 = (void **)(v35 + 72);
  v104 = v35[80];
  if (*(unsigned __int8 *)(v34 + 80) == 255)
  {
    if (v104 == 255)
    {
      v110 = *v103;
      *(_BYTE *)(v34 + 80) = v35[80];
      *v102 = v110;
    }
    else
    {
      v108 = *v103;
      sub_1000051A8(v108, v35[80]);
      *(_QWORD *)(v34 + 72) = v108;
      *(_BYTE *)(v34 + 80) = v104;
    }
  }
  else if (v104 == 255)
  {
    sub_1000077A4(v34 + 72);
    v109 = v35[80];
    *v102 = *v103;
    *(_BYTE *)(v34 + 80) = v109;
  }
  else
  {
    v105 = *v103;
    sub_1000051A8(v105, v35[80]);
    v106 = *(void **)(v34 + 72);
    *(_QWORD *)(v34 + 72) = v105;
    v107 = *(_BYTE *)(v34 + 80);
    *(_BYTE *)(v34 + 80) = v104;
    sub_10000563C(v106, v107);
  }
  v111 = (void **)(v34 + 88);
  v112 = (void **)(v35 + 88);
  v113 = v35[96];
  if (*(unsigned __int8 *)(v34 + 96) == 255)
  {
    if (v113 == 255)
    {
      v119 = *v112;
      *(_BYTE *)(v34 + 96) = v35[96];
      *v111 = v119;
    }
    else
    {
      v117 = *v112;
      sub_1000051A8(v117, v35[96]);
      *(_QWORD *)(v34 + 88) = v117;
      *(_BYTE *)(v34 + 96) = v113;
    }
  }
  else if (v113 == 255)
  {
    sub_1000077A4(v34 + 88);
    v118 = v35[96];
    *v111 = *v112;
    *(_BYTE *)(v34 + 96) = v118;
  }
  else
  {
    v114 = *v112;
    sub_1000051A8(v114, v35[96]);
    v115 = *(void **)(v34 + 88);
    *(_QWORD *)(v34 + 88) = v114;
    v116 = *(_BYTE *)(v34 + 96);
    *(_BYTE *)(v34 + 96) = v113;
    sub_10000563C(v115, v116);
  }
  v120 = (void **)(v34 + 104);
  v121 = (void **)(v35 + 104);
  v122 = v35[112];
  if (*(unsigned __int8 *)(v34 + 112) == 255)
  {
    if (v122 == 255)
    {
      v128 = *v121;
      *(_BYTE *)(v34 + 112) = v35[112];
      *v120 = v128;
    }
    else
    {
      v126 = *v121;
      sub_1000051A8(v126, v35[112]);
      *(_QWORD *)(v34 + 104) = v126;
      *(_BYTE *)(v34 + 112) = v122;
    }
  }
  else if (v122 == 255)
  {
    sub_1000077A4(v34 + 104);
    v127 = v35[112];
    *v120 = *v121;
    *(_BYTE *)(v34 + 112) = v127;
  }
  else
  {
    v123 = *v121;
    sub_1000051A8(v123, v35[112]);
    v124 = *(void **)(v34 + 104);
    *(_QWORD *)(v34 + 104) = v123;
    v125 = *(_BYTE *)(v34 + 112);
    *(_BYTE *)(v34 + 112) = v122;
    sub_10000563C(v124, v125);
  }
  v129 = (void **)(v34 + 120);
  v130 = (void **)(v35 + 120);
  v131 = v35[128];
  if (*(unsigned __int8 *)(v34 + 128) == 255)
  {
    if (v131 == 255)
    {
      v137 = *v130;
      *(_BYTE *)(v34 + 128) = v35[128];
      *v129 = v137;
    }
    else
    {
      v135 = *v130;
      sub_1000051A8(v135, v35[128]);
      *(_QWORD *)(v34 + 120) = v135;
      *(_BYTE *)(v34 + 128) = v131;
    }
  }
  else if (v131 == 255)
  {
    sub_1000077A4(v34 + 120);
    v136 = v35[128];
    *v129 = *v130;
    *(_BYTE *)(v34 + 128) = v136;
  }
  else
  {
    v132 = *v130;
    sub_1000051A8(v132, v35[128]);
    v133 = *(void **)(v34 + 120);
    *(_QWORD *)(v34 + 120) = v132;
    v134 = *(_BYTE *)(v34 + 128);
    *(_BYTE *)(v34 + 128) = v131;
    sub_10000563C(v133, v134);
  }
  v22 = v355;
  *(_BYTE *)(v34 + 129) = v35[129];
  v138 = v36[11];
  v139 = v34 + v138;
  v140 = &v35[v138];
  v141 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v36[12];
  v143 = (_QWORD *)(v34 + v142);
  v144 = &v35[v142];
  *v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = v143[1];
  v143[1] = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v147 = v36[16];
  v148 = (_QWORD *)(v34 + v147);
  v149 = &v35[v147];
  *v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = v148[1];
  v148[1] = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
LABEL_75:
  v152 = v18[13];
  v153 = (uint64_t)a1 + v152;
  v154 = (char *)a2 + v152;
  v155 = v37((uint64_t)a1 + v152, 1, v36);
  v156 = v37((uint64_t)v154, 1, v36);
  if (v155)
  {
    if (!v156)
    {
      v157 = v22;
      *(_QWORD *)v153 = *(_QWORD *)v154;
      v158 = *((_QWORD *)v154 + 1);
      *(_QWORD *)(v153 + 8) = v158;
      v159 = v154[32];
      swift_bridgeObjectRetain(v158);
      if (v159 == 255)
      {
        v174 = *((_OWORD *)v154 + 1);
        *(_BYTE *)(v153 + 32) = v154[32];
        *(_OWORD *)(v153 + 16) = v174;
      }
      else
      {
        v160 = *((_QWORD *)v154 + 2);
        v161 = *((_QWORD *)v154 + 3);
        sub_100005190(v160, v161, v159);
        *(_QWORD *)(v153 + 16) = v160;
        *(_QWORD *)(v153 + 24) = v161;
        *(_BYTE *)(v153 + 32) = v159;
      }
      *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
      *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
      v175 = (id *)(v154 + 56);
      v176 = v154[64];
      if (v176 == 255)
      {
        v178 = *v175;
        *(_BYTE *)(v153 + 64) = v154[64];
        *(_QWORD *)(v153 + 56) = v178;
      }
      else
      {
        v177 = *v175;
        sub_1000051A8(*v175, v154[64]);
        *(_QWORD *)(v153 + 56) = v177;
        *(_BYTE *)(v153 + 64) = v176;
      }
      v22 = v157;
      v179 = (id *)(v154 + 72);
      v180 = v154[80];
      if (v180 == 255)
      {
        v182 = *v179;
        *(_BYTE *)(v153 + 80) = v154[80];
        *(_QWORD *)(v153 + 72) = v182;
      }
      else
      {
        v181 = *v179;
        sub_1000051A8(*v179, v154[80]);
        *(_QWORD *)(v153 + 72) = v181;
        *(_BYTE *)(v153 + 80) = v180;
      }
      v183 = (id *)(v154 + 88);
      v184 = v154[96];
      if (v184 == 255)
      {
        v186 = *v183;
        *(_BYTE *)(v153 + 96) = v154[96];
        *(_QWORD *)(v153 + 88) = v186;
      }
      else
      {
        v185 = *v183;
        sub_1000051A8(*v183, v154[96]);
        *(_QWORD *)(v153 + 88) = v185;
        *(_BYTE *)(v153 + 96) = v184;
      }
      v187 = (id *)(v154 + 104);
      v188 = v154[112];
      if (v188 == 255)
      {
        v190 = *v187;
        *(_BYTE *)(v153 + 112) = v154[112];
        *(_QWORD *)(v153 + 104) = v190;
      }
      else
      {
        v189 = *v187;
        sub_1000051A8(*v187, v154[112]);
        *(_QWORD *)(v153 + 104) = v189;
        *(_BYTE *)(v153 + 112) = v188;
      }
      v191 = (id *)(v154 + 120);
      v192 = v154[128];
      if (v192 == 255)
      {
        v194 = *v191;
        *(_BYTE *)(v153 + 128) = v154[128];
        *(_QWORD *)(v153 + 120) = v194;
      }
      else
      {
        v193 = *v191;
        sub_1000051A8(*v191, v154[128]);
        *(_QWORD *)(v153 + 120) = v193;
        *(_BYTE *)(v153 + 128) = v192;
      }
      *(_BYTE *)(v153 + 129) = v154[129];
      v195 = v36[11];
      v196 = v153 + v195;
      v197 = &v154[v195];
      v198 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v198 - 8) + 16))(v196, v197, v198);
      v199 = v36[12];
      v200 = (_QWORD *)(v153 + v199);
      v201 = &v154[v199];
      *v200 = *(_QWORD *)v201;
      v202 = *((_QWORD *)v201 + 1);
      v200[1] = v202;
      *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
      *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
      *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
      v203 = v36[16];
      v204 = (_QWORD *)(v153 + v203);
      v205 = &v154[v203];
      *v204 = *(_QWORD *)v205;
      v206 = *((_QWORD *)v205 + 1);
      v204[1] = v206;
      v207 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v356 + 56);
      swift_bridgeObjectRetain(v202);
      swift_bridgeObjectRetain(v206);
      v207(v153, 0, 1, v36);
      goto LABEL_142;
    }
LABEL_81:
    v162 = sub_100005150(&qword_100081030);
    memcpy((void *)v153, v154, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_142;
  }
  if (v156)
  {
    sub_10000EF80(v153, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_81;
  }
  v163 = v22;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  v164 = *((_QWORD *)v154 + 1);
  v165 = *(_QWORD *)(v153 + 8);
  *(_QWORD *)(v153 + 8) = v164;
  swift_bridgeObjectRetain(v164);
  swift_bridgeObjectRelease(v165);
  v166 = (__int128 *)(v153 + 16);
  v167 = (__int128 *)(v154 + 16);
  v168 = v154[32];
  if (*(unsigned __int8 *)(v153 + 32) == 255)
  {
    if (v168 == 255)
    {
      v211 = *v167;
      *(_BYTE *)(v153 + 32) = v154[32];
      *v166 = v211;
    }
    else
    {
      v208 = *((_QWORD *)v154 + 2);
      v209 = *((_QWORD *)v154 + 3);
      sub_100005190(v208, v209, v154[32]);
      *(_QWORD *)(v153 + 16) = v208;
      *(_QWORD *)(v153 + 24) = v209;
      *(_BYTE *)(v153 + 32) = v168;
    }
  }
  else if (v168 == 255)
  {
    sub_100007770(v153 + 16);
    v210 = v154[32];
    *v166 = *v167;
    *(_BYTE *)(v153 + 32) = v210;
  }
  else
  {
    v169 = *((_QWORD *)v154 + 2);
    v170 = *((_QWORD *)v154 + 3);
    sub_100005190(v169, v170, v154[32]);
    v171 = *(_QWORD *)(v153 + 16);
    v172 = *(_QWORD *)(v153 + 24);
    *(_QWORD *)(v153 + 16) = v169;
    *(_QWORD *)(v153 + 24) = v170;
    v173 = *(_BYTE *)(v153 + 32);
    *(_BYTE *)(v153 + 32) = v168;
    sub_100005624(v171, v172, v173);
  }
  *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
  *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
  v212 = (void **)(v153 + 56);
  v213 = (void **)(v154 + 56);
  v214 = v154[64];
  if (*(unsigned __int8 *)(v153 + 64) == 255)
  {
    if (v214 == 255)
    {
      v220 = *v213;
      *(_BYTE *)(v153 + 64) = v154[64];
      *v212 = v220;
    }
    else
    {
      v218 = *v213;
      sub_1000051A8(v218, v154[64]);
      *(_QWORD *)(v153 + 56) = v218;
      *(_BYTE *)(v153 + 64) = v214;
    }
  }
  else if (v214 == 255)
  {
    sub_1000077A4(v153 + 56);
    v219 = v154[64];
    *v212 = *v213;
    *(_BYTE *)(v153 + 64) = v219;
  }
  else
  {
    v215 = *v213;
    sub_1000051A8(v215, v154[64]);
    v216 = *(void **)(v153 + 56);
    *(_QWORD *)(v153 + 56) = v215;
    v217 = *(_BYTE *)(v153 + 64);
    *(_BYTE *)(v153 + 64) = v214;
    sub_10000563C(v216, v217);
  }
  v221 = (void **)(v153 + 72);
  v222 = (void **)(v154 + 72);
  v223 = v154[80];
  if (*(unsigned __int8 *)(v153 + 80) == 255)
  {
    if (v223 == 255)
    {
      v229 = *v222;
      *(_BYTE *)(v153 + 80) = v154[80];
      *v221 = v229;
    }
    else
    {
      v227 = *v222;
      sub_1000051A8(v227, v154[80]);
      *(_QWORD *)(v153 + 72) = v227;
      *(_BYTE *)(v153 + 80) = v223;
    }
  }
  else if (v223 == 255)
  {
    sub_1000077A4(v153 + 72);
    v228 = v154[80];
    *v221 = *v222;
    *(_BYTE *)(v153 + 80) = v228;
  }
  else
  {
    v224 = *v222;
    sub_1000051A8(v224, v154[80]);
    v225 = *(void **)(v153 + 72);
    *(_QWORD *)(v153 + 72) = v224;
    v226 = *(_BYTE *)(v153 + 80);
    *(_BYTE *)(v153 + 80) = v223;
    sub_10000563C(v225, v226);
  }
  v230 = (void **)(v153 + 88);
  v231 = (void **)(v154 + 88);
  v232 = v154[96];
  if (*(unsigned __int8 *)(v153 + 96) == 255)
  {
    if (v232 == 255)
    {
      v238 = *v231;
      *(_BYTE *)(v153 + 96) = v154[96];
      *v230 = v238;
    }
    else
    {
      v236 = *v231;
      sub_1000051A8(v236, v154[96]);
      *(_QWORD *)(v153 + 88) = v236;
      *(_BYTE *)(v153 + 96) = v232;
    }
  }
  else if (v232 == 255)
  {
    sub_1000077A4(v153 + 88);
    v237 = v154[96];
    *v230 = *v231;
    *(_BYTE *)(v153 + 96) = v237;
  }
  else
  {
    v233 = *v231;
    sub_1000051A8(v233, v154[96]);
    v234 = *(void **)(v153 + 88);
    *(_QWORD *)(v153 + 88) = v233;
    v235 = *(_BYTE *)(v153 + 96);
    *(_BYTE *)(v153 + 96) = v232;
    sub_10000563C(v234, v235);
  }
  v239 = (void **)(v153 + 104);
  v240 = (void **)(v154 + 104);
  v241 = v154[112];
  if (*(unsigned __int8 *)(v153 + 112) == 255)
  {
    if (v241 == 255)
    {
      v247 = *v240;
      *(_BYTE *)(v153 + 112) = v154[112];
      *v239 = v247;
    }
    else
    {
      v245 = *v240;
      sub_1000051A8(v245, v154[112]);
      *(_QWORD *)(v153 + 104) = v245;
      *(_BYTE *)(v153 + 112) = v241;
    }
  }
  else if (v241 == 255)
  {
    sub_1000077A4(v153 + 104);
    v246 = v154[112];
    *v239 = *v240;
    *(_BYTE *)(v153 + 112) = v246;
  }
  else
  {
    v242 = *v240;
    sub_1000051A8(v242, v154[112]);
    v243 = *(void **)(v153 + 104);
    *(_QWORD *)(v153 + 104) = v242;
    v244 = *(_BYTE *)(v153 + 112);
    *(_BYTE *)(v153 + 112) = v241;
    sub_10000563C(v243, v244);
  }
  v248 = (void **)(v153 + 120);
  v249 = (void **)(v154 + 120);
  v250 = v154[128];
  if (*(unsigned __int8 *)(v153 + 128) == 255)
  {
    if (v250 == 255)
    {
      v256 = *v249;
      *(_BYTE *)(v153 + 128) = v154[128];
      *v248 = v256;
    }
    else
    {
      v254 = *v249;
      sub_1000051A8(v254, v154[128]);
      *(_QWORD *)(v153 + 120) = v254;
      *(_BYTE *)(v153 + 128) = v250;
    }
  }
  else if (v250 == 255)
  {
    sub_1000077A4(v153 + 120);
    v255 = v154[128];
    *v248 = *v249;
    *(_BYTE *)(v153 + 128) = v255;
  }
  else
  {
    v251 = *v249;
    sub_1000051A8(v251, v154[128]);
    v252 = *(void **)(v153 + 120);
    *(_QWORD *)(v153 + 120) = v251;
    v253 = *(_BYTE *)(v153 + 128);
    *(_BYTE *)(v153 + 128) = v250;
    sub_10000563C(v252, v253);
  }
  v22 = v163;
  *(_BYTE *)(v153 + 129) = v154[129];
  v257 = v36[11];
  v258 = v153 + v257;
  v259 = &v154[v257];
  v260 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v260 - 8) + 24))(v258, v259, v260);
  v261 = v36[12];
  v262 = (_QWORD *)(v153 + v261);
  v263 = &v154[v261];
  *v262 = *(_QWORD *)v263;
  v264 = *((_QWORD *)v263 + 1);
  v265 = v262[1];
  v262[1] = v264;
  swift_bridgeObjectRetain(v264);
  swift_bridgeObjectRelease(v265);
  *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
  *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
  *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
  v266 = v36[16];
  v267 = (_QWORD *)(v153 + v266);
  v268 = &v154[v266];
  *v267 = *(_QWORD *)v268;
  v269 = *((_QWORD *)v268 + 1);
  v270 = v267[1];
  v267[1] = v269;
  swift_bridgeObjectRetain(v269);
  swift_bridgeObjectRelease(v270);
LABEL_142:
  v271 = v18[14];
  v272 = *(void **)((char *)a1 + v271);
  v273 = *(void **)((char *)a2 + v271);
  *(_QWORD *)((char *)a1 + v271) = v273;
  v274 = v273;

  v275 = v18[15];
  v276 = (char *)a1 + v275;
  v277 = (char *)a2 + v275;
  v278 = type metadata accessor for URL(0);
  v279 = *(_QWORD *)(v278 - 8);
  v280 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v279 + 48);
  LODWORD(v272) = v280(v276, 1, v278);
  v281 = v280(v277, 1, v278);
  if ((_DWORD)v272)
  {
    if (!v281)
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v281)
  {
    (*(void (**)(char *, uint64_t))(v279 + 8))(v276, v278);
LABEL_147:
    v282 = sub_100005150(&qword_100081038);
    memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
    goto LABEL_148;
  }
  (*(void (**)(char *, char *, uint64_t))(v279 + 24))(v276, v277, v278);
LABEL_148:
  *((_BYTE *)a1 + v18[16]) = *((_BYTE *)a2 + v18[16]);
  v283 = v18[17];
  v284 = (char *)a1 + v283;
  v285 = (char *)a2 + v283;
  v286 = *(_QWORD *)v285;
  v284[8] = v285[8];
  *(_QWORD *)v284 = v286;
  v287 = v18[18];
  v288 = (char *)a1 + v287;
  v289 = (char *)a2 + v287;
  v290 = *(_QWORD *)v289;
  v288[8] = v289[8];
  *(_QWORD *)v288 = v290;
  v291 = v18[19];
  v292 = (char *)a1 + v291;
  v293 = (char *)a2 + v291;
  v294 = v357((char *)a1 + v291, 1, v22);
  v295 = v357(v293, 1, v22);
  if (v294)
  {
    if (!v295)
    {
      (*(void (**)(char *, char *, uint64_t))(v358 + 16))(v292, v293, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v358 + 56))(v292, 0, 1, v22);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v295)
  {
    (*(void (**)(char *, uint64_t))(v358 + 8))(v292, v22);
LABEL_153:
    v296 = sub_100005150(&qword_100081028);
    memcpy(v292, v293, *(_QWORD *)(*(_QWORD *)(v296 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(char *, char *, uint64_t))(v358 + 24))(v292, v293, v22);
LABEL_154:
  v297 = v18[20];
  v298 = (char *)a1 + v297;
  v299 = (char *)a2 + v297;
  v300 = v357((char *)a1 + v297, 1, v22);
  v301 = v357(v299, 1, v22);
  if (v300)
  {
    if (!v301)
    {
      (*(void (**)(char *, char *, uint64_t))(v358 + 16))(v298, v299, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v358 + 56))(v298, 0, 1, v22);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v301)
  {
    (*(void (**)(char *, uint64_t))(v358 + 8))(v298, v22);
LABEL_159:
    v302 = sub_100005150(&qword_100081028);
    memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(char *, char *, uint64_t))(v358 + 24))(v298, v299, v22);
LABEL_160:
  v303 = v18[21];
  v304 = (_QWORD *)((char *)a1 + v303);
  v305 = (char *)a2 + v303;
  v306 = *(_QWORD *)((char *)a1 + v303);
  v307 = *(_QWORD *)((char *)a2 + v303);
  if (v306)
  {
    if (v307)
    {
      *v304 = v307;
      swift_retain(v307);
      swift_release(v306);
      v308 = *((_QWORD *)v305 + 1);
      v309 = v304[1];
      v304[1] = v308;
      swift_retain(v308);
      swift_release(v309);
      v310 = *((_QWORD *)v305 + 2);
      v311 = v304[2];
      v304[2] = v310;
      swift_retain(v310);
      swift_release(v311);
    }
    else
    {
      sub_100007814((_QWORD *)((char *)a1 + v303));
      v314 = *((_QWORD *)v305 + 2);
      *(_OWORD *)v304 = *(_OWORD *)v305;
      v304[2] = v314;
    }
  }
  else if (v307)
  {
    *v304 = v307;
    v312 = *((_QWORD *)v305 + 1);
    v304[1] = v312;
    v313 = *((_QWORD *)v305 + 2);
    v304[2] = v313;
    swift_retain(v307);
    swift_retain(v312);
    swift_retain(v313);
  }
  else
  {
    v315 = *(_OWORD *)v305;
    v304[2] = *((_QWORD *)v305 + 2);
    *(_OWORD *)v304 = v315;
  }
  v316 = v18[22];
  v317 = (char *)a1 + v316;
  v318 = (char *)a2 + v316;
  v319 = sub_100005150(&qword_100081040);
  v320 = *(_QWORD *)(v319 - 8);
  v321 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v320 + 48);
  v322 = v321(v317, 1, v319);
  v323 = v321(v318, 1, v319);
  v360 = a2;
  if (v322)
  {
    if (!v323)
    {
      v324 = *(void (**)(char *, char *, uint64_t))(v358 + 16);
      v324(v317, v318, v22);
      v324(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v317, 0, 1, v319);
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (v323)
  {
    sub_10000F008((uint64_t)v317, &qword_100081040);
LABEL_175:
    v325 = sub_100005150(&qword_100081048);
    memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
    goto LABEL_176;
  }
  v353 = *(void (**)(char *, char *, uint64_t))(v358 + 24);
  v353(v317, v318, v22);
  v353(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
LABEL_176:
  v326 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v327 = v326[5];
  v328 = &v317[v327];
  v329 = &v318[v327];
  v330 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v330 - 8) + 24))(v328, v329, v330);
  v331 = v326[6];
  v332 = &v317[v331];
  v333 = &v318[v331];
  v334 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v335 = *(_QWORD *)(v334 - 8);
  v336 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v335 + 48);
  LODWORD(v328) = v336(v332, 1, v334);
  v337 = v336(v333, 1, v334);
  if (!(_DWORD)v328)
  {
    if (!v337)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 24))(v332, v333, v334);
      goto LABEL_182;
    }
    (*(void (**)(char *, uint64_t))(v335 + 8))(v332, v334);
    goto LABEL_181;
  }
  if (v337)
  {
LABEL_181:
    v338 = sub_100005150(&qword_100081050);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
    goto LABEL_182;
  }
  (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v332, v333, v334);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v332, 0, 1, v334);
LABEL_182:
  v339 = v326[7];
  v340 = &v317[v339];
  v341 = &v318[v339];
  *(_QWORD *)v340 = *(_QWORD *)v341;
  v342 = *((_QWORD *)v341 + 1);
  v343 = *((_QWORD *)v340 + 1);
  *((_QWORD *)v340 + 1) = v342;
  swift_bridgeObjectRetain(v342);
  swift_bridgeObjectRelease(v343);
  v344 = v326[8];
  v345 = &v317[v344];
  v346 = &v318[v344];
  *(_QWORD *)v345 = *(_QWORD *)v346;
  v347 = *((_QWORD *)v346 + 1);
  v348 = *((_QWORD *)v345 + 1);
  *((_QWORD *)v345 + 1) = v347;
  swift_bridgeObjectRetain(v347);
  swift_bridgeObjectRelease(v348);
  v349 = *(int *)(v359 + 20);
  v350 = (_QWORD *)((char *)a1 + v349);
  v351 = (_QWORD *)((char *)v360 + v349);
  *v350 = *v351;
  v350[1] = v351[1];
  return a1;
}

uint64_t sub_100056BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(_OWORD *, uint64_t, int *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(const void *, uint64_t);
  uint64_t v87;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v8 = v7[10];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v86 = *(unsigned int (**)(const void *, uint64_t))(v12 + 48);
  v87 = v11;
  if (v86(v10, 1))
  {
    v13 = sub_100005150(&qword_100081028);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v87);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v87);
  }
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  v14 = v7[12];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = (int *)type metadata accessor for ArtworkModel(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
  v85 = v18;
  if (v19(v16, 1, v17))
  {
    v20 = sub_100005150(&qword_100081030);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v16[1];
    *v15 = *v16;
    v15[1] = v21;
    *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
    *(_OWORD *)((char *)v15 + 40) = *(_OWORD *)((char *)v16 + 40);
    *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
    *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
    *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
    *(_OWORD *)((char *)v15 + 104) = *(_OWORD *)((char *)v16 + 104);
    *(_OWORD *)((char *)v15 + 88) = *(_OWORD *)((char *)v16 + 88);
    *(_OWORD *)((char *)v15 + 72) = *(_OWORD *)((char *)v16 + 72);
    *((_BYTE *)v15 + 129) = *((_BYTE *)v16 + 129);
    v22 = v17[11];
    v83 = a3;
    v84 = v12;
    v23 = (char *)v15 + v22;
    v24 = (char *)v16 + v22;
    v25 = type metadata accessor for ArtworkCrop(0);
    v26 = v23;
    v27 = v24;
    a3 = v83;
    v12 = v84;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v26, v27, v25);
    *(_OWORD *)((char *)v15 + v17[12]) = *(_OWORD *)((char *)v16 + v17[12]);
    *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
    *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
    *((_BYTE *)v15 + v17[15]) = *((_BYTE *)v16 + v17[15]);
    *(_OWORD *)((char *)v15 + v17[16]) = *(_OWORD *)((char *)v16 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v28 = v7[13];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  if (v19((_OWORD *)(a2 + v28), 1, v17))
  {
    v31 = sub_100005150(&qword_100081030);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    *(_OWORD *)((char *)v29 + 40) = *(_OWORD *)((char *)v30 + 40);
    *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
    *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
    *(_OWORD *)((char *)v29 + 113) = *(_OWORD *)((char *)v30 + 113);
    *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v30 + 104);
    *(_OWORD *)((char *)v29 + 88) = *(_OWORD *)((char *)v30 + 88);
    *(_OWORD *)((char *)v29 + 72) = *(_OWORD *)((char *)v30 + 72);
    *((_BYTE *)v29 + 129) = *((_BYTE *)v30 + 129);
    v33 = v17[11];
    v34 = v12;
    v35 = (char *)v29 + v33;
    v36 = a3;
    v37 = (char *)v30 + v33;
    v38 = type metadata accessor for ArtworkCrop(0);
    v39 = v35;
    v12 = v34;
    v40 = v37;
    a3 = v36;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v39, v40, v38);
    *(_OWORD *)((char *)v29 + v17[12]) = *(_OWORD *)((char *)v30 + v17[12]);
    *((_BYTE *)v29 + v17[13]) = *((_BYTE *)v30 + v17[13]);
    *((_BYTE *)v29 + v17[14]) = *((_BYTE *)v30 + v17[14]);
    *((_BYTE *)v29 + v17[15]) = *((_BYTE *)v30 + v17[15]);
    *(_OWORD *)((char *)v29 + v17[16]) = *(_OWORD *)((char *)v30 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v85 + 56))(v29, 0, 1, v17);
  }
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v41 = v7[15];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = sub_100005150(&qword_100081038);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  *(_BYTE *)(a1 + v7[16]) = *(_BYTE *)(a2 + v7[16]);
  v47 = v7[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = v7[19];
  v54 = (void *)(a1 + v53);
  v55 = (const void *)(a2 + v53);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v86)(a2 + v53, 1, v87))
  {
    v56 = sub_100005150(&qword_100081028);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v54, v55, v87);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v54, 0, 1, v87);
  }
  v57 = v7[20];
  v58 = (void *)(a1 + v57);
  v59 = (const void *)(a2 + v57);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v86)(a2 + v57, 1, v87))
  {
    v60 = sub_100005150(&qword_100081028);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v58, v59, v87);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v58, 0, 1, v87);
  }
  v61 = v7[21];
  v62 = a1 + v61;
  v63 = a2 + v61;
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  v64 = v7[22];
  v65 = (char *)(a1 + v64);
  v66 = (char *)(a2 + v64);
  v67 = sub_100005150(&qword_100081040);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    v69 = sub_100005150(&qword_100081048);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v70 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v70(v65, v66, v87);
    v70(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v87);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v71 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v72 = v71[5];
  v73 = &v65[v72];
  v74 = &v66[v72];
  v75 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v71[6];
  v77 = &v65[v76];
  v78 = &v66[v76];
  v79 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_100005150(&qword_100081050);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  *(_OWORD *)&v65[v71[7]] = *(_OWORD *)&v66[v71[7]];
  *(_OWORD *)&v65[v71[8]] = *(_OWORD *)&v66[v71[8]];
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_100057294(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  int v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  _OWORD *v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t);
  _QWORD *v146;
  int v147;
  int v148;
  void *v149;
  _QWORD *v150;
  int v151;
  int v152;
  void *v153;
  _QWORD *v154;
  int v155;
  int v156;
  void *v157;
  _QWORD *v158;
  int v159;
  int v160;
  void *v161;
  _QWORD *v162;
  int v163;
  int v164;
  void *v165;
  _QWORD *v166;
  int v167;
  int v168;
  void *v169;
  _QWORD *v170;
  int v171;
  int v172;
  void *v173;
  _QWORD *v174;
  int v175;
  int v176;
  void *v177;
  _QWORD *v178;
  int v179;
  int v180;
  void *v181;
  _QWORD *v182;
  int v183;
  int v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t (*v219)(char *, uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a1[6];
  a1[6] = a2[6];
  swift_release(v12);
  v13 = a2[8];
  v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = a2[10];
  v16 = a1[10];
  a1[9] = a2[9];
  a1[10] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v18 = v17[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  v219 = v23;
  v220 = a3;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100005150(&qword_100081028);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[11];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v17[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v218 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v218 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  v221 = v22;
  if (v38)
  {
    if (!v39)
    {
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_OWORD *)(v34 + 16) = v40;
      *(_BYTE *)(v34 + 32) = v35[32];
      *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
      *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
      *(_BYTE *)(v34 + 64) = v35[64];
      *(_OWORD *)(v34 + 113) = *(_OWORD *)(v35 + 113);
      *(_OWORD *)(v34 + 104) = *(_OWORD *)(v35 + 104);
      *(_OWORD *)(v34 + 88) = *(_OWORD *)(v35 + 88);
      *(_OWORD *)(v34 + 72) = *(_OWORD *)(v35 + 72);
      *(_BYTE *)(v34 + 129) = v35[129];
      v41 = v36[11];
      v42 = v34 + v41;
      v43 = &v35[v41];
      v44 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      *(_OWORD *)(v34 + v36[12]) = *(_OWORD *)&v35[v36[12]];
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      *(_OWORD *)(v34 + v36[16]) = *(_OWORD *)&v35[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v218 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_12:
    v45 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  v131 = *((_QWORD *)v35 + 1);
  v132 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v131;
  swift_bridgeObjectRelease(v132);
  v133 = v35 + 16;
  v134 = *(unsigned __int8 *)(v34 + 32);
  if (v134 != 255)
  {
    v135 = v35[32];
    if (v135 != 255)
    {
      v136 = *(_QWORD *)(v34 + 16);
      v137 = *(_QWORD *)(v34 + 24);
      *(_OWORD *)(v34 + 16) = *v133;
      *(_BYTE *)(v34 + 32) = v135;
      sub_100005624(v136, v137, v134);
      goto LABEL_69;
    }
    sub_100007770(v34 + 16);
  }
  *(_OWORD *)(v34 + 16) = *v133;
  *(_BYTE *)(v34 + 32) = v35[32];
LABEL_69:
  *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
  v146 = v35 + 56;
  v147 = *(unsigned __int8 *)(v34 + 64);
  if (v147 != 255)
  {
    v148 = v35[64];
    if (v148 != 255)
    {
      v149 = *(void **)(v34 + 56);
      *(_QWORD *)(v34 + 56) = *v146;
      *(_BYTE *)(v34 + 64) = v148;
      sub_10000563C(v149, v147);
      goto LABEL_79;
    }
    sub_1000077A4(v34 + 56);
  }
  *(_QWORD *)(v34 + 56) = *v146;
  *(_BYTE *)(v34 + 64) = v35[64];
LABEL_79:
  v154 = v35 + 72;
  v155 = *(unsigned __int8 *)(v34 + 80);
  if (v155 != 255)
  {
    v156 = v35[80];
    if (v156 != 255)
    {
      v157 = *(void **)(v34 + 72);
      *(_QWORD *)(v34 + 72) = *v154;
      *(_BYTE *)(v34 + 80) = v156;
      sub_10000563C(v157, v155);
      goto LABEL_89;
    }
    sub_1000077A4(v34 + 72);
  }
  *(_QWORD *)(v34 + 72) = *v154;
  *(_BYTE *)(v34 + 80) = v35[80];
LABEL_89:
  v162 = v35 + 88;
  v163 = *(unsigned __int8 *)(v34 + 96);
  if (v163 != 255)
  {
    v164 = v35[96];
    if (v164 != 255)
    {
      v165 = *(void **)(v34 + 88);
      *(_QWORD *)(v34 + 88) = *v162;
      *(_BYTE *)(v34 + 96) = v164;
      sub_10000563C(v165, v163);
      goto LABEL_99;
    }
    sub_1000077A4(v34 + 88);
  }
  *(_QWORD *)(v34 + 88) = *v162;
  *(_BYTE *)(v34 + 96) = v35[96];
LABEL_99:
  v170 = v35 + 104;
  v171 = *(unsigned __int8 *)(v34 + 112);
  if (v171 != 255)
  {
    v172 = v35[112];
    if (v172 != 255)
    {
      v173 = *(void **)(v34 + 104);
      *(_QWORD *)(v34 + 104) = *v170;
      *(_BYTE *)(v34 + 112) = v172;
      sub_10000563C(v173, v171);
      goto LABEL_109;
    }
    sub_1000077A4(v34 + 104);
  }
  *(_QWORD *)(v34 + 104) = *v170;
  *(_BYTE *)(v34 + 112) = v35[112];
LABEL_109:
  v178 = v35 + 120;
  v179 = *(unsigned __int8 *)(v34 + 128);
  if (v179 == 255)
  {
LABEL_118:
    *(_QWORD *)(v34 + 120) = *v178;
    *(_BYTE *)(v34 + 128) = v35[128];
    goto LABEL_119;
  }
  v180 = v35[128];
  if (v180 == 255)
  {
    sub_1000077A4(v34 + 120);
    goto LABEL_118;
  }
  v181 = *(void **)(v34 + 120);
  *(_QWORD *)(v34 + 120) = *v178;
  *(_BYTE *)(v34 + 128) = v180;
  sub_10000563C(v181, v179);
LABEL_119:
  *(_BYTE *)(v34 + 129) = v35[129];
  v186 = v36[11];
  v187 = v34 + v186;
  v188 = &v35[v186];
  v189 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v189 - 8) + 40))(v187, v188, v189);
  v190 = v36[12];
  v191 = (_QWORD *)(v34 + v190);
  v192 = &v35[v190];
  v194 = *(_QWORD *)v192;
  v193 = *((_QWORD *)v192 + 1);
  v195 = v191[1];
  *v191 = v194;
  v191[1] = v193;
  swift_bridgeObjectRelease(v195);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v196 = v36[16];
  v197 = (_QWORD *)(v34 + v196);
  v198 = &v35[v196];
  v200 = *(_QWORD *)v198;
  v199 = *((_QWORD *)v198 + 1);
  v201 = v197[1];
  *v197 = v200;
  v197[1] = v199;
  swift_bridgeObjectRelease(v201);
LABEL_13:
  v46 = v17[13];
  v47 = (uint64_t)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = v37((uint64_t)a1 + v46, 1, v36);
  v50 = v37((uint64_t)v48, 1, v36);
  if (v49)
  {
    if (!v50)
    {
      v51 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v51;
      *(_BYTE *)(v47 + 32) = v48[32];
      *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
      *(_QWORD *)(v47 + 56) = *((_QWORD *)v48 + 7);
      *(_BYTE *)(v47 + 64) = v48[64];
      *(_OWORD *)(v47 + 113) = *(_OWORD *)(v48 + 113);
      *(_OWORD *)(v47 + 104) = *(_OWORD *)(v48 + 104);
      *(_OWORD *)(v47 + 88) = *(_OWORD *)(v48 + 88);
      *(_OWORD *)(v47 + 72) = *(_OWORD *)(v48 + 72);
      *(_BYTE *)(v47 + 129) = v48[129];
      v52 = v36[11];
      v53 = v47 + v52;
      v54 = &v48[v52];
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
      *(_OWORD *)(v47 + v36[12]) = *(_OWORD *)&v48[v36[12]];
      *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
      *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
      *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
      *(_OWORD *)(v47 + v36[16]) = *(_OWORD *)&v48[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v218 + 56))(v47, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    sub_10000EF80(v47, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_18:
    v56 = sub_100005150(&qword_100081030);
    memcpy((void *)v47, v48, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_19;
  }
  v138 = *((_QWORD *)v48 + 1);
  v139 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v47 + 8) = v138;
  swift_bridgeObjectRelease(v139);
  v140 = v48 + 16;
  v141 = *(unsigned __int8 *)(v47 + 32);
  if (v141 != 255)
  {
    v142 = v48[32];
    if (v142 != 255)
    {
      v143 = *(_QWORD *)(v47 + 16);
      v144 = *(_QWORD *)(v47 + 24);
      *(_OWORD *)(v47 + 16) = *v140;
      *(_BYTE *)(v47 + 32) = v142;
      sub_100005624(v143, v144, v141);
      goto LABEL_74;
    }
    sub_100007770(v47 + 16);
  }
  *(_OWORD *)(v47 + 16) = *v140;
  *(_BYTE *)(v47 + 32) = v48[32];
LABEL_74:
  *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
  v150 = v48 + 56;
  v151 = *(unsigned __int8 *)(v47 + 64);
  if (v151 != 255)
  {
    v152 = v48[64];
    if (v152 != 255)
    {
      v153 = *(void **)(v47 + 56);
      *(_QWORD *)(v47 + 56) = *v150;
      *(_BYTE *)(v47 + 64) = v152;
      sub_10000563C(v153, v151);
      goto LABEL_84;
    }
    sub_1000077A4(v47 + 56);
  }
  *(_QWORD *)(v47 + 56) = *v150;
  *(_BYTE *)(v47 + 64) = v48[64];
LABEL_84:
  v158 = v48 + 72;
  v159 = *(unsigned __int8 *)(v47 + 80);
  if (v159 != 255)
  {
    v160 = v48[80];
    if (v160 != 255)
    {
      v161 = *(void **)(v47 + 72);
      *(_QWORD *)(v47 + 72) = *v158;
      *(_BYTE *)(v47 + 80) = v160;
      sub_10000563C(v161, v159);
      goto LABEL_94;
    }
    sub_1000077A4(v47 + 72);
  }
  *(_QWORD *)(v47 + 72) = *v158;
  *(_BYTE *)(v47 + 80) = v48[80];
LABEL_94:
  v166 = v48 + 88;
  v167 = *(unsigned __int8 *)(v47 + 96);
  if (v167 != 255)
  {
    v168 = v48[96];
    if (v168 != 255)
    {
      v169 = *(void **)(v47 + 88);
      *(_QWORD *)(v47 + 88) = *v166;
      *(_BYTE *)(v47 + 96) = v168;
      sub_10000563C(v169, v167);
      goto LABEL_104;
    }
    sub_1000077A4(v47 + 88);
  }
  *(_QWORD *)(v47 + 88) = *v166;
  *(_BYTE *)(v47 + 96) = v48[96];
LABEL_104:
  v174 = v48 + 104;
  v175 = *(unsigned __int8 *)(v47 + 112);
  if (v175 != 255)
  {
    v176 = v48[112];
    if (v176 != 255)
    {
      v177 = *(void **)(v47 + 104);
      *(_QWORD *)(v47 + 104) = *v174;
      *(_BYTE *)(v47 + 112) = v176;
      sub_10000563C(v177, v175);
      goto LABEL_114;
    }
    sub_1000077A4(v47 + 104);
  }
  *(_QWORD *)(v47 + 104) = *v174;
  *(_BYTE *)(v47 + 112) = v48[112];
LABEL_114:
  v182 = v48 + 120;
  v183 = *(unsigned __int8 *)(v47 + 128);
  if (v183 == 255)
  {
LABEL_121:
    *(_QWORD *)(v47 + 120) = *v182;
    *(_BYTE *)(v47 + 128) = v48[128];
    goto LABEL_122;
  }
  v184 = v48[128];
  if (v184 == 255)
  {
    sub_1000077A4(v47 + 120);
    goto LABEL_121;
  }
  v185 = *(void **)(v47 + 120);
  *(_QWORD *)(v47 + 120) = *v182;
  *(_BYTE *)(v47 + 128) = v184;
  sub_10000563C(v185, v183);
LABEL_122:
  *(_BYTE *)(v47 + 129) = v48[129];
  v202 = v36[11];
  v203 = v47 + v202;
  v204 = &v48[v202];
  v205 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v205 - 8) + 40))(v203, v204, v205);
  v206 = v36[12];
  v207 = (_QWORD *)(v47 + v206);
  v208 = &v48[v206];
  v210 = *(_QWORD *)v208;
  v209 = *((_QWORD *)v208 + 1);
  v211 = v207[1];
  *v207 = v210;
  v207[1] = v209;
  swift_bridgeObjectRelease(v211);
  *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
  *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
  *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
  v212 = v36[16];
  v213 = (_QWORD *)(v47 + v212);
  v214 = &v48[v212];
  v216 = *(_QWORD *)v214;
  v215 = *((_QWORD *)v214 + 1);
  v217 = v213[1];
  *v213 = v216;
  v213[1] = v215;
  swift_bridgeObjectRelease(v217);
LABEL_19:
  v57 = v17[14];
  v58 = *(void **)((char *)a1 + v57);
  *(_QWORD *)((char *)a1 + v57) = *(_QWORD *)((char *)a2 + v57);

  v59 = v17[15];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    v67 = v221;
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v67 = v221;
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
LABEL_24:
    v68 = sub_100005150(&qword_100081038);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v60, v61, v62);
LABEL_25:
  *((_BYTE *)a1 + v17[16]) = *((_BYTE *)a2 + v17[16]);
  v69 = v17[17];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  v72 = v17[18];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v17[19];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = v219((char *)a1 + v75, 1, v21);
  v79 = v219(v77, 1, v21);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v76, v77, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v76, 0, 1, v21);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v76, v21);
LABEL_30:
    v80 = sub_100005150(&qword_100081028);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v76, v77, v21);
LABEL_31:
  v81 = v17[20];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = v219((char *)a1 + v81, 1, v21);
  v85 = v219(v83, 1, v21);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v82, v83, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v82, 0, 1, v21);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v82, v21);
LABEL_36:
    v86 = sub_100005150(&qword_100081028);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v82, v83, v21);
LABEL_37:
  v87 = v17[21];
  v88 = (_QWORD *)((char *)a1 + v87);
  v89 = (_QWORD *)((char *)a2 + v87);
  v90 = *(_QWORD *)((char *)a1 + v87);
  if (v90)
  {
    if (*v89)
    {
      *v88 = *v89;
      swift_release(v90);
      v91 = v88[1];
      v88[1] = v89[1];
      swift_release(v91);
      v92 = v88[2];
      v88[2] = v89[2];
      swift_release(v92);
      goto LABEL_42;
    }
    sub_100007814(v88);
  }
  *(_OWORD *)v88 = *(_OWORD *)v89;
  v88[2] = v89[2];
LABEL_42:
  v93 = v17[22];
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  v96 = sub_100005150(&qword_100081040);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  v222 = a2;
  if (v99)
  {
    if (!v100)
    {
      v101 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v101(v94, v95, v21);
      v101(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v100)
  {
    sub_10000F008((uint64_t)v94, &qword_100081040);
LABEL_47:
    v102 = sub_100005150(&qword_100081048);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_48;
  }
  v145 = *(void (**)(char *, char *, uint64_t))(v67 + 40);
  v145(v94, v95, v21);
  v145(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
LABEL_48:
  v103 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v104 = v103[5];
  v105 = &v94[v104];
  v106 = &v95[v104];
  v107 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 40))(v105, v106, v107);
  v108 = v103[6];
  v109 = &v94[v108];
  v110 = &v95[v108];
  v111 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  v114 = v113(v109, 1, v111);
  v115 = v113(v110, 1, v111);
  if (!v114)
  {
    v116 = v222;
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 40))(v109, v110, v111);
      goto LABEL_54;
    }
    (*(void (**)(char *, uint64_t))(v112 + 8))(v109, v111);
    goto LABEL_53;
  }
  v116 = v222;
  if (v115)
  {
LABEL_53:
    v117 = sub_100005150(&qword_100081050);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v109, v110, v111);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
LABEL_54:
  v118 = v103[7];
  v119 = &v94[v118];
  v120 = &v95[v118];
  v122 = *(_QWORD *)v120;
  v121 = *((_QWORD *)v120 + 1);
  v123 = *((_QWORD *)v119 + 1);
  *(_QWORD *)v119 = v122;
  *((_QWORD *)v119 + 1) = v121;
  swift_bridgeObjectRelease(v123);
  v124 = v103[8];
  v125 = &v94[v124];
  v126 = &v95[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  *(_OWORD *)((char *)a1 + *(int *)(v220 + 20)) = *(_OWORD *)((char *)v116 + *(int *)(v220 + 20));
  return a1;
}

uint64_t sub_100058130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005813C);
}

uint64_t sub_100058140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005814C);
}

uint64_t type metadata accessor for PlayButtonLarge(uint64_t a1)
{
  return sub_10001EA54(a1, qword_100082878, (uint64_t)&nominal type descriptor for PlayButtonLarge);
}

uint64_t sub_100058164(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UpNextEntry.Episode(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10006E900;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000581D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100072114, 1);
}

void sub_1000581E4()
{
  qword_100082818 = 0x4024000000000000;
}

uint64_t sub_1000581F4(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = type metadata accessor for Text.DateStyle.UnitsConfiguration.Style(0, a1);
  v2 = *(_QWORD *)(v26 - 8);
  v3 = __chkstk_darwin(v26);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Text.DateStyle.UnitsConfiguration(0, v3);
  v25 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005150(&qword_100081050);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1 + *(int *)(type metadata accessor for UpNextEntry.Episode(0) + 88);
  v16 = type metadata accessor for WidgetPredictedPlayState(0);
  sub_10000EFC4(v15 + *(int *)(v16 + 24), (uint64_t)v10, &qword_100081050);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    v17 = sub_10000F008((uint64_t)v10, &qword_100081050);
    return static Text.DateStyle.timer.getter(v17);
  }
  else
  {
    v19.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v20 = PlayButtonTimeFormatHelper.formatStyle.getter(v19);
    if ((static PlayButtonTimeFormatHelper.FormatStyle.== infix(_:_:)(v20, 0) & 1) != 0)
    {
      ((void (*)(void))static Text.DateStyle.timer.getter)();
    }
    else
    {
      v22 = PlayButtonTimeFormatHelper.formatStyle.getter(v21);
      v23 = PlayButtonTimeFormatHelper.FormatStyle.calendarUnits.getter(v22);
      (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for Text.DateStyle.UnitsConfiguration.Style.short(_:), v26);
      Text.DateStyle.UnitsConfiguration.init(units:style:)(v23, v5);
      static Text.DateStyle.relative(unitConfiguration:)(v7);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v27);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100058424@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __n128 v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  double v83;
  uint64_t v84;
  char v85;
  __n128 v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t OpaqueTypeConformance2;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;

  v158 = a1;
  v143 = type metadata accessor for PlayButtonLargeToggleStyle(0);
  __chkstk_darwin(v143);
  v142 = (uint64_t)&v120 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100005150(&qword_1000828B0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (char *)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100005150(&qword_1000828B8);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v145 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100005150(&qword_1000828C0);
  __chkstk_darwin(v157);
  v144 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v120 - v7;
  v155 = sub_100005150(&qword_1000828C8);
  __chkstk_darwin(v155);
  v156 = (uint64_t)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005150(&qword_100081050);
  __chkstk_darwin(v10);
  v137 = (uint64_t)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v136 = *(_QWORD *)(v138 - 8);
  v12 = __chkstk_darwin(v138);
  v122 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for Text.DateStyle(0, v12);
  v127 = *(_QWORD *)(v128 - 8);
  v14 = __chkstk_darwin(v128);
  v126 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for PillPlaybackButtonStyle(0, v14);
  v130 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v129 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PlaybackButton.State(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v151 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005150(&qword_100081048);
  __chkstk_darwin(v20);
  v150 = (uint64_t)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PlaybackButton(0);
  v23 = *(char **)(v22 - 8);
  __chkstk_darwin(v22);
  v125 = (char *)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100005150(&qword_1000828D0);
  v133 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v132 = (char *)&v120 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100005150(&qword_1000828D8);
  v135 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v131 = (char *)&v120 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v134 = (char *)&v120 - v28;
  v29 = sub_100005150(&qword_1000828E0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v149 = (char *)&v120 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for UpNextEntry.Episode(0);
  v33 = *(int *)(v32 + 84);
  v159 = v1;
  v34 = (uint64_t *)(v1 + v33);
  v35 = *v34;
  if (!*v34)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v158, 1, 1, v29);
  v36 = v32;
  v121 = v8;
  v148 = v22;
  v123 = v30;
  v124 = v29;
  v38 = v34[1];
  v37 = (char *)v34[2];
  v39 = type metadata accessor for Podcasts(0);
  v163 = (void *)v39;
  v164 = sub_10000FBAC(&qword_100081CC0, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v40 = sub_100033288(&v160);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v40, enum case for Podcasts.widgetLargePlaybackButton(_:), v39);
  swift_retain(v35);
  swift_retain(v38);
  swift_retain(v37);
  LOBYTE(v39) = isFeatureEnabled(_:)(&v160);
  sub_1000168F8(&v160);
  v41 = *(int *)(v36 + 88);
  v42 = v159 + v41;
  v43 = v35;
  if ((v39 & 1) == 0)
  {
    v72 = v42 + *(int *)(type metadata accessor for WidgetPredictedPlayState(0) + 20);
    v73 = v151;
    (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v151, enum case for PlaybackButton.State.playing(_:), v17);
    LOBYTE(v72) = static PlaybackButton.State.== infix(_:_:)(v72, v73);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v73, v17);
    v160 = v43;
    v161 = v38;
    v162 = (uint64_t)v37;
    v74 = sub_100009418();
    swift_retain(v43);
    swift_retain(v38);
    swift_retain(v37);
    v75 = v139;
    Toggle.init<A>(isOn:intent:label:)(v72 & 1, &v160, nullsub_1, 0, &type metadata for EmptyView, &type metadata for PlayPauseWidgetIntent, &protocol witness table for EmptyView, v74);
    v76 = v142;
    sub_10000EF3C(v159, v142, type metadata accessor for UpNextEntry.Episode);
    v77 = (int *)v143;
    *(_QWORD *)(v76 + *(int *)(v143 + 20)) = 0x403C000000000000;
    *(_QWORD *)(v76 + v77[6]) = 0x4000000000000000;
    *(_QWORD *)(v76 + v77[7]) = 0x4000000000000000;
    *(_QWORD *)(v76 + v77[8]) = 0x4022000000000000;
    *(_QWORD *)(v76 + v77[9]) = 0x4026000000000000;
    *(_QWORD *)(v76 + v77[10]) = 0x4018000000000000;
    v78 = sub_10000EEA8(&qword_1000828E8, &qword_1000828B0, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    v79 = sub_10000FBAC(&qword_1000828F0, type metadata accessor for PlayButtonLargeToggleStyle, (uint64_t)&unk_10006E98C);
    v80 = v145;
    v81 = v141;
    View.toggleStyle<A>(_:)(v76, v141, v77, v78, v79);
    sub_10000EF80(v76, type metadata accessor for PlayButtonLargeToggleStyle);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v75, v81);
    v82 = v37;
    if (qword_100080F88 != -1)
      swift_once(&qword_100080F88, sub_1000581E4);
    v83 = -*(double *)&qword_100082818;
    v84 = static Edge.Set.all.getter();
    v85 = v84;
    v86.n128_f64[0] = v83;
    v87 = EdgeInsets.init(_all:)(v84, v86);
    v89 = v88;
    v91 = v90;
    v93 = v92;
    v94 = v146;
    v95 = (uint64_t)v144;
    v96 = v147;
    (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v144, v80, v147);
    v97 = v157;
    v98 = v95 + *(int *)(v157 + 36);
    *(_BYTE *)v98 = v85;
    *(double *)(v98 + 8) = v87;
    *(_QWORD *)(v98 + 16) = v89;
    *(_QWORD *)(v98 + 24) = v91;
    *(_QWORD *)(v98 + 32) = v93;
    *(_BYTE *)(v98 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v80, v96);
    v99 = (uint64_t)v121;
    sub_10000EEF8(v95, (uint64_t)v121, &qword_1000828C0);
    v100 = v156;
    sub_10000EFC4(v99, v156, &qword_1000828C0);
    swift_storeEnumTagMultiPayload(v100, v155, 1);
    v101 = sub_10000FBAC((unint64_t *)&qword_100081110, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackButton, (uint64_t)&protocol conformance descriptor for PlaybackButton);
    v160 = v148;
    v161 = v153;
    v162 = v101;
    v163 = &protocol witness table for PillPlaybackButtonStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v160, &opaque type descriptor for <<opaque return type of View.playbackButtonStyle<A>(_:)>>, 1);
    v160 = v152;
    v161 = OpaqueTypeConformance2;
    v103 = swift_getOpaqueTypeConformance2(&v160, &opaque type descriptor for <<opaque return type of View.playbackButtonProgress(_:)>>, 1);
    v104 = sub_100059160();
    v70 = (uint64_t)v149;
    _ConditionalContent<>.init(storage:)(v100, v154, v97, v103, v104);
    swift_release(v82);
    swift_release(v38);
    swift_release(v43);
    sub_10000F008(v99, &qword_1000828C0);
    v67 = v158;
    v68 = v124;
    v69 = v123;
    goto LABEL_13;
  }
  sub_10000EFC4(v159 + v41, v150, &qword_100081048);
  v44 = type metadata accessor for WidgetPredictedPlayState(0);
  v45 = *(int *)(v44 + 20);
  v46 = v44;
  v143 = v44;
  v47 = v42 + v45;
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v144 = v23;
  v49 = v151;
  v48(v151, v47, v17);
  v160 = v43;
  v161 = v38;
  v162 = (uint64_t)v37;
  v50 = (uint64_t *)(v42 + *(int *)(v46 + 28));
  v51 = v50[1];
  v142 = *v50;
  v52 = (uint64_t *)(v159 + *(int *)(type metadata accessor for PlayButtonLarge(0) + 20));
  v54 = *v52;
  v53 = v52[1];
  v55 = sub_100009418();
  v147 = v43;
  swift_retain(v43);
  v146 = v38;
  swift_retain(v38);
  v145 = v37;
  swift_retain(v37);
  swift_bridgeObjectRetain(v51);
  v56 = v125;
  PlaybackButton.init<A>(interval:state:intent:systemImage:alignment:)(v150, v49, &v160, v142, v51, v54, v53, &type metadata for PlayPauseWidgetIntent, v55);
  v57 = v126;
  sub_1000581F4(v58);
  v59 = v129;
  static PlaybackButtonStyle<>.pill(dateStyle:)(v57);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v57, v128);
  v60 = sub_10000FBAC((unint64_t *)&qword_100081110, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackButton, (uint64_t)&protocol conformance descriptor for PlaybackButton);
  v61 = v132;
  v62 = v148;
  v63 = v153;
  View.playbackButtonStyle<A>(_:)(v59, v148, v153, v60, &protocol witness table for PillPlaybackButtonStyle);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v59, v63);
  (*((void (**)(char *, uint64_t))v144 + 1))(v56, v62);
  v64 = v137;
  sub_10000EFC4(v42 + *(int *)(v143 + 24), v137, &qword_100081050);
  v65 = v136;
  v66 = v138;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v64, 1, v138) == 1)
  {
    sub_10000F008(v64, &qword_100081050);
    v67 = v158;
    v68 = v124;
    v69 = v123;
    v70 = (uint64_t)v149;
LABEL_11:
    v108 = 2;
    goto LABEL_12;
  }
  v105 = v122;
  v106 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 32))(v122, v64, v66);
  v107 = PlayButtonTimeFormatHelper.showsProgressBar.getter(v106);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v105, v66);
  v67 = v158;
  v68 = v124;
  v69 = v123;
  v70 = (uint64_t)v149;
  if ((v107 & 1) == 0)
    goto LABEL_11;
  v108 = 1;
LABEL_12:
  v160 = v148;
  v161 = v63;
  v162 = v60;
  v163 = &protocol witness table for PillPlaybackButtonStyle;
  v109 = swift_getOpaqueTypeConformance2(&v160, &opaque type descriptor for <<opaque return type of View.playbackButtonStyle<A>(_:)>>, 1);
  v110 = v131;
  v111 = v108;
  v112 = v152;
  View.playbackButtonProgress(_:)(v111, v152, v109);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v61, v112);
  v113 = v135;
  v114 = v134;
  v115 = v110;
  v116 = v154;
  (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v134, v115, v154);
  v117 = v156;
  (*(void (**)(uint64_t, char *, uint64_t))(v113 + 16))(v156, v114, v116);
  swift_storeEnumTagMultiPayload(v117, v155, 0);
  v160 = v112;
  v161 = v109;
  v118 = swift_getOpaqueTypeConformance2(&v160, &opaque type descriptor for <<opaque return type of View.playbackButtonProgress(_:)>>, 1);
  v119 = sub_100059160();
  _ConditionalContent<>.init(storage:)(v117, v116, v157, v118, v119);
  swift_release(v145);
  swift_release(v146);
  swift_release(v147);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v114, v116);
LABEL_13:
  sub_10000EEF8(v70, v67, &qword_1000828E0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v67, 0, 1, v68);
}

uint64_t type metadata accessor for PlayButtonLargeToggleStyle(uint64_t a1)
{
  return sub_10001EA54(a1, qword_100082958, (uint64_t)&nominal type descriptor for PlayButtonLargeToggleStyle);
}

unint64_t sub_100059160()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000828F8;
  if (!qword_1000828F8)
  {
    v1 = sub_10000950C(&qword_1000828C0);
    v2[0] = sub_10000950C(&qword_1000828B0);
    v2[1] = type metadata accessor for PlayButtonLargeToggleStyle(255);
    v2[2] = sub_10000EEA8(&qword_1000828E8, &qword_1000828B0, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    v2[3] = sub_10000FBAC(&qword_1000828F0, type metadata accessor for PlayButtonLargeToggleStyle, (uint64_t)&unk_10006E98C);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000828F8);
  }
  return result;
}

_QWORD *sub_100059250(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(_QWORD *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id *v49;
  int v50;
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  id *v86;
  int v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *__dst;
  void *__dsta;
  _QWORD *v164;
  _QWORD *v165;
  unsigned int (*v167)(char *, uint64_t, uint64_t);
  int *v168;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v10 = a2[6];
    v9 = a2[7];
    a1[6] = v10;
    a1[7] = v9;
    v12 = a2[8];
    v11 = a2[9];
    a1[8] = v12;
    a1[9] = v11;
    v13 = a2[10];
    a1[10] = v13;
    v168 = (int *)type metadata accessor for UpNextEntry.Episode(0);
    v14 = v168[10];
    __dst = (char *)a1 + v14;
    v164 = a1;
    v165 = a2;
    v15 = (char *)a2 + v14;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_retain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v167 = v18;
    if (v18(v15, 1, v16))
    {
      v19 = sub_100005150(&qword_100081028);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v22 = v168[11];
    v21 = v164;
    v23 = (_QWORD *)((char *)v164 + v22);
    v24 = (_QWORD *)((char *)v165 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v168[12];
    v27 = (_QWORD *)((char *)v164 + v26);
    v28 = (_QWORD *)((char *)v165 + v26);
    v29 = (int *)type metadata accessor for ArtworkModel(0);
    v30 = *((_QWORD *)v29 - 1);
    v31 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48);
    swift_bridgeObjectRetain(v25);
    if (v31(v28, 1, v29))
    {
      v32 = sub_100005150(&qword_100081030);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      __dsta = (void *)v16;
      v33 = v28[1];
      *v27 = *v28;
      v27[1] = v33;
      v34 = *((unsigned __int8 *)v28 + 32);
      swift_bridgeObjectRetain(v33);
      if (v34 == 255)
      {
        *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
        *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
      }
      else
      {
        v35 = v28[2];
        v36 = v28[3];
        sub_100005190(v35, v36, v34);
        v27[2] = v35;
        v27[3] = v36;
        *((_BYTE *)v27 + 32) = v34;
      }
      *(_OWORD *)(v27 + 5) = *(_OWORD *)(v28 + 5);
      v37 = (id *)(v28 + 7);
      v38 = *((unsigned __int8 *)v28 + 64);
      if (v38 == 255)
      {
        v27[7] = *v37;
        *((_BYTE *)v27 + 64) = *((_BYTE *)v28 + 64);
      }
      else
      {
        v39 = *v37;
        sub_1000051A8(*v37, *((_BYTE *)v28 + 64));
        v27[7] = v39;
        *((_BYTE *)v27 + 64) = v38;
      }
      v40 = (id *)(v28 + 9);
      v41 = *((unsigned __int8 *)v28 + 80);
      if (v41 == 255)
      {
        v27[9] = *v40;
        *((_BYTE *)v27 + 80) = *((_BYTE *)v28 + 80);
      }
      else
      {
        v42 = *v40;
        sub_1000051A8(*v40, *((_BYTE *)v28 + 80));
        v27[9] = v42;
        *((_BYTE *)v27 + 80) = v41;
      }
      v43 = (id *)(v28 + 11);
      v44 = *((unsigned __int8 *)v28 + 96);
      if (v44 == 255)
      {
        v27[11] = *v43;
        *((_BYTE *)v27 + 96) = *((_BYTE *)v28 + 96);
      }
      else
      {
        v45 = *v43;
        sub_1000051A8(*v43, *((_BYTE *)v28 + 96));
        v27[11] = v45;
        *((_BYTE *)v27 + 96) = v44;
      }
      v46 = (id *)(v28 + 13);
      v47 = *((unsigned __int8 *)v28 + 112);
      if (v47 == 255)
      {
        v27[13] = *v46;
        *((_BYTE *)v27 + 112) = *((_BYTE *)v28 + 112);
      }
      else
      {
        v48 = *v46;
        sub_1000051A8(*v46, *((_BYTE *)v28 + 112));
        v27[13] = v48;
        *((_BYTE *)v27 + 112) = v47;
      }
      v49 = (id *)(v28 + 15);
      v50 = *((unsigned __int8 *)v28 + 128);
      if (v50 == 255)
      {
        v27[15] = *v49;
        *((_BYTE *)v27 + 128) = *((_BYTE *)v28 + 128);
      }
      else
      {
        v51 = *v49;
        sub_1000051A8(*v49, *((_BYTE *)v28 + 128));
        v27[15] = v51;
        *((_BYTE *)v27 + 128) = v50;
      }
      v16 = (uint64_t)__dsta;
      *((_BYTE *)v27 + 129) = *((_BYTE *)v28 + 129);
      v52 = v29[11];
      v53 = (char *)v27 + v52;
      v54 = (char *)v28 + v52;
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      v56 = v29[12];
      v57 = (_QWORD *)((char *)v27 + v56);
      v58 = (_QWORD *)((char *)v28 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
      *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
      *((_BYTE *)v27 + v29[15]) = *((_BYTE *)v28 + v29[15]);
      v60 = v29[16];
      v61 = (_QWORD *)((char *)v27 + v60);
      v62 = (_QWORD *)((char *)v28 + v60);
      v63 = v62[1];
      *v61 = *v62;
      v61[1] = v63;
      v64 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      v64(v27, 0, 1, v29);
    }
    v65 = v168[13];
    v66 = (_QWORD *)((char *)v164 + v65);
    v67 = (_QWORD *)((char *)v165 + v65);
    if (v31((_QWORD *)((char *)v165 + v65), 1, v29))
    {
      v68 = sub_100005150(&qword_100081030);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = v16;
      v70 = v67[1];
      *v66 = *v67;
      v66[1] = v70;
      v71 = *((unsigned __int8 *)v67 + 32);
      swift_bridgeObjectRetain(v70);
      if (v71 == 255)
      {
        *((_OWORD *)v66 + 1) = *((_OWORD *)v67 + 1);
        *((_BYTE *)v66 + 32) = *((_BYTE *)v67 + 32);
      }
      else
      {
        v72 = v67[2];
        v73 = v67[3];
        sub_100005190(v72, v73, v71);
        v66[2] = v72;
        v66[3] = v73;
        *((_BYTE *)v66 + 32) = v71;
      }
      *(_OWORD *)(v66 + 5) = *(_OWORD *)(v67 + 5);
      v74 = (id *)(v67 + 7);
      v75 = *((unsigned __int8 *)v67 + 64);
      if (v75 == 255)
      {
        v66[7] = *v74;
        *((_BYTE *)v66 + 64) = *((_BYTE *)v67 + 64);
      }
      else
      {
        v76 = *v74;
        sub_1000051A8(*v74, *((_BYTE *)v67 + 64));
        v66[7] = v76;
        *((_BYTE *)v66 + 64) = v75;
      }
      v77 = (id *)(v67 + 9);
      v78 = *((unsigned __int8 *)v67 + 80);
      if (v78 == 255)
      {
        v66[9] = *v77;
        *((_BYTE *)v66 + 80) = *((_BYTE *)v67 + 80);
      }
      else
      {
        v79 = *v77;
        sub_1000051A8(*v77, *((_BYTE *)v67 + 80));
        v66[9] = v79;
        *((_BYTE *)v66 + 80) = v78;
      }
      v80 = (id *)(v67 + 11);
      v81 = *((unsigned __int8 *)v67 + 96);
      if (v81 == 255)
      {
        v66[11] = *v80;
        *((_BYTE *)v66 + 96) = *((_BYTE *)v67 + 96);
      }
      else
      {
        v82 = *v80;
        sub_1000051A8(*v80, *((_BYTE *)v67 + 96));
        v66[11] = v82;
        *((_BYTE *)v66 + 96) = v81;
      }
      v83 = (id *)(v67 + 13);
      v84 = *((unsigned __int8 *)v67 + 112);
      if (v84 == 255)
      {
        v66[13] = *v83;
        *((_BYTE *)v66 + 112) = *((_BYTE *)v67 + 112);
      }
      else
      {
        v85 = *v83;
        sub_1000051A8(*v83, *((_BYTE *)v67 + 112));
        v66[13] = v85;
        *((_BYTE *)v66 + 112) = v84;
      }
      v86 = (id *)(v67 + 15);
      v87 = *((unsigned __int8 *)v67 + 128);
      if (v87 == 255)
      {
        v66[15] = *v86;
        *((_BYTE *)v66 + 128) = *((_BYTE *)v67 + 128);
      }
      else
      {
        v88 = *v86;
        sub_1000051A8(*v86, *((_BYTE *)v67 + 128));
        v66[15] = v88;
        *((_BYTE *)v66 + 128) = v87;
      }
      v16 = v69;
      *((_BYTE *)v66 + 129) = *((_BYTE *)v67 + 129);
      v89 = v29[11];
      v90 = (char *)v66 + v89;
      v91 = (char *)v67 + v89;
      v92 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = v29[12];
      v94 = (_QWORD *)((char *)v66 + v93);
      v95 = (_QWORD *)((char *)v67 + v93);
      v96 = v95[1];
      *v94 = *v95;
      v94[1] = v96;
      *((_BYTE *)v66 + v29[13]) = *((_BYTE *)v67 + v29[13]);
      *((_BYTE *)v66 + v29[14]) = *((_BYTE *)v67 + v29[14]);
      *((_BYTE *)v66 + v29[15]) = *((_BYTE *)v67 + v29[15]);
      v97 = v29[16];
      v98 = (_QWORD *)((char *)v66 + v97);
      v99 = (_QWORD *)((char *)v67 + v97);
      v100 = v99[1];
      *v98 = *v99;
      v98[1] = v100;
      v101 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v100);
      v101(v66, 0, 1, v29);
    }
    v102 = v168[14];
    v103 = *(void **)((char *)v165 + v102);
    *(_QWORD *)((char *)v164 + v102) = v103;
    v104 = v168[15];
    v105 = (char *)v164 + v104;
    v106 = (char *)v165 + v104;
    v107 = type metadata accessor for URL(0);
    v108 = *(_QWORD *)(v107 - 8);
    v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
    v110 = v103;
    if (v109(v106, 1, v107))
    {
      v111 = sub_100005150(&qword_100081038);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    *((_BYTE *)v164 + v168[16]) = *((_BYTE *)v165 + v168[16]);
    v112 = v168[17];
    v113 = (char *)v164 + v112;
    v114 = (char *)v165 + v112;
    *(_QWORD *)v113 = *(_QWORD *)v114;
    v113[8] = v114[8];
    v115 = v168[18];
    v116 = (char *)v164 + v115;
    v117 = (char *)v165 + v115;
    *(_QWORD *)v116 = *(_QWORD *)v117;
    v116[8] = v117[8];
    v118 = v168[19];
    v119 = (char *)v164 + v118;
    v120 = (char *)v165 + v118;
    if (v167((char *)v165 + v118, 1, v16))
    {
      v121 = sub_100005150(&qword_100081028);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v119, v120, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v119, 0, 1, v16);
    }
    v122 = v168[20];
    v123 = (char *)v164 + v122;
    v124 = (char *)v165 + v122;
    if (v167((char *)v165 + v122, 1, v16))
    {
      v125 = sub_100005150(&qword_100081028);
      memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v123, v124, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v123, 0, 1, v16);
    }
    v126 = v168[21];
    v127 = (_QWORD *)((char *)v164 + v126);
    v128 = (_QWORD *)((char *)v165 + v126);
    v129 = *v128;
    if (*v128)
    {
      v130 = v128[1];
      v131 = v128[2];
      *v127 = v129;
      v127[1] = v130;
      v127[2] = v131;
      swift_retain(v129);
      swift_retain(v130);
      swift_retain(v131);
    }
    else
    {
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v127[2] = v128[2];
    }
    v132 = v168[22];
    v133 = (char *)v164 + v132;
    v134 = (char *)v165 + v132;
    v135 = sub_100005150(&qword_100081040);
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_100005150(&qword_100081048);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v138(v133, v134, v16);
      v138(&v133[*(int *)(v135 + 36)], &v134[*(int *)(v135 + 36)], v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v139 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
    v140 = v139[5];
    v141 = &v133[v140];
    v142 = &v134[v140];
    v143 = type metadata accessor for PlaybackButton.State(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
    v144 = v139[6];
    v145 = &v133[v144];
    v146 = &v134[v144];
    v147 = type metadata accessor for PlayButtonTimeFormatHelper(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
    {
      v149 = sub_100005150(&qword_100081050);
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
    }
    v150 = v139[7];
    v151 = &v133[v150];
    v152 = &v134[v150];
    v153 = *((_QWORD *)v152 + 1);
    *(_QWORD *)v151 = *(_QWORD *)v152;
    *((_QWORD *)v151 + 1) = v153;
    v154 = v139[8];
    v155 = &v133[v154];
    v156 = &v134[v154];
    v157 = *((_QWORD *)v156 + 1);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v157;
    v158 = a3[6];
    *(_QWORD *)((char *)v164 + a3[5]) = *(_QWORD *)((char *)v165 + a3[5]);
    *(_QWORD *)((char *)v164 + v158) = *(_QWORD *)((char *)v165 + v158);
    v159 = a3[8];
    *(_QWORD *)((char *)v164 + a3[7]) = *(_QWORD *)((char *)v165 + a3[7]);
    *(_QWORD *)((char *)v164 + v159) = *(_QWORD *)((char *)v165 + v159);
    v160 = a3[10];
    *(_QWORD *)((char *)v164 + a3[9]) = *(_QWORD *)((char *)v165 + a3[9]);
    *(_QWORD *)((char *)v164 + v160) = *(_QWORD *)((char *)v165 + v160);
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v157);
  }
  return v21;
}

_QWORD *sub_100059CF8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(_QWORD *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  id *v34;
  int v35;
  id v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  id *v71;
  int v72;
  id v73;
  id *v74;
  int v75;
  id v76;
  id *v77;
  int v78;
  id v79;
  id *v80;
  int v81;
  id v82;
  id *v83;
  int v84;
  id v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void (*v98)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v99;
  void *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(char *, uint64_t, uint64_t);
  id v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *__dst;
  void *__dsta;
  _QWORD *v161;
  _QWORD *v162;
  int *v164;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v9 = a2[6];
  v8 = a2[7];
  a1[6] = v9;
  a1[7] = v8;
  v11 = a2[8];
  v10 = a2[9];
  a1[8] = v11;
  a1[9] = v10;
  v12 = a2[10];
  a1[10] = v12;
  v164 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v13 = v164[10];
  __dst = (char *)a1 + v13;
  v161 = a1;
  v162 = a2;
  v14 = (char *)a2 + v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  if (v17(v14, 1, v15))
  {
    v18 = sub_100005150(&qword_100081028);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = v164[11];
  v20 = (_QWORD *)((char *)v161 + v19);
  v21 = (_QWORD *)((char *)v162 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v164[12];
  v24 = (_QWORD *)((char *)v161 + v23);
  v25 = (_QWORD *)((char *)v162 + v23);
  v26 = (int *)type metadata accessor for ArtworkModel(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48);
  swift_bridgeObjectRetain(v22);
  if (v28(v25, 1, v26))
  {
    v29 = sub_100005150(&qword_100081030);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    __dsta = (void *)v15;
    v30 = v25[1];
    *v24 = *v25;
    v24[1] = v30;
    v31 = *((unsigned __int8 *)v25 + 32);
    swift_bridgeObjectRetain(v30);
    if (v31 == 255)
    {
      *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
      *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
    }
    else
    {
      v32 = v25[2];
      v33 = v25[3];
      sub_100005190(v32, v33, v31);
      v24[2] = v32;
      v24[3] = v33;
      *((_BYTE *)v24 + 32) = v31;
    }
    *(_OWORD *)(v24 + 5) = *(_OWORD *)(v25 + 5);
    v34 = (id *)(v25 + 7);
    v35 = *((unsigned __int8 *)v25 + 64);
    if (v35 == 255)
    {
      v24[7] = *v34;
      *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
    }
    else
    {
      v36 = *v34;
      sub_1000051A8(*v34, *((_BYTE *)v25 + 64));
      v24[7] = v36;
      *((_BYTE *)v24 + 64) = v35;
    }
    v37 = (id *)(v25 + 9);
    v38 = *((unsigned __int8 *)v25 + 80);
    if (v38 == 255)
    {
      v24[9] = *v37;
      *((_BYTE *)v24 + 80) = *((_BYTE *)v25 + 80);
    }
    else
    {
      v39 = *v37;
      sub_1000051A8(*v37, *((_BYTE *)v25 + 80));
      v24[9] = v39;
      *((_BYTE *)v24 + 80) = v38;
    }
    v40 = (id *)(v25 + 11);
    v41 = *((unsigned __int8 *)v25 + 96);
    if (v41 == 255)
    {
      v24[11] = *v40;
      *((_BYTE *)v24 + 96) = *((_BYTE *)v25 + 96);
    }
    else
    {
      v42 = *v40;
      sub_1000051A8(*v40, *((_BYTE *)v25 + 96));
      v24[11] = v42;
      *((_BYTE *)v24 + 96) = v41;
    }
    v43 = (id *)(v25 + 13);
    v44 = *((unsigned __int8 *)v25 + 112);
    if (v44 == 255)
    {
      v24[13] = *v43;
      *((_BYTE *)v24 + 112) = *((_BYTE *)v25 + 112);
    }
    else
    {
      v45 = *v43;
      sub_1000051A8(*v43, *((_BYTE *)v25 + 112));
      v24[13] = v45;
      *((_BYTE *)v24 + 112) = v44;
    }
    v46 = (id *)(v25 + 15);
    v47 = *((unsigned __int8 *)v25 + 128);
    if (v47 == 255)
    {
      v24[15] = *v46;
      *((_BYTE *)v24 + 128) = *((_BYTE *)v25 + 128);
    }
    else
    {
      v48 = *v46;
      sub_1000051A8(*v46, *((_BYTE *)v25 + 128));
      v24[15] = v48;
      *((_BYTE *)v24 + 128) = v47;
    }
    v15 = (uint64_t)__dsta;
    *((_BYTE *)v24 + 129) = *((_BYTE *)v25 + 129);
    v49 = v26[11];
    v50 = (char *)v24 + v49;
    v51 = (char *)v25 + v49;
    v52 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
    v53 = v26[12];
    v54 = (_QWORD *)((char *)v24 + v53);
    v55 = (_QWORD *)((char *)v25 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    *((_BYTE *)v24 + v26[13]) = *((_BYTE *)v25 + v26[13]);
    *((_BYTE *)v24 + v26[14]) = *((_BYTE *)v25 + v26[14]);
    *((_BYTE *)v24 + v26[15]) = *((_BYTE *)v25 + v26[15]);
    v57 = v26[16];
    v58 = (_QWORD *)((char *)v24 + v57);
    v59 = (_QWORD *)((char *)v25 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v60);
    v61(v24, 0, 1, v26);
  }
  v62 = v164[13];
  v63 = (_QWORD *)((char *)v161 + v62);
  v64 = (_QWORD *)((char *)v162 + v62);
  if (v28((_QWORD *)((char *)v162 + v62), 1, v26))
  {
    v65 = sub_100005150(&qword_100081030);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    v66 = v15;
    v67 = v64[1];
    *v63 = *v64;
    v63[1] = v67;
    v68 = *((unsigned __int8 *)v64 + 32);
    swift_bridgeObjectRetain(v67);
    if (v68 == 255)
    {
      *((_OWORD *)v63 + 1) = *((_OWORD *)v64 + 1);
      *((_BYTE *)v63 + 32) = *((_BYTE *)v64 + 32);
    }
    else
    {
      v69 = v64[2];
      v70 = v64[3];
      sub_100005190(v69, v70, v68);
      v63[2] = v69;
      v63[3] = v70;
      *((_BYTE *)v63 + 32) = v68;
    }
    *(_OWORD *)(v63 + 5) = *(_OWORD *)(v64 + 5);
    v71 = (id *)(v64 + 7);
    v72 = *((unsigned __int8 *)v64 + 64);
    if (v72 == 255)
    {
      v63[7] = *v71;
      *((_BYTE *)v63 + 64) = *((_BYTE *)v64 + 64);
    }
    else
    {
      v73 = *v71;
      sub_1000051A8(*v71, *((_BYTE *)v64 + 64));
      v63[7] = v73;
      *((_BYTE *)v63 + 64) = v72;
    }
    v74 = (id *)(v64 + 9);
    v75 = *((unsigned __int8 *)v64 + 80);
    if (v75 == 255)
    {
      v63[9] = *v74;
      *((_BYTE *)v63 + 80) = *((_BYTE *)v64 + 80);
    }
    else
    {
      v76 = *v74;
      sub_1000051A8(*v74, *((_BYTE *)v64 + 80));
      v63[9] = v76;
      *((_BYTE *)v63 + 80) = v75;
    }
    v77 = (id *)(v64 + 11);
    v78 = *((unsigned __int8 *)v64 + 96);
    if (v78 == 255)
    {
      v63[11] = *v77;
      *((_BYTE *)v63 + 96) = *((_BYTE *)v64 + 96);
    }
    else
    {
      v79 = *v77;
      sub_1000051A8(*v77, *((_BYTE *)v64 + 96));
      v63[11] = v79;
      *((_BYTE *)v63 + 96) = v78;
    }
    v80 = (id *)(v64 + 13);
    v81 = *((unsigned __int8 *)v64 + 112);
    if (v81 == 255)
    {
      v63[13] = *v80;
      *((_BYTE *)v63 + 112) = *((_BYTE *)v64 + 112);
    }
    else
    {
      v82 = *v80;
      sub_1000051A8(*v80, *((_BYTE *)v64 + 112));
      v63[13] = v82;
      *((_BYTE *)v63 + 112) = v81;
    }
    v83 = (id *)(v64 + 15);
    v84 = *((unsigned __int8 *)v64 + 128);
    if (v84 == 255)
    {
      v63[15] = *v83;
      *((_BYTE *)v63 + 128) = *((_BYTE *)v64 + 128);
    }
    else
    {
      v85 = *v83;
      sub_1000051A8(*v83, *((_BYTE *)v64 + 128));
      v63[15] = v85;
      *((_BYTE *)v63 + 128) = v84;
    }
    v15 = v66;
    *((_BYTE *)v63 + 129) = *((_BYTE *)v64 + 129);
    v86 = v26[11];
    v87 = (char *)v63 + v86;
    v88 = (char *)v64 + v86;
    v89 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
    v90 = v26[12];
    v91 = (_QWORD *)((char *)v63 + v90);
    v92 = (_QWORD *)((char *)v64 + v90);
    v93 = v92[1];
    *v91 = *v92;
    v91[1] = v93;
    *((_BYTE *)v63 + v26[13]) = *((_BYTE *)v64 + v26[13]);
    *((_BYTE *)v63 + v26[14]) = *((_BYTE *)v64 + v26[14]);
    *((_BYTE *)v63 + v26[15]) = *((_BYTE *)v64 + v26[15]);
    v94 = v26[16];
    v95 = (_QWORD *)((char *)v63 + v94);
    v96 = (_QWORD *)((char *)v64 + v94);
    v97 = v96[1];
    *v95 = *v96;
    v95[1] = v97;
    v98 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v97);
    v98(v63, 0, 1, v26);
  }
  v99 = v164[14];
  v100 = *(void **)((char *)v162 + v99);
  *(_QWORD *)((char *)v161 + v99) = v100;
  v101 = v164[15];
  v102 = (char *)v161 + v101;
  v103 = (char *)v162 + v101;
  v104 = type metadata accessor for URL(0);
  v105 = *(_QWORD *)(v104 - 8);
  v106 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v107 = v100;
  if (v106(v103, 1, v104))
  {
    v108 = sub_100005150(&qword_100081038);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v102, v103, v104);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
  }
  *((_BYTE *)v161 + v164[16]) = *((_BYTE *)v162 + v164[16]);
  v109 = v164[17];
  v110 = (char *)v161 + v109;
  v111 = (char *)v162 + v109;
  *(_QWORD *)v110 = *(_QWORD *)v111;
  v110[8] = v111[8];
  v112 = v164[18];
  v113 = (char *)v161 + v112;
  v114 = (char *)v162 + v112;
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v113[8] = v114[8];
  v115 = v164[19];
  v116 = (char *)v161 + v115;
  v117 = (char *)v162 + v115;
  if (v17((char *)v162 + v115, 1, v15))
  {
    v118 = sub_100005150(&qword_100081028);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v116, v117, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v116, 0, 1, v15);
  }
  v119 = v164[20];
  v120 = (char *)v161 + v119;
  v121 = (char *)v162 + v119;
  if (v17((char *)v162 + v119, 1, v15))
  {
    v122 = sub_100005150(&qword_100081028);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v120, v121, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v120, 0, 1, v15);
  }
  v123 = v164[21];
  v124 = (_QWORD *)((char *)v161 + v123);
  v125 = (_QWORD *)((char *)v162 + v123);
  v126 = *v125;
  if (*v125)
  {
    v127 = v125[1];
    v128 = v125[2];
    *v124 = v126;
    v124[1] = v127;
    v124[2] = v128;
    swift_retain(v126);
    swift_retain(v127);
    swift_retain(v128);
  }
  else
  {
    *(_OWORD *)v124 = *(_OWORD *)v125;
    v124[2] = v125[2];
  }
  v129 = v164[22];
  v130 = (char *)v161 + v129;
  v131 = (char *)v162 + v129;
  v132 = sub_100005150(&qword_100081040);
  v133 = *(_QWORD *)(v132 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
  {
    v134 = sub_100005150(&qword_100081048);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
  }
  else
  {
    v135 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v135(v130, v131, v15);
    v135(&v130[*(int *)(v132 + 36)], &v131[*(int *)(v132 + 36)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
  }
  v136 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v137 = v136[5];
  v138 = &v130[v137];
  v139 = &v131[v137];
  v140 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
  v141 = v136[6];
  v142 = &v130[v141];
  v143 = &v131[v141];
  v144 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v145 = *(_QWORD *)(v144 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
  {
    v146 = sub_100005150(&qword_100081050);
    memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v142, v143, v144);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
  }
  v147 = v136[7];
  v148 = &v130[v147];
  v149 = &v131[v147];
  v150 = *((_QWORD *)v149 + 1);
  *(_QWORD *)v148 = *(_QWORD *)v149;
  *((_QWORD *)v148 + 1) = v150;
  v151 = v136[8];
  v152 = &v130[v151];
  v153 = &v131[v151];
  v154 = *((_QWORD *)v153 + 1);
  *(_QWORD *)v152 = *(_QWORD *)v153;
  *((_QWORD *)v152 + 1) = v154;
  v155 = a3[6];
  *(_QWORD *)((char *)v161 + a3[5]) = *(_QWORD *)((char *)v162 + a3[5]);
  *(_QWORD *)((char *)v161 + v155) = *(_QWORD *)((char *)v162 + v155);
  v156 = a3[8];
  *(_QWORD *)((char *)v161 + a3[7]) = *(_QWORD *)((char *)v162 + a3[7]);
  *(_QWORD *)((char *)v161 + v156) = *(_QWORD *)((char *)v162 + v156);
  v157 = a3[10];
  *(_QWORD *)((char *)v161 + a3[9]) = *(_QWORD *)((char *)v162 + a3[9]);
  *(_QWORD *)((char *)v161 + v157) = *(_QWORD *)((char *)v162 + v157);
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRetain(v154);
  return v161;
}

_QWORD *sub_10005A774(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  __int128 v55;
  id *v56;
  int v57;
  id v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id v67;
  id *v68;
  int v69;
  id v70;
  id v71;
  id *v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  void **v93;
  void **v94;
  int v95;
  void *v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  void **v102;
  void **v103;
  int v104;
  void *v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  void **v111;
  void **v112;
  int v113;
  void *v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  void *v119;
  void **v120;
  void **v121;
  int v122;
  void *v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  void **v129;
  void **v130;
  int v131;
  void *v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  __int128 *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  __int128 v174;
  id *v175;
  int v176;
  id v177;
  id v178;
  id *v179;
  int v180;
  id v181;
  id v182;
  id *v183;
  int v184;
  id v185;
  id v186;
  id *v187;
  int v188;
  id v189;
  id v190;
  id *v191;
  int v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v208;
  uint64_t v209;
  char v210;
  __int128 v211;
  void **v212;
  void **v213;
  int v214;
  void *v215;
  void *v216;
  char v217;
  void *v218;
  char v219;
  void *v220;
  void **v221;
  void **v222;
  int v223;
  void *v224;
  void *v225;
  char v226;
  void *v227;
  char v228;
  void *v229;
  void **v230;
  void **v231;
  int v232;
  void *v233;
  void *v234;
  char v235;
  void *v236;
  char v237;
  void *v238;
  void **v239;
  void **v240;
  int v241;
  void *v242;
  void *v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  void **v248;
  void **v249;
  int v250;
  void *v251;
  void *v252;
  char v253;
  void *v254;
  char v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  id v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (*v280)(char *, uint64_t, uint64_t);
  int v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t (*v321)(char *, uint64_t, uint64_t);
  int v322;
  int v323;
  void (*v324)(char *, char *, uint64_t);
  uint64_t v325;
  int *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t (*v336)(char *, uint64_t, uint64_t);
  int v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  void (*v350)(char *, char *, uint64_t);
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t (*v354)(char *, uint64_t, uint64_t);
  uint64_t v355;
  int *v356;
  _QWORD *v357;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[9] = a2[9];
  v16 = a2[10];
  v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v19 = v18[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v354 = v24;
  v26 = v24(v21, 1, v22);
  v355 = v23;
  v356 = a3;
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100005150(&qword_100081028);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v28 = v18[11];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v18[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v353 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v353 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      v351 = v22;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v40 = *((_QWORD *)v35 + 1);
      *(_QWORD *)(v34 + 8) = v40;
      v41 = v35[32];
      swift_bridgeObjectRetain(v40);
      if (v41 == 255)
      {
        v55 = *((_OWORD *)v35 + 1);
        *(_BYTE *)(v34 + 32) = v35[32];
        *(_OWORD *)(v34 + 16) = v55;
      }
      else
      {
        v42 = *((_QWORD *)v35 + 2);
        v43 = *((_QWORD *)v35 + 3);
        sub_100005190(v42, v43, v41);
        *(_QWORD *)(v34 + 16) = v42;
        *(_QWORD *)(v34 + 24) = v43;
        *(_BYTE *)(v34 + 32) = v41;
      }
      *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
      *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
      v56 = (id *)(v35 + 56);
      v57 = v35[64];
      if (v57 == 255)
      {
        v59 = *v56;
        *(_BYTE *)(v34 + 64) = v35[64];
        *(_QWORD *)(v34 + 56) = v59;
      }
      else
      {
        v58 = *v56;
        sub_1000051A8(*v56, v35[64]);
        *(_QWORD *)(v34 + 56) = v58;
        *(_BYTE *)(v34 + 64) = v57;
      }
      v22 = v351;
      v60 = (id *)(v35 + 72);
      v61 = v35[80];
      if (v61 == 255)
      {
        v63 = *v60;
        *(_BYTE *)(v34 + 80) = v35[80];
        *(_QWORD *)(v34 + 72) = v63;
      }
      else
      {
        v62 = *v60;
        sub_1000051A8(*v60, v35[80]);
        *(_QWORD *)(v34 + 72) = v62;
        *(_BYTE *)(v34 + 80) = v61;
      }
      v64 = (id *)(v35 + 88);
      v65 = v35[96];
      if (v65 == 255)
      {
        v67 = *v64;
        *(_BYTE *)(v34 + 96) = v35[96];
        *(_QWORD *)(v34 + 88) = v67;
      }
      else
      {
        v66 = *v64;
        sub_1000051A8(*v64, v35[96]);
        *(_QWORD *)(v34 + 88) = v66;
        *(_BYTE *)(v34 + 96) = v65;
      }
      v68 = (id *)(v35 + 104);
      v69 = v35[112];
      if (v69 == 255)
      {
        v71 = *v68;
        *(_BYTE *)(v34 + 112) = v35[112];
        *(_QWORD *)(v34 + 104) = v71;
      }
      else
      {
        v70 = *v68;
        sub_1000051A8(*v68, v35[112]);
        *(_QWORD *)(v34 + 104) = v70;
        *(_BYTE *)(v34 + 112) = v69;
      }
      v72 = (id *)(v35 + 120);
      v73 = v35[128];
      if (v73 == 255)
      {
        v75 = *v72;
        *(_BYTE *)(v34 + 128) = v35[128];
        *(_QWORD *)(v34 + 120) = v75;
      }
      else
      {
        v74 = *v72;
        sub_1000051A8(*v72, v35[128]);
        *(_QWORD *)(v34 + 120) = v74;
        *(_BYTE *)(v34 + 128) = v73;
      }
      *(_BYTE *)(v34 + 129) = v35[129];
      v76 = v36[11];
      v77 = v34 + v76;
      v78 = &v35[v76];
      v79 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v80 = v36[12];
      v81 = (_QWORD *)(v34 + v80);
      v82 = &v35[v80];
      *v81 = *(_QWORD *)v82;
      v83 = *((_QWORD *)v82 + 1);
      v81[1] = v83;
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      v84 = v36[16];
      v85 = (_QWORD *)(v34 + v84);
      v86 = &v35[v84];
      *v85 = *(_QWORD *)v86;
      v87 = *((_QWORD *)v86 + 1);
      v85[1] = v87;
      v88 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v353 + 56);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v88(v34, 0, 1, v36);
      goto LABEL_75;
    }
LABEL_13:
    v44 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_75;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_13;
  }
  v352 = v22;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v45 = *((_QWORD *)v35 + 1);
  v46 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = (__int128 *)(v34 + 16);
  v48 = (__int128 *)(v35 + 16);
  v49 = v35[32];
  if (*(unsigned __int8 *)(v34 + 32) == 255)
  {
    if (v49 == 255)
    {
      v92 = *v48;
      *(_BYTE *)(v34 + 32) = v35[32];
      *v47 = v92;
    }
    else
    {
      v89 = *((_QWORD *)v35 + 2);
      v90 = *((_QWORD *)v35 + 3);
      sub_100005190(v89, v90, v35[32]);
      *(_QWORD *)(v34 + 16) = v89;
      *(_QWORD *)(v34 + 24) = v90;
      *(_BYTE *)(v34 + 32) = v49;
    }
  }
  else if (v49 == 255)
  {
    sub_100007770(v34 + 16);
    v91 = v35[32];
    *v47 = *v48;
    *(_BYTE *)(v34 + 32) = v91;
  }
  else
  {
    v51 = *((_QWORD *)v35 + 2);
    v50 = *((_QWORD *)v35 + 3);
    sub_100005190(v51, v50, v35[32]);
    v52 = *(_QWORD *)(v34 + 16);
    v53 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 16) = v51;
    *(_QWORD *)(v34 + 24) = v50;
    v54 = *(_BYTE *)(v34 + 32);
    *(_BYTE *)(v34 + 32) = v49;
    sub_100005624(v52, v53, v54);
  }
  *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
  *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
  v93 = (void **)(v34 + 56);
  v94 = (void **)(v35 + 56);
  v95 = v35[64];
  if (*(unsigned __int8 *)(v34 + 64) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(v34 + 64) = v35[64];
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_1000051A8(v99, v35[64]);
      *(_QWORD *)(v34 + 56) = v99;
      *(_BYTE *)(v34 + 64) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_1000077A4(v34 + 56);
    v100 = v35[64];
    *v93 = *v94;
    *(_BYTE *)(v34 + 64) = v100;
  }
  else
  {
    v96 = *v94;
    sub_1000051A8(v96, v35[64]);
    v97 = *(void **)(v34 + 56);
    *(_QWORD *)(v34 + 56) = v96;
    v98 = *(_BYTE *)(v34 + 64);
    *(_BYTE *)(v34 + 64) = v95;
    sub_10000563C(v97, v98);
  }
  v102 = (void **)(v34 + 72);
  v103 = (void **)(v35 + 72);
  v104 = v35[80];
  if (*(unsigned __int8 *)(v34 + 80) == 255)
  {
    if (v104 == 255)
    {
      v110 = *v103;
      *(_BYTE *)(v34 + 80) = v35[80];
      *v102 = v110;
    }
    else
    {
      v108 = *v103;
      sub_1000051A8(v108, v35[80]);
      *(_QWORD *)(v34 + 72) = v108;
      *(_BYTE *)(v34 + 80) = v104;
    }
  }
  else if (v104 == 255)
  {
    sub_1000077A4(v34 + 72);
    v109 = v35[80];
    *v102 = *v103;
    *(_BYTE *)(v34 + 80) = v109;
  }
  else
  {
    v105 = *v103;
    sub_1000051A8(v105, v35[80]);
    v106 = *(void **)(v34 + 72);
    *(_QWORD *)(v34 + 72) = v105;
    v107 = *(_BYTE *)(v34 + 80);
    *(_BYTE *)(v34 + 80) = v104;
    sub_10000563C(v106, v107);
  }
  v111 = (void **)(v34 + 88);
  v112 = (void **)(v35 + 88);
  v113 = v35[96];
  if (*(unsigned __int8 *)(v34 + 96) == 255)
  {
    if (v113 == 255)
    {
      v119 = *v112;
      *(_BYTE *)(v34 + 96) = v35[96];
      *v111 = v119;
    }
    else
    {
      v117 = *v112;
      sub_1000051A8(v117, v35[96]);
      *(_QWORD *)(v34 + 88) = v117;
      *(_BYTE *)(v34 + 96) = v113;
    }
  }
  else if (v113 == 255)
  {
    sub_1000077A4(v34 + 88);
    v118 = v35[96];
    *v111 = *v112;
    *(_BYTE *)(v34 + 96) = v118;
  }
  else
  {
    v114 = *v112;
    sub_1000051A8(v114, v35[96]);
    v115 = *(void **)(v34 + 88);
    *(_QWORD *)(v34 + 88) = v114;
    v116 = *(_BYTE *)(v34 + 96);
    *(_BYTE *)(v34 + 96) = v113;
    sub_10000563C(v115, v116);
  }
  v120 = (void **)(v34 + 104);
  v121 = (void **)(v35 + 104);
  v122 = v35[112];
  if (*(unsigned __int8 *)(v34 + 112) == 255)
  {
    if (v122 == 255)
    {
      v128 = *v121;
      *(_BYTE *)(v34 + 112) = v35[112];
      *v120 = v128;
    }
    else
    {
      v126 = *v121;
      sub_1000051A8(v126, v35[112]);
      *(_QWORD *)(v34 + 104) = v126;
      *(_BYTE *)(v34 + 112) = v122;
    }
  }
  else if (v122 == 255)
  {
    sub_1000077A4(v34 + 104);
    v127 = v35[112];
    *v120 = *v121;
    *(_BYTE *)(v34 + 112) = v127;
  }
  else
  {
    v123 = *v121;
    sub_1000051A8(v123, v35[112]);
    v124 = *(void **)(v34 + 104);
    *(_QWORD *)(v34 + 104) = v123;
    v125 = *(_BYTE *)(v34 + 112);
    *(_BYTE *)(v34 + 112) = v122;
    sub_10000563C(v124, v125);
  }
  v129 = (void **)(v34 + 120);
  v130 = (void **)(v35 + 120);
  v131 = v35[128];
  if (*(unsigned __int8 *)(v34 + 128) == 255)
  {
    if (v131 == 255)
    {
      v137 = *v130;
      *(_BYTE *)(v34 + 128) = v35[128];
      *v129 = v137;
    }
    else
    {
      v135 = *v130;
      sub_1000051A8(v135, v35[128]);
      *(_QWORD *)(v34 + 120) = v135;
      *(_BYTE *)(v34 + 128) = v131;
    }
  }
  else if (v131 == 255)
  {
    sub_1000077A4(v34 + 120);
    v136 = v35[128];
    *v129 = *v130;
    *(_BYTE *)(v34 + 128) = v136;
  }
  else
  {
    v132 = *v130;
    sub_1000051A8(v132, v35[128]);
    v133 = *(void **)(v34 + 120);
    *(_QWORD *)(v34 + 120) = v132;
    v134 = *(_BYTE *)(v34 + 128);
    *(_BYTE *)(v34 + 128) = v131;
    sub_10000563C(v133, v134);
  }
  v22 = v352;
  *(_BYTE *)(v34 + 129) = v35[129];
  v138 = v36[11];
  v139 = v34 + v138;
  v140 = &v35[v138];
  v141 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 24))(v139, v140, v141);
  v142 = v36[12];
  v143 = (_QWORD *)(v34 + v142);
  v144 = &v35[v142];
  *v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  v146 = v143[1];
  v143[1] = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v147 = v36[16];
  v148 = (_QWORD *)(v34 + v147);
  v149 = &v35[v147];
  *v148 = *(_QWORD *)v149;
  v150 = *((_QWORD *)v149 + 1);
  v151 = v148[1];
  v148[1] = v150;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRelease(v151);
LABEL_75:
  v152 = v18[13];
  v153 = (uint64_t)a1 + v152;
  v154 = (char *)a2 + v152;
  v155 = v37((uint64_t)a1 + v152, 1, v36);
  v156 = v37((uint64_t)v154, 1, v36);
  if (v155)
  {
    if (!v156)
    {
      v157 = v22;
      *(_QWORD *)v153 = *(_QWORD *)v154;
      v158 = *((_QWORD *)v154 + 1);
      *(_QWORD *)(v153 + 8) = v158;
      v159 = v154[32];
      swift_bridgeObjectRetain(v158);
      if (v159 == 255)
      {
        v174 = *((_OWORD *)v154 + 1);
        *(_BYTE *)(v153 + 32) = v154[32];
        *(_OWORD *)(v153 + 16) = v174;
      }
      else
      {
        v160 = *((_QWORD *)v154 + 2);
        v161 = *((_QWORD *)v154 + 3);
        sub_100005190(v160, v161, v159);
        *(_QWORD *)(v153 + 16) = v160;
        *(_QWORD *)(v153 + 24) = v161;
        *(_BYTE *)(v153 + 32) = v159;
      }
      *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
      *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
      v175 = (id *)(v154 + 56);
      v176 = v154[64];
      if (v176 == 255)
      {
        v178 = *v175;
        *(_BYTE *)(v153 + 64) = v154[64];
        *(_QWORD *)(v153 + 56) = v178;
      }
      else
      {
        v177 = *v175;
        sub_1000051A8(*v175, v154[64]);
        *(_QWORD *)(v153 + 56) = v177;
        *(_BYTE *)(v153 + 64) = v176;
      }
      v22 = v157;
      v179 = (id *)(v154 + 72);
      v180 = v154[80];
      if (v180 == 255)
      {
        v182 = *v179;
        *(_BYTE *)(v153 + 80) = v154[80];
        *(_QWORD *)(v153 + 72) = v182;
      }
      else
      {
        v181 = *v179;
        sub_1000051A8(*v179, v154[80]);
        *(_QWORD *)(v153 + 72) = v181;
        *(_BYTE *)(v153 + 80) = v180;
      }
      v183 = (id *)(v154 + 88);
      v184 = v154[96];
      if (v184 == 255)
      {
        v186 = *v183;
        *(_BYTE *)(v153 + 96) = v154[96];
        *(_QWORD *)(v153 + 88) = v186;
      }
      else
      {
        v185 = *v183;
        sub_1000051A8(*v183, v154[96]);
        *(_QWORD *)(v153 + 88) = v185;
        *(_BYTE *)(v153 + 96) = v184;
      }
      v187 = (id *)(v154 + 104);
      v188 = v154[112];
      if (v188 == 255)
      {
        v190 = *v187;
        *(_BYTE *)(v153 + 112) = v154[112];
        *(_QWORD *)(v153 + 104) = v190;
      }
      else
      {
        v189 = *v187;
        sub_1000051A8(*v187, v154[112]);
        *(_QWORD *)(v153 + 104) = v189;
        *(_BYTE *)(v153 + 112) = v188;
      }
      v191 = (id *)(v154 + 120);
      v192 = v154[128];
      if (v192 == 255)
      {
        v194 = *v191;
        *(_BYTE *)(v153 + 128) = v154[128];
        *(_QWORD *)(v153 + 120) = v194;
      }
      else
      {
        v193 = *v191;
        sub_1000051A8(*v191, v154[128]);
        *(_QWORD *)(v153 + 120) = v193;
        *(_BYTE *)(v153 + 128) = v192;
      }
      *(_BYTE *)(v153 + 129) = v154[129];
      v195 = v36[11];
      v196 = v153 + v195;
      v197 = &v154[v195];
      v198 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v198 - 8) + 16))(v196, v197, v198);
      v199 = v36[12];
      v200 = (_QWORD *)(v153 + v199);
      v201 = &v154[v199];
      *v200 = *(_QWORD *)v201;
      v202 = *((_QWORD *)v201 + 1);
      v200[1] = v202;
      *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
      *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
      *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
      v203 = v36[16];
      v204 = (_QWORD *)(v153 + v203);
      v205 = &v154[v203];
      *v204 = *(_QWORD *)v205;
      v206 = *((_QWORD *)v205 + 1);
      v204[1] = v206;
      v207 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v353 + 56);
      swift_bridgeObjectRetain(v202);
      swift_bridgeObjectRetain(v206);
      v207(v153, 0, 1, v36);
      goto LABEL_142;
    }
LABEL_81:
    v162 = sub_100005150(&qword_100081030);
    memcpy((void *)v153, v154, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_142;
  }
  if (v156)
  {
    sub_10000EF80(v153, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_81;
  }
  v163 = v22;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  v164 = *((_QWORD *)v154 + 1);
  v165 = *(_QWORD *)(v153 + 8);
  *(_QWORD *)(v153 + 8) = v164;
  swift_bridgeObjectRetain(v164);
  swift_bridgeObjectRelease(v165);
  v166 = (__int128 *)(v153 + 16);
  v167 = (__int128 *)(v154 + 16);
  v168 = v154[32];
  if (*(unsigned __int8 *)(v153 + 32) == 255)
  {
    if (v168 == 255)
    {
      v211 = *v167;
      *(_BYTE *)(v153 + 32) = v154[32];
      *v166 = v211;
    }
    else
    {
      v208 = *((_QWORD *)v154 + 2);
      v209 = *((_QWORD *)v154 + 3);
      sub_100005190(v208, v209, v154[32]);
      *(_QWORD *)(v153 + 16) = v208;
      *(_QWORD *)(v153 + 24) = v209;
      *(_BYTE *)(v153 + 32) = v168;
    }
  }
  else if (v168 == 255)
  {
    sub_100007770(v153 + 16);
    v210 = v154[32];
    *v166 = *v167;
    *(_BYTE *)(v153 + 32) = v210;
  }
  else
  {
    v169 = *((_QWORD *)v154 + 2);
    v170 = *((_QWORD *)v154 + 3);
    sub_100005190(v169, v170, v154[32]);
    v171 = *(_QWORD *)(v153 + 16);
    v172 = *(_QWORD *)(v153 + 24);
    *(_QWORD *)(v153 + 16) = v169;
    *(_QWORD *)(v153 + 24) = v170;
    v173 = *(_BYTE *)(v153 + 32);
    *(_BYTE *)(v153 + 32) = v168;
    sub_100005624(v171, v172, v173);
  }
  *(_QWORD *)(v153 + 40) = *((_QWORD *)v154 + 5);
  *(_QWORD *)(v153 + 48) = *((_QWORD *)v154 + 6);
  v212 = (void **)(v153 + 56);
  v213 = (void **)(v154 + 56);
  v214 = v154[64];
  if (*(unsigned __int8 *)(v153 + 64) == 255)
  {
    if (v214 == 255)
    {
      v220 = *v213;
      *(_BYTE *)(v153 + 64) = v154[64];
      *v212 = v220;
    }
    else
    {
      v218 = *v213;
      sub_1000051A8(v218, v154[64]);
      *(_QWORD *)(v153 + 56) = v218;
      *(_BYTE *)(v153 + 64) = v214;
    }
  }
  else if (v214 == 255)
  {
    sub_1000077A4(v153 + 56);
    v219 = v154[64];
    *v212 = *v213;
    *(_BYTE *)(v153 + 64) = v219;
  }
  else
  {
    v215 = *v213;
    sub_1000051A8(v215, v154[64]);
    v216 = *(void **)(v153 + 56);
    *(_QWORD *)(v153 + 56) = v215;
    v217 = *(_BYTE *)(v153 + 64);
    *(_BYTE *)(v153 + 64) = v214;
    sub_10000563C(v216, v217);
  }
  v221 = (void **)(v153 + 72);
  v222 = (void **)(v154 + 72);
  v223 = v154[80];
  if (*(unsigned __int8 *)(v153 + 80) == 255)
  {
    if (v223 == 255)
    {
      v229 = *v222;
      *(_BYTE *)(v153 + 80) = v154[80];
      *v221 = v229;
    }
    else
    {
      v227 = *v222;
      sub_1000051A8(v227, v154[80]);
      *(_QWORD *)(v153 + 72) = v227;
      *(_BYTE *)(v153 + 80) = v223;
    }
  }
  else if (v223 == 255)
  {
    sub_1000077A4(v153 + 72);
    v228 = v154[80];
    *v221 = *v222;
    *(_BYTE *)(v153 + 80) = v228;
  }
  else
  {
    v224 = *v222;
    sub_1000051A8(v224, v154[80]);
    v225 = *(void **)(v153 + 72);
    *(_QWORD *)(v153 + 72) = v224;
    v226 = *(_BYTE *)(v153 + 80);
    *(_BYTE *)(v153 + 80) = v223;
    sub_10000563C(v225, v226);
  }
  v230 = (void **)(v153 + 88);
  v231 = (void **)(v154 + 88);
  v232 = v154[96];
  if (*(unsigned __int8 *)(v153 + 96) == 255)
  {
    if (v232 == 255)
    {
      v238 = *v231;
      *(_BYTE *)(v153 + 96) = v154[96];
      *v230 = v238;
    }
    else
    {
      v236 = *v231;
      sub_1000051A8(v236, v154[96]);
      *(_QWORD *)(v153 + 88) = v236;
      *(_BYTE *)(v153 + 96) = v232;
    }
  }
  else if (v232 == 255)
  {
    sub_1000077A4(v153 + 88);
    v237 = v154[96];
    *v230 = *v231;
    *(_BYTE *)(v153 + 96) = v237;
  }
  else
  {
    v233 = *v231;
    sub_1000051A8(v233, v154[96]);
    v234 = *(void **)(v153 + 88);
    *(_QWORD *)(v153 + 88) = v233;
    v235 = *(_BYTE *)(v153 + 96);
    *(_BYTE *)(v153 + 96) = v232;
    sub_10000563C(v234, v235);
  }
  v239 = (void **)(v153 + 104);
  v240 = (void **)(v154 + 104);
  v241 = v154[112];
  if (*(unsigned __int8 *)(v153 + 112) == 255)
  {
    if (v241 == 255)
    {
      v247 = *v240;
      *(_BYTE *)(v153 + 112) = v154[112];
      *v239 = v247;
    }
    else
    {
      v245 = *v240;
      sub_1000051A8(v245, v154[112]);
      *(_QWORD *)(v153 + 104) = v245;
      *(_BYTE *)(v153 + 112) = v241;
    }
  }
  else if (v241 == 255)
  {
    sub_1000077A4(v153 + 104);
    v246 = v154[112];
    *v239 = *v240;
    *(_BYTE *)(v153 + 112) = v246;
  }
  else
  {
    v242 = *v240;
    sub_1000051A8(v242, v154[112]);
    v243 = *(void **)(v153 + 104);
    *(_QWORD *)(v153 + 104) = v242;
    v244 = *(_BYTE *)(v153 + 112);
    *(_BYTE *)(v153 + 112) = v241;
    sub_10000563C(v243, v244);
  }
  v248 = (void **)(v153 + 120);
  v249 = (void **)(v154 + 120);
  v250 = v154[128];
  if (*(unsigned __int8 *)(v153 + 128) == 255)
  {
    if (v250 == 255)
    {
      v256 = *v249;
      *(_BYTE *)(v153 + 128) = v154[128];
      *v248 = v256;
    }
    else
    {
      v254 = *v249;
      sub_1000051A8(v254, v154[128]);
      *(_QWORD *)(v153 + 120) = v254;
      *(_BYTE *)(v153 + 128) = v250;
    }
  }
  else if (v250 == 255)
  {
    sub_1000077A4(v153 + 120);
    v255 = v154[128];
    *v248 = *v249;
    *(_BYTE *)(v153 + 128) = v255;
  }
  else
  {
    v251 = *v249;
    sub_1000051A8(v251, v154[128]);
    v252 = *(void **)(v153 + 120);
    *(_QWORD *)(v153 + 120) = v251;
    v253 = *(_BYTE *)(v153 + 128);
    *(_BYTE *)(v153 + 128) = v250;
    sub_10000563C(v252, v253);
  }
  v22 = v163;
  *(_BYTE *)(v153 + 129) = v154[129];
  v257 = v36[11];
  v258 = v153 + v257;
  v259 = &v154[v257];
  v260 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v260 - 8) + 24))(v258, v259, v260);
  v261 = v36[12];
  v262 = (_QWORD *)(v153 + v261);
  v263 = &v154[v261];
  *v262 = *(_QWORD *)v263;
  v264 = *((_QWORD *)v263 + 1);
  v265 = v262[1];
  v262[1] = v264;
  swift_bridgeObjectRetain(v264);
  swift_bridgeObjectRelease(v265);
  *(_BYTE *)(v153 + v36[13]) = v154[v36[13]];
  *(_BYTE *)(v153 + v36[14]) = v154[v36[14]];
  *(_BYTE *)(v153 + v36[15]) = v154[v36[15]];
  v266 = v36[16];
  v267 = (_QWORD *)(v153 + v266);
  v268 = &v154[v266];
  *v267 = *(_QWORD *)v268;
  v269 = *((_QWORD *)v268 + 1);
  v270 = v267[1];
  v267[1] = v269;
  swift_bridgeObjectRetain(v269);
  swift_bridgeObjectRelease(v270);
LABEL_142:
  v271 = v18[14];
  v272 = *(void **)((char *)a1 + v271);
  v273 = *(void **)((char *)a2 + v271);
  *(_QWORD *)((char *)a1 + v271) = v273;
  v274 = v273;

  v275 = v18[15];
  v276 = (char *)a1 + v275;
  v277 = (char *)a2 + v275;
  v278 = type metadata accessor for URL(0);
  v279 = *(_QWORD *)(v278 - 8);
  v280 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v279 + 48);
  LODWORD(v272) = v280(v276, 1, v278);
  v281 = v280(v277, 1, v278);
  if ((_DWORD)v272)
  {
    if (!v281)
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v281)
  {
    (*(void (**)(char *, uint64_t))(v279 + 8))(v276, v278);
LABEL_147:
    v282 = sub_100005150(&qword_100081038);
    memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v282 - 8) + 64));
    goto LABEL_148;
  }
  (*(void (**)(char *, char *, uint64_t))(v279 + 24))(v276, v277, v278);
LABEL_148:
  *((_BYTE *)a1 + v18[16]) = *((_BYTE *)a2 + v18[16]);
  v283 = v18[17];
  v284 = (char *)a1 + v283;
  v285 = (char *)a2 + v283;
  v286 = *(_QWORD *)v285;
  v284[8] = v285[8];
  *(_QWORD *)v284 = v286;
  v287 = v18[18];
  v288 = (char *)a1 + v287;
  v289 = (char *)a2 + v287;
  v290 = *(_QWORD *)v289;
  v288[8] = v289[8];
  *(_QWORD *)v288 = v290;
  v291 = v18[19];
  v292 = (char *)a1 + v291;
  v293 = (char *)a2 + v291;
  v294 = v354((char *)a1 + v291, 1, v22);
  v295 = v354(v293, 1, v22);
  if (v294)
  {
    if (!v295)
    {
      (*(void (**)(char *, char *, uint64_t))(v355 + 16))(v292, v293, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v355 + 56))(v292, 0, 1, v22);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v295)
  {
    (*(void (**)(char *, uint64_t))(v355 + 8))(v292, v22);
LABEL_153:
    v296 = sub_100005150(&qword_100081028);
    memcpy(v292, v293, *(_QWORD *)(*(_QWORD *)(v296 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(char *, char *, uint64_t))(v355 + 24))(v292, v293, v22);
LABEL_154:
  v297 = v18[20];
  v298 = (char *)a1 + v297;
  v299 = (char *)a2 + v297;
  v300 = v354((char *)a1 + v297, 1, v22);
  v301 = v354(v299, 1, v22);
  if (v300)
  {
    if (!v301)
    {
      (*(void (**)(char *, char *, uint64_t))(v355 + 16))(v298, v299, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v355 + 56))(v298, 0, 1, v22);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v301)
  {
    (*(void (**)(char *, uint64_t))(v355 + 8))(v298, v22);
LABEL_159:
    v302 = sub_100005150(&qword_100081028);
    memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(char *, char *, uint64_t))(v355 + 24))(v298, v299, v22);
LABEL_160:
  v303 = v18[21];
  v304 = (_QWORD *)((char *)a1 + v303);
  v305 = (char *)a2 + v303;
  v306 = *(_QWORD *)((char *)a1 + v303);
  v307 = *(_QWORD *)((char *)a2 + v303);
  if (v306)
  {
    if (v307)
    {
      *v304 = v307;
      swift_retain(v307);
      swift_release(v306);
      v308 = *((_QWORD *)v305 + 1);
      v309 = v304[1];
      v304[1] = v308;
      swift_retain(v308);
      swift_release(v309);
      v310 = *((_QWORD *)v305 + 2);
      v311 = v304[2];
      v304[2] = v310;
      swift_retain(v310);
      swift_release(v311);
    }
    else
    {
      sub_100007814((_QWORD *)((char *)a1 + v303));
      v314 = *((_QWORD *)v305 + 2);
      *(_OWORD *)v304 = *(_OWORD *)v305;
      v304[2] = v314;
    }
  }
  else if (v307)
  {
    *v304 = v307;
    v312 = *((_QWORD *)v305 + 1);
    v304[1] = v312;
    v313 = *((_QWORD *)v305 + 2);
    v304[2] = v313;
    swift_retain(v307);
    swift_retain(v312);
    swift_retain(v313);
  }
  else
  {
    v315 = *(_OWORD *)v305;
    v304[2] = *((_QWORD *)v305 + 2);
    *(_OWORD *)v304 = v315;
  }
  v316 = v18[22];
  v317 = (char *)a1 + v316;
  v318 = (char *)a2 + v316;
  v319 = sub_100005150(&qword_100081040);
  v320 = *(_QWORD *)(v319 - 8);
  v321 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v320 + 48);
  v322 = v321(v317, 1, v319);
  v323 = v321(v318, 1, v319);
  v357 = a2;
  if (v322)
  {
    if (!v323)
    {
      v324 = *(void (**)(char *, char *, uint64_t))(v355 + 16);
      v324(v317, v318, v22);
      v324(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v317, 0, 1, v319);
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (v323)
  {
    sub_10000F008((uint64_t)v317, &qword_100081040);
LABEL_175:
    v325 = sub_100005150(&qword_100081048);
    memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v325 - 8) + 64));
    goto LABEL_176;
  }
  v350 = *(void (**)(char *, char *, uint64_t))(v355 + 24);
  v350(v317, v318, v22);
  v350(&v317[*(int *)(v319 + 36)], &v318[*(int *)(v319 + 36)], v22);
LABEL_176:
  v326 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v327 = v326[5];
  v328 = &v317[v327];
  v329 = &v318[v327];
  v330 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v330 - 8) + 24))(v328, v329, v330);
  v331 = v326[6];
  v332 = &v317[v331];
  v333 = &v318[v331];
  v334 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v335 = *(_QWORD *)(v334 - 8);
  v336 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v335 + 48);
  LODWORD(v328) = v336(v332, 1, v334);
  v337 = v336(v333, 1, v334);
  if (!(_DWORD)v328)
  {
    if (!v337)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 24))(v332, v333, v334);
      goto LABEL_182;
    }
    (*(void (**)(char *, uint64_t))(v335 + 8))(v332, v334);
    goto LABEL_181;
  }
  if (v337)
  {
LABEL_181:
    v338 = sub_100005150(&qword_100081050);
    memcpy(v332, v333, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
    goto LABEL_182;
  }
  (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v332, v333, v334);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v332, 0, 1, v334);
LABEL_182:
  v339 = v326[7];
  v340 = &v317[v339];
  v341 = &v318[v339];
  *(_QWORD *)v340 = *(_QWORD *)v341;
  v342 = *((_QWORD *)v341 + 1);
  v343 = *((_QWORD *)v340 + 1);
  *((_QWORD *)v340 + 1) = v342;
  swift_bridgeObjectRetain(v342);
  swift_bridgeObjectRelease(v343);
  v344 = v326[8];
  v345 = &v317[v344];
  v346 = &v318[v344];
  *(_QWORD *)v345 = *(_QWORD *)v346;
  v347 = *((_QWORD *)v346 + 1);
  v348 = *((_QWORD *)v345 + 1);
  *((_QWORD *)v345 + 1) = v347;
  swift_bridgeObjectRetain(v347);
  swift_bridgeObjectRelease(v348);
  *(_QWORD *)((char *)a1 + v356[5]) = *(_QWORD *)((char *)v357 + v356[5]);
  *(_QWORD *)((char *)a1 + v356[6]) = *(_QWORD *)((char *)v357 + v356[6]);
  *(_QWORD *)((char *)a1 + v356[7]) = *(_QWORD *)((char *)v357 + v356[7]);
  *(_QWORD *)((char *)a1 + v356[8]) = *(_QWORD *)((char *)v357 + v356[8]);
  *(_QWORD *)((char *)a1 + v356[9]) = *(_QWORD *)((char *)v357 + v356[9]);
  *(_QWORD *)((char *)a1 + v356[10]) = *(_QWORD *)((char *)v357 + v356[10]);
  return a1;
}

uint64_t sub_10005BE3C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(_OWORD *, uint64_t, int *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(const void *, uint64_t);
  uint64_t v90;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v8 = v7[10];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v89 = *(unsigned int (**)(const void *, uint64_t))(v12 + 48);
  v90 = v11;
  if (v89(v10, 1))
  {
    v13 = sub_100005150(&qword_100081028);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v90);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v90);
  }
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  v14 = v7[12];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = (int *)type metadata accessor for ArtworkModel(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
  v88 = v18;
  if (v19(v16, 1, v17))
  {
    v20 = sub_100005150(&qword_100081030);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v16[1];
    *v15 = *v16;
    v15[1] = v21;
    *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
    *(_OWORD *)((char *)v15 + 40) = *(_OWORD *)((char *)v16 + 40);
    *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
    *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
    *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
    *(_OWORD *)((char *)v15 + 104) = *(_OWORD *)((char *)v16 + 104);
    *(_OWORD *)((char *)v15 + 88) = *(_OWORD *)((char *)v16 + 88);
    *(_OWORD *)((char *)v15 + 72) = *(_OWORD *)((char *)v16 + 72);
    *((_BYTE *)v15 + 129) = *((_BYTE *)v16 + 129);
    v22 = v17[11];
    v86 = a3;
    v87 = v12;
    v23 = (char *)v15 + v22;
    v24 = (char *)v16 + v22;
    v25 = type metadata accessor for ArtworkCrop(0);
    v26 = v23;
    v27 = v24;
    a3 = v86;
    v12 = v87;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v26, v27, v25);
    *(_OWORD *)((char *)v15 + v17[12]) = *(_OWORD *)((char *)v16 + v17[12]);
    *((_BYTE *)v15 + v17[13]) = *((_BYTE *)v16 + v17[13]);
    *((_BYTE *)v15 + v17[14]) = *((_BYTE *)v16 + v17[14]);
    *((_BYTE *)v15 + v17[15]) = *((_BYTE *)v16 + v17[15]);
    *(_OWORD *)((char *)v15 + v17[16]) = *(_OWORD *)((char *)v16 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v28 = v7[13];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  if (v19((_OWORD *)(a2 + v28), 1, v17))
  {
    v31 = sub_100005150(&qword_100081030);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    *(_OWORD *)((char *)v29 + 40) = *(_OWORD *)((char *)v30 + 40);
    *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
    *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
    *(_OWORD *)((char *)v29 + 113) = *(_OWORD *)((char *)v30 + 113);
    *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v30 + 104);
    *(_OWORD *)((char *)v29 + 88) = *(_OWORD *)((char *)v30 + 88);
    *(_OWORD *)((char *)v29 + 72) = *(_OWORD *)((char *)v30 + 72);
    *((_BYTE *)v29 + 129) = *((_BYTE *)v30 + 129);
    v33 = v17[11];
    v34 = v12;
    v35 = (char *)v29 + v33;
    v36 = a3;
    v37 = (char *)v30 + v33;
    v38 = type metadata accessor for ArtworkCrop(0);
    v39 = v35;
    v12 = v34;
    v40 = v37;
    a3 = v36;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v39, v40, v38);
    *(_OWORD *)((char *)v29 + v17[12]) = *(_OWORD *)((char *)v30 + v17[12]);
    *((_BYTE *)v29 + v17[13]) = *((_BYTE *)v30 + v17[13]);
    *((_BYTE *)v29 + v17[14]) = *((_BYTE *)v30 + v17[14]);
    *((_BYTE *)v29 + v17[15]) = *((_BYTE *)v30 + v17[15]);
    *(_OWORD *)((char *)v29 + v17[16]) = *(_OWORD *)((char *)v30 + v17[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v88 + 56))(v29, 0, 1, v17);
  }
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v41 = v7[15];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = sub_100005150(&qword_100081038);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  *(_BYTE *)(a1 + v7[16]) = *(_BYTE *)(a2 + v7[16]);
  v47 = v7[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  v50 = v7[18];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = v7[19];
  v54 = (void *)(a1 + v53);
  v55 = (const void *)(a2 + v53);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v89)(a2 + v53, 1, v90))
  {
    v56 = sub_100005150(&qword_100081028);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v54, v55, v90);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v54, 0, 1, v90);
  }
  v57 = v7[20];
  v58 = (void *)(a1 + v57);
  v59 = (const void *)(a2 + v57);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v89)(a2 + v57, 1, v90))
  {
    v60 = sub_100005150(&qword_100081028);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v58, v59, v90);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v58, 0, 1, v90);
  }
  v61 = v7[21];
  v62 = a1 + v61;
  v63 = a2 + v61;
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  v64 = v7[22];
  v65 = (char *)(a1 + v64);
  v66 = (char *)(a2 + v64);
  v67 = sub_100005150(&qword_100081040);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    v69 = sub_100005150(&qword_100081048);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v70 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v70(v65, v66, v90);
    v70(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v90);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v71 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v72 = v71[5];
  v73 = &v65[v72];
  v74 = &v66[v72];
  v75 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v71[6];
  v77 = &v65[v76];
  v78 = &v66[v76];
  v79 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_100005150(&qword_100081050);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  *(_OWORD *)&v65[v71[7]] = *(_OWORD *)&v66[v71[7]];
  *(_OWORD *)&v65[v71[8]] = *(_OWORD *)&v66[v71[8]];
  v82 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v82) = *(_QWORD *)(a2 + v82);
  v83 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v83) = *(_QWORD *)(a2 + v83);
  v84 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v84) = *(_QWORD *)(a2 + v84);
  return a1;
}

_QWORD *sub_10005C538(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  int v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _OWORD *v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(char *, char *, uint64_t);
  _QWORD *v149;
  int v150;
  int v151;
  void *v152;
  _QWORD *v153;
  int v154;
  int v155;
  void *v156;
  _QWORD *v157;
  int v158;
  int v159;
  void *v160;
  _QWORD *v161;
  int v162;
  int v163;
  void *v164;
  _QWORD *v165;
  int v166;
  int v167;
  void *v168;
  _QWORD *v169;
  int v170;
  int v171;
  void *v172;
  _QWORD *v173;
  int v174;
  int v175;
  void *v176;
  _QWORD *v177;
  int v178;
  int v179;
  void *v180;
  _QWORD *v181;
  int v182;
  int v183;
  void *v184;
  _QWORD *v185;
  int v186;
  int v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t (*v222)(char *, uint64_t, uint64_t);
  int *v223;
  uint64_t v224;
  _QWORD *v225;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a1[6];
  a1[6] = a2[6];
  swift_release(v12);
  v13 = a2[8];
  v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = a2[10];
  v16 = a1[10];
  a1[9] = a2[9];
  a1[10] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v18 = v17[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  v222 = v23;
  v223 = a3;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    v26 = sub_100005150(&qword_100081028);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[11];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v17[12];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v221 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v221 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37((uint64_t)v35, 1, v36);
  v224 = v22;
  if (v38)
  {
    if (!v39)
    {
      v40 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_OWORD *)(v34 + 16) = v40;
      *(_BYTE *)(v34 + 32) = v35[32];
      *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
      *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
      *(_BYTE *)(v34 + 64) = v35[64];
      *(_OWORD *)(v34 + 113) = *(_OWORD *)(v35 + 113);
      *(_OWORD *)(v34 + 104) = *(_OWORD *)(v35 + 104);
      *(_OWORD *)(v34 + 88) = *(_OWORD *)(v35 + 88);
      *(_OWORD *)(v34 + 72) = *(_OWORD *)(v35 + 72);
      *(_BYTE *)(v34 + 129) = v35[129];
      v41 = v36[11];
      v42 = v34 + v41;
      v43 = &v35[v41];
      v44 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      *(_OWORD *)(v34 + v36[12]) = *(_OWORD *)&v35[v36[12]];
      *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
      *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
      *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
      *(_OWORD *)(v34 + v36[16]) = *(_OWORD *)&v35[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v221 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    sub_10000EF80(v34, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_12:
    v45 = sub_100005150(&qword_100081030);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  v134 = *((_QWORD *)v35 + 1);
  v135 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v134;
  swift_bridgeObjectRelease(v135);
  v136 = v35 + 16;
  v137 = *(unsigned __int8 *)(v34 + 32);
  if (v137 != 255)
  {
    v138 = v35[32];
    if (v138 != 255)
    {
      v139 = *(_QWORD *)(v34 + 16);
      v140 = *(_QWORD *)(v34 + 24);
      *(_OWORD *)(v34 + 16) = *v136;
      *(_BYTE *)(v34 + 32) = v138;
      sub_100005624(v139, v140, v137);
      goto LABEL_69;
    }
    sub_100007770(v34 + 16);
  }
  *(_OWORD *)(v34 + 16) = *v136;
  *(_BYTE *)(v34 + 32) = v35[32];
LABEL_69:
  *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
  v149 = v35 + 56;
  v150 = *(unsigned __int8 *)(v34 + 64);
  if (v150 != 255)
  {
    v151 = v35[64];
    if (v151 != 255)
    {
      v152 = *(void **)(v34 + 56);
      *(_QWORD *)(v34 + 56) = *v149;
      *(_BYTE *)(v34 + 64) = v151;
      sub_10000563C(v152, v150);
      goto LABEL_79;
    }
    sub_1000077A4(v34 + 56);
  }
  *(_QWORD *)(v34 + 56) = *v149;
  *(_BYTE *)(v34 + 64) = v35[64];
LABEL_79:
  v157 = v35 + 72;
  v158 = *(unsigned __int8 *)(v34 + 80);
  if (v158 != 255)
  {
    v159 = v35[80];
    if (v159 != 255)
    {
      v160 = *(void **)(v34 + 72);
      *(_QWORD *)(v34 + 72) = *v157;
      *(_BYTE *)(v34 + 80) = v159;
      sub_10000563C(v160, v158);
      goto LABEL_89;
    }
    sub_1000077A4(v34 + 72);
  }
  *(_QWORD *)(v34 + 72) = *v157;
  *(_BYTE *)(v34 + 80) = v35[80];
LABEL_89:
  v165 = v35 + 88;
  v166 = *(unsigned __int8 *)(v34 + 96);
  if (v166 != 255)
  {
    v167 = v35[96];
    if (v167 != 255)
    {
      v168 = *(void **)(v34 + 88);
      *(_QWORD *)(v34 + 88) = *v165;
      *(_BYTE *)(v34 + 96) = v167;
      sub_10000563C(v168, v166);
      goto LABEL_99;
    }
    sub_1000077A4(v34 + 88);
  }
  *(_QWORD *)(v34 + 88) = *v165;
  *(_BYTE *)(v34 + 96) = v35[96];
LABEL_99:
  v173 = v35 + 104;
  v174 = *(unsigned __int8 *)(v34 + 112);
  if (v174 != 255)
  {
    v175 = v35[112];
    if (v175 != 255)
    {
      v176 = *(void **)(v34 + 104);
      *(_QWORD *)(v34 + 104) = *v173;
      *(_BYTE *)(v34 + 112) = v175;
      sub_10000563C(v176, v174);
      goto LABEL_109;
    }
    sub_1000077A4(v34 + 104);
  }
  *(_QWORD *)(v34 + 104) = *v173;
  *(_BYTE *)(v34 + 112) = v35[112];
LABEL_109:
  v181 = v35 + 120;
  v182 = *(unsigned __int8 *)(v34 + 128);
  if (v182 == 255)
  {
LABEL_118:
    *(_QWORD *)(v34 + 120) = *v181;
    *(_BYTE *)(v34 + 128) = v35[128];
    goto LABEL_119;
  }
  v183 = v35[128];
  if (v183 == 255)
  {
    sub_1000077A4(v34 + 120);
    goto LABEL_118;
  }
  v184 = *(void **)(v34 + 120);
  *(_QWORD *)(v34 + 120) = *v181;
  *(_BYTE *)(v34 + 128) = v183;
  sub_10000563C(v184, v182);
LABEL_119:
  *(_BYTE *)(v34 + 129) = v35[129];
  v189 = v36[11];
  v190 = v34 + v189;
  v191 = &v35[v189];
  v192 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 40))(v190, v191, v192);
  v193 = v36[12];
  v194 = (_QWORD *)(v34 + v193);
  v195 = &v35[v193];
  v197 = *(_QWORD *)v195;
  v196 = *((_QWORD *)v195 + 1);
  v198 = v194[1];
  *v194 = v197;
  v194[1] = v196;
  swift_bridgeObjectRelease(v198);
  *(_BYTE *)(v34 + v36[13]) = v35[v36[13]];
  *(_BYTE *)(v34 + v36[14]) = v35[v36[14]];
  *(_BYTE *)(v34 + v36[15]) = v35[v36[15]];
  v199 = v36[16];
  v200 = (_QWORD *)(v34 + v199);
  v201 = &v35[v199];
  v203 = *(_QWORD *)v201;
  v202 = *((_QWORD *)v201 + 1);
  v204 = v200[1];
  *v200 = v203;
  v200[1] = v202;
  swift_bridgeObjectRelease(v204);
LABEL_13:
  v46 = v17[13];
  v47 = (uint64_t)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = v37((uint64_t)a1 + v46, 1, v36);
  v50 = v37((uint64_t)v48, 1, v36);
  if (v49)
  {
    if (!v50)
    {
      v51 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v51;
      *(_BYTE *)(v47 + 32) = v48[32];
      *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
      *(_QWORD *)(v47 + 56) = *((_QWORD *)v48 + 7);
      *(_BYTE *)(v47 + 64) = v48[64];
      *(_OWORD *)(v47 + 113) = *(_OWORD *)(v48 + 113);
      *(_OWORD *)(v47 + 104) = *(_OWORD *)(v48 + 104);
      *(_OWORD *)(v47 + 88) = *(_OWORD *)(v48 + 88);
      *(_OWORD *)(v47 + 72) = *(_OWORD *)(v48 + 72);
      *(_BYTE *)(v47 + 129) = v48[129];
      v52 = v36[11];
      v53 = v47 + v52;
      v54 = &v48[v52];
      v55 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
      *(_OWORD *)(v47 + v36[12]) = *(_OWORD *)&v48[v36[12]];
      *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
      *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
      *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
      *(_OWORD *)(v47 + v36[16]) = *(_OWORD *)&v48[v36[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v221 + 56))(v47, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    sub_10000EF80(v47, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_18:
    v56 = sub_100005150(&qword_100081030);
    memcpy((void *)v47, v48, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_19;
  }
  v141 = *((_QWORD *)v48 + 1);
  v142 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v47 + 8) = v141;
  swift_bridgeObjectRelease(v142);
  v143 = v48 + 16;
  v144 = *(unsigned __int8 *)(v47 + 32);
  if (v144 != 255)
  {
    v145 = v48[32];
    if (v145 != 255)
    {
      v146 = *(_QWORD *)(v47 + 16);
      v147 = *(_QWORD *)(v47 + 24);
      *(_OWORD *)(v47 + 16) = *v143;
      *(_BYTE *)(v47 + 32) = v145;
      sub_100005624(v146, v147, v144);
      goto LABEL_74;
    }
    sub_100007770(v47 + 16);
  }
  *(_OWORD *)(v47 + 16) = *v143;
  *(_BYTE *)(v47 + 32) = v48[32];
LABEL_74:
  *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
  v153 = v48 + 56;
  v154 = *(unsigned __int8 *)(v47 + 64);
  if (v154 != 255)
  {
    v155 = v48[64];
    if (v155 != 255)
    {
      v156 = *(void **)(v47 + 56);
      *(_QWORD *)(v47 + 56) = *v153;
      *(_BYTE *)(v47 + 64) = v155;
      sub_10000563C(v156, v154);
      goto LABEL_84;
    }
    sub_1000077A4(v47 + 56);
  }
  *(_QWORD *)(v47 + 56) = *v153;
  *(_BYTE *)(v47 + 64) = v48[64];
LABEL_84:
  v161 = v48 + 72;
  v162 = *(unsigned __int8 *)(v47 + 80);
  if (v162 != 255)
  {
    v163 = v48[80];
    if (v163 != 255)
    {
      v164 = *(void **)(v47 + 72);
      *(_QWORD *)(v47 + 72) = *v161;
      *(_BYTE *)(v47 + 80) = v163;
      sub_10000563C(v164, v162);
      goto LABEL_94;
    }
    sub_1000077A4(v47 + 72);
  }
  *(_QWORD *)(v47 + 72) = *v161;
  *(_BYTE *)(v47 + 80) = v48[80];
LABEL_94:
  v169 = v48 + 88;
  v170 = *(unsigned __int8 *)(v47 + 96);
  if (v170 != 255)
  {
    v171 = v48[96];
    if (v171 != 255)
    {
      v172 = *(void **)(v47 + 88);
      *(_QWORD *)(v47 + 88) = *v169;
      *(_BYTE *)(v47 + 96) = v171;
      sub_10000563C(v172, v170);
      goto LABEL_104;
    }
    sub_1000077A4(v47 + 88);
  }
  *(_QWORD *)(v47 + 88) = *v169;
  *(_BYTE *)(v47 + 96) = v48[96];
LABEL_104:
  v177 = v48 + 104;
  v178 = *(unsigned __int8 *)(v47 + 112);
  if (v178 != 255)
  {
    v179 = v48[112];
    if (v179 != 255)
    {
      v180 = *(void **)(v47 + 104);
      *(_QWORD *)(v47 + 104) = *v177;
      *(_BYTE *)(v47 + 112) = v179;
      sub_10000563C(v180, v178);
      goto LABEL_114;
    }
    sub_1000077A4(v47 + 104);
  }
  *(_QWORD *)(v47 + 104) = *v177;
  *(_BYTE *)(v47 + 112) = v48[112];
LABEL_114:
  v185 = v48 + 120;
  v186 = *(unsigned __int8 *)(v47 + 128);
  if (v186 == 255)
  {
LABEL_121:
    *(_QWORD *)(v47 + 120) = *v185;
    *(_BYTE *)(v47 + 128) = v48[128];
    goto LABEL_122;
  }
  v187 = v48[128];
  if (v187 == 255)
  {
    sub_1000077A4(v47 + 120);
    goto LABEL_121;
  }
  v188 = *(void **)(v47 + 120);
  *(_QWORD *)(v47 + 120) = *v185;
  *(_BYTE *)(v47 + 128) = v187;
  sub_10000563C(v188, v186);
LABEL_122:
  *(_BYTE *)(v47 + 129) = v48[129];
  v205 = v36[11];
  v206 = v47 + v205;
  v207 = &v48[v205];
  v208 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 40))(v206, v207, v208);
  v209 = v36[12];
  v210 = (_QWORD *)(v47 + v209);
  v211 = &v48[v209];
  v213 = *(_QWORD *)v211;
  v212 = *((_QWORD *)v211 + 1);
  v214 = v210[1];
  *v210 = v213;
  v210[1] = v212;
  swift_bridgeObjectRelease(v214);
  *(_BYTE *)(v47 + v36[13]) = v48[v36[13]];
  *(_BYTE *)(v47 + v36[14]) = v48[v36[14]];
  *(_BYTE *)(v47 + v36[15]) = v48[v36[15]];
  v215 = v36[16];
  v216 = (_QWORD *)(v47 + v215);
  v217 = &v48[v215];
  v219 = *(_QWORD *)v217;
  v218 = *((_QWORD *)v217 + 1);
  v220 = v216[1];
  *v216 = v219;
  v216[1] = v218;
  swift_bridgeObjectRelease(v220);
LABEL_19:
  v57 = v17[14];
  v58 = *(void **)((char *)a1 + v57);
  *(_QWORD *)((char *)a1 + v57) = *(_QWORD *)((char *)a2 + v57);

  v59 = v17[15];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    v67 = v224;
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v67 = v224;
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
LABEL_24:
    v68 = sub_100005150(&qword_100081038);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v60, v61, v62);
LABEL_25:
  *((_BYTE *)a1 + v17[16]) = *((_BYTE *)a2 + v17[16]);
  v69 = v17[17];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  v72 = v17[18];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v17[19];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = v222((char *)a1 + v75, 1, v21);
  v79 = v222(v77, 1, v21);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v76, v77, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v76, 0, 1, v21);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v76, v21);
LABEL_30:
    v80 = sub_100005150(&qword_100081028);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v76, v77, v21);
LABEL_31:
  v81 = v17[20];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = v222((char *)a1 + v81, 1, v21);
  v85 = v222(v83, 1, v21);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v82, v83, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v82, 0, 1, v21);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v82, v21);
LABEL_36:
    v86 = sub_100005150(&qword_100081028);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v82, v83, v21);
LABEL_37:
  v87 = v17[21];
  v88 = (_QWORD *)((char *)a1 + v87);
  v89 = (_QWORD *)((char *)a2 + v87);
  v90 = *(_QWORD *)((char *)a1 + v87);
  if (v90)
  {
    if (*v89)
    {
      *v88 = *v89;
      swift_release(v90);
      v91 = v88[1];
      v88[1] = v89[1];
      swift_release(v91);
      v92 = v88[2];
      v88[2] = v89[2];
      swift_release(v92);
      goto LABEL_42;
    }
    sub_100007814(v88);
  }
  *(_OWORD *)v88 = *(_OWORD *)v89;
  v88[2] = v89[2];
LABEL_42:
  v93 = v17[22];
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  v96 = sub_100005150(&qword_100081040);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  v225 = a2;
  if (v99)
  {
    if (!v100)
    {
      v101 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v101(v94, v95, v21);
      v101(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v100)
  {
    sub_10000F008((uint64_t)v94, &qword_100081040);
LABEL_47:
    v102 = sub_100005150(&qword_100081048);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_48;
  }
  v148 = *(void (**)(char *, char *, uint64_t))(v67 + 40);
  v148(v94, v95, v21);
  v148(&v94[*(int *)(v96 + 36)], &v95[*(int *)(v96 + 36)], v21);
LABEL_48:
  v103 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v104 = v103[5];
  v105 = &v94[v104];
  v106 = &v95[v104];
  v107 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 40))(v105, v106, v107);
  v108 = v103[6];
  v109 = &v94[v108];
  v110 = &v95[v108];
  v111 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  v114 = v113(v109, 1, v111);
  v115 = v113(v110, 1, v111);
  if (!v114)
  {
    v116 = v225;
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 40))(v109, v110, v111);
      goto LABEL_54;
    }
    (*(void (**)(char *, uint64_t))(v112 + 8))(v109, v111);
    goto LABEL_53;
  }
  v116 = v225;
  if (v115)
  {
LABEL_53:
    v117 = sub_100005150(&qword_100081050);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v109, v110, v111);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
LABEL_54:
  v118 = v103[7];
  v119 = &v94[v118];
  v120 = &v95[v118];
  v122 = *(_QWORD *)v120;
  v121 = *((_QWORD *)v120 + 1);
  v123 = *((_QWORD *)v119 + 1);
  *(_QWORD *)v119 = v122;
  *((_QWORD *)v119 + 1) = v121;
  swift_bridgeObjectRelease(v123);
  v124 = v103[8];
  v125 = &v94[v124];
  v126 = &v95[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  v130 = v223[6];
  *(_QWORD *)((char *)a1 + v223[5]) = *(_QWORD *)((char *)v116 + v223[5]);
  *(_QWORD *)((char *)a1 + v130) = *(_QWORD *)((char *)v116 + v130);
  v131 = v223[8];
  *(_QWORD *)((char *)a1 + v223[7]) = *(_QWORD *)((char *)v116 + v223[7]);
  *(_QWORD *)((char *)a1 + v131) = *(_QWORD *)((char *)v116 + v131);
  v132 = v223[10];
  *(_QWORD *)((char *)a1 + v223[9]) = *(_QWORD *)((char *)v116 + v223[9]);
  *(_QWORD *)((char *)a1 + v132) = *(_QWORD *)((char *)v116 + v132);
  return a1;
}

uint64_t sub_10005D404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005D410);
}

uint64_t sub_10005D414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UpNextEntry.Episode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10005D450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005D45C);
}

uint64_t sub_10005D460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UpNextEntry.Episode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10005D4A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UpNextEntry.Episode(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10005D524()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000829A8;
  if (!qword_1000829A8)
  {
    v1 = sub_10000950C(&qword_1000829B0);
    sub_10005D588();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000829A8);
  }
  return result;
}

unint64_t sub_10005D588()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  result = qword_1000829B8;
  if (!qword_1000829B8)
  {
    v1 = sub_10000950C(&qword_1000828E0);
    v2 = sub_10000950C(&qword_1000828D0);
    v5 = type metadata accessor for PlaybackButton(255);
    v6 = type metadata accessor for PillPlaybackButtonStyle(255, v3);
    v7 = sub_10000FBAC((unint64_t *)&qword_100081110, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackButton, (uint64_t)&protocol conformance descriptor for PlaybackButton);
    v8 = &protocol witness table for PillPlaybackButtonStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.playbackButtonStyle<A>(_:)>>, 1);
    v5 = v2;
    v6 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.playbackButtonProgress(_:)>>, 1);
    sub_100059160();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000829B8);
  }
  return result;
}

uint64_t sub_10005D684(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007213C, 1);
}

uint64_t sub_10005D694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t KeyPath;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  __n128 v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  _OWORD v108[7];

  v93 = a1;
  v107 = a2;
  v105 = type metadata accessor for PlayButtonStyling(0);
  __chkstk_darwin(v105);
  v106 = (uint64_t *)((char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v103 = sub_100005150(&qword_1000829C0);
  v4 = __chkstk_darwin(v103);
  v104 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Capsule(0, v4);
  __chkstk_darwin(v6);
  v98 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100005150(&qword_1000829C8);
  __chkstk_darwin(v97);
  v92 = (uint64_t)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_1000829D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_1000829D8);
  __chkstk_darwin(v12);
  v14 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005150(&qword_1000829E0);
  __chkstk_darwin(v15);
  v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100005150(&qword_1000829E8);
  __chkstk_darwin(v94);
  v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100005150(&qword_1000829F0);
  __chkstk_darwin(v95);
  v96 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100005150(&qword_1000829F8);
  __chkstk_darwin(v99);
  v102 = (uint64_t)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100005150(&qword_100082A00);
  __chkstk_darwin(v100);
  v101 = (uint64_t)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = static VerticalAlignment.center.getter(v23);
  v25 = (int *)type metadata accessor for PlayButtonLargeToggleStyle(0);
  v26 = *(_QWORD *)(v2 + v25[10]);
  *(_QWORD *)v11 = v24;
  *((_QWORD *)v11 + 1) = v26;
  v11[16] = 0;
  v27 = sub_100005150(&qword_100082A08);
  v28 = sub_10005DE4C(v2, (uint64_t)&v11[*(int *)(v27 + 44)]);
  v29 = static Edge.Set.leading.getter(v28);
  LOBYTE(v24) = v29;
  v30.n128_u64[0] = *(_QWORD *)(v2 + v25[8]);
  v31 = EdgeInsets.init(_all:)(v29, v30);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_10000EFC4((uint64_t)v11, (uint64_t)v14, &qword_1000829D0);
  v38 = &v14[*(int *)(v12 + 36)];
  *v38 = v24;
  *((double *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  v39 = sub_10000F008((uint64_t)v11, &qword_1000829D0);
  v40 = static Edge.Set.trailing.getter(v39);
  LOBYTE(v12) = v40;
  v41.n128_u64[0] = *(_QWORD *)(v2 + v25[9]);
  v42 = EdgeInsets.init(_all:)(v40, v41);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  sub_10000EFC4((uint64_t)v14, (uint64_t)v17, &qword_1000829D8);
  v49 = &v17[*(int *)(v15 + 36)];
  *v49 = v12;
  *((double *)v49 + 1) = v42;
  *((_QWORD *)v49 + 2) = v44;
  *((_QWORD *)v49 + 3) = v46;
  *((_QWORD *)v49 + 4) = v48;
  v49[40] = 0;
  v50 = sub_10000F008((uint64_t)v14, &qword_1000829D8);
  v51 = *(_QWORD *)(v2 + v25[5]);
  v52 = static Alignment.center.getter(v50);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v108, 0, 1, 0, 1, 0, 1, v51, 0, 0, 1, 0, 1, v52, v53);
  sub_10000EFC4((uint64_t)v17, (uint64_t)v19, &qword_1000829E0);
  v54 = &v19[*(int *)(v94 + 36)];
  v55 = v108[5];
  *((_OWORD *)v54 + 4) = v108[4];
  *((_OWORD *)v54 + 5) = v55;
  *((_OWORD *)v54 + 6) = v108[6];
  v56 = v108[1];
  *(_OWORD *)v54 = v108[0];
  *((_OWORD *)v54 + 1) = v56;
  v57 = v108[3];
  *((_OWORD *)v54 + 2) = v108[2];
  *((_OWORD *)v54 + 3) = v57;
  sub_10000F008((uint64_t)v17, &qword_1000829E0);
  v58 = enum case for RoundedCornerStyle.continuous(_:);
  v59 = type metadata accessor for RoundedCornerStyle(0);
  v60 = (uint64_t)v98;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v98, v58, v59);
  v61 = v92;
  sub_10000EF3C(v60, v92, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  *(_WORD *)(v61 + *(int *)(v97 + 56)) = 256;
  v62 = sub_10000EF80(v60, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  v63 = static Alignment.center.getter(v62);
  v65 = v64;
  v66 = (uint64_t)v96;
  v67 = (uint64_t)&v96[*(int *)(v95 + 36)];
  sub_10000EFC4(v61, v67, &qword_1000829C8);
  v68 = (uint64_t *)(v67 + *(int *)(sub_100005150(&qword_100082A10) + 36));
  *v68 = v63;
  v68[1] = v65;
  sub_10000EFC4((uint64_t)v19, v66, &qword_1000829E8);
  sub_10000F008(v61, &qword_1000829C8);
  sub_10000F008((uint64_t)v19, &qword_1000829E8);
  KeyPath = swift_getKeyPath(&unk_10006E9C8);
  v70 = (uint64_t)v106;
  *v106 = KeyPath;
  v71 = sub_100005150(&qword_1000814D8);
  swift_storeEnumTagMultiPayload(v70, v71, 0);
  v72 = v70 + *(int *)(v105 + 20);
  *(_QWORD *)v72 = swift_getKeyPath(&unk_10006E9F8);
  *(_BYTE *)(v72 + 8) = 0;
  v73 = (uint64_t)v104;
  sub_10005EE24(v70, (uint64_t)&v104[*(int *)(v103 + 36)]);
  sub_10000EEF8(v66, v73, &qword_1000829F0);
  if (qword_100080F88 != -1)
    swift_once(&qword_100080F88, sub_1000581E4);
  v74 = qword_100082818;
  v75 = static Edge.Set.all.getter();
  v76 = v75;
  v77.n128_u64[0] = v74;
  v78 = EdgeInsets.init(_all:)(v75, v77);
  v80 = v79;
  v82 = v81;
  v84 = v83;
  v85 = v102;
  sub_10000EFC4(v73, v102, &qword_1000829C0);
  v86 = v85 + *(int *)(v99 + 36);
  *(_BYTE *)v86 = v76;
  *(double *)(v86 + 8) = v78;
  *(_QWORD *)(v86 + 16) = v80;
  *(_QWORD *)(v86 + 24) = v82;
  *(_QWORD *)(v86 + 32) = v84;
  *(_BYTE *)(v86 + 40) = 0;
  sub_10000F008(v73, &qword_1000829C0);
  v87 = swift_getKeyPath(&unk_10006EA20);
  v88 = v101;
  sub_10000EFC4(v85, v101, &qword_1000829F8);
  v89 = v88 + *(int *)(v100 + 36);
  *(_QWORD *)v89 = v87;
  *(_BYTE *)(v89 + 8) = 0;
  sub_10000F008(v85, &qword_1000829F8);
  return sub_10000EEF8(v88, v107, &qword_100082A00);
}

uint64_t sub_10005DE4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  void (*v32)(char *, _BYTE *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v67[4];
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  unsigned __int8 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  _BYTE v90[7];
  _BYTE v91[7];
  char v92;
  _BYTE v93[7];
  _BYTE v94[7];
  _OWORD v95[18];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  _BYTE v112[7];
  char v113;
  _BYTE v114[7];
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  _BYTE v120[7];
  char v121;
  _BYTE v122[7];
  double v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;

  v76 = a2;
  v3 = 0xE90000000000006CLL;
  v73 = sub_100005150(&qword_100082318);
  __chkstk_darwin(v73);
  v5 = (uint64_t *)&v67[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v74 = type metadata accessor for ContentTransition(0);
  v6 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v8 = &v67[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100005150(&qword_100082A18);
  __chkstk_darwin(v9);
  v11 = &v67[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v72 = sub_100005150(&qword_100082A20);
  __chkstk_darwin(v72);
  v78 = &v67[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v15 = (uint64_t *)&v67[-v14];
  __chkstk_darwin(v16);
  v77 = &v67[-v17];
  v18 = *(int *)(type metadata accessor for UpNextEntry.Episode(0) + 88);
  v75 = a1;
  v19 = (uint64_t *)(a1 + v18 + *(int *)(type metadata accessor for WidgetPredictedPlayState(0) + 28));
  v20 = v19[1];
  if (v20)
  {
    v21 = *v19;
    v3 = v19[1];
  }
  else
  {
    v22 = ToggleStyleConfiguration.isOn.getter();
    if ((v22 & 1) != 0)
      v21 = 0x69662E6573756170;
    else
      v21 = 0x6C69662E79616C70;
    if ((v22 & 1) != 0)
      v3 = 0xEA00000000006C6CLL;
  }
  swift_bridgeObjectRetain(v20);
  v71 = Image.init(systemName:)(v21, v3);
  v23 = static Alignment.center.getter(v71);
  v69 = v24;
  v70 = v23;
  v25 = Image.init(systemName:)(0x6C69662E79616C70, 0xE90000000000006CLL);
  v26 = type metadata accessor for Font.Design(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v11, 1, 1, v26);
  v27 = static Font.system(size:weight:design:)(0, 1, v11, 14.0);
  sub_10000F008((uint64_t)v11, &qword_100082A18);
  KeyPath = swift_getKeyPath(&unk_10006EA50);
  static ContentTransition.identity.getter(KeyPath);
  v29 = swift_getKeyPath(&unk_10006EA80);
  v30 = v8;
  v31 = v6;
  v32 = *(void (**)(char *, _BYTE *, uint64_t))(v6 + 16);
  v33 = v74;
  v32((char *)v5 + *(int *)(v73 + 28), v30, v74);
  *v5 = v29;
  sub_10000EFC4((uint64_t)v5, (uint64_t)v15 + *(int *)(v72 + 36), &qword_100082318);
  v34 = v70;
  v35 = v71;
  *v15 = v71;
  v15[1] = v34;
  v15[2] = v69;
  v15[3] = v25;
  v15[4] = KeyPath;
  v15[5] = v27;
  swift_retain(v35);
  swift_retain(v25);
  swift_retain(KeyPath);
  swift_retain(v27);
  sub_10000F008((uint64_t)v5, &qword_100082318);
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v30, v33);
  swift_release(v27);
  swift_release(KeyPath);
  swift_release(v25);
  swift_release(v35);
  v36 = v77;
  sub_10000EEF8((uint64_t)v15, (uint64_t)v77, &qword_100082A20);
  v37 = v75;
  sub_10005E4EC((uint64_t)&v96);
  v86 = v102;
  v87 = v103;
  LOWORD(v88) = v104;
  v82 = v98;
  v83 = v99;
  v84 = v100;
  v85 = v101;
  v80 = v96;
  v81 = v97;
  v38 = static Font.footnote.getter();
  v74 = Font.bold()();
  swift_release(v38);
  v73 = swift_getKeyPath(&unk_10006EA50);
  v72 = swift_getKeyPath(&unk_10006EAB0);
  v39 = swift_getKeyPath(&unk_10006EAE0);
  v69 = v39;
  v79 = 0;
  LODWORD(v71) = static Edge.Set.top.getter();
  v40 = type metadata accessor for PlayButtonLargeToggleStyle(0);
  v41.n128_u64[0] = *(_QWORD *)(v37 + *(int *)(v40 + 24));
  v42 = EdgeInsets.init(_all:)(v40, v41);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  LOBYTE(v27) = v79;
  v68 = v79;
  v89 = 0;
  v49 = static Edge.Set.bottom.getter();
  LODWORD(v70) = v49;
  v50.n128_u64[0] = *(_QWORD *)(v37 + *(int *)(v40 + 28));
  v51 = EdgeInsets.init(_all:)(v49, v50);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  LOBYTE(v25) = v89;
  v92 = 0;
  v58 = v78;
  sub_10000EFC4((uint64_t)v36, (uint64_t)v78, &qword_100082A20);
  LOBYTE(v37) = v92;
  v59 = (uint64_t)v58;
  v60 = v76;
  sub_10000EFC4(v59, v76, &qword_100082A20);
  v61 = *(int *)(sub_100005150(&qword_100082A28) + 48);
  v95[5] = v85;
  v95[6] = v86;
  v95[7] = v87;
  v95[3] = v83;
  v95[4] = v84;
  v95[1] = v81;
  v95[2] = v82;
  v62 = (void *)(v60 + v61);
  v95[0] = v80;
  v64 = v73;
  v63 = v74;
  *(_QWORD *)&v95[8] = v88;
  *((_QWORD *)&v95[8] + 1) = v73;
  v65 = v72;
  *(_QWORD *)&v95[9] = v74;
  *((_QWORD *)&v95[9] + 1) = v72;
  *(_QWORD *)&v95[10] = 0x3FE0000000000000;
  *((_QWORD *)&v95[10] + 1) = v39;
  *(_QWORD *)&v95[11] = 1;
  BYTE8(v95[11]) = v27;
  *(_DWORD *)((char *)&v95[11] + 9) = *(_DWORD *)v91;
  HIDWORD(v95[11]) = *(_DWORD *)&v91[3];
  LOBYTE(v39) = v71;
  LOBYTE(v95[12]) = v71;
  *(_DWORD *)((char *)&v95[12] + 1) = *(_DWORD *)v90;
  DWORD1(v95[12]) = *(_DWORD *)&v90[3];
  *((double *)&v95[12] + 1) = v42;
  *(_QWORD *)&v95[13] = v44;
  *((_QWORD *)&v95[13] + 1) = v46;
  *(_QWORD *)&v95[14] = v48;
  BYTE8(v95[14]) = v25;
  HIDWORD(v95[14]) = *(_DWORD *)&v94[3];
  *(_DWORD *)((char *)&v95[14] + 9) = *(_DWORD *)v94;
  LOBYTE(v27) = v70;
  LOBYTE(v95[15]) = v70;
  DWORD1(v95[15]) = *(_DWORD *)&v93[3];
  *(_DWORD *)((char *)&v95[15] + 1) = *(_DWORD *)v93;
  *((double *)&v95[15] + 1) = v51;
  *(_QWORD *)&v95[16] = v53;
  *((_QWORD *)&v95[16] + 1) = v55;
  *(_QWORD *)&v95[17] = v57;
  BYTE8(v95[17]) = v37;
  memcpy(v62, v95, 0x119uLL);
  sub_10005EE90((uint64_t)v95);
  sub_10000F008((uint64_t)v77, &qword_100082A20);
  v102 = v86;
  v103 = v87;
  v98 = v82;
  v99 = v83;
  v100 = v84;
  v101 = v85;
  v96 = v80;
  v97 = v81;
  v104 = v88;
  v105 = v64;
  v106 = v63;
  v107 = v65;
  v108 = 0x3FE0000000000000;
  v109 = v69;
  v110 = 1;
  v111 = v68;
  *(_DWORD *)v112 = *(_DWORD *)v91;
  *(_DWORD *)&v112[3] = *(_DWORD *)&v91[3];
  v113 = v39;
  *(_DWORD *)v114 = *(_DWORD *)v90;
  *(_DWORD *)&v114[3] = *(_DWORD *)&v90[3];
  v115 = v42;
  v116 = v44;
  v117 = v46;
  v118 = v48;
  v119 = v25;
  *(_DWORD *)&v120[3] = *(_DWORD *)&v94[3];
  *(_DWORD *)v120 = *(_DWORD *)v94;
  v121 = v27;
  *(_DWORD *)&v122[3] = *(_DWORD *)&v93[3];
  *(_DWORD *)v122 = *(_DWORD *)v93;
  v123 = v51;
  v124 = v53;
  v125 = v55;
  v126 = v57;
  v127 = v37;
  sub_10005EFE4((uint64_t)&v96);
  return sub_10000F008((uint64_t)v78, &qword_100082A20);
}

__n128 sub_10005E4EC@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t countAndFlagsBits;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  __n128 v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  void *v50;
  char v51;
  unint64_t v52;
  int v53;
  id v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __n128 result;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  void *v71;
  void *v72;
  char v73;
  char v74;
  char *v75;
  uint64_t v76;
  char v77;
  __n128 v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  void *v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v108;
  Swift::String v109;
  _BYTE v110[7];
  char v111;
  _BYTE v112[7];
  char v113;
  _BYTE v114[7];
  _BYTE v115[7];
  char v116;
  Swift::String v117;
  __n128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char v125;
  _BYTE v126[136];
  Swift::String v127;
  __n128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char v135;
  Swift::String v136;
  __n128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int16 v144;
  Swift::String v145;
  Swift::String v146;

  v108 = a1;
  v2 = sub_100005150(&qword_100081048);
  __chkstk_darwin(v2);
  v105 = (char *)&v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005150(&qword_100081028);
  __chkstk_darwin(v4);
  v104 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v106 = *(_QWORD *)(v6 - 8);
  v107.n128_u64[0] = v6;
  __chkstk_darwin(v6);
  v101 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005150(&qword_100081050);
  __chkstk_darwin(v8);
  v103 = (uint64_t)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v109._countAndFlagsBits = (uint64_t)&v99 - v11;
  v12 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v102 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v99 - v16;
  v18 = type metadata accessor for PlaybackButton.State(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v1 + *(int *)(type metadata accessor for UpNextEntry.Episode(0) + 88);
  v23 = type metadata accessor for WidgetPredictedPlayState(0);
  v24 = v22 + *(int *)(v23 + 20);
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for PlaybackButton.State.playing(_:), v18);
  LOBYTE(v24) = static PlaybackButton.State.== infix(_:_:)(v24, v21);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if ((v24 & 1) != 0)
  {
    v25 = (uint64_t)v104;
    v26 = (uint64_t)v105;
    v28 = v106;
    v27 = v107.n128_u64[0];
    v29 = v22 + *(int *)(v23 + 24);
    countAndFlagsBits = v109._countAndFlagsBits;
    sub_10000EFC4(v29, v109._countAndFlagsBits, &qword_100081050);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(countAndFlagsBits, 1, v12) == 1)
    {
      sub_10000F008(v109._countAndFlagsBits, &qword_100081050);
      v31 = v108;
    }
    else
    {
      v42 = v12;
      v43 = v17;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v17, v109._countAndFlagsBits, v42);
      v44 = v26;
      sub_10000EFC4(v22, v26, &qword_100081048);
      v45 = sub_100005150(&qword_100081040);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v26, 1, v45);
      v47 = v42;
      if (v46 == 1)
      {
        sub_10000F008(v44, &qword_100081048);
        (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v28 + 56))(v25, 1, 1, v27);
        v31 = v108;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(v28 + 16))(v25, v44 + *(int *)(v45 + 36), v27);
        sub_10000F008(v44, &qword_100081040);
        (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v28 + 56))(v25, 0, 1, v27);
        v53 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v28 + 48))(v25, 1, v27);
        v31 = v108;
        if (v53 != 1)
        {
          v68 = (uint64_t)v101;
          v69.n128_f64[0] = (*(double (**)(char *, uint64_t, unint64_t))(v28 + 32))(v101, v25, v27);
          v70 = sub_100010CFC(v68, v69);
          v100 = v43;
          v72 = v71;
          v74 = v73;
          v105 = v75;
          v76 = static Edge.Set.trailing.getter(v70);
          v77 = v76;
          v78.n128_u64[0] = -2.0;
          v79 = EdgeInsets.init(_all:)(v76, v78);
          v81 = v80;
          v83 = v82;
          v85 = v84;
          v87 = static Alignment.leading.getter(v86);
          v103 = v88;
          v104 = (char *)v87;
          v109._countAndFlagsBits = v13;
          v89 = PlayButtonTimeFormatHelper.widgetCountDownHelper.getter();
          sub_1000112F4(v89);
          v136._countAndFlagsBits = v90;
          v136._object = v91;
          v92 = sub_1000248B8();
          v93 = Text.init<A>(_:)(&v136, &type metadata for String, v92);
          v116 = v74 & 1;
          v113 = 0;
          v111 = v94 & 1;
          v136._countAndFlagsBits = v70;
          v136._object = v72;
          v137.n128_u8[0] = v74 & 1;
          *(unsigned __int32 *)((char *)v137.n128_u32 + 1) = *(_DWORD *)v115;
          v137.n128_u32[1] = *(_DWORD *)&v115[3];
          v137.n128_u64[1] = (unint64_t)v105;
          LOBYTE(v138) = v77;
          DWORD1(v138) = *(_DWORD *)&v114[3];
          *(_DWORD *)((char *)&v138 + 1) = *(_DWORD *)v114;
          *((double *)&v138 + 1) = v79;
          *(_QWORD *)&v139 = v81;
          *((_QWORD *)&v139 + 1) = v83;
          *(_QWORD *)&v140 = v85;
          BYTE8(v140) = 0;
          HIDWORD(v140) = *(_DWORD *)&v112[3];
          *(_DWORD *)((char *)&v140 + 9) = *(_DWORD *)v112;
          *(_QWORD *)&v141 = v104;
          *((_QWORD *)&v141 + 1) = v103;
          *(_QWORD *)&v142 = v93;
          *((_QWORD *)&v142 + 1) = v95;
          LOBYTE(v143) = v94 & 1;
          DWORD1(v143) = *(_DWORD *)&v110[3];
          *(_DWORD *)((char *)&v143 + 1) = *(_DWORD *)v110;
          *((_QWORD *)&v143 + 1) = v96;
          sub_10005F270((uint64_t)&v136);
          sub_10000EEF8((uint64_t)&v136, (uint64_t)v126, &qword_100082A58);
          v97 = sub_100005150(&qword_1000823C0);
          v98 = sub_10004BEF4();
          _ConditionalContent<>.init(storage:)(v126, v97, &type metadata for Text, v98, &protocol witness table for Text);
          (*(void (**)(uint64_t, unint64_t))(v106 + 8))(v68, v107.n128_u64[0]);
          (*(void (**)(char *, uint64_t))(v109._countAndFlagsBits + 8))(v100, v47);
          v123 = v133;
          v124 = v134;
          v125 = v135;
          v119 = v129;
          v120 = v130;
          v121 = v131;
          v122 = v132;
          v117 = v127;
          v118 = v128;
          goto LABEL_13;
        }
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v43, v47);
      sub_10000F008(v25, &qword_100081028);
    }
    v54 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v55._countAndFlagsBits = 0xD000000000000011;
    v146._object = (void *)0xE000000000000000;
    v55._object = (void *)0x8000000100070720;
    v56._countAndFlagsBits = 0;
    v56._object = (void *)0xE000000000000000;
    v146._countAndFlagsBits = 0;
    v57 = NSLocalizedString(_:tableName:bundle:value:comment:)(v55, (Swift::String_optional)0, (NSBundle)v54, v56, v146);

    v136 = v57;
    v137.n128_u8[0] = 0;
    v137.n128_u64[1] = (unint64_t)_swiftEmptyArrayStorage;
    sub_10005F25C((uint64_t)&v136);
    sub_10000EEF8((uint64_t)&v136, (uint64_t)&v127, &qword_100082A58);
    v58 = sub_100005150(&qword_1000823C0);
    v59 = sub_10004BEF4();
    _ConditionalContent<>.init(storage:)(&v127, v58, &type metadata for Text, v59, &protocol witness table for Text);
LABEL_13:
    v133 = v123;
    v134 = v124;
    v135 = v125;
    v129 = v119;
    v130 = v120;
    v131 = v121;
    v132 = v122;
    v127 = v117;
    v128 = v118;
    sub_10005F268((uint64_t)&v127);
    goto LABEL_14;
  }
  v32 = v22 + *(int *)(v23 + 24);
  v34 = v102;
  v33 = v103;
  sub_10000EFC4(v32, v103, &qword_100081050);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v33, 1, v12) == 1)
  {
    sub_10000F008(v33, &qword_100081050);
    v35 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v145._object = (void *)0xE000000000000000;
    v36._object = (void *)0x8000000100070700;
    v36._countAndFlagsBits = 0xD000000000000010;
    v37._countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    v145._countAndFlagsBits = 0;
    v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, (NSBundle)v35, v37, v145);

    v127 = v38;
    v128.n128_u64[0] = 0;
    v128.n128_u64[1] = (unint64_t)_swiftEmptyArrayStorage;
    LOBYTE(v129) = 1;
    _ConditionalContent<>.init(storage:)(&v127, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v39 = v136;
    v40 = v137;
    v41 = v138;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v34, v33, v12);
    v136._countAndFlagsBits = sub_100010F68();
    v136._object = v48;
    v49 = sub_1000248B8();
    v127._countAndFlagsBits = Text.init<A>(_:)(&v136, &type metadata for String, v49);
    v127._object = v50;
    v128.n128_u64[0] = v51 & 1;
    v128.n128_u64[1] = v52;
    LOBYTE(v129) = 0;
    _ConditionalContent<>.init(storage:)(&v127, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v109 = v136;
    v107 = v137;
    v41 = v138;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v34, v12);
    v40 = v107;
    v39 = v109;
  }
  v31 = v108;
  v127 = v39;
  v128 = v40;
  LOBYTE(v129) = v41;
  sub_10005F180((uint64_t)&v127);
LABEL_14:
  sub_10000EEF8((uint64_t)&v127, (uint64_t)v126, &qword_100082A30);
  v60 = sub_100005150(&qword_100082A38);
  v61 = sub_100005150(&qword_100082A40);
  v62 = sub_10005F18C();
  v63 = sub_10005F1F8(&qword_100082A50, &qword_100082A40, (uint64_t)&protocol witness table for Text, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
  _ConditionalContent<>.init(storage:)(v126, v60, v61, v62, v63);
  v64 = v143;
  *(_OWORD *)(v31 + 96) = v142;
  *(_OWORD *)(v31 + 112) = v64;
  *(_WORD *)(v31 + 128) = v144;
  v65 = v139;
  *(_OWORD *)(v31 + 32) = v138;
  *(_OWORD *)(v31 + 48) = v65;
  v66 = v141;
  *(_OWORD *)(v31 + 64) = v140;
  *(_OWORD *)(v31 + 80) = v66;
  result = v137;
  *(Swift::String *)v31 = v136;
  *(__n128 *)(v31 + 16) = result;
  return result;
}

uint64_t sub_10005EE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlayButtonStyling(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005EE90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(_QWORD *)(a1 + 168);
  sub_10005F09C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128), *(_BYTE *)(a1 + 129), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005EF48,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005EFBC);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v2);
  return a1;
}

uint64_t sub_10005EF48(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v18;

  if ((a17 & 1) != 0)
  {
    sub_100024C4C(a1, a2, a3 & 1);
    v18 = a4;
  }
  else
  {
    v18 = a16;
    sub_100024C4C(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    sub_100024C4C(a13, a14, a15 & 1);
  }
  return swift_bridgeObjectRetain(v18);
}

uint64_t sub_10005EFBC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100024C4C(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_10005EFE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(_QWORD *)(a1 + 168);
  sub_10005F09C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128), *(_BYTE *)(a1 + 129), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005F0E4,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005F158);
  swift_release(v5);
  swift_release(v4);
  swift_release(v2);
  swift_release(v3);
  return a1;
}

uint64_t sub_10005F09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char a18, uint64_t (*a19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((a18 & 1) != 0)
    return a20(a1, a2, a3, a4, a5 & 1);
  else
    return a19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10005F0E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v18;

  if ((a17 & 1) != 0)
  {
    sub_10000EEE8(a1, a2, a3 & 1);
    v18 = a4;
  }
  else
  {
    v18 = a16;
    sub_10000EEE8(a1, a2, a3 & 1);
    swift_bridgeObjectRelease(a4);
    sub_10000EEE8(a13, a14, a15 & 1);
  }
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_10005F158(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10000EEE8(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_10005F180(uint64_t result)
{
  *(_BYTE *)(result + 129) = 1;
  return result;
}

unint64_t sub_10005F18C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082A48;
  if (!qword_100082A48)
  {
    v1 = sub_10000950C(&qword_100082A38);
    sub_10004BEF4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082A48);
  }
  return result;
}

uint64_t sub_10005F1F8(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10000950C(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005F25C(uint64_t result)
{
  *(_BYTE *)(result + 128) = 1;
  return result;
}

uint64_t sub_10005F268(uint64_t result)
{
  *(_BYTE *)(result + 129) = 0;
  return result;
}

uint64_t sub_10005F270(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

unint64_t sub_10005F27C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082A60;
  if (!qword_100082A60)
  {
    v1 = sub_10000950C(&qword_100082A00);
    sub_10000EB64(&qword_100082A68, &qword_1000829F8, (void (*)(void))sub_10005F320);
    sub_10000EEA8(&qword_100082AB0, &qword_100082AB8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082A60);
  }
  return result;
}

unint64_t sub_10005F320()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082A70;
  if (!qword_100082A70)
  {
    v1 = sub_10000950C(&qword_1000829C0);
    sub_10005F3A4();
    sub_10000FBAC(&qword_100082AA8, type metadata accessor for PlayButtonStyling, (uint64_t)&unk_10006D8F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082A70);
  }
  return result;
}

unint64_t sub_10005F3A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082A78;
  if (!qword_100082A78)
  {
    v1 = sub_10000950C(&qword_1000829F0);
    sub_10000EB64(&qword_100082A80, &qword_1000829E8, (void (*)(void))sub_10005F448);
    sub_10000EEA8(&qword_100082AA0, &qword_100082A10, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082A78);
  }
  return result;
}

uint64_t sub_10005F448()
{
  return sub_10000EB64(&qword_100082A88, &qword_1000829E0, (void (*)(void))sub_10005F46C);
}

unint64_t sub_10005F46C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082A90;
  if (!qword_100082A90)
  {
    v1 = sub_10000950C(&qword_1000829D8);
    sub_10000EEA8(&qword_100082A98, &qword_1000829D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082A90);
  }
  return result;
}

uint64_t destroy for WidgetPodcastsBackground(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)a1);
  return sub_100005650(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for WidgetPodcastsBackground(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  v4 = a2[5];
  v5 = *((_BYTE *)a2 + 48);
  swift_bridgeObjectRetain(v3);
  sub_1000051BC(v4, v5);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = v5;
  return a1;
}

uint64_t *assignWithCopy for WidgetPodcastsBackground(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = v2[1];
  a1[2] = v2[2];
  a1[3] = v2[3];
  a1[4] = v2[4];
  v6 = v2[5];
  LOBYTE(v2) = *((_BYTE *)v2 + 48);
  sub_1000051BC(v6, (char)v2);
  v7 = a1[5];
  v8 = *((_BYTE *)a1 + 48);
  a1[5] = v6;
  *((_BYTE *)a1 + 48) = (_BYTE)v2;
  sub_100005650(v7, v8);
  return a1;
}

__n128 initializeWithTake for WidgetPodcastsBackground(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for WidgetPodcastsBackground(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  v5 = *((_BYTE *)a2 + 48);
  v6 = a1[5];
  v7 = *((_BYTE *)a1 + 48);
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = v5;
  sub_100005650(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetPodcastsBackground(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetPodcastsBackground(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetPodcastsBackground()
{
  return &type metadata for WidgetPodcastsBackground;
}

uint64_t initializeBufferWithCopyOfBuffer for WidgetTertiaryVibrantOrPodcastsAccentedModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1000051BC(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for WidgetTertiaryVibrantOrPodcastsAccentedModifier(uint64_t a1)
{
  return sub_100005650(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t initializeWithTake for WidgetTertiaryVibrantOrPodcastsAccentedModifier(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for WidgetTertiaryVibrantOrPodcastsAccentedModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_100005650(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for WidgetTertiaryVibrantOrPodcastsAccentedModifier()
{
  return &type metadata for WidgetTertiaryVibrantOrPodcastsAccentedModifier;
}

uint64_t sub_10005F7EC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000721F8, 1);
}

uint64_t sub_10005F7FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v67 = a1;
  v73 = a4;
  v6 = type metadata accessor for BlendMode(0);
  v64 = *(_QWORD *)(v6 - 8);
  v65 = v6;
  __chkstk_darwin(v6);
  v62 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Color.RGBColorSpace(0);
  v59 = *(_QWORD *)(v8 - 8);
  v60 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100005150(&qword_100082AF8);
  __chkstk_darwin(v72);
  v61 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v63 = (uint64_t)&v58 - v13;
  v68 = sub_100005150(&qword_100082B00);
  __chkstk_darwin(v68);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100005150(&qword_100082B08);
  __chkstk_darwin(v69);
  v71 = (uint64_t)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005150(&qword_100082B10);
  __chkstk_darwin(v17);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100005150(&qword_100082B18);
  __chkstk_darwin(v70);
  v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100005150(&qword_100082B20);
  v22 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a3 & 1;
  sub_1000051BC(a2, a3 & 1);
  v26 = sub_1000521EC(a2, a3 & 1);
  sub_100005650(a2, v25);
  if (v26 == 2)
  {
    if (qword_100081010 != -1)
      swift_once(&qword_100081010, sub_1000699E4);
    v36 = qword_100085780;
    v37 = sub_100005150(&qword_100082B28);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v15, v67, v37);
    v38 = v68;
    *(_QWORD *)&v15[*(int *)(v68 + 36)] = v36;
    v39 = &qword_100082B00;
    sub_10000EFC4((uint64_t)v15, (uint64_t)v19, &qword_100082B00);
    swift_storeEnumTagMultiPayload(v19, v17, 1);
    v40 = sub_10000EEA8(&qword_100082B38, &qword_100082B28, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    swift_retain(v36);
    v74 = v37;
    v75 = v40;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v42 = sub_100060B94(&qword_100082B40, &qword_100082B00, &qword_100082B38, &qword_100082B28);
    _ConditionalContent<>.init(storage:)(v19, v66, v38, OpaqueTypeConformance2, v42);
    v43 = v71;
    sub_10000EFC4((uint64_t)v21, v71, &qword_100082B18);
    swift_storeEnumTagMultiPayload(v43, v69, 0);
    v44 = sub_100060774();
    v45 = sub_100060844();
    _ConditionalContent<>.init(storage:)(v43, v70, v72, v44, v45);
    sub_10000F008((uint64_t)v21, &qword_100082B18);
    v46 = (uint64_t)v15;
  }
  else
  {
    if (v26 == 3)
    {
      v27 = sub_100005150(&qword_100082B28);
      v28 = sub_10000EEA8(&qword_100082B38, &qword_100082B28, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
      View.widgetAccentable(_:)(1, v27, v28);
      v29 = v66;
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v24, v66);
      swift_storeEnumTagMultiPayload(v19, v17, 0);
      v74 = v27;
      v75 = v28;
      v30 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
      v31 = sub_100060B94(&qword_100082B40, &qword_100082B00, &qword_100082B38, &qword_100082B28);
      _ConditionalContent<>.init(storage:)(v19, v29, v68, v30, v31);
      v32 = v71;
      sub_10000EFC4((uint64_t)v21, v71, &qword_100082B18);
      swift_storeEnumTagMultiPayload(v32, v69, 0);
      v33 = sub_100060774();
      v34 = sub_100060844();
      _ConditionalContent<>.init(storage:)(v32, v70, v72, v33, v34);
      sub_10000F008((uint64_t)v21, &qword_100082B18);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v29);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v10, enum case for Color.RGBColorSpace.sRGB(_:), v60);
    v47 = Color.init(_:red:green:blue:opacity:)(v10, 0.921568627, 0.921568627, 0.960784314, 0.4);
    v48 = sub_100005150(&qword_100082B28);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v15, v67, v48);
    *(_QWORD *)&v15[*(int *)(v68 + 36)] = v47;
    v50 = v64;
    v49 = v65;
    v51 = v62;
    (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v62, enum case for BlendMode.plusLighter(_:), v65);
    v52 = v72;
    v53 = (uint64_t)v61;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(&v61[*(int *)(v72 + 36)], v51, v49);
    sub_10000EFC4((uint64_t)v15, v53, &qword_100082B00);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v49);
    sub_10000F008((uint64_t)v15, &qword_100082B00);
    v54 = v63;
    sub_10006072C(v53, v63);
    v39 = &qword_100082AF8;
    v55 = v71;
    sub_10000EFC4(v54, v71, &qword_100082AF8);
    swift_storeEnumTagMultiPayload(v55, v69, 1);
    v56 = sub_100060774();
    v57 = sub_100060844();
    _ConditionalContent<>.init(storage:)(v55, v70, v52, v56, v57);
    v46 = v54;
  }
  return sub_10000F008(v46, v39);
}

uint64_t sub_10005FE90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10005F7FC(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), a2);
}

uint64_t sub_10005FE9C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000721D0, 1);
}

uint64_t sub_10005FEAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a1;
  v49 = a4;
  v50 = sub_100005150(&qword_100082B70);
  v42 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100005150(&qword_100082B78);
  __chkstk_darwin(v45);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100005150(&qword_100082B80);
  __chkstk_darwin(v47);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_100082B88);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100005150(&qword_100082B90);
  __chkstk_darwin(v48);
  v44 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100005150(&qword_100082B98);
  v16 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 &= 1u;
  sub_1000051BC(a2, a3);
  v19 = sub_1000521EC(a2, a3);
  sub_100005650(a2, a3);
  if (v19 == 2)
  {
    if (qword_100081010 != -1)
      swift_once(&qword_100081010, sub_1000699E4);
    v28 = qword_100085780;
    v29 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v9, v46, v50);
    v30 = v45;
    *(_QWORD *)&v9[*(int *)(v45 + 36)] = v28;
    sub_10000EFC4((uint64_t)v9, (uint64_t)v14, &qword_100082B78);
    swift_storeEnumTagMultiPayload(v14, v12, 1);
    v31 = sub_10000EEA8(&qword_100082BA8, &qword_100082B70, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    swift_retain(v28);
    v51 = v29;
    v52 = v31;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v33 = sub_100060B94(&qword_100082BB0, &qword_100082B78, &qword_100082BA8, &qword_100082B70);
    v34 = (uint64_t)v44;
    _ConditionalContent<>.init(storage:)(v14, v43, v30, OpaqueTypeConformance2, v33);
    sub_10000EFC4(v34, (uint64_t)v11, &qword_100082B90);
    swift_storeEnumTagMultiPayload(v11, v47, 0);
    v35 = sub_100060AC4();
    _ConditionalContent<>.init(storage:)(v11, v48, v29, v35, v31);
    sub_10000F008(v34, &qword_100082B90);
    return sub_10000F008((uint64_t)v9, &qword_100082B78);
  }
  else if (v19 == 3)
  {
    v20 = sub_10000EEA8(&qword_100082BA8, &qword_100082B70, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v21 = v50;
    View.widgetAccentable(_:)(1, v50, v20);
    v22 = v43;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v14, v18, v43);
    swift_storeEnumTagMultiPayload(v14, v12, 0);
    v51 = v21;
    v52 = v20;
    v23 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v24 = sub_100060B94(&qword_100082BB0, &qword_100082B78, &qword_100082BA8, &qword_100082B70);
    v25 = (uint64_t)v44;
    _ConditionalContent<>.init(storage:)(v14, v22, v45, v23, v24);
    sub_10000EFC4(v25, (uint64_t)v11, &qword_100082B90);
    swift_storeEnumTagMultiPayload(v11, v47, 0);
    v26 = sub_100060AC4();
    _ConditionalContent<>.init(storage:)(v11, v48, v21, v26, v20);
    sub_10000F008(v25, &qword_100082B90);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v22);
  }
  else
  {
    v36 = v42;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
    v38 = v50;
    v37(v7, v46, v50);
    v37(v11, (uint64_t)v7, v38);
    swift_storeEnumTagMultiPayload(v11, v47, 1);
    v39 = sub_100060AC4();
    v40 = sub_10000EEA8(&qword_100082BA8, &qword_100082B70, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v11, v48, v38, v39, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v38);
  }
}

uint64_t sub_1000603B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10005FEAC(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), a2);
}

uint64_t sub_1000603C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a1;
  v31 = a2;
  v3 = sub_100005150(&qword_100082AC0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005150(&qword_100082AC8);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100005150(&qword_100082AD0);
  __chkstk_darwin(v30);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v2[5];
  v13 = *((_BYTE *)v2 + 48);
  sub_1000051BC(v12, v13);
  v14 = sub_1000521EC(v12, v13);
  sub_100005650(v12, v13);
  if ((v14 - 3) >= 3u)
  {
    v19 = *v2;
    v28 = *(_OWORD *)(v2 + 1);
    v20 = v2[3];
    v21 = v2[4];
    v22 = swift_bridgeObjectRetain(v19);
    v23 = static Edge.Set.all.getter(v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v11, v29, v3);
    v24 = v30;
    v25 = &v11[*(int *)(v30 + 36)];
    *(_QWORD *)v25 = v19;
    *(_OWORD *)(v25 + 8) = v28;
    *((_QWORD *)v25 + 3) = v20;
    *((_QWORD *)v25 + 4) = v21;
    v25[40] = v23;
    sub_10000EFC4((uint64_t)v11, (uint64_t)v9, &qword_100082AD0);
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    v26 = sub_100060690();
    v27 = sub_10000EEA8(&qword_100082AE0, &qword_100082AC0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v9, v24, v3, v26, v27);
    return sub_10000F008((uint64_t)v11, &qword_100082AD0);
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v15(v6, v29, v3);
    v15(v9, (uint64_t)v6, v3);
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    v16 = sub_100060690();
    v17 = sub_10000EEA8(&qword_100082AE0, &qword_100082AC0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v9, v30, v3, v16, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_100060650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000603C0(a1, a2);
}

unint64_t sub_100060690()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082AD8;
  if (!qword_100082AD8)
  {
    v1 = sub_10000950C(&qword_100082AD0);
    sub_10000EEA8(&qword_100082AE0, &qword_100082AC0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000EEA8(&qword_100082AE8, &qword_100082AF0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082AD8);
  }
  return result;
}

uint64_t sub_10006072C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_100082AF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100060774()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100082B30;
  if (!qword_100082B30)
  {
    v1 = sub_10000950C(&qword_100082B18);
    v2[0] = sub_10000950C(&qword_100082B28);
    v2[1] = sub_10000EEA8(&qword_100082B38, &qword_100082B28, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    sub_100060B94(&qword_100082B40, &qword_100082B00, &qword_100082B38, &qword_100082B28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082B30);
  }
  return result;
}

unint64_t sub_100060844()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082B48;
  if (!qword_100082B48)
  {
    v1 = sub_10000950C(&qword_100082AF8);
    sub_100060B94(&qword_100082B40, &qword_100082B00, &qword_100082B38, &qword_100082B28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082B48);
  }
  return result;
}

uint64_t _s14PodcastsWidget47WidgetTertiaryVibrantOrPodcastsAccentedModifierVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1000051BC(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_100005650(v5, v6);
  return a1;
}

uint64_t _s14PodcastsWidget47WidgetTertiaryVibrantOrPodcastsAccentedModifierVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s14PodcastsWidget47WidgetTertiaryVibrantOrPodcastsAccentedModifierVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetPodcastsAccentedModifier()
{
  return &type metadata for WidgetPodcastsAccentedModifier;
}

unint64_t sub_1000609C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082B50;
  if (!qword_100082B50)
  {
    v1 = sub_10000950C(&qword_100082B58);
    sub_100060690();
    sub_10000EEA8(&qword_100082AE0, &qword_100082AC0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082B50);
  }
  return result;
}

unint64_t sub_100060A48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082B60;
  if (!qword_100082B60)
  {
    v1 = sub_10000950C(&qword_100082B68);
    sub_100060774();
    sub_100060844();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082B60);
  }
  return result;
}

uint64_t sub_100060AB4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100072220, 1);
}

unint64_t sub_100060AC4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100082BA0;
  if (!qword_100082BA0)
  {
    v1 = sub_10000950C(&qword_100082B90);
    v2[0] = sub_10000950C(&qword_100082B70);
    v2[1] = sub_10000EEA8(&qword_100082BA8, &qword_100082B70, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    sub_100060B94(&qword_100082BB0, &qword_100082B78, &qword_100082BA8, &qword_100082B70);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082BA0);
  }
  return result;
}

uint64_t sub_100060B94(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000950C(a2);
    sub_10000EEA8(a3, a4, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000EEA8(&qword_100082808, &qword_100082810, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100060C30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082BB8;
  if (!qword_100082BB8)
  {
    v1 = sub_10000950C(&qword_100082BC0);
    sub_100060AC4();
    sub_10000EEA8(&qword_100082BA8, &qword_100082B70, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082BB8);
  }
  return result;
}

ValueMetadata *type metadata accessor for VSpacer()
{
  return &type metadata for VSpacer;
}

uint64_t sub_100060CD4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100072264, 1);
}

double sub_100060CE4@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  double result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  v3 = *v1;
  v4 = static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)(&v11, 0, 1, v3, 0, v4, v5);
  v6 = v11;
  v7 = v12;
  v8 = v13;
  v9 = v14;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  result = *(double *)&v15;
  *(_OWORD *)(a1 + 48) = v15;
  return result;
}

ValueMetadata *type metadata accessor for WidgetURLs()
{
  return &type metadata for WidgetURLs;
}

uint64_t sub_100060D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = a2;
  v3 = type metadata accessor for URLComponents(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005150(&qword_100081038);
  __chkstk_darwin(v7);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetFamily(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005150(&qword_100081DA0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v13, a1, v10, v15);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  v19 = 0;
  if (v18 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v18 == enum case for WidgetFamily.systemMedium(_:))
    {
      v19 = 1;
      goto LABEL_8;
    }
    if (v18 == enum case for WidgetFamily.systemLarge(_:))
    {
      v19 = 2;
      goto LABEL_8;
    }
    if (v18 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v19 = 3;
      goto LABEL_8;
    }
    if (&enum case for WidgetFamily.accessoryCorner(_:))
    {
      v19 = -1;
      if (v18 == enum case for WidgetFamily.accessoryCorner(_:)
        || v18 == enum case for WidgetFamily.accessoryCircular(_:))
      {
        goto LABEL_8;
      }
    }
    else if (v18 == enum case for WidgetFamily.accessoryCircular(_:))
    {
      v19 = -1;
      goto LABEL_8;
    }
    v19 = -1;
    if (v18 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v18 != enum case for WidgetFamily.accessoryInline(_:))
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
LABEL_8:
  if (qword_100080F68 != -1)
    swift_once(&qword_100080F68, sub_100012888);
  v20 = qword_100085738;
  v21 = unk_100085740;
  v22 = qword_100080F70;
  swift_bridgeObjectRetain(unk_100085740);
  if (v22 != -1)
    swift_once(&qword_100080F70, sub_1000128A8);
  v23 = qword_100085748;
  v24 = unk_100085750;
  swift_bridgeObjectRetain(unk_100085750);
  MetricsWidgetContext.init(widgetID:name:size:subjectID:)(v20, v21, v23, v24, v19, 0, 0);
  v25 = type metadata accessor for MetricsWidgetContext(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v17, 0, 1, v25);
  v26 = type metadata accessor for PodcastsURLOpenCommand(0);
  v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  sub_100033C50((uint64_t)v17, v27 + OBJC_IVAR____TtC14PodcastsWidget22PodcastsURLOpenCommand_widgetContext);
  type metadata accessor for PodcastsURLScheme();
  v28 = type metadata accessor for PodcastsURLNowPlayingCommand();
  if (swift_dynamicCastClass(v27, v28))
  {
    v29 = swift_retain(v27);
    URLComponents.init()(v29);
    if (qword_100080F90 != -1)
      swift_once(&qword_100080F90, sub_1000617B0);
    v30 = qword_100085760;
    v31 = *(_QWORD *)algn_100085768;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
    URLComponents.scheme.setter(v30, v31);
    if (qword_100080F98 != -1)
      swift_once(&qword_100080F98, sub_1000617D4);
    v32 = &qword_100082BC8;
LABEL_24:
    v37 = *v32;
    v38 = v32[1];
    swift_bridgeObjectRetain(v38);
    v39 = URLComponents.host.setter(v37, v38);
LABEL_25:
    URLComponents.url.getter(v39);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    goto LABEL_26;
  }
  v33 = type metadata accessor for PodcastsURLBrowseCommand();
  if (swift_dynamicCastClass(v27, v33))
  {
    v34 = swift_retain(v27);
    URLComponents.init()(v34);
    if (qword_100080F90 != -1)
      swift_once(&qword_100080F90, sub_1000617B0);
    v35 = qword_100085760;
    v36 = *(_QWORD *)algn_100085768;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
    URLComponents.scheme.setter(v35, v36);
    if (qword_100080FA0 != -1)
      swift_once(&qword_100080FA0, sub_1000617FC);
    v32 = &qword_100082BD8;
    goto LABEL_24;
  }
  v43 = swift_dynamicCastClass(v27, v26);
  if (!v43)
  {
    v45 = type metadata accessor for PodcastsURLShowCommand(0);
    v46 = swift_dynamicCastClass(v27, v45);
    if (v46)
    {
      v47 = v46;
      v48 = swift_retain(v27);
      URLComponents.init()(v48);
      if (qword_100080F90 != -1)
        swift_once(&qword_100080F90, sub_1000617B0);
      v49 = qword_100085760;
      v50 = *(_QWORD *)algn_100085768;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
      URLComponents.scheme.setter(v49, v50);
      if (qword_100080FB0 != -1)
        swift_once(&qword_100080FB0, sub_100061838);
      v51 = &qword_100082BF8;
    }
    else
    {
      v52 = type metadata accessor for PodcastsURLPlayCommand(0);
      v53 = swift_dynamicCastClass(v27, v52);
      if (v53)
      {
        v47 = v53;
        v54 = swift_retain(v27);
        URLComponents.init()(v54);
        if (qword_100080F90 != -1)
          swift_once(&qword_100080F90, sub_1000617B0);
        v55 = qword_100085760;
        v56 = *(_QWORD *)algn_100085768;
        swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
        URLComponents.scheme.setter(v55, v56);
        if (qword_100080FB8 != -1)
          swift_once(&qword_100080FB8, sub_100061854);
        v51 = &qword_100082C08;
      }
      else
      {
        v57 = type metadata accessor for PodcastsURLShowAndPlayCommand(0);
        v58 = swift_dynamicCastClass(v27, v57);
        if (!v58)
        {
          v65 = type metadata accessor for URL(0);
          result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v9, 1, 1, v65);
          goto LABEL_58;
        }
        v47 = v58;
        v59 = swift_retain(v27);
        URLComponents.init()(v59);
        if (qword_100080F90 != -1)
          swift_once(&qword_100080F90, sub_1000617B0);
        v60 = qword_100085760;
        v61 = *(_QWORD *)algn_100085768;
        swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
        URLComponents.scheme.setter(v60, v61);
        if (qword_100080FC0 != -1)
          swift_once(&qword_100080FC0, sub_100061870);
        v51 = &qword_100082C18;
      }
    }
    v62 = *v51;
    v63 = v51[1];
    swift_bridgeObjectRetain(v63);
    URLComponents.host.setter(v62, v63);
    v64 = sub_100062C64((uint64_t *)(v47 + OBJC_IVAR____TtC14PodcastsWidget25PodcastsURLEpisodeCommand_episodeParameters));
    v39 = URLComponents.queryItems.setter(v64);
    goto LABEL_25;
  }
  v44 = v43;
  swift_retain(v27);
  sub_1000619F4(v44, (uint64_t)v9);
LABEL_26:
  swift_release(v27);
  v40 = type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v40 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v9, 1, v40);
  if ((_DWORD)result != 1)
  {
    swift_release(v27);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v67, v9, v40);
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_1000614E8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for PodcastsURLCommand()
{
  return objc_opt_self(_TtC14PodcastsWidget18PodcastsURLCommand);
}

uint64_t type metadata accessor for PodcastsURLNowPlayingCommand()
{
  return objc_opt_self(_TtC14PodcastsWidget28PodcastsURLNowPlayingCommand);
}

uint64_t type metadata accessor for PodcastsURLBrowseCommand()
{
  return objc_opt_self(_TtC14PodcastsWidget24PodcastsURLBrowseCommand);
}

uint64_t sub_100061558()
{
  uint64_t v0;

  return sub_100062564(v0 + OBJC_IVAR____TtC14PodcastsWidget22PodcastsURLOpenCommand_widgetContext);
}

uint64_t sub_100061568()
{
  return sub_10006161C(&OBJC_IVAR____TtC14PodcastsWidget22PodcastsURLOpenCommand_widgetContext, (void (*)(uint64_t))sub_100062564);
}

uint64_t sub_10006157C()
{
  return type metadata accessor for PodcastsURLOpenCommand(0);
}

uint64_t type metadata accessor for PodcastsURLOpenCommand(uint64_t a1)
{
  return sub_10001EA54(a1, (uint64_t *)&unk_100082E98, (uint64_t)&nominal type descriptor for PodcastsURLOpenCommand);
}

uint64_t sub_100061598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061670(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1000615A4);
}

void sub_1000615A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100082EA8)
  {
    v2 = type metadata accessor for MetricsWidgetContext(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100082EA8);
  }
}

uint64_t sub_1000615F8()
{
  uint64_t v0;

  return sub_100062528(v0 + OBJC_IVAR____TtC14PodcastsWidget25PodcastsURLEpisodeCommand_episodeParameters);
}

uint64_t sub_100061608()
{
  return sub_10006161C(&OBJC_IVAR____TtC14PodcastsWidget25PodcastsURLEpisodeCommand_episodeParameters, (void (*)(uint64_t))sub_100062528);
}

uint64_t sub_10006161C(_QWORD *a1, void (*a2)(uint64_t))
{
  uint64_t v2;

  a2(v2 + *a1);
  return swift_deallocClassInstance(v2, *(unsigned int *)(*(_QWORD *)v2 + 48), *(unsigned __int16 *)(*(_QWORD *)v2 + 52));
}

uint64_t sub_100061648()
{
  return type metadata accessor for PodcastsURLEpisodeCommand(0);
}

uint64_t type metadata accessor for PodcastsURLEpisodeCommand(uint64_t a1)
{
  return sub_10001EA54(a1, qword_100082F58, (uint64_t)&nominal type descriptor for PodcastsURLEpisodeCommand);
}

uint64_t sub_100061664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061670(a1, a2, a3, type metadata accessor for PodcastsURLEpisodeParameters);
}

uint64_t sub_100061670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v7, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for PodcastsURLEpisodeParameters(uint64_t a1)
{
  return sub_10001EA54(a1, qword_100083430, (uint64_t)&nominal type descriptor for PodcastsURLEpisodeParameters);
}

uint64_t sub_1000616F4()
{
  return type metadata accessor for PodcastsURLShowCommand(0);
}

uint64_t type metadata accessor for PodcastsURLShowCommand(uint64_t a1)
{
  return sub_10001EA54(a1, qword_100083010, (uint64_t)&nominal type descriptor for PodcastsURLShowCommand);
}

uint64_t sub_100061714()
{
  return type metadata accessor for PodcastsURLPlayCommand(0);
}

uint64_t type metadata accessor for PodcastsURLPlayCommand(uint64_t a1)
{
  return sub_10001EA54(a1, qword_1000830C8, (uint64_t)&nominal type descriptor for PodcastsURLPlayCommand);
}

uint64_t sub_100061730()
{
  uint64_t v0;

  sub_100062528(v0 + OBJC_IVAR____TtC14PodcastsWidget25PodcastsURLEpisodeCommand_episodeParameters);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100061760()
{
  return type metadata accessor for PodcastsURLShowAndPlayCommand(0);
}

uint64_t type metadata accessor for PodcastsURLShowAndPlayCommand(uint64_t a1)
{
  return sub_10001EA54(a1, qword_100083180, (uint64_t)&nominal type descriptor for PodcastsURLShowAndPlayCommand);
}

uint64_t sub_10006177C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 104);
}

void sub_1000617B0()
{
  qword_100085760 = 0x7374736163646F70;
  *(_QWORD *)algn_100085768 = 0xE800000000000000;
}

void sub_1000617D4()
{
  qword_100082BC8 = 0x6979616C50776F6ELL;
  unk_100082BD0 = 0xEA0000000000676ELL;
}

void sub_1000617FC()
{
  qword_100082BD8 = 0x6573776F7262;
  unk_100082BE0 = 0xE600000000000000;
}

void sub_10006181C()
{
  qword_100082BE8 = 1852141679;
  unk_100082BF0 = 0xE400000000000000;
}

void sub_100061838()
{
  qword_100082BF8 = 2003789939;
  unk_100082C00 = 0xE400000000000000;
}

void sub_100061854()
{
  qword_100082C08 = 2036427888;
  unk_100082C10 = 0xE400000000000000;
}

void sub_100061870()
{
  qword_100082C18 = 0x79616C70776F6873;
  unk_100082C20 = 0xE800000000000000;
}

void sub_100061894()
{
  qword_100082C28 = 0x5574736163646F70;
  unk_100082C30 = 0xEB00000000646975;
}

void sub_1000618C0()
{
  qword_100082C38 = 0x5565646F73697065;
  unk_100082C40 = 0xEB00000000646975;
}

void sub_1000618EC()
{
  qword_100082C48 = 0x4974736163646F70;
  unk_100082C50 = 0xE900000000000064;
}

void sub_100061914()
{
  qword_100082C58 = 0x4965646F73697065;
  unk_100082C60 = 0xE900000000000064;
}

void sub_10006193C()
{
  qword_100082C68 = 0x616C506563726F66;
  unk_100082C70 = 0xE900000000000079;
}

void sub_100061964()
{
  strcpy((char *)&qword_100082C78, "episodeContext");
  unk_100082C87 = -18;
}

void sub_100061994()
{
  qword_100082C88 = 0x6F4E6E657473696CLL;
  unk_100082C90 = 0xEF7478654E705577;
}

void sub_1000619C4()
{
  strcpy((char *)&qword_100082C98, "widgetContext");
  unk_100082CA6 = -4864;
}

uint64_t sub_1000619F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String_optional v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  v25[1] = a2;
  v3 = sub_100005150(&qword_100081DA0);
  __chkstk_darwin(v3);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MetricsWidgetContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLComponents(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()(v12);
  if (qword_100080F90 != -1)
    swift_once(&qword_100080F90, sub_1000617B0);
  v15 = qword_100085760;
  v16 = *(_QWORD *)algn_100085768;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100085768);
  URLComponents.scheme.setter(v15, v16);
  if (qword_100080FA8 != -1)
    swift_once(&qword_100080FA8, sub_10006181C);
  v17 = qword_100082BE8;
  v18 = unk_100082BF0;
  swift_bridgeObjectRetain(unk_100082BF0);
  URLComponents.host.setter(v17, v18);
  sub_1000625A4(a1 + OBJC_IVAR____TtC14PodcastsWidget22PodcastsURLOpenCommand_widgetContext, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v19 = sub_100062564((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    v20 = MetricsWidgetContext.encodeToString()();
    if (v20.value._object)
    {
      v21 = sub_100005150(qword_100083480);
      v22 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
      v23 = swift_allocObject(v21, ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72), *(unsigned __int8 *)(v22 + 80) | 7);
      *(_OWORD *)(v23 + 16) = xmmword_10006D950;
      if (qword_100081000 != -1)
        swift_once(&qword_100081000, sub_1000619C4);
      URLQueryItem.init(name:value:)(qword_100082C98, unk_100082CA0, v20.value._countAndFlagsBits, v20.value._object);
      swift_bridgeObjectRelease(v20.value._object);
      URLComponents.queryItems.setter(v23);
    }
    v19 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  URLComponents.url.getter(v19);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t type metadata accessor for PodcastsURLScheme()
{
  return objc_opt_self(_TtC14PodcastsWidget17PodcastsURLScheme);
}

uint64_t type metadata accessor for PodcastsURLScheme.Command()
{
  return objc_opt_self(_TtCC14PodcastsWidget17PodcastsURLSchemeP33_850608B4A38B23BCF69C64318F7B02917Command);
}

uint64_t type metadata accessor for PodcastsURLScheme.Param()
{
  return objc_opt_self(_TtCC14PodcastsWidget17PodcastsURLSchemeP33_850608B4A38B23BCF69C64318F7B02915Param);
}

_QWORD *sub_100061D1C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v14);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v7 = *(int *)(a3 + 40);
    v8 = (char *)a2 + v7;
    v9 = (void *)(a1 + v7);
    *(_BYTE *)(a1 + 58) = *((_BYTE *)a2 + 58);
    v10 = type metadata accessor for MetricsWidgetContext(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    if (v12(v8, 1, v10))
    {
      v13 = sub_100005150(&qword_100081DA0);
      memcpy(v9, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v9, v8, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t sub_100061E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for MetricsWidgetContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_100061ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v6 = *(int *)(a3 + 40);
  v7 = (const void *)(a2 + v6);
  v8 = (void *)(a1 + v6);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v9 = type metadata accessor for MetricsWidgetContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v11(v7, 1, v9))
  {
    v12 = sub_100005150(&qword_100081DA0);
    memcpy(v8, v7, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v8, v7, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_100061FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v12 = *(int *)(a3 + 40);
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for MetricsWidgetContext(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_100005150(&qword_100081DA0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_10006214C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v5 = *(int *)(a3 + 40);
  v6 = (const void *)(a2 + v5);
  v7 = (void *)(a1 + v5);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v8 = type metadata accessor for MetricsWidgetContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
  {
    v10 = sub_100005150(&qword_100081DA0);
    memcpy(v7, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v7, v6, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_100062230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_WORD *)(a2 + 57);
  v11 = *(int *)(a3 + 40);
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  *(_WORD *)(a1 + 57) = v10;
  v14 = type metadata accessor for MetricsWidgetContext(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_100005150(&qword_100081DA0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_100062380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006238C);
}

uint64_t sub_10006238C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100005150(&qword_100081DA0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v9);
  }
}

uint64_t sub_100062418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062424);
}

uint64_t sub_100062424(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_100005150(&qword_100081DA0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_10006249C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_10006EE60;
  v4[1] = &unk_10006EE60;
  v4[2] = &unk_10006EE78;
  v4[3] = &unk_10006EE78;
  v4[4] = &unk_10006EE90;
  v4[5] = &unk_10006EE90;
  sub_1000615A4(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t sub_100062528(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PodcastsURLEpisodeParameters(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100062564(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_100081DA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000625A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_100081DA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000625EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100062824(a1, a2, a3, a4, &qword_100081888, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

uint64_t sub_100062600(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005150(&qword_100081880);
  v11 = *(_QWORD *)(sub_100005150(&qword_100081028) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = *(_QWORD *)(sub_100005150(&qword_100081028) - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (unint64_t)v15 + v19;
  if ((a1 & 1) != 0)
  {
    v21 = a4 + v19;
    if ((unint64_t)v15 < a4 || v20 >= v21 + *(_QWORD *)(v18 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v19, v21);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v19, v21);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100062A30(0, v8, v20, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_100062810(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100062824(a1, a2, a3, a4, &qword_100081878, type metadata accessor for UpNextEntry);
}

uint64_t sub_100062824(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100005150(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (unint64_t)v18 + v22;
  if ((a1 & 1) != 0)
  {
    v24 = a4 + v22;
    if ((unint64_t)v18 < a4 || v23 >= v24 + *(_QWORD *)(v21 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v22, v24);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v22, v24);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100062B4C(0, v11, v23, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_100062A30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100005150(&qword_100081028) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100062B4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100062C64(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  Swift::String_optional v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v2 = sub_100005150(&qword_100081DA0);
  __chkstk_darwin(v2);
  v84 = (uint64_t)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MetricsWidgetContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v81 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for URLQueryItem(0);
  v7 = *(_QWORD *)(v85 - 8);
  v8 = __chkstk_darwin(v85);
  v80 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v75 - v11;
  v13 = __chkstk_darwin(v10);
  v83 = (char *)&v75 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v75 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v75 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v75 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v75 - v24;
  v26 = a1[1];
  if (v26)
  {
    v82 = v12;
    v27 = *a1;
    if (qword_100080FC8 != -1)
      swift_once(&qword_100080FC8, sub_100061894);
    URLQueryItem.init(name:value:)(qword_100082C28, unk_100082C30, v27, v26);
    v28 = (char *)sub_100062824(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
    v30 = *((_QWORD *)v28 + 2);
    v29 = *((_QWORD *)v28 + 3);
    v78 = v5;
    v79 = v4;
    if (v30 >= v29 >> 1)
      v28 = (char *)sub_100062824(v29 > 1, v30 + 1, 1, (unint64_t)v28, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
    *((_QWORD *)v28 + 2) = v30 + 1;
    v31 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v32 = *(_QWORD *)(v7 + 72);
    v33 = &v28[v31 + v32 * v30];
    v34 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v35 = v25;
    v36 = v85;
    v34(v33, v35, v85);
    v37 = a1[3];
    if (v37)
    {
      v38 = a1[2];
      if (qword_100080FD0 != -1)
        swift_once(&qword_100080FD0, sub_1000618C0);
      URLQueryItem.init(name:value:)(qword_100082C38, unk_100082C40, v38, v37);
      v40 = *((_QWORD *)v28 + 2);
      v39 = *((_QWORD *)v28 + 3);
      if (v40 >= v39 >> 1)
        v28 = (char *)sub_100062824(v39 > 1, v40 + 1, 1, (unint64_t)v28, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
      *((_QWORD *)v28 + 2) = v40 + 1;
      v34(&v28[v31 + v40 * v32], v23, v36);
    }
    v5 = v78;
    v4 = v79;
    v12 = v82;
  }
  else if ((a1[5] & 1) != 0)
  {
    v28 = (char *)_swiftEmptyArrayStorage;
    v36 = v85;
  }
  else
  {
    v82 = v12;
    v41 = a1[4];
    if (qword_100080FD8 != -1)
      swift_once(&qword_100080FD8, sub_1000618EC);
    v42 = qword_100082C48;
    v43 = unk_100082C50;
    v86 = v41;
    v44 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v46 = v45;
    URLQueryItem.init(name:value:)(v42, v43, v44, v45);
    swift_bridgeObjectRelease(v46);
    v28 = (char *)sub_100062824(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
    v48 = *((_QWORD *)v28 + 2);
    v47 = *((_QWORD *)v28 + 3);
    if (v48 >= v47 >> 1)
      v28 = (char *)sub_100062824(v47 > 1, v48 + 1, 1, (unint64_t)v28, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
    v36 = v85;
    *((_QWORD *)v28 + 2) = v48 + 1;
    v77 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v76 = *(_QWORD *)(v7 + 72);
    v49 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v49(&v28[v77 + v76 * v48], v20, v36);
    if ((a1[7] & 1) != 0)
    {
      v12 = v82;
    }
    else
    {
      v75 = v49;
      v50 = a1[6];
      v12 = v82;
      if (qword_100080FE0 != -1)
        swift_once(&qword_100080FE0, sub_100061914);
      v51 = qword_100082C58;
      v52 = unk_100082C60;
      v86 = v50;
      v53 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v55 = v54;
      URLQueryItem.init(name:value:)(v51, v52, v53, v54);
      swift_bridgeObjectRelease(v55);
      v57 = *((_QWORD *)v28 + 2);
      v56 = *((_QWORD *)v28 + 3);
      if (v57 >= v56 >> 1)
        v28 = (char *)sub_100062824(v56 > 1, v57 + 1, 1, (unint64_t)v28, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
      v36 = v85;
      *((_QWORD *)v28 + 2) = v57 + 1;
      v75(&v28[v77 + v57 * v76], v17, v36);
    }
  }
  v58 = *((unsigned __int8 *)a1 + 57);
  if (v58 != 2)
  {
    if (qword_100080FE8 != -1)
      swift_once(&qword_100080FE8, sub_10006193C);
    if ((v58 & 1) != 0)
      v59 = 1702195828;
    else
      v59 = 0x65736C6166;
    if ((v58 & 1) != 0)
      v60 = 0xE400000000000000;
    else
      v60 = 0xE500000000000000;
    URLQueryItem.init(name:value:)(qword_100082C68, unk_100082C70, v59, v60);
    swift_bridgeObjectRelease(v60);
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = (char *)sub_100062824(0, *((_QWORD *)v28 + 2) + 1, 1, (unint64_t)v28, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
    v62 = *((_QWORD *)v28 + 2);
    v61 = *((_QWORD *)v28 + 3);
    if (v62 >= v61 >> 1)
      v28 = (char *)sub_100062824(v61 > 1, v62 + 1, 1, (unint64_t)v28, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
    *((_QWORD *)v28 + 2) = v62 + 1;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v28[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v62], v83, v36);
  }
  if ((*((_BYTE *)a1 + 58) & 1) != 0)
  {
    if (qword_100080FF0 != -1)
      swift_once(&qword_100080FF0, sub_100061964);
    v63 = qword_100082C78;
    v64 = unk_100082C80;
    if (qword_100080FF8 != -1)
      swift_once(&qword_100080FF8, sub_100061994);
    URLQueryItem.init(name:value:)(v63, v64, qword_100082C88, unk_100082C90);
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = (char *)sub_100062824(0, *((_QWORD *)v28 + 2) + 1, 1, (unint64_t)v28, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
    v66 = *((_QWORD *)v28 + 2);
    v65 = *((_QWORD *)v28 + 3);
    if (v66 >= v65 >> 1)
      v28 = (char *)sub_100062824(v65 > 1, v66 + 1, 1, (unint64_t)v28, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
    *((_QWORD *)v28 + 2) = v66 + 1;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v28[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v66], v12, v36);
  }
  v67 = type metadata accessor for PodcastsURLEpisodeParameters(0);
  v68 = v84;
  sub_1000625A4((uint64_t)a1 + *(int *)(v67 + 40), v84);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v68, 1, v4) == 1)
  {
    sub_100062564(v68);
  }
  else
  {
    v69 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v81, v68, v4);
    v70 = MetricsWidgetContext.encodeToString()();
    if (v70.value._object)
    {
      if (qword_100081000 != -1)
        swift_once(&qword_100081000, sub_1000619C4);
      v71 = v80;
      URLQueryItem.init(name:value:)(qword_100082C98, unk_100082CA0, v70.value._countAndFlagsBits, v70.value._object);
      swift_bridgeObjectRelease(v70.value._object);
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        v28 = (char *)sub_100062824(0, *((_QWORD *)v28 + 2) + 1, 1, (unint64_t)v28, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
      v73 = *((_QWORD *)v28 + 2);
      v72 = *((_QWORD *)v28 + 3);
      if (v73 >= v72 >> 1)
        v28 = (char *)sub_100062824(v72 > 1, v73 + 1, 1, (unint64_t)v28, qword_100083480, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
      *((_QWORD *)v28 + 2) = v73 + 1;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v28[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v73], v71, v36);
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v69, v4);
  }
  return v28;
}

uint64_t sub_1000635A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_1000635B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100063C94(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
  }
}

uint64_t *sub_100063634(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100005150(&qword_100081038);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 40);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v10 = v13[1];
    *v12 = *v13;
    v12[1] = v10;
  }
  swift_retain(v10);
  return a1;
}

uint64_t sub_10006372C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40) + 8));
}

char *sub_100063798(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100005150(&qword_100081038);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 40);
  *(_QWORD *)&a1[*(int *)(a3 + 36)] = *(_QWORD *)&a2[*(int *)(a3 + 36)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  swift_retain(v12);
  return a1;
}

char *sub_100063868(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100005150(&qword_100081038);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 36)] = *(_QWORD *)&a2[*(int *)(a3 + 36)];
  v12 = *(int *)(a3 + 40);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_QWORD *)v14 + 1);
  v16 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

char *sub_100063994(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100005150(&qword_100081038);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 40);
  *(_QWORD *)&a1[*(int *)(a3 + 36)] = *(_QWORD *)&a2[*(int *)(a3 + 36)];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  return a1;
}

char *sub_100063A58(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100005150(&qword_100081038);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 40);
  *(_QWORD *)&a1[*(int *)(a3 + 36)] = *(_QWORD *)&a2[*(int *)(a3 + 36)];
  v13 = *(_QWORD *)&a1[v12 + 8];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  swift_release(v13);
  return a1;
}

uint64_t sub_100063B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100063B80);
}

uint64_t sub_100063B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100005150(&qword_100081038);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100063C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063C0C);
}

uint64_t sub_100063C0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100005150(&qword_100081038);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for WidgetLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003E510(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WidgetLink);
}

void sub_100063C94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000817A8)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000817A8);
  }
}

uint64_t sub_100063CE8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10007260C, 1);
}

uint64_t sub_100063D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_100063DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_100063EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t OpaqueTypeConformance2;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD v113[11];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;

  v101 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v91 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v87 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v97 = (uint64_t)&v79 - v7;
  v8 = type metadata accessor for PlainButtonStyle(0);
  v96 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v95 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModifiedContent(255, v4, &type metadata for _PaddingLayout);
  v98 = a1;
  v102 = *(_QWORD *)(a1 + 24);
  v118 = v102;
  v119 = &protocol witness table for _PaddingLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v84 = v10;
  v82 = WitnessTable;
  v12 = type metadata accessor for Link(0, v10);
  v85 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v83 = (char *)&v79 - v13;
  v14 = swift_getWitnessTable(&protocol conformance descriptor for Link<A>, v12);
  v15 = sub_100064978();
  v107 = v12;
  v114 = v12;
  v115 = v8;
  v108 = v8;
  v106 = v14;
  v116 = v14;
  v117 = v15;
  v105 = v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v114, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v89 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v86 = (char *)&v79 - v17;
  v18 = sub_10000950C(&qword_100083510);
  v90 = OpaqueTypeMetadata2;
  v19 = type metadata accessor for ModifiedContent(0, OpaqueTypeMetadata2, v18);
  v93 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v92 = (char *)&v79 - v20;
  v104 = v21;
  v22 = type metadata accessor for ModifiedContent(0, v21, &type metadata for _PaddingLayout);
  v94 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v88 = (uint64_t)&v79 - v26;
  v27 = sub_100005150(&qword_100081038);
  __chkstk_darwin(v27);
  v29 = (char *)&v79 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v79 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v79 - v36;
  v100 = type metadata accessor for _ConditionalContent(0, v22, v4, v35);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v103 = (uint64_t)&v79 - v38;
  sub_1000649C0(v2, (uint64_t)v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    v39 = sub_100064A08((uint64_t)v29);
    v40 = (uint64_t)v87;
    (*(void (**)(uint64_t))(v2 + *(int *)(v98 + 40)))(v39);
    v41 = v97;
    v42 = v102;
    sub_10003E53C(v40, v4, v97);
    v43 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
    v43(v40, v4);
    sub_10003D908(v41, v4, v40);
    v114 = v107;
    v115 = v108;
    v116 = v106;
    v117 = v105;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v114, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v45 = sub_100064A48();
    v113[9] = OpaqueTypeConformance2;
    v113[10] = v45;
    v113[7] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v104);
    v113[8] = &protocol witness table for _PaddingLayout;
    v46 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
    sub_100063DE0(v40, v22, v4, v46, v42);
    v43(v40, v4);
    v43(v41, v4);
  }
  else
  {
    v47 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v81 = v37;
    v47(v37, v29, v30);
    v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 16))(v33, v37, v30);
    v49 = __chkstk_darwin(v48);
    v50 = v102;
    *(&v79 - 4) = v4;
    *(&v79 - 3) = v50;
    v80 = v2;
    *(&v79 - 2) = v2;
    v51 = v83;
    v52 = Link.init(destination:label:)(v33, sub_100064A94, v49);
    v53 = v95;
    PlainButtonStyle.init()(v52);
    v97 = v30;
    v54 = v86;
    v55 = v107;
    v56 = v108;
    v57 = v106;
    v91 = v4;
    v58 = v105;
    View.buttonStyle<A>(_:)(v53, v107, v108, v106, v105);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v53, v56);
    v59 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v51, v55);
    v60 = static Color.clear.getter(v59);
    v113[0] = v60;
    v61 = static Edge.Set.all.getter(v60);
    v114 = v55;
    v115 = v56;
    v116 = v57;
    v117 = v58;
    v62 = swift_getOpaqueTypeConformance2(&v114, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v63 = v92;
    v64 = v90;
    View.background<A>(_:ignoresSafeAreaEdges:)(v113, v61, v90, &type metadata for Color, v62, &protocol witness table for Color);
    swift_release(v60);
    v65 = (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v54, v64);
    v66 = static Edge.Set.vertical.getter(v65);
    v67 = *(_QWORD *)(v80 + *(int *)(v98 + 36)) ^ 0x8000000000000000;
    v68 = sub_100064A48();
    v111 = v62;
    v112 = v68;
    v69 = v104;
    v70 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v104);
    View.padding(_:_:)(v66, v67, 0, v69, v70);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v63, v69);
    v109 = v70;
    v42 = v102;
    v110 = &protocol witness table for _PaddingLayout;
    v71 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
    v72 = v88;
    sub_10003E53C((uint64_t)v24, v22, v88);
    v73 = *(void (**)(char *, uint64_t))(v94 + 8);
    v73(v24, v22);
    sub_10003D908(v72, v22, (uint64_t)v24);
    sub_100063D1C((uint64_t)v24, v22, v91, v71, v42);
    v73(v24, v22);
    v73((char *)v72, v22);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v81, v97);
  }
  v114 = v107;
  v115 = v108;
  v116 = v106;
  v117 = v105;
  v74 = swift_getOpaqueTypeConformance2(&v114, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v75 = sub_100064A48();
  v113[5] = v74;
  v113[6] = v75;
  v113[3] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v104);
  v113[4] = &protocol witness table for _PaddingLayout;
  v113[1] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v113[2] = v42;
  v76 = v100;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v100);
  v77 = v103;
  sub_10003D908(v103, v76, v101);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v77, v76);
}

uint64_t sub_1000647D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v24 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ModifiedContent(0, v10, &type metadata for _PaddingLayout);
  v23 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v23 - v15;
  v18 = type metadata accessor for WidgetLink(0, a2, a3, v17);
  v19 = (*(uint64_t (**)(void))(a1 + *(int *)(v18 + 40)))();
  v20 = static Edge.Set.vertical.getter(v19);
  View.padding(_:_:)(v20, *(_QWORD *)(a1 + *(int *)(v18 + 36)), 0, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  v25 = a3;
  v26 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  sub_10003E53C((uint64_t)v13, v11, (uint64_t)v16);
  v21 = *(void (**)(char *, uint64_t))(v23 + 8);
  v21(v13, v11);
  sub_10003D908((uint64_t)v16, v11, v24);
  return ((uint64_t (*)(char *, uint64_t))v21)(v16, v11);
}

unint64_t sub_100064978()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083508;
  if (!qword_100083508)
  {
    v1 = type metadata accessor for PlainButtonStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PlainButtonStyle, v1);
    atomic_store(result, (unint64_t *)&qword_100083508);
  }
  return result;
}

uint64_t sub_1000649C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_100081038);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100064A08(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_100081038);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100064A48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083518;
  if (!qword_100083518)
  {
    v1 = sub_10000950C(&qword_100083510);
    result = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100083518);
  }
  return result;
}

uint64_t sub_100064A94@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000647D0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100064AA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  unint64_t v7;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _PaddingLayout);
  v19 = v2;
  v20 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
  v4 = type metadata accessor for Link(255, v3);
  v5 = type metadata accessor for PlainButtonStyle(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Link<A>, v4);
  v7 = sub_100064978();
  v15 = v4;
  v16 = v5;
  v17 = WitnessTable;
  v18 = v7;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v15, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v9 = sub_10000950C(&qword_100083510);
  v10 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v9);
  v11 = type metadata accessor for ModifiedContent(255, v10, &type metadata for _PaddingLayout);
  v13 = type metadata accessor for _ConditionalContent(255, v11, v1, v12);
  v15 = v4;
  v16 = v5;
  v17 = WitnessTable;
  v18 = v7;
  swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  sub_100064A48();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v13);
}

unint64_t sub_100064C3C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_1000051BC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_100005150(&qword_100081DD0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = *(int *)(a3 + 24);
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    v20 = sub_100005150(&qword_100081DC8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = v18;
      v23 = v20;
      v24 = 1;
    }
    else
    {
      v25 = *v19;
      *v18 = *v19;
      swift_retain(v25);
      v22 = v18;
      v23 = v20;
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v23, v24);
  }
  return a1;
}

uint64_t sub_100064DAC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  sub_100005650(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v8 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v7, v8) != 1)
    return swift_release(*v7);
  v9 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
}

uint64_t sub_100064E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_1000051BC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = *(int *)(a3 + 24);
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
    v20 = 1;
  }
  else
  {
    v21 = *v17;
    *v16 = *v17;
    swift_retain(v21);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v18, v20);
  return a1;
}

uint64_t sub_100064FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_1000051BC(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_100005650(v8, v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_10000F008(a1 + v10, &qword_100081DD0);
    v13 = sub_100005150(&qword_100081DD0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v17 = *(int *)(a3 + 24);
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    sub_10000F008(a1 + v17, &qword_100081DC8);
    v20 = sub_100005150(&qword_100081DC8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v19;
      *v18 = *v19;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
  }
  return a1;
}

uint64_t sub_100065130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100005150(&qword_100081DD0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_100005150(&qword_100081DC8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100065268(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_100005650(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_10000F008(a1 + v10, &qword_100081DD0);
    v13 = sub_100005150(&qword_100081DD0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = *(int *)(a3 + 24);
    v16 = (void *)(a1 + v15);
    v17 = (char *)a2 + v15;
    sub_10000F008(a1 + v15, &qword_100081DC8);
    v18 = sub_100005150(&qword_100081DC8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000653D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000653E0);
}

uint64_t sub_1000653E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100005150(&qword_100081DE0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_100005150(&qword_100081DD8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100065480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006548C);
}

uint64_t sub_10006548C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v8 = sub_100005150(&qword_100081DE0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_100005150(&qword_100081DD8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for Logo(uint64_t a1)
{
  uint64_t result;

  result = qword_100083580;
  if (!qword_100083580)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Logo);
  return result;
}

void sub_100065568(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = "\t";
  sub_10003A230(319, (unint64_t *)&unk_100081E58, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003A230(319, &qword_100081E50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_100065618(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100072668, 1);
}

void sub_100065628()
{
  qword_100083520 = 0x4024000000000000;
}

uint64_t sub_100065638@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (**v38)@<X0>(uint64_t@<X8>);
  double v39;
  uint64_t v40;
  char v41;
  __n128 v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t KeyPath;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v2 = v1;
  v87 = a1;
  v3 = type metadata accessor for WidgetFamily(0);
  v76 = *(_QWORD *)(v3 - 8);
  v77 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100005150(&qword_100081038);
  __chkstk_darwin(v6);
  v74 = (uint64_t)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100005150(&qword_1000835C0);
  __chkstk_darwin(v75);
  v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100005150(&qword_1000835C8);
  __chkstk_darwin(v78);
  v81 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100005150(&qword_1000835D0);
  __chkstk_darwin(v83);
  v82 = (uint64_t)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_1000835D8);
  __chkstk_darwin(v12);
  v84 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005150(&qword_1000835E0);
  v85 = *(_QWORD *)(v14 - 8);
  v86 = v14;
  __chkstk_darwin(v14);
  v80 = (uint64_t)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v79 = (uint64_t)&v74 - v17;
  v18 = type metadata accessor for Logo(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for WidgetRenderingMode(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v74 - v26;
  v28 = sub_100051EF4((uint64_t *)((char *)&v74 - v26));
  static WidgetRenderingMode.vibrant.getter(v28);
  v29 = static WidgetRenderingMode.== infix(_:_:)(v27, v24);
  v30 = *(void (**)(char *, uint64_t))(v22 + 8);
  v30(v24, v21);
  v30(v27, v21);
  sub_100065ED0(v2, (uint64_t)v20);
  if ((v29 & 1) != 0)
  {
    sub_100065F14((uint64_t)v20);
  }
  else
  {
    v31 = *(_QWORD *)v20;
    v32 = v20[8];
    sub_1000051BC(*(_QWORD *)v20, v32);
    v33 = sub_100051C3C(v31, v32);
    sub_100005650(v31, v32);
    sub_100065F14((uint64_t)v20);
    if ((v33 & 1) == 0)
    {
      v72 = 1;
      v67 = v86;
      v71 = v87;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v71, v72, 1, v67);
    }
  }
  sub_100051DF4(v5);
  v34 = v74;
  sub_100060D80((uint64_t)v5, v74);
  (*(void (**)(_QWORD *, uint64_t))(v76 + 8))(v5, v77);
  v35 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 0, 1, v35);
  v36 = sub_10000EEF8(v34, (uint64_t)v9, &qword_100081038);
  v37 = v75;
  *(_QWORD *)&v9[*(int *)(v75 + 36)] = 0;
  v38 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v9[*(int *)(v37 + 40)];
  *v38 = sub_100065C3C;
  v38[1] = 0;
  if (qword_100081008 != -1)
    v36 = swift_once(&qword_100081008, sub_100065628);
  v39 = -*(double *)&qword_100083520;
  v40 = static Edge.Set.all.getter(v36);
  v41 = v40;
  v42.n128_f64[0] = v39;
  v43 = EdgeInsets.init(_all:)(v40, v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v50 = v81;
  sub_10000EFC4((uint64_t)v9, v81, &qword_1000835C0);
  v51 = v50 + *(int *)(v78 + 36);
  *(_BYTE *)v51 = v41;
  *(double *)(v51 + 8) = v43;
  *(_QWORD *)(v51 + 16) = v45;
  *(_QWORD *)(v51 + 24) = v47;
  *(_QWORD *)(v51 + 32) = v49;
  *(_BYTE *)(v51 + 40) = 0;
  sub_10000F008((uint64_t)v9, &qword_1000835C0);
  v52 = *(_QWORD *)v2;
  v53 = *(_BYTE *)(v2 + 8);
  sub_1000051BC(*(_QWORD *)v2, v53);
  v54 = sub_100051C3C(v52, v53);
  sub_100005650(v52, v53);
  sub_1000051BC(v52, v53);
  v55 = sub_100051C3C(v52, v53);
  v56 = sub_100005650(v52, v53);
  if ((v54 & 1) != 0)
    v57 = 0xC010000000000000;
  else
    v57 = 0;
  if ((v55 & 1) != 0)
    v58 = 0xC010000000000000;
  else
    v58 = 0;
  v59 = static Edge.Set.all.getter(v56);
  v60 = v82;
  sub_10000EFC4(v50, v82, &qword_1000835C8);
  v61 = v83;
  v62 = v60 + *(int *)(v83 + 36);
  *(_BYTE *)v62 = v59;
  *(_QWORD *)(v62 + 8) = v57;
  *(_OWORD *)(v62 + 16) = xmmword_10006EF30;
  *(_QWORD *)(v62 + 32) = v58;
  *(_BYTE *)(v62 + 40) = 0;
  sub_10000F008(v50, &qword_1000835C8);
  v63 = sub_100065F50();
  v64 = (uint64_t)v84;
  View.accessibilityHidden(_:)(1, v61, v63);
  sub_10000F008(v60, &qword_1000835D0);
  KeyPath = swift_getKeyPath(&unk_10006EFC0);
  v66 = v80;
  sub_10000EFC4(v64, v80, &qword_1000835D8);
  v67 = v86;
  v68 = v66 + *(int *)(v86 + 36);
  *(_QWORD *)v68 = KeyPath;
  *(_BYTE *)(v68 + 8) = 0;
  sub_10000F008(v64, &qword_1000835D8);
  v69 = v79;
  sub_10000EEF8(v66, v79, &qword_1000835E0);
  v70 = v69;
  v71 = v87;
  sub_10000EEF8(v70, v87, &qword_1000835E0);
  v72 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v71, v72, 1, v67);
}

uint64_t sub_100065C3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  unint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  __n128 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v36 = a1;
  v1 = type metadata accessor for DynamicTypeSize(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005150(&qword_100083600);
  v34 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100005150(&qword_100083608);
  v8 = *(_QWORD *)(v35 - 8);
  v9 = __chkstk_darwin(v35);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = Image.init(_internalSystemName:)(0x7374736163646F70, 0xE800000000000000, v9);
  v13 = static Font.title3.getter();
  KeyPath = swift_getKeyPath(&unk_10006EFE8);
  v37 = v12;
  v38 = KeyPath;
  v39 = v13;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DynamicTypeSize.large(_:), v1);
  v15 = sub_100005150(&qword_100083610);
  v16 = sub_100066050();
  View.dynamicTypeSize(_:)(v4, v15, v16);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_release(v37);
  swift_release(v38);
  swift_release(v39);
  v37 = v15;
  v38 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v37, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  View.unredacted()(v5, OpaqueTypeConformance2);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v7, v5);
  if (qword_100081008 != -1)
    v18 = swift_once(&qword_100081008, sub_100065628);
  v19 = qword_100083520;
  v20 = static Edge.Set.all.getter(v18);
  v21 = v20;
  v22.n128_u64[0] = v19;
  v23 = EdgeInsets.init(_all:)(v20, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v35;
  v30 = v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v36, v11, v35);
  v32 = v30 + *(int *)(sub_100005150(&qword_100083620) + 36);
  *(_BYTE *)v32 = v21;
  *(double *)(v32 + 8) = v23;
  *(_QWORD *)(v32 + 16) = v25;
  *(_QWORD *)(v32 + 24) = v27;
  *(_QWORD *)(v32 + 32) = v29;
  *(_BYTE *)(v32 + 40) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v31);
}

uint64_t sub_100065ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100065F14(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Logo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100065F50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000835E8;
  if (!qword_1000835E8)
  {
    v1 = sub_10000950C(&qword_1000835D0);
    sub_100065FBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000835E8);
  }
  return result;
}

unint64_t sub_100065FBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000835F0;
  if (!qword_1000835F0)
  {
    v1 = sub_10000950C(&qword_1000835C8);
    sub_10000EEA8(&qword_1000835F8, &qword_1000835C0, (uint64_t)&unk_10006EED8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000835F0);
  }
  return result;
}

unint64_t sub_100066050()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083618;
  if (!qword_100083618)
  {
    v1 = sub_10000950C(&qword_100083610);
    sub_10000EEA8(&qword_1000827E8, &qword_1000827F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083618);
  }
  return result;
}

unint64_t sub_1000660D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083628;
  if (!qword_100083628)
  {
    v1 = sub_10000950C(&qword_100083630);
    sub_100066180(&qword_100083638, &qword_1000835E0, (void (*)(void))sub_10006615C, (void (*)(void))sub_1000661F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100083628);
  }
  return result;
}

uint64_t sub_10006615C()
{
  return sub_100066180(&qword_100083640, &qword_1000835D8, (void (*)(void))sub_100065F50, (void (*)(void))sub_10000ED38);
}

uint64_t sub_100066180(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000950C(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000661F0()
{
  unint64_t result;

  result = qword_100083648;
  if (!qword_100083648)
  {
    result = swift_getWitnessTable(&unk_10006EC30, &type metadata for WidgetPodcastsAccentedModifier);
    atomic_store(result, (unint64_t *)&qword_100083648);
  }
  return result;
}

uint64_t sub_100066234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100066240);
}

uint64_t sub_100066240(uint64_t a1, uint64_t a2)
{
  uint64_t Entry;

  Entry = type metadata accessor for UpNextEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Entry - 8) + 48))(a1, a2, Entry);
}

uint64_t sub_10006627C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100066288);
}

uint64_t sub_100066288(uint64_t a1, uint64_t a2)
{
  uint64_t Entry;

  Entry = type metadata accessor for UpNextEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Entry - 8) + 56))(a1, a2, a2, Entry);
}

uint64_t type metadata accessor for EpisodeListWidgetXL(uint64_t a1)
{
  uint64_t result;

  result = qword_1000836A8;
  if (!qword_1000836A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeListWidgetXL);
  return result;
}

uint64_t sub_100066304(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000726B8, 1);
}

double sub_100066314@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000663C4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, type metadata accessor for Logo, &qword_1000821F0).n128_u64[0];
  return result;
}

double sub_10006636C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000663C4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, type metadata accessor for WidgetEmptyText, &qword_1000821E8).n128_u64[0];
  return result;
}

__n128 sub_1000663C4@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(_QWORD), uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_10000EF3C(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100005150(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

double sub_100066590@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11, char a12, double a13, char a14, uint64_t a15, uint64_t a16)
{
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  double result;
  __int128 v37;
  double v38;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v18 = a13;
  v19 = a11;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a11;
  if ((a12 & 1) != 0)
    v29 = v28;
  v30 = a13;
  if ((a14 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v41 = a5;
    v40 = a3;
    v38 = a1;
    v39 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v20 = v39;
    a1 = v38;
    a3 = v40;
    v19 = a11;
    a5 = v41;
    v18 = a13;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a12 & 1, *(_QWORD *)&v18, a14 & 1, a15, a16);
  *(double *)a9 = a10;
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  result = *(double *)v43;
  v37 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v37;
  *(_OWORD *)(a9 + 40) = v34;
  return result;
}

void sub_10006673C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  __n128 v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t KeyPath;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v67 = a2;
  v3 = type metadata accessor for Color.RGBColorSpace(0);
  v63 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)&v64 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005150(&qword_1000836E8);
  __chkstk_darwin(v6);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100005150(&qword_1000836F0);
  __chkstk_darwin(v65);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v66 = (uint64_t)&v62 - v12;
  v13 = type metadata accessor for UpNextEntry.Episode(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005150(&qword_1000836F8);
  __chkstk_darwin(v17);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005150(&qword_100083700);
  __chkstk_darwin(v20);
  v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v62 - v24;
  v26 = a1[3];
  if (*(_QWORD *)(v26 + 16))
  {
    sub_10000EF3C(v26 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), (uint64_t)v16, type metadata accessor for UpNextEntry.Episode);
    sub_100066BF4((uint64_t)v16, (uint64_t)v19);
    sub_10000EF80((uint64_t)v16, type metadata accessor for UpNextEntry.Episode);
    v27 = type metadata accessor for EpisodeListWidgetXL(0);
    v28 = *(uint64_t *)((char *)a1 + *(int *)(v27 + 20));
    v29 = static Edge.Set.all.getter(v27);
    v30 = v29;
    v31.n128_u64[0] = v28;
    v32 = EdgeInsets.init(_all:)(v29, v31);
    v34 = v33;
    v36 = v35;
    v38 = v37;
    sub_10000EFC4((uint64_t)v19, (uint64_t)v22, &qword_1000836F8);
    v39 = &v22[*(int *)(v20 + 36)];
    *v39 = v30;
    *((double *)v39 + 1) = v32;
    *((_QWORD *)v39 + 2) = v34;
    *((_QWORD *)v39 + 3) = v36;
    *((_QWORD *)v39 + 4) = v38;
    v39[40] = 0;
    sub_10000F008((uint64_t)v19, &qword_1000836F8);
    v40 = sub_10000EEF8((uint64_t)v22, (uint64_t)v25, &qword_100083700);
    *(_QWORD *)v8 = static HorizontalAlignment.leading.getter(v40);
    *((_QWORD *)v8 + 1) = 0;
    v8[16] = 1;
    v41 = sub_100005150(&qword_100083708);
    sub_10006813C(a1, (unint64_t *)&v8[*(int *)(v41 + 44)]);
    v42 = sub_100005150(&qword_100081968);
    v43 = swift_allocObject(v42, 48, 7);
    *(_OWORD *)(v43 + 16) = xmmword_10006DBB0;
    v44 = enum case for Color.RGBColorSpace.sRGB(_:);
    v45 = v64;
    v46 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 104);
    v46(v5, enum case for Color.RGBColorSpace.sRGB(_:), v64);
    *(_QWORD *)(v43 + 32) = Color.init(_:white:opacity:)(v5, 0.0, 0.14);
    v46(v5, v44, v45);
    v47 = Color.init(_:white:opacity:)(v5, 0.0, 0.0);
    *(_QWORD *)(v43 + 40) = v47;
    v68 = v43;
    specialized Array._endMutation()(v47);
    v48 = Gradient.init(colors:)(v68);
    v49 = static UnitPoint.leading.getter();
    v51 = v50;
    v52 = static UnitPoint.trailing.getter();
    LinearGradient.init(gradient:startPoint:endPoint:)(&v68, v48, v49, v51, v52, v53);
    v54 = v68;
    v64 = v69;
    v55 = v70;
    v56 = v71;
    KeyPath = swift_getKeyPath(&unk_10006F098);
    sub_10000EFC4((uint64_t)v8, (uint64_t)v10, &qword_1000836E8);
    v58 = &v10[*(int *)(v65 + 36)];
    *(_QWORD *)v58 = v54;
    *(_OWORD *)(v58 + 8) = v64;
    *((_QWORD *)v58 + 3) = v55;
    *((_QWORD *)v58 + 4) = v56;
    *((_QWORD *)v58 + 5) = KeyPath;
    v58[48] = 0;
    sub_10000F008((uint64_t)v8, &qword_1000836E8);
    v59 = v66;
    sub_10000EEF8((uint64_t)v10, v66, &qword_1000836F0);
    sub_10000EFC4((uint64_t)v25, (uint64_t)v22, &qword_100083700);
    sub_10000EFC4(v59, (uint64_t)v10, &qword_1000836F0);
    v60 = v67;
    sub_10000EFC4((uint64_t)v22, v67, &qword_100083700);
    v61 = sub_100005150(&qword_100083710);
    sub_10000EFC4((uint64_t)v10, v60 + *(int *)(v61 + 48), &qword_1000836F0);
    sub_10000F008(v59, &qword_1000836F0);
    sub_10000F008((uint64_t)v25, &qword_100083700);
    sub_10000F008((uint64_t)v10, &qword_1000836F0);
    sub_10000F008((uint64_t)v22, &qword_100083700);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100066BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id (**v26)@<X0>(uint64_t@<X8>);
  uint64_t KeyPath;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  char v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v44 = a2;
  v3 = type metadata accessor for EpisodeListWidgetXL(0);
  v42 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v42 + 64);
  __chkstk_darwin(v3);
  v38 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UpNextEntry.Episode(0);
  v37 = *(_QWORD *)(v5 - 8);
  v6 = v5;
  v41 = v5;
  v7 = *(_QWORD *)(v37 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_100081038);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005150(&qword_100083758);
  __chkstk_darwin(v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100005150(&qword_100083760);
  __chkstk_darwin(v39);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100005150(&qword_100081FE8);
  __chkstk_darwin(v40);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(int *)(v6 + 60);
  v36 = (_QWORD *)a1;
  sub_10000EFC4(a1 + v19, (uint64_t)v11, &qword_100081038);
  sub_10000EF3C(a1, (uint64_t)v8, type metadata accessor for UpNextEntry.Episode);
  v20 = v38;
  sub_10000EF3C(v43, v38, type metadata accessor for EpisodeListWidgetXL);
  v21 = *(unsigned __int8 *)(v37 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = *(unsigned __int8 *)(v42 + 80);
  v24 = (v7 + v23 + v22) & ~v23;
  v25 = swift_allocObject(&unk_10007F0E0, v24 + v4, v21 | v23 | 7);
  sub_10000FC78((uint64_t)v8, v25 + v22, type metadata accessor for UpNextEntry.Episode);
  sub_10000FC78(v20, v25 + v24, type metadata accessor for EpisodeListWidgetXL);
  sub_10000EEF8((uint64_t)v11, (uint64_t)v14, &qword_100081038);
  *(_QWORD *)&v14[*(int *)(v12 + 36)] = 0;
  v26 = (id (**)@<X0>(uint64_t@<X8>))&v14[*(int *)(v12 + 40)];
  *v26 = sub_100068DAC;
  v26[1] = (id (*)@<X0>(uint64_t@<X8>))v25;
  KeyPath = swift_getKeyPath(&unk_10006F178);
  sub_10000EFC4((uint64_t)v14, (uint64_t)v16, &qword_100083758);
  v28 = &v16[*(int *)(v39 + 36)];
  *(_QWORD *)v28 = KeyPath;
  v28[8] = 1;
  sub_10000F008((uint64_t)v14, &qword_100083758);
  v30 = *v36;
  v29 = v36[1];
  v31 = v36;
  sub_10000EFC4((uint64_t)v16, (uint64_t)v18, &qword_100083760);
  v32 = &v18[*(int *)(v40 + 52)];
  *(_QWORD *)v32 = v30;
  *((_QWORD *)v32 + 1) = v29;
  swift_bridgeObjectRetain(v29);
  sub_10000F008((uint64_t)v16, &qword_100083760);
  v33 = *(_QWORD *)((char *)v31 + *(int *)(v41 + 84)) != 0;
  v45 = v31;
  sub_10003A964(v33, (void (*)(uint64_t, __n128))sub_100068EAC, v44);
  return sub_10000F008((uint64_t)v18, &qword_100081FE8);
}

id sub_100066F58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  id result;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];

  v37[1] = a3;
  v5 = sub_100005150(&qword_100081050);
  __chkstk_darwin(v5);
  v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[0] = sub_100005150(&qword_100083768);
  __chkstk_darwin(v37[0]);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v10);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v11 = sub_100005150(&qword_100083770);
  sub_10006723C((uint64_t)a1, a2, &v9[*(int *)(v11 + 44)]);
  v12 = sub_100005150(&qword_100081D40);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10006DE90;
  v14 = a1[8];
  *(_QWORD *)(v13 + 32) = a1[7];
  *(_QWORD *)(v13 + 40) = v14;
  v15 = a1[3];
  *(_QWORD *)(v13 + 48) = a1[2];
  *(_QWORD *)(v13 + 56) = v15;
  v16 = a1[10];
  *(_QWORD *)(v13 + 64) = a1[9];
  *(_QWORD *)(v13 + 72) = v16;
  v17 = (char *)a1 + *(int *)(type metadata accessor for UpNextEntry.Episode(0) + 88);
  v18 = type metadata accessor for WidgetPredictedPlayState(0);
  v19 = &v17[*(int *)(v18 + 32)];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)(v13 + 80) = *(_QWORD *)v19;
  *(_QWORD *)(v13 + 88) = v20;
  sub_10000EFC4((uint64_t)&v17[*(int *)(v18 + 24)], (uint64_t)v7, &qword_100081050);
  v21 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v22 = *(_QWORD *)(v21 - 8);
  LODWORD(v17) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  v23 = swift_bridgeObjectRetain(v20);
  if ((_DWORD)v17 == 1)
  {
    sub_10000F008((uint64_t)v7, &qword_100081050);
    v24 = 0.0;
  }
  else
  {
    v24 = PlayButtonTimeFormatHelper.timeLeft.getter(v23);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v21);
  }
  result = (id)AXDurationStringForDurationWithSeconds(1, v24);
  if (result)
  {
    v26 = result;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v29 = v28;

    *(_QWORD *)(v13 + 96) = v27;
    *(_QWORD *)(v13 + 104) = v29;
    v38[0] = v13;
    v30 = sub_100005150(&qword_100081D30);
    v31 = sub_10000EEA8(&qword_100081F00, &qword_100081D30, (uint64_t)&protocol conformance descriptor for [A]);
    v32 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v30, v31);
    v34 = v33;
    swift_bridgeObjectRelease(v13);
    v38[0] = v32;
    v38[1] = v34;
    v35 = sub_10000EEA8(&qword_100083778, &qword_100083768, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v36 = sub_1000248B8();
    View.accessibilityLabel<A>(_:)(v38, v37[0], &type metadata for String, v35, v36);
    swift_bridgeObjectRelease(v34);
    return (id)sub_10000F008((uint64_t)v9, &qword_100083768);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006723C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, _QWORD, uint64_t);
  uint64_t v43;
  void (*v44)(_BYTE *, _QWORD, uint64_t);
  double v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t KeyPath;
  _BYTE *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  int *v97;
  _BYTE *v98;
  _BYTE *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  _BYTE *v118;
  _QWORD *v119;
  int *v120;
  char *v121;
  _BYTE *v122;
  _BYTE v124[4];
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  _BYTE *v133;
  _BYTE *v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  _BYTE *v141;
  _BYTE *v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE *v145;
  uint64_t v146;
  _BYTE *v147;
  _BYTE *v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  _QWORD *v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  unsigned __int8 v160;
  _BYTE *v161;
  unsigned __int8 v162;
  _BYTE *v163;
  unsigned __int8 v164;
  uint64_t v165;
  unsigned __int8 v166;
  _BYTE *v167;
  unsigned __int8 v168;
  uint64_t v169;
  _BYTE *v170;

  v143 = a2;
  v154 = a3;
  v153 = type metadata accessor for WidgetEmptyText(0);
  __chkstk_darwin(v153);
  v135 = &v124[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v149 = sub_100005150(&qword_100083780);
  __chkstk_darwin(v149);
  v152 = &v124[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v151 = sub_100005150(&qword_100083788);
  __chkstk_darwin(v151);
  v142 = &v124[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v139 = type metadata accessor for PlayButtonLarge(0);
  __chkstk_darwin(v139);
  v140 = &v124[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v141 = &v124[-v9];
  v138 = type metadata accessor for Font.Leading(0);
  v137 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v136 = &v124[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100005150(&qword_100081980);
  __chkstk_darwin(v11);
  v134 = &v124[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v127 = type metadata accessor for EpisodeCaptionView(0);
  __chkstk_darwin(v127);
  v129 = &v124[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v128 = sub_100005150(&qword_100081B70);
  __chkstk_darwin(v128);
  v132 = &v124[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v130 = sub_100005150(&qword_100082230);
  __chkstk_darwin(v130);
  v133 = &v124[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v131 = sub_100005150(&qword_100082238);
  __chkstk_darwin(v131);
  v144 = &v124[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v145 = &v124[-v18];
  v19 = sub_100005150(&qword_100083790);
  __chkstk_darwin(v19);
  v150 = &v124[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v155 = &v124[-v22];
  v23 = type metadata accessor for EpisodeViewStyle(0);
  __chkstk_darwin(v23);
  v25 = &v124[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  v28 = &v124[-v27];
  v29 = type metadata accessor for UpNextEntry.Episode(0);
  __chkstk_darwin(v29);
  v31 = &v124[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = type metadata accessor for WidgetArtworkView(0);
  __chkstk_darwin(v32);
  v148 = &v124[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v34);
  v36 = &v124[-v35];
  __chkstk_darwin(v37);
  v39 = &v124[-v38];
  v146 = a1;
  sub_10000EF3C(a1, (uint64_t)v31, type metadata accessor for UpNextEntry.Episode);
  v40 = enum case for WidgetFamily.systemExtraLarge(_:);
  v41 = type metadata accessor for WidgetFamily(0);
  v42 = *(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104);
  v125 = v40;
  v43 = v40;
  v44 = v42;
  v42(v28, v43, v41);
  swift_storeEnumTagMultiPayload(v28, v23, 1);
  sub_10000EF3C((uint64_t)v28, (uint64_t)v25, type metadata accessor for EpisodeViewStyle);
  v126 = v23;
  if (swift_getEnumCaseMultiPayload(v25, v23) == 1)
    v45 = 8.0;
  else
    v45 = 6.0;
  sub_10000EF80((uint64_t)v25, type metadata accessor for EpisodeViewStyle);
  sub_10000EF80((uint64_t)v28, type metadata accessor for EpisodeViewStyle);
  sub_10000FC78((uint64_t)v31, (uint64_t)v36, type metadata accessor for UpNextEntry.Episode);
  *(double *)&v36[*(int *)(v32 + 20)] = v45;
  v147 = v39;
  sub_10000FC78((uint64_t)v36, (uint64_t)v39, type metadata accessor for WidgetArtworkView);
  v46 = *(unsigned __int8 *)(v143 + 16);
  if (v46 == 2)
  {
    v47 = v146;
    v48 = v129;
    v49 = sub_10000EF3C(v146, (uint64_t)v129, type metadata accessor for UpNextEntry.Episode);
    v50 = v127;
    v48[*(int *)(v127 + 20)] = 1;
    v48[*(int *)(v50 + 24)] = 0;
    v48[*(int *)(v50 + 28)] = 1;
    v51 = static Font.caption2.getter(v49);
    v52 = Font.bold()();
    swift_release(v51);
    KeyPath = swift_getKeyPath(&unk_10006F1A8);
    v54 = v132;
    sub_10000EF3C((uint64_t)v48, (uint64_t)v132, type metadata accessor for EpisodeCaptionView);
    v55 = (uint64_t *)&v54[*(int *)(v128 + 36)];
    *v55 = KeyPath;
    v55[1] = v52;
    sub_10000EF80((uint64_t)v48, type metadata accessor for EpisodeCaptionView);
    v56 = enum case for Text.Case.uppercase(_:);
    v57 = type metadata accessor for Text.Case(0);
    v58 = *(_QWORD *)(v57 - 8);
    v59 = (uint64_t)v134;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v58 + 104))(v134, v56, v57);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
    v60 = swift_getKeyPath(&unk_10006F1D8);
    v61 = (uint64_t)v133;
    v62 = (uint64_t *)&v133[*(int *)(v130 + 36)];
    v63 = sub_100005150(&qword_100081978);
    sub_10000EFC4(v59, (uint64_t)v62 + *(int *)(v63 + 28), &qword_100081980);
    *v62 = v60;
    sub_10000EFC4((uint64_t)v54, v61, &qword_100081B70);
    sub_10000F008(v59, &qword_100081980);
    sub_10000F008((uint64_t)v54, &qword_100081B70);
    v64 = swift_getKeyPath(&unk_10006F098);
    v65 = v144;
    sub_10000EFC4(v61, (uint64_t)v144, &qword_100082230);
    v66 = &v65[*(int *)(v131 + 36)];
    *(_QWORD *)v66 = v64;
    v66[8] = 0;
    sub_10000F008(v61, &qword_100082230);
    sub_10000EEF8((uint64_t)v65, (uint64_t)v145, &qword_100082238);
    v67 = *(_QWORD *)(v47 + 80);
    v156 = *(_QWORD *)(v47 + 72);
    v157 = v67;
    v68 = sub_1000248B8();
    swift_bridgeObjectRetain(v67);
    v69 = Text.init<A>(_:)(&v156, &type metadata for String, v68);
    v71 = v70;
    v73 = v72;
    v75 = v74 & 1;
    v76 = static Font.subheadline.getter();
    v77 = v137;
    v78 = v136;
    v79 = v138;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v137 + 104))(v136, enum case for Font.Leading.tight(_:), v138);
    v80 = Font.leading(_:)(v78, v76);
    swift_release(v76);
    (*(void (**)(_BYTE *, uint64_t))(v77 + 8))(v78, v79);
    v81 = Text.font(_:)(v80, v69, v71, v75, v73);
    v83 = v82;
    v85 = v84;
    v87 = v86;
    swift_release(v80);
    LOBYTE(v80) = v85 & 1;
    sub_10000EEE8(v69, v71, v75);
    swift_bridgeObjectRelease(v73);
    v88 = v141;
    v89 = sub_10000EF3C(v146, (uint64_t)v141, type metadata accessor for UpNextEntry.Episode);
    v90 = static Alignment.center.getter(v89);
    v91 = (uint64_t *)&v88[*(int *)(v139 + 20)];
    *v91 = v90;
    v91[1] = v92;
    v93 = v145;
    v94 = v144;
    sub_10000EFC4((uint64_t)v145, (uint64_t)v144, &qword_100082238);
    v95 = v140;
    sub_10000EF3C((uint64_t)v88, (uint64_t)v140, type metadata accessor for PlayButtonLarge);
    v96 = v142;
    sub_10000EFC4((uint64_t)v94, (uint64_t)v142, &qword_100082238);
    v97 = (int *)sub_100005150(&qword_100083798);
    *(_QWORD *)&v96[v97[12]] = 0x4010000000000000;
    v98 = &v96[v97[16]];
    *(_QWORD *)v98 = v81;
    *((_QWORD *)v98 + 1) = v83;
    v98[16] = v80;
    *((_QWORD *)v98 + 3) = v87;
    *((_QWORD *)v98 + 4) = 0x3FF0000000000000;
    *(_QWORD *)&v96[v97[20]] = 0x4010000000000000;
    sub_10000EF3C((uint64_t)v95, (uint64_t)&v96[v97[24]], type metadata accessor for PlayButtonLarge);
    sub_100024C4C(v81, v83, v80);
    swift_bridgeObjectRetain(v87);
    sub_100024C4C(v81, v83, v80);
    swift_bridgeObjectRetain(v87);
    sub_10000EF80((uint64_t)v95, type metadata accessor for PlayButtonLarge);
    sub_10000EEE8(v81, v83, v80);
    swift_bridgeObjectRelease(v87);
    sub_10000F008((uint64_t)v94, &qword_100082238);
    v99 = v152;
    sub_10000EFC4((uint64_t)v96, (uint64_t)v152, &qword_100083788);
    swift_storeEnumTagMultiPayload(v99, v149, 1);
    v100 = sub_100068EC4();
    v101 = sub_10000EEA8(&qword_1000837A0, &qword_100083788, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v99, v153, v151, v100, v101);
    sub_10000F008((uint64_t)v96, &qword_100083788);
    sub_10000EF80((uint64_t)v88, type metadata accessor for PlayButtonLarge);
    sub_10000EEE8(v81, v83, v80);
    swift_bridgeObjectRelease(v87);
    v102 = sub_10000F008((uint64_t)v93, &qword_100082238);
  }
  else
  {
    v103 = v46 & 1;
    v104 = v153;
    v105 = v135;
    v106 = &v135[*(int *)(v153 + 20)];
    v44(v106, v125, v41);
    swift_storeEnumTagMultiPayload(v106, v126, 1);
    *v105 = v103;
    v107 = v152;
    sub_10000EF3C((uint64_t)v105, (uint64_t)v152, type metadata accessor for WidgetEmptyText);
    swift_storeEnumTagMultiPayload(v107, v149, 0);
    v108 = sub_100068EC4();
    v109 = sub_10000EEA8(&qword_1000837A0, &qword_100083788, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v107, v104, v151, v108, v109);
    v102 = sub_10000EF80((uint64_t)v105, type metadata accessor for WidgetEmptyText);
  }
  v110 = static Alignment.center.getter(v102);
  sub_100066590(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v156, 12.0, 0.0, 1, 0.0, 1, v110, v111);
  v112 = v156;
  v113 = v157;
  v114 = v158;
  v139 = v159;
  LODWORD(v140) = v160;
  v141 = v161;
  LODWORD(v153) = v162;
  v152 = v163;
  LODWORD(v151) = v164;
  v149 = v165;
  LODWORD(v146) = v166;
  v145 = v167;
  LODWORD(v144) = v168;
  v143 = v169;
  v142 = v170;
  v115 = (uint64_t)v147;
  v116 = v148;
  sub_10000EF3C((uint64_t)v147, (uint64_t)v148, type metadata accessor for WidgetArtworkView);
  v117 = v155;
  v118 = v150;
  sub_10000EFC4((uint64_t)v155, (uint64_t)v150, &qword_100083790);
  v119 = v154;
  *v154 = 0x4030000000000000;
  v120 = (int *)sub_100005150(&qword_1000837A8);
  sub_10000EF3C((uint64_t)v116, (uint64_t)v119 + v120[12], type metadata accessor for WidgetArtworkView);
  *(_QWORD *)((char *)v119 + v120[16]) = 0x4020000000000000;
  sub_10000EFC4((uint64_t)v118, (uint64_t)v119 + v120[20], &qword_100083790);
  v121 = (char *)v119 + v120[24];
  *(_QWORD *)v121 = v112;
  *((_QWORD *)v121 + 1) = v113;
  v121[16] = v114;
  *((_QWORD *)v121 + 3) = v139;
  v121[32] = (char)v140;
  *((_QWORD *)v121 + 5) = v141;
  v121[48] = v153;
  *((_QWORD *)v121 + 7) = v152;
  v121[64] = v151;
  *((_QWORD *)v121 + 9) = v149;
  v121[80] = v146;
  *((_QWORD *)v121 + 11) = v145;
  v121[96] = (char)v144;
  v122 = v142;
  *((_QWORD *)v121 + 13) = v143;
  *((_QWORD *)v121 + 14) = v122;
  sub_10000F008((uint64_t)v117, &qword_100083790);
  sub_10000EF80(v115, type metadata accessor for WidgetArtworkView);
  sub_10000F008((uint64_t)v118, &qword_100083790);
  return sub_10000EF80((uint64_t)v116, type metadata accessor for WidgetArtworkView);
}

uint64_t sub_100068000(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[3];
  _QWORD v17[2];

  v3 = type metadata accessor for UpNextEntry.Episode(0);
  v4 = a2 + *(int *)(v3 + 88);
  result = type metadata accessor for WidgetPredictedPlayState(0);
  v6 = (_QWORD *)(v4 + *(int *)(result + 32));
  v7 = v6[1];
  v17[0] = *v6;
  v17[1] = v7;
  v8 = (uint64_t *)(a2 + *(int *)(v3 + 84));
  v9 = *v8;
  if (*v8)
  {
    v10 = v8[1];
    v11 = v8[2];
    v16[0] = *v8;
    v16[1] = v10;
    v16[2] = v11;
    swift_bridgeObjectRetain(v7);
    sub_1000093E0(v9, v10, v11);
    v12 = sub_100005150(&qword_100081FE8);
    v13 = sub_10000EEA8(&qword_100082008, &qword_100081FE8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    v14 = sub_1000248B8();
    v15 = sub_100009418();
    View.accessibilityAction<A, B>(named:intent:)(v17, v16, v12, &type metadata for String, &type metadata for PlayPauseWidgetIntent, v13, v14, v15);
    swift_bridgeObjectRelease(v7);
    swift_release(v11);
    swift_release(v10);
    return swift_release(v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006813C@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __n128 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  unint64_t *v44;
  int *v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;

  v51 = a2;
  v3 = sub_100005150(&qword_100083718);
  __chkstk_darwin(v3);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005150(&qword_100083720);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_100083728);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v50 - v14;
  v50 = *(int *)(type metadata accessor for EpisodeListWidgetXL(0) + 20);
  v16 = *(uint64_t *)((char *)a1 + v50);
  *(_QWORD *)v5 = static VerticalAlignment.top.getter(v17);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v18 = sub_100005150(&qword_100083730);
  v19 = sub_1000684B8(a1, (uint64_t)&v5[*(int *)(v18 + 44)]);
  v20 = static Edge.Set.horizontal.getter(v19);
  v21 = v20;
  v22.n128_u64[0] = v16;
  v23 = EdgeInsets.init(_all:)(v20, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  sub_10000EFC4((uint64_t)v5, (uint64_t)v8, &qword_100083718);
  v30 = &v8[*(int *)(v6 + 36)];
  *v30 = v21;
  *((double *)v30 + 1) = v23;
  *((_QWORD *)v30 + 2) = v25;
  *((_QWORD *)v30 + 3) = v27;
  *((_QWORD *)v30 + 4) = v29;
  v30[40] = 0;
  sub_10000F008((uint64_t)v5, &qword_100083718);
  v31 = sub_100068784();
  View.unredacted()(v6, v31);
  v32 = (uint64_t)v8;
  v33 = v10;
  sub_10000F008(v32, &qword_100083720);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, v9);
  v34 = a1[3];
  v35 = *(_QWORD *)(v34 + 16);
  if (!v35)
  {
    __break(1u);
LABEL_9:
    swift_bridgeObjectRelease(v34);
    v49 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UpNextEntry.Episode(0) - 8) + 80);
    v41 = sub_1000249C0(v34, v34 + ((v49 + 32) & ~v49), 1, (2 * v35) | 1);
    goto LABEL_7;
  }
  v36 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v37 = swift_bridgeObjectRetain(v34);
  v38 = swift_unknownObjectRetain_n(v37, 2);
  v39 = (_QWORD *)swift_dynamicCastClass(v38, v36);
  if (!v39)
  {
    swift_bridgeObjectRelease(v34);
    v39 = _swiftEmptyArrayStorage;
  }
  v40 = v39[2];
  swift_release(v39);
  if (v40 != v35 - 1)
    goto LABEL_9;
  v41 = (_QWORD *)swift_dynamicCastClass(v34, v36);
  if (!v41)
  {
    swift_bridgeObjectRelease(v34);
    v41 = _swiftEmptyArrayStorage;
  }
LABEL_7:
  swift_bridgeObjectRelease(v34);
  v42 = *(uint64_t *)((char *)a1 + v50);
  v43 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v43(v12, v15, v9);
  v44 = v51;
  *v51 = v16;
  v45 = (int *)sub_100005150(&qword_100083748);
  v43((char *)v44 + v45[12], v12, v9);
  *(unint64_t *)((char *)v44 + v45[16]) = 0x4034000000000000;
  v46 = (char *)v44 + v45[20];
  *(_QWORD *)v46 = v41;
  *((_QWORD *)v46 + 1) = 4;
  v46[16] = 2;
  *((_QWORD *)v46 + 3) = 0x4028000000000000;
  *((_QWORD *)v46 + 4) = v42;
  *(unint64_t *)((char *)v44 + v45[24]) = v42;
  v47 = *(void (**)(char *, uint64_t))(v33 + 8);
  swift_bridgeObjectRetain(v41);
  v47(v15, v9);
  swift_bridgeObjectRelease(v41);
  return ((uint64_t (*)(char *, uint64_t))v47)(v12, v9);
}

uint64_t sub_1000684B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t KeyPath;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v4 = type metadata accessor for Logo(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - v8;
  v10 = *a1;
  v11 = a1[1];
  v39[0] = v10;
  v39[1] = v11;
  v12 = sub_1000248B8();
  swift_bridgeObjectRetain(v11);
  v13 = Text.init<A>(_:)(v39, &type metadata for String, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = static Font.headline.getter();
  v21 = Text.font(_:)(v20, v13, v15, v19, v17);
  v36 = v22;
  v37 = v21;
  v24 = v23;
  v38 = v25;
  swift_release(v20);
  LOBYTE(v20) = v24 & 1;
  sub_10000EEE8(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  KeyPath = swift_getKeyPath(&unk_10006F0C0);
  *(_QWORD *)v6 = swift_getKeyPath(&unk_10006F0F0);
  v6[8] = 0;
  v27 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_10006F118);
  v28 = sub_100005150(&qword_100081DD0);
  swift_storeEnumTagMultiPayload(v27, v28, 0);
  v29 = &v6[*(int *)(v4 + 24)];
  *(_QWORD *)v29 = swift_getKeyPath(&unk_10006F148);
  v30 = sub_100005150(&qword_100081DC8);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  sub_10000FC78((uint64_t)v6, (uint64_t)v9, type metadata accessor for Logo);
  sub_10000EF3C((uint64_t)v9, (uint64_t)v6, type metadata accessor for Logo);
  v32 = v36;
  v31 = v37;
  *(_QWORD *)a2 = v37;
  *(_QWORD *)(a2 + 8) = v32;
  *(_BYTE *)(a2 + 16) = v20;
  v33 = v38;
  *(_QWORD *)(a2 + 24) = v38;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_QWORD *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 1;
  v34 = sub_100005150(&qword_100083750);
  sub_10000EF3C((uint64_t)v6, a2 + *(int *)(v34 + 64), type metadata accessor for Logo);
  sub_100024C4C(v31, v32, v20);
  swift_bridgeObjectRetain(v33);
  swift_retain(KeyPath);
  sub_10000EF80((uint64_t)v9, type metadata accessor for Logo);
  sub_10000EF80((uint64_t)v6, type metadata accessor for Logo);
  sub_10000EEE8(v31, v32, v20);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v33);
}

void sub_100068730(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0x3FD999999999999ALL;
  v3 = sub_100005150(&qword_1000836E0);
  sub_10006673C(v1, a1 + *(int *)(v3 + 44));
}

unint64_t sub_100068784()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083738;
  if (!qword_100083738)
  {
    v1 = sub_10000950C(&qword_100083720);
    sub_10000EEA8(&qword_100083740, &qword_100083718, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083738);
  }
  return result;
}

uint64_t sub_100068820()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  int *v11;
  unsigned int (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *Entry;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = (int *)type metadata accessor for UpNextEntry.Episode(0);
  v2 = *((_QWORD *)v1 - 1);
  v63 = *(unsigned __int8 *)(v2 + 80);
  v60 = *(_QWORD *)(v2 + 64);
  v3 = *(_QWORD *)(type metadata accessor for EpisodeListWidgetXL(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v61 = (v63 + 16) & ~v63;
  v62 = *(_QWORD *)(v3 + 64);
  v64 = v0;
  v5 = v0 + v61;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v61 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v61 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v61 + 40));
  swift_release(*(_QWORD *)(v0 + v61 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v61 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v61 + 80));
  v6 = v0 + v61 + v1[10];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v1[11] + 8));
  v10 = v5 + v1[12];
  v11 = (int *)type metadata accessor for ArtworkModel(0);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v11 - 1) + 48);
  if (!v12(v10, 1, v11))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
    v13 = *(unsigned __int8 *)(v10 + 32);
    if (v13 != 255)
      sub_100005624(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), v13);
    v14 = *(unsigned __int8 *)(v10 + 64);
    if (v14 != 255)
      sub_10000563C(*(id *)(v10 + 56), v14);
    v15 = *(unsigned __int8 *)(v10 + 80);
    if (v15 != 255)
      sub_10000563C(*(id *)(v10 + 72), v15);
    v16 = *(unsigned __int8 *)(v10 + 96);
    if (v16 != 255)
      sub_10000563C(*(id *)(v10 + 88), v16);
    v17 = *(unsigned __int8 *)(v10 + 112);
    if (v17 != 255)
      sub_10000563C(*(id *)(v10 + 104), v17);
    v18 = *(unsigned __int8 *)(v10 + 128);
    if (v18 != 255)
      sub_10000563C(*(id *)(v10 + 120), v18);
    v19 = v10 + v11[11];
    v20 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[16] + 8));
  }
  v21 = v5 + v1[13];
  v22 = v12(v21, 1, v11);
  v23 = v4;
  if (!v22)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8));
    v24 = *(unsigned __int8 *)(v21 + 32);
    if (v24 != 255)
      sub_100005624(*(_QWORD *)(v21 + 16), *(_QWORD *)(v21 + 24), v24);
    v25 = *(unsigned __int8 *)(v21 + 64);
    if (v25 != 255)
      sub_10000563C(*(id *)(v21 + 56), v25);
    v26 = *(unsigned __int8 *)(v21 + 80);
    if (v26 != 255)
      sub_10000563C(*(id *)(v21 + 72), v26);
    v27 = *(unsigned __int8 *)(v21 + 96);
    if (v27 != 255)
      sub_10000563C(*(id *)(v21 + 88), v27);
    v28 = *(unsigned __int8 *)(v21 + 112);
    if (v28 != 255)
      sub_10000563C(*(id *)(v21 + 104), v28);
    v29 = *(unsigned __int8 *)(v21 + 128);
    if (v29 != 255)
      sub_10000563C(*(id *)(v21 + 120), v29);
    v30 = v21 + v11[11];
    v31 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
    swift_bridgeObjectRelease(*(_QWORD *)(v21 + v11[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v21 + v11[16] + 8));
  }

  v32 = v5 + v1[15];
  v33 = type metadata accessor for URL(0);
  v34 = *(_QWORD *)(v33 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  v35 = v5 + v1[19];
  if (!v9(v35, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v35, v7);
  v36 = v5 + v1[20];
  if (!v9(v36, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v36, v7);
  v37 = v8;
  v38 = (_QWORD *)(v5 + v1[21]);
  if (*v38)
  {
    swift_release(*v38);
    swift_release(v38[1]);
    swift_release(v38[2]);
  }
  v39 = v5 + v1[22];
  v40 = sub_100005150(&qword_100081040);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v39, 1, v40))
  {
    v41 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v41(v39, v7);
    v41(v39 + *(int *)(v40 + 36), v7);
  }
  v42 = (v61 + v60 + v23) & ~v23;
  v43 = (int *)type metadata accessor for WidgetPredictedPlayState(0);
  v44 = v39 + v43[5];
  v45 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
  v46 = v39 + v43[6];
  v47 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v48 = *(_QWORD *)(v47 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  swift_bridgeObjectRelease(*(_QWORD *)(v39 + v43[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v39 + v43[8] + 8));
  v49 = v64 + v42;
  swift_bridgeObjectRelease(*(_QWORD *)(v64 + v42 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v64 + v42 + 24));
  Entry = (int *)type metadata accessor for UpNextEntry(0);
  v51 = v64 + v42 + Entry[7];
  v52 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);

  v53 = v64 + v42 + Entry[9];
  v54 = v9(v53, 1, v7);
  v55 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  if (!v54)
    v55(v53, v7);
  v55(v49 + Entry[10], v7);
  v56 = v49 + Entry[11];
  v57 = type metadata accessor for TimelineEntryRelevance(0);
  v58 = *(_QWORD *)(v57 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
  return swift_deallocObject(v64, v42 + v62, v63 | v23 | 7);
}

id sub_100068DAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for UpNextEntry.Episode(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EpisodeListWidgetXL(0) - 8) + 80);
  return sub_100066F58((_QWORD *)(v1 + v4), v1 + ((v4 + v5 + v6) & ~v6), a1);
}

uint64_t sub_100068E14@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100068E3C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100068E64(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100068E88(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100068EAC(uint64_t a1)
{
  uint64_t v1;

  return sub_100068000(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_100068EC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081B40;
  if (!qword_100081B40)
  {
    v1 = type metadata accessor for WidgetEmptyText(255);
    result = swift_getWitnessTable(&unk_10006E828, v1);
    atomic_store(result, (unint64_t *)&qword_100081B40);
  }
  return result;
}

unint64_t sub_100068F10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000837B0;
  if (!qword_1000837B0)
  {
    v1 = sub_10000950C(&qword_1000836E0);
    sub_10000EEA8(&qword_100081A00, &qword_100081A08, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_10000EEA8(&qword_1000837B8, &qword_1000837C0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000837B0);
  }
  return result;
}

uint64_t sub_100068FAC()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100068FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000697DC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100068FE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, _QWORD, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v49 = a1;
  v1 = sub_100005150(&qword_1000837D0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005150(&qword_1000837D8);
  v6 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  v46 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_1000837E0);
  v10 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  v48 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EpisodeListWidgetMain(0);
  sub_10000FBAC(&qword_1000837E8, type metadata accessor for EpisodeListWidgetMain, (uint64_t)&unk_10006E5E0);
  sub_10006955C();
  v13.n128_f64[0] = StaticConfiguration.init<A>(kind:provider:content:)(0xD000000000000020, 0x8000000100070A60);
  v14 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001CLL, 0x8000000100070A90, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = sub_1000695A0();
  WidgetConfiguration.configurationDisplayName(_:)(v14, v16, v18 & 1, v20, v1, v21);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  v22.n128_f64[0] = (*(double (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v23 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001BLL, 0x8000000100070AB0, v22);
  v25 = v24;
  LOBYTE(v4) = v26;
  v28 = v27;
  v50 = v1;
  v51 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v30 = v23;
  v31 = v45;
  WidgetConfiguration.description(_:)(v30, v25, v4 & 1, v28, v45, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v25);
  v32 = v31;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v31);
  v33 = sub_100005150(&qword_100083800);
  v34 = type metadata accessor for WidgetFamily(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(_QWORD *)(v35 + 72);
  v37 = *(unsigned __int8 *)(v35 + 80);
  v38 = (v37 + 32) & ~v37;
  v39 = swift_allocObject(v33, v38 + 4 * v36, v37 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_10006F210;
  v40 = *(void (**)(uint64_t, _QWORD, uint64_t))(v35 + 104);
  v40(v39 + v38, enum case for WidgetFamily.systemSmall(_:), v34);
  v40(v39 + v38 + v36, enum case for WidgetFamily.systemMedium(_:), v34);
  v40(v39 + v38 + 2 * v36, enum case for WidgetFamily.systemLarge(_:), v34);
  v40(v39 + v38 + 3 * v36, enum case for WidgetFamily.systemExtraLarge(_:), v34);
  v50 = v32;
  v51 = OpaqueTypeConformance2;
  v41 = swift_getOpaqueTypeConformance2(&v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v42 = v47;
  WidgetConfiguration.supportedFamilies(_:)(v39, v47, v41);
  swift_bridgeObjectRelease(v39);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v12, v42);
}

uint64_t sub_10006936C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  sub_1000695EC(a1, a2);
  v3 = (int *)type metadata accessor for EpisodeListWidgetMain(0);
  v4 = (_QWORD *)(a2 + v3[5]);
  *v4 = swift_getKeyPath(&unk_10006F270);
  v5 = sub_100005150(&qword_100081DC8);
  swift_storeEnumTagMultiPayload(v4, v5, 0);
  v6 = (_QWORD *)(a2 + v3[6]);
  *v6 = swift_getKeyPath(&unk_10006F2A0);
  v7 = sub_100005150(&qword_100082478);
  swift_storeEnumTagMultiPayload(v6, v7, 0);
  v8 = (_QWORD *)(a2 + v3[7]);
  *v8 = swift_getKeyPath(&unk_10006F2D0);
  v9 = sub_100005150(&qword_100082480);
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  v10 = a2 + v3[8];
  *(_QWORD *)v10 = swift_getKeyPath(&unk_10006F300);
  *(_BYTE *)(v10 + 8) = 0;
  v11 = (_QWORD *)(a2 + v3[9]);
  *v11 = swift_getKeyPath(&unk_10006F328);
  v12 = sub_100005150(&qword_100081DD0);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = (_QWORD *)(a2 + v3[10]);
  *v13 = swift_getKeyPath(&unk_10006F358);
  v14 = sub_100005150(&qword_1000814D8);
  return swift_storeEnumTagMultiPayload(v13, v14, 0);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_1000694F8();
  static Widget.main()();
  return 0;
}

unint64_t sub_1000694F8()
{
  unint64_t result;

  result = qword_1000837C8;
  if (!qword_1000837C8)
  {
    result = swift_getWitnessTable(&unk_10006F230, &type metadata for PodcastsWidget);
    atomic_store(result, (unint64_t *)&qword_1000837C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PodcastsWidget()
{
  return &type metadata for PodcastsWidget;
}

uint64_t sub_10006954C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000726FC, 1);
}

unint64_t sub_10006955C()
{
  unint64_t result;

  result = qword_1000837F0;
  if (!qword_1000837F0)
  {
    result = swift_getWitnessTable(&unk_10006DB58, &type metadata for UpNextEntryProvider);
    atomic_store(result, (unint64_t *)&qword_1000837F0);
  }
  return result;
}

unint64_t sub_1000695A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000837F8;
  if (!qword_1000837F8)
  {
    v1 = sub_10000950C(&qword_1000837D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000837F8);
  }
  return result;
}

uint64_t sub_1000695EC(uint64_t a1, uint64_t a2)
{
  uint64_t Entry;

  Entry = type metadata accessor for UpNextEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Entry - 8) + 16))(a2, a1, Entry);
  return a2;
}

uint64_t sub_100069630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_10000FBAC(&qword_100083808, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

_QWORD *sub_100069690@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v3 = sub_10000FBAC(&qword_100083808, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  result = EnvironmentValues.subscript.getter(&v5, v2, v2, v3);
  *a1 = v5;
  return result;
}

uint64_t sub_100069704()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_100069724()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_100069744()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100069764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000697DC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_100069778()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t sub_100069798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000697DC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for RedactionReasons, (uint64_t (*)(char *))&EnvironmentValues.redactionReasons.setter);
}

uint64_t sub_1000697BC()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_1000697DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_100069858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000697DC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(char *))&EnvironmentValues.dynamicTypeSize.setter);
}

uint64_t sub_100069880()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_1000698A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000697DC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_1000698C4()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000698E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000697DC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100069908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_10000950C(&qword_1000837E0);
  v1 = sub_10000950C(&qword_1000837D8);
  v5 = sub_10000950C(&qword_1000837D0);
  v6 = sub_1000695A0();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
}

uint64_t sub_1000699AC()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_1000523AC();
  EnvironmentValues.subscript.getter(&var1, &type metadata for PodcastsWidgetColorScheme, &type metadata for PodcastsWidgetColorScheme, v0);
  return var1;
}

uint64_t sub_1000699E4()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin();
  v1 = (char *)&v4 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v2 + 104))(v1, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v1, 0.756862745, 0.290196078, 0.925490196, 1.0);
  qword_100085780 = result;
  return result;
}

void sub_100069A80(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100069A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100069E48();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_100069ADC(char a1, _BYTE *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;
  void (*v17)(_BYTE *, uint64_t);
  char v19;
  void (*v20)(uint64_t, uint64_t);
  _BYTE v21[12];
  int v22;

  v22 = a3;
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for WidgetRenderingMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin();
  v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static WidgetRenderingMode.accented.getter(v13);
  v16 = static WidgetRenderingMode.== infix(_:_:)(a2, v15);
  v17 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v17(v15, v11);
  if ((v16 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a4, v7);
    v17(a2, v11);
    return 3;
  }
  else if ((a1 & 1) != 0)
  {
    if ((v22 & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a4, v7);
      v17(a2, v11);
      return 0;
    }
    else
    {
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for ColorScheme.dark(_:), v7);
      v19 = static ColorScheme.== infix(_:_:)(a4, v10);
      v20 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v20(a4, v7);
      v17(a2, v11);
      v20((uint64_t)v10, v7);
      if ((v19 & 1) != 0)
        return 2;
      else
        return 1;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a4, v7);
    v17(a2, v11);
    return 4;
  }
}

uint64_t getEnumTagSinglePayload for PodcastsWidgetColorScheme(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PodcastsWidgetColorScheme(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100069D80 + 4 * byte_10006F3A5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100069DB4 + 4 * byte_10006F3A0[v4]))();
}

uint64_t sub_100069DB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069DBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100069DC4);
  return result;
}

uint64_t sub_100069DD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100069DD8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100069DDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069DE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PodcastsWidgetColorScheme()
{
  return &type metadata for PodcastsWidgetColorScheme;
}

unint64_t sub_100069E04()
{
  unint64_t result;

  result = qword_100083810;
  if (!qword_100083810)
  {
    result = swift_getWitnessTable(&unk_10006F41C, &type metadata for PodcastsWidgetColorScheme);
    atomic_store(result, (unint64_t *)&qword_100083810);
  }
  return result;
}

unint64_t sub_100069E48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083818;
  if (!qword_100083818)
  {
    v1 = sub_10000950C(&qword_100083820);
    sub_100069E04();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100083818);
  }
  return result;
}

uint64_t sub_100069EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100069EB8);
}

uint64_t sub_100069EB8(uint64_t a1, uint64_t a2)
{
  uint64_t Entry;

  Entry = type metadata accessor for UpNextEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Entry - 8) + 48))(a1, a2, Entry);
}

uint64_t sub_100069EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100069F00);
}

uint64_t sub_100069F00(uint64_t a1, uint64_t a2)
{
  uint64_t Entry;

  Entry = type metadata accessor for UpNextEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Entry - 8) + 56))(a1, a2, a2, Entry);
}

uint64_t type metadata accessor for EpisodeListWidgetMedium(uint64_t a1)
{
  uint64_t result;

  result = qword_100083880;
  if (!qword_100083880)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeListWidgetMedium);
  return result;
}

uint64_t sub_100069F7C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100072768, 1);
}

uint64_t sub_100069F8C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  char *v41;

  v41 = a2;
  v3 = sub_100005150(&qword_1000838D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005150(&qword_1000838D8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005150(&qword_1000838E0);
  v40 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v40 - v14;
  *(_QWORD *)v5 = static VerticalAlignment.top.getter(v13);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v16 = sub_100005150(&qword_1000838E8);
  v17 = sub_10006A214((uint64_t *)a1, (uint64_t)&v5[*(int *)(v16 + 44)]);
  v18 = static Edge.Set.horizontal.getter(v17);
  v19 = type metadata accessor for EpisodeListWidgetMedium(0);
  v20 = *(int *)(v19 + 20);
  v21.n128_u64[0] = *(_QWORD *)(a1 + v20);
  v22 = EdgeInsets.init(_all:)(v19, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_10000EFC4((uint64_t)v5, (uint64_t)v8, &qword_1000838D0);
  v29 = &v8[*(int *)(v6 + 36)];
  *v29 = v18;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  sub_10000F008((uint64_t)v5, &qword_1000838D0);
  v30 = sub_10006A5C4();
  View.unredacted()(v6, v30);
  sub_10000F008((uint64_t)v8, &qword_1000838D8);
  v31 = v40;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v15, v11, v9);
  v32 = *(_QWORD *)(a1 + 24);
  v33 = *(_BYTE *)(a1 + 16);
  v34 = *(_QWORD *)(a1 + v20);
  v35 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v35(v11, v15, v9);
  v36 = v41;
  v35(v41, v11, v9);
  v37 = &v36[*(int *)(sub_100005150(&qword_100083900) + 48)];
  *(_QWORD *)v37 = v32;
  *((_QWORD *)v37 + 1) = 2;
  v37[16] = v33;
  *((_QWORD *)v37 + 3) = 0x4020000000000000;
  *((_QWORD *)v37 + 4) = v34;
  v38 = *(void (**)(char *, uint64_t))(v31 + 8);
  swift_bridgeObjectRetain_n(v32, 2);
  v38(v15, v9);
  swift_bridgeObjectRelease(v32);
  return ((uint64_t (*)(char *, uint64_t))v38)(v11, v9);
}

uint64_t sub_10006A214@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  __n128 v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];

  v4 = type metadata accessor for Logo(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - v8;
  v10 = *a1;
  v11 = a1[1];
  v48[0] = v10;
  v48[1] = v11;
  v12 = sub_1000248B8();
  swift_bridgeObjectRetain(v11);
  v13 = Text.init<A>(_:)(v48, &type metadata for String, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = static Font.headline.getter();
  v21 = Text.font(_:)(v20, v13, v15, v19, v17);
  v45 = v22;
  v46 = v21;
  v24 = v23;
  v47 = v25;
  swift_release(v20);
  LOBYTE(v20) = v24 & 1;
  sub_10000EEE8(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  KeyPath = swift_getKeyPath(&unk_10006F4F8);
  v27 = static Edge.Set.top.getter();
  LOBYTE(v15) = v27;
  v28.n128_u64[0] = -4.0;
  v29 = EdgeInsets.init(_all:)(v27, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  *(_QWORD *)v6 = swift_getKeyPath(&unk_10006F528);
  v6[8] = 0;
  v36 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v36 = swift_getKeyPath(&unk_10006F550);
  v37 = sub_100005150(&qword_100081DD0);
  swift_storeEnumTagMultiPayload(v36, v37, 0);
  v38 = &v6[*(int *)(v4 + 24)];
  *(_QWORD *)v38 = swift_getKeyPath(&unk_10006F580);
  v39 = sub_100005150(&qword_100081DC8);
  swift_storeEnumTagMultiPayload(v38, v39, 0);
  sub_10006A660((uint64_t)v6, (uint64_t)v9);
  sub_100065ED0((uint64_t)v9, (uint64_t)v6);
  v41 = v45;
  v40 = v46;
  *(_QWORD *)a2 = v46;
  *(_QWORD *)(a2 + 8) = v41;
  *(_BYTE *)(a2 + 16) = v20;
  v42 = v47;
  *(_QWORD *)(a2 + 24) = v47;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_QWORD *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = v15;
  *(double *)(a2 + 64) = v29;
  *(_QWORD *)(a2 + 72) = v31;
  *(_QWORD *)(a2 + 80) = v33;
  *(_QWORD *)(a2 + 88) = v35;
  *(_BYTE *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 1;
  v43 = sub_100005150(&qword_100083908);
  sub_100065ED0((uint64_t)v6, a2 + *(int *)(v43 + 64));
  sub_100024C4C(v40, v41, v20);
  swift_bridgeObjectRetain(v42);
  swift_retain(KeyPath);
  sub_100065F14((uint64_t)v9);
  sub_100065F14((uint64_t)v6);
  sub_10000EEE8(v40, v41, v20);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v42);
}

uint64_t sub_10006A4B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __n128 v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = v2;
  v6 = sub_100005150(&qword_1000838B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v9);
  *((_QWORD *)v8 + 1) = 0x4024000000000000;
  v8[16] = 0;
  v10 = sub_100005150(&qword_1000838C0);
  v11 = sub_100069F8C(v4, &v8[*(int *)(v10 + 44)]);
  v12 = static Edge.Set.vertical.getter(v11);
  v13 = v12;
  v14.n128_u64[0] = *(_QWORD *)(v4 + *(int *)(a1 + 20));
  v15 = EdgeInsets.init(_all:)(v12, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_10000EFC4((uint64_t)v8, a2, &qword_1000838B8);
  v22 = a2 + *(int *)(sub_100005150(&qword_1000838C8) + 36);
  *(_BYTE *)v22 = v13;
  *(double *)(v22 + 8) = v15;
  *(_QWORD *)(v22 + 16) = v17;
  *(_QWORD *)(v22 + 24) = v19;
  *(_QWORD *)(v22 + 32) = v21;
  *(_BYTE *)(v22 + 40) = 0;
  return sub_10000F008((uint64_t)v8, &qword_1000838B8);
}

unint64_t sub_10006A5C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000838F0;
  if (!qword_1000838F0)
  {
    v1 = sub_10000950C(&qword_1000838D8);
    sub_10000EEA8(&qword_1000838F8, &qword_1000838D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000838F0);
  }
  return result;
}

uint64_t sub_10006A660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006A6A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083910;
  if (!qword_100083910)
  {
    v1 = sub_10000950C(&qword_1000838C8);
    sub_10000EEA8(&qword_100083918, &qword_1000838B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083910);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC14PodcastsWidgetP33_2552A36DC4EDA1AEB144370A8F6023E519ResourceBundleClass);
}

id objc_msgSend_AND_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AND:");
}

id objc_msgSend__fetchRequestForDistinctSeasons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRequestForDistinctSeasons");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_adamID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adamID");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_applyShowTypeSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyShowTypeSetting:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_author(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "author");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_episodeForUuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "episodeForUuid:");
}

id objc_msgSend_episodeUuid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "episodeUuid");
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeFetchRequest:error:");
}

id objc_msgSend_feedChangedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedChangedDate");
}

id objc_msgSend_feedURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedURL");
}

id objc_msgSend_fetchRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestWithEntityName:");
}

id objc_msgSend_findEpisodeWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findEpisodeWithRequest:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flags");
}

id objc_msgSend_hasHTML(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasHTML");
}

id objc_msgSend_identifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifiers");
}

id objc_msgSend_imageURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageURL");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isSerialShowTypeInFeed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSerialShowTypeInFeed");
}

id objc_msgSend_isValidShowTypeSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidShowTypeSetting:");
}

id objc_msgSend_itemDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemDescription");
}

id objc_msgSend_lastDatePlayed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastDatePlayed");
}

id objc_msgSend_lastImplicitlyFollowedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastImplicitlyFollowedDate");
}

id objc_msgSend_latestSeasonNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestSeasonNumber");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_lenientSharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lenientSharedInstance");
}

id objc_msgSend_library(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "library");
}

id objc_msgSend_listenNowEpisode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listenNowEpisode");
}

id objc_msgSend_logAndThrow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logAndThrow:");
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectContext");
}

id objc_msgSend_markPlaylistsForUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markPlaylistsForUpdate");
}

id objc_msgSend_markSubscriptionSyncDirty_for_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markSubscriptionSyncDirty:for:");
}

id objc_msgSend_modifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifiedDate");
}

id objc_msgSend_mt_compactMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mt_compactMap:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_needsUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsUpdate");
}

id objc_msgSend_newestEpisodeWithFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newestEpisodeWithFilter:");
}

id objc_msgSend_nextEpisodeUuid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextEpisodeUuid");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_objectsInEntity_predicate_sortDescriptors_returnsObjectsAsFaults_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:limit:");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_persistentID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentID");
}

id objc_msgSend_playbackNewestToOldest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playbackNewestToOldest");
}

id objc_msgSend_playlist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playlist");
}

id objc_msgSend_playlistIfDefault(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playlistIfDefault");
}

id objc_msgSend_playlistSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playlistSettings");
}

id objc_msgSend_podcast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "podcast");
}

id objc_msgSend_podcastForFeedUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "podcastForFeedUrl:");
}

id objc_msgSend_podcastUuidForFeedUrlString_ctx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "podcastUuidForFeedUrlString:ctx:");
}

id objc_msgSend_predicateForEpisodeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForEpisodeType:");
}

id objc_msgSend_predicateForEpisodesWithSeasonNumbersOnPodcastUuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForEpisodesWithSeasonNumbersOnPodcastUuid:");
}

id objc_msgSend_predicateForNotHiddenNotImplicitlyFollowedPodcasts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForNotHiddenNotImplicitlyFollowedPodcasts");
}

id objc_msgSend_predicateForPodcast_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForPodcast:");
}

id objc_msgSend_predicateForSeasonNumberWithNoEpisodeNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForSeasonNumberWithNoEpisodeNumber:");
}

id objc_msgSend_predicateForSubscriptionSyncType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForSubscriptionSyncType:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_saveInCurrentBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveInCurrentBlock");
}

id objc_msgSend_seasonNumbers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seasonNumbers");
}

id objc_msgSend_seasonSortDescriptorsForSortOrder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seasonSortDescriptorsForSortOrder");
}

id objc_msgSend_seasonTrailerInSeason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seasonTrailerInSeason:");
}

id objc_msgSend_setEpisodeGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEpisodeGuid:");
}

id objc_msgSend_setEpisodeTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEpisodeTitle:");
}

id objc_msgSend_setExcludeUnentitled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExcludeUnentitled:");
}

id objc_msgSend_setFetchLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchLimit:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setListenNowEpisode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListenNowEpisode:");
}

id objc_msgSend_setModifiedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedDate:");
}

id objc_msgSend_setNeedsUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsUpdate:");
}

id objc_msgSend_setPersistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentID:");
}

id objc_msgSend_setPodcastFeedUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPodcastFeedUrl:");
}

id objc_msgSend_setPodcastTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPodcastTitle:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPrimitiveValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimitiveValue:forKey:");
}

id objc_msgSend_setPropertiesToFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPropertiesToFetch:");
}

id objc_msgSend_setResultType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultType:");
}

id objc_msgSend_setReturnsDistinctResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReturnsDistinctResults:");
}

id objc_msgSend_setSortAscending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortAscending:");
}

id objc_msgSend_setSortDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortDescriptors:");
}

id objc_msgSend_setStoreTrackId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreTrackId:");
}

id objc_msgSend_setStreamUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStreamUrl:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shared");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_showTypeInFeed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showTypeInFeed");
}

id objc_msgSend_showTypeSetting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showTypeSetting");
}

id objc_msgSend_sortAscending(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortAscending");
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorWithKey:ascending:");
}

id objc_msgSend_sortDescriptorWithKey_ascending_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorWithKey:ascending:selector:");
}

id objc_msgSend_sortDescriptorsForPlayOrderByEpisodeNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorsForPlayOrderByEpisodeNumber");
}

id objc_msgSend_sortDescriptorsForPlayOrderByPubDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorsForPlayOrderByPubDate");
}

id objc_msgSend_sortDescriptorsForPubDateAscending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorsForPubDateAscending:");
}

id objc_msgSend_sortOrderAscForShowType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortOrderAscForShowType:");
}

id objc_msgSend_storeCollectionId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeCollectionId");
}

id objc_msgSend_streamURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streamURL");
}

id objc_msgSend_stringBySmartlyStrippingHTML(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringBySmartlyStrippingHTML");
}

id objc_msgSend_subscribed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribed");
}

id objc_msgSend_syncType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncType");
}

id objc_msgSend_timestampBoundByNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestampBoundByNow:");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_universalStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "universalStore");
}

id objc_msgSend_upNextForPodcastUuid_excludeExplicit_ctx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upNextForPodcastUuid:excludeExplicit:ctx:");
}

id objc_msgSend_updateAvg(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAvg");
}

id objc_msgSend_updateStdDev(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStdDev");
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uuid");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_vendorID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vendorID");
}

id objc_msgSend_webpageURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "webpageURL");
}

id objc_msgSend_willChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willChangeValueForKey:");
}
