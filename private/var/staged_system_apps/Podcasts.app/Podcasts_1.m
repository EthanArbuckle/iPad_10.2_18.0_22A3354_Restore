uint64_t sub_10015D6CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;

  v67 = a2;
  v68 = type metadata accessor for Calendar(0);
  v66 = *(_QWORD *)(v68 - 8);
  v70 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v68);
  v65 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EpisodeListSettings(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = v8;
  v57 = v8;
  v10 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544((uint64_t *)&unk_100553FB0);
  v12 = *(_QWORD *)(v11 - 8);
  v71 = v11;
  v72 = v12;
  __chkstk_darwin(v11);
  v64 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = 0;
  v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v14 = swift_bridgeObjectRelease(v76);
  v73 = 0xD000000000000026;
  v74 = 0x80000001004303D0;
  v15 = EpisodeListSettings.listType.getter(&v75, v14);
  v16 = EpisodeListType.description.getter(v15);
  v18 = v17;
  sub_10003F450((uint64_t)&v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20._countAndFlagsBits = 93;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v63 = v73;
  v62 = v74;
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v60 = v21;
  v59 = EpisodeListSettings.predicate.getter(v61);
  v55 = a1;
  v22 = EpisodeListSettings.sort.getter();
  v56 = EpisodeSortType.descriptors.getter(v22);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v51 = static OS_dispatch_queue.main.getter(v23);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v49 = v10;
  v50 = v6;
  v24(v10, a1, v6);
  v25 = *(unsigned __int8 *)(v7 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_1004B0198, v26 + v9, v25 | 7);
  v58 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v58(v27 + v26, v10, v6);
  v28 = type metadata accessor for LibraryEpisodeLockup(0);
  v52 = v28;
  v29 = a3;
  v30 = sub_10003F544(&qword_100554900);
  v53 = v30;
  v31 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v54 = sub_10016DBA0(&qword_100553FC0, &qword_100554900);
  v48 = v30;
  v32 = v64;
  FetchedResultsSectionedPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:sectionTransform:)(v63, v62, v61, v60, v59, v56, v67, v29, v51, sub_10016DB8C, v27, sub_10015BAB8, 0, sub_10015DD44, 0, v28, v48, v31, v54);
  v33 = v68;
  v35 = v65;
  v34 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v69 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_metricsCalendar, v68);
  v36 = v49;
  v37 = v50;
  v24(v49, v55, v50);
  v38 = *(unsigned __int8 *)(v34 + 80);
  v39 = v34;
  v40 = (v38 + 16) & ~v38;
  v41 = (v70 + v25 + v40) & ~v25;
  v42 = swift_allocObject(&unk_1004B01C0, v41 + v57, v25 | 7 | v38);
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v42 + v40, v35, v33);
  v58(v42 + v41, v36, v37);
  v43 = type metadata accessor for ModernShelf(0);
  v44 = sub_10002F9C8(&qword_100553FC8, (uint64_t *)&unk_100553FB0, (uint64_t)&protocol conformance descriptor for FetchedResultsSectionedPublisher<A, B, C>);
  v45 = v71;
  v46 = PaginatedPublisher.paginatedSectionMap<A, B, C>(_:)(sub_10016DCAC, v42, v71, v53, v52, v43, v44, v54);
  swift_release(v42);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v32, v45);
  return v46;
}

uint64_t sub_10015DB88@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  id v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  _QWORD v23[9];

  v6 = sub_10003F544((uint64_t *)&unk_100553DE0);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Episode(0, v12);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v13 = a1;
  v14 = EpisodeListSettings.listType.getter(v23, v13);
  LOBYTE(a1) = EpisodeListType.wantsListenNowReason.getter(v14);
  sub_10003F450((uint64_t)v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  result = Episode.init(from:clickAction:wantsListenNowReason:)(v13, (uint64_t)v21, a1 & 1);
  if (result)
  {
    v16 = result;
    v17 = type metadata accessor for EpisodeListSettings(0);
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v11, a2, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v11, 0, 1, v17);
    v19 = type metadata accessor for SectionContext(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
    v20 = dispatch thunk of Episode.defaultLockup(for:sectionContext:)(v11, v8);
    swift_release(v16);
    sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DE0);
    result = sub_100007A28((uint64_t)v11, &qword_10055B790);
  }
  else
  {
    v20 = 0;
  }
  *a3 = v20;
  return result;
}

uint64_t sub_10015DD44@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_10003F544(&qword_1005522F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LegacyEpisodeLockup.releaseDate.getter(v3);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    result = sub_100007A28((uint64_t)v5, &qword_1005522F0);
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    *a1 = Date.yearString.getter();
    a1[1] = v9;
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  return result;
}

uint64_t sub_10015DE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *object;
  uint64_t countAndFlagsBits;
  id v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  Swift::String v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  __n128 v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  _OWORD v122[2];
  uint64_t v123;
  _QWORD v124[5];
  uint64_t v125;
  void *v126;
  Swift::String v127;

  v111 = a3;
  v105 = a2;
  v118 = a4;
  v5 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v5);
  v117 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v7);
  v116 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v9);
  v115 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v11);
  v106 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v13);
  v110 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v15);
  v109 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v17);
  v120 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v119 = *(_QWORD *)(v114 - 8);
  v19 = __chkstk_darwin(v114);
  v112 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v113 = (char *)&v100 - v21;
  v104 = type metadata accessor for Calendar.Component(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v23);
  v25 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v101 = (char *)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)&v100 - v30;
  v121 = sub_10003F544(&qword_100553FD0);
  v32 = FRPSectionInfo.section.getter(&v125);
  v34 = v125;
  v33 = v126;
  v35 = static Date.now.getter(v32);
  v36 = Date.yearString.getter(v35);
  v38 = v37;
  v100 = *(void (**)(char *, uint64_t))(v27 + 8);
  v100(v31, v26);
  if (!v33)
  {
    if (!v38)
      goto LABEL_13;
    goto LABEL_9;
  }
  if (!v38)
  {
    v38 = v33;
LABEL_9:
    swift_bridgeObjectRelease(v38);
    goto LABEL_10;
  }
  if (v34 == v36 && v33 == v38)
  {
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v38);
LABEL_13:
    countAndFlagsBits = 0;
    object = 0;
    goto LABEL_14;
  }
  v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v33, v36, v38, 0);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v38);
  if ((v45 & 1) != 0)
    goto LABEL_13;
LABEL_10:
  FRPSectionInfo.section.getter(&v125);
  countAndFlagsBits = v125;
  object = v126;
  if (!v126)
  {
    v41 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v127._object = (void *)0xE000000000000000;
    v42._object = (void *)0x8000000100430350;
    v42._countAndFlagsBits = 0xD000000000000015;
    v43._countAndFlagsBits = 0;
    v43._object = (void *)0xE000000000000000;
    v127._countAndFlagsBits = 0;
    v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v42, (Swift::String_optional)(unint64_t)countAndFlagsBits, (NSBundle)v41, v43, v127);
    countAndFlagsBits = v44._countAndFlagsBits;
    object = v44._object;

  }
LABEL_14:
  v46 = FRPSectionInfo.items.getter(v121);
  v47 = v46;
  if ((unint64_t)v46 >> 62)
  {
    if (v46 >= 0)
      v46 &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(v46);
  }
  else
  {
    result = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v108 = a1;
  v107 = object;
  if (!result)
  {
    swift_bridgeObjectRelease(v47);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v25, 1, 1, v26);
LABEL_23:
    sub_100007A28((uint64_t)v25, &qword_1005522F0);
    v55 = 0;
    v56 = 1;
    goto LABEL_24;
  }
  if ((v47 & 0xC000000000000001) != 0)
  {
    v49 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v47);
  }
  else
  {
    if (!*(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v49 = *(_QWORD *)(v47 + 32);
    swift_retain(v49);
  }
  v50 = swift_bridgeObjectRelease(v47);
  LegacyEpisodeLockup.releaseDate.getter(v50);
  swift_release(v49);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
    goto LABEL_23;
  v51 = v101;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v101, v25, v26);
  v52 = v103;
  v53 = v102;
  v54 = v104;
  (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, enum case for Calendar.Component.year(_:), v104);
  v55 = Calendar.component(_:from:)(v53, v51);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
  v100(v51, v26);
  v56 = 0;
LABEL_24:
  v57 = ShelfIDBuilder.init(named:)(0x7365646F73697065, 0xE800000000000000);
  v58 = EpisodeListSettings.listType.getter(v124, v57);
  v59 = EpisodeListType.description.getter(v58);
  v61 = v60;
  v62 = ShelfIDBuilder.addingAttribute(_:named:)(v59);
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease(v61);
  sub_10003F450((uint64_t)v124, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  if ((v56 & 1) != 0)
  {
    v63 = 0xE700000000000000;
    v64 = 0x6E776F6E6B6E75;
  }
  else
  {
    v125 = v55;
    v65 = sub_10016D80C();
    v64 = BinaryInteger.description.getter(&type metadata for Int, v65);
    v63 = v66;
  }
  v67 = ShelfIDBuilder.addingAttribute(_:named:)(v64);
  swift_bridgeObjectRelease(v63);
  swift_bridgeObjectRelease(v62);
  v68 = ShelfIDBuilder.build()();
  v69 = swift_bridgeObjectRelease(v67);
  v105 = v68._countAndFlagsBits;
  if ((v56 & 1) != 0)
  {
    v104 = 0xEB000000006E776FLL;
    v103 = 0x6E6B6E5565746144;
  }
  else
  {
    v125 = v55;
    v70 = sub_10016D80C();
    v69 = BinaryInteger.description.getter(&type metadata for Int, v70);
    v103 = v69;
    v104 = v71;
  }
  v72 = v106;
  v73 = EpisodeListSettings.listType.getter(&v125, v69);
  v74 = EpisodeListType.shelfItemKind.getter(v73);
  sub_10003F450((uint64_t)&v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  LOBYTE(v122[0]) = 1;
  v75 = v113;
  ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(v74, 0, 0x10000000000, 1);
  v76 = type metadata accessor for ActionMenu(0);
  v77 = v109;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v109, 1, 1, v76);
  v78 = type metadata accessor for Header.PrimaryAction(0);
  v79 = v110;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v110, 1, 1, v78);
  v80 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v72, 1, 1, v80);
  v81 = v107;
  v82 = swift_bridgeObjectRetain(v107);
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(countAndFlagsBits, v81, 0, 0, 0, 0, 0, 0, v82, v77, v79, _swiftEmptyArrayStorage, v72);
  v83 = v112;
  v84 = v114;
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v112, v75, v114);
  v85 = FRPSectionInfo.items.getter(v121);
  v121 = sub_1001788C8(v85);
  swift_bridgeObjectRelease(v85);
  v86 = type metadata accessor for URL(0);
  v87 = v115;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v115, 1, 1, v86);
  v123 = 0;
  memset(v122, 0, sizeof(v122));
  v88 = swift_bridgeObjectRetain(v68._object);
  v89 = ModernShelf.ItemPresentation.itemKind.getter(v88);
  v90 = ModernShelf.ItemKind.targetType.getter(v89);
  v92 = v91;
  v99 = countAndFlagsBits;
  v93 = v116;
  v94 = v104;
  v95 = v105;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(v103, v104, 0, 0, v105, v68._object, v90, v91, v99, v81);
  swift_bridgeObjectRelease(v68._object);
  swift_bridgeObjectRelease(v92);
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v94);
  v96 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v93, 0, 1, v96);
  v97 = type metadata accessor for MetricsShelfName(0);
  v98 = v117;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v117, 1, 1, v97);
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v95, v68._object, v120, v83, v121, v87, 1, 0, v122, v93, v98);
  return (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v75, v84);
}

uint64_t sub_10015E8D8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result)
    result = MTPodcast.episodeSortType.getter();
  *a2 = result;
  return result;
}

uint64_t sub_10015E904(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  char v12;

  v9[0] = a4;
  v9[1] = a5;
  v9[2] = a2;
  v9[3] = a3;
  v10 = 0u;
  v11 = 0u;
  v12 = 7;
  swift_bridgeObjectRetain(a5);
  sub_100168F7C(a2, a3);
  return EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(v9, a1, 3, 0, 0, 0);
}

uint64_t sub_10015E990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v23[2];

  v8 = EpisodeListSettings.sort.getter();
  if ((EpisodeSortType.isSerialSort.getter(v8) & 1) != 0)
    v9 = sub_10016A0D0(a1, a2, a3);
  else
    v9 = sub_10015D6CC(a1, a2, a3);
  v10 = v9;
  v11 = sub_10003F544(&qword_100553E20);
  v12 = sub_10003F544(&qword_100553E70);
  v13 = sub_10003F544(&qword_100553E40);
  v14 = sub_10002F9C8(&qword_100553E30, &qword_100553E20, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v15 = PaginatedPublisher.paginatedFRPOutputMap<A, B>(_:)(sub_10016DFA4, 0, v11, v12, v13, v14);
  v23[1] = v15;
  v16 = sub_10003F544(&qword_100553E38);
  v17 = sub_10003F544(&qword_100553E28);
  v18 = swift_allocObject(v16, ((*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_1003CA200;
  v23[0] = 0;
  FRPOutput.init(content:hasMore:totalCount:)(v23, 1, 0, v13);
  v19 = sub_10003F544(&qword_100553988);
  v20 = sub_10002F9C8(&qword_1005539A0, &qword_100553988, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v21 = PaginatedPublisher.paginatedPrepend(_:)(v18, v19, v20);
  swift_release(v15);
  swift_release(v10);
  result = swift_bridgeObjectRelease(v18);
  *a4 = v21;
  return result;
}

uint64_t sub_10015EB5C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  id v24;
  _QWORD *v25;
  char v26;
  _OWORD v27[2];
  uint64_t v28;
  _QWORD v29[9];
  _QWORD v30[9];

  v6 = sub_10003F544((uint64_t *)&unk_100553DE0);
  __chkstk_darwin(v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_10055B790);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = EpisodeListSettings.listType.getter(v29, v10);
  v14 = EpisodeListType.stationUUID.getter(v13);
  v16 = v15;
  sub_10003F450((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  if (!v16)
  {
    type metadata accessor for Episode(0, v17);
    v28 = 0;
    memset(v27, 0, sizeof(v27));
    v24 = a1;
    v25 = EpisodeListSettings.listType.getter(v30, v24);
    v26 = EpisodeListType.wantsListenNowReason.getter(v25);
    sub_10003F450((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
    result = Episode.init(from:clickAction:wantsListenNowReason:)(v24, (uint64_t)v27, v26 & 1);
    v19 = result;
    if (result)
      goto LABEL_3;
LABEL_5:
    v23 = 0;
    goto LABEL_6;
  }
  type metadata accessor for StationEpisode(0);
  result = (uint64_t)sub_1002716B8(a1, v14, v16);
  v19 = result;
  if (!result)
    goto LABEL_5;
LABEL_3:
  v20 = type metadata accessor for EpisodeListSettings(0);
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v12, a2, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v20);
  v22 = swift_retain(v19);
  EpisodeListSettings.sectionContext.getter(v22);
  v23 = dispatch thunk of Episode.defaultLockup(for:sectionContext:)(v12, v8);
  swift_release(v19);
  sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DE0);
  sub_100007A28((uint64_t)v12, &qword_10055B790);
  result = swift_release(v19);
LABEL_6:
  *a3 = v23;
  return result;
}

uint64_t sub_10015ED78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v2 = sub_10003F544(&qword_100553F20);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((EpisodeListType.shouldMatchShowSorting.getter(v4) & 1) != 0 && (EpisodeListType.libraryShowUUID.getter(), v7))
  {
    v8 = v7;
    v9 = sub_10015EF9C();
    swift_bridgeObjectRelease(v8);
    return v9;
  }
  else
  {
    sub_10016965C(a1, (uint64_t)&v26);
    if (v27 == 4)
    {
      v11 = sub_10015EF9C();
      v21 = v11;
      v12 = sub_10015F220();
      v22 = v11;
      v23[0] = v12;
      v13 = sub_10003F544(&qword_100553F38);
      v14 = sub_10003F544(&qword_1005539B8);
      v15 = sub_10002F9C8(&qword_100553F40, &qword_100553F38, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v16 = sub_10002F9C8(&qword_1005539C8, &qword_1005539B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.combineLatest<A, B>(_:_:)(&v22, sub_10015F404, 0, v13, v14, &type metadata for EpisodeSortType, v15, v16);
      v17 = sub_10002F9C8(&qword_100553F48, &qword_100553F20, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      v18 = Publisher.eraseToAnyPublisher()(v2, v17);
      swift_release(v21);
      swift_release(v12);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
    else
    {
      LibraryDataProvider.libraryActionController.getter((uint64_t)v23);
      v19 = v24;
      v20 = v25;
      sub_10003A834(v23, v24);
      v18 = dispatch thunk of LibraryActionControllerProtocol.episodeSortTypePublisher(forListType:)(a1, v19, v20);
      sub_10003D380(v23);
    }
    return v18;
  }
}

uint64_t sub_10015EF9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSString v11;
  id v12;
  id v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v1 = sub_10003F544(&qword_100553F90);
  v21 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_100553F98);
  v22 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v9 = v8;
  v10 = (void *)objc_opt_self(MTPodcast);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "predicateForPodcastUUID:", v11);

  v13 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v15 = static OS_dispatch_queue.main.getter(v14);
  v16 = sub_100005EC8(0, (unint64_t *)&qword_100553810, MTPodcast_ptr);
  FetchedResultsSingleItemPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(0xD000000000000014, 0x80000001004303B0, v7, v9, v12, v13, v15, sub_10015F4FC, 0, sub_10015F524, 0, &type metadata for EpisodeSortType, v16);
  v17 = sub_10002F9C8(&qword_100553FA0, &qword_100553F90, (uint64_t)&protocol conformance descriptor for FetchedResultsSingleItemPublisher<A, B>);
  Publisher.map<A>(_:)(sub_10015F5B8, 0, v1, &type metadata for EpisodeSortType, v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v1);
  v18 = sub_10002F9C8(&qword_100553FA8, &qword_100553F98, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v19 = Publisher.eraseToAnyPublisher()(v4, v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  return v19;
}

uint64_t sub_10015F220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString v9;
  id v10;
  id v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = sub_10003F544(&qword_100553F78);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPlaylistEntityName);
  v7 = v6;
  v8 = (void *)objc_opt_self(MTPlaylist);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "predicateForStationUUID:", v9);

  v11 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v13 = static OS_dispatch_queue.main.getter(v12);
  v14 = type metadata accessor for StationSortOrder(0);
  v15 = sub_100005EC8(0, (unint64_t *)&qword_100553A30, MTPlaylist_ptr);
  FetchedResultsSingleItemPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(0xD000000000000014, 0x8000000100430390, v5, v7, v10, v11, v13, sub_10015F5CC, 0, sub_10015F5F8, 0, v14, v15);
  v16 = sub_10002F9C8(&qword_100553F80, &qword_100553F78, (uint64_t)&protocol conformance descriptor for FetchedResultsSingleItemPublisher<A, B>);
  v17 = Publisher.eraseToAnyPublisher()(v1, v16);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v17;
}

uint64_t sub_10015F404@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  uint64_t v14;

  v6 = sub_10003F544(&qword_100553E10);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  sub_100007A64(a1, (uint64_t)v8, &qword_100553E10);
  v10 = type metadata accessor for StationSortOrder(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    result = sub_100007A28((uint64_t)v8, &qword_100553E10);
  }
  else
  {
    v13 = StationSortOrder.episodeSort.getter();
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    if (v13 != 17)
      v9 = v13;
  }
  *a3 = v9;
  return result;
}

uint64_t sub_10015F4FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MTPodcast.episodeSortType.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10015F524(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v2 = *a2;
  v3 = EpisodeSortType.rawValue.getter(*a1);
  v5 = v4;
  v6 = EpisodeSortType.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease_n(v5, 2);
    v11 = 0;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v9);
    v11 = v10 ^ 1;
  }
  return v11 & 1;
}

unsigned __int8 *sub_10015F5B8@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v2;

  v2 = *result;
  if (v2 == 17)
    LOBYTE(v2) = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_10015F5CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002E5BF4(objc_msgSend(a1, "containerOrder"), a2);
}

BOOL sub_10015F5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for StationSortOrder(0);
  v5 = sub_100026844(&qword_100553F88, (uint64_t (*)(uint64_t))&type metadata accessor for StationSortOrder, (uint64_t)&protocol conformance descriptor for StationSortOrder);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_10015F668@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v6 = sub_10003F544((uint64_t *)&unk_100553DE0);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Episode(0, v12);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  result = Episode.init(from:clickAction:wantsListenNowReason:)(a1, (uint64_t)v21, 0);
  if (result)
  {
    v14 = result;
    v15 = type metadata accessor for EpisodeListSettings(0);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v11, a2, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
    v17 = enum case for SectionContext.season(_:);
    v18 = type metadata accessor for SectionContext(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v8, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v8, 0, 1, v18);
    v20 = dispatch thunk of Episode.defaultLockup(for:sectionContext:)(v11, v8);
    swift_release(v14);
    sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DE0);
    result = sub_100007A28((uint64_t)v11, &qword_10055B790);
  }
  else
  {
    v20 = 0;
  }
  *a3 = v20;
  return result;
}

uint64_t sub_10015F818@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = LegacyEpisodeLockup.seasonNumber.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10015F848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  char v38;
  id v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  Swift::String v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  __n128 v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void *v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *object;
  uint64_t countAndFlagsBits;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  _OWORD v97[2];
  uint64_t v98;
  _QWORD v99[9];
  uint64_t v100;
  unint64_t v101;
  Swift::String v102;
  Swift::String v103;

  v94 = a3;
  v5 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v5);
  v93 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v7);
  v92 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v9);
  v91 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v11);
  v86 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v13);
  v85 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v15);
  v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v18);
  v95 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v96 = *(_QWORD *)(v89 - 8);
  v20 = __chkstk_darwin(v89);
  v88 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v81 - v22;
  v24 = ShelfIDBuilder.init(named:)(0x7365646F73697065, 0xE800000000000000);
  v87 = a2;
  v25 = EpisodeListSettings.listType.getter(v99, v24);
  v26 = EpisodeListType.description.getter(v25);
  v28 = v27;
  v29 = ShelfIDBuilder.addingAttribute(_:named:)(v26);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v28);
  sub_10003F450((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v30 = sub_10003F544(&qword_100553ED0);
  FRPSectionInfo.section.getter(&v100);
  if ((v101 & 1) != 0)
  {
    v31 = 0xE700000000000000;
    v32 = 0x6E776F6E6B6E75;
  }
  else
  {
    *(_QWORD *)&v97[0] = v100;
    v33 = sub_10016D798();
    v32 = BinaryInteger.description.getter(&type metadata for Int64, v33);
    v31 = v34;
  }
  v35 = ShelfIDBuilder.addingAttribute(_:named:)(v32);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v29);
  v36 = ShelfIDBuilder.build()();
  countAndFlagsBits = v36._countAndFlagsBits;
  object = v36._object;
  swift_bridgeObjectRelease(v35);
  v90 = a1;
  FRPSectionInfo.section.getter(&v100);
  v37 = v100;
  v38 = v101;
  v39 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((v38 & 1) != 0 || !v37)
  {
    v53._countAndFlagsBits = 0xD000000000000017;
    v103._object = (void *)0xE000000000000000;
    v53._object = (void *)0x8000000100430310;
    v54._countAndFlagsBits = 0;
    v54._object = (void *)0xE000000000000000;
    v103._countAndFlagsBits = 0;
    v55 = NSLocalizedString(_:tableName:bundle:value:comment:)(v53, (Swift::String_optional)0, (NSBundle)v39, v54, v103);
    v45 = v55._countAndFlagsBits;
    v47 = v55._object;

    v52 = 0xED00006E6F736165;
    v51 = 0x536E776F6E6B6E55;
  }
  else
  {
    v102._object = (void *)0xE000000000000000;
    v40._object = (void *)0x8000000100430330;
    v40._countAndFlagsBits = 0xD000000000000014;
    v41._countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    v102._countAndFlagsBits = 0;
    v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, (Swift::String_optional)0, (NSBundle)v39, v41, v102);

    v43 = sub_10003F544(&qword_1005559A0);
    v44 = swift_allocObject(v43, 72, 7);
    *(_OWORD *)(v44 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v44 + 56) = &type metadata for Int64;
    *(_QWORD *)(v44 + 64) = &protocol witness table for Int64;
    *(_QWORD *)(v44 + 32) = v37;
    v45 = static String.localizedStringWithFormat(_:_:)(v42._countAndFlagsBits, v42._object, v44);
    v47 = v46;
    swift_bridgeObjectRelease(v42._object);
    swift_bridgeObjectRelease(v44);
    v100 = 0x6E6F73616553;
    v101 = 0xE600000000000000;
    *(_QWORD *)&v97[0] = v37;
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v49 = v48._object;
    String.append(_:)(v48);
    v50 = swift_bridgeObjectRelease(v49);
    v51 = v100;
    v52 = v101;
  }
  v82 = v51;
  v56 = EpisodeListSettings.listType.getter(&v100, v50);
  EpisodeListType.shelfItemPresentation.getter(v56);
  sub_10003F450((uint64_t)&v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v57 = type metadata accessor for ActionMenu(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v17, 1, 1, v57);
  v58 = type metadata accessor for Header.PrimaryAction(0);
  v59 = v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v85, 1, 1, v58);
  v60 = type metadata accessor for ArtworkModel(0);
  v61 = v86;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v86, 1, 1, v60);
  v62 = swift_bridgeObjectRetain(v47);
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(v45, v47, 0, 0, 0, 0, 0, 0, v62, v17, v59, _swiftEmptyArrayStorage, v61);
  v63 = v88;
  v64 = v89;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v88, v23, v89);
  v65 = FRPSectionInfo.items.getter(v30);
  v90 = sub_1001788C8(v65);
  swift_bridgeObjectRelease(v65);
  v66 = type metadata accessor for URL(0);
  v67 = v91;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v91, 1, 1, v66);
  v98 = 0;
  memset(v97, 0, sizeof(v97));
  v68 = object;
  v69 = swift_bridgeObjectRetain(object);
  v70 = ModernShelf.ItemPresentation.itemKind.getter(v69);
  v71 = ModernShelf.ItemKind.targetType.getter(v70);
  v73 = v72;
  v80 = v45;
  v74 = v92;
  v75 = countAndFlagsBits;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(v82, v52, 0, 0, countAndFlagsBits, v68, v71, v72, v80, v47);
  swift_bridgeObjectRelease(v52);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v47);
  v76 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v74, 0, 1, v76);
  v77 = type metadata accessor for MetricsShelfName(0);
  v78 = v93;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v93, 1, 1, v77);
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v75, v68, v95, v63, v90, v67, 1, 0, v97, v74, v78);
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v23, v64);
}

uint64_t sub_100160068(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  Swift::String v16;
  void *object;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  id v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;

  v62 = a3;
  v65 = a2;
  v66 = type metadata accessor for Calendar(0);
  v64 = *(_QWORD *)(v66 - 8);
  v68 = *(_QWORD *)(v64 + 64);
  __chkstk_darwin(v66);
  v63 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EpisodeListSettings(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = v5;
  __chkstk_darwin(v5);
  v9 = v8;
  v53 = v8;
  v10 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_100553EE0);
  v12 = *(_QWORD *)(v11 - 8);
  v69 = v11;
  v70 = v12;
  __chkstk_darwin(v11);
  v61 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = 0;
  v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v14 = swift_bridgeObjectRelease(v74);
  v71 = 0xD00000000000001ALL;
  v72 = 0x80000001004302F0;
  v15 = EpisodeListSettings.listType.getter(&v73, v14);
  v16._countAndFlagsBits = EpisodeListType.description.getter(v15);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  sub_10003F450((uint64_t)&v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v60 = v71;
  v59 = v72;
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v57 = v18;
  v56 = EpisodeListSettings.predicate.getter(v58);
  v19 = a1;
  v20 = EpisodeListSettings.sort.getter();
  v52 = EpisodeSortType.descriptors.getter(v20);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v22 = static OS_dispatch_queue.main.getter(v21);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v50 = v10;
  v24 = v7;
  v23(v10, v19, v7);
  v25 = *(unsigned __int8 *)(v6 + 80);
  v26 = (v25 + 16) & ~v25;
  v51 = v25 | 7;
  v27 = swift_allocObject(&unk_1004B0030, v26 + v9, v25 | 7);
  v55 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v28 = v24;
  v55(v27 + v26, v10, v24);
  v29 = type metadata accessor for LibraryEpisodeLockup(0);
  v54 = v29;
  v30 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v31 = v62;
  v32 = v61;
  FetchedResultsSectionedPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:sectionTransform:)(v60, v59, v58, v57, v56, v52, v65, v31, v22, sub_10016D7E8, v27, sub_10015BAB8, 0, sub_10016066C, 0, v29, &type metadata for String, v30, &protocol witness table for String);
  v33 = v66;
  v35 = v63;
  v34 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v67 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_metricsCalendar, v66);
  v36 = v50;
  v37 = v19;
  v38 = v28;
  v23(v50, v37, v28);
  v39 = *(unsigned __int8 *)(v34 + 80);
  v40 = v34;
  v41 = (v39 + 16) & ~v39;
  v42 = (v68 + v25 + v41) & ~v25;
  v43 = swift_allocObject(&unk_1004B0058, v42 + v53, v51 | v39);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v43 + v41, v35, v33);
  v55(v43 + v42, v36, v38);
  v44 = type metadata accessor for ModernShelf(0);
  v45 = sub_10002F9C8((unint64_t *)&unk_100553EE8, &qword_100553EE0, (uint64_t)&protocol conformance descriptor for FetchedResultsSectionedPublisher<A, B, C>);
  v46 = v69;
  v47 = PaginatedPublisher.paginatedSectionMap<A, B, C>(_:)(sub_10016D800, v43, v69, &type metadata for String, v54, v44, v45, &protocol witness table for String);
  swift_release(v43);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v32, v46);
  return v47;
}

uint64_t sub_1001604E0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v6 = sub_10003F544((uint64_t *)&unk_100553DE0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Episode(0, v12);
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  result = Episode.init(from:clickAction:wantsListenNowReason:)(a1, (uint64_t)v19, 0);
  if (result)
  {
    v14 = result;
    v15 = type metadata accessor for EpisodeListSettings(0);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v11, a2, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
    v17 = type metadata accessor for SectionContext(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 1, 1, v17);
    v18 = dispatch thunk of Episode.defaultLockup(for:sectionContext:)(v11, v8);
    swift_release(v14);
    sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DE0);
    result = sub_100007A28((uint64_t)v11, &qword_10055B790);
  }
  else
  {
    v18 = 0;
  }
  *a3 = v18;
  return result;
}

void sub_10016066C(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t countAndFlagsBits;
  void *v10;
  void *object;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;

  v2 = sub_10003F544(&qword_1005522F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LegacyEpisodeLockup.releaseDate.getter(v3);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100007A28((uint64_t)v5, &qword_1005522F0);
LABEL_4:
    v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v17._object = (void *)0xE000000000000000;
    v13._object = (void *)0x8000000100430350;
    v13._countAndFlagsBits = 0xD000000000000015;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v17._countAndFlagsBits = 0;
    v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v17);
    countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;
    swift_bridgeObjectRelease(0);

    goto LABEL_5;
  }
  countAndFlagsBits = Date.yearString.getter(v8);
  object = v10;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  if (!object)
    goto LABEL_4;
LABEL_5:
  *a1 = countAndFlagsBits;
  a1[1] = (uint64_t)object;
}

uint64_t sub_1001607C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  void *object;
  uint64_t countAndFlagsBits;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[2];
  uint64_t v107;
  _QWORD v108[8];
  uint64_t v109;

  v93 = a3;
  countAndFlagsBits = a2;
  v6 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v6);
  v99 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v8);
  v98 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v10);
  v97 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v12);
  v91 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v14);
  v90 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v16);
  v92 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v18);
  v102 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v101 = *(_QWORD *)(v103 - 8);
  v20 = __chkstk_darwin(v103);
  v94 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v95 = (char *)&v86 - v22;
  v23 = type metadata accessor for Calendar.Component(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v27);
  v29 = (char *)&v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v86 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_10003F544(&qword_100553EF8);
  v96 = a1;
  v35 = FRPSectionInfo.items.getter(v34);
  v36 = v35;
  if ((unint64_t)v35 >> 62)
  {
    if (v35 >= 0)
      v35 &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(v35);
  }
  else
  {
    result = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v100 = a4;
  if (!result)
  {
    swift_bridgeObjectRelease(v36);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v29, 1, 1, v30);
LABEL_10:
    sub_100007A28((uint64_t)v29, &qword_1005522F0);
    v40 = 0;
    v41 = 1;
    goto LABEL_11;
  }
  if ((v36 & 0xC000000000000001) != 0)
  {
    v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v36);
  }
  else
  {
    if (!*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v38 = *(_QWORD *)(v36 + 32);
    swift_retain(v38);
  }
  v39 = swift_bridgeObjectRelease(v36);
  LegacyEpisodeLockup.releaseDate.getter(v39);
  swift_release(v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
    goto LABEL_10;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v33, v29, v30);
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for Calendar.Component.year(_:), v23);
  v40 = Calendar.component(_:from:)(v26, v33);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  v41 = 0;
LABEL_11:
  v42 = ShelfIDBuilder.init(named:)(0x7365646F73697065, 0xE800000000000000);
  v43 = EpisodeListSettings.listType.getter(v108, v42);
  v44 = EpisodeListType.description.getter(v43);
  v46 = v45;
  v47 = ShelfIDBuilder.addingAttribute(_:named:)(v44);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v46);
  sub_10003F450((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  if ((v41 & 1) != 0)
  {
    v48 = 0xE700000000000000;
    v49 = 0x6E776F6E6B6E75;
  }
  else
  {
    v109 = v40;
    v50 = sub_10016D80C();
    v49 = BinaryInteger.description.getter(&type metadata for Int, v50);
    v48 = v51;
  }
  v52 = ShelfIDBuilder.addingAttribute(_:named:)(v49);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v47);
  v53 = ShelfIDBuilder.build()();
  v54 = swift_bridgeObjectRelease(v52);
  countAndFlagsBits = v53._countAndFlagsBits;
  object = v53._object;
  if ((v41 & 1) != 0)
  {
    v87 = 0xEB000000006E776FLL;
    v55 = 0x6E6B6E5565746144;
  }
  else
  {
    v109 = v40;
    v56 = sub_10016D80C();
    v54 = BinaryInteger.description.getter(&type metadata for Int, v56);
    v55 = v54;
    v87 = v57;
  }
  v58 = v91;
  v59 = v90;
  v60 = EpisodeListSettings.listType.getter(&v109, v54);
  v61 = v95;
  EpisodeListType.shelfItemPresentation.getter(v60);
  sub_10003F450((uint64_t)&v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  FRPSectionInfo.section.getter(v106);
  v62 = v106[0];
  v63 = type metadata accessor for ActionMenu(0);
  v64 = v92;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v92, 1, 1, v63);
  v65 = type metadata accessor for Header.PrimaryAction(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v59, 1, 1, v65);
  v66 = type metadata accessor for ArtworkModel(0);
  v67.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v58, 1, 1, v66);
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(v62, *((_QWORD *)&v62 + 1), 0, 0, 0, 0, 0, 0, v67, v64, v59, _swiftEmptyArrayStorage, v58);
  v68 = v94;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v94, v61, v103);
  v69 = FRPSectionInfo.items.getter(v34);
  v93 = sub_1001788C8(v69);
  swift_bridgeObjectRelease(v69);
  v70 = type metadata accessor for URL(0);
  v71 = v97;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v97, 1, 1, v70);
  v107 = 0;
  memset(v106, 0, sizeof(v106));
  v72 = object;
  v73 = swift_bridgeObjectRetain(object);
  v74 = ModernShelf.ItemPresentation.itemKind.getter(v73);
  v75 = ModernShelf.ItemKind.targetType.getter(v74);
  v77 = v76;
  FRPSectionInfo.section.getter(&v104);
  v78 = v105;
  v79 = v98;
  v80 = v55;
  v81 = v87;
  v82 = countAndFlagsBits;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(v80, v87, 0, 0, countAndFlagsBits, v72, v75, v77, v104, v105);
  swift_bridgeObjectRelease(v78);
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v72);
  swift_bridgeObjectRelease(v77);
  v83 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v79, 0, 1, v83);
  v84 = type metadata accessor for MetricsShelfName(0);
  v85 = v99;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v99, 1, 1, v84);
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v82, v72, v102, v68, v93, v71, 1, 0, v106, v79, v85);
  return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v61, v103);
}

uint64_t sub_1001610C8@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)(char *, char *);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t (**v46)(char *, char *);
  uint64_t v47;
  char *v48;
  __n128 v49;
  uint64_t (*v50)(char *, char *);
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t result;
  uint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *object;
  uint64_t countAndFlagsBits;
  char *v85;
  char *v86;
  char *v87;
  uint64_t (**v88)(char *, char *);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t *v95;
  char *v96;
  char *v97;
  _BYTE v98[32];
  uint64_t v99;
  _QWORD v100[9];
  _QWORD v101[9];
  _QWORD v102[9];
  _QWORD v103[10];

  v95 = a3;
  v5 = sub_10003F544(&qword_100553DB0);
  v6 = __chkstk_darwin(v5);
  v94 = (char *)v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v86 = (char *)v79 - v8;
  v9 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v9);
  v93 = (char *)v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v11);
  v97 = (char *)v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v13);
  v89 = (char *)v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v15);
  v88 = (uint64_t (**)(char *, char *))((char *)v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v17);
  v87 = (char *)v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v19);
  v96 = (char *)v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ModernShelf(0);
  v91 = *(_QWORD *)(v21 - 8);
  v92 = v21;
  __chkstk_darwin(v21);
  v90 = (char *)v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v24 = *(uint64_t (***)(char *, char *))(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)v79 - v28;
  object = *a1;
  v30 = ShelfIDBuilder.init(named:)(0x7365646F73697065, 0xE800000000000000);
  v31 = EpisodeListSettings.listType.getter(v100, v30);
  v32 = EpisodeListType.description.getter(v31);
  v34 = v33;
  v35 = ShelfIDBuilder.addingAttribute(_:named:)(v32);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v34);
  sub_10003F450((uint64_t)v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v36 = ShelfIDBuilder.build()();
  countAndFlagsBits = v36._countAndFlagsBits;
  v37 = swift_bridgeObjectRelease(v35);
  v79[1] = a2;
  v38 = EpisodeListSettings.listType.getter(v101, v37);
  EpisodeListType.shelfItemPresentation.getter(v38);
  v39 = sub_10003F450((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v40 = EpisodeListSettings.listType.getter(v102, v39);
  v41 = EpisodeListType.shelfImpressionMetricsID.getter(v40);
  v81 = v42;
  v82 = v41;
  sub_10003F450((uint64_t)v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v43 = type metadata accessor for ActionMenu(0);
  v44 = v87;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v87, 1, 1, v43);
  v45 = type metadata accessor for Header.PrimaryAction(0);
  v46 = v88;
  (*(void (**)(uint64_t (**)(char *, char *), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8)
                                                                                             + 56))(v88, 1, 1, v45);
  v47 = type metadata accessor for ArtworkModel(0);
  v48 = v89;
  v49.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v89, 1, 1, v47);
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(0, 0, 0, 0, 0, 0, 0, 0, v49, v44, v46, _swiftEmptyArrayStorage, v48);
  v88 = v24;
  v89 = (char *)v23;
  v50 = v24[2];
  v85 = v27;
  ((void (*)(char *, char *, uint64_t))v50)(v27, v29, v23);
  v80 = sub_1001788C8((uint64_t)object);
  v51 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v97, 1, 1, v51);
  v99 = 0;
  memset(v98, 0, sizeof(v98));
  object = v36._object;
  v52 = swift_bridgeObjectRetain(v36._object);
  v87 = v29;
  v53 = ModernShelf.ItemPresentation.itemKind.getter(v52);
  v79[0] = ModernShelf.ItemKind.targetType.getter(v53);
  v55 = v54;
  v56 = EpisodeListSettings.listType.getter(v103, v79[0]);
  v57 = (uint64_t)v86;
  EpisodeListType.metricsShelfName.getter(v56);
  sub_10003F450((uint64_t)v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v58 = type metadata accessor for MetricsShelfName(0);
  v59 = *(_QWORD *)(v58 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58) == 1)
  {
    sub_100007A28(v57, &qword_100553DB0);
    v60 = 0;
    v61 = 0;
  }
  else
  {
    v62 = v57;
    v60 = MetricsShelfName.rawValue.getter();
    v61 = v63;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v62, v58);
  }
  if (v81)
    v64 = v81;
  else
    v64 = 0xE800000000000000;
  if (v81)
    v65 = v82;
  else
    v65 = 0x7365646F73697045;
  v78 = v60;
  v66 = v93;
  v67 = object;
  v68 = countAndFlagsBits;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(v65, v64, 0, 0, countAndFlagsBits, object, v79[0], v55, v78, v61);
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRelease(v61);
  v69 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v66, 0, 1, v69);
  v70 = v94;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v94, 1, 1, v58);
  v71 = v90;
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v68, v67, v96, v85, v80, v97, 1, 0, v98, v66, v70);
  v72 = sub_10003F544(&qword_100553EA8);
  v73 = v91;
  v74 = *(unsigned __int8 *)(v91 + 80);
  v75 = (v74 + 32) & ~v74;
  v76 = swift_allocObject(v72, v75 + *(_QWORD *)(v91 + 72), v74 | 7);
  *(_OWORD *)(v76 + 16) = xmmword_1003CA200;
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v76 + v75, v71, v92);
  result = v88[1](v87, v89);
  *v95 = v76;
  return result;
}

uint64_t sub_10016177C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  void *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t ObjectType;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  _QWORD v102[9];
  _QWORD v103[9];
  _QWORD v104[9];
  _QWORD v105[9];
  _QWORD v106[8];
  char v107;
  _QWORD v108[8];
  char v109;

  v96 = a3;
  v99 = a2;
  ObjectType = swift_getObjectType(v3, a2);
  v5 = sub_10003F544(&qword_100553E50);
  v94 = *(_QWORD *)(v5 - 8);
  v95 = v5;
  __chkstk_darwin(v5);
  v93 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EpisodeListSettings(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v97 = v9;
  v98 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544(&qword_100553E58);
  __chkstk_darwin(v10);
  v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ShowLockupStyle(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = EpisodeListSettings.listType.getter(v102, v15);
  v19 = EpisodeListSettings.hidePlayedEpisodes.getter(v18);
  v20 = EpisodeListType.groupedShowListType(hidePlayedEpisodes:)(v19 & 1);
  v22 = v21;
  v23 = sub_10003F450((uint64_t)v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  if ((v22 & 0x100) != 0)
    goto LABEL_10;
  v91 = v20;
  v24 = EpisodeListSettings.listType.getter(v103, v23);
  v25 = EpisodeListSettings.hidePlayedEpisodes.getter(v24);
  EpisodeListType.groupedShowLockupStyle(hidePlayedEpisodes:)(v25 & 1);
  sub_10003F450((uint64_t)v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v23 = sub_100007A28((uint64_t)v12, &qword_100553E58);
    goto LABEL_10;
  }
  v90 = v7;
  v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
  v27 = EpisodeListSettings.sort.getter(v26);
  v28 = EpisodeSortType.rawValue.getter(v27);
  v30 = v29;
  v32 = EpisodeSortType.rawValue.getter(14);
  v33 = v31;
  if (v28 == v32 && v30 == v31)
  {
    swift_bridgeObjectRelease_n(v30, 2);
LABEL_8:
    v35 = v22 & 1;
    LODWORD(v96) = (v22 & 1) != 0;
    v36 = v91;
    v108[0] = LibraryDataProvider.showsPaginatedPublisher(listType:sortBy:lockupStyle:pageSize:)(v91, v35, 0, (uint64_t)v17, v99);
    v37 = v98;
    v38 = a1;
    v39 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v98, v38, v90);
    v40 = *(unsigned __int8 *)(v8 + 80);
    v41 = (v40 + 25) & ~v40;
    v42 = swift_allocObject(&unk_1004AFFB8, v41 + v97, v40 | 7);
    *(_QWORD *)(v42 + 16) = v36;
    *(_BYTE *)(v42 + 24) = (_BYTE)v96;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v42 + v41, v37, v39);
    v43 = sub_10003F544(&qword_100553E98);
    v44 = sub_10003F544((uint64_t *)&unk_100559EC0);
    v45 = sub_10003F544(&qword_100553E70);
    v46 = sub_10002F9C8(&qword_100553EA0, &qword_100553E98, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
    v47 = PaginatedPublisher.paginatedFRPOutputMap<A, B>(_:)(sub_10016D70C, v42, v43, v44, v45, v46);
    swift_release(v42);
    swift_release(v108[0]);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    return v47;
  }
  v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v33);
  if ((v34 & 1) != 0)
    goto LABEL_8;
  v23 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v7 = v90;
LABEL_10:
  EpisodeListSettings.listType.getter(v104, v23);
  sub_10016965C((uint64_t)v104, (uint64_t)v108);
  if (v109 == 2)
  {
    v48 = v7;
    v49 = v108[0];
    v50 = v108[1];
    type metadata accessor for CoreDataFetcher(0);
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v52 = (void *)static OS_dispatch_queue.main.getter(v51);
    v53 = static CoreDataFetcher.performAndPublishOnPodcast<A>(with:queue:block:)(v49, v50, v52, sub_100162460, 0, &type metadata for Bool);
    sub_10003F450((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);

    v106[0] = v53;
    v54 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v98, a1, v48);
    v55 = *(unsigned __int8 *)(v8 + 80);
    v56 = (v55 + 24) & ~v55;
    v57 = (v97 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
    v58 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v59 = swift_allocObject(&unk_1004AFF90, v58 + 8, v55 | 7);
    v60 = v100;
    *(_QWORD *)(v59 + 16) = v100;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v59 + v56, v54, v48);
    *(_QWORD *)(v59 + v57) = v99;
    v61 = v96;
    *(_QWORD *)(v59 + v58) = v96;
    v62 = v60;
    v63 = v61;
    v64 = sub_10003F544(&qword_100553E80);
    v65 = sub_10003F544(&qword_100553E20);
    v66 = sub_10002F9C8(&qword_100553E88, &qword_100553E80, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    v67 = v93;
    Publisher.map<A>(_:)(sub_10016D63C, v59, v64, v65, v66);
    swift_release(v59);
    swift_release(v106[0]);
    v68 = sub_10002F9C8(&qword_100553E90, &qword_100553E50, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v69 = sub_10002F9C8(&qword_100553E30, &qword_100553E20, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
    v70 = v95;
    v47 = Publisher<>.paginatedSwitchToLatest()(v95, v68, v69);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v67, v70);
  }
  else
  {
    v71 = sub_10003F450((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
    EpisodeListSettings.listType.getter(v105, v71);
    sub_10016965C((uint64_t)v105, (uint64_t)v106);
    if (v107 == 4)
    {
      v72 = v106[0];
      v73 = v106[1];
      v74 = v106[5];
      v75 = v106[6];
      v76 = v106[7];
      swift_bridgeObjectRelease(v106[3]);
      swift_bridgeObjectRelease(v74);
      v47 = sub_1001624E4(a1, v72, v73, v75, v76, v99, v96);
      swift_bridgeObjectRelease(v73);
      swift_bridgeObjectRelease(v76);
    }
    else
    {
      sub_10003F450((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
      v77 = sub_100026844(&qword_100553E60, type metadata accessor for LibraryDataProvider, (uint64_t)&protocol conformance descriptor for LibraryDataProvider);
      v101 = LibraryDataProviderProtocol.episodeListPublisher(settings:pageSize:)(a1, v99, ObjectType, v77);
      v78 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v98, a1, v7);
      v79 = *(unsigned __int8 *)(v8 + 80);
      v80 = (v79 + 16) & ~v79;
      v81 = swift_allocObject(&unk_1004AFF68, v80 + v97, v79 | 7);
      v82 = v7;
      v83 = v81;
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v81 + v80, v78, v82);
      v84 = sub_10003F544(&qword_100553E68);
      v85 = sub_10003F544((uint64_t *)&unk_1005537F0);
      v86 = sub_10003F544(&qword_100553E70);
      v87 = sub_10002F9C8(&qword_100553E78, &qword_100553E68, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
      v47 = PaginatedPublisher.paginatedFRPOutputMap<A, B>(_:)(sub_10016D598, v83, v84, v85, v86, v87);
      swift_release(v83);
      swift_release(v101);
    }
  }
  return v47;
}

uint64_t sub_100161ED4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  uint64_t countAndFlagsBits;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t *v76;
  _OWORD v77[2];
  uint64_t v78;
  _QWORD v79[10];

  v69 = a4;
  v76 = a5;
  v7 = a3 & 1;
  v8 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v8);
  v75 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v10);
  v74 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v12);
  v72 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ModernShelf.ItemPresentation(0);
  __chkstk_darwin(v14);
  v70 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v16);
  v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v19);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v22);
  v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v25);
  v27 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for ModernShelf(0);
  v28 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v71 = (char *)&v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = *a1;
  v30 = ShelfIDBuilder.init(named:)(0x7365646F73697065, 0xE800000000000000);
  v31 = ShowListType.description.getter(a2, v7);
  v33 = v32;
  v34 = ShelfIDBuilder.addingAttribute(_:named:)(v31);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v33);
  v35 = ShelfIDBuilder.build()();
  countAndFlagsBits = v35._countAndFlagsBits;
  v36 = swift_bridgeObjectRelease(v34);
  v37 = EpisodeListSettings.listType.getter(v79, v36);
  v38 = EpisodeListType.shelfImpressionMetricsID.getter(v37);
  v40 = v39;
  sub_10003F450((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  if (v40)
    v41 = v38;
  else
    v41 = 0x7365646F73697045;
  if (v40)
    v42 = v40;
  else
    v42 = 0xE800000000000000;
  v43 = type metadata accessor for ActionMenu(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v24, 1, 1, v43);
  v44 = type metadata accessor for Header.PrimaryAction(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v21, 1, 1, v44);
  v45 = type metadata accessor for ArtworkModel(0);
  v46.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v18, 1, 1, v45);
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(0, 0, 0, 0, 0, 0, 0, 0, v46, v24, v21, _swiftEmptyArrayStorage, v18);
  LOBYTE(v77[0]) = 1;
  v47 = v70;
  ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(24, 0, 0x10000000000, 1);
  v48 = sub_1001788DC(v67);
  v49 = type metadata accessor for URL(0);
  v50 = v72;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v72, 1, 1, v49);
  v78 = 0;
  memset(v77, 0, sizeof(v77));
  v51 = swift_bridgeObjectRetain(v35._object);
  v52 = static MetricsTargetType.swoosh.getter(v51);
  v54 = v53;
  v55 = v74;
  v56 = v41;
  v57 = countAndFlagsBits;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(v56, v42, 0, 0, countAndFlagsBits, v35._object, v52, v53, 0, 0);
  swift_bridgeObjectRelease(v35._object);
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(v42);
  v58 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v55, 0, 1, v58);
  v59 = type metadata accessor for MetricsShelfName(0);
  v60 = v75;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v75, 1, 1, v59);
  v61 = v71;
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v57, v35._object, v27, v47, v48, v50, 1, 0, v77, v55, v60);
  v62 = sub_10003F544(&qword_100553EA8);
  v63 = *(unsigned __int8 *)(v28 + 80);
  v64 = (v63 + 32) & ~v63;
  v65 = swift_allocObject(v62, v64 + *(_QWORD *)(v28 + 72), v63 | 7);
  *(_OWORD *)(v65 + 16) = xmmword_1003CA200;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v65 + v64, v61, v73);
  *v76 = v65;
  return result;
}

id sub_100162460@<X0>(id result@<X0>, _BYTE *a2@<X8>)
{
  if (result)
    result = objc_msgSend(result, "isSerialShowTypeInFeed");
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_100162490@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result;

  if (*a1 == 1)
    result = sub_10016A48C(a2, a3, a4);
  else
    result = sub_100160068(a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t sub_1001624E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  NSString v27;
  id v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  id v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v82 = a7;
  v97 = a6;
  v101 = a2;
  v94 = a1;
  v10 = type metadata accessor for EpisodeListSettings(0);
  v91 = *(_QWORD *)(v10 - 8);
  v92 = v10;
  v93 = *(_QWORD *)(v91 + 64);
  __chkstk_darwin(v10);
  v90 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100553F08);
  v13 = *(_QWORD *)(v12 - 8);
  v88 = v12;
  v89 = v13;
  __chkstk_darwin(v12);
  v87 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_10003F544(&qword_100553F10);
  v98 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v86 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544(&qword_100553F18);
  v17 = *(_QWORD *)(v16 - 8);
  v99 = v16;
  v100 = v17;
  __chkstk_darwin(v16);
  v95 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544(&qword_100553F20);
  v20 = *(_QWORD *)(v19 - 8);
  v84 = v19;
  v85 = v20;
  __chkstk_darwin(v19);
  v83 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10003F544(&qword_100553F28);
  v79 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPlaylistEntityName);
  v78 = v25;
  v26 = (void *)objc_opt_self(MTPlaylist);
  v80 = a3;
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(v26, "predicateForStationUUID:", v27);

  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v30 = static OS_dispatch_queue.main.getter(v29);
  v31 = swift_allocObject(&unk_1004B0080, 32, 7);
  *(_QWORD *)(v31 + 16) = a4;
  *(_QWORD *)(v31 + 24) = a5;
  v32 = a5;
  v33 = sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v34 = sub_100005EC8(0, (unint64_t *)&qword_100553A30, MTPlaylist_ptr);
  swift_bridgeObjectRetain(v32);
  v82 = v82;
  FetchedResultsSingleItemPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(0xD000000000000019, 0x8000000100430370, v81, v78, v28, v82, v30, sub_10016D874, v31, sub_100163F14, 0, v33, v34);
  v35 = sub_10002F9C8(&qword_100553F30, &qword_100553F28, (uint64_t)&protocol conformance descriptor for FetchedResultsSingleItemPublisher<A, B>);
  v36 = Publisher.eraseToAnyPublisher()(v22, v35);
  v81 = v36;
  (*(void (**)(char *, uint64_t))(v79 + 8))(v24, v22);
  v37 = sub_10015EF9C();
  v38 = sub_10015F220();
  v102 = v37;
  v103 = v38;
  v39 = sub_10003F544(&qword_100553F38);
  v40 = sub_10003F544(&qword_1005539B8);
  v41 = sub_10002F9C8(&qword_100553F40, &qword_100553F38, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v42 = sub_10002F9C8(&qword_1005539C8, &qword_1005539B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v43 = v83;
  Publisher.combineLatest<A, B>(_:_:)(&v102, sub_10015F404, 0, v39, v40, &type metadata for EpisodeSortType, v41, v42);
  v44 = sub_10002F9C8(&qword_100553F48, &qword_100553F20, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v45 = v84;
  v46 = Publisher.eraseToAnyPublisher()(v84, v44);
  swift_release(v37);
  swift_release(v38);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v43, v45);
  v102 = v46;
  v103 = v36;
  v47 = sub_10003F544(&qword_100553F50);
  v48 = sub_10002F9C8(&qword_100553F58, &qword_100553F50, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v49 = v87;
  Publisher.combineLatest<A>(_:)(&v102, v47, v40, v48, v42);
  v50 = sub_10002F9C8(&qword_100553F60, &qword_100553F08, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v51 = v86;
  v52 = v88;
  Publisher.removeDuplicates(by:)(sub_100164074, 0, v88, v50);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v49, v52);
  v54 = v90;
  v53 = v91;
  v55 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v94, v92);
  v56 = *(unsigned __int8 *)(v53 + 80);
  v57 = v53;
  v58 = (v56 + 16) & ~v56;
  v59 = (v93 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8;
  v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF8;
  v62 = swift_allocObject(&unk_1004B00A8, v61 + 16, v56 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v62 + v58, v54, v55);
  *(_QWORD *)(v62 + v59) = v97;
  v63 = v82;
  *(_QWORD *)(v62 + v60) = v82;
  v64 = (_QWORD *)(v62 + v61);
  v65 = v80;
  *v64 = v101;
  v64[1] = v65;
  v66 = swift_allocObject(&unk_1004B00D0, 32, 7);
  *(_QWORD *)(v66 + 16) = sub_10016D93C;
  *(_QWORD *)(v66 + 24) = v62;
  v67 = v63;
  swift_bridgeObjectRetain(v65);
  v68 = sub_10003F544(&qword_100553E20);
  v69 = sub_10002F9C8(&qword_100553F68, &qword_100553F10, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v71 = v95;
  v70 = v96;
  Publisher.compactMap<A>(_:)(sub_10016D9DC, v66, v96, v68, v69);
  swift_release(v66);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v51, v70);
  v72 = sub_10002F9C8(&qword_100553F70, &qword_100553F18, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v73 = sub_10002F9C8(&qword_100553E30, &qword_100553E20, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v74 = v99;
  v75 = Publisher<>.paginatedSwitchToLatest()(v99, v72, v73);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v71, v74);
  v103 = v75;
  v76 = PaginatedPublisher.paginatedBufferedMulticast()(v68, v73);
  swift_release(v75);
  swift_release(v81);
  swift_release(v46);
  return v76;
}

uint64_t sub_100162C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  _BYTE v24[24];

  v9 = a2 + 16;
  swift_beginAccess(a2 + 16, v24, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v9);
  if (result)
  {
    v11 = (void *)result;
    v12 = sub_10016177C(a1, a3, a4);

    v13 = sub_10003F544(&qword_100553E20);
    v14 = sub_10003F544(&qword_100553E28);
    v15 = sub_10002F9C8(&qword_100553E30, &qword_100553E20, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
    v16 = PaginatedPublisher.paginatedMap<A>(_:)(sub_100162DF8, 0, v13, v14, v15);
    swift_release(v12);
    v23[1] = v16;
    v17 = sub_10003F544(&qword_100553E38);
    v18 = swift_allocObject(v17, ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) | 7);
    *(_OWORD *)(v18 + 16) = xmmword_1003CA200;
    v23[0] = 0;
    v19 = sub_10003F544(&qword_100553E40);
    FRPOutput.init(content:hasMore:totalCount:)(v23, 1, 0, v19);
    v20 = sub_10003F544(&qword_100553988);
    v21 = sub_10002F9C8(&qword_1005539A0, &qword_100553988, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
    v22 = PaginatedPublisher.paginatedPrepend(_:)(v18, v20, v21);
    swift_release(v16);
    result = swift_bridgeObjectRelease(v18);
  }
  else
  {
    v22 = 0;
  }
  *a5 = v22;
  return result;
}

uint64_t sub_100162DF8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10003F544(&qword_100553E48);
  v1 = sub_10003F544(&qword_100553E40);
  return FRPOutput.map<A>(_:)(sub_100162E58, 0, v0, v1);
}

uint64_t sub_100162E58@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

void sub_100162E64(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  id v8;
  NSString v9;
  id v10;
  id v11;
  uint64_t v12;

  if (a1)
  {
    type metadata accessor for StationDetail(0);
    v2 = a1;
    sub_1002DA298(v2, 0, 0, 0);
    if (v3)
    {
      v4 = v3;
      v12 = v3;
      Promise.resolve(_:)(&v12);
      swift_release(v4);

      return;
    }
    v8 = objc_allocWithZone((Class)NSError);
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v8, "initWithDomain:code:userInfo:", v9, 42, 0);

    v11 = v10;
    Promise.reject(_:)();

  }
  else
  {
    v5 = objc_allocWithZone((Class)NSError);
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "initWithDomain:code:userInfo:", v6, 42, 0);

    v11 = v7;
    Promise.reject(_:)();
  }

}

uint64_t sub_100162FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for StationDetailObserver();
  swift_allocObject(v4, 48, 7);
  swift_bridgeObjectRetain(a2);
  sub_1001AC964(a1, a2);
  v6 = v5;
  v7 = sub_100026844(&qword_100553E18, (uint64_t (*)(uint64_t))type metadata accessor for StationDetailObserver, (uint64_t)&unk_1003CC1D8);
  v8 = Observer.eraseToAnyObserver()(v4, v7);
  swift_release(v6);
  v10 = v8;
  Promise.resolve(_:)(&v10);
  return swift_release(v8);
}

void sub_1001630E0(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Bool v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_10003F544(&qword_100553E10);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002E5BF4(objc_msgSend(a1, "containerOrder"), (uint64_t)v6);
  v7 = type metadata accessor for StationSortOrder(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100007A28((uint64_t)v6, &qword_100553E10);
    v9 = 0;
  }
  else
  {
    v9 = StationSortOrder.supportsUsingFRP(isGrouped:)(objc_msgSend(a1, "isUngroupedList") != 1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  type metadata accessor for StationDetail(0);
  sub_1002DA298(a1, 0, v9, 1);
  *a2 = v10;
}

void sub_1001631F8(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (v2)
  {
    *a2 = v2;
    swift_retain(v2);
  }
  else
  {
    v3 = type metadata accessor for ModelError();
    v4 = sub_100026844(&qword_100553E08, (uint64_t (*)(uint64_t))&type metadata accessor for ModelError, (uint64_t)&protocol conformance descriptor for ModelError);
    swift_allocError(v3, v4, 0, 0);
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v5, enum case for ModelError.notInDatabase(_:), v3);
    swift_willThrow(v6);
  }
}

uint64_t sub_10016328C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  int *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for StationSortOrder(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = StationDetail.uuid.getter(v6);
  v10 = v9;
  v11 = StationDetail.objectID.getter();
  v12 = StationDetail.grouped.getter();
  v13 = StationDetail.sortOrder.getter();
  v14 = (id)StationDetail.predicateForEpisodes.getter(v13);
  if (!v14)
    v14 = objc_msgSend((id)objc_opt_self(NSPredicate), "falsePredicate");
  v15 = v14;
  v16 = (_QWORD *)dispatch thunk of StationDetail.episodes.getter();
  swift_release(a1);
  if (!v16)
    v16 = _swiftEmptyArrayStorage;
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v11;
  *(_BYTE *)(a2 + 24) = v12 & 1;
  v17 = (int *)type metadata accessor for LibraryDataProvider._Station(0);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + v17[7], v8, v4);
  *(_QWORD *)(a2 + v17[8]) = v15;
  *(_QWORD *)(a2 + v17[9]) = v16;
  return result;
}

uint64_t sub_1001633C4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v15 = *(v13 - 1);
      v16 = *v13;
      v17 = *(i - 1);
      v18 = *i;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

BOOL sub_100163488(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_1001634FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 40);
    v4 = (uint64_t *)(a2 + 40);
    do
    {
      v5 = *v3;
      v6 = *v4;
      if (*v3)
      {
        if (!v6)
          return 0;
        v7 = *(v3 - 1);
        v8 = *(v4 - 1);
        v9 = v7 == v8 && v5 == v6;
        if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v5, v8, v6, 0) & 1) == 0)
          return 0;
      }
      else if (v6)
      {
        return 0;
      }
      v3 += 2;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return 1;
}

id sub_100163598@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  id result;
  id v10;
  uint64_t v11;

  type metadata accessor for StationShow(0);
  v7 = *a2;
  v6 = a2[1];
  v8 = a1;
  swift_bridgeObjectRetain(v6);
  result = sub_1002107DC(v8, v7, v6);
  if (!result)
    goto LABEL_5;
  v10 = result;
  if (dispatch thunk of StationShow.episodeCount.getter() < 1)
  {
    result = (id)swift_release(v10);
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v11 = dispatch thunk of StationShow.modernLockup.getter();
  result = (id)swift_release(v10);
LABEL_6:
  *a3 = v11;
  return result;
}

uint64_t sub_100163638@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_10003F544((uint64_t *)&unk_100553DE0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StationEpisode(0);
  v13 = *a2;
  v12 = a2[1];
  v14 = a1;
  swift_bridgeObjectRetain(v12);
  result = (uint64_t)sub_1002716B8(v14, v13, v12);
  if (result)
  {
    v16 = result;
    v17 = type metadata accessor for EpisodeListSettings(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
    v18 = type metadata accessor for SectionContext(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 1, 1, v18);
    v19 = dispatch thunk of Episode.defaultLockup(for:sectionContext:)(v11, v8);
    swift_release(v16);
    sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DE0);
    result = sub_100007A28((uint64_t)v11, &qword_10055B790);
  }
  else
  {
    v19 = 0;
  }
  *a3 = v19;
  return result;
}

uint64_t sub_1001637B0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t countAndFlagsBits;
  unsigned int v57;
  char *v58;
  uint64_t (*v59)(uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;

  v59 = a4;
  v57 = a3;
  v62 = a5;
  v7 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v7);
  v61 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v9);
  v60 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v11);
  v58 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v19);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v22);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v53 = *(_QWORD *)(v55 - 8);
  v25 = v53;
  v26 = __chkstk_darwin(v55);
  v28 = (char *)&v53 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v53 - v29;
  v54 = *a1;
  v31 = ShelfIDBuilder.init(named:)(0xD000000000000010, 0x80000001004302B0);
  v32 = ShelfIDBuilder.addingAttribute(_:named:)(*a2);
  swift_bridgeObjectRelease(v31);
  v33 = ShelfIDBuilder.build()();
  countAndFlagsBits = v33._countAndFlagsBits;
  swift_bridgeObjectRelease(v32);
  LOBYTE(v63[0]) = 1;
  ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(v57, 0, 0x10000000000, 1);
  v34 = type metadata accessor for ActionMenu(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v21, 1, 1, v34);
  v35 = type metadata accessor for Header.PrimaryAction(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v18, 1, 1, v35);
  v36 = type metadata accessor for ArtworkModel(0);
  v37.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v15, 1, 1, v36);
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(0, 0, 0, 0, 0, 0, 0, 0, v37, v21, v18, _swiftEmptyArrayStorage, v15);
  v38 = v55;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v30, v55);
  v39 = v59(v54);
  v40 = type metadata accessor for URL(0);
  v41 = v58;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v58, 1, 1, v40);
  v64 = 0;
  memset(v63, 0, sizeof(v63));
  v42 = swift_bridgeObjectRetain(v33._object);
  v43 = ModernShelf.ItemPresentation.itemKind.getter(v42);
  v44 = ModernShelf.ItemKind.targetType.getter(v43);
  v46 = v45;
  v47 = v60;
  v48 = countAndFlagsBits;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x456E6F6974617453, 0xEF7365646F736970, 0, 0, countAndFlagsBits, v33._object, v44, v45, 0, 0);
  swift_bridgeObjectRelease(v33._object);
  swift_bridgeObjectRelease(v46);
  v49 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v47, 0, 1, v49);
  v50 = type metadata accessor for MetricsShelfName(0);
  v51 = v61;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v61, 1, 1, v50);
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v48, v33._object, v24, v28, v39, v41, 1, 0, v63, v47, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v30, v38);
}

uint64_t sub_100163C98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  swift_retain(*a1);
  return sub_10016328C(v3, a2);
}

uint64_t sub_100163CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t *a4@<X8>)
{
  int v8;
  uint64_t result;

  type metadata accessor for LibraryDataProvider._Station(0);
  v8 = *(unsigned __int8 *)(a1 + 24);
  if (StationSortOrder.supportsUsingFRP(isGrouped:)(*(_BYTE *)(a1 + 24)))
  {
    if (v8)
      result = sub_10016A824((uint64_t *)a1, a2, a3);
    else
      result = sub_10016ADB0((uint64_t *)a1, a2, a3);
  }
  else
  {
    result = sub_10016B270((_QWORD *)a1);
  }
  *a4 = result;
  return result;
}

uint64_t sub_100163D44@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v4 = sub_10003F544(&qword_100553D58);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  v7 = sub_10003F544(&qword_100553A98);
  v8 = type metadata accessor for ModernShelf(0);
  v9 = sub_10002F9C8(&qword_100553D60, &qword_100553A98, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v10 = PaginatedPublisher.paginatedFRPOutputMap<A, B>(_:)(sub_10016D3C0, 0, v7, v8, v4, v9);
  v19 = v10;
  v11 = sub_10003F544(&qword_100553D68);
  v12 = sub_10003F544(&qword_100553D70);
  v13 = swift_allocObject(v11, ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_1003CA200;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 2, v8);
  FRPOutput.init(content:hasMore:totalCount:)(v6, 1, 0, v4);
  v14 = sub_10003F544(&qword_100553AA8);
  v15 = sub_10002F9C8(&qword_100553AB8, &qword_100553AA8, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v16 = PaginatedPublisher.paginatedPrepend(_:)(v13, v14, v15);
  swift_release(v10);
  result = swift_bridgeObjectRelease(v13);
  *a2 = v16;
  return result;
}

BOOL sub_100163F14(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  return (static NSObject.== infix(_:_:)(v2, v3) & 1) == 0;
}

uint64_t sub_100163F68(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  id v8;
  id v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a1;
  if (a1)
  {
    if (a3)
    {
      sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
      v8 = a3;
      v9 = v7;
      if ((static NSObject.== infix(_:_:)(v9, v8) & 1) == 0)
      {

        v10 = 0;
        v7 = v8;
LABEL_12:

        return v10 & 1;
      }
LABEL_7:
      v11 = EpisodeSortType.rawValue.getter(a2);
      v13 = v12;
      v15 = EpisodeSortType.rawValue.getter(a4);
      v16 = v14;
      if (v11 == v15 && v13 == v14)
      {
        v10 = 1;
        v16 = v13;
      }
      else
      {
        v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v15, v14, 0);
      }
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v16);

      goto LABEL_12;
    }
  }
  else if (!a3)
  {
    goto LABEL_7;
  }
  v10 = 0;
  return v10 & 1;
}

uint64_t sub_100164074(uint64_t a1, uint64_t a2)
{
  return sub_100163F68(*(void **)a1, *(unsigned __int8 *)(a1 + 8), *(void **)a2, *(unsigned __int8 *)(a2 + 8));
}

uint64_t sub_10016408C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  id v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v59 = a6;
  v60 = a7;
  v61 = a5;
  v65 = a4;
  v10 = type metadata accessor for EpisodeListSettings(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v66 = v12;
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544((uint64_t *)&unk_100553960);
  v63 = *(_QWORD *)(v14 - 8);
  v64 = v14;
  __chkstk_darwin(v14);
  v62 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = 0;
  v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v16 = swift_bridgeObjectRelease(v70);
  v67 = 0xD000000000000015;
  v68 = 0x800000010042FBE0;
  v17 = EpisodeListSettings.listType.getter(&v69, v16);
  v18 = EpisodeListType.description.getter(v17);
  v20 = v19;
  sub_10003F450((uint64_t)&v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v57 = v68;
  v58 = v67;
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v55 = v22;
  if (a1)
    v54 = a1;
  else
    v54 = objc_msgSend((id)objc_opt_self(NSPredicate), "falsePredicate");
  v23 = a1;
  v52 = EpisodeSortType.descriptors.getter(a2);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v50 = static OS_dispatch_queue.main.getter(v24);
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v53(v13, a3, v10);
  v25 = *(unsigned __int8 *)(v11 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = v66;
  v28 = swift_allocObject(&unk_1004B00F8, v26 + v66, v25 | 7);
  v51 = a3;
  v29 = v28;
  v30 = v60;
  *(_QWORD *)(v28 + 16) = v59;
  *(_QWORD *)(v28 + 24) = v30;
  v31 = v28 + v26;
  v32 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v32(v31, v13, v10);
  v33 = type metadata accessor for LibraryEpisodeLockup(0);
  v34 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  swift_bridgeObjectRetain(v30);
  v35 = v61;
  v48 = v33;
  v36 = v62;
  FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v58, v57, v56, v55, v54, v52, v65, v35, v50, sub_10016DA84, v29, sub_10015BAB8, 0, v48, v34);
  v37 = sub_10002F9C8(&qword_100553970, (uint64_t *)&unk_100553960, (uint64_t)&protocol conformance descriptor for FetchedResultsListPublisher<A, B>);
  v38 = v64;
  v39 = PaginatedPublisher.eraseToAnyPaginatedPublisher()(v64, v37);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v38);
  v67 = v39;
  v53(v13, v51, v10);
  v40 = (v25 + 16) & ~v25;
  v41 = swift_allocObject(&unk_1004B0120, v40 + v27, v25 | 7);
  v32(v41 + v40, v13, v10);
  v42 = sub_10003F544(&qword_100553E68);
  v43 = sub_10003F544((uint64_t *)&unk_1005537F0);
  v44 = sub_10003F544(&qword_100553E70);
  v45 = sub_10002F9C8(&qword_100553E78, &qword_100553E68, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v46 = PaginatedPublisher.paginatedFRPOutputMap<A, B>(_:)(sub_10016DAE0, v41, v42, v43, v44, v45);
  swift_release(v41);
  swift_release(v67);
  return v46;
}

uint64_t sub_1001644A8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;

  v10 = sub_10003F544((uint64_t *)&unk_100553DE0);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StationEpisode(0);
  v16 = a1;
  swift_bridgeObjectRetain(a3);
  result = (uint64_t)sub_1002716B8(v16, a2, a3);
  if (result)
  {
    v18 = result;
    v19 = type metadata accessor for EpisodeListSettings(0);
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v15, a4, v19);
    v21.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v15, 0, 1, v19);
    EpisodeListSettings.sectionContext.getter(v21);
    v22 = dispatch thunk of Episode.defaultLockup(for:sectionContext:)(v15, v12);
    swift_release(v18);
    sub_100007A28((uint64_t)v12, (uint64_t *)&unk_100553DE0);
    result = sub_100007A28((uint64_t)v15, &qword_10055B790);
  }
  else
  {
    v22 = 0;
  }
  *a5 = v22;
  return result;
}

uint64_t sub_100164628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  char v8;

  v0 = LegacyLockup.shelfUniqueId.getter();
  v2 = v1;
  v3 = LegacyLockup.shelfUniqueId.getter();
  if (v0 == v3 && v2 == v4)
  {
    swift_bridgeObjectRelease_n(v2, 2);
    v8 = 0;
  }
  else
  {
    v6 = v4;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v6);
    v8 = v7 ^ 1;
  }
  return v8 & 1;
}

uint64_t sub_1001646BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)(uint64_t, char *);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (**v43)(uint64_t, char *);
  uint64_t v44;
  char *v45;
  __n128 v46;
  uint64_t (*v47)(uint64_t, char *);
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  _QWORD v80[2];
  uint64_t v81;
  uint64_t countAndFlagsBits;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t (**v87)(uint64_t, char *);
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t *v94;
  void *object;
  char *v96;
  _BYTE v97[32];
  uint64_t v98;
  _QWORD v99[9];
  _QWORD v100[9];
  _QWORD v101[9];
  _QWORD v102[10];

  v94 = a3;
  v5 = sub_10003F544(&qword_100553DB0);
  v6 = __chkstk_darwin(v5);
  v93 = (char *)v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v84 = (char *)v80 - v8;
  v9 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v9);
  v92 = (char *)v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v11);
  v96 = (char *)v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v13);
  v88 = (char *)v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v15);
  v87 = (uint64_t (**)(uint64_t, char *))((char *)v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v17);
  v86 = (char *)v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v19);
  v21 = (char *)v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ModernShelf(0);
  v90 = *(_QWORD *)(v22 - 8);
  v91 = v22;
  __chkstk_darwin(v22);
  v89 = (char *)v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v25 = *(uint64_t (***)(uint64_t, char *))(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)v80 - v29;
  v85 = (char *)*a1;
  v31 = ShelfIDBuilder.init(named:)(0x7365646F73697065, 0xE800000000000000);
  v80[1] = a2;
  v32 = EpisodeListSettings.listType.getter(v99, v31);
  v33 = EpisodeListType.description.getter(v32);
  v35 = v34;
  v36 = ShelfIDBuilder.addingAttribute(_:named:)(v33);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v35);
  sub_10003F450((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v37 = ShelfIDBuilder.build()();
  countAndFlagsBits = v37._countAndFlagsBits;
  object = v37._object;
  v38 = swift_bridgeObjectRelease(v36);
  v39 = EpisodeListSettings.listType.getter(v100, v38);
  EpisodeListType.shelfItemPresentation.getter(v39);
  sub_10003F450((uint64_t)v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v40 = type metadata accessor for ActionMenu(0);
  v41 = v86;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v86, 1, 1, v40);
  v42 = type metadata accessor for Header.PrimaryAction(0);
  v43 = v87;
  (*(void (**)(uint64_t (**)(uint64_t, char *), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8)
                                                                                              + 56))(v87, 1, 1, v42);
  v44 = type metadata accessor for ArtworkModel(0);
  v45 = v88;
  v46.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v88, 1, 1, v44);
  v86 = v21;
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(0, 0, 0, 0, 0, 0, 0, 0, v46, v41, v43, _swiftEmptyArrayStorage, v45);
  v87 = v25;
  v88 = (char *)v24;
  v47 = v25[2];
  v83 = v28;
  ((void (*)(char *, char *, uint64_t))v47)(v28, v30, v24);
  v81 = sub_1001788C8((uint64_t)v85);
  v48 = type metadata accessor for URL(0);
  v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v96, 1, 1, v48);
  v98 = 0;
  memset(v97, 0, sizeof(v97));
  v50 = EpisodeListSettings.listType.getter(v101, v49);
  v51 = EpisodeListType.shelfImpressionMetricsID.getter(v50);
  v53 = v52;
  sub_10003F450((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v54 = swift_bridgeObjectRetain(object);
  v85 = v30;
  v55 = ModernShelf.ItemPresentation.itemKind.getter(v54);
  v56 = ModernShelf.ItemKind.targetType.getter(v55);
  v58 = v57;
  v59 = EpisodeListSettings.listType.getter(v102, v56);
  v60 = (uint64_t)v84;
  EpisodeListType.metricsShelfName.getter(v59);
  sub_10003F450((uint64_t)v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v61 = type metadata accessor for MetricsShelfName(0);
  v62 = *(_QWORD *)(v61 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61) == 1)
  {
    sub_100007A28(v60, &qword_100553DB0);
    v63 = 0;
    v64 = 0;
  }
  else
  {
    v63 = MetricsShelfName.rawValue.getter();
    v64 = v65;
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v61);
  }
  if (v53)
  {
    v66 = v51;
  }
  else
  {
    v53 = 0xE800000000000000;
    v66 = 0x7365646F73697045;
  }
  v79 = v63;
  v67 = v92;
  v68 = countAndFlagsBits;
  v69 = object;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(v66, v53, 0, 0, countAndFlagsBits, object, v56, v58, v79, v64);
  swift_bridgeObjectRelease(v53);
  swift_bridgeObjectRelease(v69);
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v64);
  v70 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v67, 0, 1, v70);
  v71 = v93;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v93, 1, 1, v61);
  v72 = v89;
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v68, v69, v86, v83, v81, v96, 1, 0, v97, v67, v71);
  v73 = sub_10003F544(&qword_100553EA8);
  v74 = v90;
  v75 = *(unsigned __int8 *)(v90 + 80);
  v76 = (v75 + 32) & ~v75;
  v77 = swift_allocObject(v73, v76 + *(_QWORD *)(v90 + 72), v75 | 7);
  *(_OWORD *)(v77 + 16) = xmmword_1003CA200;
  (*(void (**)(uint64_t, char *, uint64_t))(v74 + 32))(v77 + v76, v72, v91);
  result = v87[1]((uint64_t)v85, v88);
  *v94 = v77;
  return result;
}

uint64_t sub_100164D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  NSString v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  id v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  unint64_t v66;
  uint64_t i;
  uint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  uint64_t v79;
  __n128 v80;
  uint64_t j;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t k;
  id v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  id v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t inited;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  Swift::String v134;
  Swift::String v135;
  Swift::String v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _OWORD *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  id v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  unint64_t v228;
  unint64_t v229;
  id v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  char *v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  void *v263;
  Swift::String v264;
  uint64_t v265;
  Swift::String v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  __n128 v272;
  uint64_t v273;
  char *v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void (*v279)(char *, _QWORD, uint64_t);
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t result;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  char *v310;
  char *v311;
  unint64_t v312;
  char *v313;
  char *v314;
  char *v315;
  unint64_t v316;
  char *v317;
  char *v318;
  char *v319;
  uint64_t v320;
  char *v321;
  char *v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  id v329;
  char *v330;
  char *v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  char *v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  id v346;
  id v347;
  id v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  char *v352;
  id v353;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v356;
  uint64_t v357;
  char v358[16];
  _OWORD v359[2];
  uint64_t v360;
  unint64_t v361;
  _OWORD v362[4];
  char v363;
  Swift::String v364;
  Swift::String v365;
  Swift::String v366;
  Swift::String v367;

  v345 = a3;
  v341 = type metadata accessor for MetricsEventType(0);
  v332 = *(_QWORD *)(v341 - 8);
  __chkstk_darwin(v341);
  v336 = (char *)&v307 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v344 = type metadata accessor for ScalarDictionary(0);
  v343 = *(_QWORD *)(v344 - 8);
  v6 = __chkstk_darwin(v344);
  v339 = (char *)&v307 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v338 = (char *)&v307 - v8;
  v337 = type metadata accessor for MetricsPageFields(0);
  v335 = *(_QWORD *)(v337 - 8);
  __chkstk_darwin(v337);
  v333 = (char *)&v307 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PageID(0);
  __chkstk_darwin(v10);
  v331 = (char *)&v307 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v342 = type metadata accessor for GroupedSearchResultsPage(0);
  v340 = *(_QWORD *)(v342 - 8);
  __chkstk_darwin(v342);
  v334 = (char *)&v307 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v351 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v351);
  v352 = (char *)&v307 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PageMetrics(0);
  v15 = __chkstk_darwin(v14);
  v330 = (char *)&v307 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v324 = (uint64_t)&v307 - v18;
  v19 = __chkstk_darwin(v17);
  v320 = (uint64_t)&v307 - v20;
  v21 = __chkstk_darwin(v19);
  v316 = (unint64_t)&v307 - v22;
  __chkstk_darwin(v21);
  v312 = (unint64_t)&v307 - v23;
  v24 = sub_10003F544(&qword_10055D840);
  v25 = __chkstk_darwin(v24);
  v322 = (char *)&v307 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v318 = (char *)&v307 - v28;
  v29 = __chkstk_darwin(v27);
  v314 = (char *)&v307 - v30;
  __chkstk_darwin(v29);
  v311 = (char *)&v307 - v31;
  v32 = sub_10003F544((uint64_t *)&unk_100553D20);
  v33 = __chkstk_darwin(v32);
  v321 = (char *)&v307 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v317 = (char *)&v307 - v36;
  v37 = __chkstk_darwin(v35);
  v313 = (char *)&v307 - v38;
  __chkstk_darwin(v37);
  v309 = (char *)&v307 - v39;
  v350 = type metadata accessor for GroupedSearchResultsPage.Result(0);
  v349 = *(_QWORD *)(v350 - 8);
  v40 = __chkstk_darwin(v350);
  v323 = (char *)&v307 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v319 = (char *)&v307 - v43;
  v44 = __chkstk_darwin(v42);
  v315 = (char *)&v307 - v45;
  __chkstk_darwin(v44);
  v310 = (char *)&v307 - v46;
  v47 = type metadata accessor for ShowLockupStyle(0);
  __chkstk_darwin(v47);
  v49 = (uint64_t)&v307 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for UUID(0);
  v51 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v53 = (char *)&v307 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = objc_msgSend(objc_allocWithZone((Class)MTTextQuery), "init");
  objc_msgSend(v54, "setFetchLimit:", 100);
  v357 = a1;
  v356 = a2;
  v55 = String._bridgeToObjectiveC()();
  objc_msgSend(v54, "runQueryWithText:", v55);

  v56 = UUID.init()();
  UUID.uuidString.getter(v56);
  v58 = v57;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
  v59 = String.lowercased()();
  countAndFlagsBits = v59._countAndFlagsBits;
  object = v59._object;
  swift_bridgeObjectRelease(v58);
  v353 = v54;
  v60 = objc_msgSend(v54, "podcastResults");
  if (!v60)
  {
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    swift_bridgeObjectRelease_n(v51, 2);
    result = swift_release(*(_QWORD *)&v359[0]);
    __break(1u);
    return result;
  }
  v61 = (unint64_t)v60;
  v62 = sub_100005EC8(0, (unint64_t *)&qword_100553810, MTPodcast_ptr);
  v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v61, v62);

  *(_QWORD *)&v359[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v63 >> 62)
  {
    if (v63 < 0)
      v61 = v63;
    else
      v61 = v63 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v63);
    v64 = _CocoaArrayWrapper.endIndex.getter(v61);
  }
  else
  {
    v64 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    v65 = swift_bridgeObjectRetain(v63);
  }
  v51 = v356;
  if (v64)
  {
    type metadata accessor for LibraryShowLockup(0, v65);
    memset(v362, 0, sizeof(v362));
    v66 = 255;
    v363 = -1;
    if (v64 < 1)
    {
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }
    for (i = 0; i != v64; ++i)
    {
      if ((v63 & 0xC000000000000001) != 0)
        v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v63);
      else
        v69 = *(id *)(v63 + 8 * i + 32);
      v70 = v69;
      ShowLockupStyle.init(includesOfferButton:defaultSubtitle:unfollowedSubtitle:groupedEpisodesListType:)(1, 0, 16, v362);
      v71 = sub_1001913F8(v70, v49);

      if (v71)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v72);
        v74 = *(_QWORD *)((*(_QWORD *)&v359[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v73 = *(_QWORD *)((*(_QWORD *)&v359[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v74 >= v73 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1, v74 + 1, 1);
        v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v74, v71);
        specialized Array._endMutation()(v68);
      }
    }
    swift_bridgeObjectRelease(v63);
    v75 = *(_QWORD *)&v359[0];
    v51 = v356;
  }
  else
  {
    swift_bridgeObjectRelease(v63);
    v75 = (unint64_t)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v63);
  if ((v75 & 0x8000000000000000) != 0 || (v75 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v75);
    v76 = (uint64_t)sub_1001F9A8C(v103);
    swift_bridgeObjectRelease(v75);
  }
  else
  {
    v76 = v75 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v75);
  }
  *(_QWORD *)&v359[0] = v76;
  swift_bridgeObjectRetain(v51);
  v63 = 0;
  sub_10016CFE0((uint64_t *)v359, v357, v51);
  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRelease_n(v51, 2);
  v77 = *(void **)&v359[0];
  v78 = objc_msgSend(v353, "episodeResults");
  if (!v78)
    goto LABEL_145;
  v61 = (unint64_t)v78;
  v329 = v77;
  v79 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v61, v79);

  v361 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v49 >> 62)
  {
    if (v49 < 0)
      v61 = v49;
    else
      v61 = v49 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v49);
    v64 = _CocoaArrayWrapper.endIndex.getter(v61);
    if (v64)
      goto LABEL_23;
LABEL_43:
    swift_bridgeObjectRelease(v49);
    v91 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_44;
  }
  v64 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
  v80 = swift_bridgeObjectRetain(v49);
  if (!v64)
    goto LABEL_43;
LABEL_23:
  type metadata accessor for Episode(0, v80);
  if (v64 < 1)
  {
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  for (j = 0; j != v64; ++j)
  {
    if ((v49 & 0xC000000000000001) != 0)
      v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v49);
    else
      v82 = *(id *)(v49 + 8 * j + 32);
    v360 = 0;
    memset(v359, 0, sizeof(v359));
    v83 = v82;
    v84 = Episode.init(from:clickAction:wantsListenNowReason:)(v83, (uint64_t)v359, 0);
    if (v84)
    {
      v85 = v84;
      v86 = dispatch thunk of Episode.presentDetailsLockup.getter();

      v87 = swift_release(v85);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v87);
      v89 = *(_QWORD *)((v361 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v88 = *(_QWORD *)((v361 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v89 >= v88 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1, v89 + 1, 1);
      v90 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v89, v86);
      specialized Array._endMutation()(v90);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease(v49);
  v91 = v361;
  v51 = v356;
LABEL_44:
  swift_bridgeObjectRelease(v49);
  if ((v91 & 0x8000000000000000) != 0 || (v91 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v91);
    v92 = (uint64_t)sub_1001F9A8C(v290);
    swift_bridgeObjectRelease(v91);
  }
  else
  {
    v92 = v91 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v91);
  }
  *(_QWORD *)&v359[0] = v92;
  swift_bridgeObjectRetain(v51);
  sub_10016CFE0((uint64_t *)v359, v357, v51);
  swift_bridgeObjectRelease(v91);
  swift_bridgeObjectRelease_n(v51, 2);
  v328 = *(_QWORD *)&v359[0];
  v93 = objc_msgSend(v353, "channelResults");
  if (!v93)
    goto LABEL_146;
  v61 = (unint64_t)v93;
  v94 = sub_100005EC8(0, &qword_100553860, MTChannel_ptr);
  v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v61, v94);

  *(_QWORD *)&v359[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v49 >> 62)
  {
    if (v49 < 0)
      v61 = v49;
    else
      v61 = v49 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v49);
    v95 = _CocoaArrayWrapper.endIndex.getter(v61);
    if (v95)
      goto LABEL_50;
LABEL_64:
    swift_bridgeObjectRelease(v49);
    v102 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_65;
  }
  v95 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v49);
  if (!v95)
    goto LABEL_64;
LABEL_50:
  type metadata accessor for LegacyChannelLockup(0);
  if (v95 < 1)
  {
LABEL_142:
    __break(1u);
LABEL_143:
    v64 = sub_10027AF0C(v66 > 1, v49, 1, v64);
    goto LABEL_86;
  }
  for (k = 0; k != v95; ++k)
  {
    if ((v49 & 0xC000000000000001) != 0)
      v97 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(k, v49);
    else
      v97 = *(id *)(v49 + 8 * k + 32);
    v98 = sub_100322244(v97, 1);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v98);
    v100 = *(_QWORD *)((*(_QWORD *)&v359[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v99 = *(_QWORD *)((*(_QWORD *)&v359[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v100 >= v99 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v99 > 1, v100 + 1, 1);
    v101 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v100, v98);
    specialized Array._endMutation()(v101);
  }
  swift_bridgeObjectRelease(v49);
  v102 = *(_QWORD *)&v359[0];
LABEL_65:
  swift_bridgeObjectRelease(v49);
  if ((v102 & 0x8000000000000000) != 0 || (v102 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v102);
    v104 = (uint64_t)sub_1001F9A8C(v291);
    swift_bridgeObjectRelease(v102);
  }
  else
  {
    v104 = v102 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v102);
  }
  *(_QWORD *)&v359[0] = v104;
  swift_bridgeObjectRetain(v51);
  sub_10016CFE0((uint64_t *)v359, v357, v51);
  v326 = 0;
  swift_bridgeObjectRelease(v102);
  swift_bridgeObjectRelease_n(v51, 2);
  v325 = *(_QWORD *)&v359[0];
  v61 = type metadata accessor for Shelf(0);
  v105 = (void *)objc_opt_self(NSBundle);
  v106 = objc_msgSend(v105, "mainBundle");
  v107._countAndFlagsBits = 0xD000000000000014;
  v364._object = (void *)0xE000000000000000;
  v107._object = (void *)0x80000001004300A0;
  v108._countAndFlagsBits = 0;
  v108._object = (void *)0xE000000000000000;
  v364._countAndFlagsBits = 0;
  v109 = NSLocalizedString(_:tableName:bundle:value:comment:)(v107, (Swift::String_optional)0, (NSBundle)v106, v108, v364);

  v110 = (uint64_t)v329;
  v111 = sub_100178C08((uint64_t)v329);
  LOBYTE(v300) = 0;
  v348 = (id)Shelf.__allocating_init(contentType:seeAllContentType:title:allItems:maxItems:isHorizontal:preferredNumberOfRows:horizontalLayoutFollowsVerticalLayoutRules:)(50, 15, 0, v109._countAndFlagsBits, v109._object, v111, 20, 0, 1, 2, v300);
  v112 = objc_msgSend(v105, "mainBundle");
  v365._object = (void *)0xE000000000000000;
  v113._object = (void *)0x80000001004300C0;
  v113._countAndFlagsBits = 0xD000000000000017;
  v114._countAndFlagsBits = 0;
  v114._object = (void *)0xE000000000000000;
  v365._countAndFlagsBits = 0;
  v115 = NSLocalizedString(_:tableName:bundle:value:comment:)(v113, (Swift::String_optional)0, (NSBundle)v112, v114, v365);

  v116 = v328;
  v117 = sub_100178C08(v328);
  LOBYTE(v301) = 0;
  LOBYTE(v296) = 0;
  v347 = (id)Shelf.__allocating_init(contentType:seeAllContentType:title:allItems:maxItems:isHorizontal:preferredNumberOfRows:horizontalLayoutFollowsVerticalLayoutRules:)(49, 0, 1, v115._countAndFlagsBits, v115._object, v117, 20, 0, v296, 1, v301);
  v118 = objc_msgSend(v105, "mainBundle");
  v366._object = (void *)0xE000000000000000;
  v119._object = (void *)0x80000001004300E0;
  v119._countAndFlagsBits = 0xD000000000000017;
  v120._countAndFlagsBits = 0;
  v120._object = (void *)0xE000000000000000;
  v366._countAndFlagsBits = 0;
  v121 = NSLocalizedString(_:tableName:bundle:value:comment:)(v119, (Swift::String_optional)0, (NSBundle)v118, v120, v366);

  v122 = v325;
  v123 = sub_100178C08(v325);
  LOBYTE(v302) = 0;
  LOBYTE(v297) = 0;
  v346 = (id)Shelf.__allocating_init(contentType:seeAllContentType:title:allItems:maxItems:isHorizontal:preferredNumberOfRows:horizontalLayoutFollowsVerticalLayoutRules:)(51, 0, 1, v121._countAndFlagsBits, v121._object, v123, 20, 0, v297, 1, v302);
  v124 = sub_10003F544((uint64_t *)&unk_100554A10);
  inited = swift_initStackObject(v124, v358);
  v327 = xmmword_1003CA220;
  *(_OWORD *)(inited + 16) = xmmword_1003CA220;
  *(_QWORD *)(inited + 32) = v122;
  v126 = inited + 32;
  *(_QWORD *)(inited + 40) = v116;
  sub_100167218(inited, 50, v110);
  v128 = v127;
  swift_release(v110);
  swift_setDeallocating(inited);
  v129 = *(_QWORD *)(inited + 16);
  v130 = sub_10003F544(&qword_100553D30);
  swift_arrayDestroy(v126, v129, v130);
  if (v128 < 0 || (v128 & 0x4000000000000000) != 0)
  {
    v51 = v356;
    swift_bridgeObjectRetain(v356);
    swift_bridgeObjectRetain(v128);
    v131 = (uint64_t)sub_1001F9A8C(v292);
    swift_bridgeObjectRelease(v128);
  }
  else
  {
    v131 = v128 & 0xFFFFFFFFFFFFFF8;
    v51 = v356;
    swift_bridgeObjectRetain(v356);
    swift_bridgeObjectRetain(v128);
  }
  v132 = v326;
  *(_QWORD *)&v359[0] = v131;
  swift_bridgeObjectRetain(v51);
  sub_10016CFE0((uint64_t *)v359, v357, v51);
  if (v132)
    goto LABEL_147;
  swift_bridgeObjectRelease(v128);
  swift_bridgeObjectRelease_n(v51, 2);
  v64 = *(_QWORD *)&v359[0];
  v133 = objc_msgSend(v105, "mainBundle");
  v134._countAndFlagsBits = 0xD00000000000001ALL;
  v367._object = (void *)0xE000000000000000;
  v134._object = (void *)0x8000000100430100;
  v135._countAndFlagsBits = 0;
  v135._object = (void *)0xE000000000000000;
  v367._countAndFlagsBits = 0;
  v136 = NSLocalizedString(_:tableName:bundle:value:comment:)(v134, (Swift::String_optional)0, (NSBundle)v133, v135, v367);
  v49 = v136._countAndFlagsBits;
  v63 = (uint64_t)v136._object;

  v137 = sub_100178C08(v64);
  if ((v64 & 0x8000000000000000) == 0 && (v64 & 0x4000000000000000) == 0)
  {
    v138 = *(_QWORD *)(v64 + 16);
    swift_release(v64);
    goto LABEL_75;
  }
  swift_bridgeObjectRetain(v64);
  v138 = _CocoaArrayWrapper.endIndex.getter(v293);
  v51 = 2;
  swift_release_n(v64, 2);
  if (v138 < 0)
  {
    LOBYTE(v298) = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v298, 3451, 0);
    __break(1u);
    goto LABEL_140;
  }
LABEL_75:
  LOBYTE(v303) = 1;
  LOBYTE(v298) = 1;
  v139 = (void *)Shelf.__allocating_init(contentType:seeAllContentType:title:allItems:maxItems:isHorizontal:preferredNumberOfRows:horizontalLayoutFollowsVerticalLayoutRules:)(47, 0, 1, v136._countAndFlagsBits, v136._object, v137, v138, 0, v298, 2, v303);
  v140 = ((uint64_t (*)(void))Shelf.items.getter)();
  v141 = *(_QWORD *)(v140 + 16);
  v142 = swift_bridgeObjectRelease(v140);
  v143 = &unk_1003CA000;
  v329 = v139;
  if (!v141)
  {
    v64 = (uint64_t)_swiftEmptyArrayStorage;
    v51 = v356;
    goto LABEL_88;
  }
  v328 = static GroupedSearchResultsPage.Result.ID.topResults.getter(v142);
  v326 = v144;
  v145 = ((uint64_t (*)(void))Shelf.title.getter)();
  if (v146)
    v147 = v145;
  else
    v147 = 0;
  v325 = v147;
  if (v146)
    v148 = v146;
  else
    v148 = 0xE000000000000000;
  v308 = v148;
  v149 = sub_10003F544((uint64_t *)&unk_100553780);
  v150 = swift_allocObject(v149, 40, 7);
  *(_OWORD *)(v150 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v150 + 32) = v139;
  *(_QWORD *)&v359[0] = v150;
  specialized Array._endMutation()(v150);
  v151 = *(_QWORD *)&v359[0];
  v152 = v139;
  v153 = ((uint64_t (*)(void))Shelf.title.getter)();
  v155 = v154;
  v156 = type metadata accessor for JSONObject(0);
  v157 = v309;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 56))(v309, 1, 1, v156);
  v158 = type metadata accessor for ArtworkModel(0);
  v159 = v311;
  v160 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v158 - 8) + 56))(v311, 1, 1, v158);
  v161 = Shelf.title.getter(v160);
  if (v162)
  {
    v163 = v162;
  }
  else
  {
    v161 = 0;
    v163 = 0xE000000000000000;
  }
  v164 = v312;
  v51 = v356;
  sub_100166BD4(v161, v163, v357, v356, countAndFlagsBits, (uint64_t)object, v312);
  swift_bridgeObjectRelease(v163);
  v165 = v352;
  swift_storeEnumTagMultiPayload(v352, v351, 19);
  v166 = type metadata accessor for Page(0);
  swift_allocObject(v166, *(unsigned int *)(v166 + 48), *(unsigned __int16 *)(v166 + 52));
  LOBYTE(v359[0]) = 1;
  LOWORD(v299) = 513;
  LOBYTE(v295) = 1;
  v167 = Page.init(shelves:title:selectedFilterActionId:filterActions:headerBackgroundColor:headerButtonItems:presentationOptions:pageContext:nextPage:isIncomplete:isExplicit:uber:showAdamId:channelAdamId:mapiInLibrary:pageMetrics:)(v151, v153, v155, 0, 0, _swiftEmptyArrayStorage, 0x100000000, _swiftEmptyArrayStorage, 0, v165, v157, 0, v159, 0, v295, 0, v299, v164);
  v63 = (uint64_t)v310;
  GroupedSearchResultsPage.Result.init(id:name:page:)(v328, v326, v325, v308, v167);
  v64 = sub_10027AF0C(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  v61 = *(_QWORD *)(v64 + 16);
  v66 = *(_QWORD *)(v64 + 24);
  v49 = v61 + 1;
  if (v61 >= v66 >> 1)
    goto LABEL_143;
LABEL_86:
  *(_QWORD *)(v64 + 16) = v49;
  v142 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v349 + 32))(v64+ ((*(unsigned __int8 *)(v349 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v349 + 80))+ *(_QWORD *)(v349 + 72) * v61, v63, v350);
  v143 = (_OWORD *)&unk_1003CA000;
LABEL_88:
  v168 = v348;
  v169 = Shelf.items.getter(v142);
  v170 = *(_QWORD *)(v169 + 16);
  v171 = swift_bridgeObjectRelease(v169);
  if (v170)
  {
    v328 = static GroupedSearchResultsPage.Result.ID.shows.getter(v171);
    v326 = v172;
    v173 = Shelf.title.getter(v328);
    if (v174)
      v175 = v173;
    else
      v175 = 0;
    v325 = v175;
    if (v174)
      v176 = v174;
    else
      v176 = 0xE000000000000000;
    v312 = v176;
    v177 = sub_10003F544((uint64_t *)&unk_100553780);
    v178 = swift_allocObject(v177, 40, 7);
    *(_OWORD *)(v178 + 16) = v143[37];
    *(_QWORD *)(v178 + 32) = v168;
    *(_QWORD *)&v359[0] = v178;
    specialized Array._endMutation()(v178);
    v179 = *(_QWORD *)&v359[0];
    v180 = Shelf.title.getter(v168);
    v182 = v181;
    v183 = type metadata accessor for JSONObject(0);
    v184 = v313;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 56))(v313, 1, 1, v183);
    v185 = type metadata accessor for ArtworkModel(0);
    v186 = v314;
    v187 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v185 - 8) + 56))(v314, 1, 1, v185);
    v188 = Shelf.title.getter(v187);
    if (v189)
    {
      v190 = v189;
    }
    else
    {
      v188 = 0;
      v190 = 0xE000000000000000;
    }
    v51 = v356;
    v191 = v64;
    v192 = v316;
    sub_100166BD4(v188, v190, v357, v356, countAndFlagsBits, (uint64_t)object, v316);
    swift_bridgeObjectRelease(v190);
    v193 = v352;
    swift_storeEnumTagMultiPayload(v352, v351, 19);
    v194 = type metadata accessor for Page(0);
    swift_allocObject(v194, *(unsigned int *)(v194 + 48), *(unsigned __int16 *)(v194 + 52));
    LOBYTE(v359[0]) = 1;
    v304 = v192;
    v64 = v191;
    LOWORD(v299) = 513;
    LOBYTE(v295) = 1;
    LOWORD(v294) = 0;
    v195 = Page.init(shelves:title:selectedFilterActionId:filterActions:headerBackgroundColor:headerButtonItems:presentationOptions:pageContext:nextPage:isIncomplete:isExplicit:uber:showAdamId:channelAdamId:mapiInLibrary:pageMetrics:)(v179, v180, v182, 0, 0, _swiftEmptyArrayStorage, 0x100000000, _swiftEmptyArrayStorage, 0, v193, v184, v294, v186, 0, v295, 0, v299, v304);
    v196 = v315;
    GroupedSearchResultsPage.Result.init(id:name:page:)(v328, v326, v325, v312, v195);
    if ((swift_isUniquelyReferenced_nonNull_native(v191) & 1) == 0)
      v64 = sub_10027AF0C(0, *(_QWORD *)(v191 + 16) + 1, 1, v191);
    v198 = *(_QWORD *)(v64 + 16);
    v197 = *(_QWORD *)(v64 + 24);
    v143 = &unk_1003CA000;
    if (v198 >= v197 >> 1)
      v64 = sub_10027AF0C(v197 > 1, v198 + 1, 1, v64);
    *(_QWORD *)(v64 + 16) = v198 + 1;
    v171 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v349 + 32))(v64+ ((*(unsigned __int8 *)(v349 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v349 + 80))+ *(_QWORD *)(v349 + 72) * v198, v196, v350);
  }
  v199 = v347;
  v200 = Shelf.items.getter(v171);
  v201 = *(_QWORD *)(v200 + 16);
  v202 = swift_bridgeObjectRelease(v200);
  if (v201)
  {
    v328 = static GroupedSearchResultsPage.Result.ID.episodes.getter(v202);
    v326 = v203;
    v204 = Shelf.title.getter(v328);
    if (v205)
      v206 = v204;
    else
      v206 = 0;
    v325 = v206;
    if (v205)
      v207 = v205;
    else
      v207 = 0xE000000000000000;
    v316 = v207;
    v208 = sub_10003F544((uint64_t *)&unk_100553780);
    v209 = swift_allocObject(v208, 40, 7);
    *(_OWORD *)(v209 + 16) = v143[37];
    *(_QWORD *)(v209 + 32) = v199;
    *(_QWORD *)&v359[0] = v209;
    specialized Array._endMutation()(v209);
    v210 = *(_QWORD *)&v359[0];
    v211 = Shelf.title.getter(v199);
    v213 = v212;
    v214 = type metadata accessor for JSONObject(0);
    v215 = v317;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v214 - 8) + 56))(v317, 1, 1, v214);
    v216 = type metadata accessor for ArtworkModel(0);
    v217 = v318;
    v218 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v216 - 8) + 56))(v318, 1, 1, v216);
    v219 = Shelf.title.getter(v218);
    if (v220)
    {
      v221 = v220;
    }
    else
    {
      v219 = 0;
      v221 = 0xE000000000000000;
    }
    v51 = v356;
    v222 = v64;
    v223 = v320;
    sub_100166BD4(v219, v221, v357, v356, countAndFlagsBits, (uint64_t)object, v320);
    swift_bridgeObjectRelease(v221);
    v224 = v352;
    swift_storeEnumTagMultiPayload(v352, v351, 19);
    v225 = type metadata accessor for Page(0);
    swift_allocObject(v225, *(unsigned int *)(v225 + 48), *(unsigned __int16 *)(v225 + 52));
    LOBYTE(v359[0]) = 1;
    v305 = v223;
    v64 = v222;
    LOWORD(v299) = 513;
    LOBYTE(v295) = 1;
    LOWORD(v294) = 0;
    v226 = Page.init(shelves:title:selectedFilterActionId:filterActions:headerBackgroundColor:headerButtonItems:presentationOptions:pageContext:nextPage:isIncomplete:isExplicit:uber:showAdamId:channelAdamId:mapiInLibrary:pageMetrics:)(v210, v211, v213, 0, 0, _swiftEmptyArrayStorage, 0x100000000, _swiftEmptyArrayStorage, 0, v224, v215, v294, v217, 0, v295, 0, v299, v305);
    v227 = v319;
    GroupedSearchResultsPage.Result.init(id:name:page:)(v328, v326, v325, v316, v226);
    if ((swift_isUniquelyReferenced_nonNull_native(v222) & 1) == 0)
      v64 = sub_10027AF0C(0, *(_QWORD *)(v222 + 16) + 1, 1, v222);
    v229 = *(_QWORD *)(v64 + 16);
    v228 = *(_QWORD *)(v64 + 24);
    v143 = &unk_1003CA000;
    if (v229 >= v228 >> 1)
      v64 = sub_10027AF0C(v228 > 1, v229 + 1, 1, v64);
    *(_QWORD *)(v64 + 16) = v229 + 1;
    v202 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v349 + 32))(v64+ ((*(unsigned __int8 *)(v349 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v349 + 80))+ *(_QWORD *)(v349 + 72) * v229, v227, v350);
  }
  v230 = v346;
  v231 = Shelf.items.getter(v202);
  v232 = *(_QWORD *)(v231 + 16);
  v233 = swift_bridgeObjectRelease(v231);
  if (v232)
  {
    v356 = static GroupedSearchResultsPage.Result.ID.channels.getter(v233);
    v328 = v234;
    v235 = Shelf.title.getter(v356);
    if (v236)
      v237 = v235;
    else
      v237 = 0;
    v326 = v237;
    if (v236)
      v238 = v236;
    else
      v238 = 0xE000000000000000;
    v325 = v238;
    v239 = sub_10003F544((uint64_t *)&unk_100553780);
    v240 = swift_allocObject(v239, 40, 7);
    *(_OWORD *)(v240 + 16) = v143[37];
    *(_QWORD *)(v240 + 32) = v230;
    *(_QWORD *)&v359[0] = v240;
    specialized Array._endMutation()(v240);
    v241 = *(_QWORD *)&v359[0];
    v242 = Shelf.title.getter(v230);
    v244 = v243;
    v245 = type metadata accessor for JSONObject(0);
    v246 = v321;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v245 - 8) + 56))(v321, 1, 1, v245);
    v247 = type metadata accessor for ArtworkModel(0);
    v248 = v322;
    v249 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v247 - 8) + 56))(v322, 1, 1, v247);
    v250 = Shelf.title.getter(v249);
    if (v251)
    {
      v252 = v251;
    }
    else
    {
      v250 = 0;
      v252 = 0xE000000000000000;
    }
    v253 = v64;
    v254 = v324;
    sub_100166BD4(v250, v252, v357, v51, countAndFlagsBits, (uint64_t)object, v324);
    swift_bridgeObjectRelease(v252);
    v255 = v352;
    swift_storeEnumTagMultiPayload(v352, v351, 19);
    v256 = type metadata accessor for Page(0);
    swift_allocObject(v256, *(unsigned int *)(v256 + 48), *(unsigned __int16 *)(v256 + 52));
    LOBYTE(v359[0]) = 1;
    v306 = v254;
    v257 = v253;
    LOWORD(v299) = 513;
    LOBYTE(v295) = 1;
    LOWORD(v294) = 0;
    v258 = Page.init(shelves:title:selectedFilterActionId:filterActions:headerBackgroundColor:headerButtonItems:presentationOptions:pageContext:nextPage:isIncomplete:isExplicit:uber:showAdamId:channelAdamId:mapiInLibrary:pageMetrics:)(v241, v242, v244, 0, 0, _swiftEmptyArrayStorage, 0x100000000, _swiftEmptyArrayStorage, 0, v255, v246, v294, v248, 0, v295, 0, v299, v306);
    v259 = v323;
    GroupedSearchResultsPage.Result.init(id:name:page:)(v356, v328, v326, v325, v258);
    if ((swift_isUniquelyReferenced_nonNull_native(v253) & 1) == 0)
      v257 = sub_10027AF0C(0, *(_QWORD *)(v253 + 16) + 1, 1, v253);
    v261 = *(_QWORD *)(v257 + 16);
    v260 = *(_QWORD *)(v257 + 24);
    if (v261 >= v260 >> 1)
      v257 = sub_10027AF0C(v260 > 1, v261 + 1, 1, v257);
    v357 = v257;
    *(_QWORD *)(v257 + 16) = v261 + 1;
    v233 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v349 + 32))(v257+ ((*(unsigned __int8 *)(v349 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v349 + 80))+ *(_QWORD *)(v349 + 72) * v261, v259, v350);
  }
  else
  {
    v357 = v64;
  }
  *(_QWORD *)&v359[0] = static MetricsPageType.searchResults.getter(v233);
  *((_QWORD *)&v359[0] + 1) = v262;
  v263 = object;
  swift_bridgeObjectRetain(object);
  v264._countAndFlagsBits = 95;
  v264._object = (void *)0xE100000000000000;
  String.append(_:)(v264);
  v265 = countAndFlagsBits;
  v266._countAndFlagsBits = countAndFlagsBits;
  v266._object = v263;
  String.append(_:)(v266);
  swift_bridgeObjectRelease(v263);
  v267 = v331;
  v268 = PageID.init(with:)(*(_QWORD *)&v359[0], *((_QWORD *)&v359[0] + 1));
  v269 = static MetricsPageType.searchResults.getter(v268);
  v270 = v333;
  v273 = MetricsPageFields.init(pageID:pageType:pageDetails:sharedContent:customFields:)(v265, v263, v269, v271, 0, 0, 0, v272);
  v274 = v338;
  ScalarDictionary.init()(v273);
  v275 = sub_10032B834((uint64_t)_swiftEmptyArrayStorage);
  v276 = sub_10003F544(&qword_100553D38);
  v277 = type metadata accessor for PageMetrics.Instruction(0);
  v278 = swift_allocObject(v276, ((*(unsigned __int8 *)(*(_QWORD *)(v277 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v277 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v277 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v277 - 8) + 80) | 7);
  *(_OWORD *)(v278 + 16) = v327;
  v279 = *(void (**)(char *, _QWORD, uint64_t))(v332 + 104);
  v280 = v336;
  v281 = v341;
  v279(v336, enum case for MetricsEventType.page(_:), v341);
  PageMetrics.Instruction.init(eventType:)(v280);
  v279(v280, enum case for MetricsEventType.impressions(_:), v281);
  v282 = PageMetrics.Instruction.init(eventType:)(v280);
  v283 = MetricsPageFields.metricsFields.getter(v282);
  v284 = v343;
  v285 = v339;
  v286 = v344;
  (*(void (**)(char *, char *, uint64_t))(v343 + 16))(v339, v274, v344);
  v287 = v330;
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v278, v283, v285, v275);
  (*(void (**)(char *, uint64_t))(v284 + 8))(v274, v286);
  (*(void (**)(char *, uint64_t))(v335 + 8))(v270, v337);
  v288 = v334;
  GroupedSearchResultsPage.init(id:results:pageMetrics:)(v267, v357, v287);
  Promise.resolve(_:)(v288);

  return (*(uint64_t (**)(char *, uint64_t))(v340 + 8))(v288, v342);
}

uint64_t sub_100166BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  unint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[96];
  void *v54;
  _OWORD v55[2];
  __int128 v56;
  void *v57;

  v46 = a1;
  v52 = a7;
  v12 = type metadata accessor for MetricsEventType(0);
  v47 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for ScalarDictionary(0);
  v49 = *(_QWORD *)(v51 - 8);
  v15 = __chkstk_darwin(v51);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v45 - v18;
  v50 = type metadata accessor for MetricsPageFields(0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = &type metadata for String;
  *(_QWORD *)&v56 = a3;
  *((_QWORD *)&v56 + 1) = a4;
  sub_10013B9CC(&v56, v55);
  swift_bridgeObjectRetain(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v54 = &_swiftEmptyDictionarySingleton;
  sub_10021BD0C(v55, 0x6554686372616573, 0xEA00000000006D72, isUniquelyReferenced_nonNull_native);
  v23 = v54;
  swift_bridgeObjectRelease(0x8000000000000000);
  v24 = sub_10003F544(&qword_100553D40);
  inited = swift_initStackObject(v24, v53);
  v45 = xmmword_1003CA220;
  *(_OWORD *)(inited + 16) = xmmword_1003CA220;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x8000000100430170;
  *(_QWORD *)(inited + 48) = 0x7262694C72756F59;
  *(_QWORD *)(inited + 56) = 0xEB00000000797261;
  *(_QWORD *)(inited + 64) = 0xD000000000000013;
  *(_QWORD *)(inited + 72) = 0x8000000100430190;
  *(_QWORD *)(inited + 80) = v46;
  *(_QWORD *)(inited + 88) = a2;
  swift_bridgeObjectRetain(a2);
  v26 = sub_100138578(inited);
  v57 = (void *)sub_10003F544(&qword_100553D48);
  *(_QWORD *)&v56 = v26;
  sub_10013B9CC(&v56, v55);
  v27 = swift_isUniquelyReferenced_nonNull_native(v23);
  v54 = v23;
  sub_10021BD0C(v55, 0x737265746C6966, 0xE700000000000000, v27);
  v28 = v54;
  v29 = swift_bridgeObjectRelease(0x8000000000000000);
  v30 = static MetricsPageType.searchResults.getter(v29);
  v32 = v31;
  v33 = swift_bridgeObjectRetain(a6);
  v34 = MetricsPageFields.init(pageID:pageType:pageDetails:sharedContent:customFields:)(a5, a6, v30, v32, 0, 0, v28, v33);
  ScalarDictionary.init()(v34);
  v35 = sub_10032B834((uint64_t)_swiftEmptyArrayStorage);
  v36 = sub_10003F544(&qword_100553D38);
  v37 = *(_QWORD *)(type metadata accessor for PageMetrics.Instruction(0) - 8);
  v38 = swift_allocObject(v36, ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ 2 * *(_QWORD *)(v37 + 72), *(unsigned __int8 *)(v37 + 80) | 7);
  *(_OWORD *)(v38 + 16) = v45;
  v39 = *(void (**)(char *, _QWORD, uint64_t))(v47 + 104);
  v39(v14, enum case for MetricsEventType.page(_:), v12);
  PageMetrics.Instruction.init(eventType:)(v14);
  v39(v14, enum case for MetricsEventType.impressions(_:), v12);
  v40 = PageMetrics.Instruction.init(eventType:)(v14);
  v41 = MetricsPageFields.metricsFields.getter(v40);
  v42 = v49;
  v43 = v51;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v17, v19, v51);
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v38, v41, v17, v35);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v21, v50);
}

BOOL sub_100166FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::Bool v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::Bool v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::Bool v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = sub_10016D37C();
  v5 = StringProtocol.localizedLowercase.getter(&type metadata for String, v4);
  v7 = v6;
  v8 = LegacyLockup.title.getter(v5, v6);
  if (!v9)
    goto LABEL_6;
  v10 = v9;
  StringProtocol.localizedLowercase.getter(&type metadata for String, v4);
  v12 = v11;
  swift_bridgeObjectRelease(v10);
  v13._countAndFlagsBits = v5;
  v13._object = v7;
  v14 = String.hasPrefix(_:)(v13);
  v8 = swift_bridgeObjectRelease(v12);
  if (!v14)
  {
LABEL_6:
    LegacyLockup.title.getter(v8, v9);
    if (v21)
    {
      v22 = v21;
      StringProtocol.localizedLowercase.getter(&type metadata for String, v4);
      v24 = v23;
      swift_bridgeObjectRelease(v22);
      v25._countAndFlagsBits = v5;
      v25._object = v7;
      v26 = String.hasPrefix(_:)(v25);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v7);
      if (v26)
        return 0;
    }
    else
    {
      swift_bridgeObjectRelease(v7);
    }
    goto LABEL_10;
  }
  LegacyLockup.title.getter(v8, v9);
  if (!v15)
  {
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  v16 = v15;
  StringProtocol.localizedLowercase.getter(&type metadata for String, v4);
  v18 = v17;
  swift_bridgeObjectRelease(v16);
  v19._countAndFlagsBits = v5;
  v19._object = v7;
  v20 = String.hasPrefix(_:)(v19);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v7);
  if (!v20)
    return 1;
LABEL_10:
  v28 = type metadata accessor for LegacyEpisodeLockup(0);
  if (swift_dynamicCastClass(v2, v28))
  {
    v29 = 2;
  }
  else
  {
    v30 = type metadata accessor for LegacyChannelLockup(0);
    v29 = swift_dynamicCastClass(v2, v30) != 0;
  }
  if (swift_dynamicCastClass(a1, v28))
    return v29 < 2;
  v31 = type metadata accessor for LegacyChannelLockup(0);
  return swift_dynamicCastClass(a1, v31) && v29 == 0;
}

void sub_100167218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  sub_1001B3198(0, 0, a3);
  v4 = a1;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v13 = _swiftEmptyArrayStorage[2];
    if (!v13)
      goto LABEL_73;
LABEL_18:
    v14 = round((double)a2 / (double)v13);
    if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) != 0)
    {
      if (v14 <= -9.22337204e18)
      {
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      if (v14 >= 9.22337204e18)
      {
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        return;
      }
      v15 = (uint64_t)v14;
      if (!(uint64_t)v14)
        goto LABEL_81;
      v41 = &_swiftEmptyArrayStorage[4];
      swift_retain(_swiftEmptyArrayStorage);
      v16 = 0;
      v40 = v13;
      while (1)
      {
        v21 = v41[v16];
        if ((unint64_t)_swiftEmptyArrayStorage >> 62)
        {
          if ((uint64_t)_swiftEmptyArrayStorage < 0)
            v33 = _swiftEmptyArrayStorage;
          else
            v33 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
          swift_bridgeObjectRetain(v41[v16]);
          swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
          v22 = _CocoaArrayWrapper.endIndex.getter(v33);
          swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
          if (v15 == -1 && v22 == 0x8000000000000000)
            goto LABEL_77;
        }
        else
        {
          v22 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v41[v16]);
        }
        if (__OFSUB__(a2, v22))
          break;
        if (__OFADD__(v15, v22 % v15))
          goto LABEL_75;
        if (v15 + v22 % v15 >= a2 - v22)
          v23 = a2 - v22;
        else
          v23 = v15 + v22 % v15;
        if ((v23 & 0x8000000000000000) != 0)
          goto LABEL_76;
        if ((unint64_t)v21 >> 62)
        {
          if (v21 < 0)
            v34 = v21;
          else
            v34 = v21 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v21, 2);
          v35 = _CocoaArrayWrapper.endIndex.getter(v34);
          swift_bridgeObjectRelease(v21);
          swift_bridgeObjectRetain(v21);
          v36 = _CocoaArrayWrapper.endIndex.getter(v34);
          swift_bridgeObjectRelease(v21);
          if (v36 < 0)
            goto LABEL_82;
          if (v35 >= v23 || v35 <= -1)
            v38 = v23;
          else
            v38 = v35;
          if (v23)
            v26 = v38;
          else
            v26 = 0;
          swift_bridgeObjectRetain(v21);
          v39 = _CocoaArrayWrapper.endIndex.getter(v34);
          swift_bridgeObjectRelease(v21);
          if (v39 < v26)
          {
LABEL_70:
            __break(1u);
LABEL_71:
            swift_bridgeObjectRelease(a1);
            swift_release_n(_swiftEmptyArrayStorage, 2);
            return;
          }
        }
        else
        {
          v24 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v24 >= v23)
            v25 = v23;
          else
            v25 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v23)
            v26 = v25;
          else
            v26 = 0;
          swift_bridgeObjectRetain(v21);
          if ((uint64_t)v24 < v26)
            goto LABEL_70;
        }
        if ((v21 & 0xC000000000000001) != 0 && v26)
        {
          type metadata accessor for LegacyLockup(0);
          v27 = 0;
          do
          {
            v28 = v27 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v27);
            v27 = v28;
          }
          while (v26 != v28);
        }
        if ((unint64_t)v21 >> 62)
        {
          if (v21 < 0)
            v29 = v21;
          else
            v29 = v21 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v21);
          v18 = _CocoaArrayWrapper.subscript.getter(0, v26, v29);
          v19 = v30;
          v17 = v31;
          v20 = v32;
          swift_bridgeObjectRelease_n(v21, 2);
        }
        else
        {
          v17 = 0;
          v18 = v21 & 0xFFFFFFFFFFFFFF8;
          v19 = (v21 & 0xFFFFFFFFFFFFFF8) + 32;
          v20 = (2 * v26) | 1;
        }
        ++v16;
        swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
        sub_100172DB8(v18, v19, v17, v20);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease(v21);
        if (v16 == v40)
          goto LABEL_71;
      }
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
    }
    __break(1u);
    goto LABEL_79;
  }
  swift_bridgeObjectRetain(a1);
  for (i = 0; i != v5; ++i)
  {
    v7 = *(_QWORD *)(v4 + 8 * i + 32);
    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0)
        v11 = *(_QWORD *)(v4 + 8 * i + 32);
      else
        v11 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*(_QWORD *)(v4 + 8 * i + 32), 2);
      v12 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease(v7);
      if (!v12)
      {
LABEL_3:
        swift_bridgeObjectRelease(v7);
        continue;
      }
    }
    else
    {
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v4 + 8 * i + 32));
      if (!v8)
        goto LABEL_3;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      sub_10017B000(0, _swiftEmptyArrayStorage[2] + 1, 1);
    v10 = _swiftEmptyArrayStorage[2];
    v9 = _swiftEmptyArrayStorage[3];
    if (v10 >= v9 >> 1)
      sub_10017B000(v9 > 1, v10 + 1, 1);
    _swiftEmptyArrayStorage[2] = v10 + 1;
    _swiftEmptyArrayStorage[v10 + 4] = v7;
    v4 = a1;
  }
  swift_bridgeObjectRelease(v4);
  v13 = _swiftEmptyArrayStorage[2];
  if (v13)
    goto LABEL_18;
LABEL_73:
  swift_release(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v4);
}

uint64_t sub_10016769C@<X0>(uint64_t a1@<X1>, BOOL *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100005EC8(0, (unint64_t *)&qword_100553810, MTPodcast_ptr);
  result = NSManagedObjectContext.count<A>(for:)(a1, v4);
  *a2 = result > 0;
  return result;
}

id LibraryDataProvider.imageStore.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  id result;

  v2 = sub_100005EC8(0, &qword_1005536C0, MTImageStore_ptr);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "defaultStore");
  a1[3] = v2;
  a1[4] = &protocol witness table for MTImageStore;
  *a1 = result;
  return result;
}

uint64_t sub_10016777C()
{
  uint64_t v0;
  id v1;
  id v2;

  v0 = sub_100005EC8(0, &qword_100553730, MTLegacyDownloadManagerProvider_ptr);
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "sharedInstance");
  v2 = objc_msgSend(v1, "downloadManager");

  objc_msgSend(v2, "invalidateURLSessions");
  return swift_unknownObjectRelease(v2);
}

_QWORD *sub_1001677F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for TranscriptReportConcernURLBuilder();
  a1[3] = v2;
  a1[4] = &off_1004B6110;
  return BaseObjectGraph.inject<A>(_:)(a1, v2, v2);
}

id sub_100167848@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  id result;
  _UNKNOWN **v5;

  if ((static Podcasts.isBlueMoonEnabled()(a1) & 1) != 0)
  {
    v3 = type metadata accessor for BlueMoonStubPlayerController();
    result = (id)swift_allocObject(v3, 16, 7);
    v5 = &off_1004C4880;
  }
  else
  {
    result = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
    v5 = &off_1004C18C0;
  }
  *a2 = result;
  a2[1] = v5;
  return result;
}

id sub_1001678C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  void *v4;

  if ((static Podcasts.isBlueMoonEnabled()(a1) & 1) != 0)
  {
    result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BlueMoonStubPlayerAdapter()), "init");
    *a2 = result;
    a2[1] = &off_1004C2560;
  }
  else
  {
    if (qword_1005520C0 != -1)
      swift_once(&qword_1005520C0, sub_100004A04);
    v4 = (void *)qword_100573030;
    *a2 = qword_100573030;
    a2[1] = &protocol witness table for PodcastsPlayerAdapter;
    return v4;
  }
  return result;
}

uint64_t sub_100167954@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  swift_retain(a1);
  result = sub_100361558(v3);
  *a2 = result;
  return result;
}

_QWORD *sub_100167984@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for LibraryActionController();
  a1[3] = v2;
  a1[4] = sub_100026844(&qword_1005535D0, (uint64_t (*)(uint64_t))type metadata accessor for LibraryActionController, (uint64_t)&unk_1003D6AF0);
  return BaseObjectGraph.inject<A>(_:)(a1, v2, v2);
}

uint64_t sub_1001679F4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_100167A18()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "importContext");
}

id sub_100167A3C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "privateQueueContext");
}

uint64_t sub_100167A60(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  char v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v62 = type metadata accessor for LibraryDataProvider._Station(0);
  v4 = __chkstk_darwin(v62);
  v65 = (uint64_t)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v64 = (uint64_t)&v61 - v7;
  v8 = __chkstk_darwin(v6);
  v63 = (uint64_t)&v61 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v61 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v61 - v14;
  v16 = __chkstk_darwin(v13);
  v67 = (uint64_t)&v61 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v61 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v61 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v61 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v61 - v27;
  v29 = *a1;
  v30 = a1[1];
  v31 = *a2;
  v32 = a2[1];
  v33 = *a1 == *a2;
  v66 = v15;
  if (v33 && v30 == v32)
  {
    sub_10014FDF8((uint64_t)a1, (uint64_t)&v61 - v27, type metadata accessor for LibraryDataProvider._Station);
    sub_10014FDF8((uint64_t)a2, (uint64_t)v26, type metadata accessor for LibraryDataProvider._Station);
  }
  else
  {
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v31, v32, 0);
    sub_10014FDF8((uint64_t)a1, (uint64_t)v28, type metadata accessor for LibraryDataProvider._Station);
    sub_10014FDF8((uint64_t)a2, (uint64_t)v26, type metadata accessor for LibraryDataProvider._Station);
    if ((v34 & 1) == 0)
    {
      sub_10003F970((uint64_t)v28, type metadata accessor for LibraryDataProvider._Station);
      sub_10003F970((uint64_t)v26, type metadata accessor for LibraryDataProvider._Station);
      sub_10014FDF8((uint64_t)a1, (uint64_t)v23, type metadata accessor for LibraryDataProvider._Station);
      sub_10014FDF8((uint64_t)a2, (uint64_t)v20, type metadata accessor for LibraryDataProvider._Station);
      v37 = (uint64_t)v12;
      goto LABEL_12;
    }
  }
  v35 = sub_100005EC8(0, &qword_100553CC8, NSObject_ptr);
  v36 = static NSObject.== infix(_:_:)(*((_QWORD *)v28 + 2), *((_QWORD *)v26 + 2));
  sub_10003F970((uint64_t)v28, type metadata accessor for LibraryDataProvider._Station);
  sub_10003F970((uint64_t)v26, type metadata accessor for LibraryDataProvider._Station);
  sub_10014FDF8((uint64_t)a1, (uint64_t)v23, type metadata accessor for LibraryDataProvider._Station);
  sub_10014FDF8((uint64_t)a2, (uint64_t)v20, type metadata accessor for LibraryDataProvider._Station);
  v37 = (uint64_t)v12;
  if ((v36 & 1) == 0)
  {
LABEL_12:
    sub_10003F970((uint64_t)v20, type metadata accessor for LibraryDataProvider._Station);
    sub_10003F970((uint64_t)v23, type metadata accessor for LibraryDataProvider._Station);
    v40 = v67;
    sub_10014FDF8((uint64_t)a1, v67, type metadata accessor for LibraryDataProvider._Station);
    v41 = (uint64_t)v66;
    sub_10014FDF8((uint64_t)a2, (uint64_t)v66, type metadata accessor for LibraryDataProvider._Station);
    goto LABEL_13;
  }
  v61 = v35;
  v38 = v23[24];
  sub_10003F970((uint64_t)v23, type metadata accessor for LibraryDataProvider._Station);
  v39 = v20[24];
  sub_10003F970((uint64_t)v20, type metadata accessor for LibraryDataProvider._Station);
  v40 = v67;
  sub_10014FDF8((uint64_t)a1, v67, type metadata accessor for LibraryDataProvider._Station);
  v41 = (uint64_t)v66;
  sub_10014FDF8((uint64_t)a2, (uint64_t)v66, type metadata accessor for LibraryDataProvider._Station);
  if (v38 != v39)
  {
LABEL_13:
    sub_10003F970(v41, type metadata accessor for LibraryDataProvider._Station);
    sub_10003F970(v40, type metadata accessor for LibraryDataProvider._Station);
    sub_10014FDF8((uint64_t)a1, v37, type metadata accessor for LibraryDataProvider._Station);
    v47 = v63;
    sub_10014FDF8((uint64_t)a2, v63, type metadata accessor for LibraryDataProvider._Station);
    goto LABEL_14;
  }
  v42 = v62;
  v43 = type metadata accessor for StationSortOrder(0);
  v44 = sub_100026844(&qword_100553CD0, (uint64_t (*)(uint64_t))&type metadata accessor for StationSortOrder, (uint64_t)&protocol conformance descriptor for StationSortOrder);
  dispatch thunk of RawRepresentable.rawValue.getter(&v69, v43, v44);
  dispatch thunk of RawRepresentable.rawValue.getter(&v68, v43, v44);
  v46 = v68;
  v45 = v69;
  sub_10003F970(v41, type metadata accessor for LibraryDataProvider._Station);
  sub_10003F970(v40, type metadata accessor for LibraryDataProvider._Station);
  sub_10014FDF8((uint64_t)a1, v37, type metadata accessor for LibraryDataProvider._Station);
  v47 = v63;
  sub_10014FDF8((uint64_t)a2, v63, type metadata accessor for LibraryDataProvider._Station);
  if (v45 != v46)
  {
LABEL_14:
    sub_10003F970(v37, type metadata accessor for LibraryDataProvider._Station);
    sub_10003F970(v47, type metadata accessor for LibraryDataProvider._Station);
    v59 = (uint64_t)a1;
    v50 = v64;
    sub_10014FDF8(v59, v64, type metadata accessor for LibraryDataProvider._Station);
    v51 = v65;
    sub_10014FDF8((uint64_t)a2, v65, type metadata accessor for LibraryDataProvider._Station);
    goto LABEL_15;
  }
  v48 = static NSObject.== infix(_:_:)(*(_QWORD *)(v37 + *(int *)(v42 + 32)), *(_QWORD *)(v47 + *(int *)(v42 + 32)));
  sub_10003F970(v37, type metadata accessor for LibraryDataProvider._Station);
  sub_10003F970(v47, type metadata accessor for LibraryDataProvider._Station);
  v49 = (uint64_t)a1;
  v50 = v64;
  sub_10014FDF8(v49, v64, type metadata accessor for LibraryDataProvider._Station);
  v51 = v65;
  sub_10014FDF8((uint64_t)a2, v65, type metadata accessor for LibraryDataProvider._Station);
  if ((v48 & 1) == 0)
  {
LABEL_15:
    v58 = 0;
    goto LABEL_16;
  }
  v52 = *(_QWORD *)(v50 + *(int *)(v42 + 36));
  swift_bridgeObjectRetain(v52);
  v54 = sub_1001545DC(v53);
  swift_bridgeObjectRelease(v52);
  v55 = *(_QWORD *)(v51 + *(int *)(v42 + 36));
  swift_bridgeObjectRetain(v55);
  v57 = sub_1001545DC(v56);
  swift_bridgeObjectRelease(v55);
  v58 = sub_1001633C4(v54, v57);
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(v57);
LABEL_16:
  sub_10003F970(v51, type metadata accessor for LibraryDataProvider._Station);
  sub_10003F970(v50, type metadata accessor for LibraryDataProvider._Station);
  return v58 & 1;
}

char *sub_100167FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, char *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  Swift::String v39;
  void **v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void (*v60)(_QWORD *, uint64_t, uint64_t);
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t (**v79)(uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  id v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void **v99;
  Class isa;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  objc_class *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  void **aBlock;
  unint64_t v134;
  uint64_t (*v135)(uint64_t);
  void *v136;
  void (*v137)();
  uint64_t v138;
  objc_super v139;
  _QWORD v140[5];
  _QWORD v141[5];

  v118 = a8;
  v117 = a7;
  v116 = a6;
  v132 = a5;
  v128 = a4;
  v114 = a3;
  v130 = a2;
  v129 = a1;
  v127 = a13;
  v123 = a10;
  v131 = a9;
  v107 = a14;
  v124 = a11;
  v122 = type metadata accessor for URL(0);
  v121 = *(_QWORD *)(v122 - 8);
  v126 = *(_QWORD *)(v121 + 64);
  __chkstk_darwin(v122);
  v125 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for DispatchTimeInterval(0);
  v115 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v113 = (unint64_t *)((char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v112 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v102 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141[3] = sub_100005EC8(0, &qword_1005536C0, MTImageStore_ptr);
  v141[4] = &off_1004BF7F0;
  v141[0] = a12;
  v140[3] = &type metadata for AccounStoreDsidProvider;
  v140[4] = &off_1004C3908;
  *(_QWORD *)&a14[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___serialQueue] = 0;
  v109 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_delegateQueue;
  v108 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  aBlock = 0;
  v134 = 0xE000000000000000;
  v23 = a14;
  _StringGuts.grow(_:)(16);
  v24 = v134;
  v120 = (objc_class *)type metadata accessor for EpisodeDownloadsManager(0);
  v25 = sub_10003F544(&qword_1005540B0);
  v26 = _typeName(_:qualified:)(v25, 0);
  v28 = v27;
  swift_bridgeObjectRelease(v24);
  aBlock = (void **)v26;
  v134 = v28;
  v29._countAndFlagsBits = 0x746167656C65642ELL;
  v29._object = (void *)0xEE00657565755165;
  String.append(_:)(v29);
  v30 = aBlock;
  v102 = v134;
  static DispatchQoS.unspecified.getter(v31);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v32 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v105 = v32;
  v33 = sub_10003F544(&qword_100555A00);
  v104 = v33;
  v106 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
  v34 = v17;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v33, v106, v17, v32);
  v103 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v111 = *(_QWORD *)(v111 + 104);
  v35 = v110;
  v36 = v112;
  ((void (*)(char *))v111)(v110);
  v37 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v30, v102, v22, v19, v35, 0);
  *(_QWORD *)&v107[v109] = v37;
  v109 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_accessQueue;
  aBlock = (void **)_typeName(_:qualified:)(v25, 0);
  v134 = v38;
  v39._countAndFlagsBits = 0x517373656363612ELL;
  v39._object = (void *)0xEC00000065756575;
  String.append(_:)(v39);
  v40 = aBlock;
  v41 = v134;
  static DispatchQoS.unspecified.getter(v42);
  aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v104, v106, v34, v105);
  ((void (*)(char *, _QWORD, uint64_t))v111)(v35, v103, v36);
  v43 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v40, v41, v22, v19, v35, 0);
  *(_QWORD *)&v23[v109] = v43;
  v44 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders;
  *(_QWORD *)&v23[v44] = sub_1000043DC((uint64_t)_swiftEmptyArrayStorage);
  v45 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage;
  v46 = type metadata accessor for JobPipelineInMemoryStorage();
  v47 = swift_allocObject(v46, 32, 7);
  *(_QWORD *)(v47 + 16) = objc_msgSend(objc_allocWithZone((Class)NSRecursiveLock), "init");
  *(_QWORD *)(v47 + 24) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v23[v45] = v47;
  *(_QWORD *)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_expectedDownloaderTypes] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___restoreQueue] = 0;
  v48 = &v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_finalCheckBeforStart];
  *(_QWORD *)v48 = 0;
  *((_QWORD *)v48 + 1) = 0;
  *(_QWORD *)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___preflightURLSession] = 0;
  sub_100038690(v131, &v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_downloaderConfiguration]);
  *(_QWORD *)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_episodeRemover] = v128;
  v49 = &v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userEpisodeStorage];
  *(_QWORD *)v49 = v129;
  *((_QWORD *)v49 + 1) = &off_1004C6598;
  v50 = &v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_systemEpisodeStorage];
  *(_QWORD *)v50 = v130;
  *((_QWORD *)v50 + 1) = &off_1004C6598;
  sub_10000A520((uint64_t)v140, (uint64_t)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_dsidProvider]);
  v51 = &v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_jobStorage];
  v52 = v114;
  *(_QWORD *)v51 = v114;
  *((_QWORD *)v51 + 1) = &off_1004B1748;
  sub_100007A64(v132, (uint64_t)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_mediaLibraryClient], &qword_1005536B0);
  v53 = v116;
  *(_QWORD *)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_limitsHolder] = v116;
  v54 = v117;
  *(_QWORD *)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_notifier] = v117;
  v55 = type metadata accessor for DownloadsAlertPresenter();
  v56 = swift_allocObject(v55, 65, 7);
  *(_OWORD *)(v56 + 24) = 0u;
  *(_OWORD *)(v56 + 40) = 0u;
  *(_QWORD *)(v56 + 56) = 0;
  *(_BYTE *)(v56 + 64) = -1;
  v57 = v118;
  *(_QWORD *)(v56 + 16) = v118;
  v58 = v113;
  *v113 = 500;
  v59 = enum case for DispatchTimeInterval.milliseconds(_:);
  v60 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v115 + 104);
  swift_retain(v128);
  swift_retain(v129);
  swift_retain(v130);
  swift_retain(v52);
  v61 = v53;
  v62 = v54;
  swift_unknownObjectRetain(v57);
  v63 = (uint64_t)v58;
  v60(v58, v59, v119);
  v136 = (void *)v55;
  v137 = (void (*)())&off_1004B52E0;
  aBlock = (void **)v56;
  v64 = type metadata accessor for DownloadsAlertController(0);
  v65 = swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
  v66 = sub_100038DEC((uint64_t)&aBlock, v55);
  __chkstk_darwin(v66);
  v68 = (uint64_t *)((char *)&v102 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v69 + 16))(v68);
  v70 = *v68;
  swift_retain(v56);
  v71 = sub_10000D3D4(v70, v63, v65);
  sub_10003D380(&aBlock);
  swift_release(v56);
  v136 = (void *)v64;
  v137 = (void (*)())&off_1004B2AC8;
  aBlock = (void **)v71;
  sub_10003DC78((uint64_t)&aBlock, (uint64_t)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter], &qword_1005540B8);
  v72 = v123;
  *(_QWORD *)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_reachability] = v123;
  v73 = v121;
  v74 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 16);
  v75 = v124;
  v76 = v122;
  v74(&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_assetsFolder], v124, v122);
  sub_10000A520((uint64_t)v141, (uint64_t)&v23[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_artworkStorage]);
  swift_unknownObjectRetain(v72);

  v139.receiver = v23;
  v139.super_class = v120;
  v77 = (char *)objc_msgSendSuper2(&v139, "init");
  v78 = swift_allocObject(&unk_1004B02D8, 24, 7);
  swift_unknownObjectWeakInit(v78 + 16, v77);
  v79 = (uint64_t (**)(uint64_t))&v77[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_finalCheckBeforStart];
  v80 = *(_QWORD *)&v77[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_finalCheckBeforStart];
  v81 = *(_QWORD *)&v77[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_finalCheckBeforStart + 8];
  *v79 = sub_10016DE90;
  v79[1] = (uint64_t (*)(uint64_t))v78;
  v82 = v77;
  sub_10002CA30(v80, v81);
  v83 = sub_10002BE98();
  v84 = v125;
  v74(v125, v75, v76);
  v85 = *(unsigned __int8 *)(v73 + 80);
  v86 = (v85 + 16) & ~v85;
  v87 = swift_allocObject(&unk_1004B0300, v86 + v126, v85 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v87 + v86, v84, v76);
  v137 = sub_10016DF08;
  v138 = v87;
  aBlock = _NSConcreteStackBlock;
  v134 = 1107296256;
  v135 = sub_100027AF8;
  v136 = &unk_1004B0318;
  v88 = _Block_copy(&aBlock);
  swift_release(v138);
  objc_msgSend(v83, "addOperationWithBlock:", v88);
  _Block_release(v88);

  v89 = sub_10002BE98();
  v90 = sub_10003F544((uint64_t *)&unk_100553780);
  v91 = swift_allocObject(v90, 56, 7);
  *(_OWORD *)(v91 + 16) = xmmword_1003CA260;
  v92 = v131;
  v93 = (char *)sub_10003A834(v131, v131[3]);
  sub_10002B940(*v93);
  *(_QWORD *)(v91 + 32) = v94;
  v95 = (char *)sub_10003A834(v92 + 5, v92[8]);
  sub_10002B940(*v95);
  *(_QWORD *)(v91 + 40) = v96;
  v97 = (char *)sub_10003A834(v92 + 10, v92[13]);
  sub_10002B940(*v97);
  *(_QWORD *)(v91 + 48) = v98;
  aBlock = (void **)v91;
  specialized Array._endMutation()(v98);
  v99 = aBlock;
  sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v99);
  objc_msgSend(v89, "addOperations:waitUntilFinished:", isa, 0);

  sub_10003D380(v141);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v75, v76);
  sub_100016C4C(v92);
  sub_10003D380(v140);
  sub_100007A28(v132, &qword_1005536B0);
  return v82;
}

id _s8Podcasts19LibraryDataProviderC35handleEventsForBackgroundURLSession10identifier7handlerSbSS_yyctF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  id v7;
  id v8;
  NSString v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v14[5];
  uint64_t v15;

  v6 = sub_100005EC8(0, &qword_100553730, MTLegacyDownloadManagerProvider_ptr);
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "sharedInstance");
  v8 = objc_msgSend(v7, "downloadManager");

  v9 = String._bridgeToObjectiveC()();
  v14[4] = a3;
  v15 = a4;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100027AF8;
  v14[3] = &unk_1004B02A0;
  v10 = _Block_copy(v14);
  v11 = v15;
  swift_retain(a4);
  swift_release(v11);
  v12 = objc_msgSend(v8, "handleEventsForBackgroundURLSession:handler:", v9, v10);
  _Block_release(v10);
  swift_unknownObjectRelease(v8);

  return v12;
}

uint64_t _s8Podcasts19LibraryDataProviderC12fetchEpisode4with9JetEngine7PromiseCySo9MTEpisodeCSgG0A10Foundation6AdamIDV_tF_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;

  v2 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544((uint64_t *)&unk_1005537D0);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v5 = static OS_os_log.libraryLoadingSignpost.getter();
  v6 = Promise.init(signpost:log:metadata:logResult:)("fetchEpisode(with:)", 19, 2, v5, 0, 0, 0);
  result = type metadata accessor for CoreDataFetcher(0);
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
    v9 = swift_retain(v6);
    static CoreDataFetcher.fetchEpisode(contentId:guid:title:pubDate:podcastUuid:completion:)(a1, 0, 0, 0, 0, 0, v4, 0, v9, 0xE000000000000000, sub_10016DE04, v6);
    swift_release(v6);
    sub_100007A28((uint64_t)v4, &qword_1005522F0);
    return v6;
  }
  return result;
}

uint64_t sub_100168D88()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for ShowLockupStyle);
}

uint64_t sub_100168D94(uint64_t a1)
{
  return sub_10016921C(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ShowLockupStyle, (uint64_t (*)(uint64_t, uint64_t))sub_10015BA0C);
}

uint64_t sub_100168DAC()
{
  return 8;
}

_QWORD *sub_100168DB8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100168DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for StationListOptions(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100168E38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StationListOptions(0) - 8) + 80);
  return sub_10015BB10(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_100168E78()
{
  return sub_10015BC58();
}

uint64_t sub_100168E80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100168EA4()
{
  uint64_t v0;

  return sub_10015BD8C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100168EB4()
{
  return sub_10015BE50();
}

uint64_t sub_100168EBC()
{
  return sub_10015BF00();
}

uint64_t sub_100168EC8()
{
  uint64_t v0;

  return sub_10015C050(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100168ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 3:
    case 6:
    case 8:
      a1 = a2;
      goto LABEL_3;
    case 4:
      swift_bridgeObjectRetain(a6);
      swift_bridgeObjectRetain(a8);
      swift_bridgeObjectRetain(a2);
      a1 = a4;
LABEL_3:
      swift_bridgeObjectRetain(a1);
      break;
    case 7:
      swift_bridgeObjectRetain(a2);
      sub_100168F7C(a3, a4);
      break;
    default:
      return;
  }
}

uint64_t sub_100168F7C(uint64_t result, char a2)
{
  if (a2 == 1)
    return swift_retain(result);
  return result;
}

uint64_t _s8Podcasts19LibraryDataProviderC26fetchPodcastDetailBlocking4from8ShelfKit0fG0CSg10Foundation3URLV_tF_0@<X0>(NSURL *a1@<X8>)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  char **v18;
  id v19;
  id v20;
  uint64_t v21;
  _QWORD v23[5];

  URL._bridgeToObjectiveC()(a1);
  v2 = v1;
  v3 = objc_msgSend(v1, "pf_cleanUrlToStoreId");
  v4 = (void *)objc_opt_self(MTStoreIdentifier);
  if (!objc_msgSend(v4, "isNotEmpty:", v3)
    || !objc_msgSend(v4, "isEmpty:", objc_msgSend(v2, "pf_cleanUrlToStoreTrackId")))
  {
    goto LABEL_10;
  }
  v5 = objc_msgSend(v2, "pf_cleanUrlToEpisodeGuid");
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v23[0] = v7;
  v23[1] = v9;
  v10 = sub_10003F544(&qword_100554900);
  v11 = sub_10016DD80();
  v12 = Optional<A>.isEmpty.getter(v10, v11);
  swift_bridgeObjectRelease(v9);
  if ((v12 & 1) != 0)
  {
    v13 = (void *)objc_opt_self(MTPodcast);
    v14 = objc_msgSend(v13, "predicateForPodcastStoreId:", v3);
    v15 = type metadata accessor for Podcasts(0);
    v23[3] = v15;
    v23[4] = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
    v16 = sub_1000242A8(v23);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v16, enum case for Podcasts.renderImplicitFollowsAsLocalShows(_:), v15);
    v17 = v14;
    LOBYTE(v15) = isFeatureEnabled(_:)(v23);
    sub_10003D380(v23);
    v18 = &selRef_predicateForNotHiddenPodcasts;
    if ((v15 & 1) == 0)
      v18 = &selRef_predicateForNotHiddenNotImplicitlyFollowedPodcasts;
    v19 = objc_msgSend(v13, *v18);
    v20 = objc_msgSend(v17, "AND:", v19);

    type metadata accessor for CoreDataFetcher(0);
    v21 = sub_10003F544(&qword_100553898);
    static CoreDataFetcher.performAndWaitOnPodcast<A>(with:block:)(v23, v20, sub_10015C460, 0, v21);

    return v23[0];
  }
  else
  {
LABEL_10:

    return 0;
  }
}

uint64_t sub_1001691E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10015C464(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1001691E8(uint64_t result, char a2)
{
  if (a2 == 1)
    return swift_release(result);
  return result;
}

uint64_t sub_1001691FC()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings);
}

uint64_t sub_100169208(uint64_t a1)
{
  return sub_10016921C(a1, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings, (uint64_t (*)(uint64_t, uint64_t))sub_10015EB5C);
}

uint64_t sub_10016921C(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t _s8Podcasts19LibraryDataProviderC31seeAllEpisodesSettingsPublisher4uuid06filterI07Combine03AnyI0Vy0A10Foundation011EpisodeListH0Vs5NeverOGSS_AIyAJ0O10UserFilterOANGtF_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];

  v34 = a1;
  v6 = sub_10003F544(&qword_100553FD8);
  v7 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  v36 = v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_10003F544(&qword_100553FE0);
  v39 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_10003F544(&qword_100553FE8);
  v40 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CoreDataFetcher(0);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = static CoreDataFetcher.performAndPublishOnPodcast<A>(with:queue:block:)(a1, a2, v15, sub_10015E8D8, 0, &type metadata for EpisodeSortType);

  v41[0] = a3;
  v41[1] = v16;
  v17 = sub_10003F544(&qword_100553FF0);
  v18 = sub_10003F544(&qword_100553FF8);
  v19 = sub_10002F9C8(&qword_100554000, &qword_100553FF0, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v20 = sub_10002F9C8(&qword_100554008, &qword_100553FF8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.combineLatest<A>(_:)(v41, v17, v18, v19, v20);
  swift_release(v16);
  v21 = swift_allocObject(&unk_1004B01E8, 32, 7);
  *(_QWORD *)(v21 + 16) = v34;
  *(_QWORD *)(v21 + 24) = a2;
  v22 = swift_allocObject(&unk_1004B0210, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_10016DD40;
  *(_QWORD *)(v22 + 24) = v21;
  v23 = type metadata accessor for EpisodeListSettings(0);
  v24 = sub_10002F9C8(&qword_100554010, &qword_100553FD8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  swift_bridgeObjectRetain(a2);
  v25 = v35;
  Publisher.map<A>(_:)(sub_100169700, v22, v35, v23, v24);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v25);
  v26 = sub_10002F9C8(&qword_100554018, &qword_100553FE0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v27 = sub_100026844(&qword_1005539F8, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodeListSettings, (uint64_t)&protocol conformance descriptor for EpisodeListSettings);
  v28 = v37;
  Publisher<>.removeDuplicates()(v37, v26, v27);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v28);
  v29 = sub_10002F9C8((unint64_t *)&unk_100554020, &qword_100553FE8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v30 = v38;
  v31 = Publisher.eraseToAnyPublisher()(v38, v29);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v30);
  return v31;
}

uint64_t sub_1001695E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100169610@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10015E990(a1, *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), a2);
}

uint64_t sub_10016961C()
{
  uint64_t v0;

  sub_10003F49C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  return swift_deallocObject(v0, 81, 7);
}

uint64_t sub_10016965C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for EpisodeListType - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_100169698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = v3 + 16;
  sub_10003F450(v7, sub_100168ED4);
  return EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(v7, a1, a2, a3, 0, 0);
}

uint64_t sub_100169700(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*a1, *((_QWORD *)a1 + 1), a1[16]);
}

uint64_t sub_10016972C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100169758@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100162C3C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), a2);
}

void sub_100169764(void *a1)
{
  sub_100162E64(a1);
}

uint64_t sub_100169770()
{
  uint64_t v0;

  return sub_100162FE8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for LibraryDataProvider._Station(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100553C80, (uint64_t)&nominal type descriptor for LibraryDataProvider._Station);
}

uint64_t sub_100169790@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100163CC0(a1, *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), a2);
}

uint64_t _s8Podcasts19LibraryDataProviderC25fetchGroupedSearchResults4term6facets9JetEngine7PromiseCy8ShelfKit0fgH4PageVGSS_SDyS2SGSgtF_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD v13[5];
  _QWORD *v14;

  v3 = v2;
  sub_10003F544((uint64_t *)&unk_100553D10);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v6 = static OS_os_log.libraryLoadingSignpost.getter();
  v7 = Promise.init(signpost:log:metadata:logResult:)("fetchGroupedSearchResults(term:facets:)", 39, 2, v6, 0, 0, 0);
  v8 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider), "privateQueueContext");
  v9 = (_QWORD *)swift_allocObject(&unk_1004AFE78, 40, 7);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = v7;
  v13[4] = sub_10016D370;
  v14 = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100027AF8;
  v13[3] = &unk_1004AFE90;
  v10 = _Block_copy(v13);
  v11 = v14;
  swift_bridgeObjectRetain(a2);
  swift_retain(v7);
  swift_release(v11);
  objc_msgSend(v8, "performBlock:", v10);
  _Block_release(v10);

  return v7;
}

uint64_t _s8Podcasts19LibraryDataProviderC26fetchImageDownloadObserver9JetEngine7PromiseCy8ShelfKit0fgH8Protocol_pGyF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD v7[5];

  sub_10003F544(&qword_100553D00);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v0 = static OS_os_log.libraryLoadingSignpost.getter();
  v1 = Promise.init(signpost:log:metadata:logResult:)("fetchImageDownloadObserver()", 28, 2, v0, 0, 0, 0);
  v2 = type metadata accessor for ImageDownloadObserver();
  v3 = swift_allocObject(v2, 32, 7);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  v4 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v5 = qword_100552108;
  swift_retain(v3);
  if (v5 != -1)
    swift_once(&qword_100552108, sub_10031281C);
  objc_msgSend(v4, "addObserver:selector:name:object:", v3, "notificationFiredWithNote:", qword_1005632F8, 0);

  swift_release(v3);
  v7[3] = v2;
  v7[4] = sub_100026844(&qword_100553D08, (uint64_t (*)(uint64_t))type metadata accessor for ImageDownloadObserver, (uint64_t)&unk_1003D5168);
  v7[0] = v3;
  swift_retain(v3);
  Promise.resolve(_:)(v7);
  swift_release(v3);
  sub_10003D380(v7);
  return v1;
}

uint64_t sub_100169A7C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_10016769C(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100169A84()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100169AA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100169AD4()
{
  return sub_100026844(&qword_10055C6C0, type metadata accessor for LibraryDataProvider, (uint64_t)&protocol conformance descriptor for LibraryDataProvider);
}

_QWORD *sub_100169B00(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = (void *)a2[2];
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v9 = a3[7];
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for StationSortOrder(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v14 = v8;
    v13(v10, v11, v12);
    v15 = a3[8];
    v16 = a3[9];
    v17 = *(void **)((char *)a2 + v15);
    *(_QWORD *)((char *)v4 + v15) = v17;
    v18 = *(uint64_t *)((char *)a2 + v16);
    *(_QWORD *)((char *)v4 + v16) = v18;
    v19 = v17;
    swift_bridgeObjectRetain(v18);
  }
  return v4;
}

uint64_t sub_100169BE8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

  v4 = a1 + a2[7];
  v5 = type metadata accessor for StationSortOrder(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
}

uint64_t sub_100169C58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for StationSortOrder(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v13 = v7;
  v12(v9, v10, v11);
  v14 = a3[8];
  v15 = a3[9];
  v16 = *(void **)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v16;
  v17 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = v16;
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t sub_100169D14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a2 + 16);
  v9 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  v10 = v8;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for StationSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[8];
  v16 = *(void **)(a2 + v15);
  v17 = *(void **)(a1 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  v18 = v16;

  v19 = a3[9];
  v20 = *(_QWORD *)(a2 + v19);
  v21 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_100169DE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for StationSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  return a1;
}

uint64_t sub_100169E78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for StationSortOrder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[8];
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);

  v15 = a3[9];
  v16 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_100169F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100169F38);
}

uint64_t sub_100169F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for StationSortOrder(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_100169FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100169FC0);
}

uint64_t sub_100169FC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for StationSortOrder(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10016A034(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1003CAA80;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_1003CAAC8;
  result = type metadata accessor for StationSortOrder(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10016A0D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, uint64_t);
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v56 = a2;
  v5 = type metadata accessor for EpisodeListSettings(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = v5;
  v8 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v9 = sub_10003F544(&qword_100553EB0);
  v10 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  v58 = v10;
  __chkstk_darwin(v9);
  v55 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = 0;
  v62 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v12 = swift_bridgeObjectRelease(v62);
  v59 = 0xD000000000000026;
  v60 = 0x80000001004303D0;
  v13 = EpisodeListSettings.listType.getter(&v61, v12);
  v14 = EpisodeListType.description.getter(v13);
  v16 = v15;
  sub_10003F450((uint64_t)&v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18._countAndFlagsBits = 93;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v53 = v60;
  v54 = v59;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v51 = v20;
  v52 = v19;
  v50 = EpisodeListSettings.predicate.getter(v19);
  v48 = a1;
  v21 = EpisodeListSettings.sort.getter();
  v49 = EpisodeSortType.descriptors.getter(v21);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v44 = static OS_dispatch_queue.main.getter(v22);
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v23 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1;
  v25 = v7;
  v47(v23, v24, v7);
  v26 = *(unsigned __int8 *)(v6 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = v27 + v8;
  v46 = v26 | 7;
  v29 = swift_allocObject(&unk_1004B0148, v28, v26 | 7);
  v45 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v45(v29 + v27, v23, v25);
  v30 = type metadata accessor for LibraryEpisodeLockup(0);
  v43 = v30;
  v31 = a3;
  v32 = sub_10003F544(&qword_100553EB8);
  v33 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v34 = sub_10016DBA0(&qword_100553EC0, &qword_100553EB8);
  v42 = v30;
  v35 = v55;
  FetchedResultsSectionedPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:sectionTransform:)(v54, v53, v52, v51, v50, v49, v56, v31, v44, sub_10016DB54, v29, sub_10015BAB8, 0, sub_10015CE68, 0, v42, v32, v33, v34);
  v47(v23, v48, v25);
  v36 = swift_allocObject(&unk_1004B0170, v28, v46);
  v45(v36 + v27, v23, v25);
  v37 = type metadata accessor for ModernShelf(0);
  v38 = sub_10002F9C8(&qword_100553EC8, &qword_100553EB0, (uint64_t)&protocol conformance descriptor for FetchedResultsSectionedPublisher<A, B, C>);
  v39 = v57;
  v40 = PaginatedPublisher.paginatedSectionMap<A, B, C>(_:)(sub_10016DB74, v36, v57, v32, v43, v37, v38, v34);
  swift_release(v36);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v35, v39);
  return v40;
}

uint64_t sub_10016A48C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  Swift::String v14;
  void *object;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v50 = a2;
  v5 = type metadata accessor for EpisodeListSettings(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_100553EB0);
  v10 = *(_QWORD *)(v9 - 8);
  v51 = v9;
  v52 = v10;
  __chkstk_darwin(v9);
  v49 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = 0;
  v56 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v12 = swift_bridgeObjectRelease(v56);
  v53 = 0xD00000000000001ALL;
  v54 = 0x80000001004302F0;
  v13 = EpisodeListSettings.listType.getter(&v55, v12);
  v14._countAndFlagsBits = EpisodeListType.description.getter(v13);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  sub_10003F450((uint64_t)&v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
  v47 = v54;
  v48 = v53;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v45 = v17;
  v46 = v16;
  v44 = EpisodeListSettings.predicate.getter(v16);
  v42 = a1;
  v18 = EpisodeListSettings.sort.getter();
  v43 = EpisodeSortType.descriptors.getter(v18);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v38 = static OS_dispatch_queue.main.getter(v19);
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v41(v8, a1, v5);
  v20 = *(unsigned __int8 *)(v6 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = v21 + v7;
  v40 = v20 | 7;
  v23 = swift_allocObject(&unk_1004AFFE0, v22, v20 | 7);
  v39 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v39(v23 + v21, v8, v5);
  v24 = type metadata accessor for LibraryEpisodeLockup(0);
  v37 = v24;
  v25 = a3;
  v26 = sub_10003F544(&qword_100553EB8);
  v27 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v28 = sub_10016DBA0(&qword_100553EC0, &qword_100553EB8);
  v36 = v24;
  v29 = v49;
  FetchedResultsSectionedPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:sectionTransform:)(v48, v47, v46, v45, v44, v43, v50, v25, v38, sub_10016D76C, v23, sub_10015BAB8, 0, sub_10015CE68, 0, v36, v26, v27, v28);
  v41(v8, v42, v5);
  v30 = swift_allocObject(&unk_1004B0008, v22, v40);
  v39(v30 + v21, v8, v5);
  v31 = type metadata accessor for ModernShelf(0);
  v32 = sub_10002F9C8(&qword_100553EC8, &qword_100553EB0, (uint64_t)&protocol conformance descriptor for FetchedResultsSectionedPublisher<A, B, C>);
  v33 = v51;
  v34 = PaginatedPublisher.paginatedSectionMap<A, B, C>(_:)(sub_10016D78C, v30, v51, v26, v37, v31, v32, v28);
  swift_release(v30);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v29, v33);
  return v34;
}

uint64_t sub_10016A824(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;

  v57 = a3;
  v58 = a2;
  v4 = type metadata accessor for LibraryDataProvider._Station(0);
  v55 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v56 = v5;
  v59 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_100553D78);
  v61 = *(_QWORD *)(v6 - 8);
  v62 = v6;
  __chkstk_darwin(v6);
  v60 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StationSortOrder(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v12 = sub_10003F544(&qword_1005559A0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1003CA200;
  v14 = (void *)a1[2];
  *(_QWORD *)(v13 + 56) = sub_100005EC8(0, &qword_100553D90, NSManagedObjectID_ptr);
  *(_QWORD *)(v13 + 64) = sub_10000A2C8(&qword_100553D98, &qword_100553D90, NSManagedObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v13 + 32) = v14;
  v15 = v14;
  v16 = (void *)NSPredicate.init(format:_:)(0x7473696C79616C70, 0xEE004025203D3D20, v13);
  v17 = (uint64_t)a1;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, (char *)a1 + *(int *)(v4 + 28), v8);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v18 == enum case for StationSortOrder.library(_:))
  {
    v19 = 0;
LABEL_13:
    v53 = sub_100005EC8(0, &qword_100553DA0, MTPodcastPlaylistSettings_ptr);
    v54 = static MTPodcastPlaylistSettings.sortDescriptorsForGroupedStation(orderedBy:)(v19);
    v63 = 0;
    v64 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(v64);
    v63 = 0xD000000000000026;
    v64 = 0x8000000100430280;
    v20 = *a1;
    v21 = (void *)a1[1];
    swift_bridgeObjectRetain(v21);
    v22._countAndFlagsBits = v20;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v21);
    v51 = v64;
    v52 = v63;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastPlaylistSettingsEntityName);
    v49 = v24;
    v50 = v23;
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v25 = v16;
    v27 = static OS_dispatch_queue.main.getter(v26);
    v28 = v59;
    sub_10014FDF8((uint64_t)a1, v59, type metadata accessor for LibraryDataProvider._Station);
    v29 = *(unsigned __int8 *)(v55 + 80);
    v30 = (v29 + 16) & ~v29;
    v31 = v30 + v56;
    v32 = v29 | 7;
    v33 = swift_allocObject(&unk_1004AFEC8, v30 + v56, v29 | 7);
    sub_10013BE30(v28, v33 + v30, type metadata accessor for LibraryDataProvider._Station);
    v35 = type metadata accessor for LibraryShowLockup(0, v34);
    v36 = v57;
    v48 = v27;
    v37 = v60;
    FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v52, v51, v50, v49, v25, v54, v58, v36, v48, sub_10016D424, v33, sub_10015BAB8, 0, v35, v53);
    sub_10014FDF8(v17, v28, type metadata accessor for LibraryDataProvider._Station);
    v38 = swift_allocObject(&unk_1004AFEF0, v31, v32);
    sub_10013BE30(v28, v38 + v30, type metadata accessor for LibraryDataProvider._Station);
    v39 = sub_10003F544((uint64_t *)&unk_100559EC0);
    v40 = type metadata accessor for ModernShelf(0);
    v41 = sub_10002F9C8(&qword_100553DA8, &qword_100553D78, (uint64_t)&protocol conformance descriptor for FetchedResultsListPublisher<A, B>);
    v42 = v62;
    v43 = PaginatedPublisher.paginatedFRPOutputMap<A, B>(_:)(sub_10016D4E8, v38, v62, v39, v40, v41);
    swift_release(v38);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v37, v42);
    v63 = v43;
    v44 = sub_10003F544(&qword_100553A98);
    v45 = sub_10002F9C8(&qword_100553D60, &qword_100553A98, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
    v46 = PaginatedPublisher.eraseToAnyPaginatedPublisher()(v44, v45);
    swift_release(v43);

    return v46;
  }
  if (v18 == enum case for StationSortOrder.mostRecent(_:))
  {
    v19 = 1;
    goto LABEL_13;
  }
  if (v18 == enum case for StationSortOrder.manual(_:))
  {
    v19 = 2;
    goto LABEL_13;
  }
  if (v18 == enum case for StationSortOrder.oldest(_:))
  {
    v19 = 3;
    goto LABEL_13;
  }
  if (v18 == enum case for StationSortOrder.showTitle(_:))
  {
    v19 = 4;
    goto LABEL_13;
  }
  if (v18 == enum case for StationSortOrder.showTitleAscending(_:))
  {
    v19 = 5;
    goto LABEL_13;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x206E776F6E6B6E55, 0xEC00000065707974, "Podcasts/StationSortOrder+MTPlaylistContainerOrder.swift", 56, 2, 67, 0);
  __break(1u);
  return result;
}

uint64_t sub_10016ADB0(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v54 = a3;
  v55 = a2;
  v4 = type metadata accessor for LibraryDataProvider._Station(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v53 = v6;
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544((uint64_t *)&unk_100553960);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for StationSortOrder(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, (char *)a1 + *(int *)(v4 + 28), v12);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  v57 = v9;
  v58 = v8;
  v56 = v11;
  if (v16 == enum case for StationSortOrder.library(_:))
  {
    v17 = 0;
LABEL_13:
    v51 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
    v52 = static MTEpisode.sortDescriptorsForUngroupedStation(orderedBy:)(v17);
    v59 = 0;
    v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(v60);
    v59 = 0xD00000000000001FLL;
    v60 = 0x80000001004302D0;
    v18 = *a1;
    v19 = (void *)a1[1];
    swift_bridgeObjectRetain(v19);
    v20._countAndFlagsBits = v18;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v19);
    v49 = v60;
    v50 = v59;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
    v47 = v22;
    v48 = v21;
    v23 = *(void **)((char *)a1 + *(int *)(v4 + 32));
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v24 = v23;
    v26 = static OS_dispatch_queue.main.getter(v25);
    sub_10014FDF8((uint64_t)a1, (uint64_t)v7, type metadata accessor for LibraryDataProvider._Station);
    v27 = *(unsigned __int8 *)(v5 + 80);
    v28 = (uint64_t)v7;
    v29 = (v27 + 16) & ~v27;
    v30 = v29 + v53;
    v31 = v27 | 7;
    v32 = swift_allocObject(&unk_1004AFF18, v29 + v53, v27 | 7);
    sub_10013BE30(v28, v32 + v29, type metadata accessor for LibraryDataProvider._Station);
    v33 = type metadata accessor for LibraryEpisodeLockup(0);
    v34 = v54;
    v46 = v32;
    v35 = v56;
    FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v50, v49, v48, v47, v24, v52, v55, v34, v26, sub_10016D4FC, v46, sub_10015BAB8, 0, v33, v51);
    sub_10014FDF8((uint64_t)a1, v28, type metadata accessor for LibraryDataProvider._Station);
    v36 = swift_allocObject(&unk_1004AFF40, v30, v31);
    sub_10013BE30(v28, v36 + v29, type metadata accessor for LibraryDataProvider._Station);
    v37 = sub_10003F544((uint64_t *)&unk_1005537F0);
    v38 = type metadata accessor for ModernShelf(0);
    v39 = sub_10002F9C8(&qword_100553970, (uint64_t *)&unk_100553960, (uint64_t)&protocol conformance descriptor for FetchedResultsListPublisher<A, B>);
    v40 = v58;
    v41 = PaginatedPublisher.paginatedFRPOutputMap<A, B>(_:)(sub_10016D514, v36, v58, v37, v38, v39);
    swift_release(v36);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v40);
    v59 = v41;
    v42 = sub_10003F544(&qword_100553A98);
    v43 = sub_10002F9C8(&qword_100553D60, &qword_100553A98, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
    v44 = PaginatedPublisher.eraseToAnyPaginatedPublisher()(v42, v43);
    swift_release(v41);
    return v44;
  }
  if (v16 == enum case for StationSortOrder.mostRecent(_:))
  {
    v17 = 1;
    goto LABEL_13;
  }
  if (v16 == enum case for StationSortOrder.manual(_:))
  {
    v17 = 2;
    goto LABEL_13;
  }
  if (v16 == enum case for StationSortOrder.oldest(_:))
  {
    v17 = 3;
    goto LABEL_13;
  }
  if (v16 == enum case for StationSortOrder.showTitle(_:))
  {
    v17 = 4;
    goto LABEL_13;
  }
  if (v16 == enum case for StationSortOrder.showTitleAscending(_:))
  {
    v17 = 5;
    goto LABEL_13;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x206E776F6E6B6E55, 0xEC00000065707974, "Podcasts/StationSortOrder+MTPlaylistContainerOrder.swift", 56, 2, 67, 0);
  __break(1u);
  return result;
}

uint64_t sub_10016B270(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  __n128 v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  void *object;
  uint64_t countAndFlagsBits;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  _OWORD v118[2];
  uint64_t v119;

  v2 = sub_10003F544((uint64_t *)&unk_100553DE0);
  __chkstk_darwin(v2);
  v4 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v5);
  v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_100553DF0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100553DF8);
  v110 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v108 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v109 = (char *)&v94 - v15;
  v16 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v16);
  v107 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v18);
  v104 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v20);
  v103 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v22);
  v99 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v24);
  v96 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v26);
  v95 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v28);
  v101 = (char *)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for ModernShelf(0);
  v105 = *(_QWORD *)(v30 - 8);
  v106 = v30;
  v31 = __chkstk_darwin(v30);
  v102 = (char *)&v94 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v117 = (char *)&v94 - v33;
  v34 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v115 = *(_QWORD *)(v34 - 8);
  v116 = v34;
  v35 = __chkstk_darwin(v34);
  v100 = (char *)&v94 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v38 = (char *)&v94 - v37;
  v39 = ShelfIDBuilder.init(named:)(0xD000000000000010, 0x80000001004302B0);
  v40 = ShelfIDBuilder.addingAttribute(_:named:)(*a1);
  swift_bridgeObjectRelease(v39);
  v41 = ShelfIDBuilder.build()();
  object = v41._object;
  swift_bridgeObjectRelease(v40);
  LOBYTE(v118[0]) = 1;
  v114 = v38;
  ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(3, 0, 0x10000000000, 1);
  v42 = type metadata accessor for LibraryDataProvider._Station(0);
  v43 = *(_QWORD *)((char *)a1 + *(int *)(v42 + 36));
  if ((unint64_t)v43 >> 62)
  {
    if (v43 < 0)
      v91 = *(_QWORD *)((char *)a1 + *(int *)(v42 + 36));
    else
      v91 = v43 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v43);
    v44 = _CocoaArrayWrapper.endIndex.getter(v91);
  }
  else
  {
    v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)((char *)a1 + *(int *)(v42 + 36)));
  }
  v112 = v9;
  v113 = v8;
  v111 = v11;
  countAndFlagsBits = v41._countAndFlagsBits;
  if (v44)
  {
    *(_QWORD *)&v118[0] = _swiftEmptyArrayStorage;
    result = specialized ContiguousArray.reserveCapacity(_:)(v44);
    if (v44 < 0)
    {
      __break(1u);
      return result;
    }
    v94 = v12;
    v46 = 0;
    do
    {
      if ((v43 & 0xC000000000000001) != 0)
      {
        v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v43);
      }
      else
      {
        v47 = *(_QWORD *)(v43 + 8 * v46 + 32);
        swift_retain(v47);
      }
      ++v46;
      v48 = type metadata accessor for EpisodeListSettings(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v7, 1, 1, v48);
      v49 = type metadata accessor for SectionContext(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v4, 1, 1, v49);
      v50 = dispatch thunk of Episode.defaultLockup(for:sectionContext:)(v7, v4);
      sub_100007A28((uint64_t)v4, (uint64_t *)&unk_100553DE0);
      sub_100007A28((uint64_t)v7, &qword_10055B790);
      v51 = swift_release(v47);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v51);
      v52 = *(_QWORD *)(*(_QWORD *)&v118[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v52);
      v53 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v50);
      specialized ContiguousArray._endMutation()(v53);
    }
    while (v44 != v46);
    v54 = *(_QWORD *)&v118[0];
    swift_bridgeObjectRelease(v43);
    v12 = v94;
  }
  else
  {
    swift_bridgeObjectRelease(v43);
    v54 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v55 = type metadata accessor for ActionMenu(0);
  v56 = v95;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v95, 1, 1, v55);
  v57 = type metadata accessor for Header.PrimaryAction(0);
  v58 = v96;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v96, 1, 1, v57);
  v59 = type metadata accessor for ArtworkModel(0);
  v60 = v99;
  v61.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v99, 1, 1, v59);
  v62 = v101;
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(0, 0, 0, 0, 0, 0, 0, 0, v61, v56, v58, _swiftEmptyArrayStorage, v60);
  v63 = v100;
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v100, v114, v116);
  v64 = sub_1001788C8(v54);
  v65 = type metadata accessor for URL(0);
  v66 = v103;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v103, 1, 1, v65);
  v119 = 0;
  memset(v118, 0, sizeof(v118));
  v67 = object;
  v68 = swift_bridgeObjectRetain(object);
  v69 = ModernShelf.ItemPresentation.itemKind.getter(v68);
  v70 = ModernShelf.ItemKind.targetType.getter(v69);
  v72 = v71;
  v73 = v104;
  v74 = countAndFlagsBits;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x456E6F6974617453, 0xEF7365646F736970, 0, 0, countAndFlagsBits, v67, v70, v71, 0, 0);
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v72);
  v75 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v73, 0, 1, v75);
  v76 = type metadata accessor for MetricsShelfName(0);
  v77 = v107;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v107, 1, 1, v76);
  v93 = v77;
  v78 = v117;
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v74, v67, v62, v63, v64, v66, 1, 0, v118, v73, v93);
  v80 = v105;
  v79 = v106;
  v81 = v102;
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v102, v78, v106);
  if ((unint64_t)v54 >> 62)
  {
    if (v54 < 0)
      v92 = v54;
    else
      v92 = v54 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v54);
    v82 = _CocoaArrayWrapper.endIndex.getter(v92);
    swift_bridgeObjectRelease(v54);
  }
  else
  {
    v82 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v84 = v112;
  v83 = v113;
  v85 = v111;
  swift_bridgeObjectRelease(v54);
  v86 = v109;
  FRPOutput.init(content:hasMore:totalCount:)(v81, 0, v82, v79);
  v87 = v110;
  v88 = v108;
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v108, v86, v12);
  Just.init(_:)(v88, v12);
  v89 = sub_10002F9C8(&qword_100553E00, &qword_100553DF0, (uint64_t)&protocol conformance descriptor for Just<A>);
  v90 = PaginatedPublisher.eraseToAnyPaginatedPublisher()(v83, v89);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v83);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v12);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v117, v79);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v114, v116);
  return v90;
}

uint64_t sub_10016BBB4(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char *v13;
  Swift::Int v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::Bool v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  Swift::Bool v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  Swift::Bool v49;
  Swift::Int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  Swift::Int v55;
  Swift::Int v56;
  uint64_t *v57;
  uint64_t v58;
  Swift::Int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  Swift::Int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::String v76;
  Swift::Bool v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  uint64_t v83;
  Swift::Int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  Swift::Int v161;
  Swift::Int v162;
  Swift::Int v163;
  Swift::Int v164;
  _QWORD *v165;
  char *__dst;
  char *v167;
  char *v168;
  unint64_t v169;
  Swift::Int v170;
  Swift::Int v171;
  uint64_t v172;
  uint64_t v173;
  _BOOL4 v175;
  unint64_t v176;
  unint64_t v177;
  Swift::Int v178;
  char *v179;
  uint64_t v180;

  v4 = a3;
  v6 = a1[1];
  swift_bridgeObjectRetain_n(a3, 3);
  v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if (v6 < 0)
      goto LABEL_187;
    if (!v6)
      return swift_bridgeObjectRelease_n(v4, 3);
    swift_bridgeObjectRetain(v4);
    sub_10016CC40(0, v6, 1, a1);
    return swift_bridgeObjectRelease_n(v4, 4);
  }
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (v6 < -1)
    goto LABEL_195;
  v160 = a1;
  v161 = v7;
  v173 = v4;
  v169 = v3;
  if (v6 < 2)
  {
    v13 = (char *)_swiftEmptyArrayStorage;
    v180 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      v4 = _swiftEmptyArrayStorage[2];
LABEL_151:
      v168 = v13;
      if (v4 >= 2)
      {
        v148 = *v160;
        do
        {
          v149 = v4 - 2;
          if (v4 < 2)
            goto LABEL_182;
          if (!v148)
            goto LABEL_194;
          v150 = *(_QWORD *)&v168[16 * v149 + 32];
          v151 = *(_QWORD *)&v168[16 * v4 + 24];
          v152 = (char *)(v148 + 8 * *(_QWORD *)&v168[16 * v4 + 16]);
          swift_bridgeObjectRetain(v173);
          sub_10016C960((char *)(v148 + 8 * v150), v152, v148 + 8 * v151, __dst, a2, v173);
          if (v169)
            goto LABEL_163;
          swift_bridgeObjectRelease(v173);
          if (v151 < v150)
            goto LABEL_183;
          if ((swift_isUniquelyReferenced_nonNull_native(v168) & 1) == 0)
            v168 = sub_1001FA68C((uint64_t)v168);
          if (v149 >= *((_QWORD *)v168 + 2))
            goto LABEL_184;
          v153 = &v168[16 * v149 + 32];
          *(_QWORD *)v153 = v150;
          *((_QWORD *)v153 + 1) = v151;
          v154 = *((_QWORD *)v168 + 2);
          if (v4 > v154)
            goto LABEL_185;
          memmove(&v168[16 * v4 + 16], &v168[16 * v4 + 32], 16 * (v154 - v4));
          *((_QWORD *)v168 + 2) = v154 - 1;
          v4 = v154 - 1;
        }
        while (v154 > 2);
      }
      v158 = swift_bridgeObjectRelease(v168);
      *(_QWORD *)((v180 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v158);
      v156 = v180;
      v157 = v173;
LABEL_165:
      swift_bridgeObjectRelease_n(v157, 3);
      return swift_bridgeObjectRelease(v156);
    }
  }
  else
  {
    v9 = v8 >> 1;
    v10 = type metadata accessor for LegacyLockup(0);
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)(v9, v10);
    *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    __dst = (char *)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    v180 = v11;
  }
  v14 = 0;
  v15 = *v160;
  v159 = *v160 - 8;
  v13 = (char *)_swiftEmptyArrayStorage;
  v163 = v6;
  v172 = *v160;
  while (1)
  {
    v167 = v13;
    v16 = v14 + 1;
    v164 = v14;
    if (v14 + 1 >= v6)
    {
      v50 = v14 + 1;
      goto LABEL_97;
    }
    v4 = *(_QWORD *)(v15 + 8 * v16);
    v17 = *(_QWORD *)(v15 + 8 * v14);
    swift_retain(v4);
    swift_retain(v17);
    v175 = sub_100166FF4(v18);
    swift_release(v4);
    swift_release(v17);
    v19 = v14 + 2;
    if (v14 + 2 < v6)
    {
      v177 = sub_10016D37C();
      v20 = v172;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v21 = *(_QWORD *)(v20 + 8 * v19);
            v22 = *(_QWORD *)(v20 + 8 * v16);
            swift_retain(v21);
            swift_retain(v22);
            v23 = v177;
            v24 = StringProtocol.localizedLowercase.getter(&type metadata for String, v177);
            v26 = v25;
            v27 = LegacyLockup.title.getter(v24, v25);
            if (!v28)
              break;
            v29 = v28;
            StringProtocol.localizedLowercase.getter(&type metadata for String, v177);
            v31 = v30;
            swift_bridgeObjectRelease(v29);
            v32._countAndFlagsBits = v24;
            v32._object = v26;
            v33 = String.hasPrefix(_:)(v32);
            v34 = v31;
            v23 = v177;
            v27 = swift_bridgeObjectRelease(v34);
            if (!v33)
              break;
            v4 = v22;
            LegacyLockup.title.getter(v27, v28);
            if (v35)
            {
              v36 = v35;
              v4 = StringProtocol.localizedLowercase.getter(&type metadata for String, v177);
              v38 = v37;
              swift_bridgeObjectRelease(v36);
              v39._countAndFlagsBits = v24;
              v39._object = v26;
              v40 = String.hasPrefix(_:)(v39);
              swift_bridgeObjectRelease(v38);
              swift_bridgeObjectRelease(v26);
              if (v40)
              {
                v41 = type metadata accessor for LegacyEpisodeLockup(0);
                v42 = swift_dynamicCastClass(v21, v41);
                v6 = v163;
                if (!v42)
                  goto LABEL_23;
                goto LABEL_31;
              }
              swift_release(v21);
              swift_release(v22);
            }
            else
            {
              swift_release(v21);
              swift_release(v22);
              swift_bridgeObjectRelease(v26);
            }
            v6 = v163;
            v20 = v172;
            if (!v175)
            {
              v50 = v19;
              if (v19 >= v163)
              {
LABEL_97:
                v13 = v167;
                goto LABEL_98;
              }
              goto LABEL_58;
            }
            v50 = v19 + 1;
            v16 = v19;
            v19 = v50;
            if (v50 >= v163)
              goto LABEL_49;
          }
          LegacyLockup.title.getter(v27, v28);
          if (v44)
            break;
          swift_bridgeObjectRelease(v26);
          v6 = v163;
LABEL_30:
          v41 = type metadata accessor for LegacyEpisodeLockup(0);
          v42 = swift_dynamicCastClass(v21, v41);
          if (!v42)
          {
LABEL_23:
            v43 = type metadata accessor for LegacyChannelLockup(v42);
            v4 = swift_dynamicCastClass(v21, v43) != 0;
            goto LABEL_32;
          }
LABEL_31:
          v4 = 2;
LABEL_32:
          if (swift_dynamicCastClass(v22, v41))
          {
            swift_release(v21);
            swift_release(v22);
            v51 = v4 < 2;
          }
          else
          {
            v52 = type metadata accessor for LegacyChannelLockup(0);
            v53 = swift_dynamicCastClass(v22, v52);
            swift_release(v21);
            swift_release(v22);
            if (!v53)
            {
              v20 = v172;
              if (v175)
              {
                v50 = v19;
                goto LABEL_49;
              }
              goto LABEL_37;
            }
            v51 = v4 == 0;
          }
          v20 = v172;
          if (((v175 ^ v51) & 1) != 0)
          {
            v50 = v19;
            if (v175)
              goto LABEL_49;
            goto LABEL_57;
          }
LABEL_37:
          v50 = v19 + 1;
          v16 = v19;
          v19 = v50;
          if (v50 >= v6)
            goto LABEL_48;
        }
        v45 = v44;
        v4 = StringProtocol.localizedLowercase.getter(&type metadata for String, v23);
        v47 = v46;
        swift_bridgeObjectRelease(v45);
        v48._countAndFlagsBits = v24;
        v48._object = v26;
        v49 = String.hasPrefix(_:)(v48);
        swift_bridgeObjectRelease(v47);
        swift_bridgeObjectRelease(v26);
        v6 = v163;
        if (!v49)
          goto LABEL_30;
        swift_release(v21);
        swift_release(v22);
        if (v175)
        {
          v50 = v19;
          v20 = v172;
          goto LABEL_49;
        }
        v50 = v19 + 1;
        v16 = v19;
        v19 = v50;
        v20 = v172;
        if (v50 >= v163)
          goto LABEL_57;
      }
    }
    v50 = v14 + 2;
    v20 = v172;
LABEL_48:
    if (v175)
    {
LABEL_49:
      if (v50 < v164)
        goto LABEL_188;
      if (v164 < v50)
      {
        v54 = (uint64_t *)(v159 + 8 * v50);
        v55 = v50;
        v56 = v164;
        v57 = (uint64_t *)(v20 + 8 * v164);
        do
        {
          if (v56 != --v55)
          {
            if (!v20)
              goto LABEL_193;
            v58 = *v57;
            *v57 = *v54;
            *v54 = v58;
          }
          ++v56;
          --v54;
          ++v57;
        }
        while (v56 < v55);
      }
    }
LABEL_57:
    if (v50 >= v6)
      goto LABEL_97;
LABEL_58:
    v13 = v167;
    if (__OFSUB__(v50, v164))
      goto LABEL_186;
    if (v50 - v164 < v161)
      break;
LABEL_98:
    if (v50 < v164)
      goto LABEL_181;
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_1001FA388(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v94 = *((_QWORD *)v13 + 2);
    v93 = *((_QWORD *)v13 + 3);
    v4 = v94 + 1;
    v15 = v172;
    if (v94 >= v93 >> 1)
    {
      v147 = sub_1001FA388((char *)(v93 > 1), v94 + 1, 1, v13);
      v15 = v172;
      v13 = v147;
    }
    *((_QWORD *)v13 + 2) = v4;
    v95 = v13 + 32;
    v96 = &v13[16 * v94 + 32];
    *(_QWORD *)v96 = v164;
    *((_QWORD *)v96 + 1) = v50;
    v171 = v50;
    if (v94)
    {
      v168 = v13;
      v179 = v13 + 32;
      while (1)
      {
        v97 = v4 - 1;
        if (v4 >= 4)
        {
          v102 = &v95[16 * v4];
          v103 = *((_QWORD *)v102 - 8);
          v104 = *((_QWORD *)v102 - 7);
          v108 = __OFSUB__(v104, v103);
          v105 = v104 - v103;
          if (v108)
            goto LABEL_170;
          v107 = *((_QWORD *)v102 - 6);
          v106 = *((_QWORD *)v102 - 5);
          v108 = __OFSUB__(v106, v107);
          v100 = v106 - v107;
          v101 = v108;
          if (v108)
            goto LABEL_171;
          v109 = v4 - 2;
          v110 = &v95[16 * v4 - 32];
          v112 = *(_QWORD *)v110;
          v111 = *((_QWORD *)v110 + 1);
          v108 = __OFSUB__(v111, v112);
          v113 = v111 - v112;
          if (v108)
            goto LABEL_173;
          v108 = __OFADD__(v100, v113);
          v114 = v100 + v113;
          if (v108)
            goto LABEL_176;
          if (v114 >= v105)
          {
            v132 = &v95[16 * v97];
            v134 = *(_QWORD *)v132;
            v133 = *((_QWORD *)v132 + 1);
            v108 = __OFSUB__(v133, v134);
            v135 = v133 - v134;
            if (v108)
              goto LABEL_180;
            v125 = v100 < v135;
            goto LABEL_136;
          }
        }
        else
        {
          if (v4 != 3)
          {
            v126 = *((_QWORD *)v13 + 4);
            v127 = *((_QWORD *)v13 + 5);
            v108 = __OFSUB__(v127, v126);
            v119 = v127 - v126;
            v120 = v108;
            goto LABEL_130;
          }
          v99 = *((_QWORD *)v13 + 4);
          v98 = *((_QWORD *)v13 + 5);
          v108 = __OFSUB__(v98, v99);
          v100 = v98 - v99;
          v101 = v108;
        }
        if ((v101 & 1) != 0)
          goto LABEL_172;
        v109 = v4 - 2;
        v115 = &v95[16 * v4 - 32];
        v117 = *(_QWORD *)v115;
        v116 = *((_QWORD *)v115 + 1);
        v118 = __OFSUB__(v116, v117);
        v119 = v116 - v117;
        v120 = v118;
        if (v118)
          goto LABEL_175;
        v121 = &v95[16 * v97];
        v123 = *(_QWORD *)v121;
        v122 = *((_QWORD *)v121 + 1);
        v108 = __OFSUB__(v122, v123);
        v124 = v122 - v123;
        if (v108)
          goto LABEL_178;
        if (__OFADD__(v119, v124))
          goto LABEL_179;
        if (v119 + v124 >= v100)
        {
          v125 = v100 < v124;
LABEL_136:
          if (v125)
            v97 = v109;
          goto LABEL_138;
        }
LABEL_130:
        if ((v120 & 1) != 0)
          goto LABEL_174;
        v128 = &v95[16 * v97];
        v130 = *(_QWORD *)v128;
        v129 = *((_QWORD *)v128 + 1);
        v108 = __OFSUB__(v129, v130);
        v131 = v129 - v130;
        if (v108)
          goto LABEL_177;
        if (v131 < v119)
          goto LABEL_14;
LABEL_138:
        v136 = v97 - 1;
        if (v97 - 1 >= v4)
        {
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
          goto LABEL_190;
        }
        if (!v15)
          goto LABEL_192;
        v137 = v95;
        v138 = &v95[16 * v136];
        v139 = *(_QWORD *)v138;
        v140 = v97;
        v141 = &v137[16 * v97];
        v142 = *((_QWORD *)v141 + 1);
        v143 = (char *)(v15 + 8 * *(_QWORD *)v138);
        v144 = (char *)(v15 + 8 * *(_QWORD *)v141);
        v145 = v15 + 8 * v142;
        swift_bridgeObjectRetain(v173);
        sub_10016C960(v143, v144, v145, __dst, a2, v173);
        v4 = v169;
        if (v169)
        {
LABEL_163:
          swift_bridgeObjectRelease(v168);
          v155 = swift_bridgeObjectRelease(v173);
          *(_QWORD *)((v180 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
          specialized Array._endMutation()(v155);
          v156 = v180;
          v157 = v173;
          goto LABEL_165;
        }
        swift_bridgeObjectRelease(v173);
        if (v142 < v139)
          goto LABEL_167;
        v13 = v168;
        if (v140 > *((_QWORD *)v168 + 2))
          goto LABEL_168;
        *(_QWORD *)v138 = v139;
        v95 = v179;
        *(_QWORD *)&v179[16 * v136 + 8] = v142;
        v146 = *((_QWORD *)v168 + 2);
        if (v140 >= v146)
          goto LABEL_169;
        v4 = v146 - 1;
        memmove(v141, v141 + 16, 16 * (v146 - 1 - v140));
        *((_QWORD *)v168 + 2) = v146 - 1;
        v15 = v172;
        if (v146 <= 2)
          goto LABEL_14;
      }
    }
    v4 = 1;
LABEL_14:
    v6 = v163;
    v14 = v171;
    if (v171 >= v163)
      goto LABEL_151;
  }
  if (__OFADD__(v164, v161))
    goto LABEL_189;
  if (v164 + v161 >= v6)
    v59 = v6;
  else
    v59 = v164 + v161;
  if (v59 >= v164)
  {
    if (v50 == v59)
      goto LABEL_98;
    v60 = sub_10016D37C();
    v61 = v172;
    v62 = v60;
    v63 = (_QWORD *)(v159 + 8 * v50);
    v176 = v60;
    v162 = v59;
    while (2)
    {
      v64 = *(_QWORD *)(v61 + 8 * v50);
      v65 = v164;
      v165 = v63;
      v170 = v50;
LABEL_71:
      v178 = v65;
      v66 = *v63;
      swift_retain(v64);
      v67 = v66;
      swift_retain(v66);
      v68 = StringProtocol.localizedLowercase.getter(&type metadata for String, v62);
      v70 = v69;
      v71 = LegacyLockup.title.getter(v68, v69);
      if (v72)
      {
        v73 = v72;
        StringProtocol.localizedLowercase.getter(&type metadata for String, v62);
        v75 = v74;
        swift_bridgeObjectRelease(v73);
        v76._countAndFlagsBits = v68;
        v76._object = v70;
        v77 = String.hasPrefix(_:)(v76);
        v71 = swift_bridgeObjectRelease(v75);
        if (v77)
        {
          v4 = v67;
          LegacyLockup.title.getter(v71, v72);
          if (v78)
          {
            v79 = v78;
            StringProtocol.localizedLowercase.getter(&type metadata for String, v176);
            v81 = v80;
            swift_bridgeObjectRelease(v79);
            v82._countAndFlagsBits = v68;
            v82._object = v70;
            v4 = String.hasPrefix(_:)(v82);
            swift_bridgeObjectRelease(v81);
            swift_bridgeObjectRelease(v70);
            if ((v4 & 1) != 0)
            {
              v83 = type metadata accessor for LegacyEpisodeLockup(0);
              v84 = v170;
              if (swift_dynamicCastClass(v64, v83))
              {
                v4 = 2;
LABEL_88:
                if (swift_dynamicCastClass(v67, v83))
                {
                  swift_release(v64);
                  swift_release(v67);
                  if (v4 >= 2)
                    goto LABEL_68;
                }
                else
                {
                  v91 = type metadata accessor for LegacyChannelLockup(0);
                  if (!swift_dynamicCastClass(v67, v91))
                  {
LABEL_67:
                    swift_release(v64);
                    swift_release(v67);
LABEL_68:
                    v61 = v172;
                    v62 = v176;
LABEL_69:
                    v50 = v84 + 1;
                    v63 = v165 + 1;
                    if (v50 == v162)
                    {
                      v50 = v162;
                      goto LABEL_97;
                    }
                    continue;
                  }
                  swift_release(v64);
                  swift_release(v67);
                  if ((_DWORD)v4)
                    goto LABEL_68;
                }
LABEL_93:
                v61 = v172;
                if (!v172)
                  goto LABEL_191;
                v92 = *v63;
                v64 = v63[1];
                *v63 = v64;
                v63[1] = v92;
                --v63;
                v62 = v176;
                v65 = v178 + 1;
                if (v84 == v178 + 1)
                  goto LABEL_69;
                goto LABEL_71;
              }
LABEL_87:
              v90 = type metadata accessor for LegacyChannelLockup(0);
              v4 = swift_dynamicCastClass(v64, v90) != 0;
              goto LABEL_88;
            }
            swift_release(v64);
            swift_release(v67);
          }
          else
          {
            swift_release(v64);
            swift_release(v67);
            swift_bridgeObjectRelease(v70);
          }
          v84 = v170;
          goto LABEL_93;
        }
      }
      break;
    }
    LegacyLockup.title.getter(v71, v72);
    if (v85)
    {
      v86 = v85;
      StringProtocol.localizedLowercase.getter(&type metadata for String, v176);
      v88 = v87;
      swift_bridgeObjectRelease(v86);
      v89._countAndFlagsBits = v68;
      v89._object = v70;
      v4 = String.hasPrefix(_:)(v89);
      swift_bridgeObjectRelease(v88);
      swift_bridgeObjectRelease(v70);
      v84 = v170;
      if ((v4 & 1) != 0)
        goto LABEL_67;
    }
    else
    {
      swift_bridgeObjectRelease(v70);
      v84 = v170;
    }
    v83 = type metadata accessor for LegacyEpisodeLockup(0);
    if (swift_dynamicCastClass(v64, v83))
    {
      v4 = 2;
      goto LABEL_88;
    }
    goto LABEL_87;
  }
LABEL_190:
  __break(1u);
LABEL_191:
  swift_bridgeObjectRelease_n(v173, 3);
  __break(1u);
LABEL_192:
  swift_bridgeObjectRelease_n(v173, 3);
  __break(1u);
LABEL_193:
  swift_bridgeObjectRelease_n(v173, 3);
  __break(1u);
LABEL_194:
  swift_bridgeObjectRelease_n(v173, 3);
  __break(1u);
LABEL_195:
  swift_bridgeObjectRelease_n(v4, 4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10016C960(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  char *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t result;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;

  v6 = __dst;
  v7 = a2;
  v8 = __src;
  v9 = a2 - __src;
  v10 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v10 = a2 - __src;
  v11 = v10 >> 3;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 3;
  v36 = __src;
  v35 = __dst;
  if (v11 >= v14 >> 3)
  {
    if (v13 >= -7)
    {
      if (__dst != a2 || &a2[8 * v15] <= __dst)
        memmove(__dst, a2, 8 * v15);
      v23 = &v6[8 * v15];
      v34 = v23;
      v36 = v7;
      v33 = v8;
      if (v8 < v7 && v13 >= 8)
      {
        v24 = (char *)(a3 - 8);
        v25 = v7;
        v32 = v6;
        do
        {
          v26 = v24 + 8;
          v27 = *((_QWORD *)v23 - 1);
          v28 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          swift_retain(v27);
          swift_retain(v28);
          v30 = sub_100166FF4(v29);
          swift_release(v27);
          swift_release(v28);
          if (v30)
          {
            if (v26 != v7 || v24 >= v7)
              *(_QWORD *)v24 = *(_QWORD *)v25;
            v36 = v25;
          }
          else
          {
            v34 = v23 - 8;
            if (v26 < v23 || v24 >= v23 || v26 != v23)
              *(_QWORD *)v24 = *((_QWORD *)v23 - 1);
            v25 = v7;
            v23 -= 8;
          }
          if (v25 <= v33)
            break;
          v24 -= 8;
          v7 = v25;
        }
        while (v23 > v32);
      }
      goto LABEL_43;
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != __src || &__src[8 * v11] <= __dst)
      memmove(__dst, __src, 8 * v11);
    v16 = &v6[8 * v11];
    v34 = v16;
    if ((unint64_t)v7 < a3 && v9 >= 8)
    {
      v17 = a3;
      do
      {
        v18 = *(_QWORD *)v7;
        v19 = *(_QWORD *)v6;
        swift_retain(*(_QWORD *)v7);
        swift_retain(v19);
        v21 = sub_100166FF4(v20);
        swift_release(v18);
        swift_release(v19);
        if (v21)
        {
          v22 = v7 + 8;
          if (v8 < v7 || v8 >= v22 || v8 != v7)
            *(_QWORD *)v8 = *(_QWORD *)v7;
        }
        else
        {
          if (v8 != v6)
            *(_QWORD *)v8 = *(_QWORD *)v6;
          v6 += 8;
          v35 = v6;
          v22 = v7;
        }
        v8 += 8;
        if (v6 >= v16)
          break;
        v7 = v22;
      }
      while ((unint64_t)v22 < v17);
      v36 = v8;
    }
LABEL_43:
    sub_1001FA528(&v36, &v35, &v34);
    return 1;
  }
  swift_bridgeObjectRelease(a6);
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10016CC40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::Bool v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::Bool v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::Bool v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v44 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = sub_10016D37C();
    v46 = v5;
    v7 = (_QWORD *)(v5 + 8 * v4 - 8);
    v48 = v6;
LABEL_6:
    v9 = *(_QWORD *)(v46 + 8 * v4);
    v10 = v44;
    v45 = v7;
    v47 = v4;
    while (1)
    {
      v49 = v10;
      v11 = *v7;
      swift_retain(v9);
      swift_retain(v11);
      v12 = StringProtocol.localizedLowercase.getter(&type metadata for String, v6);
      v14 = v13;
      v15 = LegacyLockup.title.getter(v12, v13);
      if (!v16)
        goto LABEL_13;
      v17 = v16;
      StringProtocol.localizedLowercase.getter(&type metadata for String, v6);
      v19 = v18;
      swift_bridgeObjectRelease(v17);
      v20._countAndFlagsBits = v12;
      v20._object = v14;
      v21 = String.hasPrefix(_:)(v20);
      v22 = v19;
      v6 = v48;
      v15 = swift_bridgeObjectRelease(v22);
      if (v21)
      {
        LegacyLockup.title.getter(v15, v16);
        if (!v23)
        {
          swift_release(v9);
          swift_release(v11);
          result = swift_bridgeObjectRelease(v14);
          v8 = v47;
LABEL_22:
          v39 = v49;
          goto LABEL_30;
        }
        v24 = v23;
        StringProtocol.localizedLowercase.getter(&type metadata for String, v48);
        v26 = v25;
        swift_bridgeObjectRelease(v24);
        v27._countAndFlagsBits = v12;
        v27._object = v14;
        v28 = String.hasPrefix(_:)(v27);
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(v14);
        if (!v28)
        {
          swift_release(v9);
          result = swift_release(v11);
          v8 = v47;
          v6 = v48;
          goto LABEL_22;
        }
        v29 = type metadata accessor for LegacyEpisodeLockup(0);
        if (swift_dynamicCastClass(v9, v29))
        {
          v30 = 2;
        }
        else
        {
          v40 = type metadata accessor for LegacyChannelLockup(0);
          v30 = swift_dynamicCastClass(v9, v40) != 0;
        }
        v6 = v48;
      }
      else
      {
LABEL_13:
        LegacyLockup.title.getter(v15, v16);
        if (v31)
        {
          v32 = v31;
          StringProtocol.localizedLowercase.getter(&type metadata for String, v6);
          v34 = v33;
          swift_bridgeObjectRelease(v32);
          v35._countAndFlagsBits = v12;
          v35._object = v14;
          v36 = String.hasPrefix(_:)(v35);
          v37 = v34;
          v6 = v48;
          swift_bridgeObjectRelease(v37);
          swift_bridgeObjectRelease(v14);
          if (v36)
            goto LABEL_4;
        }
        else
        {
          swift_bridgeObjectRelease(v14);
        }
        v29 = type metadata accessor for LegacyEpisodeLockup(0);
        if (swift_dynamicCastClass(v9, v29))
        {
          v30 = 2;
        }
        else
        {
          v38 = type metadata accessor for LegacyChannelLockup(0);
          v30 = swift_dynamicCastClass(v9, v38) != 0;
        }
      }
      if (swift_dynamicCastClass(v11, v29))
      {
        swift_release(v9);
        result = swift_release(v11);
        v8 = v47;
        v39 = v49;
        if (v30 >= 2)
          goto LABEL_5;
      }
      else
      {
        v41 = type metadata accessor for LegacyChannelLockup(0);
        if (!swift_dynamicCastClass(v11, v41))
        {
LABEL_4:
          swift_release(v9);
          result = swift_release(v11);
          v8 = v47;
LABEL_5:
          v4 = v8 + 1;
          v7 = v45 + 1;
          if (v4 == a2)
            return result;
          goto LABEL_6;
        }
        swift_release(v9);
        result = swift_release(v11);
        v8 = v47;
        v39 = v49;
        if (v30)
          goto LABEL_5;
      }
LABEL_30:
      if (!v46)
      {
        __break(1u);
        return result;
      }
      v42 = *v7;
      v9 = v7[1];
      *v7 = v9;
      v7[1] = v42;
      --v7;
      v10 = v39 + 1;
      if (v8 == v10)
        goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_10016CFE0(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];

  v6 = *a1;
  swift_bridgeObjectRetain_n(a3, 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  *a1 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = sub_1001FB2A0(v6);
    *a1 = v6;
  }
  v8 = *(_QWORD *)(v6 + 16);
  v11[0] = v6 + 32;
  v11[1] = v8;
  swift_bridgeObjectRetain(a3);
  sub_10016BBB4(v11, a2, a3);
  v9 = swift_bridgeObjectRelease(a3);
  specialized ContiguousArray._endMutation()(v9);
  return swift_bridgeObjectRelease_n(a3, 2);
}

_QWORD *sub_10016D098()
{
  objc_class *v0;
  char *v1;
  char *v2;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t inited;
  objc_class *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t (**v12)();
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_super v20;
  _QWORD *v21;
  objc_super v22;
  char v23[72];

  v0 = (objc_class *)type metadata accessor for MTDebugActionTestCategory();
  v1 = (char *)objc_allocWithZone(v0);
  v2 = &v1[OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name];
  *(_QWORD *)v2 = 0x64616F6C6E776F44;
  *((_QWORD *)v2 + 1) = 0xE900000000000073;
  v3 = &v1[OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title];
  *(_QWORD *)v3 = 0x64616F6C6E776F44;
  *((_QWORD *)v3 + 1) = 0xE900000000000073;
  v22.receiver = v1;
  v22.super_class = v0;
  v4 = objc_msgSendSuper2(&v22, "init");
  v21 = _swiftEmptyArrayStorage;
  v5 = sub_10003F544(&qword_100553CD8);
  inited = swift_initStackObject(v5, v23);
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  v7 = (objc_class *)type metadata accessor for MTDebugActionTestCase();
  v8 = (char *)objc_allocWithZone(v7);
  v9 = &v8[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_category];
  *(_QWORD *)&v8[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_category + 24] = v0;
  *((_QWORD *)v9 + 4) = sub_100026844((unint64_t *)&qword_100553CE0, (uint64_t (*)(uint64_t))type metadata accessor for MTDebugActionTestCategory, (uint64_t)&protocol conformance descriptor for MTDebugActionTestCategory);
  *(_QWORD *)v9 = v4;
  v10 = &v8[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_name];
  *(_QWORD *)v10 = 0x6F44656C62616E45;
  *((_QWORD *)v10 + 1) = 0xEF7364616F6C6E77;
  v11 = &v8[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_title];
  *(_QWORD *)v11 = 0xD000000000000022;
  *((_QWORD *)v11 + 1) = 0x8000000100430020;
  v12 = (uint64_t (**)())&v8[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler];
  *v12 = sub_10016777C;
  v12[1] = 0;
  v20.receiver = v8;
  v20.super_class = v7;
  v13 = v4;
  v14 = objc_msgSendSuper2(&v20, "init");
  *(_QWORD *)(inited + 56) = v7;
  *(_QWORD *)(inited + 64) = sub_100026844(&qword_100553CE8, (uint64_t (*)(uint64_t))type metadata accessor for MTDebugActionTestCase, (uint64_t)&protocol conformance descriptor for MTDebugActionTestCase);
  *(_QWORD *)(inited + 32) = v14;
  v15 = inited + 32;
  swift_bridgeObjectRetain(inited);
  sub_100173034(v16);

  swift_setDeallocating(inited);
  v17 = *(_QWORD *)(inited + 16);
  v18 = sub_10003F544(&qword_100553CF0);
  swift_arrayDestroy(v15, v17, v18);
  return v21;
}

uint64_t sub_10016D2F8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10016D31C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  return Promise.resolve(_:)(v3);
}

uint64_t sub_10016D344()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10016D370()
{
  uint64_t *v0;

  return sub_100164D78(v0[2], v0[3], v0[4]);
}

unint64_t sub_10016D37C()
{
  unint64_t result;

  result = qword_100553D50;
  if (!qword_100553D50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100553D50);
  }
  return result;
}

uint64_t sub_10016D3C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for ModernShelf(0);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 2, v4);
}

uint64_t sub_10016D424(uint64_t a1)
{
  return sub_10016921C(a1, type metadata accessor for LibraryDataProvider._Station, (uint64_t (*)(uint64_t, uint64_t))sub_100163598);
}

uint64_t sub_10016D43C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (int *)type metadata accessor for LibraryDataProvider._Station(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));

  v8 = v7 + v1[7];
  v9 = type metadata accessor for StationSortOrder(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);

  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[9]));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10016D4E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016D524(a1, 0x18u, sub_1001788DC, a2);
}

uint64_t sub_10016D4FC(uint64_t a1)
{
  return sub_10016921C(a1, type metadata accessor for LibraryDataProvider._Station, (uint64_t (*)(uint64_t, uint64_t))sub_100163638);
}

uint64_t sub_10016D514@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016D524(a1, 3u, sub_1001788C8, a2);
}

uint64_t sub_10016D524@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryDataProvider._Station(0) - 8) + 80);
  return sub_1001637B0(a1, (_QWORD *)(v4 + ((v9 + 16) & ~v9)), a2, a3, a4);
}

uint64_t sub_10016D58C()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings);
}

uint64_t sub_10016D598(uint64_t a1)
{
  return sub_10016DAEC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001610C8);
}

uint64_t sub_10016D5A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for EpisodeListSettings(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10016D63C@<X0>(_BYTE *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for EpisodeListSettings(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100162490(a1, v2 + v6, *(_QWORD *)(v2 + v7), *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_10016D6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for EpisodeListSettings(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 25) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10016D70C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EpisodeListSettings(0) - 8) + 80);
  return sub_100161ED4(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), v2 + ((v5 + 25) & ~v5), a2);
}

uint64_t sub_10016D760()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings);
}

uint64_t sub_10016D76C(uint64_t a1)
{
  return sub_10016921C(a1, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings, (uint64_t (*)(uint64_t, uint64_t))sub_10015F668);
}

uint64_t sub_10016D780()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings);
}

uint64_t sub_10016D78C(uint64_t a1)
{
  return sub_10016DAEC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10015F848);
}

unint64_t sub_10016D798()
{
  unint64_t result;

  result = qword_100553ED8;
  if (!qword_100553ED8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_100553ED8);
  }
  return result;
}

uint64_t sub_10016D7DC()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings);
}

uint64_t sub_10016D7E8(uint64_t a1)
{
  return sub_10016921C(a1, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings, (uint64_t (*)(uint64_t, uint64_t))sub_1001604E0);
}

uint64_t sub_10016D800(uint64_t a1)
{
  return sub_10016DCB8(a1, (uint64_t (*)(uint64_t, unint64_t, unint64_t))sub_1001607C4);
}

unint64_t sub_10016D80C()
{
  unint64_t result;

  result = qword_100553F00;
  if (!qword_100553F00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100553F00);
  }
  return result;
}

uint64_t sub_10016D850()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10016D874(NSPredicate *a1@<X8>)
{
  Swift::String *v1;
  objc_class *v3;

  MTPlaylist.unsafePredicateForStationEpisodesFromPodcast(podcastUuid:)(a1, v1[1]);
  a1->super.isa = v3;
}

uint64_t sub_10016D8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for EpisodeListSettings(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10016D93C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for EpisodeListSettings(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10016408C(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10016D9B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016D9DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_10016DA10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for EpisodeListSettings(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10016DA84@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EpisodeListSettings(0) - 8) + 80);
  return sub_1001644A8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v5 + 32) & ~v5), a2);
}

uint64_t sub_10016DAD4()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings);
}

uint64_t sub_10016DAE0(uint64_t a1)
{
  return sub_10016DAEC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001646BC);
}

uint64_t sub_10016DAEC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EpisodeListSettings(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_10016DB48()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings);
}

uint64_t sub_10016DB54(uint64_t a1)
{
  return sub_10016921C(a1, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings, (uint64_t (*)(uint64_t, uint64_t))sub_10015CC88);
}

uint64_t sub_10016DB68()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings);
}

uint64_t sub_10016DB74(uint64_t a1)
{
  return sub_10016DAEC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10015CE6C);
}

uint64_t sub_10016DB80()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings);
}

uint64_t sub_10016DB8C(uint64_t a1)
{
  return sub_10016921C(a1, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodeListSettings, (uint64_t (*)(uint64_t, uint64_t))sub_10015DB88);
}

uint64_t sub_10016DBA0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10003CA40(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016DBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Calendar(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for EpisodeListSettings(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10016DCAC(uint64_t a1)
{
  return sub_10016DCB8(a1, (uint64_t (*)(uint64_t, unint64_t, unint64_t))sub_10015DE1C);
}

uint64_t sub_10016DCB8(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, unint64_t))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(type metadata accessor for Calendar(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EpisodeListSettings(0) - 8) + 80);
  return a2(a1, v2 + v5, v2 + ((v5 + v6 + v7) & ~v7));
}

uint64_t sub_10016DD40(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;

  return sub_10015E904(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_10016DD48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10016DD74(void *a1)
{
  uint64_t v1;

  return sub_10015C4F8(a1, *(void (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

unint64_t sub_10016DD80()
{
  unint64_t result;

  result = qword_100558900;
  if (!qword_100558900)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100558900);
  }
  return result;
}

uint64_t sub_10016DDC4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10016DDF8()
{
  uint64_t v0;

  return sub_10015C318(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10016DE04(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return Promise.resolve(_:)(&v2);
}

uint64_t sub_10016DE28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10003F544(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10016DE6C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10016DE90(uint64_t a1)
{
  uint64_t v1;

  return sub_10032BEEC(a1, v1);
}

uint64_t sub_10016DE98()
{
  return sub_10016DEA4((uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

uint64_t sub_10016DEA4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

void sub_10016DF08()
{
  type metadata accessor for URL(0);
  sub_10032BF80();
}

uint64_t sub_10016DF34()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t ChannelLockupGenerator.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_10016DFE8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(__n128);
  __n128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _BYTE v23[24];
  _QWORD v24[5];
  _BYTE v25[16];
  uint64_t v26;
  _BYTE v27[40];
  _BYTE v28[8];
  uint64_t v29;
  unint64_t v30;

  v1 = v0;
  v2 = sub_10003F544(qword_1005542D8);
  __chkstk_darwin(v2);
  v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for PresentationSource(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10016E228(v24);
  result = sub_10016E82C((uint64_t)v24, (uint64_t)v25);
  if (v26 == 3)
    return result;
  sub_10016E874((uint64_t)v25, (uint64_t)v27);
  sub_10016E874((uint64_t)v27, (uint64_t)v28);
  v10 = v30;
  if (v30 < 3 || v28[0] != 1)
    return sub_10016E8B0((uint64_t)v24);
  v11 = v29;
  v12 = v0[7];
  v13 = v0[8];
  sub_10003A834(v0 + 4, v12);
  v14 = dispatch thunk of LibraryActionControllerProtocol.unsubscribe(podcast:)(v11, v10, v12, v13);
  swift_release(v14);
  swift_beginAccess(v0 + 3, v23, 0, 0);
  v15 = v0[3];
  if (!v15)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_12;
  }
  v16 = *(void (**)(__n128))(*(_QWORD *)v15 + 120);
  v17 = swift_retain(v1[3]);
  v16(v17);
  swift_release(v15);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_12:
    sub_10016E8B0((uint64_t)v24);
    return sub_10016E9C8((uint64_t)v4);
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v4, v5);
  v18 = v1 + 10;
  v20 = v1[13];
  v19 = v1[14];
  sub_10003A834(v18, v20);
  v21 = dispatch thunk of LibraryRemovalControllerProtocol.removalOptionsAfterUnfollow(uuid:)(v11, v10, v20, v19);
  if (v21)
  {
    v22 = (void *)v21;
    PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v21, 1, 15, 1, 0, 0);

  }
  sub_10016E8B0((uint64_t)v24);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10016E228@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = type metadata accessor for ShowOffer(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for PodcastContextActionDataType(0);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t *)&v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = __chkstk_darwin(v8);
  v13 = &v32[-v12 - 8];
  result = __chkstk_darwin(v11);
  v16 = &v32[-v15 - 8];
  v17 = *(_QWORD *)(v1 + 16);
  if (v17)
  {
    v18 = v17 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
    swift_beginAccess(v17 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v32, 0, 0);
    sub_10016E904(v18, (uint64_t)v13);
    sub_10016E948((uint64_t)v13, (uint64_t)v16);
    sub_10016E904((uint64_t)v16, (uint64_t)v10);
    if (swift_getEnumCaseMultiPayload(v10, v7) == 1)
    {
      v19 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v4 + 32))(v6, v10, v3);
      v20 = ShowOffer.adamId.getter(v19);
      v38 = 0;
      v39 = 0;
      v41 = 0;
      v42 = 0;
      v40 = 2;
      v21 = dispatch thunk of PodcastStateController.stateMachine(for:initialState:)(v20, &v38);
      dispatch thunk of PodcastStateMachine.currentState.getter(&v33, v21);
      v22 = v33;
      v23 = v34;
      v24 = v35;
      v25 = v36;
      v31 = v3;
      v26 = v37;
      swift_release(v21);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v31);
    }
    else
    {
      v27 = *v10;
      v28 = v10[1];
      v38 = 0;
      v39 = 0;
      v41 = 0;
      v42 = 0;
      v40 = 2;
      v29 = dispatch thunk of PodcastStateController.stateMachine(for:initialState:)(v27, v28, &v38);
      v30 = swift_bridgeObjectRelease(v28);
      dispatch thunk of PodcastStateMachine.currentState.getter(&v33, v30);
      v22 = v33;
      v23 = v34;
      v24 = v35;
      v25 = v36;
      v26 = v37;
      swift_release(v29);
    }
    result = sub_10016E98C((uint64_t)v16);
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 3;
  }
  *a1 = v22;
  a1[1] = v23;
  a1[2] = v24;
  a1[3] = v25;
  a1[4] = v26;
  return result;
}

uint64_t sub_10016E464()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10003D380(v0 + 4);
  swift_release(v0[9]);
  sub_10003D380(v0 + 10);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts31UnsubscribePodcastContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10016E4DC()
{
  return type metadata accessor for UnsubscribePodcastContextAction(0);
}

uint64_t type metadata accessor for UnsubscribePodcastContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_1005541B8;
  if (!qword_1005541B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UnsubscribePodcastContextAction);
  return result;
}

uint64_t sub_10016E520(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = &unk_1003CABE8;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_1003CABE8;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t PlayPreviousChapterIntentImplementation.playbackController.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10016E5BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release(v2);
}

uint64_t sub_10016E5CC()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x574F4C4C4F464E55;
  v1._object = (void *)0xED0000574F48535FLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_10016E670()
{
  return 0x69632E73756E696DLL;
}

uint64_t sub_10016E690@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts31UnsubscribePodcastContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10016E6D4()
{
  return 19;
}

uint64_t sub_10016E6DC()
{
  uint64_t v0;
  char v1;
  _QWORD v3[5];
  _BYTE v4[16];
  uint64_t v5;
  _BYTE v6[40];
  _BYTE v7[16];
  unint64_t v8;

  if (*(_QWORD *)(v0 + 16))
  {
    sub_10016E228(v3);
    sub_10016E82C((uint64_t)v3, (uint64_t)v4);
    if (v5 != 3)
    {
      sub_10016E874((uint64_t)v4, (uint64_t)v6);
      sub_10016E874((uint64_t)v6, (uint64_t)v7);
      if (v8 >= 3)
      {
        v1 = v7[0];
        sub_10016E8B0((uint64_t)v3);
        if ((v1 & 1) != 0)
          return 1;
      }
      else
      {
        sub_10016E8B0((uint64_t)v3);
      }
    }
  }
  return 0;
}

uint64_t sub_10016E774()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10016E7A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 24, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  return swift_release(v3);
}

void *sub_10016E7EC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_10016E82C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_1005542D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016E874(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for PodcastState - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_10016E8B0(uint64_t a1)
{
  sub_10016E8E0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_10016E8E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 != 3)
    return sub_10016E8F0(a1, a2, a3);
  return a1;
}

uint64_t sub_10016E8F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >= 3)
    return swift_bridgeObjectRelease(a3);
  return result;
}

uint64_t sub_10016E904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PodcastContextActionDataType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016E948(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PodcastContextActionDataType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016E98C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PodcastContextActionDataType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10016E9C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(qword_1005542D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10016EA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_10016EA10(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = " ";
  v4[1] = " ";
  result = type metadata accessor for Binding(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 48);
    return 0;
  }
  return result;
}

uint64_t sub_10016EA94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5;
  v7 = v5 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v4 + 64) + 7;
  v9 = v5 & 0x100000;
  if (v6 > 7 || v9 != 0 || ((v8 + (v7 & (v6 + 64))) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v31 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v31 + (v7 & (v6 + 16));
  }
  else
  {
    v34 = *(_QWORD *)(a3 + 16);
    v12 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v13 = a2[3];
    *(_QWORD *)(a1 + 24) = v13;
    v14 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(_BYTE *)(v15 + 16);
    v35 = v8;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    sub_10016EC3C(v16, v17, v18);
    *(_QWORD *)v14 = v16;
    *(_QWORD *)(v14 + 8) = v17;
    *(_BYTE *)(v14 + 16) = v18;
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v14 + 24) = v19;
    v20 = (_QWORD *)(v7 & (v14 + 39));
    v21 = (uint64_t *)(v7 & (v15 + 39));
    v22 = *v21;
    *v20 = *v21;
    v23 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = (uint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    v25 = *v24;
    *v23 = *v24;
    v26 = ((unint64_t)v23 + v6 + 8) & ~v6;
    v27 = ((unint64_t)v24 + v6 + 8) & ~v6;
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v4 + 16);
    swift_bridgeObjectRetain(v19);
    swift_retain(v22);
    v29 = swift_retain(v25);
    v28(v26, v27, v34, v29);
    v30 = (_QWORD *)(((unint64_t)v21 + v35) & 0xFFFFFFFFFFFFFFF8);
    v31 = v30[1];
    v32 = (_QWORD *)(((unint64_t)v20 + v35) & 0xFFFFFFFFFFFFFFF8);
    *v32 = *v30;
    v32[1] = v31;
  }
  swift_retain(v31);
  return a1;
}

uint64_t sub_10016EC3C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10016EC4C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  sub_10016ED14(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 24));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (_QWORD *)((v4 + (v7 | 7) + 32) & ~(v7 | 7));
  swift_release(*v8);
  v9 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v9);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v9 + v7 + 8) & ~v7, v5);
  return swift_release(*(_QWORD *)((((unint64_t)v8 + ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFF8)
                                 + 8));
}

uint64_t sub_10016ED14(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10016ED24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v8 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_BYTE *)(v8 + 16);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  sub_10016EC3C(v9, v10, v11);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_BYTE *)(v7 + 16) = v11;
  v12 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 24) = v12;
  v33 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v33 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v16 = (_QWORD *)((v14 + 32 + v7) & v15);
  v17 = (uint64_t *)((v14 + 32 + v8) & v15);
  v18 = *v17;
  *v16 = *v17;
  v19 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  *v19 = *v20;
  v22 = ((unint64_t)v19 + v14 + 8) & ~v14;
  v23 = ((unint64_t)v20 + v14 + 8) & ~v14;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v13 + 16);
  swift_bridgeObjectRetain(v12);
  swift_retain(v18);
  v25 = swift_retain(v21);
  v24(v22, v23, v33, v25);
  v26 = *(_QWORD *)(v13 + 64) + ((v14 + 16) & ~v14) + 7;
  v27 = (unint64_t)v16 + v26;
  v28 = (uint64_t *)(((unint64_t)v17 + v26) & 0xFFFFFFFFFFFFFFF8);
  v30 = *v28;
  v29 = v28[1];
  v31 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
  *v31 = v30;
  v31[1] = v29;
  swift_retain(v29);
  return a1;
}

uint64_t sub_10016EE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v11 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(_BYTE *)(v11 + 16);
  sub_10016EC3C(*(_QWORD *)v11, v13, v14);
  v15 = *(_QWORD *)v10;
  v16 = *(_QWORD *)(v10 + 8);
  v17 = *(_BYTE *)(v10 + 16);
  *(_QWORD *)v10 = v12;
  *(_QWORD *)(v10 + 8) = v13;
  *(_BYTE *)(v10 + 16) = v14;
  sub_10016ED14(v15, v16, v17);
  v18 = *(_QWORD *)(v11 + 24);
  v19 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v10 + 24) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_DWORD *)(v21 + 80);
  v23 = *(_DWORD *)(v21 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v24 = (uint64_t *)((v22 + 32 + v10) & v23);
  v25 = (uint64_t *)((v22 + 32 + v11) & v23);
  v26 = *v24;
  v27 = *v25;
  *v24 = *v25;
  swift_retain(v27);
  swift_release(v26);
  v28 = (uint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v29 = (uint64_t *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  v30 = *v29;
  v31 = *v28;
  *v28 = *v29;
  swift_retain(v30);
  swift_release(v31);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 24))(((unint64_t)v28 + v22 + 8) & ~v22, ((unint64_t)v29 + v22 + 8) & ~v22, v20);
  v32 = *(_QWORD *)(v21 + 64) + ((v22 + 16) & ~v22) + 7;
  v33 = (_QWORD *)(((unint64_t)v24 + v32) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_QWORD *)(((unint64_t)v25 + v32) & 0xFFFFFFFFFFFFFFF8);
  v35 = v34[1];
  v36 = v33[1];
  *v33 = *v34;
  v33[1] = v35;
  swift_retain(v35);
  swift_release(v36);
  return a1;
}

_OWORD *sub_10016F02C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_OWORD *)(((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)(((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8);
  v7 = v6[1];
  *v5 = *v6;
  v5[1] = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v11 = (_QWORD *)(((unint64_t)v5 + v9 + 32) & v10);
  v12 = (_QWORD *)(((unint64_t)v6 + v9 + 32) & v10);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v13 + v9 + 8) & ~v9, ((unint64_t)v14 + v9 + 8) & ~v9);
  v15 = *(_QWORD *)(v8 + 64) + ((v9 + 16) & ~v9) + 7;
  *(_OWORD *)(((unint64_t)v11 + v15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v12 + v15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10016F110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  v9 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v10 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  v12 = *(_QWORD *)v9;
  v13 = *(_QWORD *)(v9 + 8);
  v14 = *(_BYTE *)(v9 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  sub_10016ED14(v12, v13, v14);
  v15 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = *(_DWORD *)(v17 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v20 = (uint64_t *)((v18 + 32 + v9) & v19);
  v21 = (uint64_t *)((v18 + 32 + v10) & v19);
  v22 = *v20;
  *v20 = *v21;
  swift_release(v22);
  v23 = (uint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (uint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = *v23;
  *v23 = *v24;
  swift_release(v25);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 40))(((unint64_t)v23 + v18 + 8) & ~v18, ((unint64_t)v24 + v18 + 8) & ~v18, v16);
  v26 = *(_QWORD *)(v17 + 64) + ((v18 + 16) & ~v18) + 7;
  v27 = ((unint64_t)v20 + v26) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v27 + 8);
  *(_OWORD *)v27 = *(_OWORD *)(((unint64_t)v21 + v26) & 0xFFFFFFFFFFFFF8);
  swift_release(v28);
  return a1;
}

uint64_t sub_10016F264(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (v5 >= 0)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = v8 | 7;
  if (v7 >= a2)
  {
    if (v7 == 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)(a1 + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v8
                                                                    + ((((((a1 + 39) & 0xFFFFFFFFFFFFFFF8) + v9 + 32) & ~v9)
                                                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + 8) & ~v8);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v8 + 16) & ~v8) + ((v8 + 64) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10016F308 + 4 * byte_1003CAC30[v12]))();
  }
}

void sub_10016F3B0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v7 >= 0)
    v8 = 0x7FFFFFFF;
  v9 = *(unsigned __int8 *)(v6 + 80);
  if (v8 >= a3)
  {
    v13 = 0;
    if (a2 <= v8)
      goto LABEL_19;
  }
  else
  {
    v10 = a3 - v8;
    if (((*(_DWORD *)(v6 + 64) + (((_DWORD)v9 + 64) & ~(v9 | 7)) + (((_DWORD)v9 + 16) & ~(_DWORD)v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (a2 <= v8)
LABEL_19:
      __asm { BR              X16 }
  }
  if (((*(_DWORD *)(v6 + 64) + (((_DWORD)v9 + 64) & ~(v9 | 7)) + (((_DWORD)v9 + 16) & ~(_DWORD)v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v14 = ~v8 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + ((v9 + 64) & ~(v9 | 7)) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v14;
  }
  __asm { BR              X10 }
}

void sub_10016F4D4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x10016F568);
}

void sub_10016F4DC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x10016F4E4);
  JUMPOUT(0x10016F568);
}

void sub_10016F540()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x10016F568);
}

void sub_10016F548()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x10016F568);
}

uint64_t sub_10016F550@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  if (v5 == 0x7FFFFFFF)
  {
    if (a1 < 0)
      JUMPOUT(0x10016F55CLL);
    *(_QWORD *)(v8 + 8) = (a1 - 1);
LABEL_6:
    JUMPOUT(0x10016F568);
  }
  return (*(uint64_t (**)(unint64_t))(v3 + 56))((v4
                                                                + ((((((v8 + 39) & 0xFFFFFFFFFFFFFFF8) + v6 + 32) & v7)
                                                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                + 8) & a2);
}

uint64_t type metadata accessor for CustomLinkPicker(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for CustomLinkPicker);
}

uint64_t sub_10016F58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100171DB0(a1, a2, a3, (uint64_t)&unk_100467FD0);
}

uint64_t sub_10016F598(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for Binding(0, *(_QWORD *)(a1 + 16));
  return Binding.projectedValue.getter(v1);
}

uint64_t sub_10016F5D0@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32[16];
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  char v38[16];
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;

  v31 = a2;
  v3 = sub_10003CA40(&qword_100554360);
  v4 = a1[2];
  v29 = a1[3];
  v5 = a1[4];
  v28 = (void *)a1[5];
  v44 = v4;
  v45 = v29;
  v46 = v5;
  v47 = v28;
  v6 = type metadata accessor for CustomLinkPicker.DismissingPicker(255, (uint64_t)&v44);
  v7 = type metadata accessor for InlinePickerStyle(255);
  WitnessTable = swift_getWitnessTable(&unk_1003CAD68, v6);
  v44 = v6;
  v45 = v7;
  v46 = WitnessTable;
  v47 = &protocol witness table for InlinePickerStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v44, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 0);
  v44 = v6;
  v45 = v7;
  v46 = WitnessTable;
  v47 = &protocol witness table for InlinePickerStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
  v11 = type metadata accessor for Form(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for Form<A>, v11);
  v44 = v11;
  v45 = v12;
  v13 = swift_getOpaqueTypeMetadata2(255, &v44, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
  v44 = v11;
  v45 = v12;
  v14 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v44 = v13;
  v45 = v14;
  v15 = swift_getOpaqueTypeMetadata2(255, &v44, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v16 = sub_100170848();
  v44 = v13;
  v45 = v14;
  v17 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v44 = v3;
  v45 = v15;
  v46 = v16;
  v47 = (void *)v17;
  v18 = type metadata accessor for NavigationLink(0, &v44);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v28 - v23;
  v39 = v4;
  v40 = v29;
  v41 = v5;
  v42 = v28;
  v43 = v30;
  v33 = v4;
  v34 = v29;
  v35 = v5;
  v36 = v28;
  v37 = v30;
  sub_1001701E0((uint64_t)sub_100170894, (uint64_t)v38, (uint64_t)sub_1001708A0, (uint64_t)v32, v3, v15, v16, v17);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationLink<A, B>, v18);
  v25 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v25(v24, v22, v18);
  v26 = *(void (**)(char *, uint64_t))(v19 + 8);
  v26(v22, v18);
  v25(v31, v24, v18);
  return ((uint64_t (*)(char *, uint64_t))v26)(v24, v18);
}

uint64_t sub_10016F874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;

  v45 = a4;
  v46 = a5;
  v43 = a2;
  v44 = a3;
  v50 = a6;
  v11 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v48 = *(_QWORD *)(v11 - 8);
  v49 = v11;
  __chkstk_darwin(v11);
  v47 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = a2;
  v58 = a3;
  v59 = a4;
  v60 = a5;
  v13 = type metadata accessor for CustomLinkPicker.DismissingPicker(255, (uint64_t)&v57);
  v14 = type metadata accessor for InlinePickerStyle(255);
  WitnessTable = swift_getWitnessTable(&unk_1003CAD68, v13);
  v57 = v13;
  v58 = v14;
  v59 = WitnessTable;
  v60 = &protocol witness table for InlinePickerStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v57, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 0);
  v40 = OpaqueTypeMetadata2;
  v57 = v13;
  v58 = v14;
  v59 = WitnessTable;
  v60 = &protocol witness table for InlinePickerStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v57, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
  v17 = type metadata accessor for Form(0, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v42 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v37 - v18;
  v20 = swift_getWitnessTable(&protocol conformance descriptor for Form<A>, v17);
  v57 = v17;
  v58 = v20;
  v21 = swift_getOpaqueTypeMetadata2(0, &v57, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
  v41 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v23 = (char *)&v37 - v22;
  v57 = v17;
  v58 = v20;
  v38 = swift_getOpaqueTypeConformance2(&v57, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v57 = v21;
  v58 = v38;
  v24 = swift_getOpaqueTypeMetadata2(0, &v57, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v37 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v37 - v29;
  v52 = v43;
  v53 = v44;
  v54 = v45;
  v55 = v46;
  v56 = a1;
  Form.init(content:)(sub_1001708B0, v51, v40, OpaqueTypeConformance2);
  View.navigationTitle(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 24), v17, v20);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v17);
  v32 = v47;
  v31 = v48;
  v33 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v49);
  View.navigationBarTitleDisplayMode(_:)(v32, v21, v38);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v21);
  v34 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v34(v30, v28, v24);
  v35 = *(void (**)(char *, uint64_t))(v25 + 8);
  v35(v28, v24);
  v34(v50, v30, v24);
  return ((uint64_t (*)(char *, uint64_t))v35)(v30, v24);
}

uint64_t sub_10016FBDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t WitnessTable;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;

  v53 = a1;
  v57 = a6;
  v10 = type metadata accessor for InlinePickerStyle(0);
  v56 = *(_QWORD *)(v10 - 8);
  v11 = v10;
  v51 = v10;
  __chkstk_darwin(v10);
  v55 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_100554370);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for Binding(0, a2);
  __chkstk_darwin(v16);
  v48 = a5;
  v49 = (char *)&v44 - v17;
  v58 = a2;
  v59 = a3;
  v45 = a2;
  v46 = a3;
  v60 = a4;
  v61 = (void *)a5;
  v47 = a4;
  v18 = (void *)a5;
  v19 = type metadata accessor for CustomLinkPicker.DismissingPicker(0, (uint64_t)&v58);
  v54 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v44 - v20;
  WitnessTable = swift_getWitnessTable(&unk_1003CAD68, v19);
  v58 = v19;
  v59 = v11;
  v60 = WitnessTable;
  v61 = &protocol witness table for InlinePickerStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v58, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 0);
  v52 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v23 = __chkstk_darwin(OpaqueTypeMetadata2);
  v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v44 - v26;
  v58 = a2;
  v59 = a3;
  v60 = a4;
  v61 = v18;
  v28 = type metadata accessor for CustomLinkPicker(0, (uint64_t)&v58);
  v29 = v53;
  v30 = type metadata accessor for Binding(0, *(_QWORD *)(v28 + 16));
  v31 = (uint64_t)v49;
  Binding.projectedValue.getter(v30);
  v32 = (uint64_t *)(v29 + *(int *)(v28 + 60));
  v33 = *v32;
  v34 = v32[1];
  *v15 = swift_getKeyPath(&unk_1003CAD10, v35);
  v36 = sub_10003F544(qword_100554378);
  swift_storeEnumTagMultiPayload(v15, v36, 0);
  sub_10016FEFC(v31, v33, v34, (uint64_t)v15, v45, v46, v47, v48, (uint64_t)v21);
  v37 = swift_retain(v34);
  v38 = v55;
  InlinePickerStyle.init()(v37);
  v39 = v51;
  View.pickerStyle<A>(_:)(v38, v19, v51, WitnessTable, &protocol witness table for InlinePickerStyle);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v21, v19);
  v40 = v52;
  v41 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v41(v27, v25, OpaqueTypeMetadata2);
  v42 = *(void (**)(char *, uint64_t))(v40 + 8);
  v42(v25, OpaqueTypeMetadata2);
  v41(v57, v27, OpaqueTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v42)(v27, OpaqueTypeMetadata2);
}

uint64_t sub_10016FEFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v18 = type metadata accessor for Binding(0, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a9, a1, v18);
  v22[0] = a5;
  v22[1] = a6;
  v22[2] = a7;
  v22[3] = a8;
  v19 = type metadata accessor for CustomLinkPicker.DismissingPicker(0, (uint64_t)v22);
  v20 = (_QWORD *)(a9 + *(int *)(v19 + 52));
  *v20 = a2;
  v20[1] = a3;
  return sub_1001708D0(a4, a9 + *(int *)(v19 + 56));
}

__n128 sub_10016FFB4@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __n128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;

  v4 = static VerticalAlignment.center.getter();
  sub_10017006C(a1, (uint64_t)&v13);
  v5 = v14;
  v6 = v15;
  v7 = v16;
  v8 = v17;
  v9 = v19;
  v10 = v20;
  result = v13;
  v12 = v18;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v7;
  *(_BYTE *)(a2 + 64) = v8;
  *(_OWORD *)(a2 + 72) = v12;
  *(_BYTE *)(a2 + 88) = v9;
  *(_QWORD *)(a2 + 96) = v10;
  return result;
}

uint64_t sub_10017006C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v23;

  v4 = *a1;
  v5 = a1[3];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v5);
  v6 = Text.init(_:tableName:bundle:comment:)(v4);
  v8 = v7;
  v10 = v9;
  LOBYTE(v5) = v11 & 1;
  v12 = a1[4];
  v13 = a1[5];
  v14 = *((unsigned __int8 *)a1 + 48);
  v15 = a1[7];
  v23 = static HierarchicalShapeStyle.secondary.getter(v6, v7);
  v16 = Text.foregroundStyle<A>(_:)(&v23, v12, v13, v14, v15, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v18 = v17;
  v20 = v19;
  LOBYTE(v14) = v21 & 1;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v17;
  *(_BYTE *)(a2 + 64) = v21 & 1;
  *(_QWORD *)(a2 + 72) = v19;
  sub_10016EC3C(v6, v8, v5);
  swift_bridgeObjectRetain(v10);
  sub_10016EC3C(v16, v18, v14);
  swift_bridgeObjectRetain(v20);
  sub_10016ED14(v16, v18, v14);
  swift_bridgeObjectRelease(v20);
  sub_10016ED14(v6, v8, v5);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_1001701E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v14)(void);
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v14 = (void (*)(void))__chkstk_darwin(a1);
  v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14();
  return NavigationLink.init(destination:label:)(v16, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100170294@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t WitnessTable;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[7];

  v53 = a2;
  v44 = *(_QWORD *)(a1 - 8);
  v51 = *(_QWORD *)(v44 + 64);
  v4 = __chkstk_darwin(a1);
  v46 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 + 16);
  v52 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v4);
  v45 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Binding(0, v6);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v56[0] = &type metadata for EmptyView;
  v56[1] = v6;
  v56[2] = v11;
  v56[3] = &protocol witness table for EmptyView;
  v56[4] = v12;
  v56[5] = v13;
  v39 = v13;
  v14 = type metadata accessor for Picker(0, v56);
  v15 = *(_QWORD *)(v14 - 8);
  v42 = v14;
  v50 = v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v39 - v16;
  v40 = (char *)&v39 - v16;
  v43 = *(_QWORD *)(v12 + 8);
  v48 = type metadata accessor for _ValueActionModifier(255, v6, v43);
  v18 = type metadata accessor for ModifiedContent(0, v14, v48);
  v49 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v41 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v47 = (char *)&v39 - v21;
  Binding.projectedValue.getter(v8);
  sub_100170634((uint64_t)v10, *(_QWORD *)(v2 + *(int *)(a1 + 52)), *(_QWORD *)(v2 + *(int *)(a1 + 52) + 8), (uint64_t)UInt64.int64Representation.getter, (uint64_t)&type metadata for EmptyView, v6, v11, (uint64_t)v17, (uint64_t)&protocol witness table for EmptyView, v12, v13);
  v22 = v45;
  Binding.wrappedValue.getter(v8);
  v23 = v44;
  v24 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v46, v2, a1);
  v25 = *(unsigned __int8 *)(v23 + 80);
  v26 = (v25 + 48) & ~v25;
  v27 = (char *)swift_allocObject(&unk_1004B0730, v26 + v51, v25 | 7);
  *((_QWORD *)v27 + 2) = v6;
  *((_QWORD *)v27 + 3) = v11;
  v28 = v39;
  *((_QWORD *)v27 + 4) = v12;
  *((_QWORD *)v27 + 5) = v28;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v27[v26], v24, a1);
  v29 = v42;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Picker<A, B, C>, v42);
  v31 = v41;
  v32 = v40;
  View.onChange<A>(of:perform:)(v22, sub_100171EF8, v27, v29, v6, WitnessTable, v43);
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v6);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v29);
  v33 = swift_getWitnessTable(&protocol conformance descriptor for _ValueActionModifier<A>, v48);
  v54 = WitnessTable;
  v55 = v33;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v34 = v49;
  v35 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  v36 = v47;
  v35(v47, v31, v18);
  v37 = *(void (**)(char *, uint64_t))(v34 + 8);
  v37(v31, v18);
  v35(v53, v36, v18);
  return ((uint64_t (*)(char *, uint64_t))v37)(v36, v18);
}

uint64_t sub_100170634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a3;
  v27 = a7;
  v23[0] = a4;
  v23[1] = a8;
  v24 = a2;
  v25 = a9;
  __chkstk_darwin(a1);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Binding(0, v16);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)v23 - v19;
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)v23 - v19, a1, v17);
  ((void (*)(uint64_t))v23[0])(v21);
  Picker.init(selection:label:content:)(v20, v15, v24, v26, a5, a6, v27, v25, a10, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
}

uint64_t sub_100170754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v15[4];

  v10 = type metadata accessor for DismissAction(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  type metadata accessor for CustomLinkPicker.DismissingPicker(0, (uint64_t)v15);
  sub_100170918((uint64_t)v13);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10017081C()
{
  return static View._viewListCount(inputs:)();
}

uint64_t type metadata accessor for CustomLinkPicker.DismissingPicker(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for CustomLinkPicker.DismissingPicker);
}

unint64_t sub_100170848()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100554368;
  if (!qword_100554368)
  {
    v1 = sub_10003CA40(&qword_100554360);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100554368);
  }
  return result;
}

uint64_t sub_100170894()
{
  return sub_1001708BC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10016F874);
}

double sub_1001708A0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_10016FFB4((uint64_t *)*(_QWORD *)(v1 + 48), a1).n128_u64[0];
  return result;
}

uint64_t sub_1001708B0()
{
  return sub_1001708BC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10016FBDC);
}

uint64_t sub_1001708BC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1001708D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100554370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100170918@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(qword_100554378);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100171F70(v2, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = type metadata accessor for DismissAction(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    v13 = *v10;
    v14 = static os_log_type_t.fault.getter();
    v15 = static Log.runtimeIssuesLog.getter();
    v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v20[1] = a1;
      v19 = v18;
      v22 = v18;
      *(_DWORD *)v17 = 136315138;
      v21 = sub_10003D274(0x417373696D736944, 0xED00006E6F697463, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v17 + 4, v17 + 12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, v13);
    swift_release(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_100170B54()
{
  return EnvironmentValues.dismiss.getter();
}

void sub_100170B74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for Binding(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for () + 64;
    sub_100171BBC(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v6, a1 + 48);
    }
  }
}

uint64_t *sub_100170C08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for DismissAction(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 & 0xF8 | 7;
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v14 = 8;
  else
    v14 = *(_QWORD *)(v11 + 64);
  v15 = (v12 | v7) & 0x100000;
  v16 = *a2;
  *a1 = *a2;
  if ((v13 | v7) != 7
    || v15 != 0
    || v14 + ((v13 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v13) + 1 > 0x18)
  {
    a1 = (uint64_t *)(v16 + (((v13 | v7) + 16) & ~(v13 | v7)));
LABEL_21:
    swift_retain(v16);
    return a1;
  }
  v35 = v10;
  v19 = ~(unint64_t)v7;
  v36 = v11;
  v20 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = *v21;
  *v20 = *v21;
  v23 = (char *)v21 + v8;
  v24 = ((unint64_t)v20 + v8 + 8) & ~v8;
  v25 = (unint64_t)(v23 + 8) & v19;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain(v16);
  swift_retain(v22);
  v26(v24, v25, v5);
  v27 = (_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = (_QWORD *)(((unint64_t)v27 + v13 + 16) & ~v13);
  v31 = (uint64_t *)(((unint64_t)v28 + v13 + 16) & ~v13);
  v32 = *((unsigned __int8 *)v31 + v14);
  swift_retain(v29);
  if (v32 >= 2)
  {
    if (v14 <= 3)
      v33 = v14;
    else
      v33 = 4;
    __asm { BR              X11 }
  }
  if (v32 != 1)
  {
    v16 = *v31;
    *v30 = *v31;
    *((_BYTE *)v30 + v14) = 0;
    goto LABEL_21;
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v36 + 16))(v30, v31, v35);
  *((_BYTE *)v30 + v14) = 1;
  return a1;
}

uint64_t sub_100170E54(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v4 = (unint64_t)a1 + 15;
  swift_release(*a1);
  v4 &= 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)v4);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))((v4 + v6 + 8) & ~v6);
  v7 = ((unint64_t)a1 + *(_QWORD *)(v5 + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v7 + 8));
  v8 = *(_QWORD *)(type metadata accessor for DismissAction(0) - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = (_QWORD *)((v7 + v9 + 16) & ~v9);
  v11 = *(_QWORD *)(v8 + 64);
  if (v11 <= 8)
    v11 = 8;
  v12 = *((unsigned __int8 *)v10 + v11);
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X14 }
  }
  if (v12 == 1)
    return (*(uint64_t (**)(void))(v8 + 8))();
  else
    return swift_release(*v10);
}

uint64_t *sub_100170FA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v5 = *a2;
  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  *v6 = *v7;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v6 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_retain(v5);
  swift_retain(v8);
  v14(v12, v13, v9);
  v15 = ((v11 + 16) & ~v11) + *(_QWORD *)(v10 + 64) + 7;
  v16 = (_QWORD *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  v18 = (_QWORD *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v16;
  v18[1] = v17;
  v19 = type metadata accessor for DismissAction(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80) & 0xF8;
  v22 = v21 + 23;
  v23 = (unint64_t)v18 + v21 + 23;
  v24 = ~v21 & 0xFFFFFFFFFFFFFFF8;
  v25 = (_QWORD *)(v23 & v24);
  v26 = (uint64_t *)(((unint64_t)v16 + v22) & v24);
  if (*(_QWORD *)(v20 + 64) <= 8uLL)
    v27 = 8;
  else
    v27 = *(_QWORD *)(v20 + 64);
  v28 = *((unsigned __int8 *)v26 + v27);
  swift_retain(v17);
  if (v28 >= 2)
  {
    if (v27 <= 3)
      v29 = v27;
    else
      v29 = 4;
    __asm { BR              X11 }
  }
  if (v28 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v20 + 16))(v25, v26, v19);
    v30 = 1;
  }
  else
  {
    v31 = *v26;
    *v25 = *v26;
    swift_retain(v31);
    v30 = 0;
  }
  *((_BYTE *)v25 + v27) = v30;
  return a1;
}

uint64_t *sub_100171164(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *a1;
  v8 = (unint64_t)a2 + 15;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v9 = (uint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v8;
  v11 = *v9;
  *v9 = *(_QWORD *)v8;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))(((unint64_t)v9 + v13 + 8) & ~v13, (v13 + 8 + v8) & ~v13);
  v14 = ((v13 + 16) & ~v13) + *(_QWORD *)(v12 + 64) + 7;
  v15 = (_QWORD *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  v18 = v15[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain(v17);
  swift_release(v18);
  v19 = type metadata accessor for DismissAction(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80) & 0xF8;
  v22 = v21 + 23;
  v23 = (unint64_t)v15 + v21 + 23;
  v24 = ~v21 & 0xFFFFFFFFFFFFFFF8;
  v25 = (_QWORD *)(v23 & v24);
  v26 = (unint64_t)v16 + v22;
  v27 = (uint64_t *)(v26 & v24);
  if ((v23 & v24) != (v26 & v24))
  {
    v28 = v19;
    if (*(_QWORD *)(v20 + 64) <= 8uLL)
      v29 = 8;
    else
      v29 = *(_QWORD *)(v20 + 64);
    v30 = *((unsigned __int8 *)v25 + v29);
    if (v30 >= 2)
    {
      if (v29 <= 3)
        v31 = v29;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v25, v19);
    else
      swift_release(*v25);
    v32 = *((unsigned __int8 *)v27 + v29);
    if (v32 >= 2)
    {
      if (v29 <= 3)
        v33 = v29;
      else
        v33 = 4;
      __asm { BR              X12 }
    }
    if (v32 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v20 + 16))(v25, v27, v28);
      *((_BYTE *)v25 + v29) = 1;
    }
    else
    {
      v34 = *v27;
      *v25 = *v27;
      *((_BYTE *)v25 + v29) = 0;
      swift_retain(v34);
    }
  }
  return a1;
}

_QWORD *sub_1001713C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v8 + 8) & ~v8, ((unint64_t)v6 + v8 + 8) & ~v8);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v10 = (_OWORD *)(((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)(((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = *(_QWORD *)(type metadata accessor for DismissAction(0) - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8;
  v14 = v13 + 23;
  v15 = (unint64_t)v10 + v13 + 23;
  v16 = ~v13 & 0xFFFFFFFFFFFFFFF8;
  v17 = (_QWORD *)(v15 & v16);
  v18 = (_QWORD *)(((unint64_t)v11 + v14) & v16);
  if (*(_QWORD *)(v12 + 64) <= 8uLL)
    v19 = 8;
  else
    v19 = *(_QWORD *)(v12 + 64);
  v20 = *((unsigned __int8 *)v18 + v19);
  if (v20 >= 2)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X13 }
  }
  if (v20 == 1)
  {
    (*(void (**)(_QWORD *))(v12 + 32))(v17);
    v22 = 1;
  }
  else
  {
    v22 = 0;
    *v17 = *v18;
  }
  *((_BYTE *)v17 + v19) = v22;
  return a1;
}

uint64_t *sub_100171548(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char v31;

  v6 = *a1;
  v7 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release(v6);
  v8 = (uint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *v8;
  *v8 = *(_QWORD *)v7;
  swift_release(v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))(((unint64_t)v8 + v11 + 8) & ~v11, (v11 + 8 + v7) & ~v11);
  v12 = ((v11 + 16) & ~v11) + *(_QWORD *)(v10 + 64) + 7;
  v13 = ((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8;
  v14 = (_OWORD *)(((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8);
  v15 = *(_QWORD *)(v13 + 8);
  *(_OWORD *)v13 = *v14;
  swift_release(v15);
  v16 = type metadata accessor for DismissAction(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80) & 0xF8;
  v19 = v18 + 23;
  v20 = v18 + 23 + v13;
  v21 = ~v18 & 0xFFFFFFFFFFFFFFF8;
  v22 = (_QWORD *)(v20 & v21);
  v23 = (unint64_t)v14 + v19;
  v24 = (_QWORD *)(v23 & v21);
  if ((v20 & v21) != (v23 & v21))
  {
    v25 = v16;
    if (*(_QWORD *)(v17 + 64) <= 8uLL)
      v26 = 8;
    else
      v26 = *(_QWORD *)(v17 + 64);
    v27 = *((unsigned __int8 *)v22 + v26);
    if (v27 >= 2)
    {
      if (v26 <= 3)
        v28 = v26;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    if (v27 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v22, v16);
    else
      swift_release(*v22);
    v29 = *((unsigned __int8 *)v24 + v26);
    if (v29 >= 2)
    {
      if (v26 <= 3)
        v30 = v26;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    if (v29 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v17 + 32))(v22, v24, v25);
      v31 = 1;
    }
    else
    {
      v31 = 0;
      *v22 = *v24;
    }
    *((_BYTE *)v22 + v26) = v31;
  }
  return a1;
}

uint64_t sub_100171790(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for DismissAction(0) - 8);
  v10 = 8;
  if (*(_QWORD *)(v9 + 64) > 8uLL)
    v10 = *(_QWORD *)(v9 + 64);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  if (a2 <= v8)
    goto LABEL_24;
  v12 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v13 = v10 + ((v12 + ((*(_QWORD *)(v6 + 64) + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v12) + 1;
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((a2 - v8 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_24:
      v19 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v19 + v11 + 8) & ~v11, v7, v5);
      v20 = *v19;
      if ((unint64_t)*v19 >= 0xFFFFFFFF)
        LODWORD(v20) = -1;
      return (v20 + 1);
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_24;
LABEL_17:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 > 3)
      LODWORD(v13) = 4;
    __asm { BR              X11 }
  }
  return v8 + v18 + 1;
}

void sub_100171960(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for DismissAction(0) - 8);
  v10 = 8;
  if (*(_QWORD *)(v9 + 64) > 8uLL)
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v12 = v10
      + ((v11
        + ((*(_QWORD *)(v7 + 64)
          + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 16) & ~v11)
      + 1;
  if (a3 <= v8)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v8 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_100000004;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &_mh_execute_header.magic + 1;
  }
  if (v8 < a2)
  {
    v14 = ~v8 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

void sub_100171BBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100554400)
  {
    v2 = type metadata accessor for DismissAction(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100554400);
  }
}

uint64_t sub_100171C10(__int128 *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;

  v2 = sub_10003CA40(&qword_100554360);
  v3 = a1[1];
  v18 = *a1;
  v19 = v3;
  v4 = type metadata accessor for CustomLinkPicker.DismissingPicker(255, (uint64_t)&v18);
  v5 = type metadata accessor for InlinePickerStyle(255);
  WitnessTable = swift_getWitnessTable(&unk_1003CAD68, v4);
  *(_QWORD *)&v18 = v4;
  *((_QWORD *)&v18 + 1) = v5;
  *(_QWORD *)&v19 = WitnessTable;
  *((_QWORD *)&v19 + 1) = &protocol witness table for InlinePickerStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v18, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 0);
  *(_QWORD *)&v18 = v4;
  *((_QWORD *)&v18 + 1) = v5;
  *(_QWORD *)&v19 = WitnessTable;
  *((_QWORD *)&v19 + 1) = &protocol witness table for InlinePickerStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v18, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
  v9 = type metadata accessor for Form(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for Form<A>, v9);
  *(_QWORD *)&v18 = v9;
  *((_QWORD *)&v18 + 1) = v10;
  v11 = swift_getOpaqueTypeMetadata2(255, &v18, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
  *(_QWORD *)&v18 = v9;
  *((_QWORD *)&v18 + 1) = v10;
  v12 = swift_getOpaqueTypeConformance2(&v18, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  *(_QWORD *)&v18 = v11;
  *((_QWORD *)&v18 + 1) = v12;
  v13 = swift_getOpaqueTypeMetadata2(255, &v18, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v14 = sub_100170848();
  *(_QWORD *)&v18 = v11;
  *((_QWORD *)&v18 + 1) = v12;
  v15 = swift_getOpaqueTypeConformance2(&v18, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  *(_QWORD *)&v18 = v2;
  *((_QWORD *)&v18 + 1) = v13;
  *(_QWORD *)&v19 = v14;
  *((_QWORD *)&v19 + 1) = v15;
  v16 = type metadata accessor for NavigationLink(255, &v18);
  return swift_getWitnessTable(&protocol conformance descriptor for NavigationLink<A, B>, v16);
}

uint64_t sub_100171DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100171DB0(a1, a2, a3, (uint64_t)&unk_100468010);
}

uint64_t sub_100171DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  _OWORD v6[2];

  v4 = *(_OWORD *)(a2 + 32);
  v6[0] = *(_OWORD *)(a2 + 16);
  v6[1] = v4;
  return swift_getOpaqueTypeConformance2(v6, a4, 1);
}

uint64_t sub_100171DE0()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD v13[2];

  v1 = *(_OWORD *)(v0 + 32);
  v13[0] = *(_OWORD *)(v0 + 16);
  v12 = *(_QWORD *)&v13[0];
  v13[1] = v1;
  v2 = type metadata accessor for CustomLinkPicker.DismissingPicker(0, (uint64_t)v13);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  swift_release(*(_QWORD *)(v0 + v5));
  swift_release(*(_QWORD *)(v0 + v5 + 8));
  v7 = type metadata accessor for Binding(0, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v0 + v5 + *(int *)(v7 + 32), v12);
  swift_release(*(_QWORD *)(v0 + v5 + *(int *)(v2 + 52) + 8));
  v8 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 56));
  v9 = sub_10003F544(qword_100554378);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  return swift_deallocObject(v0, v5 + v6, v4 | 7);
}

uint64_t sub_100171EF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustomLinkPicker.DismissingPicker(0, (uint64_t)v9)
                                      - 8)
                          + 80);
  return sub_100170754(a1, (uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6);
}

uint64_t sub_100171F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(qword_100554378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100171FB8(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *v9;
  __int128 v10;

  v7 = &type metadata for EmptyView;
  v5 = a1[1];
  v8 = *a1;
  v6 = v8;
  v9 = &protocol witness table for EmptyView;
  v10 = v5;
  v1 = type metadata accessor for Picker(255, &v7);
  v2 = type metadata accessor for _ValueActionModifier(255, v6, *(_QWORD *)(v5 + 8));
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  swift_getWitnessTable(&protocol conformance descriptor for Picker<A, B, C>, v1);
  swift_getWitnessTable(&protocol conformance descriptor for _ValueActionModifier<A>, v2);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

uint64_t sub_10017208C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_signpost_type_t v22;
  char v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint8_t *v26;
  os_signpost_id_t v27;
  uint8_t *v28;
  uint64_t v29;
  objc_class *v30;
  id v31;
  uint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  objc_class *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  _OWORD v75[2];
  uint64_t v76;

  v2 = type metadata accessor for OSSignposter(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v68 - v7;
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v68 - v15;
  v17 = static OSSignposter.bootstrap.getter(v14);
  v18 = OSSignposter.logHandle.getter(v17);
  OSSignpostID.init(log:)(v18);
  v68 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v69 = v2;
  v19 = v68(v8, v2);
  v20 = static OSSignposter.bootstrap.getter(v19);
  v21 = OSSignposter.logHandle.getter(v20);
  v22 = static os_signpost_type_t.begin.getter(v21);
  v23 = OS_os_log.signpostsEnabled.getter();
  v72 = v10;
  v73 = v16;
  if ((v23 & 1) != 0)
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v24(v13, v16, v9);
    v25 = v9;
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    v27 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, v22, v27, "ViewControllerBootstrap", "", v26, 2u);
    v28 = v26;
    v9 = v25;
    v16 = v73;
    swift_slowDealloc(v28, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  else
  {

    v24 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  }
  v70 = v9;
  v24(v13, v16, v9);
  v29 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v71 = OSSignpostIntervalState.init(id:isOpen:)(v13, 1);
  v68(v6, v69);
  v30 = (objc_class *)type metadata accessor for PodcastsFlowTabBarController();
  v31 = objc_allocWithZone(v30);
  swift_retain(a1);
  v33 = sub_100306EEC(v32);
  objc_msgSend(v33, "_uip_setPreferredSidebarMode:", 2);
  type metadata accessor for MiniPlayerHostViewController(0);
  v34 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "init", swift_retain(a1).n128_f64[0]);
  v35 = static MiniPlayerFactory.createMiniPlayer(asPartOf:)(a1);
  v37 = MiniPlayerHostViewController.__allocating_init(asPartOf:wrapping:miniPlayerController:)(a1, v34, v35, v36);
  v38 = (objc_class *)type metadata accessor for RootSplitViewController(0);
  memset(v75, 0, sizeof(v75));
  v76 = 0;
  objc_allocWithZone(v38);
  swift_retain(a1);
  v39 = v33;
  v40 = (char *)RootSplitViewController.init(hostingViewController:tabBarController:searchSuggestionsController:asPartOf:)(v37, &protocol witness table for MiniPlayerHostViewController, v39, v75, a1);
  if ((static Podcasts.isUIPSidebarEnabled.getter(v40) & 1) != 0)
    v41 = v39;
  else
    v41 = v40;
  v42 = v41;
  v43 = sub_10003F544((uint64_t *)&unk_100554530);
  v44 = type metadata accessor for RootActionRunner(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  v45 = v42;
  v46 = RootActionRunner.init(target:)();
  type metadata accessor for AppDependencyManager(0);
  v47 = static AppDependencyManager.shared.getter();
  v74 = 3;
  v48 = sub_100175104();
  AnyHashable.init<A>(_:)(&v74, &type metadata for AppDependencyKey, v48);
  v49 = swift_retain(v46);
  AppDependencyManager.add<A>(key:dependency:)(v75, sub_100175148, v46, v44, v49);
  swift_release(v47);
  swift_release(v46);
  sub_100175154((uint64_t)v75);
  v50 = sub_100026844(&qword_100554548, (uint64_t (*)(uint64_t))&type metadata accessor for RootActionRunner, (uint64_t)&protocol conformance descriptor for FlowActionRunner);
  *(_QWORD *)&v75[0] = v46;
  *((_QWORD *)&v75[0] + 1) = v50;
  v51 = BaseObjectGraph.satisfying<A>(_:with:)(v43, v75, v43);
  swift_release(v46);
  v52 = sub_10003F544(&qword_100554550);
  v53 = swift_allocObject(&unk_1004B07A0, 24, 7);
  *(_QWORD *)(v53 + 16) = v45;
  v54 = v45;
  v55 = BaseObjectGraph.satisfying<A>(_:with:)(v52, sub_1001751B8, v53, v52);
  swift_release(v51);
  swift_release(v53);
  v56 = type metadata accessor for MenuBarController();
  v57 = BaseObjectGraph.satisfying<A>(_:with:)(v56, sub_100172A88, 0, v56);
  swift_release(v55);
  v58 = sub_10003F544(&qword_100554558);
  v59 = BaseObjectGraph.satisfying<A>(_:with:)(v58, sub_100172B90, 0, v58);
  swift_release(v57);
  v60 = sub_100005EC8(0, &qword_100554560, UITabBarController_ptr);
  *(_QWORD *)&v75[0] = v39;
  v61 = BaseObjectGraph.satisfying<A>(_:with:)(v60, v75, v60);
  swift_release(v59);
  v62 = sub_10003F544(&qword_100554568);
  v63 = BaseObjectGraph.satisfying<A>(_:with:)(v62, sub_100172C04, 0, v62);
  swift_release(v61);
  sub_1001755EC(v39, v40, v63);
  *(_QWORD *)&v75[0] = v39;
  v64 = BaseObjectGraph.satisfying<A>(_:with:)(v30, v75, v30);
  *(_QWORD *)&v75[0] = v40;
  v65 = BaseObjectGraph.satisfying<A>(_:with:)(v38, v75, v38);

  swift_release(v63);
  swift_release(v64);
  v66 = v71;
  sub_10017264C("ViewControllerBootstrap", 23, 2, v71);
  swift_release(v66);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v70);
  return v65;
}

uint64_t sub_10017264C(const char *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  char *v29;
  uint8_t *v30;
  os_signpost_id_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v39;
  char v40;

  v38 = a3;
  v39 = (char *)a1;
  v5 = type metadata accessor for OSSignpostError(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v37 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - v12;
  v14 = type metadata accessor for OSSignposter(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = static OSSignposter.bootstrap.getter(v16);
  v20 = OSSignposter.logHandle.getter(v19);
  v21 = OSSignpostIntervalState.signpostID.getter();
  v34 = static os_signpost_type_t.end.getter(v21);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  v33 = v15;
  v23 = v9;
  if ((v38 & 1) == 0)
  {
    if (!v39)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v39 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v39 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v39 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v39 = &v40;
LABEL_10:
  v24 = swift_retain(a4);
  checkForErrorAndConsumeState(state:)(v24);
  swift_release(a4);
  v26 = v35;
  v25 = v36;
  if ((*(unsigned int (**)(char *, uint64_t))(v35 + 88))(v7, v36) == enum case for OSSignpostError.doubleEnd(_:))
  {
    v27 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v25);
    v27 = "";
  }
  v28 = v14;
  v29 = v37;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v37, v13, v8);
  v30 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v30 = 0;
  v31 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, (os_signpost_type_t)v34, v31, v39, v27, v30, 2u);
  swift_slowDealloc(v30, -1, -1);

  v32 = *(void (**)(char *, uint64_t))(v23 + 8);
  v32(v13, v8);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v28);
  return ((uint64_t (*)(char *, uint64_t))v32)(v29, v8);
}

uint64_t sub_100172920@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  id v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t result;
  uint64_t v17;

  v6 = type metadata accessor for RootFlowController(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = a2;
  v8 = swift_retain(a1);
  v9 = RootFlowController.init(rootViewController:asPartOf:)(v7, a1, v8);
  v10 = type metadata accessor for _DebugActionsProvider();
  v11 = swift_allocObject(v10, 32, 7);
  v12 = type metadata accessor for LibraryDataProvider(0);
  swift_retain(a1);
  swift_retain(v9);
  BaseObjectGraph.inject<A>(_:)(&v17, v12, v12);
  *(_QWORD *)(v11 + 16) = v17;
  v13 = sub_100005EC8(0, &qword_100554590, &off_1004A4480);
  BaseObjectGraph.inject<A>(_:)(&v17, v13, v13);
  swift_release(a1);
  *(_QWORD *)(v11 + 24) = v17;
  v14 = sub_100026844(&qword_100554598, (uint64_t (*)(uint64_t))type metadata accessor for _DebugActionsProvider, (uint64_t)&unk_1003CADF8);
  dispatch thunk of BaseFlowController.debugActionsProvider.setter(v11, v14);
  swift_release(v9);
  v15 = swift_retain(v9);
  result = static RootFlowController.shared.setter(v15);
  a3[3] = v6;
  a3[4] = (uint64_t)&protocol witness table for BaseFlowController;
  *a3 = v9;
  return result;
}

uint64_t sub_100172A88@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  objc_class *v4;
  char *v5;
  char *v6;
  objc_class *v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t result;
  objc_super v13;

  v4 = (objc_class *)type metadata accessor for MenuBarController();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter];
  v7 = (objc_class *)type metadata accessor for GlobalActionController();
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  objc_allocWithZone(v7);
  swift_retain_n(a1, 2);
  v8 = v5;
  *(_QWORD *)&v8[OBJC_IVAR____TtC8Podcasts17MenuBarController_globalActionController] = sub_1002211A0(a1, v9);

  v10 = objc_msgSend((id)objc_opt_self(UIMenuSystem), "mainSystem");
  objc_msgSend(v10, "setNeedsRebuild");

  v13.receiver = v8;
  v13.super_class = v4;
  v11 = objc_msgSendSuper2(&v13, "init");
  result = swift_release(a1);
  *a2 = v11;
  return result;
}

uint64_t sub_100172B90@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = type metadata accessor for MenuBarController();
  BaseObjectGraph.inject<A>(_:)(&v5, v2, v2);
  v3 = v5;
  result = sub_100026844(&qword_100554588, (uint64_t (*)(uint64_t))type metadata accessor for MenuBarController, (uint64_t)&unk_1003CF098);
  *a1 = v3;
  a1[1] = result;
  return result;
}

uint64_t sub_100172C04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  objc_class *v4;
  id v5;
  uint64_t v6;
  uint64_t result;

  v4 = (objc_class *)type metadata accessor for LibraryTabElementGroupManager(0);
  v5 = objc_allocWithZone(v4);
  v6 = swift_retain(a1);
  result = LibraryTabElementGroupManager.init(asPartOf:)(v6);
  a2[3] = (uint64_t)v4;
  a2[4] = (uint64_t)&protocol witness table for LibraryTabElementGroupManager;
  *a2 = result;
  return result;
}

uint64_t sub_100172C68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_10027AE00(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9, a1 + 32, v2, &type metadata for String);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100172DB8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  v9 = a4 >> 1;
  v10 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_11;
  v6 = a3;
  v7 = a2;
  v4 = a1;
  v8 = *v5;
  if ((unint64_t)*v5 >> 62)
    goto LABEL_12;
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  v12 = v11 + v10;
  if (!__OFADD__(v11, v10))
    goto LABEL_4;
LABEL_17:
  __break(1u);
LABEL_18:
  v14 = 1;
LABEL_19:
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v28 = v8;
    else
      v28 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v18 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v18 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v18 <= v12)
    v18 = v12;
  swift_bridgeObjectRetain(v8);
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14, v18, 1, v8);
  swift_bridgeObjectRelease(*v5);
  *v5 = v8;
  v15 = v8 & 0xFFFFFFFFFFFFFF8;
  if (v9 == v6)
  {
    while (v10 > 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      if (v8 < 0)
        v16 = v8;
      else
        v16 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v17 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(v8);
      v12 = v17 + v10;
      if (__OFADD__(v17, v10))
        goto LABEL_17;
LABEL_4:
      v8 = *v5;
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
      *v5 = v8;
      v14 = 0;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v8 < 0 || (v8 & 0x4000000000000000) != 0)
        goto LABEL_19;
      v15 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v12 > *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        goto LABEL_18;
      if (v9 != v6)
        goto LABEL_24;
    }
    goto LABEL_31;
  }
LABEL_24:
  v19 = *(_QWORD *)(v15 + 16);
  if ((*(_QWORD *)(v15 + 24) >> 1) - v19 < v10)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    v20 = v15 + 8 * v19 + 32;
    v21 = v7 + 8 * v6;
    if (v21 < v20 + 8 * v10 && v20 < v21 + 8 * v10)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
      goto LABEL_40;
    }
    v22 = type metadata accessor for LegacyLockup(0);
    swift_arrayInitWithCopy(v20, v21, v10, v22);
    if (!v10)
    {
LABEL_31:
      v26 = swift_unknownObjectRelease(v4);
      return specialized Array._endMutation()(v26);
    }
    v23 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v24 = __OFADD__(v23, v10);
    v25 = v23 + v10;
    if (!v24)
    {
      *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v25;
      goto LABEL_31;
    }
    goto LABEL_37;
  }
LABEL_38:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100173034(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  uint64_t result;
  char v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v16 = v4 + v2;
  else
    v16 = v4;
  v3 = sub_10027B238(isUniquelyReferenced_nonNull_native, v16, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  v12 = sub_10003F544(&qword_100553CF0);
  swift_arrayInitWithCopy(v10, a1 + 32, v8, v12);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = v3[2];
  v14 = __OFADD__(v13, v8);
  v15 = v13 + v8;
  if (!v14)
  {
    v3[2] = v15;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v18 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v18, 1092, 0);
  __break(1u);
  return result;
}

void sub_1001731A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_10027B258(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

uint64_t sub_1001732EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_100174290(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (uint64_t (*)(_QWORD))&type metadata accessor for LegacyEpisodeLockup, (unint64_t *)&unk_100554510, (uint64_t *)&unk_100558910, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100360B58);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001734C4(uint64_t a1)
{
  return sub_100173F94(a1, &qword_1005544F0, (unint64_t *)&unk_100554500, &qword_1005544F8, (uint64_t *)sub_100360BAC);
}

void sub_1001734E8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_10027B600(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for ModernShelf(0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v8;
  v16 = a1 + v13;
  v17 = v14 * v2;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy(v15, v16, v2, v11);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v2);
  v23 = v21 + v2;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v25 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
  __break(1u);
}

void sub_100173650(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_10027B734(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[6 * v8 + 4];
  if (a1 + 32 < v9 + 48 * v2 && v9 < a1 + 32 + 48 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9, a1 + 32, v2, &type metadata for PresentableError);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

uint64_t sub_1001737A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  v9 = a4 >> 1;
  v10 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_11;
  v6 = a3;
  v7 = a2;
  v4 = a1;
  v8 = *v5;
  if ((unint64_t)*v5 >> 62)
    goto LABEL_12;
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  v12 = v11 + v10;
  if (!__OFADD__(v11, v10))
    goto LABEL_4;
LABEL_17:
  __break(1u);
LABEL_18:
  v14 = 1;
LABEL_19:
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v28 = v8;
    else
      v28 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v18 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v18 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v18 <= v12)
    v18 = v12;
  swift_bridgeObjectRetain(v8);
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14, v18, 1, v8);
  swift_bridgeObjectRelease(*v5);
  *v5 = v8;
  v15 = v8 & 0xFFFFFFFFFFFFFF8;
  if (v9 == v6)
  {
    while (v10 > 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      if (v8 < 0)
        v16 = v8;
      else
        v16 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v17 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(v8);
      v12 = v17 + v10;
      if (__OFADD__(v17, v10))
        goto LABEL_17;
LABEL_4:
      v8 = *v5;
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
      *v5 = v8;
      v14 = 0;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v8 < 0 || (v8 & 0x4000000000000000) != 0)
        goto LABEL_19;
      v15 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v12 > *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        goto LABEL_18;
      if (v9 != v6)
        goto LABEL_24;
    }
    goto LABEL_31;
  }
LABEL_24:
  v19 = *(_QWORD *)(v15 + 16);
  if ((*(_QWORD *)(v15 + 24) >> 1) - v19 < v10)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    v20 = v15 + 8 * v19 + 32;
    v21 = v7 + 8 * v6;
    if (v21 < v20 + 8 * v10 && v20 < v21 + 8 * v10)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
      goto LABEL_40;
    }
    v22 = sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
    swift_arrayInitWithCopy(v20, v21, v10, v22);
    if (!v10)
    {
LABEL_31:
      v26 = swift_unknownObjectRelease(v4);
      return specialized Array._endMutation()(v26);
    }
    v23 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v24 = __OFADD__(v23, v10);
    v25 = v23 + v10;
    if (!v24)
    {
      *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v25;
      goto LABEL_31;
    }
    goto LABEL_37;
  }
LABEL_38:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100173A34(uint64_t a1)
{
  return sub_100173A60(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001748C0);
}

void sub_100173A40(uint64_t a1)
{
  sub_100173C44(a1, (uint64_t (*)(void))sub_10027B5EC, &qword_1005545F0);
}

uint64_t sub_100173A54(uint64_t a1)
{
  return sub_100173A60(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100174AD4);
}

uint64_t sub_100173A60(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

void sub_100173C1C(uint64_t a1)
{
  sub_100173C44(a1, (uint64_t (*)(void))sub_10027B498, &qword_1005545F8);
}

void sub_100173C30(uint64_t a1)
{
  sub_100173C44(a1, (uint64_t (*)(void))sub_10027BD84, &qword_1005545A0);
}

void sub_100173C44(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3) && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  if ((*(_QWORD *)(v5 + 24) >> 1) - v10 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = v5 + 40 * v10 + 32;
  if (a1 + 32 < v11 + 40 * v4 && v11 < a1 + 32 + 40 * v4)
    goto LABEL_21;
  v13 = sub_10003F544(a3);
  swift_arrayInitWithCopy(v11, a1 + 32, v4, v13);
  if (!v4)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return;
  }
  v14 = *(_QWORD *)(v5 + 16);
  v15 = __OFADD__(v14, v4);
  v16 = v14 + v4;
  if (!v15)
  {
    *(_QWORD *)(v5 + 16) = v16;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v17 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
}

uint64_t sub_100173DB8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_100174CE8(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_100173F70(uint64_t a1)
{
  return sub_100173F94(a1, &qword_100556510, &qword_100554528, &qword_100554520, (uint64_t *)sub_100360C00);
}

uint64_t sub_100173F94(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v24 = a1;
    else
      v24 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v12 < 0)
    v25 = *v5;
  else
    v25 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v5);
  v13 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v12);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_29;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v27 = v11;
  v11 = (uint64_t)a2;
  a2 = (uint64_t *)a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if ((unint64_t)v12 >> 62)
    goto LABEL_31;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain(v12);
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13, v17, 1, v12);
    swift_bridgeObjectRelease(*v5);
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = (unint64_t *)a2;
    a2 = (uint64_t *)v11;
    v11 = v27;
LABEL_15:
    result = sub_100174EFC(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v12 < 0)
      v26 = v12;
    else
      v26 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v17 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v12);
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v23);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _DebugActionsProvider()
{
  return objc_opt_self(_TtC8PodcastsP33_F147DCCCAAB2447086D9F37B8C7D378C21_DebugActionsProvider);
}

_QWORD *sub_1001741C4()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = objc_msgSend(*(id *)(v0 + 24), "debugTestCases");
  if (v1)
  {
    v2 = v1;
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, (char *)&type metadata for Any + 8);

    v4 = sub_10034E904(v3);
    swift_bridgeObjectRelease(v3);
    if (v4)
      sub_100173034((uint64_t)v4);
  }
  v5 = sub_10016D098();
  sub_100173034((uint64_t)v5);
  return _swiftEmptyArrayStorage;
}

char *sub_10017425C()
{
  char v1;

  return &v1;
}

uint64_t sub_10017426C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100174290(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for LegacyLockup, (unint64_t *)&unk_100563080, &qword_100553D30, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100360AB0);
}

uint64_t sub_100174290(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  void (*v25)(_BYTE *, _QWORD, __n128);
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t result;
  _BYTE v31[32];

  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v29 = a3;
    else
      v29 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v15 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(a3);
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    if (a3 < 0)
      v20 = a3;
    else
      v20 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v21 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a3);
    if (v21 <= a2)
    {
      if (v15 >= 1)
      {
        v22 = sub_10017599C(a5, a6);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v15; ++i)
        {
          v24 = sub_10003F544(a6);
          v25 = (void (*)(_BYTE *, _QWORD, __n128))a7(v31, i, a3, v24, v22);
          v27 = *v26;
          v28 = swift_retain(*v26);
          v25(v31, 0, v28);
          *(_QWORD *)(a1 + 8 * i) = v27;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  v18 = v16 + 32;
  if (v16 + 32 >= a1 + 8 * v17 || v18 + 8 * v17 <= a1)
  {
    v19 = a4(0);
    swift_arrayInitWithCopy(a1, v18, v17, v19);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100174498(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  void (*v15)(_QWORD *);
  id *v16;
  id v17;
  uint64_t v18;
  uint64_t result;
  void (*v20[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v12 = a3;
    else
      v12 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a3);
    if (v13 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10017599C((unint64_t *)&unk_10055A330, (uint64_t *)&unk_1005544E0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10003F544((uint64_t *)&unk_1005544E0);
          v15 = sub_100360B04(v20, i, a3);
          v17 = *v16;
          ((void (*)(void (**)(id *), _QWORD))v15)(v20, 0);
          *(_QWORD *)(a1 + 8 * i) = v17;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  v10 = v8 + 32;
  if (v8 + 32 >= a1 + 8 * v9 || v10 + 8 * v9 <= a1)
  {
    v11 = sub_100005EC8(0, (unint64_t *)&qword_100559F60, CPListItem_ptr);
    swift_arrayInitWithCopy(a1, v10, v9, v11);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001746AC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  void (*v15)(_QWORD *);
  id *v16;
  id v17;
  uint64_t v18;
  uint64_t result;
  void (*v20[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v12 = a3;
    else
      v12 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a3);
    if (v13 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10017599C(&qword_1005545E8, &qword_1005545E0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10003F544(&qword_1005545E0);
          v15 = sub_100360A5C(v20, i, a3);
          v17 = *v16;
          ((void (*)(void (**)(id *), _QWORD))v15)(v20, 0);
          *(_QWORD *)(a1 + 8 * i) = v17;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  v10 = v8 + 32;
  if (v8 + 32 >= a1 + 8 * v9 || v10 + 8 * v9 <= a1)
  {
    v11 = sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
    swift_arrayInitWithCopy(a1, v10, v9, v11);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001748C0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  void (*v15)(_QWORD *);
  id *v16;
  id v17;
  uint64_t v18;
  uint64_t result;
  void (*v20[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v12 = a3;
    else
      v12 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a3);
    if (v13 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10017599C((unint64_t *)&unk_1005545D0, (uint64_t *)&unk_10055B8D0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10003F544((uint64_t *)&unk_10055B8D0);
          v15 = sub_100360A5C(v20, i, a3);
          v17 = *v16;
          ((void (*)(void (**)(id *), _QWORD))v15)(v20, 0);
          *(_QWORD *)(a1 + 8 * i) = v17;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  v10 = v8 + 32;
  if (v8 + 32 >= a1 + 8 * v9 || v10 + 8 * v9 <= a1)
  {
    v11 = sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
    swift_arrayInitWithCopy(a1, v10, v9, v11);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100174AD4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  void (*v15)(_QWORD *);
  id *v16;
  id v17;
  uint64_t v18;
  uint64_t result;
  void (*v20[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v12 = a3;
    else
      v12 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a3);
    if (v13 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10017599C(&qword_1005545B8, &qword_1005545B0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10003F544(&qword_1005545B0);
          v15 = sub_100360A5C(v20, i, a3);
          v17 = *v16;
          ((void (*)(void (**)(id *), _QWORD))v15)(v20, 0);
          *(_QWORD *)(a1 + 8 * i) = v17;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  v10 = v8 + 32;
  if (v8 + 32 >= a1 + 8 * v9 || v10 + 8 * v9 <= a1)
  {
    v11 = sub_100005EC8(0, &qword_1005545A8, UIMenuElement_ptr);
    swift_arrayInitWithCopy(a1, v10, v9, v11);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100174CE8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  void (*v15)(_QWORD *);
  id *v16;
  id v17;
  uint64_t v18;
  uint64_t result;
  void (*v20[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v12 = a3;
    else
      v12 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a3);
    if (v13 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10017599C((unint64_t *)&unk_1005544D0, (uint64_t *)&unk_1005544C0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10003F544((uint64_t *)&unk_1005544C0);
          v15 = sub_100360A5C(v20, i, a3);
          v17 = *v16;
          ((void (*)(void (**)(id *), _QWORD))v15)(v20, 0);
          *(_QWORD *)(a1 + 8 * i) = v17;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  v10 = v8 + 32;
  if (v8 + 32 >= a1 + 8 * v9 || v10 + 8 * v9 <= a1)
  {
    v11 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
    swift_arrayInitWithCopy(a1, v10, v9, v11);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100174EFC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  void (*v25)(_BYTE *, _QWORD);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _BYTE v30[32];

  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v28 = a3;
    else
      v28 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v15 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(a3);
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    if (a3 < 0)
      v20 = a3;
    else
      v20 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v21 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a3);
    if (v21 <= a2)
    {
      if (v15 >= 1)
      {
        v22 = sub_10017599C(a5, a6);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v15; ++i)
        {
          v24 = sub_10003F544(a6);
          v25 = (void (*)(_BYTE *, _QWORD))a7(v30, i, a3, v24, v22);
          v27 = *v26;
          swift_unknownObjectRetain(*v26);
          v25(v30, 0);
          *(_QWORD *)(a1 + 8 * i) = v27;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  v18 = v16 + 32;
  if (v16 + 32 >= a1 + 8 * v17 || v18 + 8 * v17 <= a1)
  {
    v19 = sub_10003F544(a4);
    swift_arrayInitWithCopy(a1, v18, v17, v19);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_100175104()
{
  unint64_t result;

  result = qword_1005609A0;
  if (!qword_1005609A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppDependencyKey, &type metadata for AppDependencyKey);
    atomic_store(result, (unint64_t *)&qword_1005609A0);
  }
  return result;
}

uint64_t sub_100175148@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain(v1);
}

uint64_t sub_100175154(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_100554540);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100175194()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001751B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100172920(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1001751D0(uint64_t a1, void *a2, void *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a4 & 1;
  v8 = sub_100026844(&qword_100554580, (uint64_t (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController, (uint64_t)&unk_1003D4F68);
  v9 = type metadata accessor for ParentFlowController(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  swift_retain(a1);
  v10 = ParentFlowController.init(asPartOf:splitViewController:tabBarController:interfaceMode:)(a1, a2, a3, v8, v7);
  dispatch thunk of RootSplitViewController.setFlowController(_:)();
  ParentFlowController.initializePageContextForMetrics()();
  v11 = static TabMenu.defaultTab.getter();
  type metadata accessor for BaseObjectGraph(0);
  v12 = BaseObjectGraph.__allocating_init(name:_:)(0x7974706D45, 0xE500000000000000, _swiftEmptyArrayStorage);
  dispatch thunk of FlowController.change(tab:execute:popToRoot:preserveTransientView:userInitiated:suppressMetrics:objectGraph:)(v11, 0, 0, 0, 0, 0, v12, v9, &protocol witness table for BaseFlowController, v10);
  swift_release(v12);
  sub_100175988(v11);
  return v10;
}

_QWORD *sub_100175318(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __n128 v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  _QWORD v27[3];
  uint64_t v28;
  void *v29;

  if ((static Podcasts.isUIPSidebarEnabled.getter(a1) & 1) != 0)
  {
    v3 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
    v4 = UITraitCollection.interfaceMode.getter();

    v5 = v4 & 1;
  }
  else
  {
    v5 = 0;
  }
  v28 = type metadata accessor for TabBarFlowController(0);
  v29 = &protocol witness table for BaseFlowController;
  v27[0] = a2;
  v6 = swift_retain(a2);
  v7 = static TabMenu.viewControllers(for:interfaceMode:using:asPartOf:)(0, v5, v27, a1, v6);
  sub_10003D380(v27);
  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_6;
LABEL_19:
    swift_bridgeObjectRelease(v7);
    return _swiftEmptyArrayStorage;
  }
  if (v7 < 0)
    v25 = v7;
  else
    v25 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v7);
  if (!v8)
    goto LABEL_19;
LABEL_6:
  result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v8);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v10 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
      else
        v13 = *(id *)(v7 + 8 * v10 + 32);
      v14 = v13;
      v15 = objc_opt_self(UISplitViewController);
      v16 = swift_dynamicCastObjCClass(v14, v15);
      if (!v16)
      {
        type metadata accessor for FlowNavigationController();
        v17 = (id)FlowNavigationController.__allocating_init()();
        v18 = dispatch thunk of TabBarFlowController.navigationControllerDelegate.getter();
        objc_msgSend(v17, "setDelegate:", v18);

        swift_unknownObjectRelease(v18);
        v19 = type metadata accessor for NavigationFlowController(0);
        swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
        v20 = v17;
        v21 = swift_retain(a1);
        v22 = NavigationFlowController.init(navigationController:asPartOf:)(v20, a1, v21);
        v28 = v19;
        v29 = &protocol witness table for BaseFlowController;
        v27[0] = v22;
        FlowNavigationController.flowController.setter(v27);
        v23 = v20;
        v24 = objc_msgSend(v14, "tabBarItem");
        objc_msgSend(v23, "setTabBarItem:", v24);

        objc_msgSend(v23, "pushViewController:animated:", v14, 0);
        v14 = v23;
      }
      ++v10;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v14);
      specialized ContiguousArray._endMutation()(v12);
    }
    while (v8 != v10);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

id sub_1001755EC(char *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id result;
  void *v12;
  char v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  Class isa;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  Class v31;
  _BYTE v32[24];
  _QWORD v33[3];
  uint64_t v34;
  void *v35;
  char v36[24];

  v6 = sub_10003F544((uint64_t *)&unk_100554530);
  BaseObjectGraph.inject<A>(_:)(v33, v6, v6);
  v7 = v33[0];
  v8 = v33[1];
  v9 = &a1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner];
  swift_beginAccess(&a1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner], v36, 1, 0);
  v10 = *(_QWORD *)v9;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  swift_unknownObjectRetain_n(v7, 2);
  swift_unknownObjectRelease(v10);
  dispatch thunk of RootSplitViewController.actionRunner.setter(v7, v8);
  result = objc_msgSend((id)objc_opt_self(UITraitCollection), "_currentTraitCollection");
  if (result)
  {
    v12 = result;
    v13 = UITraitCollection.interfaceMode.getter();

    v14 = v13 & 1;
    v15 = (void *)dispatch thunk of RootSplitViewController.createMenuBarController(asPartOf:)(a3);
    v16 = sub_1001751D0(a3, a2, a1, v14);

    v34 = type metadata accessor for ParentFlowController(0);
    v35 = &protocol witness table for BaseFlowController;
    v33[0] = v16;
    v17 = (uint64_t)&a1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController];
    swift_beginAccess(&a1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController], v32, 33, 0);
    swift_retain(v16);
    sub_100175940((uint64_t)v33, v17);
    v18 = swift_endAccess(v32);
    if ((static Podcasts.isUIPSidebarEnabled.getter(v18) & 1) != 0)
    {
      v19 = sub_100309BA0(a3, v14, v16);
      sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v19);
      objc_msgSend(a1, "setViewControllers:", isa);

      objc_msgSend(a1, "setSelectedIndex:", 0);
      v21 = objc_msgSend(a1, "_uip_sidebar");
      objc_msgSend(v21, "_setEditable:", 1);

      ParentFlowController.initializePageContextForMetrics()();
    }
    else
    {
      type metadata accessor for FlowNavigationController(0);
      v22 = (void *)FlowNavigationController.__allocating_init()();
      v23 = type metadata accessor for NavigationFlowController(0);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      v24 = v22;
      v25 = swift_retain(a3);
      v26 = NavigationFlowController.init(navigationController:asPartOf:)(v24, a3, v25);
      v34 = v23;
      v35 = &protocol witness table for BaseFlowController;
      v33[0] = v26;
      FlowNavigationController.flowController.setter(v33);
      v27 = type metadata accessor for TabBarFlowController(0);
      swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
      swift_retain(a3);
      v28 = a1;
      v29 = TabBarFlowController.init(tabBarController:loadingNavigationController:asPartOf:)();
      v30 = sub_100175318(a3, v29);
      sub_100005EC8(0, (unint64_t *)&qword_100554578, UIViewController_ptr);
      v31 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v30);
      objc_msgSend(v28, "setViewControllers:", v31);

      dispatch thunk of TabBarFlowController.initializePageContextForMetrics()(objc_msgSend(v28, "setSelectedIndex:", 0));
      swift_release(v29);
    }
    swift_release(v16);
    return (id)swift_unknownObjectRelease(v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100175940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100554570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100175988(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 0x11)
    return swift_release(result);
  return result;
}

uint64_t sub_10017599C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10003CA40(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001759DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(__n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v1 = v0;
  v2 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v2);
  v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for InteractionContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + 24, v21, 0, 0);
  v9 = *(_QWORD *)(v0 + 24);
  if (!v9)
    goto LABEL_5;
  v10 = *(void (**)(__n128))(*(_QWORD *)v9 + 168);
  v11 = swift_retain(v9);
  v10(v11);
  v12 = swift_release(v9);
  InteractionContext.page.getter(v12);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = InteractionContext.Page.isRecentlyUnfollowedPage.getter(v13);
  sub_10017603C((uint64_t)v4);
  if ((v14 & 1) == 0)
    goto LABEL_5;
  v15 = *(_QWORD *)(v1 + 16);
  if (v15)
  {
    swift_retain(*(_QWORD *)(v1 + 16));
    v16 = sub_1001E35A4();
    v18 = v17;
    swift_release(v15);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
LABEL_5:
    v16 = 0;
  }
  return v16 & 1;
}

void sub_100175B2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[2];
  if (v1)
  {
    swift_retain(v0[2]);
    sub_1001E35A4();
    if (v3)
    {
      v4 = v2;
      v5 = v3;
      v6 = v0[7];
      v7 = v0[8];
      sub_10003A834(v0 + 4, v6);
      v8 = sub_100175BF4();
      v9 = dispatch thunk of LibraryActionControllerProtocol.subscribe(podcast:displaySuccessHUD:)(v4, v5, v8 & 1, v6, v7);
      swift_release(v1);
      swift_bridgeObjectRelease(v5);
      v10 = v9;
    }
    else
    {
      v10 = v1;
    }
    swift_release(v10);
  }
}

uint64_t sub_100175BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(__n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v27;
  uint64_t v28;
  _BYTE v29[24];

  v1 = v0;
  v2 = type metadata accessor for InteractionContext(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v29[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v6);
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + 24, v29, 0, 0);
  v9 = *(_QWORD *)(v0 + 24);
  if (!v9)
    goto LABEL_9;
  v10 = *(void (**)(__n128))(*(_QWORD *)v9 + 168);
  v11 = swift_retain(v9);
  v10(v11);
  v12 = swift_release(v9);
  InteractionContext.page.getter(v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (swift_getEnumCaseMultiPayload(v8, v6) != 3)
  {
    sub_10017603C((uint64_t)v8);
    goto LABEL_9;
  }
  v13 = *(_QWORD *)v8;
  v14 = v8[8];
  swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
  v15 = sub_10003F544((uint64_t *)&unk_100554730);
  sub_100176078((uint64_t)&v8[*(int *)(v15 + 64)]);
  if ((v14 & 1) != 0)
  {
LABEL_9:
    v25 = 1;
    return v25 & 1;
  }
  v28 = v13;
  v16 = sub_100030584();
  v17 = BinaryInteger.description.getter(&type metadata for UInt64, v16);
  v19 = v18;
  v20 = *(_QWORD *)(v1 + 16);
  if (!v20)
  {
    swift_bridgeObjectRelease(v18);
    goto LABEL_9;
  }
  v21 = v17;
  swift_retain(*(_QWORD *)(v1 + 16));
  v22 = sub_1001E2F48();
  v24 = v23;
  swift_release(v20);
  if (v21 == v22 && v19 == v24)
  {
    swift_bridgeObjectRelease_n(v19, 2);
    v25 = 0;
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v19, v22, v24, 0);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v24);
    v25 = v27 ^ 1;
  }
  return v25 & 1;
}

uint64_t sub_100175DF8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10003D380(v0 + 4);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts28RefollowPodcastContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100175E60()
{
  return type metadata accessor for RefollowPodcastContextAction(0);
}

uint64_t type metadata accessor for RefollowPodcastContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100554628;
  if (!qword_100554628)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RefollowPodcastContextAction);
  return result;
}

uint64_t sub_100175EA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = &unk_1003CAE98;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100175F28()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x5F5245564F434552;
  v1._object = (void *)0xEC000000574F4853;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100175FC8()
{
  return 0x7269632E73756C70;
}

uint64_t sub_100175FE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts28RefollowPodcastContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10017602C()
{
  return 30;
}

uint64_t sub_10017603C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InteractionContext.Page(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100176078(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_10055B790);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MTPodcast.carPlayContentItemChildSortDescriptors.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend((id)objc_opt_self(MTEpisode), "sortDescriptorsForPubDateAscending:", objc_msgSend(v0, "sortAscending"));
  v2 = sub_100045ED8();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  return v3;
}

void __swiftcall MTPodcast.carPlayContentItemChildPredicate(forContext:)(NSPredicate_optional *__return_ptr retstr, NSManagedObjectContext forContext)
{
  void *v2;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  NSManagedObjectContext *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  Class v15;
  _QWORD aBlock[5];
  uint64_t v17;
  id v18;

  v4 = objc_msgSend(v2, "uuid");
  if (v4)
  {
    v5 = v4;
    v6 = (void *)objc_opt_self(MTEpisode);
    v7 = objc_msgSend(v6, "predicateForAllEpisodesOnPodcastUuid:", v5);

    v8 = objc_msgSend(v6, "predicateForEpisodeTypeFilter:", 5);
    v9 = objc_msgSend(v7, "AND:", v8);

    v18 = v9;
    v10 = (NSManagedObjectContext *)swift_allocObject(&unk_1004B08D0, 40, 7);
    v10[2].super.isa = (Class)v2;
    v10[3].super.isa = forContext.super.isa;
    v10[4].super.isa = (Class)&v18;
    v11 = swift_allocObject(&unk_1004B08F8, 32, 7);
    *(_QWORD *)(v11 + 16) = sub_10017652C;
    *(_QWORD *)(v11 + 24) = v10;
    aBlock[4] = sub_100029B44;
    v17 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100029B1C;
    aBlock[3] = &unk_1004B0910;
    v12 = _Block_copy(aBlock);
    v13 = v17;
    v14 = v2;
    v15 = forContext.super.isa;
    swift_retain(v11);
    swift_release(v13);
    -[objc_class performBlockAndWait:](v15, "performBlockAndWait:", v12);
    _Block_release(v12);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v11, "", 109, 28, 32, 1);
    swift_release(v11);
    if ((v15 & 1) != 0)
      __break(1u);
    else
      swift_release(v10);
  }
}

void sub_10017632C(void *a1, void *a2, void **a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;

  v6 = objc_msgSend(a1, "nextEpisodeUuid");
  if (v6)
  {
    v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    swift_bridgeObjectRetain(v9);
    v10 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(a2, "episodeForUuid:", v10);
    swift_bridgeObjectRelease_n(v9, 2);

  }
  else
  {
    v25 = 0;
  }
  if (MTPodcastHidesPlayedEpisodesResolved(objc_msgSend(a1, "hidesPlayedEpisodes")))
  {
    v11 = *a3;
    v12 = (void *)objc_opt_self(MTEpisode);
    v13 = v11;
    v14 = objc_msgSend(v12, "predicateForVisuallyPlayed:", 0);
    v15 = objc_msgSend(v13, "AND:", v14);

    v16 = *a3;
    *a3 = v15;
  }
  else
  {
    v17 = sub_1001D2860(v25);
    if ((v18 & 1) != 0)
    {
      v16 = v25;
    }
    else
    {
      v19 = v17;
      v20 = *a3;
      v21 = (void *)objc_opt_self(MTEpisode);
      v22 = v20;
      v23 = objc_msgSend(v21, "predicateForSeasonNumber:", v19);
      v24 = objc_msgSend(v22, "AND:", v23);

      v16 = *a3;
      *a3 = v24;
    }
  }

}

uint64_t sub_100176500()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10017652C()
{
  uint64_t v0;

  sub_10017632C(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void ***)(v0 + 32));
}

uint64_t sub_100176538()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_100176548()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver], "setDelegate:", 0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ChannelListObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_100176650(void *a1, uint64_t *a2)
{
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = objc_msgSend(a1, "fetchedObjects");
  if (!result)
    return result;
  v4 = result;
  v5 = sub_100005EC8(0, &qword_100553860, MTChannel_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v13 = v6;
    else
      v13 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(v6);
    if (v7)
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease(v6);
    v14 = *a2;
    *a2 = (uint64_t)_swiftEmptyArrayStorage;
    return (id)swift_bridgeObjectRelease(v14);
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    goto LABEL_16;
LABEL_4:
  result = (id)specialized ContiguousArray.reserveCapacity(_:)(v7);
  if ((v7 & 0x8000000000000000) == 0)
  {
    type metadata accessor for LegacyChannelLockup(0);
    v8 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
      else
        v9 = *(id *)(v6 + 8 * v8 + 32);
      ++v8;
      v10 = sub_100322244(v9, 1);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
    }
    while (v7 != v8);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

unint64_t sub_10017685C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100554788;
  if (!qword_100554788)
  {
    v1 = sub_10003CA40(&qword_100553D30);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100554788);
  }
  return result;
}

uint64_t sub_1001768A8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*v1 + OBJC_IVAR____TtC8Podcasts19ChannelListObserver_currentValue);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t (*sub_1001768C0())(_QWORD *)
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  _BYTE v7[24];

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8Podcasts19ChannelListObserver_didChange);
  swift_beginAccess(v1, v7, 0, 0);
  v2 = *v1;
  v3 = v1[1];
  if (v2)
  {
    v4 = swift_allocObject(&unk_1004B09E8, 32, 7);
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = sub_100176EE8;
  }
  else
  {
    v5 = 0;
  }
  sub_10002CA20(v2, v3);
  return v5;
}

uint64_t sub_100176958(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  if (a1)
  {
    v5 = swift_allocObject(&unk_1004B09C0, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_100176EFC;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*v2 + OBJC_IVAR____TtC8Podcasts19ChannelListObserver_didChange);
  swift_beginAccess(v7, v11, 1, 0);
  v8 = *v7;
  v9 = v7[1];
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  return sub_10002CA30(v8, v9);
}

void (*sub_1001769EC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *);

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8Podcasts19ChannelListObserver_didChange;
  v3[5] = *v1;
  v3[6] = v5;
  v6 = (uint64_t *)(v4 + v5);
  swift_beginAccess(v4 + v5, v3, 33, 0);
  v7 = *v6;
  if (*v6)
  {
    v8 = v6[1];
    v9 = swift_allocObject(&unk_1004B0998, 32, 7);
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = v8;
    v10 = sub_100176B90;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v3[3] = v10;
  v3[4] = v9;
  return sub_100176A94;
}

void sub_100176A94(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (**v8)(uint64_t);

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) == 0)
  {
    if (v3)
    {
      v7 = v2[4];
      v5 = swift_allocObject(&unk_1004B0970, 32, 7);
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v7;
      v6 = sub_100176EFC;
      goto LABEL_7;
    }
LABEL_6:
    v6 = 0;
    v5 = 0;
    goto LABEL_7;
  }
  if (!v3)
    goto LABEL_6;
  v4 = v2[4];
  v5 = swift_allocObject(&unk_1004B0948, 32, 7);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = sub_100176B60;
LABEL_7:
  v8 = (uint64_t (**)(uint64_t))(v2[5] + v2[6]);
  *v8 = v6;
  v8[1] = (uint64_t (*)(uint64_t))v5;
  swift_endAccess(v2);
  free(v2);
}

uint64_t sub_100176B3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100176B60(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_100176B90(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_100176BB4(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD aBlock[5];
  uint64_t v16;
  uint64_t v17;

  v2 = a1;
  v17 = 0;
  v3 = objc_msgSend(a1, "managedObjectContext");
  v4 = swift_allocObject(&unk_1004B0A10, 32, 7);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = &v17;
  v5 = swift_allocObject(&unk_1004B0A38, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100176E9C;
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = sub_100029B3C;
  v16 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004B0A50;
  v6 = _Block_copy(aBlock);
  v7 = v16;
  v8 = v2;
  swift_retain(v5);
  swift_release(v7);
  objc_msgSend(v3, "performBlockAndWait:", v6);
  _Block_release(v6);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v5, "", 108, 72, 32, 1);
  swift_release(v5);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v1 = v17;
    if (v17)
      v5 = v17;
    else
      v5 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)v5 >> 62))
    {
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v5);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v9);
      type metadata accessor for LegacyLockup(0);
      swift_bridgeObjectRelease(v5);

      goto LABEL_7;
    }
  }
  if (v5 < 0)
    v12 = v5;
  else
    v12 = v5 & 0xFFFFFFFFFFFFFF8;
  v13 = type metadata accessor for LegacyLockup(0);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v5);
  v14 = _bridgeCocoaArray<A>(_:)(v12, v13);

  swift_bridgeObjectRelease_n(v5, 2);
  v5 = v14;
LABEL_7:
  v10 = v17;
  swift_release(v4);
  swift_bridgeObjectRelease(v10);
  return v5;
}

uint64_t sub_100176DAC()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  void (*v7)(__n128);
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char v11[24];

  objc_sync_enter(v0);
  v1 = *(id *)&v0[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver];
  v2 = sub_100176BB4(v1);

  v3 = OBJC_IVAR____TtC8Podcasts19ChannelListObserver_currentValue;
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_currentValue];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_currentValue] = v2;
  swift_bridgeObjectRelease(v4);
  objc_sync_exit(v0);
  v5 = &v0[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_didChange];
  result = swift_beginAccess(&v0[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_didChange], v11, 0, 0);
  v7 = *(void (**)(__n128))v5;
  if (*(_QWORD *)v5)
  {
    v8 = *((_QWORD *)v5 + 1);
    v9 = *(_QWORD *)&v0[v3];
    sub_10002CA20((uint64_t)v7, v8);
    v10 = swift_bridgeObjectRetain(v9);
    v7(v10);
    sub_10002CA30((uint64_t)v7, v8);
    return swift_bridgeObjectRelease(v9);
  }
  return result;
}

uint64_t sub_100176E78()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_100176E9C()
{
  uint64_t v0;

  return sub_100176650(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_100176EA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100176EB4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100176ED8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100176F00(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  uint64_t (*v32)(_QWORD);
  double v33;
  double v34;
  char v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int EnumCaseMultiPayload;
  uint64_t v49;
  double v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __n128 v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t countAndFlagsBits;
  void *v71;
  void *object;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char v77;
  uint64_t v78;
  id v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  id v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  Swift::String v146;
  Swift::String v147;

  v139 = a3;
  v143 = a2;
  v142 = a1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v140 = v4;
  v141 = v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v138 = (char *)&v136 - v10;
  __chkstk_darwin(v9);
  v136 = (char *)&v136 - v11;
  v12 = sub_10003F544(&qword_1005522F0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v136 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v136 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v136 - v23;
  __chkstk_darwin(v22);
  v137 = (uint64_t)&v136 - v25;
  v26 = _s27CarPlayEpisodeSubtitleStyleOMa(0);
  __chkstk_darwin(v26);
  v28 = (double *)((char *)&v136 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v29);
  v31 = (double *)((char *)&v136 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10014FDF8(v3, (uint64_t)v31, v32);
  switch(swift_getEnumCaseMultiPayload(v31, v29))
  {
    case 1u:
    case 3u:
      v33 = v31[1];
      v34 = v33 - *v31;
      v35 = v143;
      if (v34 > 0.0
        && (v36 = objc_msgSend((id)objc_opt_self(NSString), "prettyShortStringWithDuration:includeTimeRemainingPhrase:abbreviated:", 1, 0, v34)) != 0|| v33 > 0.0&& (v36 = objc_msgSend((id)objc_opt_self(NSString), "prettyShortStringWithDuration:", v33)) != 0)
      {
        v37 = v36;
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v40 = v39;

        v41 = sub_10027AE00(0, 1, 1, _swiftEmptyArrayStorage);
        v43 = v41[2];
        v42 = v41[3];
        goto LABEL_7;
      }
      v41 = _swiftEmptyArrayStorage;
      goto LABEL_48;
    case 2u:
      v45 = (uint64_t)v18;
      sub_100031454((uint64_t)v31, (uint64_t)v18);
      sub_10017809C((uint64_t)v18, (uint64_t)v15);
      v46 = v140;
      v47 = v141;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v15, 1, v140) == 1)
      {
        sub_1001780E4((uint64_t)v18);
        sub_1001780E4((uint64_t)v15);
        goto LABEL_13;
      }
      v59 = v138;
      v60 = (*(uint64_t (**)(char *, char *, uint64_t))(v47 + 32))(v138, v15, v46);
      v61 = Date.friendlyDisplayString.getter(v60);
      v63 = v62;
      v144 = (_QWORD *)v61;
      v145 = v62;
      v64 = sub_10016DD80();
      v66 = Collection.isNotEmpty.getter(&type metadata for String, v64, v65);
      swift_bridgeObjectRelease(v63);
      v35 = v143;
      if ((v66 & 1) != 0)
      {
        v67 = (*(uint64_t (**)(char *, char *, uint64_t))(v47 + 16))(v8, v59, v46);
        v68 = Date.friendlyDisplayString.getter(v67);
        countAndFlagsBits = String.init(playedOn:dateString:)(v8, v68, v69);
        object = v71;
      }
      else
      {
        v91 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v147._object = (void *)0xE000000000000000;
        v92._object = (void *)0x8000000100430790;
        v92._countAndFlagsBits = 0xD000000000000014;
        v93._countAndFlagsBits = 0;
        v93._object = (void *)0xE000000000000000;
        v147._countAndFlagsBits = 0;
        v94 = NSLocalizedString(_:tableName:bundle:value:comment:)(v92, (Swift::String_optional)0, (NSBundle)v91, v93, v147);
        countAndFlagsBits = v94._countAndFlagsBits;
        object = v94._object;

      }
      v41 = sub_10027AE00(0, 1, 1, _swiftEmptyArrayStorage);
      v96 = v41[2];
      v95 = v41[3];
      if (v96 >= v95 >> 1)
        v41 = sub_10027AE00((_QWORD *)(v95 > 1), v96 + 1, 1, v41);
      v41[2] = v96 + 1;
      v97 = &v41[2 * v96];
      v97[4] = countAndFlagsBits;
      v97[5] = object;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v46);
      sub_1001780E4(v45);
      goto LABEL_48;
    case 4u:
      sub_10014FDF8(v139, (uint64_t)v28, _s27CarPlayEpisodeSubtitleStyleOMa);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v26);
      v49 = *(_QWORD *)v28;
      if (EnumCaseMultiPayload == 1)
      {
        v50 = v28[4];
        v51 = *((_BYTE *)v28 + 40);
        if (((_BYTE)v28[3] & 1) != 0
          || ((_BYTE)v28[1] & 1) != 0
          || (v52 = *((_QWORD *)v28 + 2),
              type metadata accessor for AlbumStringBuilder(0),
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v141 + 56))(v21, 1, 1, v140),
              v53 = static AlbumStringBuilder.albumString(podcastTitle:episodeNumber:seasonNumber:isSerialType:pubDate:)(0, 0, v52, v49, 1, v21), v55 = v54, sub_1001780E4((uint64_t)v21), !v55))
        {
          v41 = _swiftEmptyArrayStorage;
          v35 = v143;
          if ((v51 & 1) != 0)
            goto LABEL_48;
        }
        else
        {
          v41 = sub_10027AE00(0, 1, 1, _swiftEmptyArrayStorage);
          v57 = v41[2];
          v56 = v41[3];
          v35 = v143;
          if (v57 >= v56 >> 1)
            v41 = sub_10027AE00((_QWORD *)(v56 > 1), v57 + 1, 1, v41);
          v41[2] = v57 + 1;
          v58 = &v41[2 * v57];
          v58[4] = v53;
          v58[5] = v55;
          if ((v51 & 1) != 0)
            goto LABEL_48;
        }
        goto LABEL_43;
      }
      v73 = *((_BYTE *)v28 + 8);
      v74 = sub_10003F544(&qword_1005547C0);
      v75 = (uint64_t)v28 + *(int *)(v74 + 48);
      v76 = (char *)v28 + *(int *)(v74 + 64);
      v50 = *(double *)v76;
      v77 = v76[8];
      v78 = v137;
      sub_100031454(v75, v137);
      if ((v73 & 1) == 0 && v49 >= 1)
      {
        v79 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v80._countAndFlagsBits = 0xD000000000000015;
        v146._object = (void *)0xE000000000000000;
        v80._object = (void *)0x80000001004307B0;
        v81._countAndFlagsBits = 0;
        v81._object = (void *)0xE000000000000000;
        v146._countAndFlagsBits = 0;
        v82 = NSLocalizedString(_:tableName:bundle:value:comment:)(v80, (Swift::String_optional)0, (NSBundle)v79, v81, v146);

        v83 = sub_10003F544(&qword_1005559A0);
        v84 = swift_allocObject(v83, 72, 7);
        *(_OWORD *)(v84 + 16) = xmmword_1003CA200;
        *(_QWORD *)(v84 + 56) = &type metadata for Int64;
        *(_QWORD *)(v84 + 64) = &protocol witness table for Int64;
        *(_QWORD *)(v84 + 32) = v49;
        v85 = static String.localizedStringWithFormat(_:_:)(v82._countAndFlagsBits, v82._object, v84);
        v87 = v86;
        swift_bridgeObjectRelease(v82._object);
        swift_bridgeObjectRelease(v84);
        v41 = sub_10027AE00(0, 1, 1, _swiftEmptyArrayStorage);
        v89 = v41[2];
        v88 = v41[3];
        v35 = v143;
        if (v89 >= v88 >> 1)
          v41 = sub_10027AE00((_QWORD *)(v88 > 1), v89 + 1, 1, v41);
        v41[2] = v89 + 1;
        v90 = &v41[2 * v89];
        v90[4] = v85;
        v90[5] = v87;
        goto LABEL_42;
      }
      sub_10017809C(v78, (uint64_t)v24);
      v99 = v140;
      v98 = v141;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v24, 1, v140) != 1)
      {
        v100 = (*(uint64_t (**)(char *, char *, uint64_t))(v98 + 32))(v136, v24, v99);
        v101 = Date.friendlyDisplayString.getter(v100);
        v103 = v102;
        v41 = sub_10027AE00(0, 1, 1, _swiftEmptyArrayStorage);
        v105 = v41[2];
        v104 = v41[3];
        if (v105 >= v104 >> 1)
          v41 = sub_10027AE00((_QWORD *)(v104 > 1), v105 + 1, 1, v41);
        v35 = v143;
        v41[2] = v105 + 1;
        v106 = &v41[2 * v105];
        v106[4] = v101;
        v106[5] = v103;
        (*(void (**)(char *, uint64_t))(v141 + 8))(v136, v99);
LABEL_42:
        sub_1001780E4(v78);
        if ((v77 & 1) != 0)
          goto LABEL_48;
        goto LABEL_43;
      }
      sub_1001780E4(v78);
      sub_1001780E4((uint64_t)v24);
      v41 = _swiftEmptyArrayStorage;
      v35 = v143;
      if ((v77 & 1) != 0)
        goto LABEL_48;
LABEL_43:
      if (v50 > 0.0)
      {
        v107 = objc_msgSend((id)objc_opt_self(NSString), "prettyShortStringWithDuration:", v50);
        if (v107)
        {
          v108 = v107;
          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
          v40 = v109;

          if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
            v41 = sub_10027AE00(0, v41[2] + 1, 1, v41);
          v43 = v41[2];
          v42 = v41[3];
LABEL_7:
          if (v43 >= v42 >> 1)
            v41 = sub_10027AE00((_QWORD *)(v42 > 1), v43 + 1, 1, v41);
          v41[2] = v43 + 1;
          v44 = &v41[2 * v43];
          v44[4] = v38;
          v44[5] = v40;
        }
      }
LABEL_48:
      if ((v35 & 1) != 0)
      {
        v110 = v142[3];
        v111 = v142[4];
        sub_10003A834(v142, v110);
        v112 = dispatch thunk of StoreDataProvider.explicitSymbol.getter(v110, v111);
        v114 = v113;
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
          v41 = sub_10027AE00(0, v41[2] + 1, 1, v41);
        v116 = v41[2];
        v115 = v41[3];
        v117 = v116 + 1;
        if (v116 >= v115 >> 1)
          v41 = sub_10027AE00((_QWORD *)(v115 > 1), v116 + 1, 1, v41);
        v41[2] = v117;
        v118 = &v41[2 * v116];
        v118[4] = v112;
        v118[5] = v114;
      }
      else
      {
        v117 = v41[2];
        if (!v117)
        {
          v120 = _swiftEmptyArrayStorage;
          goto LABEL_68;
        }
      }
      swift_bridgeObjectRetain(v41);
      v119 = v41 + 5;
      v120 = _swiftEmptyArrayStorage;
      do
      {
        v124 = *(v119 - 1);
        v125 = *v119;
        if (v124)
          v126 = 0;
        else
          v126 = v125 == 0xE000000000000000;
        if (!v126
          && (_stringCompareWithSmolCheck(_:_:expecting:)(*(v119 - 1), *v119, 0, 0xE000000000000000, 0) & 1) == 0)
        {
          swift_bridgeObjectRetain(v125);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v120);
          v144 = v120;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100048628(0, v120[2] + 1, 1);
            v120 = v144;
          }
          v122 = v120[2];
          v121 = v120[3];
          if (v122 >= v121 >> 1)
          {
            sub_100048628(v121 > 1, v122 + 1, 1);
            v120 = v144;
          }
          v120[2] = v122 + 1;
          v123 = &v120[2 * v122];
          v123[4] = v124;
          v123[5] = v125;
        }
        v119 += 2;
        --v117;
      }
      while (v117);
      swift_bridgeObjectRelease(v41);
LABEL_68:
      v128 = swift_bridgeObjectRelease(v41);
      v144 = v120;
      v129 = static String.eyebrowSeparatorSymbol.getter(v128);
      v131 = v130;
      v132 = sub_10003F544((uint64_t *)&unk_10055FDF0);
      v133 = sub_100178050();
      v134 = BidirectionalCollection<>.joined(separator:)(v129, v131, v132, v133);
      swift_release(v120);
      swift_bridgeObjectRelease(v131);
      return v134;
    default:
      sub_10003F970((uint64_t)v31, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
LABEL_13:
      v41 = _swiftEmptyArrayStorage;
      v35 = v143;
      goto LABEL_48;
  }
}

uint64_t _s27CarPlayEpisodeSubtitleStyleOMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100554838;
  if (!qword_100554838)
    return swift_getSingletonMetadata(a1, &_s27CarPlayEpisodeSubtitleStyleOMn);
  return result;
}

uint64_t sub_100177A30(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __n128 v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char v63;
  uint64_t v65;

  v5 = _s27CarPlayEpisodeSubtitleStyleOMa(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v65 - v9;
  v11 = type metadata accessor for ShowOffer(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = EpisodeOffer.showOffer.getter(v13);
  v17 = ShowOffer.showType.getter(v16) & 1;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v18 = ShowType.rawValue.getter(v17);
  v20 = v19;
  v21 = ShowType.rawValue.getter(1);
  if (v18 == v21 && v20 == v22)
  {
    v26 = swift_bridgeObjectRelease_n(v20, 2);
    if ((a3 & 1) != 0)
    {
LABEL_7:
      v27 = EpisodeOffer.contentRating.getter(v26);
      if (v27 == 2)
      {
        v29 = 0;
      }
      else
      {
        v45 = ContentRating.rawValue.getter(v27 & 1);
        v47 = v46;
        v29 = 1;
        v49 = ContentRating.rawValue.getter(1);
        v50 = v48;
        if (v45 != v49 || (v51 = v47, v47 != v48))
        {
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v47, v49, v48, 0);
          v51 = v50;
        }
        swift_bridgeObjectRelease(v47);
        v28 = swift_bridgeObjectRelease(v51);
      }
      v52 = EpisodeOffer.seasonNumber.getter(v28);
      v54 = v53;
      v55 = EpisodeOffer.episodeNumber.getter();
      v57 = v56;
      v58 = EpisodeOffer.duration.getter(v55);
      *(_QWORD *)v10 = v52;
      v10[8] = v54 & 1;
      *((_QWORD *)v10 + 2) = v55;
      v10[24] = v57 & 1;
      *((_QWORD *)v10 + 4) = v58;
      v10[40] = v59 & 1;
      swift_storeEnumTagMultiPayload(v10, v5, 1);
      v60 = sub_100176F00(a1, v29 & 1, (uint64_t)v10);
      goto LABEL_25;
    }
  }
  else
  {
    v24 = v22;
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v24);
    if ((v25 & 1) != 0 && (a3 & 1) != 0)
      goto LABEL_7;
  }
  v30 = EpisodeOffer.contentRating.getter(v26);
  if (v30 == 2)
  {
    v31 = 0;
  }
  else
  {
    v32 = ContentRating.rawValue.getter(v30 & 1);
    v34 = v33;
    v31 = 1;
    v36 = ContentRating.rawValue.getter(1);
    v37 = v35;
    if (v32 != v36 || (v38 = v34, v34 != v35))
    {
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v36, v35, 0);
      v38 = v37;
    }
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v38);
  }
  v39 = sub_10003F544(&qword_1005547C0);
  v40 = &v8[*(int *)(v39 + 48)];
  *(_QWORD *)v8 = EpisodeOffer.episodeNumber.getter();
  v8[8] = v41 & 1;
  v42 = EpisodeOffer.releaseDate.getter();
  if (v42)
  {
    v43 = v42;
    LazyDate.value.getter();
    v44 = swift_release(v43);
  }
  else
  {
    v61 = type metadata accessor for Date(0);
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v40, 1, 1, v61);
  }
  v62 = &v8[*(int *)(v39 + 64)];
  *(_QWORD *)v62 = EpisodeOffer.duration.getter(v44);
  v62[8] = v63 & 1;
  swift_storeEnumTagMultiPayload(v8, v5, 0);
  v60 = sub_100176F00(a1, v31 & 1, (uint64_t)v8);
  v10 = v8;
LABEL_25:
  sub_10003F970((uint64_t)v10, _s27CarPlayEpisodeSubtitleStyleOMa);
  return v60;
}

uint64_t sub_100177DE8(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v28;

  v5 = _s27CarPlayEpisodeSubtitleStyleOMa(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = LegacyEpisodeLockup.showTypeIsSerial.getter(v6);
  v10 = LegacyLockup.isExplicit.getter();
  if ((v9 & 1) != 0 && (a3 & 1) != 0)
  {
    v11 = LegacyEpisodeLockup.seasonNumber.getter();
    v13 = v12;
    v14 = LegacyEpisodeLockup.episodeNumber.getter();
    v16 = v15;
    v17 = LegacyEpisodeLockup.duration.getter(v14);
    *(_QWORD *)v8 = v11;
    v8[8] = v13 & 1;
    *((_QWORD *)v8 + 2) = v14;
    v8[24] = v16 & 1;
    *((_QWORD *)v8 + 4) = v17;
    v8[40] = v18 & 1;
    v19 = 1;
  }
  else
  {
    v20 = &v8[*(int *)(sub_10003F544(&qword_1005547C0) + 64)];
    v21 = LegacyEpisodeLockup.episodeNumber.getter();
    *(_QWORD *)v8 = v21;
    v8[8] = v22 & 1;
    v23 = LegacyEpisodeLockup.releaseDate.getter(v21);
    v24 = LegacyEpisodeLockup.duration.getter(v23);
    v19 = 0;
    *(_QWORD *)v20 = v24;
    v20[8] = v25 & 1;
  }
  swift_storeEnumTagMultiPayload(v8, v5, v19);
  v26 = sub_100176F00(a1, v10 & 1, (uint64_t)v8);
  sub_10003F970((uint64_t)v8, _s27CarPlayEpisodeSubtitleStyleOMa);
  return v26;
}

uint64_t sub_100177F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double *v3;
  uint64_t (*v4)(_QWORD);
  int v5;
  uint64_t result;
  float v7;
  float v8;
  uint64_t v9;

  v1 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v1);
  v3 = (double *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10014FDF8(v0, (uint64_t)v3, v4);
  v5 = swift_getEnumCaseMultiPayload(v3, v1) - 1;
  *(double *)&result = 0.0;
  switch(v5)
  {
    case 0:
    case 2:
      v7 = v3[1];
      v8 = *v3;
      if (v8 >= v7)
        goto LABEL_5;
      *(double *)&result = (float)(v8 / v7);
      break;
    case 1:
      sub_1001780E4((uint64_t)v3);
      *(double *)&result = 1.0;
      break;
    case 3:
      return result;
    default:
      sub_10003F970((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
LABEL_5:
      *(double *)&result = 0.0;
      break;
  }
  return result;
}

unint64_t sub_100178050()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005547B8;
  if (!qword_1005547B8)
  {
    v1 = sub_10003CA40((uint64_t *)&unk_10055FDF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005547B8);
  }
  return result;
}

uint64_t sub_10017809C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_1005522F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001780E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_1005522F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_BYTE *sub_100178124(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (_BYTE *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v8);
  }
  else if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[8] = a2[8];
    v9 = sub_10003F544(&qword_1005547C0);
    v10 = *(int *)(v9 + 48);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_10003F544(&qword_1005522F0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v16 = *(int *)(v9 + 64);
    v17 = &a1[v16];
    v18 = &a2[v16];
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

uint64_t sub_100178284(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if (!(_DWORD)result)
  {
    v4 = a1 + *(int *)(sub_10003F544(&qword_1005547C0) + 48);
    v5 = type metadata accessor for Date(0);
    v6 = *(_QWORD *)(v5 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

_BYTE *sub_100178308(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[8] = a2[8];
    v6 = sub_10003F544(&qword_1005547C0);
    v7 = *(int *)(v6 + 48);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_10003F544(&qword_1005522F0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v13 = *(int *)(v6 + 64);
    v14 = &a1[v13];
    v15 = &a2[v13];
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_BYTE *sub_100178440(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_10003F970((uint64_t)a1, _s27CarPlayEpisodeSubtitleStyleOMa);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = *(_QWORD *)a2;
      a1[8] = a2[8];
      *(_QWORD *)a1 = v6;
      v7 = sub_10003F544(&qword_1005547C0);
      v8 = *(int *)(v7 + 48);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for Date(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_10003F544(&qword_1005522F0);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      v14 = *(int *)(v7 + 64);
      v15 = &a1[v14];
      v16 = &a2[v14];
      v17 = *(_QWORD *)v16;
      v15[8] = v16[8];
      *(_QWORD *)v15 = v17;
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

_BYTE *sub_100178590(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[8] = a2[8];
    v6 = sub_10003F544(&qword_1005547C0);
    v7 = *(int *)(v6 + 48);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_10003F544(&qword_1005522F0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v13 = *(int *)(v6 + 64);
    v14 = &a1[v13];
    v15 = &a2[v13];
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_BYTE *sub_1001786C8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;

  if (a1 != a2)
  {
    sub_10003F970((uint64_t)a1, _s27CarPlayEpisodeSubtitleStyleOMa);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v6 = sub_10003F544(&qword_1005547C0);
      v7 = *(int *)(v6 + 48);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for Date(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = sub_10003F544(&qword_1005522F0);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      v13 = *(int *)(v6 + 64);
      v14 = &a1[v13];
      v15 = &a2[v13];
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v14[8] = v15[8];
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PodcastsPlayerAdapter.CurrentItemType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for PodcastsPlayerAdapter.CurrentItemType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100178834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void sub_100178844(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  sub_100005A58(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3(v4, "\t", *(_QWORD *)(v2 - 8) + 64, "\t");
    v5[0] = v4;
    v5[1] = &unk_1003CAFC8;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
  }
}

uint64_t sub_1001788C8(uint64_t a1)
{
  return sub_1001788F0(a1, (uint64_t (*)(uint64_t))&type metadata accessor for LibraryEpisodeLockup, (unint64_t *)&unk_100554A50);
}

uint64_t sub_1001788DC(uint64_t a1)
{
  return sub_1001788F0(a1, (uint64_t (*)(uint64_t))&type metadata accessor for LibraryShowLockup, &qword_100554A38);
}

uint64_t sub_1001788F0(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v21 = _swiftEmptyArrayStorage;
  result = sub_10017AFB8(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = v21;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v9 = 0;
      do
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
        v21 = v7;
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          sub_10017AFB8(v11 > 1, v12 + 1, 1);
          v7 = v21;
        }
        ++v9;
        v19 = a2(0);
        v20 = sub_100026844(a3, a2, (uint64_t)&protocol conformance descriptor for LegacyLockup);
        *(_QWORD *)&v18 = v10;
        v7[2] = v12 + 1;
        sub_10002099C(&v18, (uint64_t)&v7[5 * v12 + 4]);
      }
      while (v6 != v9);
    }
    else
    {
      v13 = (uint64_t *)(a1 + 32);
      do
      {
        v14 = *v13;
        v21 = v7;
        v16 = v7[2];
        v15 = v7[3];
        swift_retain(v14);
        if (v16 >= v15 >> 1)
        {
          sub_10017AFB8(v15 > 1, v16 + 1, 1);
          v7 = v21;
        }
        v19 = a2(0);
        v20 = sub_100026844(a3, a2, (uint64_t)&protocol conformance descriptor for LegacyLockup);
        *(_QWORD *)&v18 = v14;
        v7[2] = v16 + 1;
        sub_10002099C(&v18, (uint64_t)&v7[5 * v16 + 4]);
        ++v13;
        --v6;
      }
      while (v6);
    }
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100178AE4(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = _swiftEmptyArrayStorage;
    sub_10017AFE4(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10017AFE4(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10017AFE4(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v4 += 2;
      v2[2] = v7 + 1;
      sub_10013B9CC(v10, &v2[4 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_100178C08(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v17 = _swiftEmptyArrayStorage;
  result = sub_10017B02C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v17 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10017B02C(v7 > 1, v8 + 1, 1);
          v3 = v17;
        }
        ++v5;
        v15 = type metadata accessor for LegacyLockup(0);
        v16 = sub_100026844(&qword_100554A20, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyLockup, (uint64_t)&protocol conformance descriptor for LegacyLockup);
        *(_QWORD *)&v14 = v6;
        v3[2] = v8 + 1;
        sub_10002099C(&v14, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (uint64_t *)(a1 + 32);
      do
      {
        v10 = *v9;
        v17 = v3;
        v12 = v3[2];
        v11 = v3[3];
        swift_retain(v10);
        if (v12 >= v11 >> 1)
        {
          sub_10017B02C(v11 > 1, v12 + 1, 1);
          v3 = v17;
        }
        v15 = type metadata accessor for LegacyLockup(0);
        v16 = sub_100026844(&qword_100554A20, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyLockup, (uint64_t)&protocol conformance descriptor for LegacyLockup);
        *(_QWORD *)&v14 = v10;
        v3[2] = v12 + 1;
        sub_10002099C(&v14, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_100178E10(uint64_t a1)
{
  return sub_100178E38(a1, (unint64_t *)&qword_100554908, off_1004A4538);
}

uint64_t sub_100178E24(uint64_t a1)
{
  return sub_100178E38(a1, (unint64_t *)&qword_1005547A0, NSSortDescriptor_ptr);
}

uint64_t sub_100178E38(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  _OWORD v20[2];
  _QWORD *v21;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v21 = _swiftEmptyArrayStorage;
  result = sub_10017AFE4(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v6; ++i)
      {
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v10 = sub_100005EC8(0, a2, a3);
        swift_dynamicCast(v20, &v19, v10, (char *)&type metadata for Any + 8, 7);
        v7 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        {
          sub_10017AFE4(0, v7[2] + 1, 1);
          v7 = v21;
        }
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          sub_10017AFE4(v11 > 1, v12 + 1, 1);
          v7 = v21;
        }
        v7[2] = v12 + 1;
        sub_10013B9CC(v20, &v7[4 * v12 + 4]);
      }
    }
    else
    {
      v13 = (id *)(a1 + 32);
      v14 = sub_100005EC8(0, a2, a3);
      do
      {
        v19 = *v13;
        v15 = v19;
        swift_dynamicCast(v20, &v19, v14, (char *)&type metadata for Any + 8, 7);
        v7 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        {
          sub_10017AFE4(0, v7[2] + 1, 1);
          v7 = v21;
        }
        v17 = v7[2];
        v16 = v7[3];
        if (v17 >= v16 >> 1)
        {
          sub_10017AFE4(v16 > 1, v17 + 1, 1);
          v7 = v21;
        }
        v7[2] = v17 + 1;
        sub_10013B9CC(v20, &v7[4 * v17 + 4]);
        ++v13;
        --v6;
      }
      while (v6);
    }
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100179088(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = _swiftEmptyArrayStorage;
    sub_10017AFE4(0, v1, 0);
    v4 = (uint64_t *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v9 = *v4;
      swift_bridgeObjectRetain(v9);
      v5 = sub_10003F544(&qword_1005549E0);
      swift_dynamicCast(v10, &v9, v5, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10017AFE4(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10017AFE4(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v2[2] = v7 + 1;
      sub_10013B9CC(v10, &v2[4 * v7 + 4]);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1001791B4(uint64_t a1)
{
  return sub_100178E38(a1, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
}

uint64_t sub_1001791C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = sub_10003F544(&qword_1005544F0);
    v6 = _bridgeCocoaArray<A>(_:)(v4, v5);
    swift_bridgeObjectRelease(a1);
    return v6;
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v2);
    return a1;
  }
}

uint64_t sub_100179240(uint64_t a1)
{
  return sub_100179490(a1, (void (*)(BOOL, unint64_t, uint64_t))sub_10017B398, (uint64_t (*)(_QWORD))type metadata accessor for ShowData, (uint64_t)&off_1004BC1F0, (void (*)(_QWORD *, unint64_t *))sub_10002099C);
}

uint64_t sub_100179264(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v17 = _swiftEmptyArrayStorage;
  result = sub_10017B3E0(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v17 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10017B3E0(v7 > 1, v8 + 1, 1);
          v3 = v17;
        }
        ++v5;
        v15 = type metadata accessor for Action(0);
        v16 = sub_100026844((unint64_t *)&qword_100554910, (uint64_t (*)(uint64_t))&type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
        *(_QWORD *)&v14 = v6;
        v3[2] = v8 + 1;
        sub_10002099C(&v14, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (uint64_t *)(a1 + 32);
      do
      {
        v10 = *v9;
        v17 = v3;
        v12 = v3[2];
        v11 = v3[3];
        swift_retain();
        if (v12 >= v11 >> 1)
        {
          sub_10017B3E0(v11 > 1, v12 + 1, 1);
          v3 = v17;
        }
        v15 = type metadata accessor for Action(0);
        v16 = sub_100026844((unint64_t *)&qword_100554910, (uint64_t (*)(uint64_t))&type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
        *(_QWORD *)&v14 = v10;
        v3[2] = v12 + 1;
        sub_10002099C(&v14, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_10017946C(uint64_t a1)
{
  return sub_100179490(a1, (void (*)(BOOL, unint64_t, uint64_t))sub_10017B428, (uint64_t (*)(_QWORD))type metadata accessor for MTNotificationTestAction.PostFakeContentStep, (uint64_t)&off_1004B0C50, (void (*)(_QWORD *, unint64_t *))sub_10002099C);
}

uint64_t sub_100179490(uint64_t a1, void (*a2)(BOOL, unint64_t, uint64_t), uint64_t (*a3)(_QWORD), uint64_t a4, void (*a5)(_QWORD *, unint64_t *))
{
  uint64_t v10;
  unint64_t *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(BOOL, unint64_t, uint64_t);
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v11 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (!v10)
    return (uint64_t)v11;
  v26 = (unint64_t *)&_swiftEmptyArrayStorage;
  result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))a2)(0, v10 & ~(v10 >> 63), 0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    v22 = a2;
    v11 = v26;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v13 = 0;
      do
      {
        v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
        v26 = v11;
        v16 = v11[2];
        v15 = v11[3];
        if (v16 >= v15 >> 1)
        {
          v22(v15 > 1, v16 + 1, 1);
          v11 = v26;
        }
        ++v13;
        v24 = a3(0);
        v25 = a4;
        v23[0] = v14;
        v11[2] = v16 + 1;
        a5(v23, &v11[5 * v16 + 4]);
      }
      while (v10 != v13);
    }
    else
    {
      v17 = (uint64_t *)(a1 + 32);
      do
      {
        v18 = *v17;
        v26 = v11;
        v19 = v11[2];
        v20 = v11[3];
        swift_retain(v18);
        if (v19 >= v20 >> 1)
        {
          v22(v20 > 1, v19 + 1, 1);
          v11 = v26;
        }
        v24 = a3(0);
        v25 = a4;
        v23[0] = v18;
        v11[2] = v19 + 1;
        a5(v23, &v11[5 * v19 + 4]);
        ++v17;
        --v10;
      }
      while (v10);
    }
    return (uint64_t)v11;
  }
  __break(1u);
  return result;
}

id NonFollowedShowsSyncStorage.importContext.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_importContext);
}

id sub_100179674()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t NonFollowedShows;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t ObjectType;
  _BYTE v14[24];

  v1 = (void *)objc_opt_self(MTDB);
  v2 = v0;
  v3 = objc_msgSend(v1, "sharedInstance");
  v4 = objc_msgSend(v3, "importContext");

  NonFollowedShows = type metadata accessor for FetchNonFollowedShows();
  v6 = swift_allocObject(NonFollowedShows, 24, 7);
  *(_QWORD *)(v6 + 16) = v4;
  v7 = qword_1005520B8;
  v8 = v4;
  if (v7 != -1)
    swift_once(&qword_1005520B8, sub_10004AB18);
  swift_beginAccess(&static PodcastsStateCoordinator.shared, v14, 0, 0);
  v9 = (id)static PodcastsStateCoordinator.shared;

  v10 = sub_10017CE74((uint64_t)v8, v6, (uint64_t)v9);
  ObjectType = swift_getObjectType(v2, v11);
  swift_deallocPartialClassInstance(v2, ObjectType, 96, 7);
  return v10;
}

id NonFollowedShowsSyncStorage.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NonFollowedShowsSyncStorage();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NonFollowedShowsSyncStorage()
{
  return objc_opt_self(_TtC8Podcasts27NonFollowedShowsSyncStorage);
}

id sub_100179854()
{
  _QWORD *v0;

  return *(id *)(*v0 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_importContext);
}

uint64_t NonFollowedShowsSyncStorage.isNonFollowedShowsSyncDirty.getter()
{
  void *v0;
  char v1;

  type metadata accessor for SyncKeysRepository(0);
  v0 = (void *)static SyncKeysRepository.shared.getter();
  v1 = SyncKeysRepository.isNonFollowedShowsSyncDirty.getter();

  return v1 & 1;
}

void NonFollowedShowsSyncStorage.isNonFollowedShowsSyncDirty.setter(uint64_t a1)
{
  id v2;

  type metadata accessor for SyncKeysRepository(0);
  v2 = (id)static SyncKeysRepository.shared.getter();
  SyncKeysRepository.isNonFollowedShowsSyncDirty.setter(a1);

}

void (*NonFollowedShowsSyncStorage.isNonFollowedShowsSyncDirty.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  char v4;

  v2 = type metadata accessor for SyncKeysRepository(0);
  *(_QWORD *)a1 = v2;
  v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  v4 = SyncKeysRepository.isNonFollowedShowsSyncDirty.getter();

  *(_BYTE *)(a1 + 8) = v4 & 1;
  return sub_10017994C;
}

void sub_10017994C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = (id)static SyncKeysRepository.shared.getter();
  SyncKeysRepository.isNonFollowedShowsSyncDirty.setter(v1);

}

uint64_t NonFollowedShowsSyncStorage.nonFollowedShowsLastSyncTimestamp.getter()
{
  void *v0;
  uint64_t Sync;

  type metadata accessor for SyncKeysRepository(0);
  v0 = (void *)static SyncKeysRepository.shared.getter();
  Sync = SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.getter();

  return Sync;
}

void NonFollowedShowsSyncStorage.nonFollowedShowsLastSyncTimestamp.setter(uint64_t a1, char a2)
{
  uint64_t v4;
  id v5;

  type metadata accessor for SyncKeysRepository(0);
  v5 = (id)static SyncKeysRepository.shared.getter();
  if ((a2 & 1) != 0)
    v4 = 0;
  else
    v4 = a1;
  SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.setter(v4, 0);

}

void (*sub_100179A3C(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = NonFollowedShowsSyncStorage.nonFollowedShowsLastSyncTimestamp.modify((uint64_t)v2);
  return sub_100179A78;
}

void (*NonFollowedShowsSyncStorage.nonFollowedShowsLastSyncTimestamp.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t Sync;
  char v5;
  char v6;

  v2 = type metadata accessor for SyncKeysRepository(0);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  Sync = SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.getter();
  v6 = v5;

  *(_QWORD *)a1 = Sync;
  *(_BYTE *)(a1 + 8) = v6 & 1;
  return sub_100179AE0;
}

void sub_100179AE0(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  id v4;

  v1 = *a1;
  v2 = *((unsigned __int8 *)a1 + 8);
  v4 = (id)static SyncKeysRepository.shared.getter();
  if (v2)
    v3 = 0;
  else
    v3 = v1;
  SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.setter(v3, 0);

}

uint64_t sub_100179B38(uint64_t a1, uint64_t a2)
{
  return sub_100179C18(a1, a2, (uint64_t (*)(void))&SyncKeysRepository.nonFollowedShowsSyncVersion.getter);
}

uint64_t NonFollowedShowsSyncStorage.syncVersion.getter()
{
  return sub_100179C74((uint64_t (*)(void))&SyncKeysRepository.nonFollowedShowsSyncVersion.getter);
}

void sub_100179B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100179CD0(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))&SyncKeysRepository.nonFollowedShowsSyncVersion.setter);
}

void NonFollowedShowsSyncStorage.syncVersion.setter(uint64_t a1, uint64_t a2)
{
  sub_100179D3C(a1, a2, (void (*)(uint64_t, uint64_t))&SyncKeysRepository.nonFollowedShowsSyncVersion.setter);
}

void (*sub_100179B68(uint64_t **a1))(_QWORD *)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)NonFollowedShowsSyncStorage.syncVersion.modify(v2);
  return sub_100179A78;
}

void (*NonFollowedShowsSyncStorage.syncVersion.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for SyncKeysRepository(0);
  a1[2] = v2;
  v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  v4 = SyncKeysRepository.nonFollowedShowsSyncVersion.getter();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return sub_100179C00;
}

void sub_100179C00(uint64_t *a1, char a2)
{
  sub_100179E6C(a1, a2, (void (*)(uint64_t, uint64_t))&SyncKeysRepository.nonFollowedShowsSyncVersion.setter);
}

uint64_t sub_100179C0C(uint64_t a1, uint64_t a2)
{
  return sub_100179C18(a1, a2, (uint64_t (*)(void))&SyncKeysRepository.podcastsDomainVersion.getter);
}

uint64_t sub_100179C18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  void *v4;
  uint64_t v5;

  type metadata accessor for SyncKeysRepository(0);
  v4 = (void *)static SyncKeysRepository.shared.getter();
  v5 = a3();

  return v5;
}

uint64_t NonFollowedShowsSyncStorage.podcastsDomainVersion.getter()
{
  return sub_100179C74((uint64_t (*)(void))&SyncKeysRepository.podcastsDomainVersion.getter);
}

uint64_t sub_100179C74(uint64_t (*a1)(void))
{
  void *v2;
  uint64_t v3;

  type metadata accessor for SyncKeysRepository(0);
  v2 = (void *)static SyncKeysRepository.shared.getter();
  v3 = a1();

  return v3;
}

void sub_100179CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100179CD0(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))&SyncKeysRepository.podcastsDomainVersion.setter);
}

void sub_100179CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  id v8;

  type metadata accessor for SyncKeysRepository(0);
  v8 = (id)static SyncKeysRepository.shared.getter();
  a5(a1, a2);

}

void NonFollowedShowsSyncStorage.podcastsDomainVersion.setter(uint64_t a1, uint64_t a2)
{
  sub_100179D3C(a1, a2, (void (*)(uint64_t, uint64_t))&SyncKeysRepository.podcastsDomainVersion.setter);
}

void sub_100179D3C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  id v6;

  type metadata accessor for SyncKeysRepository(0);
  v6 = (id)static SyncKeysRepository.shared.getter();
  a3(a1, a2);

}

void (*sub_100179D9C(uint64_t **a1))(_QWORD *)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)NonFollowedShowsSyncStorage.podcastsDomainVersion.modify(v2);
  return sub_100179A78;
}

void sub_100179DD8(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*NonFollowedShowsSyncStorage.podcastsDomainVersion.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for SyncKeysRepository(0);
  a1[2] = v2;
  v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  v4 = SyncKeysRepository.podcastsDomainVersion.getter();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return sub_100179E60;
}

void sub_100179E60(uint64_t *a1, char a2)
{
  sub_100179E6C(a1, a2, (void (*)(uint64_t, uint64_t))&SyncKeysRepository.podcastsDomainVersion.setter);
}

void sub_100179E6C(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v5 = *a1;
  v4 = a1[1];
  if ((a2 & 1) != 0)
  {
    v6 = swift_bridgeObjectRetain(a1[1]);
    v7 = (id)static SyncKeysRepository.shared.getter(v6);
    a3(v5, v4);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v7 = (id)((uint64_t (*)(void))static SyncKeysRepository.shared.getter)();
    a3(v5, v4);
  }

}

BOOL sub_100179EF4()
{
  return NonFollowedShowsSyncStorage.fetchHasLocalChanges()();
}

Swift::Bool __swiftcall NonFollowedShowsSyncStorage.fetchHasLocalChanges()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t Sync;
  char v16;
  char v17;
  double v18;
  void *v19;
  id v20;
  Class isa;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString v30;
  id v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  id v38;
  char isEscapingClosureAtFileLocation;
  Swift::Bool result;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[3];
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Podcasts(0);
  v44 = (void *)v6;
  v45 = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v7 = sub_1000242A8(aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v7, enum case for Podcasts.simplifiedSyncDirtyHandling(_:), v6);
  v8 = isFeatureEnabled(_:)(aBlock);
  sub_10003D380(aBlock);
  v9 = type metadata accessor for SyncKeysRepository(0);
  v10 = (void *)static SyncKeysRepository.shared.getter(v9);
  v11 = SyncKeysRepository.isNonFollowedShowsSyncDirty.getter();

  v13 = v8 ^ 1 | v11;
  if ((v8 & 1) != 0 || (v11 & 1) != 0)
    return v13 & 1;
  v14 = (void *)static SyncKeysRepository.shared.getter(v12);
  Sync = SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.getter();
  v17 = v16;

  v18 = *(double *)&Sync;
  if ((v17 & 1) != 0)
    v18 = 0.0;
  Date.init(timeIntervalSinceReferenceDate:)(v18);
  v19 = (void *)objc_opt_self(MTPodcast);
  v20 = objc_msgSend(v19, "predicateForNonFollowedShowsWithPlayState");
  isa = Date._bridgeToObjectiveC()().super.isa;
  v22 = objc_msgSend(v19, "predicateForLastDatePlayedAfterDate:", isa);

  v23 = objc_msgSend(v20, "AND:", v22);
  v42 = v3;
  v24 = v23;

  v25 = objc_msgSend(v19, "predicateForLastDatePlayedNotInTheFuture");
  v26 = objc_msgSend(v24, "AND:", v25);

  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v28 = v27;
  v29 = objc_allocWithZone((Class)NSFetchRequest);
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  v31 = objc_msgSend(v29, "initWithEntityName:", v30);

  objc_msgSend(v31, "setIncludesPropertyValues:", 0);
  objc_msgSend(v31, "setIncludesSubentities:", 0);
  objc_msgSend(v31, "setFetchLimit:", 1);
  objc_msgSend(v31, "setPredicate:", v26);
  v47 = 0;
  v32 = *(void **)&v1[OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_importContext];
  v33 = (_QWORD *)swift_allocObject(&unk_1004B0B38, 40, 7);
  v33[2] = v1;
  v33[3] = v31;
  v33[4] = &v47;
  v34 = swift_allocObject(&unk_1004B0B60, 32, 7);
  *(_QWORD *)(v34 + 16) = sub_10017AF70;
  *(_QWORD *)(v34 + 24) = v33;
  v45 = (uint64_t)sub_100029B3C;
  v46 = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  v44 = &unk_1004B0B78;
  v35 = _Block_copy(aBlock);
  v36 = v46;
  v37 = v1;
  v38 = v31;
  swift_retain(v34);
  swift_release(v36);
  objc_msgSend(v32, "performBlockAndWait:", v35);
  _Block_release(v35);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v5, v2);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v34, "", 122, 127, 42, 1);
  result = swift_release(v34);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v41 = v47;
    swift_release(v33);
    v13 = v41 > 0;
    return v13 & 1;
  }
  __break(1u);
  return result;
}

void sub_10017A318()
{
  NonFollowedShowsSyncStorage.fetchNonFollowedShowsDictionaries()();
}

void NonFollowedShowsSyncStorage.fetchNonFollowedShowsDictionaries()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  double v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  _QWORD *v52;
  int64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  id v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79[16];
  uint64_t v80;
  id v81;
  __int128 v82;
  void *v83;
  _QWORD v84[4];
  _QWORD *v85;

  v1 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v1);
  v3 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v71 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v7 = v6;
  v8 = objc_allocWithZone((Class)NSFetchRequest);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v10 = objc_msgSend(v8, "initWithEntityName:", v9);

  v11 = objc_msgSend((id)objc_opt_self(MTPodcast), "predicateForNonFollowedShowsWithPlayState");
  objc_msgSend(v10, "setPredicate:", v11);

  v12 = static RemoteNonFollowedShow.allSyncKeys.getter(objc_msgSend(v10, "setResultType:", 2));
  v13 = sub_100178AE4(v12);
  swift_bridgeObjectRelease(v12);
  v72 = (char *)&type metadata for Any + 8;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v10, "setPropertiesToFetch:", isa);

  v80 = *sub_10003A834((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_fetchNonFollowedShows), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_fetchNonFollowedShows + 24));
  v81 = v10;
  v15 = sub_10003F544((uint64_t *)&unk_100554890);
  NSManagedObjectContext.performAndWait<A>(_:)(v84, sub_10017AF8C, v79, v15);
  v16 = v84[0];
  v17 = *(_QWORD *)(v84[0] + 16);
  if (v17)
  {
    v66 = v10;
    v85 = _swiftEmptyArrayStorage;
    sub_10017B16C(0, v17, 0);
    v69 = sub_10003F544(&qword_100552958);
    v18 = 0;
    v65 = v16;
    v68 = v16 + 32;
    v78 = v4;
    v67 = v17;
    while (1)
    {
      v19 = *(_QWORD *)(v68 + 8 * v18);
      v70 = v18 + 1;
      v20 = static _DictionaryStorage.copy(original:)(v19);
      v21 = (_QWORD *)v20;
      v22 = 1 << *(_BYTE *)(v19 + 32);
      v23 = *(_QWORD *)(v19 + 64);
      v74 = v19 + 64;
      if (v22 < 64)
        v24 = ~(-1 << v22);
      else
        v24 = -1;
      v25 = v24 & v23;
      v75 = (unint64_t)(v22 + 63) >> 6;
      v76 = v20 + 64;
      v77 = v19;
      swift_bridgeObjectRetain(v19);
      v26 = 0;
      v27 = v72;
      v28 = v73;
      if (v25)
      {
LABEL_7:
        v29 = __clz(__rbit64(v25));
        v25 &= v25 - 1;
        v30 = v29 | (v26 << 6);
        goto LABEL_22;
      }
      while (1)
      {
        v31 = v26 + 1;
        if (__OFADD__(v26, 1))
          goto LABEL_45;
        if (v31 >= v75)
          break;
        v32 = *(_QWORD *)(v74 + 8 * v31);
        ++v26;
        if (v32)
          goto LABEL_21;
        v26 = v31 + 1;
        if (v31 + 1 >= v75)
          break;
        v32 = *(_QWORD *)(v74 + 8 * v26);
        if (v32)
          goto LABEL_21;
        v26 = v31 + 2;
        if (v31 + 2 >= v75)
          break;
        v32 = *(_QWORD *)(v74 + 8 * v26);
        if (v32)
          goto LABEL_21;
        v33 = v31 + 3;
        if (v33 >= v75)
          break;
        v32 = *(_QWORD *)(v74 + 8 * v33);
        if (!v32)
        {
          while (1)
          {
            v26 = v33 + 1;
            if (__OFADD__(v33, 1))
              goto LABEL_46;
            if (v26 >= v75)
              goto LABEL_30;
            v32 = *(_QWORD *)(v74 + 8 * v26);
            ++v33;
            if (v32)
              goto LABEL_21;
          }
        }
        v26 = v33;
LABEL_21:
        v25 = (v32 - 1) & v32;
        v30 = __clz(__rbit64(v32)) + (v26 << 6);
LABEL_22:
        v34 = (uint64_t *)(*(_QWORD *)(v77 + 48) + 16 * v30);
        v36 = *v34;
        v35 = v34[1];
        sub_10003D344(*(_QWORD *)(v77 + 56) + 32 * v30, (uint64_t)v84);
        sub_10003D344((uint64_t)v84, (uint64_t)&v82);
        swift_bridgeObjectRetain(v35);
        v37 = swift_dynamicCast(v3, &v82, v27, v28, 6);
        v38 = v3;
        v39 = v78;
        v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
        if (v37)
        {
          v40(v38, 0, 1, v28);
          v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v38, 1, v28);
          v3 = v38;
          if (v41 != 1)
          {
            v42 = v78;
            v43 = v71;
            v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v78 + 32))(v71, v38, v28);
            v45 = Date.timeIntervalSinceReferenceDate.getter(v44);
            v83 = &type metadata for Double;
            *(double *)&v82 = v45;
            v46 = *(void (**)(char *, uint64_t))(v42 + 8);
            v3 = v38;
            v47 = v43;
            v27 = v72;
            v28 = v73;
            v46(v47, v73);
            goto LABEL_27;
          }
        }
        else
        {
          v40(v38, 1, 1, v28);
          v3 = v38;
        }
        sub_1001780E4((uint64_t)v3);
        sub_10003D344((uint64_t)v84, (uint64_t)&v82);
LABEL_27:
        sub_10003D380(v84);
        *(_QWORD *)(v76 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
        v48 = (_QWORD *)(v21[6] + 16 * v30);
        *v48 = v36;
        v48[1] = v35;
        sub_10013B9CC(&v82, (_OWORD *)(v21[7] + 32 * v30));
        v49 = v21[2];
        v50 = __OFADD__(v49, 1);
        v51 = v49 + 1;
        if (v50)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }
        v21[2] = v51;
        if (v25)
          goto LABEL_7;
      }
LABEL_30:
      swift_bridgeObjectRelease(v77);
      v52 = v85;
      if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
      {
        sub_10017B16C(0, v52[2] + 1, 1);
        v52 = v85;
      }
      v53 = v67;
      v18 = v70;
      v55 = v52[2];
      v54 = v52[3];
      if (v55 >= v54 >> 1)
      {
        sub_10017B16C(v54 > 1, v55 + 1, 1);
        v52 = v85;
      }
      v52[2] = v55 + 1;
      v52[v55 + 4] = v21;
      if (v18 == v53)
      {
        swift_bridgeObjectRelease(v65);
        v10 = v66;
        v56 = v52[2];
        if (v56)
          goto LABEL_39;
        goto LABEL_43;
      }
    }
  }
  swift_bridgeObjectRelease(v84[0]);
  v52 = _swiftEmptyArrayStorage;
  v56 = _swiftEmptyArrayStorage[2];
  if (v56)
  {
LABEL_39:
    v84[0] = _swiftEmptyArrayStorage;
    sub_10017B16C(0, v56, 0);
    v57 = type metadata accessor for RemoteNonFollowedShow(0);
    v58 = 0;
    v59 = v84[0];
    do
    {
      v60 = v52[v58 + 4];
      v61 = swift_bridgeObjectRetain(v60);
      v62 = Dictionary<>.flatteningUnknownSyncProperties<A>(for:)(v57, v60, v57, &protocol witness table for RemoteNonFollowedShow, v61);
      swift_bridgeObjectRelease(v60);
      v84[0] = v59;
      v64 = *(_QWORD *)(v59 + 16);
      v63 = *(_QWORD *)(v59 + 24);
      if (v64 >= v63 >> 1)
      {
        sub_10017B16C(v63 > 1, v64 + 1, 1);
        v59 = v84[0];
      }
      ++v58;
      *(_QWORD *)(v59 + 16) = v64 + 1;
      *(_QWORD *)(v59 + 8 * v64 + 32) = v62;
    }
    while (v56 != v58);
  }
LABEL_43:
  swift_bridgeObjectRelease(v52);

}

uint64_t sub_10017A9F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (_QWORD *)(*v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator);
  v6 = v5[3];
  v7 = v5[4];
  sub_10003A834(v5, v6);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeInsertNewImplicitFollow(for:from:in:)(a1, 2, a2, v6, v7);
}

uint64_t NonFollowedShowsSyncStorage.unsafeInsertNewImplicitFollow(for:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator + 24);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator + 32);
  sub_10003A834((_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator), v5);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeInsertNewImplicitFollow(for:from:in:)(a1, 2, a2, v5, v6);
}

uint64_t sub_10017AABC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (_QWORD *)(*v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator);
  v6 = v5[3];
  v7 = v5[4];
  sub_10003A834(v5, v6);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeImplicitlyFollowIfNeeded(_:for:from:)(a1, a2, 2, v6, v7);
}

uint64_t NonFollowedShowsSyncStorage.unsafeImplicitlyFollowIfNeeded(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator + 24);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator + 32);
  sub_10003A834((_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator), v5);
  return dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeImplicitlyFollowIfNeeded(_:for:from:)(a1, a2, 2, v5, v6);
}

void sub_10017AB88(Swift::OpaquePointer a1)
{
  NonFollowedShowsSyncStorage.unsafeRemoveImplicitFollowsIfNeeded(for:)(a1);
}

Swift::Void __swiftcall NonFollowedShowsSyncStorage.unsafeRemoveImplicitFollowsIfNeeded(for:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t rawValue;

  if (!((unint64_t)a1._rawValue >> 62))
  {
    v3 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1._rawValue);
    if (v3)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(a1._rawValue);
    return;
  }
  if ((uint64_t)a1._rawValue < 0)
    rawValue = (unint64_t)a1._rawValue;
  else
    rawValue = (unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1._rawValue);
  v3 = _CocoaArrayWrapper.endIndex.getter(rawValue);
  if (!v3)
    goto LABEL_13;
LABEL_3:
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator);
    do
    {
      if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1._rawValue);
      else
        v6 = *((id *)a1._rawValue + v4 + 4);
      v7 = v6;
      ++v4;
      v8 = v5[3];
      v9 = v5[4];
      sub_10003A834(v5, v8);
      dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeRemoveImplicitFollowIfNeeded(_:from:)(v7, 2, v8, v9);

    }
    while (v3 != v4);
    goto LABEL_13;
  }
  __break(1u);
}

void static NonFollowedShowsSyncStorage.resetNonFollowedShowsSync()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v0 = type metadata accessor for SyncKeysRepository(0);
  v1 = (void *)static SyncKeysRepository.shared.getter(v0);
  SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.setter(0, 1);

  v3 = (void *)static SyncKeysRepository.shared.getter(v2);
  SyncKeysRepository.nonFollowedShowsSyncVersion.setter(0, 0);

  v5 = (id)static SyncKeysRepository.shared.getter(v4);
  SyncKeysRepository.isNonFollowedShowsSyncDirty.setter(1);

}

uint64_t sub_10017ADB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;

  v5 = type metadata accessor for OSSignpostID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static os_signpost_type_t.begin.getter(v7);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v11 = (void *)static OS_os_log.cloudSyncSignpost.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "isNonFollowedShowsSyncDirty.Query", 33, 2, v9);

  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v9, v5);
  v13 = sub_100005EC8(0, (unint64_t *)&qword_100553810, MTPodcast_ptr);
  v14 = NSManagedObjectContext.count<A>(for:)(a2, v13);
  *a3 = v14;
  v15 = static os_signpost_type_t.end.getter(v14);
  v16 = (void *)static OS_os_log.cloudSyncSignpost.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v15, &_mh_execute_header, v16, "isNonFollowedShowsSyncDirty.Query", 33, 2, v9);

  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v5);
}

uint64_t sub_10017AF44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10017AF70()
{
  uint64_t v0;

  return sub_10017ADB0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_10017AF7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017AF8C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100213DC0(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10017AF94(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017CD1C(a1, a2, a3, *v3, &qword_100554960);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017AFB8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017CB78(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100554A40, &qword_1005545F0);
  *v3 = result;
  return result;
}

uint64_t sub_10017AFE4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017B4A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B000(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C340(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100554A10, &qword_100553D30);
  *v3 = result;
  return result;
}

uint64_t sub_10017B02C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017CB78(a1, a2, a3, (_QWORD *)*v3, &qword_100554A28, &qword_100554A30);
  *v3 = result;
  return result;
}

uint64_t sub_10017B058(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C4CC(a1, a2, a3, (_QWORD *)*v3, &qword_1005548E8, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodeOffer);
  *v3 = result;
  return result;
}

uint64_t sub_10017B084(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C4CC(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100554990, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
  *v3 = result;
  return result;
}

uint64_t sub_10017B0B0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017C1C4(a1, a2, a3, *v3, &qword_100559FE0, (uint64_t)&type metadata for EpisodeStateIdentifier);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B0DC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017B610(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B0F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017C1C4(a1, a2, a3, *v3, &qword_100554948, (uint64_t)&type metadata for ModernEpisodeDownloadState);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B124(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017B76C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B140(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017CB78(a1, a2, a3, (_QWORD *)*v3, &qword_100553CD8, &qword_100553CF0);
  *v3 = result;
  return result;
}

uint64_t sub_10017B16C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C340(a1, a2, a3, (_QWORD *)*v3, &qword_1005549F8, &qword_1005549E0);
  *v3 = result;
  return result;
}

uint64_t sub_10017B198(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017B8D4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B1B4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C4CC(a1, a2, a3, (_QWORD *)*v3, &qword_100554950, type metadata accessor for DownloadJob);
  *v3 = result;
  return result;
}

uint64_t sub_10017B1E0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017BA3C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B1FC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017BBB4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10017B218(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017BD3C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10017B234(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C4CC(a1, a2, a3, (_QWORD *)*v3, &qword_100553EA8, (uint64_t (*)(_QWORD))&type metadata accessor for ModernShelf);
  *v3 = result;
  return result;
}

uint64_t sub_10017B260(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017BEE0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10017B27C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017CD1C(a1, a2, a3, *v3, &qword_100554958);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B2A0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017C068(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B2BC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017C1C4(a1, a2, a3, *v3, (uint64_t *)&unk_1005548D0, (uint64_t)&type metadata for ContentID);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B2E8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C4CC(a1, a2, a3, (_QWORD *)*v3, &qword_100554938, (uint64_t (*)(_QWORD))&type metadata accessor for MediaLibraryPid);
  *v3 = result;
  return result;
}

uint64_t sub_10017B314(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C340(a1, a2, a3, (_QWORD *)*v3, &qword_1005549C8, &qword_1005549D0);
  *v3 = result;
  return result;
}

uint64_t sub_10017B340(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C4CC(a1, a2, a3, (_QWORD *)*v3, &qword_1005549D8, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
  *v3 = result;
  return result;
}

uint64_t sub_10017B36C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C4CC(a1, a2, a3, (_QWORD *)*v3, &qword_100554A78, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodeEntity);
  *v3 = result;
  return result;
}

uint64_t sub_10017B398(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017CB78(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100559FC0, &qword_1005545A0);
  *v3 = result;
  return result;
}

uint64_t sub_10017B3C4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017C6AC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B3E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017CB78(a1, a2, a3, (_QWORD *)*v3, &qword_1005612A0, &qword_100554920);
  *v3 = result;
  return result;
}

uint64_t sub_10017B40C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017C990(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10017B428(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017CB78(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1005549B0, &qword_1005545F8);
  *v3 = result;
  return result;
}

uint64_t sub_10017B454(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017CB78(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100554A60, &qword_100564DA0);
  *v3 = result;
  return result;
}

uint64_t sub_10017B480(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017CD1C(a1, a2, a3, *v3, &qword_100554A70);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017B4A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_1005547B0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14, v15, v8, (char *)&type metadata for Any + 8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017B610(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_1005548E0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017B76C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_1005548F0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for NavigationTab);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017B8D4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544((uint64_t *)&unk_1005549A0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14, v15, v8, &_s7EpisodeVN);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017BA3C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_100554978);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 48 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for PresentableError);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017BBB4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_100554968);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    v18 = sub_10003F544(&qword_100554970);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v18);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017BD3C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_1005549E8);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    v17 = sub_10003F544(&qword_1005549F0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v17);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017BEE0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_1005548F8);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    v18 = sub_10003F544(&qword_100554900);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v18);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017C068(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_1005549C0);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017C1C4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  size_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *((_QWORD *)a4 + 3);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (v10 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10003F544(a5);
    v14 = (char *)swift_allocObject(v13, 24 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    *((_QWORD *)v14 + 2) = v11;
    *((_QWORD *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 24);
  }
  else
  {
    v14 = (char *)_swiftEmptyArrayStorage;
  }
  v16 = v14 + 32;
  v17 = a4 + 32;
  v18 = 24 * v11;
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= &v17[v18])
      memmove(v16, v17, v18);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v17 >= &v16[v18] || v16 >= &v17[v18])
  {
    swift_arrayInitWithCopy(v16, v17, v11, a6);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017C340(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10003F544(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    v21 = sub_10003F544(a6);
    swift_arrayInitWithCopy(v14 + 4, a4 + 4, v11, v21);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017C4CC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10003F544(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24, v25, v11, v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017C6AC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_100554940);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017C808(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544((uint64_t *)&unk_100554980);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    v18 = sub_10003F544(&qword_100560220);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v18);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017C990(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10003F544(&qword_100554928);
  v11 = *(_QWORD *)(sub_10003F544(&qword_100554930) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10003F544(&qword_100554930);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21, v22, v8, v18);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017CB78(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v20;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10003F544(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    v20 = sub_10003F544(a6);
    swift_arrayInitWithCopy(v14 + 4, a4 + 4, v11, v20);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017CD1C(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_10003F544(a5);
    v12 = (char *)swift_allocObject(v11, 8 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v9])
      memmove(v15, v16, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[8 * v9] || v15 >= &v16[8 * v9])
  {
    memcpy(v15, v16, 8 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

id sub_10017CE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NonFollowedShows;
  objc_class *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  objc_super v17;
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  NonFollowedShows = type metadata accessor for FetchNonFollowedShows();
  v20[3] = NonFollowedShows;
  v20[4] = &off_1004B6520;
  v20[0] = a2;
  v19[3] = type metadata accessor for PodcastsStateCoordinator();
  v19[4] = sub_100026844(&qword_100553AE8, (uint64_t (*)(uint64_t))type metadata accessor for PodcastsStateCoordinator, (uint64_t)&protocol conformance descriptor for PodcastsStateCoordinator);
  v19[0] = a3;
  v7 = (objc_class *)type metadata accessor for NonFollowedShowsSyncStorage();
  v8 = (char *)objc_allocWithZone(v7);
  v9 = sub_100038DEC((uint64_t)v20, NonFollowedShows);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = *v11;
  v18[3] = NonFollowedShows;
  v18[4] = &off_1004B6520;
  v18[0] = v13;
  *(_QWORD *)&v8[OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_importContext] = a1;
  sub_10000A520((uint64_t)v18, (uint64_t)&v8[OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_fetchNonFollowedShows]);
  sub_10000A520((uint64_t)v19, (uint64_t)&v8[OBJC_IVAR____TtC8Podcasts27NonFollowedShowsSyncStorage_podcastsStateCoordinator]);
  v17.receiver = v8;
  v17.super_class = v7;
  v14 = objc_msgSendSuper2(&v17, "init");
  sub_10003D380(v19);
  sub_10003D380(v18);
  sub_10003D380(v20);
  return v14;
}

id sub_10017CFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  double v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  Class isa;
  id v17;
  void *v18;
  Class v19;
  id v20;
  id v21;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SyncKeysRepository(0);
  v9 = (void *)static SyncKeysRepository.shared.getter(v8);
  v10 = COERCE_DOUBLE(SyncKeysRepository.nonFollowedShowsLastSyncTimestamp.getter());
  v12 = v11;

  if ((v12 & 1) != 0)
  {
    v23 = static Logger.cloudSync.getter();
    v24 = static os_log_type_t.default.getter(v23);
    v25 = v24;
    v26 = Logger.logObject.getter(v24);
    v27 = v25;
    if (os_log_type_enabled(v26, v25))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[NonFollowedShows] We never synced before, so there are no old Implicit Follows to clean up.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return objc_msgSend((id)objc_opt_self(NSPredicate), "falsePredicate");
  }
  else
  {
    Date.init(timeIntervalSinceReferenceDate:)(v10);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastLastImplicitlyFollowedDate);
    v14 = v13;
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v17 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateForDateKey:isLessThanDate:", v15, isa);

    v18 = (void *)objc_opt_self(MTPodcast);
    v19 = Array._bridgeToObjectiveC()().super.isa;
    v20 = objc_msgSend(v18, "predicateForImplicitlyFollowedPodcastsExcludingUUIDs:", v19);

    v21 = objc_msgSend(v20, "AND:", v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v21;
  }
}

_QWORD *_s8Podcasts27NonFollowedShowsSyncStorageC045unsafeImplicitFollowsOnlyInLocalAndBeforeLastE014excludingUUIDs2inSaySo9MTPodcastCGSgSaySSG_So22NSManagedObjectContextCtF_0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  Class isa;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = sub_10017CFCC();
  v4 = kMTPodcastEntityName;
  v5 = v3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(a2, "objectsInEntity:predicate:sortDescriptors:", v4, v5, isa);

  if (v7)
  {
    v8 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    v7 = sub_10034E718(v9);
    swift_bridgeObjectRelease(v9);
  }

  return v7;
}

void sub_10017D344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD v10[5];
  _QWORD *v11;

  sub_10017DE1C();
  sub_10017DF40();
  v5 = sub_100005EC8(0, &qword_100554590, &off_1004A4480);
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "sharedInstance");
  v7 = (_QWORD *)swift_allocObject(&unk_1004B0DB0, 40, 7);
  v7[2] = v2;
  v7[3] = a1;
  v7[4] = a2;
  v10[4] = sub_10017F33C;
  v11 = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100027AF8;
  v10[3] = &unk_1004B0DC8;
  v8 = _Block_copy(v10);
  v9 = v11;
  swift_retain();
  swift_retain();
  swift_release(v9);
  objc_msgSend(v6, "processNotificationsForDebuggingWithCompletion:", v8);
  _Block_release(v8);

}

uint64_t sub_10017D454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v14 = (void *)static OS_dispatch_queue.main.getter(v13);
  v15 = (_QWORD *)swift_allocObject(&unk_1004B0E00, 40, 7);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  aBlock[4] = sub_10017F378;
  v26 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B0E18;
  v16 = _Block_copy(aBlock);
  v17 = v26;
  swift_retain();
  swift_retain();
  v18 = swift_release(v17);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_10017F258();
  v20 = sub_10003F544((uint64_t *)&unk_10055B200);
  v21 = sub_100026534();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v6, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10017D64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  void **v16;
  void **v17;
  void *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t result;
  __n128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  _QWORD *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **aBlock;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  void *v65;
  void *v66;
  uint64_t v67;
  char v68[32];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  __chkstk_darwin(v6);
  v57 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  __chkstk_darwin(v8);
  v54 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD **)(v60 - 8);
  v11 = __chkstk_darwin(v60);
  v52 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v53 = (char *)&v48 - v13;
  swift_beginAccess(a1 + 112, v68, 0, 0);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(v14 + 16);
  v61 = a3;
  if (v15)
  {
    v50 = (void (*)(char *, uint64_t))a2;
    v51 = v10;
    aBlock = (void **)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v14);
    sub_100048628(0, v15, 0);
    v16 = aBlock;
    v17 = (void **)(v14 + 40);
    do
    {
      v19 = *(v17 - 1);
      v18 = *v17;
      aBlock = v16;
      v21 = (unint64_t)v16[2];
      v20 = (unint64_t)v16[3];
      swift_bridgeObjectRetain(v18);
      if (v21 >= v20 >> 1)
      {
        sub_100048628(v20 > 1, v21 + 1, 1);
        v16 = aBlock;
      }
      v17 += 4;
      v16[2] = (void *)(v21 + 1);
      v22 = &v16[2 * v21];
      v22[4] = v19;
      v22[5] = v18;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease(v14);
    a3 = v61;
    v10 = v51;
    a2 = (uint64_t)v50;
  }
  else
  {
    v16 = (void **)_swiftEmptyArrayStorage;
  }
  v23 = swift_allocObject(&unk_1004B0E50, 32, 7);
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = a3;
  if (!v16[2])
  {
    swift_retain_n(a3, 2);
    sub_10017DBC8(a2, a3);
    swift_bridgeObjectRelease(v16);
    swift_release(a3);
    return swift_release(v23);
  }
  v24 = (void *)objc_opt_self(MTDB);
  swift_retain_n(a3, 2);
  v25 = objc_msgSend(v24, "sharedInstance");
  v26 = objc_msgSend(v25, "mainOrPrivateContext");

  v27 = (_QWORD *)swift_allocObject(&unk_1004B0E78, 40, 7);
  v27[2] = v26;
  v27[3] = a1;
  v27[4] = v16;
  v28 = swift_allocObject(&unk_1004B0EA0, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10017F3C0;
  *(_QWORD *)(v28 + 24) = v27;
  v51 = v27;
  v66 = sub_1001529CC;
  v67 = v28;
  aBlock = _NSConcreteStackBlock;
  v63 = 1107296256;
  v64 = sub_100029B1C;
  v65 = &unk_1004B0EB8;
  v29 = _Block_copy(&aBlock);
  v30 = v67;
  v31 = v26;
  swift_retain();
  swift_bridgeObjectRetain(v16);
  swift_retain();
  swift_release(v30);
  objc_msgSend(v31, "performBlockAndWait:", v29);
  _Block_release(v29);
  LOBYTE(v29) = swift_isEscapingClosureAtFileLocation(v28, "", 130, 141, 36, 1);
  result = swift_release(v28);
  if ((v29 & 1) == 0)
  {
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v49 = static OS_dispatch_queue.main.getter(v33);
    v34 = v52;
    static DispatchTime.now()(v49);
    v35 = v53;
    + infix(_:_:)(v34, 0.1);
    v50 = (void (*)(char *, uint64_t))v10[1];
    v50(v34, v60);
    v36 = swift_allocObject(&unk_1004B0EF0, 32, 7);
    *(_QWORD *)(v36 + 16) = sub_10017F384;
    *(_QWORD *)(v36 + 24) = v23;
    v66 = sub_10017F3DC;
    v67 = v36;
    aBlock = _NSConcreteStackBlock;
    v63 = 1107296256;
    v64 = sub_100027AF8;
    v65 = &unk_1004B0F08;
    v37 = _Block_copy(&aBlock);
    v38 = v67;
    swift_retain();
    v39 = swift_release(v38);
    v40 = v54;
    static DispatchQoS.unspecified.getter(v39);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v41 = sub_10017F258();
    v42 = sub_10003F544((uint64_t *)&unk_10055B200);
    v43 = sub_100026534();
    v44 = v57;
    v45 = v31;
    v46 = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v42, v43, v59, v41);
    v47 = (void *)v49;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v35, v40, v44, v37);
    _Block_release(v37);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v44, v46);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v56);
    v50(v35, v60);
    swift_bridgeObjectRelease(v16);
    swift_release(v61);
    swift_release(v23);
    v23 = (uint64_t)v51;
    return swift_release(v23);
  }
  __break(1u);
  return result;
}

uint64_t sub_10017DBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v26 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v26 - v14;
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  static DispatchTime.now()(v17);
  + infix(_:_:)(v13, 1.0);
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  aBlock[4] = v26;
  v31 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B0F30;
  v19 = _Block_copy(aBlock);
  v20 = v31;
  swift_retain();
  v21 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_10017F258();
  v23 = sub_10003F544((uint64_t *)&unk_10055B200);
  v24 = sub_100026534();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v3, v22);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v8, v5, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v9);
}

double sub_10017DE1C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double result;
  _QWORD *v15;

  v1 = v0;
  type metadata accessor for MTNotificationTestAction();
  v2 = sub_1001E5AFC(v0);
  v3 = v2;
  v4 = v2[2];
  if (v4)
  {
    sub_10017B198(0, v4, 0);
    v15 = v3;
    v5 = v3 + 7;
    do
    {
      v7 = *(v5 - 3);
      v6 = *(v5 - 2);
      v9 = *(v5 - 1);
      v8 = *v5;
      v10 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v8);
      if (v10 >= v11 >> 1)
        sub_10017B198(v11 > 1, v10 + 1, 1);
      v5 += 4;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v12 = &_swiftEmptyArrayStorage[4 * v10];
      v12[4] = v7;
      v12[5] = v6;
      v12[6] = v9;
      v12[7] = v8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v15);
    v1 = v0;
  }
  else
  {
    swift_bridgeObjectRelease(v2);
  }
  v13 = v1[13];
  v1[13] = _swiftEmptyArrayStorage;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  return result;
}

uint64_t sub_10017DF40()
{
  uint64_t v0;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  void **aBlock;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  uint64_t (*v41)();
  uint64_t v42;

  isEscapingClosureAtFileLocation = *(_QWORD *)(v0 + 80);
  if ((unint64_t)isEscapingClosureAtFileLocation >> 62)
    goto LABEL_20;
  v2 = *(_QWORD *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(isEscapingClosureAtFileLocation, 2);
  if (!v2)
    return swift_bridgeObjectRelease_n(isEscapingClosureAtFileLocation, 2);
  while (1)
  {
    result = objc_opt_self(MTDB);
    v36 = (id)result;
    if (v2 < 1)
      break;
    v31 = isEscapingClosureAtFileLocation & 0xC000000000000001;
    v32 = *(_QWORD *)(v33 + 48);
    v30 = (id)objc_opt_self(MTEpisodeLookupUtil);
    v4 = 0;
    v28 = v2;
    v29 = isEscapingClosureAtFileLocation;
    while (1)
    {
      if (v31)
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, isEscapingClosureAtFileLocation);
      else
        *(_QWORD *)&v6 = swift_retain().n128_u64[0];
      v7 = *(_QWORD *)(v5 + 16);
      v8 = v7 - v32;
      if (__OFSUB__(v7, v32))
        break;
      v35 = v5;
      v9 = *(_QWORD *)(v5 + 24);
      v10 = objc_msgSend(v36, "sharedInstance", v6);
      v34 = objc_msgSend(v10, "mainOrPrivateContext");

      v11 = objc_msgSend(objc_allocWithZone((Class)MTEpisodeLookupRequest), "init");
      objc_msgSend(v11, "setStoreTrackId:", *(_QWORD *)(v9 + 48));
      v12 = objc_msgSend(v30, "sharedInstance");
      v13 = objc_msgSend(v12, "findEpisodeWithRequest:", v11);

      if (v13)
      {
        v14 = objc_msgSend(v13, "managedObjectContext");
        if (v14)
        {
          v15 = v14;
          v16 = (_QWORD *)swift_allocObject(&unk_1004B0D38, 40, 7);
          v16[2] = v13;
          v16[3] = sub_10017F2A0;
          v16[4] = v33;
          v17 = swift_allocObject(&unk_1004B0D60, 32, 7);
          *(_QWORD *)(v17 + 16) = sub_10017F31C;
          *(_QWORD *)(v17 + 24) = v16;
          v41 = sub_1001529CC;
          v42 = v17;
          aBlock = _NSConcreteStackBlock;
          v38 = 1107296256;
          v39 = sub_100029B1C;
          v40 = &unk_1004B0D78;
          v18 = _Block_copy(&aBlock);
          v19 = v42;
          v20 = v13;
          swift_retain();
          swift_release(v19);
          objc_msgSend(v15, "performBlockAndWait:", v18);

          _Block_release(v18);
          isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v17, "", 130, 214, 32, 1);
          swift_release(v16);
          swift_release(v17);
          if ((isEscapingClosureAtFileLocation & 1) != 0)
            goto LABEL_19;
        }
        else
        {

        }
      }
      v21 = objc_msgSend(v36, "sharedInstance");
      v22 = objc_msgSend(v21, "mainOrPrivateContext");

      v23 = (_QWORD *)swift_allocObject(&unk_1004B0CC0, 48, 7);
      v23[2] = v33;
      v23[3] = v8;
      v23[4] = v34;
      v23[5] = v9;
      v24 = swift_allocObject(&unk_1004B0CE8, 32, 7);
      *(_QWORD *)(v24 + 16) = sub_10017F2DC;
      *(_QWORD *)(v24 + 24) = v23;
      v41 = sub_100029B3C;
      v42 = v24;
      aBlock = _NSConcreteStackBlock;
      v38 = 1107296256;
      v39 = sub_100029B1C;
      v40 = &unk_1004B0D00;
      isEscapingClosureAtFileLocation = (uint64_t)_Block_copy(&aBlock);
      v25 = v42;
      swift_retain();
      v26 = v34;
      swift_retain();
      swift_retain();
      swift_release(v25);
      objc_msgSend(v22, "performBlockAndWait:", isEscapingClosureAtFileLocation);

      _Block_release((const void *)isEscapingClosureAtFileLocation);
      LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v24, "", 130, 118, 73, 1);
      swift_release(v35);
      swift_release(v23);
      swift_release(v24);
      if ((v22 & 1) != 0)
        goto LABEL_18;
      ++v4;
      isEscapingClosureAtFileLocation = v29;
      if (v28 == v4)
        return swift_bridgeObjectRelease_n(isEscapingClosureAtFileLocation, 2);
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    if (isEscapingClosureAtFileLocation < 0)
      v27 = isEscapingClosureAtFileLocation;
    else
      v27 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(isEscapingClosureAtFileLocation, 2);
    v2 = _CocoaArrayWrapper.endIndex.getter(v27);
    if (!v2)
      return swift_bridgeObjectRelease_n(isEscapingClosureAtFileLocation, 2);
  }
  __break(1u);
  return result;
}

void sub_10017E3AC(void *a1, id a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t inited;
  Swift::Int v23;
  Class isa;
  _QWORD v25[2];
  _BYTE v26[72];

  v5 = objc_msgSend(a2, "uuid");
  if (!v5)
    goto LABEL_7;
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v9 = v8;

  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(a3 + 24);
  if (v7 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease(v9);
    return;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  swift_bridgeObjectRelease(v9);
  if ((v13 & 1) == 0)
  {
LABEL_7:
    v14 = objc_msgSend(a1, "uuid");
    if (v14)
    {
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

      v19 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
      if (v19)
      {
        v20 = v19;
        v21 = sub_10003F544(&qword_1005535A8);
        inited = swift_initStackObject(v21, v26);
        *(_OWORD *)(inited + 16) = xmmword_1003CA200;
        v25[0] = v16;
        v25[1] = v18;
        AnyHashable.init<A>(_:)(v25, &type metadata for String, &protocol witness table for String);
        v23 = sub_10013B2EC(inited);
        swift_setDeallocating(inited);
        swift_arrayDestroy(inited + 32, 1, &type metadata for AnyHashable);
        isa = Set._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v20, "deleteEpisodeUuids:", isa, swift_bridgeObjectRelease(v23).n128_f64[0]);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

double sub_10017E56C(_QWORD *a1, unint64_t a2, void *a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v15;
  NSString v16;
  id v17;
  void *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  double result;
  _BYTE v24[24];

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v13 = a1[13];
  if (*(_QWORD *)(v13 + 16) <= a2)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    v10 = sub_10027B38C(0, v10[2] + 1, 1, v10);
    *v9 = v10;
    goto LABEL_7;
  }
  v4 = a3;
  v15 = v13 + 32 * a2;
  v6 = *(_QWORD *)(v15 + 32);
  v5 = *(_QWORD *)(v15 + 40);
  swift_bridgeObjectRetain(v5);
  v16 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "episodeForUuid:", v16);

  if (!v7)
  {
    *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
    return result;
  }
  objc_msgSend(v7, "setStoreTrackId:", *(_QWORD *)(a4 + 48));
  v17 = objc_msgSend(v7, "podcast");
  if (v17)
  {
    v18 = v17;
    objc_msgSend(v17, "setStoreCollectionId:", *(_QWORD *)(a4 + 56));

  }
  v11 = a1[2];
  v8 = a1[3];
  v9 = a1 + 14;
  swift_beginAccess(a1 + 14, v24, 33, 0);
  v10 = (_QWORD *)a1[14];
  swift_bridgeObjectRetain(v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  a1[14] = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_13;
LABEL_7:
  v21 = v10[2];
  v20 = v10[3];
  if (v21 >= v20 >> 1)
  {
    v10 = sub_10027B38C((_QWORD *)(v20 > 1), v21 + 1, 1, v10);
    *v9 = v10;
  }
  v10[2] = v21 + 1;
  v22 = &v10[4 * v21];
  v22[4] = v6;
  v22[5] = v5;
  v22[6] = v11;
  v22[7] = v8;
  swift_endAccess(v24);
  objc_msgSend(v4, "saveInCurrentBlock");

  return result;
}

void sub_10017E744(void *a1, uint64_t a2, uint64_t a3)
{
  NSString v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSSet v19;
  id v20;
  double v21;
  id v22;

  v5 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(a1, "podcastForUuid:", v5);

  if (!v22)
    goto LABEL_12;
  v6 = objc_msgSend(v22, "episodes");
  if (!v6)
    goto LABEL_12;
  v7 = v6;
  v8 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v9 = sub_10017F3E4();
  v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v7, v8, v9);

  if ((v10 & 0xC000000000000001) != 0)
  {
    v11 = v10 < 0 ? v10 : v10 & 0xFFFFFFFFFFFFFF8;
    v12 = __CocoaSet.count.getter(v11);
  }
  else
  {
    v12 = *(_QWORD *)(v10 + 16);
  }
  swift_bridgeObjectRelease(v10);
  if (*(_QWORD *)(a3 + 16) < v12)
  {
    v13 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
    if (v13)
    {
      v14 = v13;
      swift_bridgeObjectRetain(a3);
      v16 = sub_10002B070(v15);
      swift_bridgeObjectRelease(a3);
      sub_10017E930(v16);
      v18 = v17;
      swift_bridgeObjectRelease(v16);
      v19.super.isa = Set._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v14, "deleteEpisodeUuids:", v19.super.isa, swift_bridgeObjectRelease(v18).n128_f64[0]);
LABEL_14:

      return;
    }
  }
  else
  {
LABEL_12:
    v20 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
    if (v20)
    {
      v14 = v20;
      v19.super.isa = (Class)String._bridgeToObjectiveC()();
      objc_msgSend(v14, "deletePodcastWithUuid:", v19.super.isa, v21);
      goto LABEL_14;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_10017E930(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  char *v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10003F544(&qword_100552B78);
    v3 = (_QWORD *)static _SetStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptySetSingleton;
  }
  v4 = a1 + 56;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(63 - v5) >> 6;
  v9 = (char *)(v3 + 7);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_28;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v15 >= v8)
      goto LABEL_37;
    v16 = *(_QWORD *)(v4 + 8 * v15);
    v17 = v10 + 1;
    if (!v16)
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v8)
        goto LABEL_37;
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (!v16)
      {
        v17 = v10 + 3;
        if (v10 + 3 >= v8)
          goto LABEL_37;
        v16 = *(_QWORD *)(v4 + 8 * v17);
        if (!v16)
        {
          v17 = v10 + 4;
          if (v10 + 4 >= v8)
            goto LABEL_37;
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (!v16)
            break;
        }
      }
    }
LABEL_27:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
    v10 = v17;
LABEL_28:
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v14);
    v20 = v19[1];
    *(_QWORD *)&v29 = *v19;
    *((_QWORD *)&v29 + 1) = v20;
    swift_bridgeObjectRetain(v20);
    swift_dynamicCast(v32, &v29, &type metadata for String, &type metadata for AnyHashable, 7);
    v29 = v32[0];
    v30 = v32[1];
    v31 = v33;
    v21 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)&v9[8 * (v23 >> 6)]) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)&v9[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)&v9[8 * v24];
      }
      while (v28 == -1);
      v11 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)&v9[(v11 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v11;
    v12 = v3[6] + 40 * v11;
    *(_OWORD *)v12 = v29;
    *(_OWORD *)(v12 + 16) = v30;
    *(_QWORD *)(v12 + 32) = v31;
    ++v3[2];
  }
  v18 = v10 + 5;
  if (v10 + 5 >= v8)
  {
LABEL_37:
    swift_release(v3);
    sub_10017F43C(a1);
    return;
  }
  v16 = *(_QWORD *)(v4 + 8 * v18);
  if (v16)
  {
    v17 = v10 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v8)
      goto LABEL_37;
    v16 = *(_QWORD *)(v4 + 8 * v17);
    ++v18;
    if (v16)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

id sub_10017EC20(uint64_t (*a1)(void))
{
  id result;
  void *v3;

  result = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
  if (result)
  {
    v3 = result;
    objc_msgSend(result, "immediatelyDeleteAllHiddenPodcasts");

    return (id)a1();
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_10017EC88()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  return v0;
}

uint64_t sub_10017ECE4()
{
  uint64_t v0;

  sub_10017EC88();
  return swift_deallocClassInstance(v0, 120, 7);
}

void sub_10017ED04(uint64_t a1, uint64_t a2)
{
  sub_10017D344(a1, a2);
}

uint64_t sub_10017ED28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10017ED4C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 64, 7);
}

_QWORD *sub_10017ED78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_allocObject(v5, 64, 7);
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  v11[5] = a4;
  v11[6] = a5;
  v11[7] = a5;
  swift_bridgeObjectRetain(a5);
  return v11;
}

_QWORD *MTNotificationTestAction.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return v0;
}

uint64_t MTNotificationTestAction.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for MTNotificationTestAction()
{
  return objc_opt_self(_TtC8Podcasts24MTNotificationTestAction);
}

uint64_t type metadata accessor for MTNotificationTestAction.PostFakeContentStep()
{
  return objc_opt_self(_TtCC8Podcasts24MTNotificationTestAction19PostFakeContentStep);
}

uint64_t type metadata accessor for MTNotificationTestAction.ClearAllHistoryStep()
{
  return objc_opt_self(_TtCC8Podcasts24MTNotificationTestAction19ClearAllHistoryStep);
}

uint64_t type metadata accessor for MTNotificationTestAction.RealContentForDeletion()
{
  return objc_opt_self(_TtCC8Podcasts24MTNotificationTestAction22RealContentForDeletion);
}

uint64_t type metadata accessor for MTNotificationTestAction.RealContent()
{
  return objc_opt_self(_TtCC8Podcasts24MTNotificationTestAction11RealContent);
}

void sub_10017EEF0(void *a1, void (*a2)(void *))
{
  id v4;
  id v5;

  v4 = objc_msgSend(a1, "podcast");
  if (v4)
  {
    v5 = v4;
    a2(a1);

  }
}

uint64_t sub_10017EF64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  __n128 v18;
  void *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v31 = a1;
  v32 = a2;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v30 - v13;
  v15 = (void *)objc_opt_self(UNUserNotificationCenter);
  v16 = objc_msgSend(v15, "currentNotificationCenter");
  objc_msgSend(v16, "removeAllDeliveredNotifications");

  v17 = objc_msgSend(v15, "currentNotificationCenter");
  objc_msgSend(v17, "removeAllPendingNotificationRequests");

  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v19 = (void *)static OS_dispatch_queue.main.getter(v18);
  static DispatchTime.now()(v19);
  + infix(_:_:)(v12, 1.0);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  v21 = swift_allocObject(&unk_1004B0C70, 32, 7);
  v22 = v32;
  *(_QWORD *)(v21 + 16) = v31;
  *(_QWORD *)(v21 + 24) = v22;
  aBlock[4] = sub_100029B44;
  v37 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B0C88;
  v23 = _Block_copy(aBlock);
  v24 = v37;
  swift_retain();
  v25 = swift_release(v24);
  static DispatchQoS.unspecified.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  v26 = sub_10017F258();
  v27 = sub_10003F544((uint64_t *)&unk_10055B200);
  v28 = sub_100026534();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v2, v26);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v7, v4, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v34);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v8);
}

uint64_t sub_10017F234()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10017F258()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100556BB0;
  if (!qword_100556BB0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100556BB0);
  }
  return result;
}

void sub_10017F2A0(void *a1, void *a2)
{
  uint64_t v2;

  sub_10017E3AC(a1, a2, v2);
}

uint64_t sub_10017F2A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

double sub_10017F2DC()
{
  uint64_t v0;

  return sub_10017E56C(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10017F2E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017F2F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10017F31C()
{
  uint64_t v0;

  sub_10017EEF0(*(void **)(v0 + 16), *(void (**)(void *))(v0 + 24));
}

uint64_t sub_10017F328()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017F33C()
{
  uint64_t *v0;

  return sub_10017D454(v0[2], v0[3], v0[4]);
}

uint64_t sub_10017F34C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10017F378()
{
  uint64_t *v0;

  return sub_10017D64C(v0[2], v0[3], v0[4]);
}

uint64_t sub_10017F384()
{
  uint64_t v0;

  return sub_10017DBC8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10017F38C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10017F3C0()
{
  uint64_t v0;

  sub_10017E744(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10017F3CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10017F3DC()
{
  uint64_t v0;

  return sub_10017EC20(*(uint64_t (**)(void))(v0 + 16));
}

unint64_t sub_10017F3E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100554EB0;
  if (!qword_100554EB0)
  {
    v1 = sub_100005EC8(255, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100554EB0);
  }
  return result;
}

uint64_t sub_10017F43C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

id sub_10017F460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  id v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  id v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  _BYTE *v77;
  uint64_t *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  _BYTE *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD aBlock[5];
  uint64_t v107;
  id v108;

  v103 = a6;
  v104 = a7;
  v12 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v12);
  v99 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v14);
  v102 = (uint64_t)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v101 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v100 = (uint64_t *)((char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_10003F544((uint64_t *)&unk_100554EC0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v92 - v22;
  v24 = a2;
  if (!a2)
  {
    a1 = Action.title.getter(v21);
    v24 = v25;
  }
  sub_100005EC8(0, (unint64_t *)&qword_100559F60, CPListItem_ptr);
  v26 = a5;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v27 = sub_10017FD50(a1, v24, a3, a4, a5, 0, 1);
  v108 = v27;
  dispatch thunk of FlowAction.destination.getter();
  v28 = type metadata accessor for FlowDestination(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v23, 1, v28) != 1)
  {
    sub_100007A64((uint64_t)v23, (uint64_t)v20, (uint64_t *)&unk_100554EC0);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v20, v28);
    if (v31 == enum case for FlowDestination.page(_:))
    {
      (*(void (**)(char *, uint64_t))(v29 + 96))(v20, v28);
      v32 = *(_QWORD *)v20;
      v33 = sub_10003F544(&qword_100554ED8);
      v34 = (uint64_t)v99;
      sub_10003DC78((uint64_t)&v20[*(int *)(v33 + 48)], (uint64_t)v99, (uint64_t *)&unk_100553DC0);
      v35 = *(int *)(sub_10003F544((uint64_t *)&unk_100554EE0) + 48);
      v36 = v100;
      sub_100007A64(v34, (uint64_t)v100, (uint64_t *)&unk_100553DC0);
      *(uint64_t *)((char *)v36 + v35) = v32;
      v37 = v105;
      swift_storeEnumTagMultiPayload(v36, v105, 3);
      v38 = objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0));
      v39 = objc_msgSend(v38, "init", swift_retain().n128_f64[0]);
      v40 = (uint64_t)v36;
      v41 = v102;
      sub_10017FE20(v40, v102);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v101 + 56))(v41, 0, 1, v37);
      v42 = (uint64_t)&v39[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
      swift_beginAccess(&v39[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
      sub_10017FE64(v41, v42);
      swift_endAccess(aBlock);
      v39[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
      sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
      v43 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
      v44 = v39;
      sub_10017FFBC((uint64_t)v43, (uint64_t)v39);
      swift_release(v32);

      sub_100007A28(v34, (uint64_t *)&unk_100553DC0);
    }
    else if (v31 == enum case for FlowDestination.episodeList(_:))
    {
      (*(void (**)(char *, uint64_t))(v29 + 96))(v20, v28);
      v99 = v23;
      v45 = *(_QWORD *)v20;
      v93 = *((_QWORD *)v20 + 1);
      v46 = v93;
      v48 = *((_QWORD *)v20 + 2);
      v47 = *((_QWORD *)v20 + 3);
      v49 = *((_QWORD *)v20 + 4);
      v50 = *((_QWORD *)v20 + 5);
      v51 = *((_QWORD *)v20 + 6);
      v52 = *((_QWORD *)v20 + 7);
      v53 = v20[64];
      v54 = v100;
      *v100 = v45;
      v54[1] = v46;
      v55 = v45;
      v95 = v45;
      v96 = v48;
      v54[2] = v48;
      v54[3] = v47;
      v97 = v47;
      v98 = v49;
      v54[4] = v49;
      v54[5] = v50;
      v54[6] = v51;
      v54[7] = v52;
      v56 = v51;
      *((_BYTE *)v54 + 64) = v53;
      v94 = v53;
      swift_storeEnumTagMultiPayload(v54, v105, 0);
      v57 = objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0));
      v58 = v55;
      v59 = v93;
      v60 = v48;
      v61 = v50;
      sub_100168ED4(v58, v93, v60, v47, v49, v50, v56, v52, v53);
      v62 = objc_msgSend(v57, "init");
      v63 = (uint64_t)v54;
      v64 = v102;
      sub_10017FE20(v63, v102);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v101 + 56))(v64, 0, 1, v105);
      v65 = (uint64_t)&v62[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
      swift_beginAccess(&v62[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
      sub_10017FE64(v64, v65);
      swift_endAccess(aBlock);
      v62[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
      sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
      v66 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
      v67 = v62;
      sub_10017FFBC((uint64_t)v66, (uint64_t)v62);

      v23 = v99;
      sub_10003F49C(v95, v59, v96, v97, v98, v61, v56, v52, v94);
    }
    else if (v31 == enum case for FlowDestination.station(_:))
    {
      (*(void (**)(char *, uint64_t))(v29 + 96))(v20, v28);
      v68 = *(_QWORD *)v20;
      v69 = v100;
      *v100 = *(_QWORD *)v20;
      v70 = v105;
      swift_storeEnumTagMultiPayload(v69, v105, 6);
      v71 = objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0));
      v72 = objc_msgSend(v71, "init", swift_retain().n128_f64[0]);
      v73 = (uint64_t)v69;
      v74 = v102;
      sub_10017FE20(v73, v102);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v101 + 56))(v74, 0, 1, v70);
      v75 = (uint64_t)&v72[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
      swift_beginAccess(&v72[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
      sub_10017FE64(v74, v75);
      swift_endAccess(aBlock);
      v72[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
      sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
      v76 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
      v77 = v72;
      sub_10017FFBC((uint64_t)v76, (uint64_t)v72);
      swift_release(v68);

    }
    else
    {
      if (v31 != enum case for FlowDestination.shows(_:))
      {

        (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v28);
        goto LABEL_5;
      }
      v78 = v100;
      *(_BYTE *)v100 = 8;
      v79 = v105;
      swift_storeEnumTagMultiPayload(v78, v105, 5);
      v80 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
      v81 = (uint64_t)v78;
      v82 = v102;
      sub_10017FE20(v81, v102);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v101 + 56))(v82, 0, 1, v79);
      v83 = (uint64_t)&v80[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
      swift_beginAccess(&v80[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
      sub_10017FE64(v82, v83);
      swift_endAccess(aBlock);
      v80[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
      sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
      v84 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
      v85 = v80;
      sub_10017FFBC((uint64_t)v84, (uint64_t)v80);

    }
    sub_100007A28((uint64_t)v23, (uint64_t *)&unk_100554EC0);
    v86 = v108;
    v87 = swift_allocObject(&unk_1004B0F80, 32, 7);
    v88 = v104;
    *(_QWORD *)(v87 + 16) = v103;
    *(_QWORD *)(v87 + 24) = v88;
    aBlock[4] = sub_10017FF60;
    v107 = v87;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10017FEAC;
    aBlock[3] = &unk_1004B0F98;
    v89 = _Block_copy(aBlock);
    v90 = v107;
    v30 = v86;
    swift_retain();
    swift_release(v90);
    objc_msgSend(v30, "setHandler:", v89);
    _Block_release(v89);

    return v30;
  }

LABEL_5:
  sub_100007A28((uint64_t)v23, (uint64_t *)&unk_100554EC0);
  return 0;
}

id sub_10017FD50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  NSString v14;
  NSString v15;
  id v16;

  v8 = v7;
  if (!a2)
  {
    v14 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v15 = 0;
    goto LABEL_6;
  }
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  v16 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v8)), "initWithText:detailText:image:accessoryImage:accessoryType:", v14, v15, a5, a6, a7);

  return v16;
}

uint64_t sub_10017FE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017FE64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100555310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017FEAC(uint64_t a1, uint64_t a2, void *aBlock)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t (*)(), uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = _Block_copy(aBlock);
  v7 = swift_allocObject(&unk_1004B0FD0, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  swift_retain();
  v8 = swift_unknownObjectRetain(a2);
  v5(v8, sub_100048D64, v7);
  swift_release(v4);
  swift_release(v7);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10017FF3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017FF60(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(v2 + 16))();
  return a2(v4);
}

uint64_t sub_10017FF98()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10017FFBC(uint64_t a1, uint64_t a2)
{
  id *v2;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12[2];
  __int128 v13;
  id v14[4];
  _QWORD v15[4];

  v5 = objc_msgSend(*v2, "userInfo");
  if (v5)
  {
    v6 = v5;
    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    *(_OWORD *)v12 = 0u;
    v13 = 0u;
  }
  sub_10003DC78((uint64_t)v12, (uint64_t)v14, (uint64_t *)&unk_100552300);
  if (!v14[3])
  {
    sub_100007A28((uint64_t)v14, (uint64_t *)&unk_100552300);
    goto LABEL_10;
  }
  v7 = sub_100005EC8(0, (unint64_t *)&qword_100554EF0, NSDictionary_ptr);
  if ((swift_dynamicCast(v12, v14, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0
    || (v8 = v12[0],
        v9 = objc_msgSend(v12[0], "mutableCopy"),
        v8,
        _bridgeAnyObjectToAny(_:)(v15, v9),
        swift_unknownObjectRelease(v9),
        v10 = sub_100005EC8(0, &qword_100554EF8, NSMutableDictionary_ptr),
        (swift_dynamicCast(v14, v15, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0))
  {
LABEL_10:
    v11 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
    if (!a2)
      goto LABEL_8;
LABEL_11:
    objc_msgSend(v11, "setObject:forKey:", a2, a1, v12[0], v12[1], v13);
    goto LABEL_12;
  }
  v11 = v14[0];
  if (a2)
    goto LABEL_11;
LABEL_8:
  objc_msgSend(v11, "removeObjectForKey:", a1, v12[0], v12[1], v13);
LABEL_12:
  objc_msgSend(*v2, "setUserInfo:", v11);

}

uint64_t sub_100180170()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for CarPlayStationsProvider()
{
  return objc_opt_self(_TtC8Podcasts23CarPlayStationsProvider);
}

uint64_t sub_1001801BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = type metadata accessor for ObserverQueue(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StationListOptions(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_100554FB8);
  v10 = *(_QWORD *)(v9 - 8);
  v28 = v9;
  v29 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v0;
  v13 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 16), v14);
  static StationListOptions.list.getter();
  v16 = dispatch thunk of LibraryDataProviderProtocol.fetchStationsObserver(with:)(v8, ObjectType, v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for ObserverQueue.main(_:), v1);
  v17 = sub_10002F9C8(&qword_100554FC0, &qword_100554FC8, (uint64_t)&protocol conformance descriptor for AnyObserver<A>);
  v18 = Promise<A>.observerPublisher(receiveOn:)(v4, v17);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v30 = v18;
  v19 = *(_QWORD *)(v27 + 32);
  swift_retain();
  v20 = sub_10003F544((uint64_t *)&unk_100554FD0);
  v21 = sub_10003F544(&qword_1005545E0);
  v22 = sub_10002F9C8(&qword_100554FE0, (uint64_t *)&unk_100554FD0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_10018077C, v19, v20, v21, v22);
  swift_release(v19);
  swift_release(v30);
  v23 = sub_10002F9C8(&qword_100554FE8, &qword_100554FB8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v24 = v28;
  v25 = Publisher.eraseToAnyPublisher()(v28, v23);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v24);
  return v25;
}

uint64_t sub_100180420@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char *v23;
  Class isa;
  id v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  swift_retain();
  v11 = (uint64_t)sub_100180C90(v10, a2);
  swift_release(a2);
  sub_100181038();
  static OS_os_log.carPlay.getter();
  v12 = swift_bridgeObjectRetain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = (unint64_t)v11 >> 62;
  if (os_log_type_enabled(v13, v14))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v16 = 134217984;
    if (v15)
    {
      if (v11 < 0)
        v30 = v11;
      else
        v30 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v17 = _CocoaArrayWrapper.endIndex.getter(v30);
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      v17 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v11);
    v31 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "CarPlayStationsProvider: section total items count is %ld.", v16, 0xCu);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v11, 2);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v18 = sub_10003F544((uint64_t *)&unk_100553780);
  v19 = swift_allocObject(v18, 40, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1003CA250;
  if (v15)
  {
    if (v11 < 0)
      v28 = v11;
    else
      v28 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v29 = sub_10003F544(&qword_1005544F0);
    v21 = _bridgeCocoaArray<A>(_:)(v28, v29);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    swift_bridgeObjectRetain(v11);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v20);
    v21 = v11;
  }
  swift_bridgeObjectRelease(v11);
  v22 = objc_allocWithZone((Class)CPListSection);
  v23 = sub_100180784(v21);
  swift_bridgeObjectRelease(v21);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v25 = objc_msgSend(v22, "initWithItems:", isa, swift_bridgeObjectRelease(v23).n128_f64[0]);

  *(_QWORD *)(v19 + 32) = v25;
  v31 = v19;
  result = specialized Array._endMutation()(v26);
  *a3 = v31;
  return result;
}

uint64_t sub_1001806EC()
{
  return sub_1001801BC();
}

uint64_t sub_10018070C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10003F544((uint64_t *)&unk_1005550F0);
  v1 = sub_10002F9C8(&qword_100554FB0, (uint64_t *)&unk_1005550F0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_10018077C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t *v2;

  return sub_100180420(a1, v2, a2);
}

char *sub_100180784(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  _QWORD *v16;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (char *)v3;
  v16 = _swiftEmptyArrayStorage;
  result = sub_1001809C0(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      v3 = v16;
      do
      {
        v14 = sub_1001809DC(v5, a1);
        v6 = sub_10003F544(&qword_1005544F0);
        swift_dynamicCast(v15, &v14, v6, (char *)&type metadata for Any + 8, 7);
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        {
          sub_1001809C0(0, v3[2] + 1, 1);
          v3 = v16;
        }
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1001809C0((char *)(v7 > 1), v8 + 1, 1);
          v3 = v16;
        }
        ++v5;
        v3[2] = v8 + 1;
        sub_10013B9CC(v15, &v3[4 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (uint64_t *)(a1 + 32);
      v3 = v16;
      do
      {
        v14 = *v9;
        swift_unknownObjectRetain(v14);
        v10 = sub_10003F544(&qword_1005544F0);
        swift_dynamicCast(v15, &v14, v10, (char *)&type metadata for Any + 8, 7);
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        {
          sub_1001809C0(0, v3[2] + 1, 1);
          v3 = v16;
        }
        v12 = v3[2];
        v11 = v3[3];
        if (v12 >= v11 >> 1)
        {
          sub_1001809C0((char *)(v11 > 1), v12 + 1, 1);
          v3 = v16;
        }
        v3[2] = v12 + 1;
        sub_10013B9CC(v15, &v3[4 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (char *)v3;
  }
  __break(1u);
  return result;
}

char *sub_1001809C0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100180B8C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001809DC(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  uint64_t result;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t ObjectType;
  Swift::String v12;
  void *object;
  __objc2_prot *v14;
  uint64_t v15;
  unint64_t v16;
  __objc2_prot *v17;

  if ((unint64_t)a2 >> 62)
  {
    if (a2 >= 0)
      a2 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = _CocoaArrayWrapper.subscript.getter(a1, a2);
    v14 = &OBJC_PROTOCOL___CPListTemplateItem;
    if (swift_dynamicCastObjCProtocolConditional(v2, 1, &v14))
      return v2;
LABEL_12:
    v15 = 0;
    v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(85);
    v4 = 0xD000000000000046;
    v5 = "NSArray element failed to match the Swift Array Element type\nExpected ";
    goto LABEL_13;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
  v17 = &OBJC_PROTOCOL___CPListTemplateItem;
  v3 = swift_unknownObjectRetain(v2);
  if (swift_dynamicCastObjCProtocolConditional(v3, 1, &v17))
    return v2;
  v15 = 0;
  v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(82);
  v4 = 0xD000000000000043;
  v5 = "Down-casted Array element failed to match the target type\nExpected ";
LABEL_13:
  v7 = (unint64_t)(v5 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v4);
  v8._object = (void *)0x8000000100430BE0;
  v8._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x756F662074756220;
  v9._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v9);
  ObjectType = swift_getObjectType(v2, v10);
  swift_unknownObjectRelease(v2);
  v12._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  result = _assertionFailure(_:_:flags:)("Fatal error", 11, 2, v15, v16, 0);
  __break(1u);
  return result;
}

char *sub_100180B8C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_1005547B0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, (char *)&type metadata for Any + 8);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_100180C90(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  _BYTE v43[24];
  uint64_t v44;
  unint64_t v45;

  v3 = v2;
  v6 = type metadata accessor for FlowPresentationContext(0);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  __chkstk_darwin(v6);
  v38 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Link(0);
  __chkstk_darwin(v37);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_26;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v10)
  {
    v35 = a2;
    v32 = v3;
    v41 = a1 & 0xC000000000000001;
    v34 = enum case for FlowPresentationContext.showDetail(_:);
    v11 = 4;
    v36 = a1;
    v33 = v10;
    while (1)
    {
      v3 = v11 - 4;
      if (!v41)
        break;
      v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1);
      v13 = v11 - 3;
      if (__OFADD__(v3, 1))
        goto LABEL_25;
LABEL_11:
      a2 = (unint64_t *)v12;
      if (StationDetail.showCount.getter() < 1)
      {
        swift_release(v12);
      }
      else
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v38, v34, v40);
        v14 = swift_retain();
        Link.init(station:presentationContext:showChevron:)(v14);
        v15 = (void *)objc_opt_self(MTCountUtil);
        a2 = (unint64_t *)v12;
        v16 = objc_msgSend(v15, "stringForEpisodeCount:titleCase:", StationDetail.episodeCount.getter(), 1);
        if (v16)
        {
          v17 = v16;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          v20 = v19;

        }
        else
        {
          v18 = 0;
          v20 = 0;
        }
        sub_100181098((uint64_t)&v9[*(int *)(v37 + 36)], (uint64_t)v43);
        if (v44)
        {
          v21 = (uint64_t)v35;
          swift_retain();
          v22 = sub_10003F544(&qword_100554920);
          v23 = type metadata accessor for FlowAction(0);
          if ((swift_dynamicCast(&v42, v43, v22, v23, 6) & 1) != 0)
          {
            a2 = v42;
            v24 = sub_10017F460(*((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), v18, v20, 0, (uint64_t)sub_100181074, v21);
            swift_release(v21);
            swift_release(a2);
            swift_bridgeObjectRelease(v20);
            sub_100181120((uint64_t)v9);
            v25 = swift_release(v12);
            a1 = v36;
            v10 = v33;
            if (v24)
            {
              a2 = &v45;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
              v27 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v26 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v27 >= v26 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
              v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v24);
              specialized Array._endMutation()(v28);
            }
            goto LABEL_5;
          }
          swift_release(v21);
          swift_bridgeObjectRelease(v20);
          v10 = v33;
        }
        else
        {
          v29 = v35;
          swift_retain();
          sub_1001810E0((uint64_t)v43);
          swift_release(v29);
          swift_bridgeObjectRelease(v20);
        }
        sub_100181120((uint64_t)v9);
        swift_release(v12);
        a1 = v36;
      }
LABEL_5:
      ++v11;
      if (v13 == v10)
      {
        swift_bridgeObjectRelease(a1);
        return (_QWORD *)v45;
      }
    }
    v12 = *(_QWORD *)(a1 + 8 * v11);
    swift_retain();
    v13 = v11 - 3;
    if (!__OFADD__(v3, 1))
      goto LABEL_11;
LABEL_25:
    __break(1u);
LABEL_26:
    if (a1 < 0)
      v31 = a1;
    else
      v31 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v31);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

unint64_t sub_100181038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100554A00;
  if (!qword_100554A00)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100554A00);
  }
  return result;
}

uint64_t sub_100181074(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return PassthroughSubject.send(_:)(&v2);
}

uint64_t sub_100181098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100554FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001810E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544((uint64_t *)&unk_100554FF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100181120(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Link(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10018115C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = sub_10003F544(&qword_100553DD8);
  v4 = __chkstk_darwin(v3);
  v27 = (uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return _swiftEmptyArrayStorage;
  v26 = v1;
  v9 = *(_QWORD *)(type metadata accessor for ModernShelf(0) - 8);
  v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v11 = *(_QWORD *)(v9 + 72);
  v25 = a1;
  v12 = swift_bridgeObjectRetain(a1);
  v13 = _swiftEmptyArrayStorage;
  do
  {
    ModernShelf.header.getter(v12);
    v14 = type metadata accessor for Header(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1, v14) == 1)
    {
      sub_100007A28((uint64_t)v7, &qword_100553DD8);
    }
    else
    {
      v16 = v27;
      v17 = sub_100185FC8((uint64_t)v7, v27);
      v28 = Header.title.getter(v17);
      v19 = v18;
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
      sub_100007A28((uint64_t)v7, &qword_100553DD8);
      if (v19)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          v13 = sub_10027AE00(0, v13[2] + 1, 1, v13);
        v21 = v13[2];
        v20 = v13[3];
        if (v21 >= v20 >> 1)
          v13 = sub_10027AE00((_QWORD *)(v20 > 1), v21 + 1, 1, v13);
        v13[2] = v21 + 1;
        v22 = &v13[2 * v21];
        v22[4] = v28;
        v22[5] = v19;
      }
    }
    v10 += v11;
    --v8;
  }
  while (v8);
  swift_bridgeObjectRelease(v25);
  return v13;
}

uint64_t (*sub_100181364())(uint64_t a1)
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  v1 = v0[25];
  v2 = v0[26];
  if (v1)
  {
    v3 = (uint64_t (*)(uint64_t))v0[25];
  }
  else
  {
    v4 = v0[22];
    v3 = sub_100181074;
    v0[25] = sub_100181074;
    v0[26] = v4;
    swift_retain_n(v4, 2);
    sub_10002CA30(0, v2);
  }
  sub_10002CA20(v1, v2);
  return v3;
}

uint64_t sub_1001813DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71[3];

  v0 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v0);
  v63 = (char *)&v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10003F544((uint64_t *)&unk_100555140);
  v58 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544((uint64_t *)&unk_1005588E0);
  v59 = *(_QWORD *)(v5 - 8);
  v60 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_100555150);
  v61 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_100555158);
  v65 = *(_QWORD *)(v11 - 8);
  v66 = v11;
  __chkstk_darwin(v11);
  v64 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544((uint64_t *)&unk_100555160);
  v68 = *(_QWORD *)(v13 - 8);
  v69 = v13;
  __chkstk_darwin(v13);
  v67 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v20 = static OS_os_log.carPlay.getter(v19);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "CarPlayHomePageProvider: Fetch content called.", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v25 = v70;
  v71[0] = (id)HomePageProvider.pageContent.getter(v24);
  v26 = swift_allocObject(&unk_1004B1050, 24, 7);
  swift_weakInit(v26 + 16, v25);
  v27 = sub_10003F544(&qword_100552190);
  v28 = sub_10003F544(&qword_100553E70);
  v29 = sub_10002F9C8((unint64_t *)&unk_100555170, &qword_100552190, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.compactMap<A>(_:)(sub_100184260, v26, v27, v28, v29);
  swift_release(v26);
  swift_release(v71[0]);
  v30 = sub_10002F9C8((unint64_t *)&unk_1005588F0, (uint64_t *)&unk_100555140, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  Publisher.removeDuplicates(by:)(sub_100181ED4, 0, v2, v30);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v4, v2);
  v71[0] = *(id *)(v25 + 184);
  v31 = sub_10003F544((uint64_t *)&unk_100555110);
  v32 = sub_10002F9C8((unint64_t *)&unk_100555180, (uint64_t *)&unk_1005588E0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v33 = sub_10002F9C8(&qword_1005564C0, (uint64_t *)&unk_100555110, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v34 = v60;
  Publisher.combineLatest<A>(_:)(v71, v60, v31, v32, v33);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v7, v34);
  v35 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v71[0] = (id)static OS_dispatch_queue.main.getter(v36);
  v37 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v38 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v63, 1, 1, v37);
  v39 = sub_10002F9C8(&qword_100555198, &qword_100555150, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v40 = sub_1000489AC();
  v41 = v64;
  v42 = v62;
  Publisher.receive<A>(on:options:)(v71, v38, v62, v35, v39, v40);
  sub_100007A28(v38, &qword_1005564A0);

  (*(void (**)(char *, uint64_t))(v61 + 8))(v10, v42);
  v43 = swift_allocObject(&unk_1004B1050, 24, 7);
  swift_weakInit(v43 + 16, v25);
  v44 = swift_allocObject(&unk_1004B1078, 32, 7);
  *(_QWORD *)(v44 + 16) = sub_100184268;
  *(_QWORD *)(v44 + 24) = v43;
  v45 = static Subscribers.Demand.unlimited.getter(v44);
  v46 = sub_10003F544((uint64_t *)&unk_100556430);
  v47 = sub_10002F9C8(&qword_1005551B0, &qword_100555158, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v48 = sub_10002F9C8(&qword_1005551B8, (uint64_t *)&unk_100556430, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v49 = v66;
  v50 = v67;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v45, sub_100184294, v44, v66, v46, v47, v48);
  swift_release(v44);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v41, v49);
  v51 = swift_allocObject(&unk_1004B1050, 24, 7);
  swift_weakInit(v51 + 16, v25);
  v52 = sub_10002F9C8((unint64_t *)&unk_1005551C0, (uint64_t *)&unk_100555160, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v53 = v69;
  v54 = Publisher<>.sink(receiveValue:)(sub_1001842C0, v51, v69, v52);
  swift_release(v51);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v50, v53);
  v25 += 192;
  swift_beginAccess(v25, v71, 33, 0);
  v55 = sub_10003F544((uint64_t *)&unk_100556450);
  v56 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v25, v55, v56);
  swift_endAccess(v71);
  return swift_release(v54);
}

uint64_t sub_100181A84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  int EnumCaseMultiPayload;
  char *v24;
  uint64_t v25;
  __n128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];

  v6 = type metadata accessor for Logger(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v44 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v44 - v13;
  v15 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v47, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (!result)
  {
    *a3 = 0;
    return result;
  }
  v22 = result;
  sub_100186174(a1, (uint64_t)v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v18);
  if (EnumCaseMultiPayload == 2)
  {
    v33 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v34 = static OS_os_log.carPlay.getter(v33);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "CarPlayHomePageProvider: The page has no content. Returning an empty shelf list.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v46);
    swift_release(v22);
    *a3 = _swiftEmptyArrayStorage;
    return sub_10003F970((uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for PageContent);
  }
  if (EnumCaseMultiPayload != 3)
  {
    swift_release(v22);
    *a3 = 0;
    return sub_10003F970((uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for PageContent);
  }
  v24 = &v20[*(int *)(sub_10003F544((uint64_t *)&unk_100555340) + 48)];
  sub_10013BE30((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for ModernPage);
  v25 = *(_QWORD *)(v22 + 104);
  v26 = swift_retain();
  v27 = HomePageProvider.isStillLoading.getter(v26);
  swift_release(v25);
  v28 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  if ((v27 & 1) != 0)
  {
    v29 = static OS_os_log.carPlay.getter(v28);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "CarPlayHomePageProvider: Received sections and some sections are still loading.", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }
    swift_release(v22);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v46);
    sub_10003F970((uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for ModernPage);
    *a3 = 0;
  }
  else
  {
    v38 = static OS_os_log.carPlay.getter(v28);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "CarPlayHomePageProvider: Received sections and all sections are loaded.", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
      swift_release(v22);

    }
    else
    {

      swift_release(v22);
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v46);
    v42 = *(_QWORD *)&v17[*(int *)(v15 + 24)];
    swift_bridgeObjectRetain(v42);
    sub_10003F970((uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for ModernPage);
    *a3 = v42;
  }
  v43 = type metadata accessor for PageRenderContentTypes(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v24, v43);
}

uint64_t sub_100181ED4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  _QWORD *v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t (*v74)(char *, uint64_t, uint64_t, __n128);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[5];
  _QWORD *v82;
  _QWORD *v83;

  v4 = type metadata accessor for ModernShelf(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v70 - v9;
  v11 = *a1;
  v12 = *a2;
  v83 = _swiftEmptyArrayStorage;
  v78 = *(_QWORD *)(v11 + 16);
  v79 = v5;
  v73 = v12;
  if (v78)
  {
    v71 = v11;
    v72 = v8;
    v76 = v11 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v74 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v75 = v13;
    v14 = swift_bridgeObjectRetain(v11);
    v15 = 0;
    do
    {
      v18 = v74(v10, v76 + v75 * v15, v4, v14);
      v19 = ModernShelf.items.getter(v18);
      v82 = _swiftEmptyArrayStorage;
      v20 = *(_QWORD *)(v19 + 16);
      specialized ContiguousArray.reserveCapacity(_:)(v20);
      if (v20)
      {
        v21 = v19 + 32;
        while (1)
        {
          sub_10000A520(v21, (uint64_t)v81);
          v22 = sub_10003F544(&qword_1005545F0);
          v23 = type metadata accessor for LegacyEpisodeLockup(0);
          v24 = swift_dynamicCast(&v80, v81, v22, v23, 6);
          if (!(_DWORD)v24)
            break;
          v25 = v80;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
          v26 = v82[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26);
          v27 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v25);
          specialized ContiguousArray._endMutation()(v27);
          v21 += 40;
          if (!--v20)
            goto LABEL_3;
        }
        v80 = 0;
        swift_release(v82);
        v28 = v80;
        swift_bridgeObjectRelease(v19);
        swift_release(v28);
        v16 = _swiftEmptyArrayStorage;
      }
      else
      {
LABEL_3:
        v16 = v82;
        v17 = swift_bridgeObjectRelease(v19);
      }
      ++v15;
      v5 = v79;
      (*(void (**)(char *, uint64_t, __n128))(v79 + 8))(v10, v4, v17);
      sub_1001732EC((uint64_t)v16);
    }
    while (v15 != v78);
    swift_bridgeObjectRelease(v71);
    v29 = (uint64_t)v83;
    v8 = v72;
    v12 = v73;
  }
  else
  {
    v29 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v83 = _swiftEmptyArrayStorage;
  v78 = *(_QWORD *)(v12 + 16);
  if (v78)
  {
    v76 = v12 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v30 = *(_QWORD *)(v5 + 72);
    v74 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v75 = v30;
    v31 = swift_bridgeObjectRetain(v12);
    v32 = 0;
    v77 = v4;
    do
    {
      v35 = v4;
      v36 = v29;
      v37 = v74(v8, v76 + v75 * v32, v35, v31);
      v38 = v8;
      v39 = ModernShelf.items.getter(v37);
      v82 = _swiftEmptyArrayStorage;
      v40 = *(_QWORD *)(v39 + 16);
      specialized ContiguousArray.reserveCapacity(_:)(v40);
      if (v40)
      {
        v41 = v39 + 32;
        while (1)
        {
          sub_10000A520(v41, (uint64_t)v81);
          v42 = sub_10003F544(&qword_1005545F0);
          v43 = type metadata accessor for LegacyEpisodeLockup(0);
          v44 = swift_dynamicCast(&v80, v81, v42, v43, 6);
          if (!(_DWORD)v44)
            break;
          v45 = v80;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v44);
          v46 = v82[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
          v47 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v45);
          specialized ContiguousArray._endMutation()(v47);
          v41 += 40;
          if (!--v40)
            goto LABEL_15;
        }
        v80 = 0;
        swift_release(v82);
        v48 = v80;
        swift_bridgeObjectRelease(v39);
        swift_release(v48);
        v33 = _swiftEmptyArrayStorage;
      }
      else
      {
LABEL_15:
        v33 = v82;
        v34 = swift_bridgeObjectRelease(v39);
      }
      v29 = v36;
      ++v32;
      v8 = v38;
      v4 = v77;
      (*(void (**)(char *, uint64_t, __n128))(v79 + 8))(v38, v77, v34);
      sub_1001732EC((uint64_t)v33);
    }
    while (v32 != v78);
    swift_bridgeObjectRelease(v73);
    v49 = (uint64_t)v83;
    if (!((unint64_t)v29 >> 62))
    {
LABEL_24:
      v50 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v50)
        goto LABEL_25;
LABEL_43:
      swift_bridgeObjectRelease(v29);
      v53 = _swiftEmptyArrayStorage;
      if (!((unint64_t)v49 >> 62))
        goto LABEL_31;
      goto LABEL_44;
    }
  }
  else
  {
    v49 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)v29 >> 62))
      goto LABEL_24;
  }
  if (v29 < 0)
    v67 = v29;
  else
    v67 = v29 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v29);
  v50 = _CocoaArrayWrapper.endIndex.getter(v67);
  swift_bridgeObjectRelease(v29);
  if (!v50)
    goto LABEL_43;
LABEL_25:
  v81[0] = _swiftEmptyArrayStorage;
  result = sub_10017B0DC(0, v50 & ~(v50 >> 63), 0);
  if (v50 < 0)
  {
    __break(1u);
    goto LABEL_51;
  }
  v52 = 0;
  v53 = (_QWORD *)v81[0];
  do
  {
    v54 = *(_QWORD *)(v29 + 8 * v52 + 32);
    v55 = swift_retain();
    v56 = LegacyLockup.adamId.getter(v55);
    swift_release(v54);
    v81[0] = v53;
    v58 = v53[2];
    v57 = v53[3];
    if (v58 >= v57 >> 1)
    {
      sub_10017B0DC(v57 > 1, v58 + 1, 1);
      v53 = (_QWORD *)v81[0];
    }
    ++v52;
    v53[2] = v58 + 1;
    v53[v58 + 4] = v56;
  }
  while (v50 != v52);
  swift_bridgeObjectRelease(v29);
  if (!((unint64_t)v49 >> 62))
  {
LABEL_31:
    v59 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v59)
      goto LABEL_32;
LABEL_48:
    swift_bridgeObjectRelease(v49);
    v61 = _swiftEmptyArrayStorage;
LABEL_49:
    v69 = sub_100163488(v53, v61);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v61);
    return v69;
  }
LABEL_44:
  if (v49 < 0)
    v68 = v49;
  else
    v68 = v49 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v49);
  v59 = _CocoaArrayWrapper.endIndex.getter(v68);
  swift_bridgeObjectRelease(v49);
  if (!v59)
    goto LABEL_48;
LABEL_32:
  v81[0] = _swiftEmptyArrayStorage;
  result = sub_10017B0DC(0, v59 & ~(v59 >> 63), 0);
  if ((v59 & 0x8000000000000000) == 0)
  {
    v60 = 0;
    v61 = (_QWORD *)v81[0];
    do
    {
      v62 = *(_QWORD *)(v49 + 8 * v60 + 32);
      v63 = swift_retain();
      v64 = LegacyLockup.adamId.getter(v63);
      swift_release(v62);
      v81[0] = v61;
      v66 = v61[2];
      v65 = v61[3];
      if (v66 >= v65 >> 1)
      {
        sub_10017B0DC(v65 > 1, v66 + 1, 1);
        v61 = (_QWORD *)v81[0];
      }
      ++v60;
      v61[2] = v66 + 1;
      v61[v66 + 4] = v64;
    }
    while (v59 != v60);
    swift_bridgeObjectRelease(v49);
    goto LABEL_49;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_1001824C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  _BYTE v15[24];

  v4 = sub_10003F544(&qword_1005551E8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v15, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v9 = Strong;
    v10 = sub_1001825E0(a1);
    swift_release(v9);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
    v11 = sub_10003F544(&qword_1005545E0);
    Just.init(_:)(&v14, v11);
    v12 = sub_10002F9C8(&qword_100565800, &qword_1005551E8, (uint64_t)&protocol conformance descriptor for Just<A>);
    v10 = Publisher.eraseToAnyPublisher()(v4, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v10;
}

uint64_t sub_1001825E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v2 = sub_10003F544(&qword_1005551F0);
  v45 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_1005551F8);
  v6 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  v48 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_100555200);
  v10 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  v50 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_100555208);
  v14 = *(_QWORD *)(v13 - 8);
  v51 = v13;
  v52 = v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_10003F544(&qword_100555210);
  v55 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_10003F544(&qword_100555218);
  v56 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = a1;
  v57 = a1;
  swift_bridgeObjectRetain(a1);
  v21 = sub_10003F544(&qword_100553E70);
  v22 = sub_10002F9C8((unint64_t *)&unk_100555220, &qword_100553E70, (uint64_t)&protocol conformance descriptor for [A]);
  Publishers.Sequence.init(sequence:)(&v57, v21, &type metadata for Never, v22, &protocol witness table for Never);
  v23 = swift_allocObject(&unk_1004B1050, 24, 7);
  swift_weakInit(v23 + 16, v44);
  v24 = sub_10003F544((uint64_t *)&unk_10055A270);
  Publishers.Sequence.compactMap<A>(_:)(sub_1001842C8, v23, v2, v24);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v4, v2);
  v25 = swift_release(v23);
  v26 = static Subscribers.Demand.unlimited.getter(v25);
  v27 = sub_10002F9C8(&qword_100555230, &qword_1005551F8, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  v28 = sub_10002F9C8(&qword_100555238, (uint64_t *)&unk_10055A270, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v29 = v26;
  v30 = v47;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v29, sub_100183D00, 0, v47, v24, v27, v28);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v30);
  v31 = sub_10002F9C8(&qword_100555240, &qword_100555200, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v32 = v49;
  Publisher.collect()(v49, v31);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v32);
  v57 = _swiftEmptyArrayStorage;
  v33 = sub_10002F9C8(&qword_100555248, &qword_100555208, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  v34 = v51;
  Publisher.replaceEmpty(with:)(&v57, v51, v33);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v34);
  v35 = swift_allocObject(&unk_1004B10A0, 24, 7);
  v36 = v46;
  *(_QWORD *)(v35 + 16) = v46;
  swift_bridgeObjectRetain(v36);
  v37 = sub_10003F544(&qword_1005545E0);
  v38 = sub_10002F9C8(&qword_100555250, &qword_100555210, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceEmpty<A>);
  v39 = v53;
  Publisher.map<A>(_:)(sub_1001842D0, v35, v53, v37, v38);
  swift_release(v35);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v18, v39);
  v40 = sub_10002F9C8(&qword_100555258, &qword_100555218, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v41 = v54;
  v42 = Publisher.eraseToAnyPublisher()(v54, v40);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v41);
  return v42;
}

void sub_100182A70(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  int v36;
  unint64_t v37;
  _BYTE v38[24];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v38, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v10 = Strong;
    v11 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    static OS_os_log.carPlay.getter(v11);
    v12 = swift_bridgeObjectRetain_n(v8, 4);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, (os_log_type_t)v14))
    {

      swift_bridgeObjectRelease_n(v8, 4);
LABEL_17:
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v37 = v8;
      PassthroughSubject.send(_:)(&v37);
      swift_release(v10);
      return;
    }
    v36 = v14;
    v15 = swift_slowAlloc(22, -1);
    *(_DWORD *)v15 = 134218240;
    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v30 = v8;
      else
        v30 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v16 = _CocoaArrayWrapper.endIndex.getter(v30);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v8);
    v37 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v8);
    *(_WORD *)(v15 + 12) = 2048;
    v37 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v28 = v8;
      else
        v28 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v17 = _CocoaArrayWrapper.endIndex.getter(v28);
      v35 = (uint8_t *)v15;
      if (v17)
      {
LABEL_7:
        v31 = v13;
        v32 = v10;
        v33 = v5;
        v34 = v4;
        if (v17 < 1)
        {
          __break(1u);
          return;
        }
        v18 = 0;
        do
        {
          if ((v8 & 0xC000000000000001) != 0)
            v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v8);
          else
            v19 = *(id *)(v8 + 8 * v18 + 32);
          v20 = v19;
          ++v18;
          v21 = objc_msgSend(v19, "items", v31, v32, v33, v34);
          v22 = sub_10003F544(&qword_1005544F0);
          v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

          sub_1001734C4(v23);
        }
        while (v17 != v18);
        swift_bridgeObjectRelease(v8);
        v24 = v37;
        v5 = v33;
        v4 = v34;
        v13 = v31;
        v10 = v32;
        if (!(v37 >> 62))
          goto LABEL_15;
        goto LABEL_24;
      }
    }
    else
    {
      v17 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v8);
      v35 = (uint8_t *)v15;
      if (v17)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease(v8);
    v24 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_15:
      v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
      v26 = v8;
LABEL_16:
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v24);
      v27 = v35;
      v37 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v36, "CarPlayHomePageProvider: Returned sections count %ld and total section items count %ld.", v27, 0x16u);
      swift_slowDealloc(v27, -1, -1);

      goto LABEL_17;
    }
LABEL_24:
    if (v24 < 0)
      v29 = v24;
    else
      v29 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v25 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v8);
    v26 = v24;
    goto LABEL_16;
  }
}

void sub_100182E08(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Shelf;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD v100[4];
  char v101[24];
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  char v107;

  v88 = sub_10003F544(&qword_100555270);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v5 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_10003F544(&qword_100555278);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_10003F544(&qword_100555280);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_10003F544(&qword_100555288);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_100555290);
  v97 = *(_QWORD *)(v11 - 8);
  v98 = v11;
  __chkstk_darwin(v11);
  v96 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544((uint64_t *)&unk_100555298);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v99 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v101, 0, 0);
  Strong = swift_weakLoadStrong(a1 + 16);
  if (!Strong)
    goto LABEL_17;
  v17 = Strong;
  v86 = v14;
  v18 = ModernShelf.items.getter(Strong);
  v19 = sub_10034EA78(v18);
  swift_bridgeObjectRelease(v18);
  if (!v19)
    goto LABEL_16;
  v85 = v13;
  v102 = (uint64_t)v19;
  v20 = sub_10003F544((uint64_t *)&unk_1005537F0);
  v21 = sub_10002F9C8(&qword_1005552A8, (uint64_t *)&unk_1005537F0, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v20, v21, v22) & 1) == 0)
  {
    swift_release(v17);
    swift_bridgeObjectRelease(v19);
LABEL_17:
    v76 = 0;
    goto LABEL_18;
  }
  v23 = ModernShelf.id.getter();
  v25 = v24;
  type metadata accessor for HomePageProvider(0);
  Shelf = static HomePageProvider.upNextShelfID.getter();
  v28 = v27;
  v84 = a2;
  if (Shelf == v23 && v27 == v25)
  {
    v29 = 5;
    v30 = 7;
    v31 = 6;
LABEL_7:
    v83 = v31;
    swift_bridgeObjectRelease(v25);
LABEL_11:
    swift_bridgeObjectRelease(v25);
    goto LABEL_12;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)(Shelf, v27, v23, v25, 0);
  v33 = swift_bridgeObjectRelease(v28);
  if ((v32 & 1) != 0)
  {
    v29 = 5;
    v30 = 7;
    v83 = 6;
    a2 = v84;
    goto LABEL_11;
  }
  v77 = static HomePageProvider.recentlyPlayedShelfID.getter(v33);
  v79 = v78;
  a2 = v84;
  if (v77 == v23 && v78 == v25)
  {
    v29 = 9;
    v30 = 8;
    v31 = 4;
    goto LABEL_7;
  }
  v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v78, v23, v25, 0);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v79);
  if ((v80 & 1) == 0)
    goto LABEL_15;
  v29 = 9;
  v30 = 8;
  v83 = 4;
LABEL_12:
  v102 = 1;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = 0;
  v107 = v29;
  v34 = EpisodeListType.title.getter();
  if (!v35)
  {
    sub_10003F49C(1, 0, 0, 0, 0, 0, 0, 0, v29);
LABEL_15:
    swift_bridgeObjectRelease(v19);
LABEL_16:
    swift_release(v17);
    goto LABEL_17;
  }
  v82 = v34;
  v81 = v35;
  swift_bridgeObjectRetain(v19);
  v36 = sub_1002E195C(v83, (unint64_t)v19);
  LODWORD(v83) = v29;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v42 = v30;
  v44 = v43;
  swift_bridgeObjectRelease(v19);
  v100[0] = v37;
  v100[1] = v39;
  v100[2] = v41;
  v100[3] = v44;
  v45 = sub_10003F544(&qword_1005552B0);
  v46 = sub_10002F9C8(&qword_1005552B8, &qword_1005552B0, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
  Publishers.Sequence.init(sequence:)(v100, v45, &type metadata for Never, v46, &protocol witness table for Never);
  v47 = swift_allocObject(&unk_1004B1050, 24, 7);
  swift_weakInit(v47 + 16, v17);
  v48 = swift_allocObject(&unk_1004B10C8, 25, 7);
  *(_QWORD *)(v48 + 16) = v47;
  *(_BYTE *)(v48 + 24) = v42;
  v49 = static Subscribers.Demand.unlimited.getter(v48);
  v50 = sub_10003F544(&qword_1005552C0);
  v51 = sub_10002F9C8(&qword_1005552C8, &qword_100555270, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  v52 = sub_10002F9C8((unint64_t *)&unk_1005552D0, &qword_1005552C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v53 = v49;
  v54 = v88;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v53, sub_100186034, v48, v88, v50, v51, v52);
  v55 = v48;
  a2 = v84;
  swift_release(v55);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v5, v54);
  v56 = sub_100005EC8(0, (unint64_t *)&qword_100559F60, CPListItem_ptr);
  v57 = sub_10002F9C8(&qword_1005552E0, &qword_100555278, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v58 = v90;
  Publisher.compactMap<A>(_:)(sub_100183858, 0, v90, v56, v57);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v7, v58);
  v59 = sub_10002F9C8((unint64_t *)&unk_1005552E8, &qword_100555280, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v60 = v93;
  v61 = v92;
  Publisher.collect()(v92, v59);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v9, v61);
  v62 = swift_allocObject(&unk_1004B10F0, 24, 7);
  *(_QWORD *)(v62 + 16) = v19;
  v63 = sub_10003F544((uint64_t *)&unk_1005544E0);
  v64 = sub_10002F9C8(&qword_1005552F8, &qword_100555288, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  v65 = v95;
  v66 = v96;
  Publisher.map<A>(_:)(sub_100186064, v62, v95, v63, v64);
  swift_release(v62);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v60, v65);
  v67 = swift_allocObject(&unk_1004B1050, 24, 7);
  swift_weakInit(v67 + 16, v17);
  v68 = (_QWORD *)swift_allocObject(&unk_1004B1118, 112, 7);
  v68[2] = v67;
  sub_10016965C((uint64_t)&v102, (uint64_t)(v68 + 3));
  v69 = v81;
  v68[12] = v82;
  v68[13] = v69;
  LOBYTE(v50) = v83;
  sub_100168ED4(1, 0, 0, 0, 0, 0, 0, 0, v83);
  v70 = sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
  v71 = sub_10002F9C8(&qword_100555300, &qword_100555290, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v73 = v98;
  v72 = v99;
  Publisher.compactMap<A>(_:)(sub_1001860BC, v68, v98, v70, v71);
  swift_release(v68);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v66, v73);
  v74 = sub_10002F9C8(&qword_100555308, (uint64_t *)&unk_100555298, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v75 = v85;
  v76 = Publisher.eraseToAnyPublisher()(v85, v74);
  swift_release(v17);
  sub_10003F49C(1, 0, 0, 0, 0, 0, 0, 0, v50);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v72, v75);
LABEL_18:
  *a2 = v76;
}

uint64_t sub_1001836C0@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];
  _OWORD v25[3];

  v6 = sub_10003F544((uint64_t *)&unk_100555320);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v24, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v11 = Strong;
    v12 = Strong + 112;
    v13 = *(_QWORD *)(Strong + 152);
    v14 = *(_OWORD *)(Strong + 32);
    v25[0] = *(_OWORD *)(Strong + 16);
    v25[1] = v14;
    v25[2] = *(_OWORD *)(Strong + 48);
    v15 = Strong + 64;
    swift_retain();
    v16 = sub_100181364();
    v18 = v17;
    v19 = sub_1002F8AB8(v12, v13, 1, 0, a2, v25, v15, (uint64_t)v16, v17);
    swift_release(v11);
    swift_release(v13);
    result = swift_release(v18);
  }
  else
  {
    *(_QWORD *)&v25[0] = 0;
    v21 = sub_10003F544(&qword_100559FA0);
    Just.init(_:)(v25, v21);
    v22 = sub_10002F9C8((unint64_t *)&unk_100555330, (uint64_t *)&unk_100555320, (uint64_t)&protocol conformance descriptor for Just<A>);
    v19 = Publisher.eraseToAnyPublisher()(v6, v22);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  *a3 = v19;
  return result;
}

id sub_100183858@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

void sub_100183864(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *a1;
  if (!((unint64_t)a2 >> 62))
  {
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v6)
      goto LABEL_3;
LABEL_27:
    swift_bridgeObjectRelease(a2);
    v8 = _swiftEmptyArrayStorage;
    if (v5 < 0)
      goto LABEL_31;
    goto LABEL_28;
  }
  if (a2 < 0)
    v27 = a2;
  else
    v27 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v6 = _CocoaArrayWrapper.endIndex.getter(v27);
  if (!v6)
    goto LABEL_27;
LABEL_3:
  if (v6 >= 1)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v7 = 0;
      v8 = _swiftEmptyArrayStorage;
      do
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a2);
        v12 = LegacyLockup.title.getter(v10, v11);
        v14 = v13;
        swift_unknownObjectRelease(v10);
        if (v14)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
            v8 = sub_10027AE00(0, v8[2] + 1, 1, v8);
          v16 = v8[2];
          v15 = v8[3];
          if (v16 >= v15 >> 1)
            v8 = sub_10027AE00((_QWORD *)(v15 > 1), v16 + 1, 1, v8);
          v8[2] = v16 + 1;
          v9 = &v8[2 * v16];
          v9[4] = v12;
          v9[5] = v14;
        }
        ++v7;
      }
      while (v6 != v7);
    }
    else
    {
      v17 = 0;
      v8 = _swiftEmptyArrayStorage;
      do
      {
        v19 = *(_QWORD *)(a2 + 8 * v17 + 32);
        swift_retain();
        v22 = LegacyLockup.title.getter(v20, v21);
        v24 = v23;
        swift_release(v19);
        if (v24)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
            v8 = sub_10027AE00(0, v8[2] + 1, 1, v8);
          v26 = v8[2];
          v25 = v8[3];
          if (v26 >= v25 >> 1)
            v8 = sub_10027AE00((_QWORD *)(v25 > 1), v26 + 1, 1, v8);
          v8[2] = v26 + 1;
          v18 = &v8[2 * v26];
          v18[4] = v22;
          v18[5] = v24;
        }
        ++v17;
      }
      while (v6 != v17);
    }
    swift_bridgeObjectRelease(a2);
    if (v5 < 0)
      goto LABEL_31;
LABEL_28:
    if ((v5 & 0x4000000000000000) == 0)
    {
      v28 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v5);
LABEL_30:
      v30 = v28;
      sub_1001FCB68(&v30, v8);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v8);
      *a3 = v30;
      return;
    }
LABEL_31:
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v5);
    v28 = (uint64_t)sub_1001F9A98(v29);
    swift_bridgeObjectRelease(v5);
    goto LABEL_30;
  }
  __break(1u);
  swift_release(v30);
  __break(1u);
}

void sub_100183B00(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char *v23;
  Class isa;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];

  v8 = *a1;
  v9 = a2 + 16;
  swift_beginAccess(a2 + 16, v30, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    v11 = Strong;
    v29 = v8;
    swift_bridgeObjectRetain(v8);
    v12 = sub_100181364();
    v14 = v13;
    v15 = sub_1001842D8(a3, (uint64_t)v12, v13);
    v16 = swift_release(v14);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    v18 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v17 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v18 >= v17 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v15);
    specialized Array._endMutation()(v19);
    if ((unint64_t)v29 >> 62)
    {
      if (v29 < 0)
        v27 = v29;
      else
        v27 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v29);
      v28 = sub_10003F544(&qword_1005544F0);
      v21 = _bridgeCocoaArray<A>(_:)(v27, v28);
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      swift_bridgeObjectRetain(v29);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v20);
      v21 = v29;
    }
    swift_bridgeObjectRelease(v29);
    v22 = objc_allocWithZone((Class)CPListSection);
    swift_bridgeObjectRetain(a4);
    v23 = sub_100180784(v21);
    swift_bridgeObjectRelease(v21);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    v25 = String._bridgeToObjectiveC()();
    v26 = objc_msgSend(v22, "initWithItems:header:sectionIndexTitle:", isa, v25, 0, swift_bridgeObjectRelease(a4).n128_f64[0]);
    swift_release(v11);

    *a5 = v26;
  }
  else
  {
    *a5 = 0;
  }
}

uint64_t sub_100183D00@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

void sub_100183D0C(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = sub_10018115C(a2);
  v6 = v5;
  if (v4 < 0 || (v4 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
    v7 = (uint64_t)sub_1001F9AA4(v8);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v7 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
  }
  v9 = v7;
  sub_100185F20(&v9, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v6);
  *a3 = v9;
}

void sub_100183DCC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, void *a5, void (*a6)(void))
{
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;

  EpisodeListType.title.getter();
  if (v9)
  {
    v10 = v9;
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = objc_msgSend(objc_allocWithZone((Class)CPListItem), "initWithText:detailText:", v11, 0);

  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v13 = a5;
  v14 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v15 = v13;
  sub_10017FF38((uint64_t)v14, (uint64_t)v13);

  v16 = v12;
  a6();

  a2();
}

_QWORD *sub_100183EF8()
{
  _QWORD *v0;

  sub_10003D380(v0 + 8);
  swift_release(v0[13]);
  sub_10003D380(v0 + 14);
  swift_release(v0[19]);
  swift_release(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  swift_release(v0[23]);
  swift_bridgeObjectRelease(v0[24]);
  sub_10002CA30(v0[25], v0[26]);
  return v0;
}

uint64_t sub_100183F5C()
{
  uint64_t v0;

  sub_100183EF8();
  return swift_deallocClassInstance(v0, 216, 7);
}

uint64_t type metadata accessor for CarPlayHomePageProvider()
{
  return objc_opt_self(_TtC8Podcasts23CarPlayHomePageProvider);
}

uint64_t sub_100183F9C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10003F544(&qword_100555100);
  v1 = sub_10002F9C8(&qword_100555108, &qword_100555100, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_10018400C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10003F544((uint64_t *)&unk_1005550F0);
  v1 = sub_10002F9C8(&qword_100554FB0, (uint64_t *)&unk_1005550F0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_10018407C()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_1001840A0(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[2];

  v3 = v2;
  v5 = sub_10003F544(&qword_100555100);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)(v2 + 168) = PassthroughSubject.init()(v6);
  v7 = sub_10003F544((uint64_t *)&unk_1005550F0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  *(_QWORD *)(v2 + 176) = PassthroughSubject.init()(v8);
  v9 = sub_10003F544((uint64_t *)&unk_100555110);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  *(_QWORD *)(v2 + 184) = CurrentValueSubject.init(_:)(v10);
  *(_QWORD *)(v2 + 192) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  v11 = a2[1];
  *(_OWORD *)(v2 + 16) = *a2;
  *(_OWORD *)(v2 + 32) = v11;
  *(_OWORD *)(v2 + 48) = a2[2];
  v12 = sub_10003F544((uint64_t *)&unk_1005588D0);
  BaseObjectGraph.inject<A>(_:)(v20, v12, v12);
  sub_10002099C(v20, v2 + 64);
  v13 = type metadata accessor for HomePageProvider(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  swift_retain();
  *(_QWORD *)(v2 + 104) = HomePageProvider.init(asPartOf:platformContext:)(v14, 1);
  v15 = sub_10003F544((uint64_t *)&unk_100555120);
  BaseObjectGraph.inject<A>(_:)(v20, v15, v15);
  sub_10002099C(v20, v2 + 112);
  v16 = sub_10003F544(&qword_100553720);
  BaseObjectGraph.inject<A>(_:)(v20, v16, v16);
  *(_QWORD *)(v2 + 152) = *(_QWORD *)&v20[0];
  v17 = sub_10003F544((uint64_t *)&unk_100555130);
  BaseObjectGraph.inject<A>(_:)(v20, v17, v17);
  *(_QWORD *)(v2 + 160) = *(_QWORD *)&v20[0];
  v18 = *(_QWORD *)(v2 + 104);
  swift_retain();
  HomePageProvider.loadPageContent()();
  swift_release(v18);
  sub_1001813DC();
  return v3;
}

uint64_t sub_10018423C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100184260@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100181A84(a1, v2, a2);
}

uint64_t sub_100184268(_QWORD *a1)
{
  uint64_t v1;

  return sub_1001824C0(a1, v1);
}

uint64_t sub_100184270()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100184294@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

void sub_1001842C0(uint64_t *a1)
{
  uint64_t v1;

  sub_100182A70(a1, v1);
}

void sub_1001842C8(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100182E08(v1, a1);
}

void sub_1001842D0(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100183D0C(a1, *(_QWORD *)(v2 + 16), a2);
}

id sub_1001842D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  void *object;
  id v17;
  NSString v18;
  id v19;
  __int128 v20;
  id v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  void *v25;
  _BYTE *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  _BYTE *v33;
  id v34;
  _BYTE v36[12];
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[5];
  _QWORD *v44;
  id v45;
  _OWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  Swift::String v50;

  v41 = a2;
  v42 = a3;
  sub_10016965C(a1, (uint64_t)v46);
  v40 = v46[0];
  v39 = v46[1];
  v38 = v46[2];
  v5 = v47;
  v4 = v48;
  v37 = v49;
  v6 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v6);
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v50._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = 0x4C4C415F454553;
  v14._object = (void *)0xE700000000000000;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v50._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v50)._object;

  v17 = objc_allocWithZone((Class)CPListItem);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "initWithText:detailText:image:accessoryImage:accessoryType:", v18, 0, 0, 0, 1, swift_bridgeObjectRelease(object).n128_f64[0]);

  v45 = v19;
  v20 = v39;
  *(_OWORD *)v12 = v40;
  *((_OWORD *)v12 + 1) = v20;
  *((_OWORD *)v12 + 2) = v38;
  *((_QWORD *)v12 + 6) = v5;
  *((_QWORD *)v12 + 7) = v4;
  v12[64] = v37;
  swift_storeEnumTagMultiPayload(v12, v9, 0);
  v21 = objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0));
  sub_1001860CC(a1);
  v22 = objc_msgSend(v21, "init");
  sub_10013BE30((uint64_t)v12, (uint64_t)v8, type metadata accessor for CarPlayTemplateInfo.TemplateType);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  v23 = (uint64_t)&v22[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v22[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], aBlock, 33, 0);
  sub_10017FE64((uint64_t)v8, v23);
  swift_endAccess(aBlock);
  v22[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v24 = v22;
  v25 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v26 = v24;
  sub_10017FF38((uint64_t)v25, (uint64_t)v24);

  v27 = v45;
  v28 = (_QWORD *)swift_allocObject(&unk_1004B1140, 112, 7);
  sub_10016965C(a1, (uint64_t)(v28 + 2));
  v29 = v41;
  v30 = v42;
  v28[11] = v26;
  v28[12] = v29;
  v28[13] = v30;
  aBlock[4] = sub_100186164;
  v44 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017FEAC;
  aBlock[3] = &unk_1004B1158;
  v31 = _Block_copy(aBlock);
  v32 = v44;
  sub_1001860CC(a1);
  v33 = v26;
  v34 = v27;
  swift_retain();
  swift_release(v32);
  objc_msgSend(v34, "setHandler:", v31);

  _Block_release(v31);
  return v34;
}

uint64_t sub_100184694(id *a1, id *a2, id *a3, void **__dst, _QWORD *a5)
{
  void **v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  id *v45;
  void **v46;
  id *v47;
  void **v48;
  unint64_t v49;
  id *v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v78;
  BOOL v79;
  id *v80;
  uint64_t result;
  unint64_t v83;
  void *v84;
  id *v85;
  void **v86;
  id *__src;
  void **__srca;
  id *v89;
  id *v90;
  void **v91;
  id v92;
  id *v93;
  id *v94;
  uint64_t v95;
  unint64_t v96;
  void **v97;
  void **v98;
  id *v99;

  v5 = __dst;
  v6 = a3;
  v7 = (char *)a2 - (char *)a1;
  v8 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v8 = (char *)a2 - (char *)a1;
  v9 = v8 >> 3;
  v10 = (char *)a3 - (char *)a2;
  v11 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0)
    v11 = (char *)a3 - (char *)a2;
  v12 = v11 >> 3;
  v99 = a1;
  v98 = __dst;
  __src = a1;
  if (v9 < v11 >> 3)
  {
    if (v7 < -7)
      goto LABEL_124;
    if (__dst != a1 || &a1[v9] <= __dst)
    {
      v13 = a2;
      memmove(__dst, a1, 8 * v9);
      a2 = v13;
      a1 = __src;
    }
    v91 = &v5[v9];
    v97 = v91;
    if (a2 < v6 && v7 >= 8)
    {
      v89 = v6;
      v14 = a5[2];
      if (v14 <= 1)
        v15 = 1;
      else
        v15 = a5[2];
      v95 = v15;
      while (1)
      {
        v86 = v5;
        __srca = a1;
        v93 = a2;
        v16 = *v5;
        v17 = *a2;
        v18 = v16;
        v19 = objc_msgSend(v17, "header");
        if (v19)
        {
          v20 = v19;
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          v23 = v22;

          if (!v14)
            goto LABEL_40;
        }
        else
        {
          v21 = 0;
          v23 = 0xE000000000000000;
          if (!v14)
            goto LABEL_40;
        }
        v24 = a5[4];
        v25 = a5[5];
        if ((v24 != v21 || v25 != v23)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(a5[4], a5[5], v21, v23, 0) & 1) == 0)
        {
          v33 = a5 + 7;
          v34 = 1;
          while (v14 != v34)
          {
            v26 = v34;
            v35 = *(v33 - 1);
            v36 = *v33;
            if (v35 != v21 || v36 != v23)
            {
              v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v21, v23, 0);
              v34 = v26 + 1;
              v33 += 2;
              if ((v38 & 1) == 0)
                continue;
            }
            goto LABEL_24;
          }
LABEL_40:

          swift_bridgeObjectRelease(v23);
          goto LABEL_55;
        }
        v26 = 0;
LABEL_24:
        swift_bridgeObjectRelease(v23);
        v27 = objc_msgSend(v18, "header");
        if (v27)
        {
          v28 = v27;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          v31 = v30;

          if (v24 != v29)
            goto LABEL_30;
        }
        else
        {
          v29 = 0;
          v31 = 0xE000000000000000;
          if (v24)
            goto LABEL_30;
        }
        if (v25 != v31)
        {
LABEL_30:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v29, v31, 0) & 1) == 0)
          {
            v39 = a5 + 7;
            v40 = 1;
            while (v14 != v40)
            {
              v32 = v40;
              if (v95 == v40)
                goto LABEL_123;
              v41 = *(v39 - 1);
              v42 = *v39;
              if (v41 != v29 || v42 != v31)
              {
                v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v29, v31, 0);
                v40 = v32 + 1;
                v39 += 2;
                if ((v44 & 1) == 0)
                  continue;
              }
              goto LABEL_49;
            }

            swift_bridgeObjectRelease(v31);
LABEL_51:
            v45 = v93 + 1;
            v5 = v86;
            v46 = __srca;
            if (__srca < v93 || __srca >= v45 || __srca != v93)
              *__srca = *v93;
            goto LABEL_58;
          }
          v32 = 0;
LABEL_49:
          v25 = v31;
          goto LABEL_50;
        }
        v32 = 0;
LABEL_50:

        swift_bridgeObjectRelease(v25);
        if (v26 < v32)
          goto LABEL_51;
LABEL_55:
        v46 = __srca;
        if (__srca != v86)
          *__srca = *v86;
        v5 = v86 + 1;
        v98 = v86 + 1;
        v45 = v93;
LABEL_58:
        a1 = v46 + 1;
        if (v5 < v91)
        {
          a2 = v45;
          if (v45 < v89)
            continue;
        }
        v99 = a1;
        break;
      }
    }
LABEL_121:
    sub_1001FA528(&v99, &v98, &v97);
    return 1;
  }
  if (v10 < -7)
    goto LABEL_124;
  if (__dst != a2 || &a2[v12] <= __dst)
  {
    v47 = a2;
    memmove(__dst, a2, 8 * v12);
    a2 = v47;
    a1 = __src;
  }
  v48 = &v5[v12];
  v97 = v48;
  v99 = a2;
  if (a1 >= a2 || v10 < 8)
    goto LABEL_121;
  v49 = a5[2];
  v96 = v49;
  if (v49 <= 1)
    v49 = 1;
  v83 = v49;
  v50 = a2;
  while (1)
  {
    v94 = a2;
    v51 = *--v50;
    v52 = *(v48 - 1);
    v92 = v51;
    v84 = v52;
    v53 = objc_msgSend(v52, "header");
    if (v53)
    {
      v54 = v53;
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v57 = v56;

    }
    else
    {
      v55 = 0;
      v57 = 0xE000000000000000;
    }
    v90 = v6;
    v85 = v6 - 1;
    if (!v96)
      goto LABEL_95;
    v58 = a5[4];
    v59 = a5[5];
    if ((v58 != v55 || v59 != v57)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(a5[4], a5[5], v55, v57, 0) & 1) == 0)
    {
      v67 = a5 + 7;
      v68 = 1;
      while (1)
      {
        v60 = v68;
        if (v96 == v68)
          break;
        v69 = *(v67 - 1);
        v70 = *v67;
        if (v69 != v55 || v70 != v57)
        {
          v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, v55, v57, 0);
          v68 = v60 + 1;
          v67 += 2;
          if ((v72 & 1) == 0)
            continue;
        }
        goto LABEL_79;
      }
LABEL_95:

      swift_bridgeObjectRelease(v57);
      v6 = v85;
      goto LABEL_111;
    }
    v60 = 0;
LABEL_79:
    swift_bridgeObjectRelease(v57);
    v61 = objc_msgSend(v92, "header");
    if (v61)
    {
      v62 = v61;
      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      v65 = v64;

      if (v58 != v63)
        goto LABEL_85;
    }
    else
    {
      v63 = 0;
      v65 = 0xE000000000000000;
      if (v58)
        goto LABEL_85;
    }
    if (v59 == v65)
    {
      v66 = 0;
      goto LABEL_105;
    }
LABEL_85:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, v63, v65, 0) & 1) == 0)
      break;
    v66 = 0;
LABEL_104:
    v59 = v65;
LABEL_105:

    swift_bridgeObjectRelease(v59);
    v79 = v60 < v66;
    v6 = v85;
    if (v79)
    {
LABEL_107:
      v80 = __src;
      if (v90 != v94 || v6 >= v94)
        *v6 = *v50;
      v99 = v50;
      goto LABEL_116;
    }
LABEL_111:
    v97 = v48 - 1;
    v80 = __src;
    v50 = v94;
    if (v90 < v48 || v6 >= v48 || v90 != v48)
      *v6 = *(v48 - 1);
    --v48;
LABEL_116:
    if (v50 > v80)
    {
      a2 = v50;
      if (v48 > v5)
        continue;
    }
    goto LABEL_121;
  }
  v73 = a5 + 7;
  v74 = 1;
  while (1)
  {
    v66 = v74;
    if (v96 == v74)
    {

      swift_bridgeObjectRelease(v65);
      v6 = v85;
      goto LABEL_107;
    }
    if (v83 == v74)
      break;
    v75 = *(v73 - 1);
    v76 = *v73;
    if (v75 != v63 || v76 != v65)
    {
      v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v63, v65, 0);
      v74 = v66 + 1;
      v73 += 2;
      if ((v78 & 1) == 0)
        continue;
    }
    goto LABEL_104;
  }
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  swift_bridgeObjectRelease(a5);
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_100184D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v44;
  void *v45;
  id v46;

  if (a3 == a2)
    return;
  v5 = a3;
  v6 = *a4;
  v7 = a5[2];
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = a5[2];
  v39 = v8;
  v41 = a5 + 7;
LABEL_9:
  v9 = *(void **)(v6 + 8 * v5);
  v40 = v5;
  while (1)
  {
    v10 = *(void **)(v6 + 8 * (v5 - 1));
    v11 = v9;
    v46 = v10;
    v12 = objc_msgSend(v11, "header");
    v44 = v5 - 1;
    v45 = v11;
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

      if (!v7)
        goto LABEL_7;
    }
    else
    {
      v14 = 0;
      v16 = 0xE000000000000000;
      if (!v7)
        goto LABEL_7;
    }
    v18 = a5[4];
    v17 = a5[5];
    if ((v18 != v14 || v17 != v16)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(a5[4], a5[5], v14, v16, 0) & 1) == 0)
    {
      v26 = v41;
      v27 = 1;
      while (v7 != v27)
      {
        v19 = v27;
        v28 = *(v26 - 1);
        v29 = *v26;
        if (v28 != v14 || v29 != v16)
        {
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v14, v16, 0);
          v27 = v19 + 1;
          v26 += 2;
          if ((v31 & 1) == 0)
            continue;
        }
        goto LABEL_18;
      }
LABEL_7:

      swift_bridgeObjectRelease(v16);
LABEL_8:
      v5 = v40 + 1;
      if (v40 + 1 == a2)
        return;
      goto LABEL_9;
    }
    v19 = 0;
LABEL_18:
    swift_bridgeObjectRelease(v16);
    v20 = objc_msgSend(v46, "header");
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

      if (v18 != v22)
        goto LABEL_24;
    }
    else
    {
      v22 = 0;
      v24 = 0xE000000000000000;
      if (v18)
        goto LABEL_24;
    }
    if (v17 == v24)
    {
      v25 = 0;
LABEL_43:

      swift_bridgeObjectRelease(v17);
      if (v19 >= v25)
        goto LABEL_8;
      if (!v6)
        break;
      goto LABEL_45;
    }
LABEL_24:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v18, v17, v22, v24, 0) & 1) != 0)
    {
      v25 = 0;
LABEL_42:
      v17 = v24;
      goto LABEL_43;
    }
    v32 = v41;
    v33 = 1;
    while (v7 != v33)
    {
      v25 = v33;
      if (v39 == v33)
        goto LABEL_49;
      v34 = *(v32 - 1);
      v35 = *v32;
      if (v34 != v22 || v35 != v24)
      {
        v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v22, v24, 0);
        v33 = v25 + 1;
        v32 += 2;
        if ((v37 & 1) == 0)
          continue;
      }
      goto LABEL_42;
    }

    swift_bridgeObjectRelease(v24);
    if (!v6)
      break;
LABEL_45:
    v9 = *(void **)(v6 + 8 * v5);
    *(_QWORD *)(v6 + 8 * v5) = *(_QWORD *)(v6 + 8 * v44);
    *(_QWORD *)(v6 + 8 * v44) = v9;
    --v5;
    if (v44 == a1)
      goto LABEL_8;
  }
  __break(1u);
LABEL_49:
  __break(1u);
}

void sub_100185074(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  _BOOL4 v47;
  Swift::Int v48;
  Swift::Int v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v78;
  int v79;
  uint64_t *v80;
  Swift::Int v81;
  Swift::Int v82;
  uint64_t *v83;
  uint64_t v84;
  Swift::Int v85;
  unint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  Swift::Int v90;
  Swift::Int v91;
  void *v92;
  id v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  char v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  id *v167;
  id *v168;
  unint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id *v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  Swift::Int v182;
  Swift::Int v183;
  uint64_t v184;
  uint64_t v185;
  Swift::Int v186;
  char *v187;
  char *v188;
  void **__dst;
  Swift::Int v190;
  Swift::Int v191;
  Swift::Int v192;
  uint64_t *v193;
  uint64_t v194;
  Swift::Int v195;
  uint64_t v196;
  _QWORD *v197;
  int v198;
  void *v199;
  unint64_t v200;
  id v201;
  id *v202;
  uint64_t v203;

  v3 = (unint64_t)a2;
  v5 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3);
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
      {
        swift_bridgeObjectRetain(v3);
        sub_100184D98(0, v5, 1, a1, (_QWORD *)v3);
        swift_bridgeObjectRelease_n(v3, 4);
      }
      else
      {
        swift_bridgeObjectRelease_n(v3, 3);
      }
      return;
    }
    goto LABEL_261;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_269;
  v197 = (_QWORD *)v3;
  v181 = a1;
  v182 = v6;
  v194 = v2;
  if (v5 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v203 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 != 1)
    {
      v120 = _swiftEmptyArrayStorage[2];
LABEL_224:
      v188 = v11;
      if (v120 < 2)
      {
LABEL_235:
        swift_bridgeObjectRelease(v188);
        *(_QWORD *)((v203 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()(v179);
        swift_bridgeObjectRelease_n(v197, 3);
        swift_bridgeObjectRelease(v203);
        return;
      }
      v173 = *v181;
      while (1)
      {
        v3 = v120 - 2;
        if (v120 < 2)
          goto LABEL_254;
        if (!v173)
          goto LABEL_268;
        v174 = *(_QWORD *)&v188[16 * v3 + 32];
        v175 = *(_QWORD *)&v188[16 * v120 + 24];
        v176 = (id *)(v173 + 8 * *(_QWORD *)&v188[16 * v120 + 16]);
        swift_bridgeObjectRetain(v197);
        sub_100184694((id *)(v173 + 8 * v174), v176, (id *)(v173 + 8 * v175), __dst, v197);
        if (v194)
        {
          v3 = (unint64_t)v197;
          v171 = v188;
          goto LABEL_221;
        }
        swift_bridgeObjectRelease(v197);
        if (v175 < v174)
          goto LABEL_256;
        if ((swift_isUniquelyReferenced_nonNull_native(v188) & 1) == 0)
          v188 = sub_1001FA68C((uint64_t)v188);
        if (v3 >= *((_QWORD *)v188 + 2))
          goto LABEL_257;
        v194 = 0;
        v177 = &v188[16 * v3 + 32];
        *(_QWORD *)v177 = v174;
        *((_QWORD *)v177 + 1) = v175;
        v178 = *((_QWORD *)v188 + 2);
        if (v120 > v178)
          goto LABEL_258;
        memmove(&v188[16 * v120 + 16], &v188[16 * v120 + 32], 16 * (v178 - v120));
        *((_QWORD *)v188 + 2) = v178 - 1;
        v120 = v178 - 1;
        if (v178 <= 2)
          goto LABEL_235;
      }
    }
  }
  else
  {
    v8 = v7 >> 1;
    v9 = sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v203 = v10;
  }
  v12 = 0;
  v13 = *a1;
  v193 = (uint64_t *)(v3 + 56);
  v180 = *a1 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v14 = v5;
  v186 = v5;
  v196 = *a1;
  while (2)
  {
    v15 = v12 + 1;
    v187 = v11;
    v195 = v12;
    if (v12 + 1 >= v14)
      goto LABEL_110;
    v190 = v12 + 1;
    v16 = *(void **)(v13 + 8 * v15);
    v17 = *(void **)(v13 + 8 * v12);
    v18 = v16;
    v19 = v17;
    v20 = objc_msgSend(v18, "header");
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

    }
    else
    {
      v22 = 0;
      v24 = 0xE000000000000000;
    }
    v3 = (unint64_t)v197;
    v200 = v197[2];
    if (v200)
    {
      v26 = v197[4];
      v25 = v197[5];
      if ((v26 != v22 || v25 != v24) && (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v22, v24, 0) & 1) == 0)
      {
        v34 = v193;
        v35 = 1;
        while (1)
        {
          v27 = v35;
          if (v200 == v35)
            break;
          v36 = *(v34 - 1);
          v37 = *v34;
          if (v36 != v22 || v37 != v24)
          {
            v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v22, v24, 0);
            v35 = v27 + 1;
            v34 += 2;
            if ((v39 & 1) == 0)
              continue;
          }
          goto LABEL_22;
        }

        swift_bridgeObjectRelease(v24);
        v198 = 0;
        goto LABEL_53;
      }
      v27 = 0;
LABEL_22:
      v28 = objc_msgSend(v19, "header", swift_bridgeObjectRelease(v24).n128_f64[0]);
      if (v28)
      {
        v29 = v28;
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v32 = v31;

        if (v26 != v30)
          goto LABEL_29;
      }
      else
      {
        v30 = 0;
        v32 = 0xE000000000000000;
        if (v26)
          goto LABEL_29;
      }
      if (v25 == v32)
      {
        v33 = 0;
        goto LABEL_51;
      }
LABEL_29:
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v30, v32, 0) & 1) == 0)
      {
        v40 = v19;
        if (v200 <= 1)
          v41 = 1;
        else
          v41 = v200;
        v3 = (unint64_t)v193;
        v42 = 1;
        while (1)
        {
          v33 = v42;
          if (v200 == v42)
            break;
          if (v41 == v42)
            goto LABEL_259;
          v43 = *(_QWORD *)(v3 - 8);
          v44 = *(_QWORD *)v3;
          if (v43 != v30 || v44 != v32)
          {
            v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v30, v32, 0);
            v42 = v33 + 1;
            v3 += 16;
            if ((v46 & 1) == 0)
              continue;
          }
          v25 = v32;
          v19 = v40;
          goto LABEL_51;
        }

        swift_bridgeObjectRelease(v32);
        v47 = 1;
        goto LABEL_52;
      }
      v33 = 0;
      v25 = v32;
LABEL_51:

      swift_bridgeObjectRelease(v25);
      v47 = v27 < v33;
LABEL_52:
      v198 = v47;
LABEL_53:
      v3 = (unint64_t)v197;
      v11 = v187;
      goto LABEL_54;
    }

    swift_bridgeObjectRelease(v24);
    v198 = 0;
LABEL_54:
    v12 = v195;
    v48 = v195 + 2;
    v14 = v186;
    v13 = v196;
    v49 = v190;
    if (v195 + 2 < v186)
    {
      if (v200 <= 1)
        v50 = 1;
      else
        v50 = v200;
      v184 = v50;
      while (1)
      {
        v51 = *(void **)(v13 + 8 * v49);
        v52 = *(id *)(v13 + 8 * v48);
        v53 = v51;
        v54 = objc_msgSend(v52, "header");
        if (v54)
        {
          v55 = v54;
          v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v58 = v57;

        }
        else
        {
          v56 = 0;
          v58 = 0xE000000000000000;
        }
        v3 = (unint64_t)v197;
        if (v200)
        {
          v60 = v197[4];
          v59 = v197[5];
          if (v60 == v56 && v59 == v58
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v60, v59, v56, v58, 0) & 1) != 0)
          {
            v61 = 0;
LABEL_70:
            v62 = objc_msgSend(v53, "header", swift_bridgeObjectRelease(v58).n128_f64[0]);
            if (v62)
            {
              v63 = v62;
              v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
              v66 = v65;

              if (v60 != v64)
              {
LABEL_76:
                if ((_stringCompareWithSmolCheck(_:_:expecting:)(v60, v59, v64, v66, 0) & 1) == 0)
                {
                  v3 = (unint64_t)v193;
                  v74 = 1;
                  while (1)
                  {
                    v67 = v74;
                    if (v200 == v74)
                      break;
                    if (v184 == v74)
                      goto LABEL_242;
                    v75 = *(_QWORD *)(v3 - 8);
                    v76 = *(_QWORD *)v3;
                    if (v75 != v64 || v76 != v66)
                    {
                      v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v64, v66, 0);
                      v74 = v67 + 1;
                      v3 += 16;
                      if ((v78 & 1) == 0)
                        continue;
                    }
                    goto LABEL_94;
                  }

                  swift_bridgeObjectRelease(v66);
                  v3 = (unint64_t)v197;
                  v11 = v187;
                  if ((v198 & 1) == 0)
                  {
                    v15 = v48;
                    v14 = v186;
                    v13 = v196;
                    v12 = v195;
                    goto LABEL_110;
                  }
                  goto LABEL_61;
                }
                v67 = 0;
LABEL_94:
                v59 = v66;
                goto LABEL_95;
              }
            }
            else
            {
              v64 = 0;
              v66 = 0xE000000000000000;
              if (v60)
                goto LABEL_76;
            }
            if (v59 != v66)
              goto LABEL_76;
            v67 = 0;
LABEL_95:

            swift_bridgeObjectRelease(v59);
            v79 = v61 >= v67;
            v3 = (unint64_t)v197;
            v11 = v187;
            if (v198 == v79)
            {
              v14 = v186;
              v13 = v196;
LABEL_100:
              v12 = v195;
              break;
            }
            goto LABEL_61;
          }
          v68 = v193;
          v69 = 1;
          while (1)
          {
            v61 = v69;
            if (v200 == v69)
              break;
            v70 = *(v68 - 1);
            v71 = *v68;
            if (v70 != v56 || v71 != v58)
            {
              v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, v56, v58, 0);
              v69 = v61 + 1;
              v68 += 2;
              if ((v73 & 1) == 0)
                continue;
            }
            goto LABEL_70;
          }
          v3 = (unint64_t)v197;
          v11 = v187;
        }

        swift_bridgeObjectRelease(v58);
        if ((v198 & 1) != 0)
        {
          v14 = v186;
          v13 = v196;
          v12 = v195;
          if (v48 < v195)
            goto LABEL_262;
LABEL_103:
          if (v12 < v48)
          {
            v80 = (uint64_t *)(v180 + 8 * v48);
            v81 = v48;
            v82 = v12;
            v83 = (uint64_t *)(v13 + 8 * v12);
            do
            {
              if (v82 != --v81)
              {
                if (!v13)
                  goto LABEL_267;
                v84 = *v83;
                *v83 = *v80;
                *v80 = v84;
              }
              ++v82;
              --v80;
              ++v83;
            }
            while (v82 < v81);
          }
          v15 = v48;
          goto LABEL_110;
        }
LABEL_61:
        v49 = v48++;
        v14 = v186;
        v13 = v196;
        if (v48 == v186)
        {
          v48 = v186;
          goto LABEL_100;
        }
      }
    }
    v15 = v48;
    if (v198)
    {
      if (v48 < v12)
        goto LABEL_262;
      goto LABEL_103;
    }
LABEL_110:
    if (v15 >= v14)
      goto LABEL_166;
    if (__OFSUB__(v15, v12))
      goto LABEL_260;
    if (v15 - v12 >= v182)
      goto LABEL_166;
    v85 = v12 + v182;
    if (__OFADD__(v12, v182))
      goto LABEL_263;
    if (v85 >= v14)
      v85 = v14;
    if (v85 < v12)
    {
LABEL_264:
      __break(1u);
LABEL_265:
      swift_bridgeObjectRelease_n(v3, 3);
      __break(1u);
LABEL_266:
      swift_bridgeObjectRelease_n(v197, 3);
      __break(1u);
LABEL_267:
      swift_bridgeObjectRelease_n(v3, 3);
      __break(1u);
LABEL_268:
      swift_bridgeObjectRelease_n(v197, 3);
      __break(1u);
LABEL_269:
      swift_bridgeObjectRelease_n(v3, 4);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return;
    }
    if (v15 == v85)
      goto LABEL_166;
    v86 = *(_QWORD *)(v3 + 16);
    if (v86 <= 1)
      v87 = 1;
    else
      v87 = *(_QWORD *)(v3 + 16);
    v183 = v85;
    v185 = v87;
    while (2)
    {
      v89 = *(void **)(v13 + 8 * v15);
      v191 = v15;
      v90 = v15;
      while (1)
      {
        v91 = v90 - 1;
        v92 = *(void **)(v13 + 8 * (v90 - 1));
        v88 = v89;
        v201 = v92;
        v93 = objc_msgSend(v88, "header");
        if (v93)
        {
          v94 = v93;
          v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
          v97 = v96;

          if (!v86)
            goto LABEL_123;
        }
        else
        {
          v95 = 0;
          v97 = 0xE000000000000000;
          if (!v86)
            goto LABEL_123;
        }
        v99 = *(_QWORD *)(v3 + 32);
        v98 = *(_QWORD *)(v3 + 40);
        v199 = v88;
        if ((v99 != v95 || v98 != v97)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v99, v98, v95, v97, 0) & 1) == 0)
        {
          break;
        }
        v100 = 0;
LABEL_134:
        v101 = objc_msgSend(v201, "header", swift_bridgeObjectRelease(v97).n128_f64[0]);
        if (v101)
        {
          v102 = v101;
          v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
          v105 = v104;

          if (v99 != v103)
            goto LABEL_140;
        }
        else
        {
          v103 = 0;
          v105 = 0xE000000000000000;
          if (v99)
            goto LABEL_140;
        }
        if (v98 == v105)
        {
          v106 = 0;
          goto LABEL_159;
        }
LABEL_140:
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v99, v98, v103, v105, 0) & 1) == 0)
        {
          v3 = (unint64_t)v193;
          v113 = 1;
          while (v86 != v113)
          {
            v106 = v113;
            if (v185 == v113)
            {
              __break(1u);
LABEL_238:
              __break(1u);
LABEL_239:
              __break(1u);
LABEL_240:
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              __break(1u);
LABEL_244:
              __break(1u);
LABEL_245:
              __break(1u);
LABEL_246:
              __break(1u);
LABEL_247:
              __break(1u);
LABEL_248:
              __break(1u);
LABEL_249:
              __break(1u);
LABEL_250:
              __break(1u);
LABEL_251:
              __break(1u);
LABEL_252:
              __break(1u);
LABEL_253:
              __break(1u);
LABEL_254:
              __break(1u);
LABEL_255:
              __break(1u);
LABEL_256:
              __break(1u);
LABEL_257:
              __break(1u);
LABEL_258:
              __break(1u);
LABEL_259:
              __break(1u);
LABEL_260:
              __break(1u);
LABEL_261:
              __break(1u);
LABEL_262:
              __break(1u);
LABEL_263:
              __break(1u);
              goto LABEL_264;
            }
            v114 = *(_QWORD *)(v3 - 8);
            v115 = *(_QWORD *)v3;
            if (v114 != v103 || v115 != v105)
            {
              v117 = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v115, v103, v105, 0);
              v113 = v106 + 1;
              v3 += 16;
              if ((v117 & 1) == 0)
                continue;
            }
            goto LABEL_158;
          }

          swift_bridgeObjectRelease(v105);
          v13 = v196;
          v3 = (unint64_t)v197;
          if (!v196)
            goto LABEL_265;
          goto LABEL_161;
        }
        v106 = 0;
LABEL_158:
        v98 = v105;
LABEL_159:

        swift_bridgeObjectRelease(v98);
        v13 = v196;
        v3 = (unint64_t)v197;
        if (v100 >= v106)
          goto LABEL_124;
        if (!v196)
          goto LABEL_265;
LABEL_161:
        v89 = *(void **)(v13 + 8 * v90);
        *(_QWORD *)(v13 + 8 * v90) = *(_QWORD *)(v13 + 8 * v91);
        *(_QWORD *)(v13 + 8 * v91) = v89;
        --v90;
        if (v91 == v195)
          goto LABEL_124;
      }
      v107 = v193;
      v108 = 1;
      while (v86 != v108)
      {
        v100 = v108;
        v109 = *(v107 - 1);
        v110 = *v107;
        if (v109 != v95 || v110 != v97)
        {
          v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v109, v110, v95, v97, 0);
          v108 = v100 + 1;
          v107 += 2;
          if ((v112 & 1) == 0)
            continue;
        }
        goto LABEL_134;
      }
      v3 = (unint64_t)v197;
      v88 = v199;
LABEL_123:

      swift_bridgeObjectRelease(v97);
      v13 = v196;
LABEL_124:
      v15 = v191 + 1;
      if (v191 + 1 != v183)
        continue;
      break;
    }
    v15 = v183;
    v11 = v187;
    v12 = v195;
LABEL_166:
    if (v15 < v12)
      goto LABEL_255;
    v192 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1001FA388(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v119 = *((_QWORD *)v11 + 2);
    v118 = *((_QWORD *)v11 + 3);
    v120 = v119 + 1;
    v13 = v196;
    if (v119 >= v118 >> 1)
    {
      v170 = sub_1001FA388((char *)(v118 > 1), v119 + 1, 1, v11);
      v13 = v196;
      v11 = v170;
    }
    *((_QWORD *)v11 + 2) = v120;
    v3 = (unint64_t)(v11 + 32);
    v121 = &v11[16 * v119 + 32];
    *(_QWORD *)v121 = v195;
    *((_QWORD *)v121 + 1) = v192;
    if (!v119)
    {
      v120 = 1;
LABEL_214:
      v14 = v186;
      v12 = v192;
      v3 = (unint64_t)v197;
      if (v192 >= v186)
        goto LABEL_224;
      continue;
    }
    break;
  }
  while (2)
  {
    v122 = v120 - 1;
    if (v120 >= 4)
    {
      v127 = (_QWORD *)(v3 + 16 * v120);
      v128 = *(v127 - 8);
      v129 = *(v127 - 7);
      v133 = __OFSUB__(v129, v128);
      v130 = v129 - v128;
      if (v133)
        goto LABEL_243;
      v132 = *(v127 - 6);
      v131 = *(v127 - 5);
      v133 = __OFSUB__(v131, v132);
      v125 = v131 - v132;
      v126 = v133;
      if (v133)
        goto LABEL_244;
      v134 = v120 - 2;
      v135 = (uint64_t *)(v3 + 16 * (v120 - 2));
      v137 = *v135;
      v136 = v135[1];
      v133 = __OFSUB__(v136, v137);
      v138 = v136 - v137;
      if (v133)
        goto LABEL_246;
      v133 = __OFADD__(v125, v138);
      v139 = v125 + v138;
      if (v133)
        goto LABEL_249;
      if (v139 >= v130)
      {
        v157 = (uint64_t *)(v3 + 16 * v122);
        v159 = *v157;
        v158 = v157[1];
        v133 = __OFSUB__(v158, v159);
        v160 = v158 - v159;
        if (v133)
          goto LABEL_253;
        v150 = v125 < v160;
      }
      else
      {
LABEL_185:
        if ((v126 & 1) != 0)
          goto LABEL_245;
        v134 = v120 - 2;
        v140 = (uint64_t *)(v3 + 16 * (v120 - 2));
        v142 = *v140;
        v141 = v140[1];
        v143 = __OFSUB__(v141, v142);
        v144 = v141 - v142;
        v145 = v143;
        if (v143)
          goto LABEL_248;
        v146 = (uint64_t *)(v3 + 16 * v122);
        v148 = *v146;
        v147 = v146[1];
        v133 = __OFSUB__(v147, v148);
        v149 = v147 - v148;
        if (v133)
          goto LABEL_251;
        if (__OFADD__(v144, v149))
          goto LABEL_252;
        if (v144 + v149 < v125)
          goto LABEL_197;
        v150 = v125 < v149;
      }
      if (v150)
        v122 = v134;
    }
    else
    {
      if (v120 == 3)
      {
        v124 = *((_QWORD *)v11 + 4);
        v123 = *((_QWORD *)v11 + 5);
        v133 = __OFSUB__(v123, v124);
        v125 = v123 - v124;
        v126 = v133;
        goto LABEL_185;
      }
      v151 = *((_QWORD *)v11 + 4);
      v152 = *((_QWORD *)v11 + 5);
      v133 = __OFSUB__(v152, v151);
      v144 = v152 - v151;
      v145 = v133;
LABEL_197:
      if ((v145 & 1) != 0)
        goto LABEL_247;
      v153 = (uint64_t *)(v3 + 16 * v122);
      v155 = *v153;
      v154 = v153[1];
      v133 = __OFSUB__(v154, v155);
      v156 = v154 - v155;
      if (v133)
        goto LABEL_250;
      if (v156 < v144)
        goto LABEL_214;
    }
    v161 = v122 - 1;
    if (v122 - 1 >= v120)
      goto LABEL_238;
    if (!v13)
      goto LABEL_266;
    v162 = (uint64_t *)(v3 + 16 * v161);
    v163 = *v162;
    v164 = v122;
    v165 = (_QWORD *)(v3 + 16 * v122);
    v166 = v165[1];
    v167 = (id *)(v13 + 8 * *v162);
    v168 = (id *)(v13 + 8 * *v165);
    v202 = (id *)(v13 + 8 * v166);
    v3 = (unint64_t)v197;
    swift_bridgeObjectRetain(v197);
    sub_100184694(v167, v168, v202, __dst, v197);
    if (!v194)
    {
      swift_bridgeObjectRelease(v197);
      if (v166 < v163)
        goto LABEL_239;
      if (v164 > *((_QWORD *)v11 + 2))
        goto LABEL_240;
      v194 = 0;
      *v162 = v163;
      v3 = (unint64_t)(v11 + 32);
      *(_QWORD *)&v11[16 * v161 + 40] = v166;
      v169 = *((_QWORD *)v11 + 2);
      if (v164 >= v169)
        goto LABEL_241;
      v120 = v169 - 1;
      memmove(v165, v165 + 2, 16 * (v169 - 1 - v164));
      *((_QWORD *)v11 + 2) = v169 - 1;
      v13 = v196;
      if (v169 <= 2)
        goto LABEL_214;
      continue;
    }
    break;
  }
  v171 = v11;
LABEL_221:
  swift_bridgeObjectRelease(v171);
  swift_bridgeObjectRelease(v3);
  *(_QWORD *)((v203 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v172);
  swift_bridgeObjectRelease_n(v3, 3);
  swift_bridgeObjectRelease(v203);
}

uint64_t sub_100185F20(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1001FCC14(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  swift_bridgeObjectRetain(a2);
  sub_100185074(v9, a2);
  swift_bridgeObjectRelease(a2);
  specialized ContiguousArray._endMutation()(v7);
  return swift_bridgeObjectRelease_n(a2, 2);
}

uint64_t sub_100185FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100553DD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100186010()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100186034@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1001836C0(*(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), a1);
}

uint64_t sub_100186040()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100186064(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100183864(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_10018606C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_10003F49C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  return swift_deallocObject(v0, 112, 7);
}

void sub_1001860BC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100183B00(a1, *(_QWORD *)(v2 + 16), v2 + 24, *(_QWORD *)(v2 + 104), a2);
}

uint64_t sub_1001860CC(uint64_t a1)
{
  sub_100168ED4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return a1;
}

uint64_t sub_100186114()
{
  uint64_t v0;

  sub_10003F49C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));

  swift_release(*(_QWORD *)(v0 + 104));
  return swift_deallocObject(v0, 112, 7);
}

void sub_100186164(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;

  sub_100183DCC(a1, a2, a3, v3 + 16, *(void **)(v3 + 88), *(void (**)(void))(v3 + 96));
}

uint64_t sub_100186174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1001861BC(uint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  NSString v12;
  void *v13;
  id v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  void *object;
  NSString v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Class isa;
  id v26;
  uint64_t v27;
  objc_super v28;
  uint64_t v29;
  Swift::String v30;

  v2 = v1;
  v4 = objc_msgSend(objc_allocWithZone((Class)MTPlayerItem), "init");
  v5 = PendingPlaybackMetadata.adamId.getter();
  if ((v6 & 1) == 0)
  {
    v7 = v5;
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_5;
    __break(1u);
  }
  v7 = 0;
LABEL_5:
  objc_msgSend(v4, "setEpisodeStoreId:", v7);
  v8 = v4;
  PendingPlaybackMetadata.uuid.getter();
  if (v9)
  {
    v11 = v9;
    v12 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v10 = swift_bridgeObjectRelease(v11).n128_u64[0];
  }
  else
  {
    v12 = 0;
  }
  objc_msgSend(v8, "setEpisodeUuid:", v12, v10);

  v13 = (void *)objc_opt_self(NSBundle);
  v14 = v8;
  v15 = objc_msgSend(v13, "mainBundle");
  v30._object = (void *)0x8000000100430E00;
  v16._countAndFlagsBits = 0x474E4944414F4CLL;
  v16._object = (void *)0xE700000000000000;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v30._countAndFlagsBits = 0xD00000000000002FLL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v30)._object;

  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setTitle:", v19, swift_bridgeObjectRelease(object).n128_f64[0]);

  objc_msgSend(v14, "setIsPlaceholder:", 1);
  v20 = v14;
  PendingPlaybackMetadata.duration.getter();
  objc_msgSend(v20, "setDuration:");

  v21 = v20;
  PendingPlaybackMetadata.position.getter();
  objc_msgSend(v21, "setPlayhead:");

  v22 = sub_10003F544((uint64_t *)&unk_100553780);
  v23 = swift_allocObject(v22, 40, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v23 + 32) = v21;
  v29 = v23;
  specialized Array._endMutation()(v23);
  sub_100186514();
  v24 = v21;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v29);
  v28.receiver = v2;
  v28.super_class = (Class)type metadata accessor for PlaceholderManifest();
  v26 = objc_msgSendSuper2(&v28, "initWithItems:", isa);

  if (v26)
  {
    v27 = type metadata accessor for PendingPlaybackMetadata(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1, v27);

  }
  else
  {
    __break(1u);
  }
}

id sub_1001864C4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceholderManifest();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PlaceholderManifest()
{
  return objc_opt_self(MTPlaceholderManifest);
}

unint64_t sub_100186514()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005545C0;
  if (!qword_1005545C0)
  {
    v1 = objc_opt_self(MTPlayerItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005545C0);
  }
  return result;
}

uint64_t LibraryEpisodePagePresenter.Configuration.episodeUUID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t LibraryEpisodePagePresenter.Configuration.episodeUUID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*LibraryEpisodePagePresenter.Configuration.episodeUUID.modify())()
{
  return UInt64.int64Representation.getter;
}

uint64_t LibraryEpisodePagePresenter.Configuration.stationUUID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t LibraryEpisodePagePresenter.Configuration.stationUUID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*LibraryEpisodePagePresenter.Configuration.stationUUID.modify())()
{
  return UInt64.int64Representation.getter;
}

uint64_t LibraryEpisodePagePresenter.Configuration.referenceTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t LibraryEpisodePagePresenter.Configuration.referenceTime.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*LibraryEpisodePagePresenter.Configuration.referenceTime.modify())()
{
  return UInt64.int64Representation.getter;
}

uint64_t LibraryEpisodePagePresenter.Configuration.playerTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t LibraryEpisodePagePresenter.Configuration.playerTime.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*LibraryEpisodePagePresenter.Configuration.playerTime.modify())()
{
  return UInt64.int64Representation.getter;
}

void __swiftcall LibraryEpisodePagePresenter.Configuration.init(episodeUUID:stationUUID:referenceTime:playerTime:)(Podcasts::LibraryEpisodePagePresenter::Configuration *__return_ptr retstr, Swift::String episodeUUID, Swift::String_optional stationUUID, Swift::Double_optional referenceTime, Swift::Double_optional playerTime)
{
  Swift::Double v5;
  char v6;

  retstr->episodeUUID = episodeUUID;
  retstr->stationUUID = stationUUID;
  retstr->referenceTime.value = *(Swift::Double *)&referenceTime.is_nil;
  retstr->referenceTime.is_nil = playerTime.is_nil;
  retstr->playerTime.value = v5;
  retstr->playerTime.is_nil = v6 & 1;
}

uint64_t LibraryEpisodePagePresenter.__allocating_init(asPartOf:with:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  LibraryEpisodePagePresenter.init(asPartOf:with:)(a1, a2);
  return v5;
}

_QWORD *LibraryEpisodePagePresenter.init(asPartOf:with:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v40;
  int v41;
  char v42;
  uint64_t v43;
  void *v44;
  _BYTE v45[16];
  _BYTE v46[16];
  _BYTE v47[16];

  v3 = v2;
  v6 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[10] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v40 = _swiftEmptyArrayStorage;
  v9 = sub_10003F544(&qword_100552188);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v2[29] = CurrentValueSubject.init(_:)(&v40);
  *v8 = 0;
  swift_storeEnumTagMultiPayload(v8, v6, 0);
  v10 = sub_10003F544(&qword_100552190);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v2[30] = CurrentValueSubject.init(_:)(v8);
  v40 = xmmword_1003C8570;
  v41 = 1;
  v42 = 2;
  v11 = sub_10003F544(&qword_100552198);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v2[31] = CurrentValueSubject.init(_:)(&v40);
  v12 = sub_10003F544((uint64_t *)&unk_1005521A0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v2[32] = PassthroughSubject.init()();
  v13 = (char *)v2 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_interactionContextPage;
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = type metadata accessor for InteractionContext.Page(0);
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  v15 = swift_storeEnumTagMultiPayload(v13, v14, 2);
  v16 = static MetricsPageType.episode.getter(v15);
  v18 = v17;
  v19 = static MetricsPageID.unknown.getter();
  v21 = v20;
  *(_QWORD *)&v40 = v16;
  *((_QWORD *)&v40 + 1) = v18;
  v22._countAndFlagsBits = 95;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v19;
  v23._object = v21;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v21);
  v24 = PageID.init(with:)(v40, *((_QWORD *)&v40 + 1));
  v25 = static PageMetrics.notInstrumented.getter(v24);
  static PageRenderContentTypes.unspecified.getter(v25);
  v26 = (char *)v3 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_headerShelf;
  v27 = type metadata accessor for ModernShelf(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v28(v26, 1, 1, v27);
  v28((char *)v3 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerShelf, 1, 1, v27);
  *((_BYTE *)v3 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerHasBeenDismissed) = 0;
  v28((char *)v3 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_highlightShelf, 1, 1, v27);
  v28((char *)v3 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_descriptionShelf, 1, 1, v27);
  v28((char *)v3 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_websiteShelf, 1, 1, v27);
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves) = _swiftEmptyArrayStorage;
  v29 = *a2;
  v30 = a2[1];
  v3[2] = *a2;
  v3[3] = v30;
  sub_10003DC78((uint64_t)(a2 + 2), (uint64_t)v47, &qword_100554900);
  sub_10003DC78((uint64_t)v47, (uint64_t)(v3 + 4), &qword_100554900);
  sub_10003DC78((uint64_t)(a2 + 4), (uint64_t)v46, (uint64_t *)&unk_100559A80);
  sub_10003DC78((uint64_t)v46, (uint64_t)(v3 + 6), (uint64_t *)&unk_100559A80);
  sub_10003DC78((uint64_t)(a2 + 6), (uint64_t)v45, (uint64_t *)&unk_100559A80);
  sub_10003DC78((uint64_t)v45, (uint64_t)(v3 + 8), (uint64_t *)&unk_100559A80);
  v43 = type metadata accessor for EpisodeTextInfoProvider(0);
  v44 = &protocol witness table for EpisodeTextInfoProvider;
  sub_1000242A8(&v40);
  swift_bridgeObjectRetain(v30);
  v31 = sub_100186B64((uint64_t)v47);
  EpisodeTextInfoProvider.init()(v31);
  sub_10002099C(&v40, (uint64_t)(v3 + 11));
  v32 = sub_10003F544(&qword_100555430);
  BaseObjectGraph.inject<A>(_:)(&v40, v32, v32);
  *((_OWORD *)v3 + 8) = v40;
  v33 = sub_10003F544(&qword_1005609B0);
  BaseObjectGraph.inject<A>(_:)(&v40, v33, v33);
  *((_OWORD *)v3 + 9) = v40;
  v34 = type metadata accessor for PageRenderController(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(&v40, v34, v34);
  v3[20] = v40;
  v35 = sub_10003F544(&qword_100555438);
  BaseObjectGraph.inject<A>(_:)(&v40, v35, v35);
  *(_OWORD *)(v3 + 21) = v40;
  v36 = sub_10003F544((uint64_t *)&unk_100555120);
  BaseObjectGraph.inject<A>(_:)(&v40, v36, v36);
  sub_10002099C(&v40, (uint64_t)(v3 + 23));
  v37 = type metadata accessor for EpisodeUpsellBannerProvider(0);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  v38 = EpisodeUpsellBannerProvider.init(graph:uuid:presentationType:)(a1, v29, v30, 0);
  sub_100186B8C((uint64_t)v47);
  v3[28] = v38;
  return v3;
}

uint64_t sub_100186B64(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100186B8C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t LibraryEpisodePagePresenter.headerButtonItems.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 232));
}

uint64_t LibraryEpisodePagePresenter.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 240));
}

uint64_t LibraryEpisodePagePresenter.pageHeader.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 248));
}

uint64_t LibraryEpisodePagePresenter.pageRender.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 256));
}

Swift::Void __swiftcall LibraryEpisodePagePresenter.viewDidLoad()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  _QWORD v21[5];

  v1 = v0;
  v2 = type metadata accessor for PageRenderEvent(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0[32];
  *v5 = 1;
  v7 = enum case for PageRenderActivity.primaryDataFetchStarted(_:);
  v8 = type metadata accessor for PageRenderActivity(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v5, v7, v8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for PageRenderEvent.activity(_:), v2);
  PassthroughSubject.send(_:)(v5);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v9 = v1[19];
  ObjectType = swift_getObjectType(v1[18], v10);
  v12 = v1[2];
  v13 = v1[3];
  v14 = dispatch thunk of LibraryDataProviderProtocol.fetchEpisode(with:)(v12, v13, ObjectType, v9);
  v15 = swift_allocObject(&unk_1004B1198, 24, 7);
  swift_weakInit(v15 + 16, v1);
  v16 = (_QWORD *)swift_allocObject(&unk_1004B11C0, 40, 7);
  v16[2] = v12;
  v16[3] = v13;
  v16[4] = v6;
  v17 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  swift_bridgeObjectRetain(v13);
  v18 = swift_retain();
  v19 = static OS_dispatch_queue.main.getter(v18);
  v21[3] = v17;
  v21[4] = &protocol witness table for OS_dispatch_queue;
  v21[0] = v19;
  Promise.then(perform:orCatchError:on:)(sub_100186F30, v15, sub_100187520, v16, v21);
  swift_release(v14);
  swift_release(v15);
  swift_release(v16);
  sub_10003D380(v21);
}

uint64_t sub_100186DA8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100186DCC(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t Strong;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[24];

  v4 = type metadata accessor for PageRenderEvent(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)&v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v20, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v10 = Strong;
    if (v8)
    {
      v11 = v8;
      sub_100186F38(v11);
      swift_release(v10);

    }
    else
    {
      v13 = *(_QWORD *)(Strong + 16);
      v12 = *(_QWORD *)(Strong + 24);
      v14 = sub_1001903F4();
      v15 = swift_allocError(&type metadata for LibraryEpisodePagePresenter.PageLoadError, v14, 0, 0);
      *v16 = v13;
      v16[1] = v12;
      *v7 = v15;
      v17 = enum case for PageRenderActivity.primaryDataFetchFailed(_:);
      v18 = type metadata accessor for PageRenderActivity(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v7, v17, v18);
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for PageRenderEvent.activity(_:), v4);
      swift_bridgeObjectRetain(v12);
      PassthroughSubject.send(_:)(v7);
      (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
      swift_release(v10);
    }
  }
}

void sub_100186F30(void **a1)
{
  uint64_t v1;

  sub_100186DCC(a1, v1);
}

uint64_t sub_100186F38(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  Swift::String v23;
  void *object;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = v1;
  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PageID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t)objc_msgSend(a1, "storeTrackId");
  v15 = AdamID.init(rawValue:)(v14 & ~(v14 >> 63));
  v16 = *(_QWORD *)(v2 + 16);
  v17 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)v13 = v15;
  v13[8] = 0;
  *((_QWORD *)v13 + 2) = v16;
  *((_QWORD *)v13 + 3) = v17;
  swift_storeEnumTagMultiPayload(v13, v11, 2);
  v18 = v2 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_interactionContextPage;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_interactionContextPage, &v33, 33, 0);
  swift_bridgeObjectRetain(v17);
  sub_100190438((uint64_t)v13, v18);
  v19 = swift_endAccess(&v33);
  v33 = static MetricsPageType.episode.getter(v19);
  v34 = v20;
  v21._countAndFlagsBits = 95;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v32 = v15;
  v22 = sub_100030584();
  v23._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for UInt64, v22);
  object = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(object);
  PageID.init(with:)(v33, v34);
  v25 = v2 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageID;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageID, &v33, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v25, v10, v7);
  swift_endAccess(&v33);
  v26 = objc_msgSend(a1, "bestTitle");
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0xE000000000000000;
  }
  sub_1001875C0(v15, v28, v30);
  swift_bridgeObjectRelease(v30);
  sub_100187B78(a1);
  sub_10018851C(a1);
  sub_1001888D4(a1);
  sub_100188BD8(a1);
  sub_100188FD4(a1);
  sub_100189420(a1);
  sub_1001897D8((uint64_t)v6);
  return CurrentValueSubject.value.setter(v6);
}

uint64_t sub_1001871CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a2;
  v7 = type metadata accessor for PageRenderEvent(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Logger(0);
  v35 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.database.getter(v12);
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a3);
  v15 = swift_errorRetain(a1);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v31 = v8;
    v19 = v18;
    v20 = swift_slowAlloc(8, -1);
    v32 = v7;
    v21 = (_QWORD *)v20;
    v30 = swift_slowAlloc(32, -1);
    v37 = v30;
    *(_DWORD *)v19 = 136315394;
    v33 = a4;
    swift_bridgeObjectRetain(a3);
    v36 = sub_10003D274(v34, a3, &v37);
    v34 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v19 + 12) = 2112;
    swift_errorRetain(a1);
    v22 = _swift_stdlib_bridgeErrorToNSError(a1);
    v36 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v19 + 14, v19 + 22);
    *v21 = v22;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to fetch episode for UUID %s: %@", (uint8_t *)v19, 0x16u);
    v23 = sub_10003F544((uint64_t *)&unk_100556480);
    swift_arrayDestroy(v21, 1, v23);
    v24 = v21;
    v7 = v32;
    swift_slowDealloc(v24, -1, -1);
    v25 = v30;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v26 = v19;
    v8 = v31;
    swift_slowDealloc(v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v34);
  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 2);
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v11);
  }
  *v10 = a1;
  v27 = enum case for PageRenderActivity.primaryDataFetchFailed(_:);
  v28 = type metadata accessor for PageRenderActivity(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v10, v27, v28);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for PageRenderEvent.activity(_:), v7);
  swift_errorRetain(a1);
  PassthroughSubject.send(_:)(v10);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10018750C()
{
  return sub_1001904C4((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100187520(uint64_t a1)
{
  uint64_t v1;

  return sub_1001871CC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t LibraryEpisodePagePresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_interactionContextPage;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10018757C(v3, a1);
}

uint64_t sub_10018757C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InteractionContext.Page(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001875C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  _QWORD v83[3];
  char v84[72];

  v63 = a2;
  v6 = type metadata accessor for PageRenderEvent(0);
  v77 = *(_QWORD *)(v6 - 8);
  v78 = v6;
  __chkstk_darwin(v6);
  v76 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for PageRenderContentTypes(0);
  v75 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v74 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for MetricsEventType(0);
  v9 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for ScalarDictionary(0);
  v68 = *(_QWORD *)(v71 - 8);
  v12 = __chkstk_darwin(v71);
  v66 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v63 - v14;
  v70 = type metadata accessor for MetricsPageFields(0);
  v67 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for PageMetrics(0);
  v69 = *(_QWORD *)(v72 - 8);
  v18 = __chkstk_darwin(v72);
  v64 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = static MetricsPageType.episode.getter(v18);
  v22 = v21;
  v23 = sub_10003F544(&qword_100553D40);
  inited = swift_initStackObject(v23, v84);
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  *(_QWORD *)(inited + 32) = 0x656C746974;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = v63;
  *(_QWORD *)(inited + 56) = a3;
  swift_bridgeObjectRetain(a3);
  v25 = sub_100138578(inited);
  v79 = v3;
  v26 = *(_QWORD *)(v3 + 136);
  ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 128), v27);
  LOBYTE(v26) = HighlightsProviderProtocol.isSharedContent(_:)(a1, 0, ObjectType, v26);
  v83[0] = a1;
  v29 = sub_100030584();
  v30 = BinaryInteger.description.getter(&type metadata for UInt64, v29);
  v33 = MetricsPageFields.init(pageID:pageType:pageDetails:sharedContent:customFields:)(v30, v31, v20, v22, v25, v26 & 1, 0, v32);
  ScalarDictionary.init()(v33);
  v34 = sub_10032B834((uint64_t)_swiftEmptyArrayStorage);
  v35 = sub_10003F544(&qword_100553D38);
  v36 = type metadata accessor for PageMetrics.Instruction(0);
  v37 = swift_allocObject(v35, ((*(unsigned __int8 *)(*(_QWORD *)(v36 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v36 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v36 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v36 - 8) + 80) | 7);
  *(_OWORD *)(v37 + 16) = xmmword_1003CA220;
  v38 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v39 = v65;
  v38(v11, enum case for MetricsEventType.page(_:), v65);
  PageMetrics.Instruction.init(eventType:)(v11);
  v38(v11, enum case for MetricsEventType.impressions(_:), v39);
  v40 = PageMetrics.Instruction.init(eventType:)(v11);
  v41 = MetricsPageFields.metricsFields.getter(v40);
  v42 = v68;
  v43 = v66;
  v44 = v71;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v66, v15, v71);
  v45 = v64;
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v37, v41, v43, v34);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v44);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v17, v70);
  v46 = v79;
  v47 = v79 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageMetrics;
  swift_beginAccess(v79 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageMetrics, v83, 33, 0);
  v48 = v69;
  v49 = v72;
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 40))(v47, v45, v72);
  v50 = swift_endAccess(v83);
  v51 = v74;
  static PageRenderContentTypes.primaryData.getter(v50);
  v52 = v46 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageRenderContentTypes;
  swift_beginAccess(v46 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageRenderContentTypes, v83, 33, 0);
  v53 = sub_100026844(&qword_1005555F0, (uint64_t (*)(uint64_t))&type metadata accessor for PageRenderContentTypes, (uint64_t)&protocol conformance descriptor for PageRenderContentTypes);
  v54 = v73;
  dispatch thunk of RawRepresentable.rawValue.getter(&v81, v73, v53);
  v55 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  v55(v52, v54);
  dispatch thunk of RawRepresentable.rawValue.getter(&v80, v54, v53);
  v82 = v80 | v81;
  v56 = sub_100026844(&qword_1005555F8, (uint64_t (*)(uint64_t))&type metadata accessor for PageRenderContentTypes, (uint64_t)&protocol conformance descriptor for PageRenderContentTypes);
  dispatch thunk of OptionSet.init(rawValue:)(&v82, v54, v56);
  swift_endAccess(v83);
  v55((uint64_t)v51, v54);
  v57 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v76, v47, v49);
  v58 = enum case for PageRenderActivity.primaryDataFetchCompleted(_:);
  v59 = type metadata accessor for PageRenderActivity(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v57, v58, v59);
  v61 = v77;
  v60 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v57, enum case for PageRenderEvent.activity(_:), v78);
  PassthroughSubject.send(_:)(v57);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v57, v60);
}

uint64_t sub_100187B78(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __n128 v66;
  char *v67;
  void *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __n128 v75;
  uint64_t v76;
  unint64_t v77;
  Swift::String v78;
  void *object;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v97;
  unint64_t v98;
  void *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  id v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v2 = v1;
  v102 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v107 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v9);
  v11 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v12);
  v105 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v14);
  v111 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544((uint64_t *)&unk_100559FB0);
  __chkstk_darwin(v16);
  v106 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v109 = *(_QWORD *)(v18 - 8);
  v110 = v18;
  v19 = __chkstk_darwin(v18);
  v104 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v108 = (char *)&v98 - v21;
  v22 = type metadata accessor for HeaderButtonItem(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char **)((char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __chkstk_darwin(v24);
  v29 = (unint64_t *)((char *)&v98 - v28);
  __chkstk_darwin(v27);
  v31 = (unint64_t *)((char *)&v98 - v30);
  v103 = a1;
  v33 = sub_10018A2A8(a1, v32);
  if (v33)
  {
    v100 = v11;
    v101 = v8;
    v34 = (char *)v33;
    swift_retain();
    v37 = LegacyLockup.title.getter(v35, v36);
    v39 = v38;
    v107 = v34;
    swift_release(v34);
    if (v39)
      v40 = v37;
    else
      v40 = 0;
    v41 = 0xE000000000000000;
    if (v39)
      v41 = v39;
    *(_QWORD *)&v112 = v40;
    *((_QWORD *)&v112 + 1) = v41;
    LODWORD(v113) = 1;
    BYTE4(v113) = 2;
    CurrentValueSubject.value.setter(&v112);
    v43 = *(_QWORD *)(v2 + 16);
    v42 = *(_QWORD *)(v2 + 24);
    v102 = v2;
    *v31 = v43;
    v31[1] = v42;
    v44 = enum case for BookmarkButtonPresenter.Data.uuid(_:);
    v45 = type metadata accessor for BookmarkButtonPresenter.Data(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v31, v44, v45);
    v99 = (void *)v22;
    swift_storeEnumTagMultiPayload(v31, v22, 1);
    swift_bridgeObjectRetain(v42);
    v46 = sub_10027B5D8(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v48 = *(_QWORD *)(v46 + 16);
    v47 = *(_QWORD *)(v46 + 24);
    if (v48 >= v47 >> 1)
      v46 = sub_10027B5D8(v47 > 1, v48 + 1, 1, v46);
    *(_QWORD *)(v46 + 16) = v48 + 1;
    v98 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v49 = *(_QWORD *)(v23 + 72);
    sub_100190690((uint64_t)v31, v46 + v98 + v49 * v48);
    if (objc_msgSend(v103, "isEntitled"))
    {
      *v29 = v43;
      v29[1] = v42;
      v50 = enum case for DownloadButtonPresenter.Data.uuid(_:);
      v51 = type metadata accessor for DownloadButtonPresenter.Data(0);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v29, v50, v51);
      v52 = v99;
      swift_storeEnumTagMultiPayload(v29, v99, 2);
      v53 = *(_QWORD *)(v46 + 16);
      v54 = *(_QWORD *)(v46 + 24);
      swift_bridgeObjectRetain(v42);
      if (v53 >= v54 >> 1)
        v46 = sub_10027B5D8(v54 > 1, v53 + 1, 1, v46);
      *(_QWORD *)(v46 + 16) = v53 + 1;
      v55 = v98;
      sub_100190690((uint64_t)v29, v46 + v98 + v53 * v49);
    }
    else
    {
      v55 = v98;
      v52 = v99;
    }
    v26[3] = (char *)type metadata accessor for LibraryEpisodeLockup(0);
    v26[4] = (char *)sub_100026844(&qword_1005556A0, (uint64_t (*)(uint64_t))&type metadata accessor for LibraryEpisodeLockup, (uint64_t)&protocol conformance descriptor for LegacyLockup);
    *v26 = v107;
    swift_storeEnumTagMultiPayload(v26, v52, 5);
    v63 = *(_QWORD *)(v46 + 16);
    v64 = *(_QWORD *)(v46 + 24);
    swift_retain();
    if (v63 >= v64 >> 1)
      v46 = sub_10027B5D8(v64 > 1, v63 + 1, 1, v46);
    *(_QWORD *)(v46 + 16) = v63 + 1;
    sub_100190690((uint64_t)v26, v46 + v55 + v63 * v49);
    v65 = v102;
    *(_QWORD *)&v112 = v46;
    v66 = swift_bridgeObjectRetain(v46);
    CurrentValueSubject.send(_:)(&v112, v66);
    swift_bridgeObjectRelease(v46);
    LOBYTE(v112) = 1;
    v67 = v108;
    ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(41, 0, 0x10000000000, 1);
    if (qword_100551FC0 != -1)
      swift_once(&qword_100551FC0, sub_10018A288);
    v68 = qword_100555380;
    v103 = (id)qword_100555378;
    v99 = qword_100555380;
    v69 = type metadata accessor for Header(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v111, 1, 1, v69);
    v70 = v104;
    (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v104, v67, v110);
    v71 = sub_10003F544((uint64_t *)&unk_100554A40);
    v72 = swift_allocObject(v71, 72, 7);
    *(_OWORD *)(v72 + 16) = xmmword_1003CA200;
    v73 = type metadata accessor for EpisodeHeader(0);
    *(_QWORD *)&v112 = 0;
    *((_QWORD *)&v112 + 1) = 0xE000000000000000;
    v74 = v107;
    swift_retain();
    swift_bridgeObjectRetain(v68);
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease(*((_QWORD *)&v112 + 1));
    *(_QWORD *)&v112 = 0xD000000000000029;
    *((_QWORD *)&v112 + 1) = 0x80000001004312C0;
    v75 = swift_retain();
    v76 = LegacyLockup.adamId.getter(v75);
    swift_release(v74);
    v115 = v76;
    v77 = sub_100030584();
    v78._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for UInt64, v77);
    object = v78._object;
    String.append(_:)(v78);
    swift_bridgeObjectRelease(object);
    v80._countAndFlagsBits = 93;
    v80._object = (void *)0xE100000000000000;
    String.append(_:)(v80);
    v81 = EpisodeHeader.__allocating_init(lockup:headerButtonItems:shelfUniqueId:referenceTime:playerTime:)(v74, v46, v112, *((_QWORD *)&v112 + 1), *(_QWORD *)(v65 + 48), *(unsigned __int8 *)(v65 + 56), *(_QWORD *)(v65 + 64), *(unsigned __int8 *)(v65 + 72));
    *(_QWORD *)(v72 + 56) = v73;
    *(_QWORD *)(v72 + 64) = sub_100026844(&qword_1005556A8, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodeHeader, (uint64_t)&protocol conformance descriptor for EpisodeHeader);
    *(_QWORD *)(v72 + 32) = v81;
    v82 = type metadata accessor for URL(0);
    v83 = v105;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v105, 1, 1, v82);
    v114 = 0;
    v112 = 0u;
    v113 = 0u;
    v84 = qword_100555378;
    v85 = qword_100555380;
    v86 = static MetricsTargetType.swoosh.getter((__n128)0);
    v88 = v87;
    v89 = v100;
    static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x6853726564616548, 0xEB00000000666C65, 0, 0, v84, v85, v86, v87, 0, 0);
    swift_bridgeObjectRelease(v88);
    v90 = type metadata accessor for ImpressionMetrics(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v89, 0, 1, v90);
    v91 = type metadata accessor for MetricsShelfName(0);
    v92 = v101;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v101, 1, 1, v91);
    v97 = v92;
    v93 = (uint64_t)v106;
    ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v103, v99, v111, v70, v72, v83, 1, 0, &v112, v89, v97);
    swift_release(v74);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v108, v110);
    v94 = type metadata accessor for ModernShelf(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v93, 0, 1, v94);
    v95 = v65 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_headerShelf;
    swift_beginAccess(v95, &v112, 33, 0);
    sub_10019050C(v93, v95);
    return swift_endAccess(&v112);
  }
  else
  {
    static Logger.database.getter(0);
    swift_retain();
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.info.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v112 = v60;
      *(_DWORD *)v59 = 136315138;
      v62 = *(_QWORD *)(v2 + 16);
      v61 = *(_QWORD *)(v2 + 24);
      swift_bridgeObjectRetain(v61);
      v115 = sub_10003D274(v62, v61, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v59 + 4, v59 + 12);
      swift_release(v2);
      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "episode is unavailable: %s", v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

    }
    else
    {

      swift_release(v2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v107, v102);
  }
}

uint64_t sub_10018851C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  id v43;

  v2 = v1;
  v4 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100555678);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544(&qword_100555680);
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_1004B1198, 24, 7);
  swift_weakInit(v13 + 16, v2);
  v14 = (uint64_t)objc_msgSend(a1, "storeTrackId");
  v15 = AdamID.init(rawValue:)(v14 & ~(v14 >> 63));
  v16 = objc_msgSend(a1, "podcast");
  v17 = v16;
  if (v16)
  {
    v18 = (uint64_t)objc_msgSend(v16, "storeCollectionId");
    v19 = AdamID.init(rawValue:)(v18 & ~(v18 >> 63));

  }
  else
  {
    v19 = 0;
  }
  v20 = swift_allocObject(&unk_1004B12E8, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100190630;
  *(_QWORD *)(v20 + 24) = v13;
  v21 = swift_retain();
  v22 = dispatch thunk of EpisodeUpsellBannerProvider.episodeUpsellBannerShelfPublisher(episodeAdamID:showAdamID:dismissalCompletion:)(v15, 0, v19, v17 == 0, sub_10019065C, v20, v21);
  swift_release(v20);
  v42[0] = v22;
  v23 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v43 = (id)static OS_dispatch_queue.main.getter(v24);
  v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 1, 1, v25);
  v26 = sub_10003F544(&qword_100555688);
  v27 = sub_10002F9C8(&qword_100555690, &qword_100555688, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = sub_1000489AC();
  Publisher.receive<A>(on:options:)(&v43, v6, v26, v23, v27, v28);
  sub_100007A28((uint64_t)v6, &qword_1005564A0);

  swift_release(v42[0]);
  v29 = *(_QWORD *)(v2 + 160);
  v30 = sub_10002F9C8(&qword_100555698, &qword_100555678, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v31 = v39;
  Publisher.emitPageRenderResourceEvents(using:onScreen:)(v29, 1, v39, v30);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v31);
  v32 = swift_allocObject(&unk_1004B1198, 24, 7);
  swift_weakInit(v32 + 16, v2);
  v42[0] = v31;
  v42[1] = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v42, &opaque type descriptor for <<opaque return type of Publisher.emitPageRenderResourceEvents(using:onScreen:)>>, 1);
  v34 = v41;
  v35 = Publisher<>.sink(receiveValue:)(sub_100190680, v32, v41, OpaqueTypeConformance2);
  swift_release(v32);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v34);
  v36 = v2 + 80;
  swift_beginAccess(v36, v42, 33, 0);
  AnyCancellable.store(in:)(v36);
  swift_endAccess(v42);
  swift_release(v35);
  return swift_release(v13);
}

uint64_t sub_1001888D4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  id v36;

  v2 = v1;
  v4 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100555650);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_100555658);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)objc_msgSend(a1, "storeTrackId");
  v16 = AdamID.init(rawValue:)(v15 & ~(v15 >> 63));
  result = AdamID.isEmpty.getter(v16);
  if ((result & 1) == 0)
  {
    v33 = v8;
    v34 = v12;
    v19 = v2[17];
    ObjectType = swift_getObjectType(v2[16], v18);
    v35[0] = dispatch thunk of HighlightsProviderProtocol.pageHighlightShelfPublisherForId(adamId:)(v16, ObjectType, v19);
    v21 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v36 = (id)static OS_dispatch_queue.main.getter(v22);
    v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v6, 1, 1, v23);
    v24 = sub_10003F544(&qword_100555660);
    v25 = sub_10002F9C8(&qword_100555668, &qword_100555660, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v26 = sub_1000489AC();
    Publisher.receive<A>(on:options:)(&v36, v6, v24, v21, v25, v26);
    sub_100007A28((uint64_t)v6, &qword_1005564A0);

    swift_release(v35[0]);
    v27 = v2[20];
    v28 = sub_10002F9C8(&qword_100555670, &qword_100555650, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    Publisher.emitPageRenderResourceEvents(using:onScreen:)(v27, 1, v7, v28);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
    v29 = swift_allocObject(&unk_1004B1198, 24, 7);
    swift_weakInit(v29 + 16, v2);
    v35[0] = v7;
    v35[1] = v28;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v35, &opaque type descriptor for <<opaque return type of Publisher.emitPageRenderResourceEvents(using:onScreen:)>>, 1);
    v31 = Publisher<>.sink(receiveValue:)(sub_1001905E0, v29, v11, OpaqueTypeConformance2);
    swift_release(v29);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v11);
    v32 = v2 + 10;
    swift_beginAccess(v32, v35, 33, 0);
    AnyCancellable.store(in:)(v32);
    swift_endAccess(v35);
    return swift_release(v31);
  }
  return result;
}

uint64_t sub_100188BD8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[5];

  v3 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544((uint64_t *)&unk_100559FB0);
  __chkstk_darwin(v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v38 - v22;
  v41 = v1;
  sub_10018ACDC(a1, (uint64_t *)&v42);
  if (!*((_QWORD *)&v43 + 1))
    return sub_100007A28((uint64_t)&v42, &qword_100555618);
  v38 = v16;
  sub_10002099C(&v42, (uint64_t)v45);
  LOBYTE(v42) = 1;
  ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(19, 0, 0x10000000000, 1);
  if (qword_100551FC8 != -1)
    swift_once(&qword_100551FC8, sub_10018ACB4);
  v24 = qword_100555390;
  v39 = qword_100555388;
  v25 = type metadata accessor for Header(0);
  v26 = v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 1, 1, v25);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
  v27 = sub_10003F544((uint64_t *)&unk_100554A40);
  v28 = swift_allocObject(v27, 72, 7);
  *(_OWORD *)(v28 + 16) = xmmword_1003CA200;
  sub_10000A520((uint64_t)v45, v28 + 32);
  v29 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v10, 1, 1, v29);
  v30 = type metadata accessor for ImpressionMetrics(0);
  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v7, 1, 1, v30);
  v31 = type metadata accessor for MetricsShelfName(0);
  v32 = v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v40, 1, 1, v31);
  swift_bridgeObjectRetain(v24);
  v37 = v32;
  v33 = (uint64_t)v38;
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v39, v24, v26, v21, v28, v10, 1, 0, &v42, v7, v37);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
  sub_10003D380(v45);
  v34 = type metadata accessor for ModernShelf(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 0, 1, v34);
  v35 = v41 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_descriptionShelf;
  swift_beginAccess(v41 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_descriptionShelf, &v42, 33, 0);
  sub_10019050C(v33, v35);
  return swift_endAccess(&v42);
}

uint64_t sub_100188FD4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[5];

  v3 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544((uint64_t *)&unk_100559FB0);
  __chkstk_darwin(v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v49 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v44 - v22;
  sub_10018B468(a1, (uint64_t)&v50);
  if (!*((_QWORD *)&v51 + 1))
    return sub_100007A28((uint64_t)&v50, &qword_100555618);
  v46 = v17;
  v47 = v5;
  v48 = v1;
  sub_10002099C(&v50, (uint64_t)v53);
  LOBYTE(v50) = 1;
  ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(9, 0, 0x10000000000, 1);
  if (qword_100551FD0 != -1)
    swift_once(&qword_100551FD0, sub_10018B444);
  v24 = qword_1005553A0;
  v45 = qword_100555398;
  v25 = type metadata accessor for Header(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v14, 1, 1, v25);
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v21, v23, v18);
  v26 = sub_10003F544((uint64_t *)&unk_100554A40);
  v27 = swift_allocObject(v26, 72, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1003CA200;
  sub_10000A520((uint64_t)v53, v27 + 32);
  v28 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v11, 1, 1, v28);
  v52 = 0;
  v50 = 0u;
  v51 = 0u;
  v29 = qword_100555398;
  v30 = qword_1005553A0;
  v31 = swift_bridgeObjectRetain(v24);
  v32 = static MetricsTargetType.swoosh.getter(v31);
  v44 = v18;
  v33 = v11;
  v35 = v34;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x65746973626557, 0xE700000000000000, 0, 0, v29, v30, v32, v34, 0, 0);
  swift_bridgeObjectRelease(v35);
  v36 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v8, 0, 1, v36);
  v37 = type metadata accessor for MetricsShelfName(0);
  v38 = v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v47, 1, 1, v37);
  v43 = v8;
  v39 = (uint64_t)v46;
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v45, v24, v14, v21, v27, v33, 1, 0, &v50, v43, v38);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v23, v44);
  sub_10003D380(v53);
  v40 = type metadata accessor for ModernShelf(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 0, 1, v40);
  v41 = v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_websiteShelf;
  swift_beginAccess(v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_websiteShelf, &v50, 33, 0);
  sub_10019050C(v39, v41);
  return swift_endAccess(&v50);
}

uint64_t sub_100189420(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  _QWORD v38[5];

  v2 = v1;
  v4 = type metadata accessor for PageRenderEvent(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v38[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v38[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10018BA88(a1);
  if (objc_msgSend((id)objc_opt_self(PFClientUtil), "isRunningOnInternalOS"))
  {
    v13 = v1[22];
    ObjectType = swift_getObjectType(v1[21], v12);
    if (qword_100551FE8 != -1)
      swift_once(&qword_100551FE8, sub_100190388);
    v15 = sub_10003F544(&qword_1005555E8);
    v16 = sub_100047DA4(v15, (uint64_t)qword_1005553C8);
    Preferences.subscript.getter(v38, v16, ObjectType, &type metadata for Bool, v13);
    if (LOBYTE(v38[0]) != 2 && (v38[0] & 1) != 0)
      goto LABEL_7;
  }
  v17 = (uint64_t)objc_msgSend(a1, "storeTrackId");
  v18 = AdamID.init(rawValue:)(v17 & ~(v17 >> 63));
  if ((AdamID.isEmpty.getter(v18) & 1) != 0)
  {
LABEL_7:
    v19 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves);
    *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves) = v11;
    swift_bridgeObjectRelease(v19);
    sub_1001897D8((uint64_t)v10);
    return CurrentValueSubject.value.setter(v10);
  }
  else
  {
    v21 = objc_msgSend(a1, "podcast");
    if (v21
      && (v22 = v21, v23 = objc_msgSend(v21, "channel"), v22, v23))
    {
      v24 = objc_msgSend(v23, "subscriptionActive");

    }
    else
    {
      v24 = 0;
    }
    *v7 = 1;
    v25 = enum case for PageRenderActivity.resourceFetchStarted(_:);
    v26 = type metadata accessor for PageRenderActivity(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v7, v25, v26);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for PageRenderEvent.activity(_:), v4);
    PassthroughSubject.send(_:)(v7);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    v27 = v2[26];
    v28 = v2[27];
    sub_10003A834(v2 + 23, v27);
    v29 = dispatch thunk of StoreDataProvider.fetchEpisodePageFooter(for:isSubscribed:)(v18, v24, v27, v28);
    v30 = swift_allocObject(&unk_1004B1198, 24, 7);
    swift_weakInit(v30 + 16, v2);
    v31 = swift_allocObject(&unk_1004B1270, 32, 7);
    *(_QWORD *)(v31 + 16) = v30;
    *(_QWORD *)(v31 + 24) = v11;
    v32 = swift_allocObject(&unk_1004B1198, 24, 7);
    swift_weakInit(v32 + 16, v2);
    v33 = (_QWORD *)swift_allocObject(&unk_1004B1298, 40, 7);
    v33[2] = v18;
    v33[3] = v32;
    v33[4] = v11;
    v34 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    swift_bridgeObjectRetain(v11);
    v35 = swift_retain();
    v36 = static OS_dispatch_queue.main.getter(v35);
    v38[3] = v34;
    v38[4] = &protocol witness table for OS_dispatch_queue;
    v38[0] = v36;
    Promise.then(perform:orCatchError:on:)(sub_1001904A8, v31, sub_100190500, v33, v38);
    swift_release(v29);
    swift_release(v31);
    swift_release(v33);
    sub_10003D380(v38);
    return swift_release(v32);
  }
}

uint64_t sub_1001897D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(char *, uint64_t, uint64_t);
  char v105[24];
  char v106[24];
  char v107[24];
  char v108[24];
  char v109[8];
  char v110[8];
  char v111[8];
  char v112[8];
  _QWORD *v113;

  v102 = type metadata accessor for PageMetrics(0);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v101 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for PageID(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v99 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544((uint64_t *)&unk_100559FB0);
  v6 = __chkstk_darwin(v5);
  v94 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v91 = (char *)&v85 - v9;
  v10 = __chkstk_darwin(v8);
  v88 = (char *)&v85 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v85 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v85 - v15;
  v17 = type metadata accessor for ModernShelf(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v96 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v95 = (char *)&v85 - v22;
  v23 = __chkstk_darwin(v21);
  v93 = (char *)&v85 - v24;
  v25 = __chkstk_darwin(v23);
  v92 = (char *)&v85 - v26;
  v27 = __chkstk_darwin(v25);
  v90 = (char *)&v85 - v28;
  v29 = __chkstk_darwin(v27);
  v89 = (char *)&v85 - v30;
  v31 = __chkstk_darwin(v29);
  v87 = (char *)&v85 - v32;
  v33 = __chkstk_darwin(v31);
  v86 = (char *)&v85 - v34;
  v35 = __chkstk_darwin(v33);
  v37 = (char *)&v85 - v36;
  __chkstk_darwin(v35);
  v39 = (char *)&v85 - v38;
  v113 = _swiftEmptyArrayStorage;
  v103 = v1;
  v40 = v1 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_headerShelf;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_headerShelf, v112, 0, 0);
  sub_100007A64(v40, (uint64_t)v16, (uint64_t *)&unk_100559FB0);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v42 = v41(v16, 1, v17);
  v104 = v41;
  if (v42 == 1)
  {
    sub_100007A28((uint64_t)v16, (uint64_t *)&unk_100559FB0);
    v43 = (uint64_t)v94;
  }
  else
  {
    v85 = a1;
    v44 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v44(v39, v16, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v37, v39, v17);
    v45 = sub_10027B600(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v47 = *(_QWORD *)(v45 + 16);
    v46 = *(_QWORD *)(v45 + 24);
    if (v47 >= v46 >> 1)
      v45 = sub_10027B600(v46 > 1, v47 + 1, 1, v45);
    v43 = (uint64_t)v94;
    *(_QWORD *)(v45 + 16) = v47 + 1;
    v44((char *)(v45+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v47), v37, v17);
    v113 = (_QWORD *)v45;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v39, v17);
    a1 = v85;
    v41 = v104;
  }
  v48 = v103;
  v49 = v103 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerShelf;
  swift_beginAccess(v103 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerShelf, v111, 0, 0);
  sub_100007A64(v49, (uint64_t)v14, (uint64_t *)&unk_100559FB0);
  if (v41(v14, 1, v17) == 1)
  {
    sub_100007A28((uint64_t)v14, (uint64_t *)&unk_100559FB0);
    v50 = (uint64_t)v91;
    v51 = (uint64_t)v88;
  }
  else
  {
    v52 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v53 = v86;
    v52(v86, v14, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v87, v53, v17);
    v54 = (unint64_t)v113;
    if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
      v54 = sub_10027B600(0, *(_QWORD *)(v54 + 16) + 1, 1, v54);
    v51 = (uint64_t)v88;
    v56 = *(_QWORD *)(v54 + 16);
    v55 = *(_QWORD *)(v54 + 24);
    if (v56 >= v55 >> 1)
      v54 = sub_10027B600(v55 > 1, v56 + 1, 1, v54);
    *(_QWORD *)(v54 + 16) = v56 + 1;
    v52((char *)(v54+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v56), v87, v17);
    v113 = (_QWORD *)v54;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v86, v17);
    v50 = (uint64_t)v91;
    v41 = v104;
  }
  v57 = v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_highlightShelf;
  swift_beginAccess(v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_highlightShelf, v110, 0, 0);
  sub_100007A64(v57, v51, (uint64_t *)&unk_100559FB0);
  if (v41((char *)v51, 1, v17) == 1)
  {
    sub_100007A28(v51, (uint64_t *)&unk_100559FB0);
  }
  else
  {
    v58 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    v59 = v89;
    v58(v89, v51, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v90, v59, v17);
    v60 = (unint64_t)v113;
    if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
      v60 = sub_10027B600(0, *(_QWORD *)(v60 + 16) + 1, 1, v60);
    v62 = *(_QWORD *)(v60 + 16);
    v61 = *(_QWORD *)(v60 + 24);
    if (v62 >= v61 >> 1)
      v60 = sub_10027B600(v61 > 1, v62 + 1, 1, v60);
    *(_QWORD *)(v60 + 16) = v62 + 1;
    v58((char *)(v60+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v62), (uint64_t)v90, v17);
    v113 = (_QWORD *)v60;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v89, v17);
    v41 = v104;
  }
  v63 = v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_descriptionShelf;
  swift_beginAccess(v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_descriptionShelf, v109, 0, 0);
  sub_100007A64(v63, v50, (uint64_t *)&unk_100559FB0);
  if (v41((char *)v50, 1, v17) == 1)
  {
    sub_100007A28(v50, (uint64_t *)&unk_100559FB0);
  }
  else
  {
    v64 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    v65 = v92;
    v64(v92, v50, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v93, v65, v17);
    v66 = (unint64_t)v113;
    if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
      v66 = sub_10027B600(0, *(_QWORD *)(v66 + 16) + 1, 1, v66);
    v68 = *(_QWORD *)(v66 + 16);
    v67 = *(_QWORD *)(v66 + 24);
    if (v68 >= v67 >> 1)
      v66 = sub_10027B600(v67 > 1, v68 + 1, 1, v66);
    *(_QWORD *)(v66 + 16) = v68 + 1;
    v64((char *)(v66+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v68), (uint64_t)v93, v17);
    v113 = (_QWORD *)v66;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v92, v17);
    v41 = v104;
  }
  v69 = v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_websiteShelf;
  swift_beginAccess(v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_websiteShelf, v108, 0, 0);
  sub_100007A64(v69, v43, (uint64_t *)&unk_100559FB0);
  if (v41((char *)v43, 1, v17) == 1)
  {
    sub_100007A28(v43, (uint64_t *)&unk_100559FB0);
  }
  else
  {
    v70 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    v71 = v95;
    v70(v95, v43, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v96, v71, v17);
    v72 = (unint64_t)v113;
    if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
      v72 = sub_10027B600(0, *(_QWORD *)(v72 + 16) + 1, 1, v72);
    v74 = *(_QWORD *)(v72 + 16);
    v73 = *(_QWORD *)(v72 + 24);
    if (v74 >= v73 >> 1)
      v72 = sub_10027B600(v73 > 1, v74 + 1, 1, v72);
    *(_QWORD *)(v72 + 16) = v74 + 1;
    v70((char *)(v72+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v74), (uint64_t)v96, v17);
    v113 = (_QWORD *)v72;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v95, v17);
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves));
  sub_1001734E8(v75);
  v76 = v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageID;
  swift_beginAccess(v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageID, v107, 0, 0);
  v77 = v99;
  (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v99, v76, v98);
  v78 = v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageMetrics;
  swift_beginAccess(v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageMetrics, v106, 0, 0);
  v79 = v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v101, v78, v102);
  ModernPage.init(id:pageMetrics:shelves:)(v77, v79, v113);
  v80 = a1 + *(int *)(sub_10003F544((uint64_t *)&unk_100555340) + 48);
  v81 = v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageRenderContentTypes;
  swift_beginAccess(v48 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageRenderContentTypes, v105, 0, 0);
  v82 = type metadata accessor for PageRenderContentTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v80, v81, v82);
  v83 = type metadata accessor for PageContent(0);
  return swift_storeEnumTagMultiPayload(a1, v83, 3);
}

uint64_t sub_10018A288(uint64_t a1)
{
  return sub_10018E440(a1, 0x726564616568, 0xE600000000000000, &qword_100555378, &qword_100555380);
}

uint64_t sub_10018A2A8(void *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;

  v4 = *(_QWORD *)(v2 + 40);
  if (!v4)
  {
    type metadata accessor for Episode(0, a2);
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    v7 = Episode.init(from:clickAction:wantsListenNowReason:)(a1, (uint64_t)v11, 0);
    if (v7)
      goto LABEL_3;
    return 0;
  }
  v5 = *(_QWORD *)(v2 + 32);
  type metadata accessor for StationEpisode(0);
  v6 = a1;
  swift_bridgeObjectRetain(v4);
  v7 = (uint64_t)sub_1002716B8(v6, v5, v4);
  if (!v7)
    return 0;
LABEL_3:
  v8 = swift_retain();
  v9 = dispatch thunk of Episode.playableLockupForEpisodeDetails.getter(v8);
  swift_release_n(v7, 2);
  return v9;
}

uint64_t sub_10018A370(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  __n128 v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;
  char v30[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  v10 = swift_allocObject(&unk_1004B1198, 24, 7);
  swift_beginAccess(a1, v30, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  swift_weakInit(v10 + 16, Strong);
  swift_release(Strong);
  v12 = (void *)objc_opt_self(NSThread);
  swift_retain_n(v10, 2);
  if (objc_msgSend(v12, "isMainThread"))
  {
    sub_10018A62C(v10);
  }
  else
  {
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v27 = static OS_dispatch_queue.main.getter(v13);
    v14 = swift_allocObject(&unk_1004B1310, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_100190688;
    *(_QWORD *)(v14 + 24) = v10;
    aBlock[4] = sub_100029B44;
    v29 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100027AF8;
    aBlock[3] = &unk_1004B1328;
    v15 = _Block_copy(aBlock);
    v26 = v3;
    v16 = v15;
    v17 = v29;
    swift_retain();
    v18 = swift_release(v17);
    static DispatchQoS.unspecified.getter(v18);
    aBlock[0] = _swiftEmptyArrayStorage;
    v19 = v6;
    v20 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v21 = sub_10003F544((uint64_t *)&unk_10055B200);
    v22 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v2, v20);
    v23 = (void *)v27;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
  }
  return swift_release_n(v10, 3);
}

uint64_t sub_10018A62C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v2 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v2);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_10003F544((uint64_t *)&unk_100559FB0);
  __chkstk_darwin(v5);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v13, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v9 = result;
    *(_BYTE *)(result + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerHasBeenDismissed) = 1;
    v10 = type metadata accessor for ModernShelf(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
    v11 = v9 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerShelf;
    swift_beginAccess(v9 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerShelf, v12, 33, 0);
    sub_1001905E8((uint64_t)v7, v11);
    swift_endAccess(v12);
    sub_1001897D8((uint64_t)v4);
    CurrentValueSubject.value.setter(v4);
    sub_100007A28((uint64_t)v7, (uint64_t *)&unk_100559FB0);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_10018A790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10003F544((uint64_t *)&unk_100559FB0);
  v8 = __chkstk_darwin(v7);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v21[-v11];
  v13 = type metadata accessor for ModernShelf(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v22, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v18 = result;
    sub_100007A64(a1, (uint64_t)v12, (uint64_t *)&unk_100559FB0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      sub_100007A28((uint64_t)v12, (uint64_t *)&unk_100559FB0);
LABEL_6:
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v10, 1, 1, v13);
      v19 = v18 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerShelf;
      swift_beginAccess(v18 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerShelf, v21, 33, 0);
      sub_1001905E8((uint64_t)v10, v19);
      swift_endAccess(v21);
      sub_1001897D8((uint64_t)v6);
      CurrentValueSubject.value.setter(v6);
      sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100559FB0);
      return swift_release(v18);
    }
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v16, v12, v13);
    if ((*(_BYTE *)(v18 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerHasBeenDismissed) & 1) != 0)
    {
      (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v13);
      goto LABEL_6;
    }
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v10, v16, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    v20 = v18 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerShelf;
    swift_beginAccess(v18 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerShelf, v21, 33, 0);
    sub_1001905E8((uint64_t)v10, v20);
    swift_endAccess(v21);
    sub_1001897D8((uint64_t)v6);
    CurrentValueSubject.value.setter(v6);
    sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100559FB0);
    swift_release(v18);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v13);
  }
  return result;
}

uint64_t sub_10018AA58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE v28[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v26 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544((uint64_t *)&unk_100559FB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ModernShelf(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v16(v15, a1, v12);
  v17 = enum case for MetricsShelfName.highlightShelf(_:);
  v18 = type metadata accessor for MetricsShelfName(0);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v11, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v11, 0, 1, v18);
  ModernShelf.metricsName.setter(v11);
  swift_beginAccess(a2, v28, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v21 = Strong;
    v16(v8, (uint64_t)v15, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
    v22 = v21 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_highlightShelf;
    swift_beginAccess(v21 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_highlightShelf, v27, 33, 0);
    sub_1001905E8((uint64_t)v8, v22);
    swift_endAccess(v27);
    v23 = v26;
    sub_1001897D8(v26);
    CurrentValueSubject.value.setter(v23);
    sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100559FB0);
    swift_release(v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_10018ACB4(uint64_t a1)
{
  return sub_10018E440(a1, 0xD000000000000013, 0x80000001004312A0, &qword_100555388, &qword_100555390);
}

double sub_10018ACDC@<D0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  __n128 v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v69;
  _QWORD *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t *v82;
  double result;
  uint64_t *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  void *v98;
  char *v99;
  uint64_t v100;

  v91 = a2;
  v3 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v3);
  v86 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_100555638);
  __chkstk_darwin(v5);
  v85 = (_QWORD **)((char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for EpisodeTextInfoContext(0);
  v93 = *(_QWORD *)(v7 - 8);
  v94 = v7;
  __chkstk_darwin(v7);
  v92 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EpisodeTextInfoDetail(0);
  v89 = *(_QWORD *)(v9 - 8);
  v90 = v9;
  __chkstk_darwin(v9);
  v97 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LibraryEpisodeContextItem(0);
  v96 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v85 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v85 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v85 - v24;
  v26 = sub_100005EC8(0, (unint64_t *)&unk_100560F90, &off_1004A4390);
  v27 = objc_msgSend((id)swift_getObjCClassFromMetadata(v26), "sharedInstance");
  v88 = (char *)objc_msgSend(v27, "descriptionForEpisode:options:", a1, 48);

  v28 = (uint64_t)objc_msgSend(a1, "storeTrackId");
  v29 = AdamID.init(rawValue:)(v28 & ~(v28 >> 63));
  v30 = objc_msgSend(a1, "podcast");
  v98 = a1;
  v99 = v13;
  if (!v30)
    goto LABEL_7;
  v31 = v30;
  v32 = objc_msgSend(v30, "shareURL");

  if (v32)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v33 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v20, 0, 1, v33);
  }
  else
  {
    v33 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v20, 1, 1, v33);
  }
  sub_10003DC78((uint64_t)v20, (uint64_t)v23, (uint64_t *)&unk_100553DC0);
  type metadata accessor for URL(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v23, 1, v33) == 1)
  {
    sub_100007A28((uint64_t)v23, (uint64_t *)&unk_100553DC0);
    a1 = v98;
    v13 = v99;
LABEL_7:
    v35 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v25, 1, 1, v35);
    goto LABEL_9;
  }
  v36 = sub_10003F544(&qword_100555648);
  v37 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v38 = swift_allocObject(v36, ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72), *(unsigned __int8 *)(v37 + 80) | 7);
  *(_OWORD *)(v38 + 16) = xmmword_1003CA200;
  v100 = v29;
  v39 = sub_100030584();
  v40 = BinaryInteger.description.getter(&type metadata for UInt64, v39);
  v42 = v41;
  URLQueryItem.init(name:value:)(105, 0xE100000000000000, v40, v41);
  v43 = swift_bridgeObjectRelease(v42);
  URL.appending(queryItems:)(v38, v43);
  v44 = swift_bridgeObjectRelease(v38);
  (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v23, v33, v44);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v25, 0, 1, v33);
  a1 = v98;
  v13 = v99;
LABEL_9:
  v45 = objc_msgSend(a1, "itemDescription");
  if (v45)
  {
    v46 = v45;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v49 = v48;

  }
  else
  {
    v47 = 0;
    v49 = 0;
  }
  v50 = objc_msgSend(a1, "itemDescriptionWithoutHTML");
  if (v50)
  {
    v51 = v50;
    v52 = v11;
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v55 = v54;

  }
  else
  {
    v52 = v11;
    v53 = 0;
    v55 = 0;
  }
  v56 = v88;
  v57 = objc_msgSend(a1, "itemDescriptionHasHTML");
  v88 = v25;
  sub_100007A64((uint64_t)v25, (uint64_t)v17, (uint64_t *)&unk_100553DC0);
  v87 = v56;
  LibraryEpisodeContextItem.init(summary:cachedDescription:description:descriptionWithoutHTML:descriptionHasHTML:episodeShareURL:)(0, 0, v56, v47, v49, v53, v55, v57, v17);
  v58 = v95[14];
  v59 = v95[15];
  sub_10003A834(v95 + 11, v58);
  v60 = v96;
  v61 = v92;
  v62 = (_QWORD *)v52;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v92, v13, v52);
  v64 = v93;
  v63 = v94;
  (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v61, enum case for EpisodeTextInfoContext.library(_:), v94);
  v65 = v97;
  dispatch thunk of EpisodeTextInfoProviderProtocol.textInfoDetailForContext(_:)(v61, v58, v59);
  v66 = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v61, v63);
  v67 = EpisodeTextInfoDetail.notes.getter(v66);
  if (v67)
  {
    v68 = (void *)v67;
    v69 = v67 | 0x8000000000000000;
    v70 = v85;
    v71 = v98;
    *v85 = v98;
    v72 = type metadata accessor for ShareSheetContentSource(0);
    swift_storeEnumTagMultiPayload(v70, v72, 1);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v70, 0, 1, v72);
    v73 = type metadata accessor for ImpressionMetrics(0);
    v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56);
    v95 = v62;
    v75 = v65;
    v76 = v60;
    v77 = v86;
    v74(v86, 1, 1, v73);
    v78 = type metadata accessor for Paragraph(0);
    swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
    v79 = v68;
    v80 = v71;
    v81 = Paragraph.init(text:alignment:style:isCollapsed:isLinkDetectionEnabled:shareSheetContentSource:impressionMetrics:)(v69, 0, 0, 0, 1, v70, v77);
    v82 = v91;
    v91[3] = v78;
    v82[4] = sub_100026844(&qword_100555640, (uint64_t (*)(uint64_t))&type metadata accessor for Paragraph, (uint64_t)&protocol conformance descriptor for Paragraph);

    *v82 = v81;
    (*(void (**)(char *, uint64_t))(v89 + 8))(v75, v90);
    (*(void (**)(char *, _QWORD *))(v76 + 8))(v99, v95);
    sub_100007A28((uint64_t)v88, (uint64_t *)&unk_100553DC0);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v89 + 8))(v65, v90);
    (*(void (**)(char *, _QWORD *))(v60 + 8))(v13, v62);
    sub_100007A28((uint64_t)v88, (uint64_t *)&unk_100553DC0);
    result = 0.0;
    v84 = v91;
    *(_OWORD *)v91 = 0u;
    *((_OWORD *)v84 + 1) = 0u;
    v84[4] = 0;
  }
  return result;
}

uint64_t sub_10018B444(uint64_t a1)
{
  return sub_10018E440(a1, 0x65746973626577, 0xE700000000000000, &qword_100555398, &qword_1005553A0);
}

double sub_10018B468@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, _BYTE *, uint64_t);
  _BYTE *v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  double result;
  _BYTE v54[12];
  int v55;
  void *object;
  uint64_t countAndFlagsBits;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _OWORD v61[2];
  uint64_t v62;
  _QWORD v63[5];
  Swift::String v64;

  v4 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v4);
  v6 = &v54[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v7);
  v9 = &v54[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v10);
  v12 = &v54[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v13);
  v15 = &v54[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = __chkstk_darwin(v16);
  v20 = &v54[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v60 = &v54[-v21];
  v22 = objc_msgSend(a1, "webpageURL");
  if (!v22)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    goto LABEL_7;
  }
  v23 = v22;
  v58 = v6;
  v59 = v12;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v26 = v25;

  swift_bridgeObjectRetain(v26);
  URL.init(string:)(v24, v26);
  swift_bridgeObjectRelease_n(v26, 2);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
LABEL_7:
    sub_100007A28((uint64_t)v15, (uint64_t *)&unk_100553DC0);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 32) = 0;
    return result;
  }
  v27 = *(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v17 + 32);
  v28 = v60;
  v27((uint64_t)v60, v15, v16);
  v29 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v64._object = (void *)0xEF65746973626557;
  v30._countAndFlagsBits = 0x5F45444F53495045;
  v30._object = (void *)0xEF45544953424557;
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0x2065646F73697045;
  v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, (Swift::String_optional)0, (NSBundle)v29, v31, v64);
  object = v32._object;
  countAndFlagsBits = v32._countAndFlagsBits;

  v33 = type metadata accessor for ArtworkModel(0);
  v34 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v59, 1, 1, v33);
  v55 = static Link.Presentation.textFollowsTintColor.getter(v34);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v20, v28, v16);
  v35 = *(unsigned __int8 *)(v17 + 80);
  v36 = (v35 + 16) & ~v35;
  v37 = swift_allocObject(&unk_1004B12C0, v36 + v18, v35 | 7);
  v38 = v27(v37 + v36, v20, v16);
  v39 = static Link.Presentation.textFollowsTintColor.getter(v38);
  v40 = Link.Presentation.init(rawValue:)(0);
  v41 = Link.Presentation.init(rawValue:)(v40);
  v42 = Link.Presentation.init(rawValue:)(v41 & v39);
  if (v42 != v39)
  {
    v42 = Link.Presentation.init(rawValue:)(v40 | v39);
    v40 = v42;
  }
  static ActionMetrics.notInstrumented.getter(v42);
  v43 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  v44 = ClosureAction.init(title:presentationStyle:actionMetrics:closure:)(0, 0, v40, v9, sub_1001905B4, v37);
  v63[3] = v43;
  v63[4] = sub_100026844(&qword_100555628, (uint64_t (*)(uint64_t))&type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
  v63[0] = v44;
  v45 = static MetricsTargetType.link.getter();
  v47 = v46;
  v48 = object;
  swift_bridgeObjectRetain(object);
  v49 = countAndFlagsBits;
  v50 = v58;
  static ImpressionMetrics.shelfItem(id:idType:uniqueID:impressionType:kind:name:)(0x5765646F73697045, 0xEE00657469736265, 0, 0, 0xD000000000000027, 0x8000000100431270, v45, v47, 0, 0, countAndFlagsBits, v48);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v48);
  v51 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 0, 1, v51);
  v52 = type metadata accessor for Link(0);
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  *(_QWORD *)(a2 + 24) = v52;
  *(_QWORD *)(a2 + 32) = sub_100026844(&qword_100555630, (uint64_t (*)(uint64_t))&type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  sub_1000242A8((_QWORD *)a2);
  Link.init(id:title:subtitle:artwork:presentation:segue:impressionMetrics:entity:)(0xD000000000000027, 0x8000000100431270, v49, v48, 0, 0, v59, v55, v63, v50, v61);
  (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v60, v16);
  return result;
}

void sub_10018B9A8()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  Class isa;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v4 = sub_100138698((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_100026844(&qword_10055B800, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C9B68);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, "openURL:options:completionHandler:", v3, isa, 0, swift_bridgeObjectRelease(v4).n128_f64[0]);

}

char *sub_10018BA88(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[2];

  v3 = sub_10003F544((uint64_t *)&unk_100559FB0);
  __chkstk_darwin(v3);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ModernShelf(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v23 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)v23 - v14;
  if ((objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") & 1) == 0
    && (objc_msgSend(a1, "isExplicit") & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
LABEL_6:
    sub_100007A28((uint64_t)v5, (uint64_t *)&unk_100559FB0);
    v16 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_11;
  }
  if (objc_msgSend(a1, "isEntitled"))
  {
    sub_10018E49C(a1, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      goto LABEL_6;
  }
  else
  {
    sub_10018F4F8((uint64_t)v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  }
  v23[1] = v1;
  v17 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v17(v15, v5, v6);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v15, v6);
  v16 = (char *)sub_10027B600(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  v19 = *((_QWORD *)v16 + 2);
  v18 = *((_QWORD *)v16 + 3);
  if (v19 >= v18 >> 1)
    v16 = (char *)sub_10027B600(v18 > 1, v19 + 1, 1, (unint64_t)v16);
  *((_QWORD *)v16 + 2) = v19 + 1;
  v17(&v16[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v19], v13, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
LABEL_11:
  sub_10018C478(a1, (uint64_t)v10);
  if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
    v16 = (char *)sub_10027B600(0, *((_QWORD *)v16 + 2) + 1, 1, (unint64_t)v16);
  v21 = *((_QWORD *)v16 + 2);
  v20 = *((_QWORD *)v16 + 3);
  if (v21 >= v20 >> 1)
    v16 = (char *)sub_10027B600(v20 > 1, v21 + 1, 1, (unint64_t)v16);
  *((_QWORD *)v16 + 2) = v21 + 1;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v16[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v21], v10, v6);
  return v16;
}

uint64_t sub_10018BD8C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[30];
  _QWORD v44[3];
  char v45[24];

  v39 = a3;
  v5 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PageRenderEvent(0);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PageRenderContentTypes(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *a1;
  v15 = a2 + 16;
  swift_beginAccess(a2 + 16, v45, 0, 0);
  Strong = swift_weakLoadStrong(a2 + 16);
  if (Strong)
  {
    v17 = Strong;
    static PageRenderContentTypes.resource.getter();
    v18 = v17 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageRenderContentTypes;
    swift_beginAccess(v17 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageRenderContentTypes, (char *)v44 + 2, 33, 0);
    v19 = v7;
    v20 = sub_100026844(&qword_1005555F0, (uint64_t (*)(uint64_t))&type metadata accessor for PageRenderContentTypes, (uint64_t)&protocol conformance descriptor for PageRenderContentTypes);
    dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)((char *)v44 + 1), v11, v20);
    v21 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v21(v18, v11);
    v22 = v20;
    v7 = v19;
    dispatch thunk of RawRepresentable.rawValue.getter(v44, v11, v22);
    v43[0] = LOBYTE(v44[0]) | BYTE1(v44[0]);
    v23 = sub_100026844(&qword_1005555F8, (uint64_t (*)(uint64_t))&type metadata accessor for PageRenderContentTypes, (uint64_t)&protocol conformance descriptor for PageRenderContentTypes);
    dispatch thunk of OptionSet.init(rawValue:)(v43, v11, v23);
    swift_endAccess((char *)v44 + 2);
    swift_release(v17);
    v21((uint64_t)v14, v11);
  }
  swift_beginAccess(v15, (char *)v44 + 2, 0, 0);
  v24 = swift_weakLoadStrong(v15);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)(v24 + 256);
    swift_retain();
    swift_release(v25);
    *v10 = 1;
    v27 = enum case for PageRenderActivity.resourceFetchCompleted(_:);
    v28 = type metadata accessor for PageRenderActivity(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v10, v27, v28);
    v30 = v40;
    v29 = v41;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v40 + 104))(v10, enum case for PageRenderEvent.activity(_:), v41);
    PassthroughSubject.send(_:)(v10);
    swift_release(v26);
    (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v10, v29);
  }
  v31 = v42;
  if ((unint64_t)v42 >> 62)
  {
    if (v42 < 0)
      v38 = v42;
    else
      v38 = v42 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v42);
    v32 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease(v31);
  }
  else
  {
    v32 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v32)
  {
    swift_beginAccess(v15, v43, 0, 0);
    result = swift_weakLoadStrong(v15);
    if (!result)
      return result;
    v34 = result;
    v35 = Array<A>.mapToModernShelves()(v31);
    v36 = *(_QWORD *)(v34 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves);
    *(_QWORD *)(v34 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves) = v35;
  }
  else
  {
    swift_beginAccess(v15, v43, 0, 0);
    result = swift_weakLoadStrong(v15);
    if (!result)
      return result;
    v34 = result;
    v36 = *(_QWORD *)(result + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves);
    v37 = v39;
    *(_QWORD *)(v34 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves) = v39;
    swift_bridgeObjectRetain(v37);
  }
  swift_bridgeObjectRelease(v36);
  sub_1001897D8((uint64_t)v7);
  CurrentValueSubject.value.setter(v7);
  return swift_release(v34);
}

uint64_t sub_10018C120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t Strong;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];

  v42 = a2;
  v7 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PageRenderEvent(0);
  v43 = *(_QWORD *)(v10 - 8);
  v44 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a3 + 16;
  v18 = static Logger.js.getter(v14);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v40 = v9;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v49[0] = v23;
    v41 = a4;
    *(_DWORD *)v22 = 136315138;
    v39 = a1;
    v47 = v42;
    v24 = sub_100030584();
    v25 = BinaryInteger.description.getter(&type metadata for UInt64, v24);
    v27 = v26;
    v47 = sub_10003D274(v25, v26, v49);
    a1 = v39;
    a4 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to fetch episode page footer content for %s.", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v28 = v22;
    v9 = v40;
    swift_slowDealloc(v28, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v46);
  swift_beginAccess(v17, v49, 0, 0);
  Strong = swift_weakLoadStrong(v17);
  if (Strong)
  {
    v30 = Strong;
    v31 = *(_QWORD *)(Strong + 256);
    swift_retain();
    swift_release(v30);
    *(_QWORD *)v12 = a1;
    v12[8] = 1;
    v32 = enum case for PageRenderActivity.resourceFetchFailed(_:);
    v33 = type metadata accessor for PageRenderActivity(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v12, v32, v33);
    v35 = v43;
    v34 = v44;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v12, enum case for PageRenderEvent.activity(_:), v44);
    swift_errorRetain(a1);
    PassthroughSubject.send(_:)(v12);
    swift_release(v31);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v34);
  }
  swift_beginAccess(v17, &v47, 0, 0);
  result = swift_weakLoadStrong(v17);
  if (result)
  {
    v37 = result;
    v38 = *(_QWORD *)(result + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves);
    *(_QWORD *)(result + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves) = a4;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRelease(v38);
    sub_1001897D8((uint64_t)v9);
    CurrentValueSubject.value.setter(v9);
    return swift_release(v37);
  }
  return result;
}

uint64_t sub_10018C478@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  Swift::String v48;

  v42 = a1;
  v45 = a2;
  v2 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v2);
  v44 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v4);
  v43 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModernShelf.ItemPresentation(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v21);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v48._object = (void *)0xE000000000000000;
  v25._object = (void *)0x80000001004310D0;
  v25._countAndFlagsBits = 0xD000000000000011;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v48._countAndFlagsBits = 0;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v48);

  if (qword_100551FD8 != -1)
    swift_once(&qword_100551FD8, sub_10018C8C8);
  v28 = qword_1005553A8;
  v29 = qword_1005553B0;
  v30 = type metadata accessor for ActionMenu(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v20, 1, 1, v30);
  v31 = type metadata accessor for Header.PrimaryAction(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v17, 1, 1, v31);
  v32 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v14, 1, 1, v32);
  v33 = swift_bridgeObjectRetain(v29);
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(v27._countAndFlagsBits, v27._object, 0, 0, 0, 0, 0, 0, v33, v20, v17, _swiftEmptyArrayStorage, v14);
  LOBYTE(v46[0]) = 1;
  ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(13, 0, 0x10000000000, 1);
  v34 = sub_10018C8F4(v42);
  v35 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v8, 1, 1, v35);
  v36 = type metadata accessor for ImpressionMetrics(0);
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  v37 = v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v43, 1, 1, v36);
  v38 = type metadata accessor for MetricsShelfName(0);
  v39 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v44, 1, 1, v38);
  return ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v28, v29, v23, v11, v34, v8, 1, 0, v46, v37, v39);
}

uint64_t sub_10018C8C8(uint64_t a1)
{
  return sub_10018E440(a1, 0x74616D726F666E69, 0xEB000000006E6F69, &qword_1005553A8, &qword_1005553B0);
}

_QWORD *sub_10018C8F4(void *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[5];

  sub_10018CD88(a1, (uint64_t)&v16);
  if (v17)
  {
    sub_10002099C(&v16, (uint64_t)v18);
    sub_10000A520((uint64_t)v18, (uint64_t)&v16);
    v2 = sub_10027B5EC(0, 1, 1, _swiftEmptyArrayStorage);
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = sub_10027B5EC((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v2[2] = v4 + 1;
    sub_10002099C(&v16, (uint64_t)&v2[5 * v4 + 4]);
    sub_10003D380(v18);
  }
  else
  {
    sub_100007A28((uint64_t)&v16, &qword_100555618);
    v2 = _swiftEmptyArrayStorage;
  }
  sub_10018D4EC(a1, (uint64_t)&v16);
  if (v17)
  {
    sub_10002099C(&v16, (uint64_t)v18);
    sub_10000A520((uint64_t)v18, (uint64_t)&v16);
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10027B5EC(0, v2[2] + 1, 1, v2);
    v6 = v2[2];
    v5 = v2[3];
    if (v6 >= v5 >> 1)
      v2 = sub_10027B5EC((_QWORD *)(v5 > 1), v6 + 1, 1, v2);
    v2[2] = v6 + 1;
    sub_10002099C(&v16, (uint64_t)&v2[5 * v6 + 4]);
    sub_10003D380(v18);
  }
  else
  {
    sub_100007A28((uint64_t)&v16, &qword_100555618);
  }
  sub_10018DBE8(a1, (uint64_t)&v16);
  if (v17)
  {
    sub_10002099C(&v16, (uint64_t)v18);
    sub_10000A520((uint64_t)v18, (uint64_t)&v16);
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10027B5EC(0, v2[2] + 1, 1, v2);
    v8 = v2[2];
    v7 = v2[3];
    if (v8 >= v7 >> 1)
      v2 = sub_10027B5EC((_QWORD *)(v7 > 1), v8 + 1, 1, v2);
    v2[2] = v8 + 1;
    sub_10002099C(&v16, (uint64_t)&v2[5 * v8 + 4]);
    sub_10003D380(v18);
  }
  else
  {
    sub_100007A28((uint64_t)&v16, &qword_100555618);
  }
  sub_10018DE28(a1, (uint64_t)&v16);
  if (v17)
  {
    sub_10002099C(&v16, (uint64_t)v18);
    sub_10000A520((uint64_t)v18, (uint64_t)&v16);
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10027B5EC(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = sub_10027B5EC((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    sub_10002099C(&v16, (uint64_t)&v2[5 * v10 + 4]);
    sub_10003D380(v18);
  }
  else
  {
    sub_100007A28((uint64_t)&v16, &qword_100555618);
  }
  sub_10018E03C(a1, (uint64_t)&v16);
  if (v17)
  {
    sub_10002099C(&v16, (uint64_t)v18);
    sub_10000A520((uint64_t)v18, (uint64_t)&v16);
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10027B5EC(0, v2[2] + 1, 1, v2);
    v12 = v2[2];
    v11 = v2[3];
    if (v12 >= v11 >> 1)
      v2 = sub_10027B5EC((_QWORD *)(v11 > 1), v12 + 1, 1, v2);
    v2[2] = v12 + 1;
    sub_10002099C(&v16, (uint64_t)&v2[5 * v12 + 4]);
    sub_10003D380(v18);
  }
  else
  {
    sub_100007A28((uint64_t)&v16, &qword_100555618);
  }
  sub_10018E228(a1, (uint64_t)&v16);
  if (v17)
  {
    sub_10002099C(&v16, (uint64_t)v18);
    sub_10000A520((uint64_t)v18, (uint64_t)&v16);
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10027B5EC(0, v2[2] + 1, 1, v2);
    v14 = v2[2];
    v13 = v2[3];
    if (v14 >= v13 >> 1)
      v2 = sub_10027B5EC((_QWORD *)(v13 > 1), v14 + 1, 1, v2);
    v2[2] = v14 + 1;
    sub_10002099C(&v16, (uint64_t)&v2[5 * v14 + 4]);
    sub_10003D380(v18);
  }
  else
  {
    sub_100007A28((uint64_t)&v16, &qword_100555618);
  }
  return v2;
}

void sub_10018CD88(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t countAndFlagsBits;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  char v41;
  char v42;
  void (*v43)(char *, _QWORD, uint64_t);
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned __int8 v71;
  void *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *object;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t *v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  Swift::String v102;

  v4 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v4);
  v98 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FlowPresentationContext(0);
  v92 = *(_QWORD *)(v6 - 8);
  v93 = v6;
  __chkstk_darwin(v6);
  v96 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v8);
  v91 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MetricsData.Configuration(0);
  v89 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v88 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v12);
  v90 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v14);
  v95 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FlowDestinationPageHeader(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v94 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for FlowDestination(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v97 = (uint64_t *)((char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = objc_msgSend(a1, "podcast");
  if (!v22)
    goto LABEL_16;
  v23 = v22;
  v24 = objc_msgSend(v22, "title");

  if (!v24)
    goto LABEL_16;
  v84 = v10;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = HIBYTE(v27) & 0xF;
  v85 = v25;
  if ((v27 & 0x2000000000000000) == 0)
    v28 = v25 & 0xFFFFFFFFFFFFLL;
  if (!v28)
  {
    swift_bridgeObjectRelease(v27);
LABEL_16:
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return;
  }
  v86 = v27;
  v29 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v102._object = (void *)0xE000000000000000;
  v30._countAndFlagsBits = 0x5449545F574F4853;
  v30._object = (void *)0xEA0000000000454CLL;
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  v102._countAndFlagsBits = 0;
  v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, (Swift::String_optional)0, (NSBundle)v29, v31, v102);
  countAndFlagsBits = v32._countAndFlagsBits;
  object = v32._object;

  v34 = objc_msgSend(a1, "podcast");
  if (!v34)
  {
LABEL_19:
    swift_bridgeObjectRelease(v86);
    v72 = object;
LABEL_20:
    v101 = 0;
    v99 = 0u;
    v100 = 0u;
    goto LABEL_21;
  }
  v35 = v34;
  type metadata accessor for PodcastDetail(0);
  v36 = v35;
  v37 = sub_1001D0F44(v36, 0, 0, 0, 1u);
  if (!v37)
  {

    goto LABEL_19;
  }
  v38 = v37;
  v39 = swift_retain();
  v40 = Podcast.adamId.getter(v39);
  v42 = v41;
  swift_release(v38);
  if ((v42 & 1) != 0)
  {

    swift_release(v38);
    goto LABEL_19;
  }
  v82 = v36;
  v83 = v32._countAndFlagsBits;
  *v97 = v38;
  (*(void (**)(void))(v20 + 104))();
  v43 = *(void (**)(char *, _QWORD, uint64_t))(v17 + 104);
  v44 = v94;
  v43(v94, enum case for FlowDestinationPageHeader.uber(_:), v16);
  *(_QWORD *)&v99 = v40;
  v45 = sub_100030584();
  v81 = v38;
  swift_retain();
  v80 = BinaryInteger.description.getter(&type metadata for UInt64, v45);
  v47 = v46;
  v79 = static MetricsTargetType.button.getter();
  v49 = v48;
  v50 = type metadata accessor for URL(0);
  v51 = (uint64_t)v90;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v90, 1, 1, v50);
  v52 = sub_10003F544(&qword_100555608);
  v53 = type metadata accessor for MetricsData(0);
  v54 = swift_allocObject(v52, ((*(unsigned __int8 *)(*(_QWORD *)(v53 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v53 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v53 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v53 - 8) + 80) | 7);
  *(_OWORD *)(v54 + 16) = xmmword_1003CA200;
  v55 = static MetricsActionType.navigate.getter();
  v57 = v56;
  v58 = v88;
  static MetricsData.Configuration.podcasts.getter();
  v59 = v47;
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v80, v47, v79, v49, v55, v57, 0, 0, 0, 0, v51, &_swiftEmptyDictionarySingleton, v58);
  v60 = swift_bridgeObjectRelease(v57);
  v61 = (*(uint64_t (**)(char *, uint64_t, __n128))(v89 + 8))(v58, v84, v60);
  v62 = v91;
  ScalarDictionary.init()(v61);
  v63 = v95;
  ActionMetrics.init(data:custom:)(v54, v62);
  swift_bridgeObjectRelease(v59);
  swift_bridgeObjectRelease(v49);
  sub_100007A28(v51, (uint64_t *)&unk_100553DC0);
  v64 = v96;
  v65 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v92 + 104))(v96, enum case for FlowPresentationContext.infer(_:), v93);
  v66 = static Link.Presentation.textFollowsTintColor.getter(v65);
  v67 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  v68 = Link.Presentation.init(rawValue:)(0);
  v69 = Link.Presentation.init(rawValue:)(v68);
  if (Link.Presentation.init(rawValue:)(v69 & v66) != v66)
    v68 = Link.Presentation.init(rawValue:)(v68 | v66);
  v70 = Link.Presentation.init(rawValue:)(v68);
  v71 = Link.Presentation.init(rawValue:)(v70 & v67);
  countAndFlagsBits = v83;
  v73 = v86;
  v72 = object;
  if (v71 != v67)
    v68 = Link.Presentation.init(rawValue:)(v68 | v67);
  v74 = type metadata accessor for FlowAction(0);
  swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  v75 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v97, 0, 0, v85, v73, v64, 0, v68, v44, v63);
  swift_release(v81);

  if (!v75)
    goto LABEL_20;
  *((_QWORD *)&v100 + 1) = type metadata accessor for Action(0);
  v101 = sub_100026844((unint64_t *)&qword_100554910, (uint64_t (*)(uint64_t))&type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v99 = v75;
LABEL_21:
  v76 = v98;
  v77 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v76, 1, 1, v77);
  *(_QWORD *)(a2 + 24) = type metadata accessor for Information(0);
  *(_QWORD *)(a2 + 32) = sub_100026844(&qword_100555620, (uint64_t (*)(uint64_t))&type metadata accessor for Information, (uint64_t)&protocol conformance descriptor for Information);
  sub_1000242A8((_QWORD *)a2);
  LOBYTE(v78) = 0;
  Information.init(id:title:subtitle:description:clickAction:expanded:impressionMetrics:)(0xD000000000000028, 0x80000001004311E0, countAndFlagsBits, v72, 0, 0, 0, 0, &v99, v78, v76);
}

double sub_10018D4EC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned __int8 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  double result;
  int v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  unint64_t v76;
  void *object;
  uint64_t countAndFlagsBits;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t *v89;
  char *v90;
  _QWORD v91[6];
  Swift::String v92;

  v4 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v4);
  v88 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FlowPresentationContext(0);
  v84 = *(_QWORD *)(v6 - 8);
  v85 = v6;
  __chkstk_darwin(v6);
  v87 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v8);
  v83 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for MetricsData.Configuration(0);
  v10 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v13);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v16);
  v86 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FlowDestinationPageHeader(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v90 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for FlowDestination(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v89 = (uint64_t *)((char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = objc_msgSend(a1, "podcast");
  if (!v24)
    goto LABEL_14;
  v25 = v24;
  v26 = objc_msgSend(v24, "channel");

  if (!v26)
    goto LABEL_14;
  if (!objc_msgSend(v26, "isMultiShow")
    || (v27 = objc_msgSend(v26, "name")) == 0)
  {

LABEL_14:
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v28 = v27;
  v79 = v15;
  v81 = v10;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v31 = v30;

  v32 = HIBYTE(v31) & 0xF;
  v80 = v29;
  if ((v31 & 0x2000000000000000) == 0)
    v32 = v29 & 0xFFFFFFFFFFFFLL;
  if (!v32)
  {

    swift_bridgeObjectRelease(v31);
    goto LABEL_14;
  }
  v76 = v31;
  v33 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v92._object = (void *)0xE000000000000000;
  v34._countAndFlagsBits = 0x5F4C454E4E414843;
  v34._object = (void *)0xED0000454C544954;
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  v92._countAndFlagsBits = 0;
  v36 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, (Swift::String_optional)0, (NSBundle)v33, v35, v92);
  object = v36._object;
  countAndFlagsBits = v36._countAndFlagsBits;

  type metadata accessor for ChannelDetail(0);
  v37 = v26;
  v38 = sub_10031B730(v37);
  v75 = v37;

  v39 = v38;
  *v89 = v38;
  (*(void (**)(void))(v22 + 104))();
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v90, enum case for FlowDestinationPageHeader.uber(_:), v18);
  v40 = swift_retain();
  v91[0] = ChannelDetail.adamId.getter(v40);
  v41 = sub_100030584();
  v74 = BinaryInteger.description.getter(&type metadata for UInt64, v41);
  v43 = v42;
  v73 = static MetricsTargetType.link.getter();
  v45 = v44;
  v46 = type metadata accessor for URL(0);
  v47 = (uint64_t)v79;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v79, 1, 1, v46);
  v48 = sub_10003F544(&qword_100555608);
  v49 = type metadata accessor for MetricsData(0);
  v50 = swift_allocObject(v48, ((*(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v49 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80) | 7);
  *(_OWORD *)(v50 + 16) = xmmword_1003CA200;
  v51 = static MetricsActionType.navigate.getter();
  v53 = v52;
  static MetricsData.Configuration.podcasts.getter();
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v74, v43, v73, v45, v51, v53, 0, 0, 0, 0, v47, &_swiftEmptyDictionarySingleton, v12);
  v54 = swift_bridgeObjectRelease(v53);
  v55 = (*(uint64_t (**)(char *, uint64_t, __n128))(v81 + 8))(v12, v82, v54);
  v56 = v83;
  ScalarDictionary.init()(v55);
  v57 = v86;
  ActionMetrics.init(data:custom:)(v50, v56);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v45);
  sub_100007A28(v47, (uint64_t *)&unk_100553DC0);
  v58 = v87;
  v59 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v84 + 104))(v87, enum case for FlowPresentationContext.infer(_:), v85);
  v60 = static Link.Presentation.textFollowsTintColor.getter(v59);
  v61 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  v62 = Link.Presentation.init(rawValue:)(0);
  v63 = Link.Presentation.init(rawValue:)(v62);
  if (Link.Presentation.init(rawValue:)(v63 & v60) != v60)
    v62 = Link.Presentation.init(rawValue:)(v62 | v60);
  v64 = Link.Presentation.init(rawValue:)(v62);
  v65 = Link.Presentation.init(rawValue:)(v64 & v61);
  v66 = v76;
  if (v65 != v61)
    v62 = Link.Presentation.init(rawValue:)(v62 | v61);
  v67 = type metadata accessor for FlowAction(0);
  swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  v68 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v89, 0, 0, v80, v66, v58, 0, v62, v90, v57);
  v91[3] = v67;
  v91[4] = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  v91[0] = v68;
  v69 = type metadata accessor for ImpressionMetrics(0);
  v70 = v88;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v88, 1, 1, v69);
  *(_QWORD *)(a2 + 24) = type metadata accessor for Information(0);
  *(_QWORD *)(a2 + 32) = sub_100026844(&qword_100555620, (uint64_t (*)(uint64_t))&type metadata accessor for Information, (uint64_t)&protocol conformance descriptor for Information);
  sub_1000242A8((_QWORD *)a2);
  LOBYTE(v72) = 0;
  Information.init(id:title:subtitle:description:clickAction:expanded:impressionMetrics:)(0xD00000000000002BLL, 0x80000001004311B0, countAndFlagsBits, object, 0, 0, 0, 0, v91, v72, v70);
  swift_release(v39);

  return result;
}

double sub_10018DBE8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  Swift::String v12;
  unint64_t v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  double result;
  _OWORD v20[2];
  uint64_t v21;
  Swift::String v22;

  v4 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v4);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, "pubDate");
  Date.init(timeIntervalSinceReferenceDate:)(v11);
  v12 = Date.verboseDisplayString()();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v13 = ((unint64_t)v12._object >> 56) & 0xF;
  if (((uint64_t)v12._object & 0x2000000000000000) == 0)
    v13 = v12._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v22._object = (void *)0xE000000000000000;
    v15._countAndFlagsBits = 0x454853494C425550;
    v15._object = (void *)0xEF454C5449545F44;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v22._countAndFlagsBits = 0;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v22);

    v18 = type metadata accessor for ImpressionMetrics(0);
    memset(v20, 0, sizeof(v20));
    v21 = 0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
    *(_QWORD *)(a2 + 24) = type metadata accessor for Information(0);
    *(_QWORD *)(a2 + 32) = sub_100026844(&qword_100555620, (uint64_t (*)(uint64_t))&type metadata accessor for Information, (uint64_t)&protocol conformance descriptor for Information);
    sub_1000242A8((_QWORD *)a2);
    Information.init(id:title:subtitle:description:clickAction:expanded:impressionMetrics:)(0xD00000000000002DLL, 0x8000000100431180, v17._countAndFlagsBits, v17._object, 0, 0, v12._countAndFlagsBits, v12._object, v20, 0, v6);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v12._object).n128_u64[0];
  }
  return result;
}

double sub_10018DE28@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  double result;
  _OWORD v21[2];
  uint64_t v22;
  Swift::String v23;

  v4 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Localization.duration(_:)(objc_msgSend(a1, "duration"));
  if (v8)
  {
    v9 = v8;
    *(_QWORD *)&v21[0] = v7;
    *((_QWORD *)&v21[0] + 1) = v8;
    v10 = sub_10016D37C();
    v11 = StringProtocol.localizedLowercase.getter(&type metadata for String, v10);
    v13 = v12;
    swift_bridgeObjectRelease(v9);
    v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v14 = v11 & 0xFFFFFFFFFFFFLL;
    if (v14)
    {
      v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v23._object = (void *)0xE000000000000000;
      v16._countAndFlagsBits = 0x545F4854474E454CLL;
      v16._object = (void *)0xEC000000454C5449;
      v17._countAndFlagsBits = 0;
      v17._object = (void *)0xE000000000000000;
      v23._countAndFlagsBits = 0;
      v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v23);

      v19 = type metadata accessor for ImpressionMetrics(0);
      memset(v21, 0, sizeof(v21));
      v22 = 0;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
      *(_QWORD *)(a2 + 24) = type metadata accessor for Information(0);
      *(_QWORD *)(a2 + 32) = sub_100026844(&qword_100555620, (uint64_t (*)(uint64_t))&type metadata accessor for Information, (uint64_t)&protocol conformance descriptor for Information);
      sub_1000242A8((_QWORD *)a2);
      Information.init(id:title:subtitle:description:clickAction:expanded:impressionMetrics:)(0xD00000000000002DLL, 0x8000000100431150, v18._countAndFlagsBits, v18._object, 0, 0, v11, v13, v21, 0, v6);
      return result;
    }
    swift_bridgeObjectRelease(v13);
  }
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

double sub_10018E03C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  _OWORD v18[2];
  uint64_t v19;
  Swift::String v20;

  v4 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "seasonNumber");
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v20._object = (void *)0xE000000000000000;
    v10._countAndFlagsBits = 0x545F4E4F53414553;
    v10._object = (void *)0xEC000000454C5449;
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    v20._countAndFlagsBits = 0;
    v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v20);

    *(_QWORD *)&v18[0] = v8;
    v13 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v15 = v14;
    v16 = type metadata accessor for ImpressionMetrics(0);
    memset(v18, 0, sizeof(v18));
    v19 = 0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
    *(_QWORD *)(a2 + 24) = type metadata accessor for Information(0);
    *(_QWORD *)(a2 + 32) = sub_100026844(&qword_100555620, (uint64_t (*)(uint64_t))&type metadata accessor for Information, (uint64_t)&protocol conformance descriptor for Information);
    sub_1000242A8((_QWORD *)a2);
    Information.init(id:title:subtitle:description:clickAction:expanded:impressionMetrics:)(0xD00000000000002CLL, 0x8000000100431120, v12._countAndFlagsBits, v12._object, 0, 0, v13, v15, v18, 0, v6);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

double sub_10018E228@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  _OWORD v18[2];
  uint64_t v19;
  Swift::String v20;

  v4 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "episodeNumber");
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v20._object = (void *)0xE000000000000000;
    v10._countAndFlagsBits = 0x5F45444F53495045;
    v10._object = (void *)0xED0000454C544954;
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    v20._countAndFlagsBits = 0;
    v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v20);

    *(_QWORD *)&v18[0] = v8;
    v13 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v15 = v14;
    v16 = type metadata accessor for ImpressionMetrics(0);
    memset(v18, 0, sizeof(v18));
    v19 = 0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
    *(_QWORD *)(a2 + 24) = type metadata accessor for Information(0);
    *(_QWORD *)(a2 + 32) = sub_100026844(&qword_100555620, (uint64_t (*)(uint64_t))&type metadata accessor for Information, (uint64_t)&protocol conformance descriptor for Information);
    sub_1000242A8((_QWORD *)a2);
    Information.init(id:title:subtitle:description:clickAction:expanded:impressionMetrics:)(0xD00000000000002DLL, 0x80000001004310F0, v12._countAndFlagsBits, v12._object, 0, 0, v13, v15, v18, 0, v6);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10018E418(uint64_t a1)
{
  return sub_10018E440(a1, 0xD000000000000012, 0x80000001004310B0, &qword_1005553B8, &qword_1005553C0);
}

uint64_t sub_10018E440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void **a5)
{
  uint64_t v7;
  Swift::String v8;
  uint64_t result;

  v7 = ShelfIDBuilder.init(named:)(a2, a3);
  v8 = ShelfIDBuilder.build()();
  result = swift_bridgeObjectRelease(v7);
  *a4 = v8._countAndFlagsBits;
  *a5 = v8._object;
  return result;
}

uint64_t sub_10018E49C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  __n128 v69;
  char *v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  __n128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  int v100;
  unsigned __int8 v101;
  void *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  __n128 v112;
  void *v113;
  id v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  char *v122;
  uint64_t v123;
  id v124;
  void *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  Swift::String v131;
  Swift::String v132;
  Swift::String v133;
  uint64_t v134;
  uint64_t v135;
  void (**v136)(char *, _QWORD, uint64_t);
  id v137;
  Swift::String v138;
  Swift::String v139;
  Swift::String v140;
  char *v141;
  void *v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  __n128 v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  void (*v168)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  void (**v184)(char *, _QWORD, uint64_t);
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  _QWORD *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t countAndFlagsBits;
  uint64_t object;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  Swift::String v210;
  Swift::String v211;
  Swift::String v212;

  v4 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v7);
  v191 = (char *)&v168 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v9);
  v190 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v11);
  v189 = (char *)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v13);
  v195 = (char *)&v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v194 = (char *)&v168 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v205 = (char *)&v168 - v19;
  v20 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v20);
  v203 = (char *)&v168 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for TranscriptSnippet(0);
  v192 = *(_QWORD *)(v22 - 8);
  v193 = v22;
  __chkstk_darwin(v22);
  v204 = (char *)&v168 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = type metadata accessor for FlowDestinationPageHeader(0);
  v184 = *(void (***)(char *, _QWORD, uint64_t))(v185 - 8);
  __chkstk_darwin(v185);
  v187 = (char *)&v168 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for FlowPresentationContext(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v186 = (char *)&v168 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v26);
  v180 = (char *)&v168 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for MetricsData.Configuration(0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v168 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v29);
  v202 = (char *)&v168 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v31);
  v183 = (char *)&v168 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v176 = type metadata accessor for FlowDestination(0);
  v33 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v199 = (char *)&v168 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for TranscriptRequestInformation(0);
  v201 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v200 = (char *)&v168 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_10003F544(&qword_100555600);
  v38 = __chkstk_darwin(v37);
  v175 = (uint64_t)&v168 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v188 = (uint64_t)&v168 - v41;
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v168 - v43;
  __chkstk_darwin(v42);
  v46 = (char *)&v168 - v45;
  v47 = objc_msgSend(a1, "transcriptIdentifier");
  if (!v47)
  {
    v66 = type metadata accessor for ModernShelf(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(a2, 1, 1, v66);
  }
  v48 = v47;
  v198 = v16;
  v172 = v15;
  v173 = v6;
  v174 = a2;
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  countAndFlagsBits = v50;
  object = v49;

  v51 = (uint64_t)objc_msgSend(a1, "storeTrackId");
  v52 = AdamID.init(rawValue:)(v51 & ~(v51 >> 63));
  v53 = objc_msgSend(a1, "transcriptProvider");
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v56 = v55;

  v206 = v46;
  TranscriptSource.init(rawValue:)(v54, v56);
  *(_QWORD *)&v207 = v52;
  v57 = sub_100030584();
  v58 = BinaryInteger.description.getter(&type metadata for UInt64, v57);
  v60 = v59;
  v170 = a1;
  v61 = objc_msgSend(a1, "title");
  if (v61)
  {
    v62 = v61;
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v65 = v64;

  }
  else
  {
    v63 = 0;
    v65 = 0;
  }
  sub_100007A64((uint64_t)v206, (uint64_t)v44, &qword_100555600);
  v68 = countAndFlagsBits;
  v69 = swift_bridgeObjectRetain(countAndFlagsBits);
  v70 = v200;
  TranscriptRequestInformation.init(episodeAdamId:episodeTitle:ttmlIdentifier:selectedTextTimeInterval:source:)(v58, v60, v63, v65, object, v68, 0, 0, v69, 1, v44);
  v71 = *(void (**)(char *, char *, uint64_t))(v201 + 16);
  v72 = v199;
  v171 = v35;
  v71(v199, v70, v35);
  v73 = (*(uint64_t (**)(char *, _QWORD, _QWORD))(v33 + 104))(v72, enum case for FlowDestination.episodeDetailTranscript(_:), v176);
  v74 = static MetricsTargetID.viewTranscript.getter(v73);
  v76 = v75;
  v77 = static MetricsTargetType.button.getter();
  v79 = v78;
  v80 = type metadata accessor for URL(0);
  v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56);
  v82 = (uint64_t)v202;
  v169 = v80;
  v168 = v81;
  ((void (*)(char *, uint64_t, uint64_t))v81)(v202, 1, 1);
  v83 = sub_10003F544(&qword_100555608);
  v84 = type metadata accessor for MetricsData(0);
  v85 = swift_allocObject(v83, ((*(unsigned __int8 *)(*(_QWORD *)(v84 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v84 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v84 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v84 - 8) + 80) | 7);
  v176 = xmmword_1003CA200;
  *(_OWORD *)(v85 + 16) = xmmword_1003CA200;
  v86 = static MetricsActionType.navigate.getter();
  v88 = v87;
  v89 = v177;
  static MetricsData.Configuration.podcasts.getter();
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v74, v76, v77, v79, v86, v88, 0, 0, 0, 0, v82, &_swiftEmptyDictionarySingleton, v89);
  v90 = swift_bridgeObjectRelease(v88);
  v91 = (*(uint64_t (**)(char *, uint64_t, __n128))(v178 + 8))(v89, v179, v90);
  v92 = v180;
  ScalarDictionary.init()(v91);
  v93 = v183;
  ActionMetrics.init(data:custom:)(v85, v92);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v79);
  sub_100007A28(v82, (uint64_t *)&unk_100553DC0);
  v94 = v186;
  v95 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v181 + 104))(v186, enum case for FlowPresentationContext.infer(_:), v182);
  v96 = static Link.Presentation.textFollowsTintColor.getter(v95);
  v97 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  v98 = Link.Presentation.init(rawValue:)(0);
  v99 = Link.Presentation.init(rawValue:)(v98);
  if (Link.Presentation.init(rawValue:)(v99 & v96) != v96)
    v98 = Link.Presentation.init(rawValue:)(v98 | v96);
  v100 = Link.Presentation.init(rawValue:)(v98);
  v101 = Link.Presentation.init(rawValue:)(v100 & v97);
  v102 = v170;
  if (v101 != v97)
    v98 = Link.Presentation.init(rawValue:)(v98 | v97);
  v103 = v187;
  v184[13](v187, enum case for FlowDestinationPageHeader.standard(_:), v185);
  v104 = type metadata accessor for FlowAction(0);
  swift_allocObject(v104, *(unsigned int *)(v104 + 48), *(unsigned __int16 *)(v104 + 52));
  v105 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v199, 0, 0, 0, 0, v94, 0, v98, v103, v93);
  v106 = objc_msgSend(v102, "transcriptSnippet");
  v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
  v109 = v108;

  *((_QWORD *)&v208 + 1) = v104;
  v209 = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v207 = v105;
  v110 = type metadata accessor for ImpressionMetrics(0);
  v111 = v203;
  v187 = *(char **)(*(_QWORD *)(v110 - 8) + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v187)(v203, 1, 1, v110);
  v199 = (char *)v105;
  v112 = swift_retain();
  TranscriptSnippet.init(id:text:clickAction:impressionMetrics:)(object, countAndFlagsBits, v107, v109, &v207, v111, v112);
  v113 = (void *)objc_opt_self(NSBundle);
  v114 = objc_msgSend(v113, "mainBundle");
  v210._object = (void *)0xE000000000000000;
  v115._countAndFlagsBits = 0x495243534E415254;
  v115._object = (void *)0xEA00000000005450;
  v116._countAndFlagsBits = 0;
  v116._object = (void *)0xE000000000000000;
  v210._countAndFlagsBits = 0;
  v117 = NSLocalizedString(_:tableName:bundle:value:comment:)(v115, (Swift::String_optional)0, (NSBundle)v114, v116, v210);
  object = (uint64_t)v117._object;

  v118 = v188;
  sub_100007A64((uint64_t)v206, v188, &qword_100555600);
  v119 = type metadata accessor for TranscriptSource(0);
  v120 = *(_QWORD *)(v119 - 8);
  v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119);
  v122 = v205;
  countAndFlagsBits = v117._countAndFlagsBits;
  if (v121 != 1)
  {
    v186 = (char *)v110;
    v123 = v175;
    sub_100007A64(v118, v175, &qword_100555600);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v120 + 88))(v123, v119) == enum case for TranscriptSource.provider(_:))
    {
      v124 = objc_msgSend(v102, "podcast");
      if (v124
        && (v125 = v124, v126 = objc_msgSend(v124, "title"),
                         v125,
                         v126))
      {
        v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
        v129 = v128;

        v130 = objc_msgSend(v113, "mainBundle");
        v211._object = (void *)0xE000000000000000;
        v131._object = (void *)0x8000000100431090;
        v131._countAndFlagsBits = 0xD000000000000015;
        v132._countAndFlagsBits = 0;
        v132._object = (void *)0xE000000000000000;
        v211._countAndFlagsBits = 0;
        v133 = NSLocalizedString(_:tableName:bundle:value:comment:)(v131, (Swift::String_optional)0, (NSBundle)v130, v132, v211);

        v134 = sub_10003F544(&qword_1005559A0);
        v135 = swift_allocObject(v134, 72, 7);
        *(_OWORD *)(v135 + 16) = v176;
        *(_QWORD *)(v135 + 56) = &type metadata for String;
        *(_QWORD *)(v135 + 64) = sub_10003E198();
        *(_QWORD *)(v135 + 32) = v127;
        *(_QWORD *)(v135 + 40) = v129;
        v185 = static String.localizedStringWithFormat(_:_:)(v133._countAndFlagsBits, v133._object, v135);
        v184 = v136;
        swift_bridgeObjectRelease(v133._object);
        swift_bridgeObjectRelease(v135);
      }
      else
      {
        v185 = 0;
        v184 = 0;
      }
      v110 = (uint64_t)v186;
      goto LABEL_19;
    }
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v123, v119);
    v110 = (uint64_t)v186;
  }
  v137 = objc_msgSend(v113, "mainBundle");
  v138._countAndFlagsBits = 0xD000000000000017;
  v212._object = (void *)0xE000000000000000;
  v138._object = (void *)0x8000000100431070;
  v139._countAndFlagsBits = 0;
  v139._object = (void *)0xE000000000000000;
  v212._countAndFlagsBits = 0;
  v140 = NSLocalizedString(_:tableName:bundle:value:comment:)(v138, (Swift::String_optional)0, (NSBundle)v137, v139, v212);
  v185 = v140._countAndFlagsBits;
  v184 = (void (**)(char *, _QWORD, uint64_t))v140._object;

LABEL_19:
  sub_100007A28(v118, &qword_100555600);
  LOBYTE(v207) = 1;
  ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(62, 0, 0x10000000000, 1);
  v141 = v122;
  if (qword_100551FE0 != -1)
    swift_once(&qword_100551FE0, sub_10018E418);
  v142 = qword_1005553C0;
  v188 = qword_1005553B8;
  v186 = (char *)qword_1005553C0;
  v143 = type metadata accessor for ActionMenu(0);
  v144 = v189;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v143 - 8) + 56))(v189, 1, 1, v143);
  v145 = v190;
  *v190 = v199;
  v146 = enum case for Header.PrimaryAction.seeAll(_:);
  v147 = type metadata accessor for Header.PrimaryAction(0);
  v148 = *(_QWORD *)(v147 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v148 + 104))(v145, v146, v147);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
  v149 = type metadata accessor for ArtworkModel(0);
  v150 = v191;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 56))(v191, 1, 1, v149);
  swift_retain();
  v151 = swift_bridgeObjectRetain(v142);
  v152 = v195;
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(countAndFlagsBits, object, v185, v184, 0, 0, 0, 0, v151, v144, v145, _swiftEmptyArrayStorage, v150);
  v153 = v194;
  v154 = v172;
  (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v194, v141, v172);
  v155 = sub_10003F544((uint64_t *)&unk_100554A40);
  v156 = swift_allocObject(v155, 72, 7);
  *(_OWORD *)(v156 + 16) = v176;
  v157 = v193;
  *(_QWORD *)(v156 + 56) = v193;
  *(_QWORD *)(v156 + 64) = sub_100026844(&qword_100555610, (uint64_t (*)(uint64_t))&type metadata accessor for TranscriptSnippet, (uint64_t)&protocol conformance descriptor for TranscriptSnippet);
  v158 = sub_1000242A8((_QWORD *)(v156 + 32));
  v159 = v192;
  v160 = v204;
  (*(void (**)(_QWORD *, char *, uint64_t))(v192 + 16))(v158, v204, v157);
  v161 = v202;
  v168(v202, 1, 1, v169);
  v209 = 0;
  v207 = 0u;
  v208 = 0u;
  v162 = v203;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v187)(v203, 1, 1, v110);
  v163 = type metadata accessor for MetricsShelfName(0);
  v164 = v173;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 56))(v173, 1, 1, v163);
  v167 = v164;
  v165 = v174;
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v188, v186, v152, v153, v156, v161, 1, 0, &v207, v162, v167);
  swift_release(v199);
  (*(void (**)(char *, uint64_t))(v198 + 8))(v205, v154);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v160, v157);
  (*(void (**)(char *, uint64_t))(v201 + 8))(v200, v171);
  sub_100007A28((uint64_t)v206, &qword_100555600);
  v166 = type metadata accessor for ModernShelf(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v166 - 8) + 56))(v165, 0, 1, v166);
}

uint64_t sub_10018F4F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __n128 v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  char *v57;
  __n128 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *object;
  uint64_t countAndFlagsBits;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;

  v78 = a1;
  v1 = sub_10003F544(&qword_100553DB0);
  __chkstk_darwin(v1);
  v77 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v3);
  v76 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v5);
  v72 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v7);
  v71 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544((uint64_t *)&unk_10055D860);
  __chkstk_darwin(v9);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100553DD0);
  __chkstk_darwin(v12);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544(&qword_100553DD8);
  __chkstk_darwin(v15);
  v74 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v73 = *(_QWORD *)(v75 - 8);
  v17 = __chkstk_darwin(v75);
  v70 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v65 - v19;
  v21 = (void *)objc_opt_self(NSBundle);
  v22 = objc_msgSend(v21, "mainBundle");
  v82._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0x495243534E415254;
  v23._object = (void *)0xEA00000000005450;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v82._countAndFlagsBits = 0;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v82);
  object = v25._object;
  countAndFlagsBits = v25._countAndFlagsBits;

  v27 = MTEpisode.subscriptionName.getter();
  if (v26)
  {
    v28 = v26;
    v29 = objc_msgSend(v21, "mainBundle");
    v83._object = (void *)0xE000000000000000;
    v30._object = (void *)0x8000000100431250;
    v30._countAndFlagsBits = 0xD00000000000001DLL;
    v31._countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    v83._countAndFlagsBits = 0;
    v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, (Swift::String_optional)0, (NSBundle)v29, v31, v83);

    v33 = sub_10003F544(&qword_1005559A0);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = sub_10003E198();
    *(_QWORD *)(v34 + 32) = v27;
    *(_QWORD *)(v34 + 40) = v28;
    v35 = static String.localizedStringWithFormat(_:_:)(v32._countAndFlagsBits, v32._object, v34);
    v37 = v36;
    swift_bridgeObjectRelease(v32._object);
    swift_bridgeObjectRelease(v34);
  }
  else
  {
    v38 = objc_msgSend(v21, "mainBundle");
    v39._countAndFlagsBits = 0xD000000000000037;
    v84._object = (void *)0xE000000000000000;
    v39._object = (void *)0x8000000100431210;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    v84._countAndFlagsBits = 0;
    v41 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, (Swift::String_optional)(unint64_t)v27, (NSBundle)v38, v40, v84);
    v35 = v41._countAndFlagsBits;
    v37 = v41._object;

  }
  LOBYTE(v79) = 1;
  ModernShelf.ItemPresentation.init(itemKind:orientation:background:horizontalRows:)(62, 0, 0x10000000000, 1);
  v42 = v20;
  if (qword_100551FE0 != -1)
    swift_once(&qword_100551FE0, sub_10018E418);
  v43 = qword_1005553C0;
  v66 = qword_1005553C0;
  v67 = qword_1005553B8;
  v44 = type metadata accessor for ActionMenu(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v14, 1, 1, v44);
  v45 = type metadata accessor for Header.PrimaryAction(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v11, 1, 1, v45);
  v46 = type metadata accessor for ArtworkModel(0);
  v47 = v71;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v71, 1, 1, v46);
  v48 = swift_bridgeObjectRetain(v43);
  v64 = v47;
  v49 = v74;
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(countAndFlagsBits, object, v35, v37, 0, 0, 0, 0, v48, v14, v11, _swiftEmptyArrayStorage, v64);
  v50 = v73;
  v51 = v70;
  v52 = v75;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v42, v75);
  v53 = sub_10003F544((uint64_t *)&unk_100554A40);
  v54 = swift_allocObject(v53, 72, 7);
  *(_OWORD *)(v54 + 16) = xmmword_1003CA200;
  v55 = type metadata accessor for ImpressionMetrics(0);
  v79 = 0u;
  v80 = 0u;
  v81 = 0;
  v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56);
  v71 = v42;
  v57 = v72;
  v56(v72, 1, 1, v55);
  *(_QWORD *)(v54 + 56) = type metadata accessor for TranscriptSnippet(0);
  *(_QWORD *)(v54 + 64) = sub_100026844(&qword_100555610, (uint64_t (*)(uint64_t))&type metadata accessor for TranscriptSnippet, (uint64_t)&protocol conformance descriptor for TranscriptSnippet);
  sub_1000242A8((_QWORD *)(v54 + 32));
  TranscriptSnippet.init(id:text:clickAction:impressionMetrics:)(0, 0xE000000000000000, 0, 0xE000000000000000, &v79, v57, v58);
  v59 = type metadata accessor for URL(0);
  v60 = v76;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v76, 1, 1, v59);
  v81 = 0;
  v79 = 0u;
  v80 = 0u;
  v56(v57, 1, 1, v55);
  v61 = type metadata accessor for MetricsShelfName(0);
  v62 = v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v77, 1, 1, v61);
  ModernShelf.init(id:header:itemPresentation:items:url:mergeWhenFetched:hideFromCarPlay:shelvesIntent:impressionMetrics:metricsName:)(v67, v66, v49, v51, v54, v60, 1, 0, &v79, v57, v62);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v71, v52);
}

_QWORD *LibraryEpisodePagePresenter.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[10]);
  sub_10003D380(v0 + 11);
  swift_unknownObjectRelease(v0[16]);
  swift_unknownObjectRelease(v0[18]);
  swift_release(v0[20]);
  swift_unknownObjectRelease(v0[21]);
  sub_10003D380(v0 + 23);
  swift_release(v0[28]);
  swift_release(v0[29]);
  swift_release(v0[30]);
  swift_release(v0[31]);
  swift_release(v0[32]);
  sub_10017603C((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_interactionContextPage);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageID;
  v2 = type metadata accessor for PageID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageMetrics;
  v4 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)v0 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_pageRenderContentTypes;
  v6 = type metadata accessor for PageRenderContentTypes(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_headerShelf, (uint64_t *)&unk_100559FB0);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_upsellBannerShelf, (uint64_t *)&unk_100559FB0);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_highlightShelf, (uint64_t *)&unk_100559FB0);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_descriptionShelf, (uint64_t *)&unk_100559FB0);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_websiteShelf, (uint64_t *)&unk_100559FB0);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_footerShelves));
  return v0;
}

uint64_t LibraryEpisodePagePresenter.__deallocating_deinit()
{
  uint64_t v0;

  LibraryEpisodePagePresenter.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10018FD48()
{
  return sub_100026844(&qword_100555440, type metadata accessor for LibraryEpisodePagePresenter, (uint64_t)&protocol conformance descriptor for LibraryEpisodePagePresenter);
}

uint64_t type metadata accessor for LibraryEpisodePagePresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_100555478;
  if (!qword_100555478)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryEpisodePagePresenter);
  return result;
}

uint64_t sub_10018FDB0()
{
  _QWORD *v0;

  return ModernPagePresenter.appEntityAnnotation.getter(*v0);
}

uint64_t sub_10018FDB8()
{
  _QWORD *v0;

  return ModernPagePresenter.scrollToTop.getter(*v0);
}

uint64_t sub_10018FDC0()
{
  _QWORD *v0;

  return ModernPagePresenter.dismiss.getter(*v0);
}

uint64_t sub_10018FDC8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_100026844(&qword_1005555D8, type metadata accessor for LibraryEpisodePagePresenter, (uint64_t)&protocol conformance descriptor for LibraryEpisodePagePresenter);
  return ModernShelvesPresenter.interactionContextOrigin.getter(v1, v2);
}

uint64_t sub_10018FE2C()
{
  _QWORD *v0;

  return ModernPagePresenter.pageExtensions.getter(*v0);
}

uint64_t sub_10018FE34()
{
  _QWORD *v0;

  return ModernPagePresenter.deletableExtension.getter(*v0);
}

uint64_t sub_10018FE3C()
{
  _QWORD *v0;

  return ModernPagePresenter.reorderingExtension.getter(*v0);
}

uint64_t sub_10018FE44()
{
  _QWORD *v0;

  return ModernPagePresenter.multiSelectableExtension.getter(*v0);
}

uint64_t sub_10018FE4C()
{
  _QWORD *v0;

  return ModernPagePresenter.hideAllHeaderSeparators.getter(*v0);
}

uint64_t sub_10018FE54()
{
  _QWORD *v0;

  return ModernPagePresenter.showsHeaders.getter(*v0);
}

uint64_t sub_10018FE5C()
{
  _QWORD *v0;

  return ModernPagePresenter.animateSectionChanges.getter(*v0);
}

uint64_t sub_10018FE64()
{
  _QWORD *v0;

  return ModernPagePresenter.clearsSelectionOnViewWillAppear.getter(*v0);
}

void sub_10018FE6C(Swift::Bool collapsed)
{
  ModernPagePresenter.splitControllerCollapseDidChange(collapsed:)(collapsed);
}

uint64_t sub_10018FE74()
{
  _QWORD *v0;

  return ModernPagePresenter.hasLoadedContent.getter(*v0);
}

uint64_t sub_10018FE7C()
{
  _QWORD *v0;

  return ModernPagePresenter.pageRender.getter(*v0);
}

uint64_t sub_10018FE84(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[2];
  _OWORD v8[2];

  v4 = a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  LibraryEpisodePagePresenter.init(asPartOf:with:)(a1, (uint64_t *)v7);
  return v5;
}

uint64_t sub_10018FEE4(uint64_t a1)
{
  _QWORD *v1;

  return ModernPagePresenter.dependenciesDidChange(_:)(a1, *v1);
}

uint64_t sub_10018FEEC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = *v1 + OBJC_IVAR____TtC8Podcasts27LibraryEpisodePagePresenter_interactionContextPage;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10018757C(v3, a1);
}

uint64_t sub_10018FF44()
{
  return sub_100026844(&qword_100555448, type metadata accessor for LibraryEpisodePagePresenter, (uint64_t)&protocol conformance descriptor for LibraryEpisodePagePresenter);
}

void sub_10018FF74()
{
  ViewControllerPresenter.viewWillAppear()();
}

void sub_10018FF7C()
{
  ViewControllerPresenter.viewDidAppear()();
}

uint64_t sub_10018FF84(uint64_t a1)
{
  _QWORD *v1;

  return ViewControllerPresenter.viewWillDisappear(forReason:)(a1, *v1);
}

void sub_10018FF8C()
{
  ViewControllerPresenter.viewDidDisappear()();
}

void sub_10018FF94()
{
  ViewControllerPresenter.viewDidReceiveMemoryWarning()();
}

uint64_t sub_10018FF9C()
{
  return type metadata accessor for LibraryEpisodePagePresenter(0);
}

void sub_10018FFA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[20];
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v12[0] = &unk_1003CB540;
  v12[1] = &unk_1003CB558;
  v12[2] = &unk_1003CB570;
  v12[3] = &unk_1003CB570;
  v12[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v12[5] = &unk_1003CB588;
  v12[6] = &unk_1003CB540;
  v12[7] = &unk_1003CB540;
  v12[8] = &unk_1003CB5A0;
  v12[9] = &unk_1003CB540;
  v12[10] = &unk_1003CB588;
  v12[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v12[12] = (char *)&value witness table for Builtin.NativeObject + 64;
  v12[13] = (char *)&value witness table for Builtin.NativeObject + 64;
  v12[14] = (char *)&value witness table for Builtin.NativeObject + 64;
  v12[15] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2 = type metadata accessor for InteractionContext.Page(319);
  if (v3 <= 0x3F)
  {
    v12[16] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for PageID(319);
    if (v5 <= 0x3F)
    {
      v12[17] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for PageMetrics(319);
      if (v7 <= 0x3F)
      {
        v12[18] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for PageRenderContentTypes(319);
        if (v9 <= 0x3F)
        {
          v12[19] = *(_QWORD *)(v8 - 8) + 64;
          sub_1001900FC(319);
          if (v11 <= 0x3F)
          {
            v13 = *(_QWORD *)(v10 - 8) + 64;
            v14 = v13;
            v15 = &unk_1003CB5B8;
            v16 = v13;
            v17 = v13;
            v18 = v13;
            v19 = (char *)&value witness table for Builtin.BridgeObject + 64;
            swift_updateClassMetadata2(a1, 256, 27, v12, a1 + 80);
          }
        }
      }
    }
  }
}

void sub_1001900FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100555488)
  {
    v2 = type metadata accessor for ModernShelf(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100555488);
  }
}

uint64_t _s7EpisodeVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for LibraryEpisodePagePresenter.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for LibraryEpisodePagePresenter.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

__n128 initializeWithTake for LibraryEpisodePagePresenter.Configuration(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LibraryEpisodePagePresenter.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryEpisodePagePresenter.Configuration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LibraryEpisodePagePresenter.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LibraryEpisodePagePresenter.Configuration()
{
  return &type metadata for LibraryEpisodePagePresenter.Configuration;
}

uint64_t sub_100190388()
{
  uint64_t v0;

  v0 = sub_10003F544(&qword_1005555E8);
  sub_100047DD0(v0, qword_1005553C8);
  sub_100047DA4(v0, (uint64_t)qword_1005553C8);
  return PreferenceKey.init(_:)(0xD00000000000002BLL, 0x8000000100431040, &type metadata for Bool);
}

unint64_t sub_1001903F4()
{
  unint64_t result;

  result = qword_1005555E0;
  if (!qword_1005555E0)
  {
    result = swift_getWitnessTable(&unk_1003CB5EC, &type metadata for LibraryEpisodePagePresenter.PageLoadError);
    atomic_store(result, (unint64_t *)&qword_1005555E0);
  }
  return result;
}

uint64_t sub_100190438(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InteractionContext.Page(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019047C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001904A8(uint64_t *a1)
{
  uint64_t v1;

  return sub_10018BD8C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001904B0()
{
  return sub_1001904C4((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001904C4(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 24));
  a2(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_100190500(uint64_t a1)
{
  uint64_t *v1;

  return sub_10018C120(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10019050C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100559FB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100190554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1001905B4()
{
  type metadata accessor for URL(0);
  sub_10018B9A8();
}

uint64_t sub_1001905E0(uint64_t a1)
{
  uint64_t v1;

  return sub_10018AA58(a1, v1);
}

uint64_t sub_1001905E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100559FB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100190630()
{
  uint64_t v0;

  return sub_10018A370(v0);
}

uint64_t sub_100190638()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10019065C()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  return 0;
}

uint64_t sub_100190680(uint64_t a1)
{
  uint64_t v1;

  return sub_10018A790(a1, v1);
}

uint64_t sub_100190688()
{
  uint64_t v0;

  return sub_10018A62C(v0);
}

uint64_t sub_100190690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HeaderButtonItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for LibraryEpisodePagePresenter.PageLoadError()
{
  return &type metadata for LibraryEpisodePagePresenter.PageLoadError;
}

uint64_t sub_1001906E8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts28PlayNextEpisodeContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100190750()
{
  return type metadata accessor for PlayNextEpisodeContextAction(0);
}

uint64_t type metadata accessor for PlayNextEpisodeContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_1005556D8;
  if (!qword_1005556D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlayNextEpisodeContextAction);
  return result;
}

uint64_t sub_100190794(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\b";
  v4[2] = "\b";
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t ImplicitFollowsDecayCoordinator.implicitFollowsEvents.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100190824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  return swift_release(v2);
}

uint64_t sub_100190834()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x78654E2079616C50;
  v1._object = (void *)0xE900000000000074;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

unint64_t sub_1001908D0()
{
  return 0xD000000000000029;
}

uint64_t sub_1001908EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts28PlayNextEpisodeContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100190930()
{
  return 8;
}

void sub_100190938(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "systemOrangeColor");
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v7._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0x78654E2079616C50;
  v4._object = (void *)0xE900000000000074;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v7._countAndFlagsBits = 0;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v7);

  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0xD000000000000029;
  *(_QWORD *)(a1 + 16) = 0x8000000100431330;
  *(Swift::String *)(a1 + 24) = v6;
}

uint64_t sub_100190A20()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100190A54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 32, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;
  return swift_release(v3);
}

void *sub_100190A98(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t PlayPreviousChapterIntentImplementation.player.getter()
{
  _QWORD *v0;

  return swift_unknownObjectRetain(*v0);
}

uint64_t PlayPreviousChapterIntentImplementation.chapterController.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000A520(v1 + 24, a1);
}

uint64_t PlayPreviousChapterIntentImplementation.init(asPartOf:performing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t ChapterIntent;
  __int128 v10;
  uint64_t v11;
  _UNKNOWN **v12;

  v6 = sub_10003F544((uint64_t *)&unk_10055C430);
  BaseObjectGraph.inject<A>(_:)(&v10, v6, v6);
  *(_OWORD *)a3 = v10;
  v7 = type metadata accessor for PlaybackController(0);
  BaseObjectGraph.inject<A>(_:)(&v10, v7, v7);
  *(_QWORD *)(a3 + 16) = v10;
  v11 = type metadata accessor for ChapterResultsController(0);
  v12 = &off_1004B6780;
  BaseObjectGraph.inject<A>(_:)(&v10, v11, v11);
  swift_release(a1);
  ChapterIntent = type metadata accessor for PlayNextChapterIntent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(ChapterIntent - 8) + 8))(a2, ChapterIntent);
  return sub_10002099C(&v10, a3 + 24);
}

uint64_t PlayPreviousChapterIntentImplementation.perform()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[12] = a1;
  v4[13] = v3;
  v5 = type metadata accessor for IndexPath(0, a2, a3);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v4[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100190C24, 0, 0);
}

_QWORD *sub_100190C24()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  _QWORD *result;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v1 = (void *)dispatch thunk of PlaybackController.currentRoute.getter();
  if (!v1 || (v2 = v1, v3 = objc_msgSend(v1, "isDeviceRoute"), v2, !v3))
  {
    v22 = type metadata accessor for PlayChapterError(0);
    v23 = sub_100026844(&qword_1005557E0, (uint64_t (*)(uint64_t))&type metadata accessor for PlayChapterError, (uint64_t)&protocol conformance descriptor for PlayChapterError);
    swift_allocError(v22, v23, 0, 0);
    v25 = v24;
    v26 = (unsigned int *)&enum case for PlayChapterError.remotePlayback(_:);
LABEL_9:
    v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v25, *v26, v22);
    swift_willThrow(v27);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    return (_QWORD *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD **)(v0 + 104);
  v6 = v5[1];
  ObjectType = swift_getObjectType(*v5, v4);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 112))(ObjectType, v6) & 1) == 0)
  {
    v22 = type metadata accessor for PlayChapterError(0);
    v28 = sub_100026844(&qword_1005557E0, (uint64_t (*)(uint64_t))&type metadata accessor for PlayChapterError, (uint64_t)&protocol conformance descriptor for PlayChapterError);
    swift_allocError(v22, v28, 0, 0);
    v25 = v29;
    v26 = (unsigned int *)&enum case for PlayChapterError.hasNoChapters(_:);
    goto LABEL_9;
  }
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 120);
  if (!v8(ObjectType, v6))
  {
    v22 = type metadata accessor for PlayChapterError(0);
    v30 = sub_100026844(&qword_1005557E0, (uint64_t (*)(uint64_t))&type metadata accessor for PlayChapterError, (uint64_t)&protocol conformance descriptor for PlayChapterError);
    swift_allocError(v22, v30, 0, 0);
    v25 = v31;
    v26 = (unsigned int *)&enum case for PlayChapterError.firstChapterAlreadyPlaying(_:);
    goto LABEL_9;
  }
  result = (_QWORD *)v8(ObjectType, v6);
  v10 = (unint64_t)result - 1;
  if (result)
  {
    v11 = *(_QWORD **)(v0 + 104);
    v12 = v11[6];
    v13 = v11[7];
    result = sub_10003A834(v11 + 3, v12);
    if ((v10 & 0x8000000000000000) == 0)
    {
      v14 = *(_QWORD *)(v0 + 120);
      v15 = *(_QWORD *)(v0 + 128);
      v16 = *(_QWORD *)(v0 + 112);
      IndexPath.init(row:section:)(v10, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v12, v13);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
      v17 = type metadata accessor for PlaybackController.TransportCommand(0);
      *(_QWORD *)(v0 + 80) = v17;
      *(_QWORD *)(v0 + 88) = &protocol witness table for PlaybackController.TransportCommand;
      v18 = (double *)sub_1000242A8((_QWORD *)(v0 + 56));
      v19 = *(_QWORD *)(v0 + 40);
      v20 = *(_QWORD *)(v0 + 48);
      sub_10003A834((_QWORD *)(v0 + 16), v19);
      *v18 = (*(double (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
      (*(void (**)(double *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v18, enum case for PlaybackController.TransportCommand.seekTo(_:), v17);
      v32 = (char *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
          + async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:);
      v21 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
                                       + 1));
      *(_QWORD *)(v0 + 136) = v21;
      *v21 = v0;
      v21[1] = sub_100190F38;
      return (_QWORD *)((uint64_t (*)(uint64_t, _QWORD))v32)(v0 + 56, 0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100190F38(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 136);
  *(_QWORD *)(*v2 + 144) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1001910B0;
  }
  else
  {

    sub_10003D380((_QWORD *)(v4 + 56));
    v6 = sub_100190FB8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100190FB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  sub_10003A834((_QWORD *)(v0 + 16), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v6 = v5;
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  sub_10003A834((_QWORD *)(v0 + 16), v7);
  v9 = (*(double (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  v10 = *(_QWORD *)(v0 + 40);
  v11 = *(_QWORD *)(v0 + 48);
  sub_10003A834((_QWORD *)(v0 + 16), v10);
  v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  ChapterInfo.init(title:time:duration:)(v4, v6, v9, v12);
  sub_10003D380((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001910B0()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 56));
  sub_10003D380((_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001910F8()
{
  return sub_100026844((unint64_t *)&unk_1005557E8, (uint64_t (*)(uint64_t))&type metadata accessor for PlayNextChapterIntent, (uint64_t)&protocol conformance descriptor for PlayNextChapterIntent);
}

uint64_t sub_100191128(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)swift_task_alloc(dword_1005557DC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100191178;
  return PlayPreviousChapterIntentImplementation.perform()(a1, v4, v5);
}

uint64_t sub_100191178()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t destroy for PlayPreviousChapterIntentImplementation(_QWORD *a1)
{
  swift_unknownObjectRelease(*a1);
  swift_release(a1[2]);
  return sub_10003D380(a1 + 3);
}

uint64_t initializeWithCopy for PlayPreviousChapterIntentImplementation(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v3 = *a2;
  *(_OWORD *)a1 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a1 + 24;
  v6 = (uint64_t)a2 + 24;
  v7 = a2[3];
  *(_OWORD *)(a1 + 48) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_unknownObjectRetain(v3);
  swift_retain(v4);
  v9(v5, v6, v8);
  return a1;
}

uint64_t *assignWithCopy for PlayPreviousChapterIntentImplementation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  v7 = a1[2];
  a1[2] = a2[2];
  swift_retain();
  swift_release(v7);
  sub_10013C884(a1 + 3, a2 + 3);
  return a1;
}

__n128 initializeWithTake for PlayPreviousChapterIntentImplementation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for PlayPreviousChapterIntentImplementation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v4);
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  swift_release(v5);
  sub_10003D380(a1 + 3);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  a1[7] = a2[7];
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayPreviousChapterIntentImplementation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayPreviousChapterIntentImplementation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayPreviousChapterIntentImplementation()
{
  return &type metadata for PlayPreviousChapterIntentImplementation;
}

uint64_t sub_1001913F8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v56;
  unsigned int v57;
  unsigned int v58;
  id v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;

  v5 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v5);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ShowLockupStyle.LockupStyleOptions(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(a1, "uuid");
  if (v15)
  {
    v16 = v15;
    v61 = v7;
    v69 = v2;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;

    v20 = (uint64_t)objc_msgSend(a1, "storeCollectionId");
    v71 = AdamID.init(rawValue:)(v20 & ~(v20 >> 63));
    v70 = sub_10019188C(a1);
    v72 = v21;
    ShowLockupStyle.subline.getter();
    MTPodcast.lockupString(with:)((uint64_t)v14);
    v65 = v22;
    v23 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if ((ShowLockupStyle.includesOfferButton.getter(v23) & 1) != 0)
    {
      v24 = type metadata accessor for LibraryFollowAction(0);
      swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
      v25 = swift_bridgeObjectRetain(v19);
      v26 = LibraryFollowAction.init(podcastUuid:displaySuccessHUD:)(v17, v19, 1, v25);
    }
    else
    {
      v26 = 0;
    }
    MTPodcast.artworkModel.getter();
    v29 = objc_msgSend(a1, "title");
    if (v29)
    {
      v30 = v29;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v62 = v32;
      v63 = v31;

    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
    v67 = v17;
    objc_msgSend(a1, "addedDate");
    v34 = v33;
    swift_retain(v26);
    v35 = sub_100191A18(a1, a2, v70, v72);
    v68 = v10;
    v66 = v19;
    v64 = v26;
    if (v35)
    {
      v36 = v35;
      v37 = v61;
      *((_QWORD *)&v75 + 1) = type metadata accessor for Action(0);
      v76 = sub_100193040();
      *(_QWORD *)&v74 = v36;
    }
    else
    {
      v37 = v61;
      v76 = 0;
      v74 = 0u;
      v75 = 0u;
    }
    v60 = sub_100192D20(a1);
    v59 = sub_100192F14(a1);
    v58 = objc_msgSend(a1, "subscribed");
    v57 = objc_msgSend(a1, "isExplicit");
    v61 = (char *)a2;
    v73 = v71;
    v38 = sub_100030584();
    v39 = BinaryInteger.description.getter(&type metadata for UInt64, v38);
    v41 = v40;
    v42 = static MetricsIDType.itsContentID.getter();
    v44 = v43;
    v45 = static MetricsTargetType.lockup.getter();
    v47 = v46;
    v48 = static MetricsContentKind.show.getter();
    v50 = v49;
    v51 = v70;
    static ImpressionMetrics.shelfItem(id:idType:uniqueID:impressionType:kind:name:)(v39, v41, v42, v44, 0, 0, v45, v47, v48, v49, v70, v72);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v50);
    v52 = type metadata accessor for ImpressionMetrics(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v37, 0, 1, v52);
    LOBYTE(v73) = 1;
    HIBYTE(v56) = v57;
    LOBYTE(v56) = v58;
    v53 = v64;
    v28 = dispatch thunk of LibraryShowLockup.__allocating_init(uuid:adamId:icon:name:title:addedDate:subtitles:ordinal:rating:buttonAction:clickAction:providerAction:playAction:contextAction:isSubscribed:isExplicit:shelfUniqueId:impressionMetrics:)(v67, v66, v71, v68, v63, v62, v51, v72, v34, 0, v65, 0, 0, 0x100000000, v64, &v74, 0, v60, v59,
            v56,
            0,
            0,
            v37);
    swift_release(v53);

    v54 = type metadata accessor for ShowLockupStyle(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v61, v54);
  }
  else
  {

    v27 = type metadata accessor for ShowLockupStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a2, v27);
    return 0;
  }
  return v28;
}

uint64_t sub_10019188C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v16;

  v2 = sub_10003F544(&qword_1005557F8);
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ShowLockupStyle.LockupStyleOptions(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ShowLockupStyle.title.getter(v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100007A28((uint64_t)v4, &qword_1005557F8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    MTPodcast.lockupString(with:)((uint64_t)v9);
    v11 = v10;
    if (v10[2])
    {
      v12 = v10[4];
      swift_bridgeObjectRetain(v10[5]);
      swift_bridgeObjectRelease(v11);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return v12;
    }
    swift_bridgeObjectRelease(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  v13 = objc_msgSend(a1, "title");
  if (!v13)
    return 0;
  v14 = v13;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

  return v12;
}

uint64_t sub_100191A18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  double v58;
  id v59;
  void *v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned __int8 v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  int v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  int v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD v224[3];
  _BYTE v225[72];
  uint64_t v226;

  v201 = a4;
  v200 = a3;
  v5 = sub_10003F544((uint64_t *)&unk_100554EC0);
  __chkstk_darwin(v5);
  v7 = (char *)&v194 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v194 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = type metadata accessor for MetricsData.Configuration(0);
  v219 = *(_QWORD *)(v220 - 8);
  __chkstk_darwin(v220);
  v218 = (char *)&v194 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  v13 = __chkstk_darwin(v12);
  v196 = (char *)&v194 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v197 = (char *)&v194 - v16;
  v17 = __chkstk_darwin(v15);
  v199 = (char *)&v194 - v18;
  __chkstk_darwin(v17);
  v208 = (char *)&v194 - v19;
  v217 = type metadata accessor for FlowDestinationPageHeader(0);
  v216 = *(_QWORD *)(v217 - 8);
  v20 = __chkstk_darwin(v217);
  v206 = (char *)&v194 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v207 = (char *)&v194 - v23;
  __chkstk_darwin(v22);
  v212 = (char *)&v194 - v24;
  v215 = type metadata accessor for FlowPresentationContext(0);
  v214 = *(_QWORD *)(v215 - 8);
  v25 = __chkstk_darwin(v215);
  v204 = (char *)&v194 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v205 = (char *)&v194 - v28;
  v29 = __chkstk_darwin(v27);
  v198 = (char *)&v194 - v30;
  __chkstk_darwin(v29);
  v211 = (char *)&v194 - v31;
  v222 = type metadata accessor for FlowDestination(0);
  v221 = *(_QWORD *)(v222 - 8);
  v32 = __chkstk_darwin(v222);
  v202 = (uint64_t *)((char *)&v194 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v194 - v35;
  v37 = __chkstk_darwin(v34);
  v209 = (char *)&v194 - v38;
  v39 = __chkstk_darwin(v37);
  v210 = (char *)&v194 - v40;
  __chkstk_darwin(v39);
  v42 = (uint64_t *)((char *)&v194 - v41);
  v43 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v44 = __chkstk_darwin(v43);
  v203 = (char *)&v194 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __chkstk_darwin(v44);
  v48 = (char *)&v194 - v47;
  v49 = __chkstk_darwin(v46);
  v51 = (char *)&v194 - v50;
  v52 = __chkstk_darwin(v49);
  v54 = (char *)&v194 - v53;
  __chkstk_darwin(v52);
  v56 = (char *)&v194 - v55;
  v57 = (uint64_t)objc_msgSend(a1, "storeCollectionId");
  v213 = AdamID.init(rawValue:)(v57 & ~(v57 >> 63));
  if (objc_msgSend(a1, "isHiddenOrImplicitlyFollowed"))
  {
    objc_msgSend(a1, "lastUnfollowedDate");
    if (v58 > 0.0)
    {
      v59 = objc_msgSend(a1, "bestAvailableStoreCleanURL");
      v195 = v10;
      if (v59)
      {
        v60 = v59;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v59);

        v61 = type metadata accessor for URL(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v54, 0, 1, v61);
      }
      else
      {
        v116 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v54, 1, 1, v116);
      }
      sub_10003DC78((uint64_t)v54, (uint64_t)v56, (uint64_t *)&unk_100553DC0);
      v117 = (uint64_t)v42 + *(int *)(sub_10003F544(&qword_100554ED8) + 48);
      *v42 = 0;
      sub_100036A44((uint64_t)v56, v117);
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v221 + 104))(v42, enum case for FlowDestination.page(_:), v222);
      (*(void (**)(char *, _QWORD, uint64_t))(v214 + 104))(v211, enum case for FlowPresentationContext.pushDetail(_:), v215);
      (*(void (**)(char *, _QWORD, uint64_t))(v216 + 104))(v212, enum case for FlowDestinationPageHeader.uber(_:), v217);
      v226 = v213;
      v118 = sub_100030584();
      v222 = BinaryInteger.description.getter(&type metadata for UInt64, v118);
      v120 = v119;
      v121 = static MetricsTargetType.lockup.getter();
      v123 = v122;
      v124 = sub_10003F544(&qword_100555608);
      v125 = type metadata accessor for MetricsData(0);
      v126 = swift_allocObject(v124, ((*(unsigned __int8 *)(*(_QWORD *)(v125 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v125 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v125 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v125 - 8) + 80) | 7);
      *(_OWORD *)(v126 + 16) = xmmword_1003CA200;
      v127 = static MetricsActionType.navigate.getter();
      v129 = v128;
      v130 = v218;
      static MetricsData.Configuration.podcasts.getter();
      static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v222, v120, v121, v123, v127, v129, 0, 0, 0, 0, v56, &_swiftEmptyDictionarySingleton, v130);
      swift_bridgeObjectRelease(v129);
      v131 = (*(uint64_t (**)(char *, uint64_t))(v219 + 8))(v130, v220);
      v132 = v195;
      ScalarDictionary.init()(v131);
      v133 = v208;
      ActionMetrics.init(data:custom:)(v126, v132);
      swift_bridgeObjectRelease(v120);
      v134 = swift_bridgeObjectRelease(v123);
      v135 = static Link.Presentation.textFollowsTintColor.getter(v134);
      v136 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
      v137 = Link.Presentation.init(rawValue:)(0);
      v138 = Link.Presentation.init(rawValue:)(v137);
      if (Link.Presentation.init(rawValue:)(v138 & v135) != v135)
        v137 = Link.Presentation.init(rawValue:)(v137 | v135);
      v139 = Link.Presentation.init(rawValue:)(v137);
      if (Link.Presentation.init(rawValue:)(v139 & v136) != v136)
        v137 = Link.Presentation.init(rawValue:)(v137 | v136);
      v140 = type metadata accessor for FlowAction(0);
      swift_allocObject(v140, *(unsigned int *)(v140 + 48), *(unsigned __int16 *)(v140 + 52));
      v69 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v42, 0, 0, 0, 0, v211, 0, v137, v212, v133);
      sub_100007A28((uint64_t)v56, (uint64_t *)&unk_100553DC0);
      return v69;
    }
  }
  ShowLockupStyle.groupedEpisodesListType.getter(v224);
  sub_10003DC78((uint64_t)v224, (uint64_t)v225, (uint64_t *)&unk_100562EB0);
  if (v225[64] != 255)
  {
    sub_10016965C((uint64_t)v225, (uint64_t)&v226);
    v62 = objc_msgSend(a1, "uuid");
    if (!v62)
    {
      sub_100193088((uint64_t)v224);
      return 0;
    }
    v63 = v62;
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    v66 = v65;

    EpisodeListType.groupedFlowDestination(podcastUUID:)(v64, v66);
    swift_bridgeObjectRelease(v66);
    v67 = v221;
    v68 = v222;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v221 + 48))(v7, 1, v222) == 1)
    {
      sub_100193088((uint64_t)v224);
      sub_100007A28((uint64_t)v7, (uint64_t *)&unk_100554EC0);
      return 0;
    }
    v195 = v10;
    v100 = v210;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v210, v7, v68);
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v209, v100, v68);
    v223 = v213;
    v101 = sub_100030584();
    v102 = BinaryInteger.description.getter(&type metadata for UInt64, v101);
    v104 = v103;
    v105 = static MetricsTargetType.lockup.getter();
    v107 = v106;
    v108 = objc_msgSend(a1, "uuid");
    if (v108)
    {
      v109 = v108;
      v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
      v112 = v111;

      URL.init(string:)(v110, v112);
      swift_bridgeObjectRelease(v112);
      v113 = type metadata accessor for URL(0);
      v114 = *(_QWORD *)(v113 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v48, 1, v113) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v51, v48, v113);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v51, 0, 1, v113);
        goto LABEL_35;
      }
      sub_100007A28((uint64_t)v48, (uint64_t *)&unk_100553DC0);
    }
    v115 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 56))(v51, 1, 1, v115);
LABEL_35:
    v173 = sub_10003F544(&qword_100555608);
    v174 = type metadata accessor for MetricsData(0);
    v175 = swift_allocObject(v173, ((*(unsigned __int8 *)(*(_QWORD *)(v174 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v174 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v174 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v174 - 8) + 80) | 7);
    *(_OWORD *)(v175 + 16) = xmmword_1003CA200;
    v176 = static MetricsActionType.navigate.getter();
    v178 = v177;
    v179 = v218;
    static MetricsData.Configuration.podcasts.getter();
    static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v102, v104, v105, v107, v176, v178, 0, 0, 0, 0, v51, &_swiftEmptyDictionarySingleton, v179);
    swift_bridgeObjectRelease(v178);
    v180 = (*(uint64_t (**)(char *, uint64_t))(v219 + 8))(v179, v220);
    v181 = v195;
    ScalarDictionary.init()(v180);
    v182 = v199;
    ActionMetrics.init(data:custom:)(v175, v181);
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v107);
    sub_100007A28((uint64_t)v51, (uint64_t *)&unk_100553DC0);
    v183 = v198;
    v184 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v214 + 104))(v198, enum case for FlowPresentationContext.infer(_:), v215);
    v185 = static Link.Presentation.textFollowsTintColor.getter(v184);
    v186 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
    v187 = Link.Presentation.init(rawValue:)(0);
    v188 = Link.Presentation.init(rawValue:)(v187);
    if (Link.Presentation.init(rawValue:)(v188 & v185) != v185)
      v187 = Link.Presentation.init(rawValue:)(v187 | v185);
    v189 = Link.Presentation.init(rawValue:)(v187);
    if (Link.Presentation.init(rawValue:)(v189 & v186) != v186)
      v187 = Link.Presentation.init(rawValue:)(v187 | v186);
    v190 = v207;
    (*(void (**)(char *, _QWORD, uint64_t))(v216 + 104))(v207, enum case for FlowDestinationPageHeader.standard(_:), v217);
    v191 = type metadata accessor for FlowAction(0);
    swift_allocObject(v191, *(unsigned int *)(v191 + 48), *(unsigned __int16 *)(v191 + 52));
    v192 = v201;
    swift_bridgeObjectRetain(v201);
    v69 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v209, 0, 0, v200, v192, v183, 0, v187, v190, v182);
    sub_100193088((uint64_t)v224);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v210, v222);
    return v69;
  }
  type metadata accessor for PodcastDetail(0);
  v70 = a1;
  v71 = sub_1001D0F44(v70, 0, 0, 0, 1u);
  if (!v71)
    return 0;
  v72 = v71;
  sub_1001930E8();
  v73 = static UITraitCollection.interfaceIdiomIsMac.getter() & 1;
  v74 = objc_msgSend(v70, "subscribed");
  LODWORD(v212) = v73;
  if ((v74 & 1) != 0)
  {
    *v202 = v72;
    (*(void (**)(void))(v221 + 104))();
    (*(void (**)(char *, _QWORD, uint64_t))(v214 + 104))(v204, enum case for FlowPresentationContext.push(_:), v215);
    (*(void (**)(char *, _QWORD, uint64_t))(v216 + 104))(v206, enum case for FlowDestinationPageHeader.uber(_:), v217);
    v226 = v213;
    v75 = sub_100030584();
    swift_retain(v72);
    v222 = BinaryInteger.description.getter(&type metadata for UInt64, v75);
    v77 = v76;
    v221 = static MetricsTargetType.lockup.getter();
    v79 = v78;
    v80 = type metadata accessor for URL(0);
    v81 = (uint64_t)v203;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v203, 1, 1, v80);
    v82 = sub_10003F544(&qword_100555608);
    v83 = type metadata accessor for MetricsData(0);
    v84 = swift_allocObject(v82, ((*(unsigned __int8 *)(*(_QWORD *)(v83 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v83 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v83 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v83 - 8) + 80) | 7);
    *(_OWORD *)(v84 + 16) = xmmword_1003CA200;
    v85 = static MetricsActionType.navigate.getter();
    v86 = v10;
    v88 = v87;
    v89 = v218;
    static MetricsData.Configuration.podcasts.getter();
    static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v222, v77, v221, v79, v85, v88, 0, 0, 0, 0, v81, &_swiftEmptyDictionarySingleton, v89);
    swift_bridgeObjectRelease(v88);
    v90 = (*(uint64_t (**)(char *, uint64_t))(v219 + 8))(v89, v220);
    ScalarDictionary.init()(v90);
    v91 = v196;
    ActionMetrics.init(data:custom:)(v84, v86);
    swift_bridgeObjectRelease(v77);
    swift_bridgeObjectRelease(v79);
    v92 = sub_100007A28(v81, (uint64_t *)&unk_100553DC0);
    v93 = static Link.Presentation.textFollowsTintColor.getter(v92);
    v94 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
    v95 = Link.Presentation.init(rawValue:)(0);
    v96 = Link.Presentation.init(rawValue:)(v95);
    if (Link.Presentation.init(rawValue:)(v96 & v93) != v93)
      v95 = Link.Presentation.init(rawValue:)(v95 | v93);
    v97 = Link.Presentation.init(rawValue:)(v95);
    if (Link.Presentation.init(rawValue:)(v97 & v94) != v94)
      v95 = Link.Presentation.init(rawValue:)(v95 | v94);
    v98 = type metadata accessor for FlowAction(0);
    swift_allocObject(v98, *(unsigned int *)(v98 + 48), *(unsigned __int16 *)(v98 + 52));
    v99 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v202, 0, 0, 0, 0, v204, v212, v95, v206, v91);
  }
  else
  {
    v141 = swift_retain(v72);
    v142 = Podcast.uuid.getter(v141);
    v144 = v143;
    swift_release(v72);
    *(_QWORD *)v36 = v142;
    *((_QWORD *)v36 + 1) = v144;
    *((_OWORD *)v36 + 1) = 0u;
    *((_OWORD *)v36 + 2) = 0u;
    *((_OWORD *)v36 + 3) = 0u;
    v36[64] = 8;
    (*(void (**)(char *, _QWORD, uint64_t))(v221 + 104))(v36, enum case for FlowDestination.episodeList(_:), v222);
    (*(void (**)(char *, _QWORD, uint64_t))(v214 + 104))(v205, enum case for FlowPresentationContext.push(_:), v215);
    v226 = v213;
    v145 = sub_100030584();
    v222 = BinaryInteger.description.getter(&type metadata for UInt64, v145);
    v221 = v146;
    v215 = static MetricsTargetType.lockup.getter();
    v148 = v147;
    v149 = swift_retain(v72);
    v150 = Podcast.uuid.getter(v149);
    v151 = v10;
    v153 = v152;
    swift_release(v72);
    v154 = (uint64_t)v203;
    URL.init(string:)(v150, v153);
    swift_bridgeObjectRelease(v153);
    v155 = sub_10003F544(&qword_100555608);
    v156 = type metadata accessor for MetricsData(0);
    v157 = swift_allocObject(v155, ((*(unsigned __int8 *)(*(_QWORD *)(v156 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v156 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v156 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v156 - 8) + 80) | 7);
    *(_OWORD *)(v157 + 16) = xmmword_1003CA200;
    v158 = static MetricsActionType.navigate.getter();
    v160 = v159;
    v161 = v218;
    static MetricsData.Configuration.podcasts.getter();
    v162 = v221;
    static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v222, v221, v215, v148, v158, v160, 0, 0, 0, 0, v154, &_swiftEmptyDictionarySingleton, v161);
    swift_bridgeObjectRelease(v160);
    v163 = (*(uint64_t (**)(char *, uint64_t))(v219 + 8))(v161, v220);
    ScalarDictionary.init()(v163);
    v164 = v197;
    ActionMetrics.init(data:custom:)(v157, v151);
    swift_bridgeObjectRelease(v162);
    swift_bridgeObjectRelease(v148);
    v165 = sub_100007A28(v154, (uint64_t *)&unk_100553DC0);
    v166 = static Link.Presentation.textFollowsTintColor.getter(v165);
    v167 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
    v168 = Link.Presentation.init(rawValue:)(0);
    v169 = Link.Presentation.init(rawValue:)(v168);
    if (Link.Presentation.init(rawValue:)(v169 & v166) != v166)
      v168 = Link.Presentation.init(rawValue:)(v168 | v166);
    v170 = Link.Presentation.init(rawValue:)(v168);
    if (Link.Presentation.init(rawValue:)(v170 & v167) != v167)
      v168 = Link.Presentation.init(rawValue:)(v168 | v167);
    v171 = v207;
    (*(void (**)(char *, _QWORD, uint64_t))(v216 + 104))(v207, enum case for FlowDestinationPageHeader.standard(_:), v217);
    v172 = type metadata accessor for FlowAction(0);
    swift_allocObject(v172, *(unsigned int *)(v172 + 48), *(unsigned __int16 *)(v172 + 52));
    v99 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v36, 0, 0, 0, 0, v205, v212, v168, v171, v164);
  }
  v69 = v99;
  swift_release(v72);
  return v69;
}

uint64_t sub_100192D20(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v2 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "smartPlayEpisode");
  if (!v8)
    return 0;
  v9 = v8;
  v10 = objc_msgSend(v8, "uuid");
  if (!v10)
  {

    return 0;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;

  v16 = MTEpisode.contentId.getter(v15);
  v18 = v17 & 1;
  v19 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v7, 1, 1, v19);
  v20 = (uint64_t)objc_msgSend(v9, "storeTrackId");
  v21 = AdamID.init(rawValue:)(v20 & ~(v20 >> 63));
  v22 = static MetricsTargetType.button.getter();
  v24 = v23;
  static ActionMetrics.play(adamID:targetType:fields:)(v21, v22, v23, &_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v24);
  v25 = type metadata accessor for LibraryPlayAction(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = LibraryPlayAction.init(episodeUuid:episodeAdamId:channelAdamId:settings:showPlayerIfPlaying:forcePlay:title:timestamp:actionMetrics:)(v12, v14, v16, v18, 0, 1, v7, 2, 2, 0, 0, 0, 1, v4);

  return v26;
}

id sub_100192F14(void *a1)
{
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD v8[9];
  _QWORD v9[9];
  _BYTE v10[72];
  _BYTE v11[72];
  _BYTE v12[72];
  _BYTE v13[80];

  result = objc_msgSend(a1, "uuid");
  if (result)
  {
    v2 = result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v5 = v4;

    ShowLockupStyle.groupedEpisodesListType.getter(v8);
    sub_10003DC78((uint64_t)v8, (uint64_t)v11, (uint64_t *)&unk_100562EB0);
    if (v11[64] == 255
      || (sub_10016965C((uint64_t)v11, (uint64_t)v12),
          EpisodeListType.singleShowListType(showUuid:)(v9, v3, v5),
          sub_100193088((uint64_t)v8),
          sub_10003DC78((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_100562EB0),
          v10[64] == 255))
    {
      memset(v13, 0, 64);
      v13[64] = -1;
      v6 = v13;
    }
    else
    {
      sub_10016965C((uint64_t)v10, (uint64_t)v13);
      v6 = v9;
    }
    v7 = type metadata accessor for LibraryPodcastContextAction(0);
    swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    return (id)LibraryPodcastContextAction.init(podcastUuid:groupedEpisodeListType:)(v3, v5, v6);
  }
  return result;
}

unint64_t sub_100193040()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100554910;
  if (!qword_100554910)
  {
    v1 = type metadata accessor for Action(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Action, v1);
    atomic_store(result, (unint64_t *)&qword_100554910);
  }
  return result;
}

uint64_t sub_100193088(uint64_t a1)
{
  sub_1001930D0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return a1;
}

uint64_t sub_1001930D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    return sub_10003F49C(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

unint64_t sub_1001930E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100561290;
  if (!qword_100561290)
  {
    v1 = objc_opt_self(UITraitCollection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100561290);
  }
  return result;
}

void sub_100193124(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjCClassFromMetadata;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v3 = v2;
  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v6 = sub_10003F544(&qword_1005559A0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1003CA200;
  v8 = objc_msgSend((id)objc_opt_self(CLSDataStore), "shared");
  v9 = objc_msgSend(v8, "mainAppContext");

  v10 = objc_msgSend(v9, "objectID");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10003E198();
  *(_QWORD *)(v7 + 32) = v11;
  *(_QWORD *)(v7 + 40) = v13;
  v22 = (id)NSPredicate.init(format:_:)(0xD000000000000014, 0x8000000100431360, v7);
  v14 = sub_100005EC8(0, (unint64_t *)&unk_100555800, CLSContext_ptr);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v14);
  v16 = objc_msgSend((id)objc_opt_self(CLSQuery), "queryWithObjectType:predicate:", ObjCClassFromMetadata, v22);
  if (v16)
  {
    v17 = v16;
    v18 = swift_allocObject(&unk_1004B1708, 32, 7);
    *(_QWORD *)(v18 + 16) = a1;
    *(_QWORD *)(v18 + 24) = a2;
    aBlock[4] = sub_1001934DC;
    v24 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001934E4;
    aBlock[3] = &unk_1004B1720;
    v19 = _Block_copy(aBlock);
    v20 = v24;
    v21 = v17;
    swift_retain();
    objc_msgSend(v21, "setCompletion:", v19, swift_release(v20).n128_f64[0]);
    _Block_release(v19);
    objc_msgSend(v3, "executeQuery:", v21);

  }
  else
  {

  }
}

double sub_100193384(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t))
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  _BYTE v15[32];
  uint64_t v16;
  _QWORD *v17;

  if (!a1)
  {
    v6 = 0;
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (!v5)
  {
LABEL_7:
    a3(v6, a2);
    goto LABEL_8;
  }
  v17 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v5);
  v7 = a1 + 32;
  do
  {
    sub_10003D344(v7, (uint64_t)v15);
    v8 = sub_100005EC8(0, (unint64_t *)&unk_100555800, CLSContext_ptr);
    v9 = swift_dynamicCast(&v16, v15, (char *)&type metadata for Any + 8, v8, 7);
    v10 = v16;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
    v11 = v17[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
    v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
    specialized ContiguousArray._endMutation()(v12);
    v7 += 32;
    --v5;
  }
  while (v5);
  v6 = v17;
  a3(v17, a2);
LABEL_8:
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

uint64_t sub_1001934B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_1001934DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100193384(a1, a2, *(void (**)(_QWORD *, uint64_t))(v2 + 16));
}

uint64_t sub_1001934E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, (char *)&type metadata for Any + 8);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100193568()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

void sub_10019358C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v24 = a2;
  v6 = *(_QWORD *)(type metadata accessor for DownloadJob(0) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin();
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(*(id *)(v3 + 16), "newBackgroundContext");
  v10 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v11 = objc_msgSend(v10, "privateQueueContext");

  sub_1001952F0(a1, (uint64_t)v8);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = (v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_1004B17E8, v16 + 16, v12 | 7);
  *(_QWORD *)(v17 + 16) = v3;
  sub_10013BE30((uint64_t)v8, v17 + v13, type metadata accessor for DownloadJob);
  *(_QWORD *)(v17 + v14) = v11;
  *(_QWORD *)(v17 + v15) = v9;
  v18 = (_QWORD *)(v17 + v16);
  *v18 = v24;
  v18[1] = a3;
  aBlock[4] = sub_100195504;
  v26 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B1800;
  v19 = _Block_copy(aBlock);
  v20 = v26;
  swift_retain();
  v21 = v11;
  v22 = v9;
  swift_retain();
  objc_msgSend(v21, "performBlock:", v19, swift_release(v20).n128_f64[0]);
  _Block_release(v19);

}

void sub_10019376C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSString v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v31 = a5;
  v11 = *(_QWORD *)(type metadata accessor for DownloadJob(0) - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin();
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(a3, "episodeForUuid:", v14);

  v32 = a4;
  if (!v15)
    goto LABEL_5;
  v16 = objc_msgSend(v15, "assetURL");
  if (!v16)
  {

LABEL_5:
    v18 = 0;
    v20 = 0;
    goto LABEL_6;
  }
  v17 = v16;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v20 = v19;

LABEL_6:
  sub_1001952F0(a2, (uint64_t)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(unsigned __int8 *)(v11 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_1004B1838, v25 + 8, v21 | 7);
  *(_QWORD *)(v26 + 16) = v18;
  *(_QWORD *)(v26 + 24) = v20;
  sub_10013BE30((uint64_t)v13, v26 + v22, type metadata accessor for DownloadJob);
  v27 = (_QWORD *)(v26 + v23);
  *v27 = v31;
  v27[1] = a6;
  *(_QWORD *)(v26 + v24) = a1;
  v28 = v32;
  *(_QWORD *)(v26 + v25) = v32;
  aBlock[4] = sub_100195734;
  v34 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B1850;
  v29 = _Block_copy(aBlock);
  v30 = v34;
  swift_retain();
  swift_retain();
  objc_msgSend(v28, "performBlock:", v29, swift_release(v30).n128_f64[0]);
  _Block_release(v29);
}

uint64_t sub_100193980(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v37;
  os_log_type_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  BOOL v42;
  id v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  unsigned __int8 v58;
  id v59;
  uint64_t v60;
  id v61;
  void (*v62)(uint64_t *);
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(_QWORD);
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;

  v73 = a1;
  v70 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin();
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_10003F544(&qword_1005559E8);
  __chkstk_darwin();
  v74 = (uint64_t *)((char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v20 = (char *)&v68 - v19;
  if (a2)
  {
    v72 = a5;
    swift_bridgeObjectRetain(a2);
    v22 = static os_log_type_t.info.getter(v21);
    v23 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v24 = static OS_os_log.downloads.getter(v23);
    sub_1001952F0(a3, (uint64_t)v20);
    v25 = v22;
    if (os_log_type_enabled(v24, v22))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (void *)swift_slowAlloc(32, -1);
      v78 = v27;
      v71 = a4;
      *(_DWORD *)v26 = 136315138;
      v28 = sub_100026844(&qword_1005559F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v70, v28);
      v31 = v30;
      v76 = sub_10003D274(v29, v30, (uint64_t *)&v78);
      a4 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v31);
      sub_1001959BC((uint64_t)v20);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Download job %s is for an episode that is already downloaded. This is invalid, so the job will not be saved.", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      sub_1001959BC((uint64_t)v20);
    }
    v33 = v74;
    *v74 = v73;
    v33[1] = a2;
    v35 = type metadata accessor for JobStorageError(0);
    swift_storeEnumTagMultiPayload(v33, v35, 1);
    swift_storeEnumTagMultiPayload(v33, v75, 1);
    a4(v33);
  }
  else
  {
    v69 = v14;
    v73 = v12;
    v71 = a4;
    sub_100195794(a3);
    v37 = v32;
    v72 = a5;
    if (v32)
    {
      v38 = static os_log_type_t.info.getter(v32);
      v39 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v40 = static OS_os_log.downloads.getter(v39);
      sub_1001952F0(a3, (uint64_t)v18);
      v41 = v38;
      v42 = os_log_type_enabled(v40, v38);
      v43 = v37;
      if (v42)
      {
        v44 = swift_slowAlloc(22, -1);
        v68 = (void *)swift_slowAlloc(64, -1);
        v78 = v68;
        *(_DWORD *)v44 = 136315394;
        v45 = (uint64_t *)&v18[*(int *)(v16 + 20)];
        v46 = *v45;
        v47 = v45[1];
        swift_bridgeObjectRetain(v47);
        v76 = sub_10003D274(v46, v47, (uint64_t *)&v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v44 + 4, v44 + 12);
        swift_bridgeObjectRelease(v47);
        sub_1001959BC((uint64_t)v18);
        *(_WORD *)(v44 + 12) = 2080;
        v48 = objc_msgSend(v43, "id");
        v49 = v69;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v50 = sub_100026844(&qword_1005559F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v51 = v70;
        v52 = dispatch thunk of CustomStringConvertible.description.getter(v70, v50);
        v54 = v53;
        (*(void (**)(char *, uint64_t))(v73 + 8))(v49, v51);
        v76 = sub_10003D274(v52, v54, (uint64_t *)&v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v44 + 14, v44 + 22);

        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Found existing download job for episode %s, id: %s", (uint8_t *)v44, 0x16u);
        v55 = v68;
        swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v44, -1, -1);

      }
      else
      {

        sub_1001959BC((uint64_t)v18);
      }
      v62 = (void (*)(uint64_t *))v71;
      v33 = v74;
      v63 = v43;
      sub_100194020(v63, (uint64_t)v33);
      v64 = type metadata accessor for JobStorageError(0);
      swift_storeEnumTagMultiPayload(v33, v64, 2);
      swift_storeEnumTagMultiPayload(v33, v75, 1);
      v62(v33);

    }
    else
    {
      v56 = type metadata accessor for CDDownloadJob();
      v57 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v56)), "initWithContext:", a7);
      sub_1001944A4(a3);

      v78 = 0;
      v58 = objc_msgSend(a7, "save:", &v78);
      v59 = v78;
      if ((v58 & 1) != 0)
      {
        v60 = a3;
        v33 = v74;
        sub_1001952F0(v60, (uint64_t)v74);
        swift_storeEnumTagMultiPayload(v33, v75, 0);
        v61 = v59;
        v71(v33);
      }
      else
      {
        v65 = v78;
        v66 = _convertNSErrorToError(_:)(v59);

        swift_willThrow(v67);
        v33 = v74;
        *v74 = v66;
        v34 = type metadata accessor for JobStorageError(0);
        swift_storeEnumTagMultiPayload(v33, v34, 0);
        swift_storeEnumTagMultiPayload(v33, v75, 1);
        swift_errorRetain();
        v71(v33);
        swift_errorRelease();
      }
    }
  }
  return sub_100007A28((uint64_t)v33, &qword_1005559E8);
}

uint64_t sub_100194020@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  char v43;
  char *v44;
  uint64_t v45;
  char *v46;
  id v47;
  int *v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  int v59;
  id v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v4 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for EpisodeMetadata(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v69 = *(_QWORD *)(v13 - 8);
  v70 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a1, "id");
  v68 = v15;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = objc_msgSend(a1, "episodeUuid");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v66 = v19;
  v67 = v18;

  v20 = sub_100194C6C();
  v62 = v21;
  v63 = v20;
  v59 = v22;
  v60 = objc_msgSend(a1, "taskIdentifier");
  v23 = objc_msgSend(a1, "url");
  v61 = v9;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

  v24 = objc_msgSend(a1, "type");
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28._countAndFlagsBits = v25;
  v28._object = v27;
  v58 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004ACE38, v28);
  swift_bridgeObjectRelease(v27);
  v29 = objc_msgSend(a1, "guid");
  if (v29)
  {
    v30 = v29;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v56 = v32;
    v57 = v31;

  }
  else
  {
    v56 = 0;
    v57 = 0;
  }
  v33 = objc_msgSend(a1, "adamId");
  if (v33)
    v55 = objc_msgSend(a1, "adamId");
  else
    v55 = 0;
  v34 = objc_msgSend(a1, "podcastAdamId", v55);
  if (v34)
    v35 = objc_msgSend(a1, "podcastAdamId");
  else
    v35 = 0;
  v36 = objc_msgSend(a1, "lastCacheDeletePurge");
  if (v36)
  {
    v37 = v36;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

    v38 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v6, 0, 1, v38);
  }
  else
  {
    v39 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v6, 1, 1, v39);
  }
  v40 = (uint64_t)v6;
  v41 = v33 == 0;
  v42 = v58 == 1;
  v43 = v59 & 1;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v12[v10[11]], v61, v65);
  v12[v10[12]] = v42;
  v44 = &v12[v10[13]];
  *(_QWORD *)v44 = 0;
  v44[8] = 1;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v45 = v56;
  *((_QWORD *)v12 + 2) = v57;
  *((_QWORD *)v12 + 3) = v45;
  *((_QWORD *)v12 + 4) = v55;
  v12[40] = v41;
  *((_QWORD *)v12 + 6) = v35;
  v12[56] = v34 == 0;
  *((_OWORD *)v12 + 5) = 0u;
  *((_OWORD *)v12 + 6) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  v46 = &v12[v10[14]];
  *(_QWORD *)v46 = 0;
  v46[8] = 1;
  sub_10003DC78(v40, (uint64_t)&v12[v10[15]], &qword_1005522F0);
  v47 = objc_msgSend(a1, "creationDate");
  v48 = (int *)type metadata accessor for DownloadJob(0);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v47);

  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(a2, v68, v70);
  result = sub_10013BE30((uint64_t)v12, a2 + v48[9], type metadata accessor for EpisodeMetadata);
  *(_QWORD *)(a2 + v48[7]) = v60;
  v50 = a2 + v48[8];
  v51 = v62;
  *(_QWORD *)v50 = v63;
  *(_QWORD *)(v50 + 8) = v51;
  *(_BYTE *)(v50 + 16) = v43;
  v52 = (uint64_t *)(a2 + v48[5]);
  v53 = v66;
  *v52 = v67;
  v52[1] = v53;
  v54 = a2 + v48[10];
  *(_QWORD *)v54 = 0;
  *(_QWORD *)(v54 + 8) = 0;
  *(_QWORD *)(v54 + 16) = 0;
  *(_QWORD *)(v54 + 24) = 1;
  *(_QWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 40) = 0;
  *(_WORD *)(v54 + 48) = 0;
  return result;
}

void sub_1001944A4(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  char *v5;
  Class isa;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  NSString v15;
  Class v16;
  void *v17;
  void *v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;

  v2 = v1;
  sub_10003F544(&qword_1005522F0);
  __chkstk_darwin();
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setId:", isa);

  v7 = (int *)type metadata accessor for DownloadJob(0);
  v8 = a1 + v7[8];
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_BYTE *)(v8 + 16);
  swift_bridgeObjectRetain(v10);
  sub_100194FCC(v9, v10, v11);
  v12 = a1 + v7[9];
  v13 = type metadata accessor for EpisodeMetadata(0);
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setType:", v14, swift_bridgeObjectRelease(0xE500000000000000).n128_f64[0]);

  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setEpisodeUuid:", v15);

  v16 = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setCreationDate:", v16);

  objc_msgSend(v2, "setTaskIdentifier:", *(_QWORD *)(a1 + v7[7]));
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v13 + 44));
  v18 = v17;
  objc_msgSend(v2, "setUrl:", v17);

  if (*(_QWORD *)(v12 + 24))
    v19 = String._bridgeToObjectiveC()();
  else
    v19 = 0;
  objc_msgSend(v2, "setGuid:", v19);

  sub_100007A64(v12 + *(int *)(v13 + 60), (uint64_t)v5, &qword_1005522F0);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v5, 1, v20) != 1)
  {
    v22 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v20);
  }
  objc_msgSend(v2, "setLastCacheDeletePurge:", v22);

}

void sub_100194720(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v22 = a3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = objc_msgSend(*(id *)(v4 + 16), "newBackgroundContext");
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v13 + v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_1004B1798, v14 + 16, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + v13, (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v16 = v15 + ((v13 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v16 = v11;
  *(_BYTE *)(v16 + 8) = a2;
  v17 = (_QWORD *)(v15 + v14);
  *v17 = v22;
  v17[1] = a4;
  aBlock[4] = sub_100195240;
  v24 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B17B0;
  v18 = _Block_copy(aBlock);
  v19 = v24;
  v20 = v11;
  swift_retain(a4);
  swift_release(v19);
  objc_msgSend(v20, "performBlock:", v18);
  _Block_release(v18);

}

uint64_t sub_1001948B4(uint64_t a1, void *a2, char a3, void (*a4)(uint64_t *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  unsigned int v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v36[2];

  v7 = sub_10003F544(&qword_1005559D0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v36[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = objc_allocWithZone((Class)NSFetchRequest);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "initWithEntityName:", v11);

  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v13 = sub_10003F544(&qword_1005559A0);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1003CA220;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = sub_10003E198();
  *(_QWORD *)(v14 + 32) = 25705;
  *(_QWORD *)(v14 + 40) = 0xE200000000000000;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v14 + 96) = sub_100005EC8(0, &qword_1005559D8, NSUUID_ptr);
  *(_QWORD *)(v14 + 104) = sub_100195298();
  *(_QWORD *)(v14 + 72) = isa;
  v16 = (void *)NSPredicate.init(format:_:)(0x4025203D204B25, 0xE700000000000000, v14);
  objc_msgSend(v12, "setPredicate:", v16);

  v17 = type metadata accessor for CDDownloadJob();
  v18 = NSManagedObjectContext.fetch<A>(_:)(v12, v17);
  v20 = v18;
  if (!((unint64_t)v18 >> 62))
  {
    if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v20);
    if ((a3 & 1) != 0)
    {
      v30 = type metadata accessor for JobStorageError(0);
      swift_storeEnumTagMultiPayload(v9, v30, 3);
      v31 = v9;
      v32 = v7;
      v33 = 1;
    }
    else
    {
      v31 = v9;
      v32 = v7;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
    a4(v9);
    goto LABEL_17;
  }
  if (v18 < 0)
    v28 = v18;
  else
    v28 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  v29 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v20);
  if (!v29)
    goto LABEL_13;
LABEL_3:
  if ((v20 & 0xC000000000000001) != 0)
  {
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
  }
  else
  {
    if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v21 = *(id *)(v20 + 32);
  }
  v22 = v21;
  swift_bridgeObjectRelease(v20);
  objc_msgSend(a2, "deleteObject:", v22);
  v36[0] = 0;
  v23 = objc_msgSend(a2, "save:", v36);
  v24 = v36[0];
  if (v23)
  {
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    v25 = v24;
    a4(v9);

LABEL_17:
    return sub_100007A28((uint64_t)v9, &qword_1005559D0);
  }
  v26 = v36[0];
  v27 = _convertNSErrorToError(_:)(v24);

  swift_willThrow();
  *v9 = v27;
  v19 = type metadata accessor for JobStorageError(0);
  swift_storeEnumTagMultiPayload(v9, v19, 0);
  swift_storeEnumTagMultiPayload(v9, v7, 1);
  swift_errorRetain(v27);
  a4(v9);

  swift_errorRelease(v27);
  return sub_100007A28((uint64_t)v9, &qword_1005559D0);
}

uint64_t sub_100194C6C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSString v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _OWORD v32[2];
  uint64_t v33[4];

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v0, "primitiveValueForKey:", v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v32, v6);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v32, 0, sizeof(v32));
  }
  sub_10003DC78((uint64_t)v32, (uint64_t)v33, (uint64_t *)&unk_100552300);
  if (!v33[3])
  {
    sub_100007A28((uint64_t)v33, (uint64_t *)&unk_100552300);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(&v30, v33, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_9:
    v8 = 0;
    v7 = 0;
    goto LABEL_10;
  }
  v8 = v30;
  v7 = v31;
  swift_bridgeObjectRetain(v31);
  v9 = sub_10013DBB8(v8, v7);
  if (v10)
  {
    v11 = v9;
    swift_bridgeObjectRelease(v7);
    return v11;
  }
LABEL_10:
  strcpy((char *)v33, "malformed.id.");
  HIWORD(v33[1]) = -4864;
  if (v7)
    v12 = v8;
  else
    v12 = 1819047278;
  if (v7)
    v13 = (void *)v7;
  else
    v13 = (void *)0xE400000000000000;
  swift_bridgeObjectRetain(v7);
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  v15 = swift_bridgeObjectRelease(v13);
  v11 = v33[0];
  static Logger.downloads.getter(v15);
  swift_bridgeObjectRetain(v7);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v29 = v11;
    v19 = swift_slowAlloc(12, -1);
    v28 = v1;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v33[0] = v21;
    v27 = v2;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(v7);
    v22 = Optional<A>.description.getter(v8, v7);
    v26 = v4;
    v24 = v23;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)&v32[0] = sub_10003D274(v22, v24, v33);
    v11 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, (char *)v32 + 8, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "CDDownloadJob found with invalid session identifier string: '%s'", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v28);
  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v11;
}

void sub_100194FCC(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  NSString v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  uint64_t v11;
  NSString v12;
  NSString v13;
  id v14;

  v4 = v3;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "willChangeValueForKey:", v7);

  if ((a3 & 1) != 0)
    v8 = 1936484398;
  else
    v8 = 0x7261646E6174732ELL;
  if ((a3 & 1) != 0)
    v9 = (void *)0xE400000000000000;
  else
    v9 = (void *)0xE900000000000064;
  swift_bridgeObjectRetain(a2);
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v9);
  v11 = a2;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setPrimitiveValue:forKey:", v12, v13);

  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "didChangeValueForKey:", v14);

}

id sub_100195178()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CDDownloadJob();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001951B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + 7) & 0xFFFFFFFFFFFFF8;
  v8 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_100195240()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1001948B4(v0 + v2, *(void **)(v0 + ((v2 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v0 + ((v2 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void (**)(uint64_t *))(v0 + ((v2 + *(_QWORD *)(v1 + 64) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

unint64_t sub_100195298()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005559E0;
  if (!qword_1005559E0)
  {
    v1 = sub_100005EC8(255, &qword_1005559D8, NSUUID_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1005559E0);
  }
  return result;
}

uint64_t sub_1001952F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DownloadJob(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100195334()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v1 = (int *)type metadata accessor for DownloadJob(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v20 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v4 = v0 + ((v3 + 24) & ~v3);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[5] + 8));
  v6 = v4 + v1[6];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[8] + 8));
  v10 = (_QWORD *)(v4 + v1[9]);
  swift_bridgeObjectRelease(v10[1]);
  swift_bridgeObjectRelease(v10[3]);
  swift_bridgeObjectRelease(v10[9]);
  swift_bridgeObjectRelease(v10[11]);
  swift_bridgeObjectRelease(v10[13]);
  v11 = type metadata accessor for EpisodeMetadata(0);
  v12 = (char *)v10 + *(int *)(v11 + 44);
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = (char *)v10 + *(int *)(v11 + 60);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7))
    v9((uint64_t)v14, v7);
  v15 = *(_QWORD *)(v4 + v1[10] + 24);
  if ((unint64_t)(v15 - 1) >= 4)
    swift_bridgeObjectRelease(v15);
  v16 = (v20 + ((v3 + 24) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release(*(_QWORD *)(v0 + v18 + 8));
  return swift_deallocObject(v0, v18 + 16, v3 | 7);
}

void sub_100195504()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for DownloadJob(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10019376C(*(_QWORD *)(v0 + 16), v0 + v2, *(void **)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100195564()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v1 = (int *)type metadata accessor for DownloadJob(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v20 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v4 = v0 + ((v3 + 32) & ~v3);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[5] + 8));
  v6 = v4 + v1[6];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v1[8] + 8));
  v10 = (_QWORD *)(v4 + v1[9]);
  swift_bridgeObjectRelease(v10[1]);
  swift_bridgeObjectRelease(v10[3]);
  swift_bridgeObjectRelease(v10[9]);
  swift_bridgeObjectRelease(v10[11]);
  swift_bridgeObjectRelease(v10[13]);
  v11 = type metadata accessor for EpisodeMetadata(0);
  v12 = (char *)v10 + *(int *)(v11 + 44);
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = (char *)v10 + *(int *)(v11 + 60);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7))
    v9((uint64_t)v14, v7);
  v15 = *(_QWORD *)(v4 + v1[10] + 24);
  if ((unint64_t)(v15 - 1) >= 4)
    swift_bridgeObjectRelease(v15);
  v16 = (v20 + ((v3 + 32) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v16 + 8));
  swift_release(*(_QWORD *)(v0 + v17));

  return swift_deallocObject(v0, v18 + 8, v3 | 7);
}

uint64_t sub_100195734()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for DownloadJob(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100193980(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(void (**)(_QWORD))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v0 + ((((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_100195794(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for CDDownloadJob();
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v3), "fetchRequest");
  v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DownloadJob(0) + 20));
  v7 = *v5;
  v6 = v5[1];
  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v8 = sub_10003F544(&qword_1005559A0);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1003CA220;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v10 = sub_10003E198();
  *(_QWORD *)(v9 + 32) = 0x5565646F73697065;
  *(_QWORD *)(v9 + 40) = 0xEB00000000646975;
  *(_QWORD *)(v9 + 96) = &type metadata for String;
  *(_QWORD *)(v9 + 104) = v10;
  *(_QWORD *)(v9 + 64) = v10;
  *(_QWORD *)(v9 + 72) = v7;
  *(_QWORD *)(v9 + 80) = v6;
  swift_bridgeObjectRetain(v6);
  v11 = (void *)NSPredicate.init(format:_:)(0x4025203D204B25, 0xE700000000000000, v9);
  objc_msgSend(v4, "setPredicate:", v11);

  v12 = sub_10003F544(&qword_1005559F8);
  v13 = NSManagedObjectContext.fetch<A>(_:)(v4, v12);
  if (v1)
  {

    return;
  }
  v14 = v13;
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v16 = v13;
    else
      v16 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v17 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v14);
    if (v17)
      goto LABEL_5;
LABEL_14:
    swift_bridgeObjectRelease(v14);

    return;
  }
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_5:
  if ((v14 & 0xC000000000000001) != 0)
  {
    v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
  }
  else
  {
    if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v15 = *(_QWORD *)(v14 + 32);
    swift_unknownObjectRetain(v15);
  }
  swift_bridgeObjectRelease(v14);

  if (!swift_dynamicCastClass(v15, v3))
    swift_unknownObjectRelease(v15);
}

uint64_t sub_1001959BC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DownloadJob(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100195A08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = v1;
  v4 = type metadata accessor for EpisodePlayState(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = _swiftEmptyArrayStorage;
    if (!v8)
      return (uint64_t)v9;
    v19 = _swiftEmptyArrayStorage;
    result = sub_10017B084(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v17 = v2;
    v2 = 0;
    v9 = v19;
    while (v8 != v2)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v2, a1);
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 8 * v2 + 32);
        swift_retain();
      }
      KeyPath = swift_getKeyPath(&unk_1003CB960, v11);
      v18 = v12;
      swift_retain();
      swift_getAtKeyPath(&v18, KeyPath);
      swift_release(KeyPath);
      swift_release_n(v12, 2);
      v19 = v9;
      v15 = v9[2];
      v14 = v9[3];
      if (v15 >= v14 >> 1)
      {
        sub_10017B084(v14 > 1, v15 + 1, 1);
        v9 = v19;
      }
      ++v2;
      v9[2] = v15 + 1;
      sub_1001993EC((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15);
      if (v8 == v2)
        return (uint64_t)v9;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100195BE4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_10017AF94(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, "episodeStoreId");

      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
        sub_10017AF94(v8 > 1, v9 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v7;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100195D44(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10017B0B0(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      v10 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_10017B0B0(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      result[2] = v8 + 1;
      v9 = &result[3 * v8];
      v9[4] = v5;
      v9[5] = 0;
      *((_BYTE *)v9 + 48) = 0;
      --v2;
    }
    while (v2);
  }
  return result;
}

id sub_100195E10(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(void **)(v1 + 136);
  v3 = v2;
  if (v2 == (void *)1)
  {
    if ((static Podcasts.isBlueMoonEnabled()(a1) & 1) != 0)
      v3 = 0;
    else
      v3 = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
    v4 = *(void **)(v1 + 136);
    *(_QWORD *)(v1 + 136) = v3;
    v5 = v3;
    sub_1001994CC(v4);
  }
  sub_1001994DC(v2);
  return v3;
}

uint64_t sub_100195E94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    swift_retain();
    if ((sub_100367488() & 1) == 0)
      __asm { BR              X10 }
    swift_release(v1);
  }
  return 0;
}

uint64_t sub_100196068@<X0>(uint64_t result@<X0>, void *a2@<X1>, char a3@<W2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  NSString v11;
  id v12;
  unsigned __int8 v13;
  char v14;
  char *v15;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v7 = result;
    v15 = a4;
    swift_bridgeObjectRetain_n();
    v8 = a2;
    v9 = (_QWORD *)(v7 + 40);
    do
    {
      v10 = *v9;
      swift_bridgeObjectRetain(*v9);
      v11 = String._bridgeToObjectiveC()();
      v12 = objc_msgSend(v8, "episodeForUuid:", v11);
      swift_bridgeObjectRelease(v10);

      if (v12)
      {
        v13 = objc_msgSend(v12, "isVisuallyPlayed");

        if ((v13 & 1) != 0)
        {
          if ((a3 & 1) != 0)
            goto LABEL_8;
        }
        else if ((a3 & 1) == 0)
        {
LABEL_8:
          v14 = 1;
          goto LABEL_11;
        }
      }
      v9 += 2;
      --v4;
    }
    while (v4);
    v14 = 0;
LABEL_11:

    result = swift_bridgeObjectRelease_n(v7, 2);
    a4 = v15;
  }
  else
  {
    v14 = 0;
  }
  *a4 = v14;
  return result;
}

uint64_t sub_100196180(uint64_t (*a1)(uint64_t *), uint64_t a2, void (*a3)(uint64_t *), void (*a4)(uint64_t *))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  void (*v22)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t *);
  void (*v26)(uint64_t *__return_ptr, id *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *v4;
  v7 = v4[2];
  v25 = (uint64_t (*)(uint64_t *))v4[3];
  v26 = (void (*)(uint64_t *__return_ptr, id *))v4[1];
  v33 = v6;
  v8 = v4[4];
  v22 = (void (*)(uint64_t *__return_ptr, uint64_t *))v4[5];
  v9 = v4[6];
  if ((unint64_t)v6 >> 62)
    goto LABEL_20;
  v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  a3(&v33);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
LABEL_3:
  v24 = v9;
  v27 = v8;
  if (v10)
  {
    v11 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
      {
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v6);
      }
      else
      {
        if (v11 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          if (v6 < 0)
            v20 = v6;
          else
            v20 = v6 & 0xFFFFFFFFFFFFFF8;
          a3(&v33);
          swift_retain(v7);
          swift_retain(v8);
          swift_retain(v9);
          v10 = _CocoaArrayWrapper.endIndex.getter(v20);
          goto LABEL_3;
        }
        v12 = *(id *)(v6 + 8 * v11 + 32);
      }
      v13 = v12;
      v9 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_19;
      v8 = v10;
      v30 = v12;
      v14 = v7;
      v26(&v28, &v30);

      v15 = v28;
      v16 = v29;
      v31 = v28;
      v32 = v29;
      if ((v25(&v31) & 1) != 0)
      {
        v31 = v15;
        v32 = v16;
        v22(&v28, &v31);
        swift_bridgeObjectRelease(v16);
        v17 = v29;
        v31 = v28;
        v32 = v29;
        v18 = a1(&v31);
        swift_bridgeObjectRelease(v17);
        if (v5 || (v7 = v14, (v18 & 1) != 0))
        {
          a4(&v33);
          swift_release(v24);
          swift_release(v27);
          swift_release(v14);
          return 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v16);
        v7 = v14;
      }
      ++v11;
      v10 = v8;
    }
    while (v9 != v8);
  }
  a4(&v33);
  swift_release(v24);
  swift_release(v27);
  swift_release(v7);
  return 0;
}

uint64_t sub_1001963E8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v19;

  v5 = type metadata accessor for EpisodePlayState(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 32) & 1) == 0)
  {
    v9 = (_QWORD *)swift_allocObject(&unk_1004B1B40, 56, 7);
    v9[2] = sub_10019660C;
    v9[3] = 0;
    v9[4] = a1;
    v9[5] = sub_1001965E4;
    v9[6] = 0;
    v10 = *(_QWORD *)(v2 + 40);
    swift_bridgeObjectRetain_n(a1, 2);
    swift_retain();
    v11 = sub_100198DF8(a1, (void (*)(uint64_t *__return_ptr, char *))sub_100199464, (uint64_t)v9, v10);
    swift_release(v10);
    v12 = sub_100195A08(v11);
    swift_bridgeObjectRelease(v11);
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v14 = v12 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v15 = *(_QWORD *)(v6 + 72);
      swift_bridgeObjectRetain(v12);
      while (1)
      {
        sub_100199320(v14, (uint64_t)v8);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v5);
        if ((EnumCaseMultiPayload - 3) < 2 || EnumCaseMultiPayload == 1)
        {
          if ((a2 & 1) == 0)
            goto LABEL_18;
        }
        else if (EnumCaseMultiPayload == 2)
        {
          sub_1001780E4((uint64_t)v8);
          if ((a2 & 1) != 0)
          {
LABEL_18:
            swift_release(v9);
            swift_bridgeObjectRelease(a1);
            swift_bridgeObjectRelease_n(v12, 2);
            return 1;
          }
        }
        else
        {
          sub_100199364((uint64_t)v8);
        }
        v14 += v15;
        if (!--v13)
        {
          swift_release(v9);
          swift_bridgeObjectRelease(a1);
          swift_bridgeObjectRelease_n(v12, 2);
          return 0;
        }
      }
    }
    swift_release(v9);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v12);
  }
  return 0;
}

uint64_t sub_1001965E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EpisodeOffer.contentId.getter();
  *a1 = result;
  return result;
}

_QWORD *sub_10019660C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t sub_10019661C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;

  v5 = type metadata accessor for EpisodePlayState(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 32) & 1) != 0)
    return 0;
  v10 = sub_100195BE4(a1);
  v11 = v10;
  v12 = v10[2];
  if (v12)
  {
    v28 = v2;
    v29 = v6;
    v30 = v5;
    v31 = a2;
    v32 = _swiftEmptyArrayStorage;
    sub_10017B0DC(0, v12, 0);
    v13 = 0;
    v14 = v32;
    do
    {
      v15 = AdamID.init(rawValue:)(v11[v13 + 4] & ~((uint64_t)v11[v13 + 4] >> 63));
      v32 = v14;
      v17 = v14[2];
      v16 = v14[3];
      if (v17 >= v16 >> 1)
      {
        sub_10017B0DC(v16 > 1, v17 + 1, 1);
        v14 = v32;
      }
      ++v13;
      v14[2] = v17 + 1;
      v14[v17 + 4] = v15;
    }
    while (v12 != v13);
    swift_bridgeObjectRelease(v11);
    LOBYTE(a2) = v31;
    v6 = v29;
    v5 = v30;
    v2 = v28;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v14 = _swiftEmptyArrayStorage;
  }
  v18 = sub_100195D44((uint64_t)v14);
  swift_bridgeObjectRelease(v14);
  v19 = *(_QWORD *)(v2 + 40);
  v20 = v18;
  swift_retain();
  v21 = sub_100199218((uint64_t)v18);
  swift_release(v19);
  v22 = sub_100195A08((uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v22);
    return 0;
  }
  v24 = v22 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v25 = *(_QWORD *)(v6 + 72);
  swift_bridgeObjectRetain(v22);
  while (1)
  {
    sub_100199320(v24, (uint64_t)v8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v5);
    if ((EnumCaseMultiPayload - 3) < 2 || EnumCaseMultiPayload == 1)
    {
      if ((a2 & 1) == 0)
        break;
      goto LABEL_13;
    }
    if (EnumCaseMultiPayload != 2)
    {
      sub_100199364((uint64_t)v8);
      goto LABEL_13;
    }
    sub_1001780E4((uint64_t)v8);
    if ((a2 & 1) != 0)
      break;
LABEL_13:
    v24 += v25;
    if (!--v23)
    {
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease_n(v22, 2);
      return 0;
    }
  }
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease_n(v22, 2);
  return 1;
}

void sub_1001968B4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int EnumCaseMultiPayload;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  v5 = type metadata accessor for EpisodePlayState(0);
  v6 = __chkstk_darwin(v5);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 32) & 1) != 0)
    return;
  v50 = v7;
  v52 = v6;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v39 = a1;
    else
      v39 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v39);
    v51 = v2;
    if (v10)
      goto LABEL_4;
LABEL_36:
    swift_bridgeObjectRelease(a1);
    v12 = _swiftEmptyArrayStorage;
    v30 = _swiftEmptyArrayStorage[2];
    if (v30)
    {
LABEL_27:
      HIDWORD(v49) = a2;
      v53 = _swiftEmptyArrayStorage;
      sub_10017B0B0(0, v30, 0);
      v31 = 0;
      v32 = v53;
      v33 = v53[2];
      v34 = 3 * v33;
      do
      {
        v35 = v12[v31 + 4];
        v53 = v32;
        v36 = v32[3];
        v37 = v33 + v31 + 1;
        if (v33 + v31 >= v36 >> 1)
        {
          sub_10017B0B0(v36 > 1, v33 + v31 + 1, 1);
          v32 = v53;
        }
        ++v31;
        v32[2] = v37;
        v38 = &v32[v34];
        v38[4] = v35;
        v38[5] = 0;
        *((_BYTE *)v38 + 48) = 0;
        v34 += 3;
      }
      while (v30 != v31);
      swift_bridgeObjectRelease(v12);
      LOBYTE(a2) = BYTE4(v49);
      goto LABEL_38;
    }
LABEL_37:
    swift_bridgeObjectRelease(v12);
    v32 = _swiftEmptyArrayStorage;
LABEL_38:
    v40 = *(_QWORD *)(v51 + 40);
    swift_retain();
    v41 = sub_100199218((uint64_t)v32);
    swift_release(v40);
    v42 = sub_100195A08((uint64_t)v41);
    swift_bridgeObjectRelease(v41);
    v43 = *(_QWORD *)(v42 + 16);
    v44 = v52;
    if (!v43)
    {
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v42);
      return;
    }
    v45 = v42 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
    v46 = *(_QWORD *)(v50 + 72);
    swift_bridgeObjectRetain(v42);
    while (1)
    {
      sub_100199320(v45, (uint64_t)v9);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v44);
      if ((EnumCaseMultiPayload - 3) < 2 || EnumCaseMultiPayload == 1)
      {
        if ((a2 & 1) == 0)
          goto LABEL_51;
      }
      else if (EnumCaseMultiPayload == 2)
      {
        sub_1001780E4((uint64_t)v9);
        if ((a2 & 1) != 0)
        {
LABEL_51:
          swift_bridgeObjectRelease(v32);
          swift_bridgeObjectRelease_n(v42, 2);
          return;
        }
      }
      else
      {
        sub_100199364((uint64_t)v9);
      }
      v45 += v46;
      if (!--v43)
        goto LABEL_51;
    }
  }
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  v51 = v2;
  if (!v10)
    goto LABEL_36;
LABEL_4:
  if (v10 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v11 = 0;
      v12 = _swiftEmptyArrayStorage;
      do
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
        v14 = MPCPlayerResponseItem.podcastEpisode.getter();
        if (v14)
        {
          v15 = (void *)v14;
          v16 = MPModelObject.adamID.getter();
          v18 = v17;
          swift_unknownObjectRelease(v13);

          if ((v18 & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
              v12 = sub_10027B258(0, v12[2] + 1, 1, v12);
            v20 = v12[2];
            v19 = v12[3];
            if (v20 >= v19 >> 1)
              v12 = sub_10027B258((_QWORD *)(v19 > 1), v20 + 1, 1, v12);
            v12[2] = v20 + 1;
            v12[v20 + 4] = v16;
          }
        }
        else
        {
          swift_unknownObjectRelease(v13);
        }
        ++v11;
      }
      while (v10 != v11);
    }
    else
    {
      v21 = 0;
      v12 = _swiftEmptyArrayStorage;
      do
      {
        v22 = *(id *)(a1 + 8 * v21 + 32);
        v23 = MPCPlayerResponseItem.podcastEpisode.getter();
        if (v23)
        {
          v24 = (void *)v23;
          v25 = MPModelObject.adamID.getter();
          v27 = v26;

          if ((v27 & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
              v12 = sub_10027B258(0, v12[2] + 1, 1, v12);
            v29 = v12[2];
            v28 = v12[3];
            if (v29 >= v28 >> 1)
              v12 = sub_10027B258((_QWORD *)(v28 > 1), v29 + 1, 1, v12);
            v12[2] = v29 + 1;
            v12[v29 + 4] = v25;
          }
        }
        else
        {

        }
        ++v21;
      }
      while (v10 != v21);
    }
    swift_bridgeObjectRelease(a1);
    v30 = v12[2];
    if (v30)
      goto LABEL_27;
    goto LABEL_37;
  }
  __break(1u);
}

uint64_t sub_100196D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = type metadata accessor for EpisodeOffer(0);
  result = __chkstk_darwin(v1);
  if (*(_QWORD *)(v0 + 16))
    __asm { BR              X10 }
  return result;
}

void sub_1001976D0(_QWORD *a1, uint64_t a2)
{
  void *v2;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  double v12;
  uint64_t v13;

  v5 = objc_msgSend(v2, "currentItem");
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "episodeUuid");

    if (v7)
    {
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

      v11 = sub_10037B58C(v8, v10, a1);
      *(_QWORD *)&v12 = swift_bridgeObjectRelease(v10).n128_u64[0];
      if ((v11 & 1) != 0)
      {
        if (a2)
          v13 = 15;
        else
          v13 = 14;
        objc_msgSend(v2, "stopWithReason:initiator:", v13, 1, v12);
      }
    }
  }
}

void sub_1001977A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *), void (*a4)(uint64_t *), void (*a5)(uint64_t *))
{
  void *v5;
  void *v9;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  _QWORD v21[6];
  _QWORD v22[2];

  v9 = v5;
  v11 = objc_msgSend(v5, "currentItem");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "episodeUuid");

    if (v13)
    {
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v22[0] = v14;
      v22[1] = v16;
      __chkstk_darwin(v17);
      v21[2] = v22;
      v18 = sub_100196180(a3, (uint64_t)v21, a4, a5);
      *(_QWORD *)&v19 = swift_bridgeObjectRelease(v16).n128_u64[0];
      if ((v18 & 1) != 0)
      {
        if (a2)
          v20 = 15;
        else
          v20 = 14;
        objc_msgSend(v9, "stopWithReason:initiator:", v20, 1, v19);
      }
    }
  }
}

void sub_1001978C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  BOOL (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  _QWORD v21[3];
  BOOL (*v22)(uint64_t);
  uint64_t v23;
  uint64_t (*v24)@<X0>(_QWORD *@<X0>, _QWORD *@<X8>);
  uint64_t v25;

  v11 = *a1;
  sub_10000A520(a2 + 48, (uint64_t)v21);
  v12 = v22;
  v13 = v23;
  sub_10003A834(v21, (uint64_t)v22);
  dispatch thunk of LibraryActionControllerProtocol.mark(episodeOffers:as:completion:)(v11, a3, a4, a5, v12, v13);
  v14 = sub_10003D380(v21);
  v15 = os_feature_enabled_bluemoon(v14);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a2 + 128);
    swift_retain();
    v18 = dispatch thunk of PlaybackController.queueController.getter(v17);
    swift_release(v16);
    sub_100197A0C(a6, a3);
    swift_release(v18);
  }
  else
  {
    v19 = sub_100195E10(v15);
    if (v19)
    {
      v20 = v19;
      v21[0] = a6;
      v21[1] = sub_100197E2C;
      v21[2] = 0;
      v22 = sub_100198D0C;
      v23 = 0;
      v24 = sub_100198D1C;
      v25 = 0;
      swift_bridgeObjectRetain(a6);
      sub_1001977A4((uint64_t)v21, a3, sub_100198D20, (void (*)(uint64_t *))sub_100198D38, (void (*)(uint64_t *))sub_100198D60);
      swift_bridgeObjectRelease(a6);

    }
  }
}

void sub_100197A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = v2;
  v6 = ((uint64_t (*)(void))dispatch thunk of PlaybackController.QueueController.playbackController.getter)();
  if (!v6)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v7 = v6;
  v8 = (void *)dispatch thunk of PlaybackController.nowPlayingItem.getter(v6);
  v9 = swift_release(v7);
  if (v8)
  {
    MPModelObject.uuid.getter(v9);
    v11 = v10;

    if (v11)
    {
      swift_bridgeObjectRelease(v11);
      v50 = v3;
      v51 = a2;
      if ((unint64_t)a1 >> 62)
      {
        if (a1 < 0)
          v47 = a1;
        else
          v47 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v12 = _CocoaArrayWrapper.endIndex.getter(v47);
        if (v12)
          goto LABEL_6;
      }
      else
      {
        v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(a1);
        if (v12)
        {
LABEL_6:
          if (v12 >= 1)
          {
            v13 = 0;
            v14 = _swiftEmptyArrayStorage;
            do
            {
              if ((a1 & 0xC000000000000001) != 0)
                v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
              else
                v15 = *(id *)(a1 + 8 * v13 + 32);
              v16 = v15;
              v17 = objc_msgSend(v15, "episodeUuid", v50);
              if (v17)
              {
                v18 = v17;
                v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
                v21 = v20;

                if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
                  v14 = sub_10027AE00(0, v14[2] + 1, 1, v14);
                v23 = v14[2];
                v22 = v14[3];
                if (v23 >= v22 >> 1)
                  v14 = sub_10027AE00((_QWORD *)(v22 > 1), v23 + 1, 1, v14);
                v14[2] = v23 + 1;
                v24 = &v14[2 * v23];
                v24[4] = v19;
                v24[5] = v21;
              }
              else
              {

              }
              ++v13;
            }
            while (v12 != v13);
            goto LABEL_49;
          }
          __break(1u);
          goto LABEL_51;
        }
      }
      v14 = _swiftEmptyArrayStorage;
LABEL_49:
      v48 = swift_bridgeObjectRelease(a1);
      PlaybackController.QueueController.updatePlayerIfNeededForMarking(uuids:as:)(v14, a2, v48);
LABEL_57:
      swift_bridgeObjectRelease(v14);
      return;
    }
  }
  v25 = dispatch thunk of PlaybackController.QueueController.playbackController.getter(v9);
  if (!v25)
  {
LABEL_60:
    __break(1u);
    return;
  }
  v26 = v25;
  v27 = (void *)dispatch thunk of PlaybackController.nowPlayingItem.getter(v25);
  v28 = swift_release(v26);
  if (v27)
  {
    MPModelObject.adamID.getter(v28);
    v30 = v29;

    if ((v30 & 1) == 0)
    {
      v51 = a2;
      if (!((unint64_t)a1 >> 62))
      {
        v31 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(a1);
        if (!v31)
        {
LABEL_55:
          v46 = swift_bridgeObjectRelease(a1);
          v14 = _swiftEmptyArrayStorage;
LABEL_56:
          PlaybackController.QueueController.updatePlayerIfNeededForMarking(adamIDs:as:)(v14, v51, v46);
          goto LABEL_57;
        }
        goto LABEL_24;
      }
LABEL_51:
      if (a1 < 0)
        v49 = a1;
      else
        v49 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v31 = _CocoaArrayWrapper.endIndex.getter(v49);
      if (!v31)
        goto LABEL_55;
LABEL_24:
      if (v31 >= 1)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v32 = 0;
          v14 = _swiftEmptyArrayStorage;
          do
          {
            v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(v32, a1);
            v34 = IMPlayerItem.adamID.getter();
            v36 = v35;
            swift_unknownObjectRelease(v33);
            if ((v36 & 1) == 0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
                v14 = sub_10027B258(0, v14[2] + 1, 1, v14);
              v38 = v14[2];
              v37 = v14[3];
              if (v38 >= v37 >> 1)
                v14 = sub_10027B258((_QWORD *)(v37 > 1), v38 + 1, 1, v14);
              v14[2] = v38 + 1;
              v14[v38 + 4] = v34;
            }
            ++v32;
          }
          while (v31 != v32);
        }
        else
        {
          v39 = 0;
          v14 = _swiftEmptyArrayStorage;
          do
          {
            v40 = *(id *)(a1 + 8 * v39 + 32);
            v41 = IMPlayerItem.adamID.getter();
            v43 = v42;

            if ((v43 & 1) == 0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
                v14 = sub_10027B258(0, v14[2] + 1, 1, v14);
              v45 = v14[2];
              v44 = v14[3];
              if (v45 >= v44 >> 1)
                v14 = sub_10027B258((_QWORD *)(v44 > 1), v45 + 1, 1, v14);
              v14[2] = v45 + 1;
              v14[v45 + 4] = v41;
            }
            ++v39;
          }
          while (v31 != v39);
        }
        v46 = swift_bridgeObjectRelease(a1);
        goto LABEL_56;
      }
      __break(1u);
      goto LABEL_59;
    }
  }
}

void sub_100197E2C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "episodeUuid");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_100197E90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  BOOL (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  _QWORD v21[3];
  BOOL (*v22)(uint64_t);
  uint64_t v23;
  uint64_t (*v24)@<X0>(_QWORD *@<X0>, _QWORD *@<X8>);
  uint64_t v25;

  v11 = *a1;
  sub_10000A520(a2 + 48, (uint64_t)v21);
  v12 = v22;
  v13 = v23;
  sub_10003A834(v21, (uint64_t)v22);
  dispatch thunk of LibraryActionControllerProtocol.mark(episodeOffers:as:completion:)(v11, a3, a4, a5, v12, v13);
  v14 = sub_10003D380(v21);
  v15 = os_feature_enabled_bluemoon(v14);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a2 + 128);
    swift_retain();
    v18 = dispatch thunk of PlaybackController.queueController.getter(v17);
    swift_release(v16);
    PlaybackController.QueueController.updatePlayerIfNeededForMarking(playerItems:as:)(a6, a3);
    swift_release(v18);
  }
  else
  {
    v19 = sub_100195E10(v15);
    if (v19)
    {
      v20 = v19;
      v21[0] = a6;
      v21[1] = sub_100197FD8;
      v21[2] = 0;
      v22 = sub_1001994FC;
      v23 = 0;
      v24 = sub_100198D1C;
      v25 = 0;
      swift_bridgeObjectRetain(a6);
      sub_1001977A4((uint64_t)v21, a3, sub_100198D20, (void (*)(uint64_t *))sub_1001994F0, (void (*)(uint64_t *))sub_1001994F4);
      swift_bridgeObjectRelease(a6);

    }
  }
}

void sub_100197FD8(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = MPCPlayerResponseItem.podcastEpisode.getter();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = MPModelObject.uuid.getter();
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  *a1 = v4;
  a1[1] = v6;
}

uint64_t sub_100198030()
{
  uint64_t v0;
  char v1;
  objc_class *v2;
  unint64_t v3;
  unint64_t v4;
  NSBundle v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t countAndFlagsBits;
  unint64_t v11;

  v1 = *(_BYTE *)(v0 + 32);
  v2 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((v1 & 1) != 0)
  {
    v3 = 0xD00000000000001ALL;
    v11 = 0x8000000100431720;
    v4 = 0x8000000100431700;
    v5.super.isa = v2;
    v6 = 0;
    v7 = 0xE000000000000000;
    v8 = 0xD000000000000010;
  }
  else
  {
    v3 = 0xD000000000000018;
    v11 = 0xEE00646579616C50;
    v4 = 0x8000000100431740;
    v5.super.isa = v2;
    v6 = 0;
    v7 = 0xE000000000000000;
    v8 = 0x207361206B72614DLL;
  }
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, (Swift::String_optional)0, v5, *(Swift::String *)&v6, *(Swift::String *)&v8)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_100198138(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  objc_class *v6;
  unint64_t v7;
  unint64_t v8;
  NSBundle v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::String v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = v1;
  type metadata accessor for Theme(0);
  v4 = static Theme.appTintColor.getter();
  v5 = *(_BYTE *)(v2 + 32);
  v6 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((v5 & 1) != 0)
  {
    v7 = 0xD000000000000016;
    v17 = 0xE800000000000000;
    v8 = 0x80000001004316E0;
    v9.super.isa = v6;
    v10 = 0;
    v11 = 0xE000000000000000;
    v12 = 0x646579616C706E55;
  }
  else
  {
    v17 = 0xE000000000000000;
    v8 = 0x8000000100430790;
    v7 = 0xD000000000000014;
    v9.super.isa = v6;
    v10 = 0;
    v11 = 0xE000000000000000;
    v12 = 0;
  }
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v7, (Swift::String_optional)0, v9, *(Swift::String *)&v10, *(Swift::String *)&v12);

  v14 = *(_BYTE *)(v2 + 32) == 0;
  if (*(_BYTE *)(v2 + 32))
    v15 = 0xD000000000000015;
  else
    v15 = 0xD000000000000019;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v15;
  if (v14)
    v16 = 0x80000001004316C0;
  else
    v16 = 0x80000001004316A0;
  *(_QWORD *)(a1 + 16) = v16;
  *(Swift::String *)(a1 + 24) = v13;
}

unint64_t sub_10019828C()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 32))
    return 0xD000000000000015;
  else
    return 0xD000000000000019;
}

void sub_1001982CC(uint64_t a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  id v9;
  _QWORD v10[5];
  _QWORD *v11;

  v3 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v4 = objc_msgSend(v3, "mainOrPrivateContext");

  if (*(_BYTE *)(v1 + 32))
    v5 = 2;
  else
    v5 = 0;
  v6 = (_QWORD *)swift_allocObject(&unk_1004B1A00, 48, 7);
  v6[2] = a1;
  v6[3] = v4;
  v6[4] = v1;
  v6[5] = v5;
  v10[4] = sub_100198B48;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100027AF8;
  v10[3] = &unk_1004B1A18;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_bridgeObjectRetain(a1);
  v9 = v4;
  swift_retain();
  swift_release(v8);
  objc_msgSend(v9, "performBlock:", v7);
  _Block_release(v7);

}

void sub_1001983F4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD aBlock[5];
  _QWORD *v61;

  v50 = a4;
  v51 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  __chkstk_darwin(v6);
  v55 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  __chkstk_darwin(v8);
  v52 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for EpisodeOffer(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_100555C48);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v48 - v18;
  v20 = *(_QWORD *)(a1 + 16);
  v59 = a1;
  swift_bridgeObjectRetain_n(a1, 2);
  v21 = a2;
  v22 = 0;
  v58 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v22 == v20)
    {
      v23 = 1;
      v22 = v20;
      goto LABEL_6;
    }
    if (v22 >= v20)
      break;
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v19, v59+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v22, v10);
    v23 = 0;
    ++v22;
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v19, v23, 1, v10);
    sub_100198B54((uint64_t)v19, (uint64_t)v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v17, 1, v10) == 1)
    {

      swift_bridgeObjectRelease_n(v59, 2);
      sub_10002C5E0();
      v36 = (void *)static OS_dispatch_queue.main.getter(v35);
      v37 = (_QWORD *)swift_allocObject(&unk_1004B1A50, 40, 7);
      v38 = v58;
      v37[2] = v51;
      v37[3] = v38;
      v37[4] = v50;
      aBlock[4] = sub_100198BC8;
      v61 = v37;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100027AF8;
      aBlock[3] = &unk_1004B1A68;
      v39 = _Block_copy(aBlock);
      v40 = v61;
      swift_retain();
      v41 = swift_release(v40);
      v42 = v52;
      static DispatchQoS.unspecified.getter(v41);
      aBlock[0] = _swiftEmptyArrayStorage;
      v43 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v44 = sub_10003F544((uint64_t *)&unk_10055B200);
      v45 = sub_100026534();
      v46 = v55;
      v47 = v57;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v44, v45, v57, v43);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v42, v46, v39);
      _Block_release(v39);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v46, v47);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v54);
      return;
    }
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v17, v10);
    type metadata accessor for CoreDataFetcher(0);
    v24 = (void *)static CoreDataFetcher.unsafeFindEpisode(for:in:)(v13, v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (v24)
    {
      v25 = v24;
      v26 = objc_msgSend(v25, "uuid");
      if (v26)
      {
        v27 = v26;
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v48 = v29;
        v49 = v28;

        if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
          v58 = sub_10027AE00(0, v58[2] + 1, 1, v58);
        v31 = v58[2];
        v30 = v58[3];
        if (v31 >= v30 >> 1)
          v58 = sub_10027AE00((_QWORD *)(v30 > 1), v31 + 1, 1, v58);
        v32 = v58;
        v58[2] = v31 + 1;
        v33 = &v32[2 * v31];
        v34 = v48;
        v33[4] = v49;
        v33[5] = v34;
      }
      else
      {

      }
    }
  }
  __break(1u);
}

void sub_100198860(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  id v6;

  v5 = sub_100195E10(a1);
  if (v5)
  {
    v6 = v5;
    sub_1001976D0(a2, a3);

  }
}

uint64_t sub_1001988CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_10003D380((_QWORD *)(v0 + 48));
  sub_10003D380((_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 128));
  sub_1001994CC(*(id *)(v0 + 136));
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t type metadata accessor for MarkEpisodeContextAction()
{
  return objc_opt_self(_TtC8Podcasts24MarkEpisodeContextAction);
}

uint64_t storeEnumTagSinglePayload for MarkAsPlayedType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10019898C + 4 * byte_1003CB835[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001989C0 + 4 * byte_1003CB830[v4]))();
}

uint64_t sub_1001989C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001989C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001989D0);
  return result;
}

uint64_t sub_1001989DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001989E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001989E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001989F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MarkAsPlayedType()
{
  return &type metadata for MarkAsPlayedType;
}

unint64_t sub_100198A10()
{
  unint64_t result;

  result = qword_100555C40;
  if (!qword_100555C40)
  {
    result = swift_getWitnessTable(&unk_1003CB904, &type metadata for MarkAsPlayedType);
    atomic_store(result, (unint64_t *)&qword_100555C40);
  }
  return result;
}

uint64_t sub_100198A5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  unsigned int *v5;

  v3 = *(unsigned __int8 *)(v1 + 32);
  v4 = type metadata accessor for MetricsLabel(0);
  v5 = (unsigned int *)&enum case for MetricsLabel.markEpisodeUnplayed(_:);
  if (!v3)
    v5 = (unsigned int *)&enum case for MetricsLabel.markEpisodePlayed(_:);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(a1, *v5, v4);
}

uint64_t sub_100198AB0()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 32))
    return 13;
  else
    return 12;
}

uint64_t sub_100198AC8()
{
  return sub_100196D3C();
}

double sub_100198AD4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  sub_100198138((uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_100198B14()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100198B48()
{
  uint64_t v0;

  sub_1001983F4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100198B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100555C48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100198B9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100198BC8()
{
  uint64_t v0;

  sub_100198860(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100198BD4(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;

  v3 = result;
  if (a3 - 1 >= 3)
  {
    if (a3)
      return result;
    swift_bridgeObjectRetain(a2);
  }
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_100198C1C(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 < 3)
    return swift_bridgeObjectRelease(result);
  if (!a3)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100198C6C(uint64_t a1)
{
  return sub_100198CCC(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100197E90);
}

uint64_t sub_100198C84()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[4])
    swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100198CC0(uint64_t a1)
{
  return sub_100198CCC(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001978C4);
}

uint64_t sub_100198CCC(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_100198CE4()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

BOOL sub_100198D0C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

uint64_t sub_100198D20(uint64_t *a1)
{
  return sub_100198DA4(a1) & 1;
}

_QWORD *sub_100198D38(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

_QWORD *sub_100198D60(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_100198D88@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = a1[1];
  if (result)
  {
    *a2 = *a1;
    a2[1] = result;
    return swift_bridgeObjectRetain(result);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100198DA4(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = *a1;
  v5 = a1[1];
  v6 = v3[1];
  if (v4 == *v3 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0) & 1;
}

uint64_t sub_100198DF8(uint64_t a1, void (*a2)(uint64_t *__return_ptr, char *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  void (*v59)(uint64_t *__return_ptr, char *);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  _QWORD *v65;

  v59 = a2;
  v60 = a4;
  v61 = type metadata accessor for EpisodeOffer(0);
  v6 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v58 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_100555C48);
  v9 = __chkstk_darwin(v8);
  v52 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v53 = (char *)&v51 - v12;
  v13 = __chkstk_darwin(v11);
  v56 = (char *)&v51 - v14;
  __chkstk_darwin(v13);
  v55 = (char *)&v51 - v15;
  v16 = *(_QWORD *)(a1 + 16);
  v65 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v16);
  v57 = v16;
  v54 = a3;
  if (!v16)
  {
    swift_bridgeObjectRetain(a1);
    swift_retain();
    v18 = 0;
LABEL_11:
    v35 = v54;
    while (1)
    {
      v36 = (uint64_t)v56;
      if (v18 == v16)
      {
        v37 = 1;
        v18 = v16;
        v38 = (uint64_t)v55;
        v39 = v61;
      }
      else
      {
        v38 = (uint64_t)v55;
        if (v18 >= v16)
        {
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        v39 = v61;
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v55, a1+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v18, v61);
        v37 = 0;
        ++v18;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v38, v37, 1, v39);
      sub_100198B54(v38, v36);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v36, 1, v39) == 1)
      {
        swift_release(v35);
        swift_bridgeObjectRelease(a1);
        return (uint64_t)v65;
      }
      v40 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v58, v36, v39);
      v59(&v62, v40);
      v41 = v62;
      v42 = v63;
      v43 = v39;
      v44 = v64;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v40, v43);
      v45 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v41, v42, v44);
      v46 = sub_10003CA84(v41, v42, v44);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v46);
      v47 = v65[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v47);
      v48 = v47;
      v16 = v57;
      v49 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v45);
      specialized ContiguousArray._endMutation()(v49);
    }
  }
  swift_bridgeObjectRetain(a1);
  v17 = swift_retain();
  v18 = 0;
  v19 = v16;
  while (1)
  {
    if (v18 == v16)
    {
      v20 = 1;
      v18 = v16;
      v21 = v61;
      v22 = v53;
    }
    else
    {
      v22 = v53;
      if (v18 >= v16)
        goto LABEL_20;
      v21 = v61;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16))(v53, a1+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v18, v61, v17);
      v20 = 0;
      ++v18;
    }
    v23 = a1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(v22, v20, 1, v21, v17);
    v24 = (uint64_t)v22;
    v25 = v52;
    sub_100198B54(v24, v52);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v25, 1, v21) == 1)
      break;
    v26 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v58, v25, v21);
    v59(&v62, v26);
    v27 = v21;
    v28 = v62;
    v29 = v63;
    v30 = v64;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v26, v27);
    v31 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v28, v29, v30);
    v32 = sub_10003CA84(v28, v29, v30);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
    v33 = v65[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
    v34 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v31);
    specialized ContiguousArray._endMutation()(v34);
    --v19;
    a1 = v23;
    v16 = v57;
    if (!v19)
      goto LABEL_11;
  }
LABEL_21:
  result = swift_release(v60);
  __break(1u);
  return result;
}

_QWORD *sub_100199218(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    v3 = (unsigned __int8 *)(a1 + 48);
    do
    {
      v4 = *((_QWORD *)v3 - 2);
      v5 = *((_QWORD *)v3 - 1);
      v6 = *v3;
      v3 += 24;
      sub_10003CAD8(v4, v5, v6);
      v7 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v4, v5, v6);
      v8 = sub_10003CA84(v4, v5, v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized ContiguousArray._endMutation()(v10);
      --v2;
    }
    while (v2);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100199320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EpisodePlayState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100199364(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EpisodePlayState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001993A0()
{
  return sub_100026844(&qword_100555C50, (uint64_t (*)(uint64_t))&type metadata accessor for AnyEpisodePlayStateRule, (uint64_t)&protocol conformance descriptor for AnyEpisodePlayStateRule);
}

uint64_t sub_1001993CC()
{
  return dispatch thunk of EpisodeStateMachine.currentState.getter();
}

uint64_t sub_1001993EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EpisodePlayState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100199430()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

double sub_100199464@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void (*v3)(__int128 *__return_ptr, uint64_t *);
  char v4;
  double result;
  uint64_t v6;
  __int128 v7;
  char v8;

  v3 = *(void (**)(__int128 *__return_ptr, uint64_t *))(v1 + 16);
  (*(void (**)(uint64_t *__return_ptr))(v1 + 40))(&v6);
  v3(&v7, &v6);
  v4 = v8;
  result = *(double *)&v7;
  *(_OWORD *)a1 = v7;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_1001994C0@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_100196068(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_BYTE *)(v1 + 32), a1);
}

void sub_1001994CC(id a1)
{
  if (a1 != (id)1)

}

id sub_1001994DC(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_1001997EC()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  if (v1 > 5)
    return 2;
  else
    return qword_1003CBA08[v1];
}

uint64_t sub_100199830()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for LegacyDownload()
{
  return objc_opt_self(_TtC8Podcasts14LegacyDownload);
}

double sub_10019989C()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 1;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_BYTE *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  return result;
}

uint64_t sub_1001998C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t countAndFlagsBits;
  Swift::String v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for BookmarksControllerEpisodeData(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 16);
  if (!v5)
    return 0;
  swift_retain();
  sub_100367770();
  v6 = BookmarksController.notBookmarkedEpisodesCount(in:)(v4);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (v6 >= 2)
  {
    v14 = 0xED00007365646F73;
    v9 = 0x80000001004319F0;
    v8 = 0xD000000000000013;
  }
  else
  {
    v8 = 0xD000000000000015;
    v14 = 0xEC00000065646F73;
    v9 = 0x8000000100431A10;
  }
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v12 = 0x6970452065766153;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v8, (Swift::String_optional)0, (NSBundle)v7, v11, *(Swift::String *)(&v14 - 1))._countAndFlagsBits;

  swift_release(v5);
  return countAndFlagsBits;
}

uint64_t sub_100199A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(__n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v18[24];

  v1 = type metadata accessor for InteractionContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for BookmarksControllerEpisodeData(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(_QWORD *)(v0 + 16);
  if (v10)
  {
    swift_retain();
    sub_100367770();
    swift_beginAccess(v0 + 24, v18, 0, 0);
    v11 = *(_QWORD *)(v0 + 24);
    if (v11)
    {
      v12 = *(void (**)(__n128))(*(_QWORD *)v11 + 168);
      v13 = swift_retain();
      v12(v13);
      v14 = swift_release(v11);
      v15 = InteractionContext.view.getter(v14);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      if ((v15 - 5) > 2u)
        v16 = InteractionContext.EpisodeCellType.showsEpisodeControls.getter(v15) ^ 1;
      else
        LOBYTE(v16) = (((_BYTE)v15 - 5) & 1) == 0;
    }
    else
    {
      LOBYTE(v16) = 1;
    }
    BookmarksController.bookmarkEpisodes(with:showHUDConfirmation:)(v9, v16 & 1);
    swift_release(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_100199BE0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts28BookmarkEpisodeContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts28BookmarkEpisodeContextAction_bookmarksController));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100199C58()
{
  return type metadata accessor for BookmarkEpisodeContextAction(0);
}

uint64_t type metadata accessor for BookmarkEpisodeContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100555EA0;
  if (!qword_100555EA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookmarkEpisodeContextAction);
  return result;
}

uint64_t sub_100199C9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_1003CBAB8;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_1003CBAD0;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100199D48()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_100199D50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t sub_100199D7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts28BookmarkEpisodeContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100199DC0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts28BookmarkEpisodeContextAction_contextActionType);
}

uint64_t sub_100199DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v1 = type metadata accessor for BookmarksControllerEpisodeData(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 16);
  if (v5)
  {
    swift_retain();
    sub_100367770();
    v6 = BookmarksController.containsNotBookmarkedEpisodes(in:)(v4);
    swift_release(v5);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

double sub_100199E94@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  sub_100199ED0((uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

double sub_100199ED0@<D0>(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  double result;
  Swift::String v8;

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "systemOrangeColor");
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v8._object = (void *)0xE400000000000000;
  v4._object = (void *)0x80000001004319D0;
  v4._countAndFlagsBits = 0xD000000000000018;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 1702256979;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v8);

  *(_QWORD *)a1 = v2;
  result = 3.77673152e209;
  *(_OWORD *)(a1 + 8) = xmmword_1003CBA40;
  *(Swift::String *)(a1 + 24) = v6;
  return result;
}

unint64_t sub_100199FB0()
{
  unint64_t result;

  result = qword_100555FF0;
  if (!qword_100555FF0)
  {
    result = swift_getWitnessTable(&unk_1003CBB48, &type metadata for PlayPauseWidgetIntent);
    atomic_store(result, (unint64_t *)&qword_100555FF0);
  }
  return result;
}

unint64_t sub_100199FF8()
{
  unint64_t result;

  result = qword_100555FF8;
  if (!qword_100555FF8)
  {
    result = swift_getWitnessTable(&unk_1003CBB70, &type metadata for PlayPauseWidgetIntent);
    atomic_store(result, (unint64_t *)&qword_100555FF8);
  }
  return result;
}

unint64_t sub_10019A040()
{
  unint64_t result;

  result = qword_100556000;
  if (!qword_100556000)
  {
    result = swift_getWitnessTable(&unk_1003CBC00, &type metadata for PlayPauseWidgetIntent);
    atomic_store(result, (unint64_t *)&qword_100556000);
  }
  return result;
}

unint64_t sub_10019A088()
{
  unint64_t result;

  result = qword_100556008;
  if (!qword_100556008)
  {
    result = swift_getWitnessTable(&unk_1003CBC28, &type metadata for PlayPauseWidgetIntent);
    atomic_store(result, (unint64_t *)&qword_100556008);
  }
  return result;
}

uint64_t sub_10019A0CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100468B94, 1);
}

uint64_t sub_10019A0DC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100199FF8();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10019A11C()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100047DD0(v0, qword_100572D80);
  sub_100047DA4(v0, (uint64_t)qword_100572D80);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000011, 0x8000000100431A80);
}

uint64_t sub_10019A17C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;

  v2[49] = a1;
  v2[50] = v1;
  v3 = sub_10003F544(&qword_100556068);
  v2[51] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[52] = v4;
  v2[53] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_100556070);
  v2[54] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[55] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[56] = swift_task_alloc(v7);
  v2[57] = swift_task_alloc(v7);
  v8 = sub_10003F544(&qword_1005564A0);
  v2[58] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v2[59] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[60] = v10;
  v2[61] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_100556078);
  v2[62] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[63] = v12;
  v2[64] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Publishers.PrefetchStrategy(0);
  v2[65] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[66] = v14;
  v2[67] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544(&qword_100556080);
  v2[68] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[69] = v16;
  v2[70] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544(&qword_100556088);
  v2[71] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v2[72] = v18;
  v2[73] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544(&qword_100556090);
  v2[74] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v2[75] = v20;
  v2[76] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ActionMetricsBehavior(0);
  v2[77] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v2[78] = v22;
  v2[79] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ActionMetrics(0);
  v2[80] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v23 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10003F544(&qword_10055B790);
  v2[81] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for EpisodePlayState(0);
  v2[82] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Logger(0);
  v2[83] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v2[84] = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[85] = swift_task_alloc(v28);
  v2[86] = swift_task_alloc(v28);
  v2[87] = swift_task_alloc(v28);
  v2[88] = swift_task_alloc(v28);
  v2[89] = swift_task_alloc(v28);
  v29 = type metadata accessor for MainActor(0);
  v2[90] = v29;
  v2[91] = static MainActor.shared.getter(v30);
  v31 = dispatch thunk of Actor.unownedExecutor.getter(v29, &protocol witness table for MainActor);
  v2[92] = v31;
  v2[93] = v32;
  return swift_task_switch(sub_10019A464, v31, v32);
}

uint64_t sub_10019A464(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *log;
  uint64_t v26;

  v2 = (uint64_t *)v1[50];
  static Logger.widget.getter(a1);
  v3 = *v2;
  v1[94] = *v2;
  v4 = v2[1];
  v1[95] = v4;
  v5 = v2[2];
  v1[96] = v5;
  v6 = v2[3];
  v1[97] = v6;
  v7 = v2[4];
  v1[98] = v7;
  swift_retain_n(v3, 2);
  swift_retain_n(v4, 2);
  swift_retain_n(v5, 2);
  swift_retain_n(v6, 2);
  v8 = swift_retain_n(v7, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  log = v9;
  if (os_log_type_enabled(v9, v10))
  {
    v22 = v1[84];
    v23 = v1[83];
    v24 = v1[89];
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v26 = v21;
    *(_DWORD *)v11 = 136446210;
    IntentParameter.wrappedValue.getter(v1 + 26);
    v12 = v1[27];
    v1[42] = sub_10003D274(v1[26], v12, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 42, v1 + 43, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v12);
    swift_release_n(v3, 2);
    swift_release_n(v4, 2);
    swift_release_n(v5, 2);
    swift_release_n(v6, 2);
    swift_release(v7);
    swift_release(v7);
    _os_log_impl((void *)&_mh_execute_header, log, v10, "PlayPauseWidgetIntent: Toggling %{public}s", v11, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8);
    v14 = v13(v24, v23);
  }
  else
  {
    v15 = v1[89];
    v16 = v1[84];
    v17 = v1[83];
    swift_release_n(v3, 2);
    swift_release_n(v4, 2);
    swift_release_n(v5, 2);
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);

    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    v14 = v13(v15, v17);
  }
  v1[99] = v13;
  AppDependency.wrappedValue.getter(v14);
  v1[100] = v1[36];
  v18 = sub_10003F544(&qword_100553720);
  v19 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v1[101] = v19;
  *v19 = v1;
  v19[1] = sub_10019A758;
  return BaseObjectGraph.inject<A>(_:)(v1 + 46, v18, v18);
}

uint64_t sub_10019A758()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 808);
  *(_QWORD *)(*(_QWORD *)v1 + 816) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[93];
    v5 = v2[92];
    v6 = sub_10019BFDC;
  }
  else
  {
    swift_release(v2[100]);
    v4 = v2[93];
    v5 = v2[92];
    v6 = sub_10019A7CC;
  }
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_10019A7CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  _BOOL4 v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v94;
  int v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_log_t log;
  os_log_t loga;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, os_log_t);
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  os_log_type_t v127;
  uint64_t v128;
  uint64_t v129[2];

  v118 = *(_QWORD *)(v0 + 784);
  v1 = *(_QWORD *)(v0 + 776);
  v2 = *(_QWORD *)(v0 + 768);
  v3 = *(_QWORD *)(v0 + 760);
  v4 = *(_QWORD *)(v0 + 752);
  v5 = *(_QWORD *)(v0 + 656);
  v6 = *(_QWORD *)(v0 + 368);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 144));
  v7 = *(_QWORD *)(v0 + 152);
  v8 = EpisodeStateController.stateMachine(for:)(*(_QWORD *)(v0 + 144), v7);
  *(_QWORD *)(v0 + 824) = v8;
  swift_bridgeObjectRelease(v7);
  v9 = swift_release(v6);
  v124 = v8;
  v10 = dispatch thunk of EpisodeStateMachine.currentState.getter(v9);
  v11 = EpisodePlayState.isEpisodePlaying.getter(v10);
  *(_BYTE *)(v0 + 82) = v11 & 1;
  v12 = sub_100199364(v5);
  static Logger.widget.getter(v12);
  swift_retain_n(v4, 2);
  swift_retain_n(v3, 2);
  swift_retain_n(v2, 2);
  swift_retain_n(v1, 2);
  v13 = swift_retain_n(v118, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  v96 = v11;
  if (os_log_type_enabled(v14, v15))
  {
    v106 = *(_QWORD *)(v0 + 776);
    v109 = *(_QWORD *)(v0 + 784);
    v101 = *(_QWORD *)(v0 + 760);
    v104 = *(_QWORD *)(v0 + 768);
    v16 = *(_QWORD *)(v0 + 752);
    v115 = *(_QWORD *)(v0 + 704);
    v119 = *(void (**)(uint64_t, os_log_t))(v0 + 792);
    log = *(os_log_t *)(v0 + 664);
    v17 = v11;
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v129[0] = v19;
    *(_DWORD *)v18 = 136315394;
    if ((v17 & 1) != 0)
      v20 = 0xD000000000000010;
    else
      v20 = 0x6974736575716552;
    if ((v17 & 1) != 0)
      v21 = 0x8000000100431A60;
    else
      v21 = 0xEF79616C5020676ELL;
    *(_QWORD *)(v0 + 360) = sub_10003D274(v20, v21, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v18 + 12) = 2082;
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 224));
    v22 = *(_QWORD *)(v0 + 232);
    *(_QWORD *)(v0 + 376) = sub_10003D274(*(_QWORD *)(v0 + 224), v22, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease(v22);
    swift_release_n(v16, 2);
    swift_release_n(v101, 2);
    swift_release_n(v104, 2);
    swift_release_n(v106, 2);
    swift_release(v109);
    swift_release(v109);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "PlayPauseWidgetIntent: %s %{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v119(v115, log);
  }
  else
  {
    v23 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
    v24 = *(_QWORD *)(v0 + 784);
    v25 = *(_QWORD *)(v0 + 776);
    v26 = *(_QWORD *)(v0 + 768);
    v27 = *(_QWORD *)(v0 + 760);
    v28 = *(_QWORD *)(v0 + 704);
    v29 = *(_QWORD *)(v0 + 664);
    swift_release_n(*(_QWORD *)(v0 + 752), 2);
    swift_release_n(v27, 2);
    swift_release_n(v26, 2);
    swift_release_n(v25, 2);
    swift_release_n(v24, 2);

    v23(v28, v29);
  }
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 160));
  v30 = *(_QWORD *)(v0 + 160);
  v31 = *(NSObject **)(v0 + 168);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 176));
  v32 = *(_QWORD *)(v0 + 184);
  v33 = *(_QWORD *)(v0 + 816);
  if (v32)
  {
    v34 = *(_QWORD *)(v0 + 176);
    v35 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 184));
    v36 = static AdamID.parse(_:)(v34, v32, v35);
    v37 = swift_bridgeObjectRelease(v32);
    if (v33)
    {
      v97 = static AdamID.empty.getter(v37);
      swift_errorRelease(v33);
    }
    else
    {
      v97 = v36;
    }
    swift_bridgeObjectRelease(v32);
    v33 = 0;
  }
  else
  {
    v97 = 0;
  }
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 192));
  v38 = *(_QWORD *)(v0 + 200);
  v120 = (_QWORD *)(v0 + 88);
  loga = v31;
  if (v38)
  {
    v39 = *(_QWORD *)(v0 + 192);
    v40 = swift_bridgeObjectRetain(v38);
    v41 = static AdamID.parse(_:)(v39, v38, v40);
    v42 = swift_bridgeObjectRelease(v38);
    if (v33)
    {
      v41 = static AdamID.empty.getter(v42);
      swift_errorRelease(v33);
    }
    swift_bridgeObjectRelease(v38);
  }
  else
  {
    v41 = 0;
  }
  v126 = *(_QWORD *)(v0 + 784);
  v43 = v38 == 0;
  v110 = *(_QWORD *)(v0 + 760);
  v111 = *(_QWORD *)(v0 + 768);
  v107 = *(_QWORD *)(v0 + 752);
  v102 = *(_QWORD *)(v0 + 776);
  v44 = *(_QWORD *)(v0 + 648);
  v45 = *(_QWORD *)(v0 + 640);
  v46 = *(_QWORD *)(v0 + 632);
  v47 = *(_QWORD *)(v0 + 624);
  v99 = *(_QWORD *)(v0 + 616);
  *(_QWORD *)(v0 + 16) = 1;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 80) = 5;
  EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(v0 + 16, 17, 3, 0, 0, 0);
  v48 = type metadata accessor for EpisodeListSettings(0);
  v49 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v44, 0, 1, v48);
  static ActionMetrics.notInstrumented.getter(v49);
  v50 = type metadata accessor for LibraryPlayPauseAction(0);
  swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  BYTE2(v95) = 0;
  LOWORD(v95) = 257;
  BYTE2(v94) = 1;
  LOWORD(v94) = 1;
  v51 = LibraryPlayPauseAction.init(episodeUuid:episodeAdamId:channelAdamId:settings:showPlayerIfPlaying:forcePlay:isSmartPlayButton:isWidgetPlayButton:timestamp:waitForEngine:shouldPreventQueueing:actionMetrics:)(v30, loga, v97, v32 == 0, v41, v43, v44, 0, v94, 0, v95, v45);
  *(_QWORD *)(v0 + 832) = v51;
  AppDependency.wrappedValue.getter(v51);
  v52 = *(_QWORD *)(v0 + 384);
  *(_QWORD *)(v0 + 112) = v50;
  *(_QWORD *)(v0 + 120) = sub_100026844(&qword_100556098, (uint64_t (*)(uint64_t))&type metadata accessor for LibraryPlayPauseAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v0 + 88) = v51;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v47 + 104))(v46, enum case for ActionMetricsBehavior.notProcessed(_:), v99);
  swift_retain();
  AppDependency.wrappedValue.getter(v53);
  v54 = *(_QWORD *)(v0 + 280);
  v55 = type metadata accessor for FlowActionRunner(0);
  v56 = sub_100026844(&qword_1005560A0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowActionRunner, (uint64_t)&protocol conformance descriptor for FlowActionRunner);
  v57 = ActionRunner.perform(_:withMetrics:asPartOf:)(v120, v46, v54, v55, v56);
  swift_release(v54);
  swift_release(v52);
  swift_release(v57);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v99);
  v58 = sub_10003D380(v120);
  static Logger.widget.getter(v58);
  swift_retain_n(v107, 2);
  swift_retain_n(v110, 2);
  swift_retain_n(v111, 2);
  swift_retain_n(v102, 2);
  v59 = swift_retain_n(v126, 2);
  v60 = Logger.logObject.getter(v59);
  v127 = static os_log_type_t.default.getter();
  v61 = os_log_type_enabled(v60, v127);
  v62 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
  v63 = *(_QWORD *)(v0 + 784);
  v64 = *(_QWORD *)(v0 + 776);
  v65 = *(_QWORD *)(v0 + 768);
  v66 = *(_QWORD *)(v0 + 760);
  v67 = *(_QWORD *)(v0 + 752);
  v68 = *(_QWORD *)(v0 + 696);
  v69 = *(_QWORD *)(v0 + 664);
  if (v61)
  {
    v125 = *(_QWORD *)(v0 + 664);
    v122 = *(_QWORD *)(v0 + 696);
    v70 = swift_slowAlloc(22, -1);
    v116 = swift_slowAlloc(64, -1);
    v129[0] = v116;
    *(_DWORD *)v70 = 136446466;
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 240));
    v71 = *(_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 344) = sub_10003D274(*(_QWORD *)(v0 + 240), v71, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v70 + 4, v70 + 12);
    swift_bridgeObjectRelease(v71);
    swift_release_n(v67, 2);
    swift_release_n(v66, 2);
    swift_release_n(v65, 2);
    swift_release_n(v64, 2);
    swift_release(v63);
    swift_release(v63);
    *(_WORD *)(v70 + 12) = 2080;
    if ((v96 & 1) != 0)
      v72 = 0x6573756170;
    else
      v72 = 0x6C70207472617473;
    if ((v96 & 1) != 0)
      v73 = 0xE500000000000000;
    else
      v73 = 0xED0000676E697961;
    *(_QWORD *)(v0 + 352) = sub_10003D274(v72, v73, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v70 + 14, v70 + 22);
    swift_bridgeObjectRelease(v73);
    _os_log_impl((void *)&_mh_execute_header, v60, v127, "PlayPauseWidgetIntent: Waiting for %{public}s to %s", (uint8_t *)v70, 0x16u);
    swift_arrayDestroy(v116, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v116, -1, -1);
    swift_slowDealloc(v70, -1, -1);

    v62(v122, v125);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 752), 2);
    swift_release_n(v66, 2);
    swift_release_n(v65, 2);
    swift_release_n(v64, 2);
    swift_release_n(v63, 2);

    v62(v68, v69);
  }
  v128 = *(_QWORD *)(v0 + 592);
  v112 = *(_QWORD *)(v0 + 568);
  v74 = *(_QWORD *)(v0 + 560);
  v100 = *(_QWORD *)(v0 + 584);
  v103 = *(_QWORD *)(v0 + 552);
  v98 = *(_QWORD *)(v0 + 544);
  v75 = *(_QWORD *)(v0 + 536);
  v76 = *(_QWORD *)(v0 + 528);
  v77 = *(_QWORD *)(v0 + 520);
  v78 = *(_QWORD *)(v0 + 504);
  v79 = *(_QWORD *)(v0 + 512);
  v80 = *(_QWORD *)(v0 + 496);
  v117 = *(_QWORD *)(v0 + 480);
  v121 = *(_QWORD *)(v0 + 472);
  v123 = *(_QWORD *)(v0 + 576);
  v105 = *(_QWORD *)(v0 + 488);
  v108 = *(_QWORD *)(v0 + 464);
  v81 = sub_10003F544(&qword_1005560A8);
  v82 = sub_10002F9C8(&qword_1005560B0, &qword_1005560A8, (uint64_t)&protocol conformance descriptor for EpisodeStateMachine<A, B>);
  *(_QWORD *)(v0 + 312) = ObservableObject<>.objectWillChange.getter(v81, v82);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v76 + 104))(v75, enum case for Publishers.PrefetchStrategy.byRequest(_:), v77);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v78 + 104))(v79, enum case for Publishers.BufferingStrategy.dropOldest<A>(_:), v80);
  v83 = type metadata accessor for ObservableObjectPublisher(0);
  Publisher.buffer(size:prefetch:whenFull:)(1, v75, v79, v83, &protocol witness table for ObservableObjectPublisher);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v79, v80);
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
  swift_release(*(_QWORD *)(v0 + 312));
  v84 = swift_allocObject(&unk_1004B1D48, 32, 7);
  *(_QWORD *)(v84 + 16) = sub_10019CA2C;
  *(_QWORD *)(v84 + 24) = v124;
  v85 = sub_10002F9C8(&qword_1005560B8, &qword_100556080, (uint64_t)&protocol conformance descriptor for Publishers.Buffer<A>);
  swift_retain();
  Publisher.map<A>(_:)(sub_10019CA58, v84, v98, &type metadata for Bool, v85);
  swift_release(v84);
  v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v103 + 8))(v74, v98);
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v86, 60.0);
  v87 = sub_10002C5E0();
  *(_QWORD *)(v0 + 272) = static OS_dispatch_queue.main.getter(v88);
  v89 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v108, 1, 1, v89);
  v90 = sub_10002F9C8(&qword_1005560C0, &qword_100556088, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v91 = sub_100026844((unint64_t *)&qword_1005551A0, (uint64_t (*)(uint64_t))sub_10002C5E0, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.timeout<A>(_:scheduler:options:customError:)(v105, v0 + 272, v108, 0, 0, v112, v87, v90, v91);
  sub_100048A04(v108);

  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v105, v121);
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v100, v112);
  v92 = sub_10002F9C8(&qword_1005560C8, &qword_100556090, (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  Publisher<>.values.getter(v128, v92);
  return swift_task_switch(sub_10019B414, 0, 0);
}

uint64_t sub_10019B414()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[54];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[55] + 16))(v0[56], v0[57], v1);
  v2 = sub_10002F9C8(&qword_1005560D0, &qword_100556070, (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v3 = sub_10002F9C8(&qword_1005560D8, &qword_100556068, (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[105] = v4;
  *v4 = v0;
  v4[1] = sub_10019B4E4;
  return dispatch thunk of AsyncIteratorProtocol.next()((char *)v0 + 81, v0[51], v3);
}

uint64_t sub_10019B4E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 840));
  if (v0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v2[52] + 8))(v2[53], v2[51]);
  else
    return swift_task_switch(sub_10019B554, 0, 0);
}

uint64_t sub_10019B554(__n128 a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned __int8 *)(v1 + 81);
  *(_BYTE *)(v1 + 83) = v2;
  if (v2 == 2)
  {
    v3 = *(_QWORD *)(v1 + 456);
    v4 = *(_QWORD *)(v1 + 432);
    v5 = *(_QWORD *)(v1 + 440);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 416) + 8))(*(_QWORD *)(v1 + 424), *(_QWORD *)(v1 + 408));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    v6 = *(_QWORD *)(v1 + 744);
    v7 = *(_QWORD *)(v1 + 736);
    v8 = sub_10019B734;
  }
  else
  {
    v9 = *(_QWORD *)(v1 + 720);
    *(_QWORD *)(v1 + 848) = static MainActor.shared.getter(a1);
    v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
    v12 = v11;
    v8 = sub_10019B60C;
    v7 = v10;
    v6 = v12;
  }
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_10019B60C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 848));
  return swift_task_switch(sub_10019B648, 0, 0);
}

uint64_t sub_10019B648()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(v0 + 82) == ((*(_BYTE *)(v0 + 83) & 1) == 0))
  {
    v4 = *(_QWORD *)(v0 + 456);
    v5 = *(_QWORD *)(v0 + 432);
    v6 = *(_QWORD *)(v0 + 440);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 416) + 8))(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 408));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    return swift_task_switch(sub_10019BB88, *(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 744));
  }
  else
  {
    v1 = sub_10002F9C8(&qword_1005560D8, &qword_100556068, (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
    v2 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v0 + 840) = v2;
    *v2 = v0;
    v2[1] = sub_10019B4E4;
    return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 81, *(_QWORD *)(v0 + 408), v1);
  }
}

uint64_t sub_10019B734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 784);
  v2 = *(_QWORD *)(v0 + 776);
  v3 = *(_QWORD *)(v0 + 768);
  v4 = *(_QWORD *)(v0 + 760);
  v5 = *(_QWORD *)(v0 + 752);
  v6 = swift_release(*(_QWORD *)(v0 + 728));
  static Logger.widget.getter(v6);
  swift_retain_n(v5, 2);
  swift_retain_n(v4, 2);
  swift_retain_n(v3, 2);
  swift_retain_n(v2, 2);
  v7 = swift_retain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v48 = *(unsigned __int8 *)(v0 + 82);
    v54 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 792);
    v10 = *(_QWORD *)(v0 + 784);
    v44 = *(_QWORD *)(v0 + 768);
    v46 = *(_QWORD *)(v0 + 776);
    v42 = *(_QWORD *)(v0 + 760);
    v11 = *(_QWORD *)(v0 + 752);
    v50 = *(_QWORD *)(v0 + 664);
    v52 = *(_QWORD *)(v0 + 688);
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v56 = v13;
    *(_DWORD *)v12 = 136446466;
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 128));
    v14 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v0 + 296) = sub_10003D274(*(_QWORD *)(v0 + 128), v14, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v14);
    swift_release_n(v11, 2);
    swift_release_n(v42, 2);
    swift_release_n(v44, 2);
    swift_release_n(v46, 2);
    swift_release(v10);
    swift_release(v10);
    *(_WORD *)(v12 + 12) = 2080;
    if (v48)
      v15 = 0x6573756170;
    else
      v15 = 0x6C70207472617473;
    if (v48)
      v16 = 0xE500000000000000;
    else
      v16 = 0xED0000676E697961;
    *(_QWORD *)(v0 + 304) = sub_10003D274(v15, v16, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "PlayPauseWidgetIntent: timed out waiting for %{public}s to %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v17 = v54(v52, v50);
  }
  else
  {
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 792);
    v19 = *(_QWORD *)(v0 + 784);
    v20 = *(_QWORD *)(v0 + 776);
    v21 = *(_QWORD *)(v0 + 768);
    v22 = *(_QWORD *)(v0 + 760);
    v23 = *(_QWORD *)(v0 + 688);
    v24 = *(_QWORD *)(v0 + 664);
    swift_release_n(*(_QWORD *)(v0 + 752), 2);
    swift_release_n(v22, 2);
    swift_release_n(v21, 2);
    swift_release_n(v20, 2);
    swift_release_n(v19, 2);

    v17 = v18(v23, v24);
  }
  v25 = *(_QWORD *)(v0 + 832);
  v26 = *(_QWORD *)(v0 + 824);
  v27 = *(_QWORD *)(v0 + 712);
  v28 = *(_QWORD *)(v0 + 704);
  v29 = *(_QWORD *)(v0 + 696);
  v30 = *(_QWORD *)(v0 + 688);
  v35 = *(_QWORD *)(v0 + 680);
  v36 = *(_QWORD *)(v0 + 656);
  v37 = *(_QWORD *)(v0 + 648);
  v38 = *(_QWORD *)(v0 + 640);
  v31 = *(_QWORD *)(v0 + 608);
  v32 = *(_QWORD *)(v0 + 600);
  v33 = *(_QWORD *)(v0 + 592);
  v39 = *(_QWORD *)(v0 + 632);
  v40 = *(_QWORD *)(v0 + 584);
  v41 = *(_QWORD *)(v0 + 560);
  v43 = *(_QWORD *)(v0 + 536);
  v45 = *(_QWORD *)(v0 + 512);
  v47 = *(_QWORD *)(v0 + 488);
  v49 = *(_QWORD *)(v0 + 464);
  v51 = *(_QWORD *)(v0 + 456);
  v53 = *(_QWORD *)(v0 + 448);
  v55 = *(_QWORD *)(v0 + 424);
  static IntentResult.result<>()(v17);
  swift_release(v26);
  swift_release(v25);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v31);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019BB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 784);
  v2 = *(_QWORD *)(v0 + 776);
  v3 = *(_QWORD *)(v0 + 768);
  v4 = *(_QWORD *)(v0 + 760);
  v5 = *(_QWORD *)(v0 + 752);
  v6 = swift_release(*(_QWORD *)(v0 + 728));
  static Logger.widget.getter(v6);
  swift_retain_n(v5, 2);
  swift_retain_n(v4, 2);
  swift_retain_n(v3, 2);
  swift_retain_n(v2, 2);
  v7 = swift_retain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v48 = *(unsigned __int8 *)(v0 + 82);
    v54 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 792);
    v10 = *(_QWORD *)(v0 + 784);
    v44 = *(_QWORD *)(v0 + 768);
    v46 = *(_QWORD *)(v0 + 776);
    v42 = *(_QWORD *)(v0 + 760);
    v11 = *(_QWORD *)(v0 + 752);
    v50 = *(_QWORD *)(v0 + 664);
    v52 = *(_QWORD *)(v0 + 680);
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v56 = v13;
    *(_DWORD *)v12 = 136446466;
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 256));
    v14 = *(_QWORD *)(v0 + 264);
    *(_QWORD *)(v0 + 320) = sub_10003D274(*(_QWORD *)(v0 + 256), v14, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v14);
    swift_release_n(v11, 2);
    swift_release_n(v42, 2);
    swift_release_n(v44, 2);
    swift_release_n(v46, 2);
    swift_release(v10);
    swift_release(v10);
    *(_WORD *)(v12 + 12) = 2080;
    if (v48)
      v15 = 0x646573756170;
    else
      v15 = 0x2064657472617473;
    if (v48)
      v16 = 0xE600000000000000;
    else
      v16 = 0xEF676E6979616C70;
    *(_QWORD *)(v0 + 328) = sub_10003D274(v15, v16, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "PlayPauseWidgetIntent: %{public}s %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v17 = v54(v52, v50);
  }
  else
  {
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 792);
    v19 = *(_QWORD *)(v0 + 784);
    v20 = *(_QWORD *)(v0 + 776);
    v21 = *(_QWORD *)(v0 + 768);
    v22 = *(_QWORD *)(v0 + 760);
    v23 = *(_QWORD *)(v0 + 680);
    v24 = *(_QWORD *)(v0 + 664);
    swift_release_n(*(_QWORD *)(v0 + 752), 2);
    swift_release_n(v22, 2);
    swift_release_n(v21, 2);
    swift_release_n(v20, 2);
    swift_release_n(v19, 2);

    v17 = v18(v23, v24);
  }
  v25 = *(_QWORD *)(v0 + 832);
  v26 = *(_QWORD *)(v0 + 824);
  v27 = *(_QWORD *)(v0 + 712);
  v28 = *(_QWORD *)(v0 + 704);
  v29 = *(_QWORD *)(v0 + 696);
  v30 = *(_QWORD *)(v0 + 688);
  v35 = *(_QWORD *)(v0 + 680);
  v36 = *(_QWORD *)(v0 + 656);
  v37 = *(_QWORD *)(v0 + 648);
  v38 = *(_QWORD *)(v0 + 640);
  v31 = *(_QWORD *)(v0 + 608);
  v32 = *(_QWORD *)(v0 + 600);
  v33 = *(_QWORD *)(v0 + 592);
  v39 = *(_QWORD *)(v0 + 632);
  v40 = *(_QWORD *)(v0 + 584);
  v41 = *(_QWORD *)(v0 + 560);
  v43 = *(_QWORD *)(v0 + 536);
  v45 = *(_QWORD *)(v0 + 512);
  v47 = *(_QWORD *)(v0 + 488);
  v49 = *(_QWORD *)(v0 + 464);
  v51 = *(_QWORD *)(v0 + 456);
  v53 = *(_QWORD *)(v0 + 448);
  v55 = *(_QWORD *)(v0 + 424);
  static IntentResult.result<>()(v17);
  swift_release(v26);
  swift_release(v25);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v31);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019BFDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 816);
  swift_release(*(_QWORD *)(v0 + 800));
  return swift_unexpectedError(v1, "Podcasts/PlayPauseWidgetIntent.swift", 36, 1, 85);
}

uint64_t sub_10019C024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  uint64_t v7;

  v0 = type metadata accessor for EpisodePlayState(0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = dispatch thunk of EpisodeStateMachine.currentState.getter(v1);
  v5 = EpisodePlayState.isEpisodePlaying.getter(v4);
  sub_100199364((uint64_t)v3);
  return v5 & 1;
}

uint64_t sub_10019C098@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100552008 != -1)
    swift_once(&qword_100552008, sub_10019A11C);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_100047DA4(v2, (uint64_t)qword_100572D80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10019C118(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  _QWORD *v5;

  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_100556064);
  *(_QWORD *)(v2 + 56) = v5;
  *v5 = v2;
  v5[1] = sub_10019C188;
  return sub_10019A17C(a1);
}

uint64_t sub_10019C188()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_10019C1D0@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  sub_10019C568((uint64_t *)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_10019C210(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100199FF8();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t sub_10019C238()
{
  return sub_10019C4D8();
}

uint64_t destroy for PlayPauseWidgetIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  return swift_release(a1[4]);
}

uint64_t *initializeWithCopy for PlayPauseWidgetIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  a1[4] = v7;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for PlayPauseWidgetIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

__n128 initializeWithTake for PlayPauseWidgetIntent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for PlayPauseWidgetIntent(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  v6 = a1[4];
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayPauseWidgetIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayPauseWidgetIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayPauseWidgetIntent()
{
  return &type metadata for PlayPauseWidgetIntent;
}

uint64_t sub_10019C4AC()
{
  return sub_10002F9C8(&qword_100556018, &qword_100556020, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_10019C4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v6;
  uint64_t v7;

  IntentParameter.wrappedValue.getter(&v6);
  v1 = v6;
  v0 = v7;
  IntentParameter.wrappedValue.getter(&v6);
  v2 = v7;
  if (v1 == v6 && v0 == v7)
  {
    v4 = 1;
    v2 = v0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v0, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v0);
  swift_bridgeObjectRelease(v2);
  return v4 & 1;
}

uint64_t sub_10019C568@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t result;
  uint64_t *v38;
  uint64_t v39;
  void (*v40)(char *);
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;

  v45 = a1;
  v50 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_100556028);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100556030);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544(&qword_100556038);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100556040);
  LocalizedStringResource.init(stringLiteral:)(0, 0xE000000000000000);
  v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v17 = v13;
  v48(v12, 1, 1, v13);
  v46 = type metadata accessor for String.IntentInputOptions(0);
  v52 = 0;
  v53 = 0;
  v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56);
  v42(v9, 1, 1, v46);
  v47 = type metadata accessor for IntentDialog(0);
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56);
  v18 = v6;
  v41(v6, 1, 1, v47);
  v49 = enum case for InputConnectionBehavior.default(_:);
  v40 = *(void (**)(char *))(v1 + 104);
  v19 = v50;
  v40(v3);
  v44 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v16, v12, &v52, v9, v6, v3);
  sub_10003F544(&qword_100556048);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)(0, 0xE000000000000000);
  v20 = v17;
  v48(v12, 1, 1, v17);
  v52 = 0;
  v53 = 0;
  v21 = v42;
  v42(v9, 1, 1, v46);
  v22 = v6;
  v23 = v41;
  v41(v22, 1, 1, v47);
  v24 = v19;
  v25 = v40;
  ((void (*)(char *, _QWORD, uint64_t))v40)(v3, v49, v24);
  v43 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v16, v12, &v52, v9, v18, v3);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)(0, 0xE000000000000000);
  v48(v12, 1, 1, v20);
  v52 = 0;
  v53 = 0;
  v21(v9, 1, 1, v46);
  v23(v18, 1, 1, v47);
  ((void (*)(char *, _QWORD, uint64_t))v25)(v3, v49, v50);
  v26 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v16, v12, &v52, v9, v18, v3);
  sub_10003F544(&qword_100556050);
  v51 = 1;
  v27 = sub_100175104();
  swift_retain();
  AnyHashable.init<A>(_:)(&v51, &type metadata for AppDependencyKey, v27);
  v28 = type metadata accessor for AppDependencyManager(0);
  v29 = static AppDependencyManager.shared.getter(v28);
  v30 = AppDependency.__allocating_init(key:manager:)(&v52, v29);
  sub_10003F544(&qword_100556058);
  v51 = 3;
  swift_retain();
  v31 = AnyHashable.init<A>(_:)(&v51, &type metadata for AppDependencyKey, v27);
  v32 = static AppDependencyManager.shared.getter(v31);
  v33 = AppDependency.__allocating_init(key:manager:)(&v52, v32);
  v52 = 0;
  v53 = 0xE000000000000000;
  v34 = v44;
  swift_retain();
  v35 = v43;
  swift_retain();
  swift_retain();
  swift_retain();
  v36 = swift_retain();
  IntentParameter.wrappedValue.setter(&v52, v36);
  swift_release(v33);
  swift_release_n(v30, 2);
  swift_release_n(v26, 2);
  swift_release_n(v35, 2);
  result = swift_release_n(v34, 2);
  v38 = v45;
  *v45 = v34;
  v38[1] = v35;
  v38[2] = v26;
  v38[3] = v30;
  v38[4] = v33;
  return result;
}

uint64_t sub_10019CA2C()
{
  return sub_10019C024();
}

uint64_t sub_10019CA34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10019CA58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10019CA84()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v17[24];
  _QWORD v18[5];
  _QWORD v19[5];

  v1 = v0;
  v2 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)&v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = v1[13];
  if (!v5)
    goto LABEL_7;
  v6 = v5 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v17, 0, 0);
  sub_10016E904(v6, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload(v4, v2) == 1)
  {
    sub_10016E98C((uint64_t)v4);
LABEL_7:
    v14 = 0;
    return v14 & 1;
  }
  v8 = *v4;
  v7 = v4[1];
  v19[0] = 0;
  v19[1] = 0;
  v19[3] = 0;
  v19[4] = 0;
  v19[2] = 2;
  v9 = dispatch thunk of PodcastStateController.stateMachine(for:initialState:)(v8, v7, v19);
  dispatch thunk of PodcastStateMachine.currentState.getter(v18, v9);
  v10 = swift_release(v9);
  LOBYTE(v9) = PodcastState.isSubscribed.getter(v10);
  sub_10019D154((uint64_t)v18);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease(v7);
    goto LABEL_7;
  }
  v11 = v1 + 2;
  v13 = v1[5];
  v12 = v1[6];
  sub_10003A834(v11, v13);
  v14 = dispatch thunk of LibraryActionControllerProtocol.hasDownloadedEpisodes(podcastUuid:)(v8, v7, v13, v12);
  swift_bridgeObjectRelease(v7);
  return v14 & 1;
}

uint64_t sub_10019CBE4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(__n128);
  __n128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _BYTE v24[24];
  _BYTE v25[24];

  v1 = v0;
  v2 = sub_10003F544(qword_1005542D8);
  __chkstk_darwin(v2);
  v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for PresentationSource(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for PodcastContextActionDataType(0);
  result = __chkstk_darwin(v9);
  v12 = (uint64_t *)&v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = v1[13];
  if (v13)
  {
    v14 = v13 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
    swift_beginAccess(v13 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v25, 0, 0);
    sub_10016E904(v14, (uint64_t)v12);
    if (swift_getEnumCaseMultiPayload(v12, v9) == 1)
      return sub_10016E98C((uint64_t)v12);
    v16 = *v12;
    v15 = v12[1];
    swift_beginAccess(v1 + 14, v24, 0, 0);
    v17 = v1[14];
    if (v17)
    {
      v18 = *(void (**)(__n128))(*(_QWORD *)v17 + 120);
      v19 = swift_retain();
      v18(v19);
      swift_release(v17);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v4, v5);
        v20 = v1 + 7;
        v22 = v1[10];
        v21 = v1[11];
        sub_10003A834(v20, v22);
        v23 = (void *)dispatch thunk of LibraryRemovalControllerProtocol.removeAllDownloadsAlertController(uuid:)(v16, v15, v22, v21);
        swift_bridgeObjectRelease(v15);
        PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v23, 1, 15, 1, 0, 0);

        return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
      }
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    }
    swift_bridgeObjectRelease(v15);
    return sub_10016E9C8((uint64_t)v4);
  }
  return result;
}

_QWORD *sub_10019CE2C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_10003D380(v0 + 2);
  sub_10003D380(v0 + 7);
  swift_release(v0[12]);
  swift_release(v0[13]);
  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[19]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts39RemoveAllDownloadsFromShowContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10019CEA8()
{
  uint64_t v0;

  sub_10019CE2C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10019CECC()
{
  return type metadata accessor for RemoveAllDownloadsFromShowContextAction(0);
}

uint64_t type metadata accessor for RemoveAllDownloadsFromShowContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100556108;
  if (!qword_100556108)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RemoveAllDownloadsFromShowContextAction);
  return result;
}

uint64_t sub_10019CF10(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_1003CBD30;
  v4[4] = &unk_1003CBD30;
  v4[5] = &unk_1003CBD48;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = &unk_1003CBD60;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(result - 8) + 64;
    v4[9] = &unk_1003CBD78;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10019CFCC()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 104));
}

uint64_t sub_10019CFD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 104) = a1;
  return swift_release(v2);
}

uint64_t sub_10019CFE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
  return v1;
}

uint64_t sub_10019D010()
{
  return 2;
}

uint64_t sub_10019D018()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 152));
  return v1;
}

uint64_t sub_10019D044@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts39RemoveAllDownloadsFromShowContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10019D088()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts39RemoveAllDownloadsFromShowContextAction_contextActionType);
}

uint64_t sub_10019D0A0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 112, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 112));
}

uint64_t sub_10019D0D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 112, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = a1;
  return swift_release(v3);
}

void *sub_10019D118(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_10019D154(uint64_t a1)
{
  sub_10016E8F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_10019D184()
{
  _BYTE *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)();
  uint64_t v8;
  __n128 v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  _QWORD v16[5];
  uint64_t v17;

  v1 = &v0[OBJC_IVAR___CarPlayController_cachedScale];
  if (v0[OBJC_IVAR___CarPlayController_cachedScale + 8] != 1)
  {
    v7 = 0;
    v8 = 0;
    return sub_10002CA30((uint64_t)v7, v8);
  }
  v2 = v0;
  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    v3 = *(void **)&v0[OBJC_IVAR___CarPlayController_interfaceController];
    if (v3)
    {
      v4 = objc_msgSend(v3, "carTraitCollection");
      objc_msgSend(v4, "displayScale");
      v6 = v5;

    }
    else
    {
      v6 = 0;
    }
    v7 = 0;
    v8 = 0;
    *(_QWORD *)v1 = v6;
    v1[8] = v3 == 0;
    return sub_10002CA30((uint64_t)v7, v8);
  }
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v10 = static OS_dispatch_queue.main.getter(v9);
  v8 = swift_allocObject(&unk_1004B2188, 24, 7);
  *(_QWORD *)(v8 + 16) = v2;
  v11 = swift_allocObject(&unk_1004B21B0, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1001A6840;
  *(_QWORD *)(v11 + 24) = v8;
  v16[4] = sub_1001529CC;
  v17 = v11;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100029B1C;
  v16[3] = &unk_1004B21C8;
  v12 = _Block_copy(v16);
  v13 = v17;
  v14 = v2;
  swift_retain();
  swift_release(v13);
  dispatch_sync(v10, v12);

  _Block_release(v12);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v11, "", 95, 691, 41, 1);
  result = swift_release(v11);
  if ((v10 & 1) == 0)
  {
    v7 = sub_1001A6840;
    return sub_10002CA30((uint64_t)v7, v8);
  }
  __break(1u);
  return result;
}

id CarPlayController.deviceInfo.getter@<X0>(double *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id result;

  v3 = v1 + OBJC_IVAR___CarPlayController____lazy_storage___deviceInfo;
  if ((*(_BYTE *)(v1 + OBJC_IVAR___CarPlayController____lazy_storage___deviceInfo + 48) & 1) != 0)
  {
    v4 = sub_10019D480(CPListItem_ptr);
    v6 = v5;
    v7 = sub_10019D480(CPListImageRowItem_ptr);
    v9 = v8;
    sub_10019D184();
    v11 = v10;
    result = objc_msgSend((id)objc_opt_self(CPListTemplate), "maximumItemCount");
    *(double *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v6;
    *(double *)(v3 + 16) = v7;
    *(_QWORD *)(v3 + 24) = v9;
    *(_QWORD *)(v3 + 32) = v11;
    *(_QWORD *)(v3 + 40) = result;
    *(_BYTE *)(v3 + 48) = 0;
  }
  else
  {
    result = *(id *)(v3 + 40);
    v9 = *(_QWORD *)(v3 + 24);
    v11 = *(_QWORD *)(v3 + 32);
    v6 = *(_QWORD *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
    v4 = *(double *)v3;
  }
  *a1 = v4;
  *((_QWORD *)a1 + 1) = v6;
  a1[2] = v7;
  *((_QWORD *)a1 + 3) = v9;
  *((_QWORD *)a1 + 4) = v11;
  *((_QWORD *)a1 + 5) = result;
  return result;
}

double sub_10019D480(_QWORD *a1)
{
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  double v17;
  double v18;

  sub_10019D184();
  v3 = v2;
  v4 = (void *)objc_opt_self(*a1);
  objc_msgSend(v4, "maximumImageSize");
  v6 = v3 * v5;
  sub_10019D184();
  objc_msgSend(v4, "maximumImageSize");
  v7 = (void *)objc_opt_self(UIScreen);
  v8 = objc_msgSend(v7, "mainScreen");
  objc_msgSend(v8, "scale");
  v10 = v9;

  v11 = sub_1001A676C(v6 / v10);
  sub_10019D184();
  objc_msgSend(v4, "maximumImageSize");
  sub_10019D184();
  v13 = v12;
  objc_msgSend(v4, "maximumImageSize");
  v15 = v13 * v14;
  v16 = objc_msgSend(v7, "mainScreen");
  objc_msgSend(v16, "scale");
  v18 = v17;

  sub_1001A676C(v15 / v18);
  return v11;
}

id _s8Podcasts17CarPlayControllerC17listenNowTemplate33_1837259AE273DECDE141DFAB9CAB2C47LLSo06CPListG0Cvpfi_0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  void *object;
  id v13;
  NSString v14;
  Class isa;
  id v16;
  id v17;
  NSString v18;
  id v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  id v24;
  NSString v25;
  Class v26;
  id v27;
  NSString v28;
  id v29;
  _BYTE *v30;
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  id v35;
  _QWORD v36[5];
  Swift::String v37;
  Swift::String v38;

  v0 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v0);
  v2 = (char *)&v36[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v36[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Podcasts(0);
  v36[3] = v7;
  v36[4] = sub_100026844((unint64_t *)&qword_100554040, (uint64_t (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v8 = sub_1000242A8(v36);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v8, enum case for Podcasts.homeTab(_:), v7);
  LOBYTE(v7) = isFeatureEnabled(_:)(v36);
  sub_10003D380(v36);
  if ((v7 & 1) != 0)
  {
    v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v37._object = (void *)0xE000000000000000;
    v10._countAndFlagsBits = 0x454D4F485F424154;
    v10._object = (void *)0xE800000000000000;
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    v37._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v37)._object;

    v13 = objc_allocWithZone((Class)CPListTemplate);
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v16 = objc_msgSend(v13, "initWithTitle:sections:", v14, isa);

    v35 = v16;
    v17 = v16;
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v18);

    if (v19)
      goto LABEL_5;
LABEL_6:
    v29 = 0;
    goto LABEL_7;
  }
  v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v38._object = (void *)0xE000000000000000;
  v21._countAndFlagsBits = 0x4E5F4E455453494CLL;
  v21._object = (void *)0xEA0000000000574FLL;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v38._countAndFlagsBits = 0;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v38)._object;

  v24 = objc_allocWithZone((Class)CPListTemplate);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
  v26 = Array._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v24, "initWithTitle:sections:", v25, v26);

  v35 = v27;
  v17 = v27;
  v28 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v28);

  if (!v19)
    goto LABEL_6;
LABEL_5:
  v29 = objc_msgSend(v19, "imageWithRenderingMode:", 2);

LABEL_7:
  objc_msgSend(v17, "setTabImage:", v29);

  swift_storeEnumTagMultiPayload(v6, v3, 9);
  v30 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
  sub_10017FE20((uint64_t)v6, (uint64_t)v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  v31 = (uint64_t)&v30[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v30[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], v36, 33, 0);
  sub_10016DE28((uint64_t)v2, v31, (uint64_t *)&unk_100555310);
  swift_endAccess(v36);
  v30[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v32 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v33 = v30;
  sub_10017FF38((uint64_t)v32, (uint64_t)v30);

  return v35;
}

id _s8Podcasts17CarPlayControllerC14browseTemplate33_1837259AE273DECDE141DFAB9CAB2C47LLSo06CPListF0Cvpfi_0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  void *object;
  id v14;
  NSString v15;
  Class isa;
  id v17;
  id v18;
  NSString v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  _BYTE v31[24];
  id v32;
  Swift::String v33;

  v0 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v0);
  v2 = &v31[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v7);
  v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v33._object = (void *)0xE600000000000000;
  v11._object = (void *)0x8000000100431E30;
  v11._countAndFlagsBits = 0xD000000000000012;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v33._countAndFlagsBits = 0x6573776F7242;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v33)._object;

  v14 = objc_allocWithZone((Class)CPListTemplate);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v14, "initWithTitle:sections:", v15, isa);

  v32 = v17;
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v19);

  if (v20)
  {
    v21 = objc_msgSend(v20, "imageWithRenderingMode:", 2);

  }
  else
  {
    v21 = 0;
  }
  objc_msgSend(v18, "setTabImage:", v21);

  v22 = static ASKConstants.PodcastCatalogUrl.getter();
  v24 = v23;
  URL.init(string:)(v22, v23);
  swift_bridgeObjectRelease(v24);
  v25 = *(int *)(sub_10003F544((uint64_t *)&unk_100554EE0) + 48);
  sub_100007A64((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_100553DC0);
  *(_QWORD *)&v6[v25] = 0;
  swift_storeEnumTagMultiPayload(v6, v3, 3);
  v26 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
  sub_10017FE20((uint64_t)v6, (uint64_t)v2);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  v27 = (uint64_t)&v26[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v26[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], v31, 33, 0);
  sub_10016DE28((uint64_t)v2, v27, (uint64_t *)&unk_100555310);
  swift_endAccess(v31);
  v26[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v28 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v29 = v26;
  sub_10017FF38((uint64_t)v28, (uint64_t)v26);

  sub_100007A28((uint64_t)v9, (uint64_t *)&unk_100553DC0);
  return v32;
}

id _s8Podcasts17CarPlayControllerC15libraryTemplate33_1837259AE273DECDE141DFAB9CAB2C47LLSo06CPListF0Cvpfi_0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  id v11;
  NSString v12;
  Class isa;
  id v14;
  id v15;
  NSString v16;
  id v17;
  id v18;
  _BYTE *v19;
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  _BYTE v24[24];
  id v25;
  Swift::String v26;

  v0 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v0);
  v2 = &v24[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v26._object = (void *)0xE700000000000000;
  v8._countAndFlagsBits = 0x5242494C5F424154;
  v8._object = (void *)0xEB00000000595241;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0x7972617262694CLL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v26)._object;

  v11 = objc_allocWithZone((Class)CPListTemplate);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v11, "initWithTitle:sections:", v12, isa);

  v25 = v14;
  v15 = v14;
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v16);

  if (v17)
  {
    v18 = objc_msgSend(v17, "imageWithRenderingMode:", 2);

  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v15, "setTabImage:", v18);

  swift_storeEnumTagMultiPayload(v6, v3, 8);
  v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
  sub_10017FE20((uint64_t)v6, (uint64_t)v2);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  v20 = (uint64_t)&v19[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v19[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], v24, 33, 0);
  sub_10016DE28((uint64_t)v2, v20, (uint64_t *)&unk_100555310);
  swift_endAccess(v24);
  v19[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v21 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v22 = v19;
  sub_10017FF38((uint64_t)v21, (uint64_t)v19);

  return v25;
}

id _s8Podcasts17CarPlayControllerC16stationsTemplate33_1837259AE273DECDE141DFAB9CAB2C47LLSo06CPListF0Cvpfi_0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  id v11;
  NSString v12;
  Class isa;
  id v14;
  id v15;
  NSString v16;
  id v17;
  id v18;
  _BYTE *v19;
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  _BYTE v24[24];
  id v25;
  Swift::String v26;

  v0 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v0);
  v2 = &v24[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v26._object = (void *)0xE800000000000000;
  v8._object = (void *)0x8000000100431DC0;
  v8._countAndFlagsBits = 0xD000000000000014;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0x736E6F6974617453;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v26)._object;

  v11 = objc_allocWithZone((Class)CPListTemplate);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v11, "initWithTitle:sections:", v12, isa);

  v25 = v14;
  v15 = v14;
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v16);

  if (v17)
  {
    v18 = objc_msgSend(v17, "imageWithRenderingMode:", 2);

  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v15, "setTabImage:", v18);

  swift_storeEnumTagMultiPayload(v6, v3, 12);
  v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
  sub_10017FE20((uint64_t)v6, (uint64_t)v2);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  v20 = (uint64_t)&v19[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v19[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], v24, 33, 0);
  sub_10016DE28((uint64_t)v2, v20, (uint64_t *)&unk_100555310);
  swift_endAccess(v24);
  v19[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource] = 0;
  sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
  v21 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
  v22 = v19;
  sub_10017FF38((uint64_t)v21, (uint64_t)v19);

  return v25;
}

id CarPlayController.welcomeScreenTemplate.getter()
{
  return sub_10019E50C(&OBJC_IVAR___CarPlayController____lazy_storage___welcomeScreenTemplate, (uint64_t (*)(void))sub_1001A45A8);
}

id CarPlayController.migrationTemplate.getter()
{
  return sub_10019E50C(&OBJC_IVAR___CarPlayController____lazy_storage___migrationTemplate, (uint64_t (*)(void))sub_10019E564);
}

id sub_10019E50C(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2();
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_10019E564()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  Class v8;
  id v9;
  Swift::String v11;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v11._object = (void *)0xAA0000000000A680;
  v1._object = (void *)0x8000000100431CD0;
  v1._countAndFlagsBits = 0xD000000000000011;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0xE2676E6964616F4CLL;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v11);

  v4 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v5 = swift_allocObject(v4, 48, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1003CA200;
  *(Swift::String *)(v5 + 32) = v3;
  v6 = objc_allocWithZone((Class)CPAlertTemplate);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  sub_100005EC8(0, &qword_100556490, CPAlertAction_ptr);
  v8 = Array._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v6, "initWithTitleVariants:actions:", isa, v8);

  return v9;
}

uint64_t CarPlayController.setUpCarPlayInterface()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  char v49[40];

  v1 = v0;
  v2 = sub_10003F544(&qword_100556420);
  v46 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_100556428);
  v47 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(v1 + OBJC_IVAR___CarPlayController_interfaceController);
  if (v13)
  {
    v14 = *(_QWORD *)(v1 + OBJC_IVAR___CarPlayController_graph);
    if (v14)
    {
      v44 = v5;
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v43 = v13;
      v45 = v14;
      swift_retain();
      v16 = static OS_os_log.carPlay.getter(v15);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Setting up the CarPlay interface.", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v20 = v43;
      objc_msgSend(v43, "setDelegate:", v1);
      v21 = type metadata accessor for CarPlayStationsProvider();
      inited = swift_initStackObject(v21, v49);
      v23 = sub_10003F544((uint64_t *)&unk_1005550F0);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      v24 = v45;
      v25 = swift_retain();
      v26 = PassthroughSubject.init()(v25);
      *(_QWORD *)(inited + 32) = v26;
      v27 = sub_10003F544(&qword_1005609B0);
      v28 = type metadata accessor for BaseObjectGraph(0);
      inject<A, B>(_:from:)(&v48, v27, v24, v27, v28);
      swift_release(v24);
      v42 = v48;
      *(_OWORD *)(inited + 16) = v48;
      v29 = sub_1001801BC();
      swift_release(v26);
      swift_unknownObjectRelease(v42);
      *(_QWORD *)&v48 = v29;
      v30 = sub_10003F544((uint64_t *)&unk_100556430);
      v31 = sub_10002F9C8(&qword_1005551B8, (uint64_t *)&unk_100556430, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.map<A>(_:)(sub_10019EB1C, 0, v30, &type metadata for UInt, v31);
      swift_release(v29);
      v32 = sub_10002F9C8(&qword_100556440, &qword_100556420, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      Publisher<>.removeDuplicates()(v2, v32, &protocol witness table for UInt);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v4, v2);
      v33 = swift_allocObject(&unk_1004B1FD0, 24, 7);
      swift_unknownObjectWeakInit(v33 + 16, v1);
      v34 = swift_allocObject(&unk_1004B1FF8, 32, 7);
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = v20;
      v35 = sub_10002F9C8(&qword_100556448, &qword_100556428, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
      v36 = v20;
      v37 = v44;
      v38 = Publisher<>.sink(receiveValue:)(sub_1001A6738, v34, v44, v35);
      swift_release(v34);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v37);
      v39 = v1 + OBJC_IVAR___CarPlayController_subscriptions;
      swift_beginAccess(v39, &v48, 33, 0);
      v40 = sub_10003F544((uint64_t *)&unk_100556450);
      v41 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
      AnyCancellable.store<A>(in:)(v39, v40, v41);
      swift_endAccess(&v48);

      swift_release(v24);
      return swift_release(v38);
    }
  }
  return result;
}

void sub_10019EB1C(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;

  v3 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    if (v3 < 0)
      v12 = *a1;
    else
      v12 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v12);
    if (v4)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease(v3);
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_10:
      v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
LABEL_11:
      *a2 = v11;
      return;
    }
    goto LABEL_17;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v3);
  if (!v4)
    goto LABEL_16;
LABEL_3:
  if (v4 < 1)
    goto LABEL_22;
  v5 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
    else
      v6 = *(id *)(v3 + 8 * v5 + 32);
    v7 = v6;
    ++v5;
    v8 = objc_msgSend(v6, "items");
    v9 = sub_10003F544(&qword_1005544F0);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    sub_1001734C4(v10);
  }
  while (v4 != v5);
  swift_bridgeObjectRelease(v3);
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    goto LABEL_10;
LABEL_17:
  if ((uint64_t)_swiftEmptyArrayStorage < 0)
    v13 = _swiftEmptyArrayStorage;
  else
    v13 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v11 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_11;
  v14 = 2;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v14, 3451, 0);
  __break(1u);
LABEL_22:
  __break(1u);
}

void sub_10019ECFC(void ***a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t Strong;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void (*v20)(char *, uint64_t);
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  void *v38;
  id v39;
  Class isa;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  void (*v45)(char *, uint64_t);
  uint8_t *v46;
  uint8_t *v47;
  id v48;
  Class v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  void *v54;
  void (*v55)(char *, uint64_t);
  id v56;
  uint64_t v57;
  void **aBlock;
  _QWORD v59[4];
  uint64_t v60;
  _BYTE v61[24];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v55 - v11;
  v13 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v61, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (!Strong)
    return;
  v15 = (char *)Strong;
  v56 = a3;
  v57 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v16 = static OS_os_log.carPlay.getter(v57);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v19 = 134217984;
    aBlock = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v19 + 4, v19 + 12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "The finish fetching stations with station items count %lu.", v19, 0xCu);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v12, v6);
  if (v13)
  {
    if (*(_QWORD *)&v15[OBJC_IVAR___CarPlayController_previousStationItemsCount])
    {
      v21 = (void **)_swiftEmptyArrayStorage;
      goto LABEL_10;
    }
    v27 = sub_10003F544((uint64_t *)&unk_100553780);
    v28 = swift_allocObject(v27, 64, 7);
    *(_OWORD *)(v28 + 16) = xmmword_1003CBDC0;
    v55 = v20;
    v29 = *(void **)&v15[OBJC_IVAR___CarPlayController_listenNowTemplate];
    *(_QWORD *)(v28 + 32) = v29;
    v24 = *(void **)&v15[OBJC_IVAR___CarPlayController_browseTemplate];
    *(_QWORD *)(v28 + 40) = v24;
    v25 = *(void **)&v15[OBJC_IVAR___CarPlayController_libraryTemplate];
    *(_QWORD *)(v28 + 48) = v25;
    v26 = *(void **)&v15[OBJC_IVAR___CarPlayController_stationsTemplate];
    *(_QWORD *)(v28 + 56) = v26;
    aBlock = (void **)v28;
    specialized Array._endMutation()(v28);
    v21 = aBlock;
    v30 = v29;
    v20 = v55;
  }
  else
  {
    v22 = sub_10003F544((uint64_t *)&unk_100553780);
    v23 = swift_allocObject(v22, 56, 7);
    *(_OWORD *)(v23 + 16) = xmmword_1003CA260;
    v24 = *(void **)&v15[OBJC_IVAR___CarPlayController_listenNowTemplate];
    *(_QWORD *)(v23 + 32) = v24;
    v25 = *(void **)&v15[OBJC_IVAR___CarPlayController_browseTemplate];
    *(_QWORD *)(v23 + 40) = v25;
    v26 = *(void **)&v15[OBJC_IVAR___CarPlayController_libraryTemplate];
    *(_QWORD *)(v23 + 48) = v26;
    aBlock = (void **)v23;
    specialized Array._endMutation()(v23);
    v21 = aBlock;
  }
  v31 = v24;
  v32 = v25;
  v33 = v26;
LABEL_10:
  *(_QWORD *)&v15[OBJC_IVAR___CarPlayController_previousStationItemsCount] = v13;
  aBlock = v21;
  v34 = sub_10003F544(&qword_100556460);
  v35 = sub_10002F9C8(&qword_100556468, &qword_100556460, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v34, v35, v36) & 1) != 0)
  {
    v37 = OBJC_IVAR___CarPlayController_tabBarTemplate;
    v38 = *(void **)&v15[OBJC_IVAR___CarPlayController_tabBarTemplate];
    if (v38)
    {
      sub_100005EC8(0, (unint64_t *)&unk_100556470, CPTemplate_ptr);
      v39 = v38;
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v39, "updateTemplates:", isa, swift_bridgeObjectRelease(v21).n128_f64[0]);

    }
    else
    {
      v48 = objc_allocWithZone((Class)CPTabBarTemplate);
      sub_100005EC8(0, (unint64_t *)&unk_100556470, CPTemplate_ptr);
      swift_bridgeObjectRetain(v21);
      v49 = Array._bridgeToObjectiveC()().super.isa;
      v50 = objc_msgSend(v48, "initWithTemplates:", v49, swift_bridgeObjectRelease(v21).n128_f64[0]);

      v51 = *(void **)&v15[v37];
      *(_QWORD *)&v15[v37] = v50;
      v52 = v50;

      v53 = swift_allocObject(&unk_1004B2020, 24, 7);
      *(_QWORD *)(v53 + 16) = v21;
      v59[3] = sub_1001A6764;
      v60 = v53;
      aBlock = _NSConcreteStackBlock;
      v59[0] = 1107296256;
      v59[1] = sub_100153D50;
      v59[2] = &unk_1004B2038;
      v54 = _Block_copy(&aBlock);
      swift_release(v60);
      objc_msgSend(v56, "setRootTemplate:animated:completion:", v52, 0, v54);

      _Block_release(v54);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v21);
    v42 = static OS_os_log.carPlay.getter(v41);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = v20;
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v46 = 134217984;
      aBlock = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v46 + 4, v46 + 12);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "The tab bar templates is empty with station items count %lu.", v46, 0xCu);
      v47 = v46;
      v20 = v45;
      swift_slowDealloc(v47, -1, -1);
    }

    v20(v10, v6);
  }
}

uint64_t sub_10019F24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  Class isa;
  id v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  Class v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v62 - v10;
  v63 = a3;
  if (a2)
  {
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v12 = swift_errorRetain(a2);
    static OS_os_log.carPlay.getter(v12);
    v13 = swift_errorRetain(a2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(8, -1);
      v62 = (char *)v5;
      v18 = (_QWORD *)v17;
      *(_DWORD *)v16 = 138412290;
      v19 = _convertErrorToNSError(_:)(a2);
      *(_QWORD *)&v68 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, (char *)&v68 + 8, v16 + 4, v16 + 12);
      *v18 = v19;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error setting the root tab bar template: %@", v16, 0xCu);
      v20 = sub_10003F544((uint64_t *)&unk_100556480);
      swift_arrayDestroy(v18, 1, v20);
      v21 = v18;
      v5 = (uint64_t)v62;
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
    v9 = v11;
    a3 = v63;
  }
  else
  {
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v22 = ((uint64_t (*)(void))static OS_os_log.carPlay.getter)();
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "Successfully created the root tab bar template.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if ((unint64_t)a3 >> 62)
  {
LABEL_52:
    if (a3 < 0)
      v60 = a3;
    else
      v60 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(a3, 2);
    v26 = _CocoaArrayWrapper.endIndex.getter(v60);
    if (v26)
      goto LABEL_11;
  }
  else
  {
    v26 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(a3, 2);
    if (v26)
    {
LABEL_11:
      v27 = a3 & 0xC000000000000001;
      v28 = 4;
      v62 = (char *)&type metadata for Any + 8;
      while (1)
      {
        if (v27)
          v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28 - 4, a3);
        else
          v29 = *(id *)(a3 + 8 * v28);
        v30 = v29;
        v31 = v28 - 3;
        if (__OFADD__(v28 - 4, 1))
        {
          __break(1u);
          goto LABEL_52;
        }
        v32 = objc_opt_self(CPListTemplate);
        v33 = swift_dynamicCastObjCClass(v30, v32);
        if (!v33)
        {

          if (v31 == v26)
            return swift_bridgeObjectRelease_n(a3, 2);
          goto LABEL_13;
        }
        v34 = (void *)v33;
        v35 = v30;
        v36 = objc_msgSend(v35, "userInfo");
        if (v36)
        {
          v37 = v36;
          _bridgeAnyObjectToAny(_:)(&v64, v36);
          swift_unknownObjectRelease(v37);
        }
        else
        {
          v64 = 0u;
          v65 = 0u;
        }
        sub_10003DC78((uint64_t)&v64, (uint64_t)&v66, (uint64_t *)&unk_100552300);
        if (!*((_QWORD *)&v67 + 1))
          break;
        v38 = sub_100005EC8(0, (unint64_t *)&qword_100554EF0, NSDictionary_ptr);
        if ((swift_dynamicCast(&v64, &v66, (char *)&type metadata for Any + 8, v38, 6) & 1) == 0)
          goto LABEL_27;
        v39 = (void *)v64;
        strcpy((char *)&v66, "templateInfo");
        BYTE13(v66) = 0;
        HIWORD(v66) = -5120;
        v40 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v66, &type metadata for String);
        v41 = objc_msgSend(v39, "__swift_objectForKeyedSubscript:", v40);
        swift_unknownObjectRelease(v40);
        if (v41)
        {
          _bridgeAnyObjectToAny(_:)(&v66, v41);

          swift_unknownObjectRelease(v41);
        }
        else
        {

          v66 = 0u;
          v67 = 0u;
        }
        sub_10003DC78((uint64_t)&v66, (uint64_t)&v68, (uint64_t *)&unk_100552300);
        if (!*((_QWORD *)&v69 + 1))
          goto LABEL_28;
        v58 = type metadata accessor for CarPlayTemplateInfo(0);
        if ((swift_dynamicCast(&v66, &v68, (char *)&type metadata for Any + 8, v58, 6) & 1) == 0)
          goto LABEL_29;
        v42 = (id)v66;
LABEL_30:
        v43 = sub_1003489C0();
        v45 = v44;

        swift_bridgeObjectRelease(v45);
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v34, "setEmptyViewTitleVariants:", isa, swift_bridgeObjectRelease(v43).n128_f64[0]);

        v47 = objc_msgSend(v35, "userInfo");
        if (v47)
        {
          v48 = v47;
          _bridgeAnyObjectToAny(_:)(&v64, v47);
          swift_unknownObjectRelease(v48);
        }
        else
        {
          v64 = 0u;
          v65 = 0u;
        }
        sub_10003DC78((uint64_t)&v64, (uint64_t)&v66, (uint64_t *)&unk_100552300);
        if (!*((_QWORD *)&v67 + 1))
        {
          sub_100007A28((uint64_t)&v66, (uint64_t *)&unk_100552300);
LABEL_38:
          v68 = 0u;
          v69 = 0u;
LABEL_39:
          sub_100007A28((uint64_t)&v68, (uint64_t *)&unk_100552300);
LABEL_40:
          v53 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
          goto LABEL_41;
        }
        v49 = sub_100005EC8(0, (unint64_t *)&qword_100554EF0, NSDictionary_ptr);
        if ((swift_dynamicCast(&v64, &v66, v62, v49, 6) & 1) == 0)
          goto LABEL_38;
        v50 = (void *)v64;
        strcpy((char *)&v66, "templateInfo");
        BYTE13(v66) = 0;
        HIWORD(v66) = -5120;
        v51 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v66, &type metadata for String);
        v52 = objc_msgSend(v50, "__swift_objectForKeyedSubscript:", v51);
        swift_unknownObjectRelease(v51);
        if (v52)
        {
          _bridgeAnyObjectToAny(_:)(&v66, v52);

          swift_unknownObjectRelease(v52);
        }
        else
        {

          v66 = 0u;
          v67 = 0u;
        }
        sub_10003DC78((uint64_t)&v66, (uint64_t)&v68, (uint64_t *)&unk_100552300);
        if (!*((_QWORD *)&v69 + 1))
          goto LABEL_39;
        v59 = type metadata accessor for CarPlayTemplateInfo(0);
        if ((swift_dynamicCast(&v66, &v68, (char *)&type metadata for Any + 8, v59, 6) & 1) == 0)
          goto LABEL_40;
        v53 = (id)v66;
LABEL_41:
        v54 = sub_1003489C0();
        v56 = v55;

        swift_bridgeObjectRelease(v54);
        v57 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v34, "setEmptyViewSubtitleVariants:", v57, swift_bridgeObjectRelease(v56).n128_f64[0]);

        a3 = v63;
        if (v31 == v26)
          return swift_bridgeObjectRelease_n(a3, 2);
LABEL_13:
        ++v28;
      }
      sub_100007A28((uint64_t)&v66, (uint64_t *)&unk_100552300);
LABEL_27:
      v68 = 0u;
      v69 = 0u;
LABEL_28:
      sub_100007A28((uint64_t)&v68, (uint64_t *)&unk_100552300);
LABEL_29:
      v42 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
      goto LABEL_30;
    }
  }
  return swift_bridgeObjectRelease_n(a3, 2);
}

uint64_t CarPlayController.createProvider(forListTemplate:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _UNKNOWN **v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t Provider;
  uint64_t v65;
  _UNKNOWN **v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[2];
  uint64_t v92;
  char v93[24];
  __int128 aBlock;
  uint64_t (*v95)(uint64_t);
  void *v96;
  uint64_t (*v97)();
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v3 = v2;
  v6 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v10 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v87 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v87 - v14;
  v16 = sub_10003F544((uint64_t *)&unk_100555310);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v17);
  v90 = (uint64_t)&v87 - v21;
  v22 = *(_QWORD *)(v3 + OBJC_IVAR___CarPlayController_graph);
  if (!v22)
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  swift_retain();
  v23 = a1;
  sub_1001A4388(0x6574616C706D6574, 0xEC0000006F666E49, &v99);
  v89 = a2;
  if (*((_QWORD *)&v100 + 1))
  {
    v24 = type metadata accessor for CarPlayTemplateInfo(0);
    if ((swift_dynamicCast(&aBlock, &v99, (char *)&type metadata for Any + 8, v24, 6) & 1) != 0)
    {
      v25 = (char *)aBlock;
      goto LABEL_8;
    }
  }
  else
  {
    sub_100007A28((uint64_t)&v99, (uint64_t *)&unk_100552300);
  }
  v25 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
LABEL_8:

  v26 = &v25[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
  swift_beginAccess(&v25[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], v93, 0, 0);
  v27 = (uint64_t)v26;
  v28 = v90;
  sub_100007A64(v27, v90, (uint64_t *)&unk_100555310);

  v29 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29) == 1)
  {
    swift_release(v22);
LABEL_10:
    v30 = (_OWORD *)v89;
    *(_QWORD *)(v89 + 32) = 0;
    *v30 = 0u;
    v30[1] = 0u;
    v31 = v28;
  }
  else
  {
    sub_100007A64(v28, (uint64_t)v19, (uint64_t *)&unk_100555310);
    switch(swift_getEnumCaseMultiPayload(v19, v29))
    {
      case 0u:
        sub_10016965C((uint64_t)v19, (uint64_t)&v99);
        swift_retain();
        sub_10003F450((uint64_t)&v99, sub_100168ED4);
        v32 = v28;
        CarPlayController.deviceInfo.getter((double *)&aBlock);
        v33 = type metadata accessor for CarPlayEpisodesProvider();
        swift_allocObject(v33, 272, 7);
        v34 = sub_1002E75E8(v22, (uint64_t)&v99, &aBlock);
        sub_10003F450((uint64_t)&v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
        swift_release(v22);
        v35 = (uint64_t *)v89;
        *(_QWORD *)(v89 + 24) = v33;
        v35[4] = (uint64_t)&off_1004BFF98;
        swift_release(v22);
        sub_10003F450((uint64_t)&v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003F49C);
        goto LABEL_20;
      case 1u:
        v36 = *(_QWORD *)v19;
        v37 = *((_QWORD *)v19 + 1);
        v38 = v19[16];
        swift_retain();
        v39 = v28;
        CarPlayController.deviceInfo.getter((double *)&v99);
        v40 = type metadata accessor for CarPlayLibraryShowProvider();
        swift_allocObject(v40, 248, 7);
        v41 = sub_100201CB8(v22, v36, v37, v38, &v99);
        swift_release(v22);
        swift_bridgeObjectRelease(v37);
        v42 = &off_1004B59F8;
        v43 = (uint64_t *)v89;
        *(_QWORD *)(v89 + 24) = v40;
        goto LABEL_18;
      case 3u:
        v44 = *(_QWORD *)&v19[*(int *)(sub_10003F544((uint64_t *)&unk_100554EE0) + 48)];
        sub_10003DC78((uint64_t)v19, (uint64_t)v15, (uint64_t *)&unk_100553DC0);
        sub_100007A64((uint64_t)v15, (uint64_t)v13, (uint64_t *)&unk_100553DC0);
        swift_retain();
        swift_retain();
        v45 = v28;
        CarPlayController.deviceInfo.getter((double *)&v99);
        v46 = type metadata accessor for CarPlayStoreProvider(0);
        swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
        v47 = sub_1002768F4(v22, (uint64_t)v13, v44, &v99);
        swift_release(v22);
        swift_release(v44);
        v48 = (uint64_t *)v89;
        *(_QWORD *)(v89 + 24) = v46;
        v48[4] = (uint64_t)&off_1004B9B80;
        swift_release(v22);
        swift_release(v44);
        *v48 = v47;
        sub_100007A28((uint64_t)v15, (uint64_t *)&unk_100553DC0);
        v31 = v45;
        return sub_100007A28(v31, (uint64_t *)&unk_100555310);
      case 4u:
        v49 = *(_QWORD *)v19;
        swift_retain();
        v39 = v28;
        CarPlayController.deviceInfo.getter((double *)&v99);
        v50 = type metadata accessor for CarPlayShowcaseProvider();
        swift_allocObject(v50, 176, 7);
        v51 = sub_1002DD540(v22, v49, &v99);
        swift_release(v22);
        swift_bridgeObjectRelease(v49);
        v52 = (_QWORD *)v89;
        *(_QWORD *)(v89 + 24) = v50;
        v52[4] = &off_1004BF6F8;
        swift_release(v22);
        *v52 = v51;
        goto LABEL_28;
      case 5u:
        v53 = *v19;
        swift_retain();
        v39 = v28;
        CarPlayController.deviceInfo.getter((double *)&v99);
        v54 = type metadata accessor for CarPlayShowsProvider();
        swift_allocObject(v54, 184, 7);
        v41 = sub_1001F81F0(v22, v53, &v99);
        v42 = &off_1004B5750;
        v43 = (uint64_t *)v89;
        *(_QWORD *)(v89 + 24) = v54;
LABEL_18:
        v43[4] = (uint64_t)v42;
        swift_release(v22);
        *v43 = v41;
        goto LABEL_28;
      case 6u:
        v55 = *(_QWORD *)v19;
        swift_retain();
        swift_retain();
        v32 = v28;
        CarPlayController.deviceInfo.getter((double *)&v99);
        v56 = type metadata accessor for CarPlayStationDetailProvider();
        swift_allocObject(v56, 208, 7);
        v34 = sub_10034B118(v22, v55, &v99);
        swift_release(v22);
        swift_release(v55);
        v35 = (uint64_t *)v89;
        *(_QWORD *)(v89 + 24) = v56;
        v35[4] = (uint64_t)&off_1004C48A8;
        swift_release(v55);
        swift_release(v22);
LABEL_20:
        *v35 = v34;
        v31 = v32;
        return sub_100007A28(v31, (uint64_t *)&unk_100555310);
      case 7u:
        v57 = sub_10003F544(&qword_100556410);
        v58 = *(_QWORD *)&v19[*(int *)(v57 + 48)];
        v59 = &v19[*(int *)(v57 + 64)];
        v88 = *(_QWORD *)v59;
        v60 = v59[8];
        sub_10003DC78((uint64_t)v19, (uint64_t)v10, (uint64_t *)&unk_100553DC0);
        v92 = 0;
        memset(v91, 0, sizeof(v91));
        if ((v60 & 1) == 0)
        {
          if (v88 < 0)
          {
            __break(1u);
          }
          else
          {
            v75 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
            v76 = objc_msgSend(v75, "mainOrPrivateContext");

            CarPlayController.deviceInfo.getter((double *)&v99);
            sub_100007A64((uint64_t)v10, (uint64_t)v15, (uint64_t *)&unk_100553DC0);
            v77 = *(unsigned __int8 *)(v7 + 80);
            v78 = (v77 + 96) & ~v77;
            v79 = (v8 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
            v80 = swift_allocObject(&unk_1004B1F58, v79 + 8, v77 | 7);
            v81 = v88;
            *(_QWORD *)(v80 + 16) = v76;
            *(_QWORD *)(v80 + 24) = v81;
            *(_QWORD *)(v80 + 32) = v91;
            *(_QWORD *)(v80 + 40) = v22;
            v82 = v100;
            *(_OWORD *)(v80 + 48) = v99;
            *(_OWORD *)(v80 + 64) = v82;
            *(_OWORD *)(v80 + 80) = v101;
            sub_10003DC78((uint64_t)v15, v80 + v78, (uint64_t *)&unk_100553DC0);
            *(_QWORD *)(v80 + v79) = v58;
            v83 = swift_allocObject(&unk_1004B1F80, 32, 7);
            *(_QWORD *)(v83 + 16) = sub_1001A66B0;
            *(_QWORD *)(v83 + 24) = v80;
            v97 = sub_100029B3C;
            v98 = v83;
            *(_QWORD *)&aBlock = _NSConcreteStackBlock;
            *((_QWORD *)&aBlock + 1) = 1107296256;
            v95 = sub_100029B1C;
            v96 = &unk_1004B1F98;
            v84 = _Block_copy(&aBlock);
            v85 = v98;
            swift_retain();
            swift_retain();
            swift_retain();
            v86 = v76;
            swift_release(v85);
            objc_msgSend(v86, "performBlockAndWait:", v84);
            _Block_release(v84);
            swift_release(v22);
            swift_release(v58);

            sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100553DC0);
            LOBYTE(v84) = swift_isEscapingClosureAtFileLocation(v83, "", 95, 263, 36, 1);
            swift_release(v83);
            if ((v84 & 1) == 0)
            {
              sub_10003DC78((uint64_t)v91, v89, &qword_100556418);
              sub_100007A28(v90, (uint64_t *)&unk_100555310);
              return swift_release(v80);
            }
          }
          __break(1u);
          JUMPOUT(0x1001A054CLL);
        }
        sub_100007A64((uint64_t)v10, (uint64_t)v15, (uint64_t *)&unk_100553DC0);
        swift_retain();
        swift_retain();
        v39 = v28;
        CarPlayController.deviceInfo.getter((double *)&v99);
        v61 = type metadata accessor for CarPlayStoreShowProvider(0);
        swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
        v62 = sub_1001D02C4(v22, (uint64_t)v15, v58, &v99);
        swift_release(v22);
        swift_release(v58);
        v96 = (void *)v61;
        v97 = (uint64_t (*)())&off_1004B3A58;
        swift_release(v22);
        swift_release(v58);
        *(_QWORD *)&aBlock = v62;
        sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100553DC0);
        sub_10016DE28((uint64_t)&aBlock, (uint64_t)v91, &qword_100556418);
        sub_10003DC78((uint64_t)v91, v89, &qword_100556418);
LABEL_28:
        v31 = v39;
        break;
      case 8u:
        swift_retain();
        v63 = v28;
        CarPlayController.deviceInfo.getter((double *)&v99);
        Provider = type metadata accessor for CarPlayLibraryProvider();
        swift_allocObject(Provider, 160, 7);
        v65 = sub_10036E788(v22, &v99);
        swift_release(v22);
        v66 = &off_1004C62C8;
        goto LABEL_26;
      case 9u:
        swift_retain();
        v63 = v28;
        CarPlayController.deviceInfo.getter((double *)&v99);
        Provider = type metadata accessor for CarPlayHomePageProvider();
        swift_allocObject(Provider, 216, 7);
        v65 = sub_1001840A0(v22, &v99);
        swift_release(v22);
        v66 = &off_1004B1018;
        goto LABEL_26;
      case 0xAu:
        swift_retain();
        v63 = v28;
        CarPlayController.deviceInfo.getter((double *)&v99);
        Provider = type metadata accessor for CarPlayPlayingNextProvider();
        swift_allocObject(Provider, 152, 7);
        v65 = sub_1002AB89C(v22, &v99);
        v66 = &off_1004BCB58;
LABEL_26:
        v67 = (uint64_t *)v89;
        *(_QWORD *)(v89 + 24) = Provider;
        v67[4] = (uint64_t)v66;
        swift_release(v22);
        *v67 = v65;
        v31 = v63;
        return sub_100007A28(v31, (uint64_t *)&unk_100555310);
      case 0xCu:
        v68 = type metadata accessor for CarPlayStationsProvider();
        v69 = swift_allocObject(v68, 40, 7);
        v70 = sub_10003F544((uint64_t *)&unk_1005550F0);
        swift_allocObject(v70, *(unsigned int *)(v70 + 48), *(unsigned __int16 *)(v70 + 52));
        v39 = v28;
        v71 = swift_retain();
        *(_QWORD *)(v69 + 32) = PassthroughSubject.init()(v71);
        v72 = sub_10003F544(&qword_1005609B0);
        v73 = type metadata accessor for BaseObjectGraph(0);
        inject<A, B>(_:from:)(&v99, v72, v22, v72, v73);
        swift_release(v22);
        *(_OWORD *)(v69 + 16) = v99;
        v74 = (uint64_t *)v89;
        *(_QWORD *)(v89 + 24) = v68;
        v74[4] = (uint64_t)&off_1004B0FE8;
        swift_release(v22);
        *v74 = v69;
        goto LABEL_28;
      default:
        swift_release(v22);
        sub_1001A65B0((uint64_t)v19);
        goto LABEL_10;
    }
  }
  return sub_100007A28(v31, (uint64_t *)&unk_100555310);
}

uint64_t sub_1001A0580(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _UNKNOWN **v26;
  uint64_t v27;
  _QWORD v30[5];

  v14 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v14);
  v16 = (char *)&v30[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a1, "podcastForStoreId:", a2);
  if (v17 && (v18 = v17, v19 = objc_msgSend(v17, "uuid"), v18, v19))
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23 = type metadata accessor for CarPlayLibraryShowProvider();
    swift_allocObject(v23, 248, 7);
    swift_retain();
    v25 = sub_100201CB8(v24, v20, v22, 1, a5);
    swift_release(a4);
    swift_bridgeObjectRelease(v22);
    v26 = &off_1004B59F8;
  }
  else
  {
    sub_100007A64(a6, (uint64_t)v16, (uint64_t *)&unk_100553DC0);
    v23 = type metadata accessor for CarPlayStoreShowProvider(0);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    swift_retain();
    swift_retain();
    v25 = sub_1001D02C4(v27, (uint64_t)v16, a7, a5);
    swift_release(a4);
    swift_release(a7);
    v26 = &off_1004B3A58;
  }
  v30[3] = v23;
  v30[4] = v26;
  v30[0] = v25;
  return sub_10016DE28((uint64_t)v30, a3, &qword_100556418);
}

id CarPlayController.init()()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v11;

  *(_QWORD *)&v0[OBJC_IVAR___CarPlayController_graph] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CarPlayController_interfaceController] = 0;
  v1 = &v0[OBJC_IVAR___CarPlayController_nowPlayingController];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CarPlayController_syncController] = 0;
  v2 = &v0[OBJC_IVAR___CarPlayController____lazy_storage___deviceInfo];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  v2[48] = 1;
  v3 = &v0[OBJC_IVAR___CarPlayController_cachedScale];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR___CarPlayController_subscriptions] = _swiftEmptyArrayStorage;
  v4 = &v0[OBJC_IVAR___CarPlayController_activeTemplateProvider];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 4) = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CarPlayController_activeTemplateItemsSubscription] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CarPlayController_activeTemplateDidSelectItemSubscription] = 0;
  v5 = OBJC_IVAR___CarPlayController_listenNowTemplate;
  v6 = v0;
  *(_QWORD *)&v0[v5] = _s8Podcasts17CarPlayControllerC17listenNowTemplate33_1837259AE273DECDE141DFAB9CAB2C47LLSo06CPListG0Cvpfi_0();
  v7 = OBJC_IVAR___CarPlayController_browseTemplate;
  *(_QWORD *)&v6[v7] = _s8Podcasts17CarPlayControllerC14browseTemplate33_1837259AE273DECDE141DFAB9CAB2C47LLSo06CPListF0Cvpfi_0();
  v8 = OBJC_IVAR___CarPlayController_libraryTemplate;
  *(_QWORD *)&v6[v8] = _s8Podcasts17CarPlayControllerC15libraryTemplate33_1837259AE273DECDE141DFAB9CAB2C47LLSo06CPListF0Cvpfi_0();
  v9 = OBJC_IVAR___CarPlayController_stationsTemplate;
  *(_QWORD *)&v6[v9] = _s8Podcasts17CarPlayControllerC16stationsTemplate33_1837259AE273DECDE141DFAB9CAB2C47LLSo06CPListF0Cvpfi_0();
  *(_QWORD *)&v6[OBJC_IVAR___CarPlayController____lazy_storage___welcomeScreenTemplate] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___CarPlayController____lazy_storage___migrationTemplate] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___CarPlayController_tabBarTemplate] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___CarPlayController_previousStationItemsCount] = 0;

  v11.receiver = v6;
  v11.super_class = (Class)type metadata accessor for CarPlayController();
  return objc_msgSendSuper2(&v11, "init");
}

uint64_t type metadata accessor for CarPlayController()
{
  return objc_opt_self(CarPlayController);
}

id CarPlayController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CarPlayController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall CarPlayController.templateApplicationScene(_:didConnect:)(CPTemplateApplicationScene _, CPInterfaceController didConnect)
{
  sub_1001A4A24(didConnect.super.isa);
}

void sub_1001A0A44(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR___CarPlayController_interfaceController;
  v9 = *(void **)(v1 + OBJC_IVAR___CarPlayController_interfaceController);
  if (v9 && (v10 = objc_msgSend(v9, "presentedTemplate")) != 0)
  {

  }
  else
  {
    v11 = CarPlayController.welcomeScreenTemplate.getter();

    if (v11 == a1)
    {
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v12 = static OS_os_log.carPlay.getter();
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Presenting the welcome screen template.", v15, 2u);
        swift_slowDealloc(v15, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    v16 = *(void **)(v2 + v8);
    if (v16)
    {
      aBlock[4] = j___ss6UInt64V8PodcastsE19int64Representations5Int64Vvg;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100153D50;
      aBlock[3] = &unk_1004B2240;
      v17 = _Block_copy(aBlock);
      v18 = v16;
      objc_msgSend(v18, "presentTemplate:animated:completion:", a1, 1, v17);
      _Block_release(v17);

    }
  }
}

void sub_1001A0C40(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _BYTE v19[24];

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v10 = (void *)Strong;
    v11 = objc_msgSend(a3, "presentedTemplate");
    v12 = CarPlayController.welcomeScreenTemplate.getter();
    if (v11)
    {

      if (v11 == v12)
      {
        objc_msgSend(a3, "dismissTemplateAnimated:completion:", 1, 0);
        v13 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
        v14 = static OS_os_log.carPlay.getter(v13);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Did dismiss the welcome screen template.", v17, 2u);
          swift_slowDealloc(v17, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        sub_1001A0DF0();
      }
    }
    else
    {

      v10 = v12;
    }

  }
}

void sub_1001A0DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void (*v21)(char *, uint64_t);
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t (**v38)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void (**v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  void (**v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  const char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  _BYTE v79[24];
  _QWORD v80[5];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v77 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v78 = (char *)&v77 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v77 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v77 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v77 - v14;
  v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v17 = static OS_os_log.carPlay.getter(v16);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Creating the initial CarPlay interface.", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = *(void (**)(char *, uint64_t))(v3 + 8);
  v21(v15, v2);
  v22 = (void *)qword_100573060;
  if (!qword_100573060)
  {
    v23 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AppDelegate(0)), "init");
    v24 = (void *)qword_100573060;
    qword_100573060 = (uint64_t)v23;

    v22 = (void *)qword_100573060;
    if (!qword_100573060)
      goto LABEL_12;
  }
  v26 = v22;
  sub_100016CB4();

  if (!qword_100573060 || (v27 = (id)qword_100573060, sub_1002C0430(), v29 = v28, v27, !v29))
  {
LABEL_12:
    v61 = static OS_os_log.carPlay.getter(v25);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Could not grab the object graph from the app bootstrap.", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }

    v65 = ((uint64_t (*)(char *, uint64_t))v21)(v10, v2);
    if (qword_100573060)
    {
      v66 = (id)qword_100573060;
      sub_1002C0430();
      v68 = v67;

      if (v68)
      {
        swift_release(v68);
        return;
      }
      v70 = v77;
      v76 = static OS_os_log.carPlay.getter(v69);
      v72 = Logger.logObject.getter(v76);
      v73 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v72, v73))
        goto LABEL_22;
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      v75 = "AccessAppDelegate shared appBootstrap graph is nil.";
    }
    else
    {
      v70 = v78;
      v71 = static OS_os_log.carPlay.getter(v65);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v72, v73))
      {
LABEL_22:

        v21(v70, v2);
        return;
      }
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      v75 = "AccessAppDelegate shared instance is nil.";
    }
    _os_log_impl((void *)&_mh_execute_header, v72, v73, v75, v74, 2u);
    swift_slowDealloc(v74, -1, -1);
    goto LABEL_22;
  }
  v30 = static OS_os_log.carPlay.getter(v25);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Successfully grabbed a reference to the object graph. Continuing to handle the CarPlay scene connection.", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

  v21(v13, v2);
  v34 = type metadata accessor for CarPlayNowPlayingController();
  swift_retain();
  v36 = sub_1002A2880(v35);
  v37 = swift_allocObject(&unk_1004B1FD0, 24, 7);
  swift_unknownObjectWeakInit(v37 + 16, v1);
  v38 = (uint64_t (**)())&v36[OBJC_IVAR____TtC8Podcasts27CarPlayNowPlayingController_npTemplatePlayerPeriodicUpdateCallback];
  v39 = *(_QWORD *)&v36[OBJC_IVAR____TtC8Podcasts27CarPlayNowPlayingController_npTemplatePlayerPeriodicUpdateCallback];
  v40 = *(_QWORD *)&v36[OBJC_IVAR____TtC8Podcasts27CarPlayNowPlayingController_npTemplatePlayerPeriodicUpdateCallback
                      + 8];
  *v38 = sub_1001A68D0;
  v38[1] = (uint64_t (*)())v37;
  sub_10002CA30(v39, v40);
  v41 = OBJC_IVAR___CarPlayController_interfaceController;
  v42 = *(void **)(v1 + OBJC_IVAR___CarPlayController_interfaceController);
  v43 = swift_allocObject(&unk_1004B2278, 24, 7);
  *(_QWORD *)(v43 + 16) = v42;
  v44 = (void (**)(uint64_t))&v36[OBJC_IVAR____TtC8Podcasts27CarPlayNowPlayingController_npTemplateAlbumArtistButtonTappedCallback];
  v45 = *(_QWORD *)&v36[OBJC_IVAR____TtC8Podcasts27CarPlayNowPlayingController_npTemplateAlbumArtistButtonTappedCallback];
  v46 = *(_QWORD *)&v36[OBJC_IVAR____TtC8Podcasts27CarPlayNowPlayingController_npTemplateAlbumArtistButtonTappedCallback
                      + 8];
  *v44 = sub_1001A68D8;
  v44[1] = (void (*)(uint64_t))v43;
  v47 = v42;
  sub_10002CA30(v45, v46);
  v48 = *(void **)(v1 + v41);
  v49 = swift_allocObject(&unk_1004B22A0, 24, 7);
  *(_QWORD *)(v49 + 16) = v48;
  v50 = (void (**)(uint64_t))&v36[OBJC_IVAR____TtC8Podcasts27CarPlayNowPlayingController_npTemplateUpNextButtonTappedCallback];
  v51 = *(_QWORD *)&v36[OBJC_IVAR____TtC8Podcasts27CarPlayNowPlayingController_npTemplateUpNextButtonTappedCallback];
  v52 = *(_QWORD *)&v36[OBJC_IVAR____TtC8Podcasts27CarPlayNowPlayingController_npTemplateUpNextButtonTappedCallback + 8];
  *v50 = sub_1001A6900;
  v50[1] = (void (*)(uint64_t))v49;
  v53 = v48;
  sub_10002CA30(v51, v52);
  v54 = *(_QWORD *)(v1 + OBJC_IVAR___CarPlayController_graph);
  *(_QWORD *)(v1 + OBJC_IVAR___CarPlayController_graph) = v29;
  swift_retain();
  swift_release(v54);
  v80[3] = v34;
  v80[4] = &off_1004BC750;
  v80[0] = v36;
  v55 = v1 + OBJC_IVAR___CarPlayController_nowPlayingController;
  swift_beginAccess(v1 + OBJC_IVAR___CarPlayController_nowPlayingController, v79, 33, 0);
  v56 = v36;
  sub_10016DE28((uint64_t)v80, v55, &qword_1005562B8);
  swift_endAccess(v79);
  v57 = sub_10003F544(&qword_10055C4A0);
  BaseObjectGraph.inject<A>(_:)(v80, v57, v57);
  v58 = *(_QWORD *)(v1 + OBJC_IVAR___CarPlayController_syncController);
  *(_QWORD *)(v1 + OBJC_IVAR___CarPlayController_syncController) = v80[0];
  v59 = swift_unknownObjectRelease(v58);
  if ((static Podcasts.isBlueMoonEnabled()(v59) & 1) == 0)
  {
    v60 = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
    objc_msgSend(v60, "setDialogProxy:", v1);

  }
  sub_1001A4868();
  CarPlayController.setUpCarPlayInterface()();
  swift_release(v29);

}

BOOL sub_1001A1418(_BYTE *a1)
{
  return (*a1 & 1) == 0;
}

void sub_1001A1428(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void (*v21)(char *, uint64_t);
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t Strong;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  id v48;
  _BYTE v49[24];
  _BYTE v50[24];

  v48 = a2;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v47 = (char *)&v47 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v47 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v47 - v14;
  v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v17 = static OS_os_log.carPlay.getter(v16);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Migration finished.", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v15, v4);
  v22 = objc_msgSend((id)objc_opt_self(MTWelcomeUtil), "carPlayShouldShowWelcome");
  if ((v22 & 1) != 0)
  {
    v23 = static OS_os_log.carPlay.getter(v22);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Migration is finished, but the welcome screen is still needed.", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v21(v8, v4);
  }
  else
  {
    v27 = a3 + 16;
    v28 = static OS_os_log.carPlay.getter(v22);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Welcome not needed. Proceeding to the scene connection.", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v21(v13, v4);
    v32 = v48;
    v33 = objc_msgSend(v48, "presentedTemplate");
    if (v33)
    {
      v34 = v33;
      swift_beginAccess(v27, v49, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v27);
      if (Strong)
      {
        v36 = (void *)Strong;
        v37 = v34;
        v38 = CarPlayController.migrationTemplate.getter();

        if (v37 == v38)
        {
          v40 = v47;
          v41 = static OS_os_log.carPlay.getter(v39);
          v42 = Logger.logObject.getter(v41);
          v43 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v42, v43))
          {
            v44 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v44 = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, v43, "Dismissing welcome template.", v44, 2u);
            swift_slowDealloc(v44, -1, -1);
          }

          v21(v40, v4);
          objc_msgSend(v32, "dismissTemplateAnimated:completion:", 1, 0);
        }
      }

    }
    swift_beginAccess(v27, v50, 0, 0);
    v45 = swift_unknownObjectWeakLoadStrong(v27);
    if (v45)
    {
      v46 = (void *)v45;
      sub_1001A0DF0();

    }
  }
}

uint64_t sub_1001A1880(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[24];
  uint64_t v12;
  _BYTE v13[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    v4 = result + OBJC_IVAR___CarPlayController_activeTemplateProvider;
    swift_beginAccess(result + OBJC_IVAR___CarPlayController_activeTemplateProvider, v10, 0, 0);
    sub_100007A64(v4, (uint64_t)v11, &qword_100556418);

    if (v12)
    {
      sub_10000A520((uint64_t)v11, (uint64_t)v7);
      sub_100007A28((uint64_t)v11, &qword_100556418);
      v5 = v8;
      v6 = v9;
      sub_10003A834(v7, v8);
      (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
      return sub_10003D380(v7);
    }
    else
    {
      return sub_100007A28((uint64_t)v11, &qword_100556418);
    }
  }
  return result;
}

void sub_1001A196C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  _QWORD v7[6];

  if (a2)
  {
    v7[4] = a3;
    v7[5] = 0;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_100153D50;
    v7[3] = a4;
    v6 = _Block_copy(v7);
    objc_msgSend(a2, "pushTemplate:animated:completion:", a1, 1, v6);
    _Block_release(v6);
  }
}

Swift::Void __swiftcall CarPlayController.templateApplicationScene(_:didDisconnect:)(CPTemplateApplicationScene _, CPInterfaceController didDisconnect)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void (*v16)(char *, uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  id v27;
  _QWORD v28[5];
  _BYTE v29[24];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v3 = v2;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v28 - v9;
  v11 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v12 = static OS_os_log.carPlay.getter(v11);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Did disconnect the CarPlay scene.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v10, v4);
  v17 = *(void **)(v3 + OBJC_IVAR___CarPlayController_interfaceController);
  *(_QWORD *)(v3 + OBJC_IVAR___CarPlayController_interfaceController) = 0;

  v18 = v3 + OBJC_IVAR___CarPlayController_cachedScale;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  sub_10019D184();
  v19 = v3 + OBJC_IVAR___CarPlayController_nowPlayingController;
  swift_beginAccess(v19, v29, 0, 0);
  sub_100007A64(v19, (uint64_t)&v30, &qword_1005562B8);
  if (*((_QWORD *)&v31 + 1))
  {
    sub_10000A520((uint64_t)&v30, (uint64_t)v28);
    sub_100007A28((uint64_t)&v30, &qword_1005562B8);
    v20 = sub_10003A834(v28, v28[3]);
    v21 = static OS_os_log.carPlay.getter(v20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "CarPlayNowPlayingController tearDown called. Removing observers.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v16(v8, v4);
    sub_1002A3A38();
    sub_10003D380(v28);
  }
  else
  {
    sub_100007A28((uint64_t)&v30, &qword_1005562B8);
  }
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  swift_beginAccess(v19, v28, 33, 0);
  sub_10016DE28((uint64_t)&v30, v19, &qword_1005562B8);
  v25 = swift_endAccess(v28);
  if ((static Podcasts.isBlueMoonEnabled()(v25) & 1) == 0)
  {
    v26 = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
    objc_msgSend(v26, "setDialogProxy:", 0);

  }
  v27 = objc_msgSend((id)objc_opt_self(IMNetworkObserver), "sharedInstance");
  objc_msgSend(v27, "endObserving");

}

void sub_1001A1D84(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t Strong;
  void *v47;
  Class isa;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[12];
  int v53;
  NSObject *v54;
  _QWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE v62[16];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD **)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v52[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v52[-v11];
  v13 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.carPlay.getter(v13);
  v14 = a2;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  v17 = os_log_type_enabled(v15, v16);
  v58 = v14;
  v59 = v6;
  v57 = v10;
  if (v17)
  {
    v55 = v7;
    v56 = a3;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v20 = v14;
    v21 = v19;
    v61 = v19;
    *(_DWORD *)v18 = 136315138;
    v22 = objc_msgSend(v20, "title");
    if (v22)
    {
      v23 = v22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v26 = v25;

    }
    else
    {
      v26 = 0xE200000000000000;
      v24 = 16718;
    }
    v60 = sub_10003D274(v24, v26, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v18 + 4, v18 + 12);
    v29 = v58;

    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Did receive section updates for list template with title %s.", v18, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v30 = v21;
    v14 = v29;
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v27 = (_QWORD *)v55[1];
    v6 = v59;
    v28 = ((uint64_t (*)(_BYTE *, uint64_t))v27)(v12, v59);
    a3 = v56;
    v10 = v57;
  }
  else
  {

    v27 = (_QWORD *)v7[1];
    v28 = ((uint64_t (*)(_BYTE *, uint64_t))v27)(v12, v6);
  }
  static OS_os_log.carPlay.getter(v28);
  v31 = swift_bridgeObjectRetain_n(a1, 4);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v32, (os_log_type_t)v33))
  {

    swift_bridgeObjectRelease_n(a1, 4);
    goto LABEL_22;
  }
  v34 = swift_slowAlloc(22, -1);
  *(_DWORD *)v34 = 134218240;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v51 = a1;
    else
      v51 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v35 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v35 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(a1);
  v61 = v35;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v34 + 4, v34 + 12);
  swift_bridgeObjectRelease(a1);
  *(_WORD *)(v34 + 12) = 2048;
  v61 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v49 = a1;
    else
      v49 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v36 = _CocoaArrayWrapper.endIndex.getter(v49);
    if (v36)
    {
LABEL_12:
      if (v36 < 1)
      {
        __break(1u);
        return;
      }
      v53 = v33;
      v54 = v32;
      v55 = v27;
      v56 = a3;
      v37 = 0;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, a1);
        else
          v38 = *(id *)(a1 + 8 * v37 + 32);
        v39 = v38;
        ++v37;
        v40 = objc_msgSend(v38, "items");
        v41 = sub_10003F544(&qword_1005544F0);
        v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40, v41);

        sub_1001734C4(v42);
      }
      while (v36 != v37);
      swift_bridgeObjectRelease(a1);
      v43 = v61;
      v27 = v55;
      a3 = v56;
      v32 = v54;
      LOBYTE(v33) = v53;
      if (!(v61 >> 62))
        goto LABEL_20;
LABEL_30:
      if (v43 < 0)
        v50 = v43;
      else
        v50 = v43 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v43);
      v44 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease(a1);
      v45 = v43;
      goto LABEL_21;
    }
  }
  else
  {
    v36 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v36)
      goto LABEL_12;
  }
  swift_bridgeObjectRelease(a1);
  v43 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    goto LABEL_30;
LABEL_20:
  v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
  v45 = a1;
LABEL_21:
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v43);
  v61 = v44;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v34 + 14, v34 + 22);
  swift_bridgeObjectRelease(a1);
  _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v33, "Did receive section updates with section count %ld and total section items count %ld.", (uint8_t *)v34, 0x16u);
  swift_slowDealloc(v34, -1, -1);

  v14 = v58;
  v6 = v59;
  v10 = v57;
LABEL_22:
  ((void (*)(_BYTE *, uint64_t))v27)(v10, v6);
  swift_beginAccess(a3 + 16, &v61, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3 + 16);
  if (Strong)
  {
    v47 = (void *)Strong;
    sub_1001A3600(a1);
    sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v14, "updateSections:", isa);

  }
}

void sub_1001A2304(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t Strong;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[3];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = a2 + 16;
  v10 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.carPlay.getter(v10);
  v11 = swift_unknownObjectRetain_n(v8, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v24 = v5;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v26[0] = v16;
    *(_DWORD *)v15 = 136315138;
    swift_getObjectType(v8, v17);
    v18 = sub_1001AB57C();
    if (v19)
    {
      v20 = v19;
    }
    else
    {
      v18 = 16718;
      v20 = 0xE200000000000000;
    }
    v23 = v4;
    v25 = sub_10003D274(v18, v20, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 4, v15 + 12);
    swift_unknownObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Did select item with title %s.", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
  }
  else
  {

    swift_unknownObjectRelease_n(v8, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_beginAccess(v9, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  if (Strong)
  {
    v22 = (void *)Strong;
    sub_1001A254C(v8);

  }
}

uint64_t sub_1001A254C(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t *v38;
  char *p_aBlock;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSString v67;
  id v68;
  Class isa;
  id v70;
  char *v71;
  void *v72;
  char *v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  id v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  Class v84;
  uint64_t v85;
  id v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  Class v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  id v97;
  id v98;
  uint64_t (*v99)();
  uint64_t *v100;
  id v101;
  uint64_t v102;
  void *v103;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  void *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  id v113;
  _BYTE v114[16];
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[3];
  __int128 aBlock;
  __int128 v119;
  uint64_t (*v120)();
  uint64_t v121;
  char v122[32];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v105 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v105 - v11;
  v13 = sub_10003F544((uint64_t *)&unk_100555310);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v105 - v17;
  v113 = a1;
  swift_unknownObjectRetain(a1);
  v19 = sub_10003F544(&qword_100556510);
  v20 = sub_10003F544(&qword_100556518);
  if (swift_dynamicCast(&aBlock, &v113, v19, v20, 6))
  {
    v111 = v3;
    v112 = v1;
    v22 = *((_QWORD *)&v119 + 1);
    v21 = v120;
    sub_10003A834(&aBlock, *((uint64_t *)&v119 + 1));
    v23 = (char *)(*((uint64_t (**)(uint64_t, uint64_t (*)()))v21 + 1))(v22, v21);
    sub_10003D380(&aBlock);
    v24 = (uint64_t)&v23[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
    swift_beginAccess(&v23[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], v122, 0, 0);
    sub_100007A64(v24, (uint64_t)v18, (uint64_t *)&unk_100555310);
    v25 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v18, 1, v25);
    v110 = v23;
    if (v26 != 1)
    {
      sub_100007A64((uint64_t)v18, (uint64_t)v16, (uint64_t *)&unk_100555310);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v25);
      if (EnumCaseMultiPayload == 2)
      {
        v108 = *(void **)v16;
        v40 = v16[8];
        v41 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
        static OS_os_log.carPlay.getter(v41);
        v42 = swift_unknownObjectRetain_n(a1, 2);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v43, v44))
        {
          v45 = swift_slowAlloc(12, -1);
          v107 = v40;
          v46 = (uint8_t *)v45;
          v106 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v106;
          *(_DWORD *)v46 = 136315138;
          swift_getObjectType(a1, v47);
          v48 = sub_1001AB57C();
          if (v49)
          {
            v50 = v49;
          }
          else
          {
            v48 = 16718;
            v50 = 0xE200000000000000;
          }
          v113 = (id)sub_10003D274(v48, v50, (uint64_t *)&aBlock);
          v23 = v110;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v46 + 4, v46 + 12);
          swift_unknownObjectRelease_n(a1, 2);
          swift_bridgeObjectRelease(v50);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Did select item with title %s for template info type now playing.", v46, 0xCu);
          v51 = v106;
          swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v51, -1, -1);
          v52 = v46;
          v40 = v107;
          swift_slowDealloc(v52, -1, -1);

        }
        else
        {

          swift_unknownObjectRelease_n(a1, 2);
        }
        (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v111);
        v94 = v112;
        v95 = *(void **)&v112[OBJC_IVAR___CarPlayController_interfaceController];
        if (!v95)
        {

          sub_1001A67AC(v108, v40);
LABEL_54:
          v38 = (uint64_t *)&unk_100555310;
          p_aBlock = v18;
          return sub_100007A28((uint64_t)p_aBlock, v38);
        }
        if ((_DWORD)v40 == 3)
        {
          v96 = swift_allocObject(&unk_1004B2110, 24, 7);
          *(_QWORD *)(v96 + 16) = v94;
          v97 = v95;
          v98 = v94;
          v99 = sub_1001A67EC;
        }
        else
        {
          v101 = v95;
          sub_1001A3EE8();
          v99 = 0;
          v96 = 0;
        }
        v102 = (uint64_t)v94 + OBJC_IVAR___CarPlayController_nowPlayingController;
        swift_beginAccess(v102, v117, 0, 0);
        sub_100007A64(v102, (uint64_t)&aBlock, &qword_1005562B8);
        if (*((_QWORD *)&v119 + 1))
        {
          sub_10000A520((uint64_t)&aBlock, (uint64_t)&v113);
          sub_100007A28((uint64_t)&aBlock, &qword_1005562B8);
          sub_10003A834(&v113, v115);
          v103 = v108;
          sub_1002A4CC4((uint64_t)v108, v40, v23[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_playbackSource], v95, (uint64_t)v99, v96);
          sub_1001A67AC(v103, v40);
          sub_10002CA30((uint64_t)v99, v96);

          goto LABEL_51;
        }
        sub_10002CA30((uint64_t)v99, v96);
        sub_1001A67AC(v108, v40);

        v100 = &qword_1005562B8;
LABEL_53:
        sub_100007A28((uint64_t)&aBlock, v100);
        goto LABEL_54;
      }
      if (EnumCaseMultiPayload == 11)
      {
        v28 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
        static OS_os_log.carPlay.getter(v28);
        v29 = swift_unknownObjectRetain_n(a1, 2);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(12, -1);
          v108 = (void *)swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v108;
          *(_DWORD *)v32 = 136315138;
          swift_getObjectType(a1, v33);
          v34 = sub_1001AB57C();
          if (v35)
          {
            v36 = v35;
          }
          else
          {
            v34 = 16718;
            v36 = 0xE200000000000000;
          }
          v113 = (id)sub_10003D274(v34, v36, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v32 + 4, v32 + 12);
          swift_unknownObjectRelease_n(a1, 2);
          swift_bridgeObjectRelease(v36);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Did select item with title %s for template info type reload.", v32, 0xCu);
          v37 = v108;
          swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v32, -1, -1);

        }
        else
        {

          swift_unknownObjectRelease_n(a1, 2);
        }
        (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v111);
        v91 = (uint64_t)&v112[OBJC_IVAR___CarPlayController_activeTemplateProvider];
        swift_beginAccess(&v112[OBJC_IVAR___CarPlayController_activeTemplateProvider], v117, 0, 0);
        sub_100007A64(v91, (uint64_t)&aBlock, &qword_100556418);
        if (*((_QWORD *)&v119 + 1))
        {
          sub_10000A520((uint64_t)&aBlock, (uint64_t)&v113);
          sub_100007A28((uint64_t)&aBlock, &qword_100556418);
          v92 = v115;
          v93 = v116;
          sub_10003A834(&v113, v115);
          (*(void (**)(uint64_t, uint64_t))(v93 + 24))(v92, v93);

LABEL_51:
          sub_10003D380(&v113);
          goto LABEL_54;
        }

        v100 = &qword_100556418;
        goto LABEL_53;
      }
      sub_1001A65B0((uint64_t)v16);
    }
    v53 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    static OS_os_log.carPlay.getter(v53);
    v54 = swift_unknownObjectRetain_n(a1, 2);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter();
    v57 = os_log_type_enabled(v55, v56);
    v109 = v18;
    if (v57)
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v59;
      *(_DWORD *)v58 = 136315138;
      swift_getObjectType(a1, v60);
      v61 = sub_1001AB57C();
      if (v62)
      {
        v63 = v62;
      }
      else
      {
        v61 = 16718;
        v63 = 0xE200000000000000;
      }
      v113 = (id)sub_10003D274(v61, v63, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v58 + 4, v58 + 12);
      swift_unknownObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Did select item with title %s and will attempt to push to a new list template.", v58, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n(a1, 2);
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v111);
    swift_getObjectType(a1, v64);
    sub_1001AB57C();
    if (v65)
    {
      v66 = v65;
      v67 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v66);
    }
    else
    {
      v67 = 0;
    }
    v68 = objc_allocWithZone((Class)CPListTemplate);
    sub_100005EC8(0, (unint64_t *)&unk_100555260, CPListSection_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v70 = objc_msgSend(v68, "initWithTitle:sections:", v67, isa);

    v113 = v70;
    sub_100005EC8(0, &qword_100554ED0, NSString_ptr);
    v71 = v110;
    v72 = (void *)NSString.init(stringLiteral:)("templateInfo", 12, 2);
    v73 = v71;
    sub_10017FF38((uint64_t)v72, (uint64_t)v71);

    v74 = *(void **)&v112[OBJC_IVAR___CarPlayController_interfaceController];
    if (v74)
    {
      v120 = j___ss6UInt64V8PodcastsE19int64Representations5Int64Vvg;
      v121 = 0;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v119 = sub_100153D50;
      *((_QWORD *)&v119 + 1) = &unk_1004B20D8;
      v75 = _Block_copy(&aBlock);
      v76 = v74;
      v77 = v70;
      objc_msgSend(v76, "pushTemplate:animated:completion:", v77, 1, v75);
      _Block_release(v75);

    }
    v78 = v113;
    sub_1001A4388(0x6574616C706D6574, 0xEC0000006F666E49, &aBlock);
    if (*((_QWORD *)&v119 + 1))
    {
      v79 = type metadata accessor for CarPlayTemplateInfo(0);
      if ((swift_dynamicCast(v117, &aBlock, (char *)&type metadata for Any + 8, v79, 6) & 1) != 0)
      {
        v80 = (id)v117[0];
        goto LABEL_33;
      }
    }
    else
    {
      sub_100007A28((uint64_t)&aBlock, (uint64_t *)&unk_100552300);
    }
    v80 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
LABEL_33:
    v81 = sub_1003489C0();
    v83 = v82;

    swift_bridgeObjectRelease(v83);
    v84 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v78, "setEmptyViewTitleVariants:", v84, swift_bridgeObjectRelease(v81).n128_f64[0]);

    sub_1001A4388(0x6574616C706D6574, 0xEC0000006F666E49, &aBlock);
    if (*((_QWORD *)&v119 + 1))
    {
      v85 = type metadata accessor for CarPlayTemplateInfo(0);
      if ((swift_dynamicCast(v117, &aBlock, (char *)&type metadata for Any + 8, v85, 6) & 1) != 0)
      {
        v86 = (id)v117[0];
LABEL_38:
        v87 = sub_1003489C0();
        v89 = v88;

        swift_bridgeObjectRelease(v87);
        v90 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v78, "setEmptyViewSubtitleVariants:", v90, swift_bridgeObjectRelease(v89).n128_f64[0]);

        v38 = (uint64_t *)&unk_100555310;
        p_aBlock = v109;
        return sub_100007A28((uint64_t)p_aBlock, v38);
      }
    }
    else
    {
      sub_100007A28((uint64_t)&aBlock, (uint64_t *)&unk_100552300);
    }
    v86 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
    goto LABEL_38;
  }
  v120 = 0;
  aBlock = 0u;
  v119 = 0u;
  v38 = (uint64_t *)&unk_100556520;
  p_aBlock = (char *)&aBlock;
  return sub_100007A28((uint64_t)p_aBlock, v38);
}

void CarPlayController.proxyShouldShowDialog(for:podcastTitle:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)objc_opt_self(MTEpisodeUnavailableUtil);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "longStringForUnavailableReason:podcastTitle:", a1, v8);

  if (v9)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v13 = *(void **)(v1 + OBJC_IVAR___CarPlayController_interfaceController);
    if (v13)
    {
      v14 = (_QWORD *)swift_allocObject(&unk_1004B1F30, 24, 7);
      v14[2] = a1;
      v15 = v13;
      CPInterfaceController.showAlert(with:completion:)(v10, v12, (void (*)(uint64_t))sub_1001A65A8, v14);

      swift_release(v14);
    }
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v17 = static OS_os_log.carPlay.getter(v16);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v20 = 134349056;
      v22 = EpisodeUnavailableReason.rawValue.getter(a1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v20 + 4, v20 + 12);
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Playback failed with reason %{public}ld and a reason string could not be created.", v20, 0xCu);
      swift_slowDealloc(v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_1001A3450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v9 = static OS_os_log.carPlay.getter(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134349056;
    v15 = EpisodeUnavailableReason.rawValue.getter(a3);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Playback failed with reason %{public}ld.  Alert was presented.", v12, 0xCu);
    swift_slowDealloc(v12, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_1001A3600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  unint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t EnumCaseMultiPayload;
  void *v48;
  int v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[12];
  int v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  _BYTE v87[24];
  _OWORD v88[3];

  v3 = v1;
  v5 = sub_10003F544((uint64_t *)&unk_100555310);
  __chkstk_darwin(v5);
  v7 = &v73[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Logger(0);
  v79 = *(char **)(v8 - 8);
  v80 = v8;
  __chkstk_darwin(v8);
  v10 = &v73[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)&v84 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    if (v11)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease(a1);
    v19 = _swiftEmptyArrayStorage;
    goto LABEL_15;
  }
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v11)
    goto LABEL_14;
LABEL_3:
  if (v11 < 1)
  {
    __break(1u);
LABEL_66:
    if (v11 >= 0)
      v72 = v12;
    else
      v72 = v11;
    swift_bridgeObjectRetain(v11);
    v33 = _CocoaArrayWrapper.endIndex.getter(v72);
    swift_bridgeObjectRelease(v11);
    if (v33)
      goto LABEL_24;
    goto LABEL_70;
  }
  v77 = v10;
  v78 = v3;
  v13 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
    else
      v14 = *(id *)(a1 + 8 * v13 + 32);
    v15 = v14;
    ++v13;
    v16 = objc_msgSend(v14, "items");
    v17 = sub_10003F544(&qword_1005544F0);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    sub_1001734C4(v18);
  }
  while (v11 != v13);
  swift_bridgeObjectRelease(a1);
  v19 = (_QWORD *)v84;
  v3 = v78;
  v10 = v77;
LABEL_15:
  v21 = (uint64_t)sub_10034EA84((unint64_t)v19);
  swift_bridgeObjectRelease(v19);
  if (!v21)
    return;
  v22 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.carPlay.getter(v22);
  v23 = swift_bridgeObjectRetain_n(v21, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  v26 = (unint64_t)v21 >> 62;
  if (os_log_type_enabled(v24, v25))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v27 = 134217984;
    v28 = v21;
    if (v26)
    {
      v78 = v3;
      if (v21 >= 0)
        v21 &= 0xFFFFFFFFFFFFFF8uLL;
      swift_bridgeObjectRetain(v28);
      v29 = _CocoaArrayWrapper.endIndex.getter(v21);
      v3 = v78;
      swift_bridgeObjectRelease(v28);
    }
    else
    {
      v29 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v28);
    *(_QWORD *)&v84 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease(v28);
    v30 = v25;
    v11 = v28;
    _os_log_impl((void *)&_mh_execute_header, v24, v30, "Attempting to update the play state for %ld items.", v27, 0xCu);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v21, 2);
    v11 = v21;
  }
  (*((void (**)(_BYTE *, unint64_t))v79 + 1))(v10, v80);
  v31 = *(_QWORD *)(v3 + OBJC_IVAR___CarPlayController_graph);
  if (!v31)
    goto LABEL_71;
  v32 = type metadata accessor for PlaybackController(0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(&v84, v32, v32);
  swift_release(v31);
  v2 = v84;
  v12 = v11 & 0xFFFFFFFFFFFFFF8;
  if (v26)
    goto LABEL_66;
  v33 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v33)
  {
LABEL_70:
    swift_release(v2);
LABEL_71:
    swift_bridgeObjectRelease(v11);
    return;
  }
LABEL_24:
  if (v33 >= 1)
  {
    v34 = 0;
    v80 = v11 & 0xC000000000000001;
    v79 = (char *)&type metadata for Any + 8;
    v75 = v11;
    v78 = v2;
    v77 = (_BYTE *)v33;
    while (1)
    {
      v36 = v80
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v11)
          : *(id *)(v11 + 8 * v34 + 32);
      v37 = v36;
      v38 = objc_msgSend(v36, "userInfo");
      if (v38)
      {
        v39 = v38;
        _bridgeAnyObjectToAny(_:)(v88, v38);
        swift_unknownObjectRelease(v39);
      }
      else
      {
        memset(v88, 0, 32);
      }
      sub_10003DC78((uint64_t)v88, (uint64_t)&v81, (uint64_t *)&unk_100552300);
      if (!*((_QWORD *)&v82 + 1))
        break;
      v40 = sub_100005EC8(0, (unint64_t *)&qword_100554EF0, NSDictionary_ptr);
      if ((swift_dynamicCast(v88, &v81, v79, v40, 6) & 1) == 0)
        goto LABEL_40;
      v41 = *(void **)&v88[0];
      strcpy((char *)&v81, "templateInfo");
      BYTE13(v81) = 0;
      HIWORD(v81) = -5120;
      v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v81, &type metadata for String);
      v43 = objc_msgSend(v41, "__swift_objectForKeyedSubscript:", v42);
      swift_unknownObjectRelease(v42);
      if (v43)
      {
        _bridgeAnyObjectToAny(_:)(&v81, v43);

        swift_unknownObjectRelease(v43);
      }
      else
      {

        v81 = 0u;
        v82 = 0u;
      }
      sub_10003DC78((uint64_t)&v81, (uint64_t)&v84, (uint64_t *)&unk_100552300);
      if (!*((_QWORD *)&v85 + 1))
        goto LABEL_41;
      v54 = type metadata accessor for CarPlayTemplateInfo(0);
      if ((swift_dynamicCast(&v81, &v84, (char *)&type metadata for Any + 8, v54, 6) & 1) == 0)
        goto LABEL_42;
      v44 = (char *)v81;
LABEL_43:
      v45 = (uint64_t)&v44[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type];
      swift_beginAccess(&v44[OBJC_IVAR____TtC8Podcasts19CarPlayTemplateInfo_type], v87, 0, 0);
      sub_100007A64(v45, (uint64_t)v7, (uint64_t *)&unk_100555310);

      v46 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v7, 1, v46) == 1)
      {
        sub_100007A28((uint64_t)v7, (uint64_t *)&unk_100555310);
      }
      else
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v46);
        if ((_DWORD)EnumCaseMultiPayload == 2)
        {
          v48 = *(void **)v7;
          v49 = v7[8];
          v50 = dispatch thunk of PlaybackController.nowPlayingItem.getter(EnumCaseMultiPayload);
          if (v50)
          {
            v51 = (void *)v50;
            v76 = MPModelObject.uuid.getter(v50);
            v53 = v52;

          }
          else
          {
            v76 = 0;
            v53 = 0;
          }
          v55 = dispatch thunk of PlaybackController.nowPlayingItem.getter(v50);
          if (v55)
          {
            v56 = (void *)v55;
            v57 = MPModelObject.adamID.getter(v55);
            v59 = v58;

            v60 = v59 & 1;
            if (v49)
              goto LABEL_55;
LABEL_58:
            *(_QWORD *)&v88[0] = v48;
            v61 = type metadata accessor for Action(0);
            swift_retain_n(v48, 2);
            v62 = sub_10003F544(&qword_100556528);
            if ((swift_dynamicCast(&v81, v88, v61, v62, 6) & 1) != 0)
            {
              sub_10002099C(&v81, (uint64_t)&v84);
              v63 = *((_QWORD *)&v85 + 1);
              v64 = v86;
              sub_10003A834(&v84, *((uint64_t *)&v85 + 1));
              v65 = dispatch thunk of PlayEpisodeActionModel.episodeIdentifier.getter(v63, v64);
              if (v67 != 0xFF)
              {
                v68 = v66;
                v69 = v67;
                v74 = v67 & 1;
                v70 = v65;
                v71 = static EpisodeStateIdentifier.generateIdsFrom(uuid:contentId:)(v76, v53, v57, v60);
                swift_bridgeObjectRelease(v53);
                v35 = sub_100291270(v70, v68, v74, v71);
                sub_1001A67AC(v48, 0);
                swift_bridgeObjectRelease(v71);
                sub_1001A67AC(v48, 0);
                sub_1001A6828(v70, v68, v69);
                sub_10003D380(&v84);
                v11 = v75;
                goto LABEL_56;
              }
              sub_1001A67AC(v48, 0);
              swift_bridgeObjectRelease(v53);
              sub_1001A67AC(v48, 0);
              sub_10003D380(&v84);
              v11 = v75;
            }
            else
            {
              v83 = 0;
              v81 = 0u;
              v82 = 0u;
              swift_bridgeObjectRelease(v53);
              sub_1001A67AC(v48, 0);
              sub_1001A67AC(v48, 0);
              sub_100007A28((uint64_t)&v81, (uint64_t *)&unk_100556530);
            }
            v2 = v78;
            v35 = 0;
          }
          else
          {
            v57 = 0;
            v60 = 1;
            if (!v49)
              goto LABEL_58;
LABEL_55:
            swift_bridgeObjectRelease(v53);
            sub_1001A67AC(v48, v49);
            v35 = 0;
LABEL_56:
            v2 = v78;
          }
          v33 = (uint64_t)v77;
          goto LABEL_28;
        }
        sub_1001A65B0((uint64_t)v7);
      }
      v35 = 0;
LABEL_28:
      ++v34;
      objc_msgSend(v37, "setPlaying:", v35 & 1);

      if (v33 == v34)
        goto LABEL_70;
    }
    sub_100007A28((uint64_t)&v81, (uint64_t *)&unk_100552300);
LABEL_40:
    v84 = 0u;
    v85 = 0u;
LABEL_41:
    sub_100007A28((uint64_t)&v84, (uint64_t *)&unk_100552300);
LABEL_42:
    v44 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
    goto LABEL_43;
  }
  __break(1u);
}

uint64_t sub_1001A3EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  __int128 aBlock;
  void (*v30)(uint64_t, uint64_t, void *);
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;
  _BYTE v34[24];
  _QWORD v35[5];

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v28 - v6;
  v8 = v0 + OBJC_IVAR___CarPlayController_nowPlayingController;
  swift_beginAccess(v0 + OBJC_IVAR___CarPlayController_nowPlayingController, v34, 0, 0);
  sub_100007A64(v8, (uint64_t)&aBlock, &qword_1005562B8);
  if (!v31)
    return sub_100007A28((uint64_t)&aBlock, &qword_1005562B8);
  sub_10002099C(&aBlock, (uint64_t)v35);
  v9 = *(void **)(v0 + OBJC_IVAR___CarPlayController_interfaceController);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v10, "templates");
    v12 = sub_100005EC8(0, (unint64_t *)&unk_100556470, CPTemplate_ptr);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

    __chkstk_darwin(v14);
    *(&v28 - 2) = (uint64_t)v35;
    v15 = sub_1001E8EF0((uint64_t (*)(id *))sub_1001A680C, (uint64_t)(&v28 - 4), v13);
    swift_bridgeObjectRelease(v13);
    if (v15)
    {
      v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v17 = static OS_os_log.carPlay.getter(v16);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Showing the Now Playing template by popping to an existing template.", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
      v32 = j___ss6UInt64V8PodcastsE19int64Representations5Int64Vvg;
      v33 = 0;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v30 = sub_100153D50;
      v31 = &unk_1004B2150;
      v21 = _Block_copy(&aBlock);
      objc_msgSend(v10, "popToTemplate:animated:completion:", v15, 1, v21);
    }
    else
    {
      v23 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v24 = static OS_os_log.carPlay.getter(v23);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, (os_log_type_t)v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v26, "Showing the Now Playing template by pushing a new template onto the stack.", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      v15 = objc_msgSend((id)objc_opt_self(CPNowPlayingTemplate), "sharedTemplate");
      v32 = j___ss6UInt64V8PodcastsE19int64Representations5Int64Vvg;
      v33 = 0;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v30 = sub_100153D50;
      v31 = &unk_1004B2128;
      v21 = _Block_copy(&aBlock);
      objc_msgSend(v10, "pushTemplate:animated:completion:", v15, 1, v21);
    }

    _Block_release(v21);
  }
  return sub_10003D380(v35);
}

BOOL sub_1001A429C(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = objc_msgSend((id)objc_opt_self(CPNowPlayingTemplate), "sharedTemplate");

  return v1 == v2;
}

void sub_1001A42F8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR___CarPlayController_interfaceController);
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(a1 + OBJC_IVAR___CarPlayController_interfaceController), "carTraitCollection");
    objc_msgSend(v3, "displayScale");
    v5 = v4;

  }
  else
  {
    v5 = 0;
  }
  v6 = a1 + OBJC_IVAR___CarPlayController_cachedScale;
  *(_QWORD *)v6 = v5;
  *(_BYTE *)(v6 + 8) = v2 == 0;
}

double sub_1001A4388@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void *v3;
  void *v4;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  double result;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;

  v4 = v3;
  v8 = objc_msgSend(v4, "userInfo");
  if (v8)
  {
    v9 = v8;
    _bridgeAnyObjectToAny(_:)(v15, v8);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  sub_10003DC78((uint64_t)v15, (uint64_t)&v16, (uint64_t *)&unk_100552300);
  if (!*((_QWORD *)&v17 + 1))
  {
    sub_100007A28((uint64_t)&v16, (uint64_t *)&unk_100552300);
    goto LABEL_9;
  }
  v10 = sub_100005EC8(0, (unint64_t *)&qword_100554EF0, NSDictionary_ptr);
  if ((swift_dynamicCast(v15, &v16, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
  {
LABEL_9:
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  v11 = *(void **)&v15[0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain_n(a2, 2);
  v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v16, &type metadata for String);
  v13 = objc_msgSend(v11, "__swift_objectForKeyedSubscript:", v12);
  swift_unknownObjectRelease(v12);
  if (v13)
  {
    _bridgeAnyObjectToAny(_:)(&v16, v13);

    swift_unknownObjectRelease(v13);
  }
  else
  {

    v16 = 0u;
    v17 = 0u;
  }
  sub_10003DC78((uint64_t)&v16, (uint64_t)a3, (uint64_t *)&unk_100552300);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  return result;
}

void sub_1001A4510()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(CRSOpenApplicationService), "defaultService");
  if (v0)
  {
    v1 = v0;
    v2 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "openApplication:completion:", v2, 0);

  }
}

id sub_1001A45A8()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  id v9;
  NSString v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  Class isa;
  Class v21;
  id v22;
  _QWORD aBlock[5];
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v26._object = (void *)0x8000000100431D10;
  v2._object = (void *)0x8000000100431CF0;
  v2._countAndFlagsBits = 0xD000000000000016;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0x1000000000000061;
  v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v26);

  v5 = objc_msgSend(v0, "mainBundle");
  v27._object = (void *)0xE700000000000000;
  v6._countAndFlagsBits = 0x5F59414C50524143;
  v6._object = (void *)0xEF5353494D534944;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v27._countAndFlagsBits = 0x7373696D736944;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v27)._object;

  v9 = objc_allocWithZone((Class)CPAlertAction);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  aBlock[4] = sub_1001A4510;
  v25 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AC13C;
  aBlock[3] = &unk_1004B2060;
  v11 = _Block_copy(aBlock);
  v12 = objc_msgSend(v9, "initWithTitle:style:handler:", v10, 1, v11);

  _Block_release(v11);
  swift_release(v25);
  v13 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v14 = swift_allocObject(v13, 48, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1003CA200;
  *(Swift::String *)(v14 + 32) = v4;
  v15 = sub_10003F544((uint64_t *)&unk_100553780);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v16 + 32) = v12;
  aBlock[0] = v16;
  specialized Array._endMutation()(v16);
  v17 = aBlock[0];
  v18 = objc_allocWithZone((Class)CPAlertTemplate);
  v19 = v12;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  sub_100005EC8(0, &qword_100556490, CPAlertAction_ptr);
  v21 = Array._bridgeToObjectiveC()().super.isa;
  v22 = objc_msgSend(v18, "initWithTitleVariants:actions:", isa, v21, swift_bridgeObjectRelease(v17).n128_f64[0]);

  return v22;
}

void sub_1001A4868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v5 = static OS_os_log.carPlay.getter(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Starting processors for CarPlay", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = sub_100005EC8(0, &qword_100556590, &off_1004A44F8);
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "sharedInstance");
  objc_msgSend(v10, "startProcessorsForCarPlay");

  v11 = sub_100005EC8(0, &qword_100556598, &off_1004A43F8);
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "sharedInstance");
  objc_msgSend(v12, "startIfNeeded");

  v13 = objc_msgSend((id)objc_opt_self(MTPodcastDerivedPropertyObserver), "sharedInstance");
  objc_msgSend(v13, "startObserving");

}

void sub_1001A4A24(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint8_t *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint8_t *v49;
  id v50;
  id v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t KeyPath;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  id v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  char *v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  id v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  int v140;
  id v141[3];
  unsigned __int8 v142[9];

  v2 = v1;
  v131 = sub_10003F544((uint64_t *)&unk_100563120);
  v129 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v128 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_100556540);
  v132 = *(_QWORD *)(v5 - 8);
  v133 = v5;
  __chkstk_darwin(v5);
  v130 = (char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100556548);
  v135 = *(_QWORD *)(v7 - 8);
  v136 = v7;
  __chkstk_darwin(v7);
  v134 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v9);
  v138 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v12 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544((uint64_t *)&unk_100556550);
  v126 = *(_QWORD *)(v13 - 8);
  v127 = v13;
  __chkstk_darwin(v13);
  v125 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v120 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v122 = (char *)&v120 - v20;
  v21 = __chkstk_darwin(v19);
  v137 = (char *)&v120 - v22;
  v23 = __chkstk_darwin(v21);
  v121 = (char *)&v120 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v120 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v120 - v28;
  v139 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v30 = static OS_os_log.carPlay.getter(v139);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = v15;
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Did connect to the CarPlay scene.", v34, 2u);
    v35 = v34;
    v15 = v33;
    swift_slowDealloc(v35, -1, -1);
  }

  v36 = v29;
  v37 = *(void (**)(char *, uint64_t))(v16 + 8);
  v37(v36, v15);
  v38 = objc_msgSend((id)objc_opt_self(IMNetworkObserver), "sharedInstance");
  objc_msgSend(v38, "beginObserving");

  v39 = *(void **)(v2 + OBJC_IVAR___CarPlayController_interfaceController);
  *(_QWORD *)(v2 + OBJC_IVAR___CarPlayController_interfaceController) = a1;
  v40 = a1;

  v41 = v2 + OBJC_IVAR___CarPlayController_cachedScale;
  *(_QWORD *)v41 = 0;
  *(_BYTE *)(v41 + 8) = 1;
  sub_10019D184();

  v142[0] = 0;
  v42 = objc_msgSend((id)objc_opt_self(MTWelcomeUtil), "carPlayShouldShowWelcome");
  if ((_DWORD)v42)
  {
    v44 = static OS_os_log.carPlay.getter(v42);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = v15;
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Attempting to present the welcome screen template.", v48, 2u);
      v49 = v48;
      v15 = v47;
      swift_slowDealloc(v49, -1, -1);
    }

    v37(v27, v15);
    v142[0] = 1;
    v50 = CarPlayController.welcomeScreenTemplate.getter();
    sub_1001A0A44(v50);

    v51 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    NSNotificationCenter.publisher(for:object:)(kMTDidMarkWelcomeAsShownNotification, 0);

    v52 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v141[0] = (id)static OS_dispatch_queue.main.getter(v53);
    v54 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v55 = (uint64_t)v138;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v138, 1, 1, v54);
    v56 = sub_100026844(&qword_100556578, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
    v57 = sub_1000489AC();
    v59 = v124;
    v58 = v125;
    Publisher.receive<A>(on:options:)(v141, v55, v124, v52, v56, v57);
    sub_100007A28(v55, &qword_1005564A0);

    (*(void (**)(char *, uint64_t))(v123 + 8))(v12, v59);
    v60 = swift_allocObject(&unk_1004B1FD0, 24, 7);
    swift_unknownObjectWeakInit(v60 + 16, v2);
    v61 = swift_allocObject(&unk_1004B2228, 32, 7);
    *(_QWORD *)(v61 + 16) = v60;
    *(_QWORD *)(v61 + 24) = v40;
    v62 = sub_10002F9C8((unint64_t *)&unk_100556580, (uint64_t *)&unk_100556550, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v63 = v40;
    v64 = v127;
    v65 = Publisher<>.sink(receiveValue:)(sub_1001A68C8, v61, v127, v62);
    swift_release(v61);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v58, v64);
    v66 = v2 + OBJC_IVAR___CarPlayController_subscriptions;
    swift_beginAccess(v2 + OBJC_IVAR___CarPlayController_subscriptions, v141, 33, 0);
    v67 = sub_10003F544((uint64_t *)&unk_100556450);
    v68 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
    AnyCancellable.store<A>(in:)(v66, v67, v68);
    swift_endAccess(v141);
    swift_release(v65);
  }
  if (qword_100551FB8 != -1)
    swift_once(&qword_100551FB8, sub_1000074E8);
  KeyPath = swift_getKeyPath(&unk_1003CBE28, v43);
  v71 = swift_getKeyPath(&unk_1003CBE50, v70);
  static Published.subscript.getter(v141);
  swift_release(KeyPath);
  v72 = swift_release(v71);
  if (((uint64_t)v141[0] & 1) != 0)
  {
    v73 = static OS_os_log.carPlay.getter(v72);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Migration is happening. Waiting until after it's finished...", v76, 2u);
      swift_slowDealloc(v76, -1, -1);
    }

    v77 = v15;
    v37(v137, v15);
    swift_beginAccess(qword_100572D40 + OBJC_IVAR___MTCarPlayMigrationBridge__isMigrating, v141, 33, 0);
    v78 = sub_10003F544(&qword_1005534E8);
    v79 = v128;
    Published.projectedValue.getter(v78);
    swift_endAccess(v141);
    v80 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v141[0] = (id)static OS_dispatch_queue.main.getter(v81);
    v82 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v83 = (uint64_t)v138;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v138, 1, 1, v82);
    v84 = sub_10002F9C8(&qword_100556560, (uint64_t *)&unk_100563120, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v85 = sub_1000489AC();
    v87 = v130;
    v86 = v131;
    Publisher.receive<A>(on:options:)(v141, v83, v131, v80, v84, v85);
    sub_100007A28(v83, &qword_1005564A0);

    (*(void (**)(char *, uint64_t))(v129 + 8))(v79, v86);
    v88 = sub_10002F9C8(&qword_100556568, &qword_100556540, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v89 = v133;
    v90 = v134;
    Publisher.first(where:)(sub_1001A1418, 0, v133, v88);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v87, v89);
    v91 = swift_allocObject(&unk_1004B1FD0, 24, 7);
    swift_unknownObjectWeakInit(v91 + 16, v2);
    v92 = swift_allocObject(&unk_1004B2200, 32, 7);
    *(_QWORD *)(v92 + 16) = v40;
    *(_QWORD *)(v92 + 24) = v91;
    v93 = sub_10002F9C8(&qword_100556570, &qword_100556548, (uint64_t)&protocol conformance descriptor for Publishers.FirstWhere<A>);
    v94 = v40;
    v95 = v136;
    v96 = Publisher<>.sink(receiveValue:)(sub_1001A6890, v92, v136, v93);
    swift_release(v92);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v90, v95);
    v97 = v2 + OBJC_IVAR___CarPlayController_subscriptions;
    swift_beginAccess(v2 + OBJC_IVAR___CarPlayController_subscriptions, v141, 33, 0);
    v98 = sub_10003F544((uint64_t *)&unk_100556450);
    v99 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
    AnyCancellable.store<A>(in:)(v97, v98, v99);
    swift_endAccess(v141);
    swift_release(v96);
    v100 = objc_msgSend(v94, "presentedTemplate");
    v101 = CarPlayController.welcomeScreenTemplate.getter();
    v102 = v101;
    if (v100)
    {

      v104 = v122;
      if (v100 == v102)
      {
        v105 = v120;
        v106 = static OS_os_log.carPlay.getter(v103);
        v107 = Logger.logObject.getter(v106);
        v108 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v107, v108))
        {
          v109 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v109 = 0;
          _os_log_impl((void *)&_mh_execute_header, v107, v108, "Skipping displyaing the migration template because the welcome template is already visible.", v109, 2u);
          swift_slowDealloc(v109, -1, -1);
        }

        v37(v105, v77);
        return;
      }
    }
    else
    {

      v104 = v122;
    }
    v115 = static OS_os_log.carPlay.getter(v103);
    v116 = Logger.logObject.getter(v115);
    v117 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v116, v117))
    {
      v118 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v118 = 0;
      _os_log_impl((void *)&_mh_execute_header, v116, v117, "Displaying migration template.", v118, 2u);
      swift_slowDealloc(v118, -1, -1);
    }

    v37(v104, v77);
    v119 = CarPlayController.migrationTemplate.getter();
    sub_1001A0A44(v119);

  }
  else if ((v142[0] & 1) != 0)
  {
    v110 = v121;
    v111 = static OS_os_log.carPlay.getter(v72);
    v112 = Logger.logObject.getter(v111);
    v113 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v112, v113))
    {
      v114 = swift_slowAlloc(14, -1);
      *(_DWORD *)v114 = 67109376;
      LODWORD(v141[0]) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, (char *)v141 + 4, v114 + 4, v114 + 8);
      *(_WORD *)(v114 + 8) = 1024;
      swift_beginAccess(v142, v141, 0, 0);
      v140 = v142[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v114 + 10, v114 + 14);
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "Bootstrap not starting. isMigrating: %{BOOL}d, isShowingWelcome: %{BOOL}d", (uint8_t *)v114, 0xEu);
      swift_slowDealloc(v114, -1, -1);
    }

    v37(v110, v15);
  }
  else
  {
    sub_1001A0DF0();
  }
}

id _s8Podcasts17CarPlayControllerC20sceneDidBecomeActiveyySo7UISceneCF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id result;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v7 = static OS_os_log.carPlay.getter(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Scene became active. Attempt to sync everything.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  result = *(id *)(v1 + OBJC_IVAR___CarPlayController_syncController);
  if (result)
    return objc_msgSend(result, "syncEverything");
  return result;
}

uint64_t _s8Podcasts17CarPlayControllerC18templateWillAppear_8animatedySo10CPTemplateC_SbtF_0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  char *v40;
  NSObject *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t result;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  id v133[3];
  char v134[24];
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v2 = sub_10003F544(&qword_100556498);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v6);
  v128 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_10003F544(&qword_1005564A8);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544((uint64_t *)&unk_1005564B0);
  v121 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v120 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v116 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v126 = (char *)&v115 - v16;
  v17 = __chkstk_darwin(v15);
  v127 = (char *)&v115 - v18;
  v19 = __chkstk_darwin(v17);
  v130 = (char *)&v115 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v115 - v21;
  v132 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.carPlay.getter(v132);
  v23 = a1;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  v26 = os_log_type_enabled(v24, v25);
  v125 = v2;
  v124 = v3;
  v123 = v5;
  v122 = v9;
  if (v26)
  {
    v129 = v11;
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v139 = v28;
    *(_DWORD *)v27 = 136315138;
    v29 = objc_msgSend(v23, "tabTitle");
    if (v29)
    {
      v30 = v29;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v33 = v32;

    }
    else
    {
      v33 = 0xE200000000000000;
      v31 = 16718;
    }
    *(_QWORD *)&v137 = sub_10003D274(v31, v33, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, (char *)&v137 + 8, v27 + 4, v27 + 12);

    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Template will appear called for template with tab title %s.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    v34 = *(void (**)(char *, uint64_t))(v12 + 8);
    v11 = v129;
    v34(v22, v129);
  }
  else
  {

    v34 = *(void (**)(char *, uint64_t))(v12 + 8);
    v34(v22, v11);
  }
  v35 = v131;
  v36 = objc_opt_self(CPListTemplate);
  v37 = swift_dynamicCastObjCClass(v23, v36);
  if (v37)
  {
    v38 = (void *)v37;
    v39 = v23;
    v40 = v130;
    static OS_os_log.carPlay.getter(v39);
    v41 = v39;
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v129 = v11;
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v139 = v45;
      *(_DWORD *)v44 = 136315138;
      v46 = objc_msgSend(v38, "title");
      if (v46)
      {
        v47 = v46;
        v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        v50 = v49;

      }
      else
      {
        v50 = 0xE200000000000000;
        v48 = 16718;
      }
      *(_QWORD *)&v137 = sub_10003D274(v48, v50, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, (char *)&v137 + 8, v44 + 4, v44 + 12);

      swift_bridgeObjectRelease(v50);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Template will appear called for list template with title %s.", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      v11 = v129;
      v34(v130, v129);
      v35 = v131;
    }
    else
    {

      v34(v40, v11);
    }
    CarPlayController.createProvider(forListTemplate:)(v38, (uint64_t)&v137);
    if (v138)
    {
      sub_10002099C(&v137, (uint64_t)&v139);
      v65 = v35 + OBJC_IVAR___CarPlayController_nowPlayingController;
      swift_beginAccess(v35 + OBJC_IVAR___CarPlayController_nowPlayingController, v134, 0, 0);
      sub_100007A64(v65, (uint64_t)&v135, &qword_1005562B8);
      if (v136)
      {
        sub_10002099C(&v135, (uint64_t)&v137);
        sub_10000A520((uint64_t)&v139, (uint64_t)&v135);
        v66 = v35 + OBJC_IVAR___CarPlayController_activeTemplateProvider;
        swift_beginAccess(v35 + OBJC_IVAR___CarPlayController_activeTemplateProvider, v133, 33, 0);
        sub_10016DE28((uint64_t)&v135, v66, &qword_100556418);
        swift_endAccess(v133);
        v67 = v140;
        v68 = v141;
        sub_10003A834(&v139, v140);
        *(_QWORD *)&v135 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v67, v68);
        v133[0] = *(id *)(*sub_10003A834(&v137, v138)
                        + OBJC_IVAR____TtC8Podcasts27CarPlayNowPlayingController_playbackItemDidChangeSubject);
        v69 = sub_10003F544((uint64_t *)&unk_100555110);
        v70 = sub_10002F9C8(&qword_1005564C0, (uint64_t *)&unk_100555110, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
        v133[0] = (id)Publisher.eraseToAnyPublisher()(v69, v70);
        v71 = sub_10003F544((uint64_t *)&unk_100556430);
        v72 = sub_10003F544(&qword_1005564C8);
        v73 = v35;
        v74 = sub_10002F9C8(&qword_1005551B8, (uint64_t *)&unk_100556430, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        v75 = sub_10002F9C8((unint64_t *)&unk_1005564D0, &qword_1005564C8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        v76 = v117;
        Publishers.CombineLatest.init(_:_:)(&v135, v133, v71, v72, v74, v75);
        v77 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
        *(_QWORD *)&v135 = static OS_dispatch_queue.main.getter(v78);
        v79 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
        v80 = (uint64_t)v128;
        v130 = *(char **)(*(_QWORD *)(v79 - 8) + 56);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v130)(v128, 1, 1, v79);
        v81 = sub_10002F9C8((unint64_t *)&unk_1005564E0, &qword_1005564A8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
        v82 = sub_1000489AC();
        v83 = v120;
        v84 = v119;
        v132 = v82;
        Publisher.receive<A>(on:options:)(&v135, v80, v119, v77, v81, v82);
        sub_100007A28(v80, &qword_1005564A0);

        (*(void (**)(char *, uint64_t))(v118 + 8))(v76, v84);
        v85 = swift_allocObject(&unk_1004B1FD0, 24, 7);
        swift_unknownObjectWeakInit(v85 + 16, v73);
        v86 = swift_allocObject(&unk_1004B2098, 32, 7);
        *(_QWORD *)(v86 + 16) = v38;
        *(_QWORD *)(v86 + 24) = v85;
        v87 = swift_allocObject(&unk_1004B20C0, 32, 7);
        *(_QWORD *)(v87 + 16) = sub_1001A6778;
        *(_QWORD *)(v87 + 24) = v86;
        v88 = sub_10002F9C8(&qword_1005564F0, (uint64_t *)&unk_1005564B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
        v89 = v41;
        v90 = v122;
        v91 = Publisher<>.sink(receiveValue:)(sub_100176B90, v87, v122, v88);
        swift_release(v87);
        (*(void (**)(char *, uint64_t))(v121 + 8))(v83, v90);
        v92 = OBJC_IVAR___CarPlayController_activeTemplateItemsSubscription;
        v93 = *(_QWORD *)(v73 + OBJC_IVAR___CarPlayController_activeTemplateItemsSubscription);
        if (v93)
        {
          swift_retain();
          AnyCancellable.cancel()();
          swift_release(v93);
          v94 = *(_QWORD *)(v73 + v92);
        }
        else
        {
          v94 = 0;
        }
        *(_QWORD *)(v73 + v92) = v91;
        swift_release(v94);
        v102 = v140;
        v103 = v141;
        sub_10003A834(&v139, v140);
        *(_QWORD *)&v135 = (*(uint64_t (**)(uint64_t, uint64_t))(v103 + 16))(v102, v103);
        v133[0] = (id)static OS_dispatch_queue.main.getter(v104);
        v105 = (uint64_t)v128;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v130)(v128, 1, 1, v79);
        v106 = sub_10003F544(&qword_1005564F8);
        v107 = sub_10002F9C8(&qword_100556500, &qword_1005564F8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        v108 = v123;
        Publisher.receive<A>(on:options:)(v133, v105, v106, v77, v107, v132);
        sub_100007A28(v105, &qword_1005564A0);

        swift_release(v135);
        v109 = swift_allocObject(&unk_1004B1FD0, 24, 7);
        swift_unknownObjectWeakInit(v109 + 16, v73);
        v110 = sub_10002F9C8(&qword_100556508, &qword_100556498, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
        v111 = v125;
        v112 = Publisher<>.sink(receiveValue:)(sub_1001A67A4, v109, v125, v110);
        swift_release(v109);
        (*(void (**)(char *, uint64_t))(v124 + 8))(v108, v111);
        v113 = OBJC_IVAR___CarPlayController_activeTemplateDidSelectItemSubscription;
        v114 = *(_QWORD *)(v73 + OBJC_IVAR___CarPlayController_activeTemplateDidSelectItemSubscription);
        if (v114)
        {
          swift_retain();
          AnyCancellable.cancel()();
          swift_release(v114);
          v114 = *(_QWORD *)(v73 + v113);
        }
        *(_QWORD *)(v73 + v113) = v112;

        swift_release(v114);
        sub_10003D380(&v137);
        return sub_10003D380(&v139);
      }
      sub_100007A28((uint64_t)&v135, &qword_1005562B8);
      v95 = sub_10003D380(&v139);
    }
    else
    {
      v95 = sub_100007A28((uint64_t)&v137, &qword_100556418);
    }
    v96 = v127;
    v97 = static OS_os_log.carPlay.getter(v95);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v98, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Could not create a provider and now playing controller.", v100, 2u);
      swift_slowDealloc(v100, -1, -1);
      v101 = v41;
    }
    else
    {
      v101 = v98;
      v98 = v41;
    }

    return ((uint64_t (*)(char *, uint64_t))v34)(v96, v11);
  }
  else
  {
    v51 = v126;
    v52 = static OS_os_log.carPlay.getter(0);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "aTemplate is not a list template.", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

    v34(v51, v11);
    v56 = objc_opt_self(CPTabBarTemplate);
    result = swift_dynamicCastObjCClass(v23, v56);
    if (!result)
    {
      v58 = v116;
      v59 = static OS_os_log.carPlay.getter(0);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Cancelling active template subscriptions for a template that is not a CPTabBarTemplate.", v62, 2u);
        swift_slowDealloc(v62, -1, -1);
      }

      result = ((uint64_t (*)(char *, uint64_t))v34)(v58, v11);
      v63 = *(_QWORD *)(v35 + OBJC_IVAR___CarPlayController_activeTemplateItemsSubscription);
      if (v63)
      {
        swift_retain();
        AnyCancellable.cancel()();
        result = swift_release(v63);
      }
      v64 = *(_QWORD *)(v35 + OBJC_IVAR___CarPlayController_activeTemplateDidSelectItemSubscription);
      if (v64)
      {
        swift_retain();
        AnyCancellable.cancel()();
        return swift_release(v64);
      }
    }
  }
  return result;
}

uint64_t sub_1001A6598()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A65A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001A3450(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1001A65B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CarPlayTemplateInfo.TemplateType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001A65EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(sub_10003F544((uint64_t *)&unk_100553DC0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 96) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);

  swift_release(*(_QWORD *)(v0 + 40));
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v8, v2 | 7);
}

uint64_t sub_1001A66B0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_10003F544((uint64_t *)&unk_100553DC0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1001A0580(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), (_OWORD *)(v0 + 48), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1001A6700()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A6710()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001A6738(void ***a1)
{
  uint64_t v1;

  sub_10019ECFC(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1001A6740()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A6764(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10019F24C(a1, a2, *(_QWORD *)(v2 + 16));
}

double sub_1001A676C(double a1)
{
  return round(a1);
}

void sub_1001A6778(uint64_t a1)
{
  uint64_t v1;

  sub_1001A1D84(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001A6780()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001A67A4(void **a1)
{
  uint64_t v1;

  sub_1001A2304(a1, v1);
}

void sub_1001A67AC(void *a1, char a2)
{
  if (a2 == 2)
  {

  }
  else if (!a2)
  {
    swift_release(a1);
  }
}

uint64_t sub_1001A67C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A67EC()
{
  return sub_1001A3EE8();
}

BOOL sub_1001A680C(id *a1)
{
  return sub_1001A429C(a1);
}

uint64_t sub_1001A6828(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_10003CA84(result, a2, a3 & 1);
  return result;
}

void sub_1001A6840()
{
  uint64_t v0;

  sub_1001A42F8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001A6848()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A6864()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001A6890(uint64_t a1)
{
  uint64_t v1;

  sub_1001A1428(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001A689C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001A68C8(uint64_t a1)
{
  uint64_t v1;

  sub_1001A0C40(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1001A68D0()
{
  uint64_t v0;

  return sub_1001A1880(v0);
}

void sub_1001A68D8(uint64_t a1)
{
  uint64_t v1;

  sub_1001A196C(a1, *(void **)(v1 + 16), (uint64_t)UInt64.int64Representation.getter, (uint64_t)&unk_1004B22E0);
}

void sub_1001A6900(uint64_t a1)
{
  uint64_t v1;

  sub_1001A196C(a1, *(void **)(v1 + 16), (uint64_t)j___ss6UInt64V8PodcastsE19int64Representations5Int64Vvg, (uint64_t)&unk_1004B22B8);
}

uint64_t sub_1001A695C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  id v90[3];
  char v91[32];

  v68 = sub_10003F544(&qword_100556718);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = (char *)&v65 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_10003F544(&qword_100556720);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v69 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v3);
  v89 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_10003F544(&qword_100556728);
  v87 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544((uint64_t *)&unk_100563120);
  v76 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544((uint64_t *)&unk_10055FF90);
  v74 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_10003F544(&qword_100556730);
  v77 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_100556738);
  v15 = *(_QWORD *)(v14 - 8);
  v79 = v14;
  v80 = v15;
  __chkstk_darwin(v14);
  v73 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_10003F544(&qword_100556740);
  v85 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v78 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_10003F544(&qword_100556748);
  v88 = *(_QWORD *)(v86 - 8);
  v18 = __chkstk_darwin(v86);
  v81 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = v0;
  v20 = dispatch thunk of PlaybackController.$nowPlayingItem.getter(v18);
  dispatch thunk of PlaybackController.$isPlaying.getter(v20);
  v21 = sub_10000C3B0();
  swift_beginAccess(v21 + 192, v91, 0, 0);
  v22 = *(void **)(v21 + 192);
  swift_retain(v22);
  swift_release(v21);
  v90[0] = v22;
  v23 = sub_10003F544(&qword_100556750);
  v24 = sub_10002F9C8(&qword_100556758, (uint64_t *)&unk_10055FF90, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v25 = sub_10002F9C8(&qword_100556560, (uint64_t *)&unk_100563120, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v26 = sub_10002F9C8(&qword_100556760, &qword_100556750, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.combineLatest<A, B>(_:_:)(v8, v90, v9, v6, v23, v24, v25, v26);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v11, v9);
  v27 = sub_10003F544(&qword_100556768);
  v28 = sub_10002F9C8(&qword_100556770, &qword_100556730, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  v29 = v73;
  v30 = v75;
  Publisher.map<A>(_:)(sub_1001A7618, 0, v75, v27, v28);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v13, v30);
  v31 = v72;
  v90[0] = *(id *)(v72 + 88);
  v32 = (void *)sub_10003F544(&qword_100556778);
  v33 = (void *)sub_10003F544(&qword_100556780);
  v34 = (void *)sub_10002F9C8(&qword_100556788, &qword_100556778, (uint64_t)&protocol conformance descriptor for RepublishingValueSubject<A, B>);
  v35 = v82;
  Publisher.nonNilValues<A>()(v32, v33, v34);
  v36 = sub_10002F9C8(&qword_100556790, &qword_100556738, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v90[0] = v32;
  v90[1] = v33;
  v90[2] = v34;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v90, &opaque type descriptor for <<opaque return type of Publisher.nonNilValues<A>()>>, 1);
  v39 = v78;
  v38 = v79;
  v40 = v84;
  Publisher.combineLatest<A>(_:)(v35, v79, v84, v36, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v35, v40);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v29, v38);
  v41 = sub_10002C5E0();
  v90[0] = (id)static OS_dispatch_queue.main.getter(v42);
  v43 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v44 = (uint64_t)v89;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v89, 1, 1, v43);
  v45 = sub_10002F9C8(&qword_100556798, &qword_100556740, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v46 = sub_100005E40((unint64_t *)&qword_1005551A0, 255, (uint64_t (*)(uint64_t))sub_10002C5E0, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v47 = v81;
  v48 = v83;
  Publisher.receive<A>(on:options:)(v90, v44, v83, v41, v45, v46);
  sub_100007A28(v44, &qword_1005564A0);

  (*(void (**)(char *, uint64_t))(v85 + 8))(v39, v48);
  v49 = sub_10002F9C8(&qword_1005567A0, &qword_100556748, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v50 = v86;
  v51 = Publisher<>.sink(receiveValue:)(sub_1001A766C, 0, v86, v49);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v47, v50);
  v52 = *(_QWORD *)(v31 + 72);
  *(_QWORD *)(v31 + 72) = v51;
  v53 = swift_release(v52);
  result = static Podcasts.isUIPSidebarEnabled.getter(v53);
  if ((result & 1) == 0)
  {
    v55 = v66;
    dispatch thunk of RootSplitViewController.$interfaceMode.getter();
    v56 = sub_10002F9C8(&qword_1005567A8, &qword_100556718, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v57 = sub_1001A8298();
    v58 = v69;
    v59 = v68;
    Publisher<>.removeDuplicates()(v68, v56, v57);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v55, v59);
    v60 = swift_allocObject(&unk_1004B2338, 24, 7);
    swift_weakInit(v60 + 16, v31);
    v61 = sub_10002F9C8(&qword_1005567B8, &qword_100556720, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
    v62 = v71;
    v63 = Publisher<>.sink(receiveValue:)(sub_1001A8300, v60, v71, v61);
    swift_release(v60);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v62);
    v64 = *(_QWORD *)(v31 + 64);
    *(_QWORD *)(v31 + 64) = v63;
    return swift_release(v64);
  }
  return result;
}

uint64_t sub_1001A7128(int a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v4 = v3;
  v8 = type metadata accessor for NowPlayingViewModel.PlayerStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v28 - v14;
  v16 = os_feature_enabled_red_sun(v13);
  if ((_DWORD)v16)
  {
    v31 = a3;
    v30 = a1;
    v17 = sub_10000C3B0();
    v18 = type metadata accessor for NowPlayingMediaPlayerController(0);
    v19 = sub_100005E40(&qword_1005566F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NowPlayingMediaPlayerController, (uint64_t)&protocol conformance descriptor for NowPlayingMediaPlayerController);
    v29 = v18;
    NowPlayingController.playerStyle.getter(v18, v19);
    swift_release(v17);
    v20 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
    v20(v12, enum case for NowPlayingViewModel.PlayerStyle.mini(_:), v8);
    LOBYTE(v17) = static NowPlayingViewModel.PlayerStyle.== infix(_:_:)(v15, v12);
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v22 = ((uint64_t (*)(char *, uint64_t))v21)(v15, v8);
    if ((v17 & 1) != 0)
    {
      v23 = *(_QWORD *)(v4 + 96);
      v24 = *(_QWORD *)(v4 + 104);
      v25 = v31;
      *(_QWORD *)(v4 + 96) = a2;
      *(_QWORD *)(v4 + 104) = v25;
      sub_10002CA20((uint64_t)a2, v25);
      sub_10002CA30(v23, v24);
      v26 = sub_10000C3B0();
      v20(v15, enum case for NowPlayingViewModel.PlayerStyle.fullScreen(_:), v8);
      NowPlayingController.transition(to:animated:)(v15, v30 & 1, v29, v19);
      swift_release(v26);
      v21(v15, v8);
    }
    else if (a2)
    {
      a2(v22);
    }
  }
  return v16;
}

uint64_t sub_1001A7308(int a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v4 = v3;
  v8 = type metadata accessor for NowPlayingViewModel.PlayerStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v28 - v14;
  v16 = os_feature_enabled_red_sun(v13);
  if ((_DWORD)v16)
  {
    v31 = a3;
    v30 = a1;
    v17 = sub_10000C3B0();
    v18 = type metadata accessor for NowPlayingMediaPlayerController(0);
    v19 = sub_100005E40(&qword_1005566F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NowPlayingMediaPlayerController, (uint64_t)&protocol conformance descriptor for NowPlayingMediaPlayerController);
    v29 = v18;
    NowPlayingController.playerStyle.getter(v18, v19);
    swift_release(v17);
    v20 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
    v20(v12, enum case for NowPlayingViewModel.PlayerStyle.fullScreen(_:), v8);
    LOBYTE(v17) = static NowPlayingViewModel.PlayerStyle.== infix(_:_:)(v15, v12);
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v22 = ((uint64_t (*)(char *, uint64_t))v21)(v15, v8);
    if ((v17 & 1) != 0)
    {
      v23 = *(_QWORD *)(v4 + 112);
      v24 = *(_QWORD *)(v4 + 120);
      v25 = v31;
      *(_QWORD *)(v4 + 112) = a2;
      *(_QWORD *)(v4 + 120) = v25;
      sub_10002CA20((uint64_t)a2, v25);
      sub_10002CA30(v23, v24);
      v26 = sub_10000C3B0();
      v20(v15, enum case for NowPlayingViewModel.PlayerStyle.mini(_:), v8);
      NowPlayingController.transition(to:animated:)(v15, v30 & 1, v29, v19);
      swift_release(v26);
      v21(v15, v8);
    }
    else if (a2)
    {
      a2(v22);
    }
  }
  return v16;
}

_QWORD *sub_1001A74E8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *result;
  void *v12;
  uint64_t v13;
  void *v14;

  v2 = sub_10003F544(&qword_100556700);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_100556708);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = RepublishingValueSubject.value.getter(&v14, v8);
  v12 = v14;
  if (v14)
  {
    if ((a1 & 1) != 0)
    {
      UISplitViewController.mcui.getter(result);
      MCUINamespace<A>.installNowPlayingViewController<A>(_:)(v12);

      return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      UITabBarController.mcui.getter(result);
      MCUINamespace<A>.installNowPlayingViewController<A>(_:)(v12);

      return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
  }
  return result;
}

uint64_t sub_1001A7618@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t result;

  v4 = *(void **)a1;
  v5 = *(_BYTE *)(a1 + 8);
  v6 = sub_10003F544(&qword_1005567C0);
  result = sub_1001A7944(v4, v5, a1 + *(int *)(v6 + 64));
  *a2 = result;
  return result;
}

void sub_1001A766C(id *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;

  v1 = a1[1];
  if (*a1)
  {
    v2 = *a1;
    v3 = objc_msgSend(v1, "view");
    if (v3)
    {
      v5 = v3;
      UIView.annotate(with:)(v2);

LABEL_6:
      return;
    }
    __break(1u);
  }
  else
  {
    v4 = objc_msgSend(a1[1], "view");
    if (v4)
    {
      v5 = v4;
      UIView.removeAnnotation()();
      goto LABEL_6;
    }
  }
  __break(1u);
}

uint64_t sub_1001A7708(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_1001A74E8(v2);
    return swift_release(v5);
  }
  return result;
}

void sub_1001A7764()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  id v3;

  v1 = v0;
  if ((static Podcasts.isUIPSidebarEnabled.getter() & 1) != 0
    || (v0 = (_QWORD *)v0[6], (dispatch thunk of RootSplitViewController.interfaceMode.getter() & 1) == 0))
  {
    v2 = objc_msgSend((id)v1[7], "view");
    if (v2)
    {
LABEL_6:
      v3 = v2;
      objc_msgSend(v2, "endEditing:", 1);

      return;
    }
    __break(1u);
  }
  v2 = objc_msgSend(v0, "view");
  if (v2)
    goto LABEL_6;
  __break(1u);
}

uint64_t sub_1001A77F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  sub_10002CA30(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10002CA30(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  return v0;
}

uint64_t sub_1001A7860()
{
  uint64_t v0;

  sub_1001A77F4();
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t sub_1001A7890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000C3B0();
  NowPlayingMediaPlayerController.didUpdateSelectedContent(from:to:)(a1, a2);
  return swift_release(v4);
}

uint64_t sub_1001A78E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  swift_retain();
  v5 = sub_10000C3B0();
  v6 = *(_QWORD *)(v5 + 96);
  swift_retain();
  swift_release(v5);
  NowPlayingMetricsControllerWrapper.observe(lifecycleEvent:)(a3);
  swift_release(a1);
  return swift_release(v6);
}

uint64_t sub_1001A7944(void *a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  void *v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  _QWORD v40[2];

  v6 = type metadata accessor for NowPlayingViewModel.PlayerStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v34 - v11;
  v13 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return 0;
  v16 = a1;
  v17 = (void *)MPModelPodcastEpisode.contentId.getter();
  if (v19 != -1)
  {
    v20 = v19;
    v38 = v17;
    v39 = v16;
    v37 = v18;
    v21 = ContentID.stringIdentifier.getter();
    v35 = v22;
    v36 = v21;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, a3, v6);
    if ((a2 & 1) != 0)
    {
      v23 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for NowPlayingViewModel.PlayerStyle.fullScreen(_:), v6);
      v25 = static NowPlayingViewModel.PlayerStyle.== infix(_:_:)(v12, v10);
      v26 = *(void (**)(char *, uint64_t))(v7 + 8);
      v26(v10, v6);
      v23 = ((uint64_t (*)(char *, uint64_t))v26)(v12, v6);
      if ((v25 & 1) == 0)
      {
        v40[0] = _swiftEmptyArrayStorage;
        v27 = sub_100005E40(&qword_1005567C8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
        v28 = sub_10003F544(&qword_1005567D0);
        v29 = sub_10002F9C8(&qword_1005567D8, &qword_1005567D0, (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(v40, v28, v29, v13, v27);
        goto LABEL_10;
      }
    }
    static AppEntityVisualState.primary.getter(v23);
LABEL_10:
    v30 = v39;
    v31 = type metadata accessor for EpisodeEntity(0);
    v40[0] = v36;
    v40[1] = v35;
    objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
    v32 = sub_100005E40(&qword_1005567E0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodeEntity, (uint64_t)&protocol conformance descriptor for EpisodeEntity);
    v24 = AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v31, v40, v15, v31, v32);

    sub_1001A8308(v38, v37, v20);
    return v24;
  }

  return 0;
}

uint64_t sub_1001A7BE4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  void (*v13)(__n128);
  _QWORD *v14;
  __n128 v15;
  __int128 v17;

  v4 = v3;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_QWORD *)(v4 + 16) = a1;
  v8 = sub_10003F544((uint64_t *)&unk_10055C430);
  swift_retain(a1);
  BaseObjectGraph.inject<A>(_:)(&v17, v8, v8);
  *(_OWORD *)(v4 + 24) = v17;
  v9 = type metadata accessor for PlaybackController(0);
  BaseObjectGraph.inject<A>(_:)(&v17, v9, v9);
  *(_QWORD *)(v4 + 40) = v17;
  *(_QWORD *)(v4 + 48) = a2;
  *(_QWORD *)(v4 + 56) = a3;
  *(_QWORD *)&v17 = 0;
  v10 = sub_10003F544(&qword_100556778);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = a2;
  v12 = a3;
  *(_QWORD *)(v4 + 88) = RepublishingValueSubject.init(_:)(&v17);
  v13 = *(void (**)(__n128))((swift_isaMask & *v12) + 0x208);
  v14 = v12;
  v15 = swift_retain(v4);
  v13(v15);

  return v4;
}

uint64_t sub_1001A7CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *);
  char v15;
  void (*v16)(char *, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  char v19;
  id v20;
  char v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v4 = type metadata accessor for NowPlayingViewModel.PlayerStyle(0);
  v5 = *(_QWORD **)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v25 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  v14 = (void (*)(char *))v5[13];
  v27 = enum case for NowPlayingViewModel.PlayerStyle.mini(_:);
  v14((char *)&v25 - v12);
  v15 = static NowPlayingViewModel.PlayerStyle.== infix(_:_:)(a1, v13);
  v16 = (void (*)(char *, uint64_t))v5[1];
  v16(v13, v4);
  v17 = (void (*)(char *, uint64_t, uint64_t))v5[2];
  v17(v11, a2, v4);
  if ((v15 & 1) != 0)
  {
    v26 = a2;
    v18 = enum case for NowPlayingViewModel.PlayerStyle.fullScreen(_:);
    ((void (*)(char *, _QWORD, uint64_t))v14)(v13, enum case for NowPlayingViewModel.PlayerStyle.fullScreen(_:), v4);
    v19 = static NowPlayingViewModel.PlayerStyle.== infix(_:_:)(v11, v13);
    v16(v13, v4);
    v16(v11, v4);
    if ((v19 & 1) != 0)
    {
      v20 = objc_msgSend(*(id *)(v28 + 56), "presentedViewController");
      if (v20
        || (v20 = objc_msgSend(*(id *)(v28 + 48), "presentedViewController")) != 0)
      {
        if (objc_msgSend(v20, "modalPresentationStyle") == (id)7)
          objc_msgSend(v20, "dismissViewControllerAnimated:completion:", 1, 0);

      }
    }
    a2 = v26;
  }
  else
  {
    v16(v11, v4);
    v18 = enum case for NowPlayingViewModel.PlayerStyle.fullScreen(_:);
  }
  ((void (*)(char *, uint64_t, uint64_t))v14)(v13, v18, v4);
  v21 = static NowPlayingViewModel.PlayerStyle.== infix(_:_:)(a1, v13);
  v16(v13, v4);
  v17(v8, a2, v4);
  if ((v21 & 1) == 0)
    return ((uint64_t (*)(char *, uint64_t))v16)(v8, v4);
  ((void (*)(char *, _QWORD, uint64_t))v14)(v13, v27, v4);
  v22 = static NowPlayingViewModel.PlayerStyle.== infix(_:_:)(v8, v13);
  v16(v13, v4);
  result = ((uint64_t (*)(char *, uint64_t))v16)(v8, v4);
  if ((v22 & 1) != 0)
  {
    v24 = sub_10000C3B0();
    NowPlayingMediaPlayerController.willTransitionToMiniPlayer()();
    return swift_release(v24);
  }
  return result;
}

uint64_t sub_1001A7F98(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t (*v14)(char *, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  void (*v18)(__n128);
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  void (*v22)(__n128);
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;

  v3 = v2;
  v6 = sub_10003F544(&qword_1005566F8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = &v9[*(int *)(v7 + 48)];
  v11 = type metadata accessor for NowPlayingViewModel.PlayerStyle(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v13(v9, a1, v11);
  v13(v10, a2, v11);
  v14 = *(uint64_t (**)(char *, uint64_t))(v12 + 88);
  v15 = v14(v9, v11);
  v16 = enum case for NowPlayingViewModel.PlayerStyle.mini(_:);
  if (v15 != enum case for NowPlayingViewModel.PlayerStyle.mini(_:))
  {
    if (v15 == enum case for NowPlayingViewModel.PlayerStyle.fullScreen(_:) && v14(v10, v11) == v16)
    {
      v22 = (void (*)(__n128))v3[14];
      if (v22)
      {
        v23 = v3[15];
        v24 = swift_retain();
        v22(v24);
        sub_10002CA30((uint64_t)v22, v23);
        v25 = v3[14];
      }
      else
      {
        v25 = 0;
      }
      v31 = v3[15];
      v3[14] = 0;
      v3[15] = 0;
      sub_10002CA30(v25, v31);
      v32 = (void *)objc_opt_self(NSNotificationCenter);
      v33 = objc_msgSend(v32, "defaultCenter");
      objc_msgSend(v33, "removeObserver:name:object:", v3, MTApplicationDidEnterBackgroundNotification, 0);

      v34 = objc_msgSend(v32, "defaultCenter");
      objc_msgSend(v34, "removeObserver:name:object:", v3, MTApplicationDidBecomeActiveNotification, 0);

      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    }
    return sub_100007A28((uint64_t)v9, &qword_1005566F8);
  }
  if (v14(v10, v11) != enum case for NowPlayingViewModel.PlayerStyle.fullScreen(_:))
    return sub_100007A28((uint64_t)v9, &qword_1005566F8);
  v17 = sub_10000C3B0();
  NowPlayingMediaPlayerController.didTransitionToFullScreenPlayer()();
  swift_release(v17);
  v18 = (void (*)(__n128))v3[12];
  if (v18)
  {
    v19 = v3[13];
    v20 = swift_retain();
    v18(v20);
    sub_10002CA30((uint64_t)v18, v19);
    v21 = v3[12];
  }
  else
  {
    v21 = 0;
  }
  v27 = v3[13];
  v3[12] = 0;
  v3[13] = 0;
  sub_10002CA30(v21, v27);
  v28 = (void *)objc_opt_self(NSNotificationCenter);
  v29 = objc_msgSend(v28, "defaultCenter");
  objc_msgSend(v29, "addObserver:selector:name:object:", v3, "appExitedWhileFullPlayerAppeared", MTApplicationDidEnterBackgroundNotification, 0);

  v30 = objc_msgSend(v28, "defaultCenter");
  objc_msgSend(v30, "addObserver:selector:name:object:", v3, "appEnteredWhileFullPlayerAppeared", MTApplicationDidBecomeActiveNotification, 0);

  sub_1001A7764();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v9, v11);
}

unint64_t sub_1001A8298()
{
  unint64_t result;

  result = qword_1005567B0;
  if (!qword_1005567B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InterfaceMode, &type metadata for InterfaceMode);
    atomic_store(result, (unint64_t *)&qword_1005567B0);
  }
  return result;
}

uint64_t sub_1001A82DC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A8300(char *a1)
{
  uint64_t v1;

  return sub_1001A7708(a1, v1);
}

void sub_1001A8308(void *a1, id a2, char a3)
{
  if (a3 != -1)
    sub_1001A831C(a1, a2, a3);
}

void sub_1001A831C(void *a1, id a2, char a3)
{
  if (a3 == 2)
  {

  }
  else if (a3 == 1)
  {
    swift_bridgeObjectRelease(a2);
  }
}

id sub_1001A8364()
{
  _BYTE *v0;
  char *v1;
  _QWORD *v2;
  id result;
  id v4;
  objc_super v5;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_allowNotificationsSection] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeSection] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_serverPushSection] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections] = _swiftEmptyArrayStorage;
  v1 = &v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_delegate];
  *((_QWORD *)v1 + 1) = 0;
  swift_unknownObjectWeakInit(v1, 0);
  v2 = &v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeNotifcationGroupInitialHighlightedPodcastUuid];
  *v2 = 0;
  v2[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_subscriptions] = _swiftEmptyArrayStorage;
  v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_hasLoadedSettings] = 0;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for MTNotificationSettingsSectionedViewController();
  result = objc_msgSendSuper2(&v5, "init");
  if (result)
  {
    v4 = result;
    sub_1001AA124();

    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001A8450()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  unsigned int v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  id v35;
  unsigned __int8 v36;
  id v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  char v56[48];
  _BYTE v57[24];
  _BYTE v58[40];
  _QWORD v59[3];
  uint64_t v60;
  _UNKNOWN **v61;

  if ((v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_hasLoadedSettings] & 1) == 0)
  {
    v1 = v0;
    v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_hasLoadedSettings] = 1;
    v2 = sub_1001EAA84();
    v3 = OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeSection;
    v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeSection];
    *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeSection] = v2;
    swift_release(v4);
    v5 = *(_QWORD *)&v0[v3];
    if (v5)
    {
      v60 = type metadata accessor for MTNotificationSettingsSectionedViewController();
      v61 = &off_1004B2378;
      v59[0] = v1;
      sub_1001AB3C8((uint64_t)v59, (uint64_t)v58);
      swift_beginAccess(v5 + 48, v57, 33, 0);
      swift_retain();
      v6 = v1;
      sub_1001AB410((uint64_t)v58, v5 + 48);
      swift_endAccess(v57);
      swift_release(v5);
    }
    v7 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
    v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "sharedInstance");
    v9 = objc_msgSend(v8, "isUserLoggedIn");

    if (v9)
    {
      v10 = objc_msgSend(v1, "traitCollection");
      v11 = UITraitCollection.interfaceIdiomIsMac.getter();

      if ((v11 & 1) == 0)
      {
        v12 = _s17ServerPushSectionCMa();
        swift_allocObject(v12, 96, 7);
        sub_1002D6834((uint64_t)&off_1004ACE88);
        v13 = OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_serverPushSection;
        v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_serverPushSection];
        *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_serverPushSection] = v15;
        swift_release(v14);
        v16 = *(_QWORD *)&v1[v13];
        if (v16)
        {
          v60 = type metadata accessor for MTNotificationSettingsSectionedViewController();
          v61 = &off_1004B2378;
          v59[0] = v1;
          sub_1001AB3C8((uint64_t)v59, (uint64_t)v58);
          swift_beginAccess(v16 + 48, v57, 33, 0);
          v17 = v1;
          swift_retain();
          sub_1001AB410((uint64_t)v58, v16 + 48);
          swift_endAccess(v57);
          swift_release(v16);
        }
      }
    }
    v18 = sub_10003F544(&qword_100556908);
    inited = swift_initStackObject(v18, v56);
    *(_OWORD *)(inited + 16) = xmmword_1003CA220;
    *(_QWORD *)(inited + 32) = *(_QWORD *)&v1[v3];
    *(_QWORD *)(inited + 40) = *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_serverPushSection];
    v59[0] = inited;
    specialized Array._endMutation()(inited);
    v20 = v59[0];
    v59[0] = _swiftEmptyArrayStorage;
    v21 = *(_QWORD *)(v20 + 32);
    if (v21)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v24 = *(_QWORD *)((v59[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v23 = *(_QWORD *)((v59[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v24 >= v23 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
      v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v21);
      specialized Array._endMutation()(v25);
      v26 = *(_QWORD *)(v20 + 40);
      if (!v26)
      {
LABEL_17:
        v31 = v59[0];
        swift_bridgeObjectRelease(v20);
        v32 = (uint64_t *)&v1[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections];
        swift_beginAccess(&v1[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections], v57, 1, 0);
        v33 = *v32;
        *v32 = v31;
        swift_bridgeObjectRelease(v33);
        v34 = (void *)objc_opt_self(NSUserDefaults);
        v35 = objc_msgSend(v34, "_applePodcastsFoundationSharedUserDefaults");
        v36 = objc_msgSend(v35, "BOOLForKey:", kMTDidPromptForNotificationsPermissionsKey);

        if ((v36 & 1) != 0
          && (v37 = objc_msgSend(v34, "_applePodcastsFoundationSharedUserDefaults"),
              v38 = objc_msgSend(v37, "BOOLForKey:", kMTNotificationStatusIsAuthorizedKey),
              v37,
              (v38 & 1) == 0))
        {
          v43 = _s25AllowNotificationsSectionCMa();
          swift_allocObject(v43, 96, 7);
          sub_1002DE7C0();
          v42 = v44;
          v60 = type metadata accessor for MTNotificationSettingsSectionedViewController();
          v61 = &off_1004B2378;
          v59[0] = v1;
          sub_1001AB3C8((uint64_t)v59, (uint64_t)v58);
          swift_beginAccess(v42 + 48, v55, 33, 0);
          v45 = v1;
          sub_1001AB410((uint64_t)v58, v42 + 48);
          swift_endAccess(v55);
          v46 = *(_QWORD *)&v45[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_allowNotificationsSection];
          *(_QWORD *)&v45[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_allowNotificationsSection] = v42;
          swift_retain();
          swift_release(v46);
          swift_beginAccess(v32, v59, 33, 0);
          v41 = *v32;
          if (!((unint64_t)*v32 >> 62))
          {
            swift_retain();
            goto LABEL_25;
          }
        }
        else
        {
          if (*(_QWORD *)&v1[v3] && byte_100572DA8 != 1)
            goto LABEL_31;
          v39 = _s22NoSubscriptionsSectionCMa();
          swift_allocObject(v39, 96, 7);
          sub_10020F89C();
          v41 = v40;
          swift_beginAccess(v32, v59, 33, 0);
          v42 = *v32;
          if (!((unint64_t)*v32 >> 62)
            || (v42 < 0 ? (v50 = *v32) : (v50 = v42 & 0xFFFFFFFFFFFFFF8),
                swift_bridgeObjectRetain(*v32),
                v51 = _CocoaArrayWrapper.endIndex.getter(v50),
                swift_bridgeObjectRelease(v42),
                (v51 & 0x8000000000000000) == 0))
          {
            sub_1001B331C(0, 0, v41);
            swift_endAccess(v59);
LABEL_31:
            sub_1001A94A4();
            return;
          }
          __break(1u);
        }
        if (v41 < 0)
          v52 = v41;
        else
          v52 = v41 & 0xFFFFFFFFFFFFFF8;
        swift_retain();
        swift_bridgeObjectRetain(v41);
        v49 = _CocoaArrayWrapper.endIndex.getter(v52);
        swift_bridgeObjectRelease(v41);
        if (v49 < 0)
        {
          __break(1u);
          goto LABEL_43;
        }
LABEL_25:
        sub_1001B331C(0, 0, v42);
        swift_endAccess(v59);
        if (*(_QWORD *)&v1[v3] && byte_100572DA8 != 1)
          goto LABEL_30;
        v47 = _s22NoSubscriptionsSectionCMa();
        swift_allocObject(v47, 96, 7);
        sub_10020F89C();
        v41 = v48;
        swift_beginAccess(v32, v59, 33, 0);
        v49 = *v32;
        if (!((unint64_t)*v32 >> 62))
        {
          if (*(uint64_t *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
          {
LABEL_47:
            __break(1u);
            return;
          }
          goto LABEL_29;
        }
LABEL_43:
        if (v49 < 0)
          v53 = v49;
        else
          v53 = v49 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v49);
        v54 = _CocoaArrayWrapper.endIndex.getter(v53);
        swift_bridgeObjectRelease(v49);
        if (v54 < 1)
          goto LABEL_47;
LABEL_29:
        sub_1001B331C(1, 1, v41);
        swift_endAccess(v59);
LABEL_30:
        swift_release(v42);
        goto LABEL_31;
      }
    }
    else
    {
      swift_retain();
      swift_retain();
      v26 = *(_QWORD *)(v20 + 40);
      if (!v26)
        goto LABEL_17;
    }
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
    v29 = *(_QWORD *)((v59[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v28 = *(_QWORD *)((v59[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v29 >= v28 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
    v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v26);
    specialized Array._endMutation()(v30);
    goto LABEL_17;
  }
}

id sub_1001A8AA4(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  id result;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  double v35;
  NSDictionary v36;
  unint64_t v37;
  char v38;
  char v39;
  char v40;
  void *v41;
  char *v42;
  NSIndexSet *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[2];
  __int128 v61;
  uint64_t v62;
  _BYTE v63[40];
  char v64[32];

  v3 = v2;
  v56 = type metadata accessor for IndexSet(0);
  v55 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v54 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001A94A4();
  v58 = *(_QWORD *)(a1 + 16);
  if (!v58)
    goto LABEL_61;
  v7 = (uint64_t *)&v2[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections];
  v57 = a1 + 32;
  v49 = a1;
  swift_bridgeObjectRetain(a1);
  swift_beginAccess(v7, v64, 0, 0);
  v8 = 0;
  v53 = (char *)&type metadata for Any + 8;
  v51 = v2;
  v50 = a2;
  v52 = v7;
  while (1)
  {
    v9 = (uint64_t *)(v57 + 16 * v8);
    v11 = *v9;
    v10 = v9[1];
    v12 = *v7;
    if ((unint64_t)*v7 >> 62)
      break;
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    if (v13)
      goto LABEL_7;
LABEL_3:
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v12);
LABEL_4:
    if (++v8 == v58)
    {
      swift_bridgeObjectRelease(v49);
LABEL_61:
      result = (id)swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_delegate]);
      if (result)
      {
        v47 = result;
        sub_1001A8450();
        return (id)swift_unknownObjectRelease(v47);
      }
      return result;
    }
  }
  if (v12 < 0)
    v46 = *v7;
  else
    v46 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  v13 = _CocoaArrayWrapper.endIndex.getter(v46);
  if (!v13)
    goto LABEL_3;
LABEL_7:
  if ((v12 & 0xC000000000000001) != 0)
  {
    v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
  }
  else
  {
    v14 = *(_QWORD *)(v12 + 32);
    swift_retain();
  }
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v15 == v11 && v16 == v10)
  {
    swift_bridgeObjectRelease(v12);
    swift_release(v14);
    v19 = 0;
    goto LABEL_35;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v11, v10, 0);
  swift_release(v14);
  if ((v18 & 1) != 0)
  {
    swift_bridgeObjectRelease(v12);
    v19 = 0;
LABEL_34:
    v7 = v52;
LABEL_35:
    result = objc_msgSend(v3, "settingsController");
    if (!result)
      goto LABEL_67;
    v28 = result;
    *(_QWORD *)&v61 = v11;
    *((_QWORD *)&v61 + 1) = v10;
    swift_bridgeObjectRetain(v10);
    result = (id)AnyHashable.init<A>(_:)(&v61, &type metadata for String, &protocol witness table for String);
    v29 = *v7;
    if ((*v7 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain(*v7);
      v30 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v29);
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      if ((v19 & 0x8000000000000000) != 0)
        goto LABEL_65;
      if (v19 >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_66;
      v30 = *(_QWORD *)(v29 + 8 * v19 + 32);
      swift_retain();
    }
    v31 = *(id *)(v30 + 40);
    swift_release(v30);
    v62 = sub_100005EC8(0, &qword_100556900, &off_1004A4540);
    *(_QWORD *)&v61 = v31;
    result = objc_msgSend(v28, "groups");
    if (!result)
      goto LABEL_68;
    v32 = result;
    v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(result, &type metadata for AnyHashable, v53, &protocol witness table for AnyHashable);
    swift_bridgeObjectRelease(v10);

    if (v62)
    {
      sub_10013B9CC(&v61, v60);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
      v59 = v33;
      sub_10021BE3C(v60, (uint64_t)v63, isUniquelyReferenced_nonNull_native);
      v33 = v59;
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_100048644((uint64_t)v63);
      if (v33)
        goto LABEL_43;
LABEL_50:
      v36.super.isa = 0;
    }
    else
    {
      sub_100007A28((uint64_t)&v61, (uint64_t *)&unk_100552300);
      swift_bridgeObjectRetain(v33);
      v37 = sub_1001CCFC0((uint64_t)v63);
      v39 = v38;
      swift_bridgeObjectRelease(v33);
      if ((v39 & 1) != 0)
      {
        v40 = swift_isUniquelyReferenced_nonNull_native(v33);
        v59 = v33;
        if ((v40 & 1) == 0)
        {
          sub_10021D67C();
          v33 = v59;
        }
        sub_100048644(*(_QWORD *)(v33 + 48) + 40 * v37);
        sub_10013B9CC((_OWORD *)(*(_QWORD *)(v33 + 56) + 32 * v37), v60);
        sub_10021AAB4(v37, v33);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      else
      {
        memset(v60, 0, sizeof(v60));
      }
      sub_100048644((uint64_t)v63);
      sub_100007A28((uint64_t)v60, (uint64_t *)&unk_100552300);
      if (!v33)
        goto LABEL_50;
LABEL_43:
      v36.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v35 = swift_bridgeObjectRelease(v33).n128_u64[0];
    }
    objc_msgSend(v28, "setGroups:", v36.super.isa, v35);

    result = objc_msgSend(v3, "tableView");
    if (!result)
      goto LABEL_69;
    v41 = result;
    v42 = v54;
    IndexSet.init(integer:)(v19);
    IndexSet._bridgeToObjectiveC()(v43);
    v45 = v44;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v42, v56);
    objc_msgSend(v41, "reloadSections:withRowAnimation:", v45, a2);

    goto LABEL_4;
  }
  if (v13 == 1)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v12);
LABEL_30:
    v7 = v52;
    goto LABEL_4;
  }
  v20 = 5;
  while (2)
  {
    v19 = v20 - 4;
    if ((v12 & 0xC000000000000001) != 0)
    {
      v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, v12);
    }
    else
    {
      v21 = *(_QWORD *)(v12 + 8 * v20);
      swift_retain();
    }
    v22 = *(_QWORD *)(v21 + 16);
    v23 = *(_QWORD *)(v21 + 24);
    if (v22 == v11 && v23 == v10)
    {
      swift_bridgeObjectRelease(v12);
      swift_release(v21);
LABEL_33:
      v3 = v51;
      a2 = v50;
      goto LABEL_34;
    }
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v11, v10, 0);
    result = (id)swift_release(v21);
    if ((v25 & 1) != 0)
    {
      swift_bridgeObjectRelease(v12);
      goto LABEL_33;
    }
    v27 = v20 - 3;
    if (!__OFADD__(v19, 1))
    {
      ++v20;
      if (v27 == v13)
      {
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v12);
        v3 = v51;
        a2 = v50;
        goto LABEL_30;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

void sub_1001A90E8(uint64_t a1, uint64_t a2, char a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  double v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[5];
  uint64_t v51;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  __chkstk_darwin(v8);
  v47 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  __chkstk_darwin(v10);
  v43 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v44 - 8);
  v13 = __chkstk_darwin(v44);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v41 - v16;
  v18 = *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeSection];
  if (v18)
  {
    v19 = objc_msgSend(*(id *)(v18 + 40), "groupSettings", swift_retain().n128_f64[0]);
    if (v19)
    {
      v20 = v19;
      v21 = sub_100005EC8(0, (unint64_t *)&qword_100554908, off_1004A4538);
      v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

      __chkstk_darwin(v23);
      *(&v41 - 2) = a1;
      *(&v41 - 1) = a2;
      v24 = sub_1001E8EF0((uint64_t (*)(id *))sub_1001AB4B8, (uint64_t)(&v41 - 4), v22);
      swift_release(v18);
      *(_QWORD *)&v25 = swift_bridgeObjectRelease(v22).n128_u64[0];
      if (v24)
      {
        objc_msgSend(v4, "setCellEmphasisStyle:", 2, v25);
        objc_msgSend(v4, "setEmphasizedSetting:", v24);
        v26 = &v4[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeNotifcationGroupInitialHighlightedPodcastUuid];
        v27 = *(_QWORD *)&v4[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeNotifcationGroupInitialHighlightedPodcastUuid
                           + 8];
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        swift_bridgeObjectRelease(v27);
        if ((a3 & 1) != 0)
        {
          sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
          v29 = (void *)static OS_dispatch_queue.main.getter(v28);
          static DispatchTime.now()(v29);
          + infix(_:_:)(v15, 1.0);
          v42 = *(void (**)(char *, uint64_t))(v12 + 8);
          v30 = v44;
          v42(v15, v44);
          v31 = swift_allocObject(&unk_1004B23A0, 24, 7);
          swift_unknownObjectWeakInit(v31 + 16, v4);
          aBlock[4] = sub_1001AB4A0;
          v51 = v31;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100027AF8;
          aBlock[3] = &unk_1004B23E0;
          v32 = _Block_copy(aBlock);
          v33 = swift_release(v51);
          v34 = v43;
          static DispatchQoS.unspecified.getter(v33);
          aBlock[0] = _swiftEmptyArrayStorage;
          v35 = sub_10017F258();
          v36 = sub_10003F544((uint64_t *)&unk_10055B200);
          v37 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
          v38 = v47;
          v39 = v36;
          v40 = v49;
          dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v39, v37, v49, v35);
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v34, v38, v32);
          _Block_release(v32);

          (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v40);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v34, v46);
          v42(v17, v30);
        }
        else
        {

        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1001A94A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  id v24;
  void *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  Class isa;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v72;
  unint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  char v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  Class v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  uint64_t result;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  id v105;
  uint64_t *v106;
  uint64_t v107;
  __int128 v108;
  void *v109;
  _QWORD *v110;

  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections, &v108, 33, 0);
  v106 = v3;
  v4 = *v3;
  if ((unint64_t)*v3 >> 62)
    goto LABEL_80;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v3);
  if (!v5)
  {
LABEL_13:
    swift_bridgeObjectRelease(v4);
    v17 = *v106;
    if ((unint64_t)*v106 >> 62)
    {
      if (v17 < 0)
        v98 = *v106;
      else
        v98 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v106);
      v6 = _CocoaArrayWrapper.endIndex.getter(v98);
      swift_bridgeObjectRelease(v17);
    }
    else
    {
      v6 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    goto LABEL_15;
  }
LABEL_3:
  v6 = 0;
  v7 = v4 & 0xC000000000000001;
  v1 = (uint64_t)&protocol conformance descriptor for [A];
  while (1)
  {
    if (v7)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
    }
    else
    {
      v8 = *(_QWORD *)(v4 + 8 * v6 + 32);
      *(_QWORD *)&v9 = swift_retain().n128_u64[0];
    }
    v10 = objc_msgSend(*(id *)(v8 + 40), "groupSettings", v9, v101);
    if (v10)
    {
      v11 = v10;
      v12 = sub_100005EC8(0, (unint64_t *)&qword_100554908, off_1004A4538);
      v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

    }
    else
    {
      v13 = 0;
    }
    v110 = (_QWORD *)v13;
    v14 = sub_10003F544(&qword_1005568E8);
    v2 = sub_10002F9C8(&qword_1005568F0, &qword_1005568F8, (uint64_t)&protocol conformance descriptor for [A]);
    v15 = Optional<A>.isEmpty.getter(v14, v2);
    swift_release(v8);
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0)
      break;
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      if (v4 < 0)
        v43 = v4;
      else
        v43 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v5 = _CocoaArrayWrapper.endIndex.getter(v43);
      if (!v5)
        goto LABEL_13;
      goto LABEL_3;
    }
    ++v6;
    if (v16 == v5)
      goto LABEL_13;
  }
  swift_bridgeObjectRelease(v4);
  v1 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_175;
  v7 = *v106;
  if ((unint64_t)*v106 >> 62)
    goto LABEL_176;
  if (v1 != *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_28:
    v4 = v6 + 5;
    while (1)
    {
      v20 = v4 - 4;
      v21 = *v106;
      if ((*v106 & 0xC000000000000001) != 0)
      {
        v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v21);
      }
      else
      {
        if ((v20 & 0x8000000000000000) != 0)
          goto LABEL_70;
        if (v20 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_71;
        v22 = *(_QWORD *)(v21 + 8 * v4);
        *(_QWORD *)&v23 = swift_retain().n128_u64[0];
      }
      v24 = objc_msgSend(*(id *)(v22 + 40), "groupSettings", v23, v101);
      if (v24)
      {
        v25 = v24;
        v26 = sub_100005EC8(0, (unint64_t *)&qword_100554908, off_1004A4538);
        v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);

      }
      else
      {
        v1 = 0;
      }
      v110 = (_QWORD *)v1;
      v27 = Optional<A>.isEmpty.getter(v14, v2);
      swift_release(v22);
      swift_bridgeObjectRelease(v1);
      if ((v27 & 1) != 0)
        goto LABEL_57;
      if (v20 != v6)
        break;
LABEL_56:
      v39 = __OFADD__(v6++, 1);
      if (v39)
        goto LABEL_73;
LABEL_57:
      v1 = v4 - 3;
      if (__OFADD__(v20, 1))
        goto LABEL_72;
      v40 = *v106;
      if ((unint64_t)*v106 >> 62)
      {
        if (v40 < 0)
          v42 = *v106;
        else
          v42 = v40 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v106);
        v41 = _CocoaArrayWrapper.endIndex.getter(v42);
        swift_bridgeObjectRelease(v40);
      }
      else
      {
        v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      ++v4;
      if (v1 == v41)
        goto LABEL_15;
    }
    v28 = *v106;
    if ((*v106 & 0xC000000000000001) != 0)
    {
      v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, *v106);
      v28 = *v106;
      if ((*v106 & 0xC000000000000001) == 0)
      {
LABEL_42:
        if ((v20 & 0x8000000000000000) != 0)
          goto LABEL_76;
        if (v20 >= *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_77;
        v30 = *(_QWORD *)(v28 + 8 * v4);
        swift_retain();
        goto LABEL_45;
      }
    }
    else
    {
      if (v6 < 0)
        goto LABEL_74;
      if ((unint64_t)v6 >= *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_75;
      v29 = *(_QWORD *)(v28 + 8 * v6 + 32);
      swift_retain();
      if ((v28 & 0xC000000000000001) == 0)
        goto LABEL_42;
    }
    v30 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v28);
    v28 = *v106;
LABEL_45:
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v28);
    *v106 = v28;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v28 < 0 || (v28 & 0x4000000000000000) != 0)
    {
      v28 = sub_10037A924(v28);
      *v106 = v28;
    }
    v32 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
    *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v30;
    v33 = swift_release(v32);
    specialized Array._endMutation()(v33);
    v34 = *v106;
    v35 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v106);
    *v106 = v34;
    if (!v35 || v34 < 0 || (v34 & 0x4000000000000000) != 0)
    {
      v34 = sub_10037A924(v34);
      *v106 = v34;
    }
    if ((v20 & 0x8000000000000000) != 0)
      goto LABEL_78;
    v36 = v34 & 0xFFFFFFFFFFFFFF8;
    if (v20 >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_79;
    v37 = *(_QWORD *)(v36 + 8 * v4);
    *(_QWORD *)(v36 + 8 * v4) = v29;
    v38 = swift_release(v37);
    specialized Array._endMutation()(v38);
    goto LABEL_56;
  }
  while (1)
  {
LABEL_15:
    v7 = *v106;
    if ((unint64_t)*v106 >> 62)
    {
      if (v7 < 0)
        v44 = *v106;
      else
        v44 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v106);
      v18 = _CocoaArrayWrapper.endIndex.getter(v44);
      swift_bridgeObjectRelease(v7);
      if (v18 < v6)
      {
LABEL_89:
        __break(1u);
LABEL_90:
        if (v7 < 0)
          v45 = v7;
        else
          v45 = v7 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v7);
        v19 = _CocoaArrayWrapper.endIndex.getter(v45);
        v14 = (uint64_t)&selRef_setAnimationsEnabled_;
        if (!v19)
          goto LABEL_94;
        goto LABEL_19;
      }
    }
    else
    {
      v18 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v18 < v6)
        goto LABEL_89;
    }
    sub_1001B42F4(v6, v18);
    swift_endAccess(&v108);
    v7 = *v106;
    if ((unint64_t)*v106 >> 62)
      goto LABEL_90;
    v19 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v7);
    v14 = (uint64_t)&selRef_setAnimationsEnabled_;
    if (!v19)
      goto LABEL_94;
LABEL_19:
    if (v19 < 1)
    {
      __break(1u);
      goto LABEL_172;
    }
    v1 = 0;
    v2 = v7 & 0xC000000000000001;
    do
    {
      if (v2)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v7);
      }
      else
      {
        v6 = *(_QWORD *)(v7 + 8 * v1 + 32);
        swift_retain();
      }
      ++v1;
      objc_msgSend(*(id *)(v6 + 40), "setCustomHeaderHeight:", 0.0, v101);
      swift_release(v6);
    }
    while (v19 != v1);
LABEL_94:
    swift_bridgeObjectRelease(v7);
    v7 = *v106;
    if ((unint64_t)*v106 >> 62)
    {
      if (v7 < 0)
        v51 = *v106;
      else
        v51 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v106);
      if (!_CocoaArrayWrapper.endIndex.getter(v51))
        goto LABEL_104;
LABEL_96:
      if ((v7 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_174;
        v47 = *(_QWORD *)(v7 + 32);
        swift_retain();
        goto LABEL_99;
      }
LABEL_172:
      v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
LABEL_99:
      swift_bridgeObjectRelease(v7);
      v48 = *(void **)(v47 + 40);
      v1 = (uint64_t)objc_allocWithZone((Class)MTDynamicTypeConstant);
      v6 = v48;
      v7 = (uint64_t)objc_msgSend((id)v1, "initWithDefaultConstant:textStyle:", UIFontTextStyleBody, 55.0);
      objc_msgSend((id)v7, "currentConstant");
      v50 = v49;

      objc_msgSend((id)v6, "setCustomHeaderHeight:", v50);
      swift_release(v47);

      goto LABEL_105;
    }
    v46 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v106);
    if (v46)
      goto LABEL_96;
LABEL_104:
    swift_bridgeObjectRelease(v7);
LABEL_105:
    v101 = objc_msgSend(objc_allocWithZone((Class)MTSettingsController), "init");
    v14 = *v106;
    if ((unint64_t)*v106 >> 62)
    {
      if (v14 < 0)
        v7 = *v106;
      else
        v7 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v106);
      v2 = _CocoaArrayWrapper.endIndex.getter(v7);
      if (!v2)
      {
LABEL_120:
        swift_bridgeObjectRelease(v14);
        v53 = _swiftEmptyArrayStorage;
        goto LABEL_121;
      }
    }
    else
    {
      v2 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*v106);
      if (!v2)
        goto LABEL_120;
    }
    v110 = _swiftEmptyArrayStorage;
    sub_10017AFE4(0, v2 & ~(v2 >> 63), 0);
    if ((v2 & 0x8000000000000000) == 0)
      break;
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    if (v7 < 0)
      v99 = v7;
    else
      v99 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v100 = _CocoaArrayWrapper.endIndex.getter(v99);
    swift_bridgeObjectRelease(v7);
    if (v1 != v100)
      goto LABEL_28;
  }
  v52 = 0;
  v53 = v110;
  do
  {
    if ((v14 & 0xC000000000000001) != 0)
    {
      v54 = specialized _ArrayBuffer._getElementSlowPath(_:)(v52, v14);
    }
    else
    {
      v54 = *(_QWORD *)(v14 + 8 * v52 + 32);
      swift_retain();
    }
    v56 = *(_QWORD *)(v54 + 16);
    v55 = *(_QWORD *)(v54 + 24);
    v109 = &type metadata for String;
    swift_bridgeObjectRetain(v55);
    swift_release(v54);
    *(_QWORD *)&v108 = v56;
    *((_QWORD *)&v108 + 1) = v55;
    v110 = v53;
    v58 = v53[2];
    v57 = v53[3];
    if (v58 >= v57 >> 1)
    {
      sub_10017AFE4(v57 > 1, v58 + 1, 1);
      v53 = v110;
    }
    ++v52;
    v53[2] = v58 + 1;
    sub_10013B9CC(&v108, &v53[4 * v58 + 4]);
  }
  while (v2 != v52);
  swift_bridgeObjectRelease(v14);
LABEL_121:
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v101, "setOrder:", isa, swift_bridgeObjectRelease(v53).n128_f64[0]);

  v60 = *v106;
  if ((unint64_t)*v106 >> 62)
    goto LABEL_145;
  v61 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(*v106, 2);
  if (v61)
  {
LABEL_123:
    v104 = v60 & 0xC000000000000001;
    v62 = &_swiftEmptyDictionarySingleton;
    v63 = 4;
    v102 = v61;
    v103 = v60;
    while (1)
    {
      v65 = v63 - 4;
      if (v104)
      {
        v66 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v63 - 4, v60);
        v67 = v63 - 3;
        if (__OFADD__(v65, 1))
          goto LABEL_142;
      }
      else
      {
        v66 = *(_QWORD **)(v60 + 8 * v63);
        swift_retain();
        v67 = v63 - 3;
        if (__OFADD__(v65, 1))
        {
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          if (v60 < 0)
            v84 = v60;
          else
            v84 = v60 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v60, 3);
          v61 = _CocoaArrayWrapper.endIndex.getter(v84);
          swift_bridgeObjectRelease(v60);
          if (!v61)
            break;
          goto LABEL_123;
        }
      }
      v107 = v67;
      v68 = v66[2];
      v69 = v66[3];
      v70 = (void *)v66[5];
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v69);
      v60 = v70;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v62);
      *(_QWORD *)&v108 = v62;
      v73 = sub_10002E5D8(v68, v69);
      v74 = v62[2];
      v75 = (v72 & 1) == 0;
      v76 = v74 + v75;
      if (__OFADD__(v74, v75))
        goto LABEL_143;
      v77 = v72;
      if (v62[3] >= v76)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v80 = (_QWORD *)v108;
          if ((v72 & 1) != 0)
            goto LABEL_124;
        }
        else
        {
          sub_10021D670();
          v80 = (_QWORD *)v108;
          if ((v77 & 1) != 0)
            goto LABEL_124;
        }
      }
      else
      {
        sub_1002174EC(v76, isUniquelyReferenced_nonNull_native);
        v78 = sub_10002E5D8(v68, v69);
        if ((v77 & 1) != (v79 & 1))
          goto LABEL_182;
        v73 = v78;
        v80 = (_QWORD *)v108;
        if ((v77 & 1) != 0)
        {
LABEL_124:
          v64 = v80[7];

          *(_QWORD *)(v64 + 8 * v73) = v60;
          goto LABEL_125;
        }
      }
      v80[(v73 >> 6) + 8] |= 1 << v73;
      v81 = (uint64_t *)(v80[6] + 16 * v73);
      *v81 = v68;
      v81[1] = v69;
      *(_QWORD *)(v80[7] + 8 * v73) = v60;
      v82 = v80[2];
      v39 = __OFADD__(v82, 1);
      v83 = v82 + 1;
      if (v39)
        goto LABEL_144;
      v80[2] = v83;
      swift_bridgeObjectRetain(v69);
LABEL_125:
      swift_bridgeObjectRelease(v62);
      swift_release(v66);
      swift_bridgeObjectRelease(v69);
      swift_bridgeObjectRelease(0x8000000000000000);
      ++v63;
      v62 = v80;
      v60 = v103;
      if (v107 == v102)
        goto LABEL_150;
    }
  }
  v80 = &_swiftEmptyDictionarySingleton;
LABEL_150:
  swift_bridgeObjectRelease_n(v60, 2);
  sub_100214FA0((uint64_t)v80);
  v86 = v85;
  swift_bridgeObjectRelease(v80);
  v87 = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v101, "setGroups:", v87, swift_bridgeObjectRelease(v86).n128_f64[0]);

  objc_msgSend(v105, "setSettingsController:", v101);
  v88 = *v106;
  if ((unint64_t)*v106 >> 62)
  {
LABEL_162:
    if (v88 < 0)
      v97 = v88;
    else
      v97 = v88 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v88, 2);
    v89 = _CocoaArrayWrapper.endIndex.getter(v97);
    if (!v89)
      goto LABEL_160;
LABEL_152:
    v90 = 4;
    while (1)
    {
      v91 = v90 - 4;
      if ((v88 & 0xC000000000000001) != 0)
      {
        v92 = specialized _ArrayBuffer._getElementSlowPath(_:)(v90 - 4, v88);
        v93 = v90 - 3;
        if (__OFADD__(v91, 1))
          goto LABEL_161;
      }
      else
      {
        v92 = *(_QWORD *)(v88 + 8 * v90);
        swift_retain();
        v93 = v90 - 3;
        if (__OFADD__(v91, 1))
        {
LABEL_161:
          __break(1u);
          goto LABEL_162;
        }
      }
      v94 = objc_msgSend(v105, "settingsController", v101);
      if (!v94)
        break;
      v95 = v94;
      (*(void (**)(void))(*(_QWORD *)v92 + 224))();
      swift_release(v92);

      ++v90;
      if (v93 == v89)
        goto LABEL_160;
    }
    __break(1u);
LABEL_182:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
    v89 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*v106, 2);
    if (v89)
      goto LABEL_152;
LABEL_160:

    return swift_bridgeObjectRelease_n(v88, 2);
  }
  return result;
}

uint64_t sub_1001AA124()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTNotificationStatusIsAuthorizedKey);
  v5 = v4;
  v6 = NSUserDefaults.BOOLPublisher(forKey:)(v3);

  swift_bridgeObjectRelease(v5);
  v15[0] = v6;
  v7 = swift_allocObject(&unk_1004B23A0, 24, 7);
  swift_unknownObjectWeakInit(v7 + 16, v1);
  v8 = sub_10003F544((uint64_t *)&unk_100559760);
  v9 = sub_10002F9C8(&qword_1005538D8, (uint64_t *)&unk_100559760, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v10 = Publisher<>.sink(receiveValue:)(sub_1001AB3C0, v7, v8, v9);
  swift_release(v7);
  swift_release(v15[0]);
  v11 = v1 + OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_subscriptions;
  swift_beginAccess(v11, v15, 33, 0);
  v12 = sub_10003F544((uint64_t *)&unk_100556450);
  v13 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v11, v12, v13);
  swift_endAccess(v15);
  return swift_release(v10);
}

void sub_1001AA28C(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  id v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  _BYTE v30[24];
  _BYTE v31[40];
  _QWORD v32[5];
  char v33[24];
  char v34[32];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v34, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
    v7 = objc_msgSend(v6, "BOOLForKey:", kMTDidPromptForNotificationsPermissionsKey);

    if (v7)
    {
      v29 = v2;
      v8 = (uint64_t *)&v5[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections];
      swift_beginAccess(&v5[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections], v33, 0, 0);
      v9 = *v8;
      v28 = v5;
      if ((unint64_t)*v8 >> 62)
        goto LABEL_26;
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v9, 2);
      while (v10)
      {
        v11 = 4;
        while (1)
        {
          v12 = v11 - 4;
          if ((v9 & 0xC000000000000001) == 0)
            break;
          v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v9);
          v14 = v11 - 3;
          if (__OFADD__(v12, 1))
            goto LABEL_25;
LABEL_11:
          v15 = *(_QWORD *)(v13 + 16);
          v16 = *(_QWORD *)(v13 + 24);
          if (v15 == 0xD000000000000019 && v16 == 0x800000010042DEF0)
          {
            swift_bridgeObjectRelease_n(v9, 2);
            swift_release(v13);
LABEL_20:
            v5 = v28;
            goto LABEL_21;
          }
          v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 0xD000000000000019, 0x800000010042DEF0, 0);
          swift_release(v13);
          if ((v17 & 1) != 0)
          {
            swift_bridgeObjectRelease_n(v9, 2);
            goto LABEL_20;
          }
          ++v11;
          if (v14 == v10)
            goto LABEL_15;
        }
        v13 = *(_QWORD *)(v9 + 8 * v11);
        swift_retain();
        v14 = v11 - 3;
        if (!__OFADD__(v12, 1))
          goto LABEL_11;
LABEL_25:
        __break(1u);
LABEL_26:
        if (v9 < 0)
          v25 = v9;
        else
          v25 = v9 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v9, 2);
        v10 = _CocoaArrayWrapper.endIndex.getter(v25);
      }
LABEL_15:
      swift_bridgeObjectRelease_n(v9, 2);
      v18 = _s25AllowNotificationsSectionCMa();
      swift_allocObject(v18, 96, 7);
      sub_1002DE7C0();
      v20 = v19;
      v32[3] = type metadata accessor for MTNotificationSettingsSectionedViewController();
      v32[4] = &off_1004B2378;
      v5 = v28;
      v32[0] = v28;
      sub_1001AB3C8((uint64_t)v32, (uint64_t)v31);
      swift_beginAccess(v20 + 48, v30, 33, 0);
      v21 = v28;
      sub_1001AB410((uint64_t)v31, v20 + 48);
      swift_endAccess(v30);
      v22 = *(_QWORD *)&v21[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_allowNotificationsSection];
      *(_QWORD *)&v21[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_allowNotificationsSection] = v20;
      swift_retain();
      swift_release(v22);
      swift_beginAccess(v8, v32, 33, 0);
      v23 = *v8;
      if ((unint64_t)*v8 >> 62)
      {
        if (v23 < 0)
          v26 = *v8;
        else
          v26 = v23 & 0xFFFFFFFFFFFFFF8;
        swift_retain();
        swift_bridgeObjectRetain(v23);
        v27 = _CocoaArrayWrapper.endIndex.getter(v26);
        swift_bridgeObjectRelease(v23);
        if (v27 < 0)
        {
          __break(1u);
          return;
        }
      }
      else
      {
        swift_retain();
      }
      sub_1001B331C(0, 0, v20);
      swift_endAccess(v32);
      swift_release(v20);
LABEL_21:
      v24 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_allowNotificationsSection];
      if (v24)
      {
        swift_retain();
        sub_1002DEAA0(v29);
        swift_release(v24);
      }
    }

  }
}

uint64_t sub_1001AA6D0(char a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  objc_class *v17;
  __n128 v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[5];
  uint64_t v34;
  objc_super v35;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v27 - v15;
  v17 = (objc_class *)type metadata accessor for MTNotificationSettingsSectionedViewController();
  v35.receiver = v1;
  v35.super_class = v17;
  objc_msgSendSuper2(&v35, "viewDidAppear:", a1 & 1);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v19 = (void *)static OS_dispatch_queue.main.getter(v18);
  static DispatchTime.now()(v19);
  + infix(_:_:)(v14, 1.0);
  v28 = *(void (**)(char *, uint64_t))(v11 + 8);
  v28(v14, v10);
  v20 = swift_allocObject(&unk_1004B23A0, 24, 7);
  swift_unknownObjectWeakInit(v20 + 16, v2);
  aBlock[4] = sub_1001AB4A0;
  v34 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B23B8;
  v21 = _Block_copy(aBlock);
  v22 = swift_release(v34);
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_10017F258();
  v24 = sub_10003F544((uint64_t *)&unk_10055B200);
  v25 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v4, v23);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v9, v6, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
  return ((uint64_t (*)(char *, uint64_t))v28)(v16, v29);
}

void sub_1001AA97C(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "setEmphasizedSetting:", 0);

  }
}

void sub_1001AAA18(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  NSString v20;
  objc_class *v21;
  uint64_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, id);
  id v30;
  uint64_t v31;
  void *v32;
  char v34[24];
  objc_super v35;

  v6 = v5;
  v12 = sub_10003F544((uint64_t *)&unk_1005598F0);
  __chkstk_darwin(v12);
  v14 = &v34[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1001AB458(a2, (uint64_t)v14);
  v17 = type metadata accessor for IndexPath(0, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17) != 1)
  {
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v17);
  }
  if (a5)
    v20 = String._bridgeToObjectiveC()();
  else
    v20 = 0;
  v21 = (objc_class *)type metadata accessor for MTNotificationSettingsSectionedViewController();
  v35.receiver = v6;
  v35.super_class = v21;
  objc_msgSendSuper2(&v35, "configureCell:atIndexPath:withDescription:inGroupWithIdentifier:", a1, isa, a3, v20);

  if (!a3)
  {
LABEL_12:
    if (!a1)
      return;
    goto LABEL_15;
  }
  v22 = (uint64_t *)&v6[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections];
  swift_beginAccess(&v6[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections], v34, 0, 0);
  v23 = *v22;
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(v23);
  v24 = a3;
  v25 = sub_1001AB088(v23, a4, a5);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(a5);
  if (!v25)
  {

    goto LABEL_12;
  }
  if (!a1)
  {
    __break(1u);
    return;
  }
  v26 = objc_opt_self(MTSwitchCell);
  v27 = swift_dynamicCastObjCClass(a1, v26);
  if (v27)
  {
    v28 = v27;
    v29 = *(void (**)(uint64_t, id))(*(_QWORD *)v25 + 216);
    v30 = a1;
    v29(v28, v24);

    swift_release(v25);
  }
  else
  {

    swift_release(v25);
  }
LABEL_15:
  v31 = objc_opt_self(MTTableViewCell);
  v32 = (void *)swift_dynamicCastObjCClass(a1, v31);
  if (v32)
    objc_msgSend(v32, "setShowsSeparator:", 0);
}

double sub_1001AAD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  id v8;
  char v9;
  double v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  NSString v16;
  double v17;
  objc_super v19;
  char v20[24];

  v4 = v3;
  v8 = objc_msgSend(v3, "traitCollection");
  v9 = UITraitCollection.interfaceIdiomIsMac.getter();

  if ((v9 & 1) != 0)
    return 48.0;
  v11 = &v4[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections];
  swift_beginAccess(&v4[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections], v20, 0, 0);
  v12 = *(_QWORD *)v11;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(v12);
  v14 = sub_1001AB088(v13, a2, a3);
  swift_bridgeObjectRelease(v12);
  v15 = swift_bridgeObjectRelease(a3);
  v10 = UITableViewAutomaticDimension;
  if (v14)
  {
    v10 = (*(double (**)(__n128))(*(_QWORD *)v14 + 232))(v15);
    swift_release(v14);
  }
  if (v10 == UITableViewAutomaticDimension)
  {
    if (a3)
      v16 = String._bridgeToObjectiveC()();
    else
      v16 = 0;
    v19.receiver = v4;
    v19.super_class = (Class)type metadata accessor for MTNotificationSettingsSectionedViewController();
    objc_msgSendSuper2(&v19, "heightForRowWithDescription:inGroupWithIdentifier:", a1, v16);
    v10 = v17;

  }
  return v10;
}

id sub_1001AAF8C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MTNotificationSettingsSectionedViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MTNotificationSettingsSectionedViewController()
{
  return objc_opt_self(_TtC8Podcasts45MTNotificationSettingsSectionedViewController);
}

uint64_t type metadata accessor for MTNotificationSettingsSectionedViewController.DEBUG()
{
  return objc_opt_self(_TtCC8Podcasts45MTNotificationSettingsSectionedViewController5DEBUG);
}

uint64_t sub_1001AB088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v6)
  {
    v7 = 4;
    while (1)
    {
      v8 = v7 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1);
      v10 = __OFADD__(v8, 1);
      v11 = v7 - 3;
      if (v10)
        goto LABEL_17;
LABEL_10:
      if (a3)
      {
        v12 = *(_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 24);
        v14 = v12 == a2 && v13 == a3;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease(a1);
          return v9;
        }
      }
      swift_release(v9);
      ++v7;
      if (v11 == v6)
        goto LABEL_22;
    }
    v9 = *(_QWORD *)(a1 + 8 * v7);
    swift_retain(v9);
    v10 = __OFADD__(v8, 1);
    v11 = v7 - 3;
    if (!v10)
      goto LABEL_10;
LABEL_17:
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v15);
  }
LABEL_22:
  swift_bridgeObjectRelease(a1);
  return 0;
}

void sub_1001AB1B4()
{
  _BYTE *v0;
  _QWORD *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_allowNotificationsSection] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeSection] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_serverPushSection] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_orderedSections] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v1 = &v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeNotifcationGroupInitialHighlightedPodcastUuid];
  *v1 = 0;
  v1[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_subscriptions] = &_swiftEmptyArrayStorage;
  v0[OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_hasLoadedSettings] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x74726F7075736E75, 0xEA00000000006465, "Podcasts/MTNotificationSettingsSectionedViewController.swift", 60, 2, 43, 0);
  __break(1u);
}

void sub_1001AB28C(char a1, id a2, uint64_t a3, unsigned __int8 *a4)
{
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;

  v8 = objc_msgSend(a2, "settingsController");
  if (v8)
  {
    v14 = v8;
    if ((a1 & 1) == 0)
    {
      sub_1001E9B08(v8, a3, a4);
      v13 = v14;
      goto LABEL_8;
    }
    v9 = objc_msgSend(a2, "tableView");
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v9, "beginUpdates");

      sub_1001E9B08(v14, a3, a4);
      v11 = objc_msgSend(a2, "tableView");
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v11, "endUpdates");

        v13 = v12;
LABEL_8:

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1001AB39C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001AB3C0(char *a1)
{
  uint64_t v1;

  sub_1001AA28C(a1, v1);
}

uint64_t sub_1001AB3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100559740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001AB410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100559740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001AB458(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_1005598F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1001AB4A0()
{
  uint64_t v0;

  sub_1001AA97C(v0);
}

BOOL sub_1001AB4B8(id *a1)
{
  uint64_t v1;

  return sub_1001EA358(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

id sub_1001AB4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  sub_1001ABD44(0x6574616C706D6574, 0xEC0000006F666E49, a1, a2, &v5);
  if (v6)
  {
    v2 = type metadata accessor for CarPlayTemplateInfo(0);
    if (swift_dynamicCast(&v4, &v5, (char *)&type metadata for Any + 8, v2, 6))
      return (id)v4;
  }
  else
  {
    sub_1000485DC((uint64_t)&v5);
  }
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CarPlayTemplateInfo(0)), "init");
}

uint64_t sub_1001AB57C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = objc_opt_self(CPListItem);
  v2 = (void *)swift_dynamicCastObjCClass(v0, v1);
  if (!v2 || (v3 = objc_msgSend(v2, "text")) == 0)
  {
    v4 = objc_opt_self(CPListImageRowItem);
    v5 = (void *)swift_dynamicCastObjCClass(v0, v4);
    if (!v5)
      return 0;
    v3 = objc_msgSend(v5, "text");
    if (!v3)
      return 0;
  }
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v6;
}

void CPInterfaceController.showAlert(with:completion:)(uint64_t a1, unint64_t a2, void (*a3)(uint64_t a1), _QWORD *a4)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  void **v20;
  void (*v21)(char *, uint64_t);
  id v22;
  Swift::String v23;
  Swift::String v24;
  void *object;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  NSString v29;
  void *v30;
  id v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void **v40;
  char *v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  void **v47;
  id v48;
  id v49;
  Class isa;
  Class v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void **aBlock;
  uint64_t v63;
  void *v64;
  void *v65;
  void (*v66)(uint64_t);
  _QWORD *v67;
  Swift::String v68;

  v5 = v4;
  v55 = a4;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v59 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v54 - v13;
  v58 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.carPlay.getter(v58);
  v15 = swift_bridgeObjectRetain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v57 = a3;
  v60 = v9;
  if (v18)
  {
    v56 = v5;
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = (void **)swift_slowAlloc(32, -1);
    aBlock = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain(a2);
    v61 = sub_10003D274(a1, a2, (uint64_t *)&aBlock);
    v5 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &aBlock, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Attempting to show CarPlay alert with message: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v14, v60);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v14, v9);
  }
  v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v68._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 19279;
  v23._object = (void *)0xE200000000000000;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v68._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v68)._object;

  v26 = swift_allocObject(&unk_1004B2418, 24, 7);
  swift_unknownObjectWeakInit(v26 + 16, v5);
  v27 = (_QWORD *)swift_allocObject(&unk_1004B2440, 40, 7);
  v27[2] = a1;
  v27[3] = a2;
  v27[4] = v26;
  v28 = objc_allocWithZone((Class)CPAlertAction);
  swift_bridgeObjectRetain(a2);
  swift_retain();
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v66 = sub_1001AC130;
  v67 = v27;
  aBlock = _NSConcreteStackBlock;
  v63 = 1107296256;
  v64 = sub_1001AC13C;
  v65 = &unk_1004B2458;
  v30 = _Block_copy(&aBlock);
  v31 = objc_msgSend(v28, "initWithTitle:style:handler:", v29, 0, v30);

  _Block_release(v30);
  v32 = v67;
  swift_release(v26);
  swift_release(v32);
  v33 = objc_msgSend(v5, "presentedTemplate");

  if (!v33)
  {
    v35 = v59;
    static OS_os_log.carPlay.getter(v34);
    v36 = swift_bridgeObjectRetain_n(a2, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v56 = v5;
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = (void **)swift_slowAlloc(32, -1);
      aBlock = v40;
      *(_DWORD *)v39 = 136315138;
      swift_bridgeObjectRetain(a2);
      v61 = sub_10003D274(a1, a2, (uint64_t *)&aBlock);
      v5 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &aBlock, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Presenting CarPlay alert with message: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v41 = v59;
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      v41 = v35;
    }
    v21(v41, v60);
    v42 = v57;
    v43 = sub_10003F544((uint64_t *)&unk_1005588B0);
    v44 = swift_allocObject(v43, 48, 7);
    *(_OWORD *)(v44 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v44 + 32) = a1;
    *(_QWORD *)(v44 + 40) = a2;
    v45 = sub_10003F544((uint64_t *)&unk_100553780);
    v46 = (void **)swift_allocObject(v45, 40, 7);
    *((_OWORD *)v46 + 1) = xmmword_1003CA250;
    v46[4] = v31;
    aBlock = v46;
    specialized Array._endMutation()(v46);
    v47 = aBlock;
    v48 = objc_allocWithZone((Class)CPAlertTemplate);
    swift_bridgeObjectRetain(a2);
    v49 = v31;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v44);
    sub_100005EC8(0, &qword_100556490, CPAlertAction_ptr);
    v51 = Array._bridgeToObjectiveC()().super.isa;
    v31 = objc_msgSend(v48, "initWithTitleVariants:actions:", isa, v51, swift_bridgeObjectRelease(v47).n128_f64[0]);

    if (v42)
    {
      v66 = v42;
      v67 = v55;
      aBlock = _NSConcreteStackBlock;
      v63 = 1107296256;
      v64 = sub_100153D50;
      v65 = &unk_1004B2480;
      v52 = _Block_copy(&aBlock);
      v53 = v67;
      swift_retain();
      swift_release(v53);
    }
    else
    {
      v52 = 0;
    }
    objc_msgSend(v5, "presentTemplate:animated:completion:", v31, 1, v52);

    _Block_release(v52);
  }

}

uint64_t sub_1001ABC9C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

id sub_1001ABCC0(uint64_t a1)
{
  return sub_1001AB4DC(a1, (uint64_t)&off_1004B24C8);
}

id sub_1001ABCD0(uint64_t a1)
{
  return sub_1001AB4DC(a1, (uint64_t)&off_1004B2508);
}

id sub_1001ABCDC(uint64_t a1)
{
  return sub_1001AB4DC(a1, (uint64_t)&off_1004B2548);
}

double sub_1001ABCE8@<D0>(_OWORD *a1@<X8>)
{
  id *v1;
  id v3;
  id v4;
  double result;

  v3 = objc_msgSend(*v1, "userInfo");
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease(v4);
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double sub_1001ABD44@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  double result;
  void *v13;
  __int128 v14;
  __int128 v15;

  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 8))(&v14, a3, a4);
  if (!*((_QWORD *)&v15 + 1))
  {
    sub_1000485DC((uint64_t)&v14);
    goto LABEL_6;
  }
  v8 = sub_100005EC8(0, (unint64_t *)&qword_100554EF0, NSDictionary_ptr);
  if ((swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, v8, 6) & 1) == 0)
  {
LABEL_6:
    result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
    return result;
  }
  v9 = v13;
  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  swift_bridgeObjectRetain_n(a2, 2);
  v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v14, &type metadata for String);
  v11 = objc_msgSend(v9, "__swift_objectForKeyedSubscript:", v10);
  swift_unknownObjectRelease(v10);
  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(&v14, v11);

    swift_unknownObjectRelease(v11);
  }
  else
  {

    v14 = 0u;
    v15 = 0u;
  }
  sub_10000773C((uint64_t)&v14, (uint64_t)a5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  return result;
}

void sub_1001ABE7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Strong;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock[6];
  uint64_t v29;
  uint64_t v30;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a4 + 16;
  v12 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.carPlay.getter(v12);
  v13 = swift_bridgeObjectRetain_n(a3, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v27 = v7;
    v16 = swift_slowAlloc(12, -1);
    v26 = v8;
    v17 = v11;
    v18 = a2;
    v19 = (uint8_t *)v16;
    v20 = swift_slowAlloc(32, -1);
    aBlock[0] = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain(a3);
    v21 = v18;
    v11 = v17;
    v29 = sub_10003D274(v21, a3, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Dismissing CarPlay alert with message: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_beginAccess(v11, &v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v11);
  if (Strong)
  {
    v23 = (void *)Strong;
    aBlock[4] = (uint64_t)UInt64.int64Representation.getter;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100153D50;
    aBlock[3] = (uint64_t)&unk_1004B2568;
    v24 = _Block_copy(aBlock);
    objc_msgSend(v23, "dismissTemplateAnimated:completion:", 1, v24);
    _Block_release(v24);

  }
}

uint64_t sub_1001AC104()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1001AC130(uint64_t a1)
{
  uint64_t v1;

  sub_1001ABE7C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1001AC13C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void *sub_1001AC18C()
{
  return &protocol witness table for String;
}

id sub_1001AC4A0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextActionActivity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ContextActionActivity()
{
  return objc_opt_self(_TtC8Podcasts21ContextActionActivity);
}

id DebouncedAssetRemovalProcessor.__allocating_init(context:)(uint64_t a1)
{
  objc_class *v1;
  _BYTE *v3;
  char *v4;
  objc_super v6;

  v3 = objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_debounceInterval] = 0x3FF0000000000000;
  v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_isRunning] = 0;
  v4 = &v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___episodeStorage];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 4) = 0;
  *(_QWORD *)&v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___debouncedProcessor] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_context] = a1;
  v6.receiver = v3;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t *DebouncedAssetRemovalProcessor.sharedInstance.unsafeMutableAddressor()
{
  if (qword_100552010 != -1)
    swift_once(&qword_100552010, sub_10000E640);
  return &static DebouncedAssetRemovalProcessor.sharedInstance;
}

id static DebouncedAssetRemovalProcessor.sharedInstance.getter()
{
  if (qword_100552010 != -1)
    swift_once(&qword_100552010, sub_10000E640);
  return (id)static DebouncedAssetRemovalProcessor.sharedInstance;
}

uint64_t DebouncedAssetRemovalProcessor.isRunning.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor_isRunning);
  swift_beginAccess(v0 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor_isRunning, v3, 0, 0);
  return *v1;
}

uint64_t DebouncedAssetRemovalProcessor.isRunning.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor_isRunning);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

void *DebouncedAssetRemovalProcessor.isRunning.modify(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor_isRunning, a1, 33, 0);
  return &j__swift_endAccess;
}

id DebouncedAssetRemovalProcessor.init(context:)(uint64_t a1)
{
  _BYTE *v1;
  char *v2;
  objc_super v4;

  *(_QWORD *)&v1[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_debounceInterval] = 0x3FF0000000000000;
  v1[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_isRunning] = 0;
  v2 = &v1[OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___episodeStorage];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *(_QWORD *)&v1[OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___debouncedProcessor] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_context] = a1;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for DebouncedAssetRemovalProcessor();
  return objc_msgSendSuper2(&v4, "init");
}

Swift::Void __swiftcall DebouncedAssetRemovalProcessor.reevaluate()()
{
  id v0;

  v0 = sub_100006944();
  dispatch thunk of DebouncedEpisodeAndShowProcessor.requestEvaluation()();
  swift_release(v0);
}

void DebouncedAssetRemovalProcessor.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.DebouncedAssetRemovalProcessor", 39, "init()", 6, 0);
  __break(1u);
}

id DebouncedAssetRemovalProcessor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DebouncedAssetRemovalProcessor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Int IntentFeedUnsubscriptionError.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void IntentFeedUnsubscriptionError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1001AC928(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1001AC964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Class isa;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  char v41[24];
  void **aBlock;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  void *v45;
  void (*v46)(uint64_t);
  uint64_t v47;

  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v4 = (void *)objc_opt_self(MTPlaylist);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(v4, "predicateForVisiblePlaylistWithUUID:", v5);

  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPlaylistEntityName);
  v8 = v7;
  v9 = objc_allocWithZone((Class)MTPropertyChangeQueryObserver);
  v10 = v6;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v12 = objc_msgSend(v9, "initWithEntityName:predicate:", v11, v10);

  if (v12)
  {
    *(_QWORD *)(v2 + 16) = v12;
    v13 = sub_10003F544((uint64_t *)&unk_1005588B0);
    v14 = swift_allocObject(v13, 176, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1003CC170;
    *(_QWORD *)(v14 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistTitle);
    *(_QWORD *)(v14 + 40) = v15;
    *(_QWORD *)(v14 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistContainerOrder);
    *(_QWORD *)(v14 + 56) = v16;
    *(_QWORD *)(v14 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistSortOrder);
    *(_QWORD *)(v14 + 72) = v17;
    *(_QWORD *)(v14 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistFlags);
    *(_QWORD *)(v14 + 88) = v18;
    *(_QWORD *)(v14 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistHidden);
    *(_QWORD *)(v14 + 104) = v19;
    *(_QWORD *)(v14 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistEpisodes);
    *(_QWORD *)(v14 + 120) = v20;
    *(_QWORD *)(v14 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistSettings);
    *(_QWORD *)(v14 + 136) = v21;
    *(_QWORD *)(v14 + 144) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistDeletedEpisodes);
    *(_QWORD *)(v14 + 152) = v22;
    *(_QWORD *)(v14 + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPlaylistIncludesAllPodcasts);
    *(_QWORD *)(v14 + 168) = v23;
    v24 = v12;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    objc_msgSend(v24, "setPropertyKeys:", isa);

    objc_msgSend(*(id *)(v2 + 16), "startObserving");
    v26 = *(void **)(v2 + 16);
    v27 = swift_allocObject(&unk_1004B2670, 24, 7);
    *(_QWORD *)(v27 + 16) = 0;
    v46 = sub_1001AD494;
    v47 = v27;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_1001ACFA4;
    v45 = &unk_1004B2688;
    v28 = _Block_copy(&aBlock);
    v29 = v47;
    v30 = v26;
    swift_retain(v27);
    swift_release(v29);
    objc_msgSend(v30, "results:", v28);
    _Block_release(v28);
    swift_beginAccess(v27 + 16, v41, 0, 0);
    v31 = *(_QWORD *)(v27 + 16);
    swift_retain(v31);

    swift_release(v27);
    if (v31)
    {
      v32 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = v31;
      swift_retain(v31);
      swift_release(v32);
      v33 = *(void **)(v2 + 16);
      v34 = swift_allocObject(&unk_1004B26C0, 24, 7);
      swift_weakInit(v34 + 16, v2);
      v46 = sub_1001AD504;
      v47 = v34;
      aBlock = _NSConcreteStackBlock;
      v43 = 1107296256;
      v44 = sub_1001ACFA4;
      v45 = &unk_1004B26D8;
      v35 = _Block_copy(&aBlock);
      v36 = v47;
      v37 = v33;
      swift_release(v36);
      v38 = objc_msgSend(v37, "addResultsChangedHandler:", v35);

      swift_release(v31);
      _Block_release(v35);

    }
    else
    {
      swift_release(v2);
      v39 = sub_1001AD49C();
      v40 = swift_allocError(&type metadata for StationDetailObserver.Error, v39, 0, 0);
      swift_willThrow(v40);

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001ACD78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(__n128);
  uint64_t v17;
  _QWORD *v18;
  __n128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(__n128);
  uint64_t v24;
  _QWORD *v25;
  __n128 v26;
  _BYTE v27[24];
  char v28[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v28, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = (_QWORD *)Strong;
    if (!a1)
      goto LABEL_18;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v21 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v21 = a1;
      swift_bridgeObjectRetain(a1);
      if (_CocoaArrayWrapper.endIndex.getter(v21))
        goto LABEL_5;
    }
    else
    {
      v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v6)
      {
LABEL_5:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v7 = *(id *)(a1 + 32);
        }
        v8 = v7;
        swift_bridgeObjectRelease(a1);
        v9 = objc_opt_self(MTPlaylist);
        v10 = swift_dynamicCastObjCClass(v8, v9);
        if (v10)
        {
          v11 = (void *)v10;
          type metadata accessor for StationDetail(0);
          v12 = v8;
          sub_1002DA298(v11, 0, 0, 0);
          v14 = v13;
          v15 = v5[3];
          v5[3] = v13;
          swift_retain(v13);
          swift_release(v15);
          swift_beginAccess(v5 + 4, v27, 0, 0);
          v16 = (void (*)(__n128))v5[4];
          if (v16)
          {
            v17 = v5[5];
            v18 = (_QWORD *)v5[3];
            sub_10002CA20(v5[4], v17);
            v19 = swift_retain(v18);
            v16(v19);
            sub_10002CA30((uint64_t)v16, v17);

            swift_release(v5);
            swift_release(v14);
            v20 = v18;
          }
          else
          {

            swift_release(v5);
            v20 = v14;
          }
LABEL_21:
          swift_release(v20);
          return;
        }

LABEL_18:
        v22 = v5[3];
        v5[3] = 0;
        swift_release(v22);
        swift_beginAccess(v5 + 4, v27, 0, 0);
        v23 = (void (*)(__n128))v5[4];
        if (v23)
        {
          v24 = v5[5];
          v25 = (_QWORD *)v5[3];
          sub_10002CA20(v5[4], v24);
          v26 = swift_retain(v25);
          v23(v26);
          sub_10002CA30((uint64_t)v23, v24);
          swift_release(v5);
          v20 = v25;
        }
        else
        {
          v20 = v5;
        }
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease(a1);
    goto LABEL_18;
  }
}

uint64_t sub_1001ACFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, __n128);
  unint64_t v5;
  __n128 v6;

  v2 = a2;
  v4 = *(void (**)(uint64_t, __n128))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v5 = sub_1001AD50C();
    v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v5);
  }
  v6 = swift_retain(v3);
  v4(v2, v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1001AD004()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), "stop");

  swift_release(*(_QWORD *)(v0 + 24));
  sub_10002CA30(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for StationDetailObserver()
{
  return objc_opt_self(_TtC8Podcasts21StationDetailObserver);
}

unint64_t sub_1001AD06C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100556AE0;
  if (!qword_100556AE0)
  {
    v1 = sub_10003CA40(&qword_100556AE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for A?, v1);
    atomic_store(result, (unint64_t *)&qword_100556AE0);
  }
  return result;
}

uint64_t sub_1001AD0B8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *a1 = v2;
  return swift_retain(v2);
}

uint64_t (*sub_1001AD0C8())(_QWORD *)
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  _BYTE v7[24];

  v1 = *v0;
  swift_beginAccess(v1 + 32, v7, 0, 0);
  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  if (v2)
  {
    v4 = swift_allocObject(&unk_1004B2648, 32, 7);
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = sub_100176EE8;
  }
  else
  {
    v5 = 0;
  }
  sub_10002CA20(v2, v3);
  return v5;
}

uint64_t sub_1001AD154(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  if (a1)
  {
    v5 = swift_allocObject(&unk_1004B2620, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_100176EFC;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *v2;
  swift_beginAccess(v7 + 32, v11, 1, 0);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 32) = v6;
  *(_QWORD *)(v7 + 40) = v5;
  return sub_10002CA30(v8, v9);
}

void (*sub_1001AD1DC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *);

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *v1;
  v3[5] = v4;
  swift_beginAccess(v4 + 32, v3, 33, 0);
  v5 = *(_QWORD *)(v4 + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 40);
    v7 = swift_allocObject(&unk_1004B25F8, 32, 7);
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v6;
    v8 = sub_100176B90;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v3[3] = v8;
  v3[4] = v7;
  return sub_1001AD278;
}

void sub_1001AD278(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v3)
  {
    if ((a2 & 1) != 0)
      v4 = sub_100176B60;
    else
      v4 = sub_100176EFC;
    if ((a2 & 1) != 0)
      v5 = &unk_1004B25A8;
    else
      v5 = &unk_1004B25D0;
    v6 = v2[4];
    v7 = swift_allocObject(v5, 32, 7);
    *(_QWORD *)(v7 + 16) = v3;
    *(_QWORD *)(v7 + 24) = v6;
  }
  else
  {
    v4 = 0;
    v7 = 0;
  }
  v8 = v2[5];
  *(_QWORD *)(v8 + 32) = v4;
  *(_QWORD *)(v8 + 40) = v7;
  swift_endAccess(v2);
  free(v2);
}

uint64_t sub_1001AD308()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AD32C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001AD350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _BYTE v16[24];

  if (!a1)
    return;
  v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v14 = a1;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v14))
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease(a1);
    return;
  }
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v5)
    goto LABEL_15;
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)(v4 + 16))
    {
      __break(1u);
      return;
    }
    v6 = *(id *)(a1 + 32);
  }
  v15 = v6;
  swift_bridgeObjectRelease(a1);
  v7 = objc_opt_self(MTPlaylist);
  v8 = swift_dynamicCastObjCClass(v15, v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = (uint64_t *)(a2 + 16);
    type metadata accessor for StationDetail(0);
    sub_1002DA298(v9, 0, 0, 0);
    v12 = v11;
    swift_beginAccess(v10, v16, 1, 0);
    v13 = *v10;
    *v10 = v12;
    swift_release(v13);
  }
  else
  {

  }
}

void sub_1001AD494(uint64_t a1)
{
  uint64_t v1;

  sub_1001AD350(a1, v1);
}

unint64_t sub_1001AD49C()
{
  unint64_t result;

  result = qword_100556AF0;
  if (!qword_100556AF0)
  {
    result = swift_getWitnessTable(&unk_1003CC298, &type metadata for StationDetailObserver.Error);
    atomic_store(result, (unint64_t *)&qword_100556AF0);
  }
  return result;
}

uint64_t sub_1001AD4E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001AD504(uint64_t a1)
{
  uint64_t v1;

  sub_1001ACD78(a1, v1);
}

unint64_t sub_1001AD50C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100553790;
  if (!qword_100553790)
  {
    v1 = objc_opt_self(NSManagedObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100553790);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StationDetailObserver.Error(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for StationDetailObserver.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001AD5DC + 4 * byte_1003CC180[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001AD5FC + 4 * byte_1003CC185[v4]))();
}

_BYTE *sub_1001AD5DC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001AD5FC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001AD604(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001AD60C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001AD614(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001AD61C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StationDetailObserver.Error()
{
  return &type metadata for StationDetailObserver.Error;
}

unint64_t sub_1001AD63C()
{
  unint64_t result;

  result = qword_100556AF8;
  if (!qword_100556AF8)
  {
    result = swift_getWitnessTable(&unk_1003CC270, &type metadata for StationDetailObserver.Error);
    atomic_store(result, (unint64_t *)&qword_100556AF8);
  }
  return result;
}

void sub_1001AD698(uint64_t a1)
{
  void *v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t ScoringWeights;
  id v7;
  Class isa;
  id v9;

  if (os_feature_enabled_prototype_up_next())
  {
    v2 = (void *)objc_opt_self(NSUserDefaults);
    v3 = objc_msgSend(v2, "_applePodcastsFoundationSharedUserDefaults");
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "integerForKey:", v4);

    if ((uint64_t)v5 < a1)
    {
      if (!sub_1001AE0F0())
      {
        ScoringWeights = static UpNextScoringWeightsManager.resetToDefaultValues()();
        static UpNextScoringWeightsManager.recalculateUpNext()(ScoringWeights);
      }
      v7 = objc_msgSend(v2, "_applePodcastsFoundationSharedUserDefaults");
      isa = Int._bridgeToObjectiveC()().super.super.isa;
      v9 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setValue:forKey:", isa, v9);

    }
  }
}

uint64_t sub_1001AD7C8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int *v36;
  void (*v37)(char *, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char v53[16];
  uint64_t v54;
  char v55[16];
  uint64_t v56;
  char v57[16];
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  _QWORD *v66;

  v47 = a2;
  v46 = sub_10003F544(&qword_100556B20);
  v45 = *(_QWORD *)(v46 - 8);
  v3 = __chkstk_darwin(v46);
  v44 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v51 = (char *)&v41 - v5;
  v6 = sub_10003F544(&qword_100556B28);
  v52 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v43 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v50 = (char *)&v41 - v10;
  v11 = __chkstk_darwin(v9);
  v49 = (char *)&v41 - v12;
  v13 = __chkstk_darwin(v11);
  v48 = (char *)&v41 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v41 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v41 - v18;
  v58 = a1;
  v63 = 0xD000000000000042;
  v64 = 0x8000000100432430;
  v65 = 0;
  v66 = _swiftEmptyArrayStorage;
  v59 = 0xD00000000000008DLL;
  v60 = 0x8000000100432480;
  v61 = 0;
  v62 = _swiftEmptyArrayStorage;
  v20 = sub_10003F544(&qword_100556B30);
  v21 = sub_10002F9C8(&qword_100556B38, &qword_100556B30, (uint64_t)&protocol conformance descriptor for Slider<A, B>);
  v42 = v19;
  Section<>.init(header:footer:content:)(&v63, &v59, sub_1001AE704, v57, &type metadata for Text, v20, &type metadata for Text, &protocol witness table for Text, v21, &protocol witness table for Text);
  v56 = a1;
  v63 = 0xD000000000000024;
  v64 = 0x8000000100432510;
  v65 = 0;
  v66 = _swiftEmptyArrayStorage;
  v59 = 0xD000000000000066;
  v60 = 0x8000000100432540;
  v61 = 0;
  v62 = _swiftEmptyArrayStorage;
  v41 = v17;
  Section<>.init(header:footer:content:)(&v63, &v59, sub_1001AE70C, v55, &type metadata for Text, v20, &type metadata for Text, &protocol witness table for Text, v21, &protocol witness table for Text);
  v54 = a1;
  v63 = 0xD000000000000017;
  v64 = 0x80000001004325B0;
  v65 = 0;
  v66 = _swiftEmptyArrayStorage;
  v59 = 0xD000000000000107;
  v60 = 0x80000001004325D0;
  v61 = 0;
  v62 = _swiftEmptyArrayStorage;
  v40 = v21;
  v22 = v48;
  Section<>.init(header:footer:content:)(&v63, &v59, sub_1001AE714, v53, &type metadata for Text, v20, &type metadata for Text, &protocol witness table for Text, v40, &protocol witness table for Text);
  v63 = 0xD000000000000036;
  v64 = 0x80000001004326E0;
  v65 = 0;
  v66 = _swiftEmptyArrayStorage;
  v23 = sub_10003F544(&qword_100556B40);
  v24 = sub_10002F9C8(&qword_100556B48, &qword_100556B40, (uint64_t)&protocol conformance descriptor for Button<A>);
  v25 = v51;
  Section<>.init(footer:content:)(&v63, sub_1001ADF6C, 0, v23, &type metadata for Text, v24, &protocol witness table for Text);
  v26 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v27 = v49;
  v26(v49, v19, v6);
  v28 = v50;
  v26(v50, v17, v6);
  v29 = v43;
  v26(v43, v22, v6);
  v30 = v45;
  v31 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v32 = v44;
  v33 = v25;
  v34 = v46;
  v31(v44, v33, v46);
  v35 = v47;
  v26(v47, v27, v6);
  v36 = (int *)sub_10003F544(&qword_100556B50);
  v26(&v35[v36[12]], v28, v6);
  v26(&v35[v36[16]], v29, v6);
  v31(&v35[v36[20]], v32, v34);
  v37 = *(void (**)(char *, uint64_t))(v30 + 8);
  v37(v51, v34);
  v38 = *(void (**)(char *, uint64_t))(v52 + 8);
  v38(v48, v6);
  v38(v41, v6);
  v38(v42, v6);
  v37(v32, v34);
  v38(v29, v6);
  v38(v50, v6);
  return ((uint64_t (*)(char *, uint64_t))v38)(v49, v6);
}

uint64_t sub_1001ADD14(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;

  AppStorage.projectedValue.getter(&v7, *(_QWORD *)(a1 + 16), &type metadata for Double);
  v6 = xmmword_1003CC2E0;
  v2 = swift_allocObject(&unk_1004B2918, 72, 7);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(a1 + 48);
  sub_1001AE724((_QWORD *)a1);
  v4 = sub_1001AE788();
  return Slider<>.init<A>(value:in:onEditingChanged:)(&v7, &v6, sub_1001AE720, v2, &type metadata for Double, v4, v4);
}

uint64_t sub_1001ADDDC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;

  AppStorage.projectedValue.getter(&v7, *(_QWORD *)(a1 + 24), &type metadata for Double);
  v6 = xmmword_1003CC2E0;
  v2 = swift_allocObject(&unk_1004B28F0, 72, 7);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(a1 + 48);
  sub_1001AE724((_QWORD *)a1);
  v4 = sub_1001AE788();
  return Slider<>.init<A>(value:in:onEditingChanged:)(&v7, &v6, sub_1001AE720, v2, &type metadata for Double, v4, v4);
}

uint64_t sub_1001ADEA4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;

  AppStorage.projectedValue.getter(&v7, *(_QWORD *)(a1 + 8), &type metadata for Double);
  v6 = xmmword_1003CC2E0;
  v2 = swift_allocObject(&unk_1004B28C8, 72, 7);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(a1 + 48);
  sub_1001AE724((_QWORD *)a1);
  v4 = sub_1001AE788();
  return Slider<>.init<A>(value:in:onEditingChanged:)(&v7, &v6, sub_1001AE720, v2, &type metadata for Double, v4, v4);
}

uint64_t sub_1001ADF6C()
{
  return Button.init(action:label:)(j___s8ShelfKit27UpNextScoringWeightsManagerO20resetToDefaultValuesyyFZ, 0, sub_1001ADF9C, 0, &type metadata for Text, &protocol witness table for Text);
}

void sub_1001ADF9C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xD000000000000017;
  *(_QWORD *)(a1 + 8) = 0x8000000100432720;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

uint64_t sub_1001ADFD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE v12[16];
  _OWORD *v13;
  _OWORD v14[3];
  uint64_t v15;

  v3 = sub_10003F544(&qword_100556B00);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(_OWORD *)(v1 + 16);
  v14[0] = *(_OWORD *)v1;
  v14[1] = v7;
  v14[2] = *(_OWORD *)(v1 + 32);
  v15 = *(_QWORD *)(v1 + 48);
  v13 = v14;
  v8 = sub_10003F544(&qword_100556B08);
  v9 = sub_10002F9C8(&qword_100556B10, &qword_100556B08, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Form.init(content:)(sub_1001AE6FC, v12, v8, v9);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 16))(a1, v6, v3);
  v10 = (_QWORD *)(a1 + *(int *)(sub_10003F544(&qword_100556B18) + 36));
  *v10 = 0;
  v10[1] = 0;
  v10[2] = j___s8ShelfKit27UpNextScoringWeightsManagerO011recalculatecD0yyFZ;
  v10[3] = 0;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

BOOL sub_1001AE0F0()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSString v13;
  double v14;
  double v15;
  id v16;
  NSString v17;
  double v18;
  double v19;
  id v20;
  NSString v21;
  double v22;
  double v23;
  uint64_t v25;

  v0 = sub_10003F544((uint64_t *)&unk_1005588B0);
  inited = swift_initStackObject(v0, &v25);
  *(_OWORD *)(inited + 16) = xmmword_1003CA240;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTUpNextScoreModifiedDateWeight);
  v4 = v3;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTUpNextScorePercentEpsFromShowPlayedWeight);
  v7 = v6;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTUpNextScorePercentEpsTotalPlayedWeight);
  v10 = v9;
  *(_QWORD *)(inited + 64) = v8;
  *(_QWORD *)(inited + 72) = v9;
  v11 = (void *)objc_opt_self(NSUserDefaults);
  v12 = objc_msgSend(v11, "_applePodcastsFoundationSharedUserDefaults", swift_bridgeObjectRetain(v4).n128_f64[0]);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v12, "doubleForKey:", v13);
  v15 = v14;

  if (v15 == 0.0
    && (v16 = objc_msgSend(v11, "_applePodcastsFoundationSharedUserDefaults", swift_bridgeObjectRetain(v7).n128_f64[0]), v17 = String._bridgeToObjectiveC()(), swift_bridgeObjectRelease(v7), objc_msgSend(v16, "doubleForKey:", v17), v19 = v18, v16, v17, v19 == 0.0))
  {
    v20 = objc_msgSend(v11, "_applePodcastsFoundationSharedUserDefaults", swift_bridgeObjectRetain(v10).n128_f64[0]);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    objc_msgSend(v20, "doubleForKey:", v21);
    v23 = v22;
    swift_release(inited);

    return v23 != 0.0;
  }
  else
  {
    swift_release(inited);
    return 1;
  }
}

uint64_t sub_1001AE2F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTUpNextScoreUsesRemotelyConfiguredValues);
  v9 = v8;
  v10 = (void *)objc_opt_self(NSUserDefaults);
  v11 = AppStorage.init<A>(wrappedValue:_:store:)(0, v7, v9, objc_msgSend(v10, "_applePodcastsFoundationSettingsUserDefaults"));
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTUpNextScoreModifiedDateWeight);
  v14 = AppStorage.init<A>(wrappedValue:_:store:)(v12, v13, objc_msgSend(v10, "_applePodcastsFoundationSettingsUserDefaults"), 0.0);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTUpNextScorePercentEpsFromShowPlayedWeight);
  v17 = AppStorage.init<A>(wrappedValue:_:store:)(v15, v16, objc_msgSend(v10, "_applePodcastsFoundationSettingsUserDefaults"), 0.0);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTUpNextScorePercentEpsTotalPlayedWeight);
  result = AppStorage.init<A>(wrappedValue:_:store:)(v18, v19, objc_msgSend(v10, "_applePodcastsFoundationSettingsUserDefaults"), 0.0);
  *a4 = v11;
  a4[1] = v14;
  a4[2] = v17;
  a4[3] = result;
  a4[4] = a1;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t destroy for PrototypeUpNextSettingsView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for PrototypeUpNextSettingsView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  v7 = a2[6];
  *(_QWORD *)(a1 + 48) = v7;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for PrototypeUpNextSettingsView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  a1[4] = a2[4];
  a1[5] = a2[5];
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for PrototypeUpNextSettingsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_release(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrototypeUpNextSettingsView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrototypeUpNextSettingsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrototypeUpNextSettingsView()
{
  return &type metadata for PrototypeUpNextSettingsView;
}

uint64_t sub_1001AE6EC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100469314, 1);
}

uint64_t sub_1001AE6FC@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1001AD7C8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1001AE704()
{
  uint64_t v0;

  return sub_1001ADD14(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001AE70C()
{
  uint64_t v0;

  return sub_1001ADDDC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001AE714()
{
  uint64_t v0;

  return sub_1001ADEA4(*(_QWORD *)(v0 + 16));
}

_QWORD *sub_1001AE724(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[6];
  swift_retain(*a1);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

unint64_t sub_1001AE788()
{
  unint64_t result;

  result = qword_10055B220;
  if (!qword_10055B220)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_10055B220);
  }
  return result;
}

uint64_t sub_1001AE7D4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001AE818()
{
  uint64_t v0;
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(v0 + 16);
  v3 = 0;
  return AppStorage.wrappedValue.setter(&v3, v1, &type metadata for Bool);
}

uint64_t initializeBufferWithCopyOfBuffer for PrototypeUpNextController(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for PrototypeUpNextController(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *assignWithCopy for PrototypeUpNextController(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for PrototypeUpNextController(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PrototypeUpNextController(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrototypeUpNextController(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrototypeUpNextController(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrototypeUpNextController()
{
  return &type metadata for PrototypeUpNextController;
}

unint64_t sub_1001AE9B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100556B58;
  if (!qword_100556B58)
  {
    v1 = sub_10003CA40(&qword_100556B18);
    sub_10002F9C8((unint64_t *)&unk_100556B60, &qword_100556B00, (uint64_t)&protocol conformance descriptor for Form<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100556B58);
  }
  return result;
}

id MTTestActionListViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

void MTTestActionListViewController.init(coder:)()
{
  sub_1001B07F8(30);
}

id MTTestActionListViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v7;
  id v8;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), "initWithNibName:bundle:", v7, a3);

  return v8;
}

void MTTestActionListViewController.init(nibName:bundle:)()
{
  sub_1001B07F8(31);
}

id MTTestActionListViewController.__allocating_init(title:tests:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return MTTestActionListViewController.init(title:tests:)(a1, a2, a3);
}

id MTTestActionListViewController.init(title:tests:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  NSString v14;
  id v15;
  id v16;
  objc_super v18;

  *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionCategories] = _swiftEmptyArrayStorage;
  v6 = OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionsByCategoryName;
  v7 = v3;
  *(_QWORD *)&v3[v6] = sub_1001388F0((uint64_t)_swiftEmptyArrayStorage);
  v8 = OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_testRunner;
  v9 = type metadata accessor for MTTestActionRunner();
  v10 = swift_allocObject(v9, 17, 7);
  *(_BYTE *)(v10 + 16) = 0;
  *(_QWORD *)&v7[v8] = v10;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_testStartDelay] = 0x4000000000000000;
  v11 = objc_msgSend(objc_allocWithZone((Class)UITableView), "initWithFrame:style:", 1, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_tableView] = v11;

  v18.receiver = v7;
  v18.super_class = (Class)type metadata accessor for MTTestActionListViewController();
  v12 = objc_msgSendSuper2(&v18, "initWithNibName:bundle:", 0, 0);
  v13 = objc_msgSend(v12, "navigationItem");
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setTitle:", v14, swift_bridgeObjectRelease(a2).n128_f64[0]);

  v15 = objc_msgSend(v12, "navigationItem");
  v16 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithBarButtonSystemItem:target:action:", 0, v12, "dismissFrom:");
  objc_msgSend(v15, "setRightBarButtonItem:", v16);

  sub_1001AEDA8(a3);
  swift_bridgeObjectRelease(a3);
  sub_1001AF4D8();

  return v12;
}

void sub_1001AEDA8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;

  v2 = v1;
  v3 = a1;
  v53 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_66;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (2)
  {
    v5 = _swiftEmptyArrayStorage;
    v54 = v3;
    v55 = v2;
    if (v4)
    {
      v59 = _swiftEmptyArrayStorage;
      sub_100048628(0, v4 & ~(v4 >> 63), 0);
      if (v4 < 0)
      {
        __break(1u);
        goto LABEL_71;
      }
      v5 = v59;
      if ((v3 & 0xC000000000000001) != 0)
      {
        v6 = 0;
        do
        {
          v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
          v8 = *(_QWORD *)(v7 + 32);
          v9 = *(_QWORD *)(v7 + 40);
          swift_bridgeObjectRetain(v9);
          swift_unknownObjectRelease(v7);
          v59 = v5;
          v11 = v5[2];
          v10 = v5[3];
          if (v11 >= v10 >> 1)
          {
            sub_100048628(v10 > 1, v11 + 1, 1);
            v5 = v59;
          }
          ++v6;
          v5[2] = v11 + 1;
          v12 = &v5[2 * v11];
          v12[4] = v8;
          v12[5] = v9;
        }
        while (v4 != v6);
      }
      else
      {
        v13 = v3 + 32;
        do
        {
          v14 = *(_QWORD *)(*(_QWORD *)v13 + 32);
          v15 = *(_QWORD *)(*(_QWORD *)v13 + 40);
          v59 = v5;
          v16 = v5[2];
          v17 = v5[3];
          swift_bridgeObjectRetain(v15);
          if (v16 >= v17 >> 1)
          {
            sub_100048628(v17 > 1, v16 + 1, 1);
            v5 = v59;
          }
          v5[2] = v16 + 1;
          v18 = &v5[2 * v16];
          v18[4] = v14;
          v18[5] = v15;
          v13 += 8;
          --v4;
        }
        while (v4);
      }
    }
    v19 = v5[2];
    if (v19)
    {
      v20 = v5 + 4;
      swift_bridgeObjectRetain(v5);
      v21 = 0;
      v22 = _swiftEmptyArrayStorage;
      while (1)
      {
        v23 = &v20[2 * v21];
        v25 = *v23;
        v24 = v23[1];
        v26 = v22[2];
        if (!v26)
          goto LABEL_27;
        v27 = v22[4];
        v28 = v22[5];
        v29 = v27 == v25 && v28 == v24;
        if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, *v23, v23[1], 0) & 1) == 0)
        {
          if (v26 == 1)
            goto LABEL_27;
          v35 = v22[6];
          v36 = v22[7];
          v37 = v35 == v25 && v36 == v24;
          if (!v37 && (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v25, v24, 0) & 1) == 0)
            break;
        }
LABEL_19:
        if (++v21 == v19)
        {
          swift_bridgeObjectRelease_n(v5, 2);
          goto LABEL_49;
        }
      }
      if (v26 != 2)
      {
        v38 = v22 + 9;
        v39 = 2;
        v56 = v19;
        while (1)
        {
          v3 = (uint64_t)v20;
          v2 = v39 + 1;
          if (__OFADD__(v39, 1))
            break;
          v40 = *(v38 - 1);
          v41 = *v38;
          v42 = v40 == v25 && v41 == v24;
          if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v25, v24, 0) & 1) != 0)
          {
            v20 = (_QWORD *)v3;
            v19 = v56;
            goto LABEL_19;
          }
          v38 += 2;
          ++v39;
          v29 = v2 == v26;
          v20 = (_QWORD *)v3;
          v19 = v56;
          if (v29)
            goto LABEL_27;
        }
        __break(1u);
LABEL_66:
        if (v3 < 0)
          v52 = v3;
        else
          v52 = v3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v3);
        v4 = _CocoaArrayWrapper.endIndex.getter(v52);
        swift_bridgeObjectRelease(v3);
        continue;
      }
LABEL_27:
      swift_bridgeObjectRetain_n(v24, 2);
      swift_bridgeObjectRetain(v22);
      v31 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
        v31 = sub_10027AE00(0, v26 + 1, 1, v22);
      v33 = v31[2];
      v32 = v31[3];
      if (v33 >= v32 >> 1)
        v31 = sub_10027AE00((_QWORD *)(v32 > 1), v33 + 1, 1, v31);
      v31[2] = v33 + 1;
      v34 = &v31[2 * v33];
      v34[4] = v25;
      v34[5] = v24;
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v24);
      v22 = v31;
      goto LABEL_19;
    }
    break;
  }
  swift_bridgeObjectRelease(v5);
  v22 = _swiftEmptyArrayStorage;
LABEL_49:
  v43 = *(_QWORD *)(v55 + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionCategories);
  *(_QWORD *)(v55 + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionCategories) = v22;
  swift_bridgeObjectRelease(v43);
  v59 = &_swiftEmptyDictionarySingleton;
  if (!v53)
  {
    v44 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v54);
    if (v44)
      goto LABEL_51;
LABEL_60:
    swift_bridgeObjectRelease(v54);
    v46 = &_swiftEmptyDictionarySingleton;
LABEL_64:
    v51 = *(_QWORD *)(v55 + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionsByCategoryName);
    *(_QWORD *)(v55 + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionsByCategoryName) = v46;
    swift_bridgeObjectRelease(v51);
    return;
  }
  if (v54 < 0)
    v48 = v54;
  else
    v48 = v54 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v54);
  v44 = _CocoaArrayWrapper.endIndex.getter(v48);
  if (!v44)
    goto LABEL_60;
LABEL_51:
  if (v44 >= 1)
  {
    if ((v54 & 0xC000000000000001) != 0)
    {
      v45 = 0;
      v46 = &_swiftEmptyDictionarySingleton;
      do
      {
        v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(v45++, v54);
        v58 = v47;
        sub_1001AF23C((uint64_t *)&v59, &v58, (uint64_t *)&v57);
        swift_bridgeObjectRelease(v46);
        swift_unknownObjectRelease(v47);
        v46 = v57;
        v59 = v57;
      }
      while (v44 != v45);
    }
    else
    {
      v49 = 0;
      v46 = &_swiftEmptyDictionarySingleton;
      do
      {
        v50 = *(_QWORD *)(v54 + 8 * v49++ + 32);
        v58 = v50;
        sub_1001AF23C((uint64_t *)&v59, &v58, (uint64_t *)&v57);
        swift_bridgeObjectRelease(v46);
        v46 = v57;
        v59 = v57;
      }
      while (v44 != v49);
    }
    swift_bridgeObjectRelease(v54);
    goto LABEL_64;
  }
LABEL_71:
  __break(1u);
}

void sub_1001AF23C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL8 v15;
  int64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *a1;
  v5 = *a2;
  if (!*(_QWORD *)(*a1 + 16))
  {
    swift_bridgeObjectRetain(*a1);
    goto LABEL_9;
  }
  v7 = *(_QWORD *)(v5 + 32);
  v6 = *(_QWORD *)(v5 + 40);
  swift_bridgeObjectRetain_n(*a1, 2);
  swift_bridgeObjectRetain(v6);
  sub_10002E5D8(v7, v6);
  LOBYTE(v7) = v8;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  if ((v7 & 1) == 0)
  {
LABEL_9:
    v19 = *(_QWORD *)(v5 + 32);
    v20 = *(_QWORD *)(v5 + 40);
    v21 = sub_10003F544((uint64_t *)&unk_100553780);
    v22 = swift_allocObject(v21, 40, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1003CA250;
    *(_QWORD *)(v22 + 32) = v5;
    v28 = v22;
    specialized Array._endMutation()(v22);
    swift_retain();
    swift_bridgeObjectRetain(v20);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    sub_10021BF74(v28, v19, v20, isUniquelyReferenced_nonNull_native);
    v24 = v4;
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_14:
    *a3 = v24;
    return;
  }
  v10 = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 40);
  swift_bridgeObjectRetain(v9);
  swift_retain();
  v11 = swift_isUniquelyReferenced_nonNull_native(v4);
  v28 = v4;
  swift_bridgeObjectRetain(v9);
  v13 = sub_10002E5D8(v10, v9);
  v14 = *(_QWORD *)(v4 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_16;
  }
  v17 = v12;
  if (*(_QWORD *)(v4 + 24) >= v16)
  {
    if ((v11 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_10021D860();
      if ((v17 & 1) != 0)
        goto LABEL_12;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  sub_10021780C(v16, v11);
  v16 = sub_10002E5D8(v10, v9);
  if ((v17 & 1) == (v18 & 1))
  {
    v13 = v16;
    if ((v17 & 1) == 0)
      goto LABEL_18;
LABEL_12:
    v27 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v13);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    v11 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v14 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v11 < v14 >> 1)
    {
LABEL_13:
      v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v5);
      specialized Array._endMutation()(v25);
      sub_1001B075C(&v27, 1, &v28, v13, v10, v9);
      v26 = v27;
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v26);
      v24 = v28;
      swift_bridgeObjectRelease(v9);
      goto LABEL_14;
    }
LABEL_16:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v11 + 1, 1);
    goto LABEL_13;
  }
LABEL_19:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1001AF4D8()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t ObjCClassFromMetadata;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;

  v1 = *(void **)&v0[OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_tableView];
  objc_msgSend(v1, "setDelegate:", v0);
  objc_msgSend(v1, "setDataSource:", v0);
  v2 = sub_100005EC8(0, (unint64_t *)&unk_10055FE00, UITableViewCell_ptr);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v2);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v4);

  v5 = type metadata accessor for MTToggleTestActionCell();
  v6 = swift_getObjCClassFromMetadata(v5);
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "registerClass:forCellReuseIdentifier:", v6, v7);

  v8 = objc_msgSend(v0, "view");
  if (!v8)
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = v8;
  objc_msgSend(v8, "addSubview:", v1);

  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v10 = objc_msgSend(v1, "leadingAnchor");
  v11 = objc_msgSend(v0, "view");
  if (!v11)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = v11;
  v13 = objc_msgSend(v11, "leadingAnchor");

  v14 = objc_msgSend(v10, "constraintEqualToAnchor:", v13);
  objc_msgSend(v14, "setActive:", 1);

  v15 = objc_msgSend(v1, "trailingAnchor");
  v16 = objc_msgSend(v0, "view");
  if (!v16)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v17 = v16;
  v18 = objc_msgSend(v16, "trailingAnchor");

  v19 = objc_msgSend(v15, "constraintEqualToAnchor:", v18);
  objc_msgSend(v19, "setActive:", 1);

  v20 = objc_msgSend(v1, "topAnchor");
  v21 = objc_msgSend(v0, "view");
  if (!v21)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v22 = v21;
  v23 = objc_msgSend(v21, "topAnchor");

  v24 = objc_msgSend(v20, "constraintEqualToAnchor:", v23);
  objc_msgSend(v24, "setActive:", 1);

  v25 = objc_msgSend(v1, "bottomAnchor");
  v26 = objc_msgSend(v0, "view");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "bottomAnchor");

    v29 = objc_msgSend(v25, "constraintEqualToAnchor:", v28);
    objc_msgSend(v29, "setActive:", 1);

    return;
  }
LABEL_11:
  __break(1u);
}

Swift::Int __swiftcall MTTestActionListViewController.numberOfSections(in:)(UITableView in)
{
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)(v1
                               + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionCategories)
                   + 16);
}

Swift::String_optional __swiftcall MTTestActionListViewController.tableView(_:titleForHeaderInSection:)(UITableView _, Swift::Int titleForHeaderInSection)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  objc_class *v5;
  Swift::Int v6;
  Swift::String_optional result;

  if (titleForHeaderInSection < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionCategories);
  if (*(_QWORD *)(v3 + 16) <= (unint64_t)titleForHeaderInSection)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  v4 = v3 + 16 * titleForHeaderInSection;
  v5 = *(objc_class **)(v4 + 32);
  v6 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain(v6);
  _.super.super.super.super.isa = v5;
  titleForHeaderInSection = v6;
LABEL_6:
  result.value._object = (void *)titleForHeaderInSection;
  result.value._countAndFlagsBits = (uint64_t)_.super.super.super.super.isa;
  return result;
}

Swift::Int __swiftcall MTTestActionListViewController.tableView(_:numberOfRowsInSection:)(UITableView _, Swift::Int numberOfRowsInSection)
{
  return sub_1001B08D4(numberOfRowsInSection);
}

uint64_t MTTestActionListViewController.cellIdentifierForTestAction(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MTToggleTestAction();
  if (swift_dynamicCastClass(a1, v2))
    return 0x656C67676F74;
  else
    return 0x6E6F69746361;
}

id MTTestActionListViewController.tableView(_:cellForRowAt:)(void *a1, uint64_t a2)
{
  Swift::String *v3;
  Swift::String *v4;
  uint64_t v5;
  NSString v6;
  Class isa;
  id v8;
  id v9;
  void *v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  sub_1001AFFE4(a2);
  v4 = v3;
  v5 = type metadata accessor for MTToggleTestAction();
  swift_dynamicCastClass(v4, v5);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE600000000000000);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v6, isa);

  v9 = objc_msgSend(v8, "textLabel");
  if (v9)
  {
    v10 = v9;
    String.append(_:)(v4[1]);
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "setText:", v11, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0], 8224);

  }
  v12 = type metadata accessor for MTToggleTestActionCell();
  v13 = swift_dynamicCastClass(v8, v12);
  if (v13)
  {
    v14 = v13;
    v15 = swift_dynamicCastClass(v4, v5);
    if (v15)
    {
      v16 = OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_toggleAction;
      v17 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_toggleAction);
      *(_QWORD *)(v14 + OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_toggleAction) = v15;
      swift_retain_n(v4, 3);
      v18 = v8;
      swift_release(v17);
      v19 = *(void **)(v14 + OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_switchView);
      if (v19)
      {
        v20 = *(_QWORD *)(v14 + v16);
        if (v20)
          v21 = *(unsigned __int8 *)(v20 + 64);
        else
          v21 = 0;
        objc_msgSend(v19, "setOn:", v21);
      }

      swift_release_n(v4, 2);
    }
  }
  swift_release(v4);
  return v8;
}

uint64_t MTTestActionListViewController.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  __n128 v20;
  void (*v21)(char *, uint64_t);
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[5];
  uint64_t v41;

  v3 = v2;
  v34 = a1;
  v36 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v34 - v15;
  sub_1001AFFE4(a2);
  v18 = v17;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v34, "deselectRowAtIndexPath:animated:", isa, 1);

  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v34 = (id)static OS_dispatch_queue.main.getter(v20);
  static DispatchTime.now()(v34);
  + infix(_:_:)(v14, 2.0);
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v14, v10);
  v22 = (uint64_t (*)(char *, uint64_t))v21;
  v23 = swift_allocObject(&unk_1004B29F8, 32, 7);
  *(_QWORD *)(v23 + 16) = v3;
  *(_QWORD *)(v23 + 24) = v18;
  aBlock[4] = sub_1001B0A2C;
  v41 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B2A10;
  v24 = _Block_copy(aBlock);
  v25 = v41;
  v26 = v3;
  swift_retain();
  v27 = swift_release(v25);
  static DispatchQoS.unspecified.getter(v27);
  aBlock[0] = _swiftEmptyArrayStorage;
  v28 = sub_10017F258();
  v29 = sub_10003F544((uint64_t *)&unk_10055B200);
  v30 = sub_100026534();
  v31 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v36, v28);
  v32 = v34;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v9, v6, v24);
  _Block_release(v24);
  swift_release(v18);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v6, v31);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v38);
  return v22(v16, v35);
}

void sub_1001AFFE4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v3 = v2;
  v5 = IndexPath.section.getter();
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionCategories);
  if (v5 >= *(_QWORD *)(v6 + 16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v7 = v6 + 16 * v5;
  v9 = *(_QWORD *)(v7 + 32);
  v8 = *(_QWORD *)(v7 + 40);
  v10 = swift_bridgeObjectRetain(v8);
  v11 = IndexPath.row.getter(v10);
  v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionsByCategoryName);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_15:
    swift_bridgeObjectRelease(v8);
    __break(1u);
    goto LABEL_16;
  }
  v1 = v11;
  swift_bridgeObjectRetain(v12);
  v13 = sub_10002E5D8(v9, v8);
  if ((v14 & 1) != 0)
  {
    a1 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v12);
    if ((a1 & 0xC000000000000001) == 0)
    {
      if ((v1 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v1 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        swift_retain();
LABEL_9:
        swift_bridgeObjectRelease(a1);
        return;
      }
      __break(1u);
      goto LABEL_15;
    }
LABEL_12:
    specialized _ArrayBuffer._getElementSlowPath(_:)(v1, a1);
    goto LABEL_9;
  }
LABEL_16:
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v12);
  __break(1u);
}

id MTTestActionListViewController.__deallocating_deinit()
{
  return sub_1001B06F4(type metadata accessor for MTTestActionListViewController);
}

id sub_1001B0200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  NSString v6;
  id v7;
  id v8;
  objc_super v10;

  *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_switchView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_toggleAction] = 0;
  if (a3)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v6 = 0;
  }
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for MTToggleTestActionCell();
  v7 = objc_msgSendSuper2(&v10, "initWithStyle:reuseIdentifier:", a1, v6);

  v8 = v7;
  sub_1001B0388();

  return v8;
}

id sub_1001B02F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_toggleAction;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_toggleAction);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_toggleAction) = 0;
  swift_release(v2);
  result = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_switchView);
  if (result)
  {
    v4 = *(_QWORD *)(v0 + v1);
    if (v4)
      v5 = *(unsigned __int8 *)(v4 + 64);
    else
      v5 = 0;
    return objc_msgSend(result, "setOn:", v5);
  }
  return result;
}

void sub_1001B0388()
{
  char *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  CGRect v14;
  CGRect v15;

  v1 = objc_msgSend(objc_allocWithZone((Class)UISwitch), "init");
  objc_msgSend(v1, "sizeToFit");
  objc_msgSend(v0, "addSubview:", v1);
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = objc_msgSend(v1, "centerYAnchor");
  v3 = objc_msgSend(v0, "centerYAnchor");
  v4 = objc_msgSend(v2, "constraintEqualToAnchor:", v3);

  objc_msgSend(v4, "setActive:", 1);
  v5 = objc_msgSend(v1, "trailingAnchor");
  v6 = objc_msgSend(v0, "layoutMarginsGuide");
  v7 = objc_msgSend(v6, "trailingAnchor");

  v8 = objc_msgSend(v5, "constraintEqualToAnchor:", v7);
  objc_msgSend(v8, "setActive:", 1);

  v9 = objc_msgSend(v1, "heightAnchor");
  objc_msgSend(v1, "frame");
  v10 = objc_msgSend(v9, "constraintEqualToConstant:", CGRectGetHeight(v14));

  objc_msgSend(v10, "setActive:", 1);
  v11 = objc_msgSend(v1, "widthAnchor");
  objc_msgSend(v1, "frame");
  v12 = objc_msgSend(v11, "constraintEqualToConstant:", CGRectGetWidth(v15));

  objc_msgSend(v12, "setActive:", 1);
  objc_msgSend(v1, "addTarget:action:forControlEvents:", v0, "switchActionWithSender:", 64);
  v13 = *(void **)&v0[OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_switchView];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_switchView] = v1;

}

void sub_1001B05F4()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = v0;
  v2 = *(unsigned __int8 **)(v0 + OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_toggleAction);
  if (v2)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 200);
    v4 = swift_retain(v2);
    v3(v4);
    v5 = *(void **)(v1 + OBJC_IVAR____TtC8Podcasts22MTToggleTestActionCell_switchView);
    if (v5)
    {
      v6 = v2[64];
      v7 = v5;
      objc_msgSend(v7, "setOn:", v6);

    }
    swift_release(v2);
  }
}

id sub_1001B06E8()
{
  return sub_1001B06F4(type metadata accessor for MTToggleTestActionCell);
}

id sub_1001B06F4(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

double sub_1001B075C(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  double result;

  v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      sub_10021D038(a4, a5, a6, v8, (_QWORD *)*a3);
      swift_bridgeObjectRetain(a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for String);
    sub_10021AC7C(a4, *a3);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain(v8).n128_u64[0];
  return result;
}

void sub_1001B07F8(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionCategories] = _swiftEmptyArrayStorage;
  v3 = OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionsByCategoryName;
  *(_QWORD *)&v1[v3] = sub_1001388F0((uint64_t)_swiftEmptyArrayStorage);
  v4 = OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_testRunner;
  v5 = type metadata accessor for MTTestActionRunner();
  v6 = swift_allocObject(v5, 17, 7);
  *(_QWORD *)&v1[v4] = v6;
  *(_BYTE *)(v6 + 16) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_testStartDelay] = 0x4000000000000000;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ALL, 0x80000001004328D0, "Podcasts/MTTestActionListViewController.swift", 45, 2, a1, 0);
  __break(1u);
}

uint64_t type metadata accessor for MTTestActionListViewController()
{
  return objc_opt_self(_TtC8Podcasts30MTTestActionListViewController);
}

uint64_t sub_1001B08D4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionCategories);
  if (*(_QWORD *)(v3 + 16) <= a1)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_orderedTestActionsByCategoryName);
  if (!*(_QWORD *)(v4 + 16))
    return 0;
  v5 = v3 + 16 * a1;
  v6 = *(_QWORD *)(v5 + 40);
  v7 = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v4);
  v8 = sub_10002E5D8(v7, v6);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v1 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v8);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  if (!((unint64_t)v1 >> 62))
  {
    v10 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease(v1);
    return v10;
  }
LABEL_12:
  if (v1 < 0)
    v12 = v1;
  else
    v12 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v10 = _CocoaArrayWrapper.endIndex.getter(v12);
  swift_bridgeObjectRelease_n(v1, 2);
  return v10;
}

uint64_t type metadata accessor for MTToggleTestActionCell()
{
  return objc_opt_self(_TtC8Podcasts22MTToggleTestActionCell);
}

uint64_t sub_1001B0A00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B0A2C()
{
  uint64_t v0;

  return sub_100284130(*(_QWORD *)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8Podcasts30MTTestActionListViewController_testRunner));
}

uint64_t type metadata accessor for MTTestActionListViewController.CellID()
{
  return objc_opt_self(_TtCC8Podcasts30MTTestActionListViewController6CellID);
}

BOOL sub_1001B0A60(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;

  v2 = *((unsigned __int8 *)a1 + 40);
  v3 = *((unsigned __int8 *)a2 + 40);
  if (!*((_BYTE *)a1 + 40))
  {
LABEL_11:
    if (!*((_BYTE *)a2 + 40))
      return v2 == v3;
    goto LABEL_12;
  }
  if ((_DWORD)v2 == 1)
  {
    v2 = 4;
    if (!*((_BYTE *)a2 + 40))
      return v2 == v3;
    goto LABEL_12;
  }
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3] | a1[4];
  if (!(v7 | *a1 | v6 | v5))
  {
    v2 = 2;
    goto LABEL_11;
  }
  v8 = v7 | v6 | v5;
  if (v4 == 1 && !v8)
  {
    v2 = 3;
    if (!*((_BYTE *)a2 + 40))
      return v2 == v3;
    goto LABEL_12;
  }
  if (v8)
    v14 = 0;
  else
    v14 = v4 == 2;
  v2 = 5;
  if (!v14)
    v2 = 6;
  if (*((_BYTE *)a2 + 40))
  {
LABEL_12:
    if ((_DWORD)v3 == 1)
    {
      v3 = 4;
    }
    else
    {
      v9 = *a2;
      v10 = a2[3];
      v11 = a2[4];
      v12 = a2[2] | a2[1];
      if (v12 | *a2 | v10 | v11)
      {
        v13 = v12 | v10 | v11;
        if (v9 != 1 || v13)
        {
          if (v13)
            v15 = 0;
          else
            v15 = v9 == 2;
          v3 = 5;
          if (!v15)
            v3 = 6;
        }
        else
        {
          v3 = 3;
        }
      }
      else
      {
        v3 = 2;
      }
    }
  }
  return v2 == v3;
}

void sub_1001B0B50(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_1001B45C0();
  *a1 = v2;
}

BOOL sub_1001B0B74(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;

  v2 = *((unsigned __int8 *)a1 + 40);
  v3 = *((unsigned __int8 *)a2 + 40);
  if (!*((_BYTE *)a1 + 40))
  {
LABEL_11:
    if (!*((_BYTE *)a2 + 40))
      return v2 < v3;
    goto LABEL_12;
  }
  if ((_DWORD)v2 == 1)
  {
    v2 = 4;
    if (!*((_BYTE *)a2 + 40))
      return v2 < v3;
    goto LABEL_12;
  }
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3] | a1[4];
  if (!(v7 | *a1 | v6 | v5))
  {
    v2 = 2;
    goto LABEL_11;
  }
  v8 = v7 | v6 | v5;
  if (v4 == 1 && !v8)
  {
    v2 = 3;
    if (!*((_BYTE *)a2 + 40))
      return v2 < v3;
    goto LABEL_12;
  }
  if (v8)
    v14 = 0;
  else
    v14 = v4 == 2;
  v2 = 5;
  if (!v14)
    v2 = 6;
  if (*((_BYTE *)a2 + 40))
  {
LABEL_12:
    if ((_DWORD)v3 == 1)
    {
      v3 = 4;
    }
    else
    {
      v9 = *a2;
      v10 = a2[3];
      v11 = a2[4];
      v12 = a2[2] | a2[1];
      if (v12 | *a2 | v10 | v11)
      {
        v13 = v12 | v10 | v11;
        if (v9 != 1 || v13)
        {
          if (v13)
            v15 = 0;
          else
            v15 = v9 == 2;
          v3 = 5;
          if (!v15)
            v3 = 6;
        }
        else
        {
          v3 = 3;
        }
      }
      else
      {
        v3 = 2;
      }
    }
  }
  return v2 < v3;
}

BOOL sub_1001B0C64(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;

  v2 = *((unsigned __int8 *)a1 + 40);
  v3 = *((unsigned __int8 *)a2 + 40);
  if (!*((_BYTE *)a2 + 40))
  {
LABEL_11:
    if (!*((_BYTE *)a1 + 40))
      return v3 >= v2;
    goto LABEL_12;
  }
  if ((_DWORD)v3 == 1)
  {
    v3 = 4;
    if (!*((_BYTE *)a1 + 40))
      return v3 >= v2;
    goto LABEL_12;
  }
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3] | a2[4];
  if (!(v7 | *a2 | v6 | v5))
  {
    v3 = 2;
    goto LABEL_11;
  }
  v8 = v7 | v6 | v5;
  if (v4 == 1 && !v8)
  {
    v3 = 3;
    if (!*((_BYTE *)a1 + 40))
      return v3 >= v2;
    goto LABEL_12;
  }
  if (v8)
    v14 = 0;
  else
    v14 = v4 == 2;
  v3 = 5;
  if (!v14)
    v3 = 6;
  if (*((_BYTE *)a1 + 40))
  {
LABEL_12:
    if ((_DWORD)v2 == 1)
    {
      v2 = 4;
    }
    else
    {
      v9 = *a1;
      v10 = a1[3];
      v11 = a1[4];
      v12 = a1[2] | a1[1];
      if (v12 | *a1 | v10 | v11)
      {
        v13 = v12 | v10 | v11;
        if (v9 != 1 || v13)
        {
          if (v13)
            v15 = 0;
          else
            v15 = v9 == 2;
          v2 = 5;
          if (!v15)
            v2 = 6;
        }
        else
        {
          v2 = 3;
        }
      }
      else
      {
        v2 = 2;
      }
    }
  }
  return v3 >= v2;
}

BOOL sub_1001B0D54(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;

  v2 = *((unsigned __int8 *)a1 + 40);
  v3 = *((unsigned __int8 *)a2 + 40);
  if (!*((_BYTE *)a1 + 40))
  {
LABEL_11:
    if (!*((_BYTE *)a2 + 40))
      return v2 >= v3;
    goto LABEL_12;
  }
  if ((_DWORD)v2 == 1)
  {
    v2 = 4;
    if (!*((_BYTE *)a2 + 40))
      return v2 >= v3;
    goto LABEL_12;
  }
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3] | a1[4];
  if (!(v7 | *a1 | v6 | v5))
  {
    v2 = 2;
    goto LABEL_11;
  }
  v8 = v7 | v6 | v5;
  if (v4 == 1 && !v8)
  {
    v2 = 3;
    if (!*((_BYTE *)a2 + 40))
      return v2 >= v3;
    goto LABEL_12;
  }
  if (v8)
    v14 = 0;
  else
    v14 = v4 == 2;
  v2 = 5;
  if (!v14)
    v2 = 6;
  if (*((_BYTE *)a2 + 40))
  {
LABEL_12:
    if ((_DWORD)v3 == 1)
    {
      v3 = 4;
    }
    else
    {
      v9 = *a2;
      v10 = a2[3];
      v11 = a2[4];
      v12 = a2[2] | a2[1];
      if (v12 | *a2 | v10 | v11)
      {
        v13 = v12 | v10 | v11;
        if (v9 != 1 || v13)
        {
          if (v13)
            v15 = 0;
          else
            v15 = v9 == 2;
          v3 = 5;
          if (!v15)
            v3 = 6;
        }
        else
        {
          v3 = 3;
        }
      }
      else
      {
        v3 = 2;
      }
    }
  }
  return v2 >= v3;
}

BOOL sub_1001B0E44(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;

  v2 = *((unsigned __int8 *)a1 + 40);
  v3 = *((unsigned __int8 *)a2 + 40);
  if (!*((_BYTE *)a2 + 40))
  {
LABEL_11:
    if (!*((_BYTE *)a1 + 40))
      return v3 < v2;
    goto LABEL_12;
  }
  if ((_DWORD)v3 == 1)
  {
    v3 = 4;
    if (!*((_BYTE *)a1 + 40))
      return v3 < v2;
    goto LABEL_12;
  }
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3] | a2[4];
  if (!(v7 | *a2 | v6 | v5))
  {
    v3 = 2;
    goto LABEL_11;
  }
  v8 = v7 | v6 | v5;
  if (v4 == 1 && !v8)
  {
    v3 = 3;
    if (!*((_BYTE *)a1 + 40))
      return v3 < v2;
    goto LABEL_12;
  }
  if (v8)
    v14 = 0;
  else
    v14 = v4 == 2;
  v3 = 5;
  if (!v14)
    v3 = 6;
  if (*((_BYTE *)a1 + 40))
  {
LABEL_12:
    if ((_DWORD)v2 == 1)
    {
      v2 = 4;
    }
    else
    {
      v9 = *a1;
      v10 = a1[3];
      v11 = a1[4];
      v12 = a1[2] | a1[1];
      if (v12 | *a1 | v10 | v11)
      {
        v13 = v12 | v10 | v11;
        if (v9 != 1 || v13)
        {
          if (v13)
            v15 = 0;
          else
            v15 = v9 == 2;
          v2 = 5;
          if (!v15)
            v2 = 6;
        }
        else
        {
          v2 = 3;
        }
      }
      else
      {
        v2 = 2;
      }
    }
  }
  return v3 < v2;
}

uint64_t sub_1001B0F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  type metadata accessor for DispatchTimeInterval(0);
  __chkstk_darwin();
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC8Podcasts24DownloadsAlertController____lazy_storage___debouncer;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController____lazy_storage___debouncer))
  {
    v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController____lazy_storage___debouncer);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 16))(v4, v1 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController_debounceInterval);
    v7 = swift_allocObject(&unk_1004B2B88, 24, 7);
    swift_weakInit(v7 + 16, v1);
    v8 = type metadata accessor for Debouncer(0);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v6 = sub_10028ED98((uint64_t)v4, (uint64_t)sub_1001B4CE4, v7);
    swift_release(v7);
    v9 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v6;
    swift_retain();
    swift_release(v9);
  }
  swift_retain();
  return v6;
}

double sub_1001B1048(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_1001B1464();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

double sub_1001B109C(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(v2 + 56);
  v11 = swift_allocObject(&unk_1004B2B88, 24, 7);
  swift_weakInit(v11 + 16, v2);
  v12 = swift_allocObject(&unk_1004B2BB0, 65, 7);
  *(_QWORD *)(v12 + 16) = v11;
  sub_1001B4C18(a1, (_OWORD *)(v12 + 24));
  aBlock[4] = sub_1001B4CD8;
  v24 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B2BC8;
  v13 = _Block_copy(aBlock);
  swift_retain();
  v14 = sub_1001B4C30((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001B1E6C);
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_10017F258();
  v16 = sub_10003F544((uint64_t *)&unk_10055B200);
  v17 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v4, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = v24;
  swift_release(v11);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

double sub_1001B12C8(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v19, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = (_QWORD *)(Strong + 64);
    swift_beginAccess(Strong + 64, v18, 33, 0);
    v7 = *(_QWORD **)(v5 + 64);
    sub_1001B4C30((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001B1E6C);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    *(_QWORD *)(v5 + 64) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v7 = sub_10027B734(0, v7[2] + 1, 1, v7);
      *v6 = v7;
    }
    v10 = v7[2];
    v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      v7 = sub_10027B734((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      *v6 = v7;
    }
    v7[2] = v10 + 1;
    sub_1001B4C18(a2, &v7[6 * v10 + 4]);
    swift_endAccess(v18);
    swift_release(v5);
  }
  swift_beginAccess(v3, v18, 0, 0);
  v11 = swift_weakLoadStrong(v3);
  if (v11)
  {
    v13 = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController_active);
    *(_QWORD *)&result = swift_release(v11).n128_u64[0];
    if (v13 == 1)
    {
      swift_beginAccess(v3, v17, 0, 0);
      v14 = swift_weakLoadStrong(v3);
      if (v14)
      {
        v15 = v14;
        v16 = sub_1001B0F34();
        swift_release(v15);
        sub_10028E640();
        *(_QWORD *)&result = swift_release(v16).n128_u64[0];
      }
    }
  }
  return result;
}

double sub_1001B1464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v0 + 56);
  aBlock[4] = sub_1001B4650;
  v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B2AD8;
  v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_10017F258();
  v12 = sub_10003F544((uint64_t *)&unk_10055B200);
  v13 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

double sub_1001B1618(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[3];
  uint64_t v11;
  _QWORD v12[5];
  char v13;

  sub_1001B4658(a1 + 16, (uint64_t)v10);
  if (v11)
  {
    v2 = sub_10003A834(v10, v11);
    v3 = *(_QWORD *)(*v2 + 24);
    v4 = *(_QWORD *)(*v2 + 32);
    v5 = *(_QWORD *)(*v2 + 40);
    v6 = *(_QWORD *)(*v2 + 48);
    v7 = *(_QWORD *)(*v2 + 56);
    v8 = *(_BYTE *)(*v2 + 64);
    sub_1001B4BBC(v3, v4, v5, v6, v7, v8);
    sub_10003D380(v10);
  }
  else
  {
    sub_1001B46A0((uint64_t)v10);
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = -1;
  }
  v12[0] = v3;
  v12[1] = v4;
  v12[2] = v5;
  v12[3] = v6;
  v12[4] = v7;
  v13 = v8;
  swift_retain();
  sub_1001B486C((uint64_t)v12, a1, a1);
  swift_release(a1);
  return sub_1001B4BA8(v3, v4, v5, v6, v7, v8);
}

_QWORD *sub_1001B1718(_QWORD *a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98[80];
  _QWORD *v99;
  char v100[280];

  v2 = sub_10003F544(&qword_100554978);
  inited = swift_initStackObject(v2, v100);
  *(_OWORD *)(inited + 16) = xmmword_1003CA210;
  *(_QWORD *)(inited + 32) = 0;
  v85 = inited + 32;
  *(_QWORD *)(inited + 40) = 0;
  *(_QWORD *)(inited + 48) = &_swiftEmptySetSingleton;
  *(_QWORD *)(inited + 56) = 0;
  *(_QWORD *)(inited + 64) = 0;
  *(_BYTE *)(inited + 72) = 0;
  *(_OWORD *)(inited + 80) = 0u;
  *(_OWORD *)(inited + 96) = 0u;
  *(_QWORD *)(inited + 112) = 0;
  *(_BYTE *)(inited + 120) = 2;
  *(_QWORD *)(inited + 128) = 1;
  *(_OWORD *)(inited + 136) = 0u;
  *(_OWORD *)(inited + 152) = 0u;
  *(_BYTE *)(inited + 168) = 2;
  *(_QWORD *)(inited + 208) = 0;
  *(_OWORD *)(inited + 176) = 0u;
  *(_OWORD *)(inited + 192) = 0u;
  *(_BYTE *)(inited + 216) = 1;
  *(_QWORD *)(inited + 224) = 2;
  *(_OWORD *)(inited + 232) = 0u;
  *(_OWORD *)(inited + 248) = 0u;
  *(_BYTE *)(inited + 264) = 2;
  swift_bridgeObjectRetain(a1);
  v84 = inited;
  swift_bridgeObjectRetain(inited);
  v4 = 0;
  do
  {
    v7 = v85 + 48 * v4;
    v9 = *(_QWORD *)v7;
    v8 = *(_QWORD *)(v7 + 8);
    v10 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    v12 = *(_QWORD *)(v7 + 32);
    v13 = *(unsigned __int8 *)(v7 + 40);
    v14 = a1;
    v15 = a1[2];
    v93 = *(unsigned __int8 *)(v7 + 40);
    v94 = v14;
    v87 = v4;
    v88 = v12;
    v91 = v8;
    v92 = *(_QWORD *)v7;
    v89 = v11;
    v90 = v10;
    if (v15)
    {
      v86 = v15;
      v96 = *(unsigned __int8 *)(v7 + 40);
      v16 = v14;
      if (*(_BYTE *)(v7 + 40))
      {
        if (v13 == 1)
        {
          v17 = 4;
        }
        else
        {
          v20 = v10 | v8 | v11 | v12;
          if (v20)
            v21 = 0;
          else
            v21 = v9 == 2;
          v22 = 5;
          if (!v21)
            v22 = 6;
          v23 = v9 == 1 && v20 == 0;
          v17 = 3;
          if (!v23)
            v17 = v22;
          if (!(v10 | v8 | v9 | v11 | v12))
            v17 = 2;
        }
        v96 = v17;
      }
      v24 = v8;
      swift_bridgeObjectRetain_n(v14, 2);
      sub_1001B1E6C(v9, v24, v10, v11, v12, v13);
      v25 = (char *)(v16 + 9);
      v26 = v86;
      v19 = _swiftEmptyArrayStorage;
      do
      {
        v31 = *((_QWORD *)v25 - 5);
        v30 = *((_QWORD *)v25 - 4);
        v32 = *((_QWORD *)v25 - 3);
        v33 = *((_QWORD *)v25 - 2);
        v34 = *((_QWORD *)v25 - 1);
        v35 = *v25;
        v36 = *v25;
        if (*v25)
        {
          if (v35 == 1)
          {
            v36 = 4;
          }
          else if (v32 | v30 | v31 | v33 | v34)
          {
            v37 = v32 | v30 | v33 | v34;
            if (v31 != 1 || v37)
            {
              if (v37)
                v38 = 0;
              else
                v38 = v31 == 2;
              v36 = 5;
              if (!v38)
                v36 = 6;
            }
            else
            {
              v36 = 3;
            }
          }
          else
          {
            v36 = 2;
          }
        }
        if (v36 != v96)
        {
          sub_1001B1E6C(*((_QWORD *)v25 - 5), *((_QWORD *)v25 - 4), *((_QWORD *)v25 - 3), *((_QWORD *)v25 - 2), *((_QWORD *)v25 - 1), *v25);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
          v99 = v19;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10017B1E0(0, v19[2] + 1, 1);
            v19 = v99;
          }
          v28 = v19[2];
          v27 = v19[3];
          if (v28 >= v27 >> 1)
          {
            sub_10017B1E0(v27 > 1, v28 + 1, 1);
            v19 = v99;
          }
          v19[2] = v28 + 1;
          v29 = &v19[6 * v28];
          v29[4] = v31;
          v29[5] = v30;
          v29[6] = v32;
          v29[7] = v33;
          v29[8] = v34;
          *((_BYTE *)v29 + 72) = v35;
        }
        v25 += 48;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease(v94);
      v15 = v86;
    }
    else
    {
      v18 = *(_QWORD *)(v7 + 8);
      swift_bridgeObjectRetain(v14);
      sub_1001B1E6C(v9, v18, v10, v11, v12, v13);
      v19 = _swiftEmptyArrayStorage;
    }
    v40 = sub_10003F544(&qword_100556F40);
    v41 = swift_initStackObject(v40, v98);
    v42 = v41;
    *(_OWORD *)(v41 + 16) = xmmword_1003CA200;
    if (!v15)
    {
      *(_QWORD *)(v41 + 64) = 0;
      *(_OWORD *)(v41 + 32) = 0u;
      *(_OWORD *)(v41 + 48) = 0u;
      *(_BYTE *)(v41 + 72) = -1;
      v5 = _swiftEmptyArrayStorage;
      goto LABEL_3;
    }
    v43 = v93;
    v95 = v41;
    if ((_DWORD)v93)
    {
      if ((_DWORD)v93 == 1)
      {
        v43 = 4;
      }
      else
      {
        v44 = v90 | v91 | v89 | v88;
        if (v44)
          v45 = 0;
        else
          v45 = v92 == 2;
        v46 = 5;
        if (!v45)
          v46 = 6;
        v47 = v92 == 1 && v44 == 0;
        v48 = 3;
        if (!v47)
          v48 = v46;
        if (v90 | v91 | v92 | v89 | v88)
          v43 = v48;
        else
          v43 = 2;
      }
    }
    swift_bridgeObjectRetain(v94);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v55 = (char *)(v54 + 72);
    v56 = -1;
    do
    {
      v57 = *((_QWORD *)v55 - 5);
      v58 = *((_QWORD *)v55 - 4);
      v59 = *((_QWORD *)v55 - 3);
      v60 = *((_QWORD *)v55 - 2);
      v61 = *((_QWORD *)v55 - 1);
      v62 = *v55;
      v63 = *v55;
      if (!*v55)
        goto LABEL_75;
      if (v62 == 1)
      {
        if (v43 != 4)
          goto LABEL_64;
        goto LABEL_76;
      }
      if (!(v59 | v58 | v57 | v60 | v61))
      {
        v63 = 2;
LABEL_75:
        if (v43 != v63)
          goto LABEL_64;
LABEL_76:
        if (v56 == 255)
        {
          sub_1001B1E6C(*((_QWORD *)v55 - 5), *((_QWORD *)v55 - 4), *((_QWORD *)v55 - 3), *((_QWORD *)v55 - 2), *((_QWORD *)v55 - 1), *v55);
          v49 = v57;
          v50 = v58;
          v51 = v59;
          v52 = v60;
          v53 = v61;
          v56 = v62;
        }
        else if (!v56)
        {
          if (*v55)
          {
            v56 = 0;
          }
          else
          {
            v67 = v49;
            v68 = v50;
            v69 = v52;
            v70 = v53;
            v71 = v51;
            swift_bridgeObjectRetain(v50);
            swift_bridgeObjectRetain(v71);
            sub_10002CA20(v69, v70);
            swift_bridgeObjectRetain(v59);
            sub_10025BEB8(v72, v71);
            v74 = v73;
            sub_1001B4BA8(v67, v68, v71, v69, v70, 0);
            v53 = v70;
            v52 = v69;
            v50 = v68;
            v49 = v67;
            v56 = 0;
            v51 = v74;
          }
        }
        goto LABEL_64;
      }
      v64 = v59 | v58 | v60 | v61;
      if (v57 == 1 && !v64)
      {
        if (v43 != 3)
          goto LABEL_64;
        goto LABEL_76;
      }
      if (v64)
        v65 = 0;
      else
        v65 = v57 == 2;
      v66 = 5;
      if (!v65)
        v66 = 6;
      if (v43 == v66)
        goto LABEL_76;
LABEL_64:
      v55 += 48;
      --v15;
    }
    while (v15);
    v6 = v94;
    v75 = v49;
    v76 = v50;
    v77 = v52;
    v78 = v53;
    v79 = v51;
    v97 = v56;
    swift_bridgeObjectRelease(v94);
    v42 = v95;
    *(_QWORD *)(v95 + 32) = v75;
    *(_QWORD *)(v95 + 40) = v76;
    *(_QWORD *)(v95 + 48) = v79;
    *(_QWORD *)(v95 + 56) = v77;
    *(_QWORD *)(v95 + 64) = v78;
    *(_BYTE *)(v95 + 72) = v97;
    if (v97 == -1)
    {
      v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_1001B1E6C(v75, v76, v79, v77, v78, v97);
      v5 = sub_10027B734(0, 1, 1, _swiftEmptyArrayStorage);
      v81 = v5[2];
      v80 = v5[3];
      if (v81 >= v80 >> 1)
        v5 = sub_10027B734((_QWORD *)(v80 > 1), v81 + 1, 1, v5);
      v5[2] = v81 + 1;
      v82 = &v5[6 * v81];
      v82[4] = v75;
      v82[5] = v76;
      v82[6] = v79;
      v82[7] = v77;
      v82[8] = v78;
      *((_BYTE *)v82 + 72) = v97;
LABEL_3:
      v6 = v94;
    }
    swift_release(v42);
    v99 = v19;
    sub_100173650((uint64_t)v5);
    v4 = v87 + 1;
    swift_bridgeObjectRelease_n(v6, 2);
    sub_1001B1EE4(v92, v91, v90, v89, v88, v93);
    a1 = v99;
  }
  while (v87 != 4);
  swift_bridgeObjectRelease(v84);
  swift_setDeallocating(v84);
  swift_arrayDestroy(v85, *(_QWORD *)(v84 + 16), &type metadata for PresentableError);
  return a1;
}

uint64_t sub_1001B1DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1001B46A0(v0 + 16);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  v1 = v0 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController_debounceInterval;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController____lazy_storage___debouncer));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001B1E64()
{
  return type metadata accessor for DownloadsAlertController(0);
}

double sub_1001B1E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  double result;

  if (a6 == 1)
  {
    *(_QWORD *)&result = swift_bridgeObjectRetain(a2).n128_u64[0];
  }
  else if (!a6)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    sub_10002CA20(a4, a5);
  }
  return result;
}

double destroy for PresentableError(uint64_t a1)
{
  return sub_1001B1EE4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

double sub_1001B1EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  double result;

  if (a6 == 1)
  {
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  }
  else if (!a6)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
    sub_10002CA30(a4, a5);
  }
  return result;
}

uint64_t initializeWithCopy for PresentableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_1001B1E6C(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PresentableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_1001B1E6C(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_1001B1EE4(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 initializeWithTake for PresentableError(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PresentableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_1001B1EE4(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentableError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentableError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001B2154(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) <= 1u)
    return *(unsigned __int8 *)(a1 + 40);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1001B216C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PresentableError()
{
  return &type metadata for PresentableError;
}

unint64_t sub_1001B21A4()
{
  unint64_t result;

  result = qword_100556F20;
  if (!qword_100556F20)
  {
    result = swift_getWitnessTable(&unk_1003CC574, &type metadata for PresentableError);
    atomic_store(result, (unint64_t *)&qword_100556F20);
  }
  return result;
}

uint64_t sub_1001B21E8()
{
  return sub_10002F9C8(&qword_100556F28, &qword_100556F30, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_1001B2214(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001FB2B4(v2);
  v3 = *(uint64_t **)(v2 + 16);
  v4[0] = (uint64_t *)(v2 + 32);
  v4[1] = v3;
  sub_1001B227C(v4);
  *a1 = v2;
}

void sub_1001B227C(uint64_t **a1)
{
  uint64_t v1;
  uint64_t **v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  Swift::Int v56;
  Swift::Int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  Swift::Int v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  Swift::Int v118;
  uint64_t v119;
  _OWORD *v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  BOOL v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  char *v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  _OWORD *v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  BOOL v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  unint64_t v174;
  uint64_t **v175;
  _QWORD *v176;
  Swift::Int v177;
  Swift::Int v178;
  unsigned __int8 *__dst;
  char *v180;
  uint64_t v181;

  v2 = a1;
  v3 = (Swift::Int)a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
LABEL_275:
      __break(1u);
LABEL_276:
      __break(1u);
LABEL_277:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return;
    }
    if ((unint64_t)v3 < 2)
      return;
    v142 = *v2;
    v143 = -1;
    v144 = 1;
    v145 = *v2;
LABEL_195:
    v146 = v143;
    v147 = v145;
    while (1)
    {
      v148 = v147 + 6;
      v149 = v147[6];
      v150 = *((unsigned __int8 *)v147 + 88);
      v151 = *((unsigned __int8 *)v147 + 88);
      if (!*((_BYTE *)v147 + 88))
        goto LABEL_206;
      if (v150 == 1)
      {
        v151 = 4;
        v152 = *((unsigned __int8 *)v147 + 40);
        if (*((_BYTE *)v147 + 40))
          goto LABEL_207;
        goto LABEL_228;
      }
      v153 = v147[7];
      v154 = v147[8];
      v155 = v147[9] | v147[10];
      if (!(v155 | v149 | v154 | v153))
        break;
      v156 = v155 | v154 | v153;
      if (v149 != 1 || v156)
      {
        if (v156)
          v162 = 0;
        else
          v162 = v149 == 2;
        if (v162)
          v151 = 5;
        else
          v151 = 6;
        v152 = *((unsigned __int8 *)v147 + 40);
        if (!*((_BYTE *)v147 + 40))
          goto LABEL_228;
LABEL_207:
        if ((_DWORD)v152 == 1)
        {
          v152 = 4;
        }
        else
        {
          v157 = *v147;
          v158 = v147[3];
          v159 = v147[4];
          v160 = v147[2] | v147[1];
          if (v160 | *v147 | v158 | v159)
          {
            v161 = v160 | v158 | v159;
            if (v157 != 1 || v161)
            {
              if (v161)
                v163 = 0;
              else
                v163 = v157 == 2;
              if (v163)
                v152 = 5;
              else
                v152 = 6;
            }
            else
            {
              v152 = 3;
            }
          }
          else
          {
            v152 = 2;
          }
        }
        goto LABEL_228;
      }
      v151 = 3;
      v152 = *((unsigned __int8 *)v147 + 40);
      if (*((_BYTE *)v147 + 40))
        goto LABEL_207;
LABEL_228:
      if (v151 >= v152)
        goto LABEL_194;
      if (!v142)
        goto LABEL_272;
      v164 = *(_OWORD *)(v147 + 7);
      v165 = *(_OWORD *)(v147 + 9);
      v166 = *((_OWORD *)v147 + 1);
      *v148 = *(_OWORD *)v147;
      *((_OWORD *)v147 + 4) = v166;
      v167 = *((_OWORD *)v147 + 2);
      *v147 = v149;
      *(_OWORD *)(v147 + 1) = v164;
      *(_OWORD *)(v147 + 3) = v165;
      *((_BYTE *)v147 + 40) = v150;
      v147 -= 6;
      v148[2] = v167;
      if (__CFADD__(v146++, 1))
      {
LABEL_194:
        ++v144;
        v145 += 6;
        --v143;
        if (v144 == v3)
          return;
        goto LABEL_195;
      }
    }
    v151 = 2;
LABEL_206:
    v152 = *((unsigned __int8 *)v147 + 40);
    if (*((_BYTE *)v147 + 40))
      goto LABEL_207;
    goto LABEL_228;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_277;
  v6 = v4;
  v181 = v1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v141 = (char *)_swiftEmptyArrayStorage;
LABEL_234:
      v176 = v9;
      if (v12 < 2)
        goto LABEL_192;
      v169 = *v2;
      while (1)
      {
        v170 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v169)
          goto LABEL_276;
        v140 = v141;
        v171 = *(_QWORD *)&v141[16 * v170 + 32];
        v172 = *(_QWORD *)&v141[16 * v12 + 24];
        sub_1001B2D2C((unsigned __int8 *)&v169[6 * v171], (unsigned __int8 *)&v169[6 * *(_QWORD *)&v141[16 * v12 + 16]], (unint64_t)&v169[6 * v172], __dst);
        if (v181)
          goto LABEL_191;
        if (v172 < v171)
          goto LABEL_264;
        if ((swift_isUniquelyReferenced_nonNull_native(v140) & 1) == 0)
          v140 = sub_1001FA68C((uint64_t)v140);
        if (v170 >= *((_QWORD *)v140 + 2))
          goto LABEL_265;
        v173 = &v140[16 * v170 + 32];
        *(_QWORD *)v173 = v171;
        *((_QWORD *)v173 + 1) = v172;
        v174 = *((_QWORD *)v140 + 2);
        if (v12 > v174)
          goto LABEL_266;
        memmove(&v140[16 * v12 + 16], &v140[16 * v12 + 32], 16 * (v174 - v12));
        v141 = v140;
        *((_QWORD *)v140 + 2) = v174 - 1;
        v12 = v174 - 1;
        if (v174 <= 2)
          goto LABEL_192;
      }
LABEL_263:
      __break(1u);
LABEL_264:
      __break(1u);
LABEL_265:
      __break(1u);
LABEL_266:
      __break(1u);
LABEL_267:
      __break(1u);
      goto LABEL_268;
    }
    v176 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for PresentableError);
    *(_QWORD *)(v8 + 16) = v7;
    v176 = (_QWORD *)v8;
    __dst = (unsigned __int8 *)(v8 + 32);
  }
  v10 = 0;
  v175 = v2;
  v11 = *v2;
  v180 = (char *)_swiftEmptyArrayStorage;
  v177 = v6;
  v178 = v3;
  while (2)
  {
    v13 = v10++;
    if (v10 < v3)
    {
      v14 = &v11[6 * v10];
      v15 = *((unsigned __int8 *)v14 + 40);
      if (*((_BYTE *)v14 + 40))
      {
        if ((_DWORD)v15 == 1)
        {
          v15 = 4;
        }
        else
        {
          v17 = v14[3];
          v16 = v14[4];
          v18 = v14[2];
          v19 = *v14;
          v20 = v14[1];
          v21 = v17 | v16;
          v22 = v21 | v19 | v18 | v20;
          v23 = v21 | v18 | v20;
          if (v23)
            v24 = 0;
          else
            v24 = v19 == 2;
          if (v24)
            v25 = 5;
          else
            v25 = 6;
          v26 = v19 == 1 && v23 == 0;
          v15 = 3;
          if (!v26)
            v15 = v25;
          if (!v22)
            v15 = 2;
        }
      }
      v27 = &v11[6 * v13];
      v28 = *((unsigned __int8 *)v27 + 40);
      if (*((_BYTE *)v27 + 40))
      {
        if ((_DWORD)v28 == 1)
        {
          v28 = 4;
        }
        else
        {
          v29 = *v27;
          v30 = v27[1];
          v32 = v27[2];
          v31 = v27[3];
          v33 = v27[4];
          v34 = v32 | v30;
          v35 = v34 | v29 | v31 | v33;
          v36 = v34 | v31 | v33;
          if (v36)
            v37 = 0;
          else
            v37 = v29 == 2;
          if (v37)
            v38 = 5;
          else
            v38 = 6;
          v39 = v29 == 1 && v36 == 0;
          v28 = 3;
          if (!v39)
            v28 = v38;
          if (!v35)
            v28 = 2;
        }
      }
      v10 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v40 = (uint64_t)&v11[6 * v13 + 9];
        while (1)
        {
          v41 = *(unsigned __int8 *)(v40 + 64);
          if (!*(_BYTE *)(v40 + 64))
            goto LABEL_61;
          if ((_DWORD)v41 == 1)
          {
            v41 = 4;
            v42 = *(unsigned __int8 *)(v40 + 16);
            if (*(_BYTE *)(v40 + 16))
              goto LABEL_62;
            goto LABEL_83;
          }
          v43 = *(_QWORD *)(v40 + 24);
          v44 = *(_QWORD *)(v40 + 32);
          v45 = *(_QWORD *)(v40 + 40);
          v46 = *(_QWORD *)(v40 + 48) | *(_QWORD *)(v40 + 56);
          if (!(v46 | v43 | v45 | v44))
            break;
          v47 = v46 | v45 | v44;
          if (v43 != 1 || v47)
          {
            if (v47)
              v52 = 0;
            else
              v52 = v43 == 2;
            if (v52)
              v41 = 5;
            else
              v41 = 6;
            v42 = *(unsigned __int8 *)(v40 + 16);
            if (!*(_BYTE *)(v40 + 16))
              goto LABEL_83;
LABEL_62:
            if ((_DWORD)v42 == 1)
            {
              v42 = 4;
            }
            else
            {
              v48 = *(_QWORD *)(v40 - 24);
              v49 = *(_QWORD *)(v40 + 8);
              v50 = *(_QWORD *)(v40 - 8) | *(_QWORD *)(v40 - 16);
              if (v50 | v48 | *(_QWORD *)v40 | v49)
              {
                v51 = v50 | *(_QWORD *)v40 | v49;
                if (v48 != 1 || v51)
                {
                  if (v51)
                    v53 = 0;
                  else
                    v53 = v48 == 2;
                  if (v53)
                    v42 = 5;
                  else
                    v42 = 6;
                }
                else
                {
                  v42 = 3;
                }
              }
              else
              {
                v42 = 2;
              }
            }
            goto LABEL_83;
          }
          v41 = 3;
          v42 = *(unsigned __int8 *)(v40 + 16);
          if (*(_BYTE *)(v40 + 16))
            goto LABEL_62;
LABEL_83:
          if (v15 < v28 == v41 >= v42)
            goto LABEL_86;
          v40 += 48;
          if (v3 == ++v10)
          {
            v10 = v3;
            goto LABEL_86;
          }
        }
        v41 = 2;
LABEL_61:
        v42 = *(unsigned __int8 *)(v40 + 16);
        if (*(_BYTE *)(v40 + 16))
          goto LABEL_62;
        goto LABEL_83;
      }
LABEL_86:
      if (v15 < v28)
      {
        if (v10 < v13)
          goto LABEL_269;
        if (v13 < v10)
        {
          v54 = 6 * v10;
          v55 = 6 * v13;
          v56 = v10;
          v57 = v13;
          do
          {
            if (v57 != --v56)
            {
              if (!v11)
                goto LABEL_275;
              v58 = &v11[v55];
              v59 = v11[v55 + 4];
              v60 = &v11[v54];
              v61 = v11[v55 + 5];
              v62 = *(_OWORD *)&v11[v55];
              v63 = *(_OWORD *)&v11[v55 + 2];
              v65 = *(_OWORD *)&v11[v54 - 4];
              v64 = *(_OWORD *)&v11[v54 - 2];
              *(_OWORD *)v58 = *(_OWORD *)&v11[v54 - 6];
              *((_OWORD *)v58 + 1) = v65;
              *((_OWORD *)v58 + 2) = v64;
              *((_OWORD *)v60 - 3) = v62;
              *((_OWORD *)v60 - 2) = v63;
              *(v60 - 2) = v59;
              *((_BYTE *)v60 - 8) = v61;
            }
            ++v57;
            v54 -= 6;
            v55 += 6;
          }
          while (v57 < v56);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_102;
    if (__OFSUB__(v10, v13))
      goto LABEL_267;
    if (v10 - v13 >= v6)
      goto LABEL_102;
    v66 = v13 + v6;
    if (__OFADD__(v13, v6))
      goto LABEL_270;
    if (v66 >= v3)
      v66 = v3;
    if (v66 < v13)
      goto LABEL_271;
    if (v10 == v66)
    {
LABEL_102:
      v67 = v180;
      if (v10 < v13)
        goto LABEL_262;
      goto LABEL_103;
    }
    v117 = (uint64_t)&v11[6 * v10 - 6];
    v67 = v180;
    while (2)
    {
      v118 = v13;
      v119 = v117;
      do
      {
        v120 = (_OWORD *)(v119 + 48);
        v121 = *(_QWORD *)(v119 + 48);
        v122 = *(unsigned __int8 *)(v119 + 88);
        v123 = *(unsigned __int8 *)(v119 + 88);
        if (!*(_BYTE *)(v119 + 88))
          goto LABEL_162;
        if (v122 == 1)
        {
          v123 = 4;
          v124 = *(unsigned __int8 *)(v119 + 40);
          if (!*(_BYTE *)(v119 + 40))
            goto LABEL_184;
          goto LABEL_163;
        }
        v126 = *(_QWORD *)(v119 + 56);
        v125 = *(_QWORD *)(v119 + 64);
        v127 = *(_QWORD *)(v119 + 72) | *(_QWORD *)(v119 + 80);
        if (!(v127 | v121 | v125 | v126))
        {
          v123 = 2;
LABEL_162:
          v124 = *(unsigned __int8 *)(v119 + 40);
          if (!*(_BYTE *)(v119 + 40))
            goto LABEL_184;
LABEL_163:
          if ((_DWORD)v124 == 1)
          {
            v124 = 4;
          }
          else
          {
            v129 = *(_QWORD *)v119;
            v130 = *(_QWORD *)(v119 + 24);
            v131 = *(_QWORD *)(v119 + 32);
            v132 = *(_QWORD *)(v119 + 16) | *(_QWORD *)(v119 + 8);
            if (v132 | *(_QWORD *)v119 | v130 | v131)
            {
              v133 = v132 | v130 | v131;
              if (v129 != 1 || v133)
              {
                if (v133)
                  v135 = 0;
                else
                  v135 = v129 == 2;
                if (v135)
                  v124 = 5;
                else
                  v124 = 6;
              }
              else
              {
                v124 = 3;
              }
            }
            else
            {
              v124 = 2;
            }
          }
          goto LABEL_184;
        }
        v128 = v127 | v125 | v126;
        if (v121 == 1 && !v128)
        {
          v123 = 3;
          v124 = *(unsigned __int8 *)(v119 + 40);
          if (!*(_BYTE *)(v119 + 40))
            goto LABEL_184;
          goto LABEL_163;
        }
        if (v128)
          v134 = 0;
        else
          v134 = v121 == 2;
        if (v134)
          v123 = 5;
        else
          v123 = 6;
        v124 = *(unsigned __int8 *)(v119 + 40);
        if (*(_BYTE *)(v119 + 40))
          goto LABEL_163;
LABEL_184:
        if (v123 >= v124)
          break;
        if (!v11)
          goto LABEL_273;
        v136 = *(_OWORD *)(v119 + 56);
        v137 = *(_OWORD *)(v119 + 72);
        v138 = *(_OWORD *)(v119 + 16);
        *v120 = *(_OWORD *)v119;
        *(_OWORD *)(v119 + 64) = v138;
        v139 = *(_OWORD *)(v119 + 32);
        *(_QWORD *)v119 = v121;
        *(_OWORD *)(v119 + 8) = v136;
        *(_OWORD *)(v119 + 24) = v137;
        *(_BYTE *)(v119 + 40) = v122;
        v119 -= 48;
        ++v118;
        v120[2] = v139;
      }
      while (v10 != v118);
      ++v10;
      v117 += 48;
      if (v10 != v66)
        continue;
      break;
    }
    v10 = v66;
    if (v66 < v13)
    {
LABEL_262:
      __break(1u);
      goto LABEL_263;
    }
LABEL_103:
    if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
      v67 = sub_1001FA388(0, *((_QWORD *)v67 + 2) + 1, 1, v67);
    v69 = *((_QWORD *)v67 + 2);
    v68 = *((_QWORD *)v67 + 3);
    v12 = v69 + 1;
    if (v69 >= v68 >> 1)
      v67 = sub_1001FA388((char *)(v68 > 1), v69 + 1, 1, v67);
    *((_QWORD *)v67 + 2) = v12;
    v70 = v67 + 32;
    v71 = &v67[16 * v69 + 32];
    *(_QWORD *)v71 = v13;
    *((_QWORD *)v71 + 1) = v10;
    v180 = v67;
    if (!v69)
    {
      v12 = 1;
LABEL_15:
      v6 = v177;
      v3 = v178;
      if (v10 >= v178)
      {
        v9 = v176;
        v141 = v180;
        v2 = v175;
        goto LABEL_234;
      }
      continue;
    }
    break;
  }
  while (2)
  {
    v72 = v12 - 1;
    if (v12 >= 4)
    {
      v77 = &v70[16 * v12];
      v78 = *((_QWORD *)v77 - 8);
      v79 = *((_QWORD *)v77 - 7);
      v83 = __OFSUB__(v79, v78);
      v80 = v79 - v78;
      if (v83)
        goto LABEL_251;
      v82 = *((_QWORD *)v77 - 6);
      v81 = *((_QWORD *)v77 - 5);
      v83 = __OFSUB__(v81, v82);
      v75 = v81 - v82;
      v76 = v83;
      if (v83)
        goto LABEL_252;
      v84 = v12 - 2;
      v85 = &v70[16 * v12 - 32];
      v87 = *(_QWORD *)v85;
      v86 = *((_QWORD *)v85 + 1);
      v83 = __OFSUB__(v86, v87);
      v88 = v86 - v87;
      if (v83)
        goto LABEL_254;
      v83 = __OFADD__(v75, v88);
      v89 = v75 + v88;
      if (v83)
        goto LABEL_257;
      if (v89 >= v80)
      {
        v107 = &v70[16 * v72];
        v109 = *(_QWORD *)v107;
        v108 = *((_QWORD *)v107 + 1);
        v83 = __OFSUB__(v108, v109);
        v110 = v108 - v109;
        if (v83)
          goto LABEL_261;
        v100 = v75 < v110;
      }
      else
      {
LABEL_121:
        if ((v76 & 1) != 0)
          goto LABEL_253;
        v84 = v12 - 2;
        v90 = &v70[16 * v12 - 32];
        v92 = *(_QWORD *)v90;
        v91 = *((_QWORD *)v90 + 1);
        v93 = __OFSUB__(v91, v92);
        v94 = v91 - v92;
        v95 = v93;
        if (v93)
          goto LABEL_256;
        v96 = &v70[16 * v72];
        v98 = *(_QWORD *)v96;
        v97 = *((_QWORD *)v96 + 1);
        v83 = __OFSUB__(v97, v98);
        v99 = v97 - v98;
        if (v83)
          goto LABEL_259;
        if (__OFADD__(v94, v99))
          goto LABEL_260;
        if (v94 + v99 < v75)
          goto LABEL_133;
        v100 = v75 < v99;
      }
      if (v100)
        v72 = v84;
    }
    else
    {
      if (v12 == 3)
      {
        v74 = *((_QWORD *)v67 + 4);
        v73 = *((_QWORD *)v67 + 5);
        v83 = __OFSUB__(v73, v74);
        v75 = v73 - v74;
        v76 = v83;
        goto LABEL_121;
      }
      v101 = *((_QWORD *)v67 + 4);
      v102 = *((_QWORD *)v67 + 5);
      v83 = __OFSUB__(v102, v101);
      v94 = v102 - v101;
      v95 = v83;
LABEL_133:
      if ((v95 & 1) != 0)
        goto LABEL_255;
      v103 = &v70[16 * v72];
      v105 = *(_QWORD *)v103;
      v104 = *((_QWORD *)v103 + 1);
      v83 = __OFSUB__(v104, v105);
      v106 = v104 - v105;
      if (v83)
        goto LABEL_258;
      if (v106 < v94)
        goto LABEL_15;
    }
    v111 = v72 - 1;
    if (v72 - 1 >= v12)
    {
      __break(1u);
LABEL_248:
      __break(1u);
LABEL_249:
      __break(1u);
LABEL_250:
      __break(1u);
LABEL_251:
      __break(1u);
LABEL_252:
      __break(1u);
LABEL_253:
      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __break(1u);
LABEL_261:
      __break(1u);
      goto LABEL_262;
    }
    if (!v11)
      goto LABEL_274;
    v112 = &v70[16 * v111];
    v113 = *(_QWORD *)v112;
    v114 = &v70[16 * v72];
    v115 = *((_QWORD *)v114 + 1);
    sub_1001B2D2C((unsigned __int8 *)&v11[6 * *(_QWORD *)v112], (unsigned __int8 *)&v11[6 * *(_QWORD *)v114], (unint64_t)&v11[6 * v115], __dst);
    if (!v181)
    {
      if (v115 < v113)
        goto LABEL_248;
      if (v72 > *((_QWORD *)v180 + 2))
        goto LABEL_249;
      *(_QWORD *)v112 = v113;
      *(_QWORD *)&v70[16 * v111 + 8] = v115;
      v116 = *((_QWORD *)v180 + 2);
      if (v72 >= v116)
        goto LABEL_250;
      v67 = v180;
      v12 = v116 - 1;
      memmove(&v70[16 * v72], v114 + 16, 16 * (v116 - 1 - v72));
      *((_QWORD *)v180 + 2) = v116 - 1;
      if (v116 <= 2)
        goto LABEL_15;
      continue;
    }
    break;
  }
  v140 = v180;
LABEL_191:
  v141 = v140;
LABEL_192:
  swift_bridgeObjectRelease(v141);
  v176[2] = 0;
  swift_bridgeObjectRelease(v176);
}

uint64_t sub_1001B2D2C(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned __int8 *v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unsigned __int8 *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t result;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v59 = __dst;
  v60 = __src;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      v34 = 48 * v11;
      if (__dst != a2 || &a2[v34] <= __dst)
        memmove(__dst, a2, 48 * v11);
      v35 = &v4[v34];
      v58 = &v4[v34];
      v60 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        v36 = (unsigned __int8 *)(a3 - 48);
        do
        {
          v37 = *((_QWORD *)v35 - 6);
          v38 = *(v35 - 8);
          if (*(v35 - 8))
          {
            if ((_DWORD)v38 == 1)
            {
              v38 = 4;
            }
            else
            {
              v40 = *((_QWORD *)v35 - 5);
              v39 = *((_QWORD *)v35 - 4);
              v41 = *((_QWORD *)v35 - 3) | *((_QWORD *)v35 - 2);
              if (v41 | v37 | v39 | v40)
              {
                v42 = v41 | v39 | v40;
                if (v37 != 1 || v42)
                {
                  if (v42)
                    v43 = 0;
                  else
                    v43 = v37 == 2;
                  if (v43)
                    v38 = 5;
                  else
                    v38 = 6;
                }
                else
                {
                  v38 = 3;
                }
              }
              else
              {
                v38 = 2;
              }
            }
          }
          v44 = v6 - 48;
          v45 = *((_QWORD *)v6 - 6);
          v46 = *(v6 - 8);
          if (*(v6 - 8))
          {
            if ((_DWORD)v46 == 1)
            {
              v46 = 4;
            }
            else
            {
              v47 = *((_QWORD *)v6 - 3);
              v48 = *((_QWORD *)v6 - 2);
              v49 = *((_QWORD *)v6 - 4) | *((_QWORD *)v6 - 5);
              if (v49 | v45 | v47 | v48)
              {
                v50 = v49 | v47 | v48;
                if (v45 != 1 || v50)
                {
                  if (v50)
                    v51 = 0;
                  else
                    v51 = v45 == 2;
                  if (v51)
                    v46 = 5;
                  else
                    v46 = 6;
                }
                else
                {
                  v46 = 3;
                }
              }
              else
              {
                v46 = 2;
              }
            }
          }
          v52 = v36 + 48;
          if (v38 >= v46)
          {
            v58 = v35 - 48;
            if (v52 < v35 || v36 >= v35 || v52 != v35)
            {
              v55 = *((_OWORD *)v35 - 3);
              v56 = *((_OWORD *)v35 - 1);
              *((_OWORD *)v36 + 1) = *((_OWORD *)v35 - 2);
              *((_OWORD *)v36 + 2) = v56;
              *(_OWORD *)v36 = v55;
            }
            v44 = v6;
            v35 -= 48;
            if (v6 <= v7)
              break;
          }
          else
          {
            if (v52 != v6 || v36 >= v6)
            {
              v53 = *(_OWORD *)v44;
              v54 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v36 + 1) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v36 + 2) = v54;
              *(_OWORD *)v36 = v53;
            }
            v60 = v6 - 48;
            if (v44 <= v7)
              break;
          }
          v36 -= 48;
          v6 = v44;
        }
        while (v35 > v4);
      }
LABEL_101:
      sub_1001FA5D4((void **)&v60, (const void **)&v59, &v58);
      return 1;
    }
  }
  else if (v8 >= -47)
  {
    v12 = 48 * v9;
    if (__dst != __src || &__src[v12] <= __dst)
      memmove(__dst, __src, v12);
    v13 = &v4[v12];
    v58 = &v4[v12];
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      while (1)
      {
        v14 = v6[40];
        if (!v6[40])
          goto LABEL_18;
        if ((_DWORD)v14 == 1)
        {
          v14 = 4;
          v15 = v4[40];
          if (!v4[40])
            goto LABEL_36;
          goto LABEL_19;
        }
        v16 = *(_QWORD *)v6;
        v17 = *((_QWORD *)v6 + 1);
        v18 = *((_QWORD *)v6 + 2);
        v19 = *((_QWORD *)v6 + 3) | *((_QWORD *)v6 + 4);
        if (!(v19 | *(_QWORD *)v6 | v18 | v17))
          break;
        v20 = v19 | v18 | v17;
        if (v16 != 1 || v20)
        {
          if (v20)
            v26 = 0;
          else
            v26 = v16 == 2;
          if (v26)
            v14 = 5;
          else
            v14 = 6;
          v15 = v4[40];
          if (!v4[40])
          {
LABEL_36:
            if (v14 >= v15)
              goto LABEL_48;
            goto LABEL_37;
          }
        }
        else
        {
          v14 = 3;
          v15 = v4[40];
          if (!v4[40])
            goto LABEL_36;
        }
LABEL_19:
        if ((_DWORD)v15 == 1)
        {
          if (v14 >= 4)
            goto LABEL_48;
        }
        else
        {
          v21 = *(_QWORD *)v4;
          v22 = *((_QWORD *)v4 + 3);
          v23 = *((_QWORD *)v4 + 4);
          v24 = *((_QWORD *)v4 + 2) | *((_QWORD *)v4 + 1);
          if (v24 | *(_QWORD *)v4 | v22 | v23)
          {
            v25 = v24 | v22 | v23;
            if (v21 != 1 || v25)
            {
              if (v25)
                v30 = 0;
              else
                v30 = v21 == 2;
              if (v30)
                v31 = 5;
              else
                v31 = 6;
              if (v14 >= v31)
              {
LABEL_48:
                if (v7 != v4)
                {
                  v32 = *(_OWORD *)v4;
                  v33 = *((_OWORD *)v4 + 2);
                  *((_OWORD *)v7 + 1) = *((_OWORD *)v4 + 1);
                  *((_OWORD *)v7 + 2) = v33;
                  *(_OWORD *)v7 = v32;
                }
                v4 += 48;
                v59 = v4;
                v27 = v6;
                goto LABEL_51;
              }
            }
            else if (v14 >= 3)
            {
              goto LABEL_48;
            }
          }
          else if (v14 >= 2)
          {
            goto LABEL_48;
          }
        }
LABEL_37:
        v27 = v6 + 48;
        if (v7 < v6 || v7 >= v27 || v7 != v6)
        {
          v28 = *(_OWORD *)v6;
          v29 = *((_OWORD *)v6 + 2);
          *((_OWORD *)v7 + 1) = *((_OWORD *)v6 + 1);
          *((_OWORD *)v7 + 2) = v29;
          *(_OWORD *)v7 = v28;
        }
LABEL_51:
        v7 += 48;
        if (v4 < v13)
        {
          v6 = v27;
          if ((unint64_t)v27 < a3)
            continue;
        }
        v60 = v7;
        goto LABEL_101;
      }
      v14 = 2;
LABEL_18:
      v15 = v4[40];
      if (!v4[40])
        goto LABEL_36;
      goto LABEL_19;
    }
    goto LABEL_101;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_1001B3198(uint64_t a1, int64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_10027B12C(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = &v5[a1 + 4];
  v15 = sub_10003F544(&qword_100553D30);
  result = (char *)swift_arrayDestroy(v14, v8, v15);
  if (!v9)
    goto LABEL_20;
  v17 = v5[2];
  v18 = __OFSUB__(v17, a2);
  v19 = v17 - a2;
  if (v18)
    goto LABEL_26;
  if ((v19 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 1);
    v20 = &v5[a2 + 4];
    if (v14 + 1 != v20 || result >= (char *)&v20[v19])
      result = (char *)memmove(result, v20, 8 * v19);
    v21 = v5[2];
    v18 = __OFADD__(v21, v9);
    v22 = v21 + v9;
    if (!v18)
    {
      v5[2] = v22;
LABEL_20:
      *v14 = a3;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v23 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v23, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001B331C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v26 = v7;
    else
      v26 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v25 = v7;
  else
    v25 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  v16 = _s7SectionCMa();
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v7 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v7);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v7 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v29 = v7;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v7);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v7);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001B35F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B3608(a1, a2, a3, (unint64_t *)&qword_100559F60, CPListItem_ptr);
}

uint64_t sub_1001B3608(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a5;
    v8 = a4;
    v12 = a3;
    v7 = a2;
    v11 = a1;
    v10 = *v6;
    if (!((unint64_t)*v6 >> 62))
    {
      v13 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v10 < 0)
    v28 = v10;
  else
    v28 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v13 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v10);
  if (v13 < v7)
    goto LABEL_34;
LABEL_4:
  v13 = v7 - v11;
  if (__OFSUB__(v7, v11))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v5 = 1 - v13;
  if (__OFSUB__(1, v13))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v10 = *v6;
  v36 = v8;
  if (!((unint64_t)*v6 >> 62))
  {
    v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    v15 = v14 + v5;
    if (!__OFADD__(v14, v5))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v10 < 0)
      v30 = v10;
    else
      v30 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v18 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v10);
    goto LABEL_15;
  }
LABEL_37:
  if (v10 < 0)
    v29 = v10;
  else
    v29 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v14 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v10);
  v15 = v14 + v5;
  if (__OFADD__(v14, v5))
    goto LABEL_42;
LABEL_8:
  v10 = *v6;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v6);
  *v6 = v10;
  v35 = v12;
  v14 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    v17 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v15 <= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v14 = 1;
  }
  if ((unint64_t)v10 >> 62)
    goto LABEL_43;
  v18 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v18 <= v15)
    v18 = v15;
  swift_bridgeObjectRetain(v10);
  v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14, v18, 1, v10);
  swift_bridgeObjectRelease(*v6);
  *v6 = v10;
  v17 = v10 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v19 = (_QWORD *)(v17 + 32 + 8 * v11);
  v20 = sub_100005EC8(0, v36, v9);
  v21 = (char *)swift_arrayDestroy(v19, v13, v20);
  if (!v5)
  {
LABEL_28:
    *v19 = v35;
    return specialized Array._endMutation()(v21);
  }
  if (!((unint64_t)v10 >> 62))
  {
    v22 = *(_QWORD *)(v17 + 16);
    v23 = v22 - v7;
    if (!__OFSUB__(v22, v7))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v10 < 0)
    v31 = v10;
  else
    v31 = v17;
  swift_bridgeObjectRetain(v10);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v10);
  v23 = v32 - v7;
  if (__OFSUB__(v32, v7))
    goto LABEL_52;
LABEL_21:
  if ((v23 & 0x8000000000000000) == 0)
  {
    v21 = (char *)(v19 + 1);
    v24 = (char *)(v17 + 32 + 8 * v7);
    if (v19 + 1 != (_QWORD *)v24 || v21 >= &v24[8 * v23])
      v21 = (char *)memmove(v21, v24, 8 * v23);
    if (!((unint64_t)v10 >> 62))
    {
      v25 = *(_QWORD *)(v17 + 16);
      v26 = v25 + v5;
      if (!__OFADD__(v25, v5))
      {
LABEL_27:
        *(_QWORD *)(v17 + 16) = v26;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v10 < 0)
      v33 = v10;
    else
      v33 = v17;
    swift_bridgeObjectRetain(v10);
    v34 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease(v10);
    v26 = v34 + v5;
    if (!__OFADD__(v34, v5))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001B38FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B3608(a1, a2, a3, (unint64_t *)&unk_100562EE0, UIImage_ptr);
}

void sub_1001B3910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  void *v40;
  uint64_t v41;
  const void *v42;
  char *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  _QWORD *v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD aBlock[5];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD v87[2];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;

  v74 = a2;
  v62 = type metadata accessor for DispatchWorkItemFlags(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin();
  v60 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for DispatchQoS(0);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin();
  v69 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  swift_retain();
  v72 = v7;
  if (v7)
  {
    v8 = 0;
    v63 = a3 + 16;
    v9 = a1 + 72;
    v55 = v72 - 1;
    v57 = _swiftEmptyArrayStorage;
    v68 = a3;
    v73 = a1;
    v56 = a1 + 72;
    while (1)
    {
      v10 = (unsigned __int8 *)(v9 + 48 * v8);
      while (1)
      {
        if (v8 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v78 = *((_QWORD *)v10 - 5);
        v81 = *((_QWORD *)v10 - 4);
        v77 = *((_QWORD *)v10 - 3);
        v80 = *((_QWORD *)v10 - 2);
        v79 = *((_QWORD *)v10 - 1);
        v11 = *v10;
        v12 = *v10;
        v76 = v8 + 1;
        sub_1001B4BD0(v74, (uint64_t)v87);
        if (v91 == 255)
          break;
        v75 = v87[1];
        v13 = v88;
        v14 = v89;
        v15 = v90;
        if (v91)
        {
          if (v91 == 1)
          {
            v16 = 4;
            if (!v12)
              goto LABEL_37;
          }
          else if (v88 | v75 | v87[0] | v89 | v90)
          {
            v17 = v88 | v75 | v89 | v90;
            if (v87[0] != 1 || v17)
            {
              if (v17)
                v18 = 0;
              else
                v18 = v87[0] == 2;
              v16 = 5;
              if (!v18)
                v16 = 6;
              if (!v12)
                goto LABEL_37;
            }
            else
            {
              v16 = 3;
              if (!v12)
                goto LABEL_37;
            }
          }
          else
          {
            v16 = 2;
            if (!v12)
              goto LABEL_37;
          }
        }
        else
        {
          v16 = 0;
          if (!v12)
            goto LABEL_37;
        }
        if (v12 == 1)
        {
          if (v16 != 4)
            break;
          goto LABEL_38;
        }
        if (!(v77 | v81 | v78 | v80 | v79))
        {
          v11 = 2;
LABEL_37:
          if (v16 != v11)
            break;
          goto LABEL_38;
        }
        v19 = v77 | v81 | v80 | v79;
        if (v78 != 1 || v19)
        {
          if (v19)
            v45 = 0;
          else
            v45 = v78 == 2;
          if (v45)
            v46 = 5;
          else
            v46 = 6;
          if (v16 != v46)
            break;
        }
        else if (v16 != 3)
        {
          break;
        }
LABEL_38:
        if (!v91)
        {
          v70 = v87[0];
          v20 = v74;
          sub_1001B4C30(v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001B4BBC);
          swift_retain();
          sub_1001B4C30(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001B4BBC);
          v21 = v77;
          sub_1001B1E6C(v78, v81, v77, v80, v79, v12);
          swift_bridgeObjectRelease(v13);
          v22 = v75;
          swift_bridgeObjectRelease(v75);
          sub_10002CA30(v14, v15);
          swift_bridgeObjectRetain(v22);
          swift_bridgeObjectRetain(v13);
          sub_10002CA20(v14, v15);
          if (v12)
          {
            v23 = v13;
          }
          else
          {
            swift_bridgeObjectRetain(v21);
            sub_10025BEB8(v24, v13);
          }
          v71 = v23;
          v25 = v70;
          *(_QWORD *)&v92 = v70;
          *((_QWORD *)&v92 + 1) = v22;
          v93 = v23;
          v94 = v14;
          v95 = v15;
          v96 = 0;
          sub_1001B4658(v63, (uint64_t)&v84);
          if (v85)
          {
            v26 = *sub_10003A834(&v84, v85);
            sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
            v65 = static OS_dispatch_queue.main.getter(v27);
            v28 = swift_allocObject(&unk_1004B2B10, 24, 7);
            swift_weakInit(v28 + 16, v26);
            v29 = swift_allocObject(&unk_1004B2B38, 65, 7);
            *(_QWORD *)(v29 + 16) = v28;
            sub_1001B4C18(&v92, (_OWORD *)(v29 + 24));
            aBlock[4] = sub_1001B4C90;
            v83 = v29;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = sub_100027AF8;
            aBlock[3] = &unk_1004B2B50;
            v64 = _Block_copy(aBlock);
            v30 = v83;
            sub_1001B1E6C(v25, v22, v71, v14, v15, 0);
            swift_release(v30);
            v66 = v15;
            v31 = v69;
            static DispatchQoS.unspecified.getter(v32);
            aBlock[0] = _swiftEmptyArrayStorage;
            v33 = sub_10017F258();
            v34 = sub_10003F544((uint64_t *)&unk_10055B200);
            v35 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
            v67 = v14;
            v36 = v60;
            v37 = v62;
            v38 = v68;
            dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v35, v62, v33);
            v39 = v64;
            v40 = (void *)v65;
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v31, v36, v64);
            v41 = v77;
            v42 = v39;
            a3 = v38;
            _Block_release(v42);

            v21 = v41;
            v43 = v36;
            v14 = v67;
            v44 = v37;
            v22 = v75;
            (*(void (**)(char *, uint64_t))(v61 + 8))(v43, v44);
            v15 = v66;
            (*(void (**)(char *, uint64_t))(v58 + 8))(v69, v59);
            sub_10003D380(&v84);
          }
          else
          {
            sub_1001B46A0((uint64_t)&v84);
            a3 = v68;
          }
          sub_1001B4C30(v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001B4BA8);
          sub_1001B1EE4(v25, v22, v71, v14, v15, 0);
          swift_release(a3);
          sub_1001B1EE4(v78, v81, v21, v80, v79, v12);
        }
        v10 += 48;
        v8 = v76;
        a1 = v73;
        if (v72 == v76)
          goto LABEL_59;
      }
      sub_1001B1E6C(v78, v81, v77, v80, v79, v12);
      v47 = v57;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57);
      v86 = v47;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10017B1E0(0, v47[2] + 1, 1);
        v47 = v86;
      }
      v50 = v47[2];
      v49 = v47[3];
      if (v50 >= v49 >> 1)
      {
        sub_10017B1E0(v49 > 1, v50 + 1, 1);
        v47 = v86;
      }
      v47[2] = v50 + 1;
      v57 = v47;
      v51 = &v47[6 * v50];
      v52 = v81;
      v51[4] = v78;
      v51[5] = v52;
      v53 = v80;
      v51[6] = v77;
      v51[7] = v53;
      v51[8] = v79;
      *((_BYTE *)v51 + 72) = v12;
      v18 = v55 == v8;
      a3 = v68;
      a1 = v73;
      v9 = v56;
      v8 = v76;
      if (v18)
        goto LABEL_59;
    }
  }
  v57 = _swiftEmptyArrayStorage;
LABEL_59:
  swift_bridgeObjectRelease(a1);
  sub_1001B4C30(v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001B4BA8);
  swift_release(a3);
}

void *sub_1001B4178(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_10027B498(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = sub_10003F544(&qword_1005545F8);
  result = (void *)swift_arrayDestroy(&v4[5 * a1 + 4], v7, v12);
  if (!v7)
    goto LABEL_20;
  v14 = v4[2];
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_26;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (_QWORD *)&v17[40 * v16])
      result = memmove(&v4[5 * a1 + 4], v17, 40 * v16);
    v18 = v4[2];
    v15 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v15)
    {
      v4[2] = v19;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v20 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v20, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001B42F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = _s7SectionCMa();
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

double sub_1001B45C0()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_10003F544(&qword_100554978);
  v1 = swift_allocObject(v0, 272, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1003CA210;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 48) = &_swiftEmptySetSingleton;
  *(_BYTE *)(v1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 120) = 2;
  *(_QWORD *)(v1 + 128) = 1;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_BYTE *)(v1 + 168) = 2;
  *(_QWORD *)(v1 + 208) = 0;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_BYTE *)(v1 + 216) = 1;
  *(_QWORD *)(v1 + 224) = 2;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_BYTE *)(v1 + 264) = 2;
  return result;
}

double sub_1001B4650()
{
  uint64_t v0;

  return sub_1001B1618(v0);
}

uint64_t sub_1001B4658(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100556F38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B46A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_100556F38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1001B46E0(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_10027B734(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[6 * a1 + 4], v7, &type metadata for PresentableError);
  if (!v7)
    goto LABEL_21;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_27;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[6 * a2 + 4];
    v17 = 48 * v15;
    if (48 * a1 < 48 * a2 || &v4[6 * a1 + 4] >= (_QWORD *)&v16[v17] || a1 != a2)
      result = memmove(&v4[6 * a1 + 4], v16, v17);
    v18 = v4[2];
    v14 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v14)
    {
      v4[2] = v19;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  v20 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v20, 1046, 0);
  __break(1u);
  return result;
}

void sub_1001B486C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  _BYTE v32[24];
  _BYTE v33[80];
  __int128 v34[2];
  unsigned __int8 v35;
  __int128 v36[3];

  v6 = sub_10003F544(&qword_100556F40);
  inited = swift_initStackObject(v6, v33);
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  v8 = (uint64_t *)(a2 + 64);
  swift_beginAccess(a2 + 64, v32, 1, 0);
  v26 = a2;
  v9 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_bridgeObjectRetain(v9);
  v11 = sub_1001B1718(v10);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)&v36[0] = v11;
  swift_bridgeObjectRetain(v11);
  sub_1001B2214((uint64_t *)v36);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)&v36[0];
  swift_retain();
  sub_1001B4C30(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001B4BBC);
  sub_1001B3910(v12, a1, a3);
  v14 = v13;
  swift_release(a3);
  if (*(_QWORD *)(v14 + 16))
  {
    v27 = a1;
    v28 = v8;
    v29 = a3;
    v15 = *(_QWORD *)(v14 + 32);
    v16 = *(_QWORD *)(v14 + 40);
    v17 = *(_QWORD *)(v14 + 48);
    v18 = *(_QWORD *)(v14 + 56);
    v19 = *(_QWORD *)(v14 + 64);
    v20 = *(_BYTE *)(v14 + 72);
    *(_QWORD *)(inited + 32) = v15;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 48) = v17;
    *(_QWORD *)(inited + 56) = v18;
    *(_QWORD *)(inited + 64) = v19;
    *(_BYTE *)(inited + 72) = v20;
    sub_1001B1E6C(v15, v16, v17, v18, v19, v20);
    swift_bridgeObjectRelease(v14);
    sub_1001B1E6C(v15, v16, v17, v18, v19, v20);
    v21 = sub_10027B734(0, 1, 1, _swiftEmptyArrayStorage);
    v23 = v21[2];
    v22 = v21[3];
    if (v23 >= v22 >> 1)
      v21 = sub_10027B734((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
    v21[2] = v23 + 1;
    v24 = &v21[6 * v23];
    v24[4] = v15;
    v24[5] = v16;
    v24[6] = v17;
    v24[7] = v18;
    v24[8] = v19;
    *((_BYTE *)v24 + 72) = v20;
    swift_release(inited);
    v8 = v28;
    a3 = v29;
    a1 = v27;
  }
  else
  {
    *(_QWORD *)(inited + 64) = 0;
    *(_OWORD *)(inited + 32) = 0u;
    *(_OWORD *)(inited + 48) = 0u;
    *(_BYTE *)(inited + 72) = -1;
    swift_release(inited);
    swift_bridgeObjectRelease(v14);
    v21 = _swiftEmptyArrayStorage;
  }
  v25 = *v8;
  *v8 = (uint64_t)v21;
  swift_bridgeObjectRelease(v25);
  sub_1001B4BD0(a1, (uint64_t)v34);
  if (v35 != 255)
  {
    sub_1001B4C18(v34, v36);
LABEL_8:
    swift_release(a3);
    return;
  }
  if (!*(_QWORD *)(*v8 + 16))
    goto LABEL_8;
  swift_beginAccess(v8, v30, 33, 0);
  if (*(_QWORD *)(*v8 + 16))
  {
    sub_1001B4C18((__int128 *)(*v8 + 32), v36);
    sub_1001B4C30((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001B1E6C);
    sub_1001B46E0(0, 1);
    swift_endAccess(v30);
    sub_1001B4658(v26 + 16, (uint64_t)v30);
    if (v31)
    {
      sub_10003A834(v30, v31);
      sub_1001EF440(v36);
      sub_1001B4C30((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001B1EE4);
      sub_10003D380(v30);
    }
    else
    {
      sub_1001B4C30((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001B1EE4);
      sub_1001B46A0((uint64_t)v30);
    }
    goto LABEL_8;
  }
  __break(1u);
  swift_release_n(a3, 2);
  swift_release(*(_QWORD *)&v36[0]);
  __break(1u);
}

double sub_1001B4BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  double result;

  if (a6 != -1)
    return sub_1001B1EE4(a1, a2, a3, a4, a5, a6);
  return result;
}

double sub_1001B4BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  double result;

  if (a6 != -1)
    return sub_1001B1E6C(a1, a2, a3, a4, a5, a6);
  return result;
}

uint64_t sub_1001B4BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100556F48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1001B4C18(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_1001B4C30(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

uint64_t sub_1001B4C68()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1001B4C90()
{
  uint64_t v0;

  return sub_1001EF108(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24));
}

uint64_t sub_1001B4CA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_1001B1EE4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_deallocObject(v0, 65, 7);
}

double sub_1001B4CD8()
{
  uint64_t v0;

  return sub_1001B12C8(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24));
}

double sub_1001B4CE4()
{
  uint64_t v0;

  return sub_1001B1048(v0);
}

uint64_t sub_1001B4CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v1 + 24);
  sub_10000A520(v1 + 32, (uint64_t)v9);
  v4 = type metadata accessor for EpisodeDeletionActionProvider(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  swift_retain();
  v5 = swift_retain();
  v6 = EpisodeDeletionActionProvider.init(asPartOf:episodeDownloadStateController:libraryActionController:)(v2, v3, v9, v5);
  v7 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = v6;
  return swift_release(v7);
}

BOOL sub_1001B4D84()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  result = 0;
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 32))
    {
      v3 = swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 16);
        swift_bridgeObjectRelease(v3);
        if (v4)
          return 1;
      }
    }
  }
  return result;
}

double sub_1001B4DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  double result;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (*(_BYTE *)(v1 + 32))
      v3 = 1;
    else
      v3 = v2 == 0;
    if (!v3)
    {
      v4 = *(_QWORD *)(v0 + 80);
      if (v4)
      {
        v5 = *(_QWORD *)(v1 + 16);
        sub_100198BD4(v5, *(_QWORD *)(v1 + 24), 0);
        v6 = swift_retain();
        dispatch thunk of EpisodeDeletionActionProvider.deleteEpisodesFromStations(episodeUuids:stationUuids:)(v5, v2, v6);
        swift_release(v4);
        swift_bridgeObjectRelease(v2);
        *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
      }
    }
  }
  return result;
}

uint64_t sub_1001B4E60()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10003D380(v0 + 4);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for RemoveFromStationContextAction()
{
  return objc_opt_self(_TtC8Podcasts30RemoveFromStationContextAction);
}

uint64_t sub_1001B4ECC()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001004329D0;
  v1._countAndFlagsBits = 0xD00000000000001CLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1001B4F68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for MetricsLabel.removeFromStation(_:);
  v3 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t NonFollowedShowsSyncProcessor.operationTypeForSET()()
{
  return 15;
}

double sub_1001B4FC0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  sub_1001B50B0((uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_1001B4FFC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 88, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 88));
}

uint64_t sub_1001B5030(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 88, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 88) = a1;
  return swift_release(v3);
}

void *sub_1001B5074(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 88, a1, 33, 0);
  return &j__swift_endAccess;
}

double sub_1001B50B0@<D0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  double result;
  Swift::String v10;

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "systemGrayColor");
  v3 = (void *)objc_opt_self(NSBundle);
  v4 = v2;
  v5 = objc_msgSend(v3, "mainBundle");
  v10._object = (void *)0xE000000000000000;
  v6._object = (void *)0x80000001004329D0;
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  *(_QWORD *)a1 = v2;
  result = 4.58826571e199;
  *(_OWORD *)(a1 + 8) = xmmword_1003CC5B0;
  *(Swift::String *)(a1 + 24) = v8;
  return result;
}

char *sub_1001B519C(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  char *v13;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[1];
    *((_QWORD *)a1 + 1) = v6;
    v7 = *(int *)(a3 + 24);
    v8 = &a1[v7];
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for ReevaluateAutoDownloadsIntent(0);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v12 = v4;
    v13 = v6;
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t sub_1001B5244(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for ReevaluateAutoDownloadsIntent(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1001B5294(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  id v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for ReevaluateAutoDownloadsIntent(0);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v11 = v4;
  v12 = v5;
  v10(v7, v8, v9);
  return a1;
}

uint64_t sub_1001B530C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for ReevaluateAutoDownloadsIntent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_OWORD *sub_1001B5390(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ReevaluateAutoDownloadsIntent(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1001B53EC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ReevaluateAutoDownloadsIntent(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1001B5468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B5474);
}

uint64_t sub_1001B5474(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ReevaluateAutoDownloadsIntent(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1001B54F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B54FC);
}

char *sub_1001B54FC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ReevaluateAutoDownloadsIntent(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ReevaluateAutoDownloadsIntentImplementation(uint64_t a1)
{
  uint64_t result;

  result = qword_100557100;
  if (!qword_100557100)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ReevaluateAutoDownloadsIntentImplementation);
  return result;
}

uint64_t sub_1001B55AC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for ReevaluateAutoDownloadsIntent(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1001B5628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100557140;
  if (!qword_100557140)
  {
    v1 = type metadata accessor for ReevaluateAutoDownloadsIntent(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ReevaluateAutoDownloadsIntent, v1);
    atomic_store(result, (unint64_t *)&qword_100557140);
  }
  return result;
}

uint64_t sub_1001B5670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v7 = (char *)a4 + *(int *)(a3 + 24);
  v8 = type metadata accessor for ReevaluateAutoDownloadsIntent(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  v10 = type metadata accessor for DebouncedAutoDownloadProcessor();
  BaseObjectGraph.inject<A>(_:)(&v13, v10, v10);
  *a4 = v13;
  v11 = type metadata accessor for DebouncedAssetRemovalProcessor();
  BaseObjectGraph.inject<A>(_:)(&v13, v11, v11);
  swift_release(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  a4[1] = v13;
  return result;
}

uint64_t sub_1001B5728()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1001B5740, 0, 0);
}

uint64_t sub_1001B5740()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = sub_1000055E8();
  dispatch thunk of DebouncedEpisodeAndShowProcessor.requestEvaluation()();
  swift_release(v1);
  v2 = sub_100006944();
  dispatch thunk of DebouncedEpisodeAndShowProcessor.requestEvaluation()();
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1001B57A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v1);
  if (*(_QWORD *)(v0 + 16))
    __asm { BR              X10 }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001B6228()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for EpisodeOfferStateCenter()
{
  return objc_opt_self(_TtC8Podcasts23EpisodeOfferStateCenter);
}

uint64_t sub_1001B6274()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[32];
  __int128 v47;
  __int128 v48;
  _QWORD v49[3];
  uint64_t v50;
  unint64_t v51;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for OSLogger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionMetricsBehavior(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544(qword_1005542D8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v2 + 120))(v11);
  v14 = type metadata accessor for PresentationSource(0);
  v15 = *(_QWORD *)(v14 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v17 = PresentationSource.viewController.getter();
    if (v17)
    {
      v18 = (void *)v17;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
      v19 = v18;
      v20 = UIResponder.nearestActionRunner.getter();
      v22 = v21;

      if (v20)
      {
        (*(void (**)(__int128 *__return_ptr))(*v1 + 144))(&v47);
        if (*((_QWORD *)&v48 + 1))
        {
          v43 = v22;
          sub_10002099C(&v47, (uint64_t)v49);
          v23 = v50;
          v24 = v51;
          v25 = sub_10003A834(v49, v50);
          v26 = sub_1001B83A0((uint64_t)v25, v2, v23, v24);
          sub_10003D380(v49);
          if (v26)
          {
            type metadata accessor for ActionRunnerOptions(0);
            v27 = swift_retain();
            v28 = BaseObjectGraph.__allocating_init(_:)(v27);
            v47 = 0u;
            v48 = 0u;
            v29 = objc_msgSend(v19, "view");
            sub_100007A64((uint64_t)&v47, (uint64_t)v46, (uint64_t *)&unk_100552300);
            v30 = v29;
            ActionOrigin.init(sender:view:)(v49, v46, v29);
            v31 = ActionRunnerOptions.withActionOrigin(_:)(v49);
            sub_100007A28((uint64_t)v49, (uint64_t *)&unk_100557CB0);
            swift_release(v28);

            sub_100007A28((uint64_t)&v47, (uint64_t *)&unk_100552300);
            ObjectType = swift_getObjectType(v20, v32);
            v50 = type metadata accessor for Action(0);
            v51 = sub_100193040();
            v49[0] = v26;
            v35 = v44;
            v34 = v45;
            (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v9, enum case for ActionMetricsBehavior.fromAction(_:), v45);
            swift_retain();
            v36 = ActionRunner.perform(_:withMetrics:asPartOf:)(v49, v9, v31, ObjectType, v43);

            swift_release(v26);
            swift_unknownObjectRelease(v20);
            swift_release(v31);
            swift_release(v36);
            (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v34);
            return sub_10003D380(v49);
          }
        }
        else
        {
          sub_100007A28((uint64_t)&v47, &qword_100557C78);
        }

        v37 = swift_unknownObjectRelease(v20);
      }
      else
      {

      }
    }
    else
    {
      v37 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    }
    static OSLogger.actions.getter(v37);
    v38 = sub_10003F544(&qword_100557CA8);
    v39 = type metadata accessor for LogMessage(0);
    v40 = swift_allocObject(v38, ((*(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v39 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80) | 7);
    *(_OWORD *)(v40 + 16) = xmmword_1003CA200;
    LogMessage.init(stringLiteral:)(0xD00000000000003ALL, 0x8000000100432DF0);
    Logger.error(_:)(v40, v3, &protocol witness table for OSLogger);
    v41 = swift_bridgeObjectRelease(v40);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v41);
  }
  return result;
}

uint64_t sub_1001B6668()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = *v0;
  v3 = sub_10003F544(qword_1005542D8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(v2 + 144))(&v20, v4);
  if (v21)
  {
    sub_10002099C(&v20, (uint64_t)v22);
    v7 = v23;
    v8 = v24;
    v9 = sub_10003A834(v22, v23);
    v10 = sub_1001B83A0((uint64_t)v9, v2, v7, v8);
    v11 = sub_10003D380(v22);
    if (v10)
    {
      v12 = type metadata accessor for FlowAction(0);
      if (swift_dynamicCastClass(v10, v12))
      {
        (*(void (**)(void))(*v1 + 120))();
        v13 = type metadata accessor for PresentationSource(0);
        v14 = *(_QWORD *)(v13 - 8);
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v6, 1, v13);
        if ((_DWORD)result == 1)
        {
          __break(1u);
          return result;
        }
        v16 = PresentationSource.viewController.getter();
        if (v16)
        {
          v17 = (void *)v16;
          (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
          v18 = objc_msgSend(v17, "traitCollection");
          v19 = objc_msgSend(v18, "horizontalSizeClass");

          v11 = swift_release(v10);
          if (v19 == (id)1)
            return 1;
        }
        else
        {
          swift_release(v10);
          v11 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v13);
        }
      }
      else
      {
        v11 = swift_release(v10);
      }
    }
  }
  else
  {
    v11 = sub_100007A28((uint64_t)&v20, &qword_100557C78);
  }
  return ContextActionsConfiguration.preferredPreviewActionCommitStyle.getter(v11);
}

uint64_t sub_1001B6830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  sub_1001B6894(a1, a2, a3, a4);
  return v9;
}

uint64_t sub_1001B6894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];
  _BYTE v20[40];

  v9 = type metadata accessor for InteractionContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100007A64(a3, (uint64_t)v20, &qword_100557C78);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a4, v9);
  v13 = v4 + direct field offset for ContextActionsConfiguration.presentationSource;
  v14 = type metadata accessor for PresentationSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v4 + direct field offset for ContextActionsConfiguration.previewModel;
  *(_QWORD *)(v15 + 32) = 0;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_QWORD *)(v4 + 16) = a1;
  v16 = v4 + direct field offset for ContextActionsConfiguration.presentationSource;
  swift_beginAccess(v4 + direct field offset for ContextActionsConfiguration.presentationSource, v19, 33, 0);
  sub_1001B85C0(a2, v16);
  swift_endAccess(v19);
  v17 = v4 + direct field offset for ContextActionsConfiguration.previewModel;
  swift_beginAccess(v4 + direct field offset for ContextActionsConfiguration.previewModel, v19, 33, 0);
  sub_1001B8608((uint64_t)v20, v17);
  swift_endAccess(v19);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 32))(v4 + direct field offset for ContextActionsConfiguration.context, v12, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a4, v9);
  sub_100007A28(a3, &qword_100557C78);
  sub_100007A28(a2, qword_1005542D8);
  return v4;
}

void sub_1001B6A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001B7054(a1, a2, a3, a4, (uint64_t)"Podcasts.EpisodeContextActionConfiguration", 42);
}

uint64_t sub_1001B6A68()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts33EpisodeContextActionConfiguration_dataSource));
}

uint64_t sub_1001B6A78()
{
  return sub_1001B6DA4(&OBJC_IVAR____TtC8Podcasts33EpisodeContextActionConfiguration_dataSource);
}

uint64_t sub_1001B6A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;

  v25 = a1;
  v14 = type metadata accessor for InteractionContext(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10003F544(qword_1005542D8);
  __chkstk_darwin(v18);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_dataSource) = a3;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_selectedText) = a4;
  *(double *)(v7 + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_referenceStartTime) = a7;
  sub_10000A520((uint64_t)a5, v7 + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_alignmentCoordinator);
  v21 = type metadata accessor for PresentationSource(0);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, a2, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a6, v14);
  sub_1001B6894(v25, (uint64_t)v20, (uint64_t)v26, (uint64_t)v17);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a6, v14);
  sub_10003D380(a5);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a2, v21);
  return v7;
}

void sub_1001B6C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001B7054(a1, a2, a3, a4, (uint64_t)"Podcasts.TranscriptSelectionContextActionConfiguration", 54);
}

uint64_t sub_1001B6C44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_dataSource));

  return sub_10003D380((_QWORD *)(v0
                                + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_alignmentCoordinator));
}

uint64_t sub_1001B6C80()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  sub_100007A28((uint64_t)v0 + direct field offset for ContextActionsConfiguration.presentationSource, qword_1005542D8);
  sub_100007A28((uint64_t)v0 + direct field offset for ContextActionsConfiguration.previewModel, &qword_100557C78);
  v1 = (char *)v0 + direct field offset for ContextActionsConfiguration.context;
  v2 = type metadata accessor for InteractionContext(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_dataSource));

  sub_10003D380((_QWORD *)((char *)v0
                         + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_alignmentCoordinator));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001B6D44()
{
  _QWORD *v0;

  return swift_retain(*(_QWORD *)(*v0
                                + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_dataSource));
}

uint64_t sub_1001B6D58()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_referenceStartTime);
}

void sub_1001B6D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001B7054(a1, a2, a3, a4, (uint64_t)"Podcasts.PodcastContextActionConfiguration", 42);
}

uint64_t sub_1001B6D88()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts33PodcastContextActionConfiguration_dataSource));
}

uint64_t sub_1001B6D98()
{
  return sub_1001B6DA4(&OBJC_IVAR____TtC8Podcasts33PodcastContextActionConfiguration_dataSource);
}

uint64_t sub_1001B6DA4(_QWORD *a1)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  swift_release(v1[2]);
  sub_100007A28((uint64_t)v1 + direct field offset for ContextActionsConfiguration.presentationSource, qword_1005542D8);
  sub_100007A28((uint64_t)v1 + direct field offset for ContextActionsConfiguration.previewModel, &qword_100557C78);
  v3 = (char *)v1 + direct field offset for ContextActionsConfiguration.context;
  v4 = type metadata accessor for InteractionContext(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)((char *)v1 + *a1));
  return swift_deallocClassInstance(v1, *(unsigned int *)(*v1 + 48), *(unsigned __int16 *)(*v1 + 52));
}

void sub_1001B6E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001B7054(a1, a2, a3, a4, (uint64_t)"Podcasts.StationShowContextActionConfiguration", 46);
}

uint64_t sub_1001B6E68()
{
  uint64_t v0;

  return sub_1001B8650(v0 + OBJC_IVAR____TtC8Podcasts37StationShowContextActionConfiguration_dataSource);
}

uint64_t sub_1001B6E78()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  sub_100007A28((uint64_t)v0 + direct field offset for ContextActionsConfiguration.presentationSource, qword_1005542D8);
  sub_100007A28((uint64_t)v0 + direct field offset for ContextActionsConfiguration.previewModel, &qword_100557C78);
  v1 = (char *)v0 + direct field offset for ContextActionsConfiguration.context;
  v2 = type metadata accessor for InteractionContext(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1001B8650((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts37StationShowContextActionConfiguration_dataSource);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001B6F1C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId
                                      + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelName
                                             + 8));
}

uint64_t sub_1001B6F50()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  sub_100007A28((uint64_t)v0 + direct field offset for ContextActionsConfiguration.presentationSource, qword_1005542D8);
  sub_100007A28((uint64_t)v0 + direct field offset for ContextActionsConfiguration.previewModel, &qword_100557C78);
  v1 = (char *)v0 + direct field offset for ContextActionsConfiguration.context;
  v2 = type metadata accessor for InteractionContext(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts31OtherContextActionConfiguration_sharableInfo, (uint64_t *)&unk_100562990);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelName
                                      + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

void sub_1001B7024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001B7054(a1, a2, a3, a4, (uint64_t)"Podcasts.OtherContextActionConfiguration", 40);
}

void sub_1001B703C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001B7054(a1, a2, a3, a4, (uint64_t)"Podcasts.CategoryContextActionConfiguration", 43);
}

void sub_1001B7054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _swift_stdlib_reportUnimplementedInitializer(a5, a6, "init(asPartOf:presentationSource:previewModel:context:)", 55, 0);
  __break(1u);
}

uint64_t sub_1001B707C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  sub_100007A28((uint64_t)v0 + direct field offset for ContextActionsConfiguration.presentationSource, qword_1005542D8);
  sub_100007A28((uint64_t)v0 + direct field offset for ContextActionsConfiguration.previewModel, &qword_100557C78);
  v1 = (char *)v0 + direct field offset for ContextActionsConfiguration.context;
  v2 = type metadata accessor for InteractionContext(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001B7110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[8];

  v4 = sub_10003F544((uint64_t *)&unk_100554EC0);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A520(a1, (uint64_t)&v50);
  v14 = sub_10003F544(&qword_100554A30);
  v15 = sub_10003F544(&qword_100557C80);
  if (swift_dynamicCast(&v52, &v50, v14, v15, 6))
  {
    v16 = *((_QWORD *)&v53 + 1);
    v17 = v54;
    sub_10003A834(&v52, *((uint64_t *)&v53 + 1));
    dispatch thunk of ClickableModel.clickAction.getter(v55, v16, v17);
    sub_10003D380(&v52);
  }
  else
  {
    v54 = 0;
    v52 = 0u;
    v53 = 0u;
    sub_100007A28((uint64_t)&v52, &qword_100557C88);
    memset(v55, 0, 40);
  }
  sub_100007A64((uint64_t)v55, (uint64_t)&v52, (uint64_t *)&unk_100554FF0);
  v18 = *((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v19 = sub_10003A834(&v52, *((uint64_t *)&v53 + 1));
    *((_QWORD *)&v49 + 1) = v18;
    v20 = sub_1000242A8(&v48);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v20, v19, v18);
    sub_10003D380(&v52);
  }
  else
  {
    sub_100007A28((uint64_t)&v52, (uint64_t *)&unk_100554FF0);
    v48 = 0u;
    v49 = 0u;
  }
  sub_10000A520(a1, (uint64_t)&v52);
  if (*((_QWORD *)&v49 + 1))
  {
    sub_10013B9CC(&v48, &v50);
  }
  else
  {
    v21 = *((_QWORD *)&v53 + 1);
    v22 = sub_10003A834(&v52, *((uint64_t *)&v53 + 1));
    v51 = v21;
    v23 = sub_1000242A8(&v50);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v23, v22, v21);
    sub_100007A28((uint64_t)&v48, (uint64_t *)&unk_100552300);
  }
  sub_10003D380(&v52);
  v24 = sub_10003F544(&qword_100557C90);
  v25 = type metadata accessor for FlowAction(0);
  v26 = swift_dynamicCast(&v47, &v50, v24, v25, 6);
  if (!(_DWORD)v26)
    goto LABEL_25;
  v27 = v47;
  dispatch thunk of FlowAction.destination.getter(v26);
  v28 = type metadata accessor for FlowDestination(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v6, 1, v28) != 1)
  {
    FlowDestination.pageDestinationURL.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
      goto LABEL_14;
    v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    v33 = URL.scheme.getter(v32);
    if (v34)
    {
      v35 = v33;
      v36 = v34;
      if (v33 == 1886680168 && v34 == 0xE400000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, 1886680168, 0xE400000000000000, 0) & 1) != 0
        || v35 == 0x7370747468 && v36 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease(v36);
LABEL_22:
        v37 = sub_10003F544((uint64_t *)&unk_100562990);
        v38 = (uint64_t *)(a2 + *(int *)(v37 + 48));
        (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a2, v13, v10);
        swift_retain();
        v40 = Action.title.getter(v39);
        v42 = v41;
        swift_release_n(v27, 2);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        sub_100007A28((uint64_t)v55, (uint64_t *)&unk_100554FF0);
        *v38 = v40;
        v38[1] = v42;
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(a2, 0, 1, v37);
      }
      v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, 0x7370747468, 0xE500000000000000, 0);
      swift_bridgeObjectRelease(v36);
      if ((v44 & 1) != 0)
        goto LABEL_22;
    }
    swift_release(v27);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_25:
    v30 = (uint64_t *)&unk_100554FF0;
    v31 = (char *)v55;
    goto LABEL_26;
  }
  sub_100007A28((uint64_t)v6, (uint64_t *)&unk_100554EC0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_14:
  swift_release(v27);
  sub_100007A28((uint64_t)v55, (uint64_t *)&unk_100554FF0);
  v30 = (uint64_t *)&unk_100553DC0;
  v31 = v9;
LABEL_26:
  sub_100007A28((uint64_t)v31, v30);
  v45 = sub_10003F544((uint64_t *)&unk_100562990);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(a2, 1, 1, v45);
}

uint64_t sub_1001B7624()
{
  uint64_t v0;

  return sub_100007A28(v0 + OBJC_IVAR____TtC8Podcasts31OtherContextActionConfiguration_sharableInfo, (uint64_t *)&unk_100562990);
}

uint64_t sub_1001B764C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  sub_100007A28((uint64_t)v0 + direct field offset for ContextActionsConfiguration.presentationSource, qword_1005542D8);
  sub_100007A28((uint64_t)v0 + direct field offset for ContextActionsConfiguration.previewModel, &qword_100557C78);
  v1 = (char *)v0 + direct field offset for ContextActionsConfiguration.context;
  v2 = type metadata accessor for InteractionContext(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts31OtherContextActionConfiguration_sharableInfo, (uint64_t *)&unk_100562990);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001B76F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v41;
  uint64_t v42;

  v1 = type metadata accessor for PreviewingPresentationHint(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v41 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v41 - v9;
  sub_100186514();
  v11 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 256);
  v12 = v11();
  v13 = (id)IMPlayerItem.init(modelObject:includeArtworkCatalog:)(v12, 1);
  v14 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0);
  v15 = swift_dynamicCastClass(v0, v14);
  if ((uint64_t)objc_msgSend(v13, "podcastStoreId") < 1 || (v16 = (uint64_t)objc_msgSend(v13, "episodeStoreId"), v16 < 1))
  {
    v26 = (void *)v11();
    v27 = MPModelObject.uuid.getter(v26);
    v29 = v28;

    if (!v29)
    {

      return 0;
    }
    v30 = sub_10003F544((uint64_t *)&unk_1005588B0);
    v31 = swift_allocObject(v30, 48, 7);
    *(_OWORD *)(v31 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v31 + 32) = v27;
    *(_QWORD *)(v31 + 40) = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for PreviewingPresentationHint.inferTab(_:), v1);
    v32 = type metadata accessor for EpisodeContextActionData(0);
    v22 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v33 = OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_mangedContextProvider;
    *(_QWORD *)(v22 + v33) = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
    *(_QWORD *)(v22 + 16) = v31;
    *(_QWORD *)(v22 + 24) = 0;
    *(_BYTE *)(v22 + 32) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 16))(v22 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_presentationHint, v5, v1);
    *(_BYTE *)(v22 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_hasHeaderChevron) = 1;
    sub_100369110();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    goto LABEL_13;
  }
  if ((static Podcasts.isBlueMoonEnabled()(v16) & 1) == 0
    || (v17 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))()) == 0)
  {
    v34 = sub_10003F544((uint64_t *)&unk_100553780);
    v35 = swift_allocObject(v34, 40, 7);
    *(_OWORD *)(v35 + 16) = xmmword_1003CA250;
    *(_QWORD *)(v35 + 32) = v13;
    v42 = v35;
    specialized Array._endMutation()(v35);
    v36 = v42;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v8, enum case for PreviewingPresentationHint.inferTab(_:), v1);
    v37 = type metadata accessor for EpisodeContextActionData(0);
    v22 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v38 = OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_mangedContextProvider;
    v39 = (void *)objc_opt_self(MTDB);
    v13 = v13;
    *(_QWORD *)(v22 + v38) = objc_msgSend(v39, "sharedInstance");
    *(_QWORD *)(v22 + 16) = v36;
    *(_QWORD *)(v22 + 24) = 0;
    *(_BYTE *)(v22 + 32) = 2;
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 16))(v22 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_presentationHint, v8, v1);
    *(_BYTE *)(v22 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_hasHeaderChevron) = 1;
    if (!v15)
      sub_100369110();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
LABEL_13:

    return v22;
  }
  v18 = (void *)v17;
  v19 = sub_10003F544((uint64_t *)&unk_100553780);
  v20 = swift_allocObject(v19, 40, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v20 + 32) = v18;
  v42 = v20;
  specialized Array._endMutation()(v20);
  v41 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v10, enum case for PreviewingPresentationHint.inferTab(_:), v1);
  v21 = type metadata accessor for EpisodeContextActionData(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v23 = OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_mangedContextProvider;
  v24 = (void *)objc_opt_self(MTDB);
  v25 = v18;
  *(_QWORD *)(v22 + v23) = objc_msgSend(v24, "sharedInstance");
  *(_QWORD *)(v22 + 16) = v41;
  *(_QWORD *)(v22 + 24) = 0;
  *(_BYTE *)(v22 + 32) = 3;
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 16))(v22 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_presentationHint, v10, v1);
  *(_BYTE *)(v22 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_hasHeaderChevron) = 1;
  if (!v15)
    sub_100369110();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v10, v1);

  return v22;
}

uint64_t sub_1001B7B60()
{
  return sub_1001B76F8();
}

uint64_t sub_1001B7B80()
{
  return type metadata accessor for MarmosetContextActionsConfiguration(0);
}

uint64_t type metadata accessor for MarmosetContextActionsConfiguration(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100557240, (uint64_t)&nominal type descriptor for MarmosetContextActionsConfiguration);
}

uint64_t sub_1001B7B9C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 208);
}

uint64_t sub_1001B7BD0()
{
  return type metadata accessor for EpisodeContextActionConfiguration(0);
}

uint64_t type metadata accessor for EpisodeContextActionConfiguration(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100557368, (uint64_t)&nominal type descriptor for EpisodeContextActionConfiguration);
}

uint64_t sub_1001B7BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B7DB0(a1, a2, a3, (uint64_t)&value witness table for Builtin.NativeObject + 64);
}

uint64_t sub_1001B7BFC()
{
  return type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
}

uint64_t type metadata accessor for TranscriptSelectionContextActionConfiguration(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_1005574B8, (uint64_t)&nominal type descriptor for TranscriptSelectionContextActionConfiguration);
}

uint64_t sub_1001B7C18(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = "\b";
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[3] = &unk_1003CC7D8;
  return swift_updateClassMetadata2(a1, 256, 4, v2, a1 + 216);
}

uint64_t sub_1001B7C7C()
{
  return type metadata accessor for PodcastContextActionConfiguration(0);
}

uint64_t type metadata accessor for PodcastContextActionConfiguration(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100557608, (uint64_t)&nominal type descriptor for PodcastContextActionConfiguration);
}

uint64_t sub_1001B7C98()
{
  return type metadata accessor for StationShowContextActionConfiguration(0);
}

uint64_t type metadata accessor for StationShowContextActionConfiguration(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100557758, (uint64_t)&nominal type descriptor for StationShowContextActionConfiguration);
}

uint64_t sub_1001B7CB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for StationShowContextActionData(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 216);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001B7D20()
{
  return type metadata accessor for ChannelContextActionConfiguration(0);
}

uint64_t type metadata accessor for ChannelContextActionConfiguration(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_1005578D0, (uint64_t)&nominal type descriptor for ChannelContextActionConfiguration);
}

uint64_t sub_1001B7D3C(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_1003CC878;
  v2[1] = &unk_1003CC890;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 256);
}

uint64_t sub_1001B7D84()
{
  return type metadata accessor for CategoryContextActionConfiguration(0);
}

uint64_t type metadata accessor for CategoryContextActionConfiguration(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100557A38, (uint64_t)&nominal type descriptor for CategoryContextActionConfiguration);
}

uint64_t sub_1001B7DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B7DB0(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int64 + 64);
}

uint64_t sub_1001B7DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a4;
  return swift_updateClassMetadata2(a1, 256, 1, &v5, a1 + 216);
}

uint64_t sub_1001B7DE8()
{
  return type metadata accessor for OtherContextActionConfiguration(0);
}

uint64_t type metadata accessor for OtherContextActionConfiguration(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100557B48, (uint64_t)&nominal type descriptor for OtherContextActionConfiguration);
}

uint64_t sub_1001B7E04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _BYTE *v5;

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(_QWORD *)(result - 8) + 64, &unk_1003CC890);
    v5 = v4;
    result = swift_updateClassMetadata2(a1, 256, 1, &v5, a1 + 216);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001B7E90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  __chkstk_darwin();
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v18 - v6;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v9((char *)&v18 - v6, v2, a1);
  v10 = type metadata accessor for ChannelContextActionConfiguration(0);
  if (swift_dynamicCast(&v19, v7, a1, v10, 6))
  {
    v11 = v19;
    v12 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId);
    v13 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId + 8);
    v14 = swift_bridgeObjectRetain(v13);
    v15 = AdamID.init(_:)(v12, v13, v14);
    swift_release(v11);
  }
  else
  {
    v9(v5, v2, a1);
    v16 = type metadata accessor for CategoryContextActionConfiguration(0);
    if (swift_dynamicCast(&v19, v5, a1, v16, 6))
    {
      v15 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8Podcasts34CategoryContextActionConfiguration_categoryAdamID);
      swift_release(v19);
    }
    else
    {
      return 0;
    }
  }
  return v15;
}

uint64_t *sub_1001B7FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[40];
  _QWORD v58[6];

  v9 = a5;
  v55 = a4;
  v56 = a2;
  v54 = a1;
  v10 = *a5;
  v52 = a3;
  v53 = v10;
  v11 = type metadata accessor for InteractionContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v50 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(qword_1005542D8);
  __chkstk_darwin(v14);
  v49 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544(&qword_100557C70);
  __chkstk_darwin(v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544((uint64_t *)&unk_100562990);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v51 = (uint64_t)&v48 - v24;
  v58[3] = a6;
  v58[4] = a7;
  v25 = sub_1000242A8(v58);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v25, v52, a6);
  swift_retain();
  v26 = sub_1001B83A0((uint64_t)v25, v53, a6, a7);
  if (v26)
  {
    v52 = v12;
    v48 = v11;
    swift_release(v26);
    sub_1001B7110((uint64_t)v58, (uint64_t)v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
    {
      v30 = *(int *)(v19 + 48);
      v31 = v51;
      v32 = (_QWORD *)(v51 + v30);
      v33 = &v18[v30];
      v34 = type metadata accessor for URL(0);
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
      v36(v31, v18, v34);
      v38 = *(_QWORD *)v33;
      v37 = *((_QWORD *)v33 + 1);
      *v32 = v38;
      v32[1] = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v23, v31, v34);
      v39 = (char *)v9 + OBJC_IVAR____TtC8Podcasts31OtherContextActionConfiguration_sharableInfo;
      v36((uint64_t)v9 + OBJC_IVAR____TtC8Podcasts31OtherContextActionConfiguration_sharableInfo, v23, v34);
      v40 = &v39[*(int *)(v19 + 48)];
      *(_QWORD *)v40 = v38;
      *((_QWORD *)v40 + 1) = v37;
      swift_bridgeObjectRetain(v37);
      swift_release(v9);
      v41 = v56;
      v42 = v49;
      sub_100007A64(v56, v49, qword_1005542D8);
      sub_10000A520((uint64_t)v58, (uint64_t)v57);
      v43 = v52;
      v44 = (uint64_t)v50;
      v45 = v55;
      v46 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v50, v55, v48);
      sub_1001B6894(v54, v42, (uint64_t)v57, v44);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v46);
      sub_10003D380(v58);
      sub_100007A28(v41, qword_1005542D8);
      sub_100007A28(v51, (uint64_t *)&unk_100562990);
      return v9;
    }
    swift_release(v54);
    swift_release(v9);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v55, v48);
    sub_10003D380(v58);
    sub_100007A28(v56, qword_1005542D8);
    v27 = &qword_100557C70;
    v28 = (uint64_t)v18;
  }
  else
  {
    swift_release(v54);
    swift_release(v9);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v55, v11);
    sub_10003D380(v58);
    v27 = qword_1005542D8;
    v28 = v56;
  }
  sub_100007A28(v28, v27);
  v29 = type metadata accessor for OtherContextActionConfiguration(0);
  swift_deallocPartialClassInstance(v9, v29, *(unsigned int *)(*v9 + 48), *(unsigned __int16 *)(*v9 + 52));
  return 0;
}

uint64_t sub_1001B83A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];

  v26[3] = a3;
  v26[4] = a4;
  v6 = sub_1000242A8(v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v6, a1, a3);
  sub_10000A520((uint64_t)v26, (uint64_t)v23);
  v7 = sub_10003F544(&qword_100554A30);
  v8 = type metadata accessor for FlowAction(0);
  if (!swift_dynamicCast(v22, v23, v7, v8, 6))
  {
    sub_10000A520((uint64_t)v26, (uint64_t)v22);
    v10 = sub_10003F544(&qword_100557C98);
    if ((swift_dynamicCast(&v19, v22, v7, v10, 6) & 1) != 0)
    {
      sub_10002099C(&v19, (uint64_t)v23);
      v11 = v24;
      v12 = v25;
      sub_10003A834(v23, v24);
      v9 = dispatch thunk of CustomPreviewActionModel.previewAction.getter(v11, v12);
      sub_10003D380(v23);
      if (v9)
        goto LABEL_15;
    }
    else
    {
      v21 = 0;
      v19 = 0u;
      v20 = 0u;
      sub_100007A28((uint64_t)&v19, &qword_100557CA0);
    }
    sub_10000A520((uint64_t)v26, (uint64_t)v22);
    v13 = sub_10003F544(&qword_100557C80);
    if (swift_dynamicCast(&v19, v22, v7, v13, 6))
    {
      sub_10002099C(&v19, (uint64_t)v23);
      v14 = v24;
      v15 = v25;
      sub_10003A834(v23, v24);
      dispatch thunk of ClickableModel.clickAction.getter(v22, v14, v15);
      if (v22[3])
      {
        v16 = sub_10003F544(&qword_100554920);
        v17 = type metadata accessor for Action(0);
        if ((swift_dynamicCast(&v19, v22, v16, v17, 6) & 1) != 0)
        {
          v9 = v19;
          sub_10003D380(v23);
          goto LABEL_15;
        }
      }
      else
      {
        sub_100007A28((uint64_t)v22, (uint64_t *)&unk_100554FF0);
      }
      sub_10003D380(v23);
    }
    else
    {
      v21 = 0;
      v19 = 0u;
      v20 = 0u;
      sub_100007A28((uint64_t)&v19, &qword_100557C88);
    }
    v9 = 0;
    goto LABEL_15;
  }
  v9 = v22[0];
LABEL_15:
  sub_10003D380(v26);
  return v9;
}

uint64_t sub_1001B85C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(qword_1005542D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B8608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100557C78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B8650(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StationShowContextActionData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1001B868C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  unsigned int v28;

  v28 = a5;
  v27[1] = a2;
  v10 = type metadata accessor for ShowEntity(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = UnfollowShowIntent.show.getter(v12);
  v16 = ShowEntity.uuid.getter(v15);
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if (v18)
    goto LABEL_2;
  v21 = (void *)NSManagedObjectContext.unsafeShow(for:sortDescriptors:)(a3, a4, v28, _swiftEmptyArrayStorage);
  if (!v6)
  {
    v22 = v21;
    v23 = objc_msgSend(v21, "uuid");

    if (v23)
    {
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v18 = v24;

LABEL_2:
      v19 = a6[3];
      v20 = a6[4];
      sub_10003A834(a6, v19);
      dispatch thunk of PodcastsStateCoordinatorProtocol.disableSubscription(onPodcastUUID:from:)(v16, v18, 3, v19, v20);
      swift_bridgeObjectRelease(v18);
      return;
    }
    v25 = sub_1001B932C();
    v26 = swift_allocError(&type metadata for IntentFeedUnsubscriptionError, v25, 0, 0);
    swift_willThrow(v26);
  }
}

uint64_t sub_1001B8820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100557CD8 + dword_100557CD8);
  v6 = (_QWORD *)swift_task_alloc(unk_100557CDC);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_1001B8890;
  return v8(a2, a3);
}

uint64_t sub_1001B8890(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_BYTE **)(v4 + 16) = a1 & 1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

unint64_t sub_1001B88F4()
{
  unint64_t result;

  result = qword_100557CC0;
  if (!qword_100557CC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentFeedUnsubscriptionError, &type metadata for IntentFeedUnsubscriptionError);
    atomic_store(result, (unint64_t *)&qword_100557CC0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for IntentFeedUnsubscriptionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001B8978 + 4 * byte_1003CC9A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001B8998 + 4 * byte_1003CC9A5[v4]))();
}

_BYTE *sub_1001B8978(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001B8998(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001B89A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001B89A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001B89B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001B89B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IntentFeedUnsubscriptionError()
{
  return &type metadata for IntentFeedUnsubscriptionError;
}

ValueMetadata *type metadata accessor for UnfollowShowIntentImplementation()
{
  return &type metadata for UnfollowShowIntentImplementation;
}

unint64_t sub_1001B89E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100557CC8;
  if (!qword_100557CC8)
  {
    v1 = type metadata accessor for UnfollowShowIntent(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UnfollowShowIntent, v1);
    atomic_store(result, (unint64_t *)&qword_100557CC8);
  }
  return result;
}

uint64_t sub_1001B8A30(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2[13] = a1;
  v2[14] = a2;
  v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v2[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[16] = v4;
  v2[17] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UnfollowShowIntent(0);
  v2[18] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[19] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[20] = v7;
  v2[21] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ShowEntity(0);
  v2[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[23] = v9;
  v2[24] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  v2[25] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[26] = v11;
  v2[27] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_100553AE0);
  v13 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v2[28] = v13;
  *v13 = v2;
  v13[1] = sub_1001B8B50;
  return BaseObjectGraph.inject<A>(_:)(v2 + 2, v12, v12);
}

uint64_t sub_1001B8B50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(*v1 + 224);
  v3 = *v1;
  *(_QWORD *)(v3 + 232) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1001B9084, 0, 0);
  v5 = sub_10003F544(&qword_10055E200);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v3 + 240) = v6;
  *v6 = v3;
  v6[1] = sub_1001B8C10;
  return BaseObjectGraph.inject<A>(_:)(v3 + 96, v5, v5);
}

uint64_t sub_1001B8C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001B90E4;
  else
    v3 = sub_1001B8C74;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B8C74(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;

  v3 = v2[12];
  v2[32] = v3;
  ObjectType = swift_getObjectType(v3, a2);
  j___sScTss5NeverORszABRs_rlE15currentPriorityScPvgZ();
  v5 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContextProvider.managedObjectContext(for:)[1]);
  v2[33] = v5;
  *v5 = v2;
  v5[1] = sub_1001B8CF4;
  return NSManagedObjectContextProvider.managedObjectContext(for:)(v2[27], ObjectType);
}

uint64_t sub_1001B8CF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = a1;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch(sub_1001B8D70, 0, 0);
}

uint64_t sub_1001B8D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD *)(v1 + 184);
  v2 = *(_QWORD *)(v1 + 192);
  v4 = *(_QWORD *)(v1 + 168);
  v22 = *(_QWORD *)(v1 + 176);
  v23 = v4;
  v5 = *(_QWORD *)(v1 + 152);
  v24 = *(_QWORD *)(v1 + 160);
  v6 = *(_QWORD *)(v1 + 144);
  v26 = *(void **)(v1 + 272);
  v27 = *(_QWORD *)(v1 + 128);
  v28 = *(_QWORD *)(v1 + 120);
  v29 = *(_QWORD *)(v1 + 136);
  v7 = *(_QWORD *)(v1 + 104);
  v8 = UnfollowShowIntent.show.getter(a1);
  v9 = (void *)ShowEntity.preferredIdentifier()(v8);
  v25 = v10;
  v12 = v11;
  *(_QWORD *)(v1 + 280) = v9;
  *(_QWORD *)(v1 + 288) = v10;
  *(_BYTE *)(v1 + 320) = v11;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  sub_10000A520(v1 + 16, v1 + 56);
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = (v24 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_1004B2EA0, v16 + 40, v13 | 7);
  *(_QWORD *)(v1 + 296) = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v17 + v14, v23, v6);
  *(_QWORD *)(v17 + v15) = v26;
  v18 = v17 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v18 = v9;
  *(_QWORD *)(v18 + 8) = v25;
  *(_BYTE *)(v18 + 16) = v12;
  sub_10002099C((__int128 *)(v1 + 56), v17 + v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v29, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v28);
  v19 = v26;
  sub_1001B9308(v9, v25, v12);
  v20 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1]);
  *(_QWORD *)(v1 + 304) = v20;
  *v20 = v1;
  v20[1] = sub_1001B8F3C;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1001B8F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_1001B914C;
  else
    v7 = sub_1001B8FD0;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1001B8FD0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *(void **)(v0 + 280);
  v1 = *(void **)(v0 + 288);
  v3 = *(void **)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = *(_BYTE *)(v0 + 320);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 256));
  sub_1001A831C(v2, v1, v8);

  sub_10003D380((_QWORD *)(v0 + 16));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1001B9084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B90E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10003D380((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B914C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(void **)(v0 + 280);
  v1 = *(void **)(v0 + 288);
  v3 = *(void **)(v0 + 272);
  v4 = *(_BYTE *)(v0 + 320);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 256));
  sub_1001A831C(v2, v1, v4);

  sub_10003D380((_QWORD *)(v0 + 16));
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B91E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UnfollowShowIntent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  sub_1001A831C(*(void **)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(id *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16));
  sub_10003D380((_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 40, v5);
}

void sub_1001B928C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UnfollowShowIntent(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001B868C(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), (_QWORD *)(v0 + ((v3 + 39) & 0xFFFFFFFFFFFFFFF8)));
}

id sub_1001B9308(id result, id a2, char a3)
{
  if (a3 == 2)
    return result;
  if (a3 == 1)
    return (id)swift_bridgeObjectRetain(a2);
  return result;
}

unint64_t sub_1001B932C()
{
  unint64_t result;

  result = qword_100557CE0;
  if (!qword_100557CE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentFeedUnsubscriptionError, &type metadata for IntentFeedUnsubscriptionError);
    atomic_store(result, (unint64_t *)&qword_100557CE0);
  }
  return result;
}

uint64_t sub_1001B9448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;

  v5 = v4;
  if (a2)
  {
    v10 = sub_10003F544((uint64_t *)&unk_1005588B0);
    v11 = swift_allocObject(v10, 48, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v11 + 32) = a1;
    *(_QWORD *)(v11 + 40) = a2;
    objc_allocWithZone((Class)type metadata accessor for NetworkMediaManifest(0));
    v12 = 0;
    v13 = (_QWORD *)v11;
    v14 = 0;
  }
  else
  {
    objc_allocWithZone((Class)type metadata accessor for NetworkMediaManifest(0));
    v13 = _swiftEmptyArrayStorage;
    v12 = a1;
    v14 = a1;
  }
  v15 = sub_1001B983C(v12, 0, (uint64_t)v13, v14, 0, a3, a4);
  ObjectType = swift_getObjectType(v5, v16);
  swift_deallocPartialClassInstance(v5, ObjectType, *(unsigned int *)((swift_isaMask & *v5) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v5) + 0x34));
  return v15;
}

uint64_t sub_1001B983C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  objc_class *v44;
  id v45;
  char *v46;
  Class isa;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  _QWORD v71[2];
  void **aBlock;
  uint64_t v73;
  uint64_t (*v74)(uint64_t);
  void *v75;
  uint64_t (*v76)();
  uint64_t v77;
  objc_super v78;

  v8 = v7;
  v68 = a6;
  v69 = a7;
  v65 = a5;
  v66 = a2;
  v61 = a4;
  v67 = a3;
  v60 = a1;
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v63 = *(_QWORD *)(v9 - 8);
  v64 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v8[OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount] = 1;
  *(_QWORD *)&v8[OBJC_IVAR___MTNetworkMediaManifest_episodeFetchLimit] = 5;
  v62 = OBJC_IVAR___MTNetworkMediaManifest_manifestWorkQueue;
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v18 = v8;
  static DispatchQoS.unspecified.getter(v18);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v19 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v20 = sub_10003F544(&qword_100555A00);
  v21 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v20, v21, v12, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v64);
  v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x8000000100433090, v17, v14, v11, 0);
  v23 = v65;
  *(_QWORD *)&v8[v62] = v22;
  v24 = OBJC_IVAR___MTNetworkMediaManifest_mediaRequestController;
  *(_QWORD *)&v18[v24] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MediaRequestController(0)), "init");
  v25 = OBJC_IVAR___MTNetworkMediaManifest_initialIds;
  *(_QWORD *)&v18[OBJC_IVAR___MTNetworkMediaManifest_initialIds] = 0;
  v18[OBJC_IVAR___MTNetworkMediaManifest_hasOnlyPaidEpisodesWithoutSubscription] = 0;
  v18[OBJC_IVAR___MTNetworkMediaManifest_refreshInProgress] = 0;
  *(_QWORD *)&v18[OBJC_IVAR___MTNetworkMediaManifest_inProgressRefreshHandlers] = _swiftEmptyArrayStorage;
  if (v23)
  {
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v67);
    v26 = sub_10003F544((uint64_t *)&unk_1005588B0);
    v27 = swift_allocObject(v26, 48, 7);
    *(_OWORD *)(v27 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v27 + 32) = v61;
    *(_QWORD *)(v27 + 40) = v23;
    v28 = *(_QWORD *)&v18[v25];
    *(_QWORD *)&v18[v25] = v27;
    swift_bridgeObjectRelease(v28);
    v29 = &v18[OBJC_IVAR___MTNetworkMediaManifest_contentType];
    v30 = enum case for MediaRequest.ContentType.podcastStation(_:);
    v31 = type metadata accessor for MediaRequest.ContentType(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v29, v30, v31);
    v32 = v68;
    goto LABEL_9;
  }
  v33 = v60;
  v34 = v67;
  v32 = v68;
  if (v67)
  {
    swift_bridgeObjectRelease(v66);
    v35 = *(_QWORD *)&v18[v25];
    *(_QWORD *)&v18[v25] = v34;
    swift_bridgeObjectRelease(v35);
    v36 = &v18[OBJC_IVAR___MTNetworkMediaManifest_contentType];
    v37 = (unsigned int *)&enum case for MediaRequest.ContentType.podcastEpisode(_:);
  }
  else
  {
    if (!v66)
    {
      v36 = &v18[OBJC_IVAR___MTNetworkMediaManifest_contentType];
      v42 = enum case for MediaRequest.ContentType.podcast(_:);
      goto LABEL_8;
    }
    v38 = v66;
    v39 = sub_10003F544((uint64_t *)&unk_1005588B0);
    v40 = swift_allocObject(v39, 48, 7);
    *(_OWORD *)(v40 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v40 + 32) = v33;
    *(_QWORD *)(v40 + 40) = v38;
    v41 = *(_QWORD *)&v18[v25];
    *(_QWORD *)&v18[v25] = v40;
    swift_bridgeObjectRelease(v41);
    v36 = &v18[OBJC_IVAR___MTNetworkMediaManifest_contentType];
    v37 = (unsigned int *)&enum case for MediaRequest.ContentType.podcast(_:);
  }
  v42 = *v37;
LABEL_8:
  v43 = type metadata accessor for MediaRequest.ContentType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v36, v42, v43);
LABEL_9:

  v44 = (objc_class *)type metadata accessor for NetworkMediaManifest(0);
  v78.receiver = v18;
  v78.super_class = v44;
  v45 = objc_msgSendSuper2(&v78, "init");
  sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
  v46 = (char *)v45;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v46, "setItems:", isa);

  v48 = v69;
  if (v69)
  {
    aBlock = (void **)v32;
    v73 = v69;
    v71[0] = 10;
    v71[1] = 0xE100000000000000;
    v70[0] = 28252;
    v70[1] = 0xE200000000000000;
    v49 = sub_10016D37C();
    v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v71, v70, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v49, v49, v49);
    v51 = v50;
    swift_bridgeObjectRelease(v48);
  }
  else
  {
    v51 = 0;
  }
  v52 = *(NSObject **)&v46[OBJC_IVAR___MTNetworkMediaManifest_manifestWorkQueue];
  v53 = (_QWORD *)swift_allocObject(&unk_1004B2F50, 40, 7);
  v53[2] = v46;
  v53[3] = v32;
  v53[4] = v51;
  v54 = swift_allocObject(&unk_1004B2F78, 32, 7);
  *(_QWORD *)(v54 + 16) = sub_1001BFFC8;
  *(_QWORD *)(v54 + 24) = v53;
  v76 = sub_100029B3C;
  v77 = v54;
  aBlock = _NSConcreteStackBlock;
  v73 = 1107296256;
  v74 = sub_100029B1C;
  v75 = &unk_1004B2F90;
  v55 = _Block_copy(&aBlock);
  v56 = v77;
  v57 = v46;
  swift_retain();
  swift_release(v56);
  dispatch_sync(v52, v55);

  _Block_release(v55);
  LOBYTE(v52) = swift_isEscapingClosureAtFileLocation(v54, "", 96, 86, 32, 1);
  swift_release(v53);
  result = swift_release(v54);
  if ((v52 & 1) == 0)
    return (uint64_t)v57;
  __break(1u);
  return result;
}

void sub_1001B9E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __n128 v25;
  void (*v26)(char *, uint64_t, __n128);
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  __n128 v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, _QWORD, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67[24];

  v59 = a2;
  v60 = a3;
  v4 = type metadata accessor for MediaRequest.ContentType(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v56 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v56 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v56 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v56 - v17;
  v61 = a1;
  v19 = a1 + OBJC_IVAR___MTNetworkMediaManifest_contentType;
  swift_beginAccess(v19, v67, 0, 0);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v58 = v19;
  v20(v18, v19, v4);
  v62 = v5;
  v57 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
  v57(v16, enum case for MediaRequest.ContentType.podcastStation(_:), v4);
  v21 = sub_100026844(&qword_100557D68, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v63, v4, v21);
  dispatch thunk of RawRepresentable.rawValue.getter(&v65, v4, v21);
  v22 = v64;
  v23 = v66;
  if (v63 == v65 && v64 == v66)
  {
    v24 = 1;
    v23 = v64;
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, v65, v66, 0);
  }
  swift_bridgeObjectRelease(v22);
  v25 = swift_bridgeObjectRelease(v23);
  v26 = *(void (**)(char *, uint64_t, __n128))(v62 + 8);
  v26(v16, v4, v25);
  ((void (*)(char *, uint64_t))v26)(v18, v4);
  if ((v24 & 1) != 0)
  {
    sub_1001BC96C(v59, v60);
    return;
  }
  v27 = v58;
  v20(v13, v58, v4);
  v28 = v57;
  v57(v10, enum case for MediaRequest.ContentType.podcastEpisode(_:), v4);
  dispatch thunk of RawRepresentable.rawValue.getter(&v63, v4, v21);
  dispatch thunk of RawRepresentable.rawValue.getter(&v65, v4, v21);
  v29 = v64;
  v30 = v66;
  if (v63 == v65 && v64 == v66)
  {
    swift_bridgeObjectRelease_n(v64, 2);
    ((void (*)(char *, uint64_t))v26)(v10, v4);
    ((void (*)(char *, uint64_t))v26)(v13, v4);
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, v65, v66, 0);
    swift_bridgeObjectRelease(v29);
    v32 = swift_bridgeObjectRelease(v30);
    v26(v10, v4, v32);
    ((void (*)(char *, uint64_t))v26)(v13, v4);
    if ((v31 & 1) == 0)
    {
      sub_1001BD284(v59, v60);
      return;
    }
  }
  v33 = v61;
  v34 = (uint64_t)sub_1001BCD4C(v59, v60);
  v35 = v34;
  if ((unint64_t)v34 >> 62)
  {
    if (v34 < 0)
      v52 = v34;
    else
      v52 = v34 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v34);
    v53 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease(v35);
    if (!v53)
      goto LABEL_30;
  }
  else if (!*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_30;
  }
  if ((v35 & 0xC000000000000001) != 0)
  {
    v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v35);
  }
  else
  {
    if (!*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_34;
    }
    v36 = *(id *)(v35 + 32);
  }
  v37 = v36;
  v38 = swift_bridgeObjectRelease(v35);
  v39 = (void *)dispatch thunk of ServerPodcastEpisode.relationships.getter(v38);

  if (!v39)
    return;
  v40 = (void *)PodcastEpisodeRelationships.podcast.getter();

  if (!v40)
    return;
  v35 = PodcastRelationshipContainer.data.getter();

  if ((unint64_t)v35 >> 62)
  {
LABEL_34:
    if (v35 < 0)
      v54 = v35;
    else
      v54 = v35 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v35);
    v55 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease(v35);
    if (v55)
      goto LABEL_20;
LABEL_30:
    v51 = v35;
    goto LABEL_31;
  }
  if (!*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_30;
LABEL_20:
  if ((v35 & 0xC000000000000001) != 0)
  {
    v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v35);
    goto LABEL_23;
  }
  if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v41 = *(id *)(v35 + 32);
LABEL_23:
    v42 = v41;
    v43 = swift_bridgeObjectRelease(v35);
    v44 = ServerPodcastBase.id.getter(v43);
    v46 = v45;

    v47 = v56;
    v28(v56, enum case for MediaRequest.ContentType.podcast(_:), v4);
    swift_beginAccess(v27, &v63, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 40))(v27, v47, v4);
    swift_endAccess(&v63);
    v48 = sub_10003F544((uint64_t *)&unk_1005588B0);
    v49 = swift_allocObject(v48, 48, 7);
    *(_OWORD *)(v49 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v49 + 32) = v44;
    *(_QWORD *)(v49 + 40) = v46;
    v50 = *(_QWORD *)(v33 + OBJC_IVAR___MTNetworkMediaManifest_initialIds);
    *(_QWORD *)(v33 + OBJC_IVAR___MTNetworkMediaManifest_initialIds) = v49;
    v51 = v50;
LABEL_31:
    swift_bridgeObjectRelease(v51);
    return;
  }
  __break(1u);
  __break(1u);
}

void sub_1001BA3D8(void (*a1)(__n128), uint64_t a2)
{
  void *v2;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = objc_msgSend(v2, "items");
  if (v5)
  {
    v6 = v5;
    v7 = sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v15 = v8;
      else
        v15 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v9 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v10 = swift_bridgeObjectRelease(v8);
    if (v9)
    {
      if (a1)
        a1(v10);
    }
    else
    {
      v11 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v12 = (void *)static OS_os_log.default.getter(v11);
      v13 = static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)("NetworkMediaManifest: No items loaded from asset info, fetching items", 69, 2, &_mh_execute_header, v12, v13, _swiftEmptyArrayStorage);

      v14 = swift_allocObject(&unk_1004B31A8, 32, 7);
      *(_QWORD *)(v14 + 16) = a1;
      *(_QWORD *)(v14 + 24) = a2;
      sub_10002CA20((uint64_t)a1, a2);
      sub_1001C061C((uint64_t)sub_100198CE4, v14);
      swift_release(v14);
    }
  }
  else
  {
    __break(1u);
  }
}

id sub_1001BA5F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t (*a9)(_QWORD, _QWORD), uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  id result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  char v66;
  __n128 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  double v84;
  uint64_t v85;
  id v86;
  id v87;
  void (*v88)(_QWORD);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, _QWORD, uint64_t);
  void (*v100)(_QWORD, _QWORD, _QWORD);
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char v104;
  __n128 v105;
  _BOOL4 v106;
  void (*v107)(_QWORD, _QWORD, _QWORD);
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, uint64_t, __n128);
  uint64_t v112;
  int v113;
  __n128 v114;
  char *v115;
  unsigned int *v116;
  void (*v117)(char *, _QWORD, uint64_t);
  void (*v118)(_QWORD, _QWORD, _QWORD);
  uint64_t v119;
  uint64_t v120;
  char v121;
  __n128 v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  char v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  void (*v129)(_QWORD, _QWORD, _QWORD);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  __n128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(_QWORD);
  void (*v186)(uint64_t, _QWORD, uint64_t);
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(uint64_t, _QWORD, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(id, uint64_t);
  char v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  void (*v215)(_QWORD, _QWORD, _QWORD);
  uint64_t v216;
  uint64_t v217;
  char v218;
  __n128 v219;
  char *v220;
  void (*v221)(char *, char *, uint64_t);
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char v230;
  __n128 v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  char *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  id v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  id v268;
  char *v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void (*v284)(unint64_t, char *, uint64_t);
  uint64_t v285;
  id v286;
  id ObjCClassFromMetadata;
  uint64_t (*v288)(_QWORD, _QWORD);
  uint64_t v289;
  id v290;
  uint64_t v291;
  unint64_t v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  char *v301;
  unint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  void (*v311)(char *, uint64_t, __n128);
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  char *v320;
  void (*v321)(_QWORD);
  char *v322;
  void (*v323)(_QWORD, _QWORD, _QWORD);
  __int128 v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;

  v313 = a6;
  v328 = a5;
  v329 = a4;
  v309 = a3;
  v13 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v13);
  v305 = (char *)&v272 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10003F544((uint64_t *)&unk_100564180);
  __chkstk_darwin(v15);
  v304 = (char *)&v272 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544(&qword_100557DB0);
  __chkstk_darwin(v17);
  v318 = (char *)&v272 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544(&qword_100557DB8);
  __chkstk_darwin(v19);
  v317 = (char *)&v272 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v307 = type metadata accessor for MediaRequest.Params(0);
  v306 = *(_QWORD *)(v307 - 8);
  __chkstk_darwin(v307);
  v320 = (char *)&v272 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = type metadata accessor for MediaRequest.IncludeExtendTypes(0);
  v314 = *(_QWORD *)(v310 - 8);
  v22 = __chkstk_darwin(v310);
  v299 = (char *)&v272 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v301 = (char *)&v272 - v24;
  v327 = type metadata accessor for MediaRequest.RequestType(0);
  v319 = *(_QWORD *)(v327 - 8);
  v25 = __chkstk_darwin(v327);
  v322 = (char *)&v272 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v302 = (unint64_t)&v272 - v28;
  __chkstk_darwin(v27);
  v330 = (char *)&v272 - v29;
  v30 = sub_10003F544(&qword_100564190);
  v31 = __chkstk_darwin(v30);
  v316 = (uint64_t)&v272 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v326 = (uint64_t)&v272 - v33;
  v34 = type metadata accessor for MediaRequest.ContentType(0);
  v331 = *(_QWORD *)(v34 - 8);
  v35 = __chkstk_darwin(v34);
  __chkstk_darwin(v35);
  v37 = __chkstk_darwin((char *)&v272 - v36);
  v303 = (uint64_t)&v272 - v38;
  v39 = __chkstk_darwin(v37);
  v315 = (char *)&v272 - v40;
  v41 = __chkstk_darwin(v39);
  v43 = (char *)&v272 - v42;
  v44 = __chkstk_darwin(v41);
  v46 = (char *)&v272 - v45;
  v47 = __chkstk_darwin(v44);
  v49 = (char *)&v272 - v48;
  result = (id)__chkstk_darwin(v47);
  v55 = (uint64_t *)((char *)&v272 - v54);
  if (!v51 || *(_QWORD *)(a2 + 16) > v51)
  {
    v325 = a2;
    if ((unint64_t)a7 >> 62)
    {
      v271 = a7 < 0 ? a7 : a7 & 0xFFFFFFFFFFFFFF8;
      v292 = v51;
      v298 = v52;
      v290 = result;
      v291 = v53;
      swift_bridgeObjectRetain(a7);
      v56 = _CocoaArrayWrapper.endIndex.getter(v271);
      swift_bridgeObjectRelease(a7);
      result = v290;
      v53 = v291;
      v52 = v298;
      v51 = v292;
    }
    else
    {
      v56 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v57 = v56 < v328;
    v58 = v325;
    if (v57)
    {
      v290 = result;
      v291 = v53;
      v298 = v52;
      v292 = v51;
      v288 = a9;
      v289 = a10;
      v297 = swift_allocObject(&unk_1004B30E0, 24, 7);
      *(_QWORD *)(v297 + 16) = a7;
      v296 = swift_allocObject(&unk_1004B3108, 17, 7);
      *(_BYTE *)(v296 + 16) = a8 & 1;
      v59 = swift_allocObject(&unk_1004B3130, 24, 7);
      v295 = v59;
      *(_QWORD *)(v59 + 16) = _swiftEmptyArrayStorage;
      v300 = v59 + 16;
      v60 = *(_QWORD *)(v58 + 16);
      if (!v60)
      {
        swift_bridgeObjectRetain(a7);
        goto LABEL_32;
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v331 + 104))(v55, enum case for MediaRequest.ContentType.podcastEpisode(_:), v34);
      v61 = sub_100026844(&qword_100557D68, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
      swift_bridgeObjectRetain(a7);
      dispatch thunk of RawRepresentable.rawValue.getter(&v334, v34, v61);
      dispatch thunk of RawRepresentable.rawValue.getter(&v332, v34, v61);
      v62 = v335;
      v63 = v333;
      if (v334 == v332 && v335 == v333)
      {
        swift_bridgeObjectRelease_n(v335, 2);
        (*(void (**)(_QWORD *, uint64_t))(v331 + 8))(v55, v34);
        goto LABEL_15;
      }
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v334, v335, v332, v333, 0);
      swift_bridgeObjectRelease(v62);
      v67 = swift_bridgeObjectRelease(v63);
      (*(void (**)(_QWORD *, uint64_t, __n128))(v331 + 8))(v55, v34, v67);
      if ((v66 & 1) != 0)
      {
LABEL_15:
        if (__OFADD__(v292, v313))
        {
          __break(1u);
        }
        else
        {
          if (v60 >= (uint64_t)(v292 + v313))
            v63 = v292 + v313;
          else
            v63 = v60;
          v68 = v63 - v292;
          v60 = v325;
          if (v63 >= (uint64_t)v292)
          {
            if ((v292 & 0x8000000000000000) == 0)
            {
              v69 = type metadata accessor for __ContiguousArrayStorageBase(0);
              swift_bridgeObjectRetain(v60);
              v71 = swift_unknownObjectRetain_n(v70, 2);
              v72 = (_QWORD *)swift_dynamicCastClass(v71, v69);
              if (!v72)
              {
                swift_bridgeObjectRelease(v60);
                v72 = _swiftEmptyArrayStorage;
              }
              v73 = v72[2];
              swift_release(v72);
              if (v73 == v68)
              {
                v74 = (_QWORD *)swift_dynamicCastClass(v60, v69);
                if (!v74)
                {
                  swift_bridgeObjectRelease(v60);
                  v74 = _swiftEmptyArrayStorage;
                }
                goto LABEL_26;
              }
LABEL_98:
              swift_bridgeObjectRelease(v60);
              v74 = sub_1001F9BB0(v60, v60 + 32, v292, (2 * v63) | 1);
LABEL_26:
              swift_bridgeObjectRelease(v60);
              isUniquelyReferenced_nonNull_native = sub_100172C68((uint64_t)v74);
              goto LABEL_32;
            }
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
        }
        __break(1u);
        goto LABEL_97;
      }
      if (v60 <= v292)
      {
        __break(1u);
      }
      else
      {
        v75 = v325 + 16 * v292;
        a7 = *(_QWORD *)(v75 + 32);
        v62 = *(_QWORD *)(v75 + 40);
        v55 = *(_QWORD **)v300;
        swift_bridgeObjectRetain(v62);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_29:
          v77 = v55[2];
          v76 = v55[3];
          if (v77 >= v76 >> 1)
          {
            isUniquelyReferenced_nonNull_native = (uint64_t)sub_10027AE00((_QWORD *)(v76 > 1), v77 + 1, 1, v55);
            v55 = (_QWORD *)isUniquelyReferenced_nonNull_native;
            *(_QWORD *)v300 = isUniquelyReferenced_nonNull_native;
          }
          v55[2] = v77 + 1;
          v78 = &v55[2 * v77];
          v78[4] = a7;
          v78[5] = v62;
LABEL_32:
          result = (id)_MTLogCategoryPlayback(isUniquelyReferenced_nonNull_native, v65);
          if (!result)
          {
            __break(1u);
            return result;
          }
          v79 = result;
          v80 = static os_log_type_t.default.getter();
          v81 = sub_10003F544(&qword_1005559A0);
          v82 = swift_allocObject(v81, 72, 7);
          v324 = xmmword_1003CA200;
          *(_OWORD *)(v82 + 16) = xmmword_1003CA200;
          v83 = *(_QWORD **)v300;
          *(_QWORD *)(v82 + 56) = sub_10003F544((uint64_t *)&unk_10055FDF0);
          *(_QWORD *)(v82 + 64) = sub_10002F9C8((unint64_t *)&qword_100557DC0, (uint64_t *)&unk_10055FDF0, (uint64_t)&protocol conformance descriptor for [A]);
          *(_QWORD *)(v82 + 32) = v83;
          *(_QWORD *)&v84 = swift_bridgeObjectRetain(v83).n128_u64[0];
          os_log(_:dso:log:type:_:)("NetworkMediaManifest: Refreshing episodes for item(s) %@", 56, 2, &_mh_execute_header, v79, v80, v82, v84);

          swift_bridgeObjectRelease(v82);
          v85 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
          ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata(v85);
          v86 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
          v87 = objc_msgSend(v86, "activeDsid");

          v88 = *(void (**)(_QWORD))(v331 + 104);
          v293 = enum case for MediaRequest.ContentType.podcastEpisode(_:);
          v321 = v88;
          v88(v49);
          v89 = sub_100026844(&qword_100557D68, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
          dispatch thunk of RawRepresentable.rawValue.getter(&v334, v34, v89);
          v323 = (void (*)(_QWORD, _QWORD, _QWORD))v89;
          dispatch thunk of RawRepresentable.rawValue.getter(&v332, v34, v89);
          v90 = v335;
          v91 = v333;
          if (v334 == v332 && v335 == v333)
          {
            v92 = 1;
            v91 = v335;
          }
          else
          {
            v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v334, v335, v332, v333, 0);
          }
          swift_bridgeObjectRelease(v90);
          v93 = swift_bridgeObjectRelease(v91);
          v311 = *(void (**)(char *, uint64_t, __n128))(v331 + 8);
          v311(v49, v34, v93);
          v286 = v87;
          if ((v92 & 1) != 0 || !v87)
          {
            v98 = type metadata accessor for MediaRequest.ViewType(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v326, 1, 1, v98);
          }
          else
          {
            v94 = enum case for MediaRequest.ViewType.nextEpisodes(_:);
            v95 = type metadata accessor for MediaRequest.ViewType(0);
            v96 = *(_QWORD *)(v95 - 8);
            v97 = v326;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 104))(v326, v94, v95);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v97, 0, 1, v95);
          }
          v99 = (void (*)(char *, _QWORD, uint64_t))v321;
          LODWORD(v312) = enum case for MediaRequest.ContentType.podcast(_:);
          v321(v46);
          v100 = v323;
          dispatch thunk of RawRepresentable.rawValue.getter(&v334, v34, v323);
          dispatch thunk of RawRepresentable.rawValue.getter(&v332, v34, v100);
          v101 = v335;
          v102 = v333;
          v103 = (_QWORD *)v319;
          if (v334 == v332 && v335 == v333)
          {
            swift_bridgeObjectRelease_n(v335, 2);
            ((void (*)(char *, uint64_t))v311)(v46, v34);
          }
          else
          {
            v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v334, v335, v332, v333, 0);
            swift_bridgeObjectRelease(v101);
            v105 = swift_bridgeObjectRelease(v102);
            v311(v46, v34, v105);
            v106 = 0;
            if ((v104 & 1) == 0)
            {
LABEL_46:
              v99(v43, v293, v34);
              v107 = v323;
              dispatch thunk of RawRepresentable.rawValue.getter(&v334, v34, v323);
              dispatch thunk of RawRepresentable.rawValue.getter(&v332, v34, v107);
              v108 = v335;
              v109 = v333;
              LODWORD(v283) = v106;
              if (v334 == v332 && v335 == v333)
              {
                swift_bridgeObjectRelease_n(v335, 2);
                v110 = v43;
                v111 = v311;
                ((void (*)(char *, uint64_t))v311)(v110, v34);
                v112 = v327;
              }
              else
              {
                v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v334, v335, v332, v333, 0);
                swift_bridgeObjectRelease(v108);
                v114 = swift_bridgeObjectRelease(v109);
                v115 = v43;
                v111 = v311;
                v311(v115, v34, v114);
                v112 = v327;
                if (((v113 | v106) & 1) == 0)
                {
                  v116 = (unsigned int *)&enum case for MediaRequest.RequestType.library(_:);
                  goto LABEL_52;
                }
              }
              v116 = (unsigned int *)&enum case for MediaRequest.RequestType.catalog(_:);
LABEL_52:
              v117 = (void (*)(char *, _QWORD, uint64_t))v103[13];
              v117(v330, *v116, v112);
              v99(v315, v312, v34);
              v118 = v323;
              dispatch thunk of RawRepresentable.rawValue.getter(&v334, v34, v323);
              dispatch thunk of RawRepresentable.rawValue.getter(&v332, v34, v118);
              v119 = v335;
              v120 = v333;
              if (v334 == v332 && v335 == v333)
              {
                v121 = 1;
                v120 = v335;
              }
              else
              {
                v121 = _stringCompareWithSmolCheck(_:_:expecting:)(v334, v335, v332, v333, 0);
              }
              swift_bridgeObjectRelease(v119);
              v122 = swift_bridgeObjectRelease(v120);
              v111(v315, v34, v122);
              v123 = v302;
              v284 = (void (*)(unint64_t, char *, uint64_t))v103[2];
              v284(v302, v330, v112);
              if ((v121 & 1) != 0)
              {
                v124 = v322;
                v117(v322, enum case for MediaRequest.RequestType.library(_:), v112);
                v125 = v123;
                v126 = static MediaRequest.RequestType.== infix(_:_:)(v123, v124);
                v127 = (void (*)(char *, uint64_t))v103[1];
                v127(v124, v112);
                v127((char *)v125, v112);
                v128 = v303;
                if ((v126 & 1) != 0)
                {
                  LODWORD(v300) = 0;
                  v285 = v313;
LABEL_61:
                  v99((char *)v128, v312, v34);
                  v129 = v323;
                  dispatch thunk of RawRepresentable.rawValue.getter(&v334, v34, v323);
                  dispatch thunk of RawRepresentable.rawValue.getter(&v332, v34, v129);
                  v130 = v335;
                  v131 = v333;
                  v294 = v34;
                  if (v334 == v332 && v335 == v333)
                  {
                    swift_bridgeObjectRelease_n(v335, 2);
                    ((void (*)(uint64_t, uint64_t))v111)(v128, v34);
                    v132 = v34;
                  }
                  else
                  {
                    v133 = _stringCompareWithSmolCheck(_:_:expecting:)(v334, v335, v332, v333, 0);
                    swift_bridgeObjectRelease(v130);
                    v134 = swift_bridgeObjectRelease(v131);
                    v111((char *)v128, v34, v134);
                    v132 = v34;
                    if ((v133 & 1) == 0)
                    {
                      v281 = sub_10003F544(&qword_100557DC8);
                      v168 = v314;
                      v276 = *(_QWORD *)(v314 + 72);
                      v169 = *(unsigned __int8 *)(v314 + 80);
                      v170 = ((v169 + 32) & ~v169) + v276;
                      v171 = (v169 + 32) & ~v169;
                      v280 = v171;
                      v172 = v169 | 7;
                      v282 = v170;
                      v173 = swift_allocObject(v281, v170, v169 | 7);
                      v303 = v173;
                      *(_OWORD *)(v173 + 16) = v324;
                      v315 = *(char **)(v168 + 104);
                      v174 = v310;
                      ((void (*)(uint64_t, _QWORD, uint64_t))v315)(v173 + v171, enum case for MediaRequest.IncludeExtendTypes.playbackPosition(_:), v310);
                      v175 = sub_10003F544(&qword_100557DD0);
                      v279 = v175;
                      v176 = sub_10003F544(&qword_100552B60);
                      v177 = *(_QWORD *)(v176 - 8);
                      v178 = v176;
                      v283 = *(_QWORD *)(v177 + 72);
                      v179 = *(unsigned __int8 *)(v177 + 80);
                      v180 = (v179 + 32) & ~v179;
                      v275 = 2 * v283;
                      v277 = v180;
                      *(_QWORD *)&v278 = v179 | 7;
                      v181 = swift_allocObject(v175, v180 + 3 * v283, v179 | 7);
                      v302 = v181;
                      *(_OWORD *)(v181 + 16) = xmmword_1003CA240;
                      v182 = v181 + v180;
                      v272 = *(int *)(v178 + 48);
                      v183 = v178;
                      v273 = v178;
                      v184 = v34;
                      v185 = v321;
                      ((void (*)(uint64_t, _QWORD, uint64_t))v321)(v181 + v180, enum case for MediaRequest.ContentType.podcastChannel(_:), v34);
                      v186 = (void (*)(uint64_t, _QWORD, uint64_t))v185;
                      v187 = v281;
                      v188 = swift_allocObject(v281, v170, v172);
                      *(_OWORD *)(v188 + 16) = v324;
                      v189 = v280;
                      v190 = v315;
                      ((void (*)(uint64_t, _QWORD, uint64_t))v315)(v188 + v280, enum case for MediaRequest.IncludeExtendTypes.isSubscribed(_:), v174);
                      *(_QWORD *)(v182 + v272) = v188;
                      v191 = v182 + v283;
                      v272 = *(int *)(v183 + 48);
                      v186(v182 + v283, v312, v184);
                      v192 = v276;
                      v274 = v172;
                      v193 = swift_allocObject(v187, v189 + 2 * v276, v172);
                      *(_OWORD *)(v193 + 16) = xmmword_1003CA220;
                      v194 = v174;
                      ((void (*)(uint64_t, _QWORD, uint64_t))v190)(v193 + v189, enum case for MediaRequest.IncludeExtendTypes.feedUrl(_:), v174);
                      ((void (*)(uint64_t, _QWORD, uint64_t))v190)(v193 + v189 + v192, enum case for MediaRequest.IncludeExtendTypes.editorialArtwork(_:), v174);
                      v195 = v190;
                      *(_QWORD *)(v191 + v272) = v193;
                      v196 = v182 + v275;
                      v197 = v273;
                      v198 = *(int *)(v273 + 48);
                      v199 = v294;
                      v200 = (void (*)(uint64_t, _QWORD, uint64_t))v321;
                      ((void (*)(uint64_t, _QWORD, uint64_t))v321)(v196, v293, v294);
                      v201 = v281;
                      v202 = swift_allocObject(v281, v282, v172);
                      *(_OWORD *)(v202 + 16) = v324;
                      v203 = v280;
                      ((void (*)(uint64_t, _QWORD, uint64_t))v195)(v202 + v280, enum case for MediaRequest.IncludeExtendTypes.firstAvailableDates(_:), v194);
                      *(_QWORD *)(v196 + v198) = v202;
                      v302 = sub_1001388FC(v302);
                      v204 = v277;
                      v205 = swift_allocObject(v279, v277 + v283, v278);
                      *(_OWORD *)(v205 + 16) = v324;
                      v206 = v205 + v204;
                      v283 = *(int *)(v197 + 48);
                      v158 = v195;
                      v160 = v199;
                      v200(v206, v312, v199);
                      v157 = (_QWORD *)v303;
                      v207 = swift_allocObject(v201, v282, v274);
                      *(_OWORD *)(v207 + 16) = v324;
                      v161 = v194;
                      ((void (*)(uint64_t, _QWORD, uint64_t))v158)(v207 + v203, enum case for MediaRequest.IncludeExtendTypes.channel(_:), v194);
                      *(_QWORD *)(v206 + v283) = v207;
                      v159 = sub_1001388FC(v205);
                      v312 = v159;
                      goto LABEL_70;
                    }
                  }
                  v135 = sub_10003F544(&qword_100557DD0);
                  v136 = sub_10003F544(&qword_100552B60);
                  v137 = *(_QWORD *)(v136 - 8);
                  v303 = *(_QWORD *)(v137 + 72);
                  v138 = *(unsigned __int8 *)(v137 + 80);
                  v139 = (v138 + 32) & ~v138;
                  v281 = v135;
                  v279 = v138 | 7;
                  v140 = swift_allocObject(v135, v139 + 2 * v303, v138 | 7);
                  v278 = xmmword_1003CA220;
                  v302 = v140;
                  *(_OWORD *)(v140 + 16) = xmmword_1003CA220;
                  v280 = v139;
                  v141 = v140 + v139;
                  v315 = (char *)*(int *)(v136 + 48);
                  ((void (*)(uint64_t, _QWORD, uint64_t))v321)(v140 + v139, enum case for MediaRequest.ContentType.podcastChannel(_:), v132);
                  v142 = sub_10003F544(&qword_100557DC8);
                  v143 = v314;
                  v144 = *(unsigned __int8 *)(v314 + 80);
                  v145 = v132;
                  v146 = (v144 + 32) & ~v144;
                  v277 = *(_QWORD *)(v314 + 72);
                  v147 = v146 + v277;
                  v148 = v144 | 7;
                  v149 = swift_allocObject(v142, v146 + v277, v144 | 7);
                  *(_OWORD *)(v149 + 16) = v324;
                  v150 = *(char **)(v143 + 104);
                  v151 = v310;
                  ((void (*)(uint64_t, _QWORD, uint64_t))v150)(v149 + v146, enum case for MediaRequest.IncludeExtendTypes.isSubscribed(_:), v310);
                  *(_QWORD *)&v315[v141] = v149;
                  v152 = (char *)(v141 + v303);
                  v282 = v136;
                  v153 = *(int *)(v136 + 48);
                  ((void (*)(uint64_t, _QWORD, uint64_t))v321)(v141 + v303, v312, v145);
                  v154 = v142;
                  v276 = v147;
                  v155 = swift_allocObject(v142, v147, v148);
                  *(_OWORD *)(v155 + 16) = v324;
                  v315 = v150;
                  ((void (*)(uint64_t, _QWORD, uint64_t))v150)(v155 + v146, enum case for MediaRequest.IncludeExtendTypes.editorialArtwork(_:), v151);
                  *(_QWORD *)&v152[v153] = v155;
                  v302 = sub_1001388FC(v302);
                  if ((_DWORD)v283)
                  {
                    v156 = v277;
                    v157 = (_QWORD *)swift_allocObject(v142, v146 + 2 * v277, v148);
                    *((_OWORD *)v157 + 1) = v278;
                    v158 = v315;
                    ((void (*)(char *, _QWORD, uint64_t))v315)((char *)v157 + v146, enum case for MediaRequest.IncludeExtendTypes.playbackPosition(_:), v151);
                    ((void (*)(char *, _QWORD, uint64_t))v158)((char *)v157 + v146 + v156, enum case for MediaRequest.IncludeExtendTypes.channel(_:), v151);
                    v159 = sub_1001388FC((uint64_t)_swiftEmptyArrayStorage);
                    v312 = v159;
                    v160 = v294;
                  }
                  else
                  {
                    v162 = v280;
                    v163 = swift_allocObject(v281, v280 + v303, v279);
                    *(_OWORD *)(v163 + 16) = v324;
                    v164 = v163 + v162;
                    v165 = *(int *)(v282 + 48);
                    v166 = v294;
                    ((void (*)(uint64_t, _QWORD, uint64_t))v321)(v164, v312, v294);
                    v167 = swift_allocObject(v154, v276, v148);
                    *(_OWORD *)(v167 + 16) = v324;
                    v158 = v315;
                    ((void (*)(uint64_t, _QWORD, uint64_t))v315)(v167 + v146, enum case for MediaRequest.IncludeExtendTypes.channel(_:), v151);
                    *(_QWORD *)(v164 + v165) = v167;
                    v159 = sub_1001388FC(v163);
                    v312 = v159;
                    v157 = _swiftEmptyArrayStorage;
                    v160 = v166;
                  }
                  v161 = v151;
LABEL_70:
                  v208 = v327;
                  v315 = v158;
                  if (v286)
                  {
                    v209 = v329;
                    v210 = (void (*)(id, uint64_t))v311;
                    if ((static Podcasts.areTranscriptsEnabled.getter(v159) & 1) == 0)
                      goto LABEL_88;
                  }
                  else
                  {
                    ((void (*)(char *, _QWORD, uint64_t))v158)(v301, enum case for MediaRequest.IncludeExtendTypes.episodes(_:), v161);
                    v211 = swift_isUniquelyReferenced_nonNull_native(v157);
                    v209 = v329;
                    v210 = (void (*)(id, uint64_t))v311;
                    if ((v211 & 1) == 0)
                      v157 = (_QWORD *)sub_10027B854(0, v157[2] + 1, 1, (unint64_t)v157);
                    v213 = v157[2];
                    v212 = v157[3];
                    if (v213 >= v212 >> 1)
                      v157 = (_QWORD *)sub_10027B854(v212 > 1, v213 + 1, 1, (unint64_t)v157);
                    v157[2] = v213 + 1;
                    v214 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v314 + 32))((unint64_t)v157+ ((*(unsigned __int8 *)(v314 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v314 + 80))+ *(_QWORD *)(v314 + 72) * v213, v301, v161);
                    if ((static Podcasts.areTranscriptsEnabled.getter(v214) & 1) == 0)
                      goto LABEL_88;
                  }
                  ((void (*)(id, _QWORD, uint64_t))v321)(v290, v293, v160);
                  v215 = v323;
                  dispatch thunk of RawRepresentable.rawValue.getter(&v334, v160, v323);
                  dispatch thunk of RawRepresentable.rawValue.getter(&v332, v160, v215);
                  v216 = v335;
                  v217 = v333;
                  if (v334 == v332 && v335 == v333)
                  {
                    swift_bridgeObjectRelease_n(v335, 2);
                    v210(v290, v160);
                  }
                  else
                  {
                    v218 = _stringCompareWithSmolCheck(_:_:expecting:)(v334, v335, v332, v333, 0);
                    swift_bridgeObjectRelease(v216);
                    v219 = swift_bridgeObjectRelease(v217);
                    ((void (*)(id, uint64_t, __n128))v210)(v290, v160, v219);
                    if ((v218 & 1) == 0)
                    {
                      v224 = v298;
                      ((void (*)(uint64_t, _QWORD, uint64_t))v321)(v298, v293, v160);
                      v225 = sub_10003F544(&qword_100557DC8);
                      v226 = *(unsigned __int8 *)(v314 + 80);
                      v227 = (v226 + 32) & ~v226;
                      v228 = swift_allocObject(v225, v227 + *(_QWORD *)(v314 + 72), v226 | 7);
                      *(_OWORD *)(v228 + 16) = v324;
                      ((void (*)(uint64_t, _QWORD, uint64_t))v315)(v228 + v227, enum case for MediaRequest.IncludeExtendTypes.transcripts(_:), v161);
                      v229 = v312;
                      v230 = swift_isUniquelyReferenced_nonNull_native(v312);
                      v334 = v229;
                      sub_10021BF80(v228, v224, v230);
                      v312 = v334;
                      v231 = swift_bridgeObjectRelease(0x8000000000000000);
                      ((void (*)(uint64_t, uint64_t, __n128))v210)(v224, v160, v231);
LABEL_88:
                      v221 = (void (*)(char *, char *, uint64_t))v284;
                      v303 = (uint64_t)v157;
LABEL_89:
                      v221(v322, v330, v208);
                      v232 = v331;
                      v323 = *(void (**)(_QWORD, _QWORD, _QWORD))(v331 + 16);
                      v233 = v317;
                      v323(v317, v209, v160);
                      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v232 + 56))(v233, 0, 1, v160);
                      sub_100007A64(v326, v316, &qword_100564190);
                      v234 = type metadata accessor for MediaRequest.Relationship(0);
                      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v234 - 8) + 56))(v318, 1, 1, v234);
                      v235 = sub_10003F544(&qword_100557DD8);
                      v236 = type metadata accessor for MediaRequest.WithTypes(0);
                      v237 = *(_QWORD *)(v236 - 8);
                      v238 = *(unsigned __int8 *)(v237 + 80);
                      v239 = (v238 + 32) & ~v238;
                      v240 = swift_allocObject(v235, v239 + *(_QWORD *)(v237 + 72), v238 | 7);
                      *(_OWORD *)(v240 + 16) = v324;
                      (*(void (**)(uint64_t, _QWORD, uint64_t))(v237 + 104))(v240 + v239, enum case for MediaRequest.WithTypes.newsPodcasts(_:), v236);
                      v241 = *(_QWORD *)(v295 + 16);
                      v242 = type metadata accessor for MediaRequest.URLFragment(0);
                      v243 = v304;
                      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v242 - 8) + 56))(v304, 1, 1, v242);
                      v244 = type metadata accessor for URL(0);
                      v245 = v305;
                      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v244 - 8) + 56))(v305, 1, 1, v244);
                      swift_bridgeObjectRetain(v241);
                      v246 = sub_100324B98((uint64_t)_swiftEmptyArrayStorage);
                      v247 = sub_100324B98((uint64_t)_swiftEmptyArrayStorage);
                      v248 = v160;
                      v249 = sub_100324BBC((uint64_t)_swiftEmptyArrayStorage);
                      v250 = sub_100324D50((uint64_t)_swiftEmptyArrayStorage);
                      v251 = sub_100324F10((uint64_t)_swiftEmptyArrayStorage);
                      MediaRequest.Params.init(requestType:requestContentType:viewType:directFetch:relationshipIncludes:relationshipRelates:relationshipLimit:include:omit:typedIncludes:typedExtends:fields:withTypes:identifiers:fragment:limit:filters:meta:offset:requestAllPages:hostUrl:countryCode:isImplicitActionRequest:searchTerm:queryContentTypes:triggerBy:includeEntitlementsOverride:)(v322, v317, v316, v318, v246, v247, v249, v303, _swiftEmptyArrayStorage, v312, v302, _swiftEmptyArrayStorage, v240, v241, v243, v285, (_BYTE)v300, v250, v251,
                        0,
                        1,
                        v245,
                        0,
                        0,
                        0,
                        0,
                        0,
                        _swiftEmptyArrayStorage,
                        0,
                        0,
                        2);
                      v252 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance");
                      *(_QWORD *)&v324 = objc_msgSend(v252, "activeAccount");

                      v323(v298, v329, v248);
                      v253 = v331;
                      v254 = *(unsigned __int8 *)(v331 + 80);
                      v255 = (v254 + 88) & ~v254;
                      v256 = (v291 + v255 + 7) & 0xFFFFFFFFFFFFFFF8;
                      v257 = (v256 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v258 = (char *)swift_allocObject(&unk_1004B3158, v257 + 8, v254 | 7);
                      v259 = (uint64_t)v288;
                      v260 = v289;
                      *((_QWORD *)v258 + 2) = v288;
                      *((_QWORD *)v258 + 3) = v260;
                      v261 = v308;
                      *((_QWORD *)v258 + 4) = v296;
                      *((_QWORD *)v258 + 5) = v261;
                      v262 = v292;
                      *((_QWORD *)v258 + 6) = v297;
                      *((_QWORD *)v258 + 7) = v262;
                      v263 = v295;
                      v264 = v325;
                      *((_QWORD *)v258 + 8) = v295;
                      *((_QWORD *)v258 + 9) = v264;
                      v265 = v309;
                      *((_QWORD *)v258 + 10) = v309;
                      (*(void (**)(char *, uint64_t, uint64_t))(v253 + 32))(&v258[v255], v298, v294);
                      *(_QWORD *)&v258[v256] = v328;
                      *(_QWORD *)&v258[v257] = v313;
                      swift_bridgeObjectRetain(v264);
                      sub_10002CA20(v259, v260);
                      v266 = v296;
                      swift_retain();
                      v267 = v297;
                      swift_retain();
                      swift_retain();
                      v268 = v265;
                      v269 = v320;
                      v270 = (void *)v324;
                      dispatch thunk of MediaRequestController.performRecursivelyWithParsing(params:account:callback:)(v320, v324, sub_1001C1114, v258);

                      swift_release(v258);
                      (*(void (**)(char *, uint64_t))(v306 + 8))(v269, v307);
                      (*(void (**)(char *, uint64_t))(v319 + 8))(v330, v327);
                      sub_100007A28(v326, &qword_100564190);
                      swift_release(v267);
                      swift_release(v266);
                      return (id)swift_release(v263);
                    }
                  }
                  v220 = v299;
                  ((void (*)(char *, _QWORD, uint64_t))v315)(v299, enum case for MediaRequest.IncludeExtendTypes.transcripts(_:), v161);
                  if ((swift_isUniquelyReferenced_nonNull_native(v157) & 1) == 0)
                    v157 = (_QWORD *)sub_10027B854(0, v157[2] + 1, 1, (unint64_t)v157);
                  v221 = (void (*)(char *, char *, uint64_t))v284;
                  v223 = v157[2];
                  v222 = v157[3];
                  if (v223 >= v222 >> 1)
                    v157 = (_QWORD *)sub_10027B854(v222 > 1, v223 + 1, 1, (unint64_t)v157);
                  v303 = (uint64_t)v157;
                  v157[2] = v223 + 1;
                  (*(void (**)(unint64_t, char *, uint64_t))(v314 + 32))((unint64_t)v157+ ((*(unsigned __int8 *)(v314 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v314 + 80))+ *(_QWORD *)(v314 + 72) * v223, v220, v161);
                  goto LABEL_89;
                }
              }
              else
              {
                ((void (*)(unint64_t, uint64_t))v103[1])(v123, v112);
                v128 = v303;
              }
              v285 = 0;
              LODWORD(v300) = 1;
              goto LABEL_61;
            }
          }
          v106 = *(_QWORD *)(*(_QWORD *)v300 + 16) != 0;
          goto LABEL_46;
        }
      }
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_10027AE00(0, v55[2] + 1, 1, v55);
      v55 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      *(_QWORD *)v300 = isUniquelyReferenced_nonNull_native;
      goto LABEL_29;
    }
  }
  if (a9)
    return (id)a9(a7, a8 & 1);
  return result;
}

void sub_1001BC488(uint64_t a1, uint64_t a2)
{
  NSArray v3;
  Class isa;

  if (a1)
  {
    sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.isa = 0;
  }
  isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

void sub_1001BC550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  char v14;
  __n128 v15;
  void (*v16)(char *, uint64_t, __n128);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v1 = v0;
  v2 = type metadata accessor for MediaRequest.ContentType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v17 - v7;
  v9 = v0 + OBJC_IVAR___MTNetworkMediaManifest_contentType;
  swift_beginAccess(v0 + OBJC_IVAR___MTNetworkMediaManifest_contentType, v22, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v9, v2);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for MediaRequest.ContentType.podcastEpisode(_:), v2);
  v10 = sub_100026844(&qword_100557D68, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v20, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, v2, v10);
  v11 = v21;
  v12 = v19;
  if (v20 == v18 && v21 == v19)
  {
    swift_bridgeObjectRelease_n(v21, 2);
    v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v6, v2);
    v13(v8, v2);
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v18, v19, 0);
    swift_bridgeObjectRelease(v11);
    v15 = swift_bridgeObjectRelease(v12);
    v16 = *(void (**)(char *, uint64_t, __n128))(v3 + 8);
    v16(v6, v2, v15);
    ((void (*)(char *, uint64_t))v16)(v8, v2);
    if ((v14 & 1) == 0)
      return;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + OBJC_IVAR___MTNetworkMediaManifest_initialIds));
}

uint64_t sub_1001BC780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  char v14;
  __n128 v15;
  void (*v16)(char *, uint64_t, __n128);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v1 = v0;
  v2 = type metadata accessor for MediaRequest.ContentType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v20 - v7;
  v9 = v0 + OBJC_IVAR___MTNetworkMediaManifest_contentType;
  swift_beginAccess(v0 + OBJC_IVAR___MTNetworkMediaManifest_contentType, v25, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v9, v2);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for MediaRequest.ContentType.podcast(_:), v2);
  v10 = sub_100026844(&qword_100557D68, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v23, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v21, v2, v10);
  v11 = v24;
  v12 = v22;
  if (v23 == v21 && v24 == v22)
  {
    swift_bridgeObjectRelease_n(v24, 2);
    v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v6, v2);
    v13(v8, v2);
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v21, v22, 0);
    swift_bridgeObjectRelease(v11);
    v15 = swift_bridgeObjectRelease(v12);
    v16 = *(void (**)(char *, uint64_t, __n128))(v3 + 8);
    v16(v6, v2, v15);
    ((void (*)(char *, uint64_t))v16)(v8, v2);
    if ((v14 & 1) == 0)
      return 0;
  }
  v17 = *(_QWORD **)(v1 + OBJC_IVAR___MTNetworkMediaManifest_initialIds);
  if (!v17 || !v17[2])
    return 0;
  v18 = v17[4];
  swift_bridgeObjectRetain(v17[5]);
  return v18;
}

id sub_1001BC96C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  id result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  Class isa;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45[4];

  v3 = v2;
  v6 = type metadata accessor for String.Encoding(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (id)__chkstk_darwin(v6);
  v10 = (char *)&v45[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    static String.Encoding.utf8.getter(result);
    v11 = String.data(using:allowLossyConversion:)(v10, 0, a1, a2);
    v13 = v12;
    result = (id)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v13 >> 60 != 15)
    {
      v14 = (void *)objc_opt_self(NSJSONSerialization);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v45[0] = 0;
      v16 = objc_msgSend(v14, "JSONObjectWithData:options:error:", isa, 0, v45);

      v17 = v45[0];
      if (!v16)
      {
        v40 = v45[0];
        _convertNSErrorToError(_:)(v17);

        swift_willThrow(v41);
        return (id)sub_1001C0F60(v11, v13);
      }
      v18 = v45[0];
      _bridgeAnyObjectToAny(_:)(v45, v16);
      swift_unknownObjectRelease(v16);
      v19 = sub_10003F544(&qword_100557D90);
      if ((swift_dynamicCast(&v44, v45, (char *)&type metadata for Any + 8, v19, 6) & 1) == 0)
        return (id)sub_1001C0F60(v11, v13);
      v20 = v44;
      type metadata accessor for MediaRequestResponseParser(0);
      v21 = type metadata accessor for ServerPodcastStation(0);
      v22 = sub_100026844(&qword_100557DA8, (uint64_t (*)(uint64_t))&type metadata accessor for ServerPodcastStation, (uint64_t)&protocol conformance descriptor for ServerPodcastStation);
      v23 = static MediaRequestResponseParser.parseContainerResponse<A>(containerType:_:)(v21, v20, v21, &protocol witness table for ServerPodcastStation, v22);
      v25 = v24;
      swift_bridgeObjectRelease(v20);
      swift_errorRelease(v25);
      if (!v23)
        return (id)sub_1001C0F60(v11, v13);
      if ((unint64_t)v23 >> 62)
      {
        if (v23 >= 0)
          v42 = v23 & 0xFFFFFFFFFFFFFF8;
        else
          v42 = v23;
        swift_bridgeObjectRetain(v23);
        v43 = _CocoaArrayWrapper.endIndex.getter(v42);
        swift_bridgeObjectRelease(v23);
        if (v43)
        {
LABEL_8:
          if ((v23 & 0xC000000000000001) != 0)
          {
            v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
          }
          else
          {
            if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
              __break(1u);
            v26 = *(id *)(v23 + 32);
          }
          v27 = v26;
          swift_bridgeObjectRelease(v23);
          v28 = v27;
          sub_1001C003C(v28);
          v30 = v29;

          sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
          v31 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v3, "setItems:", v31, swift_bridgeObjectRelease(v30).n128_f64[0]);

          result = (id)_MTLogCategoryPlayback(v32, v33);
          if (!result)
          {
            __break(1u);
            return result;
          }
          v34 = result;
          v35 = static os_log_type_t.default.getter();
          v36 = sub_10003F544(&qword_1005559A0);
          v37 = swift_allocObject(v36, 72, 7);
          *(_OWORD *)(v37 + 16) = xmmword_1003CA200;
          v38 = sub_1001BF9E0();
          *(_QWORD *)(v37 + 56) = sub_10003F544(&qword_100553928);
          *(_QWORD *)(v37 + 64) = sub_10002F9C8(&qword_100557D78, &qword_100553928, (uint64_t)&protocol conformance descriptor for [A]);
          *(_QWORD *)(v37 + 32) = v38;
          os_log(_:dso:log:type:_:)("NetworkMediaManifest: Loaded items from asset info %@", 53, 2, &_mh_execute_header, v34, v35, v37);

          v39 = v37;
          goto LABEL_19;
        }
      }
      else if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_8;
      }
      v39 = v23;
LABEL_19:
      swift_bridgeObjectRelease(v39);
      return (id)sub_1001C0F60(v11, v13);
    }
  }
  return result;
}

_QWORD *sub_1001BCD4C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  Class isa;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  id v47[4];

  v3 = v2;
  v6 = type metadata accessor for String.Encoding(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    return _swiftEmptyArrayStorage;
  static String.Encoding.utf8.getter(v8);
  v11 = String.data(using:allowLossyConversion:)(v10, 0, a1, a2);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v13 >> 60 == 15)
    return _swiftEmptyArrayStorage;
  v14 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v47[0] = 0;
  v16 = objc_msgSend(v14, "JSONObjectWithData:options:error:", isa, 0, v47);

  v17 = v47[0];
  if (!v16)
  {
    v38 = v47[0];
    _convertNSErrorToError(_:)(v17);

    swift_willThrow(v39);
    sub_1001C0F60(v11, v13);
    return v38;
  }
  v18 = v47[0];
  _bridgeAnyObjectToAny(_:)(v47, v16);
  swift_unknownObjectRelease(v16);
  v19 = sub_10003F544(&qword_100557D90);
  if ((swift_dynamicCast(&v46, v47, (char *)&type metadata for Any + 8, v19, 6) & 1) == 0)
  {
LABEL_20:
    sub_1001C0F60(v11, v13);
    return _swiftEmptyArrayStorage;
  }
  v20 = v46;
  type metadata accessor for MediaRequestResponseParser(0);
  v21 = static MediaRequestResponseParser.parsePodcastEpisodeResponse(_:)(v20);
  swift_bridgeObjectRelease(v20);
  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0)
      v40 = v21;
    else
      v40 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v21);
    v41 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(v21);
    if (v41)
      goto LABEL_7;
LABEL_19:
    swift_bridgeObjectRelease(v21);
    goto LABEL_20;
  }
  if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_19;
LABEL_7:
  if ((v21 & 0xC000000000000001) != 0)
  {
    v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
  }
  else
  {
    if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v22 = *(id *)(v21 + 32);
  }
  v23 = v22;
  swift_bridgeObjectRelease(v21);
  v24 = objc_msgSend(objc_allocWithZone((Class)MTPlayerItem), "initWithPodcastEpisode:podcast:", v23, 0);
  if (!v24)
  {

    goto LABEL_20;
  }
  v25 = v24;
  v45 = sub_10003F544((uint64_t *)&unk_100553780);
  v26 = swift_allocObject(v45, 40, 7);
  v44 = xmmword_1003CA250;
  *(_OWORD *)(v26 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v26 + 32) = v25;
  v47[0] = (id)v26;
  specialized Array._endMutation()(v26);
  v27 = v47[0];
  sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
  v43 = v25;
  v28 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "setItems:", v28, swift_bridgeObjectRelease(v27).n128_f64[0]);

  result = (id)_MTLogCategoryPlayback(v29, v30);
  if (result)
  {
    v32 = result;
    v33 = static os_log_type_t.default.getter();
    v34 = sub_10003F544(&qword_1005559A0);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_1003CA200;
    v36 = sub_1001BF9E0();
    *(_QWORD *)(v35 + 56) = sub_10003F544(&qword_100553928);
    *(_QWORD *)(v35 + 64) = sub_10002F9C8(&qword_100557D78, &qword_100553928, (uint64_t)&protocol conformance descriptor for [A]);
    *(_QWORD *)(v35 + 32) = v36;
    os_log(_:dso:log:type:_:)("NetworkMediaManifest: Loaded items from asset info %@", 53, 2, &_mh_execute_header, v32, v33, v35);

    swift_bridgeObjectRelease(v35);
    v37 = swift_allocObject(v45, 40, 7);
    *(_OWORD *)(v37 + 16) = v44;
    *(_QWORD *)(v37 + 32) = v23;
    v47[0] = (id)v37;
    specialized Array._endMutation()(v37);
    v38 = v47[0];

    sub_1001C0F60(v11, v13);
    return v38;
  }
  __break(1u);
  return result;
}

id sub_1001BD284(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id result;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  Class isa;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  Class v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  __n128 v58;
  uint64_t v59;
  char v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  unsigned int v97;
  unint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  id v110[4];

  v3 = v2;
  v6 = type metadata accessor for PriceType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v106 = v6;
  v107 = v7;
  __chkstk_darwin(v6);
  v103 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_10003F544(&qword_100557D80);
  __chkstk_darwin(v105);
  v108 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544(&qword_100557D88);
  v11 = __chkstk_darwin(v10);
  v104 = (uint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v93 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v93 - v16;
  v18 = type metadata accessor for String.Encoding(0);
  v19 = *(_QWORD *)(v18 - 8);
  result = (id)__chkstk_darwin(v18);
  v22 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    return result;
  static String.Encoding.utf8.getter(result);
  v23 = String.data(using:allowLossyConversion:)(v22, 0, a1, a2);
  v25 = v24;
  result = (id)(*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  if (v25 >> 60 == 15)
    return result;
  v26 = (void *)objc_opt_self(NSJSONSerialization);
  v27 = v25;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v110[0] = 0;
  v29 = objc_msgSend(v26, "JSONObjectWithData:options:error:", isa, 0, v110);

  v30 = v110[0];
  v31 = v23;
  if (!v29)
  {
    v67 = v110[0];
    _convertNSErrorToError(_:)(v30);

    swift_willThrow(v68);
    return (id)sub_1001C0F60(v23, v27);
  }
  v32 = v110[0];
  _bridgeAnyObjectToAny(_:)(v110, v29);
  swift_unknownObjectRelease(v29);
  v33 = sub_10003F544(&qword_100557D90);
  if ((swift_dynamicCast(&v109, v110, (char *)&type metadata for Any + 8, v33, 6) & 1) == 0)
    return (id)sub_1001C0F60(v31, v27);
  v34 = v109;
  type metadata accessor for MediaRequestResponseParser(0);
  v35 = type metadata accessor for ServerPodcast(0);
  v36 = sub_100026844(&qword_100557D98, (uint64_t (*)(uint64_t))&type metadata accessor for ServerPodcast, (uint64_t)&protocol conformance descriptor for ServerPodcastBase);
  v37 = static MediaRequestResponseParser.parseContainerResponse<A>(containerType:_:)(v35, v34, v35, &protocol witness table for ServerPodcast, v36);
  v39 = v38;
  swift_bridgeObjectRelease(v34);
  swift_errorRelease(v39);
  if (!v37)
    return (id)sub_1001C0F60(v31, v27);
  v40 = (id)(v37 & 0xFFFFFFFFFFFFFF8);
  if ((unint64_t)v37 >> 62)
  {
    if (v37 >= 0)
      v85 = v37 & 0xFFFFFFFFFFFFFF8;
    else
      v85 = v37;
    swift_bridgeObjectRetain(v37);
    v41 = _CocoaArrayWrapper.endIndex.getter(v85);
    swift_bridgeObjectRelease(v37);
  }
  else
  {
    v41 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v42 = v3;
  v43 = (uint64_t)v108;
  if (!v41)
  {
    v69 = v37;
    goto LABEL_65;
  }
  if ((v37 & 0xC000000000000001) != 0)
  {
    v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v37);
  }
  else
  {
    if (!*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_49;
    }
    v44 = *(id *)(v37 + 32);
  }
  v45 = v44;
  swift_bridgeObjectRelease(v37);
  v46 = v45;
  sub_1001C003C(v46);
  v48 = v47;

  sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
  v49 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v42, "setItems:", v49, swift_bridgeObjectRelease(v48).n128_f64[0]);

  v40 = v46;
  v50 = ServerPodcastBase.relationships.getter();

  if (!v50)
    goto LABEL_63;
  v53 = PodcastRelationships.channel.getter();
  v51 = swift_release(v50);
  if (!v53)
    goto LABEL_63;
  v37 = PodcastChannelRelationshipContainer.data.getter(v51);
  swift_release(v53);
  if (!((unint64_t)v37 >> 62))
  {
    v54 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v54)
      goto LABEL_16;
LABEL_53:
    swift_bridgeObjectRelease(v37);
    goto LABEL_63;
  }
LABEL_49:
  if (v37 < 0)
    v86 = v37;
  else
    v86 = v37 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v37);
  v54 = _CocoaArrayWrapper.endIndex.getter(v86);
  swift_bridgeObjectRelease(v37);
  if (!v54)
    goto LABEL_53;
LABEL_16:
  v99 = v40;
  if ((v37 & 0xC000000000000001) != 0)
  {
LABEL_55:
    v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v37);
  }
  else
  {
    v55 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v55)
    {
      __break(1u);
      goto LABEL_57;
    }
    v56 = *(id *)(v37 + 32);
  }
  v57 = v56;
  v58 = swift_bridgeObjectRelease(v37);
  v59 = ServerChannel.attributes.getter(v58);

  v60 = ChannelAttributes.isSubscribed.getter();
  v51 = swift_release(v59);
  v40 = v99;
  if (v60 == 2)
    goto LABEL_63;
  if ((v60 & 1) != 0)
    goto LABEL_63;
  v61 = v99;
  v62 = ServerPodcastBase.attributes.getter();

  if (!v62)
    goto LABEL_63;
  v63 = PodcastAttributes.offers.getter();
  v64 = v62;
  v54 = v63;
  v51 = swift_release(v64);
  if (!v54)
    goto LABEL_63;
  v55 = v54 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)v54 >> 62)
  {
LABEL_57:
    if (v54 >= 0)
      v87 = v55;
    else
      v87 = v54;
    swift_bridgeObjectRetain(v54);
    v65 = _CocoaArrayWrapper.endIndex.getter(v87);
    if (v65)
      goto LABEL_25;
LABEL_61:
    v84 = 1;
    goto LABEL_62;
  }
  v65 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v54);
  if (!v65)
    goto LABEL_61;
LABEL_25:
  v93 = v31;
  v98 = v54 & 0xC000000000000001;
  v97 = enum case for PriceType.psub(_:);
  v66 = 4;
  v95 = v54;
  v96 = v42;
  v94 = v65;
  while (1)
  {
    v37 = v66 - 4;
    v100 = v66;
    if (v98)
      v71 = specialized _ArrayBuffer._getElementSlowPath(_:)(v66 - 4, v54);
    else
      v72 = swift_retain();
    v101 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    v31 = (uint64_t)v40;
    v102 = v71;
    dispatch thunk of PodcastShowOffer.typeResolved.getter(v72);
    v73 = v106;
    v74 = v107;
    (*(void (**)(char *, _QWORD, uint64_t))(v107 + 104))(v15, v97, v106);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v15, 0, 1, v73);
    v75 = v43 + *(int *)(v105 + 48);
    sub_100007A64((uint64_t)v17, v43, &qword_100557D88);
    sub_100007A64((uint64_t)v15, v75, &qword_100557D88);
    v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
    if (v76(v43, 1, v73) == 1)
    {
      v70 = v76(v75, 1, v73);
      v42 = v96;
      if (v70 != 1)
        goto LABEL_42;
      sub_100007A28(v43, &qword_100557D88);
      sub_100007A28((uint64_t)v15, &qword_100557D88);
      sub_100007A28((uint64_t)v17, &qword_100557D88);
      swift_release(v102);
      v54 = v95;
      goto LABEL_30;
    }
    v77 = v104;
    sub_100007A64(v43, v104, &qword_100557D88);
    if (v76(v75, 1, v73) == 1)
      break;
    v78 = v107;
    v79 = v103;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v103, v75, v73);
    v80 = sub_100026844(&qword_100557DA0, (uint64_t (*)(uint64_t))&type metadata accessor for PriceType, (uint64_t)&protocol conformance descriptor for PriceType);
    v81 = dispatch thunk of static Equatable.== infix(_:_:)(v77, v79, v73, v80);
    v82 = *(void (**)(char *, uint64_t))(v78 + 8);
    v83 = v79;
    v43 = (uint64_t)v108;
    v82(v83, v73);
    v82((char *)v77, v73);
    sub_100007A28(v43, &qword_100557D88);
    sub_100007A28((uint64_t)v15, &qword_100557D88);
    sub_100007A28((uint64_t)v17, &qword_100557D88);
    swift_release(v102);
    v54 = v95;
    v42 = v96;
    v40 = v99;
    if ((v81 & 1) == 0)
    {
      v84 = 0;
LABEL_40:
      v31 = v93;
      goto LABEL_62;
    }
LABEL_30:
    v66 = v100 + 1;
    if (v101 == v94)
    {
      v84 = 1;
      goto LABEL_40;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v77, v73);
  v42 = v96;
  v40 = v99;
LABEL_42:
  sub_100007A28(v43, &qword_100557D80);
  sub_100007A28((uint64_t)v15, &qword_100557D88);
  sub_100007A28((uint64_t)v17, &qword_100557D88);
  swift_release(v102);
  v84 = 0;
  v31 = v93;
  v54 = v95;
LABEL_62:
  v51 = swift_bridgeObjectRelease_n(v54, 2);
  *((_BYTE *)v42 + OBJC_IVAR___MTNetworkMediaManifest_hasOnlyPaidEpisodesWithoutSubscription) = v84;
LABEL_63:
  result = (id)_MTLogCategoryPlayback(v51, v52);
  if (result)
  {
    v88 = result;
    v89 = static os_log_type_t.default.getter();
    v90 = sub_10003F544(&qword_1005559A0);
    v91 = swift_allocObject(v90, 72, 7);
    *(_OWORD *)(v91 + 16) = xmmword_1003CA200;
    v92 = sub_1001BF9E0();
    *(_QWORD *)(v91 + 56) = sub_10003F544(&qword_100553928);
    *(_QWORD *)(v91 + 64) = sub_10002F9C8(&qword_100557D78, &qword_100553928, (uint64_t)&protocol conformance descriptor for [A]);
    *(_QWORD *)(v91 + 32) = v92;
    os_log(_:dso:log:type:_:)("NetworkMediaManifest: Loaded items from asset info %@", 53, 2, &_mh_execute_header, v88, v89, v91);

    v69 = v91;
LABEL_65:
    swift_bridgeObjectRelease(v69);
    return (id)sub_1001C0F60(v31, v27);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001BDBE4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  if (a3)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = a1;
  a5(v7, v9);

  swift_bridgeObjectRelease(v9);
  return 1;
}

void sub_1001BDD6C(uint64_t a1, char a2, uint64_t a3, void (*a4)(__n128))
{
  uint64_t v7;
  uint64_t Strong;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void (*v14)(__n128);
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  __n128 v18;
  _BYTE v19[24];
  _BYTE v20[24];

  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (_BYTE *)Strong;
    v10 = Strong + OBJC_IVAR___MTNetworkMediaManifest_inProgressRefreshHandlers;
    swift_beginAccess(Strong + OBJC_IVAR___MTNetworkMediaManifest_inProgressRefreshHandlers, v19, 1, 0);
    v11 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(*(_QWORD *)v10 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain(v11);
      v13 = (uint64_t *)(v11 + 40);
      do
      {
        v14 = (void (*)(__n128))*(v13 - 1);
        if (v14)
        {
          v15 = *v13;
          v16 = swift_retain();
          v14(v16);
          sub_10002CA30((uint64_t)v14, v15);
        }
        v13 += 2;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease(v11);
      v11 = *(_QWORD *)v10;
    }
    *(_QWORD *)v10 = _swiftEmptyArrayStorage;
    v18 = swift_bridgeObjectRelease(v11);
    v9[OBJC_IVAR___MTNetworkMediaManifest_refreshInProgress] = 0;
    if (a1)
      sub_1001BEB10(a1, v17);
    v9[OBJC_IVAR___MTNetworkMediaManifest_hasOnlyPaidEpisodesWithoutSubscription] = a2 & 1;
    if (a4)
      a4(v18);

  }
}

void sub_1001BDEB8(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD, _QWORD, __n128), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t *v20;
  int *v21;
  char **v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  __n128 v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  void *v92;
  __n128 v93;
  uint64_t v94;
  char v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t *v126;
  void (*v127)(_QWORD, _QWORD, __n128);
  char v128[24];
  char v129[24];
  char v130[24];
  char v131[24];
  _QWORD v132[4];

  v125 = a7;
  v127 = a6;
  v20 = a10;
  v123 = a9;
  v21 = (int *)type metadata accessor for PriceType(0);
  v22 = (char **)*((_QWORD *)v21 - 1);
  __chkstk_darwin(v21);
  v121 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (int *)sub_10003F544(&qword_100557D80);
  __chkstk_darwin(v24);
  v122 = (uint64_t)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10003F544(&qword_100557D88);
  v27 = __chkstk_darwin(v26);
  v29 = (uint64_t)&v118 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v27);
  v32 = (uint64_t)&v118 - v31;
  v33 = __chkstk_darwin(v30);
  v36 = (uint64_t)&v118 - v35;
  v124 = (_BYTE *)(a8 + 16);
  v126 = a10 + 2;
  if (!a5)
  {
    if (!a1)
      goto LABEL_103;
    goto LABEL_9;
  }
  if (!a1)
    goto LABEL_5;
  v37 = a1 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)a1 >> 62)
    goto LABEL_54;
  a8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (a8 <= 0)
  {
LABEL_5:
    v38 = (id)_MTLogCategoryPlayback(v33, v34);
    if (v38)
    {
      v39 = v38;
      v40 = static os_log_type_t.error.getter(v38);
      v41 = sub_10003F544(&qword_1005559A0);
      v42 = swift_allocObject(v41, 72, 7);
      *(_OWORD *)(v42 + 16) = xmmword_1003CA200;
      v43 = _convertErrorToNSError(_:)(a5);
      *(_QWORD *)(v42 + 56) = sub_100005EC8(0, &qword_1005532D0, NSError_ptr);
      *(_QWORD *)(v42 + 64) = sub_1001BFFE4();
      *(_QWORD *)(v42 + 32) = v43;
      os_log(_:dso:log:type:_:)("NetworkMediaManifest: Failed to refresh episodes for podcast with error %@", 74, 2, &_mh_execute_header, v39, v40, v42);

      v44 = swift_bridgeObjectRelease(v42);
      if (v127)
        v127(0, 0, v44);
      return;
    }
    goto LABEL_121;
  }
LABEL_9:
  while (2)
  {
    v45 = sub_10034EC6C(a1);
    if (!v45)
    {
LABEL_15:
      v53 = (uint64_t)sub_10034EEA8(a1);
      if (!v53)
        goto LABEL_103;
      v32 = v53;
      v132[0] = _swiftEmptyArrayStorage;
      if ((unint64_t)v53 >> 62)
      {
        if (v53 >= 0)
          a5 = v53 & 0xFFFFFFFFFFFFFF8;
        else
          a5 = v53;
        swift_bridgeObjectRetain(v53);
        v29 = _CocoaArrayWrapper.endIndex.getter(a5);
        if (v29)
          goto LABEL_18;
      }
      else
      {
        v29 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v53);
        if (v29)
        {
LABEL_18:
          if (v29 < 1)
          {
            __break(1u);
            goto LABEL_73;
          }
          v36 = 0;
          v21 = &OBJC_IVAR___MTEpisodeLockup__showsPlayState;
          v22 = &selRef_setEpisodeFetchLimit_;
          while (1)
          {
            if ((v32 & 0xC000000000000001) != 0)
              v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v32);
            else
              v55 = *(id *)(v32 + 8 * v36 + 32);
            v24 = (int *)v55;
            v57 = dispatch thunk of ServerPodcastEpisode.relationships.getter(v56);
            if (!v57)
            {
              a1 = 0;
              goto LABEL_35;
            }
            v58 = (void *)v57;
            a1 = PodcastEpisodeRelationships.podcast.getter();

            if (a1)
              break;
LABEL_35:
            v20 = (uint64_t *)objc_msgSend(objc_allocWithZone((Class)MTPlayerItem), "initWithPodcastEpisode:podcast:", v24, a1);

            if (v20)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
              v62 = *(_QWORD *)((v132[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v61 = *(_QWORD *)((v132[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v62 >= v61 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
              v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v20);
              specialized Array._endMutation()(v54);
            }
            if (v29 == ++v36)
            {
              swift_bridgeObjectRelease(v32);
              v29 = v132[0];
              goto LABEL_64;
            }
          }
          a5 = PodcastRelationshipContainer.data.getter();

          if ((unint64_t)a5 >> 62)
          {
            if (a5 < 0)
              v63 = a5;
            else
              v63 = a5 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(a5);
            a1 = _CocoaArrayWrapper.endIndex.getter(v63);
            swift_bridgeObjectRelease(a5);
            if (a1)
              goto LABEL_29;
          }
          else
          {
            a1 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (a1)
            {
LABEL_29:
              if ((a5 & 0xC000000000000001) != 0)
              {
                v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a5);
              }
              else
              {
                v37 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
                if (!v37)
                {
                  __break(1u);
LABEL_54:
                  if (a1 >= 0)
                    v69 = v37;
                  else
                    v69 = a1;
                  swift_bridgeObjectRetain(a1);
                  a8 = _CocoaArrayWrapper.endIndex.getter(v69);
                  swift_bridgeObjectRelease(a1);
                  if (a8 <= 0)
                    goto LABEL_5;
                  continue;
                }
                v59 = *(id *)(a5 + 32);
              }
              a1 = (int64_t)v59;
            }
          }
          swift_bridgeObjectRelease(a5);
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease(v32);
      v29 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_64:
      swift_bridgeObjectRelease(v32);
      swift_beginAccess(v126, v132, 33, 0);
      swift_bridgeObjectRetain(v29);
      sub_100173A34(v70);
      v71 = swift_endAccess(v132);
      v73 = (id)_MTLogCategoryPlayback(v71, v72);
      if (v73)
      {
        v74 = v73;
        v36 = static os_log_type_t.default.getter();
        v75 = sub_10003F544(&qword_1005559A0);
        v76 = swift_allocObject(v75, 72, 7);
        *(_OWORD *)(v76 + 16) = xmmword_1003CA200;
        if ((unint64_t)v29 >> 62)
        {
          if (v29 < 0)
            v78 = v29;
          else
            v78 = v29 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v29);
          v77 = _CocoaArrayWrapper.endIndex.getter(v78);
          swift_bridgeObjectRelease(v29);
        }
        else
        {
          v77 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v29);
        *(_QWORD *)(v76 + 56) = &type metadata for Int;
        *(_QWORD *)(v76 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v76 + 32) = v77;
        os_log(_:dso:log:type:_:)("NetworkMediaManifest: Performed fetch for library episodes, added %d episodes", v118);
        goto LABEL_102;
      }
      goto LABEL_122;
    }
    break;
  }
  a5 = (uint64_t)v45;
  if (!v45[2])
  {
    swift_bridgeObjectRelease(v45);
    goto LABEL_15;
  }
  v20 = (uint64_t *)v45[4];
  v46 = v45[5];
  swift_unknownObjectRetain(v20);
  swift_bridgeObjectRelease(a5);
  v47 = type metadata accessor for ServerPodcast(0);
  v48 = swift_dynamicCastClass(v20, v47);
  if (!v48)
    goto LABEL_98;
  v50 = v48;
  v51 = v124;
  swift_beginAccess(v124, v129, 0, 0);
  if ((*v51 & 1) == 0)
  {
    v64 = swift_unknownObjectRetain(v20);
    v120 = v50;
    v65 = ServerPodcastBase.attributes.getter(v64);
    if (!v65)
      goto LABEL_78;
    v66 = v65;
    a5 = PodcastAttributes.offers.getter();
    swift_release(v66);
    if (!a5)
      goto LABEL_78;
    v119 = v46;
    a8 = a5 & 0xFFFFFFFFFFFFFF8;
    if (!((unint64_t)a5 >> 62))
    {
      if (*(_QWORD *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_49:
        if ((a5 & 0xC000000000000001) != 0)
        {
          v67 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a5);
        }
        else
        {
          if (!*(_QWORD *)(a8 + 16))
          {
            __break(1u);
            goto LABEL_114;
          }
          v67 = *(_QWORD *)(a5 + 32);
          swift_retain();
        }
        v68 = swift_bridgeObjectRelease(a5);
        dispatch thunk of PodcastShowOffer.typeResolved.getter(v68);
        swift_release(v67);
LABEL_79:
        ((void (*)(uint64_t, _QWORD, int *))v22[13])(v32, enum case for PriceType.psub(_:), v21);
        ((void (*)(uint64_t, _QWORD, uint64_t, int *))v22[7])(v32, 0, 1, v21);
        v81 = v24[12];
        v82 = v122;
        v83 = v122 + v81;
        sub_100007A64(v36, v122, &qword_100557D88);
        sub_100007A64(v32, v83, &qword_100557D88);
        v84 = v22[6];
        if (((unsigned int (*)(uint64_t, uint64_t, int *))v84)(v82, 1, v21) == 1)
        {
          sub_100007A28(v32, &qword_100557D88);
          sub_100007A28(v36, &qword_100557D88);
          if (((unsigned int (*)(uint64_t, uint64_t, int *))v84)(v83, 1, v21) == 1)
          {
            v85 = sub_100007A28(v82, &qword_100557D88);
LABEL_86:
            v52 = ServerPodcastBase.relationships.getter(v85);
            if (!v52)
            {
              swift_unknownObjectRelease(v20);
              goto LABEL_97;
            }
            v89 = PodcastRelationships.channel.getter();
            v90 = swift_release(v52);
            if (v89)
            {
              v32 = PodcastChannelRelationshipContainer.data.getter(v90);
              swift_release(v89);
              if (!((unint64_t)v32 >> 62))
              {
                if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_90;
                goto LABEL_118;
              }
LABEL_114:
              if (v32 < 0)
                v116 = v32;
              else
                v116 = v32 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v32);
              v117 = _CocoaArrayWrapper.endIndex.getter(v116);
              swift_bridgeObjectRelease(v32);
              if (v117)
              {
LABEL_90:
                if ((v32 & 0xC000000000000001) != 0)
                {
                  v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v32);
                }
                else
                {
                  if (!*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
                  {
                    __break(1u);
LABEL_121:
                    __break(1u);
LABEL_122:
                    __break(1u);
                    goto LABEL_123;
                  }
                  v91 = *(id *)(v32 + 32);
                }
                v92 = v91;
                v93 = swift_bridgeObjectRelease(v32);
                v94 = ServerChannel.attributes.getter(v93);

                v95 = ChannelAttributes.isSubscribed.getter();
                swift_release(v94);
                swift_unknownObjectRelease(v20);
                if (v95 != 2)
                {
                  LOBYTE(v52) = (v95 & 1) == 0;
                  goto LABEL_97;
                }
LABEL_96:
                LOBYTE(v52) = 0;
                goto LABEL_97;
              }
LABEL_118:
              swift_unknownObjectRelease(v20);
              swift_bridgeObjectRelease(v32);
              goto LABEL_96;
            }
LABEL_95:
            swift_unknownObjectRelease(v20);
            goto LABEL_96;
          }
        }
        else
        {
          sub_100007A64(v82, v29, &qword_100557D88);
          if (((unsigned int (*)(uint64_t, uint64_t, int *))v84)(v83, 1, v21) != 1)
          {
            v86 = v121;
            ((void (*)(char *, uint64_t, int *))v22[4])(v121, v83, v21);
            v87 = sub_100026844(&qword_100557DA0, (uint64_t (*)(uint64_t))&type metadata accessor for PriceType, (uint64_t)&protocol conformance descriptor for PriceType);
            LODWORD(v119) = dispatch thunk of static Equatable.== infix(_:_:)(v29, v86, v21, v87);
            v88 = v22[1];
            ((void (*)(char *, int *))v88)(v86, v21);
            sub_100007A28(v32, &qword_100557D88);
            sub_100007A28(v36, &qword_100557D88);
            ((void (*)(uint64_t, int *))v88)(v29, v21);
            v85 = sub_100007A28(v82, &qword_100557D88);
            if ((v119 & 1) == 0)
              goto LABEL_95;
            goto LABEL_86;
          }
          sub_100007A28(v32, &qword_100557D88);
          sub_100007A28(v36, &qword_100557D88);
          ((void (*)(uint64_t, int *))v22[1])(v29, v21);
        }
        sub_100007A28(v82, &qword_100557D80);
        goto LABEL_95;
      }
      goto LABEL_77;
    }
LABEL_73:
    if (a5 >= 0)
      v79 = a8;
    else
      v79 = a5;
    swift_bridgeObjectRetain(a5);
    v80 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease(a5);
    if (v80)
      goto LABEL_49;
LABEL_77:
    swift_bridgeObjectRelease(a5);
LABEL_78:
    ((void (*)(uint64_t, uint64_t, uint64_t, int *))v22[7])(v36, 1, 1, v21);
    goto LABEL_79;
  }
  LOBYTE(v52) = 1;
LABEL_97:
  v96 = v124;
  swift_beginAccess(v124, v128, 1, 0);
  *v96 = v52;
LABEL_98:
  swift_getObjectType(v20, v49);
  sub_1001C0260((uint64_t)v20);
  v29 = v97;
  swift_beginAccess(v126, v132, 33, 0);
  swift_bridgeObjectRetain(v29);
  sub_100173A34(v98);
  v99 = swift_endAccess(v132);
  v101 = (id)_MTLogCategoryPlayback(v99, v100);
  if (!v101)
  {
LABEL_123:
    __break(1u);
    return;
  }
  v74 = v101;
  v36 = static os_log_type_t.default.getter();
  v102 = sub_10003F544(&qword_1005559A0);
  v76 = swift_allocObject(v102, 112, 7);
  *(_OWORD *)(v76 + 16) = xmmword_1003CA220;
  v103 = objc_msgSend(v20, "id");
  v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
  v106 = v105;

  *(_QWORD *)(v76 + 56) = &type metadata for String;
  *(_QWORD *)(v76 + 64) = sub_10003E198();
  *(_QWORD *)(v76 + 32) = v104;
  *(_QWORD *)(v76 + 40) = v106;
  if ((unint64_t)v29 >> 62)
    goto LABEL_108;
  v107 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    *(_QWORD *)&v108 = swift_bridgeObjectRelease(v29).n128_u64[0];
    *(_QWORD *)(v76 + 96) = &type metadata for Int;
    *(_QWORD *)(v76 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v76 + 72) = v107;
    os_log(_:dso:log:type:_:)("NetworkMediaManifest: Performed fetch for Podcast %@, added %d episodes", 71, 2, &_mh_execute_header, v74, v36, v76, v108);
    swift_unknownObjectRelease(v20);
LABEL_102:

    swift_bridgeObjectRelease(v76);
LABEL_103:
    v76 = a11;
    swift_beginAccess(a12 + 16, v132, 0, 0);
    v109 = *(_QWORD *)(*(_QWORD *)(a12 + 16) + 16);
    v74 = (void *)(a11 + v109);
    if (!__OFADD__(a11, v109))
      break;
    __break(1u);
LABEL_108:
    if (v29 < 0)
      v115 = v29;
    else
      v115 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v29);
    v107 = _CocoaArrayWrapper.endIndex.getter(v115);
    swift_bridgeObjectRelease(v29);
  }
  v110 = v126;
  swift_beginAccess(v126, v131, 0, 0);
  v111 = *v110;
  v112 = v124;
  swift_beginAccess(v124, v130, 0, 0);
  v113 = *v112;
  v114 = swift_bridgeObjectRetain(v111);
  sub_1001BA5F4(v74, a13, a14, a15, a16, a17, v111, v113, v114, v127, v125);
  swift_bridgeObjectRelease(v111);
}

void sub_1001BEB10(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  unint64_t v38;
  char **v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  Swift::Int v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  Class v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  Class isa;
  uint64_t v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  void *v79;
  id v80;
  id v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  Swift::Int v91;
  Swift::Int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  id v100;
  void *v101;
  double v102;
  NSArray v103;
  id v104;
  uint64_t v105;
  id v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char **v124;
  uint64_t v125;
  int64_t v126;

  v4 = v2;
  v5 = a1;
  v6 = (id)_MTLogCategoryPlayback(a1, a2);
  if (!v6)
  {
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
LABEL_219:
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    __break(1u);
    return;
  }
  v7 = v6;
  static os_log_type_t.default.getter();
  v8 = (char **)sub_10003F544(&qword_1005559A0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1003CA200;
  v10 = (unint64_t)v5 >> 62;
  if ((unint64_t)v5 >> 62)
    goto LABEL_154;
  v11 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    *(_QWORD *)(v9 + 56) = &type metadata for Int;
    *(_QWORD *)(v9 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v9 + 32) = v11;
    os_log(_:dso:log:type:_:)("NetworkMediaManifest: Got %d results from Media API", v123);

    *(_QWORD *)&v12 = swift_bridgeObjectRelease(v9).n128_u64[0];
    if (!v11)
      return;
    v126 = v11;
    v13 = (uint64_t)&selRef_isInternalInstall;
    v14 = objc_msgSend((id)v4, "items", v12);
    if (!v14)
      goto LABEL_212;
    v15 = v14;
    v7 = (void *)sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v7);

    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0)
        v118 = v16;
      else
        v118 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v17 = _CocoaArrayWrapper.endIndex.getter(v118);
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)&v18 = swift_bridgeObjectRelease(v16).n128_u64[0];
    if (v17)
    {
      v125 = v10;
      v3 = (uint64_t)&selRef_appControllerWithDelegate_;
      v19 = objc_msgSend((id)v4, "currentIndex", v18);
      v20 = objc_msgSend((id)v4, "items");
      if (!v20)
        goto LABEL_213;
      v21 = v20;
      v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v7);

      if ((unint64_t)v22 >> 62)
      {
        if (v22 < 0)
          v119 = v22;
        else
          v119 = v22 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v22);
        v23 = _CocoaArrayWrapper.endIndex.getter(v119);
        swift_bridgeObjectRelease(v22);
      }
      else
      {
        v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v22);
      if (v23 >= 1 && (unint64_t)v19 < v23)
      {
        v26 = (id)_MTLogCategoryPlayback(v24, v25);
        if (!v26)
          goto LABEL_214;
        v16 = (uint64_t)v26;
        static os_log_type_t.default.getter();
        v10 = swift_allocObject(v8, 72, 7);
        *(_OWORD *)(v10 + 16) = xmmword_1003CA200;
        v27 = objc_msgSend((id)v4, "items");
        if (!v27)
          goto LABEL_215;
        v28 = v27;
        v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v7);

        if (!((unint64_t)v3 >> 62))
        {
          v29 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_18;
        }
        goto LABEL_170;
      }
      goto LABEL_76;
    }
    v45 = *(_QWORD *)(v4 + OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount);
    v33 = __OFADD__(v45, 1);
    v46 = v45 + 1;
    if (!v33)
      break;
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    if (v3 < 0)
      v120 = v3;
    else
      v120 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v29 = _CocoaArrayWrapper.endIndex.getter(v120);
    swift_bridgeObjectRelease(v3);
LABEL_18:
    *(_QWORD *)&v30 = swift_bridgeObjectRelease(v3).n128_u64[0];
    v3 = (uint64_t)&selRef_appControllerWithDelegate_;
    v31 = (unint64_t)objc_msgSend((id)v4, "currentIndex", v30);
    if ((v31 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      if (v16 < 0)
        v121 = v16;
      else
        v121 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v17 = _CocoaArrayWrapper.endIndex.getter(v121);
      swift_bridgeObjectRelease(v16);
      if (v17)
      {
LABEL_81:
        v38 = v17 - 1;
        if (__OFSUB__(v17, 1))
          goto LABEL_201;
        if ((v16 & 0xC000000000000001) != 0)
          goto LABEL_202;
        if ((v38 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v38 < *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v72 = *(id *)(v16 + 8 * v38 + 32);
          goto LABEL_86;
        }
        __break(1u);
LABEL_205:
        __break(1u);
        goto LABEL_206;
      }
LABEL_182:
      swift_bridgeObjectRelease(v16);
      v74 = 0;
      v13 = 0;
      if (v10)
        goto LABEL_87;
LABEL_98:
      v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9)
        goto LABEL_99;
      goto LABEL_91;
    }
    v32 = v29 - v31;
    if (__OFSUB__(v29, v31))
      goto LABEL_175;
    v33 = __OFSUB__(v32, 1);
    v34 = v32 - 1;
    if (v33)
      goto LABEL_176;
    *(_QWORD *)(v10 + 56) = &type metadata for Int;
    *(_QWORD *)(v10 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v10 + 32) = v34;
    os_log(_:dso:log:type:_:)("NetworkMediaManifest: Removed %d stale items from end of queue", v123);

    v35 = (uint64_t)objc_msgSend((id)v4, "currentIndex", swift_bridgeObjectRelease(v10).n128_f64[0]);
    if (v35 < 0)
      goto LABEL_177;
    v16 = v35;
    v36 = objc_msgSend((id)v4, *(SEL *)(v13 + 1024));
    if (!v36)
      goto LABEL_216;
    v37 = v36;
    v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v7);

    v10 = v16 + 1;
    if (!__OFADD__(v16, 1))
    {
      if ((unint64_t)v22 >> 62)
      {
        if (v22 < 0)
          v122 = v22;
        else
          v122 = v22 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v22);
        v3 = _CocoaArrayWrapper.endIndex.getter(v122);
        swift_bridgeObjectRelease(v22);
        if (v3 < 0)
          goto LABEL_222;
        swift_bridgeObjectRetain(v22);
        v16 = _CocoaArrayWrapper.endIndex.getter(v122);
        swift_bridgeObjectRelease(v22);
        if (v16 < v10)
        {
LABEL_192:
          __break(1u);
          goto LABEL_193;
        }
      }
      else
      {
        v16 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v16 < v10)
          goto LABEL_192;
      }
      if (v10 < 0)
        goto LABEL_194;
      v39 = v8;
      if ((v22 & 0xC000000000000001) != 0)
      {
        v40 = 0;
        do
        {
          v41 = v40 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v40);
          v40 = v41;
        }
        while (v10 != v41);
      }
      if ((unint64_t)v22 >> 62)
      {
        if (v22 < 0)
          v59 = v22;
        else
          v59 = v22 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v22);
        v43 = _CocoaArrayWrapper.subscript.getter(0, v10, v59);
        v123 = v60;
        v42 = v61;
        v44 = v62;
        swift_bridgeObjectRelease_n(v22, 2);
      }
      else
      {
        v42 = 0;
        v43 = v22 & 0xFFFFFFFFFFFFFF8;
        v123 = (v22 & 0xFFFFFFFFFFFFFF8) + 32;
        v44 = (2 * v10) | 1;
      }
      v8 = v39;
      v13 = 0x100537000;
      if ((v44 & 1) == 0)
      {
LABEL_68:
        v22 = (uint64_t)sub_1001F9D20(v43, v123, v42, v44);
LABEL_75:
        swift_unknownObjectRelease(v43);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_release(v22);
        objc_msgSend((id)v4, "setItems:", isa);

        v3 = (uint64_t)&selRef_appControllerWithDelegate_;
LABEL_76:
        v124 = v8;
        v16 = (uint64_t)objc_msgSend((id)v4, "currentIndex", v123);
        v69 = NSNotFound.getter();
        v8 = &selRef_dateLabelDescriptionForEpisode_download_;
        if ((v69 & 0x8000000000000000) == 0 && v16 == v69)
        {
          v70 = objc_msgSend((id)v4, *(SEL *)(v13 + 1024));
          v10 = v125;
          if (!v70)
            goto LABEL_217;
          v71 = v70;
          v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v70, v7);

          if (!((unint64_t)v16 >> 62))
          {
            v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v17)
              goto LABEL_81;
            goto LABEL_182;
          }
          goto LABEL_178;
        }
        v76 = (uint64_t)objc_msgSend((id)v4, "currentIndex");
        if ((v76 & 0x8000000000000000) == 0)
        {
          v16 = v76;
          v77 = objc_msgSend((id)v4, *(SEL *)(v13 + 1024));
          if (!v77)
            goto LABEL_218;
          v10 = (uint64_t)v77;
          v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v77, v7);

          if ((v22 & 0xC000000000000001) != 0)
            goto LABEL_186;
          if ((unint64_t)v16 < *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v78 = *(id *)(v22 + 8 * v16 + 32);
            goto LABEL_97;
          }
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
          goto LABEL_200;
        }
        __break(1u);
        goto LABEL_185;
      }
      v63 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v64 = swift_unknownObjectRetain_n(v43, 2);
      v65 = (_QWORD *)swift_dynamicCastClass(v64, v63);
      if (!v65)
      {
        swift_unknownObjectRelease(v43);
        v65 = _swiftEmptyArrayStorage;
      }
      v66 = v65[2];
      v67 = swift_release(v65);
      if (__OFSUB__(v44 >> 1, v42))
      {
        __break(1u);
      }
      else
      {
        v67 = v43;
        if (v66 == (v44 >> 1) - v42)
        {
          v22 = swift_dynamicCastClass(v43, v63);
          v13 = (uint64_t)&selRef_isInternalInstall;
          if (!v22)
          {
            swift_unknownObjectRelease(v43);
            v22 = (uint64_t)_swiftEmptyArrayStorage;
          }
          goto LABEL_75;
        }
      }
      swift_unknownObjectRelease(v67);
      v13 = 0x100537000;
      goto LABEL_68;
    }
LABEL_185:
    __break(1u);
LABEL_186:
    v78 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v22);
LABEL_97:
    v79 = v78;
    v74 = objc_msgSend(v78, v8[339], swift_bridgeObjectRelease(v22).n128_f64[0]);

    v13 = 1;
    if (!v125)
      goto LABEL_98;
LABEL_87:
    while (1)
    {
      v75 = v5 < 0 ? v5 : v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v9 = _CocoaArrayWrapper.endIndex.getter(v75);
      swift_bridgeObjectRelease(v5);
      if (v9)
        break;
LABEL_91:
      v10 = 0;
LABEL_111:
      v16 = v10 + 1;
      v8 = v124;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_167;
      }
      if (v16 >= v126)
        return;
      v84 = *(_QWORD *)(v4 + OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount);
      v33 = __OFADD__(v16, v84);
      v85 = v16 + v84;
      if (v33)
        goto LABEL_195;
      v86 = (void *)v4;
      if (v126 >= v85)
        v4 = v85;
      else
        v4 = v126;
      v10 = v125;
      if (v4 < v16)
        goto LABEL_196;
      if (v125)
      {
        if (v5 < 0)
          v88 = v5;
        else
          v88 = v5 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v5);
        v87 = _CocoaArrayWrapper.endIndex.getter(v88);
        swift_bridgeObjectRelease(v5);
      }
      else
      {
        v87 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v87 < v16)
        goto LABEL_197;
      if (v16 < 0)
        goto LABEL_198;
      if (v125)
      {
        if (v5 < 0)
          v90 = v5;
        else
          v90 = v5 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v5);
        v89 = _CocoaArrayWrapper.endIndex.getter(v90);
        swift_bridgeObjectRelease(v5);
      }
      else
      {
        v89 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v89 < v4)
        goto LABEL_199;
      if ((v5 & 0xC000000000000001) != 0 && v16 != v4)
      {
        if (v16 >= (unint64_t)v4)
        {
          __break(1u);
          goto LABEL_211;
        }
        v91 = v16;
        do
        {
          v92 = v91 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v91);
          v91 = v92;
        }
        while (v4 != v92);
      }
      if (v125)
      {
        if (v5 < 0)
          v96 = v5;
        else
          v96 = v5 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v5);
        v93 = _CocoaArrayWrapper.subscript.getter(v16, v4, v96);
        v94 = v97;
        v16 = v98;
        v95 = v99;
        swift_bridgeObjectRelease(v5);
      }
      else
      {
        v93 = v5 & 0xFFFFFFFFFFFFFF8;
        v94 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
        v95 = (2 * v4) | 1;
        swift_bridgeObjectRetain(v5);
      }
      swift_unknownObjectRetain(v93);
      v100 = objc_msgSend(v86, "items");
      if (!v100)
        goto LABEL_219;
      v101 = v100;
      v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v100, v7);

      sub_1001737A8(v93, v94, v16, v95);
      v10 = v3;
      if (v3)
      {
        v103.super.isa = Array._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)&v102 = swift_bridgeObjectRelease(v3).n128_u64[0];
      }
      else
      {
        v103.super.isa = 0;
      }
      objc_msgSend(v86, "setItems:", v103.super.isa, v102);

      objc_msgSend(v86, "postLoadedAdditionalItemsNotification");
      v104 = objc_msgSend(v86, "postManifestDidChangeNotification");
      v106 = (id)_MTLogCategoryPlayback(v104, v105);
      if (!v106)
        goto LABEL_220;
      v5 = (uint64_t)v106;
      v7 = (void *)static os_log_type_t.default.getter();
      v38 = swift_allocObject(v124, 72, 7);
      *(_OWORD *)(v38 + 16) = xmmword_1003CA200;
      v33 = __OFSUB__(v95 >> 1, v16);
      v4 = (v95 >> 1) - v16;
      if (!v33)
      {
        v107 = v38;
        *(_QWORD *)(v38 + 56) = &type metadata for Int;
        *(_QWORD *)(v38 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v38 + 32) = v4;
        os_log(_:dso:log:type:_:)("NetworkMediaManifest: Added %d items to the end of the queue", v123);

        swift_bridgeObjectRelease(v107);
        v110 = (id)_MTLogCategoryPlayback(v108, v109);
        if (!v110)
          goto LABEL_221;
        v111 = v110;
        v112 = static os_log_type_t.default.getter();
        v113 = swift_allocObject(v124, 72, 7);
        *(_OWORD *)(v113 + 16) = xmmword_1003CA200;
        v114 = sub_1001BF9E0();
        *(_QWORD *)(v113 + 56) = sub_10003F544(&qword_100553928);
        *(_QWORD *)(v113 + 64) = sub_10002F9C8(&qword_100557D78, &qword_100553928, (uint64_t)&protocol conformance descriptor for [A]);
        *(_QWORD *)(v113 + 32) = v114;
        os_log(_:dso:log:type:_:)("NetworkMediaManifest: Queue is now: %@", 38, 2, &_mh_execute_header, v111, v112, v113);
        swift_unknownObjectRelease(v93);

        swift_bridgeObjectRelease(v113);
        return;
      }
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v16);
LABEL_86:
      v73 = v72;
      v74 = objc_msgSend(v72, v8[339], swift_bridgeObjectRelease(v16).n128_f64[0]);

      v13 = 1;
      if (!v10)
        goto LABEL_98;
    }
LABEL_99:
    v123 = v4;
    v10 = 0;
    v4 = v5 & 0xC000000000000001;
    while (1)
    {
      if (v4)
        v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v5);
      else
        v80 = *(id *)(v5 + 8 * v10 + 32);
      v3 = (uint64_t)v80;
      v81 = objc_msgSend(v80, v8[339], v123);

      if (v81 == v74)
        v82 = v13;
      else
        v82 = 0;
      if ((v82 & 1) != 0)
        goto LABEL_110;
      v83 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      ++v10;
      if (v83 == v9)
      {
        v10 = 0;
LABEL_110:
        v4 = v123;
        goto LABEL_111;
      }
    }
    __break(1u);
LABEL_154:
    v115 = v4;
    if (v5 < 0)
      v116 = v5;
    else
      v116 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v117 = v116;
    v4 = v115;
    v11 = _CocoaArrayWrapper.endIndex.getter(v117);
    swift_bridgeObjectRelease(v5);
  }
  v3 = v4;
  if (v46 >= v126)
    v4 = v126;
  else
    v4 = v46;
  if (v4 < 0)
    goto LABEL_168;
  if (v10)
  {
    if (v5 < 0)
      v8 = (char **)v5;
    else
      v8 = (char **)(v5 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(v5);
    v16 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v5);
    if (v16 < 0)
      goto LABEL_205;
    swift_bridgeObjectRetain(v5);
    v8 = (char **)_CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(char ***)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((uint64_t)v8 < v4)
    goto LABEL_169;
  if ((v5 & 0xC000000000000001) != 0 && v4)
  {
    v47 = 0;
    do
    {
      v48 = v47 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v47);
      v47 = v48;
    }
    while (v4 != v48);
  }
  if (!v10)
  {
    v8 = (char **)(v5 & 0xFFFFFFFFFFFFFF8);
    v16 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
    v17 = (2 * v4) | 1;
    swift_bridgeObjectRetain(v5);
    goto LABEL_56;
  }
  if (v5 < 0)
    v49 = v5;
  else
    v49 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = (char **)_CocoaArrayWrapper.subscript.getter(0, v4, v49);
  v16 = v50;
  v10 = v51;
  v17 = v52;
  swift_bridgeObjectRelease(v5);
  if ((v17 & 1) == 0)
  {
LABEL_55:
    v53 = sub_1001F9D20((uint64_t)v8, v16, v10, v17);
    goto LABEL_62;
  }
LABEL_56:
  v54 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v55 = swift_unknownObjectRetain_n(v8, 2);
  v56 = (_QWORD *)swift_dynamicCastClass(v55, v54);
  if (!v56)
  {
    swift_unknownObjectRelease(v8);
    v56 = _swiftEmptyArrayStorage;
  }
  v57 = v56[2];
  v38 = swift_release(v56);
  if (__OFSUB__(v17 >> 1, v10))
  {
LABEL_206:
    __break(1u);
    goto LABEL_207;
  }
  v38 = (unint64_t)v8;
  if (v57 != (v17 >> 1) - v10)
  {
LABEL_207:
    swift_unknownObjectRelease(v38);
    goto LABEL_55;
  }
  v53 = (_QWORD *)swift_dynamicCastClass(v8, v54);
  if (!v53)
  {
    swift_unknownObjectRelease(v8);
    v53 = _swiftEmptyArrayStorage;
  }
LABEL_62:
  swift_unknownObjectRelease(v8);
  v58 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v53);
  objc_msgSend((id)v3, "setItems:", v58);

}

unint64_t sub_1001BF8F8()
{
  void *v0;
  id v1;
  uint64_t v2;
  _BYTE *v3;
  unint64_t result;
  int64_t v6;

  v1 = objc_msgSend(v0, "currentIndex");
  v2 = (uint64_t)objc_msgSend(v0, "count");
  v3 = objc_msgSend(v0, "count");
  if (v2 < 1 || (unint64_t)v1 >= v2)
    return (unint64_t)v3;
  result = (unint64_t)objc_msgSend(v0, "currentIndex");
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v6 = (int64_t)&v3[-result];
  if (__OFSUB__(v3, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = (_BYTE *)(v6 - 1);
  if (!__OFSUB__(v6, 1))
    return (unint64_t)v3;
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_1001BF9E0()
{
  void *v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = objc_msgSend(v0, "items");
  if (!result)
    goto LABEL_19;
  v2 = result;
  v3 = sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v12 = v4;
    else
      v12 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v4);
    if (v5)
      goto LABEL_4;
LABEL_17:
    swift_bridgeObjectRelease(v4);
    return _swiftEmptyArrayStorage;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    goto LABEL_17;
LABEL_4:
  result = (_QWORD *)sub_10017AF94(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      else
        v7 = *(id *)(v4 + 8 * i + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, "episodeStoreId");

      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        sub_10017AF94(v10 > 1, v11 + 1, 1);
      _swiftEmptyArrayStorage[2] = v11 + 1;
      _swiftEmptyArrayStorage[v11 + 4] = v9;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

id sub_1001BFBE4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NetworkMediaManifest(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1001BFC98(void *a1, uint64_t a2, uint64_t a3, void (*a4)(id))
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSString v16;
  void *v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;

  if (a1)
  {
    v29 = a1;
    v5 = objc_msgSend(v29, "uuid");
    if (v5)
    {
      v6 = v5;
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v9 = v8;

      v10 = sub_10003F544(&qword_1005559A0);
      v11 = swift_allocObject(v10, 72, 7);
      *(_OWORD *)(v11 + 16) = xmmword_1003CA200;
      *(_QWORD *)(v11 + 56) = &type metadata for String;
      *(_QWORD *)(v11 + 64) = sub_10003E198();
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v9;
      sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      swift_bridgeObjectRetain(v9);
      v13 = (void *)static OS_os_log.default.getter(v12);
      v14 = static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)("NetworkMediaManifest: Returning MTEpisodeManifest with UUID %{public}s.", 71, 2, &_mh_execute_header, v13, v14, v11);
      swift_bridgeObjectRelease(v11);

      v15 = objc_allocWithZone((Class)MTEpisodeManifest);
      v16 = String._bridgeToObjectiveC()();
      v28 = objc_msgSend(v15, "initWithEpisodeUuid:", v16, swift_bridgeObjectRelease(v9).n128_f64[0]);

      a4(v28);
      v17 = v28;
    }
    else
    {
      v25 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
      v26 = (void *)static OS_os_log.default.getter(v25);
      v27 = static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)("NetworkMediaManifest: No UUID found on returned episode, returning nil.", 71, 2, &_mh_execute_header, v26, v27, _swiftEmptyArrayStorage);

      a4(0);
      v17 = v29;
    }

  }
  else
  {
    v20 = sub_10003F544(&qword_1005559A0);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_10003E198();
    *(_QWORD *)(v21 + 32) = a2;
    *(_QWORD *)(v21 + 40) = a3;
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    swift_bridgeObjectRetain(a3);
    v23 = (void *)static OS_os_log.default.getter(v22);
    v24 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("NetworkMediaManifest: No episode found with GUID: %{public}s, returning nil.", 76, 2, &_mh_execute_header, v23, v24, v21);
    swift_bridgeObjectRelease(v21);

    a4(0);
  }
}

uint64_t sub_1001BFF9C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1001BFFC8()
{
  uint64_t *v0;

  sub_1001B9E1C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001BFFD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1001BFFE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100557D70;
  if (!qword_100557D70)
  {
    v1 = sub_100005EC8(255, &qword_1005532D0, NSError_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100557D70);
  }
  return result;
}

void sub_1001C003C(id a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for ServerPodcast(0);
  v3 = swift_dynamicCastClass(a1, v2);
  if (v3)
  {
    v4 = v3;
    v5 = swift_unknownObjectRetain(a1);
    v6 = dispatch thunk of ServerPodcast.episodes.getter(v5);
    if (v6)
    {
      v7 = v6;
      a1 = a1;
      sub_1001C0494(v7, v4);
      swift_bridgeObjectRelease(v7);

    }
    goto LABEL_4;
  }
  v8 = type metadata accessor for ServerPodcastStation();
  if (swift_dynamicCastClass(a1, v8))
  {
    v9 = swift_unknownObjectRetain(a1);
    v10 = dispatch thunk of ServerPodcastStation.episodes.getter(v9);
    if (!v10)
    {
LABEL_4:

      return;
    }
    v11 = v10;
    if ((unint64_t)v10 >> 62)
    {
      if (v10 >= 0)
        v21 = v10 & 0xFFFFFFFFFFFFFF8;
      else
        v21 = v10;
      swift_bridgeObjectRetain(v10);
      v12 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (v12)
        goto LABEL_9;
    }
    else
    {
      v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v10);
      if (v12)
      {
LABEL_9:
        if (v12 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v12; ++i)
        {
          if ((v11 & 0xC000000000000001) != 0)
            v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
          else
            v15 = *(id *)(v11 + 8 * i + 32);
          v16 = v15;
          v17 = objc_msgSend(objc_allocWithZone((Class)MTPlayerItem), "initWithPodcastEpisode:podcast:", v15, 0);

          if (v17)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
            v20 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
            v19 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v20 >= v19 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
            specialized Array._endMutation()(v14);
          }
        }
      }
    }
    swift_bridgeObjectRelease(v11);

    swift_bridgeObjectRelease(v11);
  }
}

void sub_1001C0260(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for ServerPodcast(0);
  v3 = swift_dynamicCastClass(a1, v2);
  if (v3)
  {
    v4 = v3;
    v5 = swift_unknownObjectRetain(a1);
    v6 = dispatch thunk of ServerPodcast.episodes.getter(v5);
    if (v6)
    {
      v7 = v6;
      swift_unknownObjectRetain(a1);
      sub_1001C0494(v7, v4);
      swift_bridgeObjectRelease(v7);
      swift_unknownObjectRelease_n(a1, 2);
      return;
    }
    goto LABEL_18;
  }
  v8 = type metadata accessor for ServerPodcastStation(0);
  if (swift_dynamicCastClass(a1, v8))
  {
    v9 = swift_unknownObjectRetain(a1);
    v10 = dispatch thunk of ServerPodcastStation.episodes.getter(v9);
    if (!v10)
    {
LABEL_18:
      swift_unknownObjectRelease(a1);
      return;
    }
    v11 = v10;
    if ((unint64_t)v10 >> 62)
    {
      if (v10 >= 0)
        v21 = v10 & 0xFFFFFFFFFFFFFF8;
      else
        v21 = v10;
      swift_bridgeObjectRetain(v10);
      v12 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (v12)
        goto LABEL_8;
    }
    else
    {
      v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v10);
      if (v12)
      {
LABEL_8:
        if (v12 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v12; ++i)
        {
          if ((v11 & 0xC000000000000001) != 0)
            v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
          else
            v15 = *(id *)(v11 + 8 * i + 32);
          v16 = v15;
          v17 = objc_msgSend(objc_allocWithZone((Class)MTPlayerItem), "initWithPodcastEpisode:podcast:", v15, 0);

          if (v17)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
            v20 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
            v19 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v20 >= v19 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
            specialized Array._endMutation()(v14);
          }
        }
      }
    }
    swift_bridgeObjectRelease(v11);
    swift_unknownObjectRelease(a1);
    swift_bridgeObjectRelease(v11);
  }
}

void *sub_1001C0494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    v5 = 4;
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v8 = v7;
      v9 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v10 = objc_msgSend(objc_allocWithZone((Class)MTPlayerItem), "initWithPodcastEpisode:podcast:", v7, a2);

      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v12 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v11 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v12 >= v11 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
        specialized Array._endMutation()(v6);
      }
      ++v5;
      if (v9 == v4)
        goto LABEL_19;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_19:
  swift_bridgeObjectRelease(a1);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1001C061C(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  _QWORD *v24;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)&v2[OBJC_IVAR___MTNetworkMediaManifest_manifestWorkQueue];
  v13 = (_QWORD *)swift_allocObject(&unk_1004B3018, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1001C0F78;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B3030;
  v14 = _Block_copy(aBlock);
  v15 = v2;
  v16 = sub_10002CA20(a1, a2);
  static DispatchQoS.unspecified.getter(v16);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10003F544((uint64_t *)&unk_10055B200);
  v19 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v24);
}

uint64_t sub_1001C081C(void (*a1)(__n128), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD **v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _BYTE v35[24];

  v5 = type metadata accessor for MediaRequest.ContentType(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((*(_BYTE *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_refreshInProgress) & 1) != 0)
  {
    if (a1)
    {
      v9 = swift_allocObject(&unk_1004B30B8, 32, 7);
      *(_QWORD *)(v9 + 16) = a1;
      *(_QWORD *)(v9 + 24) = a2;
      v10 = sub_100029B3C;
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    v23 = (_QWORD **)(v2 + OBJC_IVAR___MTNetworkMediaManifest_inProgressRefreshHandlers);
    swift_beginAccess(v23, v35, 33, 0);
    v24 = *v23;
    sub_10002CA20((uint64_t)a1, a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
    *v23 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v24 = sub_10027B868(0, v24[2] + 1, 1, v24);
      *v23 = v24;
    }
    v27 = v24[2];
    v26 = v24[3];
    if (v27 >= v26 >> 1)
    {
      v24 = sub_10027B868((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
      *v23 = v24;
    }
    v24[2] = v27 + 1;
    v28 = &v24[2 * v27];
    v28[4] = v10;
    v28[5] = v9;
    return swift_endAccess(v35);
  }
  else
  {
    *(_BYTE *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_refreshInProgress) = 1;
    v11 = swift_allocObject(&unk_1004B3068, 24, 7);
    swift_unknownObjectWeakInit(v11 + 16, v2);
    v12 = (_QWORD *)swift_allocObject(&unk_1004B3090, 40, 7);
    v12[2] = v11;
    v12[3] = a1;
    v12[4] = a2;
    swift_retain();
    sub_10002CA20((uint64_t)a1, a2);
    v13 = sub_1001BF8F8();
    v14 = OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount;
    if (v13 >= *(_QWORD *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount))
    {
      sub_1001BDD6C(0, 0, v11, a1);
      swift_release(v11);
      return swift_release(v12);
    }
    else
    {
      swift_release(v11);
      v15 = *(_QWORD *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_initialIds);
      swift_getObjectType(v2, v16);
      if (v15)
      {
        v17 = *(void **)(v2 + OBJC_IVAR___MTNetworkMediaManifest_mediaRequestController);
        v18 = v2 + OBJC_IVAR___MTNetworkMediaManifest_contentType;
        swift_beginAccess(v2 + OBJC_IVAR___MTNetworkMediaManifest_contentType, v35, 0, 0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, v18, v5);
        v19 = *(_QWORD *)(v2 + v14);
        v20 = *(_QWORD *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_episodeFetchLimit);
        swift_bridgeObjectRetain(v15);
        v21 = v17;
        swift_retain();
        sub_1001BA5F4(0, v15, v21, (uint64_t)v8, v19, v20, (uint64_t)_swiftEmptyArrayStorage, 0, (uint64_t (*)(_QWORD, _QWORD))sub_1001C0FF8, (uint64_t)v12);
        swift_bridgeObjectRelease(v15);

      }
      else
      {
        v29 = *(void **)(v2 + OBJC_IVAR___MTNetworkMediaManifest_mediaRequestController);
        v30 = v2 + OBJC_IVAR___MTNetworkMediaManifest_contentType;
        swift_beginAccess(v2 + OBJC_IVAR___MTNetworkMediaManifest_contentType, v35, 0, 0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, v30, v5);
        v31 = *(_QWORD *)(v2 + v14);
        v32 = *(_QWORD *)(v2 + OBJC_IVAR___MTNetworkMediaManifest_episodeFetchLimit);
        swift_retain();
        v33 = v29;
        sub_1001BA5F4(0, (uint64_t)_swiftEmptyArrayStorage, v33, (uint64_t)v8, v31, v32, (uint64_t)_swiftEmptyArrayStorage, 0, (uint64_t (*)(_QWORD, _QWORD))sub_1001C0FF8, (uint64_t)v12);

      }
      swift_release_n(v12, 2);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

double sub_1001C0BEC(void *a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  id v5;
  void *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  double result;
  _QWORD *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = swift_allocObject(&unk_1004B2FC8, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v5 = a1;
  v6 = _Block_copy(a2);
  v7 = static OS_os_log.default.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v31 = v4;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v33 = v10;
    *(_DWORD *)v9 = 136446210;
    v11 = objc_msgSend(v5, "itemIdentifier");
    if (v11)
    {
      v12 = v11;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;

    }
    else
    {
      v15 = 0xE500000000000000;
      v13 = 0x3E4C494E3CLL;
    }
    v32 = sub_10003D274(v13, v15, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v9 + 4, v9 + 12);

    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "NetworkMediaManifest: Attempting to restore activity with identifier: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v4 = v31;
  }
  else
  {

  }
  v16 = objc_msgSend(v5, "itemIdentifier");
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    v21 = objc_msgSend(v5, "containerIdentifier");
    if (v21)
    {
      v22 = v21;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v25 = v24;

    }
    else
    {
      v23 = 0;
      v25 = 0;
    }
    type metadata accessor for CoreDataFetcher(0);
    v29 = (_QWORD *)swift_allocObject(&unk_1004B2FF0, 48, 7);
    v29[2] = v18;
    v29[3] = v20;
    v29[4] = sub_1001C0F18;
    v29[5] = v4;
    swift_bridgeObjectRetain(v20);
    v30 = swift_retain();
    static CoreDataFetcher.fetchEpisode(for:on:completion:)(v18, v20, v23, v25, sub_1001C0F54, v29, v30);
    swift_release(v4);
    swift_bridgeObjectRelease(v20);
    swift_release(v29);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v25).n128_u64[0];
  }
  else
  {
    v26 = (void *)static OS_os_log.default.getter(0);
    v27 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("NetworkMediaManifest: No GUID found, retuning nil.", 50, 2, &_mh_execute_header, v26, v27, _swiftEmptyArrayStorage);

    a2[2](a2, 0);
    swift_release(v4);
  }
  return result;
}

uint64_t sub_1001C0F18()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1001C0F28()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1001C0F54(void *a1)
{
  uint64_t v1;

  sub_1001BFC98(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(id))(v1 + 32));
}

uint64_t sub_1001C0F60(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100032A84(result, a2);
  return result;
}

uint64_t sub_1001C0F78()
{
  uint64_t v0;

  return sub_1001C081C(*(void (**)(__n128))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1001C0FA0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C0FC4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_1001C0FF8(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1001BDD6C(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(__n128))(v2 + 24));
}

uint64_t sub_1001C1004()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C1028()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C104C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001C105C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for MediaRequest.ContentType(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  v5 = (v3 + 88) & ~v3;
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  return swift_deallocObject(v0, ((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_1001C1114(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v11 = *(_QWORD *)(type metadata accessor for MediaRequest.ContentType(0) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = (*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001BDEB8(a1, a2, a3, a4, a5, *(void (**)(_QWORD, _QWORD, __n128))(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(uint64_t **)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), v5 + v12, *(_QWORD *)(v5 + v13), *(_QWORD *)(v5 + ((v13 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1001C11D0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C11F4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C1224()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001C1258()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 24);
  if (v1)
    return v1();
  return result;
}

void sub_1001C1280(uint64_t a1)
{
  uint64_t v1;

  sub_1001BC488(a1, *(_QWORD *)(v1 + 16));
}

uint64_t CategoryIngester.__deallocating_deinit()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_1001C12B8(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  return sub_1001C1FCC(a1, a2, a3, a4, a5);
}

uint64_t sub_1001C12D8(uint64_t a1, char a2, __int16 a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  switch(a2)
  {
    case 0:
      if ((a3 & 0x100) != 0)
      {
        if (a4)
        {
          v10 = sub_10003F544(&qword_100557E98);
          v11 = swift_allocObject(v10, 48, 7);
          v7 = 0;
          *(_OWORD *)(v11 + 16) = xmmword_1003CA200;
          *(_QWORD *)(v11 + 32) = a1;
          *(_BYTE *)(v11 + 40) = 0;
        }
        else
        {
          v7 = 0;
        }
      }
      else if (a4)
      {
        v5 = sub_10003F544(&qword_100557E98);
        v6 = swift_allocObject(v5, 64, 7);
        v7 = 0;
        *(_OWORD *)(v6 + 16) = xmmword_1003CA220;
        *(_QWORD *)(v6 + 32) = a1;
        *(_BYTE *)(v6 + 40) = 0;
        *(_QWORD *)(v6 + 48) = 0;
        *(_BYTE *)(v6 + 56) = 2;
      }
      else
      {
        v7 = 0;
      }
      break;
    case 2:
      goto LABEL_6;
    case 3:
      if ((a3 & 1) != 0)
      {
        if ((a3 & 0x100) != 0)
        {
          if (a4 != 1)
          {
            v15 = sub_10003F544(&qword_100557E98);
            v16 = swift_allocObject(v15, 48, 7);
            *(_OWORD *)(v16 + 16) = xmmword_1003CA200;
            *(_QWORD *)(v16 + 32) = a1;
            *(_BYTE *)(v16 + 40) = 1;
          }
LABEL_28:
          v7 = 3;
        }
        else
        {
          v7 = 2;
          if (a4 != 1)
          {
            v13 = sub_10003F544(&qword_100557E98);
            v14 = swift_allocObject(v13, 64, 7);
            *(_OWORD *)(v14 + 16) = xmmword_1003CA220;
            *(_QWORD *)(v14 + 32) = 1;
            *(_BYTE *)(v14 + 40) = 2;
            *(_QWORD *)(v14 + 48) = a1;
            *(_BYTE *)(v14 + 56) = 1;
          }
        }
      }
      else
      {
LABEL_6:
        v7 = 1;
        if (a4 != 1)
        {
          v8 = sub_10003F544(&qword_100557E98);
          v9 = swift_allocObject(v8, 48, 7);
          *(_OWORD *)(v9 + 16) = xmmword_1003CA200;
          *(_QWORD *)(v9 + 32) = a1;
          *(_BYTE *)(v9 + 40) = 1;
        }
      }
      break;
    case 4:
      switch(a1)
      {
        case 1:
        case 2:
          if ((a3 & 1) == 0)
            goto LABEL_19;
          if ((a3 & 0x100) != 0)
            goto LABEL_28;
          v7 = 2;
          break;
        case 5:
        case 6:
          if ((a3 & 0x100) == 0)
            goto LABEL_19;
          return 1;
        default:
          goto LABEL_19;
      }
      break;
    default:
LABEL_19:
      v7 = 1;
      break;
  }
  return v7;
}

uint64_t sub_1001C1538(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v49 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v49 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v49 - v20;
  if (!a2)
  {
    if (!a4)
      return 0;
    v23 = sub_10003F544(&qword_100557E98);
    v24 = swift_allocObject(v23, 80, 7);
    v22 = 0;
    *(_OWORD *)(v24 + 16) = xmmword_1003CA240;
    *(_QWORD *)(v24 + 32) = 0;
    *(_BYTE *)(v24 + 40) = 2;
    *(_QWORD *)(v24 + 48) = a1;
    *(_BYTE *)(v24 + 56) = 0;
    goto LABEL_21;
  }
  if (a2 != 2)
  {
    if (a2 != 4)
      return 2;
    v22 = 2;
    switch(a1)
    {
      case 0:
        if ((a3 & 1) != 0)
          goto LABEL_13;
        return 1;
      case 4:
        return 3;
      case 6:
        return v22;
      case 7:
        if ((a3 & 1) == 0)
          return 2;
        return 3;
      case 8:
        if (a4 == 2)
          return v22;
        v41 = static Logger.podcastsStatesCoordination.getter(v19);
        v42 = Logger.logObject.getter(v41);
        v43 = static os_log_type_t.error.getter(v42);
        if (os_log_type_enabled(v42, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc(12, -1);
          v45 = swift_slowAlloc(32, -1);
          v50 = v45;
          *(_DWORD *)v44 = 136315138;
          v46 = PodcastsStateChangeOrigin.description.getter(a4);
          v48 = v47;
          v49 = sub_10003D274(v46, v47, &v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v44 + 4, v44 + 12);
          swift_bridgeObjectRelease(v48);
          swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1, -1);
          swift_slowDealloc(v44, -1, -1);

          (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
          return 2;
        }

        (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
        break;
      case 9:
        v37 = static Logger.podcastsStatesCoordination.getter(v19);
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.error.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v40 = 0;
          swift_slowDealloc(v40, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        return v22;
      default:
        return 2;
    }
    return v22;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 == 1)
    {
LABEL_13:
      v25 = static Logger.podcastsStatesCoordination.getter(v19);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.error.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
      return 1;
    }
    v31 = static Logger.podcastsStatesCoordination.getter(v19);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v21, v8);
    v35 = sub_10003F544(&qword_100557E98);
    v24 = swift_allocObject(v35, 80, 7);
    *(_OWORD *)(v24 + 16) = xmmword_1003CA240;
    *(_QWORD *)(v24 + 32) = 0;
    *(_BYTE *)(v24 + 40) = 2;
    *(_QWORD *)(v24 + 48) = a1;
    v22 = 1;
    *(_BYTE *)(v24 + 56) = 1;
LABEL_21:
    *(_QWORD *)(v24 + 64) = 4;
    *(_BYTE *)(v24 + 72) = 2;
    return v22;
  }
  v22 = 1;
  if (a4 != 1)
  {
    v29 = sub_10003F544(&qword_100557E98);
    v30 = swift_allocObject(v29, 64, 7);
    *(_OWORD *)(v30 + 16) = xmmword_1003CA220;
    *(_QWORD *)(v30 + 32) = a1;
    *(_BYTE *)(v30 + 40) = 1;
    *(_QWORD *)(v30 + 48) = 4;
    *(_BYTE *)(v30 + 56) = 2;
  }
  return v22;
}

uint64_t sub_1001C1AD8(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v30 - v14;
  if (a2)
  {
    if (a2 == 2)
    {
      v16 = 1;
      if (a4 != 1)
      {
        v19 = sub_10003F544(&qword_100557E98);
        v20 = swift_allocObject(v19, 48, 7);
        *(_OWORD *)(v20 + 16) = xmmword_1003CA200;
        *(_QWORD *)(v20 + 32) = a1;
        *(_BYTE *)(v20 + 40) = 1;
      }
    }
    else if (a2 == 4)
    {
      v16 = 1;
      switch(a1)
      {
        case 0:
          return v16;
        case 3:
          v16 = 2;
          break;
        case 5:
          v22 = static Logger.podcastsStatesCoordination.getter(v13);
          v23 = Logger.logObject.getter(v22);
          v24 = static os_log_type_t.error.getter(v23);
          if (os_log_type_enabled(v23, v24))
          {
            v25 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v25 = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, v24, "Somehow we end up with an Implicit Follow that does NOT have any play state, that doesn't make sense.", v25, 2u);
            swift_slowDealloc(v25, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
          v16 = 2;
          break;
        case 6:
          if ((a3 & 1) != 0)
          {
            v16 = 2;
          }
          else
          {
            v26 = static Logger.podcastsStatesCoordination.getter(v13);
            v27 = Logger.logObject.getter(v26);
            v28 = static os_log_type_t.error.getter(v27);
            if (os_log_type_enabled(v27, v28))
            {
              v29 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v29 = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, v28, "The show has play state but for some reason it's in Store state. This doesn't make any sense, with playState a show should be at least Implicitly Followed. Figure out what's going on.", v29, 2u);
              swift_slowDealloc(v29, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
            v16 = 2;
          }
          break;
        default:
          return 3;
      }
    }
    else
    {
      return 3;
    }
  }
  else if (a4)
  {
    v17 = sub_10003F544(&qword_100557E98);
    v18 = swift_allocObject(v17, 48, 7);
    v16 = 0;
    *(_OWORD *)(v18 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v18 + 32) = a1;
    *(_BYTE *)(v18 + 40) = 0;
  }
  else
  {
    return 0;
  }
  return v16;
}

uint64_t sub_1001C1DCC(uint64_t a1, char a2, __int16 a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 == 3 || a2 == 2)
  {
    if (a4 != 1)
    {
      v8 = sub_10003F544(&qword_100557E98);
      v9 = swift_allocObject(v8, 48, 7);
      v7 = 0;
      *(_OWORD *)(v9 + 16) = xmmword_1003CA200;
      *(_QWORD *)(v9 + 32) = a1;
      *(_BYTE *)(v9 + 40) = 1;
      return v7;
    }
    return 0;
  }
  if (a2 != 1)
    return 0;
  if ((a3 & 1) != 0)
  {
    if ((a3 & 0x100) != 0)
    {
      if (a4)
      {
        v15 = sub_10003F544(&qword_100557E98);
        v16 = swift_allocObject(v15, 48, 7);
        *(_OWORD *)(v16 + 16) = xmmword_1003CA200;
        *(_QWORD *)(v16 + 32) = a1;
        *(_BYTE *)(v16 + 40) = 0;
      }
      return 3;
    }
    else
    {
      v7 = 2;
      if (a4)
      {
        v11 = sub_10003F544(&qword_100557E98);
        v12 = swift_allocObject(v11, 80, 7);
        *(_OWORD *)(v12 + 16) = xmmword_1003CA240;
        *(_QWORD *)(v12 + 32) = a1;
        *(_BYTE *)(v12 + 40) = 0;
        *(_QWORD *)(v12 + 48) = 1;
        *(_BYTE *)(v12 + 56) = 2;
        *(_QWORD *)(v12 + 64) = 0;
        *(_BYTE *)(v12 + 72) = 2;
      }
    }
  }
  else if ((a3 & 0x100) != 0)
  {
    if (a4)
    {
      v13 = sub_10003F544(&qword_100557E98);
      v14 = swift_allocObject(v13, 48, 7);
      *(_OWORD *)(v14 + 16) = xmmword_1003CA200;
      *(_QWORD *)(v14 + 32) = a1;
      *(_BYTE *)(v14 + 40) = 0;
    }
    return 1;
  }
  else
  {
    if (a4)
    {
      v5 = sub_10003F544(&qword_100557E98);
      v6 = swift_allocObject(v5, 64, 7);
      *(_OWORD *)(v6 + 16) = xmmword_1003CA220;
      *(_QWORD *)(v6 + 32) = a1;
      *(_BYTE *)(v6 + 40) = 0;
      *(_QWORD *)(v6 + 48) = 0;
      *(_BYTE *)(v6 + 56) = 2;
    }
    return 1;
  }
  return v7;
}

uint64_t sub_1001C1FCC(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  id v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *);
  char *v34;
  _DWORD v36[14];
  uint64_t v37;
  void (*v38)(char *);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a5;
  v44 = a4;
  v43 = a3;
  v7 = type metadata accessor for Logger(0);
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  __chkstk_darwin(v7);
  v42 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for PodcastStateModel(0);
  v9 = *(_QWORD *)(v46 - 8);
  v10 = __chkstk_darwin(v46);
  v39 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v36 - v13;
  PodcastStateModel.uuid.getter(v12);
  v16 = v15;
  v17 = (void *)objc_opt_self(MTEpisode);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "predicateForLibraryEpisodesOnPodcastUuid:", v18);

  v20 = kMTEpisodeEntityName;
  LODWORD(v38) = objc_msgSend(a2, "hasAnyObjectsInEntity:satisfyingPredicate:", kMTEpisodeEntityName, v19);
  swift_bridgeObjectRelease(v16);

  PodcastStateModel.uuid.getter(v21);
  v23 = v22;
  v24 = objc_msgSend(v17, "predicateForHasAnyVisualPlayState");
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v17, "predicateForAllEpisodesOnPodcastUuid:", v25);

  v27 = objc_msgSend(v24, "AND:", v26);
  v28 = v46;

  v29 = objc_msgSend(a2, "hasAnyObjectsInEntity:satisfyingPredicate:", v20, v27);
  swift_bridgeObjectRelease(v23);

  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a1, v28);
  v31 = v47;
  v32 = PodcastStateModel.sanitizedState()(v30);
  if (!v31)
  {
    v37 = a1;
    v36[12] = v38 ^ 1;
    v36[13] = v29 ^ 1;
    v33 = *(void (**)(char *))(v9 + 8);
    v47 = v32;
    v33(v14);
    v34 = (char *)&loc_1001C2258 + *((int *)qword_1001C27F8 + v47);
    v38 = v33;
    __asm { BR              X10 }
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v28);
  return a1;
}

uint64_t sub_1001C2808(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 1 <= 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t sub_1001C2824()
{
  unint64_t result;

  result = qword_100557E80;
  if (!qword_100557E80)
  {
    result = swift_getWitnessTable(&unk_1003D1FEC, &type metadata for PodcastsStateTransitions.State);
    atomic_store(result, (unint64_t *)&qword_100557E80);
  }
  return result;
}

unint64_t sub_1001C2868()
{
  unint64_t result;

  result = qword_100557E88;
  if (!qword_100557E88)
  {
    result = swift_getWitnessTable(&unk_1003D1FC4, &type metadata for PodcastsStateTransitions.EpisodesState.LibraryState);
    atomic_store(result, (unint64_t *)&qword_100557E88);
  }
  return result;
}

unint64_t sub_1001C28AC()
{
  unint64_t result;

  result = qword_100557E90;
  if (!qword_100557E90)
  {
    result = swift_getWitnessTable(&unk_1003D1F9C, &type metadata for PodcastsStateTransitions.EpisodesState.PlayState);
    atomic_store(result, (unint64_t *)&qword_100557E90);
  }
  return result;
}

uint64_t Migration.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts9Migration_date;
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Migration.uuids.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts9Migration_uuids));
}

void Migration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.Migration", 18, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1001C2A0C()
{
  _BYTE *v0;

  if (*v0)
    return 0x7364697575;
  else
    return 1702125924;
}

uint64_t sub_1001C2A3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001C37B8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001C2A60(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1001C2A6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C2CEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C2A94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C2CEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

id Migration.__deallocating_deinit()
{
  return sub_1001C3784(0, (uint64_t (*)(void))type metadata accessor for Migration);
}

uint64_t type metadata accessor for Migration(uint64_t a1)
{
  uint64_t result;

  result = qword_100557F08;
  if (!qword_100557F08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Migration);
  return result;
}

uint64_t Migration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;

  v3 = v1;
  v5 = sub_10003F544(&qword_100557EA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003A834(a1, v9);
  v11 = sub_1001C2CEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Migration.CodingKeys, &type metadata for Migration.CodingKeys, v11, v9, v10);
  v12 = v3 + OBJC_IVAR____TtC8Podcasts9Migration_date;
  v21 = 0;
  v13 = type metadata accessor for Date(0);
  v14 = sub_100026844(&qword_100557EB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v12, &v21, v5, v13, v14);
  if (!v2)
  {
    v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Podcasts9Migration_uuids);
    v19 = 1;
    v15 = sub_10003F544((uint64_t *)&unk_10055FDF0);
    v16 = sub_1001C3030(&qword_100557EC0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1001C2CEC()
{
  unint64_t result;

  result = qword_100557EB0;
  if (!qword_100557EB0)
  {
    result = swift_getWitnessTable(&unk_1003CCD50, &type metadata for Migration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100557EB0);
  }
  return result;
}

void *Migration.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Migration.init(from:)(a1);
}

void *Migration.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  objc_class *v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  objc_super v27;
  char v28;
  uint64_t v29;

  v3 = v1;
  v24 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v23[1] = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10003F544(&qword_100557EC8);
  v7 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  v26 = a1;
  v12 = sub_10003A834(a1, v11);
  v13 = sub_1001C2CEC();
  v14 = v3;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Migration.CodingKeys, &type metadata for Migration.CodingKeys, v13, v11, v10);
  if (v2)
  {
    sub_10003D380(v26);

    v17 = type metadata accessor for Migration(0);
    swift_deallocPartialClassInstance(v14, v17, *(unsigned int *)((swift_isaMask & *v14) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v14) + 0x34));
  }
  else
  {
    LOBYTE(v29) = 0;
    v15 = sub_100026844(&qword_100557ED0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v16 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v24, &v29, v25, v24, v15);
    v19 = *(void (**)(void))(v5 + 32);
    v23[0] = (char *)v14 + OBJC_IVAR____TtC8Podcasts9Migration_date;
    v19();
    v20 = sub_10003F544((uint64_t *)&unk_10055FDF0);
    v28 = 1;
    v21 = sub_1001C3030(&qword_100557ED8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v20, &v28, v16, v20, v21);
    *(_QWORD *)((char *)v14 + OBJC_IVAR____TtC8Podcasts9Migration_uuids) = v29;

    v22 = (objc_class *)type metadata accessor for Migration(0);
    v27.receiver = v14;
    v27.super_class = v22;
    v12 = objc_msgSendSuper2(&v27, "init");
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v16);
    sub_10003D380(v26);
  }
  return v12;
}

uint64_t sub_1001C3030(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10003CA40((uint64_t *)&unk_10055FDF0);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1001C3090@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  void *result;

  v5 = objc_allocWithZone((Class)type metadata accessor for Migration(0));
  result = Migration.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001C30E4(_QWORD *a1)
{
  return Migration.encode(to:)(a1);
}

uint64_t sub_1001C3104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_10003F544(&qword_100555A00);
  v13 = sub_10003AEC0((unint64_t *)&qword_1005521C0, &qword_100555A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x8000000100433680, v9, v6, v3, 0);
  qword_100557EA0 = result;
  return result;
}

uint64_t sub_1001C32D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  unint64_t v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  objc_class *v24;
  char *v25;
  uint64_t v26;
  double v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  objc_super v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v39 = a2;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v38 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v38 - v15;
  v17 = objc_msgSend((id)objc_opt_self(MTConstants), "sharedDocumentsDirectory");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v17);

  v44 = 118;
  v45 = 0xE100000000000000;
  v43 = a1;
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v20._countAndFlagsBits = 0x6974617267696D2DLL;
  v20._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v20);
  v21 = v45;
  v40 = v16;
  URL.appendingPathComponent(_:)(v44, v45);
  swift_bridgeObjectRelease(v21);
  URL.appendingPathExtension(_:)(0x7473696C70, 0xE500000000000000);
  v22 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v41 = v7;
  v23 = v22(v11, v7);
  Date.init()(v23);
  v24 = (objc_class *)type metadata accessor for Migration(0);
  v25 = (char *)objc_allocWithZone(v24);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(&v25[OBJC_IVAR____TtC8Podcasts9Migration_date], v6, v3);
  v26 = v39;
  *(_QWORD *)&v25[OBJC_IVAR____TtC8Podcasts9Migration_uuids] = v39;
  v42.receiver = v25;
  v42.super_class = v24;
  *(_QWORD *)&v27 = swift_bridgeObjectRetain(v26).n128_u64[0];
  v28 = objc_msgSendSuper2(&v42, "init", v27);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v29 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  v44 = (uint64_t)v28;
  v31 = sub_100026844((unint64_t *)&unk_100557F60, type metadata accessor for Migration, (uint64_t)&protocol conformance descriptor for Migration);
  v32 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v44, v24, v31);
  v34 = v33;
  Data.write(to:options:)(v14, 0, v32, v33);
  sub_100032A84(v32, v34);

  swift_release(v30);
  v35 = v14;
  v36 = v41;
  v22(v35, v41);
  return v22(v40, v36);
}

id BookmarksMigrationRegistry.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BookmarksMigrationRegistry();
  return objc_msgSendSuper2(&v2, "init");
}

id BookmarksMigrationRegistry.__deallocating_deinit(uint64_t a1)
{
  return sub_1001C3784(a1, type metadata accessor for BookmarksMigrationRegistry);
}

id sub_1001C3784(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_1001C37B8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7364697575 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7364697575, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void _s8Podcasts26BookmarksMigrationRegistryC08registerC02of2atySaySSG_SitFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_100552018 != -1)
      swift_once(&qword_100552018, sub_1001C3104);
    v21 = (id)qword_100557EA0;
    v13 = swift_allocObject(&unk_1004B32C8, 32, 7);
    *(_QWORD *)(v13 + 16) = a2;
    *(_QWORD *)(v13 + 24) = a1;
    aBlock[4] = sub_1001C4304;
    v24 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100027AF8;
    aBlock[3] = &unk_1004B32E0;
    v14 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a1);
    static DispatchQoS.unspecified.getter(v15);
    v22 = _swiftEmptyArrayStorage;
    v16 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v17 = sub_10003F544((uint64_t *)&unk_10055B200);
    v18 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v4, v16);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v7, v14);
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    swift_release(v24);
  }
  else
  {
    v19 = static os_log_type_t.error.getter(v10);
    v20 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v21 = (id)static OS_os_log.default.getter(v20);
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v21, "No UUIDs migrated to bookmarks, nothing to register.", 52, 2, _swiftEmptyArrayStorage);

  }
}

uint64_t _s8Podcasts26BookmarksMigrationRegistryC19migrationRegistered2atAA0C0CSgSi_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  Swift::String v13;
  void *object;
  Swift::String v15;
  unint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)v26 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)v26 - v10;
  v12 = objc_msgSend((id)objc_opt_self(MTConstants), "sharedDocumentsDirectory");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v27 = 118;
  v28 = 0xE100000000000000;
  v26[1] = a1;
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 0x6974617267696D2DLL;
  v15._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v15);
  v16 = v28;
  URL.appendingPathComponent(_:)(v27, v28);
  swift_bridgeObjectRelease(v16);
  URL.appendingPathExtension(_:)(0x7473696C70, 0xE500000000000000);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v6, v2);
  v18 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = PropertyListDecoder.init()();
  v20 = Data.init(contentsOf:options:)(v9, 0);
  v22 = v21;
  v23 = type metadata accessor for Migration(0);
  v24 = sub_100026844(&qword_100557F58, type metadata accessor for Migration, (uint64_t)&protocol conformance descriptor for Migration);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v27, v23, v20, v22, v23, v24);
  sub_100032A84(v20, v22);
  swift_release(v19);
  v17(v9, v2);
  v17(v11, v2);
  return v27;
}

uint64_t _s8Podcasts26BookmarksMigrationRegistryC06deletecD02atySi_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  Swift::String v13;
  void *object;
  Swift::String v15;
  unint64_t v16;
  void (*v17)(char *, uint64_t);
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD v35[3];
  uint64_t v36;
  unint64_t v37;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)v35 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)v35 - v10;
  v12 = objc_msgSend((id)objc_opt_self(MTConstants), "sharedDocumentsDirectory");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v36 = 118;
  v37 = 0xE100000000000000;
  v35[2] = a1;
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 0x6974617267696D2DLL;
  v15._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v15);
  v16 = v37;
  URL.appendingPathComponent(_:)(v36, v37);
  swift_bridgeObjectRelease(v16);
  URL.appendingPathExtension(_:)(0x7473696C70, 0xE500000000000000);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v6, v2);
  v18 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v19);
  v21 = v20;
  v36 = 0;
  LODWORD(v16) = objc_msgSend(v18, "removeItemAtURL:error:", v20, &v36);

  v22 = v36;
  if ((_DWORD)v16)
  {
    v23 = (id)v36;
  }
  else
  {
    v24 = (id)v36;
    v25 = _convertNSErrorToError(_:)(v22);

    v27 = swift_willThrow(v26);
    v28 = static os_log_type_t.error.getter(v27);
    v29 = sub_10003F544(&qword_1005559A0);
    v30 = swift_allocObject(v29, 72, 7);
    *(_OWORD *)(v30 + 16) = xmmword_1003CA200;
    v31 = _convertErrorToNSError(_:)(v25);
    *(_QWORD *)(v30 + 56) = sub_100005EC8(0, &qword_1005532D0, NSError_ptr);
    *(_QWORD *)(v30 + 64) = sub_1001BFFE4();
    *(_QWORD *)(v30 + 32) = v31;
    v32 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v33 = (void *)static OS_os_log.default.getter(v32);
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v33, "Error deleting migration register file %@.", 42, 2, v30);
    swift_errorRelease(v25);
    swift_bridgeObjectRelease(v30);

  }
  v17(v9, v2);
  return ((uint64_t (*)(char *, uint64_t))v17)(v11, v2);
}

uint64_t type metadata accessor for BookmarksMigrationRegistry()
{
  return objc_opt_self(_TtC8Podcasts26BookmarksMigrationRegistry);
}

uint64_t sub_1001C40BC()
{
  return type metadata accessor for Migration(0);
}

uint64_t sub_1001C40C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Migration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001C4188 + 4 * byte_1003CCBF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001C41BC + 4 * byte_1003CCBF0[v4]))();
}

uint64_t sub_1001C41BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C41C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C41CCLL);
  return result;
}

uint64_t sub_1001C41D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C41E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001C41E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C41EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Migration.CodingKeys()
{
  return &type metadata for Migration.CodingKeys;
}

unint64_t sub_1001C420C()
{
  unint64_t result;

  result = qword_100557F40;
  if (!qword_100557F40)
  {
    result = swift_getWitnessTable(&unk_1003CCD28, &type metadata for Migration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100557F40);
  }
  return result;
}

unint64_t sub_1001C4254()
{
  unint64_t result;

  result = qword_100557F48;
  if (!qword_100557F48)
  {
    result = swift_getWitnessTable(&unk_1003CCC98, &type metadata for Migration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100557F48);
  }
  return result;
}

unint64_t sub_1001C429C()
{
  unint64_t result;

  result = qword_100557F50;
  if (!qword_100557F50)
  {
    result = swift_getWitnessTable(&unk_1003CCCC0, &type metadata for Migration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100557F50);
  }
  return result;
}

uint64_t sub_1001C42E0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C4304()
{
  uint64_t v0;

  return sub_1001C32D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_1001C4310(uint64_t a1, void *a2, int a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  unint64_t v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[5];
  char v53[32];

  v45 = a3;
  v44 = a2;
  v51 = swift_isaMask & *v3;
  v5 = *(_QWORD *)(v51 + 80);
  v6 = type metadata accessor for Optional(0, v5);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - v7;
  if ((unint64_t)a1 >> 62)
    goto LABEL_46;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v9)
  {
    v10 = 0;
    v42 = a1;
    v43 = a1 & 0xC000000000000001;
    v39 = a1 + 32;
    v40 = a1 & 0xFFFFFFFFFFFFFF8;
    v41 = v9;
    while (1)
    {
      if (v43)
      {
        v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
        v13 = __OFADD__(v10, 1);
        v14 = v10 + 1;
        if (v13)
          break;
        goto LABEL_11;
      }
      if (v10 >= *(_QWORD *)(v40 + 16))
        goto LABEL_45;
      v12 = *(void **)(v39 + 8 * v10);
      swift_unknownObjectRetain(v12);
      v13 = __OFADD__(v10, 1);
      v14 = v10 + 1;
      if (v13)
        break;
LABEL_11:
      v15 = v44;
      if ((v45 & 1) != 0)
        v15 = objc_msgSend(v12, "phase");
      v16 = (uint64_t *)(v46 + qword_100557F70);
      swift_beginAccess(v46 + qword_100557F70, v53, 0, 0);
      v17 = *v16;
      v47 = v14;
      if ((v17 & 0xC000000000000001) != 0)
      {
        if (v17 < 0)
          v18 = v17;
        else
          v18 = v17 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v17);
        v19 = __CocoaSet.makeIterator()(v18);
        v20 = Set.Iterator.init(_cocoa:)(v52, v19, v5, *(_QWORD *)(*(_QWORD *)(v51 + 88) + 8));
        v17 = v52[0];
        v49 = v52[1];
        v21 = v52[2];
        v22 = v52[3];
        v23 = v52[4];
      }
      else
      {
        v24 = -1 << *(_BYTE *)(v17 + 32);
        v25 = *(_QWORD *)(v17 + 56);
        v49 = v17 + 56;
        v21 = ~v24;
        v26 = -v24;
        if (v26 < 64)
          v27 = ~(-1 << v26);
        else
          v27 = -1;
        v23 = v27 & v25;
        swift_bridgeObjectRetain(v17);
        v22 = 0;
      }
      v50 = v17 & 0x7FFFFFFFFFFFFFFFLL;
      v48 = v21;
      v28 = (unint64_t)(v21 + 64) >> 6;
      while (v17 < 0)
      {
        v35 = __CocoaSet.Iterator.next()(v20);
        if (!v35)
          goto LABEL_4;
        v36 = v35;
        _forceBridgeFromObjectiveC<A>(_:_:)(v35, v5, v5);
        swift_unknownObjectRelease(v36);
        a1 = *(_QWORD *)(v5 - 8);
LABEL_25:
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(a1 + 56))(v8, 0, 1, v5);
        (*(void (**)(id, void *, uint64_t))(*(_QWORD *)(v51 + 88) + 16))(v15, v12, v5);
        v20 = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(a1 + 8))(v8, v5);
      }
      if (v23)
      {
        v29 = __clz(__rbit64(v23));
        v23 &= v23 - 1;
        v30 = v29 | (v22 << 6);
LABEL_24:
        a1 = *(_QWORD *)(v5 - 8);
        (*(void (**)(char *, unint64_t, uint64_t))(a1 + 16))(v8, *(_QWORD *)(v17 + 48) + *(_QWORD *)(a1 + 72) * v30, v5);
        goto LABEL_25;
      }
      v31 = v22 + 1;
      if (__OFADD__(v22, 1))
      {
        __break(1u);
        break;
      }
      if (v31 >= v28)
        goto LABEL_4;
      v32 = *(_QWORD *)(v49 + 8 * v31);
      v33 = v22 + 1;
      if (v32)
        goto LABEL_39;
      v33 = v22 + 2;
      if (v22 + 2 >= v28)
        goto LABEL_4;
      v32 = *(_QWORD *)(v49 + 8 * v33);
      if (v32)
        goto LABEL_39;
      v33 = v22 + 3;
      if (v22 + 3 >= v28)
        goto LABEL_4;
      v32 = *(_QWORD *)(v49 + 8 * v33);
      if (v32)
      {
LABEL_39:
        v23 = (v32 - 1) & v32;
        v30 = __clz(__rbit64(v32)) + (v33 << 6);
        v22 = v33;
        goto LABEL_24;
      }
      v34 = v22 + 4;
      while (v28 != v34)
      {
        v32 = *(_QWORD *)(v49 + 8 * v34++);
        if (v32)
        {
          v33 = v34 - 1;
          goto LABEL_39;
        }
      }
LABEL_4:
      v11 = v41;
      a1 = v42;
      v10 = v47;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v8, 1, 1, v5);
      sub_10017F43C(v17);
      swift_unknownObjectRelease(v12);
      if (v10 == v11)
        goto LABEL_50;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    if (a1 < 0)
      v37 = a1;
    else
      v37 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = _CocoaArrayWrapper.endIndex.getter(v37);
  }
LABEL_50:
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

double sub_1001C4704(uint64_t a1)
{
  return sub_1001C4794(a1, (void *)2, 0);
}

void sub_1001C4710(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1001C4734(a1, a2, a3, (void (*)(uint64_t))sub_1001C4704);
}

double sub_1001C471C(uint64_t a1)
{
  return sub_1001C4794(a1, 0, 1);
}

void sub_1001C4728(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1001C4734(a1, a2, a3, (void (*)(uint64_t))sub_1001C471C);
}

void sub_1001C4734(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7;

  swift_unknownObjectRetain(a3);
  v7 = a1;
  a4(a3);
  swift_unknownObjectRelease(a3);

}

double sub_1001C4794(uint64_t a1, void *a2, int a3)
{
  uint64_t v6;
  uint64_t inited;
  double result;
  uint64_t v9;
  _BYTE v10[40];

  v6 = sub_10003F544((uint64_t *)&unk_100553780);
  inited = swift_initStackObject(v6, v10);
  *(_OWORD *)(inited + 16) = xmmword_1003CA250;
  *(_QWORD *)(inited + 32) = a1;
  v9 = inited;
  specialized Array._endMutation()(inited);
  swift_unknownObjectRetain(a1);
  sub_1001C4310(v9, a2, a3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
  return result;
}

void sub_1001C482C(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1001C4734(a1, a2, a3, (void (*)(uint64_t))sub_1001C471C);
}

double sub_1001C4838(uint64_t a1)
{
  return sub_1001C4310(a1, (void *)2, 0);
}

double sub_1001C4844(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  double result;

  v5 = sub_10003F544((uint64_t *)&unk_100558020);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v5);
  v7 = a1;
  sub_1001C4838(v6);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

id sub_1001C4898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for DownloadManagerObserver(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_1001C48E4(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100557F70));
}

_QWORD *sub_1001C48F4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for PreviewingPresentationHint(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    *((_BYTE *)v4 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  }
  return v4;
}

uint64_t sub_1001C49C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for PreviewingPresentationHint(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1001C4A14(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PreviewingPresentationHint(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *sub_1001C4AB8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for PreviewingPresentationHint(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_OWORD *sub_1001C4B68(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PreviewingPresentationHint(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *sub_1001C4BE0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for PreviewingPresentationHint(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1001C4C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C4C7C);
}

uint64_t sub_1001C4C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PreviewingPresentationHint(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1001C4CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C4D04);
}

uint64_t sub_1001C4D04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PreviewingPresentationHint(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for StationShowContextActionData(uint64_t a1)
{
  uint64_t result;

  result = qword_100558088;
  if (!qword_100558088)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StationShowContextActionData);
  return result;
}

uint64_t sub_1001C4DB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1003CCE50;
  v4[1] = &unk_1003CCE50;
  result = type metadata accessor for PreviewingPresentationHint(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1003CCE68;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001C4E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  _QWORD aBlock[5];
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = *(_QWORD *)(type metadata accessor for StationShowContextActionData(0) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin();
  v4 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v5 = objc_msgSend(v4, "mainOrPrivateContext");

  v18 = 0;
  sub_1001C5068(v1, (uint64_t)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(unsigned __int8 *)(v2 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(&unk_1004B3490, v7 + v3, v6 | 7);
  *(_QWORD *)(v8 + 16) = &v18;
  *(_QWORD *)(v8 + 24) = v5;
  sub_1001C5148((uint64_t)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  v9 = swift_allocObject(&unk_1004B34B8, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1001C518C;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_100029B3C;
  v17 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004B34D0;
  v10 = _Block_copy(aBlock);
  v11 = v17;
  v12 = v5;
  swift_retain();
  swift_release(v11);
  objc_msgSend(v12, "performBlockAndWait:", v10);

  _Block_release(v10);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation(v9, "", 121, 44, 32, 1);
  result = swift_release(v9);
  if ((v12 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v14 = v18;
    swift_release(v8);
    return v14;
  }
  return result;
}

void sub_1001C5008(void **a1, void *a2)
{
  NSString v4;
  id v5;
  void *v6;

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a2, "podcastPlaylistSettingsForUuid:", v4);

  v6 = *a1;
  *a1 = v5;

}

uint64_t sub_1001C5068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StationShowContextActionData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C50AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for StationShowContextActionData(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for PreviewingPresentationHint(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001C5148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StationShowContextActionData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001C518C()
{
  uint64_t v0;

  type metadata accessor for StationShowContextActionData(0);
  sub_1001C5008(*(void ***)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001C51BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001C51CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  void *v37;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
    v5 = sub_10017F3E4();
    isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v36, v3, v4, v5);
    v1 = v36[0];
    v34 = v36[1];
    v8 = v36[2];
    v7 = v36[3];
    v9 = v36[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v34 = a1 + 56;
    v8 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v7 = 0;
  }
  v31 = v8;
  v33 = (unint64_t)(v8 + 64) >> 6;
  v32 = _swiftEmptyArrayStorage;
  while (1)
  {
    v13 = v7;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    v16 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v16)
      goto LABEL_41;
    v17 = v16;
    v35 = v16;
    v18 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
    swift_unknownObjectRetain(v17);
    swift_dynamicCast(&v37, &v35, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
    v19 = v37;
    swift_unknownObjectRelease(v17);
    if (!v19)
      goto LABEL_41;
LABEL_34:
    v23 = objc_msgSend(v19, "uuid", v31);
    if (v23)
    {
      v24 = v23;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v27 = v26;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_10027AE00(0, v32[2] + 1, 1, v32);
        v32 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v29 = v32[2];
      v28 = v32[3];
      if (v29 >= v28 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_10027AE00((_QWORD *)(v28 > 1), v29 + 1, 1, v32);
        v32 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v32[2] = v29 + 1;
      v30 = &v32[2 * v29];
      v30[4] = v25;
      v30[5] = v27;
    }
    else
    {

    }
  }
  if (v9)
  {
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v15 = v14 | (v7 << 6);
LABEL_33:
    v19 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v19)
      goto LABEL_41;
    goto LABEL_34;
  }
  v20 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v20 >= v33)
      goto LABEL_41;
    v21 = *(_QWORD *)(v34 + 8 * v20);
    ++v7;
    if (!v21)
    {
      v7 = v13 + 2;
      if (v13 + 2 >= v33)
        goto LABEL_41;
      v21 = *(_QWORD *)(v34 + 8 * v7);
      if (!v21)
      {
        v7 = v13 + 3;
        if (v13 + 3 >= v33)
          goto LABEL_41;
        v21 = *(_QWORD *)(v34 + 8 * v7);
        if (!v21)
        {
          v7 = v13 + 4;
          if (v13 + 4 >= v33)
            goto LABEL_41;
          v21 = *(_QWORD *)(v34 + 8 * v7);
          if (!v21)
          {
            v7 = v13 + 5;
            if (v13 + 5 >= v33)
              goto LABEL_41;
            v21 = *(_QWORD *)(v34 + 8 * v7);
            if (!v21)
            {
              v22 = v13 + 6;
              while (v33 != v22)
              {
                v21 = *(_QWORD *)(v34 + 8 * v22++);
                if (v21)
                {
                  v7 = v22 - 1;
                  goto LABEL_32;
                }
              }
LABEL_41:
              sub_10017F43C(v1);
              return;
            }
          }
        }
      }
    }
LABEL_32:
    v9 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v7 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

void __swiftcall MTPlaylist.unsafePredicateForStationEpisodesFromPodcast(podcastUuid:)(NSPredicate *__return_ptr retstr, Swift::String podcastUuid)
{
  void *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[32];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  uint64_t v33;
  unint64_t v34;

  object = podcastUuid._object;
  countAndFlagsBits = podcastUuid._countAndFlagsBits;
  v5 = type metadata accessor for NSFastEnumerationIterator(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(v2, "settings", v2);
  if (v9)
  {
    v26 = v6;
    v27 = countAndFlagsBits;
    v28 = (uint64_t)object;
    v34 = (unint64_t)_swiftEmptyArrayStorage;
    v10 = v9;
    NSOrderedSet.makeIterator()();

    v11 = sub_1001C5800();
    dispatch thunk of IteratorProtocol.next()(&v32, v5, v11);
    while (v33)
    {
      sub_10013B9CC(&v32, v31);
      sub_10003D344((uint64_t)v31, (uint64_t)v29);
      v13 = sub_100005EC8(0, &qword_100553DA0, MTPodcastPlaylistSettings_ptr);
      if ((swift_dynamicCast(&v30, v29, (char *)&type metadata for Any + 8, v13, 6) & 1) == 0)
        v30 = 0;
      v14 = sub_10003D380(v31);
      v15 = v30;
      if (v30)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
        v17 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v16 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v17 >= v16 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
        specialized Array._endMutation()(v12);
      }
      dispatch thunk of IteratorProtocol.next()(&v32, v5, v11);
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v5);
    v18 = v34;

    v19 = v28;
    swift_bridgeObjectRetain(v28);
    v20 = v27;
    v21 = sub_1001C7FDC(v18, v27, v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v19);
    if (v21)
    {
      v22 = objc_msgSend(v21, "podcast");
      if (v22)
      {
        v23 = v22;
        sub_1001C6CAC(v20, v19, (char)objc_msgSend(v22, "isExplicit"), (uint64_t)objc_msgSend(v21, "integerForEpisodesToShow"));

        return;
      }

    }
  }
  v24 = objc_msgSend((id)objc_opt_self(NSPredicate), "falsePredicate");
}

unint64_t sub_1001C5800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055F1D0;
  if (!qword_10055F1D0)
  {
    v1 = type metadata accessor for NSFastEnumerationIterator(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSFastEnumerationIterator, v1);
    atomic_store(result, (unint64_t *)&qword_10055F1D0);
  }
  return result;
}

void __swiftcall MTPlaylist.unsafePredicateForAllEpisodesMatchingSettings()(NSPredicate_optional *__return_ptr retstr)
{
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  if ((sub_1001C58FC() & 1) != 0)
    v1 = sub_1001C5B8C();
  else
    sub_1001C5E90();
  v2 = v1;
  v3 = sub_1001C6834();
  v4 = objc_msgSend(v2, "AND:", v3);

  v5 = v4;
  v6 = sub_1001C6AF8();
  v7 = objc_msgSend(v5, "AND:", v6);

}

id sub_1001C58FC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id result;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  _BYTE v25[32];
  uint64_t v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v1 = type metadata accessor for NSFastEnumerationIterator(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v0, "settings");
  if (!result)
    return result;
  v23 = v2;
  v24 = v0;
  v30 = (uint64_t)_swiftEmptyArrayStorage;
  v6 = result;
  NSOrderedSet.makeIterator()();

  v7 = sub_1001C5800();
  dispatch thunk of IteratorProtocol.next()(&v28, v1, v7);
  while (v29)
  {
    sub_10013B9CC(&v28, v27);
    sub_10003D344((uint64_t)v27, (uint64_t)v25);
    v9 = sub_100005EC8(0, &qword_100553DA0, MTPodcastPlaylistSettings_ptr);
    if ((swift_dynamicCast(&v26, v25, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
      v26 = 0;
    v10 = sub_10003D380(v27);
    v11 = v26;
    if (v26)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v13 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v12 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v13 >= v12 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized Array._endMutation()(v8);
    }
    dispatch thunk of IteratorProtocol.next()(&v28, v1, v7);
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v1);
  v14 = v30;

  v15 = v24;
  v16 = objc_msgSend(v24, "defaultSettings");
  if (!v16)
  {
    swift_bridgeObjectRelease(v14);
    return 0;
  }
  v17 = v16;
  if ((objc_msgSend(v15, "includesAllPodcasts") & 1) == 0)
  {
    swift_bridgeObjectRelease(v14);

    return 0;
  }
  v18 = v17;
  v19 = (uint64_t)sub_1001C7CD0(v14, v18);
  swift_bridgeObjectRelease(v14);

  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v21 = v19;
    else
      v21 = v19 & 0xFFFFFFFFFFFFFF8;
    v20 = _CocoaArrayWrapper.endIndex.getter(v21);
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v19);

  return (id)(v20 == 0);
}

id sub_1001C5B8C()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  Swift::String v14;
  void *object;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  if ((sub_1001C58FC() & 1) == 0)
    return objc_msgSend((id)objc_opt_self(NSPredicate), "falsePredicate");
  v1 = objc_msgSend((id)objc_opt_self(MTEpisode), "predicateForStationEligibleEpisodes");
  v2 = objc_msgSend(v0, "defaultSettings");
  v3 = v1;
  if (v2)
  {
    v4 = v2;
    v5 = (uint64_t)objc_msgSend(v2, "integerForEpisodesToShow");

    v3 = v1;
    if (v5 >= 1)
    {
      sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
      v6 = sub_10003F544(&qword_1005559A0);
      v7 = swift_allocObject(v6, 112, 7);
      *(_OWORD *)(v7 + 16) = xmmword_1003CA220;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(kEpisodeLevel);
      v10 = v9;
      *(_QWORD *)(v7 + 56) = &type metadata for String;
      v11 = sub_10003E198();
      *(_QWORD *)(v7 + 32) = v8;
      *(_QWORD *)(v7 + 40) = v10;
      *(_QWORD *)(v7 + 96) = &type metadata for Int;
      *(_QWORD *)(v7 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v7 + 64) = v11;
      *(_QWORD *)(v7 + 72) = v5;
      v12 = (void *)NSPredicate.init(format:_:)(0x646C25203C204B25, 0xE800000000000000, v7);
      v3 = objc_msgSend(v1, "AND:", v12);

    }
  }

  if ((objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") & 1) != 0)
    return v3;
  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  v14._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(kEpisodePodcast);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._object = (void *)0x80000001004336C0;
  v16._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v16);
  v17 = sub_10003F544(&qword_1005559A0);
  v18 = swift_allocObject(v17, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1003CA220;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastFlags);
  v21 = v20;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  v22 = sub_10003E198();
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = v21;
  *(_QWORD *)(v18 + 96) = &type metadata for Int;
  *(_QWORD *)(v18 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v18 + 64) = v22;
  *(_QWORD *)(v18 + 72) = 256;
  v23 = NSPredicate.init(format:_:)(40, 0xE100000000000000, v18);
  swift_bridgeObjectRelease(0xE100000000000000);

  return (id)v23;
}

void sub_1001C5E90()
{
  void *v0;
  uint64_t v1;
  void (**v2)(_QWORD, _QWORD);
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  id v20;
  void *v21;
  id v22;
  void *v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  id v47;
  Class isa;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  char **v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  void (**v100)(_QWORD, _QWORD);
  id v101;
  _BYTE v102[32];
  uint64_t v103;
  _OWORD v104[2];
  __int128 v105;
  uint64_t v106;
  uint64_t v107;

  v1 = type metadata accessor for NSFastEnumerationIterator(0);
  v2 = *(void (***)(_QWORD, _QWORD))(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(v0, "settings");
  if (!v5)
  {
    v28 = objc_msgSend((id)objc_opt_self(NSPredicate), "falsePredicate");
    return;
  }
  v100 = v2;
  v101 = v0;
  v107 = (uint64_t)_swiftEmptyArrayStorage;
  v6 = v5;
  NSOrderedSet.makeIterator()();

  v7 = sub_1001C5800();
  dispatch thunk of IteratorProtocol.next()(&v105, v1, v7);
  while (v106)
  {
    sub_10013B9CC(&v105, v104);
    sub_10003D344((uint64_t)v104, (uint64_t)v102);
    v9 = sub_100005EC8(0, &qword_100553DA0, MTPodcastPlaylistSettings_ptr);
    if ((swift_dynamicCast(&v103, v102, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
      v103 = 0;
    v10 = sub_10003D380(v104);
    v11 = v103;
    if (v103)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v13 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v12 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v13 >= v12 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized Array._endMutation()(v8);
    }
    dispatch thunk of IteratorProtocol.next()(&v105, v1, v7);
  }
  ((void (**)(char *, uint64_t))v100)[1](v4, v1);
  v14 = v107;
  v96 = v107;

  v15 = v101;
  v98 = v15;
  swift_bridgeObjectRetain(v14);
  v17 = (uint64_t)sub_1001C7E38(v16, v15);
  swift_bridgeObjectRelease(v14);

  v99 = (id)objc_opt_self(PFRestrictionsUtil);
  if ((objc_msgSend(v99, "isExplicitContentAllowed") & 1) != 0)
    goto LABEL_26;
  *(_QWORD *)&v105 = _swiftEmptyArrayStorage;
  if ((unint64_t)v17 >> 62)
    goto LABEL_43;
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v18)
    goto LABEL_47;
LABEL_14:
  if (v18 < 1)
    goto LABEL_83;
  for (i = 0; i != v18; ++i)
  {
    if ((v17 & 0xC000000000000001) != 0)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v17);
    else
      v20 = *(id *)(v17 + 8 * i + 32);
    v21 = v20;
    v22 = objc_msgSend(v20, "podcast");
    if (!v22 || (v23 = v22, v24 = objc_msgSend(v22, "isExplicit"), v23, (v24 & 1) != 0))
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      v26 = *(_QWORD *)(v105 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26);
      v27 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v21);
      specialized ContiguousArray._endMutation()(v27);
    }
  }
  swift_bridgeObjectRelease(v17);
  v17 = v105;
LABEL_26:
  if ((unint64_t)v17 >> 62)
  {
    while (1)
    {
      v44 = v17 < 0 ? v17 : v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v29 = _CocoaArrayWrapper.endIndex.getter(v44);
      if (!v29)
        break;
LABEL_28:
      if (v29 >= 1)
      {
        v30 = 0;
        v31 = _swiftEmptyArrayStorage;
        do
        {
          if ((v17 & 0xC000000000000001) != 0)
            v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v17);
          else
            v32 = *(id *)(v17 + 8 * v30 + 32);
          v33 = v32;
          v34 = objc_msgSend(v32, "podcast");
          if (v34
            && (v35 = v34, v36 = objc_msgSend(v34, "uuid"), v35, v36))
          {
            v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
            v39 = v38;

            if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
              v31 = sub_10027AE00(0, v31[2] + 1, 1, v31);
            v41 = v31[2];
            v40 = v31[3];
            if (v41 >= v40 >> 1)
              v31 = sub_10027AE00((_QWORD *)(v40 > 1), v41 + 1, 1, v31);
            v31[2] = v41 + 1;
            v42 = &v31[2 * v41];
            v42[4] = v37;
            v42[5] = v39;
          }
          else
          {

          }
          ++v30;
        }
        while (v29 != v30);
        goto LABEL_53;
      }
      __break(1u);
LABEL_43:
      if (v17 < 0)
        v43 = v17;
      else
        v43 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v18 = _CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease(v17);
      if (v18)
        goto LABEL_14;
LABEL_47:
      swift_bridgeObjectRelease(v17);
      v17 = (uint64_t)_swiftEmptyArrayStorage;
      if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
        goto LABEL_27;
    }
  }
  else
  {
LABEL_27:
    v29 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v17);
    if (v29)
      goto LABEL_28;
  }
  v31 = _swiftEmptyArrayStorage;
LABEL_53:
  swift_bridgeObjectRelease_n(v17, 2);
  v45 = (void *)objc_opt_self(MTEpisode);
  v46 = sub_100178AE4((uint64_t)v31);
  swift_bridgeObjectRelease(v31);
  v47 = objc_allocWithZone((Class)NSOrderedSet);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v46);
  v49 = objc_msgSend(v47, "initWithArray:", isa);

  v97 = v45;
  v50 = objc_msgSend(v45, "predicateForAllEpisodesOnPodcastUuids:", v49);

  v51 = v50;
  v52 = objc_msgSend(v98, "defaultSettings");
  v53 = v51;
  if (v52)
  {
    v54 = v52;
    v55 = objc_msgSend(v52, "integerForEpisodesToShow");

    v53 = v51;
    if ((uint64_t)v55 > 0)
    {
      sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
      v56 = sub_10003F544(&qword_1005559A0);
      v57 = swift_allocObject(v56, 112, 7);
      *(_OWORD *)(v57 + 16) = xmmword_1003CA220;
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(kEpisodeLevel);
      v60 = v59;
      *(_QWORD *)(v57 + 56) = &type metadata for String;
      v61 = sub_10003E198();
      *(_QWORD *)(v57 + 32) = v58;
      *(_QWORD *)(v57 + 40) = v60;
      *(_QWORD *)(v57 + 96) = &type metadata for Int;
      *(_QWORD *)(v57 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v57 + 64) = v61;
      *(_QWORD *)(v57 + 72) = v55;
      v62 = (void *)NSPredicate.init(format:_:)(0x646C25203C204B25, 0xE800000000000000, v57);
      v53 = objc_msgSend(v51, "AND:", v62);

    }
  }

  v63 = v96;
  if ((unint64_t)v96 >> 62)
  {
    if (v96 < 0)
      v93 = v96;
    else
      v93 = v96 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v96);
    v64 = _CocoaArrayWrapper.endIndex.getter(v93);
    swift_bridgeObjectRelease(v63);
    if (v64)
      goto LABEL_58;
LABEL_81:
    swift_bridgeObjectRelease(v63);
    return;
  }
  v64 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v64)
    goto LABEL_81;
LABEL_58:
  if (v64 >= 1)
  {
    v100 = (void (**)(_QWORD, _QWORD))v53;
    v65 = 0;
    v101 = (id)(v63 & 0xC000000000000001);
    v95 = kEpisodeLevel;
    v94 = xmmword_1003CA220;
    v66 = v98;
    v67 = &selRef_freeTranscriptSnippet;
    do
    {
      if (v101)
        v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, v63);
      else
        v73 = *(id *)(v63 + 8 * v65 + 32);
      v72 = v73;
      v74 = objc_msgSend(v73, v67[407], (_QWORD)v94, *((_QWORD *)&v94 + 1));
      v75 = objc_msgSend(v66, "defaultSettings");
      if (!v75 || (v76 = v75, v77 = objc_msgSend(v75, v67[407]), v76, v74 != v77))
      {
        v78 = objc_msgSend(v72, "podcast");
        if (v78)
        {
          v71 = v78;
          v79 = objc_msgSend(v78, "uuid");
          if (v79)
          {
            v68 = v79;
            if ((objc_msgSend(v99, "isExplicitContentAllowed") & 1) != 0
              || (objc_msgSend(v71, "isExplicit") & 1) == 0)
            {
              v80 = objc_msgSend(v97, "predicateForAllEpisodesOnPodcastUuid:", v68);

              v81 = v80;
              v82 = (uint64_t)objc_msgSend(v72, v67[407]);
              v83 = v81;
              if (v82 >= 1)
              {
                v84 = v82;
                sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
                v85 = sub_10003F544(&qword_1005559A0);
                v86 = swift_allocObject(v85, 112, 7);
                *(_OWORD *)(v86 + 16) = v94;
                v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
                v89 = v88;
                *(_QWORD *)(v86 + 56) = &type metadata for String;
                v90 = sub_10003E198();
                *(_QWORD *)(v86 + 32) = v87;
                *(_QWORD *)(v86 + 40) = v89;
                v63 = v96;
                *(_QWORD *)(v86 + 96) = &type metadata for Int;
                *(_QWORD *)(v86 + 104) = &protocol witness table for Int;
                *(_QWORD *)(v86 + 64) = v90;
                *(_QWORD *)(v86 + 72) = v84;
                v91 = v86;
                v66 = v98;
                v92 = (void *)NSPredicate.init(format:_:)(0x646C25203C204B25, 0xE800000000000000, v91);
                v83 = objc_msgSend(v81, "AND:", v92);

              }
              v68 = v100;
              v69 = objc_msgSend(v100, "OR:", v83);

              v70 = v71;
              v100 = (void (**)(_QWORD, _QWORD))v69;
              v71 = v72;
              v67 = &selRef_freeTranscriptSnippet;
            }
            else
            {
              v70 = v72;
            }

            v72 = v68;
          }

        }
      }
      ++v65;

    }
    while (v64 != v65);
    goto LABEL_81;
  }
  __break(1u);
LABEL_83:
  __break(1u);
}

id sub_1001C6834()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v1 = objc_msgSend(v0, "defaultSettings");
  if (!v1)
    return objc_msgSend((id)objc_opt_self(NSPredicate), "falsePredicate");
  v2 = v1;
  v3 = (void *)objc_opt_self(MTEpisode);
  v4 = objc_msgSend(v3, "predicateForExternalType:", 0);
  v5 = objc_msgSend(v3, "predicateForStationEligibleEpisodes");
  v6 = objc_msgSend(v4, "AND:", v5);

  v7 = v6;
  v8 = v7;
  if ((objc_msgSend(v2, "showPlayedEpisodes") & 1) == 0)
  {
    v9 = objc_msgSend(v3, "predicateForVisuallyPlayed:", 0);
    v8 = objc_msgSend(v7, "AND:", v9);

  }
  if ((objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") & 1) == 0)
  {
    v10 = objc_msgSend(v3, "predicateForExplicit:", 0);
    v11 = objc_msgSend(v8, "AND:", v10);

    v8 = v11;
  }
  if (objc_msgSend(v2, "mediaType"))
  {
    v12 = objc_msgSend(v2, "mediaType");
    v13 = &kEpisodeAudio;
    if (v12 != (id)1)
      v13 = &kEpisodeVideo;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v13);
    v16 = v15;
    sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
    v17 = sub_10003F544(&qword_1005559A0);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = sub_10003E198();
    *(_QWORD *)(v18 + 32) = v14;
    *(_QWORD *)(v18 + 40) = v16;
    v19 = (void *)NSPredicate.init(format:_:)(0x31203D204B25, 0xE600000000000000, v18);
    v20 = objc_msgSend(v8, "AND:", v19);

    return v20;
  }
  else
  {

    return v8;
  }
}

id sub_1001C6AF8()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = objc_msgSend(v0, "deletedEpisodes");
  if (!v1)
    return objc_msgSend((id)objc_opt_self(NSPredicate), "truePredicate");
  v2 = v1;
  v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

  sub_1001C6EE0(v3);
  v5 = v4;
  swift_bridgeObjectRelease(v3);
  if (!v5)
    return objc_msgSend((id)objc_opt_self(NSPredicate), "truePredicate");
  sub_1001C51CC(v5);
  v7 = v6;
  swift_bridgeObjectRelease(v5);
  v15 = v7;
  swift_bridgeObjectRetain(v7);
  sub_1001C721C(&v15);
  swift_bridgeObjectRelease(v7);
  v8 = v15;
  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v9 = sub_10003F544(&qword_1005559A0);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1003CA220;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(kEpisodeUuid);
  v13 = v12;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_10003E198();
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v13;
  *(_QWORD *)(v10 + 96) = sub_10003F544((uint64_t *)&unk_10055FDF0);
  *(_QWORD *)(v10 + 104) = sub_1001C81B8();
  *(_QWORD *)(v10 + 72) = v8;
  return (id)NSPredicate.init(format:_:)(0x49204B2520544F4ELL, 0xEC0000004025204ELL, v10);
}

id sub_1001C6CAC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  if ((objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") & 1) == 0
    && (a3 & 1) != 0)
  {
    return objc_msgSend((id)objc_opt_self(NSPredicate), "falsePredicate");
  }
  v7 = (void *)objc_opt_self(MTEpisode);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "predicateForAllEpisodesOnPodcastUuid:", v8);

  if (a4 >= 1)
  {
    sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
    v10 = sub_10003F544(&qword_1005559A0);
    v11 = swift_allocObject(v10, 112, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1003CA220;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(kEpisodeLevel);
    v14 = v13;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    v15 = sub_10003E198();
    *(_QWORD *)(v11 + 32) = v12;
    *(_QWORD *)(v11 + 40) = v14;
    *(_QWORD *)(v11 + 96) = &type metadata for Int;
    *(_QWORD *)(v11 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v11 + 64) = v15;
    *(_QWORD *)(v11 + 72) = a4;
    v16 = v9;
    v17 = (void *)NSPredicate.init(format:_:)(0x646C25203C204B25, 0xE800000000000000, v11);
    v9 = objc_msgSend(v16, "AND:", v17);

  }
  v18 = sub_1001C6834();
  v19 = objc_msgSend(v9, "AND:", v18);

  v20 = v19;
  v21 = sub_1001C6AF8();
  v22 = objc_msgSend(v20, "AND:", v21);

  return v22;
}

void sub_1001C6EE0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  NSObject v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _BYTE v30[40];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10003F544(&qword_1005580C8);
    v3 = (_QWORD *)static _SetStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptySetSingleton;
  }
  v29 = a1 + 56;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 7);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = (v6 - 1) & v6;
      v11 = __clz(__rbit64(v6)) | (v8 << 6);
      v12 = v8;
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v13 >= v28)
      goto LABEL_39;
    v14 = *(_QWORD *)(v29 + 8 * v13);
    v12 = v8 + 1;
    if (!v14)
    {
      v12 = v8 + 2;
      if (v8 + 2 >= v28)
        goto LABEL_39;
      v14 = *(_QWORD *)(v29 + 8 * v12);
      if (!v14)
      {
        v12 = v8 + 3;
        if (v8 + 3 >= v28)
          goto LABEL_39;
        v14 = *(_QWORD *)(v29 + 8 * v12);
        if (!v14)
        {
          v12 = v8 + 4;
          if (v8 + 4 >= v28)
            goto LABEL_39;
          v14 = *(_QWORD *)(v29 + 8 * v12);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v10 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_28:
    sub_100048678(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v30);
    v16.isa = AnyHashable._bridgeToObjectiveC()().isa;
    sub_100048644((uint64_t)v30);
    v17 = objc_opt_self(MTEpisode);
    v18 = swift_dynamicCastObjCClass(v16.isa, v17);
    if (!v18)
    {
      swift_release_n(v3, 2);

      sub_10017F43C(a1);
      return;
    }
    v19 = v18;
    v20 = NSObject._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v9 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(_QWORD *)(v3[6] + 8 * v9) = v19;
    ++v3[2];
    v8 = v12;
    v6 = v10;
  }
  v15 = v8 + 5;
  if (v8 + 5 >= v28)
  {
LABEL_39:
    swift_release(v3);
    sub_10017F43C(a1);
    return;
  }
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
  {
    v12 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v12 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v12 >= v28)
      goto LABEL_39;
    v14 = *(_QWORD *)(v29 + 8 * v12);
    ++v15;
    if (v14)
      goto LABEL_27;
  }
LABEL_41:
  __break(1u);
}

Swift::Int sub_1001C721C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001FB28C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1001C7284(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1001C7284(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_1001C796C(0, v3, 1, a1);
      return result;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v111 = result;
  v108 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v11;
      v110 = v8;
      if (v12 < 2)
        goto LABEL_117;
      v102 = *v108;
      while (1)
      {
        v103 = v12 - 2;
        if (v12 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v12 + 24];
        sub_1001C7A38((char *)(v102 + 16 * v104), (char *)(v102 + 16 * *(_QWORD *)&v101[16 * v12 + 16]), v102 + 16 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_1001FA68C((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v12 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v12 + 16], &v100[16 * v12 + 32], 16 * (v107 - v12));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v12 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v110 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v109 = v10 + 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v112 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v20 = 0;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1);
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (_QWORD *)(v10 + 16 * v9);
      v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v22 += 2;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_157;
      if (v13 < v21)
      {
        v29 = 16 * v21;
        v30 = 16 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_160;
            v33 = v10 + v29;
            v34 = *(_QWORD *)(v10 + v30);
            v35 = *(_QWORD *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v30) = *(_OWORD *)(v10 + v29 - 16);
            *(_QWORD *)(v33 - 16) = v34;
            *(_QWORD *)(v33 - 8) = v35;
          }
          ++v32;
          v29 -= 16;
          v30 += 16;
        }
        while (v32 < v31);
      }
LABEL_45:
      v9 = v21;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_153;
      if (v9 - v13 < v111)
      {
        if (__OFADD__(v13, v111))
          goto LABEL_155;
        if (v13 + v111 >= v3)
          v36 = v3;
        else
          v36 = v13 + v111;
        if (v36 < v13)
          goto LABEL_156;
        if (v9 != v36)
        {
          v37 = (_QWORD *)(v10 + 16 * v9);
          do
          {
            v38 = (uint64_t *)(v10 + 16 * v9);
            v39 = *v38;
            v40 = v38[1];
            v41 = v13;
            v42 = v37;
            do
            {
              v43 = *(v42 - 2);
              v44 = *(v42 - 1);
              v45 = v39 == v43 && v40 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1) & 1) == 0)
                break;
              if (!v10)
                goto LABEL_158;
              v39 = *v42;
              v40 = v42[1];
              *(_OWORD *)v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v40;
              *(v42 - 2) = v39;
              v42 -= 2;
              ++v41;
            }
            while (v9 != v41);
            ++v9;
            v37 += 2;
          }
          while (v9 != v36);
          v9 = v36;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1001FA388(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v47 = *((_QWORD *)v11 + 2);
    v46 = *((_QWORD *)v11 + 3);
    v12 = v47 + 1;
    if (v47 >= v46 >> 1)
      v11 = sub_1001FA388((char *)(v46 > 1), v47 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v48 = v11 + 32;
    v49 = &v11[16 * v47 + 32];
    *(_QWORD *)v49 = v13;
    *((_QWORD *)v49 + 1) = v9;
    if (v47)
      break;
    v12 = 1;
LABEL_15:
    v3 = v112;
    if (v9 >= v112)
    {
      v8 = v110;
      goto LABEL_120;
    }
  }
  v113 = v9;
  while (1)
  {
    v50 = v12 - 1;
    if (v12 >= 4)
    {
      v55 = &v48[16 * v12];
      v56 = *((_QWORD *)v55 - 8);
      v57 = *((_QWORD *)v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61)
        goto LABEL_137;
      v60 = *((_QWORD *)v55 - 6);
      v59 = *((_QWORD *)v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61)
        goto LABEL_138;
      v62 = v12 - 2;
      v63 = &v48[16 * v12 - 32];
      v65 = *(_QWORD *)v63;
      v64 = *((_QWORD *)v63 + 1);
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61)
        goto LABEL_140;
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61)
        goto LABEL_143;
      if (v67 >= v58)
      {
        v85 = &v48[16 * v50];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61)
          goto LABEL_147;
        v78 = v53 < v88;
        goto LABEL_105;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v79 = *((_QWORD *)v11 + 4);
        v80 = *((_QWORD *)v11 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_99;
      }
      v52 = *((_QWORD *)v11 + 4);
      v51 = *((_QWORD *)v11 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }
    if ((v54 & 1) != 0)
      goto LABEL_139;
    v62 = v12 - 2;
    v68 = &v48[16 * v12 - 32];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71)
      goto LABEL_142;
    v74 = &v48[16 * v50];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61)
      goto LABEL_145;
    if (__OFADD__(v72, v77))
      goto LABEL_146;
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_105:
      if (v78)
        v50 = v62;
      goto LABEL_107;
    }
LABEL_99:
    if ((v73 & 1) != 0)
      goto LABEL_141;
    v81 = &v48[16 * v50];
    v83 = *(_QWORD *)v81;
    v82 = *((_QWORD *)v81 + 1);
    v61 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v61)
      goto LABEL_144;
    if (v84 < v72)
      goto LABEL_15;
LABEL_107:
    v89 = v50 - 1;
    if (v50 - 1 >= v12)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v90 = v10;
    if (!v10)
      goto LABEL_159;
    v91 = v11;
    v92 = &v48[16 * v89];
    v93 = *(_QWORD *)v92;
    v94 = v48;
    v95 = v50;
    v96 = &v48[16 * v50];
    v97 = *((_QWORD *)v96 + 1);
    v98 = v90;
    sub_1001C7A38((char *)(v90 + 16 * *(_QWORD *)v92), (char *)(v90 + 16 * *(_QWORD *)v96), v90 + 16 * v97, __dst);
    if (v1)
      break;
    if (v97 < v93)
      goto LABEL_134;
    if (v95 > *((_QWORD *)v91 + 2))
      goto LABEL_135;
    *(_QWORD *)v92 = v93;
    *(_QWORD *)&v94[16 * v89 + 8] = v97;
    v99 = *((_QWORD *)v91 + 2);
    if (v95 >= v99)
      goto LABEL_136;
    v11 = v91;
    v12 = v99 - 1;
    memmove(v96, v96 + 16, 16 * (v99 - 1 - v95));
    v48 = v94;
    *((_QWORD *)v91 + 2) = v99 - 1;
    v10 = v98;
    v9 = v113;
    if (v99 <= 2)
      goto LABEL_15;
  }
  v100 = v91;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v110[2] = 0;
  return swift_bridgeObjectRelease(v110);
}

uint64_t sub_1001C796C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v15 = result == v13 && v10 == v14;
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C7A38(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v31 = __src;
  v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[16 * v13];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v20 = (char *)(a3 - 16);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 16;
          v23 = *((_QWORD *)v19 - 2);
          v24 = *((_QWORD *)v19 - 1);
          v25 = *((_QWORD *)v21 - 2);
          v26 = *((_QWORD *)v21 - 1);
          v21 -= 16;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v29 = v19 - 16;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = v6;
            v19 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_50;
          }
          v20 -= 16;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *((_QWORD *)v6 + 1);
        v16 = *((_QWORD *)v4 + 1);
        v17 = *(_QWORD *)v6 == *(_QWORD *)v4 && v15 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v15, *(_QWORD *)v4, v16, 1) & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v30 = v4;
          v18 = v6;
        }
        else
        {
          v18 = v6 + 16;
          if (v7 < v6 || v7 >= v18 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v18;
      }
      while ((unint64_t)v18 < a3);
      v31 = v7;
    }
LABEL_50:
    sub_1001FA480((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1001C7CD0(uint64_t a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  unint64_t v10;
  id v11;
  uint64_t v13;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_9:
        v9 = v8;
        v10 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_15;
        v11 = objc_msgSend(v8, "integerForEpisodesToShow");
        if (v11 == objc_msgSend(a2, "integerForEpisodesToShow"))
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v6 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
          v5 = a1 & 0xFFFFFFFFFFFFFF8;
          v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v9);
          specialized ContiguousArray._endMutation()(v7);
        }
        ++v4;
        if (v10 == v3)
          return _swiftEmptyArrayStorage;
      }
      if (v4 < *(_QWORD *)(v5 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v13 = a1;
      else
        v13 = a1 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v13);
      if (!v3)
        return _swiftEmptyArrayStorage;
    }
    v8 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1001C7E38(uint64_t a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  char **v5;
  id v6;
  void *v7;
  unint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  char **v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      v5 = &selRef_freeTranscriptSnippet;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_9:
        v7 = v6;
        v8 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_18;
        v9 = objc_msgSend(v6, v5[407]);
        v10 = objc_msgSend(a2, "defaultSettings");
        if (v10)
        {
          v11 = v10;
          v12 = v3;
          v13 = v5;
          v14 = objc_msgSend(v10, v5[407]);

          if (v9 == v14)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            v15 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
            v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v7);
            specialized ContiguousArray._endMutation()(v16);
          }
          else
          {

          }
          v5 = v13;
          v3 = v12;
        }
        else
        {

        }
        ++v4;
        if (v8 == v3)
          return _swiftEmptyArrayStorage;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v3)
        return _swiftEmptyArrayStorage;
    }
    v6 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1001C7FDC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char **v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v30;

  v4 = a1;
  if (a1 >> 62)
    goto LABEL_21;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v5)
  {
    do
    {
      v6 = v4 & 0xC000000000000001;
      v7 = 4;
      v8 = &selRef_newKVSGetAllTransactionSinceDomainVersion_;
      while (1)
      {
        v9 = v6 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v4) : *(id *)(v4 + 8 * v7);
        v10 = v9;
        v11 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        v12 = objc_msgSend(v9, v8[328]);
        if (v12)
        {
          v13 = v12;
          v14 = objc_msgSend(v12, "uuid");

          if (v14)
          {
            v30 = v10;
            v15 = v4;
            v16 = v6;
            v17 = v5;
            v18 = v8;
            v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
            v21 = v20;

            if (v19 == a2 && v21 == a3)
            {
              swift_bridgeObjectRelease(v15);
              v24 = a3;
              v10 = v30;
              goto LABEL_19;
            }
            v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, a2, a3, 0);
            swift_bridgeObjectRelease(v21);
            v8 = v18;
            v5 = v17;
            v6 = v16;
            v4 = v15;
            v10 = v30;
            if ((v23 & 1) != 0)
            {
              v24 = v4;
LABEL_19:
              swift_bridgeObjectRelease(v24);
              return v10;
            }
          }
        }

        ++v7;
        if (v11 == v5)
          goto LABEL_25;
      }
      __break(1u);
LABEL_21:
      v25 = a3;
      if (v4 < 0)
        v26 = v4;
      else
        v26 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v27 = _CocoaArrayWrapper.endIndex.getter(v26);
      a3 = v25;
      v5 = v27;
    }
    while (v27);
  }
LABEL_25:
  swift_bridgeObjectRelease(v4);
  return 0;
}

unint64_t sub_1001C81B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100557DC0;
  if (!qword_100557DC0)
  {
    v1 = sub_10003CA40((uint64_t *)&unk_10055FDF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100557DC0);
  }
  return result;
}

BOOL sub_1001C8204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(__n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v17[24];

  v1 = v0;
  v2 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for InteractionContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + 16, v17, 0, 0);
  v9 = *(_QWORD *)(v0 + 16);
  if (!v9)
    return *(_QWORD *)(v1 + 24) != 0;
  v10 = *(void (**)(__n128))(*(_QWORD *)v9 + 168);
  v11 = swift_retain();
  v10(v11);
  v12 = swift_release(v9);
  InteractionContext.page.getter(v12);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = InteractionContext.Page.isShowPage.getter(v13);
  sub_10017603C((uint64_t)v4);
  return (v14 & 1) == 0 && *(_QWORD *)(v1 + 24) != 0;
}

void sub_1001C8330()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(__n128);
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[24];
  char v58[24];

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v51 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ShowOffer(0);
  v52 = *(_QWORD *)(v7 - 8);
  v53 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PreviewingPresentationHint(0);
  v56 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_10003F544(qword_1005542D8);
  __chkstk_darwin(v16);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v0[3];
  if (v19)
  {
    swift_beginAccess(v0 + 2, v58, 0, 0);
    v20 = (_QWORD *)v0[2];
    if (v20)
    {
      v49 = v12;
      v50 = v10;
      v21 = v20[2];
      v22 = *(void (**)(__n128))(*v20 + 120);
      swift_retain();
      swift_retain();
      v23 = swift_retain();
      v22(v23);
      swift_release(v20);
      v24 = type metadata accessor for PresentationSource(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v18, 1, v24))
      {
        swift_release(v21);
        swift_release(v19);
        v25 = qword_1005542D8;
        v26 = (uint64_t)v18;
      }
      else
      {
        v48 = v21;
        v27 = (void *)PresentationSource.viewController.getter();
        sub_100007A28((uint64_t)v18, qword_1005542D8);
        if (!v27)
        {
          swift_release(v48);
          swift_release(v19);
          return;
        }
        v28 = v19 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
        swift_beginAccess(v19 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v57, 0, 0);
        sub_10016E904(v28, (uint64_t)v15);
        if (swift_getEnumCaseMultiPayload(v15, v13) != 1)
        {
          v35 = *v15;
          v34 = v15[1];
          v36 = v1[7];
          v55 = v1[8];
          sub_10003A834(v1 + 4, v36);
          v37 = v56;
          v39 = v49;
          v38 = v50;
          (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v49, enum case for PreviewingPresentationHint.push(_:), v50);
          v40 = v48;
          dispatch thunk of EpisodeControllerProtocol.presentShowPage(asPartOf:for:from:presentationHint:suppressMetrics:)(v48, v35, v34, v27, v39, 1, v36, v55);
          swift_bridgeObjectRelease(v34);

          swift_release(v40);
          swift_release(v19);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v38);
          return;
        }
        v30 = v52;
        v29 = v53;
        v31 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v52 + 32))(v9, v15, v53);
        ShowOffer.storeUrl.getter(v31);
        v33 = v54;
        v32 = v55;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v4, 1, v55) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v51, v4, v32);
          v41 = v1[7];
          v47 = v1[8];
          sub_10003A834(v1 + 4, v41);
          v42 = v56;
          v44 = v49;
          v43 = v50;
          (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v49, enum case for PreviewingPresentationHint.push(_:), v50);
          v45 = v48;
          v46 = v51;
          dispatch thunk of EpisodeControllerProtocol.presentStorePage(asPartOf:for:from:presentationHint:suppressMetrics:)(v48, v51, v27, v44, 1, v41, v47);

          swift_release(v45);
          swift_release(v19);
          (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v43);
          (*(void (**)(char *, uint64_t))(v54 + 8))(v46, v55);
          (*(void (**)(char *, uint64_t))(v52 + 8))(v9, v53);
          return;
        }
        (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v29);
        swift_release(v19);

        swift_release(v48);
        v25 = (uint64_t *)&unk_100553DC0;
        v26 = (uint64_t)v4;
      }
      sub_100007A28(v26, v25);
    }
  }
}

uint64_t sub_1001C87B8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10003D380(v0 + 4);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts28GoToShowPodcastContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001C8820()
{
  return type metadata accessor for GoToShowPodcastContextAction(0);
}

uint64_t type metadata accessor for GoToShowPodcastContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_1005580F8;
  if (!qword_1005580F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GoToShowPodcastContextAction);
  return result;
}

uint64_t sub_1001C8864(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = &unk_1003CCEE8;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001C88E8()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0x8000000100433730;
  v1._countAndFlagsBits = 0x6853206F74206F47;
  v1._object = (void *)0xEA0000000000776FLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0xD00000000000001ALL;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1001C8994()
{
  return 0x7374736163646F70;
}

uint64_t sub_1001C89B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts28GoToShowPodcastContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1001C89FC()
{
  return 23;
}

uint64_t sub_1001C8A0C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001C8A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release(v3);
}

void *sub_1001C8A84(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_1001C8AC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v31[24];

  v1 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v2 = __chkstk_darwin(v1);
  v4 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = __chkstk_darwin(v2);
  v7 = &v31[-v6 - 8];
  v8 = __chkstk_darwin(v5);
  v10 = &v31[-v9 - 8];
  v11 = __chkstk_darwin(v8);
  v13 = &v31[-v12 - 8];
  __chkstk_darwin(v11);
  v15 = &v31[-v14 - 8];
  sub_100320BC0();
  v16 = *(_QWORD *)(v0 + 16);
  swift_retain();
  v18 = (void *)sub_1001C8D90(v17);
  swift_release(v16);
  if (!v18)
  {
    v22 = type metadata accessor for URL(0);
    v23 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
    v23(v13, 1, 1, v22);
    v23(v15, 1, 1, v22);
LABEL_12:
    sub_1001C9958((uint64_t)v13);
    goto LABEL_13;
  }
  v19 = objc_msgSend(v18, "shortURL");
  if (v19)
  {
    v20 = v19;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

    v21 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 0, 1, v21);
  }
  else
  {
    v21 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 1, 1, v21);
  }
  sub_1001C9998((uint64_t)v10, (uint64_t)v13);
  type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v21) == 1)
  {
    v25 = objc_msgSend(v18, "shareURL");
    if (v25)
    {
      v26 = v25;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v27 = 0;
      v18 = v26;
    }
    else
    {
      v27 = 1;
    }

    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v7, v27, 1, v21);
    sub_1001C9998((uint64_t)v7, (uint64_t)v15);
    goto LABEL_12;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v15, v13, v21);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v15, 0, 1, v21);
LABEL_13:
  sub_1001C9998((uint64_t)v15, (uint64_t)v4);
  v28 = v0 + OBJC_IVAR____TtC8Podcasts28CopyLinkEpisodeContextAction_shareLink;
  swift_beginAccess(v28, v31, 33, 0);
  sub_1001C99E0((uint64_t)v4, v28);
  return swift_endAccess(v31);
}

uint64_t sub_1001C8D90(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v2);
  if (a1)
    __asm { BR              X10 }
  return 0;
}

uint64_t sub_1001C927C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 v13;
  __n128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24[24];

  v1 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + OBJC_IVAR____TtC8Podcasts28CopyLinkEpisodeContextAction_shareLink;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts28CopyLinkEpisodeContextAction_shareLink, v24, 0, 0);
  sub_100036A44(v4, (uint64_t)v3);
  v5 = type metadata accessor for URL(0);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5);
  sub_1001C9958((uint64_t)v3);
  if ((_DWORD)v4 == 1)
    return 0;
  v6 = *(_QWORD *)(v0 + 16);
  if (!v6)
    return 0;
  swift_retain();
  sub_1003689C0();
  v8 = v7;
  v10 = v9;
  swift_bridgeObjectRelease(v11);
  v22 = v8;
  v23 = v10;
  v12 = sub_10016DD80();
  if ((Collection.isNotEmpty.getter(&type metadata for String, v12, v13) & 1) == 0)
  {
    swift_release(v6);
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  v22 = static AdamID.empty.getter(v14);
  v15 = sub_100030584();
  v17 = BinaryInteger.description.getter(&type metadata for UInt64, v15);
  v18 = v16;
  if (v8 == v17 && v10 == v16)
  {
    swift_release(v6);
    swift_bridgeObjectRelease_n(v10, 2);
    return 0;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v17, v16, 0);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v10);
  if ((v20 & 1) == 0)
    __asm { BR              X10 }
  swift_release(v6);
  return 0;
}

void sub_1001C9444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100198BD4(v1, v2, 0);
  swift_release(v0);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  JUMPOUT(0x1001C93BCLL);
}

uint64_t sub_1001C9540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  _BYTE v15[24];

  v1 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v1);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = v0 + OBJC_IVAR____TtC8Podcasts28CopyLinkEpisodeContextAction_shareLink;
  swift_beginAccess(v8, v15, 0, 0);
  sub_100036A44(v8, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    return sub_1001C9958((uint64_t)v3);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v10 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
  URL.absoluteString.getter(v10);
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setString:", v13, swift_bridgeObjectRelease(v12).n128_f64[0]);

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1001C96B4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts28CopyLinkEpisodeContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1001C9958((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts28CopyLinkEpisodeContextAction_shareLink);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001C972C()
{
  return type metadata accessor for CopyLinkEpisodeContextAction(0);
}

uint64_t type metadata accessor for CopyLinkEpisodeContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_1005581C0;
  if (!qword_1005581C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CopyLinkEpisodeContextAction);
  return result;
}

void sub_1001C9770(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = "\b";
  v6[1] = "\b";
  v6[2] = &unk_1003CCFB8;
  v6[3] = &unk_1003CCFB8;
  v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[5] = &unk_1003CCFD0;
  v2 = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v6[6] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000048DC(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 8, v6, a1 + 80);
    }
  }
}

uint64_t sub_1001C9828()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0x80000001004337B0;
  v1._countAndFlagsBits = 0x6E694C2079706F43;
  v1._object = (void *)0xE90000000000006BLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0xD000000000000012;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1001C98D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  return v1;
}

uint64_t sub_1001C9900@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts28CopyLinkEpisodeContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1001C9944()
{
  return 40;
}

uint64_t sub_1001C9958(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544((uint64_t *)&unk_100553DC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001C9998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100553DC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C99E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100553DC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1001C9A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  void *object;
  id v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  NSString v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  NSString v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t (*v50)();
  id v51;
  char *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  void *v59;
  id v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t countAndFlagsBits;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  void **aBlock;
  uint64_t v78;
  void (*v79)(uint64_t, void *);
  void *v80;
  uint64_t (*v81)();
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;

  v70 = a2;
  v71 = a3;
  v72 = a1;
  v67 = type metadata accessor for FlowPresentationHints(0);
  v66 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v65 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for FlowDestination(0);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v62 = (_QWORD *)((char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (void *)objc_opt_self(NSBundle);
  v7 = objc_msgSend(v6, "mainBundle");
  v83._object = (void *)0xE000000000000000;
  v8._object = (void *)0x8000000100433800;
  v8._countAndFlagsBits = 0xD000000000000025;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v83._countAndFlagsBits = 0;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v83);
  countAndFlagsBits = v10._countAndFlagsBits;

  v11 = objc_msgSend(v6, "mainBundle");
  v12._countAndFlagsBits = 0xD00000000000002ELL;
  v84._object = (void *)0xE000000000000000;
  v12._object = (void *)0x8000000100433830;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v84._countAndFlagsBits = 0;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v84);

  v74 = sub_10003F544(&qword_1005559A0);
  v15 = swift_allocObject(v74, 72, 7);
  v73 = xmmword_1003CA200;
  *(_OWORD *)(v15 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v15 + 56) = &type metadata for Int;
  *(_QWORD *)(v15 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v15 + 32) = a1;
  static String.localizedStringWithFormat(_:_:)(v14._countAndFlagsBits, v14._object, v15);
  v17 = v16;
  swift_bridgeObjectRelease(v14._object);
  swift_bridgeObjectRelease(v15);
  v18 = objc_msgSend(v6, "mainBundle");
  v19._countAndFlagsBits = 0xD000000000000033;
  v85._object = (void *)0xE000000000000000;
  v19._object = (void *)0x8000000100433860;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v85._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v85)._object;

  v22 = objc_msgSend(v6, "mainBundle");
  v23._countAndFlagsBits = 0xD000000000000036;
  v86._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001004338A0;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v86._countAndFlagsBits = 0;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v86);
  v69 = v25._countAndFlagsBits;

  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10._object);
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v28 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v26, v27, 1);

  v29 = swift_allocObject(&unk_1004B3750, 32, 7);
  v31 = v70;
  v30 = v71;
  *(_QWORD *)(v29 + 16) = v70;
  *(_QWORD *)(v29 + 24) = v30;
  swift_retain(v30);
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v81 = sub_1001CA240;
  v82 = v29;
  aBlock = _NSConcreteStackBlock;
  v78 = 1107296256;
  v79 = sub_1001AC13C;
  v80 = &unk_1004B3768;
  v33 = _Block_copy(&aBlock);
  swift_release(v82);
  v34 = (void *)objc_opt_self(UIAlertAction);
  v35 = objc_msgSend(v34, "actionWithTitle:style:handler:", v32, 0, v33);
  _Block_release(v33);

  objc_msgSend(v28, "addAction:", v35);
  v36 = swift_allocObject(&unk_1004B37A0, 32, 7);
  *(_QWORD *)(v36 + 16) = v31;
  *(_QWORD *)(v36 + 24) = v30;
  swift_retain(v30);
  v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25._object);
  v81 = sub_1001CA264;
  v82 = v36;
  aBlock = _NSConcreteStackBlock;
  v78 = 1107296256;
  v79 = sub_1001AC13C;
  v80 = &unk_1004B37B8;
  v38 = _Block_copy(&aBlock);
  swift_release(v82);
  v39 = objc_msgSend(v34, "actionWithTitle:style:handler:", v37, 0, v38);
  _Block_release(v38);

  v40 = v28;
  objc_msgSend(v28, "addAction:", v39);

  v42 = static os_log_type_t.default.getter(v41);
  sub_100181038();
  v43 = (void *)static OS_os_log.restore.getter();
  v44 = swift_allocObject(v74, 72, 7);
  *(_OWORD *)(v44 + 16) = v73;
  *(_QWORD *)(v44 + 56) = &type metadata for Int;
  *(_QWORD *)(v44 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v44 + 32) = v72;
  os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v43, "Presenting alert to user for %d items", v61);

  swift_bridgeObjectRelease(v44);
  if (UIApp)
  {
    v45 = UIApp;
    UIResponder.nearestFlowController.getter(&v75);

    if (v76)
    {
      sub_10002099C(&v75, (uint64_t)&aBlock);
      v46 = v62;
      *v62 = v40;
      v47 = v63;
      v48 = v64;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v63 + 104))(v46, enum case for FlowDestination.viewController(_:), v64);
      v49 = v80;
      v50 = v81;
      sub_10003A834(&aBlock, (uint64_t)v80);
      v51 = v40;
      v52 = v65;
      static FlowPresentationHints.default.getter();
      dispatch thunk of FlowController.show(destination:hints:referrer:)(v46, v52, 0, 0, v49, v50);

      (*(void (**)(char *, uint64_t))(v66 + 8))(v52, v67);
      (*(void (**)(_QWORD *, uint64_t))(v47 + 8))(v46, v48);
      sub_10003D380(&aBlock);
    }
    else
    {
      sub_1001CA288((uint64_t)&v75);
      v53 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v54 = objc_msgSend(v53, "delegate");

      if (v54)
      {
        if ((objc_msgSend(v54, "respondsToSelector:", "window") & 1) != 0)
        {
          v55 = objc_msgSend(v54, "window");
          swift_unknownObjectRelease(v54);
          v54 = objc_msgSend(v55, "rootViewController");

        }
        else
        {
          swift_unknownObjectRelease(v54);
          v54 = 0;
        }
      }
      v56 = objc_msgSend(v54, "presentedViewController");
      if (v56)
      {
        v57 = v56;
      }
      else
      {
        v56 = v54;
        v57 = v54;
      }
      v58 = static os_log_type_t.error.getter(v56);
      v59 = (void *)static OS_os_log.restore.getter();
      os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, v59, "No flow controller found! Attempting to present directly on UIVC heirarchy", 74, 2, _swiftEmptyArrayStorage);

      if (v57)
      {
        v60 = v57;
        objc_msgSend(v60, "presentViewController:animated:completion:", v28, 1, 0);

      }
      else
      {

      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001CA21C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001CA240()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t sub_1001CA264()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_1001CA288(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_100554570);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1001CA2D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[2];
  if (v1)
  {
    v2 = v0[10];
    v3 = type metadata accessor for EpisodeOfferStateCenter();
    v4 = swift_allocObject(v3, 32, 7);
    *(_QWORD *)(v4 + 16) = v1;
    *(_QWORD *)(v4 + 24) = v2;
    v5 = v0[3];
    v0[3] = v4;
    swift_retain();
    swift_retain();
    swift_release(v5);
  }
}

uint64_t sub_1001CA344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  char v14;
  _QWORD *v16;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 && (v2 = *(_QWORD *)(v0 + 16)) != 0)
  {
    swift_retain();
    swift_retain();
    if ((sub_100367488() & 1) == 0)
    {
      v3 = sub_1001B57A0();
      v4 = v3[2];
      v16 = v3;
      if (v4)
      {
        v5 = (char *)(v3 + 6);
        do
        {
          v6 = *((_QWORD *)v5 - 2);
          v7 = *((_QWORD *)v5 - 1);
          v8 = *v5;
          sub_1001CB42C(v6, v7, *v5);
          if ((static ModernEpisodeDownloadState.== infix(_:_:)(v6, v7, v8, 0, 0, 2) & 1) != 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
              sub_10017B0F8(0, _swiftEmptyArrayStorage[2] + 1, 1);
            v10 = _swiftEmptyArrayStorage[2];
            v9 = _swiftEmptyArrayStorage[3];
            if (v10 >= v9 >> 1)
              sub_10017B0F8(v9 > 1, v10 + 1, 1);
            _swiftEmptyArrayStorage[2] = v10 + 1;
            v11 = &_swiftEmptyArrayStorage[3 * v10];
            v11[4] = v6;
            v11[5] = v7;
            *((_BYTE *)v11 + 48) = v8;
          }
          else
          {
            sub_1001CB444(v6, v7, v8);
          }
          v5 += 24;
          --v4;
        }
        while (v4);
      }
      swift_bridgeObjectRelease(v16);
      v12 = _swiftEmptyArrayStorage[2];
      swift_release(_swiftEmptyArrayStorage);
      if (v12)
      {
        sub_100367F44();
        v14 = v13;
        swift_release(v1);
        swift_release(v2);
        return v14 & 1;
      }
    }
    swift_release(v1);
    swift_release(v2);
  }
  else
  {
    *(_BYTE *)(v0 + 128) = 0;
  }
  return 0;
}

void sub_1001CA4FC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    __asm { BR              X10 }
}

uint64_t sub_1001CACB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _BYTE v20[24];

  v4 = type metadata accessor for EpisodeOffer(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v20, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v10 = (_QWORD *)result;
    if (*(_QWORD *)(v8 + 16))
    {
      v11 = *(unsigned __int8 *)(v5 + 80);
      v12 = (v11 + 32) & ~v11;
      v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v13(v7, v8 + v12, v4);
      v14 = v10[8];
      v15 = v10[9];
      sub_10003A834(v10 + 5, v14);
      v16 = sub_10003F544(&qword_1005548E8);
      v17 = swift_allocObject(v16, *(_QWORD *)(v5 + 72) + v12, v11 | 7);
      *(_OWORD *)(v17 + 16) = xmmword_1003CA200;
      v13((char *)(v17 + v12), (uint64_t)v7, v4);
      dispatch thunk of LibraryActionControllerProtocol.download(episodeOffers:)(v17, v14, v15);
      swift_release(v10);
      v18 = swift_bridgeObjectRelease(v17);
      return (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v18);
    }
    else
    {
      return swift_release(result);
    }
  }
  return result;
}

uint64_t sub_1001CAE10()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;
  id v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  Swift::String v12;
  Swift::String v13;

  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v12._object = (void *)0xE000000000000000;
  v3._object = (void *)0x8000000100433A00;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v12._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v12)._countAndFlagsBits;

  v6 = objc_msgSend(v1, "mainBundle");
  v7._countAndFlagsBits = 0xD000000000000011;
  v13._object = (void *)0xE000000000000000;
  v7._object = (void *)0x8000000100433A20;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v13)._object;

  if (*(_QWORD *)(v0 + 16))
    __asm { BR              X10 }
  swift_bridgeObjectRelease(object);
  return countAndFlagsBits;
}

uint64_t sub_1001CB06C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  sub_10003D380(v0 + 5);
  swift_release(v0[10]);
  sub_1001CB3B0((uint64_t)(v0 + 11));
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts28DownloadEpisodeContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001CB0EC()
{
  return type metadata accessor for DownloadEpisodeContextAction(0);
}

uint64_t type metadata accessor for DownloadEpisodeContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100558400;
  if (!qword_100558400)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DownloadEpisodeContextAction);
  return result;
}

uint64_t sub_1001CB130(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = "\b";
  v4[3] = &unk_1003CD108;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = &unk_1003CD120;
  v4[6] = &unk_1003CD138;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1001CB1DC()
{
  return 0xD000000000000011;
}

uint64_t sub_1001CB1F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts28DownloadEpisodeContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double sub_1001CB248@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  sub_1001CB284((uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

double sub_1001CB284@<D0>(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  double result;
  Swift::String v8;

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v8._object = (void *)0xE800000000000000;
  v4._object = (void *)0x80000001004339C0;
  v4._countAndFlagsBits = 0xD00000000000001CLL;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0x64616F6C6E776F44;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v8);

  *(_QWORD *)a1 = v2;
  result = 3.82472648e228;
  *(_OWORD *)(a1 + 8) = xmmword_1003CD070;
  *(Swift::String *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_1001CB368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100565940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CB3B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_100565940);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001CB3F0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001CB414(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001CACB0(a1, v1);
}

uint64_t sub_1001CB42C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1001CB444(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t KeyProcessorPair.key.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___MTKeyProcessorPair_key);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___MTKeyProcessorPair_key + 8));
  return v1;
}

uint64_t KeyProcessorPair.processor.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___MTKeyProcessorPair_processor));
}

id KeyProcessorPair.__allocating_init(key:processor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  char *v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR___MTKeyProcessorPair_key];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  *(_QWORD *)&v7[OBJC_IVAR___MTKeyProcessorPair_processor] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, "init");
}

id KeyProcessorPair.init(key:processor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  objc_class *ObjectType;
  char *v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  v8 = &v3[OBJC_IVAR___MTKeyProcessorPair_key];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  *(_QWORD *)&v3[OBJC_IVAR___MTKeyProcessorPair_processor] = a3;
  v10.receiver = v3;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "init");
}

void KeyProcessorPair.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.KeyProcessorPair", 25, "init()", 6, 0);
  __break(1u);
}

id MultiKeySyncProcessor.__allocating_init(keysAndProcessors:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  uint64_t v4;

  v3 = objc_allocWithZone(v1);
  return MultiKeySyncProcessor.init(keysAndProcessors:)(a1, v4);
}

id MultiKeySyncProcessor.init(keysAndProcessors:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v6;
  char *v7;
  id result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  objc_class *v47;
  char *v48;
  objc_super v49;
  _QWORD *v50;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = v2;
    if (v6)
      goto LABEL_3;
LABEL_29:
    v25 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v3[OBJC_IVAR___MTMultiKeySyncProcessor_orderedKeys] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(a1);
LABEL_30:
    v50 = v25;
    v44 = sub_10003F544(&qword_100558598);
    v45 = sub_10003F544(&qword_1005585A0);
    v46 = sub_1001CCF70();
    *(_QWORD *)&v3[OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey] = Dictionary.init<A>(probablyUniqueKeysWithValues:)(&v50, &type metadata for String, v44, v45, &protocol witness table for String, v46);

    v49.receiver = v3;
    v49.super_class = ObjectType;
    return objc_msgSendSuper2(&v49, "init");
  }
  if (a1 < 0)
    v42 = a1;
  else
    v42 = a1 & 0xFFFFFFFFFFFFFF8;
  v43 = v3;
  v6 = _CocoaArrayWrapper.endIndex.getter(v42);
  if (!v6)
    goto LABEL_29;
LABEL_3:
  v50 = _swiftEmptyArrayStorage;
  result = (id)sub_100048628(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v47 = ObjectType;
    v48 = v3;
    v9 = v50;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
        v12 = *(_QWORD *)(v11 + OBJC_IVAR___MTKeyProcessorPair_key);
        v13 = *(_QWORD *)(v11 + OBJC_IVAR___MTKeyProcessorPair_key + 8);
        swift_bridgeObjectRetain(v13);
        swift_unknownObjectRelease(v11);
        v50 = v9;
        v15 = v9[2];
        v14 = v9[3];
        if (v15 >= v14 >> 1)
        {
          sub_100048628(v14 > 1, v15 + 1, 1);
          v9 = v50;
        }
        ++v10;
        v9[2] = v15 + 1;
        v16 = &v9[2 * v15];
        v16[4] = v12;
        v16[5] = v13;
      }
      while (v6 != v10);
    }
    else
    {
      v17 = (_QWORD *)(a1 + 32);
      v18 = v6;
      do
      {
        v19 = (uint64_t *)(*v17 + OBJC_IVAR___MTKeyProcessorPair_key);
        v21 = *v19;
        v20 = v19[1];
        v50 = v9;
        v23 = v9[2];
        v22 = v9[3];
        swift_bridgeObjectRetain(v20);
        if (v23 >= v22 >> 1)
        {
          sub_100048628(v22 > 1, v23 + 1, 1);
          v9 = v50;
        }
        v9[2] = v23 + 1;
        v24 = &v9[2 * v23];
        v24[4] = v21;
        v24[5] = v20;
        ++v17;
        --v18;
      }
      while (v18);
    }
    *(_QWORD *)&v48[OBJC_IVAR___MTMultiKeySyncProcessor_orderedKeys] = v9;
    v50 = _swiftEmptyArrayStorage;
    sub_10017B218(0, v6 & ~(v6 >> 63), 0);
    v25 = _swiftEmptyArrayStorage;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v26 = 0;
      do
      {
        v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(v26, a1);
        v28 = *(_QWORD *)(v27 + OBJC_IVAR___MTKeyProcessorPair_key);
        v29 = *(_QWORD *)(v27 + OBJC_IVAR___MTKeyProcessorPair_key + 8);
        v30 = *(_QWORD *)(v27 + OBJC_IVAR___MTKeyProcessorPair_processor);
        swift_bridgeObjectRetain(v29);
        swift_unknownObjectRetain(v30);
        swift_unknownObjectRelease(v27);
        v50 = v25;
        v32 = v25[2];
        v31 = v25[3];
        if (v32 >= v31 >> 1)
        {
          sub_10017B218(v31 > 1, v32 + 1, 1);
          v25 = v50;
        }
        ++v26;
        v25[2] = v32 + 1;
        v33 = &v25[3 * v32];
        v33[4] = v28;
        v33[5] = v29;
        v33[6] = v30;
      }
      while (v6 != v26);
    }
    else
    {
      v34 = 0;
      do
      {
        v35 = *(_QWORD *)(a1 + 8 * v34 + 32);
        v37 = *(_QWORD *)(v35 + OBJC_IVAR___MTKeyProcessorPair_key);
        v36 = *(_QWORD *)(v35 + OBJC_IVAR___MTKeyProcessorPair_key + 8);
        v38 = *(_QWORD *)(v35 + OBJC_IVAR___MTKeyProcessorPair_processor);
        v50 = v25;
        v40 = v25[2];
        v39 = v25[3];
        swift_bridgeObjectRetain(v36);
        swift_unknownObjectRetain(v38);
        if (v40 >= v39 >> 1)
        {
          sub_10017B218(v39 > 1, v40 + 1, 1);
          v25 = v50;
        }
        ++v34;
        v25[2] = v40 + 1;
        v41 = &v25[3 * v40];
        v41[4] = v37;
        v41[5] = v36;
        v41[6] = v38;
      }
      while (v6 != v34);
    }
    swift_bridgeObjectRelease(a1);
    ObjectType = v47;
    v3 = v48;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

void MultiKeySyncProcessor.dirtyKeys.getter()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;

  v1 = *(_QWORD *)&v0[OBJC_IVAR___MTMultiKeySyncProcessor_orderedKeys];
  v2 = v0;
  swift_bridgeObjectRetain(v1);
  v4 = (uint64_t)sub_1001CDE3C(v3, (uint64_t)v2);
  swift_bridgeObjectRelease(v1);

  v24 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease(v4);
    v12 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_30;
    goto LABEL_19;
  }
  if (v4 < 0)
    v13 = v4;
  else
    v13 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease(v4);
  if (!v5)
    goto LABEL_18;
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
      v9 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
    else
      v9 = (char *)*(id *)(v4 + 8 * i + 32);
    v10 = v9;
    v11 = objc_msgSend(*(id *)&v9[OBJC_IVAR___MTKeyProcessorPair_processor], "hasLocalChanges", v24);
    if ((_DWORD)v11)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v7 = *(_QWORD *)(v24 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v10);
      specialized ContiguousArray._endMutation()(v8);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease(v4);
  v12 = v24;
  if ((v24 & 0x8000000000000000) != 0)
    goto LABEL_30;
LABEL_19:
  if ((v12 & 0x4000000000000000) == 0)
  {
    v14 = *(_QWORD *)(v12 + 16);
    if (!v14)
    {
LABEL_29:
      swift_release(v12);
      return;
    }
    goto LABEL_21;
  }
LABEL_30:
  swift_bridgeObjectRetain(v12);
  v14 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_release(v12);
  if (!v14)
    goto LABEL_29;
LABEL_21:
  sub_100048628(0, v14 & ~(v14 >> 63), 0);
  if ((v14 & 0x8000000000000000) == 0)
  {
    v15 = 0;
    do
    {
      if ((v12 & 0xC000000000000001) != 0)
        v16 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v12);
      else
        v16 = (char *)*(id *)(v12 + 8 * v15 + 32);
      v17 = v16;
      v19 = *(_QWORD *)&v16[OBJC_IVAR___MTKeyProcessorPair_key];
      v18 = *(_QWORD *)&v16[OBJC_IVAR___MTKeyProcessorPair_key + 8];
      swift_bridgeObjectRetain(v18);

      v21 = _swiftEmptyArrayStorage[2];
      v20 = _swiftEmptyArrayStorage[3];
      if (v21 >= v20 >> 1)
        sub_100048628(v20 > 1, v21 + 1, 1);
      ++v15;
      _swiftEmptyArrayStorage[2] = v21 + 1;
      v22 = &_swiftEmptyArrayStorage[2 * v21];
      v22[4] = v19;
      v22[5] = v18;
    }
    while (v14 != v15);
    goto LABEL_29;
  }
LABEL_33:
  __break(1u);
}

Class sub_1001CBDDC(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  Class isa;

  v4 = a1;
  v5 = a3();

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  return isa;
}

void MultiKeySyncProcessor.cleanKeys.getter()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;

  v1 = *(_QWORD *)&v0[OBJC_IVAR___MTMultiKeySyncProcessor_orderedKeys];
  v2 = v0;
  swift_bridgeObjectRetain(v1);
  v4 = (uint64_t)sub_1001CDE3C(v3, (uint64_t)v2);
  swift_bridgeObjectRelease(v1);

  v25 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease(v4);
    v13 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_31;
    goto LABEL_20;
  }
  if (v4 < 0)
    v14 = v4;
  else
    v14 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v14);
  swift_bridgeObjectRelease(v4);
  if (!v5)
    goto LABEL_19;
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
      v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
    else
      v7 = (char *)*(id *)(v4 + 8 * i + 32);
    v8 = v7;
    v9 = *(void **)&v7[OBJC_IVAR___MTKeyProcessorPair_processor];
    if ((objc_msgSend(v9, "hasLocalChanges", v25) & 1) != 0
      || (v10 = objc_msgSend(v9, "requiresNextGetTransaction"), (v10 & 1) == 0))
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = *(_QWORD *)(v25 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v8);
      specialized ContiguousArray._endMutation()(v12);
    }
  }
  swift_bridgeObjectRelease(v4);
  v13 = v25;
  if ((v25 & 0x8000000000000000) != 0)
    goto LABEL_31;
LABEL_20:
  if ((v13 & 0x4000000000000000) == 0)
  {
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
LABEL_30:
      swift_release(v13);
      return;
    }
    goto LABEL_22;
  }
LABEL_31:
  swift_bridgeObjectRetain(v13);
  v15 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_release(v13);
  if (!v15)
    goto LABEL_30;
LABEL_22:
  sub_100048628(0, v15 & ~(v15 >> 63), 0);
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        v17 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v13);
      else
        v17 = (char *)*(id *)(v13 + 8 * v16 + 32);
      v18 = v17;
      v20 = *(_QWORD *)&v17[OBJC_IVAR___MTKeyProcessorPair_key];
      v19 = *(_QWORD *)&v17[OBJC_IVAR___MTKeyProcessorPair_key + 8];
      swift_bridgeObjectRetain(v19);

      v22 = _swiftEmptyArrayStorage[2];
      v21 = _swiftEmptyArrayStorage[3];
      if (v22 >= v21 >> 1)
        sub_100048628(v21 > 1, v22 + 1, 1);
      ++v16;
      _swiftEmptyArrayStorage[2] = v22 + 1;
      v23 = &_swiftEmptyArrayStorage[2 * v22];
      v23[4] = v20;
      v23[5] = v19;
    }
    while (v15 != v16);
    goto LABEL_30;
  }
LABEL_34:
  __break(1u);
}

uint64_t MultiKeySyncProcessor.processor(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  char v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  swift_bridgeObjectRetain(a2);
  v6 = sub_10002E5D8(a1, a2);
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v6);
    swift_unknownObjectRetain(v8);
  }
  else
  {
    v8 = 0;
  }
  swift_bridgeObjectRelease(a2);
  return v8;
}

void MultiKeySyncProcessor.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.MultiKeySyncProcessor", 30, "init()", 6, 0);
  __break(1u);
}

uint64_t MultiKeySyncProcessor.operationTypeForSET()()
{
  return 17;
}

Swift::Bool __swiftcall MultiKeySyncProcessor.hasLocalChanges()()
{
  return sub_1001CC2A4((SEL *)&selRef_hasLocalChanges);
}

Swift::Bool __swiftcall MultiKeySyncProcessor.requiresNextGetTransaction()()
{
  return sub_1001CC2A4((SEL *)&selRef_requiresNextGetTransaction);
}

uint64_t sub_1001CC2A4(SEL *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  char i;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain_n(v3, 2);
  v10 = 0;
  for (i = 0; ; i |= result)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_5;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v8)
      goto LABEL_25;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_25;
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_25;
        v15 = *(_QWORD *)(v4 + 8 * v10);
        if (!v15)
        {
          v10 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_25;
          v15 = *(_QWORD *)(v4 + 8 * v10);
          if (!v15)
          {
            v10 = v14 + 4;
            if (v14 + 4 >= v8)
              goto LABEL_25;
            v15 = *(_QWORD *)(v4 + 8 * v10);
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_24:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_5:
    result = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v3 + 56) + 8 * v13), *a1);
  }
  v16 = v14 + 5;
  if (v16 >= v8)
  {
LABEL_25:
    swift_release(v3);
    swift_bridgeObjectRelease(v3);
    return i & 1;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_24;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v8)
      goto LABEL_25;
    v15 = *(_QWORD *)(v4 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall MultiKeySyncProcessor.version(forGetTransaction:key:)(MZKeyValueStoreTransaction *forGetTransaction, Swift::String key)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v7;
  char v8;
  void *v9;
  NSString v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  Swift::String_optional result;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_6;
  object = key._object;
  countAndFlagsBits = key._countAndFlagsBits;
  swift_bridgeObjectRetain(key._object);
  v7 = sub_10002E5D8(countAndFlagsBits, (uint64_t)object);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease(object);
    goto LABEL_6;
  }
  v9 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v7);
  swift_unknownObjectRetain(v9);
  swift_bridgeObjectRelease(object);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "versionForGetTransaction:key:", forGetTransaction, v10);

  swift_unknownObjectRelease(v9);
  if (!v11)
  {
LABEL_6:
    v12 = 0;
    v14 = 0;
    goto LABEL_7;
  }
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

LABEL_7:
  v15 = v12;
  v16 = v14;
  result.value._object = v16;
  result.value._countAndFlagsBits = v15;
  return result;
}

uint64_t MultiKeySyncProcessor.data(forSetTransaction:key:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v10;
  char v11;
  void *v12;
  NSString v13;
  id v14;
  uint64_t v15;

  v5 = *(_QWORD *)(v4 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain(a3);
  v10 = sub_10002E5D8(a2, a3);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease(a3);
    return 0;
  }
  v12 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v10);
  swift_unknownObjectRetain(v12);
  swift_bridgeObjectRelease(a3);
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "dataForSetTransaction:key:version:", a1, v13, a4);

  swift_unknownObjectRelease(v12);
  if (!v14)
    return 0;
  v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);

  return v15;
}

void MultiKeySyncProcessor.success(forGetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
  sub_1001CCB34(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1004B3908, (SEL *)&selRef_successfulGetTransaction_withData_forKey_version_finishedBlock_);
}

void MultiKeySyncProcessor.success(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
  sub_1001CCB34(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1004B3930, (SEL *)&selRef_successfulSetTransaction_withData_forKey_version_finishedBlock_);
}

void MultiKeySyncProcessor.conflict(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
  sub_1001CCB34(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1004B3958, (SEL *)&selRef_conflictForSetTransaction_withData_forKey_version_finishedBlock_);
}

void sub_1001CCB34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSString a7, void *a8, uint64_t a9, uint64_t a10, SEL *a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v19;
  char v20;
  void *v21;
  Class isa;
  NSString v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v12 = *(_QWORD *)(v11 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (*(_QWORD *)(v12 + 16))
  {
    swift_bridgeObjectRetain(a5);
    v19 = sub_10002E5D8(a4, a5);
    if ((v20 & 1) != 0)
    {
      v21 = *(void **)(*(_QWORD *)(v12 + 56) + 8 * v19);
      swift_unknownObjectRetain(v21);
      swift_bridgeObjectRelease(a5);
      if (a3 >> 60 == 15)
        isa = 0;
      else
        isa = Data._bridgeToObjectiveC()().super.isa;
      v23 = String._bridgeToObjectiveC()();
      if (a7)
        a7 = String._bridgeToObjectiveC()();
      if (a8)
      {
        aBlock[4] = a8;
        v26 = a9;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10001C290;
        aBlock[3] = a10;
        a8 = _Block_copy(aBlock);
        v24 = v26;
        swift_retain();
        swift_release(v24);
      }
      objc_msgSend(v21, *a11, a1, isa, v23, a7, a8, a10, a9);
      swift_unknownObjectRelease(v21);
      _Block_release(a8);

    }
    else
    {
      swift_bridgeObjectRelease(a5);
    }
  }
}

Swift::Void __swiftcall MultiKeySyncProcessor.transaction(_:didProcessResponseWithDomainVersion:)(MZKeyValueStoreTransaction *_, Swift::String_optional didProcessResponseWithDomainVersion)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  id v5;

  object = didProcessResponseWithDomainVersion.value._object;
  countAndFlagsBits = didProcessResponseWithDomainVersion.value._countAndFlagsBits;
  v4 = type metadata accessor for SyncKeysRepository(0);
  v5 = (id)static SyncKeysRepository.shared.getter(v4);
  swift_bridgeObjectRetain(object);
  SyncKeysRepository.podcastsDomainVersion.setter(countAndFlagsBits, object);

}

unint64_t sub_1001CCF70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005585A8;
  if (!qword_1005585A8)
  {
    v1 = sub_10003CA40(&qword_1005585A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005585A8);
  }
  return result;
}

unint64_t sub_1001CCFC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1001CD3CC(a1, v4);
}

unint64_t sub_1001CCFF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_1001CD980(a1, v7);
}

unint64_t sub_1001CD07C(uint64_t a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  NavigationTab.hash(into:)(v5, a1);
  v3 = Hasher._finalize()();
  return sub_1001CD490(a1, v3);
}

unint64_t sub_1001CD0D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for MediaRequest.ContentType(0);
  v6 = sub_100026844((unint64_t *)&unk_1005641B0, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1001CD598(a1, v7);
}

unint64_t sub_1001CD140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  v3 = type metadata accessor for UUID(0);
  v4 = sub_100026844((unint64_t *)&unk_100558620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v7, v3, v4);
  v5 = Hasher._finalize()();
  return sub_1001CD6D8(a1, v5);
}

unint64_t sub_1001CD1C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v6 = a3 & 1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(v3 + 40));
  EpisodeStateIdentifier.hash(into:)(v9, a1, a2, v6);
  v7 = Hasher._finalize()();
  return sub_1001CDAF4(a1, a2, v6, v7);
}

unint64_t sub_1001CD240(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1001CDC70(a1, v4, &qword_100558618, AVURLAsset_ptr);
}

unint64_t sub_1001CD28C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1001CDC70(a1, v4, &qword_100558610, AVAssetDownloadTask_ptr);
}

unint64_t sub_1001CD2D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1001CDC70(a1, v4, &qword_10055B1E0, NSURLSessionTask_ptr);
}

unint64_t sub_1001CD324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1001CDC70(a1, v4, &qword_100553D90, NSManagedObjectID_ptr);
}

unint64_t sub_1001CD370(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = v1;
  v4 = a1 & 1;
  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  Hasher._combine(_:)(a1 & 1);
  v5 = Hasher._finalize()();
  return sub_1001CDD80(v4, v5);
}

unint64_t sub_1001CD3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_100048678(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100048644((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1001CD490(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    sub_10013BE1C(v7);
    v8 = static NavigationTab.== infix(_:_:)(v7, a1);
    sub_100175988(v7);
    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
        sub_10013BE1C(v10);
        v11 = static NavigationTab.== infix(_:_:)(v10, a1);
        sub_100175988(v10);
        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1001CD598(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for MediaRequest.ContentType(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100026844((unint64_t *)&unk_100558630, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1001CD6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;

  v5 = (int *)type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    return v10;
  v11 = ~v9;
  v12 = *(_QWORD *)(v6 + 72);
  v37 = a1 + 24;
  v38 = v8 + 24;
  while (1)
  {
    sub_1001952F0(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8);
    if ((static UUID.== infix(_:_:)(v8, a1) & 1) == 0)
      goto LABEL_4;
    v13 = v5[5];
    v14 = *(_QWORD *)&v8[v13];
    v15 = *(_QWORD *)&v8[v13 + 8];
    v16 = (_QWORD *)(a1 + v13);
    v17 = v16[1];
    v18 = v14 == *v16 && v15 == v17;
    if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, *v16, v17, 0) & 1) == 0)
      goto LABEL_4;
    if ((static Date.== infix(_:_:)(&v8[v5[6]], a1 + v5[6]) & 1) == 0
      || *(_QWORD *)&v8[v5[7]] != *(_QWORD *)(a1 + v5[7]))
    {
      goto LABEL_4;
    }
    v19 = v5[8];
    v20 = *(_QWORD *)&v8[v19];
    v21 = *(_QWORD *)&v8[v19 + 8];
    v22 = v8[v19 + 16];
    v23 = a1 + v19;
    v24 = *(_QWORD *)(v23 + 8);
    v25 = *(unsigned __int8 *)(v23 + 16);
    v26 = v20 == *(_QWORD *)v23 && v21 == v24;
    if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *(_QWORD *)v23, v24, 0) & 1) == 0)
      goto LABEL_4;
    v27 = v22 ? 1936484398 : 0x7261646E6174732ELL;
    v28 = v22 ? 0xE400000000000000 : 0xE900000000000064;
    v29 = v25 ? 1936484398 : 0x7261646E6174732ELL;
    v30 = v25 ? 0xE400000000000000 : 0xE900000000000064;
    if (v27 == v29 && v28 == v30)
      break;
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v29, v30, 0);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v30);
    if ((v39 & 1) != 0)
      goto LABEL_37;
LABEL_4:
    sub_1001959BC((uint64_t)v8);
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      return v10;
  }
  swift_bridgeObjectRelease_n(v28, 2);
LABEL_37:
  if ((sub_1001DB29C((uint64_t)&v8[v5[9]], a1 + v5[9]) & 1) == 0)
    goto LABEL_4;
  v32 = v5[10];
  v33 = *(_QWORD *)&v38[v32];
  v34 = *(_QWORD *)(v37 + v32);
  switch(v33)
  {
    case 1:
      if (v34 != 1)
        goto LABEL_4;
      break;
    case 2:
      if (v34 != 2)
        goto LABEL_4;
      break;
    case 3:
      if (v34 != 3)
        goto LABEL_4;
      break;
    case 4:
      if (v34 != 4)
        goto LABEL_4;
      break;
    default:
      if ((unint64_t)(v34 - 1) < 4)
        goto LABEL_4;
      break;
  }
  sub_1001959BC((uint64_t)v8);
  return v10;
}

unint64_t sub_1001CD980(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1001CDAF4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v10 = a3 & 1;
    v11 = *(_QWORD *)(v4 + 48) + 24 * i;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(unsigned __int8 *)(v11 + 16);
    sub_10003CAD8(*(_QWORD *)v11, v13, *(_BYTE *)(v11 + 16));
    v22 = a2;
    LOBYTE(a2) = static EpisodeStateIdentifier.== infix(_:_:)(v12, v13, v14, a1, a2, v10);
    sub_10003CA84(v12, v13, v14);
    if ((a2 & 1) == 0)
    {
      v15 = ~v6;
      for (i = (i + 1) & v15; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v15)
      {
        v16 = *(_QWORD *)(v4 + 48) + 24 * i;
        v17 = *(_QWORD *)v16;
        v18 = *(_QWORD *)(v16 + 8);
        v19 = *(unsigned __int8 *)(v16 + 16);
        sub_10003CAD8(*(_QWORD *)v16, v18, *(_BYTE *)(v16 + 16));
        v20 = static EpisodeStateIdentifier.== infix(_:_:)(v17, v18, v19, a1, v22, v10);
        sub_10003CA84(v17, v18, v19);
        if ((v20 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1001CDC70(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_100005EC8(0, a3, a4);
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      v10 = ~v6;
      for (i = (i + 1) & v10; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v10)
      {
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1001CDD80(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((((a1 & 1) == 0) ^ *(_BYTE *)(v7 + result)) & 1) != 0)
          break;
      }
    }
  }
  return result;
}

_QWORD *sub_1001CDE3C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  objc_class *v12;
  char *v13;
  uint64_t *v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  objc_super v20;
  unint64_t v21;

  result = _swiftEmptyArrayStorage;
  v21 = (unint64_t)_swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
    swift_bridgeObjectRetain(a1);
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(v5 + 16))
      {
        v8 = *(v6 - 1);
        v7 = *v6;
        swift_bridgeObjectRetain_n(*v6, 2);
        v9 = sub_10002E5D8(v8, v7);
        if ((v10 & 1) != 0)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v9);
          swift_unknownObjectRetain(v11);
          swift_bridgeObjectRelease(v7);
          v12 = (objc_class *)type metadata accessor for KeyProcessorPair();
          v13 = (char *)objc_allocWithZone(v12);
          v14 = (uint64_t *)&v13[OBJC_IVAR___MTKeyProcessorPair_key];
          *v14 = v8;
          v14[1] = v7;
          *(_QWORD *)&v13[OBJC_IVAR___MTKeyProcessorPair_processor] = v11;
          v20.receiver = v13;
          v20.super_class = v12;
          v15 = objc_msgSendSuper2(&v20, "init");
          if (v15)
          {
            v16 = v15;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
            v18 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v17 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v18 >= v17 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
            v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
            specialized Array._endMutation()(v19);
          }
        }
        else
        {
          swift_bridgeObjectRelease_n(v7, 2);
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a1);
    return (_QWORD *)v21;
  }
  return result;
}

uint64_t type metadata accessor for KeyProcessorPair()
{
  return objc_opt_self(MTKeyProcessorPair);
}

uint64_t type metadata accessor for MultiKeySyncProcessor()
{
  return objc_opt_self(MTMultiKeySyncProcessor);
}

uint64_t sub_1001CDFFC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001CE020(char a1)
{
  uint64_t v1;

  return sub_10023CC64(a1, *(_QWORD *)(v1 + 16));
}

id sub_1001CE044()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LibraryViewControllerProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001CE078()
{
  id v0;
  uint64_t v2[7];

  sub_1001AE2F4(2, 0xD000000000000018, 0x800000010042FC00, v2);
  v0 = objc_allocWithZone((Class)sub_10003F544(&qword_1005586D8));
  return UIHostingController.init(rootView:)(v2);
}

void sub_1001CE0DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  id v5;
  id v6;
  NSString v7;
  id v8;

  v4 = *v2;
  v5 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
  v6 = objc_allocWithZone((Class)MTiOSPlaylistSettingsViewController);
  swift_bridgeObjectRetain(a2);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = objc_msgSend(v6, "initWithPlaylistUuid:library:", v7, v5);

  if (v8)
    objc_msgSend(v8, "setDelegate:", v4);
  else
    __break(1u);
}

id sub_1001CE1A8(uint64_t a1)
{
  return objc_msgSend((id)objc_opt_self(MTDownloadsCollectionViewController), "defaultViewControllerWithLibraryActionControllerBridge:", a1);
}

id sub_1001CE1E4()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)MTInlineNowPlayingIndicatorView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_10000A2C8(&qword_1005586C8, (unint64_t *)&qword_1005586D0, off_1004A4430, (uint64_t)&protocol conformance descriptor for MTInlineNowPlayingIndicatorView);
  return v0;
}

uint64_t sub_1001CE254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *ObjCClassFromMetadata;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD v13[5];
  _BYTE v14[152];

  v4 = sub_100005EC8(0, &qword_100554590, &off_1004A4480);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v4);
  v6 = objc_msgSend(ObjCClassFromMetadata, "sharedInstance", swift_bridgeObjectRetain(a2).n128_f64[0]);
  v7 = sub_10000A2C8((unint64_t *)&qword_100553BB0, &qword_100554590, &off_1004A4480, (uint64_t)&protocol conformance descriptor for MTNotificationManager);
  v13[3] = &type metadata for ShowSettingsController;
  v13[4] = &off_1004B98A0;
  v8 = (_QWORD *)swift_allocObject(&unk_1004B3A08, 48, 7);
  v13[0] = v8;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v6;
  v8[5] = v7;
  swift_bridgeObjectRetain(a2);
  v9 = v6;
  sub_10022C058(v13, (uint64_t)v14);
  v10 = objc_allocWithZone((Class)sub_10003F544((uint64_t *)&unk_1005586E0));
  v11 = UIHostingController.init(rootView:)(v14);

  swift_bridgeObjectRelease(a2);
  return v11;
}

char *sub_1001CE378(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = type metadata accessor for MTNotificationSettingsViewController();
  v5 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4)), "init");
  v6 = &v5[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_newEpisodeNotifcationGroupInitialHighlightedPodcastUuid];
  v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_newEpisodeNotifcationGroupInitialHighlightedPodcastUuid
                    + 8];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v7);
  v8 = *((_QWORD *)v6 + 1);
  v9 = (_QWORD *)(*(_QWORD *)&v5[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_sectionedContentViewController]
                + OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeNotifcationGroupInitialHighlightedPodcastUuid);
  v10 = v9[1];
  *v9 = *(_QWORD *)v6;
  v9[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v10);
  return v5;
}

uint64_t sub_1001CE42C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001CE458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_100555140);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544((uint64_t *)&unk_1005588E0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_100555150);
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100181038();
  v16 = static OS_os_log.carPlay.getter(v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "CarPlayStoreShowProvider: Fetch content called.", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v47[0] = StorePageProvider.pageContent.getter(v20);
  v21 = swift_allocObject(&unk_1004B3A90, 24, 7);
  swift_weakInit(v21 + 16, v1);
  v22 = sub_10003F544(&qword_100552190);
  v23 = sub_10003F544(&qword_100553E70);
  v24 = sub_10002F9C8((unint64_t *)&unk_100555170, &qword_100552190, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.compactMap<A>(_:)(sub_1001D07A0, v21, v22, v23, v24);
  swift_release(v21);
  swift_release(v47[0]);
  v25 = sub_10002F9C8((unint64_t *)&unk_1005588F0, (uint64_t *)&unk_100555140, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v26 = v42;
  Publisher.removeDuplicates(by:)(sub_1001CEEF4, 0, v42, v25);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v4, v26);
  v47[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_updatePlayStateSubject);
  v27 = sub_10003F544((uint64_t *)&unk_100555110);
  v28 = sub_10002F9C8((unint64_t *)&unk_100555180, (uint64_t *)&unk_1005588E0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v29 = sub_10002F9C8(&qword_1005564C0, (uint64_t *)&unk_100555110, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v30 = v44;
  Publisher.combineLatest<A>(_:)(v47, v44, v27, v28, v29);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v30);
  v31 = swift_allocObject(&unk_1004B3A90, 24, 7);
  swift_weakInit(v31 + 16, v1);
  v32 = swift_allocObject(&unk_1004B3AB8, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_1001D07A8;
  *(_QWORD *)(v32 + 24) = v31;
  v33 = sub_10002F9C8(&qword_100555198, &qword_100555150, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v34 = v46;
  v35 = Publisher<>.sink(receiveValue:)(sub_1001D07D4, v32, v46, v33);
  swift_release(v32);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v34);
  v36 = v1 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_subscriptions;
  swift_beginAccess(v36, v47, 33, 0);
  v37 = sub_10003F544((uint64_t *)&unk_100556450);
  v38 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v36, v37, v38);
  swift_endAccess(v47);
  return swift_release(v35);
}

void sub_1001CE8BC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  __n128 v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  void (*v61)(char *, char *, uint64_t, __n128);
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t Strong;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  _BYTE v76[8];
  _QWORD *v77;
  _BYTE v78[32];

  v6 = type metadata accessor for Logger(0);
  v70 = *(_QWORD *)(v6 - 8);
  v71 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v72 = *(_QWORD *)(v9 - 8);
  v73 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for ModernShelf(0);
  v12 = *(_QWORD *)(v66 - 8);
  v13 = __chkstk_darwin(v66);
  v65 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v60 - v15;
  v17 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v17);
  v64 = (uint64_t)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v19);
  v21 = (_QWORD **)((char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v78, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
  {
    *a3 = 0;
    return;
  }
  v63 = a3;
  sub_100186174(a1, (uint64_t)v21);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v19);
  if (EnumCaseMultiPayload == 1)
  {
    v48 = *v21;
    swift_release(v21[2]);
    v49 = sub_100181038();
    static OS_os_log.carPlay.getter(v49);
    swift_errorRetain(v48);
    v50 = swift_errorRetain(v48);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = (_QWORD *)swift_slowAlloc(32, -1);
      v77 = v54;
      *(_DWORD *)v53 = 136315138;
      swift_getErrorValue(v48, v76, v75);
      v55 = Error.localizedDescription.getter(v75[1], v75[2]);
      v57 = v56;
      v74 = sub_10003D274(v55, v56, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v53 + 4, v53 + 12);
      swift_bridgeObjectRelease(v57);
      swift_errorRelease(v48);
      swift_errorRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to load the Store Show store page with error: %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

      swift_release(Strong);
      swift_errorRelease(v48);
    }
    else
    {
      swift_release(Strong);
      swift_errorRelease(v48);
      swift_errorRelease(v48);
      swift_errorRelease(v48);

    }
    (*(void (**)(char *, unint64_t))(v70 + 8))(v8, v71);
    goto LABEL_29;
  }
  v23 = Strong;
  if (EnumCaseMultiPayload != 3)
  {
    swift_release(Strong);
    sub_10003F970((uint64_t)v21, (uint64_t (*)(_QWORD))&type metadata accessor for PageContent);
LABEL_29:
    *v63 = 0;
    return;
  }
  v24 = v64;
  sub_1001D0EFC((uint64_t)v21, v64);
  v25 = *(_QWORD *)(v24 + *(int *)(v17 + 24));
  v26 = _swiftEmptyArrayStorage;
  v77 = _swiftEmptyArrayStorage;
  v27 = *(_QWORD *)(v25 + 16);
  v67 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_unsupportedSectionIds;
  v62 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_supportedItemModelTypes;
  swift_bridgeObjectRetain(v25);
  v28 = swift_retain();
  v70 = v27;
  if (v27)
  {
    v60 = v21;
    v29 = 0;
    v30 = v66;
    v69 = v25;
    while (v29 < *(_QWORD *)(v25 + 16))
    {
      v31 = *(_QWORD *)(v12 + 72);
      v71 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v32 = (*(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v12 + 16))(v16, v25 + v71 + v31 * v29, v30, v28);
      if ((ModernShelf.hideFromCarPlay.getter(v32) & 1) != 0
        || (v33 = *(_QWORD *)(v23 + v67),
            v34 = ModernShelf.id.getter(),
            v36 = v35,
            LOBYTE(v33) = sub_10029113C(v34, v35, v33),
            swift_bridgeObjectRelease(v36),
            (v33 & 1) != 0)
        || (v37 = *(_QWORD *)(v23 + v62), (v38 = *(_QWORD *)(v37 + 16)) == 0))
      {
LABEL_14:
        (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v30);
      }
      else
      {
        v39 = swift_bridgeObjectRetain(*(_QWORD *)(v23 + v62));
        v40 = 32;
        while (1)
        {
          v41 = *(_QWORD *)(v37 + v40);
          v42.n128_f64[0] = ModernShelf.itemPresentation.getter(v39);
          v43 = ModernShelf.ItemPresentation.itemKind.getter(v42);
          (*(void (**)(char *, uint64_t))(v72 + 8))(v11, v73);
          if (v41 == ModernShelf.ItemKind.modelType.getter(v43))
            break;
          v40 += 16;
          if (!--v38)
          {
            swift_bridgeObjectRelease(v37);
            v23 = Strong;
            v30 = v66;
            goto LABEL_14;
          }
        }
        v44 = swift_bridgeObjectRelease(v37);
        v30 = v66;
        v61 = *(void (**)(char *, char *, uint64_t, __n128))(v12 + 32);
        v61(v65, v16, v66, v44);
        v45 = v77;
        if ((swift_isUniquelyReferenced_nonNull_native(v77) & 1) == 0)
        {
          sub_10017B234(0, v45[2] + 1, 1);
          v45 = v77;
        }
        v23 = Strong;
        v47 = v45[2];
        v46 = v45[3];
        if (v47 >= v46 >> 1)
        {
          sub_10017B234(v46 > 1, v47 + 1, 1);
          v45 = v77;
        }
        v45[2] = v47 + 1;
        ((void (*)(char *, char *, uint64_t))v61)((char *)v45 + v71 + v47 * v31, v65, v30);
        v77 = v45;
      }
      ++v29;
      v25 = v69;
      if (v29 == v70)
      {
        v26 = v77;
        v21 = v60;
        goto LABEL_26;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_26:
    swift_bridgeObjectRelease(v25);
    v58 = *(int *)(sub_10003F544((uint64_t *)&unk_100555340) + 48);
    swift_release(v23);
    sub_10003F970(v64, (uint64_t (*)(_QWORD))&type metadata accessor for ModernPage);
    swift_release(v23);
    *v63 = v26;
    v59 = type metadata accessor for PageRenderContentTypes(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v59 - 8) + 8))((char *)v21 + v58, v59);
  }
}

uint64_t sub_1001CEEF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  double (*v34)(char *, uint64_t, uint64_t);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char v45;
  uint64_t v47;
  double (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v4 = sub_10003F544(&qword_100553DD8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v47 - v8;
  v53 = type metadata accessor for ModernShelf(0);
  v10 = *(_QWORD *)(v53 - 8);
  v11 = __chkstk_darwin(v53);
  v51 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - v13;
  v15 = *a1;
  v16 = *a2;
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = _swiftEmptyArrayStorage;
  v50 = v7;
  v52 = v10;
  if (v17)
  {
    v47 = v16;
    v54 = _swiftEmptyArrayStorage;
    sub_10017B260(0, v17, 0);
    v19 = v15 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v20 = *(_QWORD *)(v10 + 72);
    v48 = *(double (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v49 = v20;
    do
    {
      v21.n128_f64[0] = v48(v14, v19, v53);
      ModernShelf.header.getter(v21);
      v22 = type metadata accessor for Header(0);
      v23 = *(_QWORD *)(v22 - 8);
      v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v9, 1, v22);
      if ((_DWORD)v24 == 1)
      {
        sub_100007A28((uint64_t)v9, &qword_100553DD8);
        v25 = 0;
        v26 = 0;
      }
      else
      {
        v25 = Header.title.getter(v24);
        v26 = v27;
        (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v22);
      }
      (*(void (**)(char *, uint64_t))(v52 + 8))(v14, v53);
      v18 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
      {
        sub_10017B260(0, v18[2] + 1, 1);
        v18 = v54;
      }
      v29 = v18[2];
      v28 = v18[3];
      if (v29 >= v28 >> 1)
      {
        sub_10017B260(v28 > 1, v29 + 1, 1);
        v18 = v54;
      }
      v18[2] = v29 + 1;
      v30 = &v18[2 * v29];
      v30[4] = v25;
      v30[5] = v26;
      v19 += v49;
      --v17;
    }
    while (v17);
    v7 = v50;
    v10 = v52;
    v16 = v47;
  }
  v31 = *(_QWORD *)(v16 + 16);
  v32 = _swiftEmptyArrayStorage;
  if (v31)
  {
    v54 = _swiftEmptyArrayStorage;
    sub_10017B260(0, v31, 0);
    v33 = v16 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v49 = *(_QWORD *)(v10 + 72);
    v34 = *(double (**)(char *, uint64_t, uint64_t))(v10 + 16);
    do
    {
      v35.n128_f64[0] = v34(v51, v33, v53);
      ModernShelf.header.getter(v35);
      v36 = type metadata accessor for Header(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v7, 1, v36);
      if ((_DWORD)v38 == 1)
      {
        sub_100007A28((uint64_t)v7, &qword_100553DD8);
        v39 = 0;
        v40 = 0;
      }
      else
      {
        v39 = Header.title.getter(v38);
        v40 = v41;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v36);
      }
      (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
      v32 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
      {
        sub_10017B260(0, v32[2] + 1, 1);
        v32 = v54;
      }
      v43 = v32[2];
      v42 = v32[3];
      if (v43 >= v42 >> 1)
      {
        sub_10017B260(v42 > 1, v43 + 1, 1);
        v32 = v54;
      }
      v32[2] = v43 + 1;
      v44 = &v32[2 * v43];
      v44[4] = v39;
      v44[5] = v40;
      v7 = v50;
      v33 += v49;
      --v31;
    }
    while (v31);
  }
  v45 = sub_1001634FC((uint64_t)v18, (uint64_t)v32);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v32);
  return v45 & 1;
}

uint64_t sub_1001CF2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = (_QWORD *)result;
    swift_retain();
    sub_1001D07DC(a1, (uint64_t)v5, v5);
    return swift_release_n(v5, 2);
  }
  return result;
}

uint64_t sub_1001CF344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;

  v1 = v0;
  v2 = EpisodeStateController.stateMachine(for:)();
  v3 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_stateMachine;
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_stateMachine);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_stateMachine) = v2;
  result = swift_release(v4);
  v6 = *(_QWORD *)(v0 + v3);
  if (v6)
  {
    v7 = swift_retain();
    dispatch thunk of EpisodeStateMachine.removeStateTransitionActions(for:)(v1, v7);
    result = swift_release(v6);
    v8 = *(_QWORD *)(v1 + v3);
    if (v8)
    {
      v9 = swift_allocObject(&unk_1004B3A90, 24, 7);
      swift_weakInit(v9 + 16, v1);
      v10 = swift_retain();
      dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)(v1, sub_1001D0EF4, v9, v10);
      swift_release(v8);
      return swift_release(v9);
    }
  }
  return result;
}

uint64_t sub_1001CF414(void *a1, uint64_t a2, NSObject *a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t result;
  id v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  Class isa;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  char *v78;
  Class v79;
  NSString v80;
  id v81;
  id v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _BYTE v110[4];
  int v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t);
  NSObject *v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  unint64_t countAndFlagsBits;
  _QWORD v120[4];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124[24];
  _OWORD v125[4];
  Swift::String v126;

  v12 = type metadata accessor for Logger(0);
  v117 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v118 = &v110[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for ModernShelf(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v110[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v124, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v116 = result;
    v123 = (uint64_t)_swiftEmptyArrayStorage;
    v115 = a3;
    if (a1)
    {
      v19 = a1;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
      v21 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v20 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v21 >= v20 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
      specialized Array._endMutation()(v22);
      a3 = v115;
    }
    v112 = v12;
    v113 = a6;
    v114 = a5;
    v23 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v125[0] = _swiftEmptyArrayStorage;
    isa = a3[2].isa;
    if (isa)
    {
      v25 = (uint64_t)a3 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
      v26 = *(_QWORD *)(v15 + 72);
      v27 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, __n128))(v15 + 16);
      v28 = swift_bridgeObjectRetain(a3);
      do
      {
        v29 = v27(v17, v25, v14, v28);
        v30 = ModernShelf.items.getter(v29);
        (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
        sub_100173A40(v30);
        v25 += v26;
        isa = (Class)((char *)isa - 1);
      }
      while (isa);
      swift_bridgeObjectRelease(v115);
      v31 = *(_QWORD **)&v125[0];
      v23 = _swiftEmptyArrayStorage;
    }
    else
    {
      v31 = _swiftEmptyArrayStorage;
    }
    v122 = (uint64_t)_swiftEmptyArrayStorage;
    v32 = v31[2];
    if (v32)
    {
      v33 = (uint64_t)(v31 + 4);
      swift_bridgeObjectRetain(v31);
      do
      {
        sub_10000A520(v33, (uint64_t)v125);
        sub_10000A520((uint64_t)v125, (uint64_t)&countAndFlagsBits);
        v35 = sub_10003F544(&qword_1005545F0);
        v36 = type metadata accessor for LegacyEpisodeLockup(0);
        if ((swift_dynamicCast(&v121, &countAndFlagsBits, v35, v36, 6) & 1) == 0)
          v121 = 0;
        v37 = sub_10003D380(v125);
        v38 = v121;
        if (v121)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
          v40 = *(_QWORD *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v39 = *(_QWORD *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v40 >= v39 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v38);
          specialized Array._endMutation()(v34);
        }
        v33 += 40;
        --v32;
      }
      while (v32);
      swift_bridgeObjectRelease(v31);
      v41 = v122;
    }
    else
    {
      v41 = (uint64_t)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v31);
    *(_QWORD *)&v125[0] = _swiftEmptyArrayStorage;
    if ((unint64_t)v41 >> 62)
    {
      if (v41 < 0)
        v50 = v41;
      else
        v50 = v41 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v41);
      v42 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease(v41);
      if (v42)
        goto LABEL_24;
    }
    else
    {
      v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v42)
      {
LABEL_24:
        if (v42 < 1)
        {
          __break(1u);
          goto LABEL_76;
        }
        for (i = 0; i != v42; ++i)
        {
          if ((v41 & 0xC000000000000001) != 0)
          {
            v46 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v41);
          }
          else
          {
            v46 = *(_QWORD *)(v41 + 8 * i + 32);
            v47 = swift_retain();
          }
          v48 = LegacyLockup.adamId.getter(v47);
          if (v48 == a4)
          {
            swift_release(v46);
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v48);
            v44 = *(_QWORD *)(*(_QWORD *)&v125[0] + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v44);
            v45 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v46);
            specialized ContiguousArray._endMutation()(v45);
          }
        }
        swift_bridgeObjectRelease(v41);
        v49 = *(_QWORD **)&v125[0];
LABEL_39:
        *(_QWORD *)&v125[0] = v49;
        v51 = sub_10003F544((uint64_t *)&unk_100558910);
        v52 = sub_10002F9C8((unint64_t *)&unk_100554510, (uint64_t *)&unk_100558910, (uint64_t)&protocol conformance descriptor for [A]);
        if ((Collection.isNotEmpty.getter(v51, v52, v53) & 1) == 0)
        {
          swift_release(v49);
          v23 = v118;
          goto LABEL_49;
        }
        v54 = v116;
        v31 = *(_QWORD **)(v116 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_didSelectItemSubject);
        v55 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeDataProvider;
        v56 = *(_QWORD *)(v116 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_playStateController);
        v57 = *(_QWORD *)(v116 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_downloadStateController);
        v59 = *(_OWORD *)(v116 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo + 16);
        v58 = *(_OWORD *)(v116 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo + 32);
        v125[0] = *(_OWORD *)(v116 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo);
        v125[1] = v59;
        v125[2] = v58;
        countAndFlagsBits = (unint64_t)v49;
        swift_retain();
        swift_retain();
        v60 = swift_retain();
        if ((Collection.isNotEmpty.getter(v51, v52, v60) & 1) != 0)
        {
          v62 = v54 + v55;
          countAndFlagsBits = (unint64_t)v49;
          KeyPath = swift_getKeyPath(&unk_1003CD328, v61);
          v64 = sub_10002F9C8(&qword_100558920, (uint64_t *)&unk_100558910, (uint64_t)&protocol conformance descriptor for [A]);
          v65 = sub_1001D0E78();
          v66 = Sequence.uniqued<A>(by:)(KeyPath, v51, v64, v65);
          v67 = swift_release(KeyPath);
          __chkstk_darwin(v67);
          *(_QWORD *)&v110[-48] = v62;
          *(_QWORD *)&v110[-40] = v56;
          *(_QWORD *)&v110[-32] = v57;
          *(_QWORD *)&v110[-24] = v125;
          v126._object = sub_100181074;
          v109 = v31;
          a4 = (uint64_t)sub_100327454((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1001D0ED4, (uint64_t)&v110[-64], v66);
          swift_release(v56);
          swift_release(v57);
          swift_release(v49);
          swift_bridgeObjectRelease(v66);
        }
        else
        {
          swift_release(v56);
          swift_release(v57);
          swift_release(v49);
          a4 = (uint64_t)_swiftEmptyArrayStorage;
        }
        v23 = v118;
        if (!((unint64_t)a4 >> 62))
        {
          swift_bridgeObjectRetain(a4);
          dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v68);
          v69 = a4;
LABEL_46:
          swift_bridgeObjectRelease(a4);
          v70 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v126._object = (void *)0xE000000000000000;
          v71._countAndFlagsBits = 0x5345444F53495045;
          v71._object = (void *)0xE800000000000000;
          v72._countAndFlagsBits = 0;
          v72._object = (void *)0xE000000000000000;
          v126._countAndFlagsBits = 0;
          v73 = NSLocalizedString(_:tableName:bundle:value:comment:)(v71, (Swift::String_optional)0, (NSBundle)v70, v72, v126);

          countAndFlagsBits = v73._countAndFlagsBits;
          v120[0] = v73._object;
          v74 = sub_10016D37C();
          StringProtocol.localizedUppercase.getter(&type metadata for String, v74);
          v76 = v75;
          swift_bridgeObjectRelease(v73._object);
          v77 = objc_allocWithZone((Class)CPListSection);
          v78 = sub_100180784(v69);
          swift_bridgeObjectRelease(v69);
          v79 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v78);
          v80 = String._bridgeToObjectiveC()();
          v81 = objc_msgSend(v77, "initWithItems:header:sectionIndexTitle:", v79, v80, 0, swift_bridgeObjectRelease(v76).n128_f64[0]);

          v82 = v81;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v82);
          v84 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v83 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v84 >= v83 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
          v85 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v84, v82);
          specialized Array._endMutation()(v85);
          swift_release(v31);

LABEL_49:
          v86 = sub_100181038();
          static OS_os_log.carPlay.getter(v86);
          v87 = v123;
          v88 = swift_bridgeObjectRetain_n(v123, 4);
          v89 = Logger.logObject.getter(v88);
          v90 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v89, (os_log_type_t)v90))
          {

            swift_bridgeObjectRelease_n(v87, 4);
LABEL_64:
            (*(void (**)(_QWORD *, uint64_t))(v117 + 8))(v23, v112);
            swift_beginAccess(&v123, &countAndFlagsBits, 0, 0);
            v103 = v123;
            v114(v123);
            swift_bridgeObjectRelease(v103);
            return swift_release(v116);
          }
          v91 = swift_slowAlloc(22, -1);
          *(_DWORD *)v91 = 134218240;
          if ((unint64_t)v87 >> 62)
          {
            if (v87 < 0)
              v108 = v87;
            else
              v108 = v87 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v87);
            v92 = _CocoaArrayWrapper.endIndex.getter(v108);
            swift_bridgeObjectRelease(v87);
          }
          else
          {
            v92 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v87);
          countAndFlagsBits = v92;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&countAndFlagsBits, v120, v91 + 4, v91 + 12);
          swift_bridgeObjectRelease(v87);
          *(_WORD *)(v91 + 12) = 2048;
          countAndFlagsBits = (unint64_t)_swiftEmptyArrayStorage;
          if ((unint64_t)v87 >> 62)
          {
            if (v87 < 0)
              v104 = v87;
            else
              v104 = v87 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain_n(v87, 2);
            result = _CocoaArrayWrapper.endIndex.getter(v104);
            v93 = result;
            if (result)
            {
LABEL_54:
              v111 = v90;
              v115 = v89;
              if (v93 < 1)
              {
                __break(1u);
                return result;
              }
              v94 = 0;
              do
              {
                if ((v87 & 0xC000000000000001) != 0)
                  v95 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v94, v87);
                else
                  v95 = *(id *)(v87 + 8 * v94 + 32);
                v96 = v95;
                ++v94;
                v97 = objc_msgSend(v95, "items");
                v98 = sub_10003F544(&qword_1005544F0);
                v99 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v97, v98);

                sub_1001734C4(v99);
              }
              while (v93 != v94);
              swift_bridgeObjectRelease_n(v87, 2);
              v100 = countAndFlagsBits;
              v23 = v118;
              v89 = v115;
              LOBYTE(v90) = v111;
              if (!(countAndFlagsBits >> 62))
                goto LABEL_62;
              goto LABEL_71;
            }
          }
          else
          {
            v93 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10);
            result = swift_bridgeObjectRetain_n(v87, 2);
            if (v93)
              goto LABEL_54;
          }
          swift_bridgeObjectRelease_n(v87, 2);
          v100 = (uint64_t)_swiftEmptyArrayStorage;
          if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
          {
LABEL_62:
            v101 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFF8) + 0x10);
            v102 = v87;
LABEL_63:
            swift_bridgeObjectRelease(v102);
            swift_bridgeObjectRelease(v100);
            countAndFlagsBits = v101;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&countAndFlagsBits, v120, v91 + 14, v91 + 22);
            swift_bridgeObjectRelease(v87);
            _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v90, "CarPlayStoreShowProvider: Returned sections count %ld and total section items count %ld.", (uint8_t *)v91, 0x16u);
            swift_slowDealloc(v91, -1, -1);

            goto LABEL_64;
          }
LABEL_71:
          if (v100 < 0)
            v105 = v100;
          else
            v105 = v100 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v100);
          v101 = _CocoaArrayWrapper.endIndex.getter(v105);
          swift_bridgeObjectRelease(v87);
          v102 = v100;
          goto LABEL_63;
        }
LABEL_76:
        if (a4 < 0)
          v106 = a4;
        else
          v106 = a4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a4);
        v107 = sub_10003F544(&qword_1005544F0);
        v69 = _bridgeCocoaArray<A>(_:)(v106, v107);
        swift_bridgeObjectRelease(a4);
        goto LABEL_46;
      }
    }
    swift_bridgeObjectRelease(v41);
    v49 = _swiftEmptyArrayStorage;
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_1001CFED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _QWORD v13[2];
  _BYTE v14[24];

  v3 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v14, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    dispatch thunk of EpisodeStateMachine.currentState.getter(result);
    v8 = dispatch thunk of SmartPlayButtonController.buttonTitle(for:)(v5);
    v10 = v9;
    sub_10003F970((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    v13[0] = v8;
    v13[1] = v10;
    CurrentValueSubject.send(_:)(v13, v11);
    swift_bridgeObjectRelease(v10);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1001CFFC8()
{
  uint64_t v0;

  sub_100007A28(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_pageURL, (uint64_t *)&unk_100553DC0);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storePageProvider));
  sub_10003D380((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeDataProvider));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_playStateController));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_smartPlayButtonController));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_downloadStateController));
  sub_10003D380((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_imageProvider));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeSectionsSubject));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_smartPlayEpisodeTitleSubject));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_didSelectItemSubject));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_unsupportedSectionIds));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_supportedItemModelTypes));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_updatePlayStateSubject));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_subscriptions));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_stateMachine));
  return v0;
}

uint64_t sub_1001D00D4()
{
  uint64_t v0;

  sub_1001CFFC8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001D00F8()
{
  return type metadata accessor for CarPlayStoreShowProvider(0);
}

uint64_t type metadata accessor for CarPlayStoreShowProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100558798;
  if (!qword_100558798)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CarPlayStoreShowProvider);
  return result;
}

void sub_1001D013C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[16];

  sub_1000048DC(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "0";
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = &unk_1003CD2D8;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = &unk_1003CD2D8;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[15] = &unk_1003CD2F0;
    swift_updateClassMetadata2(a1, 256, 16, v4, a1 + 80);
  }
}

uint64_t sub_1001D01F0(uint64_t a1, uint64_t a2)
{
  return sub_1001D0228(a1, a2, (uint64_t)&OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeSectionsSubject, &qword_100555100, &qword_100555108);
}

uint64_t sub_1001D020C(uint64_t a1, uint64_t a2)
{
  return sub_1001D0228(a1, a2, (uint64_t)&OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_didSelectItemSubject, (uint64_t *)&unk_1005550F0, &qword_100554FB0);
}

uint64_t sub_1001D0228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;

  v7 = sub_10003F544(a4);
  v8 = sub_10002F9C8(a5, a4, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v7, v8);
}

uint64_t sub_1001D0298()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_1001D02C4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62[2];
  _BYTE v63[72];

  v5 = v4;
  v56 = a2;
  v57 = a3;
  v8 = type metadata accessor for SmartPlayPlatformContext(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SmartPlayContext(0);
  v58 = *(_QWORD *)(v11 - 8);
  v59 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v14);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeSectionsSubject;
  v18 = sub_10003F544(&qword_100555100);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_QWORD *)(v4 + v17) = PassthroughSubject.init()(v19);
  v20 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_smartPlayEpisodeTitleSubject;
  *(_QWORD *)&v62[0] = 0;
  *((_QWORD *)&v62[0] + 1) = 0xE000000000000000;
  v21 = sub_10003F544(&qword_1005588A8);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)(v4 + v20) = CurrentValueSubject.init(_:)(v62);
  v22 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_didSelectItemSubject;
  v23 = sub_10003F544((uint64_t *)&unk_1005550F0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(_QWORD *)(v4 + v22) = PassthroughSubject.init()(v24);
  v25 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_unsupportedSectionIds;
  v26 = sub_10003F544((uint64_t *)&unk_1005588B0);
  inited = swift_initStackObject(v26, v63);
  v55 = xmmword_1003CA220;
  *(_OWORD *)(inited + 16) = xmmword_1003CA220;
  *(_QWORD *)(inited + 32) = static String.pageHighlightShelfID.getter();
  *(_QWORD *)(inited + 40) = v28;
  *(_QWORD *)(inited + 48) = static String.loadingShelfID.getter();
  *(_QWORD *)(inited + 56) = v29;
  v30 = sub_10013B9DC(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 2, &type metadata for String);
  *(_QWORD *)(v5 + v25) = v30;
  v31 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_supportedItemModelTypes;
  v32 = sub_10003F544((uint64_t *)&unk_10055D820);
  v33 = swift_allocObject(v32, 64, 7);
  *(_OWORD *)(v33 + 16) = v55;
  v34 = type metadata accessor for ShowHeader(0);
  v35 = sub_100026844(&qword_1005588C0, (uint64_t (*)(uint64_t))&type metadata accessor for ShowHeader, (uint64_t)&protocol conformance descriptor for ShowHeader);
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v35;
  v36 = type metadata accessor for LegacyEpisodeLockup(0);
  v37 = sub_100026844(&qword_1005588C8, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyEpisodeLockup, (uint64_t)&protocol conformance descriptor for LegacyLockup);
  *(_QWORD *)(v33 + 48) = v36;
  *(_QWORD *)(v33 + 56) = v37;
  *(_QWORD *)(v5 + v31) = v33;
  v38 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_updatePlayStateSubject;
  v39 = sub_10003F544((uint64_t *)&unk_100555110);
  v40 = swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  *(_QWORD *)(v5 + v38) = CurrentValueSubject.init(_:)(v40);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_subscriptions) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_stateMachine) = 0;
  v41 = v56;
  sub_100036A44(v56, v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_pageURL);
  v42 = (_OWORD *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo);
  v43 = a4[1];
  *v42 = *a4;
  v42[1] = v43;
  v42[2] = a4[2];
  v44 = v41;
  sub_100036A44(v41, (uint64_t)v16);
  v45 = type metadata accessor for StorePageProvider(0);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  swift_retain();
  v46 = swift_retain();
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storePageProvider) = StorePageProvider.init(asPartOf:pageURL:page:)(v46);
  v47 = sub_10003F544((uint64_t *)&unk_100555120);
  BaseObjectGraph.inject<A>(_:)(v62, v47, v47);
  sub_10002099C(v62, v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeDataProvider);
  v48 = sub_10003F544(&qword_100553720);
  BaseObjectGraph.inject<A>(_:)(v62, v48, v48);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_playStateController) = *(_QWORD *)&v62[0];
  (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v13, enum case for SmartPlayContext.showPage(_:), v59);
  (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v10, enum case for SmartPlayPlatformContext.carPlay(_:), v61);
  v49 = type metadata accessor for SmartPlayButtonController(0);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v50 = swift_retain();
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_smartPlayButtonController) = SmartPlayButtonController.init(button:context:platform:objectGraph:)(0, v13, v10, a1, v50);
  v51 = sub_10003F544((uint64_t *)&unk_100555130);
  BaseObjectGraph.inject<A>(_:)(v62, v51, v51);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_downloadStateController) = *(_QWORD *)&v62[0];
  v52 = sub_10003F544((uint64_t *)&unk_1005588D0);
  BaseObjectGraph.inject<A>(_:)(v62, v52, v52);
  sub_10002099C(v62, v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_imageProvider);
  v53 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storePageProvider);
  swift_retain();
  StorePageProvider.viewDidLoad()();
  swift_release(v53);
  sub_1001CE458();
  sub_100007A28(v44, (uint64_t *)&unk_100553DC0);
  return v5;
}

uint64_t sub_1001D077C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001D07A0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1001CE8BC(a1, v2, a2);
}

uint64_t sub_1001D07A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001CF2D8(a1, v1);
}

uint64_t sub_1001D07B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D07D4(_QWORD *a1)
{
  uint64_t v1;

  return sub_100270A88(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

void sub_1001D07DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double (*v24)(char *, uint64_t, uint64_t, __n128);
  __n128 v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __n128 v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[3];

  v6 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EpisodeOffer(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v81 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v85 = *(_QWORD *)(v12 - 8);
  v86 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ModernShelf(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v21 = *(_QWORD *)(a1 + 16);
  if (!v21)
  {
    swift_retain();
LABEL_29:
    *(_QWORD *)&v87[0] = _swiftEmptyArrayStorage;
    PassthroughSubject.send(_:)(v87);
    v71 = a3;
    goto LABEL_30;
  }
  v78 = (char *)&v75 - v19;
  v79 = v10;
  v80 = v9;
  v76 = v8;
  v77 = a2;
  v22 = a1 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  v23 = *(_QWORD *)(v20 + 72);
  v83 = a3;
  v84 = v20;
  v24 = *(double (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16);
  swift_retain();
  v82 = a1;
  v25 = swift_bridgeObjectRetain(a1);
  while (1)
  {
    v26.n128_f64[0] = v24(v18, v22, v15, v25);
    v27.n128_f64[0] = ModernShelf.itemPresentation.getter(v26);
    v28 = ModernShelf.ItemPresentation.itemKind.getter(v27);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v14, v86);
    v29 = ModernShelf.ItemKind.rawValue.getter(v28);
    v31 = v30;
    v33 = ModernShelf.ItemKind.rawValue.getter(40);
    v34 = v32;
    if (v29 == v33 && v31 == v32)
    {
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v31);
      goto LABEL_11;
    }
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v33, v32, 0);
    swift_bridgeObjectRelease(v31);
    v36 = swift_bridgeObjectRelease(v34);
    if ((v35 & 1) != 0)
      break;
    (*(void (**)(char *, uint64_t, __n128))(v84 + 8))(v18, v15, v36);
    v22 += v23;
    if (!--v21)
    {
      swift_bridgeObjectRelease(v82);
      a3 = v83;
      goto LABEL_29;
    }
  }
  v31 = v82;
LABEL_11:
  a3 = v83;
  v37 = swift_bridgeObjectRelease(v31);
  v38 = v84;
  v39 = v78;
  v40 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v84 + 32))(v78, v18, v15, v37);
  v41 = ModernShelf.items.getter(v40);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v15);
  v42 = (uint64_t)sub_10034EEB4(v41);
  swift_bridgeObjectRelease(v41);
  v44 = v79;
  v43 = v80;
  if (!v42)
    goto LABEL_29;
  if (!((unint64_t)v42 >> 62))
  {
    if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_14;
    goto LABEL_28;
  }
  if (v42 >= 0)
    v73 = v42 & 0xFFFFFFFFFFFFFF8;
  else
    v73 = v42;
  swift_bridgeObjectRetain(v42);
  v74 = _CocoaArrayWrapper.endIndex.getter(v73);
  swift_bridgeObjectRelease(v42);
  if (!v74)
  {
LABEL_28:
    swift_bridgeObjectRelease(v42);
    goto LABEL_29;
  }
LABEL_14:
  if ((v42 & 0xC000000000000001) != 0)
  {
    v45 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v42);
    goto LABEL_17;
  }
  if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v45 = *(_QWORD *)(v42 + 32);
    swift_retain();
LABEL_17:
    v46 = v77;
    swift_bridgeObjectRelease(v42);
    v48 = ShowHeader.primaryButtonAction.getter(v47);
    if (v48)
    {
      v49 = v48;
      v50 = type metadata accessor for PlayAction(0);
      if (swift_dynamicCastClass(v49, v50))
      {
        v52 = v81;
        PlayAction.episodeOffer.getter(v51);
        v53 = swift_release(v49);
        v54 = EpisodeOffer.contentId.getter(v53);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v52, v43);
        sub_1001CF344();
        dispatch thunk of SmartPlayButtonController.apply(model:)(v45);
        v55 = *(_QWORD *)(v46 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_playStateController);
        v56 = EpisodeStateController.stateMachine(for:)(v54);
        v57 = (uint64_t)v76;
        dispatch thunk of EpisodeStateMachine.currentState.getter(v56);
        v58 = dispatch thunk of SmartPlayButtonController.buttonTitle(for:)(v57);
        v60 = v59;
        sub_10003F970(v57, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
        *(_QWORD *)&v87[0] = v58;
        *((_QWORD *)&v87[0] + 1) = v60;
        v61 = sub_10016DD80();
        if ((Collection.isNotEmpty.getter(&type metadata for String, v61, v62) & 1) != 0)
        {
          v86 = v55;
          v63 = *(_QWORD *)(v46 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_didSelectItemSubject);
          v85 = v46 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeDataProvider;
          v64 = (_QWORD *)(v46 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_imageProvider);
          v65 = *(_OWORD *)(v46 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo + 16);
          v87[0] = *(_OWORD *)(v46 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo);
          v87[1] = v65;
          v87[2] = *(_OWORD *)(v46 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo + 32);
          v66 = swift_allocObject(&unk_1004B3A90, 24, 7);
          v84 = v56;
          v67 = v66;
          swift_weakInit(v66 + 16, v46);
          v68 = (_QWORD *)swift_allocObject(&unk_1004B3AE0, 56, 7);
          v68[2] = v67;
          v69 = v82;
          v70 = v83;
          v68[3] = v82;
          v68[4] = v54;
          v68[5] = sub_1001D0DF8;
          v68[6] = v70;
          swift_bridgeObjectRetain(v69);
          swift_retain();
          swift_retain();
          swift_retain();
          sub_1002F29CC(v85, v86, v58, v60, 1, v64, (double *)v87, (uint64_t)sub_1001D0F40, v63, (uint64_t)sub_1001D0E64, (uint64_t)v68);
          swift_release(v70);
          swift_release(v45);
          swift_release(v84);
          swift_release(v63);
          swift_bridgeObjectRelease(v60);
          swift_release(v67);
          v71 = v68;
        }
        else
        {
          swift_bridgeObjectRelease(v60);
          v72 = v83;
          *(_QWORD *)&v87[0] = _swiftEmptyArrayStorage;
          PassthroughSubject.send(_:)(v87);
          swift_release(v72);
          swift_release(v45);
          v71 = (_QWORD *)v56;
        }
        goto LABEL_30;
      }
      swift_release(v49);
    }
    *(_QWORD *)&v87[0] = _swiftEmptyArrayStorage;
    PassthroughSubject.send(_:)(v87);
    swift_release(a3);
    v71 = (_QWORD *)v45;
LABEL_30:
    swift_release(v71);
    return;
  }
  __break(1u);
}

uint64_t sub_1001D0DF8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return PassthroughSubject.send(_:)(&v2);
}

uint64_t sub_1001D0E30()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001D0E64(void *a1)
{
  uint64_t v1;

  return sub_1001CF414(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40), *(_QWORD *)(v1 + 48));
}

unint64_t sub_1001D0E78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100563070;
  if (!qword_100563070)
  {
    v1 = sub_10003CA40(&qword_100554900);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100563070);
  }
  return result;
}

uint64_t sub_1001D0ED4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_1002F9FB0(v1[2], v1[3], v1[4], v1[6], v1[7], a1);
}

uint64_t sub_1001D0EF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001CFED4(a1, v1);
}

uint64_t sub_1001D0EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModernPage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D0F44(void *a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  int v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  objc_class *v76;
  char Attributed;
  id v78;
  id v79;
  void *v80;
  uint64_t v81;
  id v82;
  void *v83;
  uint64_t v84;
  id v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  Swift::String v95;
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  id v107;
  id v108;
  id v109;
  id v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  void (*v142)(uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  __n128 v146;
  id v147;
  uint64_t v148;
  char *v149;
  void (*v150)(uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  id v153;
  void *v154;
  unsigned int v155;
  id v156;
  void *v157;
  unsigned int v158;
  id v159;
  void *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  NSObject *v172;
  int v173;
  uint64_t v175;
  id v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  id v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  id v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  __n128 v213;
  uint64_t result;
  uint64_t i;
  uint64_t v216;
  id v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  id v227;
  double v228;
  double v229;
  unsigned int v230;
  char v231;
  unsigned int *v232;
  unsigned int *v233;
  char *v234;
  uint64_t v235;
  char *v236;
  __int16 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  id v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  uint64_t v279;
  id v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  __int128 v294;
  __int128 v295;
  uint64_t v296;
  uint64_t v297;
  char v298[8];
  Swift::String v299;
  Swift::String v300;

  v6 = v5;
  v267 = a5;
  v11 = sub_10003F544(&qword_100553DB8);
  __chkstk_darwin(v11);
  v274 = (char *)&v239 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = type metadata accessor for PodcastDetail.DisplayType(0);
  v271 = *(_QWORD *)(v272 - 8);
  __chkstk_darwin(v272);
  v273 = (char *)&v239 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v264 = type metadata accessor for Logger(0);
  v263 = *(_QWORD *)(v264 - 8);
  __chkstk_darwin(v264);
  v276 = (char *)&v239 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = sub_10003F544(&qword_100560500);
  v15 = __chkstk_darwin(v261);
  v260 = (uint64_t)&v239 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v279 = (uint64_t)&v239 - v18;
  v19 = __chkstk_darwin(v17);
  v275 = (char *)&v239 - v20;
  __chkstk_darwin(v19);
  v285 = (uint64_t)&v239 - v21;
  v293 = type metadata accessor for DarkModeOptions(0);
  v289 = *(_QWORD *)(v293 - 8);
  v22 = __chkstk_darwin(v293);
  v270 = (char *)&v239 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v278 = (char *)&v239 - v25;
  v26 = __chkstk_darwin(v24);
  v277 = (char *)&v239 - v27;
  __chkstk_darwin(v26);
  v292 = (char *)&v239 - v28;
  v29 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v30 = __chkstk_darwin(v29);
  v269 = (uint64_t)&v239 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v268 = (uint64_t)&v239 - v33;
  v34 = __chkstk_darwin(v32);
  v281 = (uint64_t)&v239 - v35;
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v239 - v37;
  v39 = __chkstk_darwin(v36);
  v288 = (uint64_t)&v239 - v40;
  v41 = __chkstk_darwin(v39);
  v262 = (char *)&v239 - v42;
  v43 = __chkstk_darwin(v41);
  v287 = (uint64_t)&v239 - v44;
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v239 - v46;
  __chkstk_darwin(v45);
  v286 = (uint64_t)&v239 - v48;
  v49 = sub_10003F544(&qword_10055D840);
  v50 = __chkstk_darwin(v49);
  v284 = (char *)&v239 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __chkstk_darwin(v50);
  v283 = (uint64_t)&v239 - v53;
  v54 = __chkstk_darwin(v52);
  v282 = (uint64_t)&v239 - v55;
  v56 = __chkstk_darwin(v54);
  v291 = (uint64_t)&v239 - v57;
  v58 = __chkstk_darwin(v56);
  v60 = (char *)&v239 - v59;
  __chkstk_darwin(v58);
  v290 = (uint64_t)&v239 - v61;
  v62 = objc_msgSend(a1, "uuid");
  v63 = v62;
  if (!v62)
  {

    swift_bridgeObjectRelease(a2);
    return (uint64_t)v63;
  }
  v280 = a3;
  v257 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  v256 = v64;

  v255 = MTPodcast.adamId.getter();
  v251 = v65;
  v66 = objc_msgSend(a1, "title");
  if (v66)
  {
    v67 = v66;
    v254 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v253 = v68;

  }
  else
  {
    v254 = 0;
    v253 = 0;
  }
  v258 = a4;
  v259 = v6;
  objc_msgSend(a1, "addedDate");
  v70 = v69;
  v71 = objc_msgSend(a1, "bestDescription");
  if (v71)
  {
    v72 = v71;
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    v75 = v74;

    v76 = (objc_class *)type metadata accessor for LanguageAwareString(0);
    Attributed = static LanguageAwareString.alwaysGenerateAttributedString.getter();
    v78 = objc_allocWithZone(v76);
    v252 = LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)(v73, v75, 0, Attributed & 1);
  }
  else
  {
    v252 = 0;
  }
  v79 = objc_msgSend(a1, "author");
  if (v79)
  {
    v80 = v79;
    v250 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    v249 = v81;

  }
  else
  {
    v250 = 0;
    v249 = 0;
  }
  v82 = objc_msgSend(a1, "provider");
  if (v82)
  {
    v83 = v82;
    v248 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
    v247 = v84;

  }
  else
  {
    v248 = 0;
    v247 = 0;
  }
  if ((objc_msgSend(a1, "isSerialShowTypeInFeed") & 1) != 0)
    goto LABEL_16;
  if ((uint64_t)objc_msgSend(a1, "newEpisodesCount") < 1)
  {
    if ((uint64_t)objc_msgSend(a1, "newTrailersCount") < 1)
    {
LABEL_16:
      v246 = 0;
      v245 = 0;
      goto LABEL_22;
    }
    v94 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v300._object = (void *)0xE000000000000000;
    v95._object = (void *)0x8000000100433CE0;
    v95._countAndFlagsBits = 0xD000000000000013;
    v96._countAndFlagsBits = 0;
    v96._object = (void *)0xE000000000000000;
    v300._countAndFlagsBits = 0;
    v97 = NSLocalizedString(_:tableName:bundle:value:comment:)(v95, (Swift::String_optional)0, (NSBundle)v94, v96, v300);
    countAndFlagsBits = v97._countAndFlagsBits;
    object = v97._object;

    v98 = sub_10003F544(&qword_1005559A0);
    v92 = swift_allocObject(v98, 72, 7);
    *(_OWORD *)(v92 + 16) = xmmword_1003CA200;
    v93 = objc_msgSend(a1, "newTrailersCount");
  }
  else
  {
    v85 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v299._object = (void *)0xE000000000000000;
    v86._object = (void *)0x8000000100433D00;
    v86._countAndFlagsBits = 0xD000000000000013;
    v87._countAndFlagsBits = 0;
    v87._object = (void *)0xE000000000000000;
    v299._countAndFlagsBits = 0;
    v88 = NSLocalizedString(_:tableName:bundle:value:comment:)(v86, (Swift::String_optional)0, (NSBundle)v85, v87, v299);
    countAndFlagsBits = v88._countAndFlagsBits;
    object = v88._object;

    v91 = sub_10003F544(&qword_1005559A0);
    v92 = swift_allocObject(v91, 72, 7);
    *(_OWORD *)(v92 + 16) = xmmword_1003CA200;
    v93 = objc_msgSend(a1, "newEpisodesCount");
  }
  *(_QWORD *)(v92 + 56) = &type metadata for Int64;
  *(_QWORD *)(v92 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v92 + 32) = v93;
  v246 = String.init(format:_:)(countAndFlagsBits, object, v92);
  v245 = v99;
  swift_bridgeObjectRelease(object);
LABEL_22:
  v100 = objc_msgSend(a1, "artworkPrimaryColor");
  if (v100)
  {
    v101 = v100;
    v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    v104 = v103;

    v105 = (void *)Color.init(descriptor:)(v102, v104);
    v265 = v111;
    v266 = v105;
  }
  else
  {
    v106 = sub_100005EC8(0, &qword_100558928, MTImageAnalyzer_ptr);
    v107 = objc_msgSend((id)swift_getObjCClassFromMetadata(v106), "sharedInstance");
    v108 = objc_msgSend(a1, "uuid");
    v109 = objc_msgSend(v107, "colorThemeForPodcastUuid:", v108);

    v110 = objc_msgSend(v109, "backgroundColor");
    if (!v110)
      v110 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    v266 = objc_msgSend(v110, "CGColor");

    v265 = 1;
  }
  MTPodcast.artworkModel.getter();
  v112 = type metadata accessor for ArtworkModel(0);
  v113 = *(_QWORD *)(v112 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v60, 1, v112) == 1)
  {
    sub_100007A28((uint64_t)v60, &qword_10055D840);
    v114 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v113 + 56);
    v115 = v114(v290, 1, 1, v112);
  }
  else
  {
    v116 = v112;
    v117 = v290;
    ArtworkModel.with(backgroundColor:)(v266, v265);
    sub_1001D2CD0((uint64_t)v60);
    v118 = v117;
    v112 = v116;
    v114 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v113 + 56);
    v115 = v114(v118, 0, 1, v112);
  }
  MTPodcast.uberBackgroundArtworkModel.getter(v115);
  v119 = objc_msgSend(a1, "bestAvailableStoreCleanURL");
  if (v119)
  {
    v120 = v119;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v119);

    v121 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 56))(v47, 0, 1, v121);
  }
  else
  {
    v122 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 56))(v47, 1, 1, v122);
  }
  sub_1001C9998((uint64_t)v47, v286);
  v123 = objc_msgSend(a1, "webpageURL");
  if (!v123)
    goto LABEL_36;
  v124 = v123;
  v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
  v127 = v126;

  v128 = (uint64_t)v262;
  URL.init(string:)(v125, v127);
  swift_bridgeObjectRelease(v127);
  v129 = type metadata accessor for URL(0);
  v130 = *(_QWORD *)(v129 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129) == 1)
  {
    sub_100007A28(v128, (uint64_t *)&unk_100553DC0);
LABEL_36:
    v131 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 56))(v287, 1, 1, v131);
    goto LABEL_38;
  }
  v132 = v287;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 32))(v287, v128, v129);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v130 + 56))(v132, 0, 1, v129);
LABEL_38:
  v133 = objc_msgSend(a1, "bestFeedURLExcludingRedirectURL:", 0);
  if (v133)
  {
    v134 = v133;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v133);

    v135 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v38, 0, 1, v135);
  }
  else
  {
    v136 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 56))(v38, 1, 1, v136);
  }
  sub_1001C9998((uint64_t)v38, v288);
  *(_QWORD *)&v294 = _swiftEmptyArrayStorage;
  v137 = sub_1001D2D0C(&qword_100558930, (uint64_t)&protocol conformance descriptor for DarkModeOptions);
  v138 = sub_10003F544(&qword_100558938);
  v139 = sub_1001D2C70();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v294, v138, v139, v293, v137);
  if (objc_msgSend(a1, "isAuthenticatedDark"))
  {
    v140 = (uint64_t)v278;
    static DarkModeOptions.authenticated.getter();
    v141 = v277;
    sub_1001D2A50(v277, v140);
    v142 = *(void (**)(uint64_t, uint64_t))(v289 + 8);
    v143 = v140;
    v144 = v293;
    v142(v143, v293);
    v142((uint64_t)v141, v144);
  }
  v145 = objc_msgSend(a1, "isPastAutodownloadOrEpisodeLimitDark");
  v147 = v280;
  if (v145)
  {
    v148 = (uint64_t)v278;
    static DarkModeOptions.autoDownload.getter();
    v149 = v277;
    sub_1001D2A50(v277, v148);
    v150 = *(void (**)(uint64_t, uint64_t))(v289 + 8);
    v151 = v148;
    v152 = v293;
    v150(v151, v293);
    v150((uint64_t)v149, v152);
  }
  if (v147)
  {
    type metadata accessor for Episode(0, v146);
    v296 = 0;
    v294 = 0u;
    v295 = 0u;
    v262 = (char *)Episode.init(from:clickAction:wantsListenNowReason:)(v147, (uint64_t)&v294, 0);
  }
  else
  {
    v262 = 0;
  }
  v153 = objc_msgSend(a1, "displayType");
  if (v153)
  {
    v154 = v153;
    v244 = MTDisplayTypeFromPersistentString();

  }
  else
  {
    v244 = 0;
  }
  LODWORD(v277) = objc_msgSend(a1, "isExplicit");
  v155 = objc_msgSend(a1, "offerTypes");
  v156 = objc_msgSend(a1, "channel");
  if (v156)
  {
    v157 = v156;
    v158 = objc_msgSend(v156, "subscriptionActive");

    v243 = v158 & (v155 >> 1);
  }
  else
  {
    v243 = 0;
  }
  v159 = objc_msgSend(a1, "channel");
  if (v159)
  {
    v160 = v159;
    type metadata accessor for ChannelDetail(0);
    v242 = sub_10031B730(v160);

  }
  else
  {
    v242 = 0;
  }
  v161 = v276;
  v162 = (uint64_t)v275;
  v163 = a1;
  v164 = v285;
  PodcastStateModel.init(podcast:)(a1);
  sub_100007A64(v164, v162, &qword_100560500);
  v165 = type metadata accessor for PodcastStateModel(0);
  v166 = *(_QWORD *)(v165 - 8);
  v167 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v166 + 48))(v162, 1, v165);
  v278 = v163;
  if (v167 == 1)
  {
    v168 = sub_100007A28(v162, &qword_100560500);
    static Logger.database.getter(v168);
    v169 = v163;
    v170 = v279;
    sub_100007A64(v285, v279, &qword_100560500);
    v171 = v169;
    v172 = Logger.logObject.getter(v171);
    v173 = static os_log_type_t.error.getter(v172);
    if (os_log_type_enabled(v172, (os_log_type_t)v173))
    {
      LODWORD(v275) = v173;
      v276 = (char *)v114;
      v175 = swift_slowAlloc(52, -1);
      v240 = swift_slowAlloc(160, -1);
      *(_QWORD *)&v294 = v240;
      *(_DWORD *)v175 = 136381699;
      v176 = objc_msgSend(v171, "title");
      if (v176)
      {
        v177 = v176;
        v178 = static String._unconditionallyBridgeFromObjectiveC(_:)(v176);
        v180 = v179;

      }
      else
      {
        v178 = 0;
        v180 = 0;
      }
      v181 = Optional<A>.description.getter(v178, v180);
      v183 = v182;
      swift_bridgeObjectRelease(v180);
      v297 = sub_10003D274(v181, v183, (uint64_t *)&v294);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v175 + 4, v175 + 12);

      swift_bridgeObjectRelease(v183);
      *(_WORD *)(v175 + 12) = 2080;
      v184 = objc_msgSend(v171, "uuid");
      v241 = v112;
      if (v184)
      {
        v185 = v184;
        v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
        v188 = v187;

      }
      else
      {
        v186 = 0;
        v188 = 0;
      }
      v189 = Optional<A>.description.getter(v186, v188);
      v191 = v190;
      swift_bridgeObjectRelease(v188);
      v297 = sub_10003D274(v189, v191, (uint64_t *)&v294);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v175 + 14, v175 + 22);

      swift_bridgeObjectRelease(v191);
      *(_WORD *)(v175 + 22) = 2081;
      v297 = (uint64_t)objc_msgSend(v171, "storeCollectionId");
      v192 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v194 = v193;
      v297 = sub_10003D274(v192, v193, (uint64_t *)&v294);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v175 + 24, v175 + 32);

      swift_bridgeObjectRelease(v194);
      *(_WORD *)(v175 + 32) = 2081;
      v195 = objc_msgSend(v171, "feedURL");
      if (v195)
      {
        v196 = v195;
        v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v195);
        v199 = v198;

      }
      else
      {
        v197 = 0;
        v199 = 0;
      }
      v200 = Optional<A>.description.getter(v197, v199);
      v202 = v201;
      swift_bridgeObjectRelease(v199);
      v297 = sub_10003D274(v200, v202, (uint64_t *)&v294);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v175 + 34, v175 + 42);

      swift_bridgeObjectRelease(v202);
      *(_WORD *)(v175 + 42) = 2080;
      v203 = v279;
      v204 = v260;
      sub_100007A64(v279, v260, &qword_100560500);
      v205 = String.init<A>(describing:)(v204, v261);
      v207 = v206;
      v297 = sub_10003D274(v205, v206, (uint64_t *)&v294);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v175 + 44, v175 + 52);
      swift_bridgeObjectRelease(v207);
      sub_100007A28(v203, &qword_100560500);
      _os_log_impl((void *)&_mh_execute_header, v172, (os_log_type_t)v275, "Podcast %{private}s, uuid: %s, adamID: %{private}s, feedURL: %{private}s; Can't get a sanitized state from it, p"
        "odcastsStateModel: %s",
        (uint8_t *)v175,
        0x34u);
      v208 = v240;
      swift_arrayDestroy(v240, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v208, -1, -1);
      swift_slowDealloc(v175, -1, -1);

      (*(void (**)(char *, uint64_t))(v263 + 8))(v161, v264);
      LODWORD(v264) = 3;
      v112 = v241;
      v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v276;
      v163 = v278;
    }
    else
    {

      sub_100007A28(v170, &qword_100560500);
      (*(void (**)(char *, uint64_t))(v263 + 8))(v161, v264);
      LODWORD(v264) = 3;
    }
  }
  else
  {
    LODWORD(v264) = PodcastStateModel.sanitizedState()();
    (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v162, v165);
  }
  sub_100007A64(v290, v282, &qword_10055D840);
  sub_100007A64(v291, v283, &qword_10055D840);
  v114((uint64_t)v284, 1, 1, v112);
  v209 = objc_msgSend(v163, "isSerialShowTypeInFeed");
  v210 = MTPodcast.episodeUserFilter.getter();
  LODWORD(v279) = v209;
  v276 = (char *)v210;
  LODWORD(v275) = v211;
  if (!a2)
  {
    v261 = 0;
LABEL_93:
    LODWORD(v263) = v267 & 1;
    v267 = v251 & 1;
    sub_100007A64(v286, v281, (uint64_t *)&unk_100553DC0);
    v224 = v268;
    sub_100007A64(v287, v268, (uint64_t *)&unk_100553DC0);
    v225 = v269;
    sub_100007A64(v288, v269, (uint64_t *)&unk_100553DC0);
    v226 = v270;
    (*(void (**)(char *, char *, uint64_t))(v289 + 16))(v270, v292, v293);
    v227 = v278;
    objc_msgSend(v278, "lastDatePlayed");
    v229 = v228;
    v230 = objc_msgSend(v227, "hidesPlayedEpisodes");
    v231 = MTPodcast.episodeSortType.getter();
    v232 = (unsigned int *)&enum case for PodcastDetail.DisplayType.paid(_:);
    v233 = (unsigned int *)&enum case for PodcastDetail.DisplayType.hybrid(_:);
    if (v244 != 2)
      v233 = (unsigned int *)&enum case for PodcastDetail.DisplayType.free(_:);
    if (v244 != 1)
      v232 = v233;
    v234 = v273;
    (*(void (**)(char *, _QWORD, uint64_t))(v271 + 104))(v273, *v232, v272);
    v235 = type metadata accessor for ImpressionMetrics(0);
    v236 = v274;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v235 - 8) + 56))(v274, 1, 1, v235);
    HIDWORD(v238) = v230;
    LOBYTE(v238) = v229 != 0.0;
    HIBYTE(v237) = v279;
    LOBYTE(v237) = v263;
    v63 = (void *)dispatch thunk of PodcastDetail.__allocating_init(uuid:adamId:title:podcastState:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:episodeToPlay:seasonToShow:isSerialShowTypeInFeed:episodeUserFilter:episodes:storeUrl:webpageUrl:feedUrl:offerAction:darkModeOptions:hasEverPlayed:hidesPlayedEpisodes:sort:displayType:channel:isExplicit:impressionMetrics:)(v257, v256, v255, v267, v254, v253, v264, v70, 0, v252, v250, v249, v248, v247, v246, v245, v282, v283, v284,
                    (_BYTE)v243,
                    v262,
                    v258,
                    v237,
                    v276,
                    (_BYTE)v275,
                    v261,
                    v281,
                    v224,
                    v225,
                    0,
                    v226,
                    v238,
                    v231,
                    v234,
                    v242,
                    (_BYTE)v277,
                    v236);

    sub_1001D2CBC(v266, v265);
    (*(void (**)(char *, uint64_t))(v289 + 8))(v292, v293);
    sub_100007A28(v288, (uint64_t *)&unk_100553DC0);
    sub_100007A28(v287, (uint64_t *)&unk_100553DC0);
    sub_100007A28(v286, (uint64_t *)&unk_100553DC0);
    sub_100007A28(v291, &qword_10055D840);
    sub_100007A28(v290, &qword_10055D840);
    sub_100007A28(v285, &qword_100560500);
    return (uint64_t)v63;
  }
  v297 = (uint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)a2 >> 62))
  {
    v212 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v213 = swift_bridgeObjectRetain(a2);
    if (v212)
      goto LABEL_75;
LABEL_91:
    swift_bridgeObjectRelease(a2);
    v222 = _swiftEmptyArrayStorage;
LABEL_92:
    v261 = (uint64_t)v222;
    swift_bridgeObjectRelease(a2);
    goto LABEL_93;
  }
  if (a2 >= 0)
    v223 = a2 & 0xFFFFFFFFFFFFFF8;
  else
    v223 = a2;
  swift_bridgeObjectRetain(a2);
  v212 = _CocoaArrayWrapper.endIndex.getter(v223);
  if (!v212)
    goto LABEL_91;
LABEL_75:
  result = type metadata accessor for Episode(0, v213);
  if (v212 >= 1)
  {
    for (i = 0; i != v212; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v217 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
      else
        v217 = *(id *)(a2 + 8 * i + 32);
      v296 = 0;
      v294 = 0u;
      v295 = 0u;
      v218 = Episode.init(from:clickAction:wantsListenNowReason:)(v217, (uint64_t)&v294, 0);
      if (v218)
      {
        v219 = v218;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v218);
        v221 = *(_QWORD *)((v297 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v220 = *(_QWORD *)((v297 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v221 >= v220 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v220 > 1, v221 + 1, 1);
        v216 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v221, v219);
        specialized Array._endMutation()(v216);
      }
    }
    swift_bridgeObjectRelease(a2);
    v222 = (_QWORD *)v297;
    goto LABEL_92;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001D2860(void *a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (objc_msgSend(v1, "showTypeInFeedResolvedValue") != (id)2)
    return 0;
  if (a1)
  {
    v3 = objc_msgSend(a1, "seasonNumber");
    if (v3)
      return (unint64_t)v3;
  }
  v5 = objc_msgSend(v1, "seasonNumbers");
  if (!v5)
    return 0;
  v6 = v5;
  v7 = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  result = (unint64_t)objc_msgSend(v1, "showTypeUserSetting");
  v10 = (unint64_t)v8 >> 62;
  if (result == 4)
  {
    if (v10)
    {
      if (v8 < 0)
        v15 = v8;
      else
        v15 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v16 = _CocoaArrayWrapper.endIndex.getter(v15);
      result = swift_bridgeObjectRelease(v8);
      if (v16)
        goto LABEL_9;
    }
    else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_9:
      if ((v8 & 0xC000000000000001) == 0)
      {
        if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v11 = *(void **)(v8 + 32);
LABEL_19:
          v13 = v11;
LABEL_20:
          v14 = v13;
          swift_bridgeObjectRelease(v8);
          v4 = objc_msgSend(v14, "longLongValue");

          return (unint64_t)v4;
        }
        __break(1u);
        goto LABEL_36;
      }
      result = 0;
      goto LABEL_34;
    }
    goto LABEL_30;
  }
  if (!v10)
  {
    v12 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_14;
LABEL_30:
    swift_bridgeObjectRelease(v8);
    return 0;
  }
  if (v8 < 0)
    v17 = v8;
  else
    v17 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v12 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v8);
  if (!v12)
    goto LABEL_30;
LABEL_14:
  result = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((v8 & 0xC000000000000001) != 0)
  {
LABEL_34:
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v8);
    goto LABEL_20;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (result < *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(void **)(v8 + 8 * result + 32);
    goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1001D2A50(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;

  v30 = a1;
  v4 = sub_10003F544(&qword_100558948);
  v5 = __chkstk_darwin(v4);
  v28 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - v7;
  v9 = type metadata accessor for DarkModeOptions(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v25 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v27 = v2;
  v16(v13, v2, v9);
  v17 = sub_1001D2D0C(&qword_100558930, (uint64_t)&protocol conformance descriptor for DarkModeOptions);
  dispatch thunk of SetAlgebra.intersection(_:)(a2, v9, v17);
  v18 = sub_1001D2D0C(&qword_100558950, (uint64_t)&protocol conformance descriptor for DarkModeOptions);
  v26 = a2;
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v15, a2, v9, v18) ^ 1;
  v29 = v4;
  v20 = &v8[*(int *)(v4 + 48)];
  *v8 = v19 & 1;
  if ((v19 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v22 = v26;
    v16(v20, v26, v9);
    v16(v13, v22, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)(v13, v9, v17);
    v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v21(v20, v15, v9);
  }
  v23 = &v28[*(int *)(v29 + 48)];
  v21(v23, v20, v9);
  v21(v30, v23, v9);
  return v19 & 1;
}

unint64_t sub_1001D2C70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100558940;
  if (!qword_100558940)
  {
    v1 = sub_10003CA40(&qword_100558938);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100558940);
  }
  return result;
}

void sub_1001D2CBC(id a1, char a2)
{
  if (a2 == 1)

}

uint64_t sub_1001D2CD0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D2D0C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DarkModeOptions(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001D2D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD v16[5];

  v1 = sub_10003F544(&qword_100558A78);
  __chkstk_darwin(v1);
  v3 = (char *)&v16[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v0 + 64);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 24);
    v11 = *(_BYTE *)(v8 + 32);
    sub_100198BD4(v9, v10, v11);
    sub_1001D2E9C(v9, v10, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      sub_100007A28((uint64_t)v3, &qword_100558A78);
      LOBYTE(v8) = 0;
    }
    else
    {
      sub_1001D42F4((uint64_t)v3, (uint64_t)v7);
      v12 = sub_1001D3F30(v16);
      v13 = PodcastState.isSubscribed.getter(v12);
      sub_10019D154((uint64_t)v16);
      sub_1001D4338((uint64_t)v7);
      LOBYTE(v8) = v13 ^ 1;
    }
  }
  return v8 & 1;
}

void sub_1001D2E9C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for ShowOffer(0);
  __chkstk_darwin(v4);
  v5 = sub_10003F544(&qword_100558A78);
  v6 = __chkstk_darwin(v5);
  v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  v8 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v8);
  v9 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  __chkstk_darwin(v9);
  __asm { BR              X10 }
}

uint64_t sub_1001D2FFC()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(v3 - 88);
  if (v1[2] == 1
    && (v5 = v0, (v6 = (void *)sub_100368814(v1, v2, 0)) != 0)
    && (v7 = v6, v8 = objc_msgSend(v6, "podcastUuid"), v7, v8))
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;
    sub_100198C1C((uint64_t)v1, v2, 0);

    *v5 = v9;
    v5[1] = v11;
    v12 = *(_QWORD *)(v3 - 96);
    swift_storeEnumTagMultiPayload(v5, v12, 0);
    v13 = *(_QWORD *)(v3 - 104);
    sub_1001D42F4((uint64_t)v5, v4);
    v14 = 0;
  }
  else
  {
    sub_100198C1C((uint64_t)v1, v2, 0);
    v14 = 1;
    v13 = *(_QWORD *)(v3 - 104);
    v12 = *(_QWORD *)(v3 - 96);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v4, v14, 1, v12);
}

uint64_t sub_1001D3438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v1 = sub_10003F544(&qword_100558A78);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v0 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(_QWORD *)(v9 + 24);
    v12 = *(_BYTE *)(v9 + 32);
    sub_100198BD4(v10, v11, v12);
    sub_1001D2E9C(v10, v11, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      return sub_100007A28((uint64_t)v3, &qword_100558A78);
    }
    else
    {
      sub_1001D42F4((uint64_t)v3, (uint64_t)v8);
      v13 = sub_1001D3568((_QWORD *)(v0 + 16), 1);
      swift_release(v13);
      return sub_1001D4338((uint64_t)v8);
    }
  }
  return result;
}

uint64_t sub_1001D3568(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v3 = v2;
  v6 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001D4374(v3, (uint64_t)v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  v13 = *v11;
  if (EnumCaseMultiPayload == 1)
  {
    v14 = (int *)sub_10003F544(&qword_100558A80);
    v15 = (uint64_t)v11 + v14[12];
    v16 = *((unsigned __int8 *)v11 + v14[16]);
    v17 = (uint64_t *)((char *)v11 + v14[20]);
    v18 = *v17;
    v19 = v17[1];
    sub_1001C9998(v15, (uint64_t)v8);
    v20 = a1[3];
    v21 = a1[4];
    sub_10003A834(a1, v20);
    v22 = dispatch thunk of LibraryActionControllerProtocol.subscribe(feedUrl:adamId:location:explicit:displaySuccessHUD:)(v8, v13, 0, v18, v19, v16, a2 & 1, v20, v21);
    swift_bridgeObjectRelease(v19);
    sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DC0);
  }
  else
  {
    v23 = v11[1];
    v24 = a1[3];
    v25 = a1[4];
    sub_10003A834(a1, v24);
    v22 = dispatch thunk of LibraryActionControllerProtocol.subscribe(podcast:displaySuccessHUD:)(v13, v23, a2 & 1, v24, v25);
    swift_bridgeObjectRelease(v23);
  }
  return v22;
}

uint64_t sub_1001D3718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __n128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = ShowOffer.adamId.getter(v6);
  if ((AdamID.isEmpty.getter(v9) & 1) != 0)
  {
    v10 = type metadata accessor for ShowOffer(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  }
  else
  {
    v12 = sub_10003F544(&qword_100558A80);
    *v8 = ShowOffer.adamId.getter(v12);
    v13 = ShowOffer.feedUrl.getter();
    v14 = ShowOffer.contentRating.getter(v13);
    if (v14 == 2)
    {
      v16 = 0;
    }
    else
    {
      v17 = ContentRating.rawValue.getter(v14 & 1);
      v19 = v18;
      v16 = 1;
      v21 = ContentRating.rawValue.getter(1);
      v22 = v17;
      v23 = v20;
      if (v22 != v21 || (v24 = v19, v19 != v20))
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v19, v21, v20, 0);
        v24 = v23;
      }
      swift_bridgeObjectRelease(v19);
      v15 = swift_bridgeObjectRelease(v24);
    }
    v25 = (_QWORD *)((char *)v8 + *(int *)(v12 + 80));
    *((_BYTE *)v8 + *(int *)(v12 + 64)) = v16 & 1;
    v26 = ShowOffer.dzcPageLocation.getter(v15);
    v28 = v27;
    v29 = type metadata accessor for ShowOffer(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(a1, v29);
    *v25 = v26;
    v25[1] = v28;
    swift_storeEnumTagMultiPayload(v8, v4, 1);
    sub_1001D42F4((uint64_t)v8, a2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
  }
}

uint64_t sub_1001D3908@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int *v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;

  v4 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (uint64_t)objc_msgSend(a1, "podcastStoreId");
  v12 = AdamID.init(rawValue:)(v11 & ~(v11 >> 63));
  if ((AdamID.isEmpty.getter(v12) & 1) != 0)
  {

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1, 1, v7);
  }
  v14 = (int *)sub_10003F544(&qword_100558A80);
  v15 = (char *)v10 + v14[12];
  *v10 = v12;
  v16 = objc_msgSend(a1, "podcastFeedUrl");
  if (v16)
  {
    v17 = v16;
    v31 = v15;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    URL.init(string:)(v18, v20);
    swift_bridgeObjectRelease(v20);
    v21 = type metadata accessor for URL(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v6, 1, v21) != 1)
    {
      v24 = v31;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v31, v6, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v21);
      goto LABEL_8;
    }
    sub_100007A28((uint64_t)v6, (uint64_t *)&unk_100553DC0);
    v15 = v31;
  }
  v23 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v15, 1, 1, v23);
LABEL_8:
  v25 = v14[16];
  v26 = (uint64_t *)((char *)v10 + v14[20]);
  *((_BYTE *)v10 + v25) = objc_msgSend(a1, "isExplicit");
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("psnp"));
  v29 = v28;

  *v26 = v27;
  v26[1] = v29;
  swift_storeEnumTagMultiPayload(v10, v7, 1);
  sub_1001D42F4((uint64_t)v10, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
}

uint64_t sub_1001D3B8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;

  v55 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v8 = __chkstk_darwin(v7);
  v54 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v50 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v50 - v13;
  v15 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = MPModelObject.adamID.getter(v17);
  if ((v21 & 1) != 0 || (v22 = v20, (AdamID.isEmpty.getter(v20) & 1) != 0))
  {

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, 1, 1, v15);
  }
  v24 = sub_10003F544(&qword_100558A80);
  v51 = (char *)v19 + *(int *)(v24 + 48);
  v52 = v24;
  *v19 = v22;
  v25 = objc_msgSend(a1, "podcast");
  v53 = a2;
  if (v25)
  {
    v26 = v25;
    v27 = objc_msgSend(v25, "feedURL");

    if (v27)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v27);

      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v29 = v12;
      v30 = 0;
    }
    else
    {
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v29 = v12;
      v30 = 1;
    }
    v31 = v55;
    v28(v29, v30, 1, v55);
    sub_1001C9998((uint64_t)v12, (uint64_t)v14);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v4 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v32)(v14, 1, v31))
    {
      v33 = (uint64_t)v14;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v14, v31);
      v34 = sub_100007A28((uint64_t)v14, (uint64_t *)&unk_100553DC0);
      v35 = URL.absoluteString.getter(v34);
      v37 = v36;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v55);
      v38 = v54;
      URL.init(string:)(v35, v37);
      v39 = v37;
      v31 = v55;
      v40 = swift_bridgeObjectRelease(v39);
      if (v32(v38, 1, v31, v40) != 1)
      {
        v48 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
        v49 = v51;
        v48(v51, v38, v31);
        v28(v49, 0, 1, v31);
        v41 = v52;
        goto LABEL_15;
      }
      v33 = (uint64_t)v38;
    }
    sub_100007A28(v33, (uint64_t *)&unk_100553DC0);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v31 = v55;
  }
  v41 = v52;
  v28(v51, 1, 1, v31);
LABEL_15:
  v42 = *(int *)(v41 + 64);
  v43 = (uint64_t *)((char *)v19 + *(int *)(v41 + 80));
  *((_BYTE *)v19 + v42) = objc_msgSend(a1, "isExplicitEpisode");
  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("psnp"));
  v46 = v45;

  *v43 = v44;
  v43[1] = v46;
  swift_storeEnumTagMultiPayload(v19, v15, 1);
  v47 = v53;
  sub_1001D42F4((uint64_t)v19, v53);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v47, 0, 1, v15);
}

uint64_t sub_1001D3F30@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001D4374(v1, (uint64_t)v5);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v3);
  v7 = *v5;
  if (EnumCaseMultiPayload == 1)
  {
    v8 = sub_10003F544(&qword_100558A80);
    v9 = (uint64_t)v5 + *(int *)(v8 + 48);
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v5 + *(int *)(v8 + 80) + 8));
    v25 = 0;
    v26 = 0;
    v28 = 0;
    v29 = 0;
    v27 = 2;
    v10 = dispatch thunk of PodcastStateController.stateMachine(for:initialState:)(v7, &v25);
    dispatch thunk of PodcastStateMachine.currentState.getter(&v20, v10);
    v11 = v20;
    v12 = v21;
    v13 = v22;
    v14 = v23;
    v15 = v24;
    swift_release(v10);
    result = sub_100007A28(v9, (uint64_t *)&unk_100553DC0);
  }
  else
  {
    v17 = v5[1];
    v25 = 0;
    v26 = 0;
    v28 = 0;
    v29 = 0;
    v27 = 2;
    v18 = dispatch thunk of PodcastStateController.stateMachine(for:initialState:)(v7, v17, &v25);
    swift_bridgeObjectRelease(v17);
    dispatch thunk of PodcastStateMachine.currentState.getter(&v20, v19);
    v11 = v20;
    v12 = v21;
    v13 = v22;
    v14 = v23;
    v15 = v24;
    result = swift_release(v18);
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v15;
  return result;
}

uint64_t sub_1001D409C()
{
  _QWORD *v0;

  sub_10003D380(v0 + 2);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for SubscribeEpisodeContextAction()
{
  return objc_opt_self(_TtC8Podcasts29SubscribeEpisodeContextAction);
}

uint64_t sub_1001D40F8()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 64));
}

uint64_t sub_1001D4100(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = a1;
  return swift_release(v2);
}

uint64_t sub_1001D4110()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x535F574F4C4C4F46;
  v1._object = (void *)0xEB00000000574F48;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1001D41B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for MetricsLabel.subscribe(_:);
  v3 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1001D41F4()
{
  return 7;
}

uint64_t sub_1001D4204()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 72, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 72));
}

uint64_t sub_1001D4238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 72, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = a1;
  return swift_release(v3);
}

void *sub_1001D427C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 72, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(uint64_t a1)
{
  uint64_t result;

  result = qword_100558AF8;
  if (!qword_100558AF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SubscribeEpisodeContextAction.SubscribeOffer);
  return result;
}

uint64_t sub_1001D42F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D4338(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D4374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1001D43B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v8 = (int *)sub_10003F544(&qword_100558A80);
      v9 = v8[12];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for URL(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_10003F544((uint64_t *)&unk_100553DC0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *((_BYTE *)a1 + v8[16]) = *((_BYTE *)a2 + v8[16]);
      v20 = v8[20];
      v21 = (_QWORD *)((char *)a1 + v20);
      v22 = (_QWORD *)((char *)a2 + v20);
      v23 = v22[1];
      *v21 = *v22;
      v21[1] = v23;
      swift_bridgeObjectRetain(v23);
      v17 = a1;
      v18 = a3;
      v19 = 1;
    }
    else
    {
      v16 = a2[1];
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      v17 = a1;
      v18 = a3;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  return a1;
}

double sub_1001D4524(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v2 = a1;
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    v3 = sub_10003F544(&qword_100558A80);
    v4 = v2 + *(int *)(v3 + 48);
    v5 = type metadata accessor for URL(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    v2 += *(int *)(v3 + 80);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_1001D45B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    v7 = (int *)sub_10003F544(&qword_100558A80);
    v8 = v7[12];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_10003F544((uint64_t *)&unk_100553DC0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((_BYTE *)a1 + v7[16]) = *((_BYTE *)a2 + v7[16]);
    v16 = v7[20];
    v17 = (_QWORD *)((char *)a1 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v15 = v18[1];
    *v17 = *v18;
    v17[1] = v15;
    v14 = 1;
  }
  else
  {
    v14 = 0;
    v15 = a2[1];
    a1[1] = v15;
  }
  swift_bridgeObjectRetain(v15);
  swift_storeEnumTagMultiPayload(a1, a3, v14);
  return a1;
}

_QWORD *sub_1001D46F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a1 != a2)
  {
    sub_1001D4338((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = (int *)sub_10003F544(&qword_100558A80);
      v8 = v7[12];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for URL(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_10003F544((uint64_t *)&unk_100553DC0);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *((_BYTE *)a1 + v7[16]) = *((_BYTE *)a2 + v7[16]);
      v16 = v7[20];
      v17 = (_QWORD *)((char *)a1 + v16);
      v18 = (_QWORD *)((char *)a2 + v16);
      *v17 = *v18;
      v15 = v18[1];
      v17[1] = v15;
      v14 = 1;
    }
    else
    {
      v14 = 0;
      v15 = a2[1];
      a1[1] = v15;
    }
    swift_bridgeObjectRetain(v15);
    swift_storeEnumTagMultiPayload(a1, a3, v14);
  }
  return a1;
}

_QWORD *sub_1001D4840(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    v6 = (int *)sub_10003F544(&qword_100558A80);
    v7 = v6[12];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_10003F544((uint64_t *)&unk_100553DC0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
    *(_OWORD *)((char *)a1 + v6[20]) = *(_OWORD *)((char *)a2 + v6[20]);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1001D4970(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1001D4338((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = (int *)sub_10003F544(&qword_100558A80);
      v7 = v6[12];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for URL(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = sub_10003F544((uint64_t *)&unk_100553DC0);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
      *(_OWORD *)((char *)a1 + v6[20]) = *(_OWORD *)((char *)a2 + v6[20]);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_1001D4AB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];
  _BYTE v5[32];
  _QWORD v6[2];

  v6[0] = &unk_1003CD3F0;
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000048DC(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1003CD408;
    v4[3] = &unk_1003CD420;
    swift_getTupleTypeLayout(v5, 0, 4, v4);
    v6[1] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v6);
  }
}

uint64_t sub_1001D4B60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t countAndFlagsBits;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[40];
  _QWORD v44[5];
  Swift::String v45;

  v42 = a1;
  v1 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_10055D840);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v39 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v39 - v11;
  v13 = type metadata accessor for ArtworkModel(0);
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  v15 = sub_10003F544(&qword_100558B30);
  v41 = type metadata accessor for ActionMenu.Child(0);
  v16 = *(_QWORD *)(v41 - 8);
  v17 = *(_QWORD *)(v16 + 72);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = swift_allocObject(v15, v19 + v17, v18 | 7);
  *(_OWORD *)(v20 + 16) = xmmword_1003CA200;
  v21 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v45._object = (void *)0xEB000000006E6F69;
  v22._object = (void *)0x8000000100433D50;
  v22._countAndFlagsBits = 0xD000000000000012;
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v45._countAndFlagsBits = 0x746174532077654ELL;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v45);
  countAndFlagsBits = v24._countAndFlagsBits;

  v25 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v14)(v10, 1, 1, v13);
  v26 = static Link.Presentation.textFollowsTintColor.getter(v25);
  v27 = Link.Presentation.init(rawValue:)(0);
  v28 = Link.Presentation.init(rawValue:)(v27);
  v29 = Link.Presentation.init(rawValue:)(v28 & v26);
  if (v29 != v26)
  {
    v29 = Link.Presentation.init(rawValue:)(v27 | v26);
    v27 = v29;
  }
  static ActionMetrics.notInstrumented.getter(v29);
  v30 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = ClosureAction.init(title:presentationStyle:actionMetrics:closure:)(0, 0, v27, v3, sub_1001D4ED4, 0);
  v44[3] = v30;
  v44[4] = sub_1001D60D8(&qword_100555628, (uint64_t (*)(uint64_t))&type metadata accessor for ClosureAction);
  v44[0] = v31;
  v32 = ((uint64_t (*)(void))ActionMenu.ID.init())();
  v34 = v33;
  sub_100007A64((uint64_t)v10, (uint64_t)v7, &qword_10055D840);
  sub_100007A64((uint64_t)v44, (uint64_t)v43, (uint64_t *)&unk_100554FF0);
  swift_bridgeObjectRetain(v34);
  v35 = swift_bridgeObjectRetain(v24._object);
  ActionMenu.Item.init(id:title:icon:role:state:action:)(v32, v34, countAndFlagsBits, v24._object, v7, 2, 1, v43, v35);
  swift_storeEnumTagMultiPayload(v20 + v19, v41, 0);
  swift_bridgeObjectRelease(v24._object);
  swift_bridgeObjectRelease(v34);
  sub_100007A28((uint64_t)v10, &qword_10055D840);
  v36 = sub_100007A28((uint64_t)v44, (uint64_t *)&unk_100554FF0);
  v37 = ActionMenu.ID.init()(v36);
  return ActionMenu.init(id:title:subtitle:icon:children:)(v37);
}

void sub_1001D4ED4()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)MTAddPodcastOrStationController), "init");
  objc_msgSend(v0, "presentAddStationUI");

}

uint64_t sub_1001D4F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;

  v51 = a2;
  v50 = type metadata accessor for Glyph.Settings(0);
  v59 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v58 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Glyph(0);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  __chkstk_darwin(v4);
  v55 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_10055D840);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v48 - v10;
  v12 = type metadata accessor for ActionMenu.Child(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v49 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - v16;
  v18 = type metadata accessor for ArtworkModel(0);
  v53 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v54 = v18;
  v53(v11, 1, 1);
  v19 = sub_10003F544(&qword_100558B30);
  v20 = *(_QWORD *)(v13 + 72);
  v21 = *(unsigned __int8 *)(v13 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(v19, v22 + 2 * v20, v21 | 7);
  *(_OWORD *)(v23 + 16) = xmmword_1003CA220;
  sub_1001D533C(a1, v23 + v22);
  v52 = a1;
  v24 = sub_1001D58F0(a1, v23 + v22 + v20);
  v25 = ActionMenu.ID.init()(v24);
  v27 = v26;
  sub_100007A64((uint64_t)v11, (uint64_t)v9, &qword_10055D840);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v23);
  ActionMenu.init(id:title:subtitle:icon:children:)(v25);
  swift_storeEnumTagMultiPayload(v17, v12, 1);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v27);
  sub_100007A28((uint64_t)v11, &qword_10055D840);
  v28 = sub_10027B974(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  v30 = *(_QWORD *)(v28 + 16);
  v29 = *(_QWORD *)(v28 + 24);
  if (v30 >= v29 >> 1)
    v28 = sub_10027B974(v29 > 1, v30 + 1, 1, v28);
  *(_QWORD *)(v28 + 16) = v30 + 1;
  v31 = sub_1001D608C((uint64_t)v17, v28 + v22 + v30 * v20);
  v32 = dispatch thunk of StationDetail.episodes.getter(v31);
  if (v32)
  {
    v33 = v32;
    v34 = v50;
    if ((unint64_t)v32 >> 62)
    {
      if (v32 >= 0)
        v32 &= 0xFFFFFFFFFFFFFF8uLL;
      v35 = _CocoaArrayWrapper.endIndex.getter(v32);
    }
    else
    {
      v35 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v33);
    if (v35)
    {
      sub_1001D5D3C(v49);
      v37 = *(_QWORD *)(v28 + 16);
      v36 = *(_QWORD *)(v28 + 24);
      if (v37 >= v36 >> 1)
        v28 = sub_10027B974(v36 > 1, v37 + 1, 1, v28);
      *(_QWORD *)(v28 + 16) = v37 + 1;
      v32 = sub_1001D608C(v49, v28 + v22 + v37 * v20);
    }
  }
  else
  {
    v34 = v50;
  }
  v38 = v55;
  v39 = static Glyph.HeaderButtons.more.getter(v32);
  v40 = v58;
  Glyph.settings.getter(v39);
  v41 = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v38, v57);
  v42 = Glyph.Settings.name.getter(v41);
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v34);
  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(v42, v44, 0, 0, 0, 0);
  v45 = ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v53)(v11, 0, 1, v54);
  v46 = ActionMenu.ID.init()(v45);
  return ActionMenu.init(id:title:subtitle:icon:children:)(v46);
}

uint64_t sub_1001D533C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *object;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  Swift::String v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[40];
  _QWORD v74[4];
  uint64_t v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;

  v72 = a2;
  v3 = type metadata accessor for AlertActionStyle(0);
  v66 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  __chkstk_darwin(v3);
  v70 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_10055D840);
  v9 = __chkstk_darwin(v8);
  v71 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v68 = (char *)&v63 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v63 - v13;
  v15 = (void *)objc_opt_self(NSBundle);
  v16 = objc_msgSend(v15, "mainBundle");
  v17._countAndFlagsBits = 0xD00000000000001BLL;
  v76._object = (void *)0xEE006E6F69746174;
  v17._object = (void *)0x8000000100433DB0;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v76._countAndFlagsBits = 0x53206574656C6544;
  v69 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v76);

  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x6873617274, 0xE500000000000000, 0, 0, 0, 0);
  v19 = type metadata accessor for ArtworkModel(0);
  v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v65(v14, 0, 1, v19);
  v20 = objc_msgSend(v15, "mainBundle");
  v77._object = (void *)0xE000000000000000;
  v21._object = (void *)0x8000000100433DD0;
  v21._countAndFlagsBits = 0xD000000000000018;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v77._countAndFlagsBits = 0;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v77);

  v24 = sub_10003F544(&qword_1005559A0);
  v25 = swift_allocObject(v24, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1003CA200;
  v26 = StationDetail.title.getter();
  v28 = v27;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 64) = sub_10003E198();
  *(_QWORD *)(v25 + 32) = v26;
  *(_QWORD *)(v25 + 40) = v28;
  v29 = String.init(format:_:)(v23._countAndFlagsBits, v23._object, v25);
  v63 = v30;
  v64 = v29;
  swift_bridgeObjectRelease(v23._object);
  v31 = sub_10003F544((uint64_t *)&unk_100553780);
  v32 = swift_allocObject(v31, 40, 7);
  *(_OWORD *)(v32 + 16) = xmmword_1003CA250;
  v33 = objc_msgSend(v15, "mainBundle");
  v78._object = (void *)0xE000000000000000;
  v34._countAndFlagsBits = 0x53206574656C6544;
  v34._object = (void *)0xEE006E6F69746174;
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  v78._countAndFlagsBits = 0;
  v36 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, (Swift::String_optional)0, (NSBundle)v33, v35, v78);

  v37 = static Link.Presentation.alertDestructive.getter();
  v38 = Link.Presentation.init(rawValue:)(0);
  v39 = Link.Presentation.init(rawValue:)(v38);
  if (Link.Presentation.init(rawValue:)(v39 & v37) != v37)
    v38 = Link.Presentation.init(rawValue:)(v38 | v37);
  swift_retain();
  static ActionMetrics.notInstrumented.getter(v40);
  v41 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  v42 = ClosureAction.init(title:presentationStyle:actionMetrics:closure:)(v36._countAndFlagsBits, v36._object, v38, v7, sub_1001D60D0, a1);
  *(_QWORD *)(v32 + 32) = v42;
  v74[0] = v32;
  specialized Array._endMutation()(v42);
  v43 = v74[0];
  v44 = v68;
  v65(v68, 1, 1, v19);
  v45 = v70;
  v46 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v66 + 104))(v70, enum case for AlertActionStyle.normal(_:), v67);
  v47 = static Link.Presentation.textFollowsTintColor.getter(v46);
  v48 = Link.Presentation.init(rawValue:)(0);
  v49 = v48;
  v50 = Link.Presentation.init(rawValue:)(v48);
  if (Link.Presentation.init(rawValue:)(v50 & v47) != v47)
    LOBYTE(v49) = Link.Presentation.init(rawValue:)(v49 | v47);
  v51 = type metadata accessor for AlertAction(0);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  LOBYTE(v62) = v49;
  v52 = AlertAction.init(title:message:isCancelable:buttonActions:style:artwork:presentationStyle:)(v64, v63, 0, 0, 1, v43, v45, v44, v62);
  v74[3] = v51;
  v75 = sub_1001D60D8(&qword_100558B40, (uint64_t (*)(uint64_t))&type metadata accessor for AlertAction);
  v74[0] = v52;
  v53 = ActionMenu.ID.init()(v75);
  v55 = v54;
  v56 = v71;
  sub_100007A64((uint64_t)v14, v71, &qword_10055D840);
  sub_100007A64((uint64_t)v74, (uint64_t)v73, (uint64_t *)&unk_100554FF0);
  swift_bridgeObjectRetain(v55);
  object = v69._object;
  v58 = swift_bridgeObjectRetain(v69._object);
  v59 = v72;
  ActionMenu.Item.init(id:title:icon:role:state:action:)(v53, v55, v69._countAndFlagsBits, object, v56, 1, 1, v73, v58);
  v60 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v59, v60, 0);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v55);
  sub_100007A28((uint64_t)v14, &qword_10055D840);
  return sub_100007A28((uint64_t)v74, (uint64_t *)&unk_100554FF0);
}

uint64_t sub_1001D58F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v45[2];
  uint64_t countAndFlagsBits;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[40];
  _QWORD v53[4];
  uint64_t v54;
  Swift::String v55;

  v45[1] = a1;
  v51 = a2;
  v2 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v2);
  v49 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FlowDestinationPageHeader(0);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FlowPresentationContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FlowDestination(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (_QWORD *)((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10003F544(&qword_10055D840);
  v16 = __chkstk_darwin(v15);
  v50 = (uint64_t)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)v45 - v18;
  v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v55._object = (void *)0xAB00000000A680E2;
  v21._object = (void *)0x8000000100433D90;
  v21._countAndFlagsBits = 0xD00000000000001DLL;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v55._countAndFlagsBits = 0x73676E6974746553;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v55);
  countAndFlagsBits = v23._countAndFlagsBits;

  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(1918985575, 0xE400000000000000, 0, 0, 0, 0);
  v24 = type metadata accessor for ArtworkModel(0);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v19, 0, 1, v24);
  *v14 = StationDetail.uuid.getter(v25);
  v14[1] = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for FlowDestination.stationSettings(_:), v11);
  v27 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for FlowPresentationContext.presentModalPageSheet(_:), v7);
  v28 = static Link.Presentation.textFollowsTintColor.getter(v27);
  v29 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  v30 = Link.Presentation.init(rawValue:)(0);
  v31 = Link.Presentation.init(rawValue:)(v30);
  if (Link.Presentation.init(rawValue:)(v31 & v28) != v28)
    v30 = Link.Presentation.init(rawValue:)(v30 | v28);
  v32 = Link.Presentation.init(rawValue:)(v30);
  if (Link.Presentation.init(rawValue:)(v32 & v29) != v29)
    v30 = Link.Presentation.init(rawValue:)(v30 | v29);
  v33 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v47 + 104))(v6, enum case for FlowDestinationPageHeader.standard(_:), v48);
  v34 = v49;
  static ActionMetrics.notInstrumented.getter(v33);
  v35 = type metadata accessor for FlowAction(0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v14, 0, 0, 0, 0, v10, 0, v30, v6, v34);
  v53[3] = v35;
  v54 = sub_1001D60D8((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction);
  v53[0] = v36;
  v37 = ActionMenu.ID.init()(v54);
  v39 = v38;
  v40 = v50;
  sub_100007A64((uint64_t)v19, v50, &qword_10055D840);
  sub_100007A64((uint64_t)v53, (uint64_t)v52, (uint64_t *)&unk_100554FF0);
  swift_bridgeObjectRetain(v39);
  v41 = swift_bridgeObjectRetain(v23._object);
  v42 = v51;
  ActionMenu.Item.init(id:title:icon:role:state:action:)(v37, v39, countAndFlagsBits, v23._object, v40, 2, 1, v52, v41);
  v43 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v42, v43, 0);
  swift_bridgeObjectRelease(v23._object);
  swift_bridgeObjectRelease(v39);
  sub_100007A28((uint64_t)v19, &qword_10055D840);
  return sub_100007A28((uint64_t)v53, (uint64_t *)&unk_100554FF0);
}

uint64_t sub_1001D5D3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  _BYTE v28[40];
  _QWORD v29[4];
  uint64_t v30;
  Swift::String v31;

  v2 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v2);
  v4 = &v28[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_10003F544(&qword_10055D840);
  v6 = __chkstk_darwin(v5);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v28[-v9];
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v31._object = (void *)0xE400000000000000;
  v12._object = (void *)0x8000000100433D70;
  v12._countAndFlagsBits = 0xD000000000000019;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 2036427856;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v31);

  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(2036427888, 0xE400000000000000, 0, 0, 0, 0);
  v15 = type metadata accessor for ArtworkModel(0);
  v16 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 0, 1, v15);
  v17 = StationDetail.uuid.getter(v16);
  v19 = v18;
  static ActionMetrics.notInstrumented.getter(v17);
  v20 = type metadata accessor for PlayStationAction(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = PlayStationAction.init(title:stationUuid:episodeUuid:episodeAdamID:actionMetrics:)(0, 0, v17, v19, 0, 0, 0, 1, v4);
  v29[3] = v20;
  v30 = sub_1001D60D8(&qword_100558B38, (uint64_t (*)(uint64_t))&type metadata accessor for PlayStationAction);
  v29[0] = v21;
  v22 = ActionMenu.ID.init()(v30);
  v24 = v23;
  sub_100007A64((uint64_t)v10, (uint64_t)v8, &qword_10055D840);
  sub_100007A64((uint64_t)v29, (uint64_t)v28, (uint64_t *)&unk_100554FF0);
  swift_bridgeObjectRetain(v24);
  v25 = swift_bridgeObjectRetain(v14._object);
  ActionMenu.Item.init(id:title:icon:role:state:action:)(v22, v24, v14._countAndFlagsBits, v14._object, v8, 2, 1, v28, v25);
  v26 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(a1, v26, 0);
  swift_bridgeObjectRelease(v14._object);
  swift_bridgeObjectRelease(v24);
  sub_100007A28((uint64_t)v10, &qword_10055D840);
  return sub_100007A28((uint64_t)v29, (uint64_t *)&unk_100554FF0);
}

void sub_1001D6008()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v0 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
  if (v0)
  {
    v1 = v0;
    StationDetail.uuid.getter();
    v3 = v2;
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
    objc_msgSend(v1, "deleteStationWithUuid:", v4);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001D608C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionMenu.Child(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001D60D0()
{
  sub_1001D6008();
}

uint64_t sub_1001D60D8(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Action, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001D6118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];

  v41 = a2;
  v38 = a1;
  v3 = sub_10003F544((uint64_t *)&unk_100560A70);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_100558C30);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for MetricsFieldsContext(0);
  v10 = *(_QWORD *)(v42 - 8);
  v11 = __chkstk_darwin(v42);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v37 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v37 - v17;
  v19 = type metadata accessor for MetricsData(0);
  result = __chkstk_darwin(v19);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v2;
  if (*(_BYTE *)(v2 + 16) != 1 || *(_BYTE *)(v43 + 17) == 1)
  {
    v37 = result;
    v24 = v38;
    v38 = v21;
    v25 = static AppEnterMetricsEvent.makeData(enterKind:)(v24);
    MetricsFieldsContext.init()(v25);
    v26 = type metadata accessor for PageContextTracker(0);
    v44[0] = static PageContextTracker.shared.getter();
    static MetricsFieldsContext.Property<A>.pageContextTracker.getter();
    MetricsFieldsContext.addingValue<A>(_:forProperty:)(v44, v9, v26);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_release(v44[0]);
    v27 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28 = v42;
    v27(v13, v42);
    type metadata accessor for MetricsActivity(0);
    v29 = (void *)static MetricsActivity.shared.getter();
    v30 = MetricsActivity.currentPageFields.getter();

    v44[0] = v30;
    static MetricsFieldsContext.Property<A>.pageFields.getter();
    v31 = sub_10003F544(&qword_1005549E0);
    MetricsFieldsContext.addingValue<A>(_:forProperty:)(v44, v5, v31);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v40);
    swift_bridgeObjectRelease(v44[0]);
    v27(v16, v28);
    v32 = MetricsPipeline.process(_:using:)(v23, v18);
    v33 = sub_10002C5E0();
    v34 = v43;
    v35 = swift_retain(v43);
    v36 = static OS_dispatch_queue.main.getter(v35);
    v44[3] = v33;
    v44[4] = &protocol witness table for OS_dispatch_queue;
    v44[0] = v36;
    Promise.always(on:perform:)(v44, sub_1001D6F8C, v34);
    swift_release(v32);
    swift_release(v34);
    sub_10003D380(v44);
    v27(v18, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v23, v37);
  }
  return result;
}

void sub_1001D6418(void (*a1)(char *, uint64_t), uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t (*v24)();
  void *v25;
  id v26;
  id v27;
  NSString v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  id v33;
  __n128 v34;
  char *v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t (**v49)();
  uint64_t (*v50)();
  void *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)();
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char v85[24];
  void **aBlock;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  void *v89;
  void *v90;
  uint64_t v91;

  v75 = a3;
  v78 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v76 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v82 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v81 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MetricsPipeline(0);
  v80 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v80 + 64);
  __chkstk_darwin();
  v79 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for DispatchTime(0);
  v77 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin();
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v83 = (char *)&v63 - v14;
  v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MetricsData(0) - 8) + 64);
  __chkstk_darwin();
  v16 = __chkstk_darwin();
  if ((*(_BYTE *)(v3 + 17) & 1) == 0)
  {
    v70 = v16;
    v74 = (char *)&v63 - v17;
    v69 = v19;
    v68 = v18;
    v20 = swift_allocObject(&unk_1004B3C10, 32, 7);
    v73 = v8;
    *(_QWORD *)(v20 + 16) = 0;
    v21 = (_QWORD *)(v20 + 16);
    *(_BYTE *)(v20 + 24) = 1;
    v67 = a2;
    v22 = v20;
    v23 = (uint64_t (*)())swift_allocObject(&unk_1004B3C38, 40, 7);
    v72 = v5;
    v24 = v23;
    *((_QWORD *)v23 + 2) = v3;
    *((_QWORD *)v23 + 3) = v22;
    v25 = v75;
    *((_QWORD *)v23 + 4) = v75;
    swift_retain();
    v71 = v22;
    swift_retain();
    v26 = v25;
    v64 = v10;
    v27 = v26;
    v28 = String._bridgeToObjectiveC()();
    v29 = swift_allocObject(&unk_1004B3C60, 32, 7);
    *(_QWORD *)(v29 + 16) = sub_1001D6E18;
    *(_QWORD *)(v29 + 24) = v24;
    v65 = v24;
    v90 = sub_100029B44;
    v91 = v29;
    aBlock = _NSConcreteStackBlock;
    v87 = 1107296256;
    v88 = sub_100027AF8;
    v89 = &unk_1004B3C78;
    v30 = _Block_copy(&aBlock);
    v75 = v7;
    v31 = v30;
    v32 = v91;
    swift_retain();
    v33 = objc_msgSend(v27, "beginBackgroundTaskWithName:expirationHandler:", v28, v31, swift_release(v32).n128_f64[0]);
    _Block_release(v31);

    v34 = swift_beginAccess(v21, v85, 1, 0);
    *v21 = v33;
    *(_BYTE *)(v22 + 24) = 0;
    v35 = v74;
    static AppExitMetricsEvent.makeData(exitKind:)(v78, v34);
    sub_10002C5E0();
    v66 = static OS_dispatch_queue.main.getter(v36);
    static DispatchTime.now()(v66);
    + infix(_:_:)(v13, 0.5);
    v78 = *(void (**)(char *, uint64_t))(v77 + 8);
    v78(v13, v84);
    v38 = v79;
    v37 = v80;
    v39 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, v67, v64);
    v40 = v68;
    v41 = v69;
    v42 = v70;
    (*(void (**)(uint64_t, char *, uint64_t))(v68 + 16))(v69, v35, v70);
    v43 = *(unsigned __int8 *)(v37 + 80);
    v44 = (v43 + 16) & ~v43;
    v45 = *(unsigned __int8 *)(v40 + 80);
    v46 = (v11 + v45 + v44) & ~v45;
    v47 = (v15 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
    v48 = swift_allocObject(&unk_1004B3CB0, v47 + 16, v43 | v45 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v48 + v44, v38, v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v48 + v46, v41, v42);
    v49 = (uint64_t (**)())(v48 + v47);
    v50 = v65;
    *v49 = sub_1001D6E18;
    v49[1] = v50;
    v90 = sub_1001D6EF0;
    v91 = v48;
    aBlock = _NSConcreteStackBlock;
    v87 = 1107296256;
    v88 = sub_100027AF8;
    v89 = &unk_1004B3CC8;
    v51 = _Block_copy(&aBlock);
    v52 = v91;
    swift_retain();
    swift_release(v52);
    v53 = v81;
    static DispatchQoS.unspecified.getter(v54);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v55 = sub_10017F258();
    v56 = sub_10003F544((uint64_t *)&unk_10055B200);
    v57 = sub_10002F9C8((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200, (uint64_t)&protocol conformance descriptor for [A]);
    v58 = v75;
    v59 = v56;
    v60 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v59, v57, v72, v55);
    v61 = v83;
    v62 = (void *)v66;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v83, v53, v58, v51);
    _Block_release(v51);
    swift_release(v50);

    (*(void (**)(char *, uint64_t))(v76 + 8))(v58, v60);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v53, v73);
    v78(v61, v84);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v74, v42);
    swift_release(v71);
  }
}

uint64_t sub_1001D69F8(_BYTE *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[24];

  v6 = a2 + 16;
  objc_sync_enter(a1);
  swift_beginAccess(v6, v9, 0, 0);
  if ((*(_BYTE *)(a2 + 24) & 1) == 0)
  {
    objc_msgSend(a3, "endBackgroundTask:", *(_QWORD *)(a2 + 16));
    swift_beginAccess(v6, &v8, 1, 0);
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 1;
    a1[17] = 1;
  }
  return objc_sync_exit(a1);
}

id sub_1001D6A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id result;
  id v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  void (*v23)(char *, uint64_t, __n128);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[5];

  v44 = a3;
  v45 = a4;
  v42 = a2;
  v43 = a1;
  v4 = sub_10003F544((uint64_t *)&unk_100560A70);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin();
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100558C30);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for MetricsFieldsContext(0);
  v11 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin();
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v38 - v14;
  __chkstk_darwin();
  v17 = (char *)&v38 - v16;
  result = objc_msgSend((id)objc_opt_self(IMMetrics), "flushImmediately");
  if (result)
  {
    v19 = result;
    v20 = sub_10003F544(&qword_100558C38);
    v39 = Promise<A>.init(_:)(v19);
    MetricsFieldsContext.init()(v39);
    v21 = type metadata accessor for PageContextTracker(0);
    v47[0] = static PageContextTracker.shared.getter();
    static MetricsFieldsContext.Property<A>.pageContextTracker.getter(v47[0]);
    MetricsFieldsContext.addingValue<A>(_:forProperty:)(v47, v10, v21);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v22 = swift_release(v47[0]);
    v23 = *(void (**)(char *, uint64_t, __n128))(v11 + 8);
    v24 = v46;
    v23(v13, v46, v22);
    type metadata accessor for MetricsActivity(0);
    v25 = (void *)static MetricsActivity.shared.getter();
    v26 = MetricsActivity.currentPageFields.getter();

    v47[0] = v26;
    static MetricsFieldsContext.Property<A>.pageFields.getter();
    v27 = sub_10003F544(&qword_1005549E0);
    MetricsFieldsContext.addingValue<A>(_:forProperty:)(v47, v6, v27);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v41);
    v28 = swift_bridgeObjectRelease(v47[0]);
    v23(v15, v24, v28);
    v29 = MetricsPipeline.process(_:using:)(v42, v17);
    v30 = sub_10002F9C8(&qword_100558C40, &qword_100558C38, (uint64_t)&protocol conformance descriptor for Promise<A>);
    v31 = v39;
    v32 = Promise.join<A>(with:)(v39, v20, v30);
    v33 = swift_allocObject(&unk_1004B3D00, 32, 7);
    v34 = v45;
    *(_QWORD *)(v33 + 16) = v44;
    *(_QWORD *)(v33 + 24) = v34;
    v35 = sub_10002C5E0();
    v36 = swift_retain();
    v37 = static OS_dispatch_queue.main.getter(v36);
    v47[3] = v35;
    v47[4] = &protocol witness table for OS_dispatch_queue;
    v47[0] = v37;
    Promise.always(on:perform:)(v47, sub_100029B44, v33);
    swift_release(v31);
    swift_release(v29);
    swift_release(v32);
    swift_release(v33);
    sub_10003D380(v47);
    return (id)((uint64_t (*)(char *, uint64_t))v23)(v17, v24);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001D6DC4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 18, 7);
}

uint64_t sub_1001D6DD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D6DE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D6E18()
{
  uint64_t v0;

  return sub_1001D69F8(*(_BYTE **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1001D6E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for MetricsPipeline(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for MetricsData(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v10);
}

id sub_1001D6EF0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;

  v1 = *(_QWORD *)(type metadata accessor for MetricsPipeline(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for MetricsData(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1001D6A90(v0 + v2, v0 + v5, *v6, v6[1]);
}

uint64_t sub_1001D6F68()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001D6F8C()
{
  uint64_t v0;

  *(_WORD *)(v0 + 16) = 1;
}

uint64_t ImplicitFollowsDecayCoordinator.delegate.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 40);
}

uint64_t ImplicitFollowsDecayCoordinator.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  swift_beginAccess(v2 + 40, v6, 1, 0);
  *(_QWORD *)(v2 + 48) = a2;
  swift_unknownObjectWeakAssign(v2 + 40, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t (*ImplicitFollowsDecayCoordinator.delegate.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 40, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_1001D70B4;
}

uint64_t ImplicitFollowsDecayCoordinator.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 56, 7);
  ImplicitFollowsDecayCoordinator.init()();
  return v1;
}

uint64_t sub_1001D70EC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D7110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1001D716C();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1001D7164(uint64_t a1)
{
  uint64_t v1;

  return sub_1001D7110(a1, v1);
}

void sub_1001D716C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  uint8_t *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  _QWORD aBlock[5];
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Logger.podcastsStatesCoordination.getter(v4);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = v8;
  v10 = Logger.logObject.getter(v8);
  if (os_log_type_enabled(v10, v9))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "Triggering new check for Max Implicit Follows limit.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v12 = objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
  v13 = objc_msgSend(v12, "integerForKey:", kMTImplicitlyFollowedShowsLimit);

  aBlock[4] = sub_1001D7D5C;
  v17 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000825C;
  aBlock[3] = &unk_1004B3DF8;
  v14 = _Block_copy(aBlock);
  v15 = v17;
  swift_retain(v1);
  swift_release(v15);
  objc_msgSend(v13, "asyncValueWithCompletion:", v14);
  _Block_release(v14);

}

void sub_1001D7328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void **v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void **aBlock;
  _QWORD v42[4];
  _QWORD *v43;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v39 - v13;
  if (a3)
  {
    v15 = swift_errorRetain(a3);
    static Logger.podcastsStatesCoordination.getter(v15);
    v16 = swift_errorRetain(a3);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(8, -1);
      v40 = v7;
      v21 = (_QWORD *)v20;
      *(_DWORD *)v19 = 138412290;
      v22 = _convertErrorToNSError(_:)(a3);
      aBlock = (void **)v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v42, v19 + 4, v19 + 12);
      *v21 = v22;
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to fetch implicit followed shows limit from the bag: %@", v19, 0xCu);
      v23 = sub_10003F544((uint64_t *)&unk_100556480);
      swift_arrayDestroy(v21, 1, v23);
      v24 = v21;
      v7 = v40;
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      swift_errorRelease(a3);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);

    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }
  else if (a1
         && (aBlock = 0,
             LOBYTE(v42[0]) = 1,
             v12 = static Int._conditionallyBridgeFromObjectiveC(_:result:)(a1, &aBlock),
             (v42[0] & 1) == 0))
  {
    v29 = aBlock;
    v30 = objc_msgSend((id)objc_opt_self(MTPodcast), "predicateForImplicitlyFollowedPodcasts");
    v31 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
    v32 = objc_msgSend(v31, "privateQueueContext");

    v33 = swift_allocObject(&unk_1004B3D28, 24, 7);
    swift_weakInit(v33 + 16, a4);
    v34 = (_QWORD *)swift_allocObject(&unk_1004B3E30, 48, 7);
    v34[2] = v33;
    v34[3] = v32;
    v34[4] = v30;
    v34[5] = v29;
    v42[3] = sub_1001D7D98;
    v43 = v34;
    aBlock = _NSConcreteStackBlock;
    v42[0] = 1107296256;
    v42[1] = sub_100027AF8;
    v42[2] = &unk_1004B3E48;
    v35 = _Block_copy(&aBlock);
    v36 = v43;
    v37 = v32;
    v38 = v30;
    swift_release(v36);
    objc_msgSend(v37, "performBlock:", v35);
    _Block_release(v35);

  }
  else
  {
    v25 = static Logger.podcastsStatesCoordination.getter(v12);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to cast value for implicitly followed shows limit from the bag to an Int", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t sub_1001D76E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  BOOL v28;
  char *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  Class isa;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t Strong;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjectType;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];
  char v62[40];
  char v63[24];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v57 - v13;
  a1 += 16;
  swift_beginAccess(a1, v63, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v16 = result;
    v59 = v9;
    v17 = (void *)kMTPodcastEntityName;
    v18 = (char *)objc_msgSend(a2, "countOfObjectsInEntity:predicate:", kMTPodcastEntityName, a3);
    v19 = v18;
    if ((uint64_t)v18 <= a4)
    {
      v51 = static Logger.podcastsStatesCoordination.getter(v18);
      v52 = static os_log_type_t.default.getter(v51);
      v53 = v52;
      v54 = Logger.logObject.getter(v52);
      v55 = v53;
      if (os_log_type_enabled(v54, v53))
      {
        v56 = swift_slowAlloc(22, -1);
        *(_DWORD *)v56 = 134218240;
        v60 = (uint64_t)v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v56 + 4, v56 + 12);
        *(_WORD *)(v56 + 12) = 2048;
        v60 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v56 + 14, v56 + 22);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Not proceeding with eviction of implicitly followed shows -- Count of implicitly followed shows: %ld is not over the limit: %ld", (uint8_t *)v56, 0x16u);
        swift_slowDealloc(v56, -1, -1);
        swift_release(v16);

      }
      else
      {

        swift_release(v16);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v12, v8);
    }
    else
    {
      v57 = v8;
      v58 = a2;
      v20 = sub_10003F544((uint64_t *)&unk_100553780);
      inited = swift_initStackObject(v20, v62);
      *(_OWORD *)(inited + 16) = xmmword_1003CA250;
      static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastLastDatePlayed);
      v23 = v22;
      v24 = objc_allocWithZone((Class)NSSortDescriptor);
      v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v23);
      v26 = objc_msgSend(v24, "initWithKey:ascending:", v25, 1);

      *(_QWORD *)(inited + 32) = v26;
      v60 = inited;
      result = specialized Array._endMutation()(v27);
      v28 = __OFSUB__(v19, a4);
      v29 = &v19[-a4];
      if (v28)
      {
        __break(1u);
      }
      else
      {
        v30 = v60;
        v31 = v17;
        v32 = sub_100178E24(v30);
        swift_bridgeObjectRelease(v30);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v32);
        v34 = v58;
        v35 = objc_msgSend(v58, "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:limit:", v31, a3, isa, 0, v29);

        if (v35)
        {
          v36 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
          v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v36);

          v38 = sub_10034E718(v37);
          v39 = swift_bridgeObjectRelease(v37);
          if (v38)
          {
            v40 = static Logger.podcastsStatesCoordination.getter(v39);
            v41 = static os_log_type_t.default.getter(v40);
            v42 = v41;
            v43 = Logger.logObject.getter(v41);
            v44 = v42;
            if (os_log_type_enabled(v43, v42))
            {
              v45 = (uint8_t *)swift_slowAlloc(12, -1);
              *(_DWORD *)v45 = 134217984;
              v34 = v58;
              v60 = (uint64_t)v29;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v45 + 4, v45 + 12);
              _os_log_impl((void *)&_mh_execute_header, v43, v44, "Implicitly followed shows over the limit. Proceeding to evict %ld shows.", v45, 0xCu);
              swift_slowDealloc(v45, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v57);
            swift_beginAccess(v16 + 40, &v60, 0, 0);
            Strong = swift_unknownObjectWeakLoadStrong(v16 + 40);
            if (Strong)
            {
              v48 = Strong;
              v49 = *(_QWORD *)(v16 + 48);
              ObjectType = swift_getObjectType(Strong, v47);
              (*(void (**)(uint64_t, _QWORD *, id, uint64_t, uint64_t))(v49 + 8))(v16, v38, v34, ObjectType, v49);
              swift_bridgeObjectRelease(v38);
              swift_unknownObjectRelease(v48);
            }
            else
            {
              swift_bridgeObjectRelease(v38);
            }
            objc_msgSend(v34, "saveInCurrentBlock");
          }
        }
        return swift_release(v16);
      }
    }
  }
  return result;
}

uint64_t ImplicitFollowsDecayCoordinator.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  sub_100152110(v0 + 40);
  return v0;
}

uint64_t ImplicitFollowsDecayCoordinator.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  sub_100152110(v0 + 40);
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_1001D7BE0()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 24));
}

uint64_t sub_1001D7BEC()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *v0;
  swift_beginAccess(v1 + 40, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1 + 40);
}

uint64_t (*sub_1001D7C34(_QWORD *a1))()
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *v1;
  v3[5] = v4;
  swift_beginAccess(v4 + 40, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_1001D70B4;
}

void sub_1001D7CA4(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 40, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

unint64_t sub_1001D7D18()
{
  unint64_t result;

  result = qword_100558C70;
  if (!qword_100558C70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ImplicitFollowsDecayEvent, &type metadata for ImplicitFollowsDecayEvent);
    atomic_store(result, (unint64_t *)&qword_100558C70);
  }
  return result;
}

void sub_1001D7D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1001D7328(a1, a2, a3, v3);
}

uint64_t sub_1001D7D64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001D7D98()
{
  uint64_t v0;

  return sub_1001D76E4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001D7DAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;

  v1 = v0;
  v2 = type metadata accessor for LegacyDownload();
  swift_allocObject(v2, 136, 7);
  sub_10019989C();
  v4 = v3;
  v5 = (int *)type metadata accessor for DownloadJob(0);
  v6 = (_QWORD *)(v1 + v5[5]);
  v7 = v6[1];
  v8 = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v4 + 64) = *v6;
  *(_QWORD *)(v4 + 72) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = v1 + v5[9];
  v10 = *(_QWORD *)(v9 + 24);
  v11 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v4 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  if ((*(_BYTE *)(v9 + 40) & 1) == 0)
  {
    v12 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithLongLong:", *(_QWORD *)(v9 + 32));
    v13 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v12;

  }
  if ((*(_BYTE *)(v9 + 56) & 1) == 0)
  {
    v14 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithLongLong:", *(_QWORD *)(v9 + 48));
    v15 = *(void **)(v4 + 32);
    *(_QWORD *)(v4 + 32) = v14;

  }
  v16 = (uint64_t *)(v1 + v5[10]);
  v17 = v16[3];
  switch(v17)
  {
    case 1:
      v18 = 1;
      goto LABEL_15;
    case 2:
      v18 = 4;
      goto LABEL_15;
    case 3:
      *(_QWORD *)(v4 + 88) = 0;
      return v4;
    case 4:
      v18 = 5;
LABEL_15:
      *(_QWORD *)(v4 + 88) = v18;
      break;
    default:
      v19 = *((_WORD *)v16 + 24);
      v21 = v16[4];
      v20 = *((double *)v16 + 5);
      v22 = *v16;
      v23 = *(_QWORD *)(v4 + 128);
      *(_QWORD *)(v4 + 120) = v16[2];
      *(_QWORD *)(v4 + 128) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v23);
      v24 = 2;
      if ((v19 & 0x100) != 0)
        v24 = 3;
      *(_QWORD *)(v4 + 80) = v22;
      *(_QWORD *)(v4 + 88) = v24;
      v25 = 0.0;
      if ((v19 & 1) == 0)
        v25 = v20;
      *(_QWORD *)(v4 + 96) = v21;
      *(double *)(v4 + 104) = v25;
      break;
  }
  return v4;
}

uint64_t sub_1001D7F50@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  unint64_t v53;

  v4 = v3;
  v8 = type metadata accessor for DownloadJob(0);
  v9 = v4 + *(int *)(v8 + 40);
  if (*(_QWORD *)(v9 + 24) == 3)
  {
    v10 = *(_WORD *)(v9 + 48);
    v12 = *(_QWORD *)(v9 + 32);
    v11 = *(_QWORD *)(v9 + 40);
    v13 = *(_QWORD *)(v9 + 16);
    v44 = *(_OWORD *)v9;
    v14 = static os_log_type_t.error.getter(v8);
    sub_100181038();
    v15 = (void *)static OS_os_log.downloads.getter();
    v16 = sub_10003F544(&qword_1005559A0);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1003CA200;
    v52 = 0;
    v53 = 0xE000000000000000;
    v46 = v44;
    v47 = v13;
    v48 = 3;
    v49 = v12;
    v50 = v11;
    v51 = v10;
    _print_unlocked<A, B>(_:_:)(&v46, &v52, &type metadata for DownloadJob.Phase, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v18 = v52;
    v19 = v53;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_10003E198();
    *(_QWORD *)(v17 + 32) = v18;
    *(_QWORD *)(v17 + 40) = v19;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Can't update task progress, job is in wrong phase: %{public}s", 61, 2, v17);

    swift_bridgeObjectRelease(v17);
    return sub_10014FDF8(v4, a3, type metadata accessor for DownloadJob);
  }
  else
  {
    v21 = (int *)v8;
    v42 = *(_BYTE *)(a1 + 48);
    v43 = *(_QWORD *)(a1 + 32);
    v45 = *(_QWORD *)(a1 + 40);
    v40 = *(_OWORD *)a1;
    v41 = *(_OWORD *)(a1 + 16);
    v22 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a3, v4, v22);
    v23 = (uint64_t *)(v4 + v21[5]);
    v24 = v23[1];
    v39 = *v23;
    v25 = v4 + v21[8];
    v27 = *(_QWORD *)v25;
    v26 = *(_QWORD *)(v25 + 8);
    v38 = a2;
    v28 = *(_BYTE *)(v25 + 16);
    v29 = *(_QWORD *)(v4 + v21[7]);
    sub_10014FDF8(v4 + v21[9], a3 + v21[9], type metadata accessor for EpisodeMetadata);
    v30 = v21[6];
    v31 = v4 + v30;
    v32 = a3 + v30;
    v33 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v32, v31, v33);
    *(_QWORD *)(a3 + v21[7]) = v29;
    v34 = a3 + v21[8];
    *(_QWORD *)v34 = v27;
    *(_QWORD *)(v34 + 8) = v26;
    *(_BYTE *)(v34 + 16) = v28;
    v35 = (_QWORD *)(a3 + v21[5]);
    *v35 = v39;
    v35[1] = v24;
    v36 = a3 + v21[10];
    if ((v38 & 1) != 0)
      v37 = 256;
    else
      v37 = 0;
    *(_OWORD *)v36 = v40;
    *(_OWORD *)(v36 + 16) = v41;
    *(_QWORD *)(v36 + 32) = v43;
    *(_QWORD *)(v36 + 40) = v45;
    *(_WORD *)(v36 + 48) = v37 & 0xFFFE | v42 & 1;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
    return sub_1001DBA18(a1);
  }
}

BOOL sub_1001D8204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  switch(*(_QWORD *)(a1 + 24))
  {
    case 1:
      return v2 == 1;
    case 2:
      return v2 == 2;
    case 3:
      return v2 == 3;
    case 4:
      return v2 == 4;
    default:
      return (unint64_t)(v2 - 1) >= 4;
  }
}

Swift::Int sub_1001D827C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100026844((unint64_t *)&unk_100558620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001D82E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_100026844((unint64_t *)&unk_100558620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_1001D8340(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  v1 = type metadata accessor for UUID(0);
  v2 = sub_100026844((unint64_t *)&unk_100558620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001D83A8(char *a1, char *a2)
{
  return sub_1002793A8(*a1, *a2);
}

Swift::Int sub_1001D83B4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 0x6F65646976;
  else
    v2 = 0x6F69647561;
  String.hash(into:)(v4, v2, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1001D8420(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 0x6F65646976;
  else
    v2 = 0x6F69647561;
  String.hash(into:)(a1, v2, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

Swift::Int sub_1001D8460(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 0x6F65646976;
  else
    v3 = 0x6F69647561;
  String.hash(into:)(v5, v3, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1001D84C8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004ACE38, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1001D8524(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x6F69647561;
  if (*v1)
    v2 = 0x6F65646976;
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

void sub_1001D8554()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  double v6;
  double v7;

  v1 = (int *)type metadata accessor for EpisodeMetadata(0);
  if (*(_BYTE *)(v0 + v1[13] + 8) == 1)
  {
    v2 = v0 + v1[14];
    v3 = *(_BYTE *)(v0 + v1[12]);
    if ((*(_BYTE *)(v2 + 8) & 1) == 0)
    {
      v4 = *(_QWORD *)v2;
      if ((v3 & 1) != 0)
      {
        v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F65646976, 0xE500000000000000, 0x6F69647561, 0xE500000000000000, 0);
        swift_bridgeObjectRelease(0xE500000000000000);
        v6 = 188475.637;
        if ((v5 & 1) != 0)
          v6 = 14685.2654;
      }
      else
      {
        swift_bridgeObjectRelease(0xE500000000000000);
        v6 = 14685.2654;
      }
      v7 = v6 * (double)v4;
      if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) != 0)
      {
        if (v7 > -9.22337204e18)
        {
          if (v7 < 9.22337204e18)
            return;
LABEL_16:
          __break(1u);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_16;
    }
  }
}

void sub_1001D867C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt64 v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::UInt64 v27;
  uint64_t v28;
  Swift::UInt64 v29;
  uint64_t v30;
  uint64_t v31;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_1005522F0);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1[1];
  if (v10)
  {
    v11 = *v1;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(a1, v11, v10);
    swift_bridgeObjectRelease(v10);
    v12 = v1[3];
    if (v12)
    {
LABEL_3:
      v13 = v1[2];
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v12);
      String.hash(into:)(a1, v13, v12);
      swift_bridgeObjectRelease(v12);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v12 = v1[3];
    if (v12)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
LABEL_6:
  if (*((_BYTE *)v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = v1[4];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  if (*((_BYTE *)v1 + 56) == 1)
  {
    Hasher._combine(_:)(0);
    v15 = v1[9];
    if (v15)
      goto LABEL_11;
  }
  else
  {
    v21 = v1[6];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    v15 = v1[9];
    if (v15)
    {
LABEL_11:
      v16 = v1[8];
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v15);
      String.hash(into:)(a1, v16, v15);
      swift_bridgeObjectRelease(v15);
      v17 = v1[11];
      if (v17)
        goto LABEL_12;
LABEL_16:
      Hasher._combine(_:)(0);
      v19 = v1[13];
      if (v19)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  Hasher._combine(_:)(0);
  v17 = v1[11];
  if (!v17)
    goto LABEL_16;
LABEL_12:
  v18 = v1[10];
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v18, v17);
  swift_bridgeObjectRelease(v17);
  v19 = v1[13];
  if (v19)
  {
LABEL_13:
    v20 = v1[12];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(a1, v20, v19);
    swift_bridgeObjectRelease(v19);
    goto LABEL_18;
  }
LABEL_17:
  Hasher._combine(_:)(0);
LABEL_18:
  v22 = (int *)type metadata accessor for EpisodeMetadata(0);
  v23 = type metadata accessor for URL(0);
  v24 = sub_100026844(&qword_100558EA8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
  if (*((_BYTE *)v1 + v22[12]))
    v25 = 0x6F65646976;
  else
    v25 = 0x6F69647561;
  String.hash(into:)(a1, v25, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  v26 = (uint64_t)v1 + v22[13];
  if (*(_BYTE *)(v26 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v27 = *(_QWORD *)v26;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
  }
  v28 = (uint64_t)v1 + v22[14];
  if (*(_BYTE *)(v28 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v29 = *(_QWORD *)v28;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  sub_10017809C((uint64_t)v1 + v22[15], (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    Hasher._combine(_:)(1u);
    v30 = sub_100026844(&qword_100558EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v3, v30);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

Swift::Int sub_1001D8AB0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1001D867C((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001D8AF0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1001D867C((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_1001D8B2C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(a2 + 32))();
  if (!v3)
    return 0x6E776F6E6B6E755BLL;
  return result;
}

BOOL sub_1001D8B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v35 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v15((char *)&v35 - v13, v3, a1);
  v16 = _getErrorEmbeddedNSError<A>(_:)(v14, a1, a2);
  if (v16)
  {
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, a1);
  }
  else
  {
    v17 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v18, v14, a1);
  }
  v19 = (void *)_convertErrorToNSError(_:)(v17);
  swift_errorRelease(v17);
  v20 = objc_msgSend(v19, "domain");

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  if (v21 == v24 && v23 == v25)
  {
    swift_bridgeObjectRelease_n(v23, 2);
    v15(v12, v3, a1);
  }
  else
  {
    v27 = v25;
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v24, v25, 0);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v27);
    v15(v12, v3, a1);
    if ((v28 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, a1);
      return 0;
    }
  }
  v15(v9, (uint64_t)v12, a1);
  v30 = _getErrorEmbeddedNSError<A>(_:)(v9, a1, a2);
  if (v30)
  {
    v31 = v30;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  }
  else
  {
    v31 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v32, v9, a1);
  }
  v33 = (void *)_convertErrorToNSError(_:)(v31);
  swift_errorRelease(v31);
  v34 = objc_msgSend(v33, "code");

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, a1);
  return v34 == (id)-999;
}

id sub_1001D8E0C()
{
  id *v0;

  return objc_msgSend(*v0, "state");
}

id sub_1001D8E1C()
{
  id *v0;

  return objc_msgSend(*v0, "progress");
}

id sub_1001D8E40()
{
  id *v0;

  return objc_msgSend(*v0, "taskIdentifier");
}

uint64_t sub_1001D8E50()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "taskDescription");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

BOOL sub_1001D8EB8()
{
  id *v0;
  id v1;
  void *v2;
  BOOL v3;
  _QWORD v5[3];
  _BYTE v6[8];

  v1 = objc_msgSend(*v0, "error");
  if (v1)
  {
    v2 = v1;
    swift_getErrorValue(v1, v6, v5);
    v3 = sub_1001D8B6C(v5[1], v5[2]);

  }
  else
  {
    return 0;
  }
  return v3;
}

id sub_1001D8F24()
{
  id *v0;

  return objc_msgSend(*v0, "countOfBytesExpectedToReceive");
}

id sub_1001D8F34()
{
  id *v0;

  return objc_msgSend(*v0, "countOfBytesReceived");
}

id sub_1001D8F44()
{
  id *v0;

  return objc_msgSend(*v0, "resume");
}

id sub_1001D8F54()
{
  id *v0;

  return objc_msgSend(*v0, "cancel");
}

id sub_1001D8F64()
{
  id *v0;

  return objc_msgSend(*v0, "suspend");
}

uint64_t sub_1001D8F74(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1003CD810, a2);
  v5 = swift_allocObject(&unk_1004B3FD8, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = swift_retain();
  v7 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 3, sub_1001DBAA0, v5, &protocol witness table for NSObject, v6);
  swift_release(v5);
  swift_release(KeyPath);
  return v7;
}

uint64_t NSURLSessionTaskState.description.getter(uint64_t a1)
{
  uint64_t result;

  result = 0x6E696C65636E6163;
  switch(a1)
  {
    case 0:
      result = 0x676E696E6E7572;
      break;
    case 1:
      result = 0x65646E6570737573;
      break;
    case 2:
      return result;
    case 3:
      result = 0x6574656C706D6F63;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_1001D90C4()
{
  _QWORD *v0;
  uint64_t result;

  result = 0x6E696C65636E6163;
  switch(*v0)
  {
    case 0:
      result = 0x676E696E6E7572;
      break;
    case 1:
      result = 0x65646E6570737573;
      break;
    case 2:
      return result;
    case 3:
      result = 0x6574656C706D6F63;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

_QWORD *sub_1001D9164(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v9 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v9;
    v10 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v10;
    v11 = a2[13];
    v12 = a3[11];
    v30 = (uint64_t)a2 + v12;
    v31 = a1 + v12;
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v11;
    v13 = type metadata accessor for URL(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v15 = swift_bridgeObjectRetain(v11);
    v14(v31, v30, v13, v15);
    v16 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
    v19 = a3[14];
    v20 = a3[15];
    v21 = (char *)v4 + v19;
    v22 = (uint64_t)a2 + v19;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = *(_BYTE *)(v22 + 8);
    v23 = (char *)v4 + v20;
    v24 = (char *)a2 + v20;
    v25 = type metadata accessor for Date(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_10003F544(&qword_1005522F0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
  }
  return v4;
}

uint64_t sub_1001D9340(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  v4 = (char *)a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 60);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t sub_1001D9400(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 104);
  v11 = a3[11];
  v28 = a2 + v11;
  v29 = a1 + v11;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  v12 = type metadata accessor for URL(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v14 = swift_bridgeObjectRetain(v10);
  v13(v29, v28, v12, v14);
  v15 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a3[14];
  v19 = a3[15];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = (void *)(a1 + v19);
  v23 = (const void *)(a2 + v19);
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_10003F544(&qword_1005522F0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t sub_1001D95B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  uint64_t v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[11];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v22 = a3[13];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = v25;
  v26 = a3[14];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = v29;
  v30 = a3[15];
  v31 = (void *)(a1 + v30);
  v32 = (void *)(a2 + v30);
  v33 = type metadata accessor for Date(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  LODWORD(v20) = v35(v31, 1, v33);
  v36 = v35(v32, 1, v33);
  if (!(_DWORD)v20)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 24))(v31, v32, v33);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_6;
  }
  if (v36)
  {
LABEL_6:
    v37 = sub_10003F544(&qword_1005522F0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v31, v32, v33);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  return a1;
}

uint64_t sub_1001D97E8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = a3[11];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v11 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[14];
  v16 = a3[15];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = (void *)(a1 + v16);
  v20 = (const void *)(a2 + v16);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_10003F544(&qword_1005522F0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t sub_1001D9944(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = a3[11];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a3[14];
  v24 = a3[15];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = (void *)(a1 + v24);
  v28 = (void *)(a2 + v24);
  v29 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  LODWORD(v18) = v31(v27, 1, v29);
  v32 = v31(v28, 1, v29);
  if (!(_DWORD)v18)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 40))(v27, v28, v29);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v27, v29);
    goto LABEL_6;
  }
  if (v32)
  {
LABEL_6:
    v33 = sub_10003F544(&qword_1005522F0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v30 + 32))(v27, v28, v29);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  return a1;
}

uint64_t sub_1001D9B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D9B30);
}

uint64_t sub_1001D9B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 44);
    }
    else
    {
      v11 = sub_10003F544(&qword_1005522F0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 60);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t sub_1001D9BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D9BEC);
}

uint64_t sub_1001D9BEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      v10 = sub_10003F544(&qword_1005522F0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 60);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

_QWORD *sub_1001D9C8C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  __n128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  void (*v50)(char *, char *, uint64_t);
  void (*v51)(char *, char *, uint64_t, __n128);
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v42 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v42 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    v56 = type metadata accessor for Date(0);
    v57 = *(_QWORD *)(v56 - 8);
    v15 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
    v16 = swift_bridgeObjectRetain(v12);
    v50 = v15;
    ((void (*)(char *, char *, uint64_t, __n128))v15)(v13, v14, v56, v16);
    v17 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v18[16] = v19[16];
    v21 = a3[9];
    v22 = (char *)a1 + v21;
    v58 = a2;
    v23 = (char *)a2 + v21;
    v54 = *((_QWORD *)v23 + 1);
    v55 = v20;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v54;
    v24 = *((_QWORD *)v23 + 3);
    *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
    *((_QWORD *)v22 + 3) = v24;
    v22[40] = v23[40];
    *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
    v22[56] = v23[56];
    *((_QWORD *)v22 + 6) = *((_QWORD *)v23 + 6);
    v25 = *((_QWORD *)v23 + 9);
    *((_QWORD *)v22 + 8) = *((_QWORD *)v23 + 8);
    *((_QWORD *)v22 + 9) = v25;
    v26 = *((_QWORD *)v23 + 11);
    *((_QWORD *)v22 + 10) = *((_QWORD *)v23 + 10);
    *((_QWORD *)v22 + 11) = v26;
    v27 = *((_QWORD *)v23 + 13);
    *((_QWORD *)v22 + 12) = *((_QWORD *)v23 + 12);
    *((_QWORD *)v22 + 13) = v27;
    v28 = (int *)type metadata accessor for EpisodeMetadata(0);
    v29 = v28[11];
    v52 = &v23[v29];
    v53 = &v22[v29];
    v30 = type metadata accessor for URL(0);
    v51 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    v31 = swift_bridgeObjectRetain(v27);
    v51(v53, v52, v30, v31);
    v22[v28[12]] = v23[v28[12]];
    v32 = v28[13];
    v33 = &v22[v32];
    v34 = &v23[v32];
    v33[8] = v34[8];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v35 = v28[14];
    v36 = &v22[v35];
    v37 = &v23[v35];
    v36[8] = v37[8];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v38 = v28[15];
    v39 = &v22[v38];
    v40 = &v23[v38];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(&v23[v38], 1, v56))
    {
      v41 = sub_10003F544(&qword_1005522F0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v50(v39, v40, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v39, 0, 1, v56);
    }
    v43 = a3[10];
    v44 = (char *)a1 + v43;
    v45 = (char *)v58 + v43;
    v46 = *((_QWORD *)v45 + 3);
    if ((unint64_t)(v46 - 1) >= 4)
    {
      *(_OWORD *)v44 = *(_OWORD *)v45;
      *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
      *((_QWORD *)v44 + 3) = v46;
      v48 = *((_QWORD *)v45 + 5);
      *((_QWORD *)v44 + 4) = *((_QWORD *)v45 + 4);
      *((_QWORD *)v44 + 5) = v48;
      *((_WORD *)v44 + 24) = *((_WORD *)v45 + 24);
      swift_bridgeObjectRetain(v46);
    }
    else
    {
      v47 = *((_OWORD *)v45 + 1);
      *(_OWORD *)v44 = *(_OWORD *)v45;
      *((_OWORD *)v44 + 1) = v47;
      *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
      *((_WORD *)v44 + 24) = *((_WORD *)v45 + 24);
    }
  }
  return a1;
}

double sub_1001D9F88(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  double result;
  uint64_t v15;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  v5 = a1 + a2[6];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v9 = (_QWORD *)(a1 + a2[9]);
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[3]);
  swift_bridgeObjectRelease(v9[9]);
  swift_bridgeObjectRelease(v9[11]);
  swift_bridgeObjectRelease(v9[13]);
  v10 = type metadata accessor for EpisodeMetadata(0);
  v11 = (char *)v9 + *(int *)(v10 + 44);
  v12 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = (char *)v9 + *(int *)(v10 + 60);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6))
    v8((uint64_t)v13, v6);
  v15 = *(_QWORD *)(a1 + a2[10] + 24);
  if ((unint64_t)(v15 - 1) >= 4)
    *(_QWORD *)&result = swift_bridgeObjectRelease(v15).n128_u64[0];
  return result;
}

uint64_t sub_1001DA0E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, const void *, uint64_t);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  void (*v49)(void *, const void *, uint64_t);
  void (*v50)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v53 = type metadata accessor for Date(0);
  v54 = *(_QWORD *)(v53 - 8);
  v14 = *(void (**)(void *, const void *, uint64_t))(v54 + 16);
  v15 = swift_bridgeObjectRetain(v11);
  v49 = v14;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v14)(v12, v13, v53, v15);
  v16 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_QWORD *)(v17 + 8) = v19;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  v55 = a3;
  v56 = a2;
  v20 = a3[9];
  v57 = a1;
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 8);
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = v23;
  v24 = *(_QWORD *)(a2 + v20 + 24);
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(a2 + v20 + 16);
  *(_QWORD *)(v21 + 24) = v24;
  *(_BYTE *)(v21 + 40) = *(_BYTE *)(a2 + v20 + 40);
  *(_QWORD *)(v21 + 32) = *(_QWORD *)(a2 + v20 + 32);
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(a2 + v20 + 56);
  *(_QWORD *)(v21 + 48) = *(_QWORD *)(a2 + v20 + 48);
  v25 = *(_QWORD *)(a2 + v20 + 72);
  *(_QWORD *)(v21 + 64) = *(_QWORD *)(a2 + v20 + 64);
  *(_QWORD *)(v21 + 72) = v25;
  v26 = *(_QWORD *)(a2 + v20 + 88);
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(a2 + v20 + 80);
  *(_QWORD *)(v21 + 88) = v26;
  v27 = *(_QWORD *)(a2 + v20 + 104);
  *(_QWORD *)(v21 + 96) = *(_QWORD *)(a2 + v20 + 96);
  *(_QWORD *)(v21 + 104) = v27;
  v28 = (int *)type metadata accessor for EpisodeMetadata(0);
  v29 = v28[11];
  v51 = v22 + v29;
  v52 = v21 + v29;
  v30 = type metadata accessor for URL(0);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  v31 = swift_bridgeObjectRetain(v27);
  v50(v52, v51, v30, v31);
  *(_BYTE *)(v21 + v28[12]) = *(_BYTE *)(v22 + v28[12]);
  v32 = v28[13];
  v33 = v21 + v32;
  v34 = v22 + v32;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v35 = v28[14];
  v36 = v21 + v35;
  v37 = v22 + v35;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v38 = v28[15];
  v39 = (void *)(v21 + v38);
  v40 = (const void *)(v22 + v38);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v22 + v38, 1, v53))
  {
    v41 = sub_10003F544(&qword_1005522F0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v49(v39, v40, v53);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v39, 0, 1, v53);
  }
  v42 = v55[10];
  v43 = v57 + v42;
  v44 = v56 + v42;
  v45 = *(_QWORD *)(v44 + 24);
  if ((unint64_t)(v45 - 1) >= 4)
  {
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *(_QWORD *)(v43 + 16) = *(_QWORD *)(v44 + 16);
    *(_QWORD *)(v43 + 24) = v45;
    v47 = *(_QWORD *)(v44 + 40);
    *(_QWORD *)(v43 + 32) = *(_QWORD *)(v44 + 32);
    *(_QWORD *)(v43 + 40) = v47;
    *(_WORD *)(v43 + 48) = *(_WORD *)(v44 + 48);
    swift_bridgeObjectRetain(v45);
  }
  else
  {
    v46 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *(_OWORD *)(v43 + 16) = v46;
    *(_OWORD *)(v43 + 32) = *(_OWORD *)(v44 + 32);
    *(_WORD *)(v43 + 48) = *(_WORD *)(v44 + 48);
  }
  return v57;
}

uint64_t sub_1001DA3B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t (*v53)(void *, uint64_t, uint64_t);
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v72)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v72(v13, v14, v15);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)(a2 + v17);
  v20 = *(_QWORD *)(a2 + v17 + 8);
  v21 = *(_QWORD *)(a1 + v17 + 8);
  *(_QWORD *)(v18 + 8) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  v22 = a3[9];
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_QWORD *)v23 = *(_QWORD *)(a2 + v22);
  v25 = *(_QWORD *)(a2 + v22 + 8);
  v26 = *(_QWORD *)(a1 + v22 + 8);
  *(_QWORD *)(v23 + 8) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  v27 = *(_QWORD *)(v24 + 24);
  v28 = *(_QWORD *)(v23 + 24);
  *(_QWORD *)(v23 + 24) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(v24 + 32);
  *(_BYTE *)(v23 + 40) = *(_BYTE *)(v24 + 40);
  *(_QWORD *)(v23 + 32) = v29;
  v30 = *(_QWORD *)(v24 + 48);
  *(_BYTE *)(v23 + 56) = *(_BYTE *)(v24 + 56);
  *(_QWORD *)(v23 + 48) = v30;
  *(_QWORD *)(v23 + 64) = *(_QWORD *)(v24 + 64);
  v31 = *(_QWORD *)(v24 + 72);
  v32 = *(_QWORD *)(v23 + 72);
  *(_QWORD *)(v23 + 72) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)(v23 + 80) = *(_QWORD *)(v24 + 80);
  v33 = *(_QWORD *)(v24 + 88);
  v34 = *(_QWORD *)(v23 + 88);
  *(_QWORD *)(v23 + 88) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(v23 + 96) = *(_QWORD *)(v24 + 96);
  v35 = *(_QWORD *)(v24 + 104);
  v36 = *(_QWORD *)(v23 + 104);
  *(_QWORD *)(v23 + 104) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = (int *)type metadata accessor for EpisodeMetadata(0);
  v38 = v37[11];
  v39 = v23 + v38;
  v40 = v24 + v38;
  v41 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  *(_BYTE *)(v23 + v37[12]) = *(_BYTE *)(v24 + v37[12]);
  v42 = v37[13];
  v43 = v23 + v42;
  v44 = v24 + v42;
  v45 = *(_BYTE *)(v44 + 8);
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = v45;
  v46 = v37[14];
  v47 = v23 + v46;
  v48 = v24 + v46;
  v49 = *(_BYTE *)(v48 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_BYTE *)(v47 + 8) = v49;
  v50 = v37[15];
  v51 = (void *)(v23 + v50);
  v52 = (void *)(v24 + v50);
  v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v40) = v53(v51, 1, v15);
  v54 = v53(v52, 1, v15);
  if ((_DWORD)v40)
  {
    if (!v54)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v51, v52, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v51, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v54)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v51, v15);
LABEL_6:
    v55 = sub_10003F544(&qword_1005522F0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_7;
  }
  v72((uint64_t)v51, (uint64_t)v52, v15);
LABEL_7:
  v56 = a3[10];
  v57 = a1 + v56;
  v58 = (__int128 *)(a2 + v56);
  v59 = *(_QWORD *)(a1 + v56 + 24);
  v60 = *((_QWORD *)v58 + 3) - 1;
  if ((unint64_t)(v59 - 1) >= 4)
  {
    if (v60 >= 4)
    {
      *(_QWORD *)v57 = *(_QWORD *)v58;
      *(_QWORD *)(v57 + 8) = *((_QWORD *)v58 + 1);
      *(_QWORD *)(v57 + 16) = *((_QWORD *)v58 + 2);
      v69 = *((_QWORD *)v58 + 3);
      *(_QWORD *)(v57 + 24) = v69;
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRelease(v59);
      *(_QWORD *)(v57 + 32) = *((_QWORD *)v58 + 4);
      v70 = *((_QWORD *)v58 + 5);
      *(_BYTE *)(v57 + 48) = *((_BYTE *)v58 + 48);
      *(_QWORD *)(v57 + 40) = v70;
      *(_BYTE *)(v57 + 49) = *((_BYTE *)v58 + 49);
    }
    else
    {
      sub_100007A28(v57, &qword_100558DE8);
      v65 = v58[1];
      v64 = v58[2];
      v66 = *v58;
      *(_WORD *)(v57 + 48) = *((_WORD *)v58 + 24);
      *(_OWORD *)(v57 + 16) = v65;
      *(_OWORD *)(v57 + 32) = v64;
      *(_OWORD *)v57 = v66;
    }
  }
  else if (v60 >= 4)
  {
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *(_QWORD *)(v57 + 8) = *((_QWORD *)v58 + 1);
    *(_QWORD *)(v57 + 16) = *((_QWORD *)v58 + 2);
    v67 = *((_QWORD *)v58 + 3);
    *(_QWORD *)(v57 + 24) = v67;
    *(_QWORD *)(v57 + 32) = *((_QWORD *)v58 + 4);
    v68 = *((_QWORD *)v58 + 5);
    *(_BYTE *)(v57 + 48) = *((_BYTE *)v58 + 48);
    *(_QWORD *)(v57 + 40) = v68;
    *(_BYTE *)(v57 + 49) = *((_BYTE *)v58 + 49);
    swift_bridgeObjectRetain(v67);
  }
  else
  {
    v61 = *v58;
    v62 = v58[1];
    v63 = v58[2];
    *(_WORD *)(v57 + 48) = *((_WORD *)v58 + 24);
    *(_OWORD *)(v57 + 16) = v62;
    *(_OWORD *)(v57 + 32) = v63;
    *(_OWORD *)v57 = v61;
  }
  return a1;
}

uint64_t sub_1001DA7D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  void (*v41)(void *, const void *, uint64_t);

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v41 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
  v41(v8, v9, v10);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_OWORD *)(a2 + v15 + 16);
  *(_OWORD *)v16 = *(_OWORD *)(a2 + v15);
  *(_OWORD *)(v16 + 16) = v18;
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(a2 + v15 + 32);
  *(_BYTE *)(v16 + 40) = *(_BYTE *)(a2 + v15 + 40);
  v19 = *(_QWORD *)(a2 + v15 + 48);
  *(_BYTE *)(v16 + 56) = *(_BYTE *)(v17 + 56);
  *(_QWORD *)(v16 + 48) = v19;
  v20 = *(_OWORD *)(v17 + 80);
  *(_OWORD *)(v16 + 64) = *(_OWORD *)(v17 + 64);
  *(_OWORD *)(v16 + 80) = v20;
  *(_OWORD *)(v16 + 96) = *(_OWORD *)(v17 + 96);
  v21 = (int *)type metadata accessor for EpisodeMetadata(0);
  v22 = v21[11];
  v23 = v16 + v22;
  v24 = v17 + v22;
  v25 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  *(_BYTE *)(v16 + v21[12]) = *(_BYTE *)(v17 + v21[12]);
  v26 = v21[13];
  v27 = v16 + v26;
  v28 = v17 + v26;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v29 = v21[14];
  v30 = v16 + v29;
  v31 = v17 + v29;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v32 = v21[15];
  v33 = (void *)(v16 + v32);
  v34 = (const void *)(v17 + v32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v17 + v32, 1, v10))
  {
    v35 = sub_10003F544(&qword_1005522F0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v41(v33, v34, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v33, 0, 1, v10);
  }
  v36 = a3[10];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = *(_OWORD *)(v38 + 16);
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *(_OWORD *)(v37 + 16) = v39;
  *(_OWORD *)(v37 + 32) = *(_OWORD *)(v38 + 32);
  *(_WORD *)(v37 + 48) = *(_WORD *)(v38 + 48);
  return a1;
}

uint64_t sub_1001DA9FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t (*v51)(void *, uint64_t, uint64_t);
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  void (*v61)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
  v61(v14, v15, v16);
  v18 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(a2 + v18);
  v22 = *(_QWORD *)(a2 + v18 + 8);
  v23 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)v19 = v21;
  *(_QWORD *)(v19 + 8) = v22;
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  v24 = a3[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)(a2 + v24 + 8);
  v28 = *(_QWORD *)(a1 + v24 + 8);
  *(_QWORD *)v25 = *(_QWORD *)(a2 + v24);
  *(_QWORD *)(v25 + 8) = v27;
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(v26 + 24);
  v30 = *(_QWORD *)(v25 + 24);
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
  *(_QWORD *)(v25 + 24) = v29;
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
  *(_BYTE *)(v25 + 40) = *(_BYTE *)(v26 + 40);
  *(_QWORD *)(v25 + 48) = *(_QWORD *)(v26 + 48);
  *(_BYTE *)(v25 + 56) = *(_BYTE *)(v26 + 56);
  v31 = *(_QWORD *)(v26 + 72);
  v32 = *(_QWORD *)(v25 + 72);
  *(_QWORD *)(v25 + 64) = *(_QWORD *)(v26 + 64);
  *(_QWORD *)(v25 + 72) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(v26 + 88);
  v34 = *(_QWORD *)(v25 + 88);
  *(_QWORD *)(v25 + 80) = *(_QWORD *)(v26 + 80);
  *(_QWORD *)(v25 + 88) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = *(_QWORD *)(v26 + 104);
  v36 = *(_QWORD *)(v25 + 104);
  *(_QWORD *)(v25 + 96) = *(_QWORD *)(v26 + 96);
  *(_QWORD *)(v25 + 104) = v35;
  swift_bridgeObjectRelease(v36);
  v37 = (int *)type metadata accessor for EpisodeMetadata(0);
  v38 = v37[11];
  v39 = v25 + v38;
  v40 = v26 + v38;
  v41 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  *(_BYTE *)(v25 + v37[12]) = *(_BYTE *)(v26 + v37[12]);
  v42 = v37[13];
  v43 = v25 + v42;
  v44 = v26 + v42;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v45 = v37[14];
  v46 = v25 + v45;
  v47 = v26 + v45;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v48 = v37[15];
  v49 = (void *)(v25 + v48);
  v50 = (void *)(v26 + v48);
  v51 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v40) = v51(v49, 1, v16);
  v52 = v51(v50, 1, v16);
  if ((_DWORD)v40)
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v49, v50, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v49, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v49, v16);
LABEL_6:
    v53 = sub_10003F544(&qword_1005522F0);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_7;
  }
  v61((uint64_t)v49, (uint64_t)v50, v16);
LABEL_7:
  v54 = a3[10];
  v55 = a1 + v54;
  v56 = a2 + v54;
  v57 = *(_QWORD *)(a1 + v54 + 24);
  if ((unint64_t)(v57 - 1) >= 4)
  {
    v58 = *(_QWORD *)(v56 + 24);
    if ((unint64_t)(v58 - 1) >= 4)
    {
      *(_OWORD *)v55 = *(_OWORD *)v56;
      *(_QWORD *)(v55 + 16) = *(_QWORD *)(v56 + 16);
      *(_QWORD *)(v55 + 24) = v58;
      swift_bridgeObjectRelease(v57);
      *(_QWORD *)(v55 + 32) = *(_QWORD *)(v56 + 32);
      *(_QWORD *)(v55 + 40) = *(_QWORD *)(v56 + 40);
      *(_BYTE *)(v55 + 48) = *(_BYTE *)(v56 + 48);
      *(_BYTE *)(v55 + 49) = *(_BYTE *)(v56 + 49);
      return a1;
    }
    sub_100007A28(v55, &qword_100558DE8);
  }
  v59 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v59;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(_WORD *)(v55 + 48) = *(_WORD *)(v56 + 48);
  return a1;
}

uint64_t sub_1001DAD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001DAD30);
}

uint64_t sub_1001DAD30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v8 = type metadata accessor for EpisodeMetadata(0);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[9];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1001DAE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001DAE0C);
}

uint64_t sub_1001DAE0C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = type metadata accessor for EpisodeMetadata(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t destroy for DownloadProgress(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for DownloadProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for DownloadProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  return a1;
}

__n128 initializeWithTake for DownloadProgress(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DownloadProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadProgress(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloadProgress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadProgress()
{
  return &type metadata for DownloadProgress;
}

uint64_t sub_1001DB0D8()
{
  return sub_100026844(&qword_100558EA0, type metadata accessor for EpisodeMetadata, (uint64_t)&unk_1003CD79C);
}

uint64_t sub_1001DB104()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  void *v8;
  uint64_t v9;
  char v10;
  void *object;
  Swift::Int v12;
  id v13;
  void *v14;
  uint64_t v15;
  Swift::String v17;
  __int128 v18;
  __int128 v19;

  v1 = v0;
  v2 = objc_msgSend(v0, "userInfo");
  type metadata accessor for ProgressUserInfoKey(0);
  v4 = v3;
  v5 = sub_100026844(&qword_100552D88, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1003C9A58);
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, v4, (char *)&type metadata for Any + 8, v5);

  v7 = String._bridgeToObjectiveC()();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16) || (v9 = sub_1001CCFBC(v7), (v10 & 1) == 0))
  {
    v18 = 0u;
    v19 = 0u;

    swift_bridgeObjectRelease(v6);
    goto LABEL_9;
  }
  sub_10003D344(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v18);

  swift_bridgeObjectRelease(v6);
  if (!*((_QWORD *)&v19 + 1))
  {
LABEL_9:
    sub_100007A28((uint64_t)&v18, (uint64_t *)&unk_100552300);
    return 0;
  }
  if ((swift_dynamicCast(&v17, &v18, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 0;
  object = v17._object;
  v12 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004AC568, v17);
  swift_bridgeObjectRelease(object);
  if (v12)
    return 0;
  v13 = objc_msgSend(v1, "localizedAdditionalDescription");
  if (!v13)
    return 0;
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

  return v15;
}

uint64_t sub_1001DB29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  char v64;
  void (*v65)(_BYTE *, uint64_t);
  _BYTE v66[4];
  int v67;
  int *v68;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v66[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_10003F544(&qword_100558EB8);
  __chkstk_darwin(v8);
  v10 = &v66[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_10003F544(&qword_1005522F0);
  v12 = __chkstk_darwin(v11);
  v14 = &v66[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v12);
  v17 = &v66[-v16];
  __chkstk_darwin(v15);
  v19 = &v66[-v18];
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a2 + 8);
  if (!v20)
  {
    if (v21)
      return 0;
    goto LABEL_8;
  }
  if (!v21)
    return 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v20 == v21
    || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)a1, v20, *(_QWORD *)a2, v21, 0),
        result = 0,
        (v22 & 1) != 0))
  {
LABEL_8:
    v24 = *(_QWORD *)(a1 + 24);
    v25 = *(_QWORD *)(a2 + 24);
    if (v24)
    {
      if (!v25)
        return 0;
      v26 = *(_QWORD *)(a1 + 16);
      v27 = *(_QWORD *)(a2 + 16);
      if (v26 != v27 || v24 != v25)
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v24, v27, v25, 0);
        result = 0;
        if ((v28 & 1) == 0)
          return result;
      }
    }
    else if (v25)
    {
      return 0;
    }
    v29 = *(_BYTE *)(a2 + 40);
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 40))
        return 0;
    }
    else
    {
      if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
        v29 = 1;
      if ((v29 & 1) != 0)
        return 0;
    }
    v30 = *(_BYTE *)(a2 + 56);
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 56))
        return 0;
    }
    else
    {
      if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
        v30 = 1;
      if ((v30 & 1) != 0)
        return 0;
    }
    v31 = *(_QWORD *)(a1 + 72);
    v32 = *(_QWORD *)(a2 + 72);
    if (v31)
    {
      if (!v32)
        return 0;
      v33 = *(_QWORD *)(a1 + 64);
      v34 = *(_QWORD *)(a2 + 64);
      if (v33 != v34 || v31 != v32)
      {
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v31, v34, v32, 0);
        result = 0;
        if ((v35 & 1) == 0)
          return result;
      }
    }
    else if (v32)
    {
      return 0;
    }
    v36 = *(_QWORD *)(a1 + 88);
    v37 = *(_QWORD *)(a2 + 88);
    if (v36)
    {
      if (!v37)
        return 0;
      v38 = *(_QWORD *)(a1 + 80);
      v39 = *(_QWORD *)(a2 + 80);
      if (v38 != v39 || v36 != v37)
      {
        v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v36, v39, v37, 0);
        result = 0;
        if ((v40 & 1) == 0)
          return result;
      }
    }
    else if (v37)
    {
      return 0;
    }
    v41 = *(_QWORD *)(a1 + 104);
    v42 = *(_QWORD *)(a2 + 104);
    if (v41)
    {
      if (!v42)
        return 0;
      v43 = *(_QWORD *)(a1 + 96);
      v44 = *(_QWORD *)(a2 + 96);
      if (v43 != v44 || v41 != v42)
      {
        v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v41, v44, v42, 0);
        result = 0;
        if ((v45 & 1) == 0)
          return result;
      }
    }
    else if (v42)
    {
      return 0;
    }
    v68 = (int *)type metadata accessor for EpisodeMetadata(0);
    if ((static URL.== infix(_:_:)(a1 + v68[11], a2 + v68[11]) & 1) != 0)
    {
      v46 = v68[12];
      v47 = *(unsigned __int8 *)(a1 + v46);
      v48 = *(unsigned __int8 *)(a2 + v46);
      if (v47)
        v49 = 0x6F65646976;
      else
        v49 = 0x6F69647561;
      if (v48)
        v50 = 0x6F65646976;
      else
        v50 = 0x6F69647561;
      if (v49 == v50)
      {
        swift_bridgeObjectRelease_n(0xE500000000000000, 2);
      }
      else
      {
        v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, 0xE500000000000000, v50, 0xE500000000000000, 0);
        swift_bridgeObjectRelease_n(0xE500000000000000, 2);
        result = 0;
        if ((v67 & 1) == 0)
          return result;
      }
      v51 = v68[13];
      v52 = (_QWORD *)(a1 + v51);
      v53 = *(_BYTE *)(a1 + v51 + 8);
      v54 = (_QWORD *)(a2 + v51);
      v55 = *(unsigned __int8 *)(a2 + v51 + 8);
      if ((v53 & 1) != 0)
      {
        if (!v55)
          return 0;
      }
      else
      {
        if (*v52 != *v54)
          LOBYTE(v55) = 1;
        if ((v55 & 1) != 0)
          return 0;
      }
      v56 = v68[14];
      v57 = (_QWORD *)(a1 + v56);
      v58 = *(_BYTE *)(a1 + v56 + 8);
      v59 = (_QWORD *)(a2 + v56);
      v60 = *(unsigned __int8 *)(a2 + v56 + 8);
      if ((v58 & 1) != 0)
      {
        if (!v60)
          return 0;
      }
      else
      {
        if (*v57 != *v59)
          LOBYTE(v60) = 1;
        if ((v60 & 1) != 0)
          return 0;
      }
      sub_10017809C(a1 + v68[15], (uint64_t)v19);
      sub_10017809C(a2 + v68[15], (uint64_t)v17);
      v61 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_10017809C((uint64_t)v19, (uint64_t)v10);
      sub_10017809C((uint64_t)v17, v61);
      v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v62((uint64_t)v10, 1, v4) == 1)
      {
        sub_100007A28((uint64_t)v17, &qword_1005522F0);
        sub_100007A28((uint64_t)v19, &qword_1005522F0);
        if (v62(v61, 1, v4) == 1)
        {
          sub_100007A28((uint64_t)v10, &qword_1005522F0);
          return 1;
        }
        goto LABEL_75;
      }
      sub_10017809C((uint64_t)v10, (uint64_t)v14);
      if (v62(v61, 1, v4) == 1)
      {
        sub_100007A28((uint64_t)v17, &qword_1005522F0);
        sub_100007A28((uint64_t)v19, &qword_1005522F0);
        (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v14, v4);
LABEL_75:
        sub_100007A28((uint64_t)v10, &qword_100558EB8);
        return 0;
      }
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v7, v61, v4);
      v63 = sub_100026844(&qword_100558EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v64 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v63);
      v65 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v65(v7, v4);
      sub_100007A28((uint64_t)v17, &qword_1005522F0);
      sub_100007A28((uint64_t)v19, &qword_1005522F0);
      v65(v14, v4);
      sub_100007A28((uint64_t)v10, &qword_1005522F0);
      if ((v64 & 1) != 0)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1001DB828(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for DownloadJob(0);
  v5 = v4[5];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  if (v6 != *v8 || v7 != v9)
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v8, v9, 0);
    result = 0;
    if ((v11 & 1) == 0)
      return result;
  }
  if ((static Date.== infix(_:_:)(a1 + v4[6], a2 + v4[6]) & 1) == 0
    || *(_QWORD *)(a1 + v4[7]) != *(_QWORD *)(a2 + v4[7]))
  {
    return 0;
  }
  v13 = v4[8];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  v16 = *(unsigned __int8 *)(a1 + v13 + 16);
  v17 = a2 + v13;
  v18 = *(_QWORD *)(v17 + 8);
  v19 = *(unsigned __int8 *)(v17 + 16);
  if (v14 != *(_QWORD *)v17 || v15 != v18)
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, *(_QWORD *)v17, v18, 0);
    result = 0;
    if ((v21 & 1) == 0)
      return result;
  }
  v22 = v16 ? 1936484398 : 0x7261646E6174732ELL;
  v23 = v16 ? 0xE400000000000000 : 0xE900000000000064;
  v24 = v19 ? 1936484398 : 0x7261646E6174732ELL;
  v25 = v19 ? 0xE400000000000000 : 0xE900000000000064;
  if (v22 == v24 && v23 == v25)
  {
    swift_bridgeObjectRelease_n(v23, 2);
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v24, v25, 0);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v25);
    result = 0;
    if ((v27 & 1) == 0)
      return result;
  }
  if ((sub_1001DB29C(a1 + v4[9], a2 + v4[9]) & 1) == 0)
    return 0;
  v28 = v4[10];
  v29 = *(_QWORD *)(a1 + v28 + 24);
  v30 = *(_QWORD *)(a2 + v28 + 24);
  switch(v29)
  {
    case 1:
      if (v30 != 1)
        return 0;
      break;
    case 2:
      if (v30 != 2)
        return 0;
      break;
    case 3:
      if (v30 != 3)
        return 0;
      break;
    case 4:
      if (v30 != 4)
        return 0;
      break;
    default:
      if ((unint64_t)(v30 - 1) < 4)
        return 0;
      break;
  }
  return 1;
}

uint64_t sub_1001DBA18(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 24));
  return a1;
}

const char *sub_1001DBA40()
{
  return "state";
}

id sub_1001DBA4C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "state");
  *a2 = result;
  return result;
}

uint64_t sub_1001DBA7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DBAA0(id *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(id))(v1 + 16))(objc_msgSend(*a1, "state"));
}

uint64_t storeEnumTagSinglePayload for EpisodeMetadata.EpisodeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001DBB1C + 4 * byte_1003CD5F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001DBB50 + 4 * byte_1003CD5F4[v4]))();
}

uint64_t sub_1001DBB50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DBB58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DBB60);
  return result;
}

uint64_t sub_1001DBB6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DBB74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001DBB78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DBB80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EpisodeMetadata.EpisodeType()
{
  return &type metadata for EpisodeMetadata.EpisodeType;
}

unint64_t destroy for DownloadJob.Phase(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 24);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t initializeWithCopy for DownloadJob.Phase(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 24);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 24);
  if ((int)v4 - 1 < 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v3;
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v6;
    *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
    swift_bridgeObjectRetain(v3);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for DownloadJob.Phase(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 24);
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = *(_QWORD *)(a1 + 24);
  v7 = v6 - 1;
  if (*((_QWORD *)a2 + 3) < 0xFFFFFFFFuLL)
    v5 = *((_QWORD *)a2 + 3);
  v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      v15 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v4);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      v16 = *((_QWORD *)a2 + 5);
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *(_QWORD *)(a1 + 40) = v16;
      *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
      return a1;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    v11 = *a2;
    v12 = a2[1];
    v13 = a2[2];
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)a1 = v11;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  v10 = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  swift_bridgeObjectRetain(v9);
  return a1;
}

__n128 initializeWithTake for DownloadJob.Phase(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DownloadJob.Phase(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = *(_QWORD *)(a2 + 24);
    if ((int)v7 - 1 < 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v6;
      swift_bridgeObjectRelease(v4);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
      return a1;
    }
    swift_bridgeObjectRelease(v4);
  }
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadJob.Phase(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *(_BYTE *)(a1 + 50))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 3;
  if (v5 >= 5)
    return v6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DownloadJob.Phase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_WORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 50) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 50) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 4;
  }
  return result;
}

uint64_t sub_1001DBECC(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

double sub_1001DBEF0(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 48) = 0;
    *(_QWORD *)a1 = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadJob.Phase()
{
  return &type metadata for DownloadJob.Phase;
}

unint64_t sub_1001DBF44()
{
  unint64_t result;

  result = qword_100558EC8;
  if (!qword_100558EC8)
  {
    result = swift_getWitnessTable(&unk_1003CD8E8, &type metadata for EpisodeMetadata.EpisodeType);
    atomic_store(result, (unint64_t *)&qword_100558EC8);
  }
  return result;
}

uint64_t *DownloadConsistency.application.unsafeMutableAddressor()
{
  if (qword_100552038 != -1)
    swift_once(&qword_100552038, sub_100024048);
  return &static DownloadConsistency.application;
}

id static DownloadConsistency.application.getter()
{
  if (qword_100552038 != -1)
    swift_once(&qword_100552038, sub_100024048);
  return (id)static DownloadConsistency.application;
}

unint64_t sub_1001DC00C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100558F00;
  if (!qword_100558F00)
  {
    v1 = type metadata accessor for UnownedImageIssueIdentifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UnownedImageIssueIdentifier, v1);
    atomic_store(result, (unint64_t *)&qword_100558F00);
  }
  return result;
}

char *InterestSyncProcessor.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t ObjectType;
  char *v17;
  uint64_t (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_signpost_type_t v21;
  uint8_t *v22;
  os_signpost_id_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v26 - v6;
  v8 = type metadata accessor for OSSignposter(0);
  v26 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InterestSyncStorage()), "init");
  v12 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CloudSyncBugReporter()), "init");
  v13 = objc_allocWithZone((Class)type metadata accessor for InterestSyncProcessor(0));
  v14 = sub_1001DE444((uint64_t)v11, (uint64_t)v12, v13);

  ObjectType = swift_getObjectType(v0, v15);
  swift_deallocPartialClassInstance(v0, ObjectType, *(unsigned int *)((swift_isaMask & *v0) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v0) + 0x34));
  v17 = (char *)v14;
  static OSSignposter.cloudSync.getter(v17);
  v18 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 16);
  v19 = v18(v7, &v17[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostID], v1);
  v20 = OSSignposter.logHandle.getter(v19);
  v21 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v18(v5, v7, v1);
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    v23 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, v21, v23, "InterestSyncProcessor.created", "", v22, 2u);
    swift_slowDealloc(v22, -1, -1);

    v24 = *(void (**)(char *, uint64_t))(v2 + 8);
    v24(v7, v1);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
    v24(v5, v1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  }
  return v17;
}

uint64_t type metadata accessor for InterestSyncProcessor(uint64_t a1)
{
  uint64_t result;

  result = qword_100558F58;
  if (!qword_100558F58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InterestSyncProcessor);
  return result;
}

id InterestSyncProcessor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InterestSyncProcessor(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t InterestSyncProcessor.operationTypeForSET()()
{
  return 18;
}

Swift::Bool __swiftcall InterestSyncProcessor.hasLocalChanges()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, &v5, 0, 0);
  sub_10000A520(v1, (uint64_t)v6);
  v2 = v7;
  v3 = v8;
  sub_10003A834(v6, v7);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  sub_10003D380(v6);
  return v2 & 1;
}

Swift::String_optional __swiftcall InterestSyncProcessor.version(forGetTransaction:key:)(MZKeyValueStoreTransaction *forGetTransaction, Swift::String key)
{
  uint64_t v2;
  void *v3;
  Swift::String_optional result;

  v2 = sub_1001DE578(key._countAndFlagsBits, (unint64_t)key._object);
  result.value._object = v3;
  result.value._countAndFlagsBits = v2;
  return result;
}

uint64_t InterestSyncProcessor.data(forSetTransaction:key:version:)(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  return sub_1001DEA64(a2, a3, a4);
}

void InterestSyncProcessor.success(forGetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(_QWORD), uint64_t a9)
{
  sub_1001DFD1C(a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1001DC69C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  char *v31;
  uint8_t *v32;
  os_signpost_id_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  id v41;
  void *v42;
  uint64_t v43;
  const char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v51 = a4;
  v53 = a3;
  v54 = a1;
  v6 = type metadata accessor for Logger(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OSSignpostError(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSSignpostID(0);
  v52 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v50 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v43 - v16;
  v18 = type metadata accessor for OSSignposter(0);
  v19 = __chkstk_darwin(v18);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState);
  if (v23)
  {
    v46 = v20;
    v47 = v19;
    v48 = a2;
    v49 = v4;
    swift_retain();
    v25 = static OSSignposter.cloudSync.getter(v24);
    v26 = OSSignposter.logHandle.getter(v25);
    v27 = OSSignpostIntervalState.signpostID.getter();
    v45 = static os_signpost_type_t.end.getter(v27);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)(v28);
      swift_release(v23);
      if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v12, v9) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v29 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        v29 = "";
      }
      v44 = v29;
      v30 = v52;
      v31 = v50;
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v50, v17, v13);
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      v33 = OSSignpostID.rawValue.getter(v32);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, (os_signpost_type_t)v45, v33, "InterestSyncProcessor.finish", v44, v32, 2u);
      swift_slowDealloc(v32, -1, -1);

      v34 = *(void (**)(char *, uint64_t))(v30 + 8);
      v34(v17, v13);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v47);
      swift_release(v23);
      v34(v31, v13);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v52 + 8))(v17, v13);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v47);
      swift_release(v23);
    }
    a2 = v48;
  }
  v35 = sub_1001DE064(v54, a2);
  static Logger.cloudSync.getter(v35);
  v36 = static os_log_type_t.default.getter();
  v37 = v36;
  v38 = Logger.logObject.getter(v36);
  v39 = v37;
  if (os_log_type_enabled(v38, v37))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "[Interests] Cleaning up neutral interests after successful transaction.", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v55 + 8))(v8, v56);
  v41 = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
  if (v41)
  {
    v42 = v41;
    objc_msgSend(v41, "cleanUpNeutralInterests");

    if (v53)
      v53(0);
  }
  else
  {
    __break(1u);
  }
}

void InterestSyncProcessor.success(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(_QWORD), uint64_t a9)
{
  sub_1001DFF18(a4, a5, a6, a7, a8, a9);
}

uint64_t InterestSyncProcessor.conflict(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), uint64_t a9)
{
  return sub_1001E0108(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1001DCD90(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_signpost_type_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  char *v28;
  uint8_t *v29;
  os_signpost_id_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  char *v36;
  uint64_t v37;

  v37 = a2;
  v4 = type metadata accessor for OSSignpostError(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v36 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - v12;
  v14 = type metadata accessor for OSSignposter(0);
  result = __chkstk_darwin(v14);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState);
  if (v19)
  {
    v32 = v9;
    v33 = v16;
    v34 = result;
    v35 = a1;
    v20 = swift_retain(v19);
    v21 = static OSSignposter.cloudSync.getter(v20);
    v22 = OSSignposter.logHandle.getter(v21);
    v23 = OSSignpostIntervalState.signpostID.getter();
    v24 = static os_signpost_type_t.end.getter(v23);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v25 = swift_retain(v19);
      checkForErrorAndConsumeState(state:)(v25);
      swift_release(v19);
      if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v4) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v26 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        v26 = "";
      }
      v27 = v32;
      v28 = v36;
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v36, v13, v8);
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      v30 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, v24, v30, "InterestSyncProcessor.reschedule", v26, v29, 2u);
      swift_slowDealloc(v29, -1, -1);

      v31 = *(void (**)(char *, uint64_t))(v27 + 8);
      v31(v13, v8);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v34);
      swift_release(v19);
      result = ((uint64_t (*)(char *, uint64_t))v31)(v28, v8);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v8);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v34);
      result = swift_release(v19);
    }
    a1 = v35;
  }
  if (a1)
    return a1(1);
  return result;
}

Swift::Void __swiftcall InterestSyncProcessor.transaction(_:didProcessResponseWithDomainVersion:)(MZKeyValueStoreTransaction *_, Swift::String_optional didProcessResponseWithDomainVersion)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, void *, uint64_t, uint64_t, __n128);
  __n128 v9;
  _BYTE v10[24];

  object = didProcessResponseWithDomainVersion.value._object;
  countAndFlagsBits = didProcessResponseWithDomainVersion.value._countAndFlagsBits;
  v5 = v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v5, v10, 33, 0);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(_QWORD *)(v5 + 32);
  sub_100038DEC(v5, v6);
  v8 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, __n128))(v7 + 96);
  v9 = swift_bridgeObjectRetain(object);
  v8(countAndFlagsBits, object, v6, v7, v9);
  swift_endAccess(v10);
}

NSObject *sub_1001DD334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  NSObject *result;
  os_log_type_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  os_log_type_t v40;
  NSObject *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  os_log_type_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  NSObject *v72;
  uint64_t v73;
  uint8_t *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[16];
  uint64_t v87;
  uint64_t v88;
  char v89[32];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v73 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v73 - v14;
  a1 += 16;
  swift_beginAccess(a1, v89, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (!result)
    return result;
  v77 = a3;
  v78 = result;
  v76 = v10;
  v79 = v6;
  static Logger.cloudSync.getter(result);
  v17 = static os_log_type_t.default.getter();
  v18 = swift_bridgeObjectRetain_n(a2, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = v17;
  v21 = os_log_type_enabled(v19, v17);
  v75 = v13;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v85 = v23;
    *(_DWORD *)v22 = 136380675;
    v74 = v22 + 4;
    v24 = type metadata accessor for RemoteInterest(0);
    swift_bridgeObjectRetain(a2);
    v26 = Array.description.getter(v25, v24);
    v28 = v27;
    swift_bridgeObjectRelease(a2);
    v83 = sub_10003D274(v26, v28, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v74, v22 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "[Interests] Inserting or updating Interests for remote list %{private}s.", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v30 = v79;
  v29(v15, v79);
  v31 = v77;
  v32 = v78;
  v33 = sub_1001DD9A0(a2, v77);
  v34 = (uint64_t)v32 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess((char *)v32 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, &v83, 0, 0);
  sub_10000A520(v34, (uint64_t)&v85);
  v35 = v87;
  v36 = v88;
  sub_10003A834(&v85, v87);
  v37 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v36 + 136))(v33, v31, v35, v36);
  swift_bridgeObjectRelease(v33);
  v38 = sub_10003D380(&v85);
  if (v37)
  {
    if ((unint64_t)v37 >> 62)
    {
      if (v37 >= 0)
        v64 = v37 & 0xFFFFFFFFFFFFFF8;
      else
        v64 = v37;
      swift_bridgeObjectRetain(v37);
      v65 = _CocoaArrayWrapper.endIndex.getter(v64);
      swift_bridgeObjectRelease(v37);
      if (v65)
        goto LABEL_8;
    }
    else if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_8:
      v39 = v75;
      static Logger.cloudSync.getter(v38);
      v40 = static os_log_type_t.default.getter();
      swift_bridgeObjectRetain_n(v37, 2);
      v41 = v32;
      v42 = Logger.logObject.getter(v41);
      if (os_log_type_enabled(v42, v40))
      {
        v43 = swift_slowAlloc(32, -1);
        v77 = swift_slowAlloc(64, -1);
        v82 = v77;
        *(_DWORD *)v43 = 136315651;
        sub_10000A520(v34, (uint64_t)&v85);
        LODWORD(v76) = v40;
        v78 = v41;
        v44 = v87;
        v45 = v88;
        sub_10003A834(&v85, v87);
        v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 40))(v44, v45);
        v48 = v47;
        sub_10003D380(&v85);
        v80 = v46;
        v81 = v48 & 1;
        v49 = sub_10003F544((uint64_t *)&unk_100559A80);
        v50 = String.init<A>(describing:)(&v80, v49);
        v52 = v51;
        v85 = sub_10003D274(v50, v51, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v43 + 4, v43 + 12);

        swift_bridgeObjectRelease(v52);
        *(_WORD *)(v43 + 12) = 2160;
        v85 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v43 + 14, v43 + 22);
        *(_WORD *)(v43 + 22) = 2081;
        v53 = type metadata accessor for MTInterest(0);
        swift_bridgeObjectRetain(v37);
        v55 = Array.description.getter(v54, v53);
        v57 = v56;
        swift_bridgeObjectRelease(v37);
        v85 = sub_10003D274(v55, v57, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v43 + 24, v43 + 32);
        swift_bridgeObjectRelease_n(v37, 2);
        v58 = v57;
        v41 = v78;
        swift_bridgeObjectRelease(v58);
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v76, "[Interests] Removing Interests only local and before timestamp %s: %{private,mask.hash}s.", (uint8_t *)v43, 0x20u);
        v59 = v77;
        swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        v60 = v39;
        v61 = v79;
      }
      else
      {

        swift_bridgeObjectRelease_n(v37, 2);
        v60 = v39;
        v61 = v30;
      }
      v29(v60, v61);
      sub_10000A520(v34, (uint64_t)&v85);
      v62 = v87;
      v63 = v88;
      sub_10003A834(&v85, v87);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 144))(v37, v62, v63);

      swift_bridgeObjectRelease(v37);
      return sub_10003D380(&v85);
    }
    swift_bridgeObjectRelease(v37);
  }
  v66 = v76;
  static Logger.cloudSync.getter(v38);
  v67 = static os_log_type_t.default.getter();
  v68 = v67;
  v69 = Logger.logObject.getter(v67);
  v70 = v68;
  if (os_log_type_enabled(v69, v68))
  {
    v71 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v71 = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "[Interests], We didn't find any interests which are not present in the cloud and which are older than the last sync date. We are done.", v71, 2u);
    swift_slowDealloc(v71, -1, -1);
    v72 = v32;
  }
  else
  {
    v72 = v69;
    v69 = v32;
  }

  return ((uint64_t (*)(char *, uint64_t))v29)(v66, v30);
}

_QWORD *sub_1001DD9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);
  id v33;
  char *v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __n128 v45;
  void (*v46)(char *, uint64_t, __n128);
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  void (*v56)(char *, uint64_t, __n128);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  __n128 v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(_QWORD, _QWORD, _QWORD);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95[3];
  uint64_t v96;
  uint64_t v97;
  char v98[32];

  v84 = type metadata accessor for Logger(0);
  v82 = *(_QWORD *)(v84 - 8);
  v5 = __chkstk_darwin(v84);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v73 - v8;
  v10 = type metadata accessor for RemoteInterest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v77 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v80 = (char *)&v73 - v15;
  v16 = __chkstk_darwin(v14);
  v83 = (char *)&v73 - v17;
  __chkstk_darwin(v16);
  v94 = (char *)&v73 - v18;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v85 = v9;
    v76 = v7;
    v20 = v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
    v21 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v74 = a1;
    swift_bridgeObjectRetain(a1);
    v22 = swift_beginAccess(v20, v98, 0, 0);
    v86 = *(_QWORD *)(v11 + 72);
    v23 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v11 + 16);
    v93 = _swiftEmptyArrayStorage;
    v22.n128_u64[0] = 134218242;
    v79 = v22;
    v78 = (char *)&type metadata for Any + 8;
    v87 = v10;
    v88 = a2;
    v90 = v11;
    v91 = v20;
    v89 = v23;
    for (i = v23(v94, v21, v10); ; i = v23(v94, v21, v10))
    {
      v25 = RemoteInterest.adamID.getter(i);
      sub_10000A520(v20, (uint64_t)v95);
      v26 = v96;
      v27 = v97;
      sub_10003A834(v95, v96);
      v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 152);
      v92 = v25;
      v29 = (void *)v28(v25, a2, v26, v27);
      v30 = sub_10003D380(v95);
      if (v29)
        break;
      v34 = v85;
      static Logger.cloudSync.getter(v30);
      v35 = v83;
      v36 = v23(v83, v94, v10);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc(22, -1);
        v81 = (void (*)(char *, uint64_t))swift_slowAlloc(32, -1);
        v95[0] = (uint64_t)v81;
        *(_DWORD *)v39 = v79.n128_u32[0];
        *(_QWORD *)(v39 + 4) = v92;
        *(_WORD *)(v39 + 12) = 2080;
        v40 = v80;
        v23(v80, v35, v10);
        v41 = String.init<A>(describing:)(v40, v10);
        v43 = v42;
        *(_QWORD *)(v39 + 14) = sub_10003D274(v41, v42, v95);
        v44 = v43;
        a2 = v88;
        v45 = swift_bridgeObjectRelease(v44);
        v46 = *(void (**)(char *, uint64_t, __n128))(v90 + 8);
        v46(v35, v10, v45);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "[Interests] Received Interest from sync which doesn't exist in this device. We must insert it. AdamID: %lld, remote interest: %s", (uint8_t *)v39, 0x16u);
        v47 = v81;
        swift_arrayDestroy(v81, 1, v78);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v39, -1, -1);

        v48 = *(void (**)(char *, uint64_t))(v82 + 8);
        v48(v85, v84);
      }
      else
      {
        v46 = *(void (**)(char *, uint64_t, __n128))(v90 + 8);
        ((void (*)(char *, uint64_t))v46)(v35, v10);

        v48 = *(void (**)(char *, uint64_t))(v82 + 8);
        v48(v34, v84);
      }
      sub_10000A520(v91, (uint64_t)v95);
      v49 = v96;
      v50 = v97;
      sub_10003A834(v95, v96);
      v51 = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 120))(v94, a2, v49, v50);
      if (v51)
      {

        goto LABEL_14;
      }
      v81 = v48;
      v56 = v46;
      v57 = sub_10003D380(v95);
      v58 = v76;
      static Logger.cloudSync.getter(v57);
      v59 = v77;
      v10 = v87;
      v23 = v89;
      v60 = v89(v77, v94, v87);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.error.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        v63 = swift_slowAlloc(22, -1);
        v75 = swift_slowAlloc(32, -1);
        v95[0] = v75;
        *(_DWORD *)v63 = v79.n128_u32[0];
        *(_QWORD *)(v63 + 4) = v92;
        *(_WORD *)(v63 + 12) = 2080;
        v64 = v80;
        v89(v80, v59, v10);
        v65 = String.init<A>(describing:)(v64, v10);
        v67 = v66;
        *(_QWORD *)(v63 + 14) = sub_10003D274(v65, v66, v95);
        v68 = v67;
        a2 = v88;
        v69 = swift_bridgeObjectRelease(v68);
        v56(v59, v10, v69);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "[Interests] Unable to insert a new interest from sync. AdamID: %lld, remote interest: %s", (uint8_t *)v63, 0x16u);
        v70 = v75;
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1, -1);
        v71 = v63;
        v23 = v89;
        swift_slowDealloc(v71, -1, -1);

      }
      else
      {

        ((void (*)(char *, uint64_t))v56)(v59, v10);
      }
      v81(v58, v84);
      ((void (*)(char *, uint64_t))v56)(v94, v10);
      v20 = v91;
LABEL_5:
      v21 += v86;
      if (!--v19)
      {
        swift_bridgeObjectRelease(v74);
        return v93;
      }
    }
    sub_10000A520(v20, (uint64_t)v95);
    v31 = v97;
    sub_10003A834(v95, v96);
    v32 = *(void (**)(void))(v31 + 128);
    v33 = v29;
    v32();

LABEL_14:
    sub_10003D380(v95);
    v52 = v90;
    if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) != 0)
    {
      v10 = v87;
      a2 = v88;
      v20 = v91;
      v53 = v93;
    }
    else
    {
      v53 = sub_10027B24C(0, v93[2] + 1, 1, v93);
      v10 = v87;
      a2 = v88;
      v20 = v91;
    }
    v55 = v53[2];
    v54 = v53[3];
    if (v55 >= v54 >> 1)
      v53 = sub_10027B24C((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
    v53[2] = v55 + 1;
    v93 = v53;
    v53[v55 + 4] = v92;

    (*(void (**)(char *, uint64_t))(v52 + 8))(v94, v10);
    v23 = v89;
    goto LABEL_5;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001DE064(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[3];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Date.init()(v12);
  v16 = Date.timeIntervalSinceReferenceDate.getter(v15);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  static Logger.cloudSync.getter(v17);
  LOBYTE(v10) = static os_log_type_t.default.getter();
  v18 = swift_bridgeObjectRetain_n(a2, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = v10;
  if (os_log_type_enabled(v19, (os_log_type_t)v10))
  {
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(32, -1);
    v44 = v3;
    v23 = v22;
    v46[0] = v22;
    *(_DWORD *)v21 = 136315394;
    v43 = v6;
    swift_bridgeObjectRetain(a2);
    v24 = Optional<A>.description.getter(a1, a2);
    v42 = a1;
    v25 = v24;
    v27 = v26;
    swift_bridgeObjectRelease(a2);
    v45 = sub_10003D274(v25, v27, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v21 + 12) = 2048;
    v45 = *(_QWORD *)&v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v21 + 14, v21 + 22);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "[Interests] Bumping InterestSync version: %s, interestLastSyncTimestamp: %f, isInterestSyncDirty = false.", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v28 = v23;
    v3 = v44;
    swift_slowDealloc(v28, -1, -1);
    v29 = v21;
    v30 = v42;
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v43);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v30 = a1;
  }
  v31 = v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, v46, 33, 0);
  v32 = *(_QWORD *)(v31 + 24);
  v33 = *(_QWORD *)(v31 + 32);
  sub_100038DEC(v31, v32);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v33 + 72);
  v35 = swift_bridgeObjectRetain(a2);
  v34(v30, a2, v32, v33, v35);
  v36 = *(_QWORD *)(v31 + 24);
  v37 = *(_QWORD *)(v31 + 32);
  sub_100038DEC(v31, v36);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v37 + 24))(0, v36, v37);
  v38 = *(_QWORD *)(v31 + 24);
  v39 = *(_QWORD *)(v31 + 32);
  sub_100038DEC(v31, v38);
  (*(void (**)(double, _QWORD, uint64_t, uint64_t))(v39 + 48))(COERCE_DOUBLE(*(_QWORD *)&v16), 0, v38, v39);
  return swift_endAccess(v46);
}

uint64_t sub_1001DE3B4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (result)
    *a2 = result;
  else
    __break(1u);
  return result;
}

void sub_1001DE3C4(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13;

  v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, a3, a4, v13, a6, a7, a1, a2);
}

id sub_1001DE444(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  id v14;
  uint64_t v16;
  objc_super v17;
  _QWORD v18[5];

  v6 = type metadata accessor for OSSignposter(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[3] = type metadata accessor for InterestSyncStorage();
  v18[4] = &protocol witness table for InterestSyncStorage;
  v18[0] = a1;
  v10 = a3;
  v11 = static OSSignposter.interests.getter();
  v12 = OSSignposter.logHandle.getter(v11);
  OSSignpostID.init(log:)(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState] = 0;
  sub_10000A520((uint64_t)v18, (uint64_t)&v10[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage]);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_cloudSyncBugReporter] = a2;
  swift_unknownObjectRetain(a2);

  v13 = (objc_class *)type metadata accessor for InterestSyncProcessor(0);
  v17.receiver = v10;
  v17.super_class = v13;
  v14 = objc_msgSendSuper2(&v17, "init");
  sub_10003D380(v18);
  return v14;
}

uint64_t sub_1001DE578(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  char v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_signpost_id_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];
  uint64_t v63;
  uint64_t v64;

  v3 = v2;
  v51 = a1;
  v5 = type metadata accessor for Logger(0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v49 - v13;
  v15 = type metadata accessor for OSSignposter(0);
  v53 = *(_QWORD *)(v15 - 8);
  v54 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OSSignposter.cloudSync.getter(v16);
  v52 = v9;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v58(v14, v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostID, v8);
  v19 = swift_bridgeObjectRetain_n(a2, 2);
  v20 = OSSignposter.logHandle.getter(v19);
  v50 = static os_signpost_type_t.begin.getter(v20);
  v21 = OS_os_log.signpostsEnabled.getter();
  v55 = v7;
  if ((v21 & 1) != 0)
  {
    v58(v12, (uint64_t)v14, v8);
    v22 = swift_slowAlloc(12, -1);
    v49 = v2;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v62[0] = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(a2);
    v60 = sub_10003D274(v51, a2, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v23 + 4, v23 + 12);
    v25 = swift_bridgeObjectRelease_n(a2, 3);
    v26 = OSSignpostID.rawValue.getter(v25);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, (os_signpost_type_t)v50, v26, "InterestSyncProcessor.GET", "%s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v27 = v24;
    v7 = v55;
    swift_slowDealloc(v27, -1, -1);
    v28 = v23;
    v3 = v49;
    swift_slowDealloc(v28, -1, -1);

    v29 = v52;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v8);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

    v29 = v52;
  }
  v58(v12, (uint64_t)v14, v8);
  v30 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = OSSignpostIntervalState.init(id:isOpen:)(v12, 1);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v8);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v18, v54);
  v32 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState) = v31;
  swift_release(v32);
  v33 = v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, &v60, 0, 0);
  sub_10000A520(v33, (uint64_t)v62);
  v34 = v63;
  v35 = v64;
  sub_10003A834(v62, v63);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 64))(v34, v35);
  v38 = v37;
  v39 = sub_10003D380(v62);
  static Logger.cloudSync.getter(v39);
  LOBYTE(v35) = static os_log_type_t.default.getter();
  v40 = swift_bridgeObjectRetain_n(v38, 2);
  v41 = Logger.logObject.getter(v40);
  v42 = v35;
  if (os_log_type_enabled(v41, (os_log_type_t)v35))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v62[0] = v44;
    *(_DWORD *)v43 = 136315138;
    swift_bridgeObjectRetain(v38);
    v45 = Optional<A>.description.getter(v36, v38);
    v47 = v46;
    swift_bridgeObjectRelease(v38);
    v59 = sub_10003D274(v45, v47, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease_n(v38, 2);
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "[Interests] Version for Get transaction: %s", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
  }
  else
  {

    swift_bridgeObjectRelease_n(v38, 2);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v7, v57);
  }
  return v36;
}

uint64_t sub_1001DEA64(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  NSObject *v21;
  char v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_signpost_id_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  os_log_type_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSString v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  char v67;
  char v68;
  id v69;
  id v70;
  _QWORD *v71;
  Class isa;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSString v90;
  unsigned __int8 *v91;
  unsigned int v92;
  uint64_t v93;
  char v94;
  _BYTE v95[4];
  int v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  void (*v106)(_BYTE *, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[3];
  uint64_t v111;
  uint64_t v112;

  v100 = a1;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v105 = &v95[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v95[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v95[-v14];
  v16 = type metadata accessor for OSSignposter(0);
  v102 = *(_QWORD *)(v16 - 8);
  v103 = v16;
  v17 = __chkstk_darwin(v16);
  v19 = &v95[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static OSSignposter.cloudSync.getter(v17);
  v104 = v3;
  v101 = v10;
  v106 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
  v106(v15, v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostID, v9);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v21 = OSSignposter.logHandle.getter(v20);
  v96 = static os_signpost_type_t.begin.getter(v21);
  v22 = OS_os_log.signpostsEnabled.getter();
  v98 = v6;
  v99 = a3;
  v97 = v7;
  if ((v22 & 1) != 0)
  {
    v106(v13, (uint64_t)v15, v9);
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v110[0] = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(a2);
    v108 = sub_10003D274(v100, a2, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v23 + 4, v23 + 12);
    v25 = swift_bridgeObjectRelease_n(a2, 3);
    v26 = OSSignpostID.rawValue.getter(v25);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, (os_signpost_type_t)v96, v26, "InterestSyncProcessor.SET", "%s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v27 = v101;
    (*(void (**)(_BYTE *, uint64_t))(v101 + 8))(v13, v9);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

    v27 = v101;
  }
  v106(v13, (uint64_t)v15, v9);
  v28 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = OSSignpostIntervalState.init(id:isOpen:)(v13, 1);
  (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v15, v9);
  (*(void (**)(_BYTE *, uint64_t))(v102 + 8))(v19, v103);
  v30 = v104;
  v31 = *(_QWORD *)(v104 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState);
  *(_QWORD *)(v104 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState) = v29;
  swift_release(v31);
  v32 = v30 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v30 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, &v108, 0, 0);
  sub_10000A520(v32, (uint64_t)v110);
  v33 = v111;
  v34 = v112;
  sub_10003A834(v110, v111);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 112))(v33, v34);
  v36 = sub_10003D380(v110);
  v37 = v105;
  if (!*(_QWORD *)(v35 + 16))
  {
    sub_10000A520(v32, (uint64_t)v110);
    v55 = v111;
    v56 = v112;
    sub_10003A834(v110, v111);
    v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 64))(v55, v56);
    if (!v58)
    {
      v36 = sub_10003D380(v110);
      goto LABEL_5;
    }
    v59 = v57;
    v60 = v58;
    result = sub_10003D380(v110);
    v62 = HIBYTE(v60) & 0xF;
    v63 = v59 & 0xFFFFFFFFFFFFLL;
    if ((v60 & 0x2000000000000000) != 0)
      v64 = HIBYTE(v60) & 0xF;
    else
      v64 = v59 & 0xFFFFFFFFFFFFLL;
    if (!v64)
    {
      swift_bridgeObjectRelease(v60);
      goto LABEL_5;
    }
    if ((v60 & 0x1000000000000000) != 0)
    {
      v66 = sub_1002D6014(v59, v60, 10);
      v68 = v94;
      goto LABEL_60;
    }
    if ((v60 & 0x2000000000000000) == 0)
    {
      if ((v59 & 0x1000000000000000) != 0)
        v65 = (unsigned __int8 *)((v60 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v65 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v59, v60);
      v66 = (uint64_t)sub_1002D6000(v65, v63, 10);
      v68 = v67 & 1;
LABEL_60:
      swift_bridgeObjectRelease(v60);
      if ((v68 & 1) == 0 && v66 >= 11)
      {
        v85 = *(void **)(v30 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_cloudSyncBugReporter);
        sub_10000A520(v32, (uint64_t)v110);
        v86 = v111;
        v87 = v112;
        sub_10003A834(v110, v111);
        (*(void (**)(uint64_t, uint64_t))(v87 + 64))(v86, v87);
        if (v88)
        {
          v89 = v88;
          v90 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v89);
        }
        else
        {
          v90 = 0;
        }
        sub_10003D380(v110);
        objc_msgSend(v85, "reportInterestSyncIssue:version:userInfo:", 0, v90, 0);

      }
      goto LABEL_5;
    }
    v110[0] = v59;
    v110[1] = v60 & 0xFFFFFFFFFFFFFFLL;
    if (v59 == 43)
    {
      if (!v62)
        goto LABEL_76;
      if (v62 == 1 || (BYTE1(v59) - 48) > 9u)
        goto LABEL_47;
      v66 = (BYTE1(v59) - 48);
      if (v62 != 2)
      {
        if ((BYTE2(v59) - 48) > 9u)
          goto LABEL_47;
        v66 = 10 * (BYTE1(v59) - 48) + (BYTE2(v59) - 48);
        v76 = v62 - 3;
        if (v76)
        {
          v77 = (unsigned __int8 *)v110 + 3;
          while (1)
          {
            v78 = *v77 - 48;
            if (v78 > 9)
              goto LABEL_47;
            v79 = 10 * v66;
            if ((unsigned __int128)(v66 * (__int128)10) >> 64 != (10 * v66) >> 63)
              goto LABEL_47;
            v66 = v79 + v78;
            if (__OFADD__(v79, v78))
              goto LABEL_47;
            v68 = 0;
            ++v77;
            if (!--v76)
              goto LABEL_60;
          }
        }
      }
    }
    else
    {
      if (v59 == 45)
      {
        if (v62)
        {
          if (v62 != 1 && (BYTE1(v59) - 48) <= 9u)
          {
            if (v62 == 2)
            {
              v68 = 0;
              v66 = -(uint64_t)(BYTE1(v59) - 48);
              goto LABEL_60;
            }
            if ((BYTE2(v59) - 48) <= 9u)
            {
              v66 = -10 * (BYTE1(v59) - 48) - (BYTE2(v59) - 48);
              v84 = v62 - 3;
              if (!v84)
                goto LABEL_59;
              v91 = (unsigned __int8 *)v110 + 3;
              while (1)
              {
                v92 = *v91 - 48;
                if (v92 > 9)
                  break;
                v93 = 10 * v66;
                if ((unsigned __int128)(v66 * (__int128)10) >> 64 != (10 * v66) >> 63)
                  break;
                v66 = v93 - v92;
                if (__OFSUB__(v93, v92))
                  break;
                v68 = 0;
                ++v91;
                if (!--v84)
                  goto LABEL_60;
              }
            }
          }
LABEL_47:
          v66 = 0;
          v68 = 1;
          goto LABEL_60;
        }
        __break(1u);
LABEL_76:
        __break(1u);
        return result;
      }
      if (!v62 || (v59 - 48) > 9u)
        goto LABEL_47;
      v66 = (v59 - 48);
      if (v62 != 1)
      {
        if ((BYTE1(v59) - 48) > 9u)
          goto LABEL_47;
        v66 = 10 * (v59 - 48) + (BYTE1(v59) - 48);
        v80 = v62 - 2;
        if (v80)
        {
          v81 = (unsigned __int8 *)v110 + 2;
          while (1)
          {
            v82 = *v81 - 48;
            if (v82 > 9)
              goto LABEL_47;
            v83 = 10 * v66;
            if ((unsigned __int128)(v66 * (__int128)10) >> 64 != (10 * v66) >> 63)
              goto LABEL_47;
            v66 = v83 + v82;
            if (__OFADD__(v83, v82))
              goto LABEL_47;
            v68 = 0;
            ++v81;
            if (!--v80)
              goto LABEL_60;
          }
        }
      }
    }
LABEL_59:
    v68 = 0;
    goto LABEL_60;
  }
LABEL_5:
  static Logger.cloudSync.getter(v36);
  v38 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n(a2, 2);
  v39 = swift_bridgeObjectRetain_n(v35, 2);
  v40 = Logger.logObject.getter(v39);
  if (os_log_type_enabled(v40, v38))
  {
    v41 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(64, -1);
    v110[0] = v42;
    *(_DWORD *)v41 = 136315394;
    swift_bridgeObjectRetain(v35);
    v43 = sub_10003F544(&qword_1005549E0);
    v44 = Array.description.getter(v35, v43);
    v45 = v32;
    v47 = v46;
    swift_bridgeObjectRelease(v35);
    v107 = sub_10003D274(v44, v47, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease_n(v35, 2);
    v48 = v47;
    v32 = v45;
    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v41 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v107 = sub_10003D274(v100, a2, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v40, v38, "[Interests] Providing data for SET transaction. interests: %s, key: %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

    (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v105, v98);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease_n(v35, 2);
    (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v37, v98);
  }
  v49 = v99;
  sub_10000A520(v32, (uint64_t)v110);
  v50 = v111;
  v51 = v112;
  sub_10003A834(v110, v111);
  (*(void (**)(uint64_t, uint64_t))(v51 + 64))(v50, v51);
  if (v52)
  {
    v53 = v52;
    v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v53);
  }
  else
  {
    v54 = 0;
  }
  sub_10003D380(v110);
  v69 = v54;
  *v49 = v54;
  v70 = objc_msgSend(objc_allocWithZone((Class)MZKeyValueStoreNode), "init");
  v71 = sub_100179088(v35);
  swift_bridgeObjectRelease(v35);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v70, "setArrayValue:", isa, swift_bridgeObjectRelease(v71).n128_f64[0]);

  v73 = objc_msgSend(v70, "value");
  if (v73)
  {
    v74 = v73;
    v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v73);

  }
  else
  {

    return 0;
  }
  return v75;
}

void sub_1001DF460(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  os_log_type_t v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *(*v43)();
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  char *v53;
  void *v54;
  NSObject *(*v55)();
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v60;
  id v61;
  id v62;
  char *v63;
  uint64_t v64;
  char *v65;
  __n128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t aBlock;
  _QWORD v79[2];
  void *v80;
  NSObject *(*v81)();
  _QWORD *v82;
  _BYTE v83[24];
  uint64_t v84;

  v3 = type metadata accessor for Logger(0);
  v72 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v68 = (char *)&v62 - v7;
  v8 = sub_10003F544(&qword_100558F70);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v76 = (uint64_t)&v62 - v12;
  v13 = type metadata accessor for RemoteInterest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v75 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v69 = (char *)&v62 - v17;
  v18 = objc_msgSend(objc_allocWithZone((Class)MZKeyValueStoreNode), "init");
  isa = 0;
  if (a2 >> 60 != 15)
    isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v18, "setValue:", isa);

  v20 = objc_msgSend(v18, "hasData");
  if ((_DWORD)v20)
  {
    v21 = objc_msgSend(v18, "arrayValue");
    if (!v21
      || (v22 = v21,
          v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, (char *)&type metadata for Any + 8),
          v22,
          v24 = sub_10034EFCC(v23),
          swift_bridgeObjectRelease(v23),
          !v24))
    {
      swift_bridgeObjectRelease(0);
      v24 = _swiftEmptyArrayStorage;
    }
    v74 = v24[2];
    if (v74)
    {
      v62 = v18;
      v25 = swift_bridgeObjectRetain(v24);
      v26 = 0;
      v77 = _swiftEmptyArrayStorage;
      v25.n128_u64[0] = 136380675;
      v66 = v25;
      v65 = (char *)&type metadata for Any + 8;
      v73 = v24;
      v67 = v3;
      v70 = v14;
      v71 = v11;
      v64 = v13;
      do
      {
        v27 = swift_bridgeObjectRetain(v24[v26 + 4]);
        RemoteInterest.init(dictionary:)(v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
        v28 = v76;
        sub_1001E05F4((uint64_t)v11, v76);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v28, 1, v13) == 1)
        {
          sub_1001E0550(v28);
        }
        else
        {
          v29 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 32);
          v30 = v69;
          v29(v69, v28, v13);
          v29(v75, (uint64_t)v30, v13);
          if ((swift_isUniquelyReferenced_nonNull_native(v77) & 1) != 0)
            v31 = (unint64_t)v77;
          else
            v31 = sub_10027B988(0, v77[2] + 1, 1, (unint64_t)v77);
          v33 = *(_QWORD *)(v31 + 16);
          v32 = *(_QWORD *)(v31 + 24);
          if (v33 >= v32 >> 1)
            v31 = sub_10027B988(v32 > 1, v33 + 1, 1, v31);
          *(_QWORD *)(v31 + 16) = v33 + 1;
          v34 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
          v77 = (_QWORD *)v31;
          v29((char *)(v31 + v34 + *(_QWORD *)(v14 + 72) * v33), (uint64_t)v75, v13);
          v24 = v73;
        }
        ++v26;
      }
      while (v74 != v26);
      swift_bridgeObjectRelease_n(v24, 2);
      v18 = v62;
      v51 = v77;
    }
    else
    {
      swift_bridgeObjectRelease(v24);
      v51 = _swiftEmptyArrayStorage;
    }
    v52 = v63;
    v53 = &v63[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage];
    swift_beginAccess(&v63[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage], v83, 0, 0);
    sub_10000A520((uint64_t)v53, (uint64_t)&aBlock);
    v54 = v80;
    v55 = v81;
    sub_10003A834(&aBlock, (uint64_t)v80);
    v56 = (void *)(*((uint64_t (**)(void *, NSObject *(*)()))v55 + 1))(v54, v55);
    sub_10003D380(&aBlock);
    v57 = swift_allocObject(&unk_1004B4200, 24, 7);
    swift_unknownObjectWeakInit(v57 + 16, v52);
    v58 = (_QWORD *)swift_allocObject(&unk_1004B4228, 40, 7);
    v58[2] = v57;
    v58[3] = v51;
    v58[4] = v56;
    v81 = sub_1001E05E8;
    v82 = v58;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v79[0] = 1107296256;
    v79[1] = sub_100027AF8;
    v80 = &unk_1004B4240;
    v59 = _Block_copy(&aBlock);
    v60 = v82;
    v61 = v56;
    swift_release(v60);
    objc_msgSend(v61, "performBlockAndWaitWithSave:", v59);
    _Block_release(v59);

  }
  else
  {
    static Logger.cloudSync.getter(v20);
    v35 = static os_log_type_t.default.getter();
    v36 = v63;
    v37 = Logger.logObject.getter(v36);
    v38 = v35;
    if (os_log_type_enabled(v37, v35))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v62 = v18;
      v41 = v40;
      *(_DWORD *)v39 = 136315138;
      v84 = v40;
      v77 = v39 + 4;
      v42 = (uint64_t)&v36[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage];
      swift_beginAccess(&v36[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage], v83, 0, 0);
      sub_10000A520(v42, (uint64_t)&aBlock);
      v67 = v3;
      v44 = v80;
      v43 = v81;
      sub_10003A834(&aBlock, (uint64_t)v80);
      v45 = (*((uint64_t (**)(void *, NSObject *(*)()))v43 + 8))(v44, v43);
      v47 = v46;
      sub_10003D380(&aBlock);
      v48 = Optional<A>.description.getter(v45, v47);
      v50 = v49;
      swift_bridgeObjectRelease(v47);
      aBlock = sub_10003D274(v48, v50, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v79, v77, v39 + 12);

      swift_bridgeObjectRelease(v50);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "[Interests] Empty remote Interests key for current version %s. Nothing to merge.", v39, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      (*(void (**)(char *, uint64_t))(v72 + 8))(v6, v67);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v72 + 8))(v6, v3);
    }
  }
}

void sub_1001DFD1C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_log_type_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  void (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v9 = v8;
  v33 = a5;
  v34 = a6;
  v30 = a3;
  v31 = a1;
  v32 = a2;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter(v15);
  v18 = static os_log_type_t.default.getter();
  v19 = swift_bridgeObjectRetain_n(a4, 2);
  v20 = Logger.logObject.getter(v19);
  if (os_log_type_enabled(v20, v18))
  {
    v29 = v9;
    v21 = swift_slowAlloc(12, -1);
    v27 = a7;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v28 = a8;
    v24 = v23;
    v36 = v23;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain(a4);
    v35 = sub_10003D274(v30, a4, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v18, "[Interests] Updating local cache after GET transaction for key %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v25 = v24;
    a8 = v28;
    swift_slowDealloc(v25, -1, -1);
    v26 = v22;
    a7 = v27;
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  sub_1001DF460(v31, v32);
  sub_1001DC69C(v33, v34, a7, a8);
}

void sub_1001DFF18(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  os_log_type_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  void (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v7 = v6;
  v28 = a3;
  v29 = a4;
  v27 = a1;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter(v13);
  v16 = static os_log_type_t.default.getter();
  v17 = swift_bridgeObjectRetain_n(a2, 2);
  v18 = Logger.logObject.getter(v17);
  if (os_log_type_enabled(v18, v16))
  {
    v24 = a5;
    v19 = swift_slowAlloc(12, -1);
    v25 = a6;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v26 = v7;
    v22 = v21;
    v31 = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(a2);
    v30 = sub_10003D274(v27, a2, &v31);
    a5 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v18, v16, "[Interests] Successful SET transaction for key %s, marking everything as synced and finishing normally.", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v23 = v20;
    a6 = v25;
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  sub_1001DC69C(v28, v29, a5, a6);
}

uint64_t sub_1001E0108(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_log_type_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t (*v40)(_QWORD);
  uint64_t v41;
  uint64_t v42[3];

  v9 = v8;
  v39 = a2;
  v40 = a7;
  v36 = a3;
  v38 = a1;
  v37 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v37 - 8);
  v15 = __chkstk_darwin(v37);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter(v15);
  v18 = static os_log_type_t.default.getter();
  v19 = swift_bridgeObjectRetain_n(a4, 2);
  v20 = Logger.logObject.getter(v19);
  if (os_log_type_enabled(v20, v18))
  {
    v35 = a6;
    v21 = swift_slowAlloc(12, -1);
    v33 = a8;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v34 = a5;
    v24 = v23;
    v42[0] = v23;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain(a4);
    v41 = sub_10003D274(v36, a4, v42);
    a6 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v18, "[Interests] Failure on SET transaction for key %s, Bookkeeper copy has diverged from local copy, we must merge both.", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v25 = v24;
    a5 = v34;
    swift_slowDealloc(v25, -1, -1);
    v26 = v22;
    a8 = v33;
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v37);
  sub_1001DF460(v38, v39);
  sub_1001DCD90(v40, a8);
  v27 = v9 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess(v9 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage, v42, 33, 0);
  v28 = *(_QWORD *)(v27 + 24);
  v29 = *(_QWORD *)(v27 + 32);
  sub_100038DEC(v27, v28);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v29 + 72);
  v31 = swift_bridgeObjectRetain(a6);
  v30(a5, a6, v28, v29, v31);
  return swift_endAccess(v42);
}

uint64_t sub_1001E0360()
{
  return type metadata accessor for InterestSyncProcessor(0);
}

uint64_t sub_1001E0368(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "(";
  v4[1] = &unk_1003CD970;
  result = type metadata accessor for OSSignpostID(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1003CD988;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001E03F0()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  void (*v3)(_QWORD *, _QWORD, uint64_t);
  char v4;
  _QWORD *v5;
  char v6;
  void *v7;
  _QWORD v9[3];
  uint64_t v10;
  unint64_t v11;

  v0 = type metadata accessor for Podcasts(0);
  v10 = v0;
  v1 = sub_1001E04E4();
  v11 = v1;
  v2 = sub_1000242A8(v9);
  v3 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104);
  v3(v2, enum case for Podcasts.ponderosa(_:), v0);
  v4 = isFeatureEnabled(_:)(v9);
  sub_10003D380(v9);
  if ((v4 & 1) != 0
    && (v10 = v0,
        v11 = v1,
        v5 = sub_1000242A8(v9),
        v3(v5, enum case for Podcasts.ponderosaSync(_:), v0),
        v6 = isFeatureEnabled(_:)(v9),
        sub_10003D380(v9),
        (v6 & 1) != 0)
    && (v7 = (void *)objc_opt_self(PFClientUtil),
        (objc_msgSend(v7, "isRunningOnHomepod") & 1) == 0))
  {
    return objc_msgSend(v7, "isRunningOnTV") ^ 1;
  }
  else
  {
    return 0;
  }
}

unint64_t sub_1001E04E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100554040;
  if (!qword_100554040)
  {
    v1 = type metadata accessor for Podcasts(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Podcasts, v1);
    atomic_store(result, (unint64_t *)&qword_100554040);
  }
  return result;
}

uint64_t sub_1001E052C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E0550(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_100558F70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

